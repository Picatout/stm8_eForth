ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "../inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 ÂµC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                        	.include "../inc/stm8s_disco.inc"
                                        ;-------------------------------------
                                        ; STM8S-Discovery card 
                                        ;-------------------------------------
                                        
                                        
                                 
                                 
                                 
                                        
                                        
                                        ; LD1 LED 
                                 
                                 
                                 
                                        
                                        ; BEEP
                                 
                                 
                                 
                                        
                                        ; TS1 
                                        ; use TIMER 1 3 channels 
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacÃ© le numÃ©ro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           0007FF    90 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    91 DATSTK  =	0x680	;data stack  empty
                           000680    92 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    93 TIBBASE =       0X700  ; transaction input buffer addr.
                                     94 
                                     95 
                                     96 
                                     97 ;; Memory allocation
                                     98 
                           000006    99 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   100 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   101 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   102 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   103 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   104 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   105 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    106 
                                    107 ; user variables constants 
                           000006   108 UBASE = UPP       ; numeric base 
                           000008   109 UTMP = UBASE+2    ; temporary storage
                           00000A   110 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   111 UCTIB = UINN+2    ; tib count 
                           00000E   112 UTIB = UCTIB+2    ; tib address 
                           000010   113 UINTER = UTIB+2   ; interpreter vector 
                           000012   114 UHLD = UINTER+2   ; hold 
                           000014   115 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   116 UVP = UCNTXT+2    ; variable pointer 
                           000018   117 UCP = UVP+2      ; code pointer
                           00001A   118 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   119 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   120 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   121 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    122 
                                    123 ;******  System Variables  ******
                           000022   124 XTEMP	=	URLAST +2;address called by CREATE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000024   125 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   126 PROD1 = XTEMP	;space for UM*
                           000024   127 PROD2 = PROD1+2
                           000026   128 PROD3 = PROD2+2
                           000028   129 CARRY = PROD3+2
                           00002A   130 SP0	= CARRY+2	;initial data stack pointer
                           00002C   131 RP0	= SP0+2		;initial return stack pointer
                           00002E   132 MS    =   RP0+2         ; millisecond counter 
                           000030   133 CNTDWN =  MS+2          ; count down timer 
                           000032   134 PTR16 = CNTDWN+2         ; 24 bits farptr 
                           000033   135 PTR8 = PTR16+1           ; least byte of farptr 
                           000035   136 SEEDX = PTR8+2          ; PRNG seed X 
                           000037   137 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    138 
                                    139 ; EEPROM persistant system variables in EEPROM   
                           004000   140 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   141 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   142 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   143 APP_VP = APP_CP+2  ; free data space pointer 
                                    144 
                                    145 
                                    146 ;***********************************************
                                    147 ;; Version control
                                    148 
                           000003   149 VER     =     3         ;major release version
                           000000   150 EXT     =     0         ;minor extension
                                    151 
                                    152 ;; Constants
                                    153 
                           00FFFF   154 TRUEE   =     0xFFFF      ;true flag
                                    155 
                           000040   156 COMPO   =     0x40     ;lexicon compile only bit
                           000080   157 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   158 MASKK   =     0x1F7F  ;lexicon bit mask
                                    159 
                           000002   160 CELLL   =     2       ;size of a cell
                           00000A   161 BASEE   =     10      ;default radix
                           000008   162 BKSPP   =     8       ;back space
                           00000A   163 LF      =     10      ;line feed
                           00000D   164 CRR     =     13      ;carriage return
                           00001B   165 ERR     =     27      ;error escape
                           000027   166 TIC     =     39      ;tick
                           0000CD   167 CALLL   =     0xCD     ;CALL opcodes
                           000080   168 IRET_CODE =   0x80    ; IRET opcode 
                                    169 
                                    170         .macro _ledon
                                    171         bres PD_ODR,#LD1_BIT
                                    172         .endm
                                    173 
                                    174         .macro _ledoff
                                    175         bset PD_ODR,#LD1_BIT
                                    176         .endm
                                    177 
                                    178 
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .area DATA (ABS)
      000000                        181         .org RAMBASE 
                                    182 ;**********************************************************
                                    183 
                                    184 ;**********************************************************
                                    185         .area SSEG (ABS) ; STACK
      001700                        186         .org 0x1700
      001700                        187         .ds 256 
                                    188 ; space for DATSTK,TIB and STACK         
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area HOME ; vectors table
                                    193 ;**********************************************************
      000000 82 00 00 1A            194 	int main	        ; reset
                           000001   195 DEBUG=1
                           000001   196 .if DEBUG
      000004 82 00 00 00            197         int TrapHandler ;
                           000000   198 .else
                                    199 	int NonHandledInterrupt	; trap
                                    200 .endif 
      000008 82 00 00 04            201 	int NonHandledInterrupt	; irq0 TLI
      00000C 82 00 00 04            202 	int NonHandledInterrupt	; irq1 AWU 
      000010 82 00 00 04            203 	int NonHandledInterrupt	; irq2 CLK 
      000014 82 00 00 04            204 	int NonHandledInterrupt	; irq3 EXTI0
      000018 82 00 00 04            205 	int NonHandledInterrupt	; irq4 EXTI1 
      00001C 82 00 00 04            206 	int NonHandledInterrupt	; irq5 EXTI2 
      000020 82 00 00 04            207 	int NonHandledInterrupt	; irq6 EXTI3
      000024 82 00 00 04            208 	int NonHandledInterrupt	; irq7 EXTI4 
      000028 82 00 00 04            209 	int NonHandledInterrupt	; irq8 reserved
      00002C 82 00 00 04            210 	int NonHandledInterrupt	; irq9 reserved 
      000030 82 00 00 04            211 	int NonHandledInterrupt	; irq10 SPI
      000034 82 00 00 04            212 	int NonHandledInterrupt	; irq11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 04            213 	int NonHandledInterrupt	; irq12 TIM1 capture/compare
      00003C 82 00 00 04            214 	int NonHandledInterrupt	; irq13 TIM2 update/overflow
      000040 82 00 00 04            215 	int NonHandledInterrupt	; irq14 TIM2 capture/compare 
      000044 82 00 00 04            216 	int NonHandledInterrupt	; irq15 TIM3 update/overflow
      000048 82 00 00 04            217 	int NonHandledInterrupt	; irq16 TIM3 capture/compare 
      00004C 82 00 00 04            218 	int NonHandledInterrupt	; irq17 reserved
      000050 82 00 00 04            219 	int NonHandledInterrupt	; irq18 reserved 
      000054 82 00 00 04            220 	int NonHandledInterrupt	; irq19 I2C interrupt
      000058 82 00 00 04            221 	int NonHandledInterrupt	; irq20 UART2 tx complete  
      00005C 82 00 00 04            222 	int NonHandledInterrupt	; irq21 UART2 rx buffer full
      000060 82 00 00 04            223 	int NonHandledInterrupt	; irq22 ADC1 end of conversion/analog watchdog interrupt
      000064 82 00 00 09            224 	int Timer4Handler	; irq23 TIM4 update/overflow
      000068 82 00 00 04            225 	int NonHandledInterrupt	; irq24 FLASH EOP/WR_PG_DIS 
      00006C 82 00 00 04            226 	int NonHandledInterrupt	; irq25 resserved
      000070 82 00 00 04            227 	int NonHandledInterrupt	; irq26 reserved 
      000074 82 00 00 04            228 	int NonHandledInterrupt	; irq27 reserved
      000078 82 00 00 04            229 	int NonHandledInterrupt	; irq28 reserved 
      00007C 82 00 00 04            230 	int NonHandledInterrupt	; irq29 reserved 
                                    231 
                                    232 ;**********************************************************
                                    233         .area CODE
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 
                           000001   236 .if DEBUG 
      000000                        237 TrapHandler:
      000000 CD 18 B2         [ 4]  238         call DOTS 
      000003 80               [11]  239         iret 
                                    240 .endif 
                                    241 
                                    242 
                                    243 ; non handled interrupt reset MCU
      000004                        244 NonHandledInterrupt:
      000004 A6 80            [ 1]  245         ld a, #0x80
      000006 C7 50 D1         [ 1]  246         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    247 	;iret
                                    248 
                                    249 ; used for milliseconds counter 
                                    250 ; MS is 16 bits counter 
      000009                        251 Timer4Handler:
      000009 72 5F 53 42      [ 1]  252 	clr TIM4_SR 
      00000D BE 2E            [ 2]  253         ldw x,MS 
      00000F 5C               [ 2]  254         incw x 
      000010 BF 2E            [ 2]  255         ldw MS,x
      000012 BE 30            [ 2]  256         ldw x,CNTDWN 
      000014 27 03            [ 1]  257         jreq 1$
      000016 5A               [ 2]  258         decw x 
      000017 BF 30            [ 2]  259         ldw CNTDWN,x 
      000019                        260 1$:         
      000019 80               [11]  261         iret 
                                    262 
                                    263 
                                    264 ;; Main entry points and COLD start data
      00001A                        265 main:
                                    266 ; clear all RAM
      00001A AE 00 00         [ 2]  267 	ldw X,#RAMBASE
      00001D                        268 clear_ram0:
      00001D 7F               [ 1]  269 	clr (X)
      00001E 5C               [ 2]  270 	incw X
      00001F A3 07 FF         [ 2]  271 	cpw X,#RAM_END
      000022 23 F9            [ 2]  272 	jrule clear_ram0
      000024 AE 07 FF         [ 2]  273         ldw x,#RPP
      000027 94               [ 1]  274         ldw sp,x
                                    275 ; set SEEDX and SEEDY to 1 
      000028 3C 36            [ 1]  276         inc SEEDX+1 
      00002A 3C 38            [ 1]  277         inc SEEDY+1          
      00002C CC 00 4B         [ 2]  278 	jp ORIG
                                    279 
                                    280 ; COLD initialize these variables.
      00002F                        281 UZERO:
      00002F 00 0A                  282         .word      BASEE   ;BASE
      000031 00 00                  283         .word      0       ;tmp
      000033 00 00                  284         .word      0       ;>IN
      000035 00 00                  285         .word      0       ;#TIB
      000037 07 00                  286         .word      TIBB    ;TIB
      000039 12 ED                  287         .word      INTER   ;'EVAL
      00003B 00 00                  288         .word      0       ;HLD
      00003D 20 75                  289         .word      LASTN  ;CNTXT pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00003F 00 80                  290         .word      VAR_BASE   ;variables free space pointer 
      000041 21 00                  291         .word      app_space ; FLASH free space pointer 
      000043 20 75                  292         .word      LASTN   ;LAST
      000045 00 00                  293         .word      0        ; OFFSET 
      000047 00 00                  294         .word      0       ; TFLASH
                                    295 ;       .word      0       ; URLAST   
      000049 00 00                  296 UEND:   .word      0
                                    297 
      00004B                        298 ORIG:   
                                    299 ; initialize SP
      00004B AE 07 FF         [ 2]  300         LDW     X,#STACK  ;initialize return stack
      00004E 94               [ 1]  301         LDW     SP,X
      00004F BF 2C            [ 2]  302         LDW     RP0,X
      000051 AE 06 80         [ 2]  303         LDW     X,#DATSTK ;initialize data stack
      000054 BF 2A            [ 2]  304         LDW     SP0,X
                                    305 ; initialize PD_0 as output to control LED2
                                    306 ; added by Picatout 
      000056 72 10 50 12      [ 1]  307         bset PD_CR1,#LD1_BIT
      00005A 72 10 50 13      [ 1]  308         bset PD_CR2,#LD1_BIT
      00005E 72 10 50 11      [ 1]  309         bset PD_DDR,#LD1_BIT
      000062                        310         _ledoff
      000062 72 10 50 0F      [ 1]    1         bset PD_ODR,#LD1_BIT
                                    311 ; initialize clock to HSE
                                    312 ; no divisor 16Mhz 
                                    313 ; Added by Picatout 
      000066                        314 clock_init:
      000066 72 5F 50 C6      [ 1]  315         clr CLK_CKDIVR
      00006A 72 12 50 C5      [ 1]  316 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00006E A6 B4            [ 1]  317 	ld a,#CLK_SWR_HSE
      000070 C7 50 C4         [ 1]  318 	ld CLK_SWR,a
      000073 C1 50 C3         [ 1]  319 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  320 	jrne 1$
                                    321         
                                    322 ; initialize UART1, 115200 8N1
      000078                        323 uart2_init:
      000078 72 16 50 C7      [ 1]  324 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    325 	; configure tx pin
      00007C 72 1A 50 11      [ 1]  326 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      000080 72 1A 50 12      [ 1]  327 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000084 72 1A 50 13      [ 1]  328 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    329 	; baud rate 115200 Fmaster=8Mhz  
      000088 35 0B 52 43      [ 1]  330 	mov UART2_BRR2,#0x0b ; must be loaded first
      00008C 35 08 52 42      [ 1]  331 	mov UART2_BRR1,#0x8
      000090 35 0C 52 45      [ 1]  332 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    333 ; initialize timer4, used for millisecond interrupt  
      000094 35 07 53 45      [ 1]  334 	mov TIM4_PSCR,#7 ; prescale 128  
      000098 35 7D 53 46      [ 1]  335 	mov TIM4_ARR,#125 ; set for 1msec.
      00009C 35 05 53 40      [ 1]  336 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A0 72 10 53 41      [ 1]  337 	bset TIM4_IER,#TIM4_IER_UIE 
                                    338 ; set TIM4 interrupt priority to highest
      0000A4 A6 3F            [ 1]  339         ld a,#~(IPR_MASK<<6)
      0000A6 C4 7F 75         [ 1]  340         and a,ITC_SPR6
      0000A9 AA C0            [ 1]  341         or a,#(IPR3<<6)
      0000AB C7 7F 75         [ 1]  342         ld ITC_SPR6,a 
      0000AE 9A               [ 1]  343         rim
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000AF CC 19 A7         [ 2]  344         jp  COLD   ;default=MN1
                                    345 
                                    346 
                                    347 ;; place MCU in sleep mode with
                                    348 ;; halt opcode 
                                    349 ;; BYE ( -- )
      0000B2 00 00                  350         .word 0
                           0000B4   351         LINK=.
      0000B4 03                     352         .byte 3 
      0000B5 42 59 45               353         .ascii "BYE"
      0000B8                        354 BYE: 
      0000B8 8E               [10]  355         halt 
      0000B9 81               [ 4]  356         ret 
                                    357 
                                    358 ; Enable interrupts 
                                    359 ; EI ( -- )
      0000BA 00 B4                  360         .word LINK 
                           0000BC   361         LINK=.
      0000BC 02                     362         .byte 2
      0000BD 45 49                  363         .ascii "EI"
      0000BF                        364 EI:
      0000BF 9A               [ 1]  365         rim 
      0000C0 81               [ 4]  366         ret 
                                    367 
                                    368 ; Disable interrupts
                                    369 ; DI ( -- )
      0000C1 00 BC                  370         .word LINK 
                           0000C3   371         LINK=.
      0000C3 02                     372         .byte 2 
      0000C4 44 49                  373         .ascii "DI"
      0000C6                        374 DI:
      0000C6 9B               [ 1]  375         sim 
      0000C7 81               [ 4]  376         ret 
                                    377 
                                    378 ; set interrupt priority level 
                                    379 ; SET-ISP ( n1 n2 -- )
                                    380 ; n1 level {1..3}
                                    381 ; n2 vector {0..29}
      0000C8 00 C3                  382         .word LINK 
                           0000CA   383         LINK=.
      0000CA 07                     384         .byte 7 
      0000CB 53 45 54 2D 49 53 50   385         .ascii "SET-ISP"
      0000D2                        386 SETISP:
      0000D2 90 93            [ 1]  387         ldw y,x 
      0000D4 90 FE            [ 2]  388         ldw y,(y)
      0000D6 A6 04            [ 1]  389         ld a,#4 ; 4 slot per register 
                                    390 ;  quotient select register, remainder select slot in register.        
      0000D8 90 62            [ 2]  391         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000DA A4 03            [ 1]  392         and a,#3 
      0000DC 48               [ 1]  393         sll a ; 2*SLOT  lshift 
      0000DD 72 A9 7F 70      [ 2]  394         addw y,#ITC_SPR1 
      0000E1 FF               [ 2]  395         ldw (x),y  ; ( level reg -- )
      0000E2 90 5F            [ 1]  396         clrw y 
      0000E4 90 97            [ 1]  397         ld yl,a 
      0000E6 1D 00 02         [ 2]  398         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000E9 FF               [ 2]  399         ldw (x),y  ; ( level reg lshift -- )
      0000EA 90 93            [ 1]  400         ldw y,x 
      0000EC 90 EE 02         [ 2]  401         ldw y,(2,y) 
      0000EF 90 F6            [ 1]  402         ld a,(y)   ; reg_value
      0000F1 1D 00 02         [ 2]  403         subw x,#CELLL 
      0000F4 FF               [ 2]  404         ldw (x),y ; ( level reg lshift rval -- )
      0000F5 CD 05 03         [ 4]  405         call OVER ; ( level reg lshift rval lshift -- )
      0000F8 CD 03 B4         [ 4]  406         call DOLIT 
      0000FB 00 03                  407         .word 3
      0000FD CD 04 E9         [ 4]  408         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000100 CD 09 EC         [ 4]  409         call LSHIFT ; creat slot mask 
      000103 CD 06 EE         [ 4]  410         call INVER  ; ( level reg lshift rval mask )
      000106 CD 05 25         [ 4]  411         call ANDD ; ( level reg lshift slot_masked )
      000109 CD 04 A2         [ 4]  412         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010C CD 06 94         [ 4]  413         call ROT  ; ( reg lshift level )
      00010F CD 04 E9         [ 4]  414         call SWAPP ; ( reg level lshift )
      000112 CD 09 EC         [ 4]  415         call LSHIFT  ; ( reg slot_level -- )
      000115 CD 04 83         [ 4]  416         call RFROM ; ( reg slot_level masked_val )
      000118 CD 05 39         [ 4]  417         call ORR   ; ( reg updated_rval )
      00011B CD 04 E9         [ 4]  418         call SWAPP 
      00011E CD 04 3F         [ 4]  419         call CSTOR
                                    420 
                                    421 ; sÃ©lectionne l'application 
                                    422 ; qui dÃ©marre automatique lors 
                                    423 ; d'un COLD start 
      000121 00 CA                  424         .word LINK 
                           000123   425         LINK=.
      000123 07                     426         .byte 7
      000124 41 55 54 4F 52 55 4E   427         .ascii "AUTORUN"
      00012B                        428 AUTORUN:
      00012B CD 10 B2         [ 4]  429         call TOKEN 
      00012E CD 04 D9         [ 4]  430         call DUPP 
      000131 CD 03 E7         [ 4]  431         call QBRAN 
      000134 02 0D                  432         .word FORGET2
      000136 CD 11 AF         [ 4]  433         call NAMEQ
      000139 CD 06 83         [ 4]  434         call QDUP 
      00013C CD 03 E7         [ 4]  435         call QBRAN 
      00013F 02 0D                  436         .word FORGET2
      000141 CD 04 CF         [ 4]  437         call DROP 
      000144 1D 00 02         [ 2]  438         subw x,#CELLL 
      000147 90 AE 40 02      [ 2]  439         ldw y,#APP_RUN 
      00014B FF               [ 2]  440         ldw (x),y 
      00014C CC 1C A4         [ 2]  441         jp EE_STORE 
                                    442 
                                    443 ;; Reset dictionary pointer before 
                                    444 ;; forgotten word. RAM space and 
                                    445 ;; interrupt vector defined after 
                                    446 ;; must be resetted also.
      00014F 01 23                  447         .word LINK 
                           000151   448         LINK=.
      000151 06                     449         .byte 6
      000152 46 4F 52 47 45 54      450         .ascii "FORGET" 
      000158                        451 FORGET: 
      000158 CD 10 B2         [ 4]  452         call TOKEN
      00015B CD 04 D9         [ 4]  453         call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00015E CD 03 E7         [ 4]  454         call QBRAN 
      000161 02 0D                  455         .word FORGET2
      000163 CD 11 AF         [ 4]  456         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 83         [ 4]  457         call QDUP 
      000169 CD 03 E7         [ 4]  458         call QBRAN 
      00016C 02 0D                  459         .word FORGET2
                                    460 ; only forget users words 
      00016E CD 04 D9         [ 4]  461         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  462         call DOLIT 
      000174 21 00                  463         .word app_space 
      000176 CD 04 E9         [ 4]  464         call SWAPP 
      000179 CD 07 94         [ 4]  465         call  ULESS 
      00017C CD 03 E7         [ 4]  466         call QBRAN 
      00017F 01 CF                  467         .word FORGET6 
                                    468 ; ( ca na -- )        
                                    469 ;reset ivec with address >= ca
      000181 CD 04 E9         [ 4]  470         call SWAPP ; ( na ca -- ) 
      000184 CD 1E 65         [ 4]  471         call CHKIVEC ; ( na -- ) 
                                    472 ; start at LAST and link back to na 
                                    473 ; if variable found reset VP at that point.
      000187                        474 FORGET1:
      000187 CD 06 45         [ 4]  475         call LAST 
      00018A CD 04 32         [ 4]  476         call AT 
      00018D CD 04 D9         [ 4]  477         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  478         call FREEVAR ; ( -- na last )
      000193 CD 04 D9         [ 4]  479         call DUPP 
      000196 CD 03 B4         [ 4]  480         call DOLIT 
      000199 00 02                  481         .word 2 
      00019B CD 07 4D         [ 4]  482         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 32         [ 4]  483         call AT 
      0001A1 CD 04 D9         [ 4]  484         call DUPP ; ( -- na last a a )
      0001A4 CD 06 19         [ 4]  485         call CNTXT 
      0001A7 CD 04 1B         [ 4]  486         call STORE
      0001AA CD 06 45         [ 4]  487         call LAST  
      0001AD CD 04 1B         [ 4]  488         call STORE ; ( --  na last )
      0001B0 CD 05 03         [ 4]  489         call OVER 
      0001B3 CD 07 75         [ 4]  490         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  491         call QBRAN 
      0001B9 01 87                  492         .word FORGET1 
                                    493 ; ( na -- )
      0001BB CD 03 B4         [ 4]  494         call DOLIT 
      0001BE 00 02                  495         .word 2 
      0001C0 CD 07 4D         [ 4]  496         call SUBB 
      0001C3 CD 06 35         [ 4]  497         call CPP 
      0001C6 CD 04 1B         [ 4]  498         call STORE  
      0001C9 CD 1B 66         [ 4]  499         call UPDATCP 
      0001CC CC 1B 3D         [ 2]  500         jp UPDATLAST 
      0001CF                        501 FORGET6: ; tried to forget a RAM or system word 
                                    502 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  503         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  504         ldw y,SP0 
      0001D5 FF               [ 2]  505         ldw (x),y  
      0001D6 CD 07 94         [ 4]  506         call ULESS
      0001D9 CD 03 E7         [ 4]  507         call QBRAN 
      0001DC 01 FF                  508         .word PROTECTED 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001DE CD 12 BB         [ 4]  509         call ABORQ 
      0001E1 1D                     510         .byte 29
      0001E2 20 46 6F 72 20 52 41   511         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        512 PROTECTED:
      0001FF CD 12 BB         [ 4]  513         call ABORQ
      000202 0A                     514         .byte 10
      000203 20 50 72 6F 74 65 63   515         .ascii " Protected"
             74 65 64
      00020D                        516 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 BB         [ 4]  517         call ABORQ
      000210 05                     518         .byte 5
      000211 20 77 68 61 74         519         .ascii " what"
      000216                        520 FORGET4:
      000216 CC 04 CF         [ 2]  521         jp DROP 
                                    522 
                                    523 
                                    524 ;---------------------------------
                                    525 ; if na is variable 
                                    526 ; free variable data  
                                    527 ; FREEVAR ( na -- )
                                    528 ;---------------------------------
      000219 01 51                  529         .word LINK 
                           00021B   530         LINK=.
      00021B 07                     531         .byte 7 
      00021C 46 52 45 45 56 41 52   532         .ascii "FREEVAR"
      000223                        533 FREEVAR:
      000223 CD 04 D9         [ 4]  534         call DUPP ; ( na na -- )
      000226 CD 04 50         [ 4]  535         CALL CAT  ; ( na c -- )
      000229 CD 09 CE         [ 4]  536         call ONEP ;
      00022C CD 06 D4         [ 4]  537         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 CE         [ 4]  538         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 D9         [ 4]  539         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 32         [ 4]  540         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  541         call DOLIT 
      00023B 05 86                  542         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 75         [ 4]  543         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  544         call QBRAN 
      000243 02 59                  545         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  546         call DOLIT 
      000248 00 02                  547         .word 2 
      00024A CD 06 D4         [ 4]  548         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 32         [ 4]  549         call AT 
      000250 CD 06 27         [ 4]  550         call VPP   
      000253 CD 04 1B         [ 4]  551         call STORE 
      000256 CC 1B 7D         [ 2]  552         jp UPDATVP 
      000259                        553 FREEVAR4: ; not variable
      000259 CC 04 CF         [ 2]  554         jp  DROP 
                                    555 
                                    556 ;    SEED ( n -- )
                                    557 ; Initialize PRNG seed with n 
      00025C 02 1B                  558         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           00025E   559         LINK=. 
      00025E 04                     560         .byte 4 
      00025F 53 45 45 44            561         .ascii "SEED" 
      000263                        562 SEED:
      000263 90 93            [ 1]  563         ldw y,x 
      000265 1C 00 02         [ 2]  564         addw x,#CELLL
      000268 90 FE            [ 2]  565         ldw y,(y)
      00026A 90 9E            [ 1]  566         ld a,yh 
      00026C B7 35            [ 1]  567         ld SEEDX,a 
      00026E 90 9F            [ 1]  568         ld a,yl 
      000270 B7 37            [ 1]  569         ld SEEDY,a 
      000272 81               [ 4]  570         ret 
                                    571 
                                    572 ;    RANDOM ( u1 -- u2 )
                                    573 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  574         .word LINK 
                           000275   575         LINK=.
      000275 06                     576         .byte 6
      000276 52 41 4E 44 4F 4D      577         .ascii "RANDOM" 
      00027C                        578 RANDOM:
                                    579 ;local variable 
                           000001   580         SPSAVE=1
                           000002   581         VSIZE=2 
      00027C 52 02            [ 2]  582         sub sp,#VSIZE
      00027E 1F 01            [ 2]  583         ldw (SPSAVE,sp),x  
                                    584 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  585         ldw y,x 
      000282 90 FE            [ 2]  586         ldw y,(y)
      000284 90 BF 24         [ 2]  587         ldw YTEMP,y 
      000287 BE 35            [ 2]  588 	ldw x,SEEDX 
      000289 58               [ 2]  589 	sllw x 
      00028A 58               [ 2]  590 	sllw x 
      00028B 58               [ 2]  591 	sllw x 
      00028C 58               [ 2]  592 	sllw x 
      00028D 58               [ 2]  593 	sllw x 
      00028E 9E               [ 1]  594 	ld a,xh 
      00028F B8 35            [ 1]  595 	xor a,SEEDX 
      000291 B7 22            [ 1]  596 	ld XTEMP,a 
      000293 9F               [ 1]  597 	ld a,xl 
      000294 B8 36            [ 1]  598 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  599 	ld XTEMP+1,a 
                                    600 ; SEEDX=SEEDY 
      000298 BE 37            [ 2]  601 	ldw x,SEEDY 
      00029A BF 35            [ 2]  602 	ldw SEEDX,x  
                                    603 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  604 	srlw x 
      00029D 9E               [ 1]  605 	ld a,xh 
      00029E B8 37            [ 1]  606 	xor a,SEEDY 
      0002A0 B7 37            [ 1]  607 	ld SEEDY,a  
      0002A2 9F               [ 1]  608 	ld a,xl 
      0002A3 B8 38            [ 1]  609 	xor a,SEEDY+1 
      0002A5 B7 38            [ 1]  610 	ld SEEDY+1,a 
                                    611 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  612 	ldw x,XTEMP 
      0002A9 54               [ 2]  613 	srlw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002AA 54               [ 2]  614 	srlw x 
      0002AB 54               [ 2]  615 	srlw x 
                                    616 ; x=XTEMP^x 
      0002AC 9E               [ 1]  617 	ld a,xh 
      0002AD B8 22            [ 1]  618 	xor a,XTEMP 
      0002AF 95               [ 1]  619 	ld xh,a 
      0002B0 9F               [ 1]  620 	ld a,xl 
      0002B1 B8 23            [ 1]  621 	xor a,XTEMP+1  
      0002B3 97               [ 1]  622 	ld xl,a 
                                    623 ; SEEDY=x^SEEDY 
      0002B4 B8 38            [ 1]  624 	xor a,SEEDY+1
      0002B6 97               [ 1]  625 	ld xl,a 
      0002B7 9E               [ 1]  626 	ld a,xh 
      0002B8 B8 37            [ 1]  627 	xor a,SEEDY
      0002BA 95               [ 1]  628 	ld xh,a 
      0002BB BF 37            [ 2]  629 	ldw SEEDY,x 
                                    630 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  631 	ldw y,YTEMP  
      0002C0 65               [ 2]  632 	divw x,y 
      0002C1 1E 01            [ 2]  633 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  634         ldw (x),y 
      0002C4 5B 02            [ 2]  635         addw sp,#VSIZE 
      0002C6 81               [ 4]  636 	ret 
                                    637 
                                    638 
                                    639 ;;
                                    640 ;; get millisecond counter 
                                    641 ;; msec ( -- u )
                                    642 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  643         .word LINK  
                           0002C9   644         LINK = . 
      0002C9 04                     645         .byte 4
      0002CA 4D 53 45 43            646         .ascii "MSEC"
      0002CE                        647 MSEC: 
      0002CE 1D 00 02         [ 2]  648         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  649         ldw y,MS 
      0002D4 FF               [ 2]  650         ldw (x),y 
      0002D5 81               [ 4]  651         ret 
                                    652 
                                    653 ; suspend execution for u msec 
                                    654 ;  pause ( u -- )
      0002D6 02 C9                  655         .word LINK 
                           0002D8   656         LINK=.
      0002D8 05                     657         .byte 5 
      0002D9 50 41 55 53 45         658         .ascii "PAUSE"
      0002DE                        659 PAUSE:
      0002DE 90 93            [ 1]  660         ldw y,x
      0002E0 90 FE            [ 2]  661         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  662         addw y,MS 
      0002E6 8F               [10]  663 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  664         cpw y,MS  
      0002EA 26 FA            [ 1]  665         jrne 1$        
      0002EC 1C 00 02         [ 2]  666         addw x,#CELLL 
      0002EF 81               [ 4]  667         ret 
                                    668 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    669 ; initialize count down timer 
                                    670 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  671         .word LINK 
                           0002F2   672         LINK=.
      0002F2 05                     673         .byte 5 
      0002F3 54 49 4D 45 52         674         .ascii "TIMER" 
      0002F8                        675 TIMER:
      0002F8 90 93            [ 1]  676         ldw y,x
      0002FA 90 FE            [ 2]  677         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  678         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  679         addw x,#CELLL 
      000302 81               [ 4]  680         ret 
                                    681 
                                    682 ; check for TIMER exiparition 
                                    683 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  684         .word LINK 
                           000305   685         LINK=. 
      000305 08                     686         .byte 8 
      000306 54 49 4D 45 4F 55 54   687         .ascii "TIMEOUT?"
             3F
      00030E                        688 TIMEOUTQ: 
      00030E 4F               [ 1]  689         clr a
      00030F 1D 00 02         [ 2]  690         subw x,#CELLL 
      000312 90 BE 30         [ 2]  691         ldw y,CNTDWN 
      000315 26 01            [ 1]  692         jrne 1$ 
      000317 43               [ 1]  693         cpl a 
      000318 E7 01            [ 1]  694 1$:     ld (1,x),a 
      00031A F7               [ 1]  695         ld (x),a 
      00031B 81               [ 4]  696         ret         
                                    697 
                                    698 ; reboot MCU 
                                    699 ; REBOOT ( -- )
      00031C 03 05                  700         .word LINK 
                           00031E   701         LINK=. 
      00031E 06                     702         .byte 6 
      00031F 52 45 42 4F 4F 54      703         .ascii "REBOOT"
      000325                        704 reboot:
      000325 CC 00 04         [ 2]  705         jp NonHandledInterrupt
                                    706 
                                    707 ; compile to flash memory 
                                    708 ; TO-FLASH ( -- )
      000328 03 1E                  709         .word LINK 
                           00032A   710         LINK=.
      00032A 08                     711         .byte 8
      00032B 54 4F 2D 46 4C 41 53   712         .ascii "TO-FLASH"
             48
      000333                        713 TOFLASH:
      000333 CD 06 58         [ 4]  714         call RAMLAST 
      000336 CD 04 32         [ 4]  715         call AT 
      000339 CD 06 83         [ 4]  716         call QDUP 
      00033C CD 03 E7         [ 4]  717         call QBRAN
      00033F 03 62                  718         .word 1$
      000341 CD 12 BB         [ 4]  719         call ABORQ 
      000344 1D                     720         .byte 29
      000345 20 4E 6F 74 20 77 68   721         .ascii " Not while definitions in RAM"   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  722 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  723         ldw UTFLASH,y
      000369 81               [ 4]  724         ret 
                                    725 
                                    726 ; compile to RAM 
                                    727 ; TO-RAM ( -- )
      00036A 03 2A                  728         .word LINK 
                           00036C   729         LINK=.
      00036C 06                     730         .byte 6 
      00036D 54 4F 2D 52 41 4D      731         .ascii "TO-RAM"
      000373                        732 TORAM:
      000373 90 5F            [ 1]  733         clrw y 
      000375 90 BF 1E         [ 2]  734         ldw UTFLASH,y 
      000378 81               [ 4]  735         ret 
                                    736         
                                    737 
                                    738 ;; Device dependent I/O
                                    739 ;       ?RX     ( -- c T | F )
                                    740 ;         Return input byte and true, or false.
      000379 03 6C                  741         .word      LINK 
                           00037B   742 LINK	= .
      00037B 04                     743         .byte      4
      00037C 3F 4B 45 59            744         .ascii     "?KEY"
      000380                        745 QKEY:
      000380 90 5F            [ 1]  746         CLRW Y 
      000382 72 0B 52 40 0B   [ 2]  747         BTJF UART2_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 41         [ 1]  748         LD    A,UART2_DR   ;get char in A
      00038A 1D 00 02         [ 2]  749 	SUBW	X,#2
      00038D E7 01            [ 1]  750         LD     (1,X),A
      00038F 7F               [ 1]  751 	CLR	(X)
      000390 90 53            [ 2]  752         CPLW     Y
      000392                        753 INCH:
      000392 1D 00 02         [ 2]  754 	SUBW	X,#2
      000395 FF               [ 2]  755         LDW     (X),Y
      000396 81               [ 4]  756         RET
                                    757 
                                    758 ;       TX!     ( c -- )
                                    759 ;       Send character c to  output device.
      000397 03 7B                  760         .word      LINK
                           000399   761 LINK	= .
      000399 04                     762         .byte      4
      00039A 45 4D 49 54            763         .ascii     "EMIT"
      00039E                        764 EMIT:
      00039E E6 01            [ 1]  765         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  766 	ADDW	X,#2
      0003A3 72 0F 52 40 FB   [ 2]  767 OUTPUT: BTJF UART2_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A8 C7 52 41         [ 1]  768         LD    UART2_DR,A   ;send A
      0003AB 81               [ 4]  769         RET
                                    770 
                                    771 ;; The kernel
                                    772 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    773 ;       doLIT   ( -- w )
                                    774 ;       Push an inline literal.
      0003AC 03 99                  775         .word      LINK
                           0003AE   776 LINK	= 	.
      0003AE 45                     777 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         778         .ascii     "DOLIT"
      0003B4                        779 DOLIT:
      0003B4 1D 00 02         [ 2]  780 	SUBW X,#2
      0003B7 16 01            [ 2]  781         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  782         ldw y,(y)
      0003BB FF               [ 2]  783         ldw (x),y
      0003BC 90 85            [ 2]  784         popw y 
      0003BE 90 EC 02         [ 2]  785         jp (2,y)
                                    786 
                                    787 ;       next    ( -- )
                                    788 ;       Code for  single index loop.
      0003C1 03 AE                  789         .word      LINK
                           0003C3   790 LINK	= 	.
      0003C3 44                     791 	.byte      COMPO+4
      0003C4 6E 65 78 74            792         .ascii     "next"
      0003C8                        793 DONXT:
      0003C8 16 03            [ 2]  794 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  795 	DECW Y
      0003CC 2A 07            [ 1]  796 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  797 	POPW Y
      0003D0 5B 02            [ 2]  798         addw sp,#2
      0003D2 90 EC 02         [ 2]  799         JP (2,Y)
      0003D5                        800 NEX1:
      0003D5 17 03            [ 2]  801         LDW (3,SP),Y
      0003D7 90 85            [ 2]  802         POPW Y
      0003D9 90 FE            [ 2]  803 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  804 	JP (Y)
                                    805 
                                    806 ;       ?branch ( f -- )
                                    807 ;       Branch if flag is zero.
      0003DD 03 C3                  808         .word      LINK
                           0003DF   809 LINK	= 	.
      0003DF 47                     810 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   811         .ascii     "?BRANCH"
      0003E7                        812 QBRAN:	
      0003E7 90 93            [ 1]  813         LDW Y,X
      0003E9 1C 00 02         [ 2]  814 	ADDW X,#2
      0003EC 90 FE            [ 2]  815 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  816         JREQ     BRAN
      0003F0 90 85            [ 2]  817 	POPW Y
      0003F2 90 EC 02         [ 2]  818 	JP (2,Y)
                                    819         
                                    820 ;       branch  ( -- )
                                    821 ;       Branch to an inline address.
      0003F5 03 DF                  822         .word      LINK
                           0003F7   823 LINK	= 	.
      0003F7 46                     824 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      825         .ascii     "BRANCH"
      0003FE                        826 BRAN:
      0003FE 90 85            [ 2]  827         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000400 90 FE            [ 2]  828 	LDW Y,(Y)
      000402 90 FC            [ 2]  829         JP     (Y)
                                    830 
                                    831 ;       EXECUTE ( ca -- )
                                    832 ;       Execute  word at ca.
      000404 03 F7                  833         .word      LINK
                           000406   834 LINK	= 	.
      000406 07                     835         .byte       7
      000407 45 58 45 43 55 54 45   836         .ascii     "EXECUTE"
      00040E                        837 EXECU:
      00040E 90 93            [ 1]  838         LDW Y,X
      000410 1C 00 02         [ 2]  839 	ADDW X,#2
      000413 90 FE            [ 2]  840 	LDW  Y,(Y)
      000415 90 FC            [ 2]  841         JP   (Y)
                                    842 
                           000001   843 OPTIMIZE = 1
                           000001   844 .if OPTIMIZE 
                                    845 ; remplacement de CALL EXIT par 
                                    846 ; le opcode de RET.
                                    847 ; Voir modification au code de ";"
                                    848 ;
                           000000   849 .else 
                                    850 ;       EXIT    ( -- )
                                    851 ;       Terminate a colon definition.
                                    852         .word      LINK
                                    853 LINK = .
                                    854         .byte      4
                                    855         .ascii     "EXIT"
                                    856 EXIT:
                                    857         POPW Y
                                    858         RET
                                    859 .endif 
                                    860 
                                    861 ;       !       ( w a -- )
                                    862 ;       Pop  data stack to memory.
      000417 04 06                  863         .word      LINK
                           000419   864 LINK = .
      000419 01                     865         .byte      1
      00041A 21                     866         .ascii     "!"
      00041B                        867 STORE:
      00041B 90 93            [ 1]  868         LDW Y,X
      00041D 90 FE            [ 2]  869         LDW Y,(Y)    ;Y=a
      00041F 90 BF 24         [ 2]  870         LDW YTEMP,Y
      000422 90 93            [ 1]  871         LDW Y,X
      000424 90 EE 02         [ 2]  872         LDW Y,(2,Y)
      000427 91 CF 24         [ 5]  873         LDW [YTEMP],Y ;store w at a
      00042A 1C 00 04         [ 2]  874         ADDW X,#4 ; DDROP 
      00042D 81               [ 4]  875         RET     
                                    876 
                                    877 ;       @       ( a -- w )
                                    878 ;       Push memory location to stack.
      00042E 04 19                  879         .word      LINK
                           000430   880 LINK	= 	.
      000430 01                     881         .byte    1
      000431 40                     882         .ascii	"@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000432                        883 AT:
      000432 90 93            [ 1]  884         LDW Y,X     ;Y = a
      000434 90 FE            [ 2]  885         LDW Y,(Y)   ; address 
      000436 90 FE            [ 2]  886         LDW Y,(Y)   ; value 
      000438 FF               [ 2]  887         LDW (X),Y ;w = @Y
      000439 81               [ 4]  888         RET     
                                    889 
                                    890 ;       C!      ( c b -- )
                                    891 ;       Pop  data stack to byte memory.
      00043A 04 30                  892         .word      LINK
                           00043C   893 LINK	= .
      00043C 02                     894         .byte      2
      00043D 43 21                  895         .ascii     "C!"
      00043F                        896 CSTOR:
      00043F 90 93            [ 1]  897         LDW Y,X
      000441 90 FE            [ 2]  898 	LDW Y,(Y)    ;Y=b
      000443 E6 03            [ 1]  899         LD A,(3,X)    ;D = c
      000445 90 F7            [ 1]  900         LD  (Y),A     ;store c at b
      000447 1C 00 04         [ 2]  901 	ADDW X,#4 ; DDROP 
      00044A 81               [ 4]  902         RET     
                                    903 
                                    904 ;       C@      ( b -- c )
                                    905 ;       Push byte in memory to  stack.
      00044B 04 3C                  906         .word      LINK
                           00044D   907 LINK	= 	.
      00044D 02                     908         .byte      2
      00044E 43 40                  909         .ascii     "C@"
      000450                        910 CAT:
      000450 90 93            [ 1]  911         LDW Y,X     ;Y=b
      000452 90 FE            [ 2]  912         LDW Y,(Y)
      000454 90 F6            [ 1]  913         LD A,(Y)
      000456 E7 01            [ 1]  914         LD (1,X),A
      000458 7F               [ 1]  915         CLR (X)
      000459 81               [ 4]  916         RET     
                                    917 
                                    918 ;       RP@     ( -- a )
                                    919 ;       Push current RP to data stack.
      00045A 04 4D                  920         .word      LINK
                           00045C   921 LINK	= .
      00045C 03                     922         .byte      3
      00045D 52 50 40               923         .ascii     "RP@"
      000460                        924 RPAT:
      000460 90 96            [ 1]  925         LDW Y,SP    ;save return addr
      000462 1D 00 02         [ 2]  926         SUBW X,#2
      000465 FF               [ 2]  927         LDW (X),Y
      000466 81               [ 4]  928         RET     
                                    929 
                                    930 ;       RP!     ( a -- )
                                    931 ;       Set  return stack pointer.
      000467 04 5C                  932         .word      LINK
                           000469   933 LINK	= 	. 
      000469 43                     934 	.byte      COMPO+3
      00046A 52 50 21               935         .ascii     "RP!"
      00046D                        936 RPSTO:
      00046D 90 85            [ 2]  937         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00046F 90 BF 24         [ 2]  938         LDW YTEMP,Y
      000472 90 93            [ 1]  939         LDW Y,X
      000474 90 FE            [ 2]  940         LDW Y,(Y)
      000476 90 94            [ 1]  941         LDW SP,Y
      000478 1C 00 02         [ 2]  942         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00047B 92 CC 24         [ 5]  943         JP [YTEMP]
                                    944 
                                    945 ;       R>      ( -- w )
                                    946 ;       Pop return stack to data stack.
      00047E 04 69                  947         .word      LINK
                           000480   948 LINK	= 	. 
      000480 42                     949 	.byte      COMPO+2
      000481 52 3E                  950         .ascii     "R>"
      000483                        951 RFROM:
      000483 90 85            [ 2]  952         POPW Y    ;save return addr
      000485 90 BF 24         [ 2]  953         LDW YTEMP,Y
      000488 90 85            [ 2]  954         POPW Y
      00048A 1D 00 02         [ 2]  955         SUBW X,#2
      00048D FF               [ 2]  956         LDW (X),Y
      00048E 92 CC 24         [ 5]  957         JP [YTEMP]
                                    958 
                                    959 ;       R@      ( -- w )
                                    960 ;       Copy top of return stack to stack.
      000491 04 80                  961         .word      LINK
                           000493   962 LINK	= 	. 
      000493 02                     963         .byte      2
      000494 52 40                  964         .ascii     "R@"
      000496                        965 RAT:
      000496 16 03            [ 2]  966         ldw y,(3,sp)
      000498 1D 00 02         [ 2]  967         subw x,#CELLL 
      00049B FF               [ 2]  968         ldw (x),y 
      00049C 81               [ 4]  969         ret 
                                    970 
                                    971 ;       >R      ( w -- )
                                    972 ;       Push data stack to return stack.
      00049D 04 93                  973         .word      LINK
                           00049F   974 LINK	= 	. 
      00049F 42                     975 	.byte      COMPO+2
      0004A0 3E 52                  976         .ascii     ">R"
      0004A2                        977 TOR:
      0004A2 90 85            [ 2]  978         POPW Y    ;save return addr
      0004A4 90 BF 24         [ 2]  979         LDW YTEMP,Y
      0004A7 90 93            [ 1]  980         LDW Y,X
      0004A9 90 FE            [ 2]  981         LDW Y,(Y)
      0004AB 90 89            [ 2]  982         PUSHW Y    ;restore return addr
      0004AD 1C 00 02         [ 2]  983         ADDW X,#2
      0004B0 92 CC 24         [ 5]  984         JP [YTEMP]
                                    985 
                                    986 ;       SP@     ( -- a )
                                    987 ;       Push current stack pointer.
      0004B3 04 9F                  988         .word      LINK
                           0004B5   989 LINK	= 	. 
      0004B5 03                     990         .byte      3
      0004B6 53 50 40               991         .ascii     "SP@"
      0004B9                        992 SPAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004B9 90 93            [ 1]  993 	LDW Y,X
      0004BB 1D 00 02         [ 2]  994         SUBW X,#2
      0004BE FF               [ 2]  995 	LDW (X),Y
      0004BF 81               [ 4]  996         RET     
                                    997 
                                    998 ;       SP!     ( a -- )
                                    999 ;       Set  data stack pointer.
      0004C0 04 B5                 1000         .word      LINK
                           0004C2  1001 LINK	= 	. 
      0004C2 03                    1002         .byte      3
      0004C3 53 50 21              1003         .ascii     "SP!"
      0004C6                       1004 SPSTO:
      0004C6 FE               [ 2] 1005         LDW     X,(X)     ;X = a
      0004C7 81               [ 4] 1006         RET     
                                   1007 
                                   1008 ;       DROP    ( w -- )
                                   1009 ;       Discard top stack item.
      0004C8 04 C2                 1010         .word      LINK
                           0004CA  1011 LINK	= 	. 
      0004CA 04                    1012         .byte      4
      0004CB 44 52 4F 50           1013         .ascii     "DROP"
      0004CF                       1014 DROP:
      0004CF 1C 00 02         [ 2] 1015         ADDW X,#2     
      0004D2 81               [ 4] 1016         RET     
                                   1017 
                                   1018 ;       DUP     ( w -- w w )
                                   1019 ;       Duplicate  top stack item.
      0004D3 04 CA                 1020         .word      LINK
                           0004D5  1021 LINK	= 	. 
      0004D5 03                    1022         .byte      3
      0004D6 44 55 50              1023         .ascii     "DUP"
      0004D9                       1024 DUPP:
      0004D9 90 93            [ 1] 1025 	LDW Y,X
      0004DB 1D 00 02         [ 2] 1026         SUBW X,#2
      0004DE 90 FE            [ 2] 1027 	LDW Y,(Y)
      0004E0 FF               [ 2] 1028 	LDW (X),Y
      0004E1 81               [ 4] 1029         RET     
                                   1030 
                                   1031 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1032 ;       Exchange top two stack items.
      0004E2 04 D5                 1033         .word      LINK
                           0004E4  1034 LINK	= 	. 
      0004E4 04                    1035         .byte      4
      0004E5 53 57 41 50           1036         .ascii     "SWAP"
      0004E9                       1037 SWAPP:
      0004E9 90 93            [ 1] 1038         LDW Y,X
      0004EB 90 FE            [ 2] 1039         LDW Y,(Y)
      0004ED 90 BF 24         [ 2] 1040         LDW YTEMP,Y
      0004F0 90 93            [ 1] 1041         LDW Y,X
      0004F2 90 EE 02         [ 2] 1042         LDW Y,(2,Y)
      0004F5 FF               [ 2] 1043         LDW (X),Y
      0004F6 90 BE 24         [ 2] 1044         LDW Y,YTEMP
      0004F9 EF 02            [ 2] 1045         LDW (2,X),Y
      0004FB 81               [ 4] 1046         RET     
                                   1047 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1048 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1049 ;       Copy second stack item to top.
      0004FC 04 E4                 1050         .word      LINK
                           0004FE  1051 LINK	= . 
      0004FE 04                    1052         .byte      4
      0004FF 4F 56 45 52           1053         .ascii     "OVER"
      000503                       1054 OVER:
      000503 1D 00 02         [ 2] 1055         SUBW X,#2
      000506 90 93            [ 1] 1056         LDW Y,X
      000508 90 EE 04         [ 2] 1057         LDW Y,(4,Y)
      00050B FF               [ 2] 1058         LDW (X),Y
      00050C 81               [ 4] 1059         RET     
                                   1060 
                                   1061 ;       0<      ( n -- t )
                                   1062 ;       Return true if n is negative.
      00050D 04 FE                 1063         .word      LINK
                           00050F  1064 LINK	= . 
      00050F 02                    1065         .byte      2
      000510 30 3C                 1066         .ascii     "0<"
      000512                       1067 ZLESS:
      000512 A6 FF            [ 1] 1068         LD A,#0xFF
      000514 90 93            [ 1] 1069         LDW Y,X
      000516 90 FE            [ 2] 1070         LDW Y,(Y)
      000518 2B 01            [ 1] 1071         JRMI     ZL1
      00051A 4F               [ 1] 1072         CLR A   ;false
      00051B F7               [ 1] 1073 ZL1:    LD     (X),A
      00051C E7 01            [ 1] 1074         LD (1,X),A
      00051E 81               [ 4] 1075 	RET     
                                   1076 
                                   1077 ;       AND     ( w w -- w )
                                   1078 ;       Bitwise AND.
      00051F 05 0F                 1079         .word      LINK
                           000521  1080 LINK	= . 
      000521 03                    1081         .byte      3
      000522 41 4E 44              1082         .ascii     "AND"
      000525                       1083 ANDD:
      000525 F6               [ 1] 1084         LD  A,(X)    ;D=w
      000526 E4 02            [ 1] 1085         AND A,(2,X)
      000528 E7 02            [ 1] 1086         LD (2,X),A
      00052A E6 01            [ 1] 1087         LD A,(1,X)
      00052C E4 03            [ 1] 1088         AND A,(3,X)
      00052E E7 03            [ 1] 1089         LD (3,X),A
      000530 1C 00 02         [ 2] 1090         ADDW X,#2
      000533 81               [ 4] 1091         RET
                                   1092 
                                   1093 ;       OR      ( w w -- w )
                                   1094 ;       Bitwise inclusive OR.
      000534 05 21                 1095         .word      LINK
                           000536  1096 LINK = . 
      000536 02                    1097         .byte      2
      000537 4F 52                 1098         .ascii     "OR"
      000539                       1099 ORR:
      000539 F6               [ 1] 1100         LD A,(X)    ;D=w
      00053A EA 02            [ 1] 1101         OR A,(2,X)
      00053C E7 02            [ 1] 1102         LD (2,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00053E E6 01            [ 1] 1103         LD A,(1,X)
      000540 EA 03            [ 1] 1104         OR A,(3,X)
      000542 E7 03            [ 1] 1105         LD (3,X),A
      000544 1C 00 02         [ 2] 1106         ADDW X,#2
      000547 81               [ 4] 1107         RET
                                   1108 
                                   1109 ;       XOR     ( w w -- w )
                                   1110 ;       Bitwise exclusive OR.
      000548 05 36                 1111         .word      LINK
                           00054A  1112 LINK	= . 
      00054A 03                    1113         .byte      3
      00054B 58 4F 52              1114         .ascii     "XOR"
      00054E                       1115 XORR:
      00054E F6               [ 1] 1116         LD A,(X)    ;D=w
      00054F E8 02            [ 1] 1117         XOR A,(2,X)
      000551 E7 02            [ 1] 1118         LD (2,X),A
      000553 E6 01            [ 1] 1119         LD A,(1,X)
      000555 E8 03            [ 1] 1120         XOR A,(3,X)
      000557 E7 03            [ 1] 1121         LD (3,X),A
      000559 1C 00 02         [ 2] 1122         ADDW X,#2
      00055C 81               [ 4] 1123         RET
                                   1124 
                                   1125 ;       UM+     ( u u -- udsum )
                                   1126 ;       Add two unsigned single
                                   1127 ;       and return a double sum.
      00055D 05 4A                 1128         .word      LINK
                           00055F  1129 LINK	= . 
      00055F 03                    1130         .byte      3
      000560 55 4D 2B              1131         .ascii     "UM+"
      000563                       1132 UPLUS:
      000563 A6 01            [ 1] 1133         LD A,#1
      000565 90 93            [ 1] 1134         LDW Y,X
      000567 90 EE 02         [ 2] 1135         LDW Y,(2,Y)
      00056A 90 BF 24         [ 2] 1136         LDW YTEMP,Y
      00056D 90 93            [ 1] 1137         LDW Y,X
      00056F 90 FE            [ 2] 1138         LDW Y,(Y)
      000571 72 B9 00 24      [ 2] 1139         ADDW Y,YTEMP
      000575 EF 02            [ 2] 1140         LDW (2,X),Y
      000577 25 01            [ 1] 1141         JRC     UPL1
      000579 4F               [ 1] 1142         CLR A
      00057A E7 01            [ 1] 1143 UPL1:   LD     (1,X),A
      00057C 7F               [ 1] 1144         CLR (X)
      00057D 81               [ 4] 1145         RET
                                   1146 
                                   1147 ;; System and user variables
                                   1148 
                                   1149 ;       doVAR   ( -- a )
                                   1150 ;       Code for VARIABLE and CREATE.
      00057E 05 5F                 1151         .word      LINK
                           000580  1152 LINK	= . 
      000580 45                    1153 	.byte      COMPO+5
      000581 44 4F 56 41 52        1154         .ascii     "DOVAR"
      000586                       1155 DOVAR:
      000586 1D 00 02         [ 2] 1156 	SUBW X,#2
      000589 90 85            [ 2] 1157         POPW Y    ;get return addr (pfa)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00058B 90 FE            [ 2] 1158         LDW Y,(Y) ; indirect address 
      00058D FF               [ 2] 1159         LDW (X),Y    ;push on stack
      00058E 81               [ 4] 1160         RET     ;go to RET of EXEC
                                   1161 
                                   1162 ;       BASE    ( -- a )
                                   1163 ;       Radix base for numeric I/O.
      00058F 05 80                 1164         .word      LINK        
                           000591  1165 LINK = . 
      000591 04                    1166         .byte      4
      000592 42 41 53 45           1167         .ascii     "BASE"
      000596                       1168 BASE:
      000596 90 AE 00 06      [ 2] 1169 	LDW Y,#UBASE 
      00059A 1D 00 02         [ 2] 1170 	SUBW X,#2
      00059D FF               [ 2] 1171         LDW (X),Y
      00059E 81               [ 4] 1172         RET
                                   1173 
                                   1174 ;       tmp     ( -- a )
                                   1175 ;       A temporary storage.
      00059F 05 91                 1176         .word      LINK
                                   1177         
                           0005A1  1178 LINK = . 
      0005A1 03                    1179 	.byte      3
      0005A2 54 4D 50              1180         .ascii     "TMP"
      0005A5                       1181 TEMP:
      0005A5 90 AE 00 08      [ 2] 1182 	LDW Y,#UTMP
      0005A9 1D 00 02         [ 2] 1183 	SUBW X,#2
      0005AC FF               [ 2] 1184         LDW (X),Y
      0005AD 81               [ 4] 1185         RET
                                   1186 
                                   1187 ;       >IN     ( -- a )
                                   1188 ;        Hold parsing pointer.
      0005AE 05 A1                 1189         .word      LINK
                           0005B0  1190 LINK = . 
      0005B0 03                    1191         .byte      3
      0005B1 3E 49 4E              1192         .ascii    ">IN"
      0005B4                       1193 INN:
      0005B4 90 AE 00 0A      [ 2] 1194 	LDW Y,#UINN 
      0005B8 1D 00 02         [ 2] 1195 	SUBW X,#2
      0005BB FF               [ 2] 1196         LDW (X),Y
      0005BC 81               [ 4] 1197         RET
                                   1198 
                                   1199 ;       #TIB    ( -- a )
                                   1200 ;       Count in terminal input buffer.
      0005BD 05 B0                 1201         .word      LINK
                           0005BF  1202 LINK = . 
      0005BF 04                    1203         .byte      4
      0005C0 23 54 49 42           1204         .ascii     "#TIB"
      0005C4                       1205 NTIB:
      0005C4 90 AE 00 0C      [ 2] 1206 	LDW Y,#UCTIB 
      0005C8 1D 00 02         [ 2] 1207 	SUBW X,#2
      0005CB FF               [ 2] 1208         LDW (X),Y
      0005CC 81               [ 4] 1209         RET
                                   1210 
                                   1211 ;       TBUF ( -- a )
                                   1212 ;       address of 128 bytes transaction buffer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005CD 05 BF                 1213         .word LINK 
                           0005CF  1214         LINK=.
      0005CF 04                    1215         .byte 4 
      0005D0 54 42 55 46           1216         .ascii "TBUF"
      0005D4                       1217 TBUF:
      0005D4 90 AE 06 80      [ 2] 1218         ldw y,#ROWBUFF
      0005D8 1D 00 02         [ 2] 1219         subw x,#CELLL
      0005DB FF               [ 2] 1220         ldw (x),y 
      0005DC 81               [ 4] 1221         ret 
                                   1222 
                                   1223 ; systeme variable 
                                   1224 ; compilation destination 
                                   1225 ; TFLASH ( -- A )
      0005DD 05 CF                 1226         .word LINK 
                           0005DF  1227         LINK=.
      0005DF 06                    1228         .byte 6 
      0005E0 54 46 4C 41 53 48     1229         .ascii "TFLASH"         
      0005E6                       1230 TFLASH:
      0005E6 1D 00 02         [ 2] 1231         subw x,#CELLL 
      0005E9 90 AE 00 1E      [ 2] 1232         ldw y,#UTFLASH
      0005ED FF               [ 2] 1233         ldw (x),y 
      0005EE 81               [ 4] 1234         ret 
                                   1235 
                                   1236 ;       "EVAL   ( -- a )
                                   1237 ;       Execution vector of EVAL.
      0005EF 05 DF                 1238         .word      LINK
                           0005F1  1239 LINK = . 
      0005F1 05                    1240         .byte      5
      0005F2 27 45 56 41 4C        1241         .ascii     "'EVAL"
      0005F7                       1242 TEVAL:
      0005F7 90 AE 00 10      [ 2] 1243 	LDW Y,#UINTER 
      0005FB 1D 00 02         [ 2] 1244 	SUBW X,#2
      0005FE FF               [ 2] 1245         LDW (X),Y
      0005FF 81               [ 4] 1246         RET
                                   1247 
                                   1248 ;       HLD     ( -- a )
                                   1249 ;       Hold a pointer of output string.
      000600 05 F1                 1250         .word      LINK
                           000602  1251 LINK = . 
      000602 03                    1252         .byte      3
      000603 48 4C 44              1253         .ascii     "HLD"
      000606                       1254 HLD:
      000606 90 AE 00 12      [ 2] 1255 	LDW Y,#UHLD 
      00060A 1D 00 02         [ 2] 1256 	SUBW X,#2
      00060D FF               [ 2] 1257         LDW (X),Y
      00060E 81               [ 4] 1258         RET
                                   1259 
                                   1260 ;       CONTEXT ( -- a )
                                   1261 ;       Start vocabulary search.
      00060F 06 02                 1262         .word      LINK
                           000611  1263 LINK = . 
      000611 07                    1264         .byte      7
      000612 43 4F 4E 54 45 58 54  1265         .ascii     "CONTEXT"
      000619                       1266 CNTXT:
      000619 90 AE 00 14      [ 2] 1267 	LDW Y,#UCNTXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00061D 1D 00 02         [ 2] 1268 	SUBW X,#2
      000620 FF               [ 2] 1269         LDW (X),Y
      000621 81               [ 4] 1270         RET
                                   1271 
                                   1272 ;       VP      ( -- a )
                                   1273 ;       Point to top of variables
      000622 06 11                 1274         .word      LINK
                           000624  1275 LINK = . 
      000624 02                    1276         .byte      2
      000625 56 50                 1277         .ascii     "VP"
      000627                       1278 VPP:
      000627 90 AE 00 16      [ 2] 1279 	LDW Y,#UVP 
      00062B 1D 00 02         [ 2] 1280 	SUBW X,#2
      00062E FF               [ 2] 1281         LDW (X),Y
      00062F 81               [ 4] 1282         RET
                                   1283 
                                   1284 ;       CP    ( -- a )
                                   1285 ;       Pointer to top of FLASH 
      000630 06 24                 1286         .word LINK 
                           000632  1287         LINK=.
      000632 02                    1288         .byte 2 
      000633 43 50                 1289         .ascii "CP"
      000635                       1290 CPP: 
      000635 90 AE 00 18      [ 2] 1291         ldw y,#UCP 
      000639 1D 00 02         [ 2] 1292         subw x,#CELLL 
      00063C FF               [ 2] 1293         ldw (x),y 
      00063D 81               [ 4] 1294         ret                
                                   1295 
                                   1296 ;       LAST    ( -- a )
                                   1297 ;       Point to last name in dictionary.
      00063E 06 32                 1298         .word      LINK
                           000640  1299 LINK = . 
      000640 04                    1300         .byte      4
      000641 4C 41 53 54           1301         .ascii     "LAST"
      000645                       1302 LAST:
      000645 90 AE 00 1A      [ 2] 1303 	LDW Y,#ULAST 
      000649 1D 00 02         [ 2] 1304 	SUBW X,#2
      00064C FF               [ 2] 1305         LDW (X),Y
      00064D 81               [ 4] 1306         RET
                                   1307 
                                   1308 ; address of system variable URLAST 
                                   1309 ;       RAMLAST ( -- a )
                                   1310 ; RAM dictionary context 
      00064E 06 40                 1311         .word LINK 
                           000650  1312         LINK=. 
      000650 07                    1313         .byte 7  
      000651 52 41 4D 4C 41 53 54  1314         .ascii "RAMLAST" 
      000658                       1315 RAMLAST: 
      000658 90 AE 00 20      [ 2] 1316         ldw y,#URLAST 
      00065C 1D 00 02         [ 2] 1317         subw x,#CELLL 
      00065F FF               [ 2] 1318         ldw (x),y 
      000660 81               [ 4] 1319         ret 
                                   1320 
                                   1321 ; OFFSET ( -- a )
                                   1322 ; address of system variable OFFSET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000661 06 50                 1323         .word LINK 
                           000663  1324         LINK=.
      000663 06                    1325         .byte 6
      000664 4F 46 46 53 45 54     1326         .ascii "OFFSET" 
      00066A                       1327 OFFSET: 
      00066A 1D 00 02         [ 2] 1328         subw x,#CELLL
      00066D 90 AE 00 1C      [ 2] 1329         ldw y,#UOFFSET 
      000671 FF               [ 2] 1330         ldw (x),y 
      000672 81               [ 4] 1331         ret 
                                   1332 
                                   1333 ; adjust jump address adding OFFSET
                                   1334 ; ADR-ADJ ( a -- a+offset )
      000673                       1335 ADRADJ: 
      000673 CD 06 6A         [ 4] 1336         call OFFSET 
      000676 CD 04 32         [ 4] 1337         call AT 
      000679 CC 06 D4         [ 2] 1338         jp PLUS 
                                   1339 
                                   1340 
                                   1341 ;; Common functions
                                   1342 
                                   1343 ;       ?DUP    ( w -- w w | 0 )
                                   1344 ;       Dup tos if its is not zero.
      00067C 06 63                 1345         .word      LINK
                           00067E  1346 LINK = . 
      00067E 04                    1347         .byte      4
      00067F 3F 44 55 50           1348         .ascii     "?DUP"
      000683                       1349 QDUP:
      000683 90 93            [ 1] 1350         LDW Y,X
      000685 90 FE            [ 2] 1351 	LDW Y,(Y)
      000687 27 04            [ 1] 1352         JREQ     QDUP1
      000689 1D 00 02         [ 2] 1353 	SUBW X,#2
      00068C FF               [ 2] 1354         LDW (X),Y
      00068D 81               [ 4] 1355 QDUP1:  RET
                                   1356 
                                   1357 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1358 ;       Rot 3rd item to top.
      00068E 06 7E                 1359         .word      LINK
                           000690  1360 LINK = . 
      000690 03                    1361         .byte      3
      000691 52 4F 54              1362         .ascii     "ROT"
      000694                       1363 ROT:
      000694 90 93            [ 1] 1364         ldw y,x 
      000696 90 FE            [ 2] 1365         ldw y,(y)
      000698 90 89            [ 2] 1366         pushw y 
      00069A 90 93            [ 1] 1367         ldw y,x 
      00069C 90 EE 04         [ 2] 1368         ldw y,(4,y)
      00069F FF               [ 2] 1369         ldw (x),y 
      0006A0 90 93            [ 1] 1370         ldw y,x 
      0006A2 90 EE 02         [ 2] 1371         ldw y,(2,y)
      0006A5 EF 04            [ 2] 1372         ldw (4,x),y 
      0006A7 90 85            [ 2] 1373         popw y 
      0006A9 EF 02            [ 2] 1374         ldw (2,x),y
      0006AB 81               [ 4] 1375         ret 
                                   1376 
                                   1377 ;       2DROP   ( w w -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1378 ;       Discard two items on stack.
      0006AC 06 90                 1379         .word      LINK
                           0006AE  1380 LINK = . 
      0006AE 05                    1381         .byte      5
      0006AF 32 44 52 4F 50        1382         .ascii     "2DROP"
      0006B4                       1383 DDROP:
      0006B4 1C 00 04         [ 2] 1384         ADDW X,#4
      0006B7 81               [ 4] 1385         RET
                                   1386 
                                   1387 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1388 ;       Duplicate top two items.
      0006B8 06 AE                 1389         .word      LINK
                           0006BA  1390 LINK = . 
      0006BA 04                    1391         .byte      4
      0006BB 32 44 55 50           1392         .ascii     "2DUP"
      0006BF                       1393 DDUP:
      0006BF 1D 00 04         [ 2] 1394         SUBW X,#4
      0006C2 90 93            [ 1] 1395         LDW Y,X
      0006C4 90 EE 06         [ 2] 1396         LDW Y,(6,Y)
      0006C7 EF 02            [ 2] 1397         LDW (2,X),Y
      0006C9 90 93            [ 1] 1398         LDW Y,X
      0006CB 90 EE 04         [ 2] 1399         LDW Y,(4,Y)
      0006CE FF               [ 2] 1400         LDW (X),Y
      0006CF 81               [ 4] 1401         RET
                                   1402 
                                   1403 ;       +       ( w w -- sum )
                                   1404 ;       Add top two items.
      0006D0 06 BA                 1405         .word      LINK
                           0006D2  1406 LINK = . 
      0006D2 01                    1407         .byte      1
      0006D3 2B                    1408         .ascii     "+"
      0006D4                       1409 PLUS:
      0006D4 90 93            [ 1] 1410         LDW Y,X
      0006D6 90 FE            [ 2] 1411         LDW Y,(Y)
      0006D8 90 BF 24         [ 2] 1412         LDW YTEMP,Y
      0006DB 1C 00 02         [ 2] 1413         ADDW X,#2
      0006DE 90 93            [ 1] 1414         LDW Y,X
      0006E0 90 FE            [ 2] 1415         LDW Y,(Y)
      0006E2 72 B9 00 24      [ 2] 1416         ADDW Y,YTEMP
      0006E6 FF               [ 2] 1417         LDW (X),Y
      0006E7 81               [ 4] 1418         RET
                                   1419 
                                   1420 ;       NOT     ( w -- w )
                                   1421 ;       One's complement of tos.
      0006E8 06 D2                 1422         .word      LINK
                           0006EA  1423 LINK = . 
      0006EA 03                    1424         .byte      3
      0006EB 4E 4F 54              1425         .ascii     "NOT"
      0006EE                       1426 INVER:
      0006EE 90 93            [ 1] 1427         LDW Y,X
      0006F0 90 FE            [ 2] 1428         LDW Y,(Y)
      0006F2 90 53            [ 2] 1429         CPLW Y
      0006F4 FF               [ 2] 1430         LDW (X),Y
      0006F5 81               [ 4] 1431         RET
                                   1432 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1433 ;       NEGATE  ( n -- -n )
                                   1434 ;       Two's complement of tos.
      0006F6 06 EA                 1435         .word      LINK
                           0006F8  1436 LINK = . 
      0006F8 06                    1437         .byte      6
      0006F9 4E 45 47 41 54 45     1438         .ascii     "NEGATE"
      0006FF                       1439 NEGAT:
      0006FF 90 93            [ 1] 1440         LDW Y,X
      000701 90 FE            [ 2] 1441         LDW Y,(Y)
      000703 90 50            [ 2] 1442         NEGW Y
      000705 FF               [ 2] 1443         LDW (X),Y
      000706 81               [ 4] 1444         RET
                                   1445 
                                   1446 ;       DNEGATE ( d -- -d )
                                   1447 ;       Two's complement of top double.
      000707 06 F8                 1448         .word      LINK
                           000709  1449 LINK = . 
      000709 07                    1450         .byte      7
      00070A 44 4E 45 47 41 54 45  1451         .ascii     "DNEGATE"
      000711                       1452 DNEGA:
      000711 90 93            [ 1] 1453         LDW Y,X
      000713 90 FE            [ 2] 1454 	LDW Y,(Y)
      000715 90 53            [ 2] 1455         CPLW Y     
      000717 90 BF 24         [ 2] 1456 	LDW YTEMP,Y
      00071A 90 93            [ 1] 1457         LDW Y,X
      00071C 90 EE 02         [ 2] 1458         LDW Y,(2,Y)
      00071F 90 53            [ 2] 1459         CPLW Y
      000721 72 A9 00 01      [ 2] 1460         addw y,#1
      000725 EF 02            [ 2] 1461         LDW (2,X),Y
      000727 90 BE 24         [ 2] 1462         LDW Y,YTEMP
      00072A 24 02            [ 1] 1463         JRNC DN1 
      00072C 90 5C            [ 2] 1464         INCW Y
      00072E FF               [ 2] 1465 DN1:    LDW (X),Y
      00072F 81               [ 4] 1466         RET
                                   1467 
                                   1468 
                                   1469 ;       S>D ( n -- d )
                                   1470 ; convert single integer to double 
      000730 07 09                 1471         .word LINK 
                           000732  1472         LINK=. 
      000732 03                    1473         .byte 3 
      000733 53 3E 44              1474         .ascii "S>D"
      000736                       1475 STOD: 
      000736 1D 00 02         [ 2] 1476         subw x,#CELLL 
      000739 90 5F            [ 1] 1477         clrw y 
      00073B FF               [ 2] 1478         ldw (x),y 
      00073C 90 93            [ 1] 1479         ldw y,x 
      00073E 90 EE 02         [ 2] 1480         ldw y,(2,y)
      000741 2A 05            [ 1] 1481         jrpl 1$ 
      000743 90 AE FF FF      [ 2] 1482         ldw y,#-1
      000747 FF               [ 2] 1483         ldw (x),y 
      000748 81               [ 4] 1484 1$:     ret 
                                   1485 
                                   1486 
                                   1487 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1488 
                                   1489 ;       -       ( n1 n2 -- n1-n2 )
                                   1490 ;       Subtraction.
      000749 07 32                 1491         .word      LINK
                           00074B  1492 LINK = . 
      00074B 01                    1493         .byte      1
      00074C 2D                    1494         .ascii     "-"
      00074D                       1495 SUBB:
      00074D 90 93            [ 1] 1496         LDW Y,X
      00074F 90 FE            [ 2] 1497         LDW Y,(Y)
      000751 90 BF 24         [ 2] 1498         LDW YTEMP,Y
      000754 1C 00 02         [ 2] 1499         ADDW X,#2
      000757 90 93            [ 1] 1500         LDW Y,X
      000759 90 FE            [ 2] 1501         LDW Y,(Y)
      00075B 72 B2 00 24      [ 2] 1502         SUBW Y,YTEMP
      00075F FF               [ 2] 1503         LDW (X),Y
      000760 81               [ 4] 1504         RET
                                   1505 
                                   1506 ;       ABS     ( n -- n )
                                   1507 ;       Return  absolute value of n.
      000761 07 4B                 1508         .word      LINK
                           000763  1509 LINK = . 
      000763 03                    1510         .byte      3
      000764 41 42 53              1511         .ascii     "ABS"
      000767                       1512 ABSS:
      000767 90 93            [ 1] 1513         LDW Y,X
      000769 90 FE            [ 2] 1514 	LDW Y,(Y)
      00076B 2A 03            [ 1] 1515         JRPL     AB1     ;negate:
      00076D 90 50            [ 2] 1516         NEGW     Y     ;else negate hi byte
      00076F FF               [ 2] 1517         LDW (X),Y
      000770 81               [ 4] 1518 AB1:    RET
                                   1519 
                                   1520 ;       =       ( w w -- t )
                                   1521 ;       Return true if top two are =al.
      000771 07 63                 1522         .word      LINK
                           000773  1523 LINK = . 
      000773 01                    1524         .byte      1
      000774 3D                    1525         .ascii     "="
      000775                       1526 EQUAL:
      000775 A6 FF            [ 1] 1527         LD A,#0xFF  ;true
      000777 90 93            [ 1] 1528         LDW Y,X    ;D = n2
      000779 90 FE            [ 2] 1529         LDW Y,(Y)
      00077B 90 BF 24         [ 2] 1530         LDW YTEMP,Y
      00077E 1C 00 02         [ 2] 1531         ADDW X,#2
      000781 90 93            [ 1] 1532         LDW Y,X
      000783 90 FE            [ 2] 1533         LDW Y,(Y)
      000785 90 B3 24         [ 2] 1534         CPW Y,YTEMP     ;if n2 <> n1
      000788 27 01            [ 1] 1535         JREQ     EQ1
      00078A 4F               [ 1] 1536         CLR A
      00078B F7               [ 1] 1537 EQ1:    LD (X),A
      00078C E7 01            [ 1] 1538         LD (1,X),A
      00078E 81               [ 4] 1539 	RET     
                                   1540 
                                   1541 ;       U<      ( u u -- t )
                                   1542 ;       Unsigned compare of top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00078F 07 73                 1543         .word      LINK
                           000791  1544 LINK = . 
      000791 02                    1545         .byte      2
      000792 55 3C                 1546         .ascii     "U<"
      000794                       1547 ULESS:
      000794 A6 FF            [ 1] 1548         LD A,#0xFF  ;true
      000796 90 93            [ 1] 1549         LDW Y,X    ;D = n2
      000798 90 FE            [ 2] 1550         LDW Y,(Y)
      00079A 90 BF 24         [ 2] 1551         LDW YTEMP,Y
      00079D 1C 00 02         [ 2] 1552         ADDW X,#2
      0007A0 90 93            [ 1] 1553         LDW Y,X
      0007A2 90 FE            [ 2] 1554         LDW Y,(Y)
      0007A4 90 B3 24         [ 2] 1555         CPW Y,YTEMP     ;if n2 <> n1
      0007A7 25 01            [ 1] 1556         JRULT     ULES1
      0007A9 4F               [ 1] 1557         CLR A
      0007AA F7               [ 1] 1558 ULES1:  LD (X),A
      0007AB E7 01            [ 1] 1559         LD (1,X),A
      0007AD 81               [ 4] 1560 	RET     
                                   1561 
                                   1562 ;       <       ( n1 n2 -- t )
                                   1563 ;       Signed compare of top two items.
      0007AE 07 91                 1564         .word      LINK
                           0007B0  1565 LINK = . 
      0007B0 01                    1566         .byte      1
      0007B1 3C                    1567         .ascii     "<"
      0007B2                       1568 LESS:
      0007B2 A6 FF            [ 1] 1569         LD A,#0xFF  ;true
      0007B4 90 93            [ 1] 1570         LDW Y,X    ;D = n2
      0007B6 90 FE            [ 2] 1571         LDW Y,(Y)
      0007B8 90 BF 24         [ 2] 1572         LDW YTEMP,Y
      0007BB 1C 00 02         [ 2] 1573         ADDW X,#2
      0007BE 90 93            [ 1] 1574         LDW Y,X
      0007C0 90 FE            [ 2] 1575         LDW Y,(Y)
      0007C2 90 B3 24         [ 2] 1576         CPW Y,YTEMP     ;if n2 <> n1
      0007C5 2F 01            [ 1] 1577         JRSLT     LT1
      0007C7 4F               [ 1] 1578         CLR A
      0007C8 F7               [ 1] 1579 LT1:    LD (X),A
      0007C9 E7 01            [ 1] 1580         LD (1,X),A
      0007CB 81               [ 4] 1581 	RET     
                                   1582 
                                   1583 ;       MAX     ( n n -- n )
                                   1584 ;       Return greater of two top items.
      0007CC 07 B0                 1585         .word      LINK
                           0007CE  1586 LINK = . 
      0007CE 03                    1587         .byte      3
      0007CF 4D 41 58              1588         .ascii     "MAX"
      0007D2                       1589 MAX:
      0007D2 90 93            [ 1] 1590         LDW Y,X    ;D = n2
      0007D4 90 EE 02         [ 2] 1591         LDW Y,(2,Y)
      0007D7 90 BF 24         [ 2] 1592         LDW YTEMP,Y
      0007DA 90 93            [ 1] 1593         LDW Y,X
      0007DC 90 FE            [ 2] 1594         LDW Y,(Y)
      0007DE 90 B3 24         [ 2] 1595         CPW Y,YTEMP     ;if n2 <> n1
      0007E1 2F 02            [ 1] 1596         JRSLT     MAX1
      0007E3 EF 02            [ 2] 1597         LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007E5 1C 00 02         [ 2] 1598 MAX1:   ADDW X,#2
      0007E8 81               [ 4] 1599 	RET     
                                   1600 
                                   1601 ;       MIN     ( n n -- n )
                                   1602 ;       Return smaller of top two items.
      0007E9 07 CE                 1603         .word      LINK
                           0007EB  1604 LINK = . 
      0007EB 03                    1605         .byte      3
      0007EC 4D 49 4E              1606         .ascii     "MIN"
      0007EF                       1607 MIN:
      0007EF 90 93            [ 1] 1608         LDW Y,X    ;D = n2
      0007F1 90 EE 02         [ 2] 1609         LDW Y,(2,Y)
      0007F4 90 BF 24         [ 2] 1610         LDW YTEMP,Y
      0007F7 90 93            [ 1] 1611         LDW Y,X
      0007F9 90 FE            [ 2] 1612         LDW Y,(Y)
      0007FB 90 B3 24         [ 2] 1613         CPW Y,YTEMP     ;if n2 <> n1
      0007FE 2C 02            [ 1] 1614         JRSGT     MIN1
      000800 EF 02            [ 2] 1615         LDW (2,X),Y
      000802 1C 00 02         [ 2] 1616 MIN1:	ADDW X,#2
      000805 81               [ 4] 1617 	RET     
                                   1618 
                                   1619 ;       WITHIN  ( u ul uh -- t )
                                   1620 ;       Return true if u is within
                                   1621 ;       range of ul and uh. ( ul <= u < uh )
      000806 07 EB                 1622         .word      LINK
                           000808  1623 LINK = . 
      000808 06                    1624         .byte      6
      000809 57 49 54 48 49 4E     1625         .ascii     "WITHIN"
      00080F                       1626 WITHI:
      00080F CD 05 03         [ 4] 1627         CALL     OVER
      000812 CD 07 4D         [ 4] 1628         CALL     SUBB
      000815 CD 04 A2         [ 4] 1629         CALL     TOR
      000818 CD 07 4D         [ 4] 1630         CALL     SUBB
      00081B CD 04 83         [ 4] 1631         CALL     RFROM
      00081E CC 07 94         [ 2] 1632         JP     ULESS
                                   1633 
                                   1634 ;; Divide
                                   1635 
                                   1636 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1637 ;       Unsigned divide of a double by a
                                   1638 ;       single. Return mod and quotient.
      000821 08 08                 1639         .word      LINK
                           000823  1640 LINK = . 
      000823 06                    1641         .byte      6
      000824 55 4D 2F 4D 4F 44     1642         .ascii     "UM/MOD"
      00082A                       1643 UMMOD:
      00082A BF 22            [ 2] 1644 	LDW XTEMP,X	; save stack pointer
      00082C FE               [ 2] 1645 	LDW X,(X)	; un
      00082D BF 24            [ 2] 1646 	LDW YTEMP,X     ; save un
      00082F 90 BE 22         [ 2] 1647 	LDW Y,XTEMP	; stack pointer
      000832 90 EE 04         [ 2] 1648 	LDW Y,(4,Y)     ; Y=udl
      000835 BE 22            [ 2] 1649 	LDW X,XTEMP
      000837 EE 02            [ 2] 1650 	LDW X,(2,X)	; X=udh
      000839 B3 24            [ 2] 1651 	CPW X,YTEMP
      00083B 23 0F            [ 2] 1652 	JRULE MMSM1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00083D BE 22            [ 2] 1653 	LDW X,XTEMP
      00083F 1C 00 02         [ 2] 1654 	ADDW X,#2	; pop off 1 level
      000842 90 AE FF FF      [ 2] 1655 	LDW Y,#0xFFFF
      000846 FF               [ 2] 1656 	LDW (X),Y
      000847 90 5F            [ 1] 1657 	CLRW Y
      000849 EF 02            [ 2] 1658 	LDW (2,X),Y
      00084B 81               [ 4] 1659 	RET
      00084C                       1660 MMSM1:
                                   1661 ; take advantage of divw x,y when udh==0
      00084C 5D               [ 2] 1662         tnzw x  ; is udh==0?
      00084D 26 11            [ 1] 1663         jrne MMSM2 
      00084F 93               [ 1] 1664         ldw x,y    ;udl 
      000850 90 BE 24         [ 2] 1665         ldw y,YTEMP ; divisor 
      000853 65               [ 2] 1666         divw x,y 
      000854 89               [ 2] 1667         pushw x     ; quotient 
      000855 BE 22            [ 2] 1668         ldw x,XTEMP 
      000857 1C 00 02         [ 2] 1669         addw x,#CELLL 
      00085A EF 02            [ 2] 1670         ldw (2,x),y  ; ur
      00085C 90 85            [ 2] 1671         popw y 
      00085E FF               [ 2] 1672         ldw (x),y ; uq 
      00085F 81               [ 4] 1673         ret 
      000860                       1674 MMSM2:        
      000860 A6 11            [ 1] 1675 	LD A,#17	; loop count
      000862                       1676 MMSM3:
      000862 B3 24            [ 2] 1677 	CPW X,YTEMP	; compare udh to un
      000864 25 04            [ 1] 1678 	JRULT MMSM4	; can't subtract
      000866 72 B0 00 24      [ 2] 1679 	SUBW X,YTEMP	; can subtract
      00086A                       1680 MMSM4:
      00086A 8C               [ 1] 1681 	CCF	; quotient bit
      00086B 90 59            [ 2] 1682 	RLCW Y	; rotate into quotient
      00086D 59               [ 2] 1683 	RLCW X	; rotate into remainder
      00086E 4A               [ 1] 1684 	DEC A	; repeat
      00086F 22 F1            [ 1] 1685 	JRUGT MMSM3
      000871 56               [ 2] 1686         RRCW X 
      000872 BF 24            [ 2] 1687 	LDW YTEMP,X	; done, save remainder
      000874 BE 22            [ 2] 1688 	LDW X,XTEMP
      000876 1C 00 02         [ 2] 1689 	ADDW X,#2	; drop
      000879 FF               [ 2] 1690 	LDW (X),Y
      00087A 90 BE 24         [ 2] 1691 	LDW Y,YTEMP	; save quotient
      00087D EF 02            [ 2] 1692 	LDW (2,X),Y
      00087F 81               [ 4] 1693 	RET
                                   1694 	
                                   1695 ;       M/MOD   ( d n -- r q )
                                   1696 ;       Signed floored divide of double by
                                   1697 ;       single. Return mod and quotient.
      000880 08 23                 1698         .word      LINK
                           000882  1699 LINK = . 
      000882 05                    1700         .byte      5
      000883 4D 2F 4D 4F 44        1701         .ascii     "M/MOD"
      000888                       1702 MSMOD:  
      000888 CD 04 D9         [ 4] 1703         CALL	DUPP
      00088B CD 05 12         [ 4] 1704         CALL	ZLESS
      00088E CD 04 D9         [ 4] 1705         CALL	DUPP
      000891 CD 04 A2         [ 4] 1706         CALL	TOR
      000894 CD 03 E7         [ 4] 1707         CALL	QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000897 08 A5                 1708         .word	MMOD1
      000899 CD 06 FF         [ 4] 1709         CALL	NEGAT
      00089C CD 04 A2         [ 4] 1710         CALL	TOR
      00089F CD 07 11         [ 4] 1711         CALL	DNEGA
      0008A2 CD 04 83         [ 4] 1712         CALL	RFROM
      0008A5 CD 04 A2         [ 4] 1713 MMOD1:	CALL	TOR
      0008A8 CD 04 D9         [ 4] 1714         CALL	DUPP
      0008AB CD 05 12         [ 4] 1715         CALL	ZLESS
      0008AE CD 03 E7         [ 4] 1716         CALL	QBRAN
      0008B1 08 B9                 1717         .word	MMOD2
      0008B3 CD 04 96         [ 4] 1718         CALL	RAT
      0008B6 CD 06 D4         [ 4] 1719         CALL	PLUS
      0008B9 CD 04 83         [ 4] 1720 MMOD2:	CALL	RFROM
      0008BC CD 08 2A         [ 4] 1721         CALL	UMMOD
      0008BF CD 04 83         [ 4] 1722         CALL	RFROM
      0008C2 CD 03 E7         [ 4] 1723         CALL	QBRAN
      0008C5 08 D0                 1724         .word	MMOD3
      0008C7 CD 04 E9         [ 4] 1725         CALL	SWAPP
      0008CA CD 06 FF         [ 4] 1726         CALL	NEGAT
      0008CD CD 04 E9         [ 4] 1727         CALL	SWAPP
      0008D0 81               [ 4] 1728 MMOD3:	RET
                                   1729 
                                   1730 ;       /MOD    ( n n -- r q )
                                   1731 ;       Signed divide. Return mod and quotient.
      0008D1 08 82                 1732         .word      LINK
                           0008D3  1733 LINK = . 
      0008D3 04                    1734         .byte      4
      0008D4 2F 4D 4F 44           1735         .ascii     "/MOD"
      0008D8                       1736 SLMOD:
      0008D8 CD 05 03         [ 4] 1737         CALL	OVER
      0008DB CD 05 12         [ 4] 1738         CALL	ZLESS
      0008DE CD 04 E9         [ 4] 1739         CALL	SWAPP
      0008E1 CC 08 88         [ 2] 1740         JP	MSMOD
                                   1741 
                                   1742 ;       MOD     ( n n -- r )
                                   1743 ;       Signed divide. Return mod only.
      0008E4 08 D3                 1744         .word      LINK
                           0008E6  1745 LINK = . 
      0008E6 03                    1746         .byte      3
      0008E7 4D 4F 44              1747         .ascii     "MOD"
      0008EA                       1748 MODD:
      0008EA CD 08 D8         [ 4] 1749 	CALL	SLMOD
      0008ED CC 04 CF         [ 2] 1750 	JP	DROP
                                   1751 
                                   1752 ;       /       ( n n -- q )
                                   1753 ;       Signed divide. Return quotient only.
      0008F0 08 E6                 1754         .word      LINK
                           0008F2  1755 LINK = . 
      0008F2 01                    1756         .byte      1
      0008F3 2F                    1757         .ascii     "/"
      0008F4                       1758 SLASH:
      0008F4 CD 08 D8         [ 4] 1759         CALL	SLMOD
      0008F7 CD 04 E9         [ 4] 1760         CALL	SWAPP
      0008FA CC 04 CF         [ 2] 1761         JP	DROP
                                   1762 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1763 ;; Multiply
                                   1764 
                                   1765 ;       UM*     ( u u -- ud )
                                   1766 ;       Unsigned multiply. Return double product.
      0008FD 08 F2                 1767         .word      LINK
                           0008FF  1768 LINK = . 
      0008FF 03                    1769         .byte      3
      000900 55 4D 2A              1770         .ascii     "UM*"
      000903                       1771 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1772 ; take advantage of SP addressing modes
                                   1773 ; these PRODx in RAM are not required
                                   1774 ; the product is kept on stack as local variable 
                                   1775         ;; bytes offset on data stack 
                           000002  1776         da=2 
                           000003  1777         db=3 
                           000000  1778         dc=0 
                           000001  1779         dd=1 
                                   1780         ;; product bytes offset on return stack 
                           000001  1781         UD1=1  ; ud bits 31..24
                           000002  1782         UD2=2  ; ud bits 23..16
                           000003  1783         UD3=3  ; ud bits 15..8 
                           000004  1784         UD4=4  ; ud bits 7..0 
                                   1785         ;; local variable for product set to zero   
      000903 90 5F            [ 1] 1786         clrw y 
      000905 90 89            [ 2] 1787         pushw y  ; bits 15..0
      000907 90 89            [ 2] 1788         pushw y  ; bits 31..16 
      000909 E6 03            [ 1] 1789         ld a,(db,x) ; b 
      00090B 90 97            [ 1] 1790         ld yl,a 
      00090D E6 01            [ 1] 1791         ld a,(dd,x)   ; d
      00090F 90 42            [ 4] 1792         mul y,a    ; b*d  
      000911 17 03            [ 2] 1793         ldw (UD3,sp),y ; lowest weight product 
      000913 E6 03            [ 1] 1794         ld a,(db,x)
      000915 90 97            [ 1] 1795         ld yl,a 
      000917 E6 00            [ 1] 1796         ld a,(dc,x)
      000919 90 42            [ 4] 1797         mul y,a  ; b*c 
                                   1798         ;;; do the partial sum 
      00091B 72 F9 02         [ 2] 1799         addw y,(UD2,sp)
      00091E 4F               [ 1] 1800         clr a 
      00091F 49               [ 1] 1801         rlc a
      000920 6B 01            [ 1] 1802         ld (UD1,sp),a 
      000922 17 02            [ 2] 1803         ldw (UD2,sp),y 
      000924 E6 02            [ 1] 1804         ld a,(da,x)
      000926 90 97            [ 1] 1805         ld yl,a 
      000928 E6 01            [ 1] 1806         ld a,(dd,x)
      00092A 90 42            [ 4] 1807         mul y,a   ; a*d 
                                   1808         ;; do partial sum 
      00092C 72 F9 02         [ 2] 1809         addw y,(UD2,sp)
      00092F 4F               [ 1] 1810         clr a 
      000930 19 01            [ 1] 1811         adc a,(UD1,sp)
      000932 6B 01            [ 1] 1812         ld (UD1,sp),a  
      000934 17 02            [ 2] 1813         ldw (UD2,sp),y 
      000936 E6 02            [ 1] 1814         ld a,(da,x)
      000938 90 97            [ 1] 1815         ld yl,a 
      00093A E6 00            [ 1] 1816         ld a,(dc,x)
      00093C 90 42            [ 4] 1817         mul y,a  ;  a*c highest weight product 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1818         ;;; do partial sum 
      00093E 72 F9 01         [ 2] 1819         addw y,(UD1,sp)
      000941 FF               [ 2] 1820         ldw (x),y  ; udh 
      000942 16 03            [ 2] 1821         ldw y,(UD3,sp)
      000944 EF 02            [ 2] 1822         ldw (2,x),y  ; udl  
      000946 5B 04            [ 2] 1823         addw sp,#4 ; drop local variable 
      000948 81               [ 4] 1824         ret  
                                   1825 
                                   1826 
                                   1827 ;       *       ( n n -- n )
                                   1828 ;       Signed multiply. Return single product.
      000949 08 FF                 1829         .word      LINK
                           00094B  1830 LINK = . 
      00094B 01                    1831         .byte      1
      00094C 2A                    1832         .ascii     "*"
      00094D                       1833 STAR:
      00094D CD 09 03         [ 4] 1834 	CALL	UMSTA
      000950 CC 04 CF         [ 2] 1835 	JP	DROP
                                   1836 
                                   1837 ;       M*      ( n n -- d )
                                   1838 ;       Signed multiply. Return double product.
      000953 09 4B                 1839         .word      LINK
                           000955  1840 LINK = . 
      000955 02                    1841         .byte      2
      000956 4D 2A                 1842         .ascii     "M*"
      000958                       1843 MSTAR:      
      000958 CD 06 BF         [ 4] 1844         CALL	DDUP
      00095B CD 05 4E         [ 4] 1845         CALL	XORR
      00095E CD 05 12         [ 4] 1846         CALL	ZLESS
      000961 CD 04 A2         [ 4] 1847         CALL	TOR
      000964 CD 07 67         [ 4] 1848         CALL	ABSS
      000967 CD 04 E9         [ 4] 1849         CALL	SWAPP
      00096A CD 07 67         [ 4] 1850         CALL	ABSS
      00096D CD 09 03         [ 4] 1851         CALL	UMSTA
      000970 CD 04 83         [ 4] 1852         CALL	RFROM
      000973 CD 03 E7         [ 4] 1853         CALL	QBRAN
      000976 09 7B                 1854         .word	MSTA1
      000978 CD 07 11         [ 4] 1855         CALL	DNEGA
      00097B 81               [ 4] 1856 MSTA1:	RET
                                   1857 
                                   1858 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1859 ;       Multiply n1 and n2, then divide
                                   1860 ;       by n3. Return mod and quotient.
      00097C 09 55                 1861         .word      LINK
                           00097E  1862 LINK = . 
      00097E 05                    1863         .byte      5
      00097F 2A 2F 4D 4F 44        1864         .ascii     "*/MOD"
      000984                       1865 SSMOD:
      000984 CD 04 A2         [ 4] 1866         CALL     TOR
      000987 CD 09 58         [ 4] 1867         CALL     MSTAR
      00098A CD 04 83         [ 4] 1868         CALL     RFROM
      00098D CC 08 88         [ 2] 1869         JP     MSMOD
                                   1870 
                                   1871 ;       */      ( n1 n2 n3 -- q )
                                   1872 ;       Multiply n1 by n2, then divide
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1873 ;       by n3. Return quotient only.
      000990 09 7E                 1874         .word      LINK
                           000992  1875 LINK = . 
      000992 02                    1876         .byte      2
      000993 2A 2F                 1877         .ascii     "*/"
      000995                       1878 STASL:
      000995 CD 09 84         [ 4] 1879         CALL	SSMOD
      000998 CD 04 E9         [ 4] 1880         CALL	SWAPP
      00099B CC 04 CF         [ 2] 1881         JP	DROP
                                   1882 
                                   1883 ;; Miscellaneous
                                   1884 
                                   1885 ;       CELL+   ( a -- a )
                                   1886 ;       Add cell size in byte to address.
      00099E 09 92                 1887         .word      LINK
                           0009A0  1888 LINK = . 
      0009A0 02                    1889         .byte       2
      0009A1 32 2B                 1890         .ascii     "2+"
      0009A3                       1891 CELLP:
      0009A3 90 93            [ 1] 1892         LDW Y,X
      0009A5 90 FE            [ 2] 1893 	LDW Y,(Y)
      0009A7 72 A9 00 02      [ 2] 1894         ADDW Y,#CELLL 
      0009AB FF               [ 2] 1895         LDW (X),Y
      0009AC 81               [ 4] 1896         RET
                                   1897 
                                   1898 ;       CELL-   ( a -- a )
                                   1899 ;       Subtract 2 from address.
      0009AD 09 A0                 1900         .word      LINK
                           0009AF  1901 LINK = . 
      0009AF 02                    1902         .byte       2
      0009B0 32 2D                 1903         .ascii     "2-"
      0009B2                       1904 CELLM:
      0009B2 90 93            [ 1] 1905         LDW Y,X
      0009B4 90 FE            [ 2] 1906 	LDW Y,(Y)
      0009B6 72 A2 00 02      [ 2] 1907         SUBW Y,#CELLL
      0009BA FF               [ 2] 1908         LDW (X),Y
      0009BB 81               [ 4] 1909         RET
                                   1910 
                                   1911 ;       CELLS   ( n -- n )
                                   1912 ;       Multiply tos by 2.
      0009BC 09 AF                 1913         .word      LINK
                           0009BE  1914 LINK = . 
      0009BE 02                    1915         .byte       2
      0009BF 32 2A                 1916         .ascii     "2*"
      0009C1                       1917 CELLS:
      0009C1 90 93            [ 1] 1918         LDW Y,X
      0009C3 90 FE            [ 2] 1919 	LDW Y,(Y)
      0009C5 90 58            [ 2] 1920         SLAW Y
      0009C7 FF               [ 2] 1921         LDW (X),Y
      0009C8 81               [ 4] 1922         RET
                                   1923 
                                   1924 ;       1+      ( a -- a )
                                   1925 ;       Add cell size in byte to address.
      0009C9 09 BE                 1926         .word      LINK
                           0009CB  1927 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009CB 02                    1928         .byte      2
      0009CC 31 2B                 1929         .ascii     "1+"
      0009CE                       1930 ONEP:
      0009CE 90 93            [ 1] 1931         LDW Y,X
      0009D0 90 FE            [ 2] 1932 	LDW Y,(Y)
      0009D2 90 5C            [ 2] 1933         INCW Y
      0009D4 FF               [ 2] 1934         LDW (X),Y
      0009D5 81               [ 4] 1935         RET
                                   1936 
                                   1937 ;       1-      ( a -- a )
                                   1938 ;       Subtract 2 from address.
      0009D6 09 CB                 1939         .word      LINK
                           0009D8  1940 LINK = . 
      0009D8 02                    1941         .byte      2
      0009D9 31 2D                 1942         .ascii     "1-"
      0009DB                       1943 ONEM:
      0009DB 90 93            [ 1] 1944         LDW Y,X
      0009DD 90 FE            [ 2] 1945 	LDW Y,(Y)
      0009DF 90 5A            [ 2] 1946         DECW Y
      0009E1 FF               [ 2] 1947         LDW (X),Y
      0009E2 81               [ 4] 1948         RET
                                   1949 
                                   1950 ;  shift left n times 
                                   1951 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009E3 09 D8                 1952         .word LINK 
                           0009E5  1953         LINK=.
      0009E5 06                    1954         .byte 6 
      0009E6 4C 53 48 49 46 54     1955         .ascii "LSHIFT"
      0009EC                       1956 LSHIFT:
      0009EC E6 01            [ 1] 1957         ld a,(1,x)
      0009EE 1C 00 02         [ 2] 1958         addw x,#CELLL 
      0009F1 90 93            [ 1] 1959         ldw y,x 
      0009F3 90 FE            [ 2] 1960         ldw y,(y)
      0009F5                       1961 LSHIFT1:
      0009F5 4D               [ 1] 1962         tnz a 
      0009F6 27 05            [ 1] 1963         jreq LSHIFT4 
      0009F8 90 58            [ 2] 1964         sllw y 
      0009FA 4A               [ 1] 1965         dec a 
      0009FB 20 F8            [ 2] 1966         jra LSHIFT1 
      0009FD                       1967 LSHIFT4:
      0009FD FF               [ 2] 1968         ldw (x),y 
      0009FE 81               [ 4] 1969         ret 
                                   1970 
                                   1971 ; shift right n times                 
                                   1972 ; RSHIFT (n1 n2 -- n1>>n2 )
      0009FF 09 E5                 1973         .word LINK 
                           000A01  1974         LINK=.
      000A01 06                    1975         .byte 6
      000A02 52 53 48 49 46 54     1976         .ascii "RSHIFT"
      000A08                       1977 RSHIFT:
      000A08 E6 01            [ 1] 1978         ld a,(1,x)
      000A0A 1C 00 02         [ 2] 1979         addw x,#CELLL 
      000A0D 90 93            [ 1] 1980         ldw y,x 
      000A0F 90 FE            [ 2] 1981         ldw y,(y)
      000A11                       1982 RSHIFT1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000A11 4D               [ 1] 1983         tnz a 
      000A12 27 05            [ 1] 1984         jreq RSHIFT4 
      000A14 90 54            [ 2] 1985         srlw y 
      000A16 4A               [ 1] 1986         dec a 
      000A17 20 F8            [ 2] 1987         jra RSHIFT1 
      000A19                       1988 RSHIFT4:
      000A19 FF               [ 2] 1989         ldw (x),y 
      000A1A 81               [ 4] 1990         ret 
                                   1991 
                                   1992 
                                   1993 ;       2/      ( n -- n )
                                   1994 ;       divide  tos by 2.
      000A1B 0A 01                 1995         .word      LINK
                           000A1D  1996 LINK = . 
      000A1D 02                    1997         .byte      2
      000A1E 32 2F                 1998         .ascii     "2/"
      000A20                       1999 TWOSL:
      000A20 90 93            [ 1] 2000         LDW Y,X
      000A22 90 FE            [ 2] 2001 	LDW Y,(Y)
      000A24 90 57            [ 2] 2002         SRAW Y
      000A26 FF               [ 2] 2003         LDW (X),Y
      000A27 81               [ 4] 2004         RET
                                   2005 
                                   2006 ;       BL      ( -- 32 )
                                   2007 ;       Return 32,  blank character.
      000A28 0A 1D                 2008         .word      LINK
                           000A2A  2009 LINK = . 
      000A2A 02                    2010         .byte      2
      000A2B 42 4C                 2011         .ascii     "BL"
      000A2D                       2012 BLANK:
      000A2D 1D 00 02         [ 2] 2013         SUBW X,#2
      000A30 90 AE 00 20      [ 2] 2014 	LDW Y,#32
      000A34 FF               [ 2] 2015         LDW (X),Y
      000A35 81               [ 4] 2016         RET
                                   2017 
                                   2018 ;         0     ( -- 0)
                                   2019 ;         Return 0.
      000A36 0A 2A                 2020         .word      LINK
                           000A38  2021 LINK = . 
      000A38 01                    2022         .byte       1
      000A39 30                    2023         .ascii     "0"
      000A3A                       2024 ZERO:
      000A3A 1D 00 02         [ 2] 2025         SUBW X,#2
      000A3D 90 5F            [ 1] 2026 	CLRW Y
      000A3F FF               [ 2] 2027         LDW (X),Y
      000A40 81               [ 4] 2028         RET
                                   2029 
                                   2030 ;         1     ( -- 1)
                                   2031 ;         Return 1.
      000A41 0A 38                 2032         .word      LINK
                           000A43  2033 LINK = . 
      000A43 01                    2034         .byte       1
      000A44 31                    2035         .ascii     "1"
      000A45                       2036 ONE:
      000A45 1D 00 02         [ 2] 2037         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A48 90 AE 00 01      [ 2] 2038 	LDW Y,#1
      000A4C FF               [ 2] 2039         LDW (X),Y
      000A4D 81               [ 4] 2040         RET
                                   2041 
                                   2042 ;         -1    ( -- -1)
                                   2043 ;         Return 32,  blank character.
      000A4E 0A 43                 2044         .word      LINK
                           000A50  2045 LINK = . 
      000A50 02                    2046         .byte       2
      000A51 2D 31                 2047         .ascii     "-1"
      000A53                       2048 MONE:
      000A53 1D 00 02         [ 2] 2049         SUBW X,#2
      000A56 90 AE FF FF      [ 2] 2050 	LDW Y,#0xFFFF
      000A5A FF               [ 2] 2051         LDW (X),Y
      000A5B 81               [ 4] 2052         RET
                                   2053 
                                   2054 ;       >CHAR   ( c -- c )
                                   2055 ;       Filter non-printing characters.
      000A5C 0A 50                 2056         .word      LINK
                           000A5E  2057 LINK = . 
      000A5E 05                    2058         .byte      5
      000A5F 3E 43 48 41 52        2059         .ascii     ">CHAR"
      000A64                       2060 TCHAR:
      000A64 E6 01            [ 1] 2061         ld a,(1,x)
      000A66 A1 20            [ 1] 2062         cp a,#32  
      000A68 2B 05            [ 1] 2063         jrmi 1$ 
      000A6A A1 7F            [ 1] 2064         cp a,#127 
      000A6C 2A 01            [ 1] 2065         jrpl 1$ 
      000A6E 81               [ 4] 2066         ret 
      000A6F A6 5F            [ 1] 2067 1$:     ld a,#'_ 
      000A71 E7 01            [ 1] 2068         ld (1,x),a 
      000A73 81               [ 4] 2069         ret 
                                   2070 
                                   2071 ;       DEPTH   ( -- n )
                                   2072 ;       Return  depth of  data stack.
      000A74 0A 5E                 2073         .word      LINK
                           000A76  2074 LINK = . 
      000A76 05                    2075         .byte      5
      000A77 44 45 50 54 48        2076         .ascii     "DEPTH"
      000A7C                       2077 DEPTH: 
      000A7C 90 BE 2A         [ 2] 2078         LDW Y,SP0    ;save data stack ptr
      000A7F BF 22            [ 2] 2079 	LDW XTEMP,X
      000A81 72 B2 00 22      [ 2] 2080         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A85 90 57            [ 2] 2081         SRAW Y    ;Y = #stack items
      000A87 1D 00 02         [ 2] 2082 	SUBW X,#2
      000A8A FF               [ 2] 2083         LDW (X),Y     ; if neg, underflow
      000A8B 81               [ 4] 2084         RET
                                   2085 
                                   2086 ;       PICK    ( ... +n -- ... w )
                                   2087 ;       Copy  nth stack item to tos.
      000A8C 0A 76                 2088         .word      LINK
                           000A8E  2089 LINK = . 
      000A8E 04                    2090         .byte      4
      000A8F 50 49 43 4B           2091         .ascii     "PICK"
      000A93                       2092 PICK:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A93 90 93            [ 1] 2093         LDW Y,X   ;D = n1
      000A95 90 FE            [ 2] 2094         LDW Y,(Y)
                                   2095 ; modified for standard compliance          
                                   2096 ; 0 PICK must be equivalent to DUP 
      000A97 90 5C            [ 2] 2097         INCW Y 
      000A99 90 58            [ 2] 2098         SLAW Y
      000A9B BF 22            [ 2] 2099         LDW XTEMP,X
      000A9D 72 B9 00 22      [ 2] 2100         ADDW Y,XTEMP
      000AA1 90 FE            [ 2] 2101         LDW Y,(Y)
      000AA3 FF               [ 2] 2102         LDW (X),Y
      000AA4 81               [ 4] 2103         RET
                                   2104 
                                   2105 ;; Memory access
                                   2106 
                                   2107 ;       +!      ( n a -- )
                                   2108 ;       Add n to  contents at address a.
      000AA5 0A 8E                 2109         .word      LINK
                           000AA7  2110 LINK = . 
      000AA7 02                    2111         .byte      2
      000AA8 2B 21                 2112         .ascii     "+!"
      000AAA                       2113 PSTOR:
      000AAA 90 93            [ 1] 2114         ldw y,x 
      000AAC 90 FE            [ 2] 2115         ldw y,(y)
      000AAE 90 BF 24         [ 2] 2116         ldw YTEMP,y  ; address
      000AB1 90 FE            [ 2] 2117         ldw y,(y)  
      000AB3 90 89            [ 2] 2118         pushw y  ; value at address 
      000AB5 90 93            [ 1] 2119         ldw y,x 
      000AB7 90 EE 02         [ 2] 2120         ldw y,(2,y) ; n 
      000ABA 72 F9 01         [ 2] 2121         addw y,(1,sp) ; n+value
      000ABD 91 CF 24         [ 5] 2122         ldw [YTEMP],y ;  a!
      000AC0 90 85            [ 2] 2123         popw y    ;drop local var
      000AC2 1C 00 04         [ 2] 2124         addw x,#4 ; DDROP 
      000AC5 81               [ 4] 2125         ret 
                                   2126 
                                   2127 ;       2!      ( d a -- )
                                   2128 ;       Store  double integer to address a.
      000AC6 0A A7                 2129         .word      LINK
                           000AC8  2130 LINK = . 
      000AC8 02                    2131         .byte      2
      000AC9 32 21                 2132         .ascii     "2!"
      000ACB                       2133 DSTOR:
      000ACB 90 93            [ 1] 2134         ldw y,x 
      000ACD 90 FE            [ 2] 2135         ldw y,(y)
      000ACF 90 BF 24         [ 2] 2136         ldw YTEMP,y ; address 
      000AD2 1C 00 02         [ 2] 2137         addw x,#CELLL ; drop a 
      000AD5 90 93            [ 1] 2138         ldw y,x 
      000AD7 90 FE            [ 2] 2139         ldw y,(y) ; hi word 
      000AD9 89               [ 2] 2140         pushw x 
      000ADA EE 02            [ 2] 2141         ldw x,(2,x) ; lo word 
      000ADC 91 CF 24         [ 5] 2142         ldw [YTEMP],y
      000ADF 90 93            [ 1] 2143         ldw y,x 
      000AE1 AE 00 02         [ 2] 2144         ldw x,#2 
      000AE4 92 DF 24         [ 5] 2145         ldw ([YTEMP],x),y 
      000AE7 85               [ 2] 2146         popw x 
      000AE8 1C 00 04         [ 2] 2147         addw x,#4 ; DDROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AEB 81               [ 4] 2148         ret 
                                   2149 
                                   2150 ;       2@      ( a -- d )
                                   2151 ;       Fetch double integer from address a.
      000AEC 0A C8                 2152         .word      LINK
                           000AEE  2153 LINK = . 
      000AEE 02                    2154         .byte      2
      000AEF 32 40                 2155         .ascii     "2@"
      000AF1                       2156 DAT:
      000AF1 90 93            [ 1] 2157         ldw y,x 
      000AF3 90 FE            [ 2] 2158         ldw y,(y) ;address 
      000AF5 90 BF 24         [ 2] 2159         ldw YTEMP,y 
      000AF8 1D 00 02         [ 2] 2160         subw x,#CELLL ; space for udh 
      000AFB 91 CE 24         [ 5] 2161         ldw y,[YTEMP] ; udh 
      000AFE FF               [ 2] 2162         ldw (x),y 
      000AFF 90 AE 00 02      [ 2] 2163         ldw y,#2
      000B03 91 DE 24         [ 5] 2164         ldw y,([YTEMP],y) ; udl 
      000B06 EF 02            [ 2] 2165         ldw (2,x),y
      000B08 81               [ 4] 2166         ret 
                                   2167 
                                   2168 ;       COUNT   ( b -- b +n )
                                   2169 ;       Return count byte of a string
                                   2170 ;       and add 1 to byte address.
      000B09 0A EE                 2171         .word      LINK
                           000B0B  2172 LINK = . 
      000B0B 05                    2173         .byte      5
      000B0C 43 4F 55 4E 54        2174         .ascii     "COUNT"
      000B11                       2175 COUNT:
      000B11 90 93            [ 1] 2176         ldw y,x 
      000B13 90 FE            [ 2] 2177         ldw y,(y) ; address 
      000B15 90 F6            [ 1] 2178         ld a,(y)  ; count 
      000B17 90 5C            [ 2] 2179         incw y 
      000B19 FF               [ 2] 2180         ldw (x),y 
      000B1A 1D 00 02         [ 2] 2181         subw x,#CELLL 
      000B1D E7 01            [ 1] 2182         ld (1,x),a 
      000B1F 7F               [ 1] 2183         clr (x)
      000B20 81               [ 4] 2184         ret 
                                   2185 
                                   2186 ;       HERE    ( -- a )
                                   2187 ;       Return  top of  variables
      000B21 0B 0B                 2188         .word      LINK
                           000B23  2189 LINK = . 
      000B23 04                    2190         .byte      4
      000B24 48 45 52 45           2191         .ascii     "HERE"
      000B28                       2192 HERE:
      000B28 90 AE 00 16      [ 2] 2193       	ldw y,#UVP 
      000B2C 90 FE            [ 2] 2194         ldw y,(y)
      000B2E 1D 00 02         [ 2] 2195         subw x,#CELLL 
      000B31 FF               [ 2] 2196         ldw (x),y 
      000B32 81               [ 4] 2197         ret 
                                   2198 
                                   2199 ;       PAD     ( -- a )
                                   2200 ;       Return address of text buffer
                                   2201 ;       above  code dictionary.
      000B33 0B 23                 2202         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000B35  2203 LINK = . 
      000B35 03                    2204         .byte      3
      000B36 50 41 44              2205         .ascii     "PAD"
      000B39                       2206 PAD:
      000B39 CD 0B 28         [ 4] 2207         CALL     HERE
      000B3C CD 03 B4         [ 4] 2208         CALL     DOLIT
      000B3F 00 50                 2209         .word      80
      000B41 CC 06 D4         [ 2] 2210         JP     PLUS
                                   2211 
                                   2212 ;       TIB     ( -- a )
                                   2213 ;       Return address of terminal input buffer.
      000B44 0B 35                 2214         .word      LINK
                           000B46  2215 LINK = . 
      000B46 03                    2216         .byte      3
      000B47 54 49 42              2217         .ascii     "TIB"
      000B4A                       2218 TIB:
      000B4A CD 05 C4         [ 4] 2219         CALL     NTIB
      000B4D CD 09 A3         [ 4] 2220         CALL     CELLP
      000B50 CC 04 32         [ 2] 2221         JP     AT
                                   2222 
                                   2223 ;       @EXECUTE        ( a -- )
                                   2224 ;       Execute vector stored in address a.
      000B53 0B 46                 2225         .word      LINK
                           000B55  2226 LINK = . 
      000B55 08                    2227         .byte      8
      000B56 40 45 58 45 43 55 54  2228         .ascii     "@EXECUTE"
             45
      000B5E                       2229 ATEXE:
      000B5E CD 04 32         [ 4] 2230         CALL     AT
      000B61 CD 06 83         [ 4] 2231         CALL     QDUP    ;?address or zero
      000B64 CD 03 E7         [ 4] 2232         CALL     QBRAN
      000B67 0B 6C                 2233         .word      EXE1
      000B69 CD 04 0E         [ 4] 2234         CALL     EXECU   ;execute if non-zero
      000B6C 81               [ 4] 2235 EXE1:   RET     ;do nothing if zero
                                   2236 
                                   2237 ;       CMOVE   ( b1 b2 u -- )
                                   2238 ;       Copy u bytes from b1 to b2.
      000B6D 0B 55                 2239         .word      LINK
                           000B6F  2240 LINK = . 
      000B6F 05                    2241         .byte      5
      000B70 43 4D 4F 56 45        2242         .ascii     "CMOVE"
      000B75                       2243 CMOVE:
      000B75 CD 04 A2         [ 4] 2244         CALL	TOR
      000B78 CD 03 FE         [ 4] 2245         CALL	BRAN
      000B7B 0B 95                 2246         .word	CMOV2
      000B7D CD 04 A2         [ 4] 2247 CMOV1:	CALL	TOR
      000B80 CD 04 D9         [ 4] 2248         CALL	DUPP
      000B83 CD 04 50         [ 4] 2249         CALL	CAT
      000B86 CD 04 96         [ 4] 2250         CALL	RAT
      000B89 CD 04 3F         [ 4] 2251         CALL	CSTOR
      000B8C CD 09 CE         [ 4] 2252         CALL	ONEP
      000B8F CD 04 83         [ 4] 2253         CALL	RFROM
      000B92 CD 09 CE         [ 4] 2254         CALL	ONEP
      000B95 CD 03 C8         [ 4] 2255 CMOV2:	CALL	DONXT
      000B98 0B 7D                 2256         .word	CMOV1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B9A CC 06 B4         [ 2] 2257         JP	DDROP
                                   2258 
                                   2259 ;       FILL    ( b u c -- )
                                   2260 ;       Fill u bytes of character c
                                   2261 ;       to area beginning at b.
      000B9D 0B 6F                 2262         .word       LINK
                           000B9F  2263 LINK = . 
      000B9F 04                    2264         .byte       4
      000BA0 46 49 4C 4C           2265         .ascii     "FILL"
      000BA4                       2266 FILL:
      000BA4 90 93            [ 1] 2267         ldw y,x 
      000BA6 90 E6 01         [ 1] 2268         ld a,(1,y) ; c 
      000BA9 1C 00 02         [ 2] 2269         addw x,#CELLL ; drop c 
      000BAC 90 93            [ 1] 2270         ldw y,x 
      000BAE 90 FE            [ 2] 2271         ldw y,(y) ; count
      000BB0 90 89            [ 2] 2272         pushw y 
      000BB2 1C 00 02         [ 2] 2273         addw x,#CELLL ; drop u 
      000BB5 90 93            [ 1] 2274         ldw y,x 
      000BB7 1C 00 02         [ 2] 2275         addw x,#CELLL ; drop b 
      000BBA 90 FE            [ 2] 2276         ldw y,(y) ; address
      000BBC 90 BF 24         [ 2] 2277         ldw YTEMP,y
      000BBF 90 85            [ 2] 2278         popw y ; count 
      000BC1                       2279 FILL1:  
      000BC1 92 C7 24         [ 4] 2280         ld [YTEMP],a 
      000BC4 3C 25            [ 1] 2281         inc YTEMP+1
      000BC6 24 02            [ 1] 2282         jrnc FILL2 
      000BC8 3C 24            [ 1] 2283         inc YTEMP
      000BCA                       2284 FILL2: 
      000BCA 90 5A            [ 2] 2285         decw y ; count 
      000BCC 26 F3            [ 1] 2286         jrne FILL1  
      000BCE 81               [ 4] 2287         ret 
                                   2288 
                                   2289 ;       ERASE   ( b u -- )
                                   2290 ;       Erase u bytes beginning at b.
      000BCF 0B 9F                 2291         .word      LINK
                           000BD1  2292 LINK = . 
      000BD1 05                    2293         .byte      5
      000BD2 45 52 41 53 45        2294         .ascii     "ERASE"
      000BD7                       2295 ERASE:
      000BD7 90 5F            [ 1] 2296         clrw y 
      000BD9 1D 00 02         [ 2] 2297         subw x,#CELLL 
      000BDC FF               [ 2] 2298         ldw (x),y 
      000BDD CC 0B A4         [ 2] 2299         jp FILL 
                                   2300 
                                   2301 
                                   2302 ;       PACK0   ( b u a -- a )
                                   2303 ;       Build a counted string with
                                   2304 ;       u characters from b. Null fill.
      000BE0 0B D1                 2305         .word      LINK
                           000BE2  2306 LINK = . 
      000BE2 05                    2307         .byte      5
      000BE3 50 41 43 4B 30        2308         .ascii     "PACK0"
      000BE8                       2309 PACKS:
      000BE8 CD 04 D9         [ 4] 2310         CALL     DUPP
      000BEB CD 04 A2         [ 4] 2311         CALL     TOR     ;strings only on cell boundary
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BEE CD 06 BF         [ 4] 2312         CALL     DDUP
      000BF1 CD 04 3F         [ 4] 2313         CALL     CSTOR
      000BF4 CD 09 CE         [ 4] 2314         CALL     ONEP ;save count
      000BF7 CD 04 E9         [ 4] 2315         CALL     SWAPP
      000BFA CD 0B 75         [ 4] 2316         CALL     CMOVE
      000BFD CD 04 83         [ 4] 2317         CALL     RFROM
      000C00 81               [ 4] 2318         RET
                                   2319 
                                   2320 ;; Numeric output, single precision
                                   2321 
                                   2322 ;       DIGIT   ( u -- c )
                                   2323 ;       Convert digit u to a character.
      000C01 0B E2                 2324         .word      LINK
                           000C03  2325 LINK = . 
      000C03 05                    2326         .byte      5
      000C04 44 49 47 49 54        2327         .ascii     "DIGIT"
      000C09                       2328 DIGIT:
      000C09 CD 03 B4         [ 4] 2329         CALL	DOLIT
      000C0C 00 09                 2330         .word	9
      000C0E CD 05 03         [ 4] 2331         CALL	OVER
      000C11 CD 07 B2         [ 4] 2332         CALL	LESS
      000C14 CD 03 B4         [ 4] 2333         CALL	DOLIT
      000C17 00 07                 2334         .word	7
      000C19 CD 05 25         [ 4] 2335         CALL	ANDD
      000C1C CD 06 D4         [ 4] 2336         CALL	PLUS
      000C1F CD 03 B4         [ 4] 2337         CALL	DOLIT
      000C22 00 30                 2338         .word	48	;'0'
      000C24 CC 06 D4         [ 2] 2339         JP	PLUS
                                   2340 
                                   2341 ;       EXTRACT ( n base -- n c )
                                   2342 ;       Extract least significant digit from n.
      000C27 0C 03                 2343         .word      LINK
                           000C29  2344 LINK = . 
      000C29 07                    2345         .byte      7
      000C2A 45 58 54 52 41 43 54  2346         .ascii     "EXTRACT"
      000C31                       2347 EXTRC:
      000C31 CD 0A 3A         [ 4] 2348         CALL     ZERO
      000C34 CD 04 E9         [ 4] 2349         CALL     SWAPP
      000C37 CD 08 2A         [ 4] 2350         CALL     UMMOD
      000C3A CD 04 E9         [ 4] 2351         CALL     SWAPP
      000C3D CC 0C 09         [ 2] 2352         JP     DIGIT
                                   2353 
                                   2354 ;       <#      ( -- )
                                   2355 ;       Initiate  numeric output process.
      000C40 0C 29                 2356         .word      LINK
                           000C42  2357 LINK = . 
      000C42 02                    2358         .byte      2
      000C43 3C 23                 2359         .ascii     "<#"
      000C45                       2360 BDIGS:
      000C45 CD 0B 39         [ 4] 2361         CALL     PAD
      000C48 CD 06 06         [ 4] 2362         CALL     HLD
      000C4B CC 04 1B         [ 2] 2363         JP     STORE
                                   2364 
                                   2365 ;       HOLD    ( c -- )
                                   2366 ;       Insert a character into output string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000C4E 0C 42                 2367         .word      LINK
                           000C50  2368 LINK = . 
      000C50 04                    2369         .byte      4
      000C51 48 4F 4C 44           2370         .ascii     "HOLD"
      000C55                       2371 HOLD:
      000C55 CD 06 06         [ 4] 2372         CALL     HLD
      000C58 CD 04 32         [ 4] 2373         CALL     AT
      000C5B CD 09 DB         [ 4] 2374         CALL     ONEM
      000C5E CD 04 D9         [ 4] 2375         CALL     DUPP
      000C61 CD 06 06         [ 4] 2376         CALL     HLD
      000C64 CD 04 1B         [ 4] 2377         CALL     STORE
      000C67 CC 04 3F         [ 2] 2378         JP     CSTOR
                                   2379 
                                   2380 ;       #       ( u -- u )
                                   2381 ;       Extract one digit from u and
                                   2382 ;       append digit to output string.
      000C6A 0C 50                 2383         .word      LINK
                           000C6C  2384 LINK = . 
      000C6C 01                    2385         .byte      1
      000C6D 23                    2386         .ascii     "#"
      000C6E                       2387 DIG:
      000C6E CD 05 96         [ 4] 2388         CALL     BASE
      000C71 CD 04 32         [ 4] 2389         CALL     AT
      000C74 CD 0C 31         [ 4] 2390         CALL     EXTRC
      000C77 CC 0C 55         [ 2] 2391         JP     HOLD
                                   2392 
                                   2393 ;       #S      ( u -- 0 )
                                   2394 ;       Convert u until all digits
                                   2395 ;       are added to output string.
      000C7A 0C 6C                 2396         .word      LINK
                           000C7C  2397 LINK = . 
      000C7C 02                    2398         .byte      2
      000C7D 23 53                 2399         .ascii     "#S"
      000C7F                       2400 DIGS:
      000C7F CD 0C 6E         [ 4] 2401 DIGS1:  CALL     DIG
      000C82 CD 04 D9         [ 4] 2402         CALL     DUPP
      000C85 CD 03 E7         [ 4] 2403         CALL     QBRAN
      000C88 0C 8C                 2404         .word      DIGS2
      000C8A 20 F3            [ 2] 2405         JRA     DIGS1
      000C8C 81               [ 4] 2406 DIGS2:  RET
                                   2407 
                                   2408 ;       SIGN    ( n -- )
                                   2409 ;       Add a minus sign to
                                   2410 ;       numeric output string.
      000C8D 0C 7C                 2411         .word      LINK
                           000C8F  2412 LINK = . 
      000C8F 04                    2413         .byte      4
      000C90 53 49 47 4E           2414         .ascii     "SIGN"
      000C94                       2415 SIGN:
      000C94 CD 05 12         [ 4] 2416         CALL     ZLESS
      000C97 CD 03 E7         [ 4] 2417         CALL     QBRAN
      000C9A 0C A4                 2418         .word      SIGN1
      000C9C CD 03 B4         [ 4] 2419         CALL     DOLIT
      000C9F 00 2D                 2420         .word      45	;"-"
      000CA1 CC 0C 55         [ 2] 2421         JP     HOLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CA4 81               [ 4] 2422 SIGN1:  RET
                                   2423 
                                   2424 ;       #>      ( w -- b u )
                                   2425 ;       Prepare output string.
      000CA5 0C 8F                 2426         .word      LINK
                           000CA7  2427 LINK = . 
      000CA7 02                    2428         .byte      2
      000CA8 23 3E                 2429         .ascii     "#>"
      000CAA                       2430 EDIGS:
      000CAA CD 04 CF         [ 4] 2431         CALL     DROP
      000CAD CD 06 06         [ 4] 2432         CALL     HLD
      000CB0 CD 04 32         [ 4] 2433         CALL     AT
      000CB3 CD 0B 39         [ 4] 2434         CALL     PAD
      000CB6 CD 05 03         [ 4] 2435         CALL     OVER
      000CB9 CC 07 4D         [ 2] 2436         JP     SUBB
                                   2437 
                                   2438 ;       str     ( w -- b u )
                                   2439 ;       Convert a signed integer
                                   2440 ;       to a numeric string.
      000CBC 0C A7                 2441         .word      LINK
                           000CBE  2442 LINK = . 
      000CBE 03                    2443         .byte      3
      000CBF 53 54 52              2444         .ascii     "STR"
      000CC2                       2445 STR:
      000CC2 CD 04 D9         [ 4] 2446         CALL     DUPP
      000CC5 CD 04 A2         [ 4] 2447         CALL     TOR
      000CC8 CD 07 67         [ 4] 2448         CALL     ABSS
      000CCB CD 0C 45         [ 4] 2449         CALL     BDIGS
      000CCE CD 0C 7F         [ 4] 2450         CALL     DIGS
      000CD1 CD 04 83         [ 4] 2451         CALL     RFROM
      000CD4 CD 0C 94         [ 4] 2452         CALL     SIGN
      000CD7 CC 0C AA         [ 2] 2453         JP     EDIGS
                                   2454 
                                   2455 ;       HEX     ( -- )
                                   2456 ;       Use radix 16 as base for
                                   2457 ;       numeric conversions.
      000CDA 0C BE                 2458         .word      LINK
                           000CDC  2459 LINK = . 
      000CDC 03                    2460         .byte      3
      000CDD 48 45 58              2461         .ascii     "HEX"
      000CE0                       2462 HEX:
      000CE0 CD 03 B4         [ 4] 2463         CALL     DOLIT
      000CE3 00 10                 2464         .word      16
      000CE5 CD 05 96         [ 4] 2465         CALL     BASE
      000CE8 CC 04 1B         [ 2] 2466         JP     STORE
                                   2467 
                                   2468 ;       DECIMAL ( -- )
                                   2469 ;       Use radix 10 as base
                                   2470 ;       for numeric conversions.
      000CEB 0C DC                 2471         .word      LINK
                           000CED  2472 LINK = . 
      000CED 07                    2473         .byte      7
      000CEE 44 45 43 49 4D 41 4C  2474         .ascii     "DECIMAL"
      000CF5                       2475 DECIM:
      000CF5 CD 03 B4         [ 4] 2476         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CF8 00 0A                 2477         .word      10
      000CFA CD 05 96         [ 4] 2478         CALL     BASE
      000CFD CC 04 1B         [ 2] 2479         JP     STORE
                                   2480 
                                   2481 ;; Numeric input, single precision
                                   2482 
                                   2483 ;       DIGIT?  ( c base -- u t )
                                   2484 ;       Convert a character to its numeric
                                   2485 ;       value. A flag indicates success.
      000D00 0C ED                 2486         .word      LINK
                           000D02  2487 LINK = . 
      000D02 06                    2488         .byte       6
      000D03 44 49 47 49 54 3F     2489         .ascii     "DIGIT?"
      000D09                       2490 DIGTQ:
      000D09 CD 04 A2         [ 4] 2491         CALL     TOR
      000D0C CD 03 B4         [ 4] 2492         CALL     DOLIT
      000D0F 00 30                 2493         .word     48	; "0"
      000D11 CD 07 4D         [ 4] 2494         CALL     SUBB
      000D14 CD 03 B4         [ 4] 2495         CALL     DOLIT
      000D17 00 09                 2496         .word      9
      000D19 CD 05 03         [ 4] 2497         CALL     OVER
      000D1C CD 07 B2         [ 4] 2498         CALL     LESS
      000D1F CD 03 E7         [ 4] 2499         CALL     QBRAN
      000D22 0D 3A                 2500         .word      DGTQ1
      000D24 CD 03 B4         [ 4] 2501         CALL     DOLIT
      000D27 00 07                 2502         .word      7
      000D29 CD 07 4D         [ 4] 2503         CALL     SUBB
      000D2C CD 04 D9         [ 4] 2504         CALL     DUPP
      000D2F CD 03 B4         [ 4] 2505         CALL     DOLIT
      000D32 00 0A                 2506         .word      10
      000D34 CD 07 B2         [ 4] 2507         CALL     LESS
      000D37 CD 05 39         [ 4] 2508         CALL     ORR
      000D3A CD 04 D9         [ 4] 2509 DGTQ1:  CALL     DUPP
      000D3D CD 04 83         [ 4] 2510         CALL     RFROM
      000D40 CC 07 94         [ 2] 2511         JP     ULESS
                                   2512 
                                   2513 ;       NUMBER? ( a -- n T | a F )
                                   2514 ;       Convert a number string to
                                   2515 ;       integer. Push a flag on tos.
      000D43 0D 02                 2516         .word      LINK
                           000D45  2517 LINK = . 
      000D45 07                    2518         .byte      7
      000D46 4E 55 4D 42 45 52 3F  2519         .ascii     "NUMBER?"
      000D4D                       2520 NUMBQ:
      000D4D CD 05 96         [ 4] 2521         CALL     BASE
      000D50 CD 04 32         [ 4] 2522         CALL     AT
      000D53 CD 04 A2         [ 4] 2523         CALL     TOR
      000D56 CD 0A 3A         [ 4] 2524         CALL     ZERO
      000D59 CD 05 03         [ 4] 2525         CALL     OVER
      000D5C CD 0B 11         [ 4] 2526         CALL     COUNT
      000D5F CD 05 03         [ 4] 2527         CALL     OVER
      000D62 CD 04 50         [ 4] 2528         CALL     CAT
      000D65 CD 03 B4         [ 4] 2529         CALL     DOLIT
      000D68 00 24                 2530         .word     36	; "0x"
      000D6A CD 07 75         [ 4] 2531         CALL     EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D6D CD 03 E7         [ 4] 2532         CALL     QBRAN
      000D70 0D 81                 2533         .word      NUMQ1
      000D72 CD 0C E0         [ 4] 2534         CALL     HEX
      000D75 CD 04 E9         [ 4] 2535         CALL     SWAPP
      000D78 CD 09 CE         [ 4] 2536         CALL     ONEP
      000D7B CD 04 E9         [ 4] 2537         CALL     SWAPP
      000D7E CD 09 DB         [ 4] 2538         CALL     ONEM
      000D81 CD 05 03         [ 4] 2539 NUMQ1:  CALL     OVER
      000D84 CD 04 50         [ 4] 2540         CALL     CAT
      000D87 CD 03 B4         [ 4] 2541         CALL     DOLIT
      000D8A 00 2D                 2542         .word     45	; "-"
      000D8C CD 07 75         [ 4] 2543         CALL     EQUAL
      000D8F CD 04 A2         [ 4] 2544         CALL     TOR
      000D92 CD 04 E9         [ 4] 2545         CALL     SWAPP
      000D95 CD 04 96         [ 4] 2546         CALL     RAT
      000D98 CD 07 4D         [ 4] 2547         CALL     SUBB
      000D9B CD 04 E9         [ 4] 2548         CALL     SWAPP
      000D9E CD 04 96         [ 4] 2549         CALL     RAT
      000DA1 CD 06 D4         [ 4] 2550         CALL     PLUS
      000DA4 CD 06 83         [ 4] 2551         CALL     QDUP
      000DA7 CD 03 E7         [ 4] 2552         CALL     QBRAN
      000DAA 0E 0B                 2553         .word      NUMQ6
      000DAC CD 09 DB         [ 4] 2554         CALL     ONEM
      000DAF CD 04 A2         [ 4] 2555         CALL     TOR
      000DB2 CD 04 D9         [ 4] 2556 NUMQ2:  CALL     DUPP
      000DB5 CD 04 A2         [ 4] 2557         CALL     TOR
      000DB8 CD 04 50         [ 4] 2558         CALL     CAT
      000DBB CD 05 96         [ 4] 2559         CALL     BASE
      000DBE CD 04 32         [ 4] 2560         CALL     AT
      000DC1 CD 0D 09         [ 4] 2561         CALL     DIGTQ
      000DC4 CD 03 E7         [ 4] 2562         CALL     QBRAN
      000DC7 0D F9                 2563         .word      NUMQ4
      000DC9 CD 04 E9         [ 4] 2564         CALL     SWAPP
      000DCC CD 05 96         [ 4] 2565         CALL     BASE
      000DCF CD 04 32         [ 4] 2566         CALL     AT
      000DD2 CD 09 4D         [ 4] 2567         CALL     STAR
      000DD5 CD 06 D4         [ 4] 2568         CALL     PLUS
      000DD8 CD 04 83         [ 4] 2569         CALL     RFROM
      000DDB CD 09 CE         [ 4] 2570         CALL     ONEP
      000DDE CD 03 C8         [ 4] 2571         CALL     DONXT
      000DE1 0D B2                 2572         .word      NUMQ2
      000DE3 CD 04 96         [ 4] 2573         CALL     RAT
      000DE6 CD 04 E9         [ 4] 2574         CALL     SWAPP
      000DE9 CD 04 CF         [ 4] 2575         CALL     DROP
      000DEC CD 03 E7         [ 4] 2576         CALL     QBRAN
      000DEF 0D F4                 2577         .word      NUMQ3
      000DF1 CD 06 FF         [ 4] 2578         CALL     NEGAT
      000DF4 CD 04 E9         [ 4] 2579 NUMQ3:  CALL     SWAPP
      000DF7 20 0F            [ 2] 2580         JRA     NUMQ5
      000DF9 CD 04 83         [ 4] 2581 NUMQ4:  CALL     RFROM
      000DFC CD 04 83         [ 4] 2582         CALL     RFROM
      000DFF CD 06 B4         [ 4] 2583         CALL     DDROP
      000E02 CD 06 B4         [ 4] 2584         CALL     DDROP
      000E05 CD 0A 3A         [ 4] 2585         CALL     ZERO
      000E08 CD 04 D9         [ 4] 2586 NUMQ5:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E0B CD 04 83         [ 4] 2587 NUMQ6:  CALL     RFROM
      000E0E CD 06 B4         [ 4] 2588         CALL     DDROP
      000E11 CD 04 83         [ 4] 2589         CALL     RFROM
      000E14 CD 05 96         [ 4] 2590         CALL     BASE
      000E17 CC 04 1B         [ 2] 2591         JP     STORE
                                   2592 
                                   2593 ;; Basic I/O
                                   2594 
                                   2595 ;       KEY     ( -- c )
                                   2596 ;       Wait for and return an
                                   2597 ;       input character.
      000E1A 0D 45                 2598         .word      LINK
                           000E1C  2599 LINK = . 
      000E1C 03                    2600         .byte      3
      000E1D 4B 45 59              2601         .ascii     "KEY"
      000E20                       2602 KEY:
      000E20 72 0B 52 40 FB   [ 2] 2603         btjf UART2_SR,#UART_SR_RXNE,. 
      000E25 C6 52 41         [ 1] 2604         ld a,UART2_DR 
      000E28 1D 00 02         [ 2] 2605         subw x,#CELLL 
      000E2B E7 01            [ 1] 2606         ld (1,x),a 
      000E2D 7F               [ 1] 2607         clr (x)
      000E2E 81               [ 4] 2608         ret 
                                   2609 
                                   2610 ;       NUF?    ( -- t )
                                   2611 ;       Return false if no input,
                                   2612 ;       else pause and if CR return true.
      000E2F 0E 1C                 2613         .word      LINK
                           000E31  2614 LINK = . 
      000E31 04                    2615         .byte      4
      000E32 4E 55 46 3F           2616         .ascii     "NUF?"
      000E36                       2617 NUFQ:
      000E36 CD 03 80         [ 4] 2618         CALL     QKEY
      000E39 CD 04 D9         [ 4] 2619         CALL     DUPP
      000E3C CD 03 E7         [ 4] 2620         CALL     QBRAN
      000E3F 0E 4F                 2621         .word    NUFQ1
      000E41 CD 06 B4         [ 4] 2622         CALL     DDROP
      000E44 CD 0E 20         [ 4] 2623         CALL     KEY
      000E47 CD 03 B4         [ 4] 2624         CALL     DOLIT
      000E4A 00 0D                 2625         .word      CRR
      000E4C CC 07 75         [ 2] 2626         JP     EQUAL
      000E4F 81               [ 4] 2627 NUFQ1:  RET
                                   2628 
                                   2629 ;       SPACE   ( -- )
                                   2630 ;       Send  blank character to
                                   2631 ;       output device.
      000E50 0E 31                 2632         .word      LINK
                           000E52  2633 LINK = . 
      000E52 05                    2634         .byte      5
      000E53 53 50 41 43 45        2635         .ascii     "SPACE"
      000E58                       2636 SPACE:
      000E58 CD 0A 2D         [ 4] 2637         CALL     BLANK
      000E5B CC 03 9E         [ 2] 2638         JP     EMIT
                                   2639 
                                   2640 ;       SPACES  ( +n -- )
                                   2641 ;       Send n spaces to output device.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E5E 0E 52                 2642         .word      LINK
                           000E60  2643 LINK = . 
      000E60 06                    2644         .byte      6
      000E61 53 50 41 43 45 53     2645         .ascii     "SPACES"
      000E67                       2646 SPACS:
      000E67 CD 0A 3A         [ 4] 2647         CALL     ZERO
      000E6A CD 07 D2         [ 4] 2648         CALL     MAX
      000E6D CD 04 A2         [ 4] 2649         CALL     TOR
      000E70 20 03            [ 2] 2650         JRA      CHAR2
      000E72 CD 0E 58         [ 4] 2651 CHAR1:  CALL     SPACE
      000E75 CD 03 C8         [ 4] 2652 CHAR2:  CALL     DONXT
      000E78 0E 72                 2653         .word    CHAR1
      000E7A 81               [ 4] 2654         RET
                                   2655 
                                   2656 ;       TYPE    ( b u -- )
                                   2657 ;       Output u characters from b.
      000E7B 0E 60                 2658         .word      LINK
                           000E7D  2659 LINK = . 
      000E7D 04                    2660         .byte      4
      000E7E 54 59 50 45           2661         .ascii     "TYPE"
      000E82                       2662 TYPES:
      000E82 CD 04 A2         [ 4] 2663         CALL     TOR
      000E85 20 0C            [ 2] 2664         JRA     TYPE2
      000E87 CD 04 D9         [ 4] 2665 TYPE1:  CALL     DUPP
      000E8A CD 04 50         [ 4] 2666         CALL     CAT
      000E8D CD 03 9E         [ 4] 2667         CALL     EMIT
      000E90 CD 09 CE         [ 4] 2668         CALL     ONEP
      000E93 CD 03 C8         [ 4] 2669 TYPE2:  CALL     DONXT
      000E96 0E 87                 2670         .word      TYPE1
      000E98 CC 04 CF         [ 2] 2671         JP     DROP
                                   2672 
                                   2673 ;       CR      ( -- )
                                   2674 ;       Output a carriage return
                                   2675 ;       and a line feed.
      000E9B 0E 7D                 2676         .word      LINK
                           000E9D  2677 LINK = . 
      000E9D 02                    2678         .byte      2
      000E9E 43 52                 2679         .ascii     "CR"
      000EA0                       2680 CR:
      000EA0 CD 03 B4         [ 4] 2681         CALL     DOLIT
      000EA3 00 0D                 2682         .word      CRR
      000EA5 CD 03 9E         [ 4] 2683         CALL     EMIT
      000EA8 CD 03 B4         [ 4] 2684         CALL     DOLIT
      000EAB 00 0A                 2685         .word      LF
      000EAD CC 03 9E         [ 2] 2686         JP     EMIT
                                   2687 
                                   2688 ;       do$     ( -- a )
                                   2689 ;       Return  address of a compiled
                                   2690 ;       string.
      000EB0 0E 9D                 2691         .word      LINK
                           000EB2  2692 LINK = . 
      000EB2 43                    2693 	.byte      COMPO+3
      000EB3 44 4F 24              2694         .ascii     "DO$"
      000EB6                       2695 DOSTR:
      000EB6 CD 04 83         [ 4] 2696         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EB9 CD 04 96         [ 4] 2697         CALL     RAT
      000EBC CD 04 83         [ 4] 2698         CALL     RFROM
      000EBF CD 0B 11         [ 4] 2699         CALL     COUNT
      000EC2 CD 06 D4         [ 4] 2700         CALL     PLUS
      000EC5 CD 04 A2         [ 4] 2701         CALL     TOR
      000EC8 CD 04 E9         [ 4] 2702         CALL     SWAPP
      000ECB CD 04 A2         [ 4] 2703         CALL     TOR
      000ECE 81               [ 4] 2704         RET
                                   2705 
                                   2706 ;       $"|     ( -- a )
                                   2707 ;       Run time routine compiled by $".
                                   2708 ;       Return address of a compiled string.
      000ECF 0E B2                 2709         .word      LINK
                           000ED1  2710 LINK = . 
      000ED1 43                    2711 	.byte      COMPO+3
      000ED2 24 22 7C              2712         .byte     '$','"','|'
      000ED5                       2713 STRQP:
      000ED5 CD 0E B6         [ 4] 2714         CALL     DOSTR
      000ED8 81               [ 4] 2715         RET
                                   2716 
                                   2717 ;       ."|     ( -- )
                                   2718 ;       Run time routine of ." .
                                   2719 ;       Output a compiled string.
      000ED9 0E D1                 2720         .word      LINK
                           000EDB  2721 LINK = . 
      000EDB 43                    2722 	.byte      COMPO+3
      000EDC 2E 22 7C              2723         .byte     '.','"','|'
      000EDF                       2724 DOTQP:
      000EDF CD 0E B6         [ 4] 2725         CALL     DOSTR
      000EE2 CD 0B 11         [ 4] 2726         CALL     COUNT
      000EE5 CC 0E 82         [ 2] 2727         JP     TYPES
                                   2728 
                                   2729 ;       .R      ( n +n -- )
                                   2730 ;       Display an integer in a field
                                   2731 ;       of n columns, right justified.
      000EE8 0E DB                 2732         .word      LINK
                           000EEA  2733 LINK = . 
      000EEA 02                    2734         .byte      2
      000EEB 2E 52                 2735         .ascii     ".R"
      000EED                       2736 DOTR:
      000EED CD 04 A2         [ 4] 2737         CALL     TOR
      000EF0 CD 0C C2         [ 4] 2738         CALL     STR
      000EF3 CD 04 83         [ 4] 2739         CALL     RFROM
      000EF6 CD 05 03         [ 4] 2740         CALL     OVER
      000EF9 CD 07 4D         [ 4] 2741         CALL     SUBB
      000EFC CD 0E 67         [ 4] 2742         CALL     SPACS
      000EFF CC 0E 82         [ 2] 2743         JP     TYPES
                                   2744 
                                   2745 ;       U.R     ( u +n -- )
                                   2746 ;       Display an unsigned integer
                                   2747 ;       in n column, right justified.
      000F02 0E EA                 2748         .word      LINK
                           000F04  2749 LINK = . 
      000F04 03                    2750         .byte      3
      000F05 55 2E 52              2751         .ascii     "U.R"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F08                       2752 UDOTR:
      000F08 CD 04 A2         [ 4] 2753         CALL     TOR
      000F0B CD 0C 45         [ 4] 2754         CALL     BDIGS
      000F0E CD 0C 7F         [ 4] 2755         CALL     DIGS
      000F11 CD 0C AA         [ 4] 2756         CALL     EDIGS
      000F14 CD 04 83         [ 4] 2757         CALL     RFROM
      000F17 CD 05 03         [ 4] 2758         CALL     OVER
      000F1A CD 07 4D         [ 4] 2759         CALL     SUBB
      000F1D CD 0E 67         [ 4] 2760         CALL     SPACS
      000F20 CC 0E 82         [ 2] 2761         JP     TYPES
                                   2762 
                                   2763 ;       U.      ( u -- )
                                   2764 ;       Display an unsigned integer
                                   2765 ;       in free format.
      000F23 0F 04                 2766         .word      LINK
                           000F25  2767 LINK = . 
      000F25 02                    2768         .byte      2
      000F26 55 2E                 2769         .ascii     "U."
      000F28                       2770 UDOT:
      000F28 CD 0C 45         [ 4] 2771         CALL     BDIGS
      000F2B CD 0C 7F         [ 4] 2772         CALL     DIGS
      000F2E CD 0C AA         [ 4] 2773         CALL     EDIGS
      000F31 CD 0E 58         [ 4] 2774         CALL     SPACE
      000F34 CC 0E 82         [ 2] 2775         JP     TYPES
                                   2776 
                                   2777 ;       .       ( w -- )
                                   2778 ;       Display an integer in free
                                   2779 ;       format, preceeded by a space.
      000F37 0F 25                 2780         .word      LINK
                           000F39  2781 LINK = . 
      000F39 01                    2782         .byte      1
      000F3A 2E                    2783         .ascii     "."
      000F3B                       2784 DOT:
      000F3B CD 05 96         [ 4] 2785         CALL     BASE
      000F3E CD 04 32         [ 4] 2786         CALL     AT
      000F41 CD 03 B4         [ 4] 2787         CALL     DOLIT
      000F44 00 0A                 2788         .word      10
      000F46 CD 05 4E         [ 4] 2789         CALL     XORR    ;?decimal
      000F49 CD 03 E7         [ 4] 2790         CALL     QBRAN
      000F4C 0F 51                 2791         .word      DOT1
      000F4E CC 0F 28         [ 2] 2792         JP     UDOT
      000F51 CD 0C C2         [ 4] 2793 DOT1:   CALL     STR
      000F54 CD 0E 58         [ 4] 2794         CALL     SPACE
      000F57 CC 0E 82         [ 2] 2795         JP     TYPES
                                   2796 
                                   2797 ;       ?       ( a -- )
                                   2798 ;       Display contents in memory cell.
      000F5A 0F 39                 2799         .word      LINK
                                   2800         
                           000F5C  2801 LINK = . 
      000F5C 01                    2802         .byte      1
      000F5D 3F                    2803         .ascii     "?"
      000F5E                       2804 QUEST:
      000F5E CD 04 32         [ 4] 2805         CALL     AT
      000F61 CC 0F 3B         [ 2] 2806         JP     DOT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2807 
                                   2808 ;; Parsing
                                   2809 
                                   2810 ;       parse   ( b u c -- b u delta ; <string> )
                                   2811 ;       Scan string delimited by c.
                                   2812 ;       Return found string and its offset.
      000F64 0F 5C                 2813         .word      LINK
                           000F66  2814 LINK = . 
      000F66 05                    2815         .byte      5
      000F67 70 61 72 73 65        2816         .ascii     "parse"
      000F6C                       2817 PARS:
      000F6C CD 05 A5         [ 4] 2818         CALL     TEMP
      000F6F CD 04 1B         [ 4] 2819         CALL     STORE
      000F72 CD 05 03         [ 4] 2820         CALL     OVER
      000F75 CD 04 A2         [ 4] 2821         CALL     TOR
      000F78 CD 04 D9         [ 4] 2822         CALL     DUPP
      000F7B CD 03 E7         [ 4] 2823         CALL     QBRAN
      000F7E 10 24                 2824         .word    PARS8
      000F80 CD 09 DB         [ 4] 2825         CALL     ONEM
      000F83 CD 05 A5         [ 4] 2826         CALL     TEMP
      000F86 CD 04 32         [ 4] 2827         CALL     AT
      000F89 CD 0A 2D         [ 4] 2828         CALL     BLANK
      000F8C CD 07 75         [ 4] 2829         CALL     EQUAL
      000F8F CD 03 E7         [ 4] 2830         CALL     QBRAN
      000F92 0F C5                 2831         .word      PARS3
      000F94 CD 04 A2         [ 4] 2832         CALL     TOR
      000F97 CD 0A 2D         [ 4] 2833 PARS1:  CALL     BLANK
      000F9A CD 05 03         [ 4] 2834         CALL     OVER
      000F9D CD 04 50         [ 4] 2835         CALL     CAT     ;skip leading blanks ONLY
      000FA0 CD 07 4D         [ 4] 2836         CALL     SUBB
      000FA3 CD 05 12         [ 4] 2837         CALL     ZLESS
      000FA6 CD 06 EE         [ 4] 2838         CALL     INVER
      000FA9 CD 03 E7         [ 4] 2839         CALL     QBRAN
      000FAC 0F C2                 2840         .word      PARS2
      000FAE CD 09 CE         [ 4] 2841         CALL     ONEP
      000FB1 CD 03 C8         [ 4] 2842         CALL     DONXT
      000FB4 0F 97                 2843         .word      PARS1
      000FB6 CD 04 83         [ 4] 2844         CALL     RFROM
      000FB9 CD 04 CF         [ 4] 2845         CALL     DROP
      000FBC CD 0A 3A         [ 4] 2846         CALL     ZERO
      000FBF CC 04 D9         [ 2] 2847         JP     DUPP
      000FC2 CD 04 83         [ 4] 2848 PARS2:  CALL     RFROM
      000FC5 CD 05 03         [ 4] 2849 PARS3:  CALL     OVER
      000FC8 CD 04 E9         [ 4] 2850         CALL     SWAPP
      000FCB CD 04 A2         [ 4] 2851         CALL     TOR
      000FCE CD 05 A5         [ 4] 2852 PARS4:  CALL     TEMP
      000FD1 CD 04 32         [ 4] 2853         CALL     AT
      000FD4 CD 05 03         [ 4] 2854         CALL     OVER
      000FD7 CD 04 50         [ 4] 2855         CALL     CAT
      000FDA CD 07 4D         [ 4] 2856         CALL     SUBB    ;scan for delimiter
      000FDD CD 05 A5         [ 4] 2857         CALL     TEMP
      000FE0 CD 04 32         [ 4] 2858         CALL     AT
      000FE3 CD 0A 2D         [ 4] 2859         CALL     BLANK
      000FE6 CD 07 75         [ 4] 2860         CALL     EQUAL
      000FE9 CD 03 E7         [ 4] 2861         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FEC 0F F1                 2862         .word      PARS5
      000FEE CD 05 12         [ 4] 2863         CALL     ZLESS
      000FF1 CD 03 E7         [ 4] 2864 PARS5:  CALL     QBRAN
      000FF4 10 06                 2865         .word      PARS6
      000FF6 CD 09 CE         [ 4] 2866         CALL     ONEP
      000FF9 CD 03 C8         [ 4] 2867         CALL     DONXT
      000FFC 0F CE                 2868         .word      PARS4
      000FFE CD 04 D9         [ 4] 2869         CALL     DUPP
      001001 CD 04 A2         [ 4] 2870         CALL     TOR
      001004 20 0F            [ 2] 2871         JRA     PARS7
      001006 CD 04 83         [ 4] 2872 PARS6:  CALL     RFROM
      001009 CD 04 CF         [ 4] 2873         CALL     DROP
      00100C CD 04 D9         [ 4] 2874         CALL     DUPP
      00100F CD 09 CE         [ 4] 2875         CALL     ONEP
      001012 CD 04 A2         [ 4] 2876         CALL     TOR
      001015 CD 05 03         [ 4] 2877 PARS7:  CALL     OVER
      001018 CD 07 4D         [ 4] 2878         CALL     SUBB
      00101B CD 04 83         [ 4] 2879         CALL     RFROM
      00101E CD 04 83         [ 4] 2880         CALL     RFROM
      001021 CC 07 4D         [ 2] 2881         JP     SUBB
      001024 CD 05 03         [ 4] 2882 PARS8:  CALL     OVER
      001027 CD 04 83         [ 4] 2883         CALL     RFROM
      00102A CC 07 4D         [ 2] 2884         JP     SUBB
                                   2885 
                                   2886 ;       PARSE   ( c -- b u ; <string> )
                                   2887 ;       Scan input stream and return
                                   2888 ;       counted string delimited by c.
      00102D 0F 66                 2889         .word      LINK
                           00102F  2890 LINK = . 
      00102F 05                    2891         .byte      5
      001030 50 41 52 53 45        2892         .ascii     "PARSE"
      001035                       2893 PARSE:
      001035 CD 04 A2         [ 4] 2894         CALL     TOR
      001038 CD 0B 4A         [ 4] 2895         CALL     TIB
      00103B CD 05 B4         [ 4] 2896         CALL     INN
      00103E CD 04 32         [ 4] 2897         CALL     AT
      001041 CD 06 D4         [ 4] 2898         CALL     PLUS    ;current input buffer pointer
      001044 CD 05 C4         [ 4] 2899         CALL     NTIB
      001047 CD 04 32         [ 4] 2900         CALL     AT
      00104A CD 05 B4         [ 4] 2901         CALL     INN
      00104D CD 04 32         [ 4] 2902         CALL     AT
      001050 CD 07 4D         [ 4] 2903         CALL     SUBB    ;remaining count
      001053 CD 04 83         [ 4] 2904         CALL     RFROM
      001056 CD 0F 6C         [ 4] 2905         CALL     PARS
      001059 CD 05 B4         [ 4] 2906         CALL     INN
      00105C CC 0A AA         [ 2] 2907         JP     PSTOR
                                   2908 
                                   2909 ;       .(      ( -- )
                                   2910 ;       Output following string up to next ) .
      00105F 10 2F                 2911         .word      LINK
                           001061  2912 LINK = . 
      001061 82                    2913 	.byte      IMEDD+2
      001062 2E 28                 2914         .ascii     ".("
      001064                       2915 DOTPR:
      001064 CD 03 B4         [ 4] 2916         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001067 00 29                 2917         .word     41	; ")"
      001069 CD 10 35         [ 4] 2918         CALL     PARSE
      00106C CC 0E 82         [ 2] 2919         JP     TYPES
                                   2920 
                                   2921 ;       (       ( -- )
                                   2922 ;       Ignore following string up to next ).
                                   2923 ;       A comment.
      00106F 10 61                 2924         .word      LINK
                           001071  2925 LINK = . 
      001071 81                    2926 	.byte      IMEDD+1
      001072 28                    2927         .ascii     "("
      001073                       2928 PAREN:
      001073 CD 03 B4         [ 4] 2929         CALL     DOLIT
      001076 00 29                 2930         .word     41	; ")"
      001078 CD 10 35         [ 4] 2931         CALL     PARSE
      00107B CC 06 B4         [ 2] 2932         JP     DDROP
                                   2933 
                                   2934 ;       \       ( -- )
                                   2935 ;       Ignore following text till
                                   2936 ;       end of line.
      00107E 10 71                 2937         .word      LINK
                           001080  2938 LINK = . 
      001080 81                    2939 	.byte      IMEDD+1
      001081 5C                    2940         .ascii     "\"
      001082                       2941 BKSLA:
      001082 90 AE 00 0C      [ 2] 2942         ldw y,#UCTIB ; #TIB  
      001086 90 FE            [ 2] 2943         ldw y,(y)
      001088 90 89            [ 2] 2944         pushw y ; count in TIB 
      00108A 90 AE 00 0A      [ 2] 2945         ldw y,#UINN ; >IN 
      00108E 90 BF 24         [ 2] 2946         ldw YTEMP,y
      001091 90 85            [ 2] 2947         popw y 
      001093 91 CF 24         [ 5] 2948         ldw [YTEMP],y
      001096 81               [ 4] 2949         ret 
                                   2950 
                                   2951 ;       WORD    ( c -- a ; <string> )
                                   2952 ;       Parse a word from input stream
                                   2953 ;       and copy it to code dictionary.
      001097 10 80                 2954         .word      LINK
                           001099  2955 LINK = . 
      001099 04                    2956         .byte      4
      00109A 57 4F 52 44           2957         .ascii     "WORD"
      00109E                       2958 WORDD:
      00109E CD 10 35         [ 4] 2959         CALL     PARSE
      0010A1 CD 0B 28         [ 4] 2960         CALL     HERE
      0010A4 CD 09 A3         [ 4] 2961         CALL     CELLP
      0010A7 CC 0B E8         [ 2] 2962         JP     PACKS
                                   2963 
                                   2964 ;       TOKEN   ( -- a ; <string> )
                                   2965 ;       Parse a word from input stream
                                   2966 ;       and copy it to name dictionary.
      0010AA 10 99                 2967         .word      LINK
                           0010AC  2968 LINK = . 
      0010AC 05                    2969         .byte      5
      0010AD 54 4F 4B 45 4E        2970         .ascii     "TOKEN"
      0010B2                       2971 TOKEN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010B2 CD 0A 2D         [ 4] 2972         CALL     BLANK
      0010B5 CC 10 9E         [ 2] 2973         JP     WORDD
                                   2974 
                                   2975 ;; Dictionary search
                                   2976 
                                   2977 ;       NAME>   ( na -- ca )
                                   2978 ;       Return a code address given
                                   2979 ;       a name address.
      0010B8 10 AC                 2980         .word      LINK
                           0010BA  2981 LINK = . 
      0010BA 05                    2982         .byte      5
      0010BB 4E 41 4D 45 3E        2983         .ascii     "NAME>"
      0010C0                       2984 NAMET:
      0010C0 CD 0B 11         [ 4] 2985         CALL     COUNT
      0010C3 CD 03 B4         [ 4] 2986         CALL     DOLIT
      0010C6 00 1F                 2987         .word      31
      0010C8 CD 05 25         [ 4] 2988         CALL     ANDD
      0010CB CC 06 D4         [ 2] 2989         JP     PLUS
                                   2990 
                                   2991 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2992 ;       Compare u cells in two
                                   2993 ;       strings. Return 0 if identical.
      0010CE 10 BA                 2994         .word      LINK
                           0010D0  2995 LINK = . 
      0010D0 05                    2996         .byte       5
      0010D1 53 41 4D 45 3F        2997         .ascii     "SAME?"
      0010D6                       2998 SAMEQ:
      0010D6 CD 09 DB         [ 4] 2999         CALL     ONEM
      0010D9 CD 04 A2         [ 4] 3000         CALL     TOR
      0010DC 20 29            [ 2] 3001         JRA     SAME2
      0010DE CD 05 03         [ 4] 3002 SAME1:  CALL     OVER
      0010E1 CD 04 96         [ 4] 3003         CALL     RAT
      0010E4 CD 06 D4         [ 4] 3004         CALL     PLUS
      0010E7 CD 04 50         [ 4] 3005         CALL     CAT
      0010EA CD 05 03         [ 4] 3006         CALL     OVER
      0010ED CD 04 96         [ 4] 3007         CALL     RAT
      0010F0 CD 06 D4         [ 4] 3008         CALL     PLUS
      0010F3 CD 04 50         [ 4] 3009         CALL     CAT
      0010F6 CD 07 4D         [ 4] 3010         CALL     SUBB
      0010F9 CD 06 83         [ 4] 3011         CALL     QDUP
      0010FC CD 03 E7         [ 4] 3012         CALL     QBRAN
      0010FF 11 07                 3013         .word      SAME2
      001101 CD 04 83         [ 4] 3014         CALL     RFROM
      001104 CC 04 CF         [ 2] 3015         JP     DROP
      001107 CD 03 C8         [ 4] 3016 SAME2:  CALL     DONXT
      00110A 10 DE                 3017         .word      SAME1
      00110C CC 0A 3A         [ 2] 3018         JP     ZERO
                                   3019 
                                   3020 ;       find    ( a va -- ca na | a F )
                                   3021 ;       Search vocabulary for string.
                                   3022 ;       Return ca and na if succeeded.
      00110F 10 D0                 3023         .word      LINK
                           001111  3024 LINK = . 
      001111 04                    3025         .byte      4
      001112 46 49 4E 44           3026         .ascii     "FIND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001116                       3027 FIND:
      001116 CD 04 E9         [ 4] 3028         CALL     SWAPP
      001119 CD 04 D9         [ 4] 3029         CALL     DUPP
      00111C CD 04 50         [ 4] 3030         CALL     CAT
      00111F CD 05 A5         [ 4] 3031         CALL     TEMP
      001122 CD 04 1B         [ 4] 3032         CALL     STORE
      001125 CD 04 D9         [ 4] 3033         CALL     DUPP
      001128 CD 04 32         [ 4] 3034         CALL     AT
      00112B CD 04 A2         [ 4] 3035         CALL     TOR
      00112E CD 09 A3         [ 4] 3036         CALL     CELLP
      001131 CD 04 E9         [ 4] 3037         CALL     SWAPP
      001134 CD 04 32         [ 4] 3038 FIND1:  CALL     AT
      001137 CD 04 D9         [ 4] 3039         CALL     DUPP
      00113A CD 03 E7         [ 4] 3040         CALL     QBRAN
      00113D 11 73                 3041         .word      FIND6
      00113F CD 04 D9         [ 4] 3042         CALL     DUPP
      001142 CD 04 32         [ 4] 3043         CALL     AT
      001145 CD 03 B4         [ 4] 3044         CALL     DOLIT
      001148 1F 7F                 3045         .word      MASKK
      00114A CD 05 25         [ 4] 3046         CALL     ANDD
      00114D CD 04 96         [ 4] 3047         CALL     RAT
      001150 CD 05 4E         [ 4] 3048         CALL     XORR
      001153 CD 03 E7         [ 4] 3049         CALL     QBRAN
      001156 11 62                 3050         .word      FIND2
      001158 CD 09 A3         [ 4] 3051         CALL     CELLP
      00115B CD 03 B4         [ 4] 3052         CALL     DOLIT
      00115E FF FF                 3053         .word     0xFFFF
      001160 20 0C            [ 2] 3054         JRA     FIND3
      001162 CD 09 A3         [ 4] 3055 FIND2:  CALL     CELLP
      001165 CD 05 A5         [ 4] 3056         CALL     TEMP
      001168 CD 04 32         [ 4] 3057         CALL     AT
      00116B CD 10 D6         [ 4] 3058         CALL     SAMEQ
      00116E CD 03 FE         [ 4] 3059 FIND3:  CALL     BRAN
      001171 11 82                 3060         .word      FIND4
      001173 CD 04 83         [ 4] 3061 FIND6:  CALL     RFROM
      001176 CD 04 CF         [ 4] 3062         CALL     DROP
      001179 CD 04 E9         [ 4] 3063         CALL     SWAPP
      00117C CD 09 B2         [ 4] 3064         CALL     CELLM
      00117F CC 04 E9         [ 2] 3065         JP     SWAPP
      001182 CD 03 E7         [ 4] 3066 FIND4:  CALL     QBRAN
      001185 11 8F                 3067         .word      FIND5
      001187 CD 09 B2         [ 4] 3068         CALL     CELLM
      00118A CD 09 B2         [ 4] 3069         CALL     CELLM
      00118D 20 A5            [ 2] 3070         JRA     FIND1
      00118F CD 04 83         [ 4] 3071 FIND5:  CALL     RFROM
      001192 CD 04 CF         [ 4] 3072         CALL     DROP
      001195 CD 04 E9         [ 4] 3073         CALL     SWAPP
      001198 CD 04 CF         [ 4] 3074         CALL     DROP
      00119B CD 09 B2         [ 4] 3075         CALL     CELLM
      00119E CD 04 D9         [ 4] 3076         CALL     DUPP
      0011A1 CD 10 C0         [ 4] 3077         CALL     NAMET
      0011A4 CC 04 E9         [ 2] 3078         JP     SWAPP
                                   3079 
                                   3080 ;       NAME?   ( a -- ca na | a F )
                                   3081 ;       Search vocabularies for a string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0011A7 11 11                 3082         .word      LINK
                           0011A9  3083 LINK = . 
      0011A9 05                    3084         .byte      5
      0011AA 4E 41 4D 45 3F        3085         .ascii     "NAME?"
      0011AF                       3086 NAMEQ:
      0011AF CD 06 19         [ 4] 3087         CALL   CNTXT
      0011B2 CC 11 16         [ 2] 3088         JP     FIND
                                   3089 
                                   3090 ;; Terminal response
                                   3091 
                                   3092 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3093 ;       Backup cursor by one character.
      0011B5 11 A9                 3094         .word      LINK
                           0011B7  3095 LINK = . 
      0011B7 02                    3096         .byte      2
      0011B8 5E 48                 3097         .ascii     "^H"
      0011BA                       3098 BKSP:
      0011BA CD 04 A2         [ 4] 3099         CALL     TOR
      0011BD CD 05 03         [ 4] 3100         CALL     OVER
      0011C0 CD 04 83         [ 4] 3101         CALL     RFROM
      0011C3 CD 04 E9         [ 4] 3102         CALL     SWAPP
      0011C6 CD 05 03         [ 4] 3103         CALL     OVER
      0011C9 CD 05 4E         [ 4] 3104         CALL     XORR
      0011CC CD 03 E7         [ 4] 3105         CALL     QBRAN
      0011CF 11 EA                 3106         .word      BACK1
      0011D1 CD 03 B4         [ 4] 3107         CALL     DOLIT
      0011D4 00 08                 3108         .word      BKSPP
      0011D6 CD 03 9E         [ 4] 3109         CALL     EMIT
      0011D9 CD 09 DB         [ 4] 3110         CALL     ONEM
      0011DC CD 0A 2D         [ 4] 3111         CALL     BLANK
      0011DF CD 03 9E         [ 4] 3112         CALL     EMIT
      0011E2 CD 03 B4         [ 4] 3113         CALL     DOLIT
      0011E5 00 08                 3114         .word      BKSPP
      0011E7 CC 03 9E         [ 2] 3115         JP     EMIT
      0011EA 81               [ 4] 3116 BACK1:  RET
                                   3117 
                                   3118 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3119 ;       Accept and echo key stroke
                                   3120 ;       and bump cursor.
      0011EB 11 B7                 3121         .word      LINK
                           0011ED  3122 LINK = . 
      0011ED 03                    3123         .byte      3
      0011EE 54 41 50              3124         .ascii     "TAP"
      0011F1                       3125 TAP:
      0011F1 CD 04 D9         [ 4] 3126         CALL     DUPP
      0011F4 CD 03 9E         [ 4] 3127         CALL     EMIT
      0011F7 CD 05 03         [ 4] 3128         CALL     OVER
      0011FA CD 04 3F         [ 4] 3129         CALL     CSTOR
      0011FD CC 09 CE         [ 2] 3130         JP     ONEP
                                   3131 
                                   3132 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3133 ;       Process a key stroke,
                                   3134 ;       CR or backspace.
      001200 11 ED                 3135         .word      LINK
                           001202  3136 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001202 04                    3137         .byte      4
      001203 4B 54 41 50           3138         .ascii     "KTAP"
      001207                       3139 KTAP:
      001207 CD 04 D9         [ 4] 3140         CALL     DUPP
      00120A CD 03 B4         [ 4] 3141         CALL     DOLIT
      00120D 00 0D                 3142         .word      CRR
      00120F CD 05 4E         [ 4] 3143         CALL     XORR
      001212 CD 03 E7         [ 4] 3144         CALL     QBRAN
      001215 12 2D                 3145         .word      KTAP2
      001217 CD 03 B4         [ 4] 3146         CALL     DOLIT
      00121A 00 08                 3147         .word      BKSPP
      00121C CD 05 4E         [ 4] 3148         CALL     XORR
      00121F CD 03 E7         [ 4] 3149         CALL     QBRAN
      001222 12 2A                 3150         .word      KTAP1
      001224 CD 0A 2D         [ 4] 3151         CALL     BLANK
      001227 CC 11 F1         [ 2] 3152         JP     TAP
      00122A CC 11 BA         [ 2] 3153 KTAP1:  JP     BKSP
      00122D CD 04 CF         [ 4] 3154 KTAP2:  CALL     DROP
      001230 CD 04 E9         [ 4] 3155         CALL     SWAPP
      001233 CD 04 CF         [ 4] 3156         CALL     DROP
      001236 CC 04 D9         [ 2] 3157         JP     DUPP
                                   3158 
                                   3159 ;       accept  ( b u -- b u )
                                   3160 ;       Accept characters to input
                                   3161 ;       buffer. Return with actual count.
      001239 12 02                 3162         .word      LINK
                           00123B  3163 LINK = . 
      00123B 06                    3164         .byte      6
      00123C 41 43 43 45 50 54     3165         .ascii     "ACCEPT"
      001242                       3166 ACCEP:
      001242 CD 05 03         [ 4] 3167         CALL     OVER
      001245 CD 06 D4         [ 4] 3168         CALL     PLUS
      001248 CD 05 03         [ 4] 3169         CALL     OVER
      00124B CD 06 BF         [ 4] 3170 ACCP1:  CALL     DDUP
      00124E CD 05 4E         [ 4] 3171         CALL     XORR
      001251 CD 03 E7         [ 4] 3172         CALL     QBRAN
      001254 12 76                 3173         .word      ACCP4
      001256 CD 0E 20         [ 4] 3174         CALL     KEY
      001259 CD 04 D9         [ 4] 3175         CALL     DUPP
      00125C CD 0A 2D         [ 4] 3176         CALL     BLANK
      00125F CD 03 B4         [ 4] 3177         CALL     DOLIT
      001262 00 7F                 3178         .word      127
      001264 CD 08 0F         [ 4] 3179         CALL     WITHI
      001267 CD 03 E7         [ 4] 3180         CALL     QBRAN
      00126A 12 71                 3181         .word      ACCP2
      00126C CD 11 F1         [ 4] 3182         CALL     TAP
      00126F 20 03            [ 2] 3183         JRA     ACCP3
      001271 CD 12 07         [ 4] 3184 ACCP2:  CALL     KTAP
      001274 20 D5            [ 2] 3185 ACCP3:  JRA     ACCP1
      001276 CD 04 CF         [ 4] 3186 ACCP4:  CALL     DROP
      001279 CD 05 03         [ 4] 3187         CALL     OVER
      00127C CC 07 4D         [ 2] 3188         JP     SUBB
                                   3189 
                                   3190 ;       QUERY   ( -- )
                                   3191 ;       Accept input stream to
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3192 ;       terminal input buffer.
      00127F 12 3B                 3193         .word      LINK
                                   3194         
                           001281  3195 LINK = . 
      001281 05                    3196         .byte      5
      001282 51 55 45 52 59        3197         .ascii     "QUERY"
      001287                       3198 QUERY:
      001287 CD 0B 4A         [ 4] 3199         CALL     TIB
      00128A CD 03 B4         [ 4] 3200         CALL     DOLIT
      00128D 00 50                 3201         .word      80
      00128F CD 12 42         [ 4] 3202         CALL     ACCEP
      001292 CD 05 C4         [ 4] 3203         CALL     NTIB
      001295 CD 04 1B         [ 4] 3204         CALL     STORE
      001298 CD 04 CF         [ 4] 3205         CALL     DROP
      00129B CD 0A 3A         [ 4] 3206         CALL     ZERO
      00129E CD 05 B4         [ 4] 3207         CALL     INN
      0012A1 CC 04 1B         [ 2] 3208         JP     STORE
                                   3209 
                                   3210 ;       ABORT   ( -- )
                                   3211 ;       Reset data stack and
                                   3212 ;       jump to QUIT.
      0012A4 12 81                 3213         .word      LINK
                           0012A6  3214 LINK = . 
      0012A6 05                    3215         .byte      5
      0012A7 41 42 4F 52 54        3216         .ascii     "ABORT"
      0012AC                       3217 ABORT:
      0012AC CD 13 A3         [ 4] 3218         CALL     PRESE
      0012AF CC 13 C0         [ 2] 3219         JP     QUIT
                                   3220 
                                   3221 ;       abort"  ( f -- )
                                   3222 ;       Run time routine of ABORT".
                                   3223 ;       Abort with a message.
      0012B2 12 A6                 3224         .word      LINK
                           0012B4  3225 LINK = . 
      0012B4 46                    3226 	.byte      COMPO+6
      0012B5 41 42 4F 52 54        3227         .ascii     "ABORT"
      0012BA 22                    3228         .byte      '"'
      0012BB                       3229 ABORQ:
      0012BB CD 03 E7         [ 4] 3230         CALL     QBRAN
      0012BE 12 DA                 3231         .word      ABOR2   ;text flag
      0012C0 CD 0E B6         [ 4] 3232         CALL     DOSTR
      0012C3 CD 0E 58         [ 4] 3233 ABOR1:  CALL     SPACE
      0012C6 CD 0B 11         [ 4] 3234         CALL     COUNT
      0012C9 CD 0E 82         [ 4] 3235         CALL     TYPES
      0012CC CD 03 B4         [ 4] 3236         CALL     DOLIT
      0012CF 00 3F                 3237         .word     63 ; "?"
      0012D1 CD 03 9E         [ 4] 3238         CALL     EMIT
      0012D4 CD 0E A0         [ 4] 3239         CALL     CR
      0012D7 CC 12 AC         [ 2] 3240         JP     ABORT   ;pass error string
      0012DA CD 0E B6         [ 4] 3241 ABOR2:  CALL     DOSTR
      0012DD CC 04 CF         [ 2] 3242         JP     DROP
                                   3243 
                                   3244 ;; The text interpreter
                                   3245 
                                   3246 ;       $INTERPRET      ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3247 ;       Interpret a word. If failed,
                                   3248 ;       try to convert it to an integer.
      0012E0 12 B4                 3249         .word      LINK
                           0012E2  3250 LINK = . 
      0012E2 0A                    3251         .byte      10
      0012E3 24 49 4E 54 45 52 50  3252         .ascii     "$INTERPRET"
             52 45 54
      0012ED                       3253 INTER:
      0012ED CD 11 AF         [ 4] 3254         CALL     NAMEQ
      0012F0 CD 06 83         [ 4] 3255         CALL     QDUP    ;?defined
      0012F3 CD 03 E7         [ 4] 3256         CALL     QBRAN
      0012F6 13 17                 3257         .word      INTE1
      0012F8 CD 04 32         [ 4] 3258         CALL     AT
      0012FB CD 03 B4         [ 4] 3259         CALL     DOLIT
      0012FE 40 00                 3260 	.word       0x4000	; COMPO*256
      001300 CD 05 25         [ 4] 3261         CALL     ANDD    ;?compile only lexicon bits
      001303 CD 12 BB         [ 4] 3262         CALL     ABORQ
      001306 0D                    3263         .byte      13
      001307 20 63 6F 6D 70 69 6C  3264         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001314 CC 04 0E         [ 2] 3265         JP     EXECU
      001317 CD 0D 4D         [ 4] 3266 INTE1:  CALL     NUMBQ   ;convert a number
      00131A CD 03 E7         [ 4] 3267         CALL     QBRAN
      00131D 12 C3                 3268         .word    ABOR1
      00131F 81               [ 4] 3269         RET
                                   3270 
                                   3271 ;       [       ( -- )
                                   3272 ;       Start  text interpreter.
      001320 12 E2                 3273         .word      LINK
                           001322  3274 LINK = . 
      001322 81                    3275 	.byte      IMEDD+1
      001323 5B                    3276         .ascii     "["
      001324                       3277 LBRAC:
      001324 CD 03 B4         [ 4] 3278         CALL   DOLIT
      001327 12 ED                 3279         .word  INTER
      001329 CD 05 F7         [ 4] 3280         CALL   TEVAL
      00132C CC 04 1B         [ 2] 3281         JP     STORE
                                   3282 
                                   3283 ;       .OK     ( -- )
                                   3284 ;       Display 'ok' while interpreting.
      00132F 13 22                 3285         .word      LINK
                           001331  3286 LINK = . 
      001331 03                    3287         .byte      3
      001332 2E 4F 4B              3288         .ascii     ".OK"
      001335                       3289 DOTOK:
      001335 CD 03 B4         [ 4] 3290         CALL     DOLIT
      001338 12 ED                 3291         .word      INTER
      00133A CD 05 F7         [ 4] 3292         CALL     TEVAL
      00133D CD 04 32         [ 4] 3293         CALL     AT
      001340 CD 07 75         [ 4] 3294         CALL     EQUAL
      001343 CD 03 E7         [ 4] 3295         CALL     QBRAN
      001346 13 4F                 3296         .word      DOTO1
      001348 CD 0E DF         [ 4] 3297         CALL     DOTQP
      00134B 03                    3298         .byte      3
      00134C 20 6F 6B              3299         .ascii     " ok"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00134F CC 0E A0         [ 2] 3300 DOTO1:  JP     CR
                                   3301 
                                   3302 ;       ?STACK  ( -- )
                                   3303 ;       Abort if stack underflows.
      001352 13 31                 3304         .word      LINK
                           001354  3305 LINK = . 
      001354 06                    3306         .byte      6
      001355 3F 53 54 41 43 4B     3307         .ascii     "?STACK"
      00135B                       3308 QSTAC: 
      00135B CD 0A 7C         [ 4] 3309         CALL     DEPTH
      00135E CD 05 12         [ 4] 3310         CALL     ZLESS   ;check only for underflow
      001361 CD 12 BB         [ 4] 3311         CALL     ABORQ
      001364 0B                    3312         .byte      11
      001365 20 75 6E 64 65 72 66  3313         .ascii     " underflow "
             6C 6F 77 20
      001370 81               [ 4] 3314         RET
                                   3315 
                                   3316 ;       EVAL    ( -- )
                                   3317 ;       Interpret  input stream.
      001371 13 54                 3318         .word      LINK
                           001373  3319 LINK = . 
      001373 04                    3320         .byte      4
      001374 45 56 41 4C           3321         .ascii     "EVAL"
      001378                       3322 EVAL:
      001378 CD 10 B2         [ 4] 3323 EVAL1:  CALL     TOKEN
      00137B CD 04 D9         [ 4] 3324         CALL     DUPP
      00137E CD 04 50         [ 4] 3325         CALL     CAT     ;?input stream empty
      001381 CD 03 E7         [ 4] 3326         CALL     QBRAN
      001384 13 94                 3327         .word    EVAL2
      001386 CD 05 F7         [ 4] 3328         CALL     TEVAL
      001389 CD 0B 5E         [ 4] 3329         CALL     ATEXE
      00138C CD 13 5B         [ 4] 3330         CALL     QSTAC   ;evaluate input, check stack
      00138F CD 03 FE         [ 4] 3331         CALL     BRAN
      001392 13 78                 3332         .word    EVAL1
      001394 CD 04 CF         [ 4] 3333 EVAL2:  CALL     DROP
      001397 CC 13 35         [ 2] 3334         JP       DOTOK
                                   3335 
                                   3336 ;       PRESET  ( -- )
                                   3337 ;       Reset data stack pointer and
                                   3338 ;       terminal input buffer.
      00139A 13 73                 3339         .word      LINK
                           00139C  3340 LINK = . 
      00139C 06                    3341         .byte      6
      00139D 50 52 45 53 45 54     3342         .ascii     "PRESET"
      0013A3                       3343 PRESE:
      0013A3 CD 03 B4         [ 4] 3344         CALL     DOLIT
      0013A6 06 80                 3345         .word      SPP
      0013A8 CD 04 C6         [ 4] 3346         CALL     SPSTO
      0013AB CD 03 B4         [ 4] 3347         CALL     DOLIT
      0013AE 07 00                 3348         .word      TIBB
      0013B0 CD 05 C4         [ 4] 3349         CALL     NTIB
      0013B3 CD 09 A3         [ 4] 3350         CALL     CELLP
      0013B6 CC 04 1B         [ 2] 3351         JP     STORE
                                   3352 
                                   3353 ;       QUIT    ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3354 ;       Reset return stack pointer
                                   3355 ;       and start text interpreter.
      0013B9 13 9C                 3356         .word      LINK
                           0013BB  3357 LINK = . 
      0013BB 04                    3358         .byte      4
      0013BC 51 55 49 54           3359         .ascii     "QUIT"
      0013C0                       3360 QUIT:
      0013C0 CD 03 B4         [ 4] 3361         CALL     DOLIT
      0013C3 07 FF                 3362         .word      RPP
      0013C5 CD 04 6D         [ 4] 3363         CALL     RPSTO   ;reset return stack pointer
      0013C8 CD 13 24         [ 4] 3364 QUIT1:  CALL     LBRAC   ;start interpretation
      0013CB CD 12 87         [ 4] 3365 QUIT2:  CALL     QUERY   ;get input
      0013CE CD 13 78         [ 4] 3366         CALL     EVAL
      0013D1 20 F8            [ 2] 3367         JRA     QUIT2   ;continue till error
                                   3368 
                                   3369 ;; The compiler
                                   3370 
                                   3371 ;       '       ( -- ca )
                                   3372 ;       Search vocabularies for
                                   3373 ;       next word in input stream.
      0013D3 13 BB                 3374         .word      LINK
                           0013D5  3375 LINK = . 
      0013D5 01                    3376         .byte      1
      0013D6 27                    3377         .ascii     "'"
      0013D7                       3378 TICK:
      0013D7 CD 10 B2         [ 4] 3379         CALL     TOKEN
      0013DA CD 11 AF         [ 4] 3380         CALL     NAMEQ   ;?defined
      0013DD CD 03 E7         [ 4] 3381         CALL     QBRAN
      0013E0 12 C3                 3382         .word      ABOR1
      0013E2 81               [ 4] 3383         RET     ;yes, push code address
                                   3384 
                                   3385 ;       ALLOT   ( n -- )
                                   3386 ;       Allocate n bytes to RAM 
      0013E3 13 D5                 3387         .word      LINK
                           0013E5  3388         LINK = . 
      0013E5 05                    3389         .byte      5
      0013E6 41 4C 4C 4F 54        3390         .ascii     "ALLOT"
      0013EB                       3391 ALLOT:
      0013EB CD 06 27         [ 4] 3392         CALL     VPP
                                   3393 ; must update APP_VP each time VP is modidied
      0013EE CD 0A AA         [ 4] 3394         call PSTOR 
      0013F1 CC 1B 7D         [ 2] 3395         jp UPDATVP 
                                   3396 
                                   3397 ;       ,       ( w -- )
                                   3398 ;         Compile an integer into
                                   3399 ;         variable space.
      0013F4 13 E5                 3400         .word      LINK
                           0013F6  3401 LINK = . 
      0013F6 01                    3402         .byte      1
      0013F7 2C                    3403         .ascii     ","
      0013F8                       3404 COMMA:
      0013F8 CD 0B 28         [ 4] 3405         CALL     HERE
      0013FB CD 04 D9         [ 4] 3406         CALL     DUPP
      0013FE CD 09 A3         [ 4] 3407         CALL     CELLP   ;cell boundary
      001401 CD 06 27         [ 4] 3408         CALL     VPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001404 CD 04 1B         [ 4] 3409         CALL     STORE
      001407 CC 04 1B         [ 2] 3410         JP     STORE
                                   3411 
                                   3412 ;       C,      ( c -- )
                                   3413 ;       Compile a byte into
                                   3414 ;       variables space.
      00140A 13 F6                 3415        .word      LINK
                           00140C  3416 LINK = . 
      00140C 02                    3417         .byte      2
      00140D 43 2C                 3418         .ascii     "C,"
      00140F                       3419 CCOMMA:
      00140F CD 0B 28         [ 4] 3420         CALL     HERE
      001412 CD 04 D9         [ 4] 3421         CALL     DUPP
      001415 CD 09 CE         [ 4] 3422         CALL     ONEP
      001418 CD 06 27         [ 4] 3423         CALL     VPP
      00141B CD 04 1B         [ 4] 3424         CALL     STORE
      00141E CC 04 3F         [ 2] 3425         JP     CSTOR
                                   3426 
                                   3427 ;       [COMPILE]       ( -- ; <string> )
                                   3428 ;       Compile next immediate
                                   3429 ;       word into code dictionary.
      001421 14 0C                 3430         .word      LINK
                           001423  3431 LINK = . 
      001423 89                    3432 	.byte      IMEDD+9
      001424 5B 43 4F 4D 50 49 4C  3433         .ascii     "[COMPILE]"
             45 5D
      00142D                       3434 BCOMP:
      00142D CD 13 D7         [ 4] 3435         CALL     TICK
      001430 CC 16 F3         [ 2] 3436         JP     JSRC
                                   3437 
                                   3438 ;       COMPILE ( -- )
                                   3439 ;       Compile next jsr in
                                   3440 ;       colon list to code dictionary.
      001433 14 23                 3441         .word      LINK
                           001435  3442 LINK = . 
      001435 47                    3443 	.byte      COMPO+7
      001436 43 4F 4D 50 49 4C 45  3444         .ascii     "COMPILE"
      00143D                       3445 COMPI:
      00143D CD 04 83         [ 4] 3446         CALL     RFROM
      001440 CD 04 D9         [ 4] 3447         CALL     DUPP
      001443 CD 04 32         [ 4] 3448         CALL     AT
      001446 CD 16 F3         [ 4] 3449         CALL     JSRC    ;compile subroutine
      001449 CD 09 A3         [ 4] 3450         CALL     CELLP
      00144C 90 93            [ 1] 3451         ldw y,x 
      00144E 90 FE            [ 2] 3452         ldw y,(y)
      001450 1C 00 02         [ 2] 3453         addw x,#CELLL 
      001453 90 FC            [ 2] 3454         jp (y)
                                   3455 
                                   3456 ;       LITERAL ( w -- )
                                   3457 ;       Compile tos to dictionary
                                   3458 ;       as an integer literal.
      001455 14 35                 3459         .word      LINK
                           001457  3460 LINK = . 
      001457 87                    3461 	.byte      IMEDD+7
      001458 4C 49 54 45 52 41 4C  3462         .ascii     "LITERAL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00145F                       3463 LITER:
      00145F CD 14 3D         [ 4] 3464         CALL     COMPI
      001462 03 B4                 3465         .word DOLIT 
      001464 CC 13 F8         [ 2] 3466         JP     COMMA
                                   3467 
                                   3468 ;       $,"     ( -- )
                                   3469 ;       Compile a literal string
                                   3470 ;       up to next " .
      001467 14 57                 3471         .word      LINK
                           001469  3472 LINK = . 
      001469 03                    3473         .byte      3
      00146A 24 2C 22              3474         .byte     '$',',','"'
      00146D                       3475 STRCQ:
      00146D CD 03 B4         [ 4] 3476         CALL     DOLIT
      001470 00 22                 3477         .word     34	; "
      001472 CD 10 35         [ 4] 3478         CALL     PARSE
      001475 CD 0B 28         [ 4] 3479         CALL     HERE
      001478 CD 0B E8         [ 4] 3480         CALL     PACKS   ;string to code dictionary
      00147B CD 0B 11         [ 4] 3481         CALL     COUNT
      00147E CD 06 D4         [ 4] 3482         CALL     PLUS    ;calculate aligned end of string
      001481 CD 06 27         [ 4] 3483         CALL     VPP
      001484 CC 04 1B         [ 2] 3484         JP     STORE
                                   3485 
                                   3486 ;; Structures
                                   3487 
                                   3488 ;       FOR     ( -- a )
                                   3489 ;       Start a FOR-NEXT loop
                                   3490 ;       structure in a colon definition.
      001487 14 69                 3491         .word      LINK
                           001489  3492 LINK = . 
      001489 83                    3493 	.byte      IMEDD+3
      00148A 46 4F 52              3494         .ascii     "FOR"
      00148D                       3495 FOR:
      00148D CD 14 3D         [ 4] 3496         CALL     COMPI
      001490 04 A2                 3497         .word TOR 
      001492 CC 0B 28         [ 2] 3498         JP     HERE
                                   3499 
                                   3500 ;       NEXT    ( a -- )
                                   3501 ;       Terminate a FOR-NEXT loop.
      001495 14 89                 3502         .word      LINK
                           001497  3503 LINK = . 
      001497 84                    3504 	.byte      IMEDD+4
      001498 4E 45 58 54           3505         .ascii     "NEXT"
      00149C                       3506 NEXT:
      00149C CD 14 3D         [ 4] 3507         CALL     COMPI
      00149F 03 C8                 3508         .word DONXT 
      0014A1 CD 06 73         [ 4] 3509         call ADRADJ
      0014A4 CC 13 F8         [ 2] 3510         JP     COMMA
                                   3511 
                                   3512 ;       I ( -- n )
                                   3513 ;       stack FOR-NEXT COUNTER 
      0014A7 14 97                 3514         .word LINK 
                           0014A9  3515         LINK=.
      0014A9 01                    3516         .byte 1 
      0014AA 49                    3517         .ascii "I"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0014AB                       3518 IFETCH: 
      0014AB 1D 00 02         [ 2] 3519         subw x,#CELLL 
      0014AE 16 03            [ 2] 3520         ldw y,(3,sp)
      0014B0 FF               [ 2] 3521         ldw (x),y 
      0014B1 81               [ 4] 3522         ret 
                                   3523 
                                   3524 ;       BEGIN   ( -- a )
                                   3525 ;       Start an infinite or
                                   3526 ;       indefinite loop structure.
      0014B2 14 A9                 3527         .word      LINK
                           0014B4  3528 LINK = . 
      0014B4 85                    3529 	.byte      IMEDD+5
      0014B5 42 45 47 49 4E        3530         .ascii     "BEGIN"
      0014BA                       3531 BEGIN:
      0014BA CC 0B 28         [ 2] 3532         JP     HERE
                                   3533 
                                   3534 ;       UNTIL   ( a -- )
                                   3535 ;       Terminate a BEGIN-UNTIL
                                   3536 ;       indefinite loop structure.
      0014BD 14 B4                 3537         .word      LINK
                           0014BF  3538 LINK = . 
      0014BF 85                    3539 	.byte      IMEDD+5
      0014C0 55 4E 54 49 4C        3540         .ascii     "UNTIL"
      0014C5                       3541 UNTIL:
      0014C5 CD 14 3D         [ 4] 3542         CALL     COMPI
      0014C8 03 E7                 3543         .word    QBRAN 
      0014CA CD 06 73         [ 4] 3544         call ADRADJ
      0014CD CC 13 F8         [ 2] 3545         JP     COMMA
                                   3546 
                                   3547 ;       AGAIN   ( a -- )
                                   3548 ;       Terminate a BEGIN-AGAIN
                                   3549 ;       infinite loop structure.
      0014D0 14 BF                 3550         .word      LINK
                           0014D2  3551 LINK = . 
      0014D2 85                    3552 	.byte      IMEDD+5
      0014D3 41 47 41 49 4E        3553         .ascii     "AGAIN"
      0014D8                       3554 AGAIN:
      0014D8 CD 14 3D         [ 4] 3555         CALL     COMPI
      0014DB 03 FE                 3556         .word BRAN
      0014DD CD 06 73         [ 4] 3557         call ADRADJ 
      0014E0 CC 13 F8         [ 2] 3558         JP     COMMA
                                   3559 
                                   3560 ;       IF      ( -- A )
                                   3561 ;       Begin a conditional branch.
      0014E3 14 D2                 3562         .word      LINK
                           0014E5  3563 LINK = . 
      0014E5 82                    3564 	.byte      IMEDD+2
      0014E6 49 46                 3565         .ascii     "IF"
      0014E8                       3566 IFF:
      0014E8 CD 14 3D         [ 4] 3567         CALL     COMPI
      0014EB 03 E7                 3568         .word QBRAN
      0014ED CD 0B 28         [ 4] 3569         CALL     HERE
      0014F0 CD 0A 3A         [ 4] 3570         CALL     ZERO
      0014F3 CC 13 F8         [ 2] 3571         JP     COMMA
                                   3572 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3573 ;       THEN        ( A -- )
                                   3574 ;       Terminate a conditional branch structure.
      0014F6 14 E5                 3575         .word      LINK
                           0014F8  3576 LINK = . 
      0014F8 84                    3577 	.byte      IMEDD+4
      0014F9 54 48 45 4E           3578         .ascii     "THEN"
      0014FD                       3579 THENN:
      0014FD CD 0B 28         [ 4] 3580         CALL     HERE
      001500 CD 06 73         [ 4] 3581         call ADRADJ 
      001503 CD 04 E9         [ 4] 3582         CALL     SWAPP
      001506 CC 04 1B         [ 2] 3583         JP     STORE
                                   3584 
                                   3585 ;       ELSE        ( A -- A )
                                   3586 ;       Start the false clause in an IF-ELSE-THEN structure.
      001509 14 F8                 3587         .word      LINK
                           00150B  3588 LINK = . 
      00150B 84                    3589 	.byte      IMEDD+4
      00150C 45 4C 53 45           3590         .ascii     "ELSE"
      001510                       3591 ELSEE:
      001510 CD 14 3D         [ 4] 3592         CALL     COMPI
      001513 03 FE                 3593         .word BRAN
      001515 CD 0B 28         [ 4] 3594         CALL     HERE
      001518 CD 0A 3A         [ 4] 3595         CALL     ZERO
      00151B CD 13 F8         [ 4] 3596         CALL     COMMA
      00151E CD 04 E9         [ 4] 3597         CALL     SWAPP
      001521 CD 0B 28         [ 4] 3598         CALL     HERE
      001524 CD 06 73         [ 4] 3599         call ADRADJ 
      001527 CD 04 E9         [ 4] 3600         CALL     SWAPP
      00152A CC 04 1B         [ 2] 3601         JP     STORE
                                   3602 
                                   3603 ;       AHEAD       ( -- A )
                                   3604 ;       Compile a forward branch instruction.
      00152D 15 0B                 3605         .word      LINK
                           00152F  3606 LINK = . 
      00152F 85                    3607 	.byte      IMEDD+5
      001530 41 48 45 41 44        3608         .ascii     "AHEAD"
      001535                       3609 AHEAD:
      001535 CD 14 3D         [ 4] 3610         CALL     COMPI
      001538 03 FE                 3611         .word BRAN
      00153A CD 0B 28         [ 4] 3612         CALL     HERE
      00153D CD 0A 3A         [ 4] 3613         CALL     ZERO
      001540 CC 13 F8         [ 2] 3614         JP     COMMA
                                   3615 
                                   3616 ;       WHILE       ( a -- A a )
                                   3617 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001543 15 2F                 3618         .word      LINK
                           001545  3619 LINK = . 
      001545 85                    3620 	.byte      IMEDD+5
      001546 57 48 49 4C 45        3621         .ascii     "WHILE"
      00154B                       3622 WHILE:
      00154B CD 14 3D         [ 4] 3623         CALL     COMPI
      00154E 03 E7                 3624         .word QBRAN
      001550 CD 0B 28         [ 4] 3625         CALL     HERE
      001553 CD 0A 3A         [ 4] 3626         CALL     ZERO
      001556 CD 13 F8         [ 4] 3627         CALL     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001559 CC 04 E9         [ 2] 3628         JP     SWAPP
                                   3629 
                                   3630 ;       REPEAT      ( A a -- )
                                   3631 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00155C 15 45                 3632         .word      LINK
                           00155E  3633 LINK = . 
      00155E 86                    3634         .byte      IMEDD+6
      00155F 52 45 50 45 41 54     3635         .ascii     "REPEAT"
      001565                       3636 REPEA:
      001565 CD 14 3D         [ 4] 3637         CALL     COMPI
      001568 03 FE                 3638         .word BRAN
      00156A CD 06 73         [ 4] 3639         call ADRADJ 
      00156D CD 13 F8         [ 4] 3640         CALL     COMMA
      001570 CD 0B 28         [ 4] 3641         CALL     HERE
      001573 CD 06 73         [ 4] 3642         call ADRADJ 
      001576 CD 04 E9         [ 4] 3643         CALL     SWAPP
      001579 CC 04 1B         [ 2] 3644         JP     STORE
                                   3645 
                                   3646 ;       AFT         ( a -- a A )
                                   3647 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00157C 15 5E                 3648         .word      LINK
                           00157E  3649 LINK = . 
      00157E 83                    3650 	.byte      IMEDD+3
      00157F 41 46 54              3651         .ascii     "AFT"
      001582                       3652 AFT:
      001582 CD 04 CF         [ 4] 3653         CALL     DROP
      001585 CD 15 35         [ 4] 3654         CALL     AHEAD
      001588 CD 0B 28         [ 4] 3655         CALL     HERE
      00158B CC 04 E9         [ 2] 3656         JP     SWAPP
                                   3657 
                                   3658 ;       ABORT"      ( -- ; <string> )
                                   3659 ;       Conditional abort with an error message.
      00158E 15 7E                 3660         .word      LINK
                           001590  3661 LINK = . 
      001590 86                    3662 	.byte      IMEDD+6
      001591 41 42 4F 52 54        3663         .ascii     "ABORT"
      001596 22                    3664         .byte      '"'
      001597                       3665 ABRTQ:
      001597 CD 14 3D         [ 4] 3666         CALL     COMPI
      00159A 12 BB                 3667         .word ABORQ
      00159C CC 14 6D         [ 2] 3668         JP     STRCQ
                                   3669 
                                   3670 ;       $"     ( -- ; <string> )
                                   3671 ;       Compile an inline string literal.
      00159F 15 90                 3672         .word      LINK
                           0015A1  3673 LINK = . 
      0015A1 82                    3674 	.byte      IMEDD+2
      0015A2 24 22                 3675         .byte     '$','"'
      0015A4                       3676 STRQ:
      0015A4 CD 14 3D         [ 4] 3677         CALL     COMPI
      0015A7 0E D5                 3678         .word STRQP 
      0015A9 CC 14 6D         [ 2] 3679         JP     STRCQ
                                   3680 
                                   3681 ;       ."          ( -- ; <string> )
                                   3682 ;       Compile an inline string literal to be typed out at run time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0015AC 15 A1                 3683         .word      LINK
                           0015AE  3684 LINK = . 
      0015AE 82                    3685 	.byte      IMEDD+2
      0015AF 2E 22                 3686         .byte     '.','"'
      0015B1                       3687 DOTQ:
      0015B1 CD 14 3D         [ 4] 3688         CALL     COMPI
      0015B4 0E DF                 3689         .word DOTQP 
      0015B6 CC 14 6D         [ 2] 3690         JP     STRCQ
                                   3691 
                                   3692 ;; Name compiler
                                   3693 
                                   3694 ;       ?UNIQUE ( a -- a )
                                   3695 ;       Display a warning message
                                   3696 ;       if word already exists.
      0015B9 15 AE                 3697         .word      LINK
                           0015BB  3698 LINK = . 
      0015BB 07                    3699         .byte      7
      0015BC 3F 55 4E 49 51 55 45  3700         .ascii     "?UNIQUE"
      0015C3                       3701 UNIQU:
      0015C3 CD 04 D9         [ 4] 3702         CALL     DUPP
      0015C6 CD 11 AF         [ 4] 3703         CALL     NAMEQ   ;?name exists
      0015C9 CD 03 E7         [ 4] 3704         CALL     QBRAN
      0015CC 15 E2                 3705         .word      UNIQ1
      0015CE CD 0E DF         [ 4] 3706         CALL     DOTQP   ;redef are OK
      0015D1 07                    3707         .byte       7
      0015D2 20 72 65 44 65 66 20  3708         .ascii     " reDef "       
      0015D9 CD 05 03         [ 4] 3709         CALL     OVER
      0015DC CD 0B 11         [ 4] 3710         CALL     COUNT
      0015DF CD 0E 82         [ 4] 3711         CALL     TYPES   ;just in case
      0015E2 CC 04 CF         [ 2] 3712 UNIQ1:  JP     DROP
                                   3713 
                                   3714 ;       $,n     ( na -- )
                                   3715 ;       Build a new dictionary name
                                   3716 ;       using string at na.
                                   3717 ; compile dans l'espace des variables 
      0015E5 15 BB                 3718         .word      LINK
                           0015E7  3719 LINK = . 
      0015E7 03                    3720         .byte      3
      0015E8 24 2C 6E              3721         .ascii     "$,n"
      0015EB                       3722 SNAME:
      0015EB CD 04 D9         [ 4] 3723         CALL     DUPP
      0015EE CD 04 50         [ 4] 3724         CALL     CAT     ;?null input
      0015F1 CD 03 E7         [ 4] 3725         CALL     QBRAN
      0015F4 16 21                 3726         .word      PNAM1
      0015F6 CD 15 C3         [ 4] 3727         CALL     UNIQU   ;?redefinition
      0015F9 CD 04 D9         [ 4] 3728         CALL     DUPP
      0015FC CD 0B 11         [ 4] 3729         CALL     COUNT
      0015FF CD 06 D4         [ 4] 3730         CALL     PLUS
      001602 CD 06 27         [ 4] 3731         CALL     VPP
      001605 CD 04 1B         [ 4] 3732         CALL     STORE
      001608 CD 04 D9         [ 4] 3733         CALL     DUPP
      00160B CD 06 45         [ 4] 3734         CALL     LAST
      00160E CD 04 1B         [ 4] 3735         CALL     STORE   ;save na for vocabulary link
      001611 CD 09 B2         [ 4] 3736         CALL     CELLM   ;link address
      001614 CD 06 19         [ 4] 3737         CALL     CNTXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001617 CD 04 32         [ 4] 3738         CALL     AT
      00161A CD 04 E9         [ 4] 3739         CALL     SWAPP
      00161D CD 04 1B         [ 4] 3740         CALL     STORE
      001620 81               [ 4] 3741         RET     ;save code pointer
      001621 CD 0E D5         [ 4] 3742 PNAM1:  CALL     STRQP
      001624 05                    3743         .byte      5
      001625 20 6E 61 6D 65        3744         .ascii     " name" ;null input
      00162A CC 12 C3         [ 2] 3745         JP     ABOR1
                                   3746 
                                   3747 ;; FORTH compiler
                                   3748 
                                   3749 ;       $COMPILE        ( a -- )
                                   3750 ;       Compile next word to
                                   3751 ;       dictionary as a token or literal.
      00162D 15 E7                 3752         .word      LINK
                           00162F  3753 LINK = . 
      00162F 08                    3754         .byte      8
      001630 24 43 4F 4D 50 49 4C  3755         .ascii     "$COMPILE"
             45
      001638                       3756 SCOMP:
      001638 CD 11 AF         [ 4] 3757         CALL     NAMEQ
      00163B CD 06 83         [ 4] 3758         CALL     QDUP    ;?defined
      00163E CD 03 E7         [ 4] 3759         CALL     QBRAN
      001641 16 59                 3760         .word      SCOM2
      001643 CD 04 32         [ 4] 3761         CALL     AT
      001646 CD 03 B4         [ 4] 3762         CALL     DOLIT
      001649 80 00                 3763         .word     0x8000	;  IMEDD*256
      00164B CD 05 25         [ 4] 3764         CALL     ANDD    ;?immediate
      00164E CD 03 E7         [ 4] 3765         CALL     QBRAN
      001651 16 56                 3766         .word      SCOM1
      001653 CC 04 0E         [ 2] 3767         JP     EXECU
      001656 CC 16 F3         [ 2] 3768 SCOM1:  JP     JSRC
      001659 CD 0D 4D         [ 4] 3769 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00165C CD 03 E7         [ 4] 3770         CALL     QBRAN
      00165F 12 C3                 3771         .word      ABOR1
      001661 CC 14 5F         [ 2] 3772         JP     LITER
                                   3773 
                                   3774 ;       OVERT   ( -- )
                                   3775 ;       Link a new word into vocabulary.
      001664 16 2F                 3776         .word      LINK
                           001666  3777 LINK = . 
      001666 05                    3778         .byte      5
      001667 4F 56 45 52 54        3779         .ascii     "OVERT"
      00166C                       3780 OVERT:
      00166C CD 06 45         [ 4] 3781         CALL     LAST
      00166F CD 04 32         [ 4] 3782         CALL     AT
      001672 CD 06 19         [ 4] 3783         CALL     CNTXT
      001675 CC 04 1B         [ 2] 3784         JP     STORE
                                   3785 
                                   3786 ;       ;       ( -- )
                                   3787 ;       Terminate a colon definition.
      001678 16 66                 3788         .word      LINK
                           00167A  3789 LINK = . 
      00167A C1                    3790 	.byte      IMEDD+COMPO+1
      00167B 3B                    3791         .ascii     ";"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00167C                       3792 SEMIS:
                           000001  3793 .if OPTIMIZE ; more compact and faster
      00167C CD 03 B4         [ 4] 3794         call DOLIT 
      00167F 00 81                 3795         .word 0x81   ; opcode for RET 
      001681 CD 14 0F         [ 4] 3796         call CCOMMA 
                           000000  3797 .else
                                   3798         CALL     COMPI
                                   3799         .word EXIT 
                                   3800 .endif 
      001684 CD 13 24         [ 4] 3801         CALL     LBRAC
      001687 CD 16 6C         [ 4] 3802         call OVERT 
      00168A CD 1F B5         [ 4] 3803         CALL FMOVE
      00168D CD 06 83         [ 4] 3804         call QDUP 
      001690 CD 03 E7         [ 4] 3805         call QBRAN 
      001693 17 C3                 3806         .word SET_RAMLAST 
      001695 CD 20 3D         [ 4] 3807         CALL UPDATPTR
      001698 81               [ 4] 3808         RET 
                                   3809 
                                   3810 
                                   3811 ;       Terminate an ISR definition 
                                   3812 ;       retourn ca of ISR as double
                                   3813 ;       I; ( -- ud )
      001699 16 7A                 3814         .word LINK 
                           00169B  3815         LINK=.
      00169B C2                    3816         .byte 2+IMEDD+COMPO 
      00169C 49 3B                 3817         .ascii "I;" 
      00169E                       3818 ISEMI:
      00169E 1D 00 02         [ 2] 3819         subw x,#CELLL  
      0016A1 90 AE 00 80      [ 2] 3820         ldw y,#IRET_CODE 
      0016A5 FF               [ 2] 3821         ldw (x),y 
      0016A6 CD 14 0F         [ 4] 3822         call CCOMMA
      0016A9 CD 13 24         [ 4] 3823         call LBRAC 
      0016AC CD 20 7C         [ 4] 3824         call IFMOVE
      0016AF CD 06 83         [ 4] 3825         call QDUP 
      0016B2 CD 03 E7         [ 4] 3826         CALL QBRAN 
      0016B5 17 C3                 3827         .word SET_RAMLAST
      0016B7 CD 06 35         [ 4] 3828         CALL CPP
      0016BA CD 04 32         [ 4] 3829         call AT 
      0016BD CD 04 E9         [ 4] 3830         call SWAPP 
      0016C0 CD 06 35         [ 4] 3831         CALL CPP 
      0016C3 CD 04 1B         [ 4] 3832         call STORE 
      0016C6 CD 1B 66         [ 4] 3833         call UPDATCP 
      0016C9 CD 1B 27         [ 4] 3834         call EEPVP 
      0016CC CD 04 CF         [ 4] 3835         call DROP 
      0016CF CD 04 32         [ 4] 3836         call AT 
      0016D2 CD 06 27         [ 4] 3837         call VPP 
      0016D5 CD 04 1B         [ 4] 3838         call STORE 
      0016D8 CC 0A 3A         [ 2] 3839         jp ZERO
      0016DB 81               [ 4] 3840         ret           
                                   3841         
                                   3842 
                                   3843 ;       ]       ( -- )
                                   3844 ;       Start compiling words in
                                   3845 ;       input stream.
      0016DC 16 9B                 3846         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                           0016DE  3847 LINK = . 
      0016DE 01                    3848         .byte      1
      0016DF 5D                    3849         .ascii     "]"
      0016E0                       3850 RBRAC:
      0016E0 CD 03 B4         [ 4] 3851         CALL   DOLIT
      0016E3 16 38                 3852         .word  SCOMP
      0016E5 CD 05 F7         [ 4] 3853         CALL   TEVAL
      0016E8 CC 04 1B         [ 2] 3854         JP     STORE
                                   3855 
                                   3856 ;       CALL,    ( ca -- )
                                   3857 ;       Compile a subroutine call.
      0016EB 16 DE                 3858         .word      LINK
                           0016ED  3859 LINK = . 
      0016ED 05                    3860         .byte      5
      0016EE 43 41 4C 4C 2C        3861         .ascii     "CALL,"
      0016F3                       3862 JSRC:
      0016F3 CD 03 B4         [ 4] 3863         CALL     DOLIT
      0016F6 00 CD                 3864         .word     CALLL     ;CALL
      0016F8 CD 14 0F         [ 4] 3865         CALL     CCOMMA
      0016FB CC 13 F8         [ 2] 3866         JP     COMMA
                                   3867 
                                   3868 ;       INIT-OFS ( -- )
                                   3869 ;       compute offset to adjust jump address 
                                   3870 ;       set variable OFFSET 
      0016FE 16 ED                 3871         .word LINK 
                           001700  3872         LINK=.
      001700 08                    3873         .byte 8 
      001701 49 4E 49 54 2D 4F 46  3874         .ascii "INIT-OFS" 
             53
      001709                       3875 INITOFS:
      001709 CD 05 E6         [ 4] 3876         call TFLASH 
      00170C CD 04 32         [ 4] 3877         CALL AT 
      00170F CD 04 D9         [ 4] 3878         CALL DUPP 
      001712 CD 03 E7         [ 4] 3879         call QBRAN
      001715 17 26                 3880         .word 1$
      001717 CD 04 CF         [ 4] 3881         call DROP  
      00171A CD 06 35         [ 4] 3882         call CPP 
      00171D CD 04 32         [ 4] 3883         call AT 
      001720 CD 0B 28         [ 4] 3884         call HERE
      001723 CD 07 4D         [ 4] 3885         call SUBB 
      001726 CD 06 6A         [ 4] 3886 1$:     call OFFSET 
      001729 CC 04 1B         [ 2] 3887         jp STORE  
                                   3888 
                                   3889 ;       :       ( -- ; <string> )
                                   3890 ;       Start a new colon definition
                                   3891 ;       using next word as its name.
      00172C 17 00                 3892         .word      LINK
                           00172E  3893 LINK = . 
      00172E 01                    3894         .byte      1
      00172F 3A                    3895         .ascii     ":"
      001730                       3896 COLON:
      001730 CD 17 09         [ 4] 3897         call INITOFS       
      001733 CD 10 B2         [ 4] 3898         CALL   TOKEN
      001736 CD 15 EB         [ 4] 3899         CALL   SNAME
      001739 CC 16 E0         [ 2] 3900         JP     RBRAC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3901 
                                   3902 ;       I:  ( -- )
                                   3903 ;       Start interrupt service routine definition
                                   3904 ;       those definition have no name.
      00173C 17 2E                 3905         .word LINK
                           00173E  3906         LINK=.
      00173E 02                    3907         .byte 2 
      00173F 49 3A                 3908         .ascii "I:" 
      001741                       3909 ICOLON:
      001741 CD 17 09         [ 4] 3910         call INITOFS 
      001744 CC 16 E0         [ 2] 3911         jp RBRAC  
                                   3912 
                                   3913 ;       IMMEDIATE       ( -- )
                                   3914 ;       Make last compiled word
                                   3915 ;       an immediate word.
      001747 17 3E                 3916         .word      LINK
                           001749  3917 LINK = . 
      001749 09                    3918         .byte      9
      00174A 49 4D 4D 45 44 49 41  3919         .ascii     "IMMEDIATE"
             54 45
      001753                       3920 IMMED:
      001753 CD 03 B4         [ 4] 3921         CALL     DOLIT
      001756 80 00                 3922         .word     0x8000	;  IMEDD*256
      001758 CD 06 45         [ 4] 3923         CALL     LAST
      00175B CD 04 32         [ 4] 3924         CALL     AT
      00175E CD 04 32         [ 4] 3925         CALL     AT
      001761 CD 05 39         [ 4] 3926         CALL     ORR
      001764 CD 06 45         [ 4] 3927         CALL     LAST
      001767 CD 04 32         [ 4] 3928         CALL     AT
      00176A CC 04 1B         [ 2] 3929         JP     STORE
                                   3930 
                                   3931 ;; Defining words
                                   3932 
                                   3933 ;       CREATE  ( -- ; <string> )
                                   3934 ;       Compile a new array
                                   3935 ;       without allocating space.
      00176D 17 49                 3936         .word      LINK
                           00176F  3937 LINK = . 
      00176F 06                    3938         .byte      6
      001770 43 52 45 41 54 45     3939         .ascii     "CREATE"
      001776                       3940 CREAT:
      001776 CD 10 B2         [ 4] 3941         CALL     TOKEN
      001779 CD 15 EB         [ 4] 3942         CALL     SNAME
      00177C CD 16 6C         [ 4] 3943         CALL     OVERT        
      00177F CD 14 3D         [ 4] 3944         CALL     COMPI 
      001782 05 86                 3945         .word DOVAR 
      001784 81               [ 4] 3946         RET
                                   3947 
                                   3948 ;       VARIABLE        ( -- ; <string> )
                                   3949 ;       Compile a new variable
                                   3950 ;       initialized to 0.
      001785 17 6F                 3951         .word      LINK
                           001787  3952 LINK = . 
      001787 08                    3953         .byte      8
      001788 56 41 52 49 41 42 4C  3954         .ascii     "VARIABLE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



             45
      001790                       3955 VARIA:
                                   3956 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001790 CD 0B 28         [ 4] 3957         CALL HERE
      001793 CD 04 D9         [ 4] 3958         CALL DUPP 
      001796 CD 09 A3         [ 4] 3959         CALL CELLP
      001799 CD 06 27         [ 4] 3960         CALL VPP 
      00179C CD 04 1B         [ 4] 3961         CALL STORE
      00179F CD 17 76         [ 4] 3962         CALL CREAT
      0017A2 CD 04 D9         [ 4] 3963         CALL DUPP
      0017A5 CD 13 F8         [ 4] 3964         CALL COMMA
      0017A8 CD 0A 3A         [ 4] 3965         CALL ZERO
      0017AB CD 04 E9         [ 4] 3966         call SWAPP 
      0017AE CD 04 1B         [ 4] 3967         CALL STORE
      0017B1 CD 1F B5         [ 4] 3968         CALL FMOVE ; move definition to FLASH
      0017B4 CD 06 83         [ 4] 3969         CALL QDUP 
      0017B7 CD 03 E7         [ 4] 3970         CALL QBRAN 
      0017BA 17 C3                 3971         .word SET_RAMLAST   
      0017BC CD 1B 7D         [ 4] 3972         call UPDATVP  ; don't update if variable kept in RAM.
      0017BF CD 20 3D         [ 4] 3973         CALL UPDATPTR
      0017C2 81               [ 4] 3974         RET         
      0017C3                       3975 SET_RAMLAST: 
      0017C3 CD 06 45         [ 4] 3976         CALL LAST 
      0017C6 CD 04 32         [ 4] 3977         CALL AT 
      0017C9 CD 06 58         [ 4] 3978         CALL RAMLAST 
      0017CC CC 04 1B         [ 2] 3979         jp STORE  
                                   3980 
                                   3981 
                                   3982 ;       CONSTANT  ( n -- ; <string> )
                                   3983 ;       Compile a new constant 
                                   3984 ;       n CONSTANT name 
      0017CF 17 87                 3985         .word LINK 
                           0017D1  3986         LINK=. 
      0017D1 08                    3987         .byte 8 
      0017D2 43 4F 4E 53 54 41 4E  3988         .ascii "CONSTANT" 
             54
      0017DA                       3989 CONSTANT:          
      0017DA CD 10 B2         [ 4] 3990         CALL TOKEN
      0017DD CD 15 EB         [ 4] 3991         CALL SNAME 
      0017E0 CD 16 6C         [ 4] 3992         CALL OVERT 
      0017E3 CD 14 3D         [ 4] 3993         CALL COMPI 
      0017E6 18 04                 3994         .word DOCONST
      0017E8 CD 13 F8         [ 4] 3995         CALL COMMA 
      0017EB CD 1F B5         [ 4] 3996         CALL FMOVE
      0017EE CD 06 83         [ 4] 3997         CALL QDUP 
      0017F1 CD 03 E7         [ 4] 3998         CALL QBRAN 
      0017F4 17 C3                 3999         .word SET_RAMLAST  
      0017F6 CD 20 3D         [ 4] 4000         CALL UPDATPTR  
      0017F9 81               [ 4] 4001 1$:     RET          
                                   4002 
                                   4003 ; CONSTANT runtime semantic 
                                   4004 ; doCONST  ( -- n )
      0017FA 17 D1                 4005         .word LINK 
                           0017FC  4006         LINK=.
      0017FC 07                    4007         .byte 7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0017FD 44 4F 43 4F 4E 53 54  4008         .ascii "DOCONST"
      001804                       4009 DOCONST:
      001804 1D 00 02         [ 2] 4010         subw x,#CELLL
      001807 90 85            [ 2] 4011         popw y 
      001809 90 FE            [ 2] 4012         ldw y,(y) 
      00180B FF               [ 2] 4013         ldw (x),y 
      00180C 81               [ 4] 4014         ret 
                                   4015 
                                   4016 
                                   4017 ;; Tools
                                   4018 
                                   4019 ;       _TYPE   ( b u -- )
                                   4020 ;       Display a string. Filter
                                   4021 ;       non-printing characters.
      00180D 17 FC                 4022         .word      LINK
                           00180F  4023 LINK = . 
      00180F 05                    4024         .byte      5
      001810 5F 54 59 50 45        4025         .ascii     "_TYPE"
      001815                       4026 UTYPE:
      001815 CD 04 A2         [ 4] 4027         CALL     TOR     ;start count down loop
      001818 20 0F            [ 2] 4028         JRA     UTYP2   ;skip first pass
      00181A CD 04 D9         [ 4] 4029 UTYP1:  CALL     DUPP
      00181D CD 04 50         [ 4] 4030         CALL     CAT
      001820 CD 0A 64         [ 4] 4031         CALL     TCHAR
      001823 CD 03 9E         [ 4] 4032         CALL     EMIT    ;display only printable
      001826 CD 09 CE         [ 4] 4033         CALL     ONEP    ;increment address
      001829 CD 03 C8         [ 4] 4034 UTYP2:  CALL     DONXT
      00182C 18 1A                 4035         .word      UTYP1   ;loop till done
      00182E CC 04 CF         [ 2] 4036         JP     DROP
                                   4037 
                                   4038 ;       dm+     ( a u -- a )
                                   4039 ;       Dump u bytes from ,
                                   4040 ;       leaving a+u on  stack.
      001831 18 0F                 4041         .word      LINK
                           001833  4042 LINK = . 
      001833 03                    4043         .byte      3
      001834 64 6D 2B              4044         .ascii     "dm+"
      001837                       4045 DUMPP:
      001837 CD 05 03         [ 4] 4046         CALL     OVER
      00183A CD 03 B4         [ 4] 4047         CALL     DOLIT
      00183D 00 04                 4048         .word      4
      00183F CD 0F 08         [ 4] 4049         CALL     UDOTR   ;display address
      001842 CD 0E 58         [ 4] 4050         CALL     SPACE
      001845 CD 04 A2         [ 4] 4051         CALL     TOR     ;start count down loop
      001848 20 11            [ 2] 4052         JRA     PDUM2   ;skip first pass
      00184A CD 04 D9         [ 4] 4053 PDUM1:  CALL     DUPP
      00184D CD 04 50         [ 4] 4054         CALL     CAT
      001850 CD 03 B4         [ 4] 4055         CALL     DOLIT
      001853 00 03                 4056         .word      3
      001855 CD 0F 08         [ 4] 4057         CALL     UDOTR   ;display numeric data
      001858 CD 09 CE         [ 4] 4058         CALL     ONEP    ;increment address
      00185B CD 03 C8         [ 4] 4059 PDUM2:  CALL     DONXT
      00185E 18 4A                 4060         .word      PDUM1   ;loop till done
      001860 81               [ 4] 4061         RET
                                   4062 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4063 ;       DUMP    ( a u -- )
                                   4064 ;       Dump u bytes from a,
                                   4065 ;       in a formatted manner.
      001861 18 33                 4066         .word      LINK
                           001863  4067 LINK = . 
      001863 04                    4068         .byte      4
      001864 44 55 4D 50           4069         .ascii     "DUMP"
      001868                       4070 DUMP:
      001868 CD 05 96         [ 4] 4071         CALL     BASE
      00186B CD 04 32         [ 4] 4072         CALL     AT
      00186E CD 04 A2         [ 4] 4073         CALL     TOR
      001871 CD 0C E0         [ 4] 4074         CALL     HEX     ;save radix, set hex
      001874 CD 03 B4         [ 4] 4075         CALL     DOLIT
      001877 00 10                 4076         .word      16
      001879 CD 08 F4         [ 4] 4077         CALL     SLASH   ;change count to lines
      00187C CD 04 A2         [ 4] 4078         CALL     TOR     ;start count down loop
      00187F CD 0E A0         [ 4] 4079 DUMP1:  CALL     CR
      001882 CD 03 B4         [ 4] 4080         CALL     DOLIT
      001885 00 10                 4081         .word      16
      001887 CD 06 BF         [ 4] 4082         CALL     DDUP
      00188A CD 18 37         [ 4] 4083         CALL     DUMPP   ;display numeric
      00188D CD 06 94         [ 4] 4084         CALL     ROT
      001890 CD 06 94         [ 4] 4085         CALL     ROT
      001893 CD 0E 58         [ 4] 4086         CALL     SPACE
      001896 CD 0E 58         [ 4] 4087         CALL     SPACE
      001899 CD 18 15         [ 4] 4088         CALL     UTYPE   ;display printable characters
      00189C CD 03 C8         [ 4] 4089         CALL     DONXT
      00189F 18 7F                 4090         .word      DUMP1   ;loop till done
      0018A1 CD 04 CF         [ 4] 4091 DUMP3:  CALL     DROP
      0018A4 CD 04 83         [ 4] 4092         CALL     RFROM
      0018A7 CD 05 96         [ 4] 4093         CALL     BASE
      0018AA CC 04 1B         [ 2] 4094         JP     STORE   ;restore radix
                                   4095 
                                   4096 ;       .S      ( ... -- ... )
                                   4097 ;        Display  contents of stack.
      0018AD 18 63                 4098         .word      LINK
                           0018AF  4099 LINK = . 
      0018AF 02                    4100         .byte      2
      0018B0 2E 53                 4101         .ascii     ".S"
      0018B2                       4102 DOTS:
      0018B2 CD 0E A0         [ 4] 4103         CALL     CR
      0018B5 CD 0A 7C         [ 4] 4104         CALL     DEPTH   ;stack depth
      0018B8 CD 04 A2         [ 4] 4105         CALL     TOR     ;start count down loop
      0018BB 20 09            [ 2] 4106         JRA     DOTS2   ;skip first pass
      0018BD CD 04 96         [ 4] 4107 DOTS1:  CALL     RAT
      0018C0 CD 0A 93         [ 4] 4108 	CALL     PICK
      0018C3 CD 0F 3B         [ 4] 4109         CALL     DOT     ;index stack, display contents
      0018C6 CD 03 C8         [ 4] 4110 DOTS2:  CALL     DONXT
      0018C9 18 BD                 4111         .word      DOTS1   ;loop till done
      0018CB CD 0E DF         [ 4] 4112         CALL     DOTQP
      0018CE 05                    4113         .byte      5
      0018CF 20 3C 73 70 20        4114         .ascii     " <sp "
      0018D4 81               [ 4] 4115         RET
                                   4116 
                                   4117 ;       >NAME   ( ca -- na | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4118 ;       Convert code address
                                   4119 ;       to a name address.
      0018D5 18 AF                 4120         .word      LINK
                           0018D7  4121 LINK = . 
      0018D7 05                    4122         .byte      5
      0018D8 3E 4E 41 4D 45        4123         .ascii     ">NAME"
      0018DD                       4124 TNAME:
      0018DD CD 06 19         [ 4] 4125         CALL     CNTXT   ;vocabulary link
      0018E0 CD 04 32         [ 4] 4126 TNAM2:  CALL     AT
      0018E3 CD 04 D9         [ 4] 4127         CALL     DUPP    ;?last word in a vocabulary
      0018E6 CD 03 E7         [ 4] 4128         CALL     QBRAN
      0018E9 19 04                 4129         .word      TNAM4
      0018EB CD 06 BF         [ 4] 4130         CALL     DDUP
      0018EE CD 10 C0         [ 4] 4131         CALL     NAMET
      0018F1 CD 05 4E         [ 4] 4132         CALL     XORR    ;compare
      0018F4 CD 03 E7         [ 4] 4133         CALL     QBRAN
      0018F7 18 FE                 4134         .word      TNAM3
      0018F9 CD 09 B2         [ 4] 4135         CALL     CELLM   ;continue with next word
      0018FC 20 E2            [ 2] 4136         JRA     TNAM2
      0018FE CD 04 E9         [ 4] 4137 TNAM3:  CALL     SWAPP
      001901 CC 04 CF         [ 2] 4138         JP     DROP
      001904 CD 06 B4         [ 4] 4139 TNAM4:  CALL     DDROP
      001907 CC 0A 3A         [ 2] 4140         JP     ZERO
                                   4141 
                                   4142 ;       .ID     ( na -- )
                                   4143 ;        Display  name at address.
      00190A 18 D7                 4144         .word      LINK
                           00190C  4145 LINK = . 
      00190C 03                    4146         .byte      3
      00190D 2E 49 44              4147         .ascii     ".ID"
      001910                       4148 DOTID:
      001910 CD 06 83         [ 4] 4149         CALL     QDUP    ;if zero no name
      001913 CD 03 E7         [ 4] 4150         CALL     QBRAN
      001916 19 26                 4151         .word      DOTI1
      001918 CD 0B 11         [ 4] 4152         CALL     COUNT
      00191B CD 03 B4         [ 4] 4153         CALL     DOLIT
      00191E 00 1F                 4154         .word      0x1F
      001920 CD 05 25         [ 4] 4155         CALL     ANDD    ;mask lexicon bits
      001923 CC 18 15         [ 2] 4156         JP     UTYPE
      001926 CD 0E DF         [ 4] 4157 DOTI1:  CALL     DOTQP
      001929 09                    4158         .byte      9
      00192A 20 6E 6F 4E 61 6D 65  4159         .ascii     " noName"
      001931 81               [ 4] 4160         RET
                                   4161 
                           000000  4162 WANT_SEE=0
                           000000  4163 .if WANT_SEE 
                                   4164 ;       SEE     ( -- ; <string> )
                                   4165 ;       A simple decompiler.
                                   4166 ;       Updated for byte machines.
                                   4167         .word      LINK
                                   4168 LINK = . 
                                   4169         .byte      3
                                   4170         .ascii     "SEE"
                                   4171 SEE:
                                   4172         CALL     TICK    ;starting address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173         CALL     CR
                                   4174         CALL     ONEM
                                   4175 SEE1:   CALL     ONEP
                                   4176         CALL     DUPP
                                   4177         CALL     AT
                                   4178         CALL     DUPP
                                   4179         CALL     QBRAN
                                   4180         .word    SEE2
                                   4181         CALL     TNAME   ;?is it a name
                                   4182 SEE2:   CALL     QDUP    ;name address or zero
                                   4183         CALL     QBRAN
                                   4184         .word    SEE3
                                   4185         CALL     SPACE
                                   4186         CALL     DOTID   ;display name
                                   4187         CALL     ONEP
                                   4188         JRA      SEE4
                                   4189 SEE3:   CALL     DUPP
                                   4190         CALL     CAT
                                   4191         CALL     UDOT    ;display number
                                   4192 SEE4:   CALL     NUFQ    ;user control
                                   4193         CALL     QBRAN
                                   4194         .word    SEE1
                                   4195         JP     DROP
                                   4196 .endif ; WANT_SEE 
                                   4197 
                                   4198 ;       WORDS   ( -- )
                                   4199 ;       Display names in vocabulary.
      001932 19 0C                 4200         .word      LINK
                           001934  4201 LINK = . 
      001934 05                    4202         .byte      5
      001935 57 4F 52 44 53        4203         .ascii     "WORDS"
      00193A                       4204 WORDS:
      00193A CD 0E A0         [ 4] 4205         CALL     CR
      00193D CD 06 19         [ 4] 4206         CALL     CNTXT   ;only in context
      001940 CD 04 32         [ 4] 4207 WORS1:  CALL     AT
      001943 CD 06 83         [ 4] 4208         CALL     QDUP    ;?at end of list
      001946 CD 03 E7         [ 4] 4209         CALL     QBRAN
      001949 19 5C                 4210         .word      WORS2
      00194B CD 04 D9         [ 4] 4211         CALL     DUPP
      00194E CD 0E 58         [ 4] 4212         CALL     SPACE
      001951 CD 19 10         [ 4] 4213         CALL     DOTID   ;display a name
      001954 CD 09 B2         [ 4] 4214         CALL     CELLM
      001957 CD 03 FE         [ 4] 4215         CALL     BRAN
      00195A 19 40                 4216         .word      WORS1
      00195C 81               [ 4] 4217 WORS2:  RET
                                   4218 
                                   4219         
                                   4220 ;; Hardware reset
                                   4221 
                                   4222 ;       hi      ( -- )
                                   4223 ;       Display sign-on message.
      00195D 19 34                 4224         .word      LINK
                           00195F  4225 LINK = . 
      00195F 02                    4226         .byte      2
      001960 68 69                 4227         .ascii     "hi"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001962                       4228 HI:
      001962 CD 0E A0         [ 4] 4229         CALL     CR
      001965 CD 0E DF         [ 4] 4230         CALL     DOTQP   ;initialize I/O
      001968 0F                    4231         .byte      15
      001969 73 74 6D 38 65 46 6F  4232         .ascii     "stm8eForth v"
             72 74 68 20 76
      001975 33                    4233 	.byte      VER+'0'
      001976 2E                    4234         .byte      '.' 
      001977 30                    4235 	.byte      EXT+'0' ;version
      001978 CD 0E DF         [ 4] 4236         CALL    DOTQP 
      00197B 14                    4237         .byte 20
      00197C 20 66 6F 72 20 53 54  4238         .ascii  " for STM8S-DISCOVERY"
             4D 38 53 2D 44 49 53
             43 4F 56 45 52 59
      001990 CC 0E A0         [ 2] 4239         JP     CR
                                   4240 
                           000000  4241 WANT_DEBUG=0
                           000000  4242 .if WANT_DEBUG 
                                   4243 ;       DEBUG      ( -- )
                                   4244 ;       Display sign-on message.
                                   4245 ;        .word      LINK
                                   4246 LINK = . 
                                   4247         .byte      5
                                   4248         .ascii     "DEBUG"
                                   4249 DEBUG:
                                   4250 	CALL DOLIT
                                   4251 	.word 0x65
                                   4252 	CALL EMIT
                                   4253 	CALL DOLIT
                                   4254 	.word 0
                                   4255  	CALL ZLESS 
                                   4256 	CALL DOLIT
                                   4257 	.word 0xFFFE
                                   4258 	CALL ZLESS 
                                   4259 	CALL UPLUS 
                                   4260  	CALL DROP 
                                   4261 	CALL DOLIT
                                   4262 	.word 3
                                   4263 	CALL UPLUS 
                                   4264 	CALL UPLUS 
                                   4265  	CALL DROP
                                   4266 	CALL DOLIT
                                   4267 	.word 0x43
                                   4268 	CALL UPLUS 
                                   4269  	CALL DROP
                                   4270 	CALL EMIT
                                   4271 	CALL DOLIT
                                   4272 	.word 0x4F
                                   4273 	CALL DOLIT
                                   4274 	.word 0x6F
                                   4275  	CALL XORR
                                   4276 	CALL DOLIT
                                   4277 	.word 0xF0
                                   4278  	CALL ANDD
                                   4279 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4280 	.word 0x4F
                                   4281  	CALL ORR
                                   4282 	CALL EMIT
                                   4283 	CALL DOLIT
                                   4284 	.word 8
                                   4285 	CALL DOLIT
                                   4286 	.word 6
                                   4287  	CALL SWAPP
                                   4288 	CALL OVER
                                   4289 	CALL XORR
                                   4290 	CALL DOLIT
                                   4291 	.word 3
                                   4292 	CALL ANDD 
                                   4293 	CALL ANDD
                                   4294 	CALL DOLIT
                                   4295 	.word 0x70
                                   4296 	CALL UPLUS 
                                   4297 	CALL DROP
                                   4298 	CALL EMIT
                                   4299 	CALL DOLIT
                                   4300 	.word 0
                                   4301 	CALL QBRAN
                                   4302 	.word DEBUG1
                                   4303 	CALL DOLIT
                                   4304 	.word 0x3F
                                   4305 DEBUG1:
                                   4306 	CALL DOLIT
                                   4307 	.word 0xFFFF
                                   4308 	CALL QBRAN
                                   4309 	.word DEBUG2
                                   4310 	CALL DOLIT
                                   4311 	.word 0x74
                                   4312 	CALL BRAN
                                   4313 	.word DEBUG3
                                   4314 DEBUG2:
                                   4315 	CALL DOLIT
                                   4316 	.word 0x21
                                   4317 DEBUG3:
                                   4318 	CALL EMIT
                                   4319 	CALL DOLIT
                                   4320 	.word 0x68
                                   4321 	CALL DOLIT
                                   4322 	.word 0x80
                                   4323 	CALL STORE
                                   4324 	CALL DOLIT
                                   4325 	.word 0x80
                                   4326 	CALL AT
                                   4327 	CALL EMIT
                                   4328 	CALL DOLIT
                                   4329 	.word 0x4D
                                   4330 	CALL TOR
                                   4331 	CALL RAT
                                   4332 	CALL RFROM
                                   4333 	CALL ANDD
                                   4334 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4335 	CALL DOLIT
                                   4336 	.word 0x61
                                   4337 	CALL DOLIT
                                   4338 	.word 0xA
                                   4339 	CALL TOR
                                   4340 DEBUG4:
                                   4341 	CALL DOLIT
                                   4342 	.word 1
                                   4343 	CALL UPLUS 
                                   4344 	CALL DROP
                                   4345 	CALL DONXT
                                   4346 	.word DEBUG4
                                   4347 	CALL EMIT
                                   4348 	CALL DOLIT
                                   4349 	.word 0x656D
                                   4350 	CALL DOLIT
                                   4351 	.word 0x100
                                   4352 	CALL UMSTA
                                   4353 	CALL SWAPP
                                   4354 	CALL DOLIT
                                   4355 	.word 0x100
                                   4356 	CALL UMSTA
                                   4357 	CALL SWAPP 
                                   4358 	CALL DROP
                                   4359 	CALL EMIT
                                   4360 	CALL EMIT
                                   4361 	CALL DOLIT
                                   4362 	.word 0x2043
                                   4363 	CALL DOLIT
                                   4364 	.word 0
                                   4365 	CALL DOLIT
                                   4366 	.word 0x100
                                   4367 	CALL UMMOD
                                   4368 	CALL EMIT
                                   4369 	CALL EMIT
                                   4370 	;JP ORIG
                                   4371 	RET
                                   4372 .endif ; WANT_DEBUG 
                                   4373 
                                   4374 
                                   4375 ;       'BOOT   ( -- a )
                                   4376 ;       The application startup vector.
      001993 19 5F                 4377         .word      LINK
                           001995  4378 LINK = . 
      001995 05                    4379         .byte      5
      001996 27 42 4F 4F 54        4380         .ascii     "'BOOT"
      00199B                       4381 TBOOT:
      00199B CD 05 86         [ 4] 4382         CALL     DOVAR
      00199E 40 02                 4383         .word    APP_RUN      ;application to boot
                                   4384 
                                   4385 ;       COLD    ( -- )
                                   4386 ;       The hilevel cold start s=ence.
      0019A0 19 95                 4387         .word      LINK
                           0019A2  4388         LINK = . 
      0019A2 04                    4389         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0019A3 43 4F 4C 44           4390         .ascii     "COLD"
      0019A7                       4391 COLD:
                           000000  4392 .if WANT_DEBUG
                                   4393         CALL DEBUG
                                   4394 .endif ; WANT_DEBUG
      0019A7 CD 03 B4         [ 4] 4395 COLD1:  CALL     DOLIT
      0019AA 00 2F                 4396         .word      UZERO
      0019AC CD 03 B4         [ 4] 4397 	CALL     DOLIT
      0019AF 00 06                 4398         .word      UPP
      0019B1 CD 03 B4         [ 4] 4399         CALL     DOLIT
      0019B4 00 1A                 4400 	.word      UEND-UZERO
      0019B6 CD 0B 75         [ 4] 4401         CALL     CMOVE   ;initialize user area
                                   4402 
                                   4403 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019B9 90 CE 40 02      [ 2] 4404         ldw y,APP_RUN 
      0019BD 26 0B            [ 1] 4405         jrne 0$
      0019BF 1D 00 02         [ 2] 4406         subw x,#CELLL 
      0019C2 90 AE 19 62      [ 2] 4407         ldw y,#HI  
      0019C6 FF               [ 2] 4408         ldw (x),y
      0019C7 CD 1B 55         [ 4] 4409         call UPDATRUN 
      0019CA                       4410 0$:        
                                   4411 ; update LAST with APP_LAST 
                                   4412 ; if APP_LAST > LAST else do the opposite
      0019CA 90 CE 40 00      [ 2] 4413         ldw y,APP_LAST 
      0019CE 90 B3 1A         [ 2] 4414         cpw y,ULAST 
      0019D1 22 05            [ 1] 4415         jrugt 1$ 
                                   4416 ; save LAST at APP_LAST  
      0019D3 CD 1B 3D         [ 4] 4417         call UPDATLAST 
      0019D6 20 06            [ 2] 4418         jra 2$
      0019D8                       4419 1$: ; update LAST with APP_LAST 
      0019D8 90 BF 1A         [ 2] 4420         ldw ULAST,y
      0019DB 90 BF 14         [ 2] 4421         ldw UCNTXT,y
      0019DE                       4422 2$:  
                                   4423 ; update APP_CP if < app_space 
      0019DE 90 CE 40 04      [ 2] 4424         ldw y,APP_CP  
      0019E2 90 B3 18         [ 2] 4425         cpw y,UCP   
      0019E5 24 06            [ 1] 4426         jruge 3$ 
      0019E7 CD 1B 66         [ 4] 4427         call UPDATCP
      0019EA 90 BE 18         [ 2] 4428         ldw y,UCP   
      0019ED                       4429 3$:
      0019ED 90 BF 18         [ 2] 4430         ldw UCP,y                 
                                   4431 ; update UVP with APP_VP  
                                   4432 ; if APP_VP>UVP else do the opposite 
      0019F0 90 CE 40 06      [ 2] 4433         ldw y,APP_VP 
      0019F4 90 B3 16         [ 2] 4434         cpw y,UVP 
      0019F7 22 05            [ 1] 4435         jrugt 4$
      0019F9 CD 1B 7D         [ 4] 4436         call UPDATVP 
      0019FC 20 03            [ 2] 4437         jra 6$
      0019FE                       4438 4$: ; update UVP with APP_VP 
      0019FE 90 BF 16         [ 2] 4439         ldw UVP,y 
      001A01                       4440 6$:      
      001A01 CD 13 A3         [ 4] 4441         CALL     PRESE   ;initialize data stack and TIB
      001A04 CD 19 9B         [ 4] 4442         CALL     TBOOT
      001A07 CD 0B 5E         [ 4] 4443         CALL     ATEXE   ;application boot
      001A0A CD 16 6C         [ 4] 4444         CALL     OVERT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001A0D CC 13 C0         [ 2] 4445         JP     QUIT    ;start interpretation
                                   4446 
                           000001  4447 WANT_MATH_CONST = 1 
                           000001  4448 .if WANT_MATH_CONST 
                                   4449         ; irrational constants 
                                   4450         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4451         .include "../const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      001A10 19 A2                   31         .word LINK 
                           001A12    32         LINK=.
      001A12 02                      33         .byte 2
      001A13 50 49                   34         .ascii "PI" 
      001A15                         35 PII:
      001A15 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      001A18 90 AE 01 63      [ 2]   37         ldw y,#355 
      001A1C EF 02            [ 2]   38         ldw (2,x),y 
      001A1E 90 AE 00 71      [ 2]   39         ldw y,#113 
      001A22 FF               [ 2]   40         ldw (x),y 
      001A23 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      001A24 1A 12                   48         .word LINK 
                           001A26    49         LINK=.
      001A26 05                      50         .byte 5 
      001A27 53 51 52 54 32          51         .ascii "SQRT2" 
      001A2C                         52 SQRT2:
      001A2C 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      001A2F 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A33 EF 02            [ 2]   55         ldw (2,x),y 
      001A35 90 AE 36 24      [ 2]   56         ldw y,#13860 
      001A39 FF               [ 2]   57         ldw (x),y 
      001A3A 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      001A3B 1A 26                   63         .word LINK 
                           001A3D    64         LINK=.
      001A3D 05                      65         .byte 5
      001A3E 53 51 52 54 33          66         .ascii "SQRT3" 
      001A43                         67 SQRT3: 
      001A43 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001A46 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001A4A EF 02            [ 2]   70     ldw (2,x),y 
      001A4C 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      001A50 FF               [ 2]   72     ldw (x),y 
      001A51 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      001A52 1A 3D                   78         .word LINK 
                           001A54    79         LINK=.
      001A54 01                      80         .byte 1
      001A55 45                      81         .ascii "E" 
      001A56                         82 ENEPER:
      001A56 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001A59 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001A5D EF 02            [ 2]   85     ldw (2,x),y 
      001A5F 90 AE 29 32      [ 2]   86     ldw y,#10546 
      001A63 FF               [ 2]   87     ldw (x),y 
      001A64 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001A65 1A 54                   92         .word LINK 
                           001A67    93         LINK=.
      001A67 06                      94         .byte 6 
      001A68 53 51 52 54 31 30       95         .ascii "SQRT10" 
      001A6E                         96 SQRT10:
      001A6E 1D 00 04         [ 2]   97     subw x,#2*CELLL
      001A71 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001A75 EF 02            [ 2]   99     ldw (2,x),y 
      001A77 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001A7B FF               [ 2]  101     ldw (x),y 
      001A7C 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001A7D 1A 67                  107         .word LINK 
                           001A7F   108         LINK=. 
      001A7F 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001A80 31 32 52 54 32         110         .ascii "12RT2"
      001A85                        111 RT12_2:
      001A85 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A88 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A8C EF 02            [ 2]  114     ldw (2,x),y 
      001A8E 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A92 FF               [ 2]  116     ldw (x),y 
      001A93 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A94 1A 7F                  122         .word LINK 
                           001A96   123         LINK=.
      001A96 05                     124         .byte 5 
      001A97 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001A9C                        126 LOG2S:
      001A9C 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A9F 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001AA3 EF 02            [ 2]  129     ldw (2,x),y 
      001AA5 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001AA9 FF               [ 2]  131     ldw (x),y 
      001AAA 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001AAB 1A 96                  137         .word LINK 
                           001AAD   138         LINK=.
      001AAD 04                     139         .byte 4 
      001AAE 4C 4E 32 53            140         .ascii "LN2S" 
      001AB2                        141 LN2S: 
      001AB2 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001AB5 90 AE 01 E5      [ 2]  143     ldw y,#485
      001AB9 EF 02            [ 2]  144     ldw (2,x),y 
      001ABB 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001ABF FF               [ 2]  146     ldw (x),y 
      001AC0 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4452 .endif ; WANT_MATH_CONST
                                   4453 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                   4454         .include "flash_disco.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize PTR16 
                                     28 ; PTR!  ( a -- )
                                     29 ;---------------------------------
      001AC1 1A AD                   30     .word LINK 
                           001AC3    31     LINK=.
      001AC3 04                      32     .byte 4 
      001AC4 50 54 52 21             33     .ascii "PTR!"
      001AC8                         34 PSTO:
      001AC8 90 93            [ 1]   35     ldw y,x
      001ACA 90 FE            [ 2]   36     ldw y,(y)
      001ACC 90 BF 32         [ 2]   37     ldw PTR16,y  
      001ACF 1C 00 02         [ 2]   38     addw x,#CELLL 
      001AD2 81               [ 4]   39     ret 
                                     40 
                                     41 ;-----------------------------------
                                     42 ; return EEPROM base address 
                                     43 ;  EEPROM  ( -- a )
                                     44 ;-----------------------------------
      001AD3 1A C3                   45     .word LINK 
                           001AD5    46 LINK=.
      001AD5 06                      47     .byte 6 
      001AD6 45 45 50 52 4F 4D       48     .ascii "EEPROM"
      001ADC                         49 EEPROM: 
      001ADC 90 AE 40 00      [ 2]   50     ldw y,#EEPROM_BASE
      001AE0 1D 00 02         [ 2]   51     subw x,#CELLL 
      001AE3 FF               [ 2]   52     ldw (x),y 
      001AE4 81               [ 4]   53     ret
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                     55 ;---------------------------------
                                     56 ; return APP_LAST address 
                                     57 ; EEP-LAST ( -- a )
                                     58 ;---------------------------------
      001AE5 1A D5                   59 	.word LINK 
                           001AE7    60 	LINK=.
      001AE7 08                      61 	.byte 8 
      001AE8 45 45 50 2D 4C 41 53    62 	.ascii "EEP-LAST"
             54
      001AF0                         63 EEPLAST:
      001AF0 1D 00 02         [ 2]   64 	subw x,#CELLL 
      001AF3 90 AE 40 00      [ 2]   65 	ldw y,#APP_LAST 
      001AF7 FF               [ 2]   66 	ldw (x),y 
      001AF8 81               [ 4]   67 	ret 
                                     68 
                                     69 ;----------------------------------
                                     70 ; return APP_RUN address 	
                                     71 ; EEP-RUN ( -- a )
                                     72 ;-----------------------------------
      001AF9 1A E7                   73 	.word LINK 
                           001AFB    74 	LINK=.
      001AFB 07                      75 	.byte 7
      001AFC 45 45 50 2D 52 55 4E    76 	.ascii "EEP-RUN"
      001B03                         77 EEPRUN:
      001B03 1D 00 02         [ 2]   78 	subw x,#CELLL 
      001B06 90 AE 40 02      [ 2]   79 	ldw y,#APP_RUN 
      001B0A FF               [ 2]   80 	ldw (x),y 
      001B0B 81               [ 4]   81 	ret 
                                     82 
                                     83 ;------------------------------------
                                     84 ; return APP_CP address  
                                     85 ; EEP-CP ( -- a )
                                     86 ;------------------------------------
      001B0C 1A FB                   87 	.word LINK
                           001B0E    88 	LINK=.
      001B0E 06                      89 	.byte 6 
      001B0F 45 45 50 2D 43 50       90 	.ascii "EEP-CP"
      001B15                         91 EEPCP:
      001B15 1D 00 02         [ 2]   92 	subw x,#CELLL 
      001B18 90 AE 40 04      [ 2]   93 	ldw y,#APP_CP  
      001B1C FF               [ 2]   94 	ldw (x),y 
      001B1D 81               [ 4]   95 	ret 
                                     96 
                                     97 ;------------------------------------
                                     98 ; return APP_VP address 
                                     99 ; EEP-VP ( -- a )
                                    100 ;-------------------------------------
      001B1E 1B 0E                  101 	.word LINK
                           001B20   102 	LINK=.
      001B20 06                     103 	.byte 6
      001B21 45 45 50 2D 56 50      104 	.ascii "EEP-VP"
      001B27                        105 EEPVP:
      001B27 1D 00 02         [ 2]  106 	subw x,#CELLL 
      001B2A 90 AE 40 06      [ 2]  107 	ldw y,#APP_VP  
      001B2E FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B2F 81               [ 4]  109 	ret 
                                    110 
                                    111 ;----------------------------------
                                    112 ; update APP_LAST with LAST 
                                    113 ; UPDAT-LAST ( -- )
                                    114 ;----------------------------------
      001B30 1B 20                  115 	.word LINK 
                           001B32   116 	LINK=.
      001B32 0A                     117 	.byte 10
      001B33 55 50 44 41 54 2D 4C   118 	.ascii "UPDAT-LAST"
             41 53 54
      001B3D                        119 UPDATLAST:
      001B3D CD 06 45         [ 4]  120 	call LAST
      001B40 CD 04 32         [ 4]  121 	call AT  
      001B43 CD 1A F0         [ 4]  122 	call EEPLAST
      001B46 CC 1C A4         [ 2]  123 	jp EE_STORE 
                                    124 
                                    125 ;---------------------------------
                                    126 ; update APP_RUN 
                                    127 ; UPDAT-RUN ( a -- )
                                    128 ;---------------------------------
      001B49 1B 32                  129 	.word LINK
                           001B4B   130 	LINK=.
      001B4B 09                     131 	.byte 9
      001B4C 55 50 44 41 54 2D 52   132 	.ascii "UPDAT-RUN"
             55 4E
      001B55                        133 UPDATRUN:
      001B55 CD 1B 03         [ 4]  134 	call EEPRUN
      001B58 CC 1C A4         [ 2]  135 	jp EE_STORE 
                                    136 	
                                    137 ;---------------------------------
                                    138 ; update APP_CP with CP 
                                    139 ; UPDAT-CP ( -- )
                                    140 ;---------------------------------
      001B5B 1B 4B                  141 	.word LINK 
                           001B5D   142 	LINK=.
      001B5D 08                     143 	.byte 8 
      001B5E 55 50 44 41 54 2D 43   144 	.ascii "UPDAT-CP"
             50
      001B66                        145 UPDATCP:
      001B66 CD 06 35         [ 4]  146 	call CPP 
      001B69 CD 04 32         [ 4]  147 	call AT 
      001B6C CD 1B 15         [ 4]  148 	call EEPCP 
      001B6F CC 1C A4         [ 2]  149 	jp EE_STORE 
                                    150 
                                    151 ;----------------------------------
                                    152 ; update APP_VP with VP 
                                    153 ; UPDAT-VP ( -- )
                                    154 ;----------------------------------
      001B72 1B 5D                  155 	.word LINK
                           001B74   156 	LINK=.
      001B74 08                     157 	.byte 8 
      001B75 55 50 44 41 54 2D 56   158 	.ascii "UPDAT-VP" 
             50
      001B7D                        159 UPDATVP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B7D CD 06 27         [ 4]  160 	call VPP 
      001B80 CD 04 32         [ 4]  161 	call AT
      001B83 CD 1B 27         [ 4]  162 	call EEPVP 
      001B86 CC 1C A4         [ 2]  163 	jp EE_STORE
                                    164 	
                                    165 
                                    166 ;----------------------------------
                                    167 ; unlock EEPROM/OPT for writing/erasing
                                    168 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    169 ;  UNLKEE   ( -- )
                                    170 ;----------------------------------
      001B89 1B 74                  171     .word LINK 
                           001B8B   172 LINK=.
      001B8B 06                     173     .byte 6 
      001B8C 55 4E 4C 4B 45 45      174     .ascii "UNLKEE"
      001B92                        175 unlock_eeprom:
      001B92 35 00 50 5B      [ 1]  176 	mov FLASH_CR2,#0 
      001B96 35 FF 50 5C      [ 1]  177 	mov FLASH_NCR2,#0xFF 
      001B9A 35 AE 50 64      [ 1]  178 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B9E 35 56 50 64      [ 1]  179     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BA2 72 07 50 5F FB   [ 2]  180 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BA7 81               [ 4]  181 	ret
                                    182 
                                    183 ;----------------------------------
                                    184 ; unlock FLASH for writing/erasing
                                    185 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    186 ; UNLKFL  ( -- )
                                    187 ;----------------------------------
      001BA8 1B 8B                  188     .word LINK 
                           001BAA   189 LINK=. 
      001BAA 06                     190     .byte 6 
      001BAB 55 4E 4C 4B 46 4C      191     .ascii "UNLKFL"    
      001BB1                        192 unlock_flash:
      001BB1 35 00 50 5B      [ 1]  193 	mov FLASH_CR2,#0 
      001BB5 35 FF 50 5C      [ 1]  194 	mov FLASH_NCR2,#0xFF 
      001BB9 35 56 50 62      [ 1]  195 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BBD 35 AE 50 62      [ 1]  196 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BC1 72 03 50 5F FB   [ 2]  197 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001BC6 81               [ 4]  198 	ret
                                    199 
                                    200 ;-----------------------------
                                    201 ; unlock FLASH or EEPROM 
                                    202 ; according to PTR16 address 
                                    203 ;  UNLOCK ( -- )
                                    204 ;-----------------------------
      001BC7 1B AA                  205 	.word LINK 
                           001BC9   206 	LINK=.
      001BC9 06                     207 	.byte 6
      001BCA 55 4E 4C 4F 43 4B      208 	.ascii "UNLOCK"
      001BD0                        209 unlock:
                                    210 ; put addr[15:0] in Y, for bounds check.
      001BD0 90 BE 32         [ 2]  211 	ldw y,PTR16   ; Y=addr15:0
      001BD3 90 A3 80 00      [ 2]  212     cpw y,#FLASH_BASE
      001BD7 24 10            [ 1]  213     jruge 4$
      001BD9 90 A3 40 00      [ 2]  214 	cpw y,#EEPROM_BASE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001BDD 25 0D            [ 1]  215     jrult 9$
      001BDF 90 A3 48 7F      [ 2]  216 	cpw y,#OPTION_END 
      001BE3 22 07            [ 1]  217 	jrugt 9$
      001BE5 CD 1B 92         [ 4]  218 	call unlock_eeprom
      001BE8 81               [ 4]  219 	ret 
      001BE9 CD 1B B1         [ 4]  220 4$: call unlock_flash
      001BEC 81               [ 4]  221 9$: ret 
                                    222 
                                    223 ;-------------------------
                                    224 ; lock write access to 
                                    225 ; FLASH and EEPROM 
                                    226 ; LOCK ( -- )
                                    227 ;-------------------------
      001BED 1B C9                  228 	.word LINK 
                           001BEF   229 	LINK=.
      001BEF 04                     230 	.byte 4 
      001BF0 4C 4F 43 4B            231 	.ascii "LOCK" 
      001BF4                        232 lock: 
      001BF4 72 13 50 5F      [ 1]  233 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BF8 72 17 50 5F      [ 1]  234 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BFC 81               [ 4]  235 	ret 
                                    236 
                                    237 ;-------------------------
                                    238 ; increment PTR16 
                                    239 ; INC-PTR ( -- )
                                    240 ;-------------------------
      001BFD 1B EF                  241 	.word LINK 
                           001BFF   242 	LINK=. 
      001BFF 07                     243 	.byte 7 
      001C00 49 4E 43 2D 50 54 52   244 	.ascii "INC-PTR16" 
             31 36
      001C09                        245 INC_PTR16:
      001C09 90 89            [ 2]  246 	pushw y 
      001C0B 90 BE 32         [ 2]  247 	ldw y,PTR16 
      001C0E 90 5C            [ 2]  248 	incw y 
      001C10 90 BF 32         [ 2]  249 	ldw PTR16,y
      001C13 90 85            [ 2]  250 	popw y 
      001C15 81               [ 4]  251 	ret 
                                    252 
                                    253 
                                    254 ;----------------------------
                                    255 ; write a byte at address pointed 
                                    256 ; by PTR16 and increment PTR16.
                                    257 ; Expect pointer already initialized 
                                    258 ; and memory unlocked 
                                    259 ; WR-BYTE ( c -- )
                                    260 ;----------------------------
      001C16 1B FF                  261 	.word LINK 
                           001C18   262 	LINK=. 
      001C18 07                     263 	.byte 7 
      001C19 57 52 2D 42 59 54 45   264 	.ascii "WR-BYTE" 
                                    265 
      001C20                        266 WR_BYTE:
      001C20 90 93            [ 1]  267 	ldw y,x 
      001C22 90 FE            [ 2]  268 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C24 1C 00 02         [ 2]  269 	addw x,#CELLL 
      001C27 90 9F            [ 1]  270 	ld a,yl
      001C29 92 C7 32         [ 4]  271 	ld [PTR16],a
      001C2C 72 05 50 5F FB   [ 2]  272 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C31 20 D6            [ 2]  273 	jra INC_PTR16 
                                    274 
                                    275 ;---------------------------------------
                                    276 ; write a word at address pointed 
                                    277 ; by PTR16 and incrment PTR16 
                                    278 ; Expect pointer already initialized 
                                    279 ; WR-WORD ( w -- )
                                    280 ;---------------------------------------
      001C33 1C 18                  281 	.word LINK 
                           001C35   282 	LINK=.
      001C35 07                     283 	.byte 7
      001C36 57 52 2D 57 4F 52 44   284 	.ascii "WR-WORD"
      001C3D                        285 WR_WORD:
      001C3D 90 93            [ 1]  286 	ldw y,x 
      001C3F 90 FE            [ 2]  287 	ldw y,(y)
      001C41 90 89            [ 2]  288 	pushw y 
      001C43 90 5E            [ 1]  289 	swapw y 
      001C45 FF               [ 2]  290 	ldw (x),y 
      001C46 CD 1C 20         [ 4]  291 	call WR_BYTE 
      001C49 90 85            [ 2]  292 	popw y 
      001C4B 1D 00 02         [ 2]  293 	subw x,#CELLL
      001C4E FF               [ 2]  294 	ldw (x),y 
      001C4F CD 1C 20         [ 4]  295 	call WR_BYTE
      001C52 CC 1B F4         [ 2]  296 	jp lock 
                                    297 
                                    298 
                                    299 ;---------------------------------------
                                    300 ; write a byte to FLASH or EEPROM/OPTION  
                                    301 ; EEC!  (c a -- )
                                    302 ;---------------------------------------
      001C55 1C 35                  303     .word LINK 
                           001C57   304 	LINK=.
      001C57 04                     305     .byte 4 
      001C58 45 45 43 21            306     .ascii "EEC!"
                                    307 	; local variables 
                           000001   308 	BTW = 1   ; byte to write offset on stack
                           000002   309     OPT = 2 
                           000002   310 	VSIZE = 2
      001C5C                        311 EE_CSTORE:
      001C5C 52 02            [ 2]  312 	sub sp,#VSIZE
      001C5E CD 1A C8         [ 4]  313     call PSTO
      001C61 E6 01            [ 1]  314 	ld a,(1,x)
      001C63 43               [ 1]  315 	cpl a 
      001C64 6B 01            [ 1]  316 	ld (BTW,sp),a ; byte to write 
      001C66 0F 02            [ 1]  317 	clr (OPT,sp)  ; OPTION flag
      001C68 CD 1B D0         [ 4]  318 	call unlock 
                                    319 	; check if option
      001C6B 90 BE 32         [ 2]  320 	ldw y,PTR16 
      001C6E 90 A3 48 00      [ 2]  321 	cpw y,#OPTION_BASE
      001C72 2B 10            [ 1]  322 	jrmi 2$
      001C74 90 A3 48 80      [ 2]  323 	cpw y,#OPTION_END+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C78 2A 0A            [ 1]  324 	jrpl 2$
      001C7A 03 02            [ 1]  325 	cpl (OPT,sp)
                                    326 	; OPTION WRITE require this unlock 
      001C7C 72 1E 50 5B      [ 1]  327     bset FLASH_CR2,#FLASH_CR2_OPT
      001C80 72 1F 50 5C      [ 1]  328     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001C84                        329 2$: 
      001C84 CD 1C 20         [ 4]  330 	call WR_BYTE 	
      001C87 0D 02            [ 1]  331 	tnz (OPT,sp)
      001C89 27 0D            [ 1]  332 	jreq 3$ 
      001C8B 7B 01            [ 1]  333     ld a,(BTW,sp)
      001C8D 90 5F            [ 1]  334     clrw y
      001C8F 90 97            [ 1]  335 	ld yl,a 
      001C91 1D 00 02         [ 2]  336 	subw x,#CELLL 
      001C94 FF               [ 2]  337 	ldw (x),y 
      001C95 CD 1C 20         [ 4]  338 	call WR_BYTE
      001C98                        339 3$: 
      001C98 CD 1B F4         [ 4]  340 	call lock 
      001C9B 5B 02            [ 2]  341 	addw sp,#VSIZE 
      001C9D 81               [ 4]  342     ret
                                    343 
                                    344 ;------------------------------
                                    345 ; write integer in FLASH|EEPROM
                                    346 ; EE! ( n a -- )
                                    347 ;------------------------------
      001C9E 1C 57                  348 	.word LINK 
                           001CA0   349 	LINK=.
      001CA0 03                     350 	.byte 3 
      001CA1 45 45 21               351 	.ascii "EE!"
      001CA4                        352 EE_STORE:
      001CA4 CD 1A C8         [ 4]  353 	call PSTO 
      001CA7 CD 1B D0         [ 4]  354 	call unlock 
      001CAA CC 1C 3D         [ 2]  355 	jp WR_WORD 
                                    356 
                                    357 
                                    358 ;----------------------------
                                    359 ; Erase flash memory row 
                                    360 ; stm8s105c6 as 128 bytes rows
                                    361 ; ROW-ERASE ( a -- )
                                    362 ;----------------------------
      001CAD 1C A0                  363 	.word LINK 
                           001CAF   364 	LINK=. 
      001CAF 09                     365 	.byte 9 
      001CB0 52 4F 57 2D 45 52 41   366 	.ascii "ROW-ERASE" 
             53 45
      001CB9                        367 row_erase:
      001CB9 CD 1A C8         [ 4]  368 	call PSTO
                                    369 ;code must be execute from RAM 
                                    370 ;copy routine to PAD 
      001CBC 1D 00 02         [ 2]  371 	subw x,#CELLL 
      001CBF 90 AE 1D 06      [ 2]  372 	ldw y,#row_erase_proc
      001CC3 FF               [ 2]  373 	ldw (x),y 
      001CC4 CD 0B 39         [ 4]  374 	call PAD 
      001CC7 90 AE 1D 29      [ 2]  375 	ldw y,#row_erase_proc_end 
      001CCB 72 A2 1D 06      [ 2]  376 	subw y,#row_erase_proc
      001CCF 1D 00 02         [ 2]  377 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001CD2 FF               [ 2]  378 	ldw (x),y 
      001CD3 CD 0B 75         [ 4]  379 	call CMOVE 
      001CD6                        380 block_erase:
      001CD6 90 BE 32         [ 2]  381 	ldw y,PTR16
      001CD9 90 A3 21 00      [ 2]  382 	cpw y,#app_space 
      001CDD 2A 13            [ 1]  383 	jrpl erase_flash 
                                    384 ; erase EEPROM block
      001CDF 90 A3 40 00      [ 2]  385 	cpw y,#EEPROM_BASE 
      001CE3 24 01            [ 1]  386 	jruge 1$
      001CE5 81               [ 4]  387 	ret ; bad address 
      001CE6 90 A3 43 FF      [ 2]  388 1$: cpw y,#EEPROM_END 
      001CEA 23 01            [ 2]  389 	jrule 2$ 
      001CEC 81               [ 4]  390 	ret ; bad address 
      001CED                        391 2$:	
      001CED CD 1B 92         [ 4]  392 	call unlock_eeprom 
      001CF0 20 03            [ 2]  393 	jra proceed_erase
                                    394 ; erase flash block:
      001CF2                        395 erase_flash:
      001CF2 CD 1B B1         [ 4]  396 	call unlock_flash 
      001CF5                        397 proceed_erase:
      001CF5 CD 0B 39         [ 4]  398 	call PAD 
      001CF8 90 93            [ 1]  399 	ldw y,x
      001CFA 90 FE            [ 2]  400 	ldw y,(y)
      001CFC 1C 00 02         [ 2]  401 	addw x,#CELLL  
      001CFF 90 FD            [ 4]  402 	call (y) 
      001D01 72 17 50 5F      [ 1]  403 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D05 81               [ 4]  404 	ret 
                                    405 
                                    406 ; this routine is to be copied to PAD 
      001D06                        407 row_erase_proc:
      001D06 35 20 50 5B      [ 1]  408 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D0A 35 DF 50 5C      [ 1]  409 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D0E 4F               [ 1]  410 	clr a 
      001D0F 90 5F            [ 1]  411 	clrw y 
      001D11 91 D7 32         [ 4]  412 	ld ([PTR16],y),a
      001D14 90 5C            [ 2]  413     incw y
      001D16 91 D7 32         [ 4]  414 	ld ([PTR16],y),a
      001D19 90 5C            [ 2]  415     incw y
      001D1B 91 D7 32         [ 4]  416 	ld ([PTR16],y),a
      001D1E 90 5C            [ 2]  417     incw y
      001D20 91 D7 32         [ 4]  418 	ld ([PTR16],y),a
      001D23 72 05 50 5F FB   [ 2]  419 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D28 81               [ 4]  420 	ret
      001D29                        421 row_erase_proc_end:
                                    422 
                                    423 
                                    424 ;-----------------------------------
                                    425 ; block programming must be 
                                    426 ; executed from RAM 
                                    427 ; initial contidions: 
                                    428 ; 		memory unlocked
                                    429 ;       PTR16 initialized 
                                    430 ; input: 
                                    431 ;    x   buffer address 
                                    432 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                           000001   433 	BCNT=1 
      001D29                        434 copy_buffer:
      001D29 4B 80            [ 1]  435 	push #BLOCK_SIZE  
                                    436 ;enable block programming 
      001D2B 72 10 50 5B      [ 1]  437 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D2F 72 11 50 5C      [ 1]  438 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D33 90 5F            [ 1]  439 	clrw y
      001D35 F6               [ 1]  440 1$:	ld a,(x)
      001D36 91 D7 32         [ 4]  441 	ld ([PTR16],y),a
      001D39 5C               [ 2]  442 	incw x 
      001D3A 90 5C            [ 2]  443 	incw y 
      001D3C 0A 01            [ 1]  444 	dec (BCNT,sp)
      001D3E 26 F5            [ 1]  445 	jrne 1$
                                    446 ; wait EOP bit 
      001D40 72 05 50 5F FB   [ 2]  447 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D45 84               [ 1]  448 	pop a ; remove BCNT from stack 
      001D46 81               [ 4]  449 	ret 
      001D47                        450 copy_buffer_end:
                                    451 
                                    452 ;-------------------------
                                    453 ; move program_row to RAM 
                                    454 ; in TIB 
                                    455 ;------------------------
      001D47                        456 copy_prog_to_ram:
      001D47 1D 00 06         [ 2]  457 	subw x,#6
      001D4A 90 AE 1D 29      [ 2]  458 	ldw y,#copy_buffer 
      001D4E EF 04            [ 2]  459 	ldw (4,x),y 
      001D50 90 AE 07 00      [ 2]  460 	ldw y,#TIBBASE
      001D54 EF 02            [ 2]  461 	ldw (2,x),y 
      001D56 90 AE 1D 47      [ 2]  462 	ldw y,#copy_buffer_end 
      001D5A 72 A2 1D 29      [ 2]  463 	subw y,#copy_buffer  
      001D5E FF               [ 2]  464 	ldw (x),y 
      001D5F CD 0B 75         [ 4]  465 	call CMOVE 
      001D62 81               [ 4]  466 	ret 
                                    467 
                                    468 
                                    469 ;-----------------------------
                                    470 ; write a row in FLASH/EEPROM 
                                    471 ; WR-ROW ( ab ar -- )
                                    472 ; ab -> address 128 byte buffer to write 
                                    473 ; ar ->  row address in FLASH|EEPROM 
                                    474 ;-----------------------------
      001D63 1C AF                  475 	.word LINK 
                           001D65   476 	LINK=.
      001D65 06                     477 	.byte 6 
      001D66 57 52 2D 52 4F 57      478 	.ascii "WR-ROW"
      001D6C                        479 WR_ROW:
      001D6C CD 1A C8         [ 4]  480 	call PSTO
                                    481 ; align to FLASH block 
      001D6F A6 80            [ 1]  482 	ld a,#0x80 
      001D71 B4 33            [ 1]  483 	and a,PTR8 
      001D73 B7 33            [ 1]  484 	ld PTR8,a  
      001D75 CD 1D 47         [ 4]  485 	call copy_prog_to_ram
      001D78 CD 1B D0         [ 4]  486 	call unlock
      001D7B 90 93            [ 1]  487 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001D7D 90 FE            [ 2]  488 	ldw y,(y)
      001D7F 1C 00 02         [ 2]  489 	addw x,#CELLL 
      001D82 89               [ 2]  490 	pushw x 
      001D83 93               [ 1]  491 	ldw x,y ; buffer address in x 
      001D84 CD 07 00         [ 4]  492 	call TIBBASE
      001D87 CD 1B F4         [ 4]  493 	call lock
      001D8A 85               [ 2]  494 	popw x 
      001D8B 81               [ 4]  495 	ret 
                                    496 
                                    497 ;-------------------------------------
                                    498 ; change value of OPTION register 
                                    499 ; SET-OPT (c n -- ) 
                                    500 ; c new value.
                                    501 ; n OPT  number {1..7}
                                    502 ;--------------------------------------
      001D8C 1D 65                  503 		.word LINK 
                           001D8E   504 		LINK=.
      001D8E 07                     505 		.byte 7 
      001D8F 53 45 54 2D 4F 50 54   506 		.ascii "SET-OPT" 
      001D96                        507 set_option: 
      001D96 90 93            [ 1]  508 		ldw y,x 
      001D98 90 FE            [ 2]  509 		ldw y,(y)
      001D9A 27 06            [ 1]  510 		jreq 1$
      001D9C 90 A3 00 07      [ 2]  511 		cpw y,#7 
      001DA0 23 04            [ 2]  512 		jrule 2$ 
                                    513 ; invalid OPTION number 		
      001DA2 1C 00 04         [ 2]  514 1$:		addw x,#2*CELLL
      001DA5 81               [ 4]  515 		ret
      001DA6 90 58            [ 2]  516 2$:		sllw y 
      001DA8 72 A9 47 FF      [ 2]  517 		addw y,#OPTION_BASE-1
      001DAC FF               [ 2]  518 		ldw (x),y 
      001DAD CD 1C 5C         [ 4]  519 		call EE_CSTORE
      001DB0 81               [ 4]  520 		ret 
                                    521 
                                    522 
                                    523 
                                    524 ;--------------------------------------
                                    525 ; reset system to its original state 
                                    526 ; before any user modification
                                    527 ; PRISTINE ( -- )
                                    528 ;-------------------------------------
      001DB1 1D 8E                  529 	.word LINK  
                           001DB3   530 	LINK=.
      001DB3 08                     531 	.byte 8 
      001DB4 50 52 49 53 54 49 4E   532 	.ascii "PRISTINE"
             45
      001DBC                        533 pristine:
                                    534 ;;; erase EEPROM
      001DBC CD 1A DC         [ 4]  535 	call EEPROM 
      001DBF CD 04 D9         [ 4]  536 1$:	call DUPP 
      001DC2 CD 1C B9         [ 4]  537 	call row_erase
      001DC5 90 93            [ 1]  538 	ldw y,x 
      001DC7 90 FE            [ 2]  539 	ldw y,(y)
      001DC9 72 A9 00 80      [ 2]  540 	addw y,#BLOCK_SIZE
      001DCD FF               [ 2]  541 	ldw (x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001DCE 90 A3 48 00      [ 2]  542 	cpw y,#OPTION_BASE 
      001DD2 25 EB            [ 1]  543 	jrult 1$
                                    544 ;;; reset OPTION to default values
      001DD4 90 AE 00 01      [ 2]  545 	ldw y,#1 ; OPT1 
      001DD8 FF               [ 2]  546 2$:	ldw (x),y   
      001DD9 90 5F            [ 1]  547 	clrw y 
      001DDB EF 02            [ 2]  548 	ldw (2,x),y  ; ( 0 1 -- ) 
      001DDD CD 06 BF         [ 4]  549 	call DDUP    ; ( 0 1 0 1 -- )  
      001DE0 CD 1D 96         [ 4]  550 	call set_option
      001DE3 90 93            [ 1]  551 	ldw y,x 
      001DE5 90 FE            [ 2]  552 	ldw y,(y)
      001DE7 90 5C            [ 2]  553 	incw y  ; next OPTION 
      001DE9 90 A3 00 08      [ 2]  554 	cpw y,#8 
      001DED 25 E9            [ 1]  555 	jrult 2$
                                    556 ;;; erase first row of app_space 	
      001DEF CD 04 CF         [ 4]  557 	call DROP 
      001DF2 90 AE 21 00      [ 2]  558 	ldw y,#app_space
      001DF6 FF               [ 2]  559 	ldw (x),y   
      001DF7 CD 1C B9         [ 4]  560 	call row_erase 
                                    561 ; reset interrupt vectors 
      001DFA 1D 00 02         [ 2]  562 	subw x,#CELLL 
      001DFD 90 5F            [ 1]  563 	clrw y  
      001DFF FF               [ 2]  564 4$:	ldw (x),y  ; ( n -- ) int# 
      001E00 CD 04 D9         [ 4]  565 	call DUPP  
      001E03 CD 1E 20         [ 4]  566 	call reset_vector
      001E06 90 93            [ 1]  567 	ldw y,x 
      001E08 90 FE            [ 2]  568 	ldw y,(y)
      001E0A 90 5C            [ 2]  569 	incw y   ; next vector 
      001E0C 90 A3 00 1D      [ 2]  570 	cpw y,#29 
      001E10 25 ED            [ 1]  571 	jrult 4$
      001E12 CC 00 04         [ 2]  572 	jp NonHandledInterrupt ; reset MCU
                                    573 
                                    574 ;------------------------------
                                    575 ; reset an interrupt vector 
                                    576 ; to its initial value 
                                    577 ; i.e. NonHandledInterrupt
                                    578 ; RST-IVEC ( n -- )
                                    579 ;-----------------------------
      001E15 1D B3                  580 	.word LINK 
                           001E17   581 	LINK=. 
      001E17 08                     582 	.byte 8 
      001E18 52 53 54 2D 49 56 45   583 	.ascii "RST-IVEC"
             43
      001E20                        584 reset_vector:
      001E20 90 93            [ 1]  585 	ldw y,x
      001E22 1C 00 02         [ 2]  586 	addw x,#CELLL 
      001E25 90 FE            [ 2]  587 	ldw y,(y)
      001E27 90 A3 00 17      [ 2]  588 	cpw y,#23 
      001E2B 27 2D            [ 1]  589 	jreq 9$
      001E2D 90 A3 00 1D      [ 2]  590 	cpw y,#29 ; last vector
      001E31 22 27            [ 1]  591 	jrugt 9$  
      001E33 90 58            [ 2]  592 	sllw y 
      001E35 90 58            [ 2]  593 	sllw y 
      001E37 72 A9 80 08      [ 2]  594 	addw y,#0x8008 ; irq0 address 
      001E3B 1D 00 02         [ 2]  595 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E3E FF               [ 2]  596 	ldw (x),y 
      001E3F CD 1A C8         [ 4]  597 	call PSTO 
      001E42 1D 00 02         [ 2]  598 	subw x,#CELLL 
      001E45 90 5F            [ 1]  599 	clrw y
      001E47 A6 82            [ 1]  600 	ld a,#0x82 
      001E49 90 95            [ 1]  601 	ld yh,a
      001E4B FF               [ 2]  602 	ldw (x),y
      001E4C CD 1C 3D         [ 4]  603 	call WR_WORD 
      001E4F 1D 00 02         [ 2]  604 	subw x,#CELLL
      001E52 90 AE 00 04      [ 2]  605 	ldw y,#NonHandledInterrupt
      001E56 FF               [ 2]  606 	ldw (x),y 
      001E57 CD 1C 3D         [ 4]  607 	call WR_WORD 
      001E5A 81               [ 4]  608 9$:	ret 
                                    609 
                                    610 
                                    611 ;------------------------------
                                    612 ; all interrupt vector with 
                                    613 ; an address >= a are resetted 
                                    614 ; to default
                                    615 ; CHKIVEC ( a -- )
                                    616 ;------------------------------
      001E5B 1E 17                  617 	.word LINK 
                           001E5D   618 	LINK=.
      001E5D 07                     619 	.byte 7
      001E5E 43 48 4B 49 56 45 43   620 	.ascii "CHKIVEC"
                                    621 ;local variables 
                           000001   622 	SSP=1
                           000003   623 	CADR=3
                           000005   624 	OFS=5
                           000006   625 	VSIZE=6  
      001E65                        626 CHKIVEC:
      001E65 52 06            [ 2]  627 	sub sp,#VSIZE ;alloc local variables 
      001E67 90 93            [ 1]  628 	ldw y,x 
      001E69 90 FE            [ 2]  629 	ldw y,(y)
      001E6B 17 03            [ 2]  630 	ldw (CADR,sp),y ; ca 
      001E6D 1F 01            [ 2]  631 	ldw (SSP,sp),x 
      001E6F AE 80 0A         [ 2]  632 	ldw x,#0x800a ; irq0 address 
      001E72 BF 32            [ 2]  633 	ldw PTR16,X
      001E74 AE FF FC         [ 2]  634 	ldw x,#-4 
      001E77 1C 00 04         [ 2]  635 1$:	addw x,#4
      001E7A A3 00 78         [ 2]  636 	cpw x,#30*4 ; irq0-29 
      001E7D 27 22            [ 1]  637 	jreq 9$
      001E7F 90 93            [ 1]  638 	ldw y,x  
      001E81 91 D6 32         [ 4]  639 	ld a,([PTR16],y)
      001E84 11 03            [ 1]  640 	cp a,(CADR,sp)
      001E86 25 EF            [ 1]  641 	jrult 1$
      001E88 90 5C            [ 2]  642 	incw y 
      001E8A 91 D6 32         [ 4]  643 	ld a,([PTR16],y)
      001E8D 11 04            [ 1]  644 	cp a,(CADR+1,sp) 
      001E8F 25 E6            [ 1]  645 	jrult 1$ 
      001E91 1F 05            [ 2]  646 	ldw (OFS,sp),x 
      001E93 54               [ 2]  647 	srlw x
      001E94 54               [ 2]  648 	srlw x 
      001E95 90 93            [ 1]  649 	ldw y,x 
      001E97 1E 01            [ 2]  650 	ldw x,(SSP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001E99 FF               [ 2]  651 	ldw (x),y
      001E9A CD 1E 20         [ 4]  652 	call reset_vector
      001E9D 1E 05            [ 2]  653 	ldw x,(OFS,sp) 
      001E9F 20 D6            [ 2]  654 	jra 1$
      001EA1 1E 01            [ 2]  655 9$:	ldw x,(SSP,sp) 
      001EA3 1C 00 02         [ 2]  656 	addw x,#CELLL 
      001EA6 5B 06            [ 2]  657 	addw sp,#VSIZE ; drop local variables  
      001EA8 81               [ 4]  658 	ret 
                                    659 
                                    660 ;------------------------------
                                    661 ; set interrupt vector 
                                    662 ; SET-IVEC ( a n -- )
                                    663 ;  a Handler address
                                    664 ;  n  vector # 0 .. 29 
                                    665 ;-----------------------------
      001EA9 1E 5D                  666 	.word LINK
                           001EAB   667 	LINK=.
      001EAB 08                     668 	.byte 8 
      001EAC 53 45 54 2D 49 56 45   669 	.ascii "SET-IVEC" 
             43
      001EB4                        670 set_vector:
      001EB4 90 93            [ 1]  671     ldw y,x 
      001EB6 90 FE            [ 2]  672 	ldw y,(y) ; vector #
      001EB8 90 A3 00 1D      [ 2]  673 	cpw y,#29 ; last vector
      001EBC 23 04            [ 2]  674 	jrule 2$
      001EBE 1C 00 04         [ 2]  675 	addw x,#2*CELLL 
      001EC1 81               [ 4]  676 	ret
      001EC2 90 58            [ 2]  677 2$:	sllw y 
      001EC4 90 58            [ 2]  678 	sllw y 
      001EC6 72 A9 80 08      [ 2]  679 	addw y,#0X8008 ; IRQ0 vector address 
      001ECA FF               [ 2]  680 	ldw (x),y  ; vector address 
      001ECB CD 1A C8         [ 4]  681 	call PSTO 
      001ECE 90 5F            [ 1]  682 	clrw y 
      001ED0 A6 82            [ 1]  683 	ld a,#0x82 
      001ED2 90 95            [ 1]  684 	ld yh,a 
      001ED4 1D 00 02         [ 2]  685 	subw x,#CELLL 
      001ED7 FF               [ 2]  686 	ldw (x),y 
      001ED8 CD 1C 3D         [ 4]  687 	call WR_WORD 
      001EDB CD 1C 3D         [ 4]  688 	call WR_WORD 
      001EDE 81               [ 4]  689 9$: ret 
                                    690 
                                    691 
                                    692 ;------------------------
                                    693 ; Compile word to flash
                                    694 ; EE, (w -- )
                                    695 ;-----------------------
      001EDF 1E AB                  696 	.word LINK
                           001EE1   697 	LINK=.
      001EE1 03                     698 	.byte 3
      001EE2 45 45 2C               699 	.ascii "EE,"
      001EE5                        700 EE_COMMA:
      001EE5 1D 00 02         [ 2]  701 	subw x,#CELLL 
      001EE8 90 BE 18         [ 2]  702 	ldw y,UCP
      001EEB 90 89            [ 2]  703 	pushw y 
      001EED FF               [ 2]  704 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001EEE CD 1C A4         [ 4]  705 	call EE_STORE
      001EF1 90 85            [ 2]  706 	popw y 
      001EF3 72 A9 00 02      [ 2]  707 	addw y,#2
      001EF7 90 BF 18         [ 2]  708 	ldw UCP,y
      001EFA 81               [ 4]  709 	ret 
                                    710 
                                    711 
                                    712 ;-------------------------
                                    713 ; Compile byte to flash 
                                    714 ; EEC, ( c -- )	
                                    715 ;-------------------------
      001EFB 1E E1                  716 	.word LINK 
                           001EFD   717 	LINK=.
      001EFD 04                     718 	.byte 4 
      001EFE 45 45 43 2C            719 	.ascii "EEC,"
      001F02                        720 EE_CCOMMA:
      001F02 1D 00 02         [ 2]  721 	subw x,#CELLL 
      001F05 90 BE 18         [ 2]  722 	ldw y,UCP
      001F08 90 89            [ 2]  723 	pushw y 
      001F0A FF               [ 2]  724 	ldw (x),y 
      001F0B CD 1C 5C         [ 4]  725 	call EE_CSTORE
      001F0E 90 85            [ 2]  726 	popw y 
      001F10 90 5C            [ 2]  727 	incw y 
      001F12 90 BF 18         [ 2]  728 	ldw UCP,y
      001F15 81               [ 4]  729 	ret 
                                    730 
                                    731 
                                    732 ;--------------------------
                                    733 ; copy FLASH block to ROWBUF
                                    734 ; ROW>BUF ( ar -- )
                                    735 ; ar row address 
                                    736 ;--------------------------
      001F16 1E FD                  737 	.word LINK 
                           001F18   738 	LINK=.
      001F18 07                     739 	.byte 7 
      001F19 52 4F 57 3E 42 55 46   740 	.ascii "ROW>BUF"
      001F20                        741 ROW2BUF: 
                                    742 ; align row address to block boundary
      001F20 E6 01            [ 1]  743 	ld a,(1,x)
      001F22 A4 80            [ 1]  744 	and a,#BLOCK_SIZE 
      001F24 E7 01            [ 1]  745 	ld (1,x),a 
      001F26 1D 00 04         [ 2]  746 	subw x,#2*CELLL 
      001F29 90 AE 06 80      [ 2]  747 	ldw y,#ROWBUFF 
      001F2D EF 02            [ 2]  748 	ldw (2,x),y 
      001F2F 90 AE 00 80      [ 2]  749 	ldw y,#BLOCK_SIZE
      001F33 FF               [ 2]  750 	ldw (x),y 
      001F34 CD 0B 75         [ 4]  751 	call CMOVE 
      001F37 81               [ 4]  752 	ret 
                                    753 
                                    754 
                                    755 ;---------------------------
                                    756 ; copy ROWBUFF to flash 
                                    757 ; BUF>ROW ( ar -- )
                                    758 ; ar row address
                                    759 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001F38 1F 18                  760 	.word LINK 
                           001F3A   761 	LINK=.
      001F3A 07                     762 	.byte 7 
      001F3B 42 55 46 3E 52 4F 57   763 	.ascii "BUF>ROW" 
      001F42                        764 BUF2ROW:
      001F42 CD 05 D4         [ 4]  765 	call TBUF ; ( ar Ab -- )
      001F45 CD 04 E9         [ 4]  766 	call SWAPP ; ( ab ar -- )
      001F48 CD 1D 6C         [ 4]  767 	call WR_ROW 
      001F4B 81               [ 4]  768 	ret 
                                    769 
                                    770 ;---------------------------------
                                    771 ; how many byte free in that row 
                                    772 ; RFREE ( a -- n )
                                    773 ; a is least byte of target address
                                    774 ;----------------------------------
      001F4C 1F 3A                  775 	.word LINK 
                           001F4E   776 	LINK=.
      001F4E 05                     777 	.byte 5 
      001F4F 52 46 52 45 45         778 	.ascii "RFREE"
      001F54                        779 RFREE:
      001F54 E6 01            [ 1]  780 	ld a,(1,x)
      001F56 A4 7F            [ 1]  781 	and a,#BLOCK_SIZE-1 
      001F58 B7 24            [ 1]  782 	ld YTEMP,a 
      001F5A A6 80            [ 1]  783 	ld a,#BLOCK_SIZE 
      001F5C B0 24            [ 1]  784 	sub a,YTEMP 
      001F5E 90 5F            [ 1]  785 	clrw y 
      001F60 90 97            [ 1]  786 	ld yl,a
      001F62 FF               [ 2]  787 	ldw (x),y 
      001F63 81               [ 4]  788 	ret 
                                    789 
                                    790 ;---------------------------------
                                    791 ; write u bytes to flash/EEPROM 
                                    792 ; constraint to row limit 
                                    793 ; RAM>EE ( af a u1 -- u2 )
                                    794 ; af flash address 
                                    795 ; a ram address 
                                    796 ; u bytes count
                                    797 ; return u2 bytes written  
                                    798 ;-------------------------------
      001F64 1F 4E                  799 	.word LINK 
                           001F66   800 	LINK=. 
      001F66 06                     801 	.byte 6
      001F67 52 41 4D 3E 45 45      802 	.ascii "RAM>EE"
                                    803 	
      001F6D                        804 RAM2EE:
                                    805 ; PICK af
      001F6D CD 03 B4         [ 4]  806 	call DOLIT 
      001F70 00 02                  807 	.word 2 
      001F72 CD 0A 93         [ 4]  808 	call PICK  ; { -- af a u1 af }
      001F75 CD 04 D9         [ 4]  809 	call DUPP 
      001F78 CD 1F 20         [ 4]  810 	call ROW2BUF ; copy in ROWBUFF  
      001F7B CD 04 D9         [ 4]  811 	call DUPP 
      001F7E CD 04 A2         [ 4]  812 	call TOR 
      001F81 CD 03 B4         [ 4]  813 	call DOLIT 
      001F84 00 7F                  814 	.word BLOCK_SIZE-1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001F86 CD 05 25         [ 4]  815 	call ANDD 
      001F89 CD 03 B4         [ 4]  816 	call DOLIT 
      001F8C 06 80                  817 	.word ROWBUFF 
      001F8E CD 06 D4         [ 4]  818 	call PLUS  ; ( -- af a u1 ab )
      001F91 CD 04 E9         [ 4]  819 	call SWAPP ;  ( -- af a ab u1 )
      001F94 CD 04 83         [ 4]  820 	call RFROM  ; ( -- af a ab u1 af )
      001F97 CD 1F 54         [ 4]  821 	call RFREE  ; ( -- af a ab u1 n )
      001F9A CD 07 EF         [ 4]  822 	call MIN    
      001F9D CD 04 D9         [ 4]  823 	call DUPP 
      001FA0 CD 04 A2         [ 4]  824 	call TOR  
      001FA3 CD 0B 75         [ 4]  825 	call CMOVE  ; copy RAM to RAM from a to ab 
      001FA6 CD 1F 42         [ 4]  826 	call BUF2ROW ; ( af --  ) write ROWBUFF to flash 
      001FA9 CD 04 83         [ 4]  827 	call RFROM  ; how many written 
      001FAC 81               [ 4]  828 	ret 
                                    829 
                                    830 
                                    831 ;--------------------------
                                    832 ; move new colon definition to FLASH 
                                    833 ; using WR-ROW for efficiency 
                                    834 ; preserving bytes already used 
                                    835 ; in the current block. 
                                    836 ; At this point the compiler as completed
                                    837 ; in RAM and pointers CP and CNTXT are updated.
                                    838 ; CNTXT point to nfa of new word and  
                                    839 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    840 ; 
                                    841 ; FMOVE ( -- cp+ )
                                    842 ; 
                                    843 ;--------------------------
      001FAD 1F 66                  844 	.word LINK 
                           001FAF   845 	LINK=.
      001FAF 05                     846 	.byte 5 
      001FB0 46 4D 4F 56 45         847 	.ascii "FMOVE" 
      001FB5                        848 FMOVE:
      001FB5 CD 05 E6         [ 4]  849 	call TFLASH 
      001FB8 CD 04 32         [ 4]  850 	CALL AT 
      001FBB CD 03 E7         [ 4]  851 	CALL QBRAN 
      001FBE 20 2D                  852 	.word no_move  
      001FC0 CD 06 35         [ 4]  853 	call CPP  
      001FC3 CD 04 32         [ 4]  854 	call AT  
      001FC6 CD 04 D9         [ 4]  855 	call DUPP ; ( cp cp -- )
      001FC9 CD 06 19         [ 4]  856 	call CNTXT 
      001FCC CD 04 32         [ 4]  857 	call AT 
      001FCF CD 03 B4         [ 4]  858 	call DOLIT 
      001FD2 00 02                  859 	.word 2 
      001FD4 CD 07 4D         [ 4]  860 	call SUBB ; ( cp cp la -- ) \ new word link address in RAM  
      001FD7 CD 04 D9         [ 4]  861 	call DUPP 
      001FDA CD 04 A2         [ 4]  862 	call TOR    ; ( cp cp la R: la ) 
      001FDD                        863 FMOVE2:
      001FDD CD 0B 28         [ 4]  864 	call HERE  ; ( cp cp la vp  R: la )
      001FE0 CD 04 96         [ 4]  865 	call RAT   ; ( cp cp la vp la R: la )
      001FE3 CD 07 4D         [ 4]  866 	call SUBB ; ( cp cp la wl R: la  ) \ wl is bytes to copy 
      001FE6                        867 next_row:
      001FE6 CD 04 D9         [ 4]  868 	call DUPP 
      001FE9 CD 04 A2         [ 4]  869 	call TOR  ; ( cp cp la wl -- ) R: a wl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001FEC CD 1F 6D         [ 4]  870 	call RAM2EE ; ( cp cp la wl -- cp u2 ) u2 is byte written to FLASH 
      001FEF CD 04 D9         [ 4]  871 	call DUPP 
      001FF2 CD 04 A2         [ 4]  872 	call TOR
      001FF5 CD 06 D4         [ 4]  873 	call PLUS  ; ( cp+ ) 
      001FF8 CD 04 D9         [ 4]  874 	call DUPP 
      001FFB CD 04 83         [ 4]  875 	call RFROM  ; ( cp+ cp+ u2  R: a wl ) 
      001FFE CD 04 83         [ 4]  876 	call RFROM  ; ( cp+ cp+ u2 wl R: a ) 
      002001 CD 05 03         [ 4]  877 	call OVER   ; ( cp+ cp+ u2 wl u2 -- )
      002004 CD 07 4D         [ 4]  878 	call SUBB  ; ( cp+ cp+ u2 wl- R: a )
      002007 CD 04 D9         [ 4]  879 	call DUPP 
      00200A CD 03 E7         [ 4]  880 	call QBRAN
      00200D 20 26                  881 	.word fmove_done 
      00200F CD 04 E9         [ 4]  882 	call SWAPP  ; ( cp+ cp+ wl- u2 R: a )
      002012 CD 04 83         [ 4]  883 	call RFROM ; ( cp+ cp+ wl- u2 a -- ) 
      002015 CD 06 D4         [ 4]  884 	call PLUS  ; ( cp+ cp+ wl- a+ )
      002018 CD 04 D9         [ 4]  885 	call DUPP 
      00201B CD 04 A2         [ 4]  886 	call TOR   ; ( cp+ cp+ wl- a+ ) R: a+
      00201E CD 04 E9         [ 4]  887 	call SWAPP ; ( cp+ cp+ a+ wl- )
      002021 CD 03 FE         [ 4]  888 	call BRAN
      002024 1F E6                  889 	.word next_row  
      002026                        890 fmove_done:	
      002026 CD 04 83         [ 4]  891 	call RFROM  ; ( -- cp+ cp+ u2 wl- a  )
      002029 1C 00 08         [ 2]  892 	addw x,#4*CELLL ; (  -- cp+ ) new CP 
      00202C 81               [ 4]  893  	ret  
      00202D                        894 no_move:
      00202D CD 0A 3A         [ 4]  895 	call ZERO
      002030 81               [ 4]  896 	ret 
                                    897 
                                    898 ;------------------------------------------
                                    899 ; adjust pointers after **FMOVE** operetion.
                                    900 ; UPDAT-PTR ( cp+ -- )
                                    901 ; cp+ is new CP position after FMOVE 
                                    902 ;-------------------------------------------
      002031 1F AF                  903 	.word LINK 
                           002033   904 	LINK=.
      002033 09                     905 	.byte 9
      002034 55 50 44 41 54 2D 50   906 	.ascii "UPDAT-PTR" 
             54 52
      00203D                        907 UPDATPTR:
                                    908 ;reset VP to previous position  
      00203D CD 1B 27         [ 4]  909 	call EEPVP 
      002040 CD 04 32         [ 4]  910 	call AT
      002043 CD 06 27         [ 4]  911 	call VPP 
      002046 CD 04 1B         [ 4]  912 	call STORE
                                    913 ;update CONTEXT and LAST 
      002049 CD 1B 15         [ 4]  914 	call EEPCP 
      00204C CD 04 32         [ 4]  915 	call AT
      00204F CD 03 B4         [ 4]  916 	call DOLIT 
      002052 00 02                  917 	.word 2 
      002054 CD 06 D4         [ 4]  918 	call PLUS 
      002057 CD 04 D9         [ 4]  919 	call DUPP 
      00205A CD 06 19         [ 4]  920 	call CNTXT 
      00205D CD 04 1B         [ 4]  921 	call STORE
      002060 CD 06 45         [ 4]  922 	call LAST
      002063 CD 04 1B         [ 4]  923 	call STORE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002066 CD 1B 3D         [ 4]  924 	call UPDATLAST 
                                    925 ;update CP 
      002069 CD 06 35         [ 4]  926 	call CPP 
      00206C CD 04 1B         [ 4]  927 	call STORE
      00206F CD 1B 66         [ 4]  928 	call UPDATCP 
      002072 81               [ 4]  929 	ret 
                                    930 
                                    931 ;-----------------------------
                                    932 ; move interrupt sub-routine
                                    933 ; in flash memory
                                    934 ;----------------------------- 
      002073 20 33                  935 	.word LINK 
                           002075   936 	LINK=. 
      002075 06                     937 	.byte 6
      002076 49 46 4D 4F 56 45      938 	.ascii "IFMOVE" 
      00207C                        939 IFMOVE:
      00207C CD 05 E6         [ 4]  940 	call TFLASH 
      00207F CD 04 32         [ 4]  941 	CALL AT 
      002082 CD 03 E7         [ 4]  942 	CALL QBRAN 
      002085 20 2D                  943 	.word no_move 
      002087 CD 06 35         [ 4]  944 	call CPP 
      00208A CD 04 32         [ 4]  945 	call AT 
      00208D CD 04 D9         [ 4]  946 	call DUPP ; ( cp cp -- )
      002090 CD 1B 27         [ 4]  947 	call EEPVP 
      002093 CD 04 32         [ 4]  948 	call AT  ; ( cp cp a )
      002096 CD 04 A2         [ 4]  949 	call TOR 
      002099 CD 04 96         [ 4]  950 	call RAT ; ( cp cp a -- ) R: a 
      00209C CC 1F DD         [ 2]  951 	jp FMOVE2 
                                    952 
                                    953 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4455 
                                   4456 ;===============================================================
                                   4457 
                           002075  4458 LASTN =	LINK   ;last name defined
                                   4459 
                                   4460 ; application code begin here
      002100                       4461 	.bndry 128 ; align on flash block  
      002100                       4462 app_space: 
                                   4463 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000770 R   |   6 ABOR1      0012C3 R
  6 ABOR2      0012DA R   |   6 ABORQ      0012BB R   |   6 ABORT      0012AC R
  6 ABRTQ      001597 R   |   6 ABSS       000767 R   |   6 ACCEP      001242 R
  6 ACCP1      00124B R   |   6 ACCP2      001271 R   |   6 ACCP3      001274 R
  6 ACCP4      001276 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     000673 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001582 R   |   6 AGAIN      0014D8 R
  6 AHEAD      001535 R   |   6 ALLOT      0013EB R   |   6 ANDD       000525 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         000432 R   |   6 ATEXE      000B5E R
  6 AUTORUN    00012B R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |     B19200  =  000003 
    B230400 =  000007     |     B2400   =  000000     |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |     B57600  =  000005 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      0011EA R
  6 BASE       000596 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      00142D R   |   6 BDIGS      000C45 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00500F 
  6 BEGIN      0014BA R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001082 R   |   6 BKSP       0011BA R   |     BKSPP   =  000008 
  6 BLANK      000A2D R   |     BLOCK_SI=  000080     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001F42 R   |   6 BYE        0000B8 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CARRY   =  000028 
  6 CAT        000450 R   |   6 CCOMMA     00140F R   |     CELLL   =  000002 
  6 CELLM      0009B2 R   |   6 CELLP      0009A3 R   |   6 CELLS      0009C1 R
    CFG_GCR =  007F60     |   6 CHAR1      000E72 R   |   6 CHAR2      000E75 R
  6 CHKIVEC    001E65 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000B7D R
  6 CMOV2      000B95 R   |   6 CMOVE      000B75 R   |     CNTDWN  =  000030 
  6 CNTXT      000619 R   |   6 COLD       0019A7 R   |   6 COLD1      0019A7 R
  6 COLON      001730 R   |   6 COMMA      0013F8 R   |   6 COMPI      00143D R
    COMPO   =  000040     |   6 CONSTANT   0017DA R   |   6 COUNT      000B11 R
  6 CPP        000635 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EA0 R   |   6 CREAT      001776 R   |     CRR     =  00000D 
  6 CSTOR      00043F R   |   6 DAT        000AF1 R   |     DATSTK  =  000680 
  6 DDROP      0006B4 R   |   6 DDUP       0006BF R   |     DEBUG   =  000001 
  6 DECIM      000CF5 R   |   6 DEPTH      000A7C R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000D3A R   |   6 DI         0000C6 R
  6 DIG        000C6E R   |   6 DIGIT      000C09 R   |   6 DIGS       000C7F R
  6 DIGS1      000C7F R   |   6 DIGS2      000C8C R   |   6 DIGTQ      000D09 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        00072E R
  6 DNEGA      000711 R   |   6 DOCONST    001804 R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EB6 R   |   6 DOT        000F3B R
  6 DOT1       000F51 R   |   6 DOTI1      001926 R   |   6 DOTID      001910 R
  6 DOTO1      00134F R   |   6 DOTOK      001335 R   |   6 DOTPR      001064 R
  6 DOTQ       0015B1 R   |   6 DOTQP      000EDF R   |   6 DOTR       000EED R
  6 DOTS       0018B2 R   |   6 DOTS1      0018BD R   |   6 DOTS2      0018C6 R
  6 DOVAR      000586 R   |   6 DROP       0004CF R   |   6 DSTOR      000ACB R
  6 DUMP       001868 R   |   6 DUMP1      00187F R   |   6 DUMP3      0018A1 R
  6 DUMPP      001837 R   |   6 DUPP       0004D9 R   |   6 EDIGS      000CAA R
  6 EEPCP      001B15 R   |   6 EEPLAST    001AF0 R   |   6 EEPROM     001ADC R
    EEPROM_B=  004000     |     EEPROM_E=  0043FF     |     EEPROM_S=  000400 
  6 EEPRUN     001B03 R   |   6 EEPVP      001B27 R   |   6 EE_CCOMM   001F02 R
  6 EE_COMMA   001EE5 R   |   6 EE_CSTOR   001C5C R   |   6 EE_STORE   001CA4 R
  6 EI         0000BF R   |   6 ELSEE      001510 R   |   6 EMIT       00039E R
  6 ENEPER     001A56 R   |   6 EQ1        00078B R   |   6 EQUAL      000775 R
  6 ERASE      000BD7 R   |     ERR     =  00001B     |   6 EVAL       001378 R
  6 EVAL1      001378 R   |   6 EVAL2      001394 R   |   6 EXE1       000B6C R
  6 EXECU      00040E R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C31 R   |     FHSE    =  F42400 
    FHSE_K  =  003E80     |     FHSE_M  =  000010     |   6 FILL       000BA4 R
  6 FILL1      000BC1 R   |   6 FILL2      000BCA R   |   6 FIND       001116 R
  6 FIND1      001134 R   |   6 FIND2      001162 R   |   6 FIND3      00116E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND4      001182 R   |   6 FIND5      00118F R   |   6 FIND6      001173 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
  6 FMOVE      001FB5 R   |   6 FMOVE2     001FDD R   |   6 FOR        00148D R
  6 FORGET     000158 R   |   6 FORGET1    000187 R   |   6 FORGET2    00020D R
  6 FORGET4    000216 R   |   6 FORGET6    0001CF R   |   6 FREEVAR    000223 R
  6 FREEVAR4   000259 R   |     GPIO_BAS=  005000     |     GPIO_SIZ=  000005 
  6 HERE       000B28 R   |   6 HEX        000CE0 R   |   6 HI         001962 R
  6 HLD        000606 R   |   6 HOLD       000C55 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001741 R   |   6 IFETCH     0014AB R   |   6 IFF        0014E8 R
  6 IFMOVE     00207C R   |     IMEDD   =  000080     |   6 IMMED      001753 R
  6 INCH       000392 R   |   6 INC_PTR1   001C09 R   |   6 INITOFS    001709 R
  6 INN        0005B4 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001317 R
  6 INTER      0012ED R   |     INT_ADC1=  000016     |     INT_AWU =  000001 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_RES1=  000008 
    INT_RES2=  000009     |     INT_RES3=  000011     |     INT_RES4=  000012 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      0006EE R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      00169E R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       0016F3 R
  6 KEY        000E20 R   |   6 KTAP       001207 R   |   6 KTAP1      00122A R
  6 KTAP2      00122D R   |   6 LAST       000645 R   |   6 LASTN   =  002075 R
  6 LBRAC      001324 R   |     LD1_BIT =  000000     |     LD1_MASK=  000001 
    LD1_PORT=  00500F     |   6 LESS       0007B2 R   |     LF      =  00000A 
  6 LINK    =  002075 R   |   6 LITER      00145F R   |   6 LN2S       001AB2 R
  6 LOG2S      001A9C R   |   6 LSHIFT     0009EC R   |   6 LSHIFT1    0009F5 R
  6 LSHIFT4    0009FD R   |   6 LT1        0007C8 R   |     MASKK   =  001F7F 
  6 MAX        0007D2 R   |   6 MAX1       0007E5 R   |   6 MIN        0007EF R
  6 MIN1       000802 R   |     MISCOPT =  004805     |     MISCOPT_=  000004 
    MISCOPT_=  000002     |     MISCOPT_=  000003     |     MISCOPT_=  000000 
    MISCOPT_=  000001     |   6 MMOD1      0008A5 R   |   6 MMOD2      0008B9 R
  6 MMOD3      0008D0 R   |   6 MMSM1      00084C R   |   6 MMSM2      000860 R
  6 MMSM3      000862 R   |   6 MMSM4      00086A R   |   6 MODD       0008EA R
  6 MONE       000A53 R   |     MS      =  00002E     |   6 MSEC       0002CE R
  6 MSMOD      000888 R   |   6 MSTA1      00097B R   |   6 MSTAR      000958 R
    NAFR    =  004804     |   6 NAMEQ      0011AF R   |   6 NAMET      0010C0 R
    NCLKOPT =  004808     |   6 NEGAT      0006FF R   |   6 NEX1       0003D5 R
  6 NEXT       00149C R   |     NHSECNT =  00480A     |     NMISCOPT=  004806 
    NMISCOPT=  FFFFFFFB     |     NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC 
    NMISCOPT=  FFFFFFFF     |     NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPTBL  =  00487F     |   6 NTIB       0005C4 R
    NUBC    =  004802     |   6 NUFQ       000E36 R   |   6 NUFQ1      000E4F R
  6 NUMBQ      000D4D R   |   6 NUMQ1      000D81 R   |   6 NUMQ2      000DB2 R
  6 NUMQ3      000DF4 R   |   6 NUMQ4      000DF9 R   |   6 NUMQ5      000E08 R
  6 NUMQ6      000E0B R   |   6 NonHandl   000004 R   |   6 OFFSET     00066A R
    OFS     =  000005     |   6 ONE        000A45 R   |   6 ONEM       0009DB R
  6 ONEP       0009CE R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |   6 ORIG       00004B R   |   6 ORR        000539 R
  6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000503 R
  6 OVERT      00166C R   |     PA      =  000000     |   6 PACKS      000BE8 R
  6 PAD        000B39 R   |   6 PAREN      001073 R   |   6 PARS       000F6C R
  6 PARS1      000F97 R   |   6 PARS2      000FC2 R   |   6 PARS3      000FC5 R
  6 PARS4      000FCE R   |   6 PARS5      000FF1 R   |   6 PARS6      001006 R
  6 PARS7      001015 R   |   6 PARS8      001024 R   |   6 PARSE      001035 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

  6 PAUSE      0002DE R   |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00184A R   |   6 PDUM2      00185B R
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |   6 PICK       000A93 R
  6 PII        001A15 R   |     PIN0    =  000000     |     PIN1    =  000001 
    PIN2    =  000002     |     PIN3    =  000003     |     PIN4    =  000004 
    PIN5    =  000005     |     PIN6    =  000006     |     PIN7    =  000007 
  6 PLUS       0006D4 R   |   6 PNAM1      001621 R   |   6 PRESE      0013A3 R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FF R   |   6 PSTO       001AC8 R   |   6 PSTOR      000AAA R
    PTR16   =  000032     |     PTR8    =  000033     |   6 QBRAN      0003E7 R
  6 QDUP       000683 R   |   6 QDUP1      00068D R   |   6 QKEY       000380 R
  6 QSTAC      00135B R   |   6 QUERY      001287 R   |   6 QUEST      000F5E R
  6 QUIT       0013C0 R   |   6 QUIT1      0013C8 R   |   6 QUIT2      0013CB R
  6 RAM2EE     001F6D R   |     RAMBASE =  000000     |   6 RAMLAST    000658 R
    RAM_BASE=  000000     |     RAM_END =  0007FF     |     RAM_SIZE=  000800 
  6 RANDOM     00027C R   |   6 RAT        000496 R   |   6 RBRAC      0016E0 R
  6 REPEA      001565 R   |   6 RFREE      001F54 R   |   6 RFROM      000483 R
    ROP     =  004800     |   6 ROT        000694 R   |   6 ROW2BUF    001F20 R
    ROWBUFF =  000680     |     RP0     =  00002C     |   6 RPAT       000460 R
    RPP     =  0007FF     |   6 RPSTO      00046D R   |   6 RSHIFT     000A08 R
  6 RSHIFT1    000A11 R   |   6 RSHIFT4    000A19 R   |     RST_SR  =  0050B3 
  6 RT12_2     001A85 R   |   6 SAME1      0010DE R   |   6 SAME2      001107 R
  6 SAMEQ      0010D6 R   |   6 SCOM1      001656 R   |   6 SCOM2      001659 R
  6 SCOMP      001638 R   |   6 SEED       000263 R   |     SEEDX   =  000035 
    SEEDY   =  000037     |   6 SEMIS      00167C R   |   6 SETISP     0000D2 R
  6 SET_RAML   0017C3 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000C94 R   |   6 SIGN1      000CA4 R   |   6 SLASH      0008F4 R
  6 SLMOD      0008D8 R   |   6 SNAME      0015EB R   |     SP0     =  00002A 
  6 SPACE      000E58 R   |   6 SPACS      000E67 R   |   6 SPAT       0004B9 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  000680 
    SPSAVE  =  000001     |   6 SPSTO      0004C6 R   |   6 SQRT10     001A6E R
  6 SQRT2      001A2C R   |   6 SQRT3      001A43 R   |   6 SSMOD      000984 R
    SSP     =  000001     |     STACK   =  0007FF     |   6 STAR       00094D R
  6 STASL      000995 R   |   6 STOD       000736 R   |   6 STORE      00041B R
  6 STR        000CC2 R   |   6 STRCQ      00146D R   |   6 STRQ       0015A4 R
  6 STRQP      000ED5 R   |   6 SUBB       00074D R   |   6 SWAPP      0004E9 R
    SWIM_CSR=  007F80     |   6 TAP        0011F1 R   |   6 TBOOT      00199B R
  6 TBUF       0005D4 R   |     TBUFFBAS=  000680     |   6 TCHAR      000A64 R
  6 TEMP       0005A5 R   |   6 TEVAL      0005F7 R   |   6 TFLASH     0005E6 R
  6 THENN      0014FD R   |   6 TIB        000B4A R   |     TIBB    =  000700 
    TIBBASE =  000700     |     TIC     =  000027     |   6 TICK       0013D7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R   |   6 TIMER      0002F8 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0018E0 R
  6 TNAM3      0018FE R   |   6 TNAM4      001904 R   |   6 TNAME      0018DD R
  6 TOFLASH    000333 R   |   6 TOKEN      0010B2 R   |   6 TOR        0004A2 R
  6 TORAM      000373 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000A20 R
  6 TYPE1      000E87 R   |   6 TYPE2      000E93 R   |   6 TYPES      000E82 R
  6 Timer4Ha   000009 R   |   6 TrapHand   000000 R   |     UART2_BR=  005242 
    UART2_BR=  005243     |     UART2_CR=  005244     |     UART2_CR=  005245 
    UART2_CR=  005246     |     UART2_CR=  005247     |     UART2_CR=  005248 
    UART2_CR=  004249     |     UART2_DR=  005241     |     UART2_GT=  00524A 
    UART2_PO=  00500F     |     UART2_PS=  00524B     |     UART2_RX=  000006 
    UART2_SR=  005240     |     UART2_TX=  000005     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000F28 R   |   6 UDOTR      000F08 R   |   6 UEND       000049 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0007AA R   |   6 ULESS      000794 R
  6 UMMOD      00082A R   |   6 UMSTA      000903 R   |   6 UNIQ1      0015E2 R
  6 UNIQU      0015C3 R   |   6 UNTIL      0014C5 R   |     UOFFSET =  00001C 
  6 UPDATCP    001B66 R   |   6 UPDATLAS   001B3D R   |   6 UPDATPTR   00203D R
  6 UPDATRUN   001B55 R   |   6 UPDATVP    001B7D R   |   6 UPL1       00057A R
  6 UPLUS      000563 R   |     UPP     =  000006     |     URLAST  =  000020 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    UTFLASH =  00001E     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      00181A R   |   6 UTYP2      001829 R   |   6 UTYPE      001815 R
    UVP     =  000016     |   6 UZERO      00002F R   |   6 VARIA      001790 R
    VAR_BASE=  000080     |     VAR_TOP =  0007BF     |     VER     =  000003 
  6 VPP        000627 R   |     VSIZE   =  000006     |     WANT_DEB=  000000 
    WANT_MAT=  000001     |     WANT_SEE=  000000     |   6 WHILE      00154B R
  6 WITHI      00080F R   |   6 WORDD      00109E R   |   6 WORDS      00193A R
  6 WORS1      001940 R   |   6 WORS2      00195C R   |   6 WR_BYTE    001C20 R
  6 WR_ROW     001D6C R   |   6 WR_WORD    001C3D R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     X4_FLASH=  00BFFF     |     X4_FLASH=  004000 
    X6_FLASH=  00FFFF     |     X6_FLASH=  008000     |   6 XORR       00054E R
    XTEMP   =  000022     |     YTEMP   =  000024     |   6 ZERO       000A3A R
  6 ZL1        00051B R   |   6 ZLESS      000512 R   |   6 app_spac   002100 R
  6 block_er   001CD6 R   |   6 clear_ra   00001D R   |   6 clock_in   000066 R
  6 copy_buf   001D29 R   |   6 copy_buf   001D47 R   |   6 copy_pro   001D47 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   001CF2 R   |   6 fmove_do   002026 R
  6 lock       001BF4 R   |   6 main       00001A R   |   6 next_row   001FE6 R
  6 no_move    00202D R   |   6 pristine   001DBC R   |   6 proceed_   001CF5 R
  6 reboot     000325 R   |   6 reset_ve   001E20 R   |   6 row_eras   001CB9 R
  6 row_eras   001D06 R   |   6 row_eras   001D29 R   |   6 set_opti   001D96 R
  6 set_vect   001EB4 R   |   6 uart2_in   000078 R   |   6 unlock     001BD0 R
  6 unlock_e   001B92 R   |   6 unlock_f   001BB1 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2100   flags    0

