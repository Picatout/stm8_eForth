ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "../inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 ÂµC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                        	.include "../inc/stm8s_disco.inc"
                                        ;-------------------------------------
                                        ; STM8S-Discovery card 
                                        ;-------------------------------------
                                        
                                        
                                 
                                 
                                 
                                        
                                        
                                        ; LD1 LED 
                                 
                                 
                                 
                                        
                                        ; BEEP
                                 
                                 
                                 
                                        
                                        ; TS1 
                                        ; use TIMER 1 3 channels 
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacÃ© le numÃ©ro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           0007FF    90 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    91 DATSTK  =	0x680	;data stack  empty
                           000680    92 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    93 TIBBASE =       0X700  ; transaction input buffer addr.
                                     94 
                                     95 
                                     96 
                                     97 ;; Memory allocation
                                     98 
                           000006    99 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   100 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   101 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   102 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   103 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   104 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   105 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    106 
                                    107 ; user variables constants 
                           000006   108 UBASE = UPP       ; numeric base 
                           000008   109 UTMP = UBASE+2    ; temporary storage
                           00000A   110 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   111 UCTIB = UINN+2    ; tib count 
                           00000E   112 UTIB = UCTIB+2    ; tib address 
                           000010   113 UINTER = UTIB+2   ; interpreter vector 
                           000012   114 UHLD = UINTER+2   ; hold 
                           000014   115 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   116 UVP = UCNTXT+2    ; variable pointer 
                           000018   117 UCP = UVP+2      ; code pointer
                           00001A   118 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   119 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   120 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   121 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    122 
                                    123 ;******  System Variables  ******
                           000022   124 XTEMP	=	URLAST +2;address called by CREATE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000024   125 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   126 PROD1 = XTEMP	;space for UM*
                           000024   127 PROD2 = PROD1+2
                           000026   128 PROD3 = PROD2+2
                           000028   129 CARRY = PROD3+2
                           00002A   130 SP0	= CARRY+2	;initial data stack pointer
                           00002C   131 RP0	= SP0+2		;initial return stack pointer
                           00002E   132 MS    =   RP0+2         ; millisecond counter 
                           000030   133 CNTDWN =  MS+2          ; count down timer 
                           000032   134 PTR16 = CNTDWN+2         ; 24 bits farptr 
                           000033   135 PTR8 = PTR16+1           ; least byte of farptr 
                           000035   136 SEEDX = PTR8+2          ; PRNG seed X 
                           000037   137 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    138 
                                    139 ; EEPROM persistant system variables in EEPROM   
                           004000   140 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   141 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   142 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   143 APP_VP = APP_CP+2  ; free data space pointer 
                                    144 
                                    145 
                                    146 ;***********************************************
                                    147 ;; Version control
                                    148 
                           000003   149 VER     =     3         ;major release version
                           000000   150 EXT     =     0         ;minor extension
                                    151 
                                    152 ;; Constants
                                    153 
                           00FFFF   154 TRUEE   =     0xFFFF      ;true flag
                                    155 
                           000040   156 COMPO   =     0x40     ;lexicon compile only bit
                           000080   157 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   158 MASKK   =     0x1F7F  ;lexicon bit mask
                                    159 
                           000002   160 CELLL   =     2       ;size of a cell
                           00000A   161 BASEE   =     10      ;default radix
                           000008   162 BKSPP   =     8       ;back space
                           00000A   163 LF      =     10      ;line feed
                           00000D   164 CRR     =     13      ;carriage return
                           00001B   165 ERR     =     27      ;error escape
                           000027   166 TIC     =     39      ;tick
                           0000CD   167 CALLL   =     0xCD     ;CALL opcodes
                           000080   168 IRET_CODE =   0x80    ; IRET opcode 
                                    169 
                                    170         .macro _ledon
                                    171         bres PD_ODR,#LD1_BIT
                                    172         .endm
                                    173 
                                    174         .macro _ledoff
                                    175         bset PD_ODR,#LD1_BIT
                                    176         .endm
                                    177 
                                    178 ;**********************************************************
                                    179         .area DATA (ABS)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000000                        180         .org RAMBASE 
                                    181 ;**********************************************************
                                    182 
                                    183 ;**********************************************************
                                    184         .area SSEG (ABS) ; STACK
      001700                        185         .org 0x1700
      001700                        186         .ds 256 
                                    187 ; space for DATSTK,TIB and STACK         
                                    188 ;**********************************************************
                                    189 
                                    190 ;**********************************************************
                                    191         .area HOME ; vectors table
                                    192 ;**********************************************************
      000000 82 00 00 16            193 	int main	        ; reset
      000004 82 00 00 00            194 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            195 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            196 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            197 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            198 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            199 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            200 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            201 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            202 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            203 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            204 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            205 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            206 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            207 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            208 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            209 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            210 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            211 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            212 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            213 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            214 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            215 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            216 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            217 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            218 	int Timer4Handler	; irq23
      000068 82 00 00 00            219 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            220 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            221 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            222 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            223 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            224 	int NonHandledInterrupt	; irq29
                                    225 
                                    226 ;**********************************************************
                                    227         .area CODE
                                    228 ;**********************************************************
                                    229 
                                    230 ; non handled interrupt reset MCU
      000000                        231 NonHandledInterrupt:
      000000 A6 80            [ 1]  232         ld a, #0x80
      000002 C7 50 D1         [ 1]  233         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    234 	;iret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 
                                    236 ; used for milliseconds counter 
                                    237 ; MS is 16 bits counter 
      000005                        238 Timer4Handler:
      000005 72 5F 53 42      [ 1]  239 	clr TIM4_SR 
      000009 BE 2E            [ 2]  240         ldw x,MS 
      00000B 5C               [ 2]  241         incw x 
      00000C BF 2E            [ 2]  242         ldw MS,x
      00000E BE 30            [ 2]  243         ldw x,CNTDWN 
      000010 27 03            [ 1]  244         jreq 1$
      000012 5A               [ 2]  245         decw x 
      000013 BF 30            [ 2]  246         ldw CNTDWN,x 
      000015                        247 1$:         
      000015 80               [11]  248         iret 
                                    249 
                                    250 
                                    251 ;; Main entry points and COLD start data
      000016                        252 main:
                                    253 ; clear all RAM
      000016 AE 00 00         [ 2]  254 	ldw X,#RAMBASE
      000019                        255 clear_ram0:
      000019 7F               [ 1]  256 	clr (X)
      00001A 5C               [ 2]  257 	incw X
      00001B A3 07 FF         [ 2]  258 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  259 	jrule clear_ram0
      000020 AE 07 FF         [ 2]  260         ldw x,#RPP
      000023 94               [ 1]  261         ldw sp,x
                                    262 ; set SEEDX and SEEDY to 1 
      000024 3C 36            [ 1]  263         inc SEEDX+1 
      000026 3C 38            [ 1]  264         inc SEEDY+1          
      000028 CC 00 47         [ 2]  265 	jp ORIG
                                    266 
                                    267 ; COLD initialize these variables.
      00002B                        268 UZERO:
      00002B 00 0A                  269         .word      BASEE   ;BASE
      00002D 00 00                  270         .word      0       ;tmp
      00002F 00 00                  271         .word      0       ;>IN
      000031 00 00                  272         .word      0       ;#TIB
      000033 07 00                  273         .word      TIBB    ;TIB
      000035 12 F3                  274         .word      INTER   ;'EVAL
      000037 00 00                  275         .word      0       ;HLD
      000039 20 69                  276         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  277         .word      VAR_BASE   ;variables free space pointer 
      00003D 21 00                  278         .word      app_space ; FLASH free space pointer 
      00003F 20 69                  279         .word      LASTN   ;LAST
      000041 00 00                  280         .word      0        ; OFFSET 
      000043 00 00                  281         .word      0       ; TFLASH
                                    282 ;       .word      0       ; URLAST   
      000045 00 00                  283 UEND:   .word      0
                                    284 
      000047                        285 ORIG:   
                                    286 ; initialize SP
      000047 AE 07 FF         [ 2]  287         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  288         LDW     SP,X
      00004B BF 2C            [ 2]  289         LDW     RP0,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00004D AE 06 80         [ 2]  290         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  291         LDW     SP0,X
                                    292 ; initialize PD_0 as output to control LED2
                                    293 ; added by Picatout 
      000052 72 10 50 12      [ 1]  294         bset PD_CR1,#LD1_BIT
      000056 72 10 50 13      [ 1]  295         bset PD_CR2,#LD1_BIT
      00005A 72 10 50 11      [ 1]  296         bset PD_DDR,#LD1_BIT
      00005E                        297         _ledoff
      00005E 72 10 50 0F      [ 1]    1         bset PD_ODR,#LD1_BIT
                                    298 ; initialize clock to HSE
                                    299 ; no divisor 16Mhz 
                                    300 ; Added by Picatout 
      000062                        301 clock_init:
      000062 72 5F 50 C6      [ 1]  302         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  303 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00006A A6 B4            [ 1]  304 	ld a,#CLK_SWR_HSE
      00006C C7 50 C4         [ 1]  305 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  306 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  307 	jrne 1$
                                    308         
                                    309 ; initialize UART1, 115200 8N1
      000074                        310 uart2_init:
      000074 72 16 50 C7      [ 1]  311 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    312 	; configure tx pin
      000078 72 1A 50 11      [ 1]  313 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      00007C 72 1A 50 12      [ 1]  314 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000080 72 1A 50 13      [ 1]  315 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    316 	; baud rate 115200 Fmaster=8Mhz  
      000084 35 0B 52 43      [ 1]  317 	mov UART2_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 42      [ 1]  318 	mov UART2_BRR1,#0x8
      00008C 35 0C 52 45      [ 1]  319 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    320 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  321 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  322 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  323 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  324 	bset TIM4_IER,#TIM4_IER_UIE 
                                    325 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  326         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  327         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  328         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  329         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  330         rim
      0000AB CC 19 95         [ 2]  331         jp  COLD   ;default=MN1
                                    332 
                                    333 
                                    334 ;; place MCU in sleep mode with
                                    335 ;; halt opcode 
                                    336 ;; BYE ( -- )
      0000AE 00 00                  337         .word 0
                           0000B0   338         LINK=.
      0000B0 03                     339         .byte 3 
      0000B1 42 59 45               340         .ascii "BYE"
      0000B4                        341 BYE: 
      0000B4 8E               [10]  342         halt 
      0000B5 81               [ 4]  343         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    344 
                                    345 ; Enable interrupts 
                                    346 ; EI ( -- )
      0000B6 00 B0                  347         .word LINK 
                           0000B8   348         LINK=.
      0000B8 02                     349         .byte 2
      0000B9 45 49                  350         .ascii "EI"
      0000BB                        351 EI:
      0000BB 9A               [ 1]  352         rim 
      0000BC 81               [ 4]  353         ret 
                                    354 
                                    355 ; Disable interrupts
                                    356 ; DI ( -- )
      0000BD 00 B8                  357         .word LINK 
                           0000BF   358         LINK=.
      0000BF 02                     359         .byte 2 
      0000C0 44 49                  360         .ascii "DI"
      0000C2                        361 DI:
      0000C2 9B               [ 1]  362         sim 
      0000C3 81               [ 4]  363         ret 
                                    364 
                                    365 ; set interrupt priority level 
                                    366 ; SET-ISP ( n1 n2 -- )
                                    367 ; n1 level {1..3}
                                    368 ; n2 vector {0..29}
      0000C4 00 BF                  369         .word LINK 
                           0000C6   370         LINK=.
      0000C6 07                     371         .byte 7 
      0000C7 53 45 54 2D 49 53 50   372         .ascii "SET-ISP"
      0000CE                        373 SETISP:
      0000CE 90 93            [ 1]  374         ldw y,x 
      0000D0 90 FE            [ 2]  375         ldw y,(y)
      0000D2 A6 04            [ 1]  376         ld a,#4 ; 4 slot per register 
                                    377 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  378         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  379         and a,#3 
      0000D8 48               [ 1]  380         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  381         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  382         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  383         clrw y 
      0000E0 90 97            [ 1]  384         ld yl,a 
      0000E2 1D 00 02         [ 2]  385         subw x,#CELLL 
      0000E5 FF               [ 2]  386         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  387         ldw y,x 
      0000E8 90 EE 02         [ 2]  388         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  389         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  390         subw x,#CELLL 
      0000F0 FF               [ 2]  391         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 09         [ 4]  392         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B0         [ 4]  393         call DOLIT 
      0000F7 00 03                  394         .word 3
      0000F9 CD 04 EF         [ 4]  395         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 F2         [ 4]  396         call LSHIFT ; creat slot mask 
      0000FF CD 06 F4         [ 4]  397         call INVER  ; ( level reg lshift rval mask )
      000102 CD 05 2B         [ 4]  398         call ANDD ; ( level reg lshift slot_masked )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000105 CD 04 A8         [ 4]  399         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 9A         [ 4]  400         call ROT  ; ( reg lshift level )
      00010B CD 04 EF         [ 4]  401         call SWAPP ; ( reg level lshift )
      00010E CD 09 F2         [ 4]  402         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 89         [ 4]  403         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 3F         [ 4]  404         call ORR   ; ( reg updated_rval )
      000117 CD 04 EF         [ 4]  405         call SWAPP 
      00011A CD 04 45         [ 4]  406         call CSTOR
                                    407 
                                    408 ; sÃ©lectionne l'application 
                                    409 ; qui dÃ©marre automatique lors 
                                    410 ; d'un COLD start 
      00011D 00 C6                  411         .word LINK 
                           00011F   412         LINK=.
      00011F 07                     413         .byte 7
      000120 41 55 54 4F 52 55 4E   414         .ascii "AUTORUN"
      000127                        415 AUTORUN:
      000127 CD 10 B8         [ 4]  416         call TOKEN 
      00012A CD 04 DF         [ 4]  417         call DUPP 
      00012D CD 03 E3         [ 4]  418         call QBRAN 
      000130 02 09                  419         .word FORGET2
      000132 CD 11 B5         [ 4]  420         call NAMEQ
      000135 CD 06 89         [ 4]  421         call QDUP 
      000138 CD 03 E3         [ 4]  422         call QBRAN 
      00013B 02 09                  423         .word FORGET2
      00013D CD 04 D5         [ 4]  424         call DROP 
      000140 1D 00 02         [ 2]  425         subw x,#CELLL 
      000143 90 AE 40 02      [ 2]  426         ldw y,#APP_RUN 
      000147 FF               [ 2]  427         ldw (x),y 
      000148 CC 1C 92         [ 2]  428         jp EE_STORE 
                                    429 
                                    430 ;; Reset dictionary pointer before 
                                    431 ;; forgotten word. RAM space and 
                                    432 ;; interrupt vector defined after 
                                    433 ;; must be resetted also.
      00014B 01 1F                  434         .word LINK 
                           00014D   435         LINK=.
      00014D 06                     436         .byte 6
      00014E 46 4F 52 47 45 54      437         .ascii "FORGET" 
      000154                        438 FORGET: 
      000154 CD 10 B8         [ 4]  439         call TOKEN
      000157 CD 04 DF         [ 4]  440         call DUPP 
      00015A CD 03 E3         [ 4]  441         call QBRAN 
      00015D 02 09                  442         .word FORGET2
      00015F CD 11 B5         [ 4]  443         call NAMEQ ; ( a -- ca na | a F )
      000162 CD 06 89         [ 4]  444         call QDUP 
      000165 CD 03 E3         [ 4]  445         call QBRAN 
      000168 02 09                  446         .word FORGET2
                                    447 ; only forget users words 
      00016A CD 04 DF         [ 4]  448         call DUPP ; ( ca na na )
      00016D CD 03 B0         [ 4]  449         call DOLIT 
      000170 21 00                  450         .word app_space 
      000172 CD 04 EF         [ 4]  451         call SWAPP 
      000175 CD 07 9A         [ 4]  452         call  ULESS 
      000178 CD 03 E3         [ 4]  453         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00017B 01 CB                  454         .word FORGET6 
                                    455 ; ( ca na -- )        
                                    456 ;reset ivec with address >= ca
      00017D CD 04 EF         [ 4]  457         call SWAPP ; ( na ca -- ) 
      000180 CD 1E 53         [ 4]  458         call CHKIVEC ; ( na -- ) 
                                    459 ; start at LAST and link back to na 
                                    460 ; if variable found reset VP at that point.
      000183                        461 FORGET1:
      000183 CD 06 4B         [ 4]  462         call LAST 
      000186 CD 04 38         [ 4]  463         call AT 
      000189 CD 04 DF         [ 4]  464         call DUPP  ; ( -- na last last )
      00018C CD 02 1F         [ 4]  465         call FREEVAR ; ( -- na last )
      00018F CD 04 DF         [ 4]  466         call DUPP 
      000192 CD 03 B0         [ 4]  467         call DOLIT 
      000195 00 02                  468         .word 2 
      000197 CD 07 53         [ 4]  469         call SUBB ; ( na last -- na last lfa ) link address 
      00019A CD 04 38         [ 4]  470         call AT 
      00019D CD 04 DF         [ 4]  471         call DUPP ; ( -- na last a a )
      0001A0 CD 06 1F         [ 4]  472         call CNTXT 
      0001A3 CD 04 21         [ 4]  473         call STORE
      0001A6 CD 06 4B         [ 4]  474         call LAST  
      0001A9 CD 04 21         [ 4]  475         call STORE ; ( --  na last )
      0001AC CD 05 09         [ 4]  476         call OVER 
      0001AF CD 07 7B         [ 4]  477         call EQUAL ; ( na last na -- na T|F ) 
      0001B2 CD 03 E3         [ 4]  478         call QBRAN 
      0001B5 01 83                  479         .word FORGET1 
                                    480 ; ( na -- )
      0001B7 CD 03 B0         [ 4]  481         call DOLIT 
      0001BA 00 02                  482         .word 2 
      0001BC CD 07 53         [ 4]  483         call SUBB 
      0001BF CD 06 3B         [ 4]  484         call CPP 
      0001C2 CD 04 21         [ 4]  485         call STORE  
      0001C5 CD 1B 54         [ 4]  486         call UPDATCP 
      0001C8 CC 1B 2B         [ 2]  487         jp UPDATLAST 
      0001CB                        488 FORGET6: ; tried to forget a RAM or system word 
                                    489 ; ( ca na -- )
      0001CB 1D 00 02         [ 2]  490         subw x,#CELLL 
      0001CE 90 BE 2A         [ 2]  491         ldw y,SP0 
      0001D1 FF               [ 2]  492         ldw (x),y  
      0001D2 CD 07 9A         [ 4]  493         call ULESS
      0001D5 CD 03 E3         [ 4]  494         call QBRAN 
      0001D8 01 FB                  495         .word PROTECTED 
      0001DA CD 12 C1         [ 4]  496         call ABORQ 
      0001DD 1D                     497         .byte 29
      0001DE 20 46 6F 72 20 52 41   498         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FB                        499 PROTECTED:
      0001FB CD 12 C1         [ 4]  500         call ABORQ
      0001FE 0A                     501         .byte 10
      0001FF 20 50 72 6F 74 65 63   502         .ascii " Protected"
             74 65 64
      000209                        503 FORGET2: ; no name or not found in dictionary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000209 CD 12 C1         [ 4]  504         call ABORQ
      00020C 05                     505         .byte 5
      00020D 20 77 68 61 74         506         .ascii " what"
      000212                        507 FORGET4:
      000212 CC 04 D5         [ 2]  508         jp DROP 
                                    509 
                                    510 
                                    511 ;---------------------------------
                                    512 ; if na is variable 
                                    513 ; free variable data  
                                    514 ; FREEVAR ( na -- )
                                    515 ;---------------------------------
      000215 01 4D                  516         .word LINK 
                           000217   517         LINK=.
      000217 07                     518         .byte 7 
      000218 46 52 45 45 56 41 52   519         .ascii "FREEVAR"
      00021F                        520 FREEVAR:
      00021F CD 04 DF         [ 4]  521         call DUPP ; ( na na -- )
      000222 CD 04 56         [ 4]  522         CALL CAT  ; ( na c -- )
      000225 CD 09 D4         [ 4]  523         call ONEP ;
      000228 CD 06 DA         [ 4]  524         CALL PLUS ; ( na c+1 -- ca ) 
      00022B CD 09 D4         [ 4]  525         call ONEP ; ( ca+ -- ) to get routne address 
      00022E CD 04 DF         [ 4]  526         call DUPP ; ( ca+ ca+ -- )
      000231 CD 04 38         [ 4]  527         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000234 CD 03 B0         [ 4]  528         call DOLIT 
      000237 05 8C                  529         .word DOVAR ; if routine address is DOVAR then variable 
      000239 CD 07 7B         [ 4]  530         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00023C CD 03 E3         [ 4]  531         call QBRAN 
      00023F 02 55                  532         .word FREEVAR4 
      000241 CD 03 B0         [ 4]  533         call DOLIT 
      000244 00 02                  534         .word 2 
      000246 CD 06 DA         [ 4]  535         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000249 CD 04 38         [ 4]  536         call AT 
      00024C CD 06 2D         [ 4]  537         call VPP   
      00024F CD 04 21         [ 4]  538         call STORE 
      000252 CC 1B 6B         [ 2]  539         jp UPDATVP 
      000255                        540 FREEVAR4: ; not variable
      000255 CC 04 D5         [ 2]  541         jp  DROP 
                                    542 
                                    543 ;    SEED ( n -- )
                                    544 ; Initialize PRNG seed with n 
      000258 02 17                  545         .word LINK 
                           00025A   546         LINK=. 
      00025A 04                     547         .byte 4 
      00025B 53 45 45 44            548         .ascii "SEED" 
      00025F                        549 SEED:
      00025F 90 93            [ 1]  550         ldw y,x 
      000261 1C 00 02         [ 2]  551         addw x,#CELLL
      000264 90 FE            [ 2]  552         ldw y,(y)
      000266 90 9E            [ 1]  553         ld a,yh 
      000268 B7 35            [ 1]  554         ld SEEDX,a 
      00026A 90 9F            [ 1]  555         ld a,yl 
      00026C B7 37            [ 1]  556         ld SEEDY,a 
      00026E 81               [ 4]  557         ret 
                                    558 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    559 ;    RANDOM ( u1 -- u2 )
                                    560 ; Pseudo random number betwen 0 and u1-1
      00026F 02 5A                  561         .word LINK 
                           000271   562         LINK=.
      000271 06                     563         .byte 6
      000272 52 41 4E 44 4F 4D      564         .ascii "RANDOM" 
      000278                        565 RANDOM:
                                    566 ;local variable 
                           000001   567         SPSAVE=1
                           000002   568         VSIZE=2 
      000278 52 02            [ 2]  569         sub sp,#VSIZE
      00027A 1F 01            [ 2]  570         ldw (SPSAVE,sp),x  
                                    571 ; XTEMP=(SEEDX<<5)^SEEDX 
      00027C 90 93            [ 1]  572         ldw y,x 
      00027E 90 FE            [ 2]  573         ldw y,(y)
      000280 90 BF 24         [ 2]  574         ldw YTEMP,y 
      000283 BE 35            [ 2]  575 	ldw x,SEEDX 
      000285 58               [ 2]  576 	sllw x 
      000286 58               [ 2]  577 	sllw x 
      000287 58               [ 2]  578 	sllw x 
      000288 58               [ 2]  579 	sllw x 
      000289 58               [ 2]  580 	sllw x 
      00028A 9E               [ 1]  581 	ld a,xh 
      00028B B8 35            [ 1]  582 	xor a,SEEDX 
      00028D B7 22            [ 1]  583 	ld XTEMP,a 
      00028F 9F               [ 1]  584 	ld a,xl 
      000290 B8 36            [ 1]  585 	xor a,SEEDX+1 
      000292 B7 23            [ 1]  586 	ld XTEMP+1,a 
                                    587 ; SEEDX=SEEDY 
      000294 BE 37            [ 2]  588 	ldw x,SEEDY 
      000296 BF 35            [ 2]  589 	ldw SEEDX,x  
                                    590 ; SEEDY=SEEDY^(SEEDY>>1)
      000298 54               [ 2]  591 	srlw x 
      000299 9E               [ 1]  592 	ld a,xh 
      00029A B8 37            [ 1]  593 	xor a,SEEDY 
      00029C B7 37            [ 1]  594 	ld SEEDY,a  
      00029E 9F               [ 1]  595 	ld a,xl 
      00029F B8 38            [ 1]  596 	xor a,SEEDY+1 
      0002A1 B7 38            [ 1]  597 	ld SEEDY+1,a 
                                    598 ; XTEMP>>3 
      0002A3 BE 22            [ 2]  599 	ldw x,XTEMP 
      0002A5 54               [ 2]  600 	srlw x 
      0002A6 54               [ 2]  601 	srlw x 
      0002A7 54               [ 2]  602 	srlw x 
                                    603 ; x=XTEMP^x 
      0002A8 9E               [ 1]  604 	ld a,xh 
      0002A9 B8 22            [ 1]  605 	xor a,XTEMP 
      0002AB 95               [ 1]  606 	ld xh,a 
      0002AC 9F               [ 1]  607 	ld a,xl 
      0002AD B8 23            [ 1]  608 	xor a,XTEMP+1  
      0002AF 97               [ 1]  609 	ld xl,a 
                                    610 ; SEEDY=x^SEEDY 
      0002B0 B8 38            [ 1]  611 	xor a,SEEDY+1
      0002B2 97               [ 1]  612 	ld xl,a 
      0002B3 9E               [ 1]  613 	ld a,xh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002B4 B8 37            [ 1]  614 	xor a,SEEDY
      0002B6 95               [ 1]  615 	ld xh,a 
      0002B7 BF 37            [ 2]  616 	ldw SEEDY,x 
                                    617 ; return SEEDY modulo YTEMP  
      0002B9 90 BE 24         [ 2]  618 	ldw y,YTEMP  
      0002BC 65               [ 2]  619 	divw x,y 
      0002BD 1E 01            [ 2]  620 	ldw x,(SPSAVE,sp)
      0002BF FF               [ 2]  621         ldw (x),y 
      0002C0 5B 02            [ 2]  622         addw sp,#VSIZE 
      0002C2 81               [ 4]  623 	ret 
                                    624 
                                    625 
                                    626 ;;
                                    627 ;; get millisecond counter 
                                    628 ;; msec ( -- u )
                                    629 ;; Added by Picatout 2020-04-26
      0002C3 02 71                  630         .word LINK  
                           0002C5   631         LINK = . 
      0002C5 04                     632         .byte 4
      0002C6 4D 53 45 43            633         .ascii "MSEC"
      0002CA                        634 MSEC: 
      0002CA 1D 00 02         [ 2]  635         subw x,#CELLL 
      0002CD 90 BE 2E         [ 2]  636         ldw y,MS 
      0002D0 FF               [ 2]  637         ldw (x),y 
      0002D1 81               [ 4]  638         ret 
                                    639 
                                    640 ; suspend execution for u msec 
                                    641 ;  pause ( u -- )
      0002D2 02 C5                  642         .word LINK 
                           0002D4   643         LINK=.
      0002D4 05                     644         .byte 5 
      0002D5 50 41 55 53 45         645         .ascii "PAUSE"
      0002DA                        646 PAUSE:
      0002DA 90 93            [ 1]  647         ldw y,x
      0002DC 90 FE            [ 2]  648         ldw y,(y)
      0002DE 72 B9 00 2E      [ 2]  649         addw y,MS 
      0002E2 8F               [10]  650 1$:     wfi  
      0002E3 90 B3 2E         [ 2]  651         cpw y,MS  
      0002E6 26 FA            [ 1]  652         jrne 1$        
      0002E8 1C 00 02         [ 2]  653         addw x,#CELLL 
      0002EB 81               [ 4]  654         ret 
                                    655 
                                    656 ; initialize count down timer 
                                    657 ;  TIMER ( u -- )  milliseconds 
      0002EC 02 D4                  658         .word LINK 
                           0002EE   659         LINK=.
      0002EE 05                     660         .byte 5 
      0002EF 54 49 4D 45 52         661         .ascii "TIMER" 
      0002F4                        662 TIMER:
      0002F4 90 93            [ 1]  663         ldw y,x
      0002F6 90 FE            [ 2]  664         ldw y,(y) 
      0002F8 90 BF 30         [ 2]  665         ldw CNTDWN,y
      0002FB 1C 00 02         [ 2]  666         addw x,#CELLL 
      0002FE 81               [ 4]  667         ret 
                                    668 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    669 ; check for TIMER exiparition 
                                    670 ;  TIMEOUT? ( -- 0|-1 )
      0002FF 02 EE                  671         .word LINK 
                           000301   672         LINK=. 
      000301 08                     673         .byte 8 
      000302 54 49 4D 45 4F 55 54   674         .ascii "TIMEOUT?"
             3F
      00030A                        675 TIMEOUTQ: 
      00030A 4F               [ 1]  676         clr a
      00030B 1D 00 02         [ 2]  677         subw x,#CELLL 
      00030E 90 BE 30         [ 2]  678         ldw y,CNTDWN 
      000311 26 01            [ 1]  679         jrne 1$ 
      000313 43               [ 1]  680         cpl a 
      000314 E7 01            [ 1]  681 1$:     ld (1,x),a 
      000316 F7               [ 1]  682         ld (x),a 
      000317 81               [ 4]  683         ret         
                                    684 
                                    685 ; reboot MCU 
                                    686 ; REBOOT ( -- )
      000318 03 01                  687         .word LINK 
                           00031A   688         LINK=. 
      00031A 06                     689         .byte 6 
      00031B 52 45 42 4F 4F 54      690         .ascii "REBOOT"
      000321                        691 reboot:
      000321 CC 00 00         [ 2]  692         jp NonHandledInterrupt
                                    693 
                                    694 ; compile to flash memory 
                                    695 ; TO-FLASH ( -- )
      000324 03 1A                  696         .word LINK 
                           000326   697         LINK=.
      000326 08                     698         .byte 8
      000327 54 4F 2D 46 4C 41 53   699         .ascii "TO-FLASH"
             48
      00032F                        700 TOFLASH:
      00032F CD 06 5E         [ 4]  701         call RAMLAST 
      000332 CD 04 38         [ 4]  702         call AT 
      000335 CD 06 89         [ 4]  703         call QDUP 
      000338 CD 03 E3         [ 4]  704         call QBRAN
      00033B 03 5E                  705         .word 1$
      00033D CD 12 C1         [ 4]  706         call ABORQ 
      000340 1D                     707         .byte 29
      000341 20 4E 6F 74 20 77 68   708         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      00035E 90 AE FF FF      [ 2]  709 1$:     ldw y,#-1 
      000362 90 BF 1E         [ 2]  710         ldw UTFLASH,y
      000365 81               [ 4]  711         ret 
                                    712 
                                    713 ; compile to RAM 
                                    714 ; TO-RAM ( -- )
      000366 03 26                  715         .word LINK 
                           000368   716         LINK=.
      000368 06                     717         .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000369 54 4F 2D 52 41 4D      718         .ascii "TO-RAM"
      00036F                        719 TORAM:
      00036F 90 5F            [ 1]  720         clrw y 
      000371 90 BF 1E         [ 2]  721         ldw UTFLASH,y 
      000374 81               [ 4]  722         ret 
                                    723         
                                    724 
                                    725 ;; Device dependent I/O
                                    726 ;       ?RX     ( -- c T | F )
                                    727 ;         Return input byte and true, or false.
      000375 03 68                  728         .word      LINK 
                           000377   729 LINK	= .
      000377 04                     730         .byte      4
      000378 3F 4B 45 59            731         .ascii     "?KEY"
      00037C                        732 QKEY:
      00037C 90 5F            [ 1]  733         CLRW Y 
      00037E 72 0B 52 40 0B   [ 2]  734         BTJF UART2_SR,#UART_SR_RXNE,INCH   ;check status
      000383 C6 52 41         [ 1]  735         LD    A,UART2_DR   ;get char in A
      000386 1D 00 02         [ 2]  736 	SUBW	X,#2
      000389 E7 01            [ 1]  737         LD     (1,X),A
      00038B 7F               [ 1]  738 	CLR	(X)
      00038C 90 53            [ 2]  739         CPLW     Y
      00038E                        740 INCH:
      00038E 1D 00 02         [ 2]  741 	SUBW	X,#2
      000391 FF               [ 2]  742         LDW     (X),Y
      000392 81               [ 4]  743         RET
                                    744 
                                    745 ;       TX!     ( c -- )
                                    746 ;       Send character c to  output device.
      000393 03 77                  747         .word      LINK
                           000395   748 LINK	= .
      000395 04                     749         .byte      4
      000396 45 4D 49 54            750         .ascii     "EMIT"
      00039A                        751 EMIT:
      00039A E6 01            [ 1]  752         LD     A,(1,X)
      00039C 1C 00 02         [ 2]  753 	ADDW	X,#2
      00039F 72 0F 52 40 FB   [ 2]  754 OUTPUT: BTJF UART2_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A4 C7 52 41         [ 1]  755         LD    UART2_DR,A   ;send A
      0003A7 81               [ 4]  756         RET
                                    757 
                                    758 ;; The kernel
                                    759 
                                    760 ;       doLIT   ( -- w )
                                    761 ;       Push an inline literal.
      0003A8 03 95                  762         .word      LINK
                           0003AA   763 LINK	= 	.
      0003AA 45                     764 	.byte      COMPO+5
      0003AB 44 4F 4C 49 54         765         .ascii     "DOLIT"
      0003B0                        766 DOLIT:
      0003B0 1D 00 02         [ 2]  767 	SUBW X,#2
      0003B3 16 01            [ 2]  768         ldw y,(1,sp)
      0003B5 90 FE            [ 2]  769         ldw y,(y)
      0003B7 FF               [ 2]  770         ldw (x),y
      0003B8 90 85            [ 2]  771         popw y 
      0003BA 90 EC 02         [ 2]  772         jp (2,y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    773 
                                    774 ;       next    ( -- )
                                    775 ;       Code for  single index loop.
      0003BD 03 AA                  776         .word      LINK
                           0003BF   777 LINK	= 	.
      0003BF 44                     778 	.byte      COMPO+4
      0003C0 6E 65 78 74            779         .ascii     "next"
      0003C4                        780 DONXT:
      0003C4 16 03            [ 2]  781 	LDW Y,(3,SP)
      0003C6 90 5A            [ 2]  782 	DECW Y
      0003C8 2A 07            [ 1]  783 	JRPL NEX1 ; jump if N=0
      0003CA 90 85            [ 2]  784 	POPW Y
      0003CC 5B 02            [ 2]  785         addw sp,#2
      0003CE 90 EC 02         [ 2]  786         JP (2,Y)
      0003D1                        787 NEX1:
      0003D1 17 03            [ 2]  788         LDW (3,SP),Y
      0003D3 90 85            [ 2]  789         POPW Y
      0003D5 90 FE            [ 2]  790 	LDW Y,(Y)
      0003D7 90 FC            [ 2]  791 	JP (Y)
                                    792 
                                    793 ;       ?branch ( f -- )
                                    794 ;       Branch if flag is zero.
      0003D9 03 BF                  795         .word      LINK
                           0003DB   796 LINK	= 	.
      0003DB 47                     797 	.byte      COMPO+7
      0003DC 3F 42 52 41 4E 43 48   798         .ascii     "?BRANCH"
      0003E3                        799 QBRAN:	
      0003E3 90 93            [ 1]  800         LDW Y,X
      0003E5 1C 00 02         [ 2]  801 	ADDW X,#2
      0003E8 90 FE            [ 2]  802 	LDW Y,(Y)
      0003EA 27 0E            [ 1]  803         JREQ     BRAN
      0003EC 90 85            [ 2]  804 	POPW Y
      0003EE 90 EC 02         [ 2]  805 	JP (2,Y)
                                    806         
                                    807 ;       branch  ( -- )
                                    808 ;       Branch to an inline address.
      0003F1 03 DB                  809         .word      LINK
                           0003F3   810 LINK	= 	.
      0003F3 46                     811 	.byte      COMPO+6
      0003F4 42 52 41 4E 43 48      812         .ascii     "BRANCH"
      0003FA                        813 BRAN:
      0003FA 90 85            [ 2]  814         POPW Y
      0003FC 90 FE            [ 2]  815 	LDW Y,(Y)
      0003FE 90 FC            [ 2]  816         JP     (Y)
                                    817 
                                    818 ;       EXECUTE ( ca -- )
                                    819 ;       Execute  word at ca.
      000400 03 F3                  820         .word      LINK
                           000402   821 LINK	= 	.
      000402 07                     822         .byte       7
      000403 45 58 45 43 55 54 45   823         .ascii     "EXECUTE"
      00040A                        824 EXECU:
      00040A 90 93            [ 1]  825         LDW Y,X
      00040C 1C 00 02         [ 2]  826 	ADDW X,#2
      00040F 90 FE            [ 2]  827 	LDW  Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000411 90 FC            [ 2]  828         JP   (Y)
                                    829 
                           000001   830 OPTIMIZE = 1
                           000001   831 .if OPTIMIZE 
                                    832 ; remplacement de CALL EXIT par 
                                    833 ; le opcode de RET.
                                    834 ; Voir modification au code de ";"
                                    835 ;
                                    836 ;       EXIT    ( -- )
                                    837 ;       Terminate a colon definition.
      000413 04 02                  838         .word      LINK
                           000415   839 LINK = .
      000415 04                     840         .byte      4
      000416 45 58 49 54            841         .ascii     "EXIT"
      00041A                        842 EXIT:
      00041A 90 85            [ 2]  843         POPW Y
      00041C 81               [ 4]  844         RET
                                    845 .endif 
                                    846 
                                    847 ;       !       ( w a -- )
                                    848 ;       Pop  data stack to memory.
      00041D 04 15                  849         .word      LINK
                           00041F   850 LINK = .
      00041F 01                     851         .byte      1
      000420 21                     852         .ascii     "!"
      000421                        853 STORE:
      000421 90 93            [ 1]  854         LDW Y,X
      000423 90 FE            [ 2]  855         LDW Y,(Y)    ;Y=a
      000425 90 BF 24         [ 2]  856         LDW YTEMP,Y
      000428 90 93            [ 1]  857         LDW Y,X
      00042A 90 EE 02         [ 2]  858         LDW Y,(2,Y)
      00042D 91 CF 24         [ 5]  859         LDW [YTEMP],Y ;store w at a
      000430 1C 00 04         [ 2]  860         ADDW X,#4 ; DDROP 
      000433 81               [ 4]  861         RET     
                                    862 
                                    863 ;       @       ( a -- w )
                                    864 ;       Push memory location to stack.
      000434 04 1F                  865         .word      LINK
                           000436   866 LINK	= 	.
      000436 01                     867         .byte    1
      000437 40                     868         .ascii	"@"
      000438                        869 AT:
      000438 90 93            [ 1]  870         LDW Y,X     ;Y = a
      00043A 90 FE            [ 2]  871         LDW Y,(Y)   ; address 
      00043C 90 FE            [ 2]  872         LDW Y,(Y)   ; value 
      00043E FF               [ 2]  873         LDW (X),Y ;w = @Y
      00043F 81               [ 4]  874         RET     
                                    875 
                                    876 ;       C!      ( c b -- )
                                    877 ;       Pop  data stack to byte memory.
      000440 04 36                  878         .word      LINK
                           000442   879 LINK	= .
      000442 02                     880         .byte      2
      000443 43 21                  881         .ascii     "C!"
      000445                        882 CSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000445 90 93            [ 1]  883         LDW Y,X
      000447 90 FE            [ 2]  884 	LDW Y,(Y)    ;Y=b
      000449 E6 03            [ 1]  885         LD A,(3,X)    ;D = c
      00044B 90 F7            [ 1]  886         LD  (Y),A     ;store c at b
      00044D 1C 00 04         [ 2]  887 	ADDW X,#4 ; DDROP 
      000450 81               [ 4]  888         RET     
                                    889 
                                    890 ;       C@      ( b -- c )
                                    891 ;       Push byte in memory to  stack.
      000451 04 42                  892         .word      LINK
                           000453   893 LINK	= 	.
      000453 02                     894         .byte      2
      000454 43 40                  895         .ascii     "C@"
      000456                        896 CAT:
      000456 90 93            [ 1]  897         LDW Y,X     ;Y=b
      000458 90 FE            [ 2]  898         LDW Y,(Y)
      00045A 90 F6            [ 1]  899         LD A,(Y)
      00045C E7 01            [ 1]  900         LD (1,X),A
      00045E 7F               [ 1]  901         CLR (X)
      00045F 81               [ 4]  902         RET     
                                    903 
                                    904 ;       RP@     ( -- a )
                                    905 ;       Push current RP to data stack.
      000460 04 53                  906         .word      LINK
                           000462   907 LINK	= .
      000462 03                     908         .byte      3
      000463 52 50 40               909         .ascii     "RP@"
      000466                        910 RPAT:
      000466 90 96            [ 1]  911         LDW Y,SP    ;save return addr
      000468 1D 00 02         [ 2]  912         SUBW X,#2
      00046B FF               [ 2]  913         LDW (X),Y
      00046C 81               [ 4]  914         RET     
                                    915 
                                    916 ;       RP!     ( a -- )
                                    917 ;       Set  return stack pointer.
      00046D 04 62                  918         .word      LINK
                           00046F   919 LINK	= 	. 
      00046F 43                     920 	.byte      COMPO+3
      000470 52 50 21               921         .ascii     "RP!"
      000473                        922 RPSTO:
      000473 90 85            [ 2]  923         POPW Y
      000475 90 BF 24         [ 2]  924         LDW YTEMP,Y
      000478 90 93            [ 1]  925         LDW Y,X
      00047A 90 FE            [ 2]  926         LDW Y,(Y)
      00047C 90 94            [ 1]  927         LDW SP,Y
      00047E 1C 00 02         [ 2]  928         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000481 92 CC 24         [ 5]  929         JP [YTEMP]
                                    930 
                                    931 ;       R>      ( -- w )
                                    932 ;       Pop return stack to data stack.
      000484 04 6F                  933         .word      LINK
                           000486   934 LINK	= 	. 
      000486 42                     935 	.byte      COMPO+2
      000487 52 3E                  936         .ascii     "R>"
      000489                        937 RFROM:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000489 90 85            [ 2]  938         POPW Y    ;save return addr
      00048B 90 BF 24         [ 2]  939         LDW YTEMP,Y
      00048E 90 85            [ 2]  940         POPW Y
      000490 1D 00 02         [ 2]  941         SUBW X,#2
      000493 FF               [ 2]  942         LDW (X),Y
      000494 92 CC 24         [ 5]  943         JP [YTEMP]
                                    944 
                                    945 ;       R@      ( -- w )
                                    946 ;       Copy top of return stack to stack.
      000497 04 86                  947         .word      LINK
                           000499   948 LINK	= 	. 
      000499 02                     949         .byte      2
      00049A 52 40                  950         .ascii     "R@"
      00049C                        951 RAT:
      00049C 16 03            [ 2]  952         ldw y,(3,sp)
      00049E 1D 00 02         [ 2]  953         subw x,#CELLL 
      0004A1 FF               [ 2]  954         ldw (x),y 
      0004A2 81               [ 4]  955         ret 
                                    956 
                                    957 ;       >R      ( w -- )
                                    958 ;       Push data stack to return stack.
      0004A3 04 99                  959         .word      LINK
                           0004A5   960 LINK	= 	. 
      0004A5 42                     961 	.byte      COMPO+2
      0004A6 3E 52                  962         .ascii     ">R"
      0004A8                        963 TOR:
      0004A8 90 85            [ 2]  964         POPW Y    ;save return addr
      0004AA 90 BF 24         [ 2]  965         LDW YTEMP,Y
      0004AD 90 93            [ 1]  966         LDW Y,X
      0004AF 90 FE            [ 2]  967         LDW Y,(Y)
      0004B1 90 89            [ 2]  968         PUSHW Y    ;restore return addr
      0004B3 1C 00 02         [ 2]  969         ADDW X,#2
      0004B6 92 CC 24         [ 5]  970         JP [YTEMP]
                                    971 
                                    972 ;       SP@     ( -- a )
                                    973 ;       Push current stack pointer.
      0004B9 04 A5                  974         .word      LINK
                           0004BB   975 LINK	= 	. 
      0004BB 03                     976         .byte      3
      0004BC 53 50 40               977         .ascii     "SP@"
      0004BF                        978 SPAT:
      0004BF 90 93            [ 1]  979 	LDW Y,X
      0004C1 1D 00 02         [ 2]  980         SUBW X,#2
      0004C4 FF               [ 2]  981 	LDW (X),Y
      0004C5 81               [ 4]  982         RET     
                                    983 
                                    984 ;       SP!     ( a -- )
                                    985 ;       Set  data stack pointer.
      0004C6 04 BB                  986         .word      LINK
                           0004C8   987 LINK	= 	. 
      0004C8 03                     988         .byte      3
      0004C9 53 50 21               989         .ascii     "SP!"
      0004CC                        990 SPSTO:
      0004CC FE               [ 2]  991         LDW     X,(X)     ;X = a
      0004CD 81               [ 4]  992         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    993 
                                    994 ;       DROP    ( w -- )
                                    995 ;       Discard top stack item.
      0004CE 04 C8                  996         .word      LINK
                           0004D0   997 LINK	= 	. 
      0004D0 04                     998         .byte      4
      0004D1 44 52 4F 50            999         .ascii     "DROP"
      0004D5                       1000 DROP:
      0004D5 1C 00 02         [ 2] 1001         ADDW X,#2     
      0004D8 81               [ 4] 1002         RET     
                                   1003 
                                   1004 ;       DUP     ( w -- w w )
                                   1005 ;       Duplicate  top stack item.
      0004D9 04 D0                 1006         .word      LINK
                           0004DB  1007 LINK	= 	. 
      0004DB 03                    1008         .byte      3
      0004DC 44 55 50              1009         .ascii     "DUP"
      0004DF                       1010 DUPP:
      0004DF 90 93            [ 1] 1011 	LDW Y,X
      0004E1 1D 00 02         [ 2] 1012         SUBW X,#2
      0004E4 90 FE            [ 2] 1013 	LDW Y,(Y)
      0004E6 FF               [ 2] 1014 	LDW (X),Y
      0004E7 81               [ 4] 1015         RET     
                                   1016 
                                   1017 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1018 ;       Exchange top two stack items.
      0004E8 04 DB                 1019         .word      LINK
                           0004EA  1020 LINK	= 	. 
      0004EA 04                    1021         .byte      4
      0004EB 53 57 41 50           1022         .ascii     "SWAP"
      0004EF                       1023 SWAPP:
      0004EF 90 93            [ 1] 1024         LDW Y,X
      0004F1 90 FE            [ 2] 1025         LDW Y,(Y)
      0004F3 90 BF 24         [ 2] 1026         LDW YTEMP,Y
      0004F6 90 93            [ 1] 1027         LDW Y,X
      0004F8 90 EE 02         [ 2] 1028         LDW Y,(2,Y)
      0004FB FF               [ 2] 1029         LDW (X),Y
      0004FC 90 BE 24         [ 2] 1030         LDW Y,YTEMP
      0004FF EF 02            [ 2] 1031         LDW (2,X),Y
      000501 81               [ 4] 1032         RET     
                                   1033 
                                   1034 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1035 ;       Copy second stack item to top.
      000502 04 EA                 1036         .word      LINK
                           000504  1037 LINK	= . 
      000504 04                    1038         .byte      4
      000505 4F 56 45 52           1039         .ascii     "OVER"
      000509                       1040 OVER:
      000509 1D 00 02         [ 2] 1041         SUBW X,#2
      00050C 90 93            [ 1] 1042         LDW Y,X
      00050E 90 EE 04         [ 2] 1043         LDW Y,(4,Y)
      000511 FF               [ 2] 1044         LDW (X),Y
      000512 81               [ 4] 1045         RET     
                                   1046 
                                   1047 ;       0<      ( n -- t )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1048 ;       Return true if n is negative.
      000513 05 04                 1049         .word      LINK
                           000515  1050 LINK	= . 
      000515 02                    1051         .byte      2
      000516 30 3C                 1052         .ascii     "0<"
      000518                       1053 ZLESS:
      000518 A6 FF            [ 1] 1054         LD A,#0xFF
      00051A 90 93            [ 1] 1055         LDW Y,X
      00051C 90 FE            [ 2] 1056         LDW Y,(Y)
      00051E 2B 01            [ 1] 1057         JRMI     ZL1
      000520 4F               [ 1] 1058         CLR A   ;false
      000521 F7               [ 1] 1059 ZL1:    LD     (X),A
      000522 E7 01            [ 1] 1060         LD (1,X),A
      000524 81               [ 4] 1061 	RET     
                                   1062 
                                   1063 ;       AND     ( w w -- w )
                                   1064 ;       Bitwise AND.
      000525 05 15                 1065         .word      LINK
                           000527  1066 LINK	= . 
      000527 03                    1067         .byte      3
      000528 41 4E 44              1068         .ascii     "AND"
      00052B                       1069 ANDD:
      00052B F6               [ 1] 1070         LD  A,(X)    ;D=w
      00052C E4 02            [ 1] 1071         AND A,(2,X)
      00052E E7 02            [ 1] 1072         LD (2,X),A
      000530 E6 01            [ 1] 1073         LD A,(1,X)
      000532 E4 03            [ 1] 1074         AND A,(3,X)
      000534 E7 03            [ 1] 1075         LD (3,X),A
      000536 1C 00 02         [ 2] 1076         ADDW X,#2
      000539 81               [ 4] 1077         RET
                                   1078 
                                   1079 ;       OR      ( w w -- w )
                                   1080 ;       Bitwise inclusive OR.
      00053A 05 27                 1081         .word      LINK
                           00053C  1082 LINK = . 
      00053C 02                    1083         .byte      2
      00053D 4F 52                 1084         .ascii     "OR"
      00053F                       1085 ORR:
      00053F F6               [ 1] 1086         LD A,(X)    ;D=w
      000540 EA 02            [ 1] 1087         OR A,(2,X)
      000542 E7 02            [ 1] 1088         LD (2,X),A
      000544 E6 01            [ 1] 1089         LD A,(1,X)
      000546 EA 03            [ 1] 1090         OR A,(3,X)
      000548 E7 03            [ 1] 1091         LD (3,X),A
      00054A 1C 00 02         [ 2] 1092         ADDW X,#2
      00054D 81               [ 4] 1093         RET
                                   1094 
                                   1095 ;       XOR     ( w w -- w )
                                   1096 ;       Bitwise exclusive OR.
      00054E 05 3C                 1097         .word      LINK
                           000550  1098 LINK	= . 
      000550 03                    1099         .byte      3
      000551 58 4F 52              1100         .ascii     "XOR"
      000554                       1101 XORR:
      000554 F6               [ 1] 1102         LD A,(X)    ;D=w
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000555 E8 02            [ 1] 1103         XOR A,(2,X)
      000557 E7 02            [ 1] 1104         LD (2,X),A
      000559 E6 01            [ 1] 1105         LD A,(1,X)
      00055B E8 03            [ 1] 1106         XOR A,(3,X)
      00055D E7 03            [ 1] 1107         LD (3,X),A
      00055F 1C 00 02         [ 2] 1108         ADDW X,#2
      000562 81               [ 4] 1109         RET
                                   1110 
                                   1111 ;       UM+     ( u u -- udsum )
                                   1112 ;       Add two unsigned single
                                   1113 ;       and return a double sum.
      000563 05 50                 1114         .word      LINK
                           000565  1115 LINK	= . 
      000565 03                    1116         .byte      3
      000566 55 4D 2B              1117         .ascii     "UM+"
      000569                       1118 UPLUS:
      000569 A6 01            [ 1] 1119         LD A,#1
      00056B 90 93            [ 1] 1120         LDW Y,X
      00056D 90 EE 02         [ 2] 1121         LDW Y,(2,Y)
      000570 90 BF 24         [ 2] 1122         LDW YTEMP,Y
      000573 90 93            [ 1] 1123         LDW Y,X
      000575 90 FE            [ 2] 1124         LDW Y,(Y)
      000577 72 B9 00 24      [ 2] 1125         ADDW Y,YTEMP
      00057B EF 02            [ 2] 1126         LDW (2,X),Y
      00057D 25 01            [ 1] 1127         JRC     UPL1
      00057F 4F               [ 1] 1128         CLR A
      000580 E7 01            [ 1] 1129 UPL1:   LD     (1,X),A
      000582 7F               [ 1] 1130         CLR (X)
      000583 81               [ 4] 1131         RET
                                   1132 
                                   1133 ;; System and user variables
                                   1134 
                                   1135 ;       doVAR   ( -- a )
                                   1136 ;       Code for VARIABLE and CREATE.
      000584 05 65                 1137         .word      LINK
                           000586  1138 LINK	= . 
      000586 45                    1139 	.byte      COMPO+5
      000587 44 4F 56 41 52        1140         .ascii     "DOVAR"
      00058C                       1141 DOVAR:
      00058C 1D 00 02         [ 2] 1142 	SUBW X,#2
      00058F 90 85            [ 2] 1143         POPW Y    ;get return addr (pfa)
      000591 90 FE            [ 2] 1144         LDW Y,(Y) ; indirect address 
      000593 FF               [ 2] 1145         LDW (X),Y    ;push on stack
      000594 81               [ 4] 1146         RET     ;go to RET of EXEC
                                   1147 
                                   1148 ;       BASE    ( -- a )
                                   1149 ;       Radix base for numeric I/O.
      000595 05 86                 1150         .word      LINK        
                           000597  1151 LINK = . 
      000597 04                    1152         .byte      4
      000598 42 41 53 45           1153         .ascii     "BASE"
      00059C                       1154 BASE:
      00059C 90 AE 00 06      [ 2] 1155 	LDW Y,#UBASE 
      0005A0 1D 00 02         [ 2] 1156 	SUBW X,#2
      0005A3 FF               [ 2] 1157         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0005A4 81               [ 4] 1158         RET
                                   1159 
                                   1160 ;       tmp     ( -- a )
                                   1161 ;       A temporary storage.
      0005A5 05 97                 1162         .word      LINK
                                   1163         
                           0005A7  1164 LINK = . 
      0005A7 03                    1165 	.byte      3
      0005A8 54 4D 50              1166         .ascii     "TMP"
      0005AB                       1167 TEMP:
      0005AB 90 AE 00 08      [ 2] 1168 	LDW Y,#UTMP
      0005AF 1D 00 02         [ 2] 1169 	SUBW X,#2
      0005B2 FF               [ 2] 1170         LDW (X),Y
      0005B3 81               [ 4] 1171         RET
                                   1172 
                                   1173 ;       >IN     ( -- a )
                                   1174 ;        Hold parsing pointer.
      0005B4 05 A7                 1175         .word      LINK
                           0005B6  1176 LINK = . 
      0005B6 03                    1177         .byte      3
      0005B7 3E 49 4E              1178         .ascii    ">IN"
      0005BA                       1179 INN:
      0005BA 90 AE 00 0A      [ 2] 1180 	LDW Y,#UINN 
      0005BE 1D 00 02         [ 2] 1181 	SUBW X,#2
      0005C1 FF               [ 2] 1182         LDW (X),Y
      0005C2 81               [ 4] 1183         RET
                                   1184 
                                   1185 ;       #TIB    ( -- a )
                                   1186 ;       Count in terminal input buffer.
      0005C3 05 B6                 1187         .word      LINK
                           0005C5  1188 LINK = . 
      0005C5 04                    1189         .byte      4
      0005C6 23 54 49 42           1190         .ascii     "#TIB"
      0005CA                       1191 NTIB:
      0005CA 90 AE 00 0C      [ 2] 1192 	LDW Y,#UCTIB 
      0005CE 1D 00 02         [ 2] 1193 	SUBW X,#2
      0005D1 FF               [ 2] 1194         LDW (X),Y
      0005D2 81               [ 4] 1195         RET
                                   1196 
                                   1197 ;       TBUF ( -- a )
                                   1198 ;       address of 128 bytes transaction buffer 
      0005D3 05 C5                 1199         .word LINK 
                           0005D5  1200         LINK=.
      0005D5 04                    1201         .byte 4 
      0005D6 54 42 55 46           1202         .ascii "TBUF"
      0005DA                       1203 TBUF:
      0005DA 90 AE 06 80      [ 2] 1204         ldw y,#ROWBUFF
      0005DE 1D 00 02         [ 2] 1205         subw x,#CELLL
      0005E1 FF               [ 2] 1206         ldw (x),y 
      0005E2 81               [ 4] 1207         ret 
                                   1208 
                                   1209 ; systeme variable 
                                   1210 ; compilation destination 
                                   1211 ; TFLASH ( -- A )
      0005E3 05 D5                 1212         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           0005E5  1213         LINK=.
      0005E5 06                    1214         .byte 6 
      0005E6 54 46 4C 41 53 48     1215         .ascii "TFLASH"         
      0005EC                       1216 TFLASH:
      0005EC 1D 00 02         [ 2] 1217         subw x,#CELLL 
      0005EF 90 AE 00 1E      [ 2] 1218         ldw y,#UTFLASH
      0005F3 FF               [ 2] 1219         ldw (x),y 
      0005F4 81               [ 4] 1220         ret 
                                   1221 
                                   1222 ;       "EVAL   ( -- a )
                                   1223 ;       Execution vector of EVAL.
      0005F5 05 E5                 1224         .word      LINK
                           0005F7  1225 LINK = . 
      0005F7 05                    1226         .byte      5
      0005F8 27 45 56 41 4C        1227         .ascii     "'EVAL"
      0005FD                       1228 TEVAL:
      0005FD 90 AE 00 10      [ 2] 1229 	LDW Y,#UINTER 
      000601 1D 00 02         [ 2] 1230 	SUBW X,#2
      000604 FF               [ 2] 1231         LDW (X),Y
      000605 81               [ 4] 1232         RET
                                   1233 
                                   1234 ;       HLD     ( -- a )
                                   1235 ;       Hold a pointer of output string.
      000606 05 F7                 1236         .word      LINK
                           000608  1237 LINK = . 
      000608 03                    1238         .byte      3
      000609 48 4C 44              1239         .ascii     "HLD"
      00060C                       1240 HLD:
      00060C 90 AE 00 12      [ 2] 1241 	LDW Y,#UHLD 
      000610 1D 00 02         [ 2] 1242 	SUBW X,#2
      000613 FF               [ 2] 1243         LDW (X),Y
      000614 81               [ 4] 1244         RET
                                   1245 
                                   1246 ;       CONTEXT ( -- a )
                                   1247 ;       Start vocabulary search.
      000615 06 08                 1248         .word      LINK
                           000617  1249 LINK = . 
      000617 07                    1250         .byte      7
      000618 43 4F 4E 54 45 58 54  1251         .ascii     "CONTEXT"
      00061F                       1252 CNTXT:
      00061F 90 AE 00 14      [ 2] 1253 	LDW Y,#UCNTXT
      000623 1D 00 02         [ 2] 1254 	SUBW X,#2
      000626 FF               [ 2] 1255         LDW (X),Y
      000627 81               [ 4] 1256         RET
                                   1257 
                                   1258 ;       VP      ( -- a )
                                   1259 ;       Point to top of variables
      000628 06 17                 1260         .word      LINK
                           00062A  1261 LINK = . 
      00062A 02                    1262         .byte      2
      00062B 56 50                 1263         .ascii     "VP"
      00062D                       1264 VPP:
      00062D 90 AE 00 16      [ 2] 1265 	LDW Y,#UVP 
      000631 1D 00 02         [ 2] 1266 	SUBW X,#2
      000634 FF               [ 2] 1267         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000635 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;       CP    ( -- a )
                                   1271 ;       Pointer to top of FLASH 
      000636 06 2A                 1272         .word LINK 
                           000638  1273         LINK=.
      000638 02                    1274         .byte 2 
      000639 43 50                 1275         .ascii "CP"
      00063B                       1276 CPP: 
      00063B 90 AE 00 18      [ 2] 1277         ldw y,#UCP 
      00063F 1D 00 02         [ 2] 1278         subw x,#CELLL 
      000642 FF               [ 2] 1279         ldw (x),y 
      000643 81               [ 4] 1280         ret                
                                   1281 
                                   1282 ;       LAST    ( -- a )
                                   1283 ;       Point to last name in dictionary.
      000644 06 38                 1284         .word      LINK
                           000646  1285 LINK = . 
      000646 04                    1286         .byte      4
      000647 4C 41 53 54           1287         .ascii     "LAST"
      00064B                       1288 LAST:
      00064B 90 AE 00 1A      [ 2] 1289 	LDW Y,#ULAST 
      00064F 1D 00 02         [ 2] 1290 	SUBW X,#2
      000652 FF               [ 2] 1291         LDW (X),Y
      000653 81               [ 4] 1292         RET
                                   1293 
                                   1294 ; address of system variable URLAST 
                                   1295 ;       RAMLAST ( -- a )
                                   1296 ; RAM dictionary context 
      000654 06 46                 1297         .word LINK 
                           000656  1298         LINK=. 
      000656 07                    1299         .byte 7  
      000657 52 41 4D 4C 41 53 54  1300         .ascii "RAMLAST" 
      00065E                       1301 RAMLAST: 
      00065E 90 AE 00 20      [ 2] 1302         ldw y,#URLAST 
      000662 1D 00 02         [ 2] 1303         subw x,#CELLL 
      000665 FF               [ 2] 1304         ldw (x),y 
      000666 81               [ 4] 1305         ret 
                                   1306 
                                   1307 ; OFFSET ( -- a )
                                   1308 ; address of system variable OFFSET 
      000667 06 56                 1309         .word LINK 
                           000669  1310         LINK=.
      000669 06                    1311         .byte 6
      00066A 4F 46 46 53 45 54     1312         .ascii "OFFSET" 
      000670                       1313 OFFSET: 
      000670 1D 00 02         [ 2] 1314         subw x,#CELLL
      000673 90 AE 00 1C      [ 2] 1315         ldw y,#UOFFSET 
      000677 FF               [ 2] 1316         ldw (x),y 
      000678 81               [ 4] 1317         ret 
                                   1318 
                                   1319 ; adjust jump address adding OFFSET
                                   1320 ; ADR-ADJ ( a -- a+offset )
      000679                       1321 ADRADJ: 
      000679 CD 06 70         [ 4] 1322         call OFFSET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00067C CD 04 38         [ 4] 1323         call AT 
      00067F CC 06 DA         [ 2] 1324         jp PLUS 
                                   1325 
                                   1326 
                                   1327 ;; Common functions
                                   1328 
                                   1329 ;       ?DUP    ( w -- w w | 0 )
                                   1330 ;       Dup tos if its is not zero.
      000682 06 69                 1331         .word      LINK
                           000684  1332 LINK = . 
      000684 04                    1333         .byte      4
      000685 3F 44 55 50           1334         .ascii     "?DUP"
      000689                       1335 QDUP:
      000689 90 93            [ 1] 1336         LDW Y,X
      00068B 90 FE            [ 2] 1337 	LDW Y,(Y)
      00068D 27 04            [ 1] 1338         JREQ     QDUP1
      00068F 1D 00 02         [ 2] 1339 	SUBW X,#2
      000692 FF               [ 2] 1340         LDW (X),Y
      000693 81               [ 4] 1341 QDUP1:  RET
                                   1342 
                                   1343 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1344 ;       Rot 3rd item to top.
      000694 06 84                 1345         .word      LINK
                           000696  1346 LINK = . 
      000696 03                    1347         .byte      3
      000697 52 4F 54              1348         .ascii     "ROT"
      00069A                       1349 ROT:
      00069A 90 93            [ 1] 1350         ldw y,x 
      00069C 90 FE            [ 2] 1351         ldw y,(y)
      00069E 90 89            [ 2] 1352         pushw y 
      0006A0 90 93            [ 1] 1353         ldw y,x 
      0006A2 90 EE 04         [ 2] 1354         ldw y,(4,y)
      0006A5 FF               [ 2] 1355         ldw (x),y 
      0006A6 90 93            [ 1] 1356         ldw y,x 
      0006A8 90 EE 02         [ 2] 1357         ldw y,(2,y)
      0006AB EF 04            [ 2] 1358         ldw (4,x),y 
      0006AD 90 85            [ 2] 1359         popw y 
      0006AF EF 02            [ 2] 1360         ldw (2,x),y
      0006B1 81               [ 4] 1361         ret 
                                   1362 
                                   1363 ;       2DROP   ( w w -- )
                                   1364 ;       Discard two items on stack.
      0006B2 06 96                 1365         .word      LINK
                           0006B4  1366 LINK = . 
      0006B4 05                    1367         .byte      5
      0006B5 32 44 52 4F 50        1368         .ascii     "2DROP"
      0006BA                       1369 DDROP:
      0006BA 1C 00 04         [ 2] 1370         ADDW X,#4
      0006BD 81               [ 4] 1371         RET
                                   1372 
                                   1373 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1374 ;       Duplicate top two items.
      0006BE 06 B4                 1375         .word      LINK
                           0006C0  1376 LINK = . 
      0006C0 04                    1377         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006C1 32 44 55 50           1378         .ascii     "2DUP"
      0006C5                       1379 DDUP:
      0006C5 1D 00 04         [ 2] 1380         SUBW X,#4
      0006C8 90 93            [ 1] 1381         LDW Y,X
      0006CA 90 EE 06         [ 2] 1382         LDW Y,(6,Y)
      0006CD EF 02            [ 2] 1383         LDW (2,X),Y
      0006CF 90 93            [ 1] 1384         LDW Y,X
      0006D1 90 EE 04         [ 2] 1385         LDW Y,(4,Y)
      0006D4 FF               [ 2] 1386         LDW (X),Y
      0006D5 81               [ 4] 1387         RET
                                   1388 
                                   1389 ;       +       ( w w -- sum )
                                   1390 ;       Add top two items.
      0006D6 06 C0                 1391         .word      LINK
                           0006D8  1392 LINK = . 
      0006D8 01                    1393         .byte      1
      0006D9 2B                    1394         .ascii     "+"
      0006DA                       1395 PLUS:
      0006DA 90 93            [ 1] 1396         LDW Y,X
      0006DC 90 FE            [ 2] 1397         LDW Y,(Y)
      0006DE 90 BF 24         [ 2] 1398         LDW YTEMP,Y
      0006E1 1C 00 02         [ 2] 1399         ADDW X,#2
      0006E4 90 93            [ 1] 1400         LDW Y,X
      0006E6 90 FE            [ 2] 1401         LDW Y,(Y)
      0006E8 72 B9 00 24      [ 2] 1402         ADDW Y,YTEMP
      0006EC FF               [ 2] 1403         LDW (X),Y
      0006ED 81               [ 4] 1404         RET
                                   1405 
                                   1406 ;       NOT     ( w -- w )
                                   1407 ;       One's complement of tos.
      0006EE 06 D8                 1408         .word      LINK
                           0006F0  1409 LINK = . 
      0006F0 03                    1410         .byte      3
      0006F1 4E 4F 54              1411         .ascii     "NOT"
      0006F4                       1412 INVER:
      0006F4 90 93            [ 1] 1413         LDW Y,X
      0006F6 90 FE            [ 2] 1414         LDW Y,(Y)
      0006F8 90 53            [ 2] 1415         CPLW Y
      0006FA FF               [ 2] 1416         LDW (X),Y
      0006FB 81               [ 4] 1417         RET
                                   1418 
                                   1419 ;       NEGATE  ( n -- -n )
                                   1420 ;       Two's complement of tos.
      0006FC 06 F0                 1421         .word      LINK
                           0006FE  1422 LINK = . 
      0006FE 06                    1423         .byte      6
      0006FF 4E 45 47 41 54 45     1424         .ascii     "NEGATE"
      000705                       1425 NEGAT:
      000705 90 93            [ 1] 1426         LDW Y,X
      000707 90 FE            [ 2] 1427         LDW Y,(Y)
      000709 90 50            [ 2] 1428         NEGW Y
      00070B FF               [ 2] 1429         LDW (X),Y
      00070C 81               [ 4] 1430         RET
                                   1431 
                                   1432 ;       DNEGATE ( d -- -d )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1433 ;       Two's complement of top double.
      00070D 06 FE                 1434         .word      LINK
                           00070F  1435 LINK = . 
      00070F 07                    1436         .byte      7
      000710 44 4E 45 47 41 54 45  1437         .ascii     "DNEGATE"
      000717                       1438 DNEGA:
      000717 90 93            [ 1] 1439         LDW Y,X
      000719 90 FE            [ 2] 1440 	LDW Y,(Y)
      00071B 90 53            [ 2] 1441         CPLW Y     
      00071D 90 BF 24         [ 2] 1442 	LDW YTEMP,Y
      000720 90 93            [ 1] 1443         LDW Y,X
      000722 90 EE 02         [ 2] 1444         LDW Y,(2,Y)
      000725 90 53            [ 2] 1445         CPLW Y
      000727 72 A9 00 01      [ 2] 1446         addw y,#1
      00072B EF 02            [ 2] 1447         LDW (2,X),Y
      00072D 90 BE 24         [ 2] 1448         LDW Y,YTEMP
      000730 24 02            [ 1] 1449         JRNC DN1 
      000732 90 5C            [ 2] 1450         INCW Y
      000734 FF               [ 2] 1451 DN1:    LDW (X),Y
      000735 81               [ 4] 1452         RET
                                   1453 
                                   1454 
                                   1455 ;       S>D ( n -- d )
                                   1456 ; convert single integer to double 
      000736 07 0F                 1457         .word LINK 
                           000738  1458         LINK=. 
      000738 03                    1459         .byte 3 
      000739 53 3E 44              1460         .ascii "S>D"
      00073C                       1461 STOD: 
      00073C 1D 00 02         [ 2] 1462         subw x,#CELLL 
      00073F 90 5F            [ 1] 1463         clrw y 
      000741 FF               [ 2] 1464         ldw (x),y 
      000742 90 93            [ 1] 1465         ldw y,x 
      000744 90 EE 02         [ 2] 1466         ldw y,(2,y)
      000747 2A 05            [ 1] 1467         jrpl 1$ 
      000749 90 AE FF FF      [ 2] 1468         ldw y,#-1
      00074D FF               [ 2] 1469         ldw (x),y 
      00074E 81               [ 4] 1470 1$:     ret 
                                   1471 
                                   1472 
                                   1473 
                                   1474 
                                   1475 ;       -       ( n1 n2 -- n1-n2 )
                                   1476 ;       Subtraction.
      00074F 07 38                 1477         .word      LINK
                           000751  1478 LINK = . 
      000751 01                    1479         .byte      1
      000752 2D                    1480         .ascii     "-"
      000753                       1481 SUBB:
      000753 90 93            [ 1] 1482         LDW Y,X
      000755 90 FE            [ 2] 1483         LDW Y,(Y)
      000757 90 BF 24         [ 2] 1484         LDW YTEMP,Y
      00075A 1C 00 02         [ 2] 1485         ADDW X,#2
      00075D 90 93            [ 1] 1486         LDW Y,X
      00075F 90 FE            [ 2] 1487         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000761 72 B2 00 24      [ 2] 1488         SUBW Y,YTEMP
      000765 FF               [ 2] 1489         LDW (X),Y
      000766 81               [ 4] 1490         RET
                                   1491 
                                   1492 ;       ABS     ( n -- n )
                                   1493 ;       Return  absolute value of n.
      000767 07 51                 1494         .word      LINK
                           000769  1495 LINK = . 
      000769 03                    1496         .byte      3
      00076A 41 42 53              1497         .ascii     "ABS"
      00076D                       1498 ABSS:
      00076D 90 93            [ 1] 1499         LDW Y,X
      00076F 90 FE            [ 2] 1500 	LDW Y,(Y)
      000771 2A 03            [ 1] 1501         JRPL     AB1     ;negate:
      000773 90 50            [ 2] 1502         NEGW     Y     ;else negate hi byte
      000775 FF               [ 2] 1503         LDW (X),Y
      000776 81               [ 4] 1504 AB1:    RET
                                   1505 
                                   1506 ;       =       ( w w -- t )
                                   1507 ;       Return true if top two are =al.
      000777 07 69                 1508         .word      LINK
                           000779  1509 LINK = . 
      000779 01                    1510         .byte      1
      00077A 3D                    1511         .ascii     "="
      00077B                       1512 EQUAL:
      00077B A6 FF            [ 1] 1513         LD A,#0xFF  ;true
      00077D 90 93            [ 1] 1514         LDW Y,X    ;D = n2
      00077F 90 FE            [ 2] 1515         LDW Y,(Y)
      000781 90 BF 24         [ 2] 1516         LDW YTEMP,Y
      000784 1C 00 02         [ 2] 1517         ADDW X,#2
      000787 90 93            [ 1] 1518         LDW Y,X
      000789 90 FE            [ 2] 1519         LDW Y,(Y)
      00078B 90 B3 24         [ 2] 1520         CPW Y,YTEMP     ;if n2 <> n1
      00078E 27 01            [ 1] 1521         JREQ     EQ1
      000790 4F               [ 1] 1522         CLR A
      000791 F7               [ 1] 1523 EQ1:    LD (X),A
      000792 E7 01            [ 1] 1524         LD (1,X),A
      000794 81               [ 4] 1525 	RET     
                                   1526 
                                   1527 ;       U<      ( u u -- t )
                                   1528 ;       Unsigned compare of top two items.
      000795 07 79                 1529         .word      LINK
                           000797  1530 LINK = . 
      000797 02                    1531         .byte      2
      000798 55 3C                 1532         .ascii     "U<"
      00079A                       1533 ULESS:
      00079A A6 FF            [ 1] 1534         LD A,#0xFF  ;true
      00079C 90 93            [ 1] 1535         LDW Y,X    ;D = n2
      00079E 90 FE            [ 2] 1536         LDW Y,(Y)
      0007A0 90 BF 24         [ 2] 1537         LDW YTEMP,Y
      0007A3 1C 00 02         [ 2] 1538         ADDW X,#2
      0007A6 90 93            [ 1] 1539         LDW Y,X
      0007A8 90 FE            [ 2] 1540         LDW Y,(Y)
      0007AA 90 B3 24         [ 2] 1541         CPW Y,YTEMP     ;if n2 <> n1
      0007AD 25 01            [ 1] 1542         JRULT     ULES1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0007AF 4F               [ 1] 1543         CLR A
      0007B0 F7               [ 1] 1544 ULES1:  LD (X),A
      0007B1 E7 01            [ 1] 1545         LD (1,X),A
      0007B3 81               [ 4] 1546 	RET     
                                   1547 
                                   1548 ;       <       ( n1 n2 -- t )
                                   1549 ;       Signed compare of top two items.
      0007B4 07 97                 1550         .word      LINK
                           0007B6  1551 LINK = . 
      0007B6 01                    1552         .byte      1
      0007B7 3C                    1553         .ascii     "<"
      0007B8                       1554 LESS:
      0007B8 A6 FF            [ 1] 1555         LD A,#0xFF  ;true
      0007BA 90 93            [ 1] 1556         LDW Y,X    ;D = n2
      0007BC 90 FE            [ 2] 1557         LDW Y,(Y)
      0007BE 90 BF 24         [ 2] 1558         LDW YTEMP,Y
      0007C1 1C 00 02         [ 2] 1559         ADDW X,#2
      0007C4 90 93            [ 1] 1560         LDW Y,X
      0007C6 90 FE            [ 2] 1561         LDW Y,(Y)
      0007C8 90 B3 24         [ 2] 1562         CPW Y,YTEMP     ;if n2 <> n1
      0007CB 2F 01            [ 1] 1563         JRSLT     LT1
      0007CD 4F               [ 1] 1564         CLR A
      0007CE F7               [ 1] 1565 LT1:    LD (X),A
      0007CF E7 01            [ 1] 1566         LD (1,X),A
      0007D1 81               [ 4] 1567 	RET     
                                   1568 
                                   1569 ;       MAX     ( n n -- n )
                                   1570 ;       Return greater of two top items.
      0007D2 07 B6                 1571         .word      LINK
                           0007D4  1572 LINK = . 
      0007D4 03                    1573         .byte      3
      0007D5 4D 41 58              1574         .ascii     "MAX"
      0007D8                       1575 MAX:
      0007D8 90 93            [ 1] 1576         LDW Y,X    ;D = n2
      0007DA 90 EE 02         [ 2] 1577         LDW Y,(2,Y)
      0007DD 90 BF 24         [ 2] 1578         LDW YTEMP,Y
      0007E0 90 93            [ 1] 1579         LDW Y,X
      0007E2 90 FE            [ 2] 1580         LDW Y,(Y)
      0007E4 90 B3 24         [ 2] 1581         CPW Y,YTEMP     ;if n2 <> n1
      0007E7 2F 02            [ 1] 1582         JRSLT     MAX1
      0007E9 EF 02            [ 2] 1583         LDW (2,X),Y
      0007EB 1C 00 02         [ 2] 1584 MAX1:   ADDW X,#2
      0007EE 81               [ 4] 1585 	RET     
                                   1586 
                                   1587 ;       MIN     ( n n -- n )
                                   1588 ;       Return smaller of top two items.
      0007EF 07 D4                 1589         .word      LINK
                           0007F1  1590 LINK = . 
      0007F1 03                    1591         .byte      3
      0007F2 4D 49 4E              1592         .ascii     "MIN"
      0007F5                       1593 MIN:
      0007F5 90 93            [ 1] 1594         LDW Y,X    ;D = n2
      0007F7 90 EE 02         [ 2] 1595         LDW Y,(2,Y)
      0007FA 90 BF 24         [ 2] 1596         LDW YTEMP,Y
      0007FD 90 93            [ 1] 1597         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007FF 90 FE            [ 2] 1598         LDW Y,(Y)
      000801 90 B3 24         [ 2] 1599         CPW Y,YTEMP     ;if n2 <> n1
      000804 2C 02            [ 1] 1600         JRSGT     MIN1
      000806 EF 02            [ 2] 1601         LDW (2,X),Y
      000808 1C 00 02         [ 2] 1602 MIN1:	ADDW X,#2
      00080B 81               [ 4] 1603 	RET     
                                   1604 
                                   1605 ;       WITHIN  ( u ul uh -- t )
                                   1606 ;       Return true if u is within
                                   1607 ;       range of ul and uh. ( ul <= u < uh )
      00080C 07 F1                 1608         .word      LINK
                           00080E  1609 LINK = . 
      00080E 06                    1610         .byte      6
      00080F 57 49 54 48 49 4E     1611         .ascii     "WITHIN"
      000815                       1612 WITHI:
      000815 CD 05 09         [ 4] 1613         CALL     OVER
      000818 CD 07 53         [ 4] 1614         CALL     SUBB
      00081B CD 04 A8         [ 4] 1615         CALL     TOR
      00081E CD 07 53         [ 4] 1616         CALL     SUBB
      000821 CD 04 89         [ 4] 1617         CALL     RFROM
      000824 CC 07 9A         [ 2] 1618         JP     ULESS
                                   1619 
                                   1620 ;; Divide
                                   1621 
                                   1622 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1623 ;       Unsigned divide of a double by a
                                   1624 ;       single. Return mod and quotient.
      000827 08 0E                 1625         .word      LINK
                           000829  1626 LINK = . 
      000829 06                    1627         .byte      6
      00082A 55 4D 2F 4D 4F 44     1628         .ascii     "UM/MOD"
      000830                       1629 UMMOD:
      000830 BF 22            [ 2] 1630 	LDW XTEMP,X	; save stack pointer
      000832 FE               [ 2] 1631 	LDW X,(X)	; un
      000833 BF 24            [ 2] 1632 	LDW YTEMP,X     ; save un
      000835 90 BE 22         [ 2] 1633 	LDW Y,XTEMP	; stack pointer
      000838 90 EE 04         [ 2] 1634 	LDW Y,(4,Y)     ; Y=udl
      00083B BE 22            [ 2] 1635 	LDW X,XTEMP
      00083D EE 02            [ 2] 1636 	LDW X,(2,X)	; X=udh
      00083F B3 24            [ 2] 1637 	CPW X,YTEMP
      000841 23 0F            [ 2] 1638 	JRULE MMSM1
      000843 BE 22            [ 2] 1639 	LDW X,XTEMP
      000845 1C 00 02         [ 2] 1640 	ADDW X,#2	; pop off 1 level
      000848 90 AE FF FF      [ 2] 1641 	LDW Y,#0xFFFF
      00084C FF               [ 2] 1642 	LDW (X),Y
      00084D 90 5F            [ 1] 1643 	CLRW Y
      00084F EF 02            [ 2] 1644 	LDW (2,X),Y
      000851 81               [ 4] 1645 	RET
      000852                       1646 MMSM1:
                                   1647 ; take advantage of divw x,y when udh==0
      000852 5D               [ 2] 1648         tnzw x  ; is udh==0?
      000853 26 11            [ 1] 1649         jrne MMSM2 
      000855 93               [ 1] 1650         ldw x,y    ;udl 
      000856 90 BE 24         [ 2] 1651         ldw y,YTEMP ; divisor 
      000859 65               [ 2] 1652         divw x,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00085A 89               [ 2] 1653         pushw x     ; quotient 
      00085B BE 22            [ 2] 1654         ldw x,XTEMP 
      00085D 1C 00 02         [ 2] 1655         addw x,#CELLL 
      000860 EF 02            [ 2] 1656         ldw (2,x),y  ; ur
      000862 90 85            [ 2] 1657         popw y 
      000864 FF               [ 2] 1658         ldw (x),y ; uq 
      000865 81               [ 4] 1659         ret 
      000866                       1660 MMSM2:        
      000866 A6 11            [ 1] 1661 	LD A,#17	; loop count
      000868                       1662 MMSM3:
      000868 B3 24            [ 2] 1663 	CPW X,YTEMP	; compare udh to un
      00086A 25 04            [ 1] 1664 	JRULT MMSM4	; can't subtract
      00086C 72 B0 00 24      [ 2] 1665 	SUBW X,YTEMP	; can subtract
      000870                       1666 MMSM4:
      000870 8C               [ 1] 1667 	CCF	; quotient bit
      000871 90 59            [ 2] 1668 	RLCW Y	; rotate into quotient
      000873 59               [ 2] 1669 	RLCW X	; rotate into remainder
      000874 4A               [ 1] 1670 	DEC A	; repeat
      000875 22 F1            [ 1] 1671 	JRUGT MMSM3
      000877 56               [ 2] 1672         RRCW X 
      000878 BF 24            [ 2] 1673 	LDW YTEMP,X	; done, save remainder
      00087A BE 22            [ 2] 1674 	LDW X,XTEMP
      00087C 1C 00 02         [ 2] 1675 	ADDW X,#2	; drop
      00087F FF               [ 2] 1676 	LDW (X),Y
      000880 90 BE 24         [ 2] 1677 	LDW Y,YTEMP	; save quotient
      000883 EF 02            [ 2] 1678 	LDW (2,X),Y
      000885 81               [ 4] 1679 	RET
                                   1680 	
                                   1681 ;       M/MOD   ( d n -- r q )
                                   1682 ;       Signed floored divide of double by
                                   1683 ;       single. Return mod and quotient.
      000886 08 29                 1684         .word      LINK
                           000888  1685 LINK = . 
      000888 05                    1686         .byte      5
      000889 4D 2F 4D 4F 44        1687         .ascii     "M/MOD"
      00088E                       1688 MSMOD:  
      00088E CD 04 DF         [ 4] 1689         CALL	DUPP
      000891 CD 05 18         [ 4] 1690         CALL	ZLESS
      000894 CD 04 DF         [ 4] 1691         CALL	DUPP
      000897 CD 04 A8         [ 4] 1692         CALL	TOR
      00089A CD 03 E3         [ 4] 1693         CALL	QBRAN
      00089D 08 AB                 1694         .word	MMOD1
      00089F CD 07 05         [ 4] 1695         CALL	NEGAT
      0008A2 CD 04 A8         [ 4] 1696         CALL	TOR
      0008A5 CD 07 17         [ 4] 1697         CALL	DNEGA
      0008A8 CD 04 89         [ 4] 1698         CALL	RFROM
      0008AB CD 04 A8         [ 4] 1699 MMOD1:	CALL	TOR
      0008AE CD 04 DF         [ 4] 1700         CALL	DUPP
      0008B1 CD 05 18         [ 4] 1701         CALL	ZLESS
      0008B4 CD 03 E3         [ 4] 1702         CALL	QBRAN
      0008B7 08 BF                 1703         .word	MMOD2
      0008B9 CD 04 9C         [ 4] 1704         CALL	RAT
      0008BC CD 06 DA         [ 4] 1705         CALL	PLUS
      0008BF CD 04 89         [ 4] 1706 MMOD2:	CALL	RFROM
      0008C2 CD 08 30         [ 4] 1707         CALL	UMMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0008C5 CD 04 89         [ 4] 1708         CALL	RFROM
      0008C8 CD 03 E3         [ 4] 1709         CALL	QBRAN
      0008CB 08 D6                 1710         .word	MMOD3
      0008CD CD 04 EF         [ 4] 1711         CALL	SWAPP
      0008D0 CD 07 05         [ 4] 1712         CALL	NEGAT
      0008D3 CD 04 EF         [ 4] 1713         CALL	SWAPP
      0008D6 81               [ 4] 1714 MMOD3:	RET
                                   1715 
                                   1716 ;       /MOD    ( n n -- r q )
                                   1717 ;       Signed divide. Return mod and quotient.
      0008D7 08 88                 1718         .word      LINK
                           0008D9  1719 LINK = . 
      0008D9 04                    1720         .byte      4
      0008DA 2F 4D 4F 44           1721         .ascii     "/MOD"
      0008DE                       1722 SLMOD:
      0008DE CD 05 09         [ 4] 1723         CALL	OVER
      0008E1 CD 05 18         [ 4] 1724         CALL	ZLESS
      0008E4 CD 04 EF         [ 4] 1725         CALL	SWAPP
      0008E7 CC 08 8E         [ 2] 1726         JP	MSMOD
                                   1727 
                                   1728 ;       MOD     ( n n -- r )
                                   1729 ;       Signed divide. Return mod only.
      0008EA 08 D9                 1730         .word      LINK
                           0008EC  1731 LINK = . 
      0008EC 03                    1732         .byte      3
      0008ED 4D 4F 44              1733         .ascii     "MOD"
      0008F0                       1734 MODD:
      0008F0 CD 08 DE         [ 4] 1735 	CALL	SLMOD
      0008F3 CC 04 D5         [ 2] 1736 	JP	DROP
                                   1737 
                                   1738 ;       /       ( n n -- q )
                                   1739 ;       Signed divide. Return quotient only.
      0008F6 08 EC                 1740         .word      LINK
                           0008F8  1741 LINK = . 
      0008F8 01                    1742         .byte      1
      0008F9 2F                    1743         .ascii     "/"
      0008FA                       1744 SLASH:
      0008FA CD 08 DE         [ 4] 1745         CALL	SLMOD
      0008FD CD 04 EF         [ 4] 1746         CALL	SWAPP
      000900 CC 04 D5         [ 2] 1747         JP	DROP
                                   1748 
                                   1749 ;; Multiply
                                   1750 
                                   1751 ;       UM*     ( u u -- ud )
                                   1752 ;       Unsigned multiply. Return double product.
      000903 08 F8                 1753         .word      LINK
                           000905  1754 LINK = . 
      000905 03                    1755         .byte      3
      000906 55 4D 2A              1756         .ascii     "UM*"
      000909                       1757 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1758 ; take advantage of SP addressing modes
                                   1759 ; these PRODx in RAM are not required
                                   1760 ; the product is kept on stack as local variable 
                                   1761         ;; bytes offset on data stack 
                           000002  1762         da=2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000003  1763         db=3 
                           000000  1764         dc=0 
                           000001  1765         dd=1 
                                   1766         ;; product bytes offset on return stack 
                           000001  1767         UD1=1  ; ud bits 31..24
                           000002  1768         UD2=2  ; ud bits 23..16
                           000003  1769         UD3=3  ; ud bits 15..8 
                           000004  1770         UD4=4  ; ud bits 7..0 
                                   1771         ;; local variable for product set to zero   
      000909 90 5F            [ 1] 1772         clrw y 
      00090B 90 89            [ 2] 1773         pushw y  ; bits 15..0
      00090D 90 89            [ 2] 1774         pushw y  ; bits 31..16 
      00090F E6 03            [ 1] 1775         ld a,(db,x) ; b 
      000911 90 97            [ 1] 1776         ld yl,a 
      000913 E6 01            [ 1] 1777         ld a,(dd,x)   ; d
      000915 90 42            [ 4] 1778         mul y,a    ; b*d  
      000917 17 03            [ 2] 1779         ldw (UD3,sp),y ; lowest weight product 
      000919 E6 03            [ 1] 1780         ld a,(db,x)
      00091B 90 97            [ 1] 1781         ld yl,a 
      00091D E6 00            [ 1] 1782         ld a,(dc,x)
      00091F 90 42            [ 4] 1783         mul y,a  ; b*c 
                                   1784         ;;; do the partial sum 
      000921 72 F9 02         [ 2] 1785         addw y,(UD2,sp)
      000924 4F               [ 1] 1786         clr a 
      000925 49               [ 1] 1787         rlc a
      000926 6B 01            [ 1] 1788         ld (UD1,sp),a 
      000928 17 02            [ 2] 1789         ldw (UD2,sp),y 
      00092A E6 02            [ 1] 1790         ld a,(da,x)
      00092C 90 97            [ 1] 1791         ld yl,a 
      00092E E6 01            [ 1] 1792         ld a,(dd,x)
      000930 90 42            [ 4] 1793         mul y,a   ; a*d 
                                   1794         ;; do partial sum 
      000932 72 F9 02         [ 2] 1795         addw y,(UD2,sp)
      000935 4F               [ 1] 1796         clr a 
      000936 19 01            [ 1] 1797         adc a,(UD1,sp)
      000938 6B 01            [ 1] 1798         ld (UD1,sp),a  
      00093A 17 02            [ 2] 1799         ldw (UD2,sp),y 
      00093C E6 02            [ 1] 1800         ld a,(da,x)
      00093E 90 97            [ 1] 1801         ld yl,a 
      000940 E6 00            [ 1] 1802         ld a,(dc,x)
      000942 90 42            [ 4] 1803         mul y,a  ;  a*c highest weight product 
                                   1804         ;;; do partial sum 
      000944 72 F9 01         [ 2] 1805         addw y,(UD1,sp)
      000947 FF               [ 2] 1806         ldw (x),y  ; udh 
      000948 16 03            [ 2] 1807         ldw y,(UD3,sp)
      00094A EF 02            [ 2] 1808         ldw (2,x),y  ; udl  
      00094C 5B 04            [ 2] 1809         addw sp,#4 ; drop local variable 
      00094E 81               [ 4] 1810         ret  
                                   1811 
                                   1812 
                                   1813 ;       *       ( n n -- n )
                                   1814 ;       Signed multiply. Return single product.
      00094F 09 05                 1815         .word      LINK
                           000951  1816 LINK = . 
      000951 01                    1817         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000952 2A                    1818         .ascii     "*"
      000953                       1819 STAR:
      000953 CD 09 09         [ 4] 1820 	CALL	UMSTA
      000956 CC 04 D5         [ 2] 1821 	JP	DROP
                                   1822 
                                   1823 ;       M*      ( n n -- d )
                                   1824 ;       Signed multiply. Return double product.
      000959 09 51                 1825         .word      LINK
                           00095B  1826 LINK = . 
      00095B 02                    1827         .byte      2
      00095C 4D 2A                 1828         .ascii     "M*"
      00095E                       1829 MSTAR:      
      00095E CD 06 C5         [ 4] 1830         CALL	DDUP
      000961 CD 05 54         [ 4] 1831         CALL	XORR
      000964 CD 05 18         [ 4] 1832         CALL	ZLESS
      000967 CD 04 A8         [ 4] 1833         CALL	TOR
      00096A CD 07 6D         [ 4] 1834         CALL	ABSS
      00096D CD 04 EF         [ 4] 1835         CALL	SWAPP
      000970 CD 07 6D         [ 4] 1836         CALL	ABSS
      000973 CD 09 09         [ 4] 1837         CALL	UMSTA
      000976 CD 04 89         [ 4] 1838         CALL	RFROM
      000979 CD 03 E3         [ 4] 1839         CALL	QBRAN
      00097C 09 81                 1840         .word	MSTA1
      00097E CD 07 17         [ 4] 1841         CALL	DNEGA
      000981 81               [ 4] 1842 MSTA1:	RET
                                   1843 
                                   1844 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1845 ;       Multiply n1 and n2, then divide
                                   1846 ;       by n3. Return mod and quotient.
      000982 09 5B                 1847         .word      LINK
                           000984  1848 LINK = . 
      000984 05                    1849         .byte      5
      000985 2A 2F 4D 4F 44        1850         .ascii     "*/MOD"
      00098A                       1851 SSMOD:
      00098A CD 04 A8         [ 4] 1852         CALL     TOR
      00098D CD 09 5E         [ 4] 1853         CALL     MSTAR
      000990 CD 04 89         [ 4] 1854         CALL     RFROM
      000993 CC 08 8E         [ 2] 1855         JP     MSMOD
                                   1856 
                                   1857 ;       */      ( n1 n2 n3 -- q )
                                   1858 ;       Multiply n1 by n2, then divide
                                   1859 ;       by n3. Return quotient only.
      000996 09 84                 1860         .word      LINK
                           000998  1861 LINK = . 
      000998 02                    1862         .byte      2
      000999 2A 2F                 1863         .ascii     "*/"
      00099B                       1864 STASL:
      00099B CD 09 8A         [ 4] 1865         CALL	SSMOD
      00099E CD 04 EF         [ 4] 1866         CALL	SWAPP
      0009A1 CC 04 D5         [ 2] 1867         JP	DROP
                                   1868 
                                   1869 ;; Miscellaneous
                                   1870 
                                   1871 ;       CELL+   ( a -- a )
                                   1872 ;       Add cell size in byte to address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0009A4 09 98                 1873         .word      LINK
                           0009A6  1874 LINK = . 
      0009A6 02                    1875         .byte       2
      0009A7 32 2B                 1876         .ascii     "2+"
      0009A9                       1877 CELLP:
      0009A9 90 93            [ 1] 1878         LDW Y,X
      0009AB 90 FE            [ 2] 1879 	LDW Y,(Y)
      0009AD 72 A9 00 02      [ 2] 1880         ADDW Y,#CELLL 
      0009B1 FF               [ 2] 1881         LDW (X),Y
      0009B2 81               [ 4] 1882         RET
                                   1883 
                                   1884 ;       CELL-   ( a -- a )
                                   1885 ;       Subtract 2 from address.
      0009B3 09 A6                 1886         .word      LINK
                           0009B5  1887 LINK = . 
      0009B5 02                    1888         .byte       2
      0009B6 32 2D                 1889         .ascii     "2-"
      0009B8                       1890 CELLM:
      0009B8 90 93            [ 1] 1891         LDW Y,X
      0009BA 90 FE            [ 2] 1892 	LDW Y,(Y)
      0009BC 72 A2 00 02      [ 2] 1893         SUBW Y,#CELLL
      0009C0 FF               [ 2] 1894         LDW (X),Y
      0009C1 81               [ 4] 1895         RET
                                   1896 
                                   1897 ;       CELLS   ( n -- n )
                                   1898 ;       Multiply tos by 2.
      0009C2 09 B5                 1899         .word      LINK
                           0009C4  1900 LINK = . 
      0009C4 02                    1901         .byte       2
      0009C5 32 2A                 1902         .ascii     "2*"
      0009C7                       1903 CELLS:
      0009C7 90 93            [ 1] 1904         LDW Y,X
      0009C9 90 FE            [ 2] 1905 	LDW Y,(Y)
      0009CB 90 58            [ 2] 1906         SLAW Y
      0009CD FF               [ 2] 1907         LDW (X),Y
      0009CE 81               [ 4] 1908         RET
                                   1909 
                                   1910 ;       1+      ( a -- a )
                                   1911 ;       Add cell size in byte to address.
      0009CF 09 C4                 1912         .word      LINK
                           0009D1  1913 LINK = . 
      0009D1 02                    1914         .byte      2
      0009D2 31 2B                 1915         .ascii     "1+"
      0009D4                       1916 ONEP:
      0009D4 90 93            [ 1] 1917         LDW Y,X
      0009D6 90 FE            [ 2] 1918 	LDW Y,(Y)
      0009D8 90 5C            [ 2] 1919         INCW Y
      0009DA FF               [ 2] 1920         LDW (X),Y
      0009DB 81               [ 4] 1921         RET
                                   1922 
                                   1923 ;       1-      ( a -- a )
                                   1924 ;       Subtract 2 from address.
      0009DC 09 D1                 1925         .word      LINK
                           0009DE  1926 LINK = . 
      0009DE 02                    1927         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009DF 31 2D                 1928         .ascii     "1-"
      0009E1                       1929 ONEM:
      0009E1 90 93            [ 1] 1930         LDW Y,X
      0009E3 90 FE            [ 2] 1931 	LDW Y,(Y)
      0009E5 90 5A            [ 2] 1932         DECW Y
      0009E7 FF               [ 2] 1933         LDW (X),Y
      0009E8 81               [ 4] 1934         RET
                                   1935 
                                   1936 ;  shift left n times 
                                   1937 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009E9 09 DE                 1938         .word LINK 
                           0009EB  1939         LINK=.
      0009EB 06                    1940         .byte 6 
      0009EC 4C 53 48 49 46 54     1941         .ascii "LSHIFT"
      0009F2                       1942 LSHIFT:
      0009F2 E6 01            [ 1] 1943         ld a,(1,x)
      0009F4 1C 00 02         [ 2] 1944         addw x,#CELLL 
      0009F7 90 93            [ 1] 1945         ldw y,x 
      0009F9 90 FE            [ 2] 1946         ldw y,(y)
      0009FB                       1947 LSHIFT1:
      0009FB 4D               [ 1] 1948         tnz a 
      0009FC 27 05            [ 1] 1949         jreq LSHIFT4 
      0009FE 90 58            [ 2] 1950         sllw y 
      000A00 4A               [ 1] 1951         dec a 
      000A01 20 F8            [ 2] 1952         jra LSHIFT1 
      000A03                       1953 LSHIFT4:
      000A03 FF               [ 2] 1954         ldw (x),y 
      000A04 81               [ 4] 1955         ret 
                                   1956 
                                   1957 ; shift right n times                 
                                   1958 ; RSHIFT (n1 n2 -- n1>>n2 )
      000A05 09 EB                 1959         .word LINK 
                           000A07  1960         LINK=.
      000A07 06                    1961         .byte 6
      000A08 52 53 48 49 46 54     1962         .ascii "RSHIFT"
      000A0E                       1963 RSHIFT:
      000A0E E6 01            [ 1] 1964         ld a,(1,x)
      000A10 1C 00 02         [ 2] 1965         addw x,#CELLL 
      000A13 90 93            [ 1] 1966         ldw y,x 
      000A15 90 FE            [ 2] 1967         ldw y,(y)
      000A17                       1968 RSHIFT1:
      000A17 4D               [ 1] 1969         tnz a 
      000A18 27 05            [ 1] 1970         jreq RSHIFT4 
      000A1A 90 54            [ 2] 1971         srlw y 
      000A1C 4A               [ 1] 1972         dec a 
      000A1D 20 F8            [ 2] 1973         jra RSHIFT1 
      000A1F                       1974 RSHIFT4:
      000A1F FF               [ 2] 1975         ldw (x),y 
      000A20 81               [ 4] 1976         ret 
                                   1977 
                                   1978 
                                   1979 ;       2/      ( n -- n )
                                   1980 ;       divide  tos by 2.
      000A21 0A 07                 1981         .word      LINK
                           000A23  1982 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000A23 02                    1983         .byte      2
      000A24 32 2F                 1984         .ascii     "2/"
      000A26                       1985 TWOSL:
      000A26 90 93            [ 1] 1986         LDW Y,X
      000A28 90 FE            [ 2] 1987 	LDW Y,(Y)
      000A2A 90 57            [ 2] 1988         SRAW Y
      000A2C FF               [ 2] 1989         LDW (X),Y
      000A2D 81               [ 4] 1990         RET
                                   1991 
                                   1992 ;       BL      ( -- 32 )
                                   1993 ;       Return 32,  blank character.
      000A2E 0A 23                 1994         .word      LINK
                           000A30  1995 LINK = . 
      000A30 02                    1996         .byte      2
      000A31 42 4C                 1997         .ascii     "BL"
      000A33                       1998 BLANK:
      000A33 1D 00 02         [ 2] 1999         SUBW X,#2
      000A36 90 AE 00 20      [ 2] 2000 	LDW Y,#32
      000A3A FF               [ 2] 2001         LDW (X),Y
      000A3B 81               [ 4] 2002         RET
                                   2003 
                                   2004 ;         0     ( -- 0)
                                   2005 ;         Return 0.
      000A3C 0A 30                 2006         .word      LINK
                           000A3E  2007 LINK = . 
      000A3E 01                    2008         .byte       1
      000A3F 30                    2009         .ascii     "0"
      000A40                       2010 ZERO:
      000A40 1D 00 02         [ 2] 2011         SUBW X,#2
      000A43 90 5F            [ 1] 2012 	CLRW Y
      000A45 FF               [ 2] 2013         LDW (X),Y
      000A46 81               [ 4] 2014         RET
                                   2015 
                                   2016 ;         1     ( -- 1)
                                   2017 ;         Return 1.
      000A47 0A 3E                 2018         .word      LINK
                           000A49  2019 LINK = . 
      000A49 01                    2020         .byte       1
      000A4A 31                    2021         .ascii     "1"
      000A4B                       2022 ONE:
      000A4B 1D 00 02         [ 2] 2023         SUBW X,#2
      000A4E 90 AE 00 01      [ 2] 2024 	LDW Y,#1
      000A52 FF               [ 2] 2025         LDW (X),Y
      000A53 81               [ 4] 2026         RET
                                   2027 
                                   2028 ;         -1    ( -- -1)
                                   2029 ;         Return 32,  blank character.
      000A54 0A 49                 2030         .word      LINK
                           000A56  2031 LINK = . 
      000A56 02                    2032         .byte       2
      000A57 2D 31                 2033         .ascii     "-1"
      000A59                       2034 MONE:
      000A59 1D 00 02         [ 2] 2035         SUBW X,#2
      000A5C 90 AE FF FF      [ 2] 2036 	LDW Y,#0xFFFF
      000A60 FF               [ 2] 2037         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A61 81               [ 4] 2038         RET
                                   2039 
                                   2040 ;       >CHAR   ( c -- c )
                                   2041 ;       Filter non-printing characters.
      000A62 0A 56                 2042         .word      LINK
                           000A64  2043 LINK = . 
      000A64 05                    2044         .byte      5
      000A65 3E 43 48 41 52        2045         .ascii     ">CHAR"
      000A6A                       2046 TCHAR:
      000A6A E6 01            [ 1] 2047         ld a,(1,x)
      000A6C A1 20            [ 1] 2048         cp a,#32  
      000A6E 2B 05            [ 1] 2049         jrmi 1$ 
      000A70 A1 7F            [ 1] 2050         cp a,#127 
      000A72 2A 01            [ 1] 2051         jrpl 1$ 
      000A74 81               [ 4] 2052         ret 
      000A75 A6 5F            [ 1] 2053 1$:     ld a,#'_ 
      000A77 E7 01            [ 1] 2054         ld (1,x),a 
      000A79 81               [ 4] 2055         ret 
                                   2056 
                                   2057 ;       DEPTH   ( -- n )
                                   2058 ;       Return  depth of  data stack.
      000A7A 0A 64                 2059         .word      LINK
                           000A7C  2060 LINK = . 
      000A7C 05                    2061         .byte      5
      000A7D 44 45 50 54 48        2062         .ascii     "DEPTH"
      000A82                       2063 DEPTH: 
      000A82 90 BE 2A         [ 2] 2064         LDW Y,SP0    ;save data stack ptr
      000A85 BF 22            [ 2] 2065 	LDW XTEMP,X
      000A87 72 B2 00 22      [ 2] 2066         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A8B 90 57            [ 2] 2067         SRAW Y    ;Y = #stack items
      000A8D 1D 00 02         [ 2] 2068 	SUBW X,#2
      000A90 FF               [ 2] 2069         LDW (X),Y     ; if neg, underflow
      000A91 81               [ 4] 2070         RET
                                   2071 
                                   2072 ;       PICK    ( ... +n -- ... w )
                                   2073 ;       Copy  nth stack item to tos.
      000A92 0A 7C                 2074         .word      LINK
                           000A94  2075 LINK = . 
      000A94 04                    2076         .byte      4
      000A95 50 49 43 4B           2077         .ascii     "PICK"
      000A99                       2078 PICK:
      000A99 90 93            [ 1] 2079         LDW Y,X   ;D = n1
      000A9B 90 FE            [ 2] 2080         LDW Y,(Y)
                                   2081 ; modified for standard compliance          
                                   2082 ; 0 PICK must be equivalent to DUP 
      000A9D 90 5C            [ 2] 2083         INCW Y 
      000A9F 90 58            [ 2] 2084         SLAW Y
      000AA1 BF 22            [ 2] 2085         LDW XTEMP,X
      000AA3 72 B9 00 22      [ 2] 2086         ADDW Y,XTEMP
      000AA7 90 FE            [ 2] 2087         LDW Y,(Y)
      000AA9 FF               [ 2] 2088         LDW (X),Y
      000AAA 81               [ 4] 2089         RET
                                   2090 
                                   2091 ;; Memory access
                                   2092 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2093 ;       +!      ( n a -- )
                                   2094 ;       Add n to  contents at address a.
      000AAB 0A 94                 2095         .word      LINK
                           000AAD  2096 LINK = . 
      000AAD 02                    2097         .byte      2
      000AAE 2B 21                 2098         .ascii     "+!"
      000AB0                       2099 PSTOR:
      000AB0 90 93            [ 1] 2100         ldw y,x 
      000AB2 90 FE            [ 2] 2101         ldw y,(y)
      000AB4 90 BF 24         [ 2] 2102         ldw YTEMP,y  ; address
      000AB7 90 FE            [ 2] 2103         ldw y,(y)  
      000AB9 90 89            [ 2] 2104         pushw y  ; value at address 
      000ABB 90 93            [ 1] 2105         ldw y,x 
      000ABD 90 EE 02         [ 2] 2106         ldw y,(2,y) ; n 
      000AC0 72 F9 01         [ 2] 2107         addw y,(1,sp) ; n+value
      000AC3 91 CF 24         [ 5] 2108         ldw [YTEMP],y ;  a!
      000AC6 90 85            [ 2] 2109         popw y    ;drop local var
      000AC8 1C 00 04         [ 2] 2110         addw x,#4 ; DDROP 
      000ACB 81               [ 4] 2111         ret 
                                   2112 
                                   2113 ;       2!      ( d a -- )
                                   2114 ;       Store  double integer to address a.
      000ACC 0A AD                 2115         .word      LINK
                           000ACE  2116 LINK = . 
      000ACE 02                    2117         .byte      2
      000ACF 32 21                 2118         .ascii     "2!"
      000AD1                       2119 DSTOR:
      000AD1 90 93            [ 1] 2120         ldw y,x 
      000AD3 90 FE            [ 2] 2121         ldw y,(y)
      000AD5 90 BF 24         [ 2] 2122         ldw YTEMP,y ; address 
      000AD8 1C 00 02         [ 2] 2123         addw x,#CELLL ; drop a 
      000ADB 90 93            [ 1] 2124         ldw y,x 
      000ADD 90 FE            [ 2] 2125         ldw y,(y) ; hi word 
      000ADF 89               [ 2] 2126         pushw x 
      000AE0 EE 02            [ 2] 2127         ldw x,(2,x) ; lo word 
      000AE2 91 CF 24         [ 5] 2128         ldw [YTEMP],y
      000AE5 90 93            [ 1] 2129         ldw y,x 
      000AE7 AE 00 02         [ 2] 2130         ldw x,#2 
      000AEA 92 DF 24         [ 5] 2131         ldw ([YTEMP],x),y 
      000AED 85               [ 2] 2132         popw x 
      000AEE 1C 00 04         [ 2] 2133         addw x,#4 ; DDROP 
      000AF1 81               [ 4] 2134         ret 
                                   2135 
                                   2136 ;       2@      ( a -- d )
                                   2137 ;       Fetch double integer from address a.
      000AF2 0A CE                 2138         .word      LINK
                           000AF4  2139 LINK = . 
      000AF4 02                    2140         .byte      2
      000AF5 32 40                 2141         .ascii     "2@"
      000AF7                       2142 DAT:
      000AF7 90 93            [ 1] 2143         ldw y,x 
      000AF9 90 FE            [ 2] 2144         ldw y,(y) ;address 
      000AFB 90 BF 24         [ 2] 2145         ldw YTEMP,y 
      000AFE 1D 00 02         [ 2] 2146         subw x,#CELLL ; space for udh 
      000B01 91 CE 24         [ 5] 2147         ldw y,[YTEMP] ; udh 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000B04 FF               [ 2] 2148         ldw (x),y 
      000B05 90 AE 00 02      [ 2] 2149         ldw y,#2
      000B09 91 DE 24         [ 5] 2150         ldw y,([YTEMP],y) ; udl 
      000B0C EF 02            [ 2] 2151         ldw (2,x),y
      000B0E 81               [ 4] 2152         ret 
                                   2153 
                                   2154 ;       COUNT   ( b -- b +n )
                                   2155 ;       Return count byte of a string
                                   2156 ;       and add 1 to byte address.
      000B0F 0A F4                 2157         .word      LINK
                           000B11  2158 LINK = . 
      000B11 05                    2159         .byte      5
      000B12 43 4F 55 4E 54        2160         .ascii     "COUNT"
      000B17                       2161 COUNT:
      000B17 90 93            [ 1] 2162         ldw y,x 
      000B19 90 FE            [ 2] 2163         ldw y,(y) ; address 
      000B1B 90 F6            [ 1] 2164         ld a,(y)  ; count 
      000B1D 90 5C            [ 2] 2165         incw y 
      000B1F FF               [ 2] 2166         ldw (x),y 
      000B20 1D 00 02         [ 2] 2167         subw x,#CELLL 
      000B23 E7 01            [ 1] 2168         ld (1,x),a 
      000B25 7F               [ 1] 2169         clr (x)
      000B26 81               [ 4] 2170         ret 
                                   2171 
                                   2172 ;       HERE    ( -- a )
                                   2173 ;       Return  top of  variables
      000B27 0B 11                 2174         .word      LINK
                           000B29  2175 LINK = . 
      000B29 04                    2176         .byte      4
      000B2A 48 45 52 45           2177         .ascii     "HERE"
      000B2E                       2178 HERE:
      000B2E 90 AE 00 16      [ 2] 2179       	ldw y,#UVP 
      000B32 90 FE            [ 2] 2180         ldw y,(y)
      000B34 1D 00 02         [ 2] 2181         subw x,#CELLL 
      000B37 FF               [ 2] 2182         ldw (x),y 
      000B38 81               [ 4] 2183         ret 
                                   2184 
                                   2185 ;       PAD     ( -- a )
                                   2186 ;       Return address of text buffer
                                   2187 ;       above  code dictionary.
      000B39 0B 29                 2188         .word      LINK
                           000B3B  2189 LINK = . 
      000B3B 03                    2190         .byte      3
      000B3C 50 41 44              2191         .ascii     "PAD"
      000B3F                       2192 PAD:
      000B3F CD 0B 2E         [ 4] 2193         CALL     HERE
      000B42 CD 03 B0         [ 4] 2194         CALL     DOLIT
      000B45 00 50                 2195         .word      80
      000B47 CC 06 DA         [ 2] 2196         JP     PLUS
                                   2197 
                                   2198 ;       TIB     ( -- a )
                                   2199 ;       Return address of terminal input buffer.
      000B4A 0B 3B                 2200         .word      LINK
                           000B4C  2201 LINK = . 
      000B4C 03                    2202         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B4D 54 49 42              2203         .ascii     "TIB"
      000B50                       2204 TIB:
      000B50 CD 05 CA         [ 4] 2205         CALL     NTIB
      000B53 CD 09 A9         [ 4] 2206         CALL     CELLP
      000B56 CC 04 38         [ 2] 2207         JP     AT
                                   2208 
                                   2209 ;       @EXECUTE        ( a -- )
                                   2210 ;       Execute vector stored in address a.
      000B59 0B 4C                 2211         .word      LINK
                           000B5B  2212 LINK = . 
      000B5B 08                    2213         .byte      8
      000B5C 40 45 58 45 43 55 54  2214         .ascii     "@EXECUTE"
             45
      000B64                       2215 ATEXE:
      000B64 CD 04 38         [ 4] 2216         CALL     AT
      000B67 CD 06 89         [ 4] 2217         CALL     QDUP    ;?address or zero
      000B6A CD 03 E3         [ 4] 2218         CALL     QBRAN
      000B6D 0B 72                 2219         .word      EXE1
      000B6F CD 04 0A         [ 4] 2220         CALL     EXECU   ;execute if non-zero
      000B72 81               [ 4] 2221 EXE1:   RET     ;do nothing if zero
                                   2222 
                                   2223 ;       CMOVE   ( b1 b2 u -- )
                                   2224 ;       Copy u bytes from b1 to b2.
      000B73 0B 5B                 2225         .word      LINK
                           000B75  2226 LINK = . 
      000B75 05                    2227         .byte      5
      000B76 43 4D 4F 56 45        2228         .ascii     "CMOVE"
      000B7B                       2229 CMOVE:
      000B7B CD 04 A8         [ 4] 2230         CALL	TOR
      000B7E CD 03 FA         [ 4] 2231         CALL	BRAN
      000B81 0B 9B                 2232         .word	CMOV2
      000B83 CD 04 A8         [ 4] 2233 CMOV1:	CALL	TOR
      000B86 CD 04 DF         [ 4] 2234         CALL	DUPP
      000B89 CD 04 56         [ 4] 2235         CALL	CAT
      000B8C CD 04 9C         [ 4] 2236         CALL	RAT
      000B8F CD 04 45         [ 4] 2237         CALL	CSTOR
      000B92 CD 09 D4         [ 4] 2238         CALL	ONEP
      000B95 CD 04 89         [ 4] 2239         CALL	RFROM
      000B98 CD 09 D4         [ 4] 2240         CALL	ONEP
      000B9B CD 03 C4         [ 4] 2241 CMOV2:	CALL	DONXT
      000B9E 0B 83                 2242         .word	CMOV1
      000BA0 CC 06 BA         [ 2] 2243         JP	DDROP
                                   2244 
                                   2245 ;       FILL    ( b u c -- )
                                   2246 ;       Fill u bytes of character c
                                   2247 ;       to area beginning at b.
      000BA3 0B 75                 2248         .word       LINK
                           000BA5  2249 LINK = . 
      000BA5 04                    2250         .byte       4
      000BA6 46 49 4C 4C           2251         .ascii     "FILL"
      000BAA                       2252 FILL:
      000BAA 90 93            [ 1] 2253         ldw y,x 
      000BAC 90 E6 01         [ 1] 2254         ld a,(1,y) ; c 
      000BAF 1C 00 02         [ 2] 2255         addw x,#CELLL ; drop c 
      000BB2 90 93            [ 1] 2256         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000BB4 90 FE            [ 2] 2257         ldw y,(y) ; count
      000BB6 90 89            [ 2] 2258         pushw y 
      000BB8 1C 00 02         [ 2] 2259         addw x,#CELLL ; drop u 
      000BBB 90 93            [ 1] 2260         ldw y,x 
      000BBD 1C 00 02         [ 2] 2261         addw x,#CELLL ; drop b 
      000BC0 90 FE            [ 2] 2262         ldw y,(y) ; address
      000BC2 90 BF 24         [ 2] 2263         ldw YTEMP,y
      000BC5 90 85            [ 2] 2264         popw y ; count 
      000BC7                       2265 FILL1:  
      000BC7 92 C7 24         [ 4] 2266         ld [YTEMP],a 
      000BCA 3C 25            [ 1] 2267         inc YTEMP+1
      000BCC 24 02            [ 1] 2268         jrnc FILL2 
      000BCE 3C 24            [ 1] 2269         inc YTEMP
      000BD0                       2270 FILL2: 
      000BD0 90 5A            [ 2] 2271         decw y ; count 
      000BD2 26 F3            [ 1] 2272         jrne FILL1  
      000BD4 81               [ 4] 2273         ret 
                                   2274 
                                   2275 ;       ERASE   ( b u -- )
                                   2276 ;       Erase u bytes beginning at b.
      000BD5 0B A5                 2277         .word      LINK
                           000BD7  2278 LINK = . 
      000BD7 05                    2279         .byte      5
      000BD8 45 52 41 53 45        2280         .ascii     "ERASE"
      000BDD                       2281 ERASE:
      000BDD 90 5F            [ 1] 2282         clrw y 
      000BDF 1D 00 02         [ 2] 2283         subw x,#CELLL 
      000BE2 FF               [ 2] 2284         ldw (x),y 
      000BE3 CC 0B AA         [ 2] 2285         jp FILL 
                                   2286 
                                   2287 
                                   2288 ;       PACK0   ( b u a -- a )
                                   2289 ;       Build a counted string with
                                   2290 ;       u characters from b. Null fill.
      000BE6 0B D7                 2291         .word      LINK
                           000BE8  2292 LINK = . 
      000BE8 05                    2293         .byte      5
      000BE9 50 41 43 4B 30        2294         .ascii     "PACK0"
      000BEE                       2295 PACKS:
      000BEE CD 04 DF         [ 4] 2296         CALL     DUPP
      000BF1 CD 04 A8         [ 4] 2297         CALL     TOR     ;strings only on cell boundary
      000BF4 CD 06 C5         [ 4] 2298         CALL     DDUP
      000BF7 CD 04 45         [ 4] 2299         CALL     CSTOR
      000BFA CD 09 D4         [ 4] 2300         CALL     ONEP ;save count
      000BFD CD 04 EF         [ 4] 2301         CALL     SWAPP
      000C00 CD 0B 7B         [ 4] 2302         CALL     CMOVE
      000C03 CD 04 89         [ 4] 2303         CALL     RFROM
      000C06 81               [ 4] 2304         RET
                                   2305 
                                   2306 ;; Numeric output, single precision
                                   2307 
                                   2308 ;       DIGIT   ( u -- c )
                                   2309 ;       Convert digit u to a character.
      000C07 0B E8                 2310         .word      LINK
                           000C09  2311 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C09 05                    2312         .byte      5
      000C0A 44 49 47 49 54        2313         .ascii     "DIGIT"
      000C0F                       2314 DIGIT:
      000C0F CD 03 B0         [ 4] 2315         CALL	DOLIT
      000C12 00 09                 2316         .word	9
      000C14 CD 05 09         [ 4] 2317         CALL	OVER
      000C17 CD 07 B8         [ 4] 2318         CALL	LESS
      000C1A CD 03 B0         [ 4] 2319         CALL	DOLIT
      000C1D 00 07                 2320         .word	7
      000C1F CD 05 2B         [ 4] 2321         CALL	ANDD
      000C22 CD 06 DA         [ 4] 2322         CALL	PLUS
      000C25 CD 03 B0         [ 4] 2323         CALL	DOLIT
      000C28 00 30                 2324         .word	48	;'0'
      000C2A CC 06 DA         [ 2] 2325         JP	PLUS
                                   2326 
                                   2327 ;       EXTRACT ( n base -- n c )
                                   2328 ;       Extract least significant digit from n.
      000C2D 0C 09                 2329         .word      LINK
                           000C2F  2330 LINK = . 
      000C2F 07                    2331         .byte      7
      000C30 45 58 54 52 41 43 54  2332         .ascii     "EXTRACT"
      000C37                       2333 EXTRC:
      000C37 CD 0A 40         [ 4] 2334         CALL     ZERO
      000C3A CD 04 EF         [ 4] 2335         CALL     SWAPP
      000C3D CD 08 30         [ 4] 2336         CALL     UMMOD
      000C40 CD 04 EF         [ 4] 2337         CALL     SWAPP
      000C43 CC 0C 0F         [ 2] 2338         JP     DIGIT
                                   2339 
                                   2340 ;       <#      ( -- )
                                   2341 ;       Initiate  numeric output process.
      000C46 0C 2F                 2342         .word      LINK
                           000C48  2343 LINK = . 
      000C48 02                    2344         .byte      2
      000C49 3C 23                 2345         .ascii     "<#"
      000C4B                       2346 BDIGS:
      000C4B CD 0B 3F         [ 4] 2347         CALL     PAD
      000C4E CD 06 0C         [ 4] 2348         CALL     HLD
      000C51 CC 04 21         [ 2] 2349         JP     STORE
                                   2350 
                                   2351 ;       HOLD    ( c -- )
                                   2352 ;       Insert a character into output string.
      000C54 0C 48                 2353         .word      LINK
                           000C56  2354 LINK = . 
      000C56 04                    2355         .byte      4
      000C57 48 4F 4C 44           2356         .ascii     "HOLD"
      000C5B                       2357 HOLD:
      000C5B CD 06 0C         [ 4] 2358         CALL     HLD
      000C5E CD 04 38         [ 4] 2359         CALL     AT
      000C61 CD 09 E1         [ 4] 2360         CALL     ONEM
      000C64 CD 04 DF         [ 4] 2361         CALL     DUPP
      000C67 CD 06 0C         [ 4] 2362         CALL     HLD
      000C6A CD 04 21         [ 4] 2363         CALL     STORE
      000C6D CC 04 45         [ 2] 2364         JP     CSTOR
                                   2365 
                                   2366 ;       #       ( u -- u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2367 ;       Extract one digit from u and
                                   2368 ;       append digit to output string.
      000C70 0C 56                 2369         .word      LINK
                           000C72  2370 LINK = . 
      000C72 01                    2371         .byte      1
      000C73 23                    2372         .ascii     "#"
      000C74                       2373 DIG:
      000C74 CD 05 9C         [ 4] 2374         CALL     BASE
      000C77 CD 04 38         [ 4] 2375         CALL     AT
      000C7A CD 0C 37         [ 4] 2376         CALL     EXTRC
      000C7D CC 0C 5B         [ 2] 2377         JP     HOLD
                                   2378 
                                   2379 ;       #S      ( u -- 0 )
                                   2380 ;       Convert u until all digits
                                   2381 ;       are added to output string.
      000C80 0C 72                 2382         .word      LINK
                           000C82  2383 LINK = . 
      000C82 02                    2384         .byte      2
      000C83 23 53                 2385         .ascii     "#S"
      000C85                       2386 DIGS:
      000C85 CD 0C 74         [ 4] 2387 DIGS1:  CALL     DIG
      000C88 CD 04 DF         [ 4] 2388         CALL     DUPP
      000C8B CD 03 E3         [ 4] 2389         CALL     QBRAN
      000C8E 0C 92                 2390         .word      DIGS2
      000C90 20 F3            [ 2] 2391         JRA     DIGS1
      000C92 81               [ 4] 2392 DIGS2:  RET
                                   2393 
                                   2394 ;       SIGN    ( n -- )
                                   2395 ;       Add a minus sign to
                                   2396 ;       numeric output string.
      000C93 0C 82                 2397         .word      LINK
                           000C95  2398 LINK = . 
      000C95 04                    2399         .byte      4
      000C96 53 49 47 4E           2400         .ascii     "SIGN"
      000C9A                       2401 SIGN:
      000C9A CD 05 18         [ 4] 2402         CALL     ZLESS
      000C9D CD 03 E3         [ 4] 2403         CALL     QBRAN
      000CA0 0C AA                 2404         .word      SIGN1
      000CA2 CD 03 B0         [ 4] 2405         CALL     DOLIT
      000CA5 00 2D                 2406         .word      45	;"-"
      000CA7 CC 0C 5B         [ 2] 2407         JP     HOLD
      000CAA 81               [ 4] 2408 SIGN1:  RET
                                   2409 
                                   2410 ;       #>      ( w -- b u )
                                   2411 ;       Prepare output string.
      000CAB 0C 95                 2412         .word      LINK
                           000CAD  2413 LINK = . 
      000CAD 02                    2414         .byte      2
      000CAE 23 3E                 2415         .ascii     "#>"
      000CB0                       2416 EDIGS:
      000CB0 CD 04 D5         [ 4] 2417         CALL     DROP
      000CB3 CD 06 0C         [ 4] 2418         CALL     HLD
      000CB6 CD 04 38         [ 4] 2419         CALL     AT
      000CB9 CD 0B 3F         [ 4] 2420         CALL     PAD
      000CBC CD 05 09         [ 4] 2421         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CBF CC 07 53         [ 2] 2422         JP     SUBB
                                   2423 
                                   2424 ;       str     ( w -- b u )
                                   2425 ;       Convert a signed integer
                                   2426 ;       to a numeric string.
      000CC2 0C AD                 2427         .word      LINK
                           000CC4  2428 LINK = . 
      000CC4 03                    2429         .byte      3
      000CC5 53 54 52              2430         .ascii     "STR"
      000CC8                       2431 STR:
      000CC8 CD 04 DF         [ 4] 2432         CALL     DUPP
      000CCB CD 04 A8         [ 4] 2433         CALL     TOR
      000CCE CD 07 6D         [ 4] 2434         CALL     ABSS
      000CD1 CD 0C 4B         [ 4] 2435         CALL     BDIGS
      000CD4 CD 0C 85         [ 4] 2436         CALL     DIGS
      000CD7 CD 04 89         [ 4] 2437         CALL     RFROM
      000CDA CD 0C 9A         [ 4] 2438         CALL     SIGN
      000CDD CC 0C B0         [ 2] 2439         JP     EDIGS
                                   2440 
                                   2441 ;       HEX     ( -- )
                                   2442 ;       Use radix 16 as base for
                                   2443 ;       numeric conversions.
      000CE0 0C C4                 2444         .word      LINK
                           000CE2  2445 LINK = . 
      000CE2 03                    2446         .byte      3
      000CE3 48 45 58              2447         .ascii     "HEX"
      000CE6                       2448 HEX:
      000CE6 CD 03 B0         [ 4] 2449         CALL     DOLIT
      000CE9 00 10                 2450         .word      16
      000CEB CD 05 9C         [ 4] 2451         CALL     BASE
      000CEE CC 04 21         [ 2] 2452         JP     STORE
                                   2453 
                                   2454 ;       DECIMAL ( -- )
                                   2455 ;       Use radix 10 as base
                                   2456 ;       for numeric conversions.
      000CF1 0C E2                 2457         .word      LINK
                           000CF3  2458 LINK = . 
      000CF3 07                    2459         .byte      7
      000CF4 44 45 43 49 4D 41 4C  2460         .ascii     "DECIMAL"
      000CFB                       2461 DECIM:
      000CFB CD 03 B0         [ 4] 2462         CALL     DOLIT
      000CFE 00 0A                 2463         .word      10
      000D00 CD 05 9C         [ 4] 2464         CALL     BASE
      000D03 CC 04 21         [ 2] 2465         JP     STORE
                                   2466 
                                   2467 ;; Numeric input, single precision
                                   2468 
                                   2469 ;       DIGIT?  ( c base -- u t )
                                   2470 ;       Convert a character to its numeric
                                   2471 ;       value. A flag indicates success.
      000D06 0C F3                 2472         .word      LINK
                           000D08  2473 LINK = . 
      000D08 06                    2474         .byte       6
      000D09 44 49 47 49 54 3F     2475         .ascii     "DIGIT?"
      000D0F                       2476 DIGTQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D0F CD 04 A8         [ 4] 2477         CALL     TOR
      000D12 CD 03 B0         [ 4] 2478         CALL     DOLIT
      000D15 00 30                 2479         .word     48	; "0"
      000D17 CD 07 53         [ 4] 2480         CALL     SUBB
      000D1A CD 03 B0         [ 4] 2481         CALL     DOLIT
      000D1D 00 09                 2482         .word      9
      000D1F CD 05 09         [ 4] 2483         CALL     OVER
      000D22 CD 07 B8         [ 4] 2484         CALL     LESS
      000D25 CD 03 E3         [ 4] 2485         CALL     QBRAN
      000D28 0D 40                 2486         .word      DGTQ1
      000D2A CD 03 B0         [ 4] 2487         CALL     DOLIT
      000D2D 00 07                 2488         .word      7
      000D2F CD 07 53         [ 4] 2489         CALL     SUBB
      000D32 CD 04 DF         [ 4] 2490         CALL     DUPP
      000D35 CD 03 B0         [ 4] 2491         CALL     DOLIT
      000D38 00 0A                 2492         .word      10
      000D3A CD 07 B8         [ 4] 2493         CALL     LESS
      000D3D CD 05 3F         [ 4] 2494         CALL     ORR
      000D40 CD 04 DF         [ 4] 2495 DGTQ1:  CALL     DUPP
      000D43 CD 04 89         [ 4] 2496         CALL     RFROM
      000D46 CC 07 9A         [ 2] 2497         JP     ULESS
                                   2498 
                                   2499 ;       NUMBER? ( a -- n T | a F )
                                   2500 ;       Convert a number string to
                                   2501 ;       integer. Push a flag on tos.
      000D49 0D 08                 2502         .word      LINK
                           000D4B  2503 LINK = . 
      000D4B 07                    2504         .byte      7
      000D4C 4E 55 4D 42 45 52 3F  2505         .ascii     "NUMBER?"
      000D53                       2506 NUMBQ:
      000D53 CD 05 9C         [ 4] 2507         CALL     BASE
      000D56 CD 04 38         [ 4] 2508         CALL     AT
      000D59 CD 04 A8         [ 4] 2509         CALL     TOR
      000D5C CD 0A 40         [ 4] 2510         CALL     ZERO
      000D5F CD 05 09         [ 4] 2511         CALL     OVER
      000D62 CD 0B 17         [ 4] 2512         CALL     COUNT
      000D65 CD 05 09         [ 4] 2513         CALL     OVER
      000D68 CD 04 56         [ 4] 2514         CALL     CAT
      000D6B CD 03 B0         [ 4] 2515         CALL     DOLIT
      000D6E 00 24                 2516         .word     36	; "0x"
      000D70 CD 07 7B         [ 4] 2517         CALL     EQUAL
      000D73 CD 03 E3         [ 4] 2518         CALL     QBRAN
      000D76 0D 87                 2519         .word      NUMQ1
      000D78 CD 0C E6         [ 4] 2520         CALL     HEX
      000D7B CD 04 EF         [ 4] 2521         CALL     SWAPP
      000D7E CD 09 D4         [ 4] 2522         CALL     ONEP
      000D81 CD 04 EF         [ 4] 2523         CALL     SWAPP
      000D84 CD 09 E1         [ 4] 2524         CALL     ONEM
      000D87 CD 05 09         [ 4] 2525 NUMQ1:  CALL     OVER
      000D8A CD 04 56         [ 4] 2526         CALL     CAT
      000D8D CD 03 B0         [ 4] 2527         CALL     DOLIT
      000D90 00 2D                 2528         .word     45	; "-"
      000D92 CD 07 7B         [ 4] 2529         CALL     EQUAL
      000D95 CD 04 A8         [ 4] 2530         CALL     TOR
      000D98 CD 04 EF         [ 4] 2531         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D9B CD 04 9C         [ 4] 2532         CALL     RAT
      000D9E CD 07 53         [ 4] 2533         CALL     SUBB
      000DA1 CD 04 EF         [ 4] 2534         CALL     SWAPP
      000DA4 CD 04 9C         [ 4] 2535         CALL     RAT
      000DA7 CD 06 DA         [ 4] 2536         CALL     PLUS
      000DAA CD 06 89         [ 4] 2537         CALL     QDUP
      000DAD CD 03 E3         [ 4] 2538         CALL     QBRAN
      000DB0 0E 11                 2539         .word      NUMQ6
      000DB2 CD 09 E1         [ 4] 2540         CALL     ONEM
      000DB5 CD 04 A8         [ 4] 2541         CALL     TOR
      000DB8 CD 04 DF         [ 4] 2542 NUMQ2:  CALL     DUPP
      000DBB CD 04 A8         [ 4] 2543         CALL     TOR
      000DBE CD 04 56         [ 4] 2544         CALL     CAT
      000DC1 CD 05 9C         [ 4] 2545         CALL     BASE
      000DC4 CD 04 38         [ 4] 2546         CALL     AT
      000DC7 CD 0D 0F         [ 4] 2547         CALL     DIGTQ
      000DCA CD 03 E3         [ 4] 2548         CALL     QBRAN
      000DCD 0D FF                 2549         .word      NUMQ4
      000DCF CD 04 EF         [ 4] 2550         CALL     SWAPP
      000DD2 CD 05 9C         [ 4] 2551         CALL     BASE
      000DD5 CD 04 38         [ 4] 2552         CALL     AT
      000DD8 CD 09 53         [ 4] 2553         CALL     STAR
      000DDB CD 06 DA         [ 4] 2554         CALL     PLUS
      000DDE CD 04 89         [ 4] 2555         CALL     RFROM
      000DE1 CD 09 D4         [ 4] 2556         CALL     ONEP
      000DE4 CD 03 C4         [ 4] 2557         CALL     DONXT
      000DE7 0D B8                 2558         .word      NUMQ2
      000DE9 CD 04 9C         [ 4] 2559         CALL     RAT
      000DEC CD 04 EF         [ 4] 2560         CALL     SWAPP
      000DEF CD 04 D5         [ 4] 2561         CALL     DROP
      000DF2 CD 03 E3         [ 4] 2562         CALL     QBRAN
      000DF5 0D FA                 2563         .word      NUMQ3
      000DF7 CD 07 05         [ 4] 2564         CALL     NEGAT
      000DFA CD 04 EF         [ 4] 2565 NUMQ3:  CALL     SWAPP
      000DFD 20 0F            [ 2] 2566         JRA     NUMQ5
      000DFF CD 04 89         [ 4] 2567 NUMQ4:  CALL     RFROM
      000E02 CD 04 89         [ 4] 2568         CALL     RFROM
      000E05 CD 06 BA         [ 4] 2569         CALL     DDROP
      000E08 CD 06 BA         [ 4] 2570         CALL     DDROP
      000E0B CD 0A 40         [ 4] 2571         CALL     ZERO
      000E0E CD 04 DF         [ 4] 2572 NUMQ5:  CALL     DUPP
      000E11 CD 04 89         [ 4] 2573 NUMQ6:  CALL     RFROM
      000E14 CD 06 BA         [ 4] 2574         CALL     DDROP
      000E17 CD 04 89         [ 4] 2575         CALL     RFROM
      000E1A CD 05 9C         [ 4] 2576         CALL     BASE
      000E1D CC 04 21         [ 2] 2577         JP     STORE
                                   2578 
                                   2579 ;; Basic I/O
                                   2580 
                                   2581 ;       KEY     ( -- c )
                                   2582 ;       Wait for and return an
                                   2583 ;       input character.
      000E20 0D 4B                 2584         .word      LINK
                           000E22  2585 LINK = . 
      000E22 03                    2586         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E23 4B 45 59              2587         .ascii     "KEY"
      000E26                       2588 KEY:
      000E26 72 0B 52 40 FB   [ 2] 2589         btjf UART2_SR,#UART_SR_RXNE,. 
      000E2B C6 52 41         [ 1] 2590         ld a,UART2_DR 
      000E2E 1D 00 02         [ 2] 2591         subw x,#CELLL 
      000E31 E7 01            [ 1] 2592         ld (1,x),a 
      000E33 7F               [ 1] 2593         clr (x)
      000E34 81               [ 4] 2594         ret 
                                   2595 
                                   2596 ;       NUF?    ( -- t )
                                   2597 ;       Return false if no input,
                                   2598 ;       else pause and if CR return true.
      000E35 0E 22                 2599         .word      LINK
                           000E37  2600 LINK = . 
      000E37 04                    2601         .byte      4
      000E38 4E 55 46 3F           2602         .ascii     "NUF?"
      000E3C                       2603 NUFQ:
      000E3C CD 03 7C         [ 4] 2604         CALL     QKEY
      000E3F CD 04 DF         [ 4] 2605         CALL     DUPP
      000E42 CD 03 E3         [ 4] 2606         CALL     QBRAN
      000E45 0E 55                 2607         .word    NUFQ1
      000E47 CD 06 BA         [ 4] 2608         CALL     DDROP
      000E4A CD 0E 26         [ 4] 2609         CALL     KEY
      000E4D CD 03 B0         [ 4] 2610         CALL     DOLIT
      000E50 00 0D                 2611         .word      CRR
      000E52 CC 07 7B         [ 2] 2612         JP     EQUAL
      000E55 81               [ 4] 2613 NUFQ1:  RET
                                   2614 
                                   2615 ;       SPACE   ( -- )
                                   2616 ;       Send  blank character to
                                   2617 ;       output device.
      000E56 0E 37                 2618         .word      LINK
                           000E58  2619 LINK = . 
      000E58 05                    2620         .byte      5
      000E59 53 50 41 43 45        2621         .ascii     "SPACE"
      000E5E                       2622 SPACE:
      000E5E CD 0A 33         [ 4] 2623         CALL     BLANK
      000E61 CC 03 9A         [ 2] 2624         JP     EMIT
                                   2625 
                                   2626 ;       SPACES  ( +n -- )
                                   2627 ;       Send n spaces to output device.
      000E64 0E 58                 2628         .word      LINK
                           000E66  2629 LINK = . 
      000E66 06                    2630         .byte      6
      000E67 53 50 41 43 45 53     2631         .ascii     "SPACES"
      000E6D                       2632 SPACS:
      000E6D CD 0A 40         [ 4] 2633         CALL     ZERO
      000E70 CD 07 D8         [ 4] 2634         CALL     MAX
      000E73 CD 04 A8         [ 4] 2635         CALL     TOR
      000E76 20 03            [ 2] 2636         JRA      CHAR2
      000E78 CD 0E 5E         [ 4] 2637 CHAR1:  CALL     SPACE
      000E7B CD 03 C4         [ 4] 2638 CHAR2:  CALL     DONXT
      000E7E 0E 78                 2639         .word    CHAR1
      000E80 81               [ 4] 2640         RET
                                   2641 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2642 ;       TYPE    ( b u -- )
                                   2643 ;       Output u characters from b.
      000E81 0E 66                 2644         .word      LINK
                           000E83  2645 LINK = . 
      000E83 04                    2646         .byte      4
      000E84 54 59 50 45           2647         .ascii     "TYPE"
      000E88                       2648 TYPES:
      000E88 CD 04 A8         [ 4] 2649         CALL     TOR
      000E8B 20 0C            [ 2] 2650         JRA     TYPE2
      000E8D CD 04 DF         [ 4] 2651 TYPE1:  CALL     DUPP
      000E90 CD 04 56         [ 4] 2652         CALL     CAT
      000E93 CD 03 9A         [ 4] 2653         CALL     EMIT
      000E96 CD 09 D4         [ 4] 2654         CALL     ONEP
      000E99 CD 03 C4         [ 4] 2655 TYPE2:  CALL     DONXT
      000E9C 0E 8D                 2656         .word      TYPE1
      000E9E CC 04 D5         [ 2] 2657         JP     DROP
                                   2658 
                                   2659 ;       CR      ( -- )
                                   2660 ;       Output a carriage return
                                   2661 ;       and a line feed.
      000EA1 0E 83                 2662         .word      LINK
                           000EA3  2663 LINK = . 
      000EA3 02                    2664         .byte      2
      000EA4 43 52                 2665         .ascii     "CR"
      000EA6                       2666 CR:
      000EA6 CD 03 B0         [ 4] 2667         CALL     DOLIT
      000EA9 00 0D                 2668         .word      CRR
      000EAB CD 03 9A         [ 4] 2669         CALL     EMIT
      000EAE CD 03 B0         [ 4] 2670         CALL     DOLIT
      000EB1 00 0A                 2671         .word      LF
      000EB3 CC 03 9A         [ 2] 2672         JP     EMIT
                                   2673 
                                   2674 ;       do$     ( -- a )
                                   2675 ;       Return  address of a compiled
                                   2676 ;       string.
      000EB6 0E A3                 2677         .word      LINK
                           000EB8  2678 LINK = . 
      000EB8 43                    2679 	.byte      COMPO+3
      000EB9 44 4F 24              2680         .ascii     "DO$"
      000EBC                       2681 DOSTR:
      000EBC CD 04 89         [ 4] 2682         CALL     RFROM
      000EBF CD 04 9C         [ 4] 2683         CALL     RAT
      000EC2 CD 04 89         [ 4] 2684         CALL     RFROM
      000EC5 CD 0B 17         [ 4] 2685         CALL     COUNT
      000EC8 CD 06 DA         [ 4] 2686         CALL     PLUS
      000ECB CD 04 A8         [ 4] 2687         CALL     TOR
      000ECE CD 04 EF         [ 4] 2688         CALL     SWAPP
      000ED1 CD 04 A8         [ 4] 2689         CALL     TOR
      000ED4 81               [ 4] 2690         RET
                                   2691 
                                   2692 ;       $"|     ( -- a )
                                   2693 ;       Run time routine compiled by $".
                                   2694 ;       Return address of a compiled string.
      000ED5 0E B8                 2695         .word      LINK
                           000ED7  2696 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000ED7 43                    2697 	.byte      COMPO+3
      000ED8 24 22 7C              2698         .byte     '$','"','|'
      000EDB                       2699 STRQP:
      000EDB CD 0E BC         [ 4] 2700         CALL     DOSTR
      000EDE 81               [ 4] 2701         RET
                                   2702 
                                   2703 ;       ."|     ( -- )
                                   2704 ;       Run time routine of ." .
                                   2705 ;       Output a compiled string.
      000EDF 0E D7                 2706         .word      LINK
                           000EE1  2707 LINK = . 
      000EE1 43                    2708 	.byte      COMPO+3
      000EE2 2E 22 7C              2709         .byte     '.','"','|'
      000EE5                       2710 DOTQP:
      000EE5 CD 0E BC         [ 4] 2711         CALL     DOSTR
      000EE8 CD 0B 17         [ 4] 2712         CALL     COUNT
      000EEB CC 0E 88         [ 2] 2713         JP     TYPES
                                   2714 
                                   2715 ;       .R      ( n +n -- )
                                   2716 ;       Display an integer in a field
                                   2717 ;       of n columns, right justified.
      000EEE 0E E1                 2718         .word      LINK
                           000EF0  2719 LINK = . 
      000EF0 02                    2720         .byte      2
      000EF1 2E 52                 2721         .ascii     ".R"
      000EF3                       2722 DOTR:
      000EF3 CD 04 A8         [ 4] 2723         CALL     TOR
      000EF6 CD 0C C8         [ 4] 2724         CALL     STR
      000EF9 CD 04 89         [ 4] 2725         CALL     RFROM
      000EFC CD 05 09         [ 4] 2726         CALL     OVER
      000EFF CD 07 53         [ 4] 2727         CALL     SUBB
      000F02 CD 0E 6D         [ 4] 2728         CALL     SPACS
      000F05 CC 0E 88         [ 2] 2729         JP     TYPES
                                   2730 
                                   2731 ;       U.R     ( u +n -- )
                                   2732 ;       Display an unsigned integer
                                   2733 ;       in n column, right justified.
      000F08 0E F0                 2734         .word      LINK
                           000F0A  2735 LINK = . 
      000F0A 03                    2736         .byte      3
      000F0B 55 2E 52              2737         .ascii     "U.R"
      000F0E                       2738 UDOTR:
      000F0E CD 04 A8         [ 4] 2739         CALL     TOR
      000F11 CD 0C 4B         [ 4] 2740         CALL     BDIGS
      000F14 CD 0C 85         [ 4] 2741         CALL     DIGS
      000F17 CD 0C B0         [ 4] 2742         CALL     EDIGS
      000F1A CD 04 89         [ 4] 2743         CALL     RFROM
      000F1D CD 05 09         [ 4] 2744         CALL     OVER
      000F20 CD 07 53         [ 4] 2745         CALL     SUBB
      000F23 CD 0E 6D         [ 4] 2746         CALL     SPACS
      000F26 CC 0E 88         [ 2] 2747         JP     TYPES
                                   2748 
                                   2749 ;       U.      ( u -- )
                                   2750 ;       Display an unsigned integer
                                   2751 ;       in free format.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F29 0F 0A                 2752         .word      LINK
                           000F2B  2753 LINK = . 
      000F2B 02                    2754         .byte      2
      000F2C 55 2E                 2755         .ascii     "U."
      000F2E                       2756 UDOT:
      000F2E CD 0C 4B         [ 4] 2757         CALL     BDIGS
      000F31 CD 0C 85         [ 4] 2758         CALL     DIGS
      000F34 CD 0C B0         [ 4] 2759         CALL     EDIGS
      000F37 CD 0E 5E         [ 4] 2760         CALL     SPACE
      000F3A CC 0E 88         [ 2] 2761         JP     TYPES
                                   2762 
                                   2763 ;       .       ( w -- )
                                   2764 ;       Display an integer in free
                                   2765 ;       format, preceeded by a space.
      000F3D 0F 2B                 2766         .word      LINK
                           000F3F  2767 LINK = . 
      000F3F 01                    2768         .byte      1
      000F40 2E                    2769         .ascii     "."
      000F41                       2770 DOT:
      000F41 CD 05 9C         [ 4] 2771         CALL     BASE
      000F44 CD 04 38         [ 4] 2772         CALL     AT
      000F47 CD 03 B0         [ 4] 2773         CALL     DOLIT
      000F4A 00 0A                 2774         .word      10
      000F4C CD 05 54         [ 4] 2775         CALL     XORR    ;?decimal
      000F4F CD 03 E3         [ 4] 2776         CALL     QBRAN
      000F52 0F 57                 2777         .word      DOT1
      000F54 CC 0F 2E         [ 2] 2778         JP     UDOT
      000F57 CD 0C C8         [ 4] 2779 DOT1:   CALL     STR
      000F5A CD 0E 5E         [ 4] 2780         CALL     SPACE
      000F5D CC 0E 88         [ 2] 2781         JP     TYPES
                                   2782 
                                   2783 ;       ?       ( a -- )
                                   2784 ;       Display contents in memory cell.
      000F60 0F 3F                 2785         .word      LINK
                                   2786         
                           000F62  2787 LINK = . 
      000F62 01                    2788         .byte      1
      000F63 3F                    2789         .ascii     "?"
      000F64                       2790 QUEST:
      000F64 CD 04 38         [ 4] 2791         CALL     AT
      000F67 CC 0F 41         [ 2] 2792         JP     DOT
                                   2793 
                                   2794 ;; Parsing
                                   2795 
                                   2796 ;       parse   ( b u c -- b u delta ; <string> )
                                   2797 ;       Scan string delimited by c.
                                   2798 ;       Return found string and its offset.
      000F6A 0F 62                 2799         .word      LINK
                           000F6C  2800 LINK = . 
      000F6C 05                    2801         .byte      5
      000F6D 70 61 72 73 65        2802         .ascii     "parse"
      000F72                       2803 PARS:
      000F72 CD 05 AB         [ 4] 2804         CALL     TEMP
      000F75 CD 04 21         [ 4] 2805         CALL     STORE
      000F78 CD 05 09         [ 4] 2806         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F7B CD 04 A8         [ 4] 2807         CALL     TOR
      000F7E CD 04 DF         [ 4] 2808         CALL     DUPP
      000F81 CD 03 E3         [ 4] 2809         CALL     QBRAN
      000F84 10 2A                 2810         .word    PARS8
      000F86 CD 09 E1         [ 4] 2811         CALL     ONEM
      000F89 CD 05 AB         [ 4] 2812         CALL     TEMP
      000F8C CD 04 38         [ 4] 2813         CALL     AT
      000F8F CD 0A 33         [ 4] 2814         CALL     BLANK
      000F92 CD 07 7B         [ 4] 2815         CALL     EQUAL
      000F95 CD 03 E3         [ 4] 2816         CALL     QBRAN
      000F98 0F CB                 2817         .word      PARS3
      000F9A CD 04 A8         [ 4] 2818         CALL     TOR
      000F9D CD 0A 33         [ 4] 2819 PARS1:  CALL     BLANK
      000FA0 CD 05 09         [ 4] 2820         CALL     OVER
      000FA3 CD 04 56         [ 4] 2821         CALL     CAT     ;skip leading blanks ONLY
      000FA6 CD 07 53         [ 4] 2822         CALL     SUBB
      000FA9 CD 05 18         [ 4] 2823         CALL     ZLESS
      000FAC CD 06 F4         [ 4] 2824         CALL     INVER
      000FAF CD 03 E3         [ 4] 2825         CALL     QBRAN
      000FB2 0F C8                 2826         .word      PARS2
      000FB4 CD 09 D4         [ 4] 2827         CALL     ONEP
      000FB7 CD 03 C4         [ 4] 2828         CALL     DONXT
      000FBA 0F 9D                 2829         .word      PARS1
      000FBC CD 04 89         [ 4] 2830         CALL     RFROM
      000FBF CD 04 D5         [ 4] 2831         CALL     DROP
      000FC2 CD 0A 40         [ 4] 2832         CALL     ZERO
      000FC5 CC 04 DF         [ 2] 2833         JP     DUPP
      000FC8 CD 04 89         [ 4] 2834 PARS2:  CALL     RFROM
      000FCB CD 05 09         [ 4] 2835 PARS3:  CALL     OVER
      000FCE CD 04 EF         [ 4] 2836         CALL     SWAPP
      000FD1 CD 04 A8         [ 4] 2837         CALL     TOR
      000FD4 CD 05 AB         [ 4] 2838 PARS4:  CALL     TEMP
      000FD7 CD 04 38         [ 4] 2839         CALL     AT
      000FDA CD 05 09         [ 4] 2840         CALL     OVER
      000FDD CD 04 56         [ 4] 2841         CALL     CAT
      000FE0 CD 07 53         [ 4] 2842         CALL     SUBB    ;scan for delimiter
      000FE3 CD 05 AB         [ 4] 2843         CALL     TEMP
      000FE6 CD 04 38         [ 4] 2844         CALL     AT
      000FE9 CD 0A 33         [ 4] 2845         CALL     BLANK
      000FEC CD 07 7B         [ 4] 2846         CALL     EQUAL
      000FEF CD 03 E3         [ 4] 2847         CALL     QBRAN
      000FF2 0F F7                 2848         .word      PARS5
      000FF4 CD 05 18         [ 4] 2849         CALL     ZLESS
      000FF7 CD 03 E3         [ 4] 2850 PARS5:  CALL     QBRAN
      000FFA 10 0C                 2851         .word      PARS6
      000FFC CD 09 D4         [ 4] 2852         CALL     ONEP
      000FFF CD 03 C4         [ 4] 2853         CALL     DONXT
      001002 0F D4                 2854         .word      PARS4
      001004 CD 04 DF         [ 4] 2855         CALL     DUPP
      001007 CD 04 A8         [ 4] 2856         CALL     TOR
      00100A 20 0F            [ 2] 2857         JRA     PARS7
      00100C CD 04 89         [ 4] 2858 PARS6:  CALL     RFROM
      00100F CD 04 D5         [ 4] 2859         CALL     DROP
      001012 CD 04 DF         [ 4] 2860         CALL     DUPP
      001015 CD 09 D4         [ 4] 2861         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001018 CD 04 A8         [ 4] 2862         CALL     TOR
      00101B CD 05 09         [ 4] 2863 PARS7:  CALL     OVER
      00101E CD 07 53         [ 4] 2864         CALL     SUBB
      001021 CD 04 89         [ 4] 2865         CALL     RFROM
      001024 CD 04 89         [ 4] 2866         CALL     RFROM
      001027 CC 07 53         [ 2] 2867         JP     SUBB
      00102A CD 05 09         [ 4] 2868 PARS8:  CALL     OVER
      00102D CD 04 89         [ 4] 2869         CALL     RFROM
      001030 CC 07 53         [ 2] 2870         JP     SUBB
                                   2871 
                                   2872 ;       PARSE   ( c -- b u ; <string> )
                                   2873 ;       Scan input stream and return
                                   2874 ;       counted string delimited by c.
      001033 0F 6C                 2875         .word      LINK
                           001035  2876 LINK = . 
      001035 05                    2877         .byte      5
      001036 50 41 52 53 45        2878         .ascii     "PARSE"
      00103B                       2879 PARSE:
      00103B CD 04 A8         [ 4] 2880         CALL     TOR
      00103E CD 0B 50         [ 4] 2881         CALL     TIB
      001041 CD 05 BA         [ 4] 2882         CALL     INN
      001044 CD 04 38         [ 4] 2883         CALL     AT
      001047 CD 06 DA         [ 4] 2884         CALL     PLUS    ;current input buffer pointer
      00104A CD 05 CA         [ 4] 2885         CALL     NTIB
      00104D CD 04 38         [ 4] 2886         CALL     AT
      001050 CD 05 BA         [ 4] 2887         CALL     INN
      001053 CD 04 38         [ 4] 2888         CALL     AT
      001056 CD 07 53         [ 4] 2889         CALL     SUBB    ;remaining count
      001059 CD 04 89         [ 4] 2890         CALL     RFROM
      00105C CD 0F 72         [ 4] 2891         CALL     PARS
      00105F CD 05 BA         [ 4] 2892         CALL     INN
      001062 CC 0A B0         [ 2] 2893         JP     PSTOR
                                   2894 
                                   2895 ;       .(      ( -- )
                                   2896 ;       Output following string up to next ) .
      001065 10 35                 2897         .word      LINK
                           001067  2898 LINK = . 
      001067 82                    2899 	.byte      IMEDD+2
      001068 2E 28                 2900         .ascii     ".("
      00106A                       2901 DOTPR:
      00106A CD 03 B0         [ 4] 2902         CALL     DOLIT
      00106D 00 29                 2903         .word     41	; ")"
      00106F CD 10 3B         [ 4] 2904         CALL     PARSE
      001072 CC 0E 88         [ 2] 2905         JP     TYPES
                                   2906 
                                   2907 ;       (       ( -- )
                                   2908 ;       Ignore following string up to next ).
                                   2909 ;       A comment.
      001075 10 67                 2910         .word      LINK
                           001077  2911 LINK = . 
      001077 81                    2912 	.byte      IMEDD+1
      001078 28                    2913         .ascii     "("
      001079                       2914 PAREN:
      001079 CD 03 B0         [ 4] 2915         CALL     DOLIT
      00107C 00 29                 2916         .word     41	; ")"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00107E CD 10 3B         [ 4] 2917         CALL     PARSE
      001081 CC 06 BA         [ 2] 2918         JP     DDROP
                                   2919 
                                   2920 ;       \       ( -- )
                                   2921 ;       Ignore following text till
                                   2922 ;       end of line.
      001084 10 77                 2923         .word      LINK
                           001086  2924 LINK = . 
      001086 81                    2925 	.byte      IMEDD+1
      001087 5C                    2926         .ascii     "\"
      001088                       2927 BKSLA:
      001088 90 AE 00 0C      [ 2] 2928         ldw y,#UCTIB ; #TIB  
      00108C 90 FE            [ 2] 2929         ldw y,(y)
      00108E 90 89            [ 2] 2930         pushw y ; count in TIB 
      001090 90 AE 00 0A      [ 2] 2931         ldw y,#UINN ; >IN 
      001094 90 BF 24         [ 2] 2932         ldw YTEMP,y
      001097 90 85            [ 2] 2933         popw y 
      001099 91 CF 24         [ 5] 2934         ldw [YTEMP],y
      00109C 81               [ 4] 2935         ret 
                                   2936 
                                   2937 ;       WORD    ( c -- a ; <string> )
                                   2938 ;       Parse a word from input stream
                                   2939 ;       and copy it to code dictionary.
      00109D 10 86                 2940         .word      LINK
                           00109F  2941 LINK = . 
      00109F 04                    2942         .byte      4
      0010A0 57 4F 52 44           2943         .ascii     "WORD"
      0010A4                       2944 WORDD:
      0010A4 CD 10 3B         [ 4] 2945         CALL     PARSE
      0010A7 CD 0B 2E         [ 4] 2946         CALL     HERE
      0010AA CD 09 A9         [ 4] 2947         CALL     CELLP
      0010AD CC 0B EE         [ 2] 2948         JP     PACKS
                                   2949 
                                   2950 ;       TOKEN   ( -- a ; <string> )
                                   2951 ;       Parse a word from input stream
                                   2952 ;       and copy it to name dictionary.
      0010B0 10 9F                 2953         .word      LINK
                           0010B2  2954 LINK = . 
      0010B2 05                    2955         .byte      5
      0010B3 54 4F 4B 45 4E        2956         .ascii     "TOKEN"
      0010B8                       2957 TOKEN:
      0010B8 CD 0A 33         [ 4] 2958         CALL     BLANK
      0010BB CC 10 A4         [ 2] 2959         JP     WORDD
                                   2960 
                                   2961 ;; Dictionary search
                                   2962 
                                   2963 ;       NAME>   ( na -- ca )
                                   2964 ;       Return a code address given
                                   2965 ;       a name address.
      0010BE 10 B2                 2966         .word      LINK
                           0010C0  2967 LINK = . 
      0010C0 05                    2968         .byte      5
      0010C1 4E 41 4D 45 3E        2969         .ascii     "NAME>"
      0010C6                       2970 NAMET:
      0010C6 CD 0B 17         [ 4] 2971         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010C9 CD 03 B0         [ 4] 2972         CALL     DOLIT
      0010CC 00 1F                 2973         .word      31
      0010CE CD 05 2B         [ 4] 2974         CALL     ANDD
      0010D1 CC 06 DA         [ 2] 2975         JP     PLUS
                                   2976 
                                   2977 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2978 ;       Compare u cells in two
                                   2979 ;       strings. Return 0 if identical.
      0010D4 10 C0                 2980         .word      LINK
                           0010D6  2981 LINK = . 
      0010D6 05                    2982         .byte       5
      0010D7 53 41 4D 45 3F        2983         .ascii     "SAME?"
      0010DC                       2984 SAMEQ:
      0010DC CD 09 E1         [ 4] 2985         CALL     ONEM
      0010DF CD 04 A8         [ 4] 2986         CALL     TOR
      0010E2 20 29            [ 2] 2987         JRA     SAME2
      0010E4 CD 05 09         [ 4] 2988 SAME1:  CALL     OVER
      0010E7 CD 04 9C         [ 4] 2989         CALL     RAT
      0010EA CD 06 DA         [ 4] 2990         CALL     PLUS
      0010ED CD 04 56         [ 4] 2991         CALL     CAT
      0010F0 CD 05 09         [ 4] 2992         CALL     OVER
      0010F3 CD 04 9C         [ 4] 2993         CALL     RAT
      0010F6 CD 06 DA         [ 4] 2994         CALL     PLUS
      0010F9 CD 04 56         [ 4] 2995         CALL     CAT
      0010FC CD 07 53         [ 4] 2996         CALL     SUBB
      0010FF CD 06 89         [ 4] 2997         CALL     QDUP
      001102 CD 03 E3         [ 4] 2998         CALL     QBRAN
      001105 11 0D                 2999         .word      SAME2
      001107 CD 04 89         [ 4] 3000         CALL     RFROM
      00110A CC 04 D5         [ 2] 3001         JP     DROP
      00110D CD 03 C4         [ 4] 3002 SAME2:  CALL     DONXT
      001110 10 E4                 3003         .word      SAME1
      001112 CC 0A 40         [ 2] 3004         JP     ZERO
                                   3005 
                                   3006 ;       find    ( a va -- ca na | a F )
                                   3007 ;       Search vocabulary for string.
                                   3008 ;       Return ca and na if succeeded.
      001115 10 D6                 3009         .word      LINK
                           001117  3010 LINK = . 
      001117 04                    3011         .byte      4
      001118 46 49 4E 44           3012         .ascii     "FIND"
      00111C                       3013 FIND:
      00111C CD 04 EF         [ 4] 3014         CALL     SWAPP
      00111F CD 04 DF         [ 4] 3015         CALL     DUPP
      001122 CD 04 56         [ 4] 3016         CALL     CAT
      001125 CD 05 AB         [ 4] 3017         CALL     TEMP
      001128 CD 04 21         [ 4] 3018         CALL     STORE
      00112B CD 04 DF         [ 4] 3019         CALL     DUPP
      00112E CD 04 38         [ 4] 3020         CALL     AT
      001131 CD 04 A8         [ 4] 3021         CALL     TOR
      001134 CD 09 A9         [ 4] 3022         CALL     CELLP
      001137 CD 04 EF         [ 4] 3023         CALL     SWAPP
      00113A CD 04 38         [ 4] 3024 FIND1:  CALL     AT
      00113D CD 04 DF         [ 4] 3025         CALL     DUPP
      001140 CD 03 E3         [ 4] 3026         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001143 11 79                 3027         .word      FIND6
      001145 CD 04 DF         [ 4] 3028         CALL     DUPP
      001148 CD 04 38         [ 4] 3029         CALL     AT
      00114B CD 03 B0         [ 4] 3030         CALL     DOLIT
      00114E 1F 7F                 3031         .word      MASKK
      001150 CD 05 2B         [ 4] 3032         CALL     ANDD
      001153 CD 04 9C         [ 4] 3033         CALL     RAT
      001156 CD 05 54         [ 4] 3034         CALL     XORR
      001159 CD 03 E3         [ 4] 3035         CALL     QBRAN
      00115C 11 68                 3036         .word      FIND2
      00115E CD 09 A9         [ 4] 3037         CALL     CELLP
      001161 CD 03 B0         [ 4] 3038         CALL     DOLIT
      001164 FF FF                 3039         .word     0xFFFF
      001166 20 0C            [ 2] 3040         JRA     FIND3
      001168 CD 09 A9         [ 4] 3041 FIND2:  CALL     CELLP
      00116B CD 05 AB         [ 4] 3042         CALL     TEMP
      00116E CD 04 38         [ 4] 3043         CALL     AT
      001171 CD 10 DC         [ 4] 3044         CALL     SAMEQ
      001174 CD 03 FA         [ 4] 3045 FIND3:  CALL     BRAN
      001177 11 88                 3046         .word      FIND4
      001179 CD 04 89         [ 4] 3047 FIND6:  CALL     RFROM
      00117C CD 04 D5         [ 4] 3048         CALL     DROP
      00117F CD 04 EF         [ 4] 3049         CALL     SWAPP
      001182 CD 09 B8         [ 4] 3050         CALL     CELLM
      001185 CC 04 EF         [ 2] 3051         JP     SWAPP
      001188 CD 03 E3         [ 4] 3052 FIND4:  CALL     QBRAN
      00118B 11 95                 3053         .word      FIND5
      00118D CD 09 B8         [ 4] 3054         CALL     CELLM
      001190 CD 09 B8         [ 4] 3055         CALL     CELLM
      001193 20 A5            [ 2] 3056         JRA     FIND1
      001195 CD 04 89         [ 4] 3057 FIND5:  CALL     RFROM
      001198 CD 04 D5         [ 4] 3058         CALL     DROP
      00119B CD 04 EF         [ 4] 3059         CALL     SWAPP
      00119E CD 04 D5         [ 4] 3060         CALL     DROP
      0011A1 CD 09 B8         [ 4] 3061         CALL     CELLM
      0011A4 CD 04 DF         [ 4] 3062         CALL     DUPP
      0011A7 CD 10 C6         [ 4] 3063         CALL     NAMET
      0011AA CC 04 EF         [ 2] 3064         JP     SWAPP
                                   3065 
                                   3066 ;       NAME?   ( a -- ca na | a F )
                                   3067 ;       Search vocabularies for a string.
      0011AD 11 17                 3068         .word      LINK
                           0011AF  3069 LINK = . 
      0011AF 05                    3070         .byte      5
      0011B0 4E 41 4D 45 3F        3071         .ascii     "NAME?"
      0011B5                       3072 NAMEQ:
      0011B5 CD 06 1F         [ 4] 3073         CALL   CNTXT
      0011B8 CC 11 1C         [ 2] 3074         JP     FIND
                                   3075 
                                   3076 ;; Terminal response
                                   3077 
                                   3078 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3079 ;       Backup cursor by one character.
      0011BB 11 AF                 3080         .word      LINK
                           0011BD  3081 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0011BD 02                    3082         .byte      2
      0011BE 5E 48                 3083         .ascii     "^H"
      0011C0                       3084 BKSP:
      0011C0 CD 04 A8         [ 4] 3085         CALL     TOR
      0011C3 CD 05 09         [ 4] 3086         CALL     OVER
      0011C6 CD 04 89         [ 4] 3087         CALL     RFROM
      0011C9 CD 04 EF         [ 4] 3088         CALL     SWAPP
      0011CC CD 05 09         [ 4] 3089         CALL     OVER
      0011CF CD 05 54         [ 4] 3090         CALL     XORR
      0011D2 CD 03 E3         [ 4] 3091         CALL     QBRAN
      0011D5 11 F0                 3092         .word      BACK1
      0011D7 CD 03 B0         [ 4] 3093         CALL     DOLIT
      0011DA 00 08                 3094         .word      BKSPP
      0011DC CD 03 9A         [ 4] 3095         CALL     EMIT
      0011DF CD 09 E1         [ 4] 3096         CALL     ONEM
      0011E2 CD 0A 33         [ 4] 3097         CALL     BLANK
      0011E5 CD 03 9A         [ 4] 3098         CALL     EMIT
      0011E8 CD 03 B0         [ 4] 3099         CALL     DOLIT
      0011EB 00 08                 3100         .word      BKSPP
      0011ED CC 03 9A         [ 2] 3101         JP     EMIT
      0011F0 81               [ 4] 3102 BACK1:  RET
                                   3103 
                                   3104 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3105 ;       Accept and echo key stroke
                                   3106 ;       and bump cursor.
      0011F1 11 BD                 3107         .word      LINK
                           0011F3  3108 LINK = . 
      0011F3 03                    3109         .byte      3
      0011F4 54 41 50              3110         .ascii     "TAP"
      0011F7                       3111 TAP:
      0011F7 CD 04 DF         [ 4] 3112         CALL     DUPP
      0011FA CD 03 9A         [ 4] 3113         CALL     EMIT
      0011FD CD 05 09         [ 4] 3114         CALL     OVER
      001200 CD 04 45         [ 4] 3115         CALL     CSTOR
      001203 CC 09 D4         [ 2] 3116         JP     ONEP
                                   3117 
                                   3118 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3119 ;       Process a key stroke,
                                   3120 ;       CR or backspace.
      001206 11 F3                 3121         .word      LINK
                           001208  3122 LINK = . 
      001208 04                    3123         .byte      4
      001209 4B 54 41 50           3124         .ascii     "KTAP"
      00120D                       3125 KTAP:
      00120D CD 04 DF         [ 4] 3126         CALL     DUPP
      001210 CD 03 B0         [ 4] 3127         CALL     DOLIT
      001213 00 0D                 3128         .word      CRR
      001215 CD 05 54         [ 4] 3129         CALL     XORR
      001218 CD 03 E3         [ 4] 3130         CALL     QBRAN
      00121B 12 33                 3131         .word      KTAP2
      00121D CD 03 B0         [ 4] 3132         CALL     DOLIT
      001220 00 08                 3133         .word      BKSPP
      001222 CD 05 54         [ 4] 3134         CALL     XORR
      001225 CD 03 E3         [ 4] 3135         CALL     QBRAN
      001228 12 30                 3136         .word      KTAP1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00122A CD 0A 33         [ 4] 3137         CALL     BLANK
      00122D CC 11 F7         [ 2] 3138         JP     TAP
      001230 CC 11 C0         [ 2] 3139 KTAP1:  JP     BKSP
      001233 CD 04 D5         [ 4] 3140 KTAP2:  CALL     DROP
      001236 CD 04 EF         [ 4] 3141         CALL     SWAPP
      001239 CD 04 D5         [ 4] 3142         CALL     DROP
      00123C CC 04 DF         [ 2] 3143         JP     DUPP
                                   3144 
                                   3145 ;       accept  ( b u -- b u )
                                   3146 ;       Accept characters to input
                                   3147 ;       buffer. Return with actual count.
      00123F 12 08                 3148         .word      LINK
                           001241  3149 LINK = . 
      001241 06                    3150         .byte      6
      001242 41 43 43 45 50 54     3151         .ascii     "ACCEPT"
      001248                       3152 ACCEP:
      001248 CD 05 09         [ 4] 3153         CALL     OVER
      00124B CD 06 DA         [ 4] 3154         CALL     PLUS
      00124E CD 05 09         [ 4] 3155         CALL     OVER
      001251 CD 06 C5         [ 4] 3156 ACCP1:  CALL     DDUP
      001254 CD 05 54         [ 4] 3157         CALL     XORR
      001257 CD 03 E3         [ 4] 3158         CALL     QBRAN
      00125A 12 7C                 3159         .word      ACCP4
      00125C CD 0E 26         [ 4] 3160         CALL     KEY
      00125F CD 04 DF         [ 4] 3161         CALL     DUPP
      001262 CD 0A 33         [ 4] 3162         CALL     BLANK
      001265 CD 03 B0         [ 4] 3163         CALL     DOLIT
      001268 00 7F                 3164         .word      127
      00126A CD 08 15         [ 4] 3165         CALL     WITHI
      00126D CD 03 E3         [ 4] 3166         CALL     QBRAN
      001270 12 77                 3167         .word      ACCP2
      001272 CD 11 F7         [ 4] 3168         CALL     TAP
      001275 20 03            [ 2] 3169         JRA     ACCP3
      001277 CD 12 0D         [ 4] 3170 ACCP2:  CALL     KTAP
      00127A 20 D5            [ 2] 3171 ACCP3:  JRA     ACCP1
      00127C CD 04 D5         [ 4] 3172 ACCP4:  CALL     DROP
      00127F CD 05 09         [ 4] 3173         CALL     OVER
      001282 CC 07 53         [ 2] 3174         JP     SUBB
                                   3175 
                                   3176 ;       QUERY   ( -- )
                                   3177 ;       Accept input stream to
                                   3178 ;       terminal input buffer.
      001285 12 41                 3179         .word      LINK
                                   3180         
                           001287  3181 LINK = . 
      001287 05                    3182         .byte      5
      001288 51 55 45 52 59        3183         .ascii     "QUERY"
      00128D                       3184 QUERY:
      00128D CD 0B 50         [ 4] 3185         CALL     TIB
      001290 CD 03 B0         [ 4] 3186         CALL     DOLIT
      001293 00 50                 3187         .word      80
      001295 CD 12 48         [ 4] 3188         CALL     ACCEP
      001298 CD 05 CA         [ 4] 3189         CALL     NTIB
      00129B CD 04 21         [ 4] 3190         CALL     STORE
      00129E CD 04 D5         [ 4] 3191         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0012A1 CD 0A 40         [ 4] 3192         CALL     ZERO
      0012A4 CD 05 BA         [ 4] 3193         CALL     INN
      0012A7 CC 04 21         [ 2] 3194         JP     STORE
                                   3195 
                                   3196 ;       ABORT   ( -- )
                                   3197 ;       Reset data stack and
                                   3198 ;       jump to QUIT.
      0012AA 12 87                 3199         .word      LINK
                           0012AC  3200 LINK = . 
      0012AC 05                    3201         .byte      5
      0012AD 41 42 4F 52 54        3202         .ascii     "ABORT"
      0012B2                       3203 ABORT:
      0012B2 CD 13 A9         [ 4] 3204         CALL     PRESE
      0012B5 CC 13 C6         [ 2] 3205         JP     QUIT
                                   3206 
                                   3207 ;       abort"  ( f -- )
                                   3208 ;       Run time routine of ABORT".
                                   3209 ;       Abort with a message.
      0012B8 12 AC                 3210         .word      LINK
                           0012BA  3211 LINK = . 
      0012BA 46                    3212 	.byte      COMPO+6
      0012BB 41 42 4F 52 54        3213         .ascii     "ABORT"
      0012C0 22                    3214         .byte      '"'
      0012C1                       3215 ABORQ:
      0012C1 CD 03 E3         [ 4] 3216         CALL     QBRAN
      0012C4 12 E0                 3217         .word      ABOR2   ;text flag
      0012C6 CD 0E BC         [ 4] 3218         CALL     DOSTR
      0012C9 CD 0E 5E         [ 4] 3219 ABOR1:  CALL     SPACE
      0012CC CD 0B 17         [ 4] 3220         CALL     COUNT
      0012CF CD 0E 88         [ 4] 3221         CALL     TYPES
      0012D2 CD 03 B0         [ 4] 3222         CALL     DOLIT
      0012D5 00 3F                 3223         .word     63 ; "?"
      0012D7 CD 03 9A         [ 4] 3224         CALL     EMIT
      0012DA CD 0E A6         [ 4] 3225         CALL     CR
      0012DD CC 12 B2         [ 2] 3226         JP     ABORT   ;pass error string
      0012E0 CD 0E BC         [ 4] 3227 ABOR2:  CALL     DOSTR
      0012E3 CC 04 D5         [ 2] 3228         JP     DROP
                                   3229 
                                   3230 ;; The text interpreter
                                   3231 
                                   3232 ;       $INTERPRET      ( a -- )
                                   3233 ;       Interpret a word. If failed,
                                   3234 ;       try to convert it to an integer.
      0012E6 12 BA                 3235         .word      LINK
                           0012E8  3236 LINK = . 
      0012E8 0A                    3237         .byte      10
      0012E9 24 49 4E 54 45 52 50  3238         .ascii     "$INTERPRET"
             52 45 54
      0012F3                       3239 INTER:
      0012F3 CD 11 B5         [ 4] 3240         CALL     NAMEQ
      0012F6 CD 06 89         [ 4] 3241         CALL     QDUP    ;?defined
      0012F9 CD 03 E3         [ 4] 3242         CALL     QBRAN
      0012FC 13 1D                 3243         .word      INTE1
      0012FE CD 04 38         [ 4] 3244         CALL     AT
      001301 CD 03 B0         [ 4] 3245         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001304 40 00                 3246 	.word       0x4000	; COMPO*256
      001306 CD 05 2B         [ 4] 3247         CALL     ANDD    ;?compile only lexicon bits
      001309 CD 12 C1         [ 4] 3248         CALL     ABORQ
      00130C 0D                    3249         .byte      13
      00130D 20 63 6F 6D 70 69 6C  3250         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00131A CC 04 0A         [ 2] 3251         JP     EXECU
      00131D CD 0D 53         [ 4] 3252 INTE1:  CALL     NUMBQ   ;convert a number
      001320 CD 03 E3         [ 4] 3253         CALL     QBRAN
      001323 12 C9                 3254         .word    ABOR1
      001325 81               [ 4] 3255         RET
                                   3256 
                                   3257 ;       [       ( -- )
                                   3258 ;       Start  text interpreter.
      001326 12 E8                 3259         .word      LINK
                           001328  3260 LINK = . 
      001328 81                    3261 	.byte      IMEDD+1
      001329 5B                    3262         .ascii     "["
      00132A                       3263 LBRAC:
      00132A CD 03 B0         [ 4] 3264         CALL   DOLIT
      00132D 12 F3                 3265         .word  INTER
      00132F CD 05 FD         [ 4] 3266         CALL   TEVAL
      001332 CC 04 21         [ 2] 3267         JP     STORE
                                   3268 
                                   3269 ;       .OK     ( -- )
                                   3270 ;       Display 'ok' while interpreting.
      001335 13 28                 3271         .word      LINK
                           001337  3272 LINK = . 
      001337 03                    3273         .byte      3
      001338 2E 4F 4B              3274         .ascii     ".OK"
      00133B                       3275 DOTOK:
      00133B CD 03 B0         [ 4] 3276         CALL     DOLIT
      00133E 12 F3                 3277         .word      INTER
      001340 CD 05 FD         [ 4] 3278         CALL     TEVAL
      001343 CD 04 38         [ 4] 3279         CALL     AT
      001346 CD 07 7B         [ 4] 3280         CALL     EQUAL
      001349 CD 03 E3         [ 4] 3281         CALL     QBRAN
      00134C 13 55                 3282         .word      DOTO1
      00134E CD 0E E5         [ 4] 3283         CALL     DOTQP
      001351 03                    3284         .byte      3
      001352 20 6F 6B              3285         .ascii     " ok"
      001355 CC 0E A6         [ 2] 3286 DOTO1:  JP     CR
                                   3287 
                                   3288 ;       ?STACK  ( -- )
                                   3289 ;       Abort if stack underflows.
      001358 13 37                 3290         .word      LINK
                           00135A  3291 LINK = . 
      00135A 06                    3292         .byte      6
      00135B 3F 53 54 41 43 4B     3293         .ascii     "?STACK"
      001361                       3294 QSTAC: 
      001361 CD 0A 82         [ 4] 3295         CALL     DEPTH
      001364 CD 05 18         [ 4] 3296         CALL     ZLESS   ;check only for underflow
      001367 CD 12 C1         [ 4] 3297         CALL     ABORQ
      00136A 0B                    3298         .byte      11
      00136B 20 75 6E 64 65 72 66  3299         .ascii     " underflow "
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



             6C 6F 77 20
      001376 81               [ 4] 3300         RET
                                   3301 
                                   3302 ;       EVAL    ( -- )
                                   3303 ;       Interpret  input stream.
      001377 13 5A                 3304         .word      LINK
                           001379  3305 LINK = . 
      001379 04                    3306         .byte      4
      00137A 45 56 41 4C           3307         .ascii     "EVAL"
      00137E                       3308 EVAL:
      00137E CD 10 B8         [ 4] 3309 EVAL1:  CALL     TOKEN
      001381 CD 04 DF         [ 4] 3310         CALL     DUPP
      001384 CD 04 56         [ 4] 3311         CALL     CAT     ;?input stream empty
      001387 CD 03 E3         [ 4] 3312         CALL     QBRAN
      00138A 13 9A                 3313         .word    EVAL2
      00138C CD 05 FD         [ 4] 3314         CALL     TEVAL
      00138F CD 0B 64         [ 4] 3315         CALL     ATEXE
      001392 CD 13 61         [ 4] 3316         CALL     QSTAC   ;evaluate input, check stack
      001395 CD 03 FA         [ 4] 3317         CALL     BRAN
      001398 13 7E                 3318         .word    EVAL1
      00139A CD 04 D5         [ 4] 3319 EVAL2:  CALL     DROP
      00139D CC 13 3B         [ 2] 3320         JP       DOTOK
                                   3321 
                                   3322 ;       PRESET  ( -- )
                                   3323 ;       Reset data stack pointer and
                                   3324 ;       terminal input buffer.
      0013A0 13 79                 3325         .word      LINK
                           0013A2  3326 LINK = . 
      0013A2 06                    3327         .byte      6
      0013A3 50 52 45 53 45 54     3328         .ascii     "PRESET"
      0013A9                       3329 PRESE:
      0013A9 CD 03 B0         [ 4] 3330         CALL     DOLIT
      0013AC 06 80                 3331         .word      SPP
      0013AE CD 04 CC         [ 4] 3332         CALL     SPSTO
      0013B1 CD 03 B0         [ 4] 3333         CALL     DOLIT
      0013B4 07 00                 3334         .word      TIBB
      0013B6 CD 05 CA         [ 4] 3335         CALL     NTIB
      0013B9 CD 09 A9         [ 4] 3336         CALL     CELLP
      0013BC CC 04 21         [ 2] 3337         JP     STORE
                                   3338 
                                   3339 ;       QUIT    ( -- )
                                   3340 ;       Reset return stack pointer
                                   3341 ;       and start text interpreter.
      0013BF 13 A2                 3342         .word      LINK
                           0013C1  3343 LINK = . 
      0013C1 04                    3344         .byte      4
      0013C2 51 55 49 54           3345         .ascii     "QUIT"
      0013C6                       3346 QUIT:
      0013C6 CD 03 B0         [ 4] 3347         CALL     DOLIT
      0013C9 07 FF                 3348         .word      RPP
      0013CB CD 04 73         [ 4] 3349         CALL     RPSTO   ;reset return stack pointer
      0013CE CD 13 2A         [ 4] 3350 QUIT1:  CALL     LBRAC   ;start interpretation
      0013D1 CD 12 8D         [ 4] 3351 QUIT2:  CALL     QUERY   ;get input
      0013D4 CD 13 7E         [ 4] 3352         CALL     EVAL
      0013D7 20 F8            [ 2] 3353         JRA     QUIT2   ;continue till error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3354 
                                   3355 ;; The compiler
                                   3356 
                                   3357 ;       '       ( -- ca )
                                   3358 ;       Search vocabularies for
                                   3359 ;       next word in input stream.
      0013D9 13 C1                 3360         .word      LINK
                           0013DB  3361 LINK = . 
      0013DB 01                    3362         .byte      1
      0013DC 27                    3363         .ascii     "'"
      0013DD                       3364 TICK:
      0013DD CD 10 B8         [ 4] 3365         CALL     TOKEN
      0013E0 CD 11 B5         [ 4] 3366         CALL     NAMEQ   ;?defined
      0013E3 CD 03 E3         [ 4] 3367         CALL     QBRAN
      0013E6 12 C9                 3368         .word      ABOR1
      0013E8 81               [ 4] 3369         RET     ;yes, push code address
                                   3370 
                                   3371 ;       ALLOT   ( n -- )
                                   3372 ;       Allocate n bytes to RAM 
      0013E9 13 DB                 3373         .word      LINK
                           0013EB  3374         LINK = . 
      0013EB 05                    3375         .byte      5
      0013EC 41 4C 4C 4F 54        3376         .ascii     "ALLOT"
      0013F1                       3377 ALLOT:
      0013F1 CD 06 2D         [ 4] 3378         CALL     VPP
                                   3379 ; must update APP_VP each time VP is modidied
      0013F4 CD 0A B0         [ 4] 3380         call PSTOR 
      0013F7 CC 1B 6B         [ 2] 3381         jp UPDATVP 
                                   3382 
                                   3383 ;       ,       ( w -- )
                                   3384 ;         Compile an integer into
                                   3385 ;         variable space.
      0013FA 13 EB                 3386         .word      LINK
                           0013FC  3387 LINK = . 
      0013FC 01                    3388         .byte      1
      0013FD 2C                    3389         .ascii     ","
      0013FE                       3390 COMMA:
      0013FE CD 0B 2E         [ 4] 3391         CALL     HERE
      001401 CD 04 DF         [ 4] 3392         CALL     DUPP
      001404 CD 09 A9         [ 4] 3393         CALL     CELLP   ;cell boundary
      001407 CD 06 2D         [ 4] 3394         CALL     VPP
      00140A CD 04 21         [ 4] 3395         CALL     STORE
      00140D CC 04 21         [ 2] 3396         JP     STORE
                                   3397 
                                   3398 ;       C,      ( c -- )
                                   3399 ;       Compile a byte into
                                   3400 ;       variables space.
      001410 13 FC                 3401        .word      LINK
                           001412  3402 LINK = . 
      001412 02                    3403         .byte      2
      001413 43 2C                 3404         .ascii     "C,"
      001415                       3405 CCOMMA:
      001415 CD 0B 2E         [ 4] 3406         CALL     HERE
      001418 CD 04 DF         [ 4] 3407         CALL     DUPP
      00141B CD 09 D4         [ 4] 3408         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00141E CD 06 2D         [ 4] 3409         CALL     VPP
      001421 CD 04 21         [ 4] 3410         CALL     STORE
      001424 CC 04 45         [ 2] 3411         JP     CSTOR
                                   3412 
                                   3413 ;       [COMPILE]       ( -- ; <string> )
                                   3414 ;       Compile next immediate
                                   3415 ;       word into code dictionary.
      001427 14 12                 3416         .word      LINK
                           001429  3417 LINK = . 
      001429 89                    3418 	.byte      IMEDD+9
      00142A 5B 43 4F 4D 50 49 4C  3419         .ascii     "[COMPILE]"
             45 5D
      001433                       3420 BCOMP:
      001433 CD 13 DD         [ 4] 3421         CALL     TICK
      001436 CC 16 F9         [ 2] 3422         JP     JSRC
                                   3423 
                                   3424 ;       COMPILE ( -- )
                                   3425 ;       Compile next jsr in
                                   3426 ;       colon list to code dictionary.
      001439 14 29                 3427         .word      LINK
                           00143B  3428 LINK = . 
      00143B 47                    3429 	.byte      COMPO+7
      00143C 43 4F 4D 50 49 4C 45  3430         .ascii     "COMPILE"
      001443                       3431 COMPI:
      001443 CD 04 89         [ 4] 3432         CALL     RFROM
      001446 CD 04 DF         [ 4] 3433         CALL     DUPP
      001449 CD 04 38         [ 4] 3434         CALL     AT
      00144C CD 16 F9         [ 4] 3435         CALL     JSRC    ;compile subroutine
      00144F CD 09 A9         [ 4] 3436         CALL     CELLP
      001452 90 93            [ 1] 3437         ldw y,x 
      001454 90 FE            [ 2] 3438         ldw y,(y)
      001456 1C 00 02         [ 2] 3439         addw x,#CELLL 
      001459 90 FC            [ 2] 3440         jp (y)
                                   3441 
                                   3442 ;       LITERAL ( w -- )
                                   3443 ;       Compile tos to dictionary
                                   3444 ;       as an integer literal.
      00145B 14 3B                 3445         .word      LINK
                           00145D  3446 LINK = . 
      00145D 87                    3447 	.byte      IMEDD+7
      00145E 4C 49 54 45 52 41 4C  3448         .ascii     "LITERAL"
      001465                       3449 LITER:
      001465 CD 14 43         [ 4] 3450         CALL     COMPI
      001468 03 B0                 3451         .word DOLIT 
      00146A CC 13 FE         [ 2] 3452         JP     COMMA
                                   3453 
                                   3454 ;       $,"     ( -- )
                                   3455 ;       Compile a literal string
                                   3456 ;       up to next " .
      00146D 14 5D                 3457         .word      LINK
                           00146F  3458 LINK = . 
      00146F 03                    3459         .byte      3
      001470 24 2C 22              3460         .byte     '$',',','"'
      001473                       3461 STRCQ:
      001473 CD 03 B0         [ 4] 3462         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001476 00 22                 3463         .word     34	; "
      001478 CD 10 3B         [ 4] 3464         CALL     PARSE
      00147B CD 0B 2E         [ 4] 3465         CALL     HERE
      00147E CD 0B EE         [ 4] 3466         CALL     PACKS   ;string to code dictionary
      001481 CD 0B 17         [ 4] 3467         CALL     COUNT
      001484 CD 06 DA         [ 4] 3468         CALL     PLUS    ;calculate aligned end of string
      001487 CD 06 2D         [ 4] 3469         CALL     VPP
      00148A CC 04 21         [ 2] 3470         JP     STORE
                                   3471 
                                   3472 ;; Structures
                                   3473 
                                   3474 ;       FOR     ( -- a )
                                   3475 ;       Start a FOR-NEXT loop
                                   3476 ;       structure in a colon definition.
      00148D 14 6F                 3477         .word      LINK
                           00148F  3478 LINK = . 
      00148F 83                    3479 	.byte      IMEDD+3
      001490 46 4F 52              3480         .ascii     "FOR"
      001493                       3481 FOR:
      001493 CD 14 43         [ 4] 3482         CALL     COMPI
      001496 04 A8                 3483         .word TOR 
      001498 CC 0B 2E         [ 2] 3484         JP     HERE
                                   3485 
                                   3486 ;       NEXT    ( a -- )
                                   3487 ;       Terminate a FOR-NEXT loop.
      00149B 14 8F                 3488         .word      LINK
                           00149D  3489 LINK = . 
      00149D 84                    3490 	.byte      IMEDD+4
      00149E 4E 45 58 54           3491         .ascii     "NEXT"
      0014A2                       3492 NEXT:
      0014A2 CD 14 43         [ 4] 3493         CALL     COMPI
      0014A5 03 C4                 3494         .word DONXT 
      0014A7 CD 06 79         [ 4] 3495         call ADRADJ
      0014AA CC 13 FE         [ 2] 3496         JP     COMMA
                                   3497 
                                   3498 ;       I ( -- n )
                                   3499 ;       stack FOR-NEXT COUNTER 
      0014AD 14 9D                 3500         .word LINK 
                           0014AF  3501         LINK=.
      0014AF 01                    3502         .byte 1 
      0014B0 49                    3503         .ascii "I"
      0014B1                       3504 IFETCH: 
      0014B1 1D 00 02         [ 2] 3505         subw x,#CELLL 
      0014B4 16 03            [ 2] 3506         ldw y,(3,sp)
      0014B6 FF               [ 2] 3507         ldw (x),y 
      0014B7 81               [ 4] 3508         ret 
                                   3509 
                                   3510 ;       BEGIN   ( -- a )
                                   3511 ;       Start an infinite or
                                   3512 ;       indefinite loop structure.
      0014B8 14 AF                 3513         .word      LINK
                           0014BA  3514 LINK = . 
      0014BA 85                    3515 	.byte      IMEDD+5
      0014BB 42 45 47 49 4E        3516         .ascii     "BEGIN"
      0014C0                       3517 BEGIN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0014C0 CC 0B 2E         [ 2] 3518         JP     HERE
                                   3519 
                                   3520 ;       UNTIL   ( a -- )
                                   3521 ;       Terminate a BEGIN-UNTIL
                                   3522 ;       indefinite loop structure.
      0014C3 14 BA                 3523         .word      LINK
                           0014C5  3524 LINK = . 
      0014C5 85                    3525 	.byte      IMEDD+5
      0014C6 55 4E 54 49 4C        3526         .ascii     "UNTIL"
      0014CB                       3527 UNTIL:
      0014CB CD 14 43         [ 4] 3528         CALL     COMPI
      0014CE 03 E3                 3529         .word    QBRAN 
      0014D0 CD 06 79         [ 4] 3530         call ADRADJ
      0014D3 CC 13 FE         [ 2] 3531         JP     COMMA
                                   3532 
                                   3533 ;       AGAIN   ( a -- )
                                   3534 ;       Terminate a BEGIN-AGAIN
                                   3535 ;       infinite loop structure.
      0014D6 14 C5                 3536         .word      LINK
                           0014D8  3537 LINK = . 
      0014D8 85                    3538 	.byte      IMEDD+5
      0014D9 41 47 41 49 4E        3539         .ascii     "AGAIN"
      0014DE                       3540 AGAIN:
      0014DE CD 14 43         [ 4] 3541         CALL     COMPI
      0014E1 03 FA                 3542         .word BRAN
      0014E3 CD 06 79         [ 4] 3543         call ADRADJ 
      0014E6 CC 13 FE         [ 2] 3544         JP     COMMA
                                   3545 
                                   3546 ;       IF      ( -- A )
                                   3547 ;       Begin a conditional branch.
      0014E9 14 D8                 3548         .word      LINK
                           0014EB  3549 LINK = . 
      0014EB 82                    3550 	.byte      IMEDD+2
      0014EC 49 46                 3551         .ascii     "IF"
      0014EE                       3552 IFF:
      0014EE CD 14 43         [ 4] 3553         CALL     COMPI
      0014F1 03 E3                 3554         .word QBRAN
      0014F3 CD 0B 2E         [ 4] 3555         CALL     HERE
      0014F6 CD 0A 40         [ 4] 3556         CALL     ZERO
      0014F9 CC 13 FE         [ 2] 3557         JP     COMMA
                                   3558 
                                   3559 ;       THEN        ( A -- )
                                   3560 ;       Terminate a conditional branch structure.
      0014FC 14 EB                 3561         .word      LINK
                           0014FE  3562 LINK = . 
      0014FE 84                    3563 	.byte      IMEDD+4
      0014FF 54 48 45 4E           3564         .ascii     "THEN"
      001503                       3565 THENN:
      001503 CD 0B 2E         [ 4] 3566         CALL     HERE
      001506 CD 06 79         [ 4] 3567         call ADRADJ 
      001509 CD 04 EF         [ 4] 3568         CALL     SWAPP
      00150C CC 04 21         [ 2] 3569         JP     STORE
                                   3570 
                                   3571 ;       ELSE        ( A -- A )
                                   3572 ;       Start the false clause in an IF-ELSE-THEN structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00150F 14 FE                 3573         .word      LINK
                           001511  3574 LINK = . 
      001511 84                    3575 	.byte      IMEDD+4
      001512 45 4C 53 45           3576         .ascii     "ELSE"
      001516                       3577 ELSEE:
      001516 CD 14 43         [ 4] 3578         CALL     COMPI
      001519 03 FA                 3579         .word BRAN
      00151B CD 0B 2E         [ 4] 3580         CALL     HERE
      00151E CD 0A 40         [ 4] 3581         CALL     ZERO
      001521 CD 13 FE         [ 4] 3582         CALL     COMMA
      001524 CD 04 EF         [ 4] 3583         CALL     SWAPP
      001527 CD 0B 2E         [ 4] 3584         CALL     HERE
      00152A CD 06 79         [ 4] 3585         call ADRADJ 
      00152D CD 04 EF         [ 4] 3586         CALL     SWAPP
      001530 CC 04 21         [ 2] 3587         JP     STORE
                                   3588 
                                   3589 ;       AHEAD       ( -- A )
                                   3590 ;       Compile a forward branch instruction.
      001533 15 11                 3591         .word      LINK
                           001535  3592 LINK = . 
      001535 85                    3593 	.byte      IMEDD+5
      001536 41 48 45 41 44        3594         .ascii     "AHEAD"
      00153B                       3595 AHEAD:
      00153B CD 14 43         [ 4] 3596         CALL     COMPI
      00153E 03 FA                 3597         .word BRAN
      001540 CD 0B 2E         [ 4] 3598         CALL     HERE
      001543 CD 0A 40         [ 4] 3599         CALL     ZERO
      001546 CC 13 FE         [ 2] 3600         JP     COMMA
                                   3601 
                                   3602 ;       WHILE       ( a -- A a )
                                   3603 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001549 15 35                 3604         .word      LINK
                           00154B  3605 LINK = . 
      00154B 85                    3606 	.byte      IMEDD+5
      00154C 57 48 49 4C 45        3607         .ascii     "WHILE"
      001551                       3608 WHILE:
      001551 CD 14 43         [ 4] 3609         CALL     COMPI
      001554 03 E3                 3610         .word QBRAN
      001556 CD 0B 2E         [ 4] 3611         CALL     HERE
      001559 CD 0A 40         [ 4] 3612         CALL     ZERO
      00155C CD 13 FE         [ 4] 3613         CALL     COMMA
      00155F CC 04 EF         [ 2] 3614         JP     SWAPP
                                   3615 
                                   3616 ;       REPEAT      ( A a -- )
                                   3617 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001562 15 4B                 3618         .word      LINK
                           001564  3619 LINK = . 
      001564 86                    3620         .byte      IMEDD+6
      001565 52 45 50 45 41 54     3621         .ascii     "REPEAT"
      00156B                       3622 REPEA:
      00156B CD 14 43         [ 4] 3623         CALL     COMPI
      00156E 03 FA                 3624         .word BRAN
      001570 CD 06 79         [ 4] 3625         call ADRADJ 
      001573 CD 13 FE         [ 4] 3626         CALL     COMMA
      001576 CD 0B 2E         [ 4] 3627         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001579 CD 06 79         [ 4] 3628         call ADRADJ 
      00157C CD 04 EF         [ 4] 3629         CALL     SWAPP
      00157F CC 04 21         [ 2] 3630         JP     STORE
                                   3631 
                                   3632 ;       AFT         ( a -- a A )
                                   3633 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001582 15 64                 3634         .word      LINK
                           001584  3635 LINK = . 
      001584 83                    3636 	.byte      IMEDD+3
      001585 41 46 54              3637         .ascii     "AFT"
      001588                       3638 AFT:
      001588 CD 04 D5         [ 4] 3639         CALL     DROP
      00158B CD 15 3B         [ 4] 3640         CALL     AHEAD
      00158E CD 0B 2E         [ 4] 3641         CALL     HERE
      001591 CC 04 EF         [ 2] 3642         JP     SWAPP
                                   3643 
                                   3644 ;       ABORT"      ( -- ; <string> )
                                   3645 ;       Conditional abort with an error message.
      001594 15 84                 3646         .word      LINK
                           001596  3647 LINK = . 
      001596 86                    3648 	.byte      IMEDD+6
      001597 41 42 4F 52 54        3649         .ascii     "ABORT"
      00159C 22                    3650         .byte      '"'
      00159D                       3651 ABRTQ:
      00159D CD 14 43         [ 4] 3652         CALL     COMPI
      0015A0 12 C1                 3653         .word ABORQ
      0015A2 CC 14 73         [ 2] 3654         JP     STRCQ
                                   3655 
                                   3656 ;       $"     ( -- ; <string> )
                                   3657 ;       Compile an inline string literal.
      0015A5 15 96                 3658         .word      LINK
                           0015A7  3659 LINK = . 
      0015A7 82                    3660 	.byte      IMEDD+2
      0015A8 24 22                 3661         .byte     '$','"'
      0015AA                       3662 STRQ:
      0015AA CD 14 43         [ 4] 3663         CALL     COMPI
      0015AD 0E DB                 3664         .word STRQP 
      0015AF CC 14 73         [ 2] 3665         JP     STRCQ
                                   3666 
                                   3667 ;       ."          ( -- ; <string> )
                                   3668 ;       Compile an inline string literal to be typed out at run time.
      0015B2 15 A7                 3669         .word      LINK
                           0015B4  3670 LINK = . 
      0015B4 82                    3671 	.byte      IMEDD+2
      0015B5 2E 22                 3672         .byte     '.','"'
      0015B7                       3673 DOTQ:
      0015B7 CD 14 43         [ 4] 3674         CALL     COMPI
      0015BA 0E E5                 3675         .word DOTQP 
      0015BC CC 14 73         [ 2] 3676         JP     STRCQ
                                   3677 
                                   3678 ;; Name compiler
                                   3679 
                                   3680 ;       ?UNIQUE ( a -- a )
                                   3681 ;       Display a warning message
                                   3682 ;       if word already exists.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0015BF 15 B4                 3683         .word      LINK
                           0015C1  3684 LINK = . 
      0015C1 07                    3685         .byte      7
      0015C2 3F 55 4E 49 51 55 45  3686         .ascii     "?UNIQUE"
      0015C9                       3687 UNIQU:
      0015C9 CD 04 DF         [ 4] 3688         CALL     DUPP
      0015CC CD 11 B5         [ 4] 3689         CALL     NAMEQ   ;?name exists
      0015CF CD 03 E3         [ 4] 3690         CALL     QBRAN
      0015D2 15 E8                 3691         .word      UNIQ1
      0015D4 CD 0E E5         [ 4] 3692         CALL     DOTQP   ;redef are OK
      0015D7 07                    3693         .byte       7
      0015D8 20 72 65 44 65 66 20  3694         .ascii     " reDef "       
      0015DF CD 05 09         [ 4] 3695         CALL     OVER
      0015E2 CD 0B 17         [ 4] 3696         CALL     COUNT
      0015E5 CD 0E 88         [ 4] 3697         CALL     TYPES   ;just in case
      0015E8 CC 04 D5         [ 2] 3698 UNIQ1:  JP     DROP
                                   3699 
                                   3700 ;       $,n     ( na -- )
                                   3701 ;       Build a new dictionary name
                                   3702 ;       using string at na.
                                   3703 ; compile dans l'espace des variables 
      0015EB 15 C1                 3704         .word      LINK
                           0015ED  3705 LINK = . 
      0015ED 03                    3706         .byte      3
      0015EE 24 2C 6E              3707         .ascii     "$,n"
      0015F1                       3708 SNAME:
      0015F1 CD 04 DF         [ 4] 3709         CALL     DUPP
      0015F4 CD 04 56         [ 4] 3710         CALL     CAT     ;?null input
      0015F7 CD 03 E3         [ 4] 3711         CALL     QBRAN
      0015FA 16 27                 3712         .word      PNAM1
      0015FC CD 15 C9         [ 4] 3713         CALL     UNIQU   ;?redefinition
      0015FF CD 04 DF         [ 4] 3714         CALL     DUPP
      001602 CD 0B 17         [ 4] 3715         CALL     COUNT
      001605 CD 06 DA         [ 4] 3716         CALL     PLUS
      001608 CD 06 2D         [ 4] 3717         CALL     VPP
      00160B CD 04 21         [ 4] 3718         CALL     STORE
      00160E CD 04 DF         [ 4] 3719         CALL     DUPP
      001611 CD 06 4B         [ 4] 3720         CALL     LAST
      001614 CD 04 21         [ 4] 3721         CALL     STORE   ;save na for vocabulary link
      001617 CD 09 B8         [ 4] 3722         CALL     CELLM   ;link address
      00161A CD 06 1F         [ 4] 3723         CALL     CNTXT
      00161D CD 04 38         [ 4] 3724         CALL     AT
      001620 CD 04 EF         [ 4] 3725         CALL     SWAPP
      001623 CD 04 21         [ 4] 3726         CALL     STORE
      001626 81               [ 4] 3727         RET     ;save code pointer
      001627 CD 0E DB         [ 4] 3728 PNAM1:  CALL     STRQP
      00162A 05                    3729         .byte      5
      00162B 20 6E 61 6D 65        3730         .ascii     " name" ;null input
      001630 CC 12 C9         [ 2] 3731         JP     ABOR1
                                   3732 
                                   3733 ;; FORTH compiler
                                   3734 
                                   3735 ;       $COMPILE        ( a -- )
                                   3736 ;       Compile next word to
                                   3737 ;       dictionary as a token or literal.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001633 15 ED                 3738         .word      LINK
                           001635  3739 LINK = . 
      001635 08                    3740         .byte      8
      001636 24 43 4F 4D 50 49 4C  3741         .ascii     "$COMPILE"
             45
      00163E                       3742 SCOMP:
      00163E CD 11 B5         [ 4] 3743         CALL     NAMEQ
      001641 CD 06 89         [ 4] 3744         CALL     QDUP    ;?defined
      001644 CD 03 E3         [ 4] 3745         CALL     QBRAN
      001647 16 5F                 3746         .word      SCOM2
      001649 CD 04 38         [ 4] 3747         CALL     AT
      00164C CD 03 B0         [ 4] 3748         CALL     DOLIT
      00164F 80 00                 3749         .word     0x8000	;  IMEDD*256
      001651 CD 05 2B         [ 4] 3750         CALL     ANDD    ;?immediate
      001654 CD 03 E3         [ 4] 3751         CALL     QBRAN
      001657 16 5C                 3752         .word      SCOM1
      001659 CC 04 0A         [ 2] 3753         JP     EXECU
      00165C CC 16 F9         [ 2] 3754 SCOM1:  JP     JSRC
      00165F CD 0D 53         [ 4] 3755 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001662 CD 03 E3         [ 4] 3756         CALL     QBRAN
      001665 12 C9                 3757         .word      ABOR1
      001667 CC 14 65         [ 2] 3758         JP     LITER
                                   3759 
                                   3760 ;       OVERT   ( -- )
                                   3761 ;       Link a new word into vocabulary.
      00166A 16 35                 3762         .word      LINK
                           00166C  3763 LINK = . 
      00166C 05                    3764         .byte      5
      00166D 4F 56 45 52 54        3765         .ascii     "OVERT"
      001672                       3766 OVERT:
      001672 CD 06 4B         [ 4] 3767         CALL     LAST
      001675 CD 04 38         [ 4] 3768         CALL     AT
      001678 CD 06 1F         [ 4] 3769         CALL     CNTXT
      00167B CC 04 21         [ 2] 3770         JP     STORE
                                   3771 
                                   3772 ;       ;       ( -- )
                                   3773 ;       Terminate a colon definition.
      00167E 16 6C                 3774         .word      LINK
                           001680  3775 LINK = . 
      001680 C1                    3776 	.byte      IMEDD+COMPO+1
      001681 3B                    3777         .ascii     ";"
      001682                       3778 SEMIS:
                           000001  3779 .if OPTIMIZE ; more compact and faster
      001682 CD 03 B0         [ 4] 3780         call DOLIT 
      001685 00 81                 3781         .word 0x81   ; opcode for RET 
      001687 CD 14 15         [ 4] 3782         call CCOMMA 
                           000000  3783 .else
                                   3784         CALL     COMPI
                                   3785         .word EXIT 
                                   3786 .endif 
      00168A CD 13 2A         [ 4] 3787         CALL     LBRAC
      00168D CD 16 72         [ 4] 3788         call OVERT 
      001690 CD 1F A9         [ 4] 3789         CALL FMOVE
      001693 CD 06 89         [ 4] 3790         call QDUP 
      001696 CD 03 E3         [ 4] 3791         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001699 17 C9                 3792         .word SET_RAMLAST 
      00169B CD 20 31         [ 4] 3793         CALL UPDATPTR
      00169E 81               [ 4] 3794         RET 
                                   3795 
                                   3796 
                                   3797 ;       Terminate an ISR definition 
                                   3798 ;       retourn ca of ISR as double
                                   3799 ;       I; ( -- ud )
      00169F 16 80                 3800         .word LINK 
                           0016A1  3801         LINK=.
      0016A1 C2                    3802         .byte 2+IMEDD+COMPO 
      0016A2 49 3B                 3803         .ascii "I;" 
      0016A4                       3804 ISEMI:
      0016A4 1D 00 02         [ 2] 3805         subw x,#CELLL  
      0016A7 90 AE 00 80      [ 2] 3806         ldw y,#IRET_CODE 
      0016AB FF               [ 2] 3807         ldw (x),y 
      0016AC CD 14 15         [ 4] 3808         call CCOMMA
      0016AF CD 13 2A         [ 4] 3809         call LBRAC 
      0016B2 CD 20 70         [ 4] 3810         call IFMOVE
      0016B5 CD 06 89         [ 4] 3811         call QDUP 
      0016B8 CD 03 E3         [ 4] 3812         CALL QBRAN 
      0016BB 17 C9                 3813         .word SET_RAMLAST
      0016BD CD 06 3B         [ 4] 3814         CALL CPP
      0016C0 CD 04 38         [ 4] 3815         call AT 
      0016C3 CD 04 EF         [ 4] 3816         call SWAPP 
      0016C6 CD 06 3B         [ 4] 3817         CALL CPP 
      0016C9 CD 04 21         [ 4] 3818         call STORE 
      0016CC CD 1B 54         [ 4] 3819         call UPDATCP 
      0016CF CD 1B 15         [ 4] 3820         call EEPVP 
      0016D2 CD 04 D5         [ 4] 3821         call DROP 
      0016D5 CD 04 38         [ 4] 3822         call AT 
      0016D8 CD 06 2D         [ 4] 3823         call VPP 
      0016DB CD 04 21         [ 4] 3824         call STORE 
      0016DE CC 0A 40         [ 2] 3825         jp ZERO
      0016E1 81               [ 4] 3826         ret           
                                   3827         
                                   3828 
                                   3829 ;       ]       ( -- )
                                   3830 ;       Start compiling words in
                                   3831 ;       input stream.
      0016E2 16 A1                 3832         .word      LINK
                           0016E4  3833 LINK = . 
      0016E4 01                    3834         .byte      1
      0016E5 5D                    3835         .ascii     "]"
      0016E6                       3836 RBRAC:
      0016E6 CD 03 B0         [ 4] 3837         CALL   DOLIT
      0016E9 16 3E                 3838         .word  SCOMP
      0016EB CD 05 FD         [ 4] 3839         CALL   TEVAL
      0016EE CC 04 21         [ 2] 3840         JP     STORE
                                   3841 
                                   3842 ;       CALL,    ( ca -- )
                                   3843 ;       Compile a subroutine call.
      0016F1 16 E4                 3844         .word      LINK
                           0016F3  3845 LINK = . 
      0016F3 05                    3846         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0016F4 43 41 4C 4C 2C        3847         .ascii     "CALL,"
      0016F9                       3848 JSRC:
      0016F9 CD 03 B0         [ 4] 3849         CALL     DOLIT
      0016FC 00 CD                 3850         .word     CALLL     ;CALL
      0016FE CD 14 15         [ 4] 3851         CALL     CCOMMA
      001701 CC 13 FE         [ 2] 3852         JP     COMMA
                                   3853 
                                   3854 ;       INIT-OFS ( -- )
                                   3855 ;       compute offset to adjust jump address 
                                   3856 ;       set variable OFFSET 
      001704 16 F3                 3857         .word LINK 
                           001706  3858         LINK=.
      001706 08                    3859         .byte 8 
      001707 49 4E 49 54 2D 4F 46  3860         .ascii "INIT-OFS" 
             53
      00170F                       3861 INITOFS:
      00170F CD 05 EC         [ 4] 3862         call TFLASH 
      001712 CD 04 38         [ 4] 3863         CALL AT 
      001715 CD 04 DF         [ 4] 3864         CALL DUPP 
      001718 CD 03 E3         [ 4] 3865         call QBRAN
      00171B 17 2C                 3866         .word 1$
      00171D CD 04 D5         [ 4] 3867         call DROP  
      001720 CD 06 3B         [ 4] 3868         call CPP 
      001723 CD 04 38         [ 4] 3869         call AT 
      001726 CD 0B 2E         [ 4] 3870         call HERE
      001729 CD 07 53         [ 4] 3871         call SUBB 
      00172C CD 06 70         [ 4] 3872 1$:     call OFFSET 
      00172F CC 04 21         [ 2] 3873         jp STORE  
                                   3874 
                                   3875 ;       :       ( -- ; <string> )
                                   3876 ;       Start a new colon definition
                                   3877 ;       using next word as its name.
      001732 17 06                 3878         .word      LINK
                           001734  3879 LINK = . 
      001734 01                    3880         .byte      1
      001735 3A                    3881         .ascii     ":"
      001736                       3882 COLON:
      001736 CD 17 0F         [ 4] 3883         call INITOFS       
      001739 CD 10 B8         [ 4] 3884         CALL   TOKEN
      00173C CD 15 F1         [ 4] 3885         CALL   SNAME
      00173F CC 16 E6         [ 2] 3886         JP     RBRAC
                                   3887 
                                   3888 ;       I:  ( -- )
                                   3889 ;       Start interrupt service routine definition
                                   3890 ;       those definition have no name.
      001742 17 34                 3891         .word LINK
                           001744  3892         LINK=.
      001744 02                    3893         .byte 2 
      001745 49 3A                 3894         .ascii "I:" 
      001747                       3895 ICOLON:
      001747 CD 17 0F         [ 4] 3896         call INITOFS 
      00174A CC 16 E6         [ 2] 3897         jp RBRAC  
                                   3898 
                                   3899 ;       IMMEDIATE       ( -- )
                                   3900 ;       Make last compiled word
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3901 ;       an immediate word.
      00174D 17 44                 3902         .word      LINK
                           00174F  3903 LINK = . 
      00174F 09                    3904         .byte      9
      001750 49 4D 4D 45 44 49 41  3905         .ascii     "IMMEDIATE"
             54 45
      001759                       3906 IMMED:
      001759 CD 03 B0         [ 4] 3907         CALL     DOLIT
      00175C 80 00                 3908         .word     0x8000	;  IMEDD*256
      00175E CD 06 4B         [ 4] 3909         CALL     LAST
      001761 CD 04 38         [ 4] 3910         CALL     AT
      001764 CD 04 38         [ 4] 3911         CALL     AT
      001767 CD 05 3F         [ 4] 3912         CALL     ORR
      00176A CD 06 4B         [ 4] 3913         CALL     LAST
      00176D CD 04 38         [ 4] 3914         CALL     AT
      001770 CC 04 21         [ 2] 3915         JP     STORE
                                   3916 
                                   3917 ;; Defining words
                                   3918 
                                   3919 ;       CREATE  ( -- ; <string> )
                                   3920 ;       Compile a new array
                                   3921 ;       without allocating space.
      001773 17 4F                 3922         .word      LINK
                           001775  3923 LINK = . 
      001775 06                    3924         .byte      6
      001776 43 52 45 41 54 45     3925         .ascii     "CREATE"
      00177C                       3926 CREAT:
      00177C CD 10 B8         [ 4] 3927         CALL     TOKEN
      00177F CD 15 F1         [ 4] 3928         CALL     SNAME
      001782 CD 16 72         [ 4] 3929         CALL     OVERT        
      001785 CD 14 43         [ 4] 3930         CALL     COMPI 
      001788 05 8C                 3931         .word DOVAR 
      00178A 81               [ 4] 3932         RET
                                   3933 
                                   3934 ;       VARIABLE        ( -- ; <string> )
                                   3935 ;       Compile a new variable
                                   3936 ;       initialized to 0.
      00178B 17 75                 3937         .word      LINK
                           00178D  3938 LINK = . 
      00178D 08                    3939         .byte      8
      00178E 56 41 52 49 41 42 4C  3940         .ascii     "VARIABLE"
             45
      001796                       3941 VARIA:
                                   3942 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001796 CD 0B 2E         [ 4] 3943         CALL HERE
      001799 CD 04 DF         [ 4] 3944         CALL DUPP 
      00179C CD 09 A9         [ 4] 3945         CALL CELLP
      00179F CD 06 2D         [ 4] 3946         CALL VPP 
      0017A2 CD 04 21         [ 4] 3947         CALL STORE
      0017A5 CD 17 7C         [ 4] 3948         CALL CREAT
      0017A8 CD 04 DF         [ 4] 3949         CALL DUPP
      0017AB CD 13 FE         [ 4] 3950         CALL COMMA
      0017AE CD 0A 40         [ 4] 3951         CALL ZERO
      0017B1 CD 04 EF         [ 4] 3952         call SWAPP 
      0017B4 CD 04 21         [ 4] 3953         CALL STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0017B7 CD 1F A9         [ 4] 3954         CALL FMOVE ; move definition to FLASH
      0017BA CD 06 89         [ 4] 3955         CALL QDUP 
      0017BD CD 03 E3         [ 4] 3956         CALL QBRAN 
      0017C0 17 C9                 3957         .word SET_RAMLAST   
      0017C2 CD 1B 6B         [ 4] 3958         call UPDATVP  ; don't update if variable kept in RAM.
      0017C5 CD 20 31         [ 4] 3959         CALL UPDATPTR
      0017C8 81               [ 4] 3960         RET         
      0017C9                       3961 SET_RAMLAST: 
      0017C9 CD 06 4B         [ 4] 3962         CALL LAST 
      0017CC CD 04 38         [ 4] 3963         CALL AT 
      0017CF CD 06 5E         [ 4] 3964         CALL RAMLAST 
      0017D2 CC 04 21         [ 2] 3965         jp STORE  
                                   3966 
                                   3967 
                                   3968 ;       CONSTANT  ( n -- ; <string> )
                                   3969 ;       Compile a new constant 
                                   3970 ;       n CONSTANT name 
      0017D5 17 8D                 3971         .word LINK 
                           0017D7  3972         LINK=. 
      0017D7 08                    3973         .byte 8 
      0017D8 43 4F 4E 53 54 41 4E  3974         .ascii "CONSTANT" 
             54
      0017E0                       3975 CONSTANT:          
      0017E0 CD 10 B8         [ 4] 3976         CALL TOKEN
      0017E3 CD 15 F1         [ 4] 3977         CALL SNAME 
      0017E6 CD 16 72         [ 4] 3978         CALL OVERT 
      0017E9 CD 14 43         [ 4] 3979         CALL COMPI 
      0017EC 18 0A                 3980         .word DOCONST
      0017EE CD 13 FE         [ 4] 3981         CALL COMMA 
      0017F1 CD 1F A9         [ 4] 3982         CALL FMOVE
      0017F4 CD 06 89         [ 4] 3983         CALL QDUP 
      0017F7 CD 03 E3         [ 4] 3984         CALL QBRAN 
      0017FA 17 C9                 3985         .word SET_RAMLAST  
      0017FC CD 20 31         [ 4] 3986         CALL UPDATPTR  
      0017FF 81               [ 4] 3987 1$:     RET          
                                   3988 
                                   3989 ; CONSTANT runtime semantic 
                                   3990 ; doCONST  ( -- n )
      001800 17 D7                 3991         .word LINK 
                           001802  3992         LINK=.
      001802 07                    3993         .byte 7
      001803 44 4F 43 4F 4E 53 54  3994         .ascii "DOCONST"
      00180A                       3995 DOCONST:
      00180A 1D 00 02         [ 2] 3996         subw x,#CELLL
      00180D 90 85            [ 2] 3997         popw y 
      00180F 90 FE            [ 2] 3998         ldw y,(y) 
      001811 FF               [ 2] 3999         ldw (x),y 
      001812 81               [ 4] 4000         ret 
                                   4001 
                                   4002 
                                   4003 ;; Tools
                                   4004 
                                   4005 ;       _TYPE   ( b u -- )
                                   4006 ;       Display a string. Filter
                                   4007 ;       non-printing characters.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001813 18 02                 4008         .word      LINK
                           001815  4009 LINK = . 
      001815 05                    4010         .byte      5
      001816 5F 54 59 50 45        4011         .ascii     "_TYPE"
      00181B                       4012 UTYPE:
      00181B CD 04 A8         [ 4] 4013         CALL     TOR     ;start count down loop
      00181E 20 0F            [ 2] 4014         JRA     UTYP2   ;skip first pass
      001820 CD 04 DF         [ 4] 4015 UTYP1:  CALL     DUPP
      001823 CD 04 56         [ 4] 4016         CALL     CAT
      001826 CD 0A 6A         [ 4] 4017         CALL     TCHAR
      001829 CD 03 9A         [ 4] 4018         CALL     EMIT    ;display only printable
      00182C CD 09 D4         [ 4] 4019         CALL     ONEP    ;increment address
      00182F CD 03 C4         [ 4] 4020 UTYP2:  CALL     DONXT
      001832 18 20                 4021         .word      UTYP1   ;loop till done
      001834 CC 04 D5         [ 2] 4022         JP     DROP
                                   4023 
                                   4024 ;       dm+     ( a u -- a )
                                   4025 ;       Dump u bytes from ,
                                   4026 ;       leaving a+u on  stack.
      001837 18 15                 4027         .word      LINK
                           001839  4028 LINK = . 
      001839 03                    4029         .byte      3
      00183A 64 6D 2B              4030         .ascii     "dm+"
      00183D                       4031 DUMPP:
      00183D CD 05 09         [ 4] 4032         CALL     OVER
      001840 CD 03 B0         [ 4] 4033         CALL     DOLIT
      001843 00 04                 4034         .word      4
      001845 CD 0F 0E         [ 4] 4035         CALL     UDOTR   ;display address
      001848 CD 0E 5E         [ 4] 4036         CALL     SPACE
      00184B CD 04 A8         [ 4] 4037         CALL     TOR     ;start count down loop
      00184E 20 11            [ 2] 4038         JRA     PDUM2   ;skip first pass
      001850 CD 04 DF         [ 4] 4039 PDUM1:  CALL     DUPP
      001853 CD 04 56         [ 4] 4040         CALL     CAT
      001856 CD 03 B0         [ 4] 4041         CALL     DOLIT
      001859 00 03                 4042         .word      3
      00185B CD 0F 0E         [ 4] 4043         CALL     UDOTR   ;display numeric data
      00185E CD 09 D4         [ 4] 4044         CALL     ONEP    ;increment address
      001861 CD 03 C4         [ 4] 4045 PDUM2:  CALL     DONXT
      001864 18 50                 4046         .word      PDUM1   ;loop till done
      001866 81               [ 4] 4047         RET
                                   4048 
                                   4049 ;       DUMP    ( a u -- )
                                   4050 ;       Dump u bytes from a,
                                   4051 ;       in a formatted manner.
      001867 18 39                 4052         .word      LINK
                           001869  4053 LINK = . 
      001869 04                    4054         .byte      4
      00186A 44 55 4D 50           4055         .ascii     "DUMP"
      00186E                       4056 DUMP:
      00186E CD 05 9C         [ 4] 4057         CALL     BASE
      001871 CD 04 38         [ 4] 4058         CALL     AT
      001874 CD 04 A8         [ 4] 4059         CALL     TOR
      001877 CD 0C E6         [ 4] 4060         CALL     HEX     ;save radix, set hex
      00187A CD 03 B0         [ 4] 4061         CALL     DOLIT
      00187D 00 10                 4062         .word      16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00187F CD 08 FA         [ 4] 4063         CALL     SLASH   ;change count to lines
      001882 CD 04 A8         [ 4] 4064         CALL     TOR     ;start count down loop
      001885 CD 0E A6         [ 4] 4065 DUMP1:  CALL     CR
      001888 CD 03 B0         [ 4] 4066         CALL     DOLIT
      00188B 00 10                 4067         .word      16
      00188D CD 06 C5         [ 4] 4068         CALL     DDUP
      001890 CD 18 3D         [ 4] 4069         CALL     DUMPP   ;display numeric
      001893 CD 06 9A         [ 4] 4070         CALL     ROT
      001896 CD 06 9A         [ 4] 4071         CALL     ROT
      001899 CD 0E 5E         [ 4] 4072         CALL     SPACE
      00189C CD 0E 5E         [ 4] 4073         CALL     SPACE
      00189F CD 18 1B         [ 4] 4074         CALL     UTYPE   ;display printable characters
      0018A2 CD 03 C4         [ 4] 4075         CALL     DONXT
      0018A5 18 85                 4076         .word      DUMP1   ;loop till done
      0018A7 CD 04 D5         [ 4] 4077 DUMP3:  CALL     DROP
      0018AA CD 04 89         [ 4] 4078         CALL     RFROM
      0018AD CD 05 9C         [ 4] 4079         CALL     BASE
      0018B0 CC 04 21         [ 2] 4080         JP     STORE   ;restore radix
                                   4081 
                                   4082 ;       .S      ( ... -- ... )
                                   4083 ;        Display  contents of stack.
      0018B3 18 69                 4084         .word      LINK
                           0018B5  4085 LINK = . 
      0018B5 02                    4086         .byte      2
      0018B6 2E 53                 4087         .ascii     ".S"
      0018B8                       4088 DOTS:
      0018B8 CD 0E A6         [ 4] 4089         CALL     CR
      0018BB CD 0A 82         [ 4] 4090         CALL     DEPTH   ;stack depth
      0018BE CD 04 A8         [ 4] 4091         CALL     TOR     ;start count down loop
      0018C1 20 09            [ 2] 4092         JRA     DOTS2   ;skip first pass
      0018C3 CD 04 9C         [ 4] 4093 DOTS1:  CALL     RAT
      0018C6 CD 0A 99         [ 4] 4094 	CALL     PICK
      0018C9 CD 0F 41         [ 4] 4095         CALL     DOT     ;index stack, display contents
      0018CC CD 03 C4         [ 4] 4096 DOTS2:  CALL     DONXT
      0018CF 18 C3                 4097         .word      DOTS1   ;loop till done
      0018D1 CD 0E E5         [ 4] 4098         CALL     DOTQP
      0018D4 05                    4099         .byte      5
      0018D5 20 3C 73 70 20        4100         .ascii     " <sp "
      0018DA 81               [ 4] 4101         RET
                                   4102 
                                   4103 ;       >NAME   ( ca -- na | F )
                                   4104 ;       Convert code address
                                   4105 ;       to a name address.
      0018DB 18 B5                 4106         .word      LINK
                           0018DD  4107 LINK = . 
      0018DD 05                    4108         .byte      5
      0018DE 3E 4E 41 4D 45        4109         .ascii     ">NAME"
      0018E3                       4110 TNAME:
      0018E3 CD 06 1F         [ 4] 4111         CALL     CNTXT   ;vocabulary link
      0018E6 CD 04 38         [ 4] 4112 TNAM2:  CALL     AT
      0018E9 CD 04 DF         [ 4] 4113         CALL     DUPP    ;?last word in a vocabulary
      0018EC CD 03 E3         [ 4] 4114         CALL     QBRAN
      0018EF 19 0A                 4115         .word      TNAM4
      0018F1 CD 06 C5         [ 4] 4116         CALL     DDUP
      0018F4 CD 10 C6         [ 4] 4117         CALL     NAMET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0018F7 CD 05 54         [ 4] 4118         CALL     XORR    ;compare
      0018FA CD 03 E3         [ 4] 4119         CALL     QBRAN
      0018FD 19 04                 4120         .word      TNAM3
      0018FF CD 09 B8         [ 4] 4121         CALL     CELLM   ;continue with next word
      001902 20 E2            [ 2] 4122         JRA     TNAM2
      001904 CD 04 EF         [ 4] 4123 TNAM3:  CALL     SWAPP
      001907 CC 04 D5         [ 2] 4124         JP     DROP
      00190A CD 06 BA         [ 4] 4125 TNAM4:  CALL     DDROP
      00190D CC 0A 40         [ 2] 4126         JP     ZERO
                                   4127 
                                   4128 ;       .ID     ( na -- )
                                   4129 ;        Display  name at address.
      001910 18 DD                 4130         .word      LINK
                           001912  4131 LINK = . 
      001912 03                    4132         .byte      3
      001913 2E 49 44              4133         .ascii     ".ID"
      001916                       4134 DOTID:
      001916 CD 06 89         [ 4] 4135         CALL     QDUP    ;if zero no name
      001919 CD 03 E3         [ 4] 4136         CALL     QBRAN
      00191C 19 2C                 4137         .word      DOTI1
      00191E CD 0B 17         [ 4] 4138         CALL     COUNT
      001921 CD 03 B0         [ 4] 4139         CALL     DOLIT
      001924 00 1F                 4140         .word      0x1F
      001926 CD 05 2B         [ 4] 4141         CALL     ANDD    ;mask lexicon bits
      001929 CC 18 1B         [ 2] 4142         JP     UTYPE
      00192C CD 0E E5         [ 4] 4143 DOTI1:  CALL     DOTQP
      00192F 09                    4144         .byte      9
      001930 20 6E 6F 4E 61 6D 65  4145         .ascii     " noName"
      001937 81               [ 4] 4146         RET
                                   4147 
                           000000  4148 WANT_SEE=0
                           000000  4149 .if WANT_SEE 
                                   4150 ;       SEE     ( -- ; <string> )
                                   4151 ;       A simple decompiler.
                                   4152 ;       Updated for byte machines.
                                   4153         .word      LINK
                                   4154 LINK = . 
                                   4155         .byte      3
                                   4156         .ascii     "SEE"
                                   4157 SEE:
                                   4158         CALL     TICK    ;starting address
                                   4159         CALL     CR
                                   4160         CALL     ONEM
                                   4161 SEE1:   CALL     ONEP
                                   4162         CALL     DUPP
                                   4163         CALL     AT
                                   4164         CALL     DUPP
                                   4165         CALL     QBRAN
                                   4166         .word    SEE2
                                   4167         CALL     TNAME   ;?is it a name
                                   4168 SEE2:   CALL     QDUP    ;name address or zero
                                   4169         CALL     QBRAN
                                   4170         .word    SEE3
                                   4171         CALL     SPACE
                                   4172         CALL     DOTID   ;display name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173         CALL     ONEP
                                   4174         JRA      SEE4
                                   4175 SEE3:   CALL     DUPP
                                   4176         CALL     CAT
                                   4177         CALL     UDOT    ;display number
                                   4178 SEE4:   CALL     NUFQ    ;user control
                                   4179         CALL     QBRAN
                                   4180         .word    SEE1
                                   4181         JP     DROP
                                   4182 .endif ; WANT_SEE 
                                   4183 
                                   4184 ;       WORDS   ( -- )
                                   4185 ;       Display names in vocabulary.
      001938 19 12                 4186         .word      LINK
                           00193A  4187 LINK = . 
      00193A 05                    4188         .byte      5
      00193B 57 4F 52 44 53        4189         .ascii     "WORDS"
      001940                       4190 WORDS:
      001940 CD 0E A6         [ 4] 4191         CALL     CR
      001943 CD 06 1F         [ 4] 4192         CALL     CNTXT   ;only in context
      001946 CD 04 38         [ 4] 4193 WORS1:  CALL     AT
      001949 CD 06 89         [ 4] 4194         CALL     QDUP    ;?at end of list
      00194C CD 03 E3         [ 4] 4195         CALL     QBRAN
      00194F 19 62                 4196         .word      WORS2
      001951 CD 04 DF         [ 4] 4197         CALL     DUPP
      001954 CD 0E 5E         [ 4] 4198         CALL     SPACE
      001957 CD 19 16         [ 4] 4199         CALL     DOTID   ;display a name
      00195A CD 09 B8         [ 4] 4200         CALL     CELLM
      00195D CD 03 FA         [ 4] 4201         CALL     BRAN
      001960 19 46                 4202         .word      WORS1
      001962 81               [ 4] 4203 WORS2:  RET
                                   4204 
                                   4205         
                                   4206 ;; Hardware reset
                                   4207 
                                   4208 ;       hi      ( -- )
                                   4209 ;       Display sign-on message.
      001963 19 3A                 4210         .word      LINK
                           001965  4211 LINK = . 
      001965 02                    4212         .byte      2
      001966 68 69                 4213         .ascii     "hi"
      001968                       4214 HI:
      001968 CD 0E A6         [ 4] 4215         CALL     CR
      00196B CD 0E E5         [ 4] 4216         CALL     DOTQP   ;initialize I/O
      00196E 0F                    4217         .byte      15
      00196F 73 74 6D 38 65 46 6F  4218         .ascii     "stm8eForth v"
             72 74 68 20 76
      00197B 33                    4219 	.byte      VER+'0'
      00197C 2E                    4220         .byte      '.' 
      00197D 30                    4221 	.byte      EXT+'0' ;version
      00197E CC 0E A6         [ 2] 4222         JP     CR
                                   4223 
                           000000  4224 WANT_DEBUG=0
                           000000  4225 .if WANT_DEBUG 
                                   4226 ;       DEBUG      ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4227 ;       Display sign-on message.
                                   4228 ;        .word      LINK
                                   4229 LINK = . 
                                   4230         .byte      5
                                   4231         .ascii     "DEBUG"
                                   4232 DEBUG:
                                   4233 	CALL DOLIT
                                   4234 	.word 0x65
                                   4235 	CALL EMIT
                                   4236 	CALL DOLIT
                                   4237 	.word 0
                                   4238  	CALL ZLESS 
                                   4239 	CALL DOLIT
                                   4240 	.word 0xFFFE
                                   4241 	CALL ZLESS 
                                   4242 	CALL UPLUS 
                                   4243  	CALL DROP 
                                   4244 	CALL DOLIT
                                   4245 	.word 3
                                   4246 	CALL UPLUS 
                                   4247 	CALL UPLUS 
                                   4248  	CALL DROP
                                   4249 	CALL DOLIT
                                   4250 	.word 0x43
                                   4251 	CALL UPLUS 
                                   4252  	CALL DROP
                                   4253 	CALL EMIT
                                   4254 	CALL DOLIT
                                   4255 	.word 0x4F
                                   4256 	CALL DOLIT
                                   4257 	.word 0x6F
                                   4258  	CALL XORR
                                   4259 	CALL DOLIT
                                   4260 	.word 0xF0
                                   4261  	CALL ANDD
                                   4262 	CALL DOLIT
                                   4263 	.word 0x4F
                                   4264  	CALL ORR
                                   4265 	CALL EMIT
                                   4266 	CALL DOLIT
                                   4267 	.word 8
                                   4268 	CALL DOLIT
                                   4269 	.word 6
                                   4270  	CALL SWAPP
                                   4271 	CALL OVER
                                   4272 	CALL XORR
                                   4273 	CALL DOLIT
                                   4274 	.word 3
                                   4275 	CALL ANDD 
                                   4276 	CALL ANDD
                                   4277 	CALL DOLIT
                                   4278 	.word 0x70
                                   4279 	CALL UPLUS 
                                   4280 	CALL DROP
                                   4281 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4282 	CALL DOLIT
                                   4283 	.word 0
                                   4284 	CALL QBRAN
                                   4285 	.word DEBUG1
                                   4286 	CALL DOLIT
                                   4287 	.word 0x3F
                                   4288 DEBUG1:
                                   4289 	CALL DOLIT
                                   4290 	.word 0xFFFF
                                   4291 	CALL QBRAN
                                   4292 	.word DEBUG2
                                   4293 	CALL DOLIT
                                   4294 	.word 0x74
                                   4295 	CALL BRAN
                                   4296 	.word DEBUG3
                                   4297 DEBUG2:
                                   4298 	CALL DOLIT
                                   4299 	.word 0x21
                                   4300 DEBUG3:
                                   4301 	CALL EMIT
                                   4302 	CALL DOLIT
                                   4303 	.word 0x68
                                   4304 	CALL DOLIT
                                   4305 	.word 0x80
                                   4306 	CALL STORE
                                   4307 	CALL DOLIT
                                   4308 	.word 0x80
                                   4309 	CALL AT
                                   4310 	CALL EMIT
                                   4311 	CALL DOLIT
                                   4312 	.word 0x4D
                                   4313 	CALL TOR
                                   4314 	CALL RAT
                                   4315 	CALL RFROM
                                   4316 	CALL ANDD
                                   4317 	CALL EMIT
                                   4318 	CALL DOLIT
                                   4319 	.word 0x61
                                   4320 	CALL DOLIT
                                   4321 	.word 0xA
                                   4322 	CALL TOR
                                   4323 DEBUG4:
                                   4324 	CALL DOLIT
                                   4325 	.word 1
                                   4326 	CALL UPLUS 
                                   4327 	CALL DROP
                                   4328 	CALL DONXT
                                   4329 	.word DEBUG4
                                   4330 	CALL EMIT
                                   4331 	CALL DOLIT
                                   4332 	.word 0x656D
                                   4333 	CALL DOLIT
                                   4334 	.word 0x100
                                   4335 	CALL UMSTA
                                   4336 	CALL SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4337 	CALL DOLIT
                                   4338 	.word 0x100
                                   4339 	CALL UMSTA
                                   4340 	CALL SWAPP 
                                   4341 	CALL DROP
                                   4342 	CALL EMIT
                                   4343 	CALL EMIT
                                   4344 	CALL DOLIT
                                   4345 	.word 0x2043
                                   4346 	CALL DOLIT
                                   4347 	.word 0
                                   4348 	CALL DOLIT
                                   4349 	.word 0x100
                                   4350 	CALL UMMOD
                                   4351 	CALL EMIT
                                   4352 	CALL EMIT
                                   4353 	;JP ORIG
                                   4354 	RET
                                   4355 .endif ; WANT_DEBUG 
                                   4356 
                                   4357 
                                   4358 ;       'BOOT   ( -- a )
                                   4359 ;       The application startup vector.
      001981 19 65                 4360         .word      LINK
                           001983  4361 LINK = . 
      001983 05                    4362         .byte      5
      001984 27 42 4F 4F 54        4363         .ascii     "'BOOT"
      001989                       4364 TBOOT:
      001989 CD 05 8C         [ 4] 4365         CALL     DOVAR
      00198C 40 02                 4366         .word    APP_RUN      ;application to boot
                                   4367 
                                   4368 ;       COLD    ( -- )
                                   4369 ;       The hilevel cold start s=ence.
      00198E 19 83                 4370         .word      LINK
                           001990  4371         LINK = . 
      001990 04                    4372         .byte      4
      001991 43 4F 4C 44           4373         .ascii     "COLD"
      001995                       4374 COLD:
                           000000  4375 .if WANT_DEBUG
                                   4376         CALL DEBUG
                                   4377 .endif ; WANT_DEBUG
      001995 CD 03 B0         [ 4] 4378 COLD1:  CALL     DOLIT
      001998 00 2B                 4379         .word      UZERO
      00199A CD 03 B0         [ 4] 4380 	CALL     DOLIT
      00199D 00 06                 4381         .word      UPP
      00199F CD 03 B0         [ 4] 4382         CALL     DOLIT
      0019A2 00 1A                 4383 	.word      UEND-UZERO
      0019A4 CD 0B 7B         [ 4] 4384         CALL     CMOVE   ;initialize user area
                                   4385 
                                   4386 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019A7 90 CE 40 02      [ 2] 4387         ldw y,APP_RUN 
      0019AB 26 0B            [ 1] 4388         jrne 0$
      0019AD 1D 00 02         [ 2] 4389         subw x,#CELLL 
      0019B0 90 AE 19 68      [ 2] 4390         ldw y,#HI  
      0019B4 FF               [ 2] 4391         ldw (x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0019B5 CD 1B 43         [ 4] 4392         call UPDATRUN 
      0019B8                       4393 0$:        
                                   4394 ; update LAST with APP_LAST 
                                   4395 ; if APP_LAST > LAST else do the opposite
      0019B8 90 CE 40 00      [ 2] 4396         ldw y,APP_LAST 
      0019BC 90 B3 1A         [ 2] 4397         cpw y,ULAST 
      0019BF 22 05            [ 1] 4398         jrugt 1$ 
                                   4399 ; save LAST at APP_LAST  
      0019C1 CD 1B 2B         [ 4] 4400         call UPDATLAST 
      0019C4 20 06            [ 2] 4401         jra 2$
      0019C6                       4402 1$: ; update LAST with APP_LAST 
      0019C6 90 BF 1A         [ 2] 4403         ldw ULAST,y
      0019C9 90 BF 14         [ 2] 4404         ldw UCNTXT,y
      0019CC                       4405 2$:  
                                   4406 ; update APP_CP if < app_space 
      0019CC 90 CE 40 04      [ 2] 4407         ldw y,APP_CP  
      0019D0 90 B3 18         [ 2] 4408         cpw y,UCP   
      0019D3 24 06            [ 1] 4409         jruge 3$ 
      0019D5 CD 1B 54         [ 4] 4410         call UPDATCP
      0019D8 90 BE 18         [ 2] 4411         ldw y,UCP   
      0019DB                       4412 3$:
      0019DB 90 BF 18         [ 2] 4413         ldw UCP,y                 
                                   4414 ; update UVP with APP_VP  
                                   4415 ; if APP_VP>UVP else do the opposite 
      0019DE 90 CE 40 06      [ 2] 4416         ldw y,APP_VP 
      0019E2 90 B3 16         [ 2] 4417         cpw y,UVP 
      0019E5 22 05            [ 1] 4418         jrugt 4$
      0019E7 CD 1B 6B         [ 4] 4419         call UPDATVP 
      0019EA 20 03            [ 2] 4420         jra 6$
      0019EC                       4421 4$: ; update UVP with APP_VP 
      0019EC 90 BF 16         [ 2] 4422         ldw UVP,y 
      0019EF                       4423 6$:      
      0019EF CD 13 A9         [ 4] 4424         CALL     PRESE   ;initialize data stack and TIB
      0019F2 CD 19 89         [ 4] 4425         CALL     TBOOT
      0019F5 CD 0B 64         [ 4] 4426         CALL     ATEXE   ;application boot
      0019F8 CD 16 72         [ 4] 4427         CALL     OVERT
      0019FB CC 13 C6         [ 2] 4428         JP     QUIT    ;start interpretation
                                   4429 
                           000001  4430 WANT_MATH_CONST = 1 
                           000001  4431 .if WANT_MATH_CONST 
                                   4432         ; irrational constants 
                                   4433         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4434         .include "../const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      0019FE 19 90                   31         .word LINK 
                           001A00    32         LINK=.
      001A00 02                      33         .byte 2
      001A01 50 49                   34         .ascii "PI" 
      001A03                         35 PII:
      001A03 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      001A06 90 AE 01 63      [ 2]   37         ldw y,#355 
      001A0A EF 02            [ 2]   38         ldw (2,x),y 
      001A0C 90 AE 00 71      [ 2]   39         ldw y,#113 
      001A10 FF               [ 2]   40         ldw (x),y 
      001A11 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      001A12 1A 00                   48         .word LINK 
                           001A14    49         LINK=.
      001A14 05                      50         .byte 5 
      001A15 53 51 52 54 32          51         .ascii "SQRT2" 
      001A1A                         52 SQRT2:
      001A1A 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      001A1D 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A21 EF 02            [ 2]   55         ldw (2,x),y 
      001A23 90 AE 36 24      [ 2]   56         ldw y,#13860 
      001A27 FF               [ 2]   57         ldw (x),y 
      001A28 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      001A29 1A 14                   63         .word LINK 
                           001A2B    64         LINK=.
      001A2B 05                      65         .byte 5
      001A2C 53 51 52 54 33          66         .ascii "SQRT3" 
      001A31                         67 SQRT3: 
      001A31 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001A34 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001A38 EF 02            [ 2]   70     ldw (2,x),y 
      001A3A 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      001A3E FF               [ 2]   72     ldw (x),y 
      001A3F 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      001A40 1A 2B                   78         .word LINK 
                           001A42    79         LINK=.
      001A42 01                      80         .byte 1
      001A43 45                      81         .ascii "E" 
      001A44                         82 ENEPER:
      001A44 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001A47 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001A4B EF 02            [ 2]   85     ldw (2,x),y 
      001A4D 90 AE 29 32      [ 2]   86     ldw y,#10546 
      001A51 FF               [ 2]   87     ldw (x),y 
      001A52 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001A53 1A 42                   92         .word LINK 
                           001A55    93         LINK=.
      001A55 06                      94         .byte 6 
      001A56 53 51 52 54 31 30       95         .ascii "SQRT10" 
      001A5C                         96 SQRT10:
      001A5C 1D 00 04         [ 2]   97     subw x,#2*CELLL
      001A5F 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001A63 EF 02            [ 2]   99     ldw (2,x),y 
      001A65 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001A69 FF               [ 2]  101     ldw (x),y 
      001A6A 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001A6B 1A 55                  107         .word LINK 
                           001A6D   108         LINK=. 
      001A6D 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A6E 31 32 52 54 32         110         .ascii "12RT2"
      001A73                        111 RT12_2:
      001A73 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A76 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A7A EF 02            [ 2]  114     ldw (2,x),y 
      001A7C 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A80 FF               [ 2]  116     ldw (x),y 
      001A81 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A82 1A 6D                  122         .word LINK 
                           001A84   123         LINK=.
      001A84 05                     124         .byte 5 
      001A85 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001A8A                        126 LOG2S:
      001A8A 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A8D 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001A91 EF 02            [ 2]  129     ldw (2,x),y 
      001A93 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001A97 FF               [ 2]  131     ldw (x),y 
      001A98 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001A99 1A 84                  137         .word LINK 
                           001A9B   138         LINK=.
      001A9B 04                     139         .byte 4 
      001A9C 4C 4E 32 53            140         .ascii "LN2S" 
      001AA0                        141 LN2S: 
      001AA0 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001AA3 90 AE 01 E5      [ 2]  143     ldw y,#485
      001AA7 EF 02            [ 2]  144     ldw (2,x),y 
      001AA9 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001AAD FF               [ 2]  146     ldw (x),y 
      001AAE 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4435 .endif ; WANT_MATH_CONST
                                   4436 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4437         .include "flash_disco.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize PTR16 
                                     28 ; PTR!  ( a -- )
                                     29 ;---------------------------------
      001AAF 1A 9B                   30     .word LINK 
                           001AB1    31     LINK=.
      001AB1 04                      32     .byte 4 
      001AB2 50 54 52 21             33     .ascii "PTR!"
      001AB6                         34 PSTO:
      001AB6 90 93            [ 1]   35     ldw y,x
      001AB8 90 FE            [ 2]   36     ldw y,(y)
      001ABA 90 BF 32         [ 2]   37     ldw PTR16,y  
      001ABD 1C 00 02         [ 2]   38     addw x,#CELLL 
      001AC0 81               [ 4]   39     ret 
                                     40 
                                     41 ;-----------------------------------
                                     42 ; return EEPROM base address 
                                     43 ;  EEPROM  ( -- a )
                                     44 ;-----------------------------------
      001AC1 1A B1                   45     .word LINK 
                           001AC3    46 LINK=.
      001AC3 06                      47     .byte 6 
      001AC4 45 45 50 52 4F 4D       48     .ascii "EEPROM"
      001ACA                         49 EEPROM: 
      001ACA 90 AE 40 00      [ 2]   50     ldw y,#EEPROM_BASE
      001ACE 1D 00 02         [ 2]   51     subw x,#CELLL 
      001AD1 FF               [ 2]   52     ldw (x),y 
      001AD2 81               [ 4]   53     ret
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                     55 ;---------------------------------
                                     56 ; return APP_LAST address 
                                     57 ; EEP-LAST ( -- a )
                                     58 ;---------------------------------
      001AD3 1A C3                   59 	.word LINK 
                           001AD5    60 	LINK=.
      001AD5 08                      61 	.byte 8 
      001AD6 45 45 50 2D 4C 41 53    62 	.ascii "EEP-LAST"
             54
      001ADE                         63 EEPLAST:
      001ADE 1D 00 02         [ 2]   64 	subw x,#CELLL 
      001AE1 90 AE 40 00      [ 2]   65 	ldw y,#APP_LAST 
      001AE5 FF               [ 2]   66 	ldw (x),y 
      001AE6 81               [ 4]   67 	ret 
                                     68 
                                     69 ;----------------------------------
                                     70 ; return APP_RUN address 	
                                     71 ; EEP-RUN ( -- a )
                                     72 ;-----------------------------------
      001AE7 1A D5                   73 	.word LINK 
                           001AE9    74 	LINK=.
      001AE9 07                      75 	.byte 7
      001AEA 45 45 50 2D 52 55 4E    76 	.ascii "EEP-RUN"
      001AF1                         77 EEPRUN:
      001AF1 1D 00 02         [ 2]   78 	subw x,#CELLL 
      001AF4 90 AE 40 02      [ 2]   79 	ldw y,#APP_RUN 
      001AF8 FF               [ 2]   80 	ldw (x),y 
      001AF9 81               [ 4]   81 	ret 
                                     82 
                                     83 ;------------------------------------
                                     84 ; return APP_CP address  
                                     85 ; EEP-CP ( -- a )
                                     86 ;------------------------------------
      001AFA 1A E9                   87 	.word LINK
                           001AFC    88 	LINK=.
      001AFC 06                      89 	.byte 6 
      001AFD 45 45 50 2D 43 50       90 	.ascii "EEP-CP"
      001B03                         91 EEPCP:
      001B03 1D 00 02         [ 2]   92 	subw x,#CELLL 
      001B06 90 AE 40 04      [ 2]   93 	ldw y,#APP_CP  
      001B0A FF               [ 2]   94 	ldw (x),y 
      001B0B 81               [ 4]   95 	ret 
                                     96 
                                     97 ;------------------------------------
                                     98 ; return APP_VP address 
                                     99 ; EEP-VP ( -- a )
                                    100 ;-------------------------------------
      001B0C 1A FC                  101 	.word LINK
                           001B0E   102 	LINK=.
      001B0E 06                     103 	.byte 6
      001B0F 45 45 50 2D 56 50      104 	.ascii "EEP-VP"
      001B15                        105 EEPVP:
      001B15 1D 00 02         [ 2]  106 	subw x,#CELLL 
      001B18 90 AE 40 06      [ 2]  107 	ldw y,#APP_VP  
      001B1C FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B1D 81               [ 4]  109 	ret 
                                    110 
                                    111 ;----------------------------------
                                    112 ; update APP_LAST with LAST 
                                    113 ; UPDAT-LAST ( -- )
                                    114 ;----------------------------------
      001B1E 1B 0E                  115 	.word LINK 
                           001B20   116 	LINK=.
      001B20 0A                     117 	.byte 10
      001B21 55 50 44 41 54 2D 4C   118 	.ascii "UPDAT-LAST"
             41 53 54
      001B2B                        119 UPDATLAST:
      001B2B CD 06 4B         [ 4]  120 	call LAST
      001B2E CD 04 38         [ 4]  121 	call AT  
      001B31 CD 1A DE         [ 4]  122 	call EEPLAST
      001B34 CC 1C 92         [ 2]  123 	jp EE_STORE 
                                    124 
                                    125 ;---------------------------------
                                    126 ; update APP_RUN 
                                    127 ; UPDAT-RUN ( a -- )
                                    128 ;---------------------------------
      001B37 1B 20                  129 	.word LINK
                           001B39   130 	LINK=.
      001B39 09                     131 	.byte 9
      001B3A 55 50 44 41 54 2D 52   132 	.ascii "UPDAT-RUN"
             55 4E
      001B43                        133 UPDATRUN:
      001B43 CD 1A F1         [ 4]  134 	call EEPRUN
      001B46 CC 1C 92         [ 2]  135 	jp EE_STORE 
                                    136 	
                                    137 ;---------------------------------
                                    138 ; update APP_CP with CP 
                                    139 ; UPDAT-CP ( -- )
                                    140 ;---------------------------------
      001B49 1B 39                  141 	.word LINK 
                           001B4B   142 	LINK=.
      001B4B 08                     143 	.byte 8 
      001B4C 55 50 44 41 54 2D 43   144 	.ascii "UPDAT-CP"
             50
      001B54                        145 UPDATCP:
      001B54 CD 06 3B         [ 4]  146 	call CPP 
      001B57 CD 04 38         [ 4]  147 	call AT 
      001B5A CD 1B 03         [ 4]  148 	call EEPCP 
      001B5D CC 1C 92         [ 2]  149 	jp EE_STORE 
                                    150 
                                    151 ;----------------------------------
                                    152 ; update APP_VP with VP 
                                    153 ; UPDAT-VP ( -- )
                                    154 ;----------------------------------
      001B60 1B 4B                  155 	.word LINK
                           001B62   156 	LINK=.
      001B62 08                     157 	.byte 8 
      001B63 55 50 44 41 54 2D 56   158 	.ascii "UPDAT-VP" 
             50
      001B6B                        159 UPDATVP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B6B CD 06 2D         [ 4]  160 	call VPP 
      001B6E CD 04 38         [ 4]  161 	call AT
      001B71 CD 1B 15         [ 4]  162 	call EEPVP 
      001B74 CC 1C 92         [ 2]  163 	jp EE_STORE
                                    164 	
                                    165 
                                    166 ;----------------------------------
                                    167 ; unlock EEPROM/OPT for writing/erasing
                                    168 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    169 ;  UNLKEE   ( -- )
                                    170 ;----------------------------------
      001B77 1B 62                  171     .word LINK 
                           001B79   172 LINK=.
      001B79 06                     173     .byte 6 
      001B7A 55 4E 4C 4B 45 45      174     .ascii "UNLKEE"
      001B80                        175 unlock_eeprom:
      001B80 35 00 50 5B      [ 1]  176 	mov FLASH_CR2,#0 
      001B84 35 FF 50 5C      [ 1]  177 	mov FLASH_NCR2,#0xFF 
      001B88 35 AE 50 64      [ 1]  178 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B8C 35 56 50 64      [ 1]  179     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B90 72 07 50 5F FB   [ 2]  180 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B95 81               [ 4]  181 	ret
                                    182 
                                    183 ;----------------------------------
                                    184 ; unlock FLASH for writing/erasing
                                    185 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    186 ; UNLKFL  ( -- )
                                    187 ;----------------------------------
      001B96 1B 79                  188     .word LINK 
                           001B98   189 LINK=. 
      001B98 06                     190     .byte 6 
      001B99 55 4E 4C 4B 46 4C      191     .ascii "UNLKFL"    
      001B9F                        192 unlock_flash:
      001B9F 35 00 50 5B      [ 1]  193 	mov FLASH_CR2,#0 
      001BA3 35 FF 50 5C      [ 1]  194 	mov FLASH_NCR2,#0xFF 
      001BA7 35 56 50 62      [ 1]  195 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BAB 35 AE 50 62      [ 1]  196 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BAF 72 03 50 5F FB   [ 2]  197 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001BB4 81               [ 4]  198 	ret
                                    199 
                                    200 ;-----------------------------
                                    201 ; unlock FLASH or EEPROM 
                                    202 ; according to PTR16 address 
                                    203 ;  UNLOCK ( -- )
                                    204 ;-----------------------------
      001BB5 1B 98                  205 	.word LINK 
                           001BB7   206 	LINK=.
      001BB7 06                     207 	.byte 6
      001BB8 55 4E 4C 4F 43 4B      208 	.ascii "UNLOCK"
      001BBE                        209 unlock:
                                    210 ; put addr[15:0] in Y, for bounds check.
      001BBE 90 BE 32         [ 2]  211 	ldw y,PTR16   ; Y=addr15:0
      001BC1 90 A3 80 00      [ 2]  212     cpw y,#FLASH_BASE
      001BC5 24 10            [ 1]  213     jruge 4$
      001BC7 90 A3 40 00      [ 2]  214 	cpw y,#EEPROM_BASE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BCB 25 0D            [ 1]  215     jrult 9$
      001BCD 90 A3 48 7F      [ 2]  216 	cpw y,#OPTION_END 
      001BD1 22 07            [ 1]  217 	jrugt 9$
      001BD3 CD 1B 80         [ 4]  218 	call unlock_eeprom
      001BD6 81               [ 4]  219 	ret 
      001BD7 CD 1B 9F         [ 4]  220 4$: call unlock_flash
      001BDA 81               [ 4]  221 9$: ret 
                                    222 
                                    223 ;-------------------------
                                    224 ; lock write access to 
                                    225 ; FLASH and EEPROM 
                                    226 ; LOCK ( -- )
                                    227 ;-------------------------
      001BDB 1B B7                  228 	.word LINK 
                           001BDD   229 	LINK=.
      001BDD 04                     230 	.byte 4 
      001BDE 4C 4F 43 4B            231 	.ascii "LOCK" 
      001BE2                        232 lock: 
      001BE2 72 13 50 5F      [ 1]  233 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BE6 72 17 50 5F      [ 1]  234 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BEA 81               [ 4]  235 	ret 
                                    236 
                                    237 ;-------------------------
                                    238 ; increment PTR16 
                                    239 ; INC-PTR16 ( -- )
                                    240 ;-------------------------
      001BEB 1B DD                  241 	.word LINK 
                           001BED   242 	LINK=. 
      001BED 08                     243 	.byte 8 
      001BEE 49 4E 43 2D 50 54 52   244 	.ascii "INC-PTR16" 
             31 36
      001BF7                        245 INC_PTR16:
      001BF7 90 89            [ 2]  246 	pushw y 
      001BF9 90 BE 32         [ 2]  247 	ldw y,PTR16 
      001BFC 90 5C            [ 2]  248 	incw y 
      001BFE 90 BF 32         [ 2]  249 	ldw PTR16,y
      001C01 90 85            [ 2]  250 	popw y 
      001C03 81               [ 4]  251 	ret 
                                    252 
                                    253 
                                    254 ;----------------------------
                                    255 ; write a byte at address pointed 
                                    256 ; by PTR16 and increment PTR16.
                                    257 ; Expect pointer already initialized 
                                    258 ; and memory unlocked 
                                    259 ; WR-BYTE ( c -- )
                                    260 ;----------------------------
      001C04 1B ED                  261 	.word LINK 
                           001C06   262 	LINK=. 
      001C06 07                     263 	.byte 7 
      001C07 57 52 2D 42 59 54 45   264 	.ascii "WR-BYTE" 
                                    265 
      001C0E                        266 WR_BYTE:
      001C0E 90 93            [ 1]  267 	ldw y,x 
      001C10 90 FE            [ 2]  268 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001C12 1C 00 02         [ 2]  269 	addw x,#CELLL 
      001C15 90 9F            [ 1]  270 	ld a,yl
      001C17 92 C7 32         [ 4]  271 	ld [PTR16],a
      001C1A 72 05 50 5F FB   [ 2]  272 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C1F 20 D6            [ 2]  273 	jra INC_PTR16 
                                    274 
                                    275 ;---------------------------------------
                                    276 ; write a word at address pointed 
                                    277 ; by PTR16 and incrment PTR16 
                                    278 ; Expect pointer already initialized 
                                    279 ; WR-WORD ( w -- )
                                    280 ;---------------------------------------
      001C21 1C 06                  281 	.word LINK 
                           001C23   282 	LINK=.
      001C23 07                     283 	.byte 7
      001C24 57 52 2D 57 4F 52 44   284 	.ascii "WR-WORD"
      001C2B                        285 WR_WORD:
      001C2B 90 93            [ 1]  286 	ldw y,x 
      001C2D 90 FE            [ 2]  287 	ldw y,(y)
      001C2F 90 89            [ 2]  288 	pushw y 
      001C31 90 5E            [ 1]  289 	swapw y 
      001C33 FF               [ 2]  290 	ldw (x),y 
      001C34 CD 1C 0E         [ 4]  291 	call WR_BYTE 
      001C37 90 85            [ 2]  292 	popw y 
      001C39 1D 00 02         [ 2]  293 	subw x,#CELLL
      001C3C FF               [ 2]  294 	ldw (x),y 
      001C3D CD 1C 0E         [ 4]  295 	call WR_BYTE
      001C40 CC 1B E2         [ 2]  296 	jp lock 
                                    297 
                                    298 
                                    299 ;---------------------------------------
                                    300 ; write a byte to FLASH or EEPROM/OPTION  
                                    301 ; EEC!  (c a -- )
                                    302 ;---------------------------------------
      001C43 1C 23                  303     .word LINK 
                           001C45   304 	LINK=.
      001C45 04                     305     .byte 4 
      001C46 45 45 43 21            306     .ascii "EEC!"
                                    307 	; local variables 
                           000001   308 	BTW = 1   ; byte to write offset on stack
                           000002   309     OPT = 2 
                           000002   310 	VSIZE = 2
      001C4A                        311 EE_CSTORE:
      001C4A 52 02            [ 2]  312 	sub sp,#VSIZE
      001C4C CD 1A B6         [ 4]  313     call PSTO
      001C4F E6 01            [ 1]  314 	ld a,(1,x)
      001C51 43               [ 1]  315 	cpl a 
      001C52 6B 01            [ 1]  316 	ld (BTW,sp),a ; byte to write 
      001C54 0F 02            [ 1]  317 	clr (OPT,sp)  ; OPTION flag
      001C56 CD 1B BE         [ 4]  318 	call unlock 
                                    319 	; check if option
      001C59 90 BE 32         [ 2]  320 	ldw y,PTR16 
      001C5C 90 A3 48 00      [ 2]  321 	cpw y,#OPTION_BASE
      001C60 2B 10            [ 1]  322 	jrmi 2$
      001C62 90 A3 48 80      [ 2]  323 	cpw y,#OPTION_END+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C66 2A 0A            [ 1]  324 	jrpl 2$
      001C68 03 02            [ 1]  325 	cpl (OPT,sp)
                                    326 	; OPTION WRITE require this unlock 
      001C6A 72 1E 50 5B      [ 1]  327     bset FLASH_CR2,#FLASH_CR2_OPT
      001C6E 72 1F 50 5C      [ 1]  328     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001C72                        329 2$: 
      001C72 CD 1C 0E         [ 4]  330 	call WR_BYTE 	
      001C75 0D 02            [ 1]  331 	tnz (OPT,sp)
      001C77 27 0D            [ 1]  332 	jreq 3$ 
      001C79 7B 01            [ 1]  333     ld a,(BTW,sp)
      001C7B 90 5F            [ 1]  334     clrw y
      001C7D 90 97            [ 1]  335 	ld yl,a 
      001C7F 1D 00 02         [ 2]  336 	subw x,#CELLL 
      001C82 FF               [ 2]  337 	ldw (x),y 
      001C83 CD 1C 0E         [ 4]  338 	call WR_BYTE
      001C86                        339 3$: 
      001C86 CD 1B E2         [ 4]  340 	call lock 
      001C89 5B 02            [ 2]  341 	addw sp,#VSIZE 
      001C8B 81               [ 4]  342     ret
                                    343 
                                    344 ;------------------------------
                                    345 ; write integer in FLASH|EEPROM
                                    346 ; EE! ( n a -- )
                                    347 ;------------------------------
      001C8C 1C 45                  348 	.word LINK 
                           001C8E   349 	LINK=.
      001C8E 03                     350 	.byte 3 
      001C8F 45 45 21               351 	.ascii "EE!"
      001C92                        352 EE_STORE:
      001C92 CD 1A B6         [ 4]  353 	call PSTO 
      001C95 CD 1B BE         [ 4]  354 	call unlock 
      001C98 CC 1C 2B         [ 2]  355 	jp WR_WORD 
                                    356 
                                    357 
                                    358 ;----------------------------
                                    359 ; Erase flash memory row 
                                    360 ; stm8s105c6 as 128 bytes rows
                                    361 ; ROW-ERASE ( a -- )
                                    362 ;----------------------------
      001C9B 1C 8E                  363 	.word LINK 
                           001C9D   364 	LINK=. 
      001C9D 09                     365 	.byte 9 
      001C9E 52 4F 57 2D 45 52 41   366 	.ascii "ROW-ERASE" 
             53 45
      001CA7                        367 row_erase:
      001CA7 CD 1A B6         [ 4]  368 	call PSTO
                                    369 ;code must be execute from RAM 
                                    370 ;copy routine to PAD 
      001CAA 1D 00 02         [ 2]  371 	subw x,#CELLL 
      001CAD 90 AE 1C F4      [ 2]  372 	ldw y,#row_erase_proc
      001CB1 FF               [ 2]  373 	ldw (x),y 
      001CB2 CD 0B 3F         [ 4]  374 	call PAD 
      001CB5 90 AE 1D 17      [ 2]  375 	ldw y,#row_erase_proc_end 
      001CB9 72 A2 1C F4      [ 2]  376 	subw y,#row_erase_proc
      001CBD 1D 00 02         [ 2]  377 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001CC0 FF               [ 2]  378 	ldw (x),y 
      001CC1 CD 0B 7B         [ 4]  379 	call CMOVE 
      001CC4                        380 block_erase:
      001CC4 90 BE 32         [ 2]  381 	ldw y,PTR16
      001CC7 90 A3 21 00      [ 2]  382 	cpw y,#app_space 
      001CCB 2A 13            [ 1]  383 	jrpl erase_flash 
                                    384 ; erase EEPROM block
      001CCD 90 A3 40 00      [ 2]  385 	cpw y,#EEPROM_BASE 
      001CD1 24 01            [ 1]  386 	jruge 1$
      001CD3 81               [ 4]  387 	ret ; bad address 
      001CD4 90 A3 43 FF      [ 2]  388 1$: cpw y,#EEPROM_END 
      001CD8 23 01            [ 2]  389 	jrule 2$ 
      001CDA 81               [ 4]  390 	ret ; bad address 
      001CDB                        391 2$:	
      001CDB CD 1B 80         [ 4]  392 	call unlock_eeprom 
      001CDE 20 03            [ 2]  393 	jra proceed_erase
                                    394 ; erase flash block:
      001CE0                        395 erase_flash:
      001CE0 CD 1B 9F         [ 4]  396 	call unlock_flash 
      001CE3                        397 proceed_erase:
      001CE3 CD 0B 3F         [ 4]  398 	call PAD 
      001CE6 90 93            [ 1]  399 	ldw y,x
      001CE8 90 FE            [ 2]  400 	ldw y,(y)
      001CEA 1C 00 02         [ 2]  401 	addw x,#CELLL  
      001CED 90 FD            [ 4]  402 	call (y) 
      001CEF 72 17 50 5F      [ 1]  403 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001CF3 81               [ 4]  404 	ret 
                                    405 
                                    406 ; this routine is to be copied to PAD 
      001CF4                        407 row_erase_proc:
      001CF4 35 20 50 5B      [ 1]  408 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001CF8 35 DF 50 5C      [ 1]  409 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001CFC 4F               [ 1]  410 	clr a 
      001CFD 90 5F            [ 1]  411 	clrw y 
      001CFF 91 D7 32         [ 4]  412 	ld ([PTR16],y),a
      001D02 90 5C            [ 2]  413     incw y
      001D04 91 D7 32         [ 4]  414 	ld ([PTR16],y),a
      001D07 90 5C            [ 2]  415     incw y
      001D09 91 D7 32         [ 4]  416 	ld ([PTR16],y),a
      001D0C 90 5C            [ 2]  417     incw y
      001D0E 91 D7 32         [ 4]  418 	ld ([PTR16],y),a
      001D11 72 05 50 5F FB   [ 2]  419 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D16 81               [ 4]  420 	ret
      001D17                        421 row_erase_proc_end:
                                    422 
                                    423 
                                    424 ;-----------------------------------
                                    425 ; block programming must be 
                                    426 ; executed from RAM 
                                    427 ; initial contidions: 
                                    428 ; 		memory unlocked
                                    429 ;       PTR16 initialized 
                                    430 ; input: 
                                    431 ;    x   buffer address 
                                    432 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           000001   433 	BCNT=1 
      001D17                        434 copy_buffer:
      001D17 4B 80            [ 1]  435 	push #BLOCK_SIZE  
                                    436 ;enable block programming 
      001D19 72 10 50 5B      [ 1]  437 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D1D 72 11 50 5C      [ 1]  438 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D21 90 5F            [ 1]  439 	clrw y
      001D23 F6               [ 1]  440 1$:	ld a,(x)
      001D24 91 D7 32         [ 4]  441 	ld ([PTR16],y),a
      001D27 5C               [ 2]  442 	incw x 
      001D28 90 5C            [ 2]  443 	incw y 
      001D2A 0A 01            [ 1]  444 	dec (BCNT,sp)
      001D2C 26 F5            [ 1]  445 	jrne 1$
                                    446 ; wait EOP bit 
      001D2E 72 05 50 5F FB   [ 2]  447 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D33 84               [ 1]  448 	pop a ; remove BCNT from stack 
      001D34 81               [ 4]  449 	ret 
      001D35                        450 copy_buffer_end:
                                    451 
                                    452 ;-------------------------
                                    453 ; move program_row to RAM 
                                    454 ; in TIB 
                                    455 ;------------------------
      001D35                        456 copy_prog_to_ram:
      001D35 1D 00 06         [ 2]  457 	subw x,#6
      001D38 90 AE 1D 17      [ 2]  458 	ldw y,#copy_buffer 
      001D3C EF 04            [ 2]  459 	ldw (4,x),y 
      001D3E 90 AE 07 00      [ 2]  460 	ldw y,#TIBBASE
      001D42 EF 02            [ 2]  461 	ldw (2,x),y 
      001D44 90 AE 1D 35      [ 2]  462 	ldw y,#copy_buffer_end 
      001D48 72 A2 1D 17      [ 2]  463 	subw y,#copy_buffer  
      001D4C FF               [ 2]  464 	ldw (x),y 
      001D4D CD 0B 7B         [ 4]  465 	call CMOVE 
      001D50 81               [ 4]  466 	ret 
                                    467 
                                    468 
                                    469 ;-----------------------------
                                    470 ; write a row in FLASH/EEPROM 
                                    471 ; WR-ROW ( ab ar -- )
                                    472 ; ab -> address 128 byte buffer to write 
                                    473 ; ar ->  row address in FLASH|EEPROM 
                                    474 ;-----------------------------
      001D51 1C 9D                  475 	.word LINK 
                           001D53   476 	LINK=.
      001D53 06                     477 	.byte 6 
      001D54 57 52 2D 52 4F 57      478 	.ascii "WR-ROW"
      001D5A                        479 WR_ROW:
      001D5A CD 1A B6         [ 4]  480 	call PSTO
                                    481 ; align to FLASH block 
      001D5D A6 80            [ 1]  482 	ld a,#0x80 
      001D5F B4 33            [ 1]  483 	and a,PTR8 
      001D61 B7 33            [ 1]  484 	ld PTR8,a  
      001D63 CD 1D 35         [ 4]  485 	call copy_prog_to_ram
      001D66 CD 1B BE         [ 4]  486 	call unlock
      001D69 90 93            [ 1]  487 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D6B 90 FE            [ 2]  488 	ldw y,(y)
      001D6D 1C 00 02         [ 2]  489 	addw x,#CELLL 
      001D70 89               [ 2]  490 	pushw x 
      001D71 93               [ 1]  491 	ldw x,y ; buffer address in x 
      001D72 CD 07 00         [ 4]  492 	call TIBBASE
      001D75 CD 1B E2         [ 4]  493 	call lock
      001D78 85               [ 2]  494 	popw x 
      001D79 81               [ 4]  495 	ret 
                                    496 
                                    497 ;-------------------------------------
                                    498 ; change value of OPTION register 
                                    499 ; SET-OPT (c n -- ) 
                                    500 ; c new value.
                                    501 ; n OPT  number {1..7}
                                    502 ;--------------------------------------
      001D7A 1D 53                  503 		.word LINK 
                           001D7C   504 		LINK=.
      001D7C 07                     505 		.byte 7 
      001D7D 53 45 54 2D 4F 50 54   506 		.ascii "SET-OPT" 
      001D84                        507 set_option: 
      001D84 90 93            [ 1]  508 		ldw y,x 
      001D86 90 FE            [ 2]  509 		ldw y,(y)
      001D88 27 06            [ 1]  510 		jreq 1$
      001D8A 90 A3 00 07      [ 2]  511 		cpw y,#7 
      001D8E 23 04            [ 2]  512 		jrule 2$ 
                                    513 ; invalid OPTION number 		
      001D90 1C 00 04         [ 2]  514 1$:		addw x,#2*CELLL
      001D93 81               [ 4]  515 		ret
      001D94 90 58            [ 2]  516 2$:		sllw y 
      001D96 72 A9 47 FF      [ 2]  517 		addw y,#OPTION_BASE-1
      001D9A FF               [ 2]  518 		ldw (x),y 
      001D9B CD 1C 4A         [ 4]  519 		call EE_CSTORE
      001D9E 81               [ 4]  520 		ret 
                                    521 
                                    522 
                                    523 
                                    524 ;--------------------------------------
                                    525 ; reset system to its original state 
                                    526 ; before any user modification
                                    527 ; PRISTINE ( -- )
                                    528 ;-------------------------------------
      001D9F 1D 7C                  529 	.word LINK  
                           001DA1   530 	LINK=.
      001DA1 08                     531 	.byte 8 
      001DA2 50 52 49 53 54 49 4E   532 	.ascii "PRISTINE"
             45
      001DAA                        533 pristine:
                                    534 ;;; erase EEPROM
      001DAA CD 1A CA         [ 4]  535 	call EEPROM 
      001DAD CD 04 DF         [ 4]  536 1$:	call DUPP 
      001DB0 CD 1C A7         [ 4]  537 	call row_erase
      001DB3 90 93            [ 1]  538 	ldw y,x 
      001DB5 90 FE            [ 2]  539 	ldw y,(y)
      001DB7 72 A9 00 80      [ 2]  540 	addw y,#BLOCK_SIZE
      001DBB FF               [ 2]  541 	ldw (x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001DBC 90 A3 48 00      [ 2]  542 	cpw y,#OPTION_BASE 
      001DC0 25 EB            [ 1]  543 	jrult 1$
                                    544 ;;; reset OPTION to default values
      001DC2 90 AE 00 01      [ 2]  545 	ldw y,#1 ; OPT1 
      001DC6 FF               [ 2]  546 2$:	ldw (x),y   
      001DC7 90 5F            [ 1]  547 	clrw y 
      001DC9 EF 02            [ 2]  548 	ldw (2,x),y  ; ( 0 1 -- ) 
      001DCB CD 06 C5         [ 4]  549 	call DDUP    ; ( 0 1 0 1 -- )  
      001DCE CD 1D 84         [ 4]  550 	call set_option
      001DD1 90 93            [ 1]  551 	ldw y,x 
      001DD3 90 FE            [ 2]  552 	ldw y,(y)
      001DD5 90 5C            [ 2]  553 	incw y  ; next OPTION 
      001DD7 90 A3 00 08      [ 2]  554 	cpw y,#8 
      001DDB 25 E9            [ 1]  555 	jrult 2$
                                    556 ;;; erase first row of app_space 	
      001DDD CD 04 D5         [ 4]  557 	call DROP 
      001DE0 90 AE 21 00      [ 2]  558 	ldw y,#app_space
      001DE4 FF               [ 2]  559 	ldw (x),y   
      001DE5 CD 1C A7         [ 4]  560 	call row_erase 
                                    561 ; reset interrupt vectors 
      001DE8 1D 00 02         [ 2]  562 	subw x,#CELLL 
      001DEB 90 5F            [ 1]  563 	clrw y  
      001DED FF               [ 2]  564 4$:	ldw (x),y  ; ( n -- ) int# 
      001DEE CD 04 DF         [ 4]  565 	call DUPP  
      001DF1 CD 1E 0E         [ 4]  566 	call reset_vector
      001DF4 90 93            [ 1]  567 	ldw y,x 
      001DF6 90 FE            [ 2]  568 	ldw y,(y)
      001DF8 90 5C            [ 2]  569 	incw y   ; next vector 
      001DFA 90 A3 00 1D      [ 2]  570 	cpw y,#29 
      001DFE 25 ED            [ 1]  571 	jrult 4$
      001E00 CC 00 00         [ 2]  572 	jp NonHandledInterrupt ; reset MCU
                                    573 
                                    574 ;------------------------------
                                    575 ; reset an interrupt vector 
                                    576 ; to its initial value 
                                    577 ; i.e. NonHandledInterrupt
                                    578 ; RST-IVEC ( n -- )
                                    579 ;-----------------------------
      001E03 1D A1                  580 	.word LINK 
                           001E05   581 	LINK=. 
      001E05 08                     582 	.byte 8 
      001E06 52 53 54 2D 49 56 45   583 	.ascii "RST-IVEC"
             43
      001E0E                        584 reset_vector:
      001E0E 90 93            [ 1]  585 	ldw y,x
      001E10 1C 00 02         [ 2]  586 	addw x,#CELLL 
      001E13 90 FE            [ 2]  587 	ldw y,(y)
      001E15 90 A3 00 17      [ 2]  588 	cpw y,#23 
      001E19 27 2D            [ 1]  589 	jreq 9$
      001E1B 90 A3 00 1D      [ 2]  590 	cpw y,#29 ; last vector
      001E1F 22 27            [ 1]  591 	jrugt 9$  
      001E21 90 58            [ 2]  592 	sllw y 
      001E23 90 58            [ 2]  593 	sllw y 
      001E25 72 A9 80 08      [ 2]  594 	addw y,#0x8008 ; irq0 address 
      001E29 1D 00 02         [ 2]  595 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E2C FF               [ 2]  596 	ldw (x),y 
      001E2D CD 1A B6         [ 4]  597 	call PSTO 
      001E30 1D 00 02         [ 2]  598 	subw x,#CELLL 
      001E33 90 5F            [ 1]  599 	clrw y
      001E35 A6 82            [ 1]  600 	ld a,#0x82 
      001E37 90 95            [ 1]  601 	ld yh,a
      001E39 FF               [ 2]  602 	ldw (x),y
      001E3A CD 1C 2B         [ 4]  603 	call WR_WORD 
      001E3D 1D 00 02         [ 2]  604 	subw x,#CELLL
      001E40 90 AE 00 00      [ 2]  605 	ldw y,#NonHandledInterrupt
      001E44 FF               [ 2]  606 	ldw (x),y 
      001E45 CD 1C 2B         [ 4]  607 	call WR_WORD 
      001E48 81               [ 4]  608 9$:	ret 
                                    609 
                                    610 
                                    611 ;------------------------------
                                    612 ; all interrupt vector with 
                                    613 ; an address >= a are resetted 
                                    614 ; to default
                                    615 ; CHKIVEC ( a -- )
                                    616 ;------------------------------
      001E49 1E 05                  617 	.word LINK 
                           001E4B   618 	LINK=.
      001E4B 07                     619 	.byte 7
      001E4C 43 48 4B 49 56 45 43   620 	.ascii "CHKIVEC"
                                    621 ;local variables 
                           000001   622 	SSP=1
                           000003   623 	CADR=3
                           000005   624 	OFS=5
                           000006   625 	VSIZE=6  
      001E53                        626 CHKIVEC:
      001E53 52 06            [ 2]  627 	sub sp,#VSIZE ;alloc local variables 
      001E55 90 93            [ 1]  628 	ldw y,x 
      001E57 90 FE            [ 2]  629 	ldw y,(y)
      001E59 17 03            [ 2]  630 	ldw (CADR,sp),y ; ca 
      001E5B 1F 01            [ 2]  631 	ldw (SSP,sp),x 
      001E5D AE 80 0A         [ 2]  632 	ldw x,#0x800a ; irq0 address 
      001E60 BF 32            [ 2]  633 	ldw PTR16,X
      001E62 AE FF FC         [ 2]  634 	ldw x,#-4 
      001E65 1C 00 04         [ 2]  635 1$:	addw x,#4
      001E68 A3 00 78         [ 2]  636 	cpw x,#30*4 ; irq0-29 
      001E6B 27 22            [ 1]  637 	jreq 9$
      001E6D 90 93            [ 1]  638 	ldw y,x  
      001E6F 91 D6 32         [ 4]  639 	ld a,([PTR16],y)
      001E72 11 03            [ 1]  640 	cp a,(CADR,sp)
      001E74 25 EF            [ 1]  641 	jrult 1$
      001E76 90 5C            [ 2]  642 	incw y 
      001E78 91 D6 32         [ 4]  643 	ld a,([PTR16],y)
      001E7B 11 04            [ 1]  644 	cp a,(CADR+1,sp) 
      001E7D 25 E6            [ 1]  645 	jrult 1$ 
      001E7F 1F 05            [ 2]  646 	ldw (OFS,sp),x 
      001E81 54               [ 2]  647 	srlw x
      001E82 54               [ 2]  648 	srlw x 
      001E83 90 93            [ 1]  649 	ldw y,x 
      001E85 1E 01            [ 2]  650 	ldw x,(SSP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E87 FF               [ 2]  651 	ldw (x),y
      001E88 CD 1E 0E         [ 4]  652 	call reset_vector
      001E8B 1E 05            [ 2]  653 	ldw x,(OFS,sp) 
      001E8D 20 D6            [ 2]  654 	jra 1$
      001E8F 1E 01            [ 2]  655 9$:	ldw x,(SSP,sp) 
      001E91 1C 00 02         [ 2]  656 	addw x,#CELLL 
      001E94 5B 06            [ 2]  657 	addw sp,#VSIZE ; drop local variables  
      001E96 81               [ 4]  658 	ret 
                                    659 
                                    660 ;------------------------------
                                    661 ; set interrupt vector 
                                    662 ; SET-IVEC ( a n -- )
                                    663 ;  a Handler address
                                    664 ;  n  vector # 0 .. 29 
                                    665 ;-----------------------------
      001E97 1E 4B                  666 	.word LINK
                           001E99   667 	LINK=.
      001E99 08                     668 	.byte 8 
      001E9A 53 45 54 2D 49 56 45   669 	.ascii "SET-IVEC" 
             43
      001EA2                        670 set_vector:
      001EA2 90 93            [ 1]  671     ldw y,x 
      001EA4 90 FE            [ 2]  672 	ldw y,(y) ; vector #
      001EA6 90 A3 00 1D      [ 2]  673 	cpw y,#29 ; last vector
      001EAA 23 04            [ 2]  674 	jrule 2$
      001EAC 1C 00 04         [ 2]  675 	addw x,#2*CELLL 
      001EAF 81               [ 4]  676 	ret
      001EB0 90 58            [ 2]  677 2$:	sllw y 
      001EB2 90 58            [ 2]  678 	sllw y 
      001EB4 72 A9 80 08      [ 2]  679 	addw y,#0X8008 ; IRQ0 vector address 
      001EB8 FF               [ 2]  680 	ldw (x),y  ; vector address 
      001EB9 CD 1A B6         [ 4]  681 	call PSTO 
      001EBC 90 5F            [ 1]  682 	clrw y 
      001EBE A6 82            [ 1]  683 	ld a,#0x82 
      001EC0 90 95            [ 1]  684 	ld yh,a 
      001EC2 1D 00 02         [ 2]  685 	subw x,#CELLL 
      001EC5 FF               [ 2]  686 	ldw (x),y 
      001EC6 CD 1C 2B         [ 4]  687 	call WR_WORD 
      001EC9 CD 1C 2B         [ 4]  688 	call WR_WORD 
      001ECC 81               [ 4]  689 9$: ret 
                                    690 
                                    691 
                                    692 ;------------------------
                                    693 ; Compile word to flash
                                    694 ; EE, (w -- )
                                    695 ;-----------------------
      001ECD 1E 99                  696 	.word LINK
                           001ECF   697 	LINK=.
      001ECF 03                     698 	.byte 3
      001ED0 45 45 2C               699 	.ascii "EE,"
      001ED3                        700 EE_COMMA:
      001ED3 1D 00 02         [ 2]  701 	subw x,#CELLL 
      001ED6 90 BE 18         [ 2]  702 	ldw y,UCP
      001ED9 90 89            [ 2]  703 	pushw y 
      001EDB FF               [ 2]  704 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001EDC CD 1C 92         [ 4]  705 	call EE_STORE
      001EDF 90 85            [ 2]  706 	popw y 
      001EE1 72 A9 00 02      [ 2]  707 	addw y,#2
      001EE5 90 BF 18         [ 2]  708 	ldw UCP,y
      001EE8 81               [ 4]  709 	ret 
                                    710 
                                    711 
                                    712 ;-------------------------
                                    713 ; Compile byte to flash 
                                    714 ; EEC, ( c -- )	
                                    715 ;-------------------------
      001EE9 1E CF                  716 	.word LINK 
                           001EEB   717 	LINK=.
      001EEB 04                     718 	.byte 4 
      001EEC 45 45 43 2C            719 	.ascii "EEC,"
      001EF0                        720 EE_CCOMMA:
      001EF0 1D 00 02         [ 2]  721 	subw x,#CELLL 
      001EF3 90 BE 18         [ 2]  722 	ldw y,UCP
      001EF6 90 89            [ 2]  723 	pushw y 
      001EF8 FF               [ 2]  724 	ldw (x),y 
      001EF9 CD 1C 4A         [ 4]  725 	call EE_CSTORE
      001EFC 90 85            [ 2]  726 	popw y 
      001EFE 90 5C            [ 2]  727 	incw y 
      001F00 90 BF 18         [ 2]  728 	ldw UCP,y
      001F03 81               [ 4]  729 	ret 
                                    730 
                                    731 
                                    732 ;--------------------------
                                    733 ; copy FLASH block to ROWBUF
                                    734 ; ROW>BUF ( ar -- )
                                    735 ; ar row address 
                                    736 ;--------------------------
      001F04 1E EB                  737 	.word LINK 
                           001F06   738 	LINK=.
      001F06 07                     739 	.byte 7 
      001F07 52 4F 57 3E 42 55 46   740 	.ascii "ROW>BUF"
      001F0E                        741 ROW2BUF: 
      001F0E CD 1A B6         [ 4]  742 	call PSTO 
      001F11 A6 80            [ 1]  743 	ld a,#BLOCK_SIZE
      001F13 88               [ 1]  744 	push a 
                                    745  ; block align flash address	
      001F14 B4 33            [ 1]  746 	and a,PTR8
      001F16 B7 33            [ 1]  747 	ld PTR8,a
      001F18 90 AE 06 80      [ 2]  748 	ldw y,#ROWBUFF 
      001F1C 92 C6 32         [ 4]  749 1$: ld a,[PTR16]
      001F1F 90 F7            [ 1]  750 	ld (y),a
      001F21 CD 1B F7         [ 4]  751 	call INC_PTR16
      001F24 90 5C            [ 2]  752 	incw y 
      001F26 0A 01            [ 1]  753 	dec (1,sp)
      001F28 26 F2            [ 1]  754 	jrne 1$ 
      001F2A 84               [ 1]  755 	pop a 
      001F2B 81               [ 4]  756 	ret 
                                    757 
                                    758 
                                    759 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    760 ; copy ROWBUFF to flash 
                                    761 ; BUF>ROW ( ar -- )
                                    762 ; ar row address
                                    763 ;---------------------------
      001F2C 1F 06                  764 	.word LINK 
                           001F2E   765 	LINK=.
      001F2E 07                     766 	.byte 7 
      001F2F 42 55 46 3E 52 4F 57   767 	.ascii "BUF>ROW" 
      001F36                        768 BUF2ROW:
      001F36 CD 05 DA         [ 4]  769 	call TBUF ; ( ar Ab -- )
      001F39 CD 04 EF         [ 4]  770 	call SWAPP ; ( ab ar -- )
      001F3C CD 1D 5A         [ 4]  771 	call WR_ROW 
      001F3F 81               [ 4]  772 	ret 
                                    773 
                                    774 ;---------------------------------
                                    775 ; how many byte free in that row 
                                    776 ; RFREE ( a -- n )
                                    777 ; a is least byte of target address
                                    778 ;----------------------------------
      001F40 1F 2E                  779 	.word LINK 
                           001F42   780 	LINK=.
      001F42 05                     781 	.byte 5 
      001F43 52 46 52 45 45         782 	.ascii "RFREE"
      001F48                        783 RFREE:
      001F48 E6 01            [ 1]  784 	ld a,(1,x)
      001F4A A4 7F            [ 1]  785 	and a,#BLOCK_SIZE-1 
      001F4C B7 24            [ 1]  786 	ld YTEMP,a 
      001F4E A6 80            [ 1]  787 	ld a,#BLOCK_SIZE 
      001F50 B0 24            [ 1]  788 	sub a,YTEMP 
      001F52 90 5F            [ 1]  789 	clrw y 
      001F54 90 97            [ 1]  790 	ld yl,a
      001F56 FF               [ 2]  791 	ldw (x),y 
      001F57 81               [ 4]  792 	ret 
                                    793 
                                    794 ;---------------------------------
                                    795 ; write u bytes to flash/EEPROM 
                                    796 ; constraint to row limit 
                                    797 ; RAM>EE ( af a u1 -- u2 )
                                    798 ; af flash address 
                                    799 ; a ram address 
                                    800 ; u bytes count
                                    801 ; return u2 bytes written  
                                    802 ;-------------------------------
      001F58 1F 42                  803 	.word LINK 
                           001F5A   804 	LINK=. 
      001F5A 06                     805 	.byte 6
      001F5B 52 41 4D 3E 45 45      806 	.ascii "RAM>EE"
                                    807 	
      001F61                        808 RAM2EE:
                                    809 ; PICK af
      001F61 CD 03 B0         [ 4]  810 	call DOLIT 
      001F64 00 02                  811 	.word 2 
      001F66 CD 0A 99         [ 4]  812 	call PICK  ; { -- af a u1 af }
      001F69 CD 04 DF         [ 4]  813 	call DUPP 
      001F6C CD 1F 0E         [ 4]  814 	call ROW2BUF ; copy in ROWBUFF  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001F6F CD 04 DF         [ 4]  815 	call DUPP 
      001F72 CD 04 A8         [ 4]  816 	call TOR 
      001F75 CD 03 B0         [ 4]  817 	call DOLIT 
      001F78 00 7F                  818 	.word BLOCK_SIZE-1
      001F7A CD 05 2B         [ 4]  819 	call ANDD 
      001F7D CD 03 B0         [ 4]  820 	call DOLIT 
      001F80 06 80                  821 	.word ROWBUFF 
      001F82 CD 06 DA         [ 4]  822 	call PLUS  ; ( -- af a u1 ab )
      001F85 CD 04 EF         [ 4]  823 	call SWAPP ;  ( -- af a ab u1 )
      001F88 CD 04 89         [ 4]  824 	call RFROM  ; ( -- af a ab u1 af )
      001F8B CD 1F 48         [ 4]  825 	call RFREE  ; ( -- af a ab u1 n )
      001F8E CD 07 F5         [ 4]  826 	call MIN    
      001F91 CD 04 DF         [ 4]  827 	call DUPP 
      001F94 CD 04 A8         [ 4]  828 	call TOR  
      001F97 CD 0B 7B         [ 4]  829 	call CMOVE  ; copy RAM to RAM from a to ab 
      001F9A CD 1F 36         [ 4]  830 	call BUF2ROW ; ( af --  ) write ROWBUFF to flash 
      001F9D CD 04 89         [ 4]  831 	call RFROM  ; how many written 
      001FA0 81               [ 4]  832 	ret 
                                    833 
                                    834 
                                    835 ;--------------------------
                                    836 ; move new colon definition to FLASH 
                                    837 ; using WR-ROW for efficiency 
                                    838 ; preserving bytes already used 
                                    839 ; in the current block. 
                                    840 ; At this point the compiler as completed
                                    841 ; in RAM and pointers CP and CNTXT are updated.
                                    842 ; CNTXT point to nfa of new word and  
                                    843 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    844 ; 
                                    845 ; FMOVE ( -- cp+ )
                                    846 ; 
                                    847 ;--------------------------
      001FA1 1F 5A                  848 	.word LINK 
                           001FA3   849 	LINK=.
      001FA3 05                     850 	.byte 5 
      001FA4 46 4D 4F 56 45         851 	.ascii "FMOVE" 
      001FA9                        852 FMOVE:
      001FA9 CD 05 EC         [ 4]  853 	call TFLASH 
      001FAC CD 04 38         [ 4]  854 	CALL AT 
      001FAF CD 03 E3         [ 4]  855 	CALL QBRAN 
      001FB2 20 21                  856 	.word no_move  
      001FB4 CD 06 3B         [ 4]  857 	call CPP  
      001FB7 CD 04 38         [ 4]  858 	call AT  
      001FBA CD 04 DF         [ 4]  859 	call DUPP ; ( cp cp -- )
      001FBD CD 06 1F         [ 4]  860 	call CNTXT 
      001FC0 CD 04 38         [ 4]  861 	call AT 
      001FC3 CD 03 B0         [ 4]  862 	call DOLIT 
      001FC6 00 02                  863 	.word 2 
      001FC8 CD 07 53         [ 4]  864 	call SUBB ; ( cp cp la -- ) \ new word link address in RAM  
      001FCB CD 04 DF         [ 4]  865 	call DUPP 
      001FCE CD 04 A8         [ 4]  866 	call TOR    ; ( cp cp la R: la ) 
      001FD1                        867 FMOVE2:
      001FD1 CD 0B 2E         [ 4]  868 	call HERE  ; ( cp cp la vp  R: la )
      001FD4 CD 04 9C         [ 4]  869 	call RAT   ; ( cp cp la vp la R: la )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001FD7 CD 07 53         [ 4]  870 	call SUBB ; ( cp cp la wl R: la  ) \ wl is bytes to copy 
      001FDA                        871 next_row:
      001FDA CD 04 DF         [ 4]  872 	call DUPP 
      001FDD CD 04 A8         [ 4]  873 	call TOR  ; ( cp cp la wl -- ) R: a wl
      001FE0 CD 1F 61         [ 4]  874 	call RAM2EE ; ( cp cp la wl -- cp u2 ) u2 is byte written to FLASH 
      001FE3 CD 04 DF         [ 4]  875 	call DUPP 
      001FE6 CD 04 A8         [ 4]  876 	call TOR
      001FE9 CD 06 DA         [ 4]  877 	call PLUS  ; ( cp+ ) 
      001FEC CD 04 DF         [ 4]  878 	call DUPP 
      001FEF CD 04 89         [ 4]  879 	call RFROM  ; ( cp+ cp+ u2  R: a wl ) 
      001FF2 CD 04 89         [ 4]  880 	call RFROM  ; ( cp+ cp+ u2 wl R: a ) 
      001FF5 CD 05 09         [ 4]  881 	call OVER   ; ( cp+ cp+ u2 wl u2 -- )
      001FF8 CD 07 53         [ 4]  882 	call SUBB  ; ( cp+ cp+ u2 wl- R: a )
      001FFB CD 04 DF         [ 4]  883 	call DUPP 
      001FFE CD 03 E3         [ 4]  884 	call QBRAN
      002001 20 1A                  885 	.word fmove_done 
      002003 CD 04 EF         [ 4]  886 	call SWAPP  ; ( cp+ cp+ wl- u2 R: a )
      002006 CD 04 89         [ 4]  887 	call RFROM ; ( cp+ cp+ wl- u2 a -- ) 
      002009 CD 06 DA         [ 4]  888 	call PLUS  ; ( cp+ cp+ wl- a+ )
      00200C CD 04 DF         [ 4]  889 	call DUPP 
      00200F CD 04 A8         [ 4]  890 	call TOR   ; ( cp+ cp+ wl- a+ ) R: a+
      002012 CD 04 EF         [ 4]  891 	call SWAPP ; ( cp+ cp+ a+ wl- )
      002015 CD 03 FA         [ 4]  892 	call BRAN
      002018 1F DA                  893 	.word next_row  
      00201A                        894 fmove_done:	
      00201A CD 04 89         [ 4]  895 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00201D 1C 00 0A         [ 2]  896 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      002020 81               [ 4]  897  	ret  
      002021                        898 no_move:
      002021 CD 0A 40         [ 4]  899 	call ZERO
      002024 81               [ 4]  900 	ret 
                                    901 
                                    902 ;------------------------------------------
                                    903 ; adjust pointers after **FMOVE** operetion.
                                    904 ; UPDAT-PTR ( cp+ -- )
                                    905 ; cp+ is new CP position after FMOVE 
                                    906 ;-------------------------------------------
      002025 1F A3                  907 	.word LINK 
                           002027   908 	LINK=.
      002027 09                     909 	.byte 9
      002028 55 50 44 41 54 2D 50   910 	.ascii "UPDAT-PTR" 
             54 52
      002031                        911 UPDATPTR:
                                    912 ;reset VP to previous position  
      002031 CD 1B 15         [ 4]  913 	call EEPVP 
      002034 CD 04 38         [ 4]  914 	call AT
      002037 CD 06 2D         [ 4]  915 	call VPP 
      00203A CD 04 21         [ 4]  916 	call STORE
                                    917 ;update CONTEXT and LAST 
      00203D CD 1B 03         [ 4]  918 	call EEPCP 
      002040 CD 04 38         [ 4]  919 	call AT
      002043 CD 03 B0         [ 4]  920 	call DOLIT 
      002046 00 02                  921 	.word 2 
      002048 CD 06 DA         [ 4]  922 	call PLUS 
      00204B CD 04 DF         [ 4]  923 	call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      00204E CD 06 1F         [ 4]  924 	call CNTXT 
      002051 CD 04 21         [ 4]  925 	call STORE
      002054 CD 06 4B         [ 4]  926 	call LAST
      002057 CD 04 21         [ 4]  927 	call STORE 
      00205A CD 1B 2B         [ 4]  928 	call UPDATLAST 
                                    929 ;update CP 
      00205D CD 06 3B         [ 4]  930 	call CPP 
      002060 CD 04 21         [ 4]  931 	call STORE
      002063 CD 1B 54         [ 4]  932 	call UPDATCP 
      002066 81               [ 4]  933 	ret 
                                    934 
                                    935 ;-----------------------------
                                    936 ; move interrupt sub-routine
                                    937 ; in flash memory
                                    938 ;----------------------------- 
      002067 20 27                  939 	.word LINK 
                           002069   940 	LINK=. 
      002069 06                     941 	.byte 6
      00206A 49 46 4D 4F 56 45      942 	.ascii "IFMOVE" 
      002070                        943 IFMOVE:
      002070 CD 05 EC         [ 4]  944 	call TFLASH 
      002073 CD 04 38         [ 4]  945 	CALL AT 
      002076 CD 03 E3         [ 4]  946 	CALL QBRAN 
      002079 20 21                  947 	.word no_move 
      00207B CD 06 3B         [ 4]  948 	call CPP 
      00207E CD 04 38         [ 4]  949 	call AT 
      002081 CD 04 DF         [ 4]  950 	call DUPP ; ( cp cp -- )
      002084 CD 1B 15         [ 4]  951 	call EEPVP 
      002087 CD 04 38         [ 4]  952 	call AT  ; ( cp cp a )
      00208A CD 04 A8         [ 4]  953 	call TOR 
      00208D CD 04 9C         [ 4]  954 	call RAT ; ( cp cp a -- ) R: a 
      002090 CC 1F D1         [ 2]  955 	jp FMOVE2 
                                    956 
                                    957 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4438 
                                   4439 ;===============================================================
                                   4440 
                           002069  4441 LASTN =	LINK   ;last name defined
                                   4442 
                                   4443 ; application code begin here
      002100                       4444 	.bndry 128 ; align on flash block  
      002100                       4445 app_space: 
                                   4446 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000776 R   |   6 ABOR1      0012C9 R
  6 ABOR2      0012E0 R   |   6 ABORQ      0012C1 R   |   6 ABORT      0012B2 R
  6 ABRTQ      00159D R   |   6 ABSS       00076D R   |   6 ACCEP      001248 R
  6 ACCP1      001251 R   |   6 ACCP2      001277 R   |   6 ACCP3      00127A R
  6 ACCP4      00127C R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     000679 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001588 R   |   6 AGAIN      0014DE R
  6 AHEAD      00153B R   |   6 ALLOT      0013F1 R   |   6 ANDD       00052B R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         000438 R   |   6 ATEXE      000B64 R
  6 AUTORUN    000127 R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |     B19200  =  000003 
    B230400 =  000007     |     B2400   =  000000     |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |     B57600  =  000005 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      0011F0 R
  6 BASE       00059C R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      001433 R   |   6 BDIGS      000C4B R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00500F 
  6 BEGIN      0014C0 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001088 R   |   6 BKSP       0011C0 R   |     BKSPP   =  000008 
  6 BLANK      000A33 R   |     BLOCK_SI=  000080     |   6 BRAN       0003FA R
    BTW     =  000001     |   6 BUF2ROW    001F36 R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CARRY   =  000028 
  6 CAT        000456 R   |   6 CCOMMA     001415 R   |     CELLL   =  000002 
  6 CELLM      0009B8 R   |   6 CELLP      0009A9 R   |   6 CELLS      0009C7 R
    CFG_GCR =  007F60     |   6 CHAR1      000E78 R   |   6 CHAR2      000E7B R
  6 CHKIVEC    001E53 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000B83 R
  6 CMOV2      000B9B R   |   6 CMOVE      000B7B R   |     CNTDWN  =  000030 
  6 CNTXT      00061F R   |   6 COLD       001995 R   |   6 COLD1      001995 R
  6 COLON      001736 R   |   6 COMMA      0013FE R   |   6 COMPI      001443 R
    COMPO   =  000040     |   6 CONSTANT   0017E0 R   |   6 COUNT      000B17 R
  6 CPP        00063B R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EA6 R   |   6 CREAT      00177C R   |     CRR     =  00000D 
  6 CSTOR      000445 R   |   6 DAT        000AF7 R   |     DATSTK  =  000680 
  6 DDROP      0006BA R   |   6 DDUP       0006C5 R   |   6 DECIM      000CFB R
  6 DEPTH      000A82 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000D40 R   |   6 DI         0000C2 R   |   6 DIG        000C74 R
  6 DIGIT      000C0F R   |   6 DIGS       000C85 R   |   6 DIGS1      000C85 R
  6 DIGS2      000C92 R   |   6 DIGTQ      000D0F R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        000734 R   |   6 DNEGA      000717 R
  6 DOCONST    00180A R   |   6 DOLIT      0003B0 R   |   6 DONXT      0003C4 R
  6 DOSTR      000EBC R   |   6 DOT        000F41 R   |   6 DOT1       000F57 R
  6 DOTI1      00192C R   |   6 DOTID      001916 R   |   6 DOTO1      001355 R
  6 DOTOK      00133B R   |   6 DOTPR      00106A R   |   6 DOTQ       0015B7 R
  6 DOTQP      000EE5 R   |   6 DOTR       000EF3 R   |   6 DOTS       0018B8 R
  6 DOTS1      0018C3 R   |   6 DOTS2      0018CC R   |   6 DOVAR      00058C R
  6 DROP       0004D5 R   |   6 DSTOR      000AD1 R   |   6 DUMP       00186E R
  6 DUMP1      001885 R   |   6 DUMP3      0018A7 R   |   6 DUMPP      00183D R
  6 DUPP       0004DF R   |   6 EDIGS      000CB0 R   |   6 EEPCP      001B03 R
  6 EEPLAST    001ADE R   |   6 EEPROM     001ACA R   |     EEPROM_B=  004000 
    EEPROM_E=  0043FF     |     EEPROM_S=  000400     |   6 EEPRUN     001AF1 R
  6 EEPVP      001B15 R   |   6 EE_CCOMM   001EF0 R   |   6 EE_COMMA   001ED3 R
  6 EE_CSTOR   001C4A R   |   6 EE_STORE   001C92 R   |   6 EI         0000BB R
  6 ELSEE      001516 R   |   6 EMIT       00039A R   |   6 ENEPER     001A44 R
  6 EQ1        000791 R   |   6 EQUAL      00077B R   |   6 ERASE      000BDD R
    ERR     =  00001B     |   6 EVAL       00137E R   |   6 EVAL1      00137E R
  6 EVAL2      00139A R   |   6 EXE1       000B72 R   |   6 EXECU      00040A R
  6 EXIT       00041A R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C37 R   |     FHSE    =  F42400 
    FHSE_K  =  003E80     |     FHSE_M  =  000010     |   6 FILL       000BAA R
  6 FILL1      000BC7 R   |   6 FILL2      000BD0 R   |   6 FIND       00111C R
  6 FIND1      00113A R   |   6 FIND2      001168 R   |   6 FIND3      001174 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND4      001188 R   |   6 FIND5      001195 R   |   6 FIND6      001179 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
  6 FMOVE      001FA9 R   |   6 FMOVE2     001FD1 R   |   6 FOR        001493 R
  6 FORGET     000154 R   |   6 FORGET1    000183 R   |   6 FORGET2    000209 R
  6 FORGET4    000212 R   |   6 FORGET6    0001CB R   |   6 FREEVAR    00021F R
  6 FREEVAR4   000255 R   |     GPIO_BAS=  005000     |     GPIO_SIZ=  000005 
  6 HERE       000B2E R   |   6 HEX        000CE6 R   |   6 HI         001968 R
  6 HLD        00060C R   |   6 HOLD       000C5B R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001747 R   |   6 IFETCH     0014B1 R   |   6 IFF        0014EE R
  6 IFMOVE     002070 R   |     IMEDD   =  000080     |   6 IMMED      001759 R
  6 INCH       00038E R   |   6 INC_PTR1   001BF7 R   |   6 INITOFS    00170F R
  6 INN        0005BA R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      00131D R
  6 INTER      0012F3 R   |     INT_ADC1=  000016     |     INT_AWU =  000001 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_RES1=  000008 
    INT_RES2=  000009     |     INT_RES3=  000011     |     INT_RES4=  000012 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      0006F4 R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      0016A4 R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       0016F9 R
  6 KEY        000E26 R   |   6 KTAP       00120D R   |   6 KTAP1      001230 R
  6 KTAP2      001233 R   |   6 LAST       00064B R   |   6 LASTN   =  002069 R
  6 LBRAC      00132A R   |     LD1_BIT =  000000     |     LD1_MASK=  000001 
    LD1_PORT=  00500F     |   6 LESS       0007B8 R   |     LF      =  00000A 
  6 LINK    =  002069 R   |   6 LITER      001465 R   |   6 LN2S       001AA0 R
  6 LOG2S      001A8A R   |   6 LSHIFT     0009F2 R   |   6 LSHIFT1    0009FB R
  6 LSHIFT4    000A03 R   |   6 LT1        0007CE R   |     MASKK   =  001F7F 
  6 MAX        0007D8 R   |   6 MAX1       0007EB R   |   6 MIN        0007F5 R
  6 MIN1       000808 R   |     MISCOPT =  004805     |     MISCOPT_=  000004 
    MISCOPT_=  000002     |     MISCOPT_=  000003     |     MISCOPT_=  000000 
    MISCOPT_=  000001     |   6 MMOD1      0008AB R   |   6 MMOD2      0008BF R
  6 MMOD3      0008D6 R   |   6 MMSM1      000852 R   |   6 MMSM2      000866 R
  6 MMSM3      000868 R   |   6 MMSM4      000870 R   |   6 MODD       0008F0 R
  6 MONE       000A59 R   |     MS      =  00002E     |   6 MSEC       0002CA R
  6 MSMOD      00088E R   |   6 MSTA1      000981 R   |   6 MSTAR      00095E R
    NAFR    =  004804     |   6 NAMEQ      0011B5 R   |   6 NAMET      0010C6 R
    NCLKOPT =  004808     |   6 NEGAT      000705 R   |   6 NEX1       0003D1 R
  6 NEXT       0014A2 R   |     NHSECNT =  00480A     |     NMISCOPT=  004806 
    NMISCOPT=  FFFFFFFB     |     NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC 
    NMISCOPT=  FFFFFFFF     |     NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPTBL  =  00487F     |   6 NTIB       0005CA R
    NUBC    =  004802     |   6 NUFQ       000E3C R   |   6 NUFQ1      000E55 R
  6 NUMBQ      000D53 R   |   6 NUMQ1      000D87 R   |   6 NUMQ2      000DB8 R
  6 NUMQ3      000DFA R   |   6 NUMQ4      000DFF R   |   6 NUMQ5      000E0E R
  6 NUMQ6      000E11 R   |   6 NonHandl   000000 R   |   6 OFFSET     000670 R
    OFS     =  000005     |   6 ONE        000A4B R   |   6 ONEM       0009E1 R
  6 ONEP       0009D4 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |   6 ORIG       000047 R   |   6 ORR        00053F R
  6 OUTPUT     00039F R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000509 R
  6 OVERT      001672 R   |     PA      =  000000     |   6 PACKS      000BEE R
  6 PAD        000B3F R   |   6 PAREN      001079 R   |   6 PARS       000F72 R
  6 PARS1      000F9D R   |   6 PARS2      000FC8 R   |   6 PARS3      000FCB R
  6 PARS4      000FD4 R   |   6 PARS5      000FF7 R   |   6 PARS6      00100C R
  6 PARS7      00101B R   |   6 PARS8      00102A R   |   6 PARSE      00103B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  6 PAUSE      0002DA R   |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001850 R   |   6 PDUM2      001861 R
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |   6 PICK       000A99 R
  6 PII        001A03 R   |     PIN0    =  000000     |     PIN1    =  000001 
    PIN2    =  000002     |     PIN3    =  000003     |     PIN4    =  000004 
    PIN5    =  000005     |     PIN6    =  000006     |     PIN7    =  000007 
  6 PLUS       0006DA R   |   6 PNAM1      001627 R   |   6 PRESE      0013A9 R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FB R   |   6 PSTO       001AB6 R   |   6 PSTOR      000AB0 R
    PTR16   =  000032     |     PTR8    =  000033     |   6 QBRAN      0003E3 R
  6 QDUP       000689 R   |   6 QDUP1      000693 R   |   6 QKEY       00037C R
  6 QSTAC      001361 R   |   6 QUERY      00128D R   |   6 QUEST      000F64 R
  6 QUIT       0013C6 R   |   6 QUIT1      0013CE R   |   6 QUIT2      0013D1 R
  6 RAM2EE     001F61 R   |     RAMBASE =  000000     |   6 RAMLAST    00065E R
    RAM_BASE=  000000     |     RAM_END =  0007FF     |     RAM_SIZE=  000800 
  6 RANDOM     000278 R   |   6 RAT        00049C R   |   6 RBRAC      0016E6 R
  6 REPEA      00156B R   |   6 RFREE      001F48 R   |   6 RFROM      000489 R
    ROP     =  004800     |   6 ROT        00069A R   |   6 ROW2BUF    001F0E R
    ROWBUFF =  000680     |     RP0     =  00002C     |   6 RPAT       000466 R
    RPP     =  0007FF     |   6 RPSTO      000473 R   |   6 RSHIFT     000A0E R
  6 RSHIFT1    000A17 R   |   6 RSHIFT4    000A1F R   |     RST_SR  =  0050B3 
  6 RT12_2     001A73 R   |   6 SAME1      0010E4 R   |   6 SAME2      00110D R
  6 SAMEQ      0010DC R   |   6 SCOM1      00165C R   |   6 SCOM2      00165F R
  6 SCOMP      00163E R   |   6 SEED       00025F R   |     SEEDX   =  000035 
    SEEDY   =  000037     |   6 SEMIS      001682 R   |   6 SETISP     0000CE R
  6 SET_RAML   0017C9 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000C9A R   |   6 SIGN1      000CAA R   |   6 SLASH      0008FA R
  6 SLMOD      0008DE R   |   6 SNAME      0015F1 R   |     SP0     =  00002A 
  6 SPACE      000E5E R   |   6 SPACS      000E6D R   |   6 SPAT       0004BF R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  000680 
    SPSAVE  =  000001     |   6 SPSTO      0004CC R   |   6 SQRT10     001A5C R
  6 SQRT2      001A1A R   |   6 SQRT3      001A31 R   |   6 SSMOD      00098A R
    SSP     =  000001     |     STACK   =  0007FF     |   6 STAR       000953 R
  6 STASL      00099B R   |   6 STOD       00073C R   |   6 STORE      000421 R
  6 STR        000CC8 R   |   6 STRCQ      001473 R   |   6 STRQ       0015AA R
  6 STRQP      000EDB R   |   6 SUBB       000753 R   |   6 SWAPP      0004EF R
    SWIM_CSR=  007F80     |   6 TAP        0011F7 R   |   6 TBOOT      001989 R
  6 TBUF       0005DA R   |     TBUFFBAS=  000680     |   6 TCHAR      000A6A R
  6 TEMP       0005AB R   |   6 TEVAL      0005FD R   |   6 TFLASH     0005EC R
  6 THENN      001503 R   |   6 TIB        000B50 R   |     TIBB    =  000700 
    TIBBASE =  000700     |     TIC     =  000027     |   6 TICK       0013DD R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   00030A R   |   6 TIMER      0002F4 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0018E6 R
  6 TNAM3      001904 R   |   6 TNAM4      00190A R   |   6 TNAME      0018E3 R
  6 TOFLASH    00032F R   |   6 TOKEN      0010B8 R   |   6 TOR        0004A8 R
  6 TORAM      00036F R   |     TRUEE   =  00FFFF     |   6 TWOSL      000A26 R
  6 TYPE1      000E8D R   |   6 TYPE2      000E99 R   |   6 TYPES      000E88 R
  6 Timer4Ha   000005 R   |     UART2_BR=  005242     |     UART2_BR=  005243 
    UART2_CR=  005244     |     UART2_CR=  005245     |     UART2_CR=  005246 
    UART2_CR=  005247     |     UART2_CR=  005248     |     UART2_CR=  004249 
    UART2_DR=  005241     |     UART2_GT=  00524A     |     UART2_PO=  00500F 
    UART2_PS=  00524B     |     UART2_RX=  000006     |     UART2_SR=  005240 
    UART2_TX=  000005     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000F2E R
  6 UDOTR      000F0E R   |   6 UEND       000045 R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      0007B0 R   |   6 ULESS      00079A R   |   6 UMMOD      000830 R
  6 UMSTA      000909 R   |   6 UNIQ1      0015E8 R   |   6 UNIQU      0015C9 R
  6 UNTIL      0014CB R   |     UOFFSET =  00001C     |   6 UPDATCP    001B54 R
  6 UPDATLAS   001B2B R   |   6 UPDATPTR   002031 R   |   6 UPDATRUN   001B43 R
  6 UPDATVP    001B6B R   |   6 UPL1       000580 R   |   6 UPLUS      000569 R
    UPP     =  000006     |     URLAST  =  000020     |     UTFLASH =  00001E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      001820 R
  6 UTYP2      00182F R   |   6 UTYPE      00181B R   |     UVP     =  000016 
  6 UZERO      00002B R   |   6 VARIA      001796 R   |     VAR_BASE=  000080 
    VAR_TOP =  0007BF     |     VER     =  000003     |   6 VPP        00062D R
    VSIZE   =  000006     |     WANT_DEB=  000000     |     WANT_MAT=  000001 
    WANT_SEE=  000000     |   6 WHILE      001551 R   |   6 WITHI      000815 R
  6 WORDD      0010A4 R   |   6 WORDS      001940 R   |   6 WORS1      001946 R
  6 WORS2      001962 R   |   6 WR_BYTE    001C0E R   |   6 WR_ROW     001D5A R
  6 WR_WORD    001C2B R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    X4_FLASH=  00BFFF     |     X4_FLASH=  004000     |     X6_FLASH=  00FFFF 
    X6_FLASH=  008000     |   6 XORR       000554 R   |     XTEMP   =  000022 
    YTEMP   =  000024     |   6 ZERO       000A40 R   |   6 ZL1        000521 R
  6 ZLESS      000518 R   |   6 app_spac   002100 R   |   6 block_er   001CC4 R
  6 clear_ra   000019 R   |   6 clock_in   000062 R   |   6 copy_buf   001D17 R
  6 copy_buf   001D35 R   |   6 copy_pro   001D35 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001CE0 R   |   6 fmove_do   00201A R   |   6 lock       001BE2 R
  6 main       000016 R   |   6 next_row   001FDA R   |   6 no_move    002021 R
  6 pristine   001DAA R   |   6 proceed_   001CE3 R   |   6 reboot     000321 R
  6 reset_ve   001E0E R   |   6 row_eras   001CA7 R   |   6 row_eras   001CF4 R
  6 row_eras   001D17 R   |   6 set_opti   001D84 R   |   6 set_vect   001EA2 R
  6 uart2_in   000074 R   |   6 unlock     001BBE R   |   6 unlock_e   001B80 R
  6 unlock_f   001B9F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2100   flags    0

