ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "../inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 ÂµC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                        	.include "../inc/stm8s_disco.inc"
                                        ;-------------------------------------
                                        ; STM8S-Discovery card 
                                        ;-------------------------------------
                                        
                                        
                                 
                                 
                                 
                                        
                                        
                                        ; LD1 LED 
                                 
                                 
                                 
                                        
                                        ; BEEP
                                 
                                 
                                 
                                        
                                        ; TS1 
                                        ; use TIMER 1 3 channels 
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacÃ© le numÃ©ro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           0007FF    90 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    91 DATSTK  =	0x680	;data stack  empty
                           000680    92 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    93 TIBBASE =       0X700  ; transaction input buffer addr.
                                     94 
                                     95 
                                     96 
                                     97 ;; Memory allocation
                                     98 
                           000006    99 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   100 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   101 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   102 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   103 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   104 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   105 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    106 
                                    107 ; user variables constants 
                           000006   108 UBASE = UPP       ; numeric base 
                           000008   109 UTMP = UBASE+2    ; temporary storage
                           00000A   110 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   111 UCTIB = UINN+2    ; tib count 
                           00000E   112 UTIB = UCTIB+2    ; tib address 
                           000010   113 UINTER = UTIB+2   ; interpreter vector 
                           000012   114 UHLD = UINTER+2   ; hold 
                           000014   115 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   116 UVP = UCNTXT+2    ; variable pointer 
                           000018   117 UCP = UVP+2      ; code pointer
                           00001A   118 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   119 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   120 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   121 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    122 
                                    123 ;******  System Variables  ******
                           000022   124 XTEMP	=	URLAST +2;address called by CREATE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000024   125 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   126 PROD1 = XTEMP	;space for UM*
                           000024   127 PROD2 = PROD1+2
                           000026   128 PROD3 = PROD2+2
                           000028   129 CARRY = PROD3+2
                           00002A   130 SP0	= CARRY+2	;initial data stack pointer
                           00002C   131 RP0	= SP0+2		;initial return stack pointer
                           00002E   132 MS    =   RP0+2         ; millisecond counter 
                           000030   133 CNTDWN =  MS+2          ; count down timer 
                           000032   134 PTR16 = CNTDWN+2         ; 24 bits farptr 
                           000033   135 PTR8 = PTR16+1           ; least byte of farptr 
                           000035   136 SEEDX = PTR8+2          ; PRNG seed X 
                           000037   137 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    138 
                                    139 ; EEPROM persistant system variables in EEPROM   
                           004000   140 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   141 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   142 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   143 APP_VP = APP_CP+2  ; free data space pointer 
                                    144 
                                    145 
                                    146 ;***********************************************
                                    147 ;; Version control
                                    148 
                           000003   149 VER     =     3         ;major release version
                           000000   150 EXT     =     0         ;minor extension
                                    151 
                                    152 ;; Constants
                                    153 
                           00FFFF   154 TRUEE   =     0xFFFF      ;true flag
                                    155 
                           000040   156 COMPO   =     0x40     ;lexicon compile only bit
                           000080   157 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   158 MASKK   =     0x1F7F  ;lexicon bit mask
                                    159 
                           000002   160 CELLL   =     2       ;size of a cell
                           00000A   161 BASEE   =     10      ;default radix
                           000008   162 BKSPP   =     8       ;back space
                           00000A   163 LF      =     10      ;line feed
                           00000D   164 CRR     =     13      ;carriage return
                           00001B   165 ERR     =     27      ;error escape
                           000027   166 TIC     =     39      ;tick
                           0000CD   167 CALLL   =     0xCD     ;CALL opcodes
                           000080   168 IRET_CODE =   0x80    ; IRET opcode 
                                    169 
                                    170         .macro _ledon
                                    171         bres PD_ODR,#LD1_BIT
                                    172         .endm
                                    173 
                                    174         .macro _ledoff
                                    175         bset PD_ODR,#LD1_BIT
                                    176         .endm
                                    177 
                                    178 
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .area DATA (ABS)
      000000                        181         .org RAMBASE 
                                    182 ;**********************************************************
                                    183 
                                    184 ;**********************************************************
                                    185         .area SSEG (ABS) ; STACK
      001700                        186         .org 0x1700
      001700                        187         .ds 256 
                                    188 ; space for DATSTK,TIB and STACK         
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area HOME ; vectors table
                                    193 ;**********************************************************
      000000 82 00 00 1A            194 	int main	        ; reset
                           000001   195 DEBUG=1
                           000001   196 .if DEBUG
      000004 82 00 00 00            197         int TrapHandler ;
                           000000   198 .else
                                    199 	int NonHandledInterrupt	; trap
                                    200 .endif 
      000008 82 00 00 04            201 	int NonHandledInterrupt	; irq0 TLI
      00000C 82 00 00 04            202 	int NonHandledInterrupt	; irq1 AWU 
      000010 82 00 00 04            203 	int NonHandledInterrupt	; irq2 CLK 
      000014 82 00 00 04            204 	int NonHandledInterrupt	; irq3 EXTI0
      000018 82 00 00 04            205 	int NonHandledInterrupt	; irq4 EXTI1 
      00001C 82 00 00 04            206 	int NonHandledInterrupt	; irq5 EXTI2 
      000020 82 00 00 04            207 	int NonHandledInterrupt	; irq6 EXTI3
      000024 82 00 00 04            208 	int NonHandledInterrupt	; irq7 EXTI4 
      000028 82 00 00 04            209 	int NonHandledInterrupt	; irq8 reserved
      00002C 82 00 00 04            210 	int NonHandledInterrupt	; irq9 reserved 
      000030 82 00 00 04            211 	int NonHandledInterrupt	; irq10 SPI
      000034 82 00 00 04            212 	int NonHandledInterrupt	; irq11 TIM1 update/overflow/underflow/trigger/break
      000038 82 00 00 04            213 	int NonHandledInterrupt	; irq12 TIM1 capture/compare
      00003C 82 00 00 04            214 	int NonHandledInterrupt	; irq13 TIM2 update/overflow
      000040 82 00 00 04            215 	int NonHandledInterrupt	; irq14 TIM2 capture/compare 
      000044 82 00 00 04            216 	int NonHandledInterrupt	; irq15 TIM3 update/overflow
      000048 82 00 00 04            217 	int NonHandledInterrupt	; irq16 TIM3 capture/compare 
      00004C 82 00 00 04            218 	int NonHandledInterrupt	; irq17 reserved
      000050 82 00 00 04            219 	int NonHandledInterrupt	; irq18 reserved 
      000054 82 00 00 04            220 	int NonHandledInterrupt	; irq19 I2C interrupt
      000058 82 00 00 04            221 	int NonHandledInterrupt	; irq20 UART2 tx complete  
      00005C 82 00 00 04            222 	int NonHandledInterrupt	; irq21 UART2 rx buffer full
      000060 82 00 00 04            223 	int NonHandledInterrupt	; irq22 ADC1 end of conversion/analog watchdog interrupt
      000064 82 00 00 09            224 	int Timer4Handler	; irq23 TIM4 update/overflow
      000068 82 00 00 04            225 	int NonHandledInterrupt	; irq24 FLASH EOP/WR_PG_DIS 
      00006C 82 00 00 04            226 	int NonHandledInterrupt	; irq25 resserved
      000070 82 00 00 04            227 	int NonHandledInterrupt	; irq26 reserved 
      000074 82 00 00 04            228 	int NonHandledInterrupt	; irq27 reserved
      000078 82 00 00 04            229 	int NonHandledInterrupt	; irq28 reserved 
      00007C 82 00 00 04            230 	int NonHandledInterrupt	; irq29 reserved 
                                    231 
                                    232 ;**********************************************************
                                    233         .area CODE
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 
                           000001   236 .if DEBUG 
      000000                        237 TrapHandler:
      000000 CD 18 BC         [ 4]  238         call DOTS 
      000003 80               [11]  239         iret 
                                    240 .endif 
                                    241 
                                    242 
                                    243 ; non handled interrupt reset MCU
      000004                        244 NonHandledInterrupt:
      000004 A6 80            [ 1]  245         ld a, #0x80
      000006 C7 50 D1         [ 1]  246         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    247 	;iret
                                    248 
                                    249 ; used for milliseconds counter 
                                    250 ; MS is 16 bits counter 
      000009                        251 Timer4Handler:
      000009 72 5F 53 42      [ 1]  252 	clr TIM4_SR 
      00000D BE 2E            [ 2]  253         ldw x,MS 
      00000F 5C               [ 2]  254         incw x 
      000010 BF 2E            [ 2]  255         ldw MS,x
      000012 BE 30            [ 2]  256         ldw x,CNTDWN 
      000014 27 03            [ 1]  257         jreq 1$
      000016 5A               [ 2]  258         decw x 
      000017 BF 30            [ 2]  259         ldw CNTDWN,x 
      000019                        260 1$:         
      000019 80               [11]  261         iret 
                                    262 
                                    263 
                                    264 ;; Main entry points and COLD start data
      00001A                        265 main:
                                    266 ; clear all RAM
      00001A AE 00 00         [ 2]  267 	ldw X,#RAMBASE
      00001D                        268 clear_ram0:
      00001D 7F               [ 1]  269 	clr (X)
      00001E 5C               [ 2]  270 	incw X
      00001F A3 07 FF         [ 2]  271 	cpw X,#RAM_END
      000022 23 F9            [ 2]  272 	jrule clear_ram0
      000024 AE 07 FF         [ 2]  273         ldw x,#RPP
      000027 94               [ 1]  274         ldw sp,x
                                    275 ; set SEEDX and SEEDY to 1 
      000028 3C 36            [ 1]  276         inc SEEDX+1 
      00002A 3C 38            [ 1]  277         inc SEEDY+1          
      00002C CC 00 4B         [ 2]  278 	jp ORIG
                                    279 
                                    280 ; COLD initialize these variables.
      00002F                        281 UZERO:
      00002F 00 0A                  282         .word      BASEE   ;BASE
      000031 00 00                  283         .word      0       ;tmp
      000033 00 00                  284         .word      0       ;>IN
      000035 00 00                  285         .word      0       ;#TIB
      000037 07 00                  286         .word      TIBB    ;TIB
      000039 12 F7                  287         .word      INTER   ;'EVAL
      00003B 00 00                  288         .word      0       ;HLD
      00003D 20 67                  289         .word      LASTN  ;CNTXT pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00003F 00 80                  290         .word      VAR_BASE   ;variables free space pointer 
      000041 21 00                  291         .word      app_space ; FLASH free space pointer 
      000043 20 67                  292         .word      LASTN   ;LAST
      000045 00 00                  293         .word      0        ; OFFSET 
      000047 00 00                  294         .word      0       ; TFLASH
                                    295 ;       .word      0       ; URLAST   
      000049 00 00                  296 UEND:   .word      0
                                    297 
      00004B                        298 ORIG:   
                                    299 ; initialize SP
      00004B AE 07 FF         [ 2]  300         LDW     X,#STACK  ;initialize return stack
      00004E 94               [ 1]  301         LDW     SP,X
      00004F BF 2C            [ 2]  302         LDW     RP0,X
      000051 AE 06 80         [ 2]  303         LDW     X,#DATSTK ;initialize data stack
      000054 BF 2A            [ 2]  304         LDW     SP0,X
                                    305 ; initialize PD_0 as output to control LED2
                                    306 ; added by Picatout 
      000056 72 10 50 12      [ 1]  307         bset PD_CR1,#LD1_BIT
      00005A 72 10 50 13      [ 1]  308         bset PD_CR2,#LD1_BIT
      00005E 72 10 50 11      [ 1]  309         bset PD_DDR,#LD1_BIT
      000062                        310         _ledoff
      000062 72 10 50 0F      [ 1]    1         bset PD_ODR,#LD1_BIT
                                    311 ; initialize clock to HSE
                                    312 ; no divisor 16Mhz 
                                    313 ; Added by Picatout 
      000066                        314 clock_init:
      000066 72 5F 50 C6      [ 1]  315         clr CLK_CKDIVR
      00006A 72 12 50 C5      [ 1]  316 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00006E A6 B4            [ 1]  317 	ld a,#CLK_SWR_HSE
      000070 C7 50 C4         [ 1]  318 	ld CLK_SWR,a
      000073 C1 50 C3         [ 1]  319 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  320 	jrne 1$
                                    321         
                                    322 ; initialize UART1, 115200 8N1
      000078                        323 uart2_init:
      000078 72 16 50 C7      [ 1]  324 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    325 	; configure tx pin
      00007C 72 1A 50 11      [ 1]  326 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      000080 72 1A 50 12      [ 1]  327 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000084 72 1A 50 13      [ 1]  328 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    329 	; baud rate 115200 Fmaster=8Mhz  
      000088 35 0B 52 43      [ 1]  330 	mov UART2_BRR2,#0x0b ; must be loaded first
      00008C 35 08 52 42      [ 1]  331 	mov UART2_BRR1,#0x8
      000090 35 0C 52 45      [ 1]  332 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    333 ; initialize timer4, used for millisecond interrupt  
      000094 35 07 53 45      [ 1]  334 	mov TIM4_PSCR,#7 ; prescale 128  
      000098 35 7D 53 46      [ 1]  335 	mov TIM4_ARR,#125 ; set for 1msec.
      00009C 35 05 53 40      [ 1]  336 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000A0 72 10 53 41      [ 1]  337 	bset TIM4_IER,#TIM4_IER_UIE 
                                    338 ; set TIM4 interrupt priority to highest
      0000A4 A6 3F            [ 1]  339         ld a,#~(IPR_MASK<<6)
      0000A6 C4 7F 75         [ 1]  340         and a,ITC_SPR6
      0000A9 AA C0            [ 1]  341         or a,#(IPR3<<6)
      0000AB C7 7F 75         [ 1]  342         ld ITC_SPR6,a 
      0000AE 9A               [ 1]  343         rim
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000AF CC 19 99         [ 2]  344         jp  COLD   ;default=MN1
                                    345 
                                    346 
                                    347 ;; place MCU in sleep mode with
                                    348 ;; halt opcode 
                                    349 ;; BYE ( -- )
      0000B2 00 00                  350         .word 0
                           0000B4   351         LINK=.
      0000B4 03                     352         .byte 3 
      0000B5 42 59 45               353         .ascii "BYE"
      0000B8                        354 BYE: 
      0000B8 8E               [10]  355         halt 
      0000B9 81               [ 4]  356         ret 
                                    357 
                                    358 ; Enable interrupts 
                                    359 ; EI ( -- )
      0000BA 00 B4                  360         .word LINK 
                           0000BC   361         LINK=.
      0000BC 02                     362         .byte 2
      0000BD 45 49                  363         .ascii "EI"
      0000BF                        364 EI:
      0000BF 9A               [ 1]  365         rim 
      0000C0 81               [ 4]  366         ret 
                                    367 
                                    368 ; Disable interrupts
                                    369 ; DI ( -- )
      0000C1 00 BC                  370         .word LINK 
                           0000C3   371         LINK=.
      0000C3 02                     372         .byte 2 
      0000C4 44 49                  373         .ascii "DI"
      0000C6                        374 DI:
      0000C6 9B               [ 1]  375         sim 
      0000C7 81               [ 4]  376         ret 
                                    377 
                                    378 ; set interrupt priority level 
                                    379 ; SET-ISP ( n1 n2 -- )
                                    380 ; n1 level {1..3}
                                    381 ; n2 vector {0..29}
      0000C8 00 C3                  382         .word LINK 
                           0000CA   383         LINK=.
      0000CA 07                     384         .byte 7 
      0000CB 53 45 54 2D 49 53 50   385         .ascii "SET-ISP"
      0000D2                        386 SETISP:
      0000D2 90 93            [ 1]  387         ldw y,x 
      0000D4 90 FE            [ 2]  388         ldw y,(y)
      0000D6 A6 04            [ 1]  389         ld a,#4 ; 4 slot per register 
                                    390 ;  quotient select register, remainder select slot in register.        
      0000D8 90 62            [ 2]  391         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000DA A4 03            [ 1]  392         and a,#3 
      0000DC 48               [ 1]  393         sll a ; 2*SLOT  lshift 
      0000DD 72 A9 7F 70      [ 2]  394         addw y,#ITC_SPR1 
      0000E1 FF               [ 2]  395         ldw (x),y  ; ( level reg -- )
      0000E2 90 5F            [ 1]  396         clrw y 
      0000E4 90 97            [ 1]  397         ld yl,a 
      0000E6 1D 00 02         [ 2]  398         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000E9 FF               [ 2]  399         ldw (x),y  ; ( level reg lshift -- )
      0000EA 90 93            [ 1]  400         ldw y,x 
      0000EC 90 EE 02         [ 2]  401         ldw y,(2,y) 
      0000EF 90 F6            [ 1]  402         ld a,(y)   ; reg_value
      0000F1 1D 00 02         [ 2]  403         subw x,#CELLL 
      0000F4 FF               [ 2]  404         ldw (x),y ; ( level reg lshift rval -- )
      0000F5 CD 05 0D         [ 4]  405         call OVER ; ( level reg lshift rval lshift -- )
      0000F8 CD 03 B4         [ 4]  406         call DOLIT 
      0000FB 00 03                  407         .word 3
      0000FD CD 04 F3         [ 4]  408         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000100 CD 09 F6         [ 4]  409         call LSHIFT ; creat slot mask 
      000103 CD 06 F8         [ 4]  410         call INVER  ; ( level reg lshift rval mask )
      000106 CD 05 2F         [ 4]  411         call ANDD ; ( level reg lshift slot_masked )
      000109 CD 04 AC         [ 4]  412         call TOR  ; ( level reg lshift -- R: slot_masked )
      00010C CD 06 9E         [ 4]  413         call ROT  ; ( reg lshift level )
      00010F CD 04 F3         [ 4]  414         call SWAPP ; ( reg level lshift )
      000112 CD 09 F6         [ 4]  415         call LSHIFT  ; ( reg slot_level -- )
      000115 CD 04 8D         [ 4]  416         call RFROM ; ( reg slot_level masked_val )
      000118 CD 05 43         [ 4]  417         call ORR   ; ( reg updated_rval )
      00011B CD 04 F3         [ 4]  418         call SWAPP 
      00011E CD 04 49         [ 4]  419         call CSTOR
                                    420 
                                    421 ; sÃ©lectionne l'application 
                                    422 ; qui dÃ©marre automatique lors 
                                    423 ; d'un COLD start 
      000121 00 CA                  424         .word LINK 
                           000123   425         LINK=.
      000123 07                     426         .byte 7
      000124 41 55 54 4F 52 55 4E   427         .ascii "AUTORUN"
      00012B                        428 AUTORUN:
      00012B CD 10 BC         [ 4]  429         call TOKEN 
      00012E CD 04 E3         [ 4]  430         call DUPP 
      000131 CD 03 E7         [ 4]  431         call QBRAN 
      000134 02 0D                  432         .word FORGET2
      000136 CD 11 B9         [ 4]  433         call NAMEQ
      000139 CD 06 8D         [ 4]  434         call QDUP 
      00013C CD 03 E7         [ 4]  435         call QBRAN 
      00013F 02 0D                  436         .word FORGET2
      000141 CD 04 D9         [ 4]  437         call DROP 
      000144 1D 00 02         [ 2]  438         subw x,#CELLL 
      000147 90 AE 40 02      [ 2]  439         ldw y,#APP_RUN 
      00014B FF               [ 2]  440         ldw (x),y 
      00014C CC 1C 96         [ 2]  441         jp EE_STORE 
                                    442 
                                    443 ;; Reset dictionary pointer before 
                                    444 ;; forgotten word. RAM space and 
                                    445 ;; interrupt vector defined after 
                                    446 ;; must be resetted also.
      00014F 01 23                  447         .word LINK 
                           000151   448         LINK=.
      000151 06                     449         .byte 6
      000152 46 4F 52 47 45 54      450         .ascii "FORGET" 
      000158                        451 FORGET: 
      000158 CD 10 BC         [ 4]  452         call TOKEN
      00015B CD 04 E3         [ 4]  453         call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00015E CD 03 E7         [ 4]  454         call QBRAN 
      000161 02 0D                  455         .word FORGET2
      000163 CD 11 B9         [ 4]  456         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 8D         [ 4]  457         call QDUP 
      000169 CD 03 E7         [ 4]  458         call QBRAN 
      00016C 02 0D                  459         .word FORGET2
                                    460 ; only forget users words 
      00016E CD 04 E3         [ 4]  461         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  462         call DOLIT 
      000174 21 00                  463         .word app_space 
      000176 CD 04 F3         [ 4]  464         call SWAPP 
      000179 CD 07 9E         [ 4]  465         call  ULESS 
      00017C CD 03 E7         [ 4]  466         call QBRAN 
      00017F 01 CF                  467         .word FORGET6 
                                    468 ; ( ca na -- )        
                                    469 ;reset ivec with address >= ca
      000181 CD 04 F3         [ 4]  470         call SWAPP ; ( na ca -- ) 
      000184 CD 1E 57         [ 4]  471         call CHKIVEC ; ( na -- ) 
                                    472 ; start at LAST and link back to na 
                                    473 ; if variable found reset VP at that point.
      000187                        474 FORGET1:
      000187 CD 06 4F         [ 4]  475         call LAST 
      00018A CD 04 3C         [ 4]  476         call AT 
      00018D CD 04 E3         [ 4]  477         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  478         call FREEVAR ; ( -- na last )
      000193 CD 04 E3         [ 4]  479         call DUPP 
      000196 CD 03 B4         [ 4]  480         call DOLIT 
      000199 00 02                  481         .word 2 
      00019B CD 07 57         [ 4]  482         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 3C         [ 4]  483         call AT 
      0001A1 CD 04 E3         [ 4]  484         call DUPP ; ( -- na last a a )
      0001A4 CD 06 23         [ 4]  485         call CNTXT 
      0001A7 CD 04 25         [ 4]  486         call STORE
      0001AA CD 06 4F         [ 4]  487         call LAST  
      0001AD CD 04 25         [ 4]  488         call STORE ; ( --  na last )
      0001B0 CD 05 0D         [ 4]  489         call OVER 
      0001B3 CD 07 7F         [ 4]  490         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  491         call QBRAN 
      0001B9 01 87                  492         .word FORGET1 
                                    493 ; ( na -- )
      0001BB CD 03 B4         [ 4]  494         call DOLIT 
      0001BE 00 02                  495         .word 2 
      0001C0 CD 07 57         [ 4]  496         call SUBB 
      0001C3 CD 06 3F         [ 4]  497         call CPP 
      0001C6 CD 04 25         [ 4]  498         call STORE  
      0001C9 CD 1B 58         [ 4]  499         call UPDATCP 
      0001CC CC 1B 2F         [ 2]  500         jp UPDATLAST 
      0001CF                        501 FORGET6: ; tried to forget a RAM or system word 
                                    502 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  503         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  504         ldw y,SP0 
      0001D5 FF               [ 2]  505         ldw (x),y  
      0001D6 CD 07 9E         [ 4]  506         call ULESS
      0001D9 CD 03 E7         [ 4]  507         call QBRAN 
      0001DC 01 FF                  508         .word PROTECTED 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001DE CD 12 C5         [ 4]  509         call ABORQ 
      0001E1 1D                     510         .byte 29
      0001E2 20 46 6F 72 20 52 41   511         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        512 PROTECTED:
      0001FF CD 12 C5         [ 4]  513         call ABORQ
      000202 0A                     514         .byte 10
      000203 20 50 72 6F 74 65 63   515         .ascii " Protected"
             74 65 64
      00020D                        516 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 C5         [ 4]  517         call ABORQ
      000210 05                     518         .byte 5
      000211 20 77 68 61 74         519         .ascii " what"
      000216                        520 FORGET4:
      000216 CC 04 D9         [ 2]  521         jp DROP 
                                    522 
                                    523 
                                    524 ;---------------------------------
                                    525 ; if na is variable 
                                    526 ; free variable data  
                                    527 ; FREEVAR ( na -- )
                                    528 ;---------------------------------
      000219 01 51                  529         .word LINK 
                           00021B   530         LINK=.
      00021B 07                     531         .byte 7 
      00021C 46 52 45 45 56 41 52   532         .ascii "FREEVAR"
      000223                        533 FREEVAR:
      000223 CD 04 E3         [ 4]  534         call DUPP ; ( na na -- )
      000226 CD 04 5A         [ 4]  535         CALL CAT  ; ( na c -- )
      000229 CD 09 D8         [ 4]  536         call ONEP ;
      00022C CD 06 DE         [ 4]  537         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 D8         [ 4]  538         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 E3         [ 4]  539         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 3C         [ 4]  540         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  541         call DOLIT 
      00023B 05 90                  542         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 7F         [ 4]  543         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  544         call QBRAN 
      000243 02 59                  545         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  546         call DOLIT 
      000248 00 02                  547         .word 2 
      00024A CD 06 DE         [ 4]  548         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 3C         [ 4]  549         call AT 
      000250 CD 06 31         [ 4]  550         call VPP   
      000253 CD 04 25         [ 4]  551         call STORE 
      000256 CC 1B 6F         [ 2]  552         jp UPDATVP 
      000259                        553 FREEVAR4: ; not variable
      000259 CC 04 D9         [ 2]  554         jp  DROP 
                                    555 
                                    556 ;    SEED ( n -- )
                                    557 ; Initialize PRNG seed with n 
      00025C 02 1B                  558         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           00025E   559         LINK=. 
      00025E 04                     560         .byte 4 
      00025F 53 45 45 44            561         .ascii "SEED" 
      000263                        562 SEED:
      000263 90 93            [ 1]  563         ldw y,x 
      000265 1C 00 02         [ 2]  564         addw x,#CELLL
      000268 90 FE            [ 2]  565         ldw y,(y)
      00026A 90 9E            [ 1]  566         ld a,yh 
      00026C B7 35            [ 1]  567         ld SEEDX,a 
      00026E 90 9F            [ 1]  568         ld a,yl 
      000270 B7 37            [ 1]  569         ld SEEDY,a 
      000272 81               [ 4]  570         ret 
                                    571 
                                    572 ;    RANDOM ( u1 -- u2 )
                                    573 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  574         .word LINK 
                           000275   575         LINK=.
      000275 06                     576         .byte 6
      000276 52 41 4E 44 4F 4D      577         .ascii "RANDOM" 
      00027C                        578 RANDOM:
                                    579 ;local variable 
                           000001   580         SPSAVE=1
                           000002   581         VSIZE=2 
      00027C 52 02            [ 2]  582         sub sp,#VSIZE
      00027E 1F 01            [ 2]  583         ldw (SPSAVE,sp),x  
                                    584 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  585         ldw y,x 
      000282 90 FE            [ 2]  586         ldw y,(y)
      000284 90 BF 24         [ 2]  587         ldw YTEMP,y 
      000287 BE 35            [ 2]  588 	ldw x,SEEDX 
      000289 58               [ 2]  589 	sllw x 
      00028A 58               [ 2]  590 	sllw x 
      00028B 58               [ 2]  591 	sllw x 
      00028C 58               [ 2]  592 	sllw x 
      00028D 58               [ 2]  593 	sllw x 
      00028E 9E               [ 1]  594 	ld a,xh 
      00028F B8 35            [ 1]  595 	xor a,SEEDX 
      000291 B7 22            [ 1]  596 	ld XTEMP,a 
      000293 9F               [ 1]  597 	ld a,xl 
      000294 B8 36            [ 1]  598 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  599 	ld XTEMP+1,a 
                                    600 ; SEEDX=SEEDY 
      000298 BE 37            [ 2]  601 	ldw x,SEEDY 
      00029A BF 35            [ 2]  602 	ldw SEEDX,x  
                                    603 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  604 	srlw x 
      00029D 9E               [ 1]  605 	ld a,xh 
      00029E B8 37            [ 1]  606 	xor a,SEEDY 
      0002A0 B7 37            [ 1]  607 	ld SEEDY,a  
      0002A2 9F               [ 1]  608 	ld a,xl 
      0002A3 B8 38            [ 1]  609 	xor a,SEEDY+1 
      0002A5 B7 38            [ 1]  610 	ld SEEDY+1,a 
                                    611 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  612 	ldw x,XTEMP 
      0002A9 54               [ 2]  613 	srlw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002AA 54               [ 2]  614 	srlw x 
      0002AB 54               [ 2]  615 	srlw x 
                                    616 ; x=XTEMP^x 
      0002AC 9E               [ 1]  617 	ld a,xh 
      0002AD B8 22            [ 1]  618 	xor a,XTEMP 
      0002AF 95               [ 1]  619 	ld xh,a 
      0002B0 9F               [ 1]  620 	ld a,xl 
      0002B1 B8 23            [ 1]  621 	xor a,XTEMP+1  
      0002B3 97               [ 1]  622 	ld xl,a 
                                    623 ; SEEDY=x^SEEDY 
      0002B4 B8 38            [ 1]  624 	xor a,SEEDY+1
      0002B6 97               [ 1]  625 	ld xl,a 
      0002B7 9E               [ 1]  626 	ld a,xh 
      0002B8 B8 37            [ 1]  627 	xor a,SEEDY
      0002BA 95               [ 1]  628 	ld xh,a 
      0002BB BF 37            [ 2]  629 	ldw SEEDY,x 
                                    630 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  631 	ldw y,YTEMP  
      0002C0 65               [ 2]  632 	divw x,y 
      0002C1 1E 01            [ 2]  633 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  634         ldw (x),y 
      0002C4 5B 02            [ 2]  635         addw sp,#VSIZE 
      0002C6 81               [ 4]  636 	ret 
                                    637 
                                    638 
                                    639 ;;
                                    640 ;; get millisecond counter 
                                    641 ;; msec ( -- u )
                                    642 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  643         .word LINK  
                           0002C9   644         LINK = . 
      0002C9 04                     645         .byte 4
      0002CA 4D 53 45 43            646         .ascii "MSEC"
      0002CE                        647 MSEC: 
      0002CE 1D 00 02         [ 2]  648         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  649         ldw y,MS 
      0002D4 FF               [ 2]  650         ldw (x),y 
      0002D5 81               [ 4]  651         ret 
                                    652 
                                    653 ; suspend execution for u msec 
                                    654 ;  pause ( u -- )
      0002D6 02 C9                  655         .word LINK 
                           0002D8   656         LINK=.
      0002D8 05                     657         .byte 5 
      0002D9 50 41 55 53 45         658         .ascii "PAUSE"
      0002DE                        659 PAUSE:
      0002DE 90 93            [ 1]  660         ldw y,x
      0002E0 90 FE            [ 2]  661         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  662         addw y,MS 
      0002E6 8F               [10]  663 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  664         cpw y,MS  
      0002EA 26 FA            [ 1]  665         jrne 1$        
      0002EC 1C 00 02         [ 2]  666         addw x,#CELLL 
      0002EF 81               [ 4]  667         ret 
                                    668 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    669 ; initialize count down timer 
                                    670 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  671         .word LINK 
                           0002F2   672         LINK=.
      0002F2 05                     673         .byte 5 
      0002F3 54 49 4D 45 52         674         .ascii "TIMER" 
      0002F8                        675 TIMER:
      0002F8 90 93            [ 1]  676         ldw y,x
      0002FA 90 FE            [ 2]  677         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  678         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  679         addw x,#CELLL 
      000302 81               [ 4]  680         ret 
                                    681 
                                    682 ; check for TIMER exiparition 
                                    683 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  684         .word LINK 
                           000305   685         LINK=. 
      000305 08                     686         .byte 8 
      000306 54 49 4D 45 4F 55 54   687         .ascii "TIMEOUT?"
             3F
      00030E                        688 TIMEOUTQ: 
      00030E 4F               [ 1]  689         clr a
      00030F 1D 00 02         [ 2]  690         subw x,#CELLL 
      000312 90 BE 30         [ 2]  691         ldw y,CNTDWN 
      000315 26 01            [ 1]  692         jrne 1$ 
      000317 43               [ 1]  693         cpl a 
      000318 E7 01            [ 1]  694 1$:     ld (1,x),a 
      00031A F7               [ 1]  695         ld (x),a 
      00031B 81               [ 4]  696         ret         
                                    697 
                                    698 ; reboot MCU 
                                    699 ; REBOOT ( -- )
      00031C 03 05                  700         .word LINK 
                           00031E   701         LINK=. 
      00031E 06                     702         .byte 6 
      00031F 52 45 42 4F 4F 54      703         .ascii "REBOOT"
      000325                        704 reboot:
      000325 CC 00 04         [ 2]  705         jp NonHandledInterrupt
                                    706 
                                    707 ; compile to flash memory 
                                    708 ; TO-FLASH ( -- )
      000328 03 1E                  709         .word LINK 
                           00032A   710         LINK=.
      00032A 08                     711         .byte 8
      00032B 54 4F 2D 46 4C 41 53   712         .ascii "TO-FLASH"
             48
      000333                        713 TOFLASH:
      000333 CD 06 62         [ 4]  714         call RAMLAST 
      000336 CD 04 3C         [ 4]  715         call AT 
      000339 CD 06 8D         [ 4]  716         call QDUP 
      00033C CD 03 E7         [ 4]  717         call QBRAN
      00033F 03 62                  718         .word 1$
      000341 CD 12 C5         [ 4]  719         call ABORQ 
      000344 1D                     720         .byte 29
      000345 20 4E 6F 74 20 77 68   721         .ascii " Not while definitions in RAM"   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  722 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  723         ldw UTFLASH,y
      000369 81               [ 4]  724         ret 
                                    725 
                                    726 ; compile to RAM 
                                    727 ; TO-RAM ( -- )
      00036A 03 2A                  728         .word LINK 
                           00036C   729         LINK=.
      00036C 06                     730         .byte 6 
      00036D 54 4F 2D 52 41 4D      731         .ascii "TO-RAM"
      000373                        732 TORAM:
      000373 90 5F            [ 1]  733         clrw y 
      000375 90 BF 1E         [ 2]  734         ldw UTFLASH,y 
      000378 81               [ 4]  735         ret 
                                    736         
                                    737 
                                    738 ;; Device dependent I/O
                                    739 ;       ?RX     ( -- c T | F )
                                    740 ;         Return input byte and true, or false.
      000379 03 6C                  741         .word      LINK 
                           00037B   742 LINK	= .
      00037B 04                     743         .byte      4
      00037C 3F 4B 45 59            744         .ascii     "?KEY"
      000380                        745 QKEY:
      000380 90 5F            [ 1]  746         CLRW Y 
      000382 72 0B 52 40 0B   [ 2]  747         BTJF UART2_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 41         [ 1]  748         LD    A,UART2_DR   ;get char in A
      00038A 1D 00 02         [ 2]  749 	SUBW	X,#2
      00038D E7 01            [ 1]  750         LD     (1,X),A
      00038F 7F               [ 1]  751 	CLR	(X)
      000390 90 53            [ 2]  752         CPLW     Y
      000392                        753 INCH:
      000392 1D 00 02         [ 2]  754 	SUBW	X,#2
      000395 FF               [ 2]  755         LDW     (X),Y
      000396 81               [ 4]  756         RET
                                    757 
                                    758 ;       TX!     ( c -- )
                                    759 ;       Send character c to  output device.
      000397 03 7B                  760         .word      LINK
                           000399   761 LINK	= .
      000399 04                     762         .byte      4
      00039A 45 4D 49 54            763         .ascii     "EMIT"
      00039E                        764 EMIT:
      00039E E6 01            [ 1]  765         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  766 	ADDW	X,#2
      0003A3 72 0F 52 40 FB   [ 2]  767 OUTPUT: BTJF UART2_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A8 C7 52 41         [ 1]  768         LD    UART2_DR,A   ;send A
      0003AB 81               [ 4]  769         RET
                                    770 
                                    771 ;; The kernel
                                    772 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    773 ;       doLIT   ( -- w )
                                    774 ;       Push an inline literal.
      0003AC 03 99                  775         .word      LINK
                           0003AE   776 LINK	= 	.
      0003AE 45                     777 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         778         .ascii     "DOLIT"
      0003B4                        779 DOLIT:
      0003B4 1D 00 02         [ 2]  780 	SUBW X,#2
      0003B7 16 01            [ 2]  781         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  782         ldw y,(y)
      0003BB FF               [ 2]  783         ldw (x),y
      0003BC 90 85            [ 2]  784         popw y 
      0003BE 90 EC 02         [ 2]  785         jp (2,y)
                                    786 
                                    787 ;       next    ( -- )
                                    788 ;       Code for  single index loop.
      0003C1 03 AE                  789         .word      LINK
                           0003C3   790 LINK	= 	.
      0003C3 44                     791 	.byte      COMPO+4
      0003C4 6E 65 78 74            792         .ascii     "next"
      0003C8                        793 DONXT:
      0003C8 16 03            [ 2]  794 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  795 	DECW Y
      0003CC 2A 07            [ 1]  796 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  797 	POPW Y
      0003D0 5B 02            [ 2]  798         addw sp,#2
      0003D2 90 EC 02         [ 2]  799         JP (2,Y)
      0003D5                        800 NEX1:
      0003D5 17 03            [ 2]  801         LDW (3,SP),Y
      0003D7 90 85            [ 2]  802         POPW Y
      0003D9 90 FE            [ 2]  803 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  804 	JP (Y)
                                    805 
                                    806 ;       ?branch ( f -- )
                                    807 ;       Branch if flag is zero.
      0003DD 03 C3                  808         .word      LINK
                           0003DF   809 LINK	= 	.
      0003DF 47                     810 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   811         .ascii     "?BRANCH"
      0003E7                        812 QBRAN:	
      0003E7 90 93            [ 1]  813         LDW Y,X
      0003E9 1C 00 02         [ 2]  814 	ADDW X,#2
      0003EC 90 FE            [ 2]  815 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  816         JREQ     BRAN
      0003F0 90 85            [ 2]  817 	POPW Y
      0003F2 90 EC 02         [ 2]  818 	JP (2,Y)
                                    819         
                                    820 ;       branch  ( -- )
                                    821 ;       Branch to an inline address.
      0003F5 03 DF                  822         .word      LINK
                           0003F7   823 LINK	= 	.
      0003F7 46                     824 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      825         .ascii     "BRANCH"
      0003FE                        826 BRAN:
      0003FE 90 85            [ 2]  827         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000400 90 FE            [ 2]  828 	LDW Y,(Y)
      000402 90 FC            [ 2]  829         JP     (Y)
                                    830 
                                    831 ;       EXECUTE ( ca -- )
                                    832 ;       Execute  word at ca.
      000404 03 F7                  833         .word      LINK
                           000406   834 LINK	= 	.
      000406 07                     835         .byte       7
      000407 45 58 45 43 55 54 45   836         .ascii     "EXECUTE"
      00040E                        837 EXECU:
      00040E 90 93            [ 1]  838         LDW Y,X
      000410 1C 00 02         [ 2]  839 	ADDW X,#2
      000413 90 FE            [ 2]  840 	LDW  Y,(Y)
      000415 90 FC            [ 2]  841         JP   (Y)
                                    842 
                           000001   843 OPTIMIZE = 1
                           000001   844 .if OPTIMIZE 
                                    845 ; remplacement de CALL EXIT par 
                                    846 ; le opcode de RET.
                                    847 ; Voir modification au code de ";"
                                    848 ;
                                    849 ;       EXIT    ( -- )
                                    850 ;       Terminate a colon definition.
      000417 04 06                  851         .word      LINK
                           000419   852 LINK = .
      000419 04                     853         .byte      4
      00041A 45 58 49 54            854         .ascii     "EXIT"
      00041E                        855 EXIT:
      00041E 90 85            [ 2]  856         POPW Y
      000420 81               [ 4]  857         RET
                                    858 .endif 
                                    859 
                                    860 ;       !       ( w a -- )
                                    861 ;       Pop  data stack to memory.
      000421 04 19                  862         .word      LINK
                           000423   863 LINK = .
      000423 01                     864         .byte      1
      000424 21                     865         .ascii     "!"
      000425                        866 STORE:
      000425 90 93            [ 1]  867         LDW Y,X
      000427 90 FE            [ 2]  868         LDW Y,(Y)    ;Y=a
      000429 90 BF 24         [ 2]  869         LDW YTEMP,Y
      00042C 90 93            [ 1]  870         LDW Y,X
      00042E 90 EE 02         [ 2]  871         LDW Y,(2,Y)
      000431 91 CF 24         [ 5]  872         LDW [YTEMP],Y ;store w at a
      000434 1C 00 04         [ 2]  873         ADDW X,#4 ; DDROP 
      000437 81               [ 4]  874         RET     
                                    875 
                                    876 ;       @       ( a -- w )
                                    877 ;       Push memory location to stack.
      000438 04 23                  878         .word      LINK
                           00043A   879 LINK	= 	.
      00043A 01                     880         .byte    1
      00043B 40                     881         .ascii	"@"
      00043C                        882 AT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00043C 90 93            [ 1]  883         LDW Y,X     ;Y = a
      00043E 90 FE            [ 2]  884         LDW Y,(Y)   ; address 
      000440 90 FE            [ 2]  885         LDW Y,(Y)   ; value 
      000442 FF               [ 2]  886         LDW (X),Y ;w = @Y
      000443 81               [ 4]  887         RET     
                                    888 
                                    889 ;       C!      ( c b -- )
                                    890 ;       Pop  data stack to byte memory.
      000444 04 3A                  891         .word      LINK
                           000446   892 LINK	= .
      000446 02                     893         .byte      2
      000447 43 21                  894         .ascii     "C!"
      000449                        895 CSTOR:
      000449 90 93            [ 1]  896         LDW Y,X
      00044B 90 FE            [ 2]  897 	LDW Y,(Y)    ;Y=b
      00044D E6 03            [ 1]  898         LD A,(3,X)    ;D = c
      00044F 90 F7            [ 1]  899         LD  (Y),A     ;store c at b
      000451 1C 00 04         [ 2]  900 	ADDW X,#4 ; DDROP 
      000454 81               [ 4]  901         RET     
                                    902 
                                    903 ;       C@      ( b -- c )
                                    904 ;       Push byte in memory to  stack.
      000455 04 46                  905         .word      LINK
                           000457   906 LINK	= 	.
      000457 02                     907         .byte      2
      000458 43 40                  908         .ascii     "C@"
      00045A                        909 CAT:
      00045A 90 93            [ 1]  910         LDW Y,X     ;Y=b
      00045C 90 FE            [ 2]  911         LDW Y,(Y)
      00045E 90 F6            [ 1]  912         LD A,(Y)
      000460 E7 01            [ 1]  913         LD (1,X),A
      000462 7F               [ 1]  914         CLR (X)
      000463 81               [ 4]  915         RET     
                                    916 
                                    917 ;       RP@     ( -- a )
                                    918 ;       Push current RP to data stack.
      000464 04 57                  919         .word      LINK
                           000466   920 LINK	= .
      000466 03                     921         .byte      3
      000467 52 50 40               922         .ascii     "RP@"
      00046A                        923 RPAT:
      00046A 90 96            [ 1]  924         LDW Y,SP    ;save return addr
      00046C 1D 00 02         [ 2]  925         SUBW X,#2
      00046F FF               [ 2]  926         LDW (X),Y
      000470 81               [ 4]  927         RET     
                                    928 
                                    929 ;       RP!     ( a -- )
                                    930 ;       Set  return stack pointer.
      000471 04 66                  931         .word      LINK
                           000473   932 LINK	= 	. 
      000473 43                     933 	.byte      COMPO+3
      000474 52 50 21               934         .ascii     "RP!"
      000477                        935 RPSTO:
      000477 90 85            [ 2]  936         POPW Y
      000479 90 BF 24         [ 2]  937         LDW YTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00047C 90 93            [ 1]  938         LDW Y,X
      00047E 90 FE            [ 2]  939         LDW Y,(Y)
      000480 90 94            [ 1]  940         LDW SP,Y
      000482 1C 00 02         [ 2]  941         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000485 92 CC 24         [ 5]  942         JP [YTEMP]
                                    943 
                                    944 ;       R>      ( -- w )
                                    945 ;       Pop return stack to data stack.
      000488 04 73                  946         .word      LINK
                           00048A   947 LINK	= 	. 
      00048A 42                     948 	.byte      COMPO+2
      00048B 52 3E                  949         .ascii     "R>"
      00048D                        950 RFROM:
      00048D 90 85            [ 2]  951         POPW Y    ;save return addr
      00048F 90 BF 24         [ 2]  952         LDW YTEMP,Y
      000492 90 85            [ 2]  953         POPW Y
      000494 1D 00 02         [ 2]  954         SUBW X,#2
      000497 FF               [ 2]  955         LDW (X),Y
      000498 92 CC 24         [ 5]  956         JP [YTEMP]
                                    957 
                                    958 ;       R@      ( -- w )
                                    959 ;       Copy top of return stack to stack.
      00049B 04 8A                  960         .word      LINK
                           00049D   961 LINK	= 	. 
      00049D 02                     962         .byte      2
      00049E 52 40                  963         .ascii     "R@"
      0004A0                        964 RAT:
      0004A0 16 03            [ 2]  965         ldw y,(3,sp)
      0004A2 1D 00 02         [ 2]  966         subw x,#CELLL 
      0004A5 FF               [ 2]  967         ldw (x),y 
      0004A6 81               [ 4]  968         ret 
                                    969 
                                    970 ;       >R      ( w -- )
                                    971 ;       Push data stack to return stack.
      0004A7 04 9D                  972         .word      LINK
                           0004A9   973 LINK	= 	. 
      0004A9 42                     974 	.byte      COMPO+2
      0004AA 3E 52                  975         .ascii     ">R"
      0004AC                        976 TOR:
      0004AC 90 85            [ 2]  977         POPW Y    ;save return addr
      0004AE 90 BF 24         [ 2]  978         LDW YTEMP,Y
      0004B1 90 93            [ 1]  979         LDW Y,X
      0004B3 90 FE            [ 2]  980         LDW Y,(Y)
      0004B5 90 89            [ 2]  981         PUSHW Y    ;restore return addr
      0004B7 1C 00 02         [ 2]  982         ADDW X,#2
      0004BA 92 CC 24         [ 5]  983         JP [YTEMP]
                                    984 
                                    985 ;       SP@     ( -- a )
                                    986 ;       Push current stack pointer.
      0004BD 04 A9                  987         .word      LINK
                           0004BF   988 LINK	= 	. 
      0004BF 03                     989         .byte      3
      0004C0 53 50 40               990         .ascii     "SP@"
      0004C3                        991 SPAT:
      0004C3 90 93            [ 1]  992 	LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C5 1D 00 02         [ 2]  993         SUBW X,#2
      0004C8 FF               [ 2]  994 	LDW (X),Y
      0004C9 81               [ 4]  995         RET     
                                    996 
                                    997 ;       SP!     ( a -- )
                                    998 ;       Set  data stack pointer.
      0004CA 04 BF                  999         .word      LINK
                           0004CC  1000 LINK	= 	. 
      0004CC 03                    1001         .byte      3
      0004CD 53 50 21              1002         .ascii     "SP!"
      0004D0                       1003 SPSTO:
      0004D0 FE               [ 2] 1004         LDW     X,(X)     ;X = a
      0004D1 81               [ 4] 1005         RET     
                                   1006 
                                   1007 ;       DROP    ( w -- )
                                   1008 ;       Discard top stack item.
      0004D2 04 CC                 1009         .word      LINK
                           0004D4  1010 LINK	= 	. 
      0004D4 04                    1011         .byte      4
      0004D5 44 52 4F 50           1012         .ascii     "DROP"
      0004D9                       1013 DROP:
      0004D9 1C 00 02         [ 2] 1014         ADDW X,#2     
      0004DC 81               [ 4] 1015         RET     
                                   1016 
                                   1017 ;       DUP     ( w -- w w )
                                   1018 ;       Duplicate  top stack item.
      0004DD 04 D4                 1019         .word      LINK
                           0004DF  1020 LINK	= 	. 
      0004DF 03                    1021         .byte      3
      0004E0 44 55 50              1022         .ascii     "DUP"
      0004E3                       1023 DUPP:
      0004E3 90 93            [ 1] 1024 	LDW Y,X
      0004E5 1D 00 02         [ 2] 1025         SUBW X,#2
      0004E8 90 FE            [ 2] 1026 	LDW Y,(Y)
      0004EA FF               [ 2] 1027 	LDW (X),Y
      0004EB 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1031 ;       Exchange top two stack items.
      0004EC 04 DF                 1032         .word      LINK
                           0004EE  1033 LINK	= 	. 
      0004EE 04                    1034         .byte      4
      0004EF 53 57 41 50           1035         .ascii     "SWAP"
      0004F3                       1036 SWAPP:
      0004F3 90 93            [ 1] 1037         LDW Y,X
      0004F5 90 FE            [ 2] 1038         LDW Y,(Y)
      0004F7 90 BF 24         [ 2] 1039         LDW YTEMP,Y
      0004FA 90 93            [ 1] 1040         LDW Y,X
      0004FC 90 EE 02         [ 2] 1041         LDW Y,(2,Y)
      0004FF FF               [ 2] 1042         LDW (X),Y
      000500 90 BE 24         [ 2] 1043         LDW Y,YTEMP
      000503 EF 02            [ 2] 1044         LDW (2,X),Y
      000505 81               [ 4] 1045         RET     
                                   1046 
                                   1047 ;       OVER    ( w1 w2 -- w1 w2 w1 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1048 ;       Copy second stack item to top.
      000506 04 EE                 1049         .word      LINK
                           000508  1050 LINK	= . 
      000508 04                    1051         .byte      4
      000509 4F 56 45 52           1052         .ascii     "OVER"
      00050D                       1053 OVER:
      00050D 1D 00 02         [ 2] 1054         SUBW X,#2
      000510 90 93            [ 1] 1055         LDW Y,X
      000512 90 EE 04         [ 2] 1056         LDW Y,(4,Y)
      000515 FF               [ 2] 1057         LDW (X),Y
      000516 81               [ 4] 1058         RET     
                                   1059 
                                   1060 ;       0<      ( n -- t )
                                   1061 ;       Return true if n is negative.
      000517 05 08                 1062         .word      LINK
                           000519  1063 LINK	= . 
      000519 02                    1064         .byte      2
      00051A 30 3C                 1065         .ascii     "0<"
      00051C                       1066 ZLESS:
      00051C A6 FF            [ 1] 1067         LD A,#0xFF
      00051E 90 93            [ 1] 1068         LDW Y,X
      000520 90 FE            [ 2] 1069         LDW Y,(Y)
      000522 2B 01            [ 1] 1070         JRMI     ZL1
      000524 4F               [ 1] 1071         CLR A   ;false
      000525 F7               [ 1] 1072 ZL1:    LD     (X),A
      000526 E7 01            [ 1] 1073         LD (1,X),A
      000528 81               [ 4] 1074 	RET     
                                   1075 
                                   1076 ;       AND     ( w w -- w )
                                   1077 ;       Bitwise AND.
      000529 05 19                 1078         .word      LINK
                           00052B  1079 LINK	= . 
      00052B 03                    1080         .byte      3
      00052C 41 4E 44              1081         .ascii     "AND"
      00052F                       1082 ANDD:
      00052F F6               [ 1] 1083         LD  A,(X)    ;D=w
      000530 E4 02            [ 1] 1084         AND A,(2,X)
      000532 E7 02            [ 1] 1085         LD (2,X),A
      000534 E6 01            [ 1] 1086         LD A,(1,X)
      000536 E4 03            [ 1] 1087         AND A,(3,X)
      000538 E7 03            [ 1] 1088         LD (3,X),A
      00053A 1C 00 02         [ 2] 1089         ADDW X,#2
      00053D 81               [ 4] 1090         RET
                                   1091 
                                   1092 ;       OR      ( w w -- w )
                                   1093 ;       Bitwise inclusive OR.
      00053E 05 2B                 1094         .word      LINK
                           000540  1095 LINK = . 
      000540 02                    1096         .byte      2
      000541 4F 52                 1097         .ascii     "OR"
      000543                       1098 ORR:
      000543 F6               [ 1] 1099         LD A,(X)    ;D=w
      000544 EA 02            [ 1] 1100         OR A,(2,X)
      000546 E7 02            [ 1] 1101         LD (2,X),A
      000548 E6 01            [ 1] 1102         LD A,(1,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00054A EA 03            [ 1] 1103         OR A,(3,X)
      00054C E7 03            [ 1] 1104         LD (3,X),A
      00054E 1C 00 02         [ 2] 1105         ADDW X,#2
      000551 81               [ 4] 1106         RET
                                   1107 
                                   1108 ;       XOR     ( w w -- w )
                                   1109 ;       Bitwise exclusive OR.
      000552 05 40                 1110         .word      LINK
                           000554  1111 LINK	= . 
      000554 03                    1112         .byte      3
      000555 58 4F 52              1113         .ascii     "XOR"
      000558                       1114 XORR:
      000558 F6               [ 1] 1115         LD A,(X)    ;D=w
      000559 E8 02            [ 1] 1116         XOR A,(2,X)
      00055B E7 02            [ 1] 1117         LD (2,X),A
      00055D E6 01            [ 1] 1118         LD A,(1,X)
      00055F E8 03            [ 1] 1119         XOR A,(3,X)
      000561 E7 03            [ 1] 1120         LD (3,X),A
      000563 1C 00 02         [ 2] 1121         ADDW X,#2
      000566 81               [ 4] 1122         RET
                                   1123 
                                   1124 ;       UM+     ( u u -- udsum )
                                   1125 ;       Add two unsigned single
                                   1126 ;       and return a double sum.
      000567 05 54                 1127         .word      LINK
                           000569  1128 LINK	= . 
      000569 03                    1129         .byte      3
      00056A 55 4D 2B              1130         .ascii     "UM+"
      00056D                       1131 UPLUS:
      00056D A6 01            [ 1] 1132         LD A,#1
      00056F 90 93            [ 1] 1133         LDW Y,X
      000571 90 EE 02         [ 2] 1134         LDW Y,(2,Y)
      000574 90 BF 24         [ 2] 1135         LDW YTEMP,Y
      000577 90 93            [ 1] 1136         LDW Y,X
      000579 90 FE            [ 2] 1137         LDW Y,(Y)
      00057B 72 B9 00 24      [ 2] 1138         ADDW Y,YTEMP
      00057F EF 02            [ 2] 1139         LDW (2,X),Y
      000581 25 01            [ 1] 1140         JRC     UPL1
      000583 4F               [ 1] 1141         CLR A
      000584 E7 01            [ 1] 1142 UPL1:   LD     (1,X),A
      000586 7F               [ 1] 1143         CLR (X)
      000587 81               [ 4] 1144         RET
                                   1145 
                                   1146 ;; System and user variables
                                   1147 
                                   1148 ;       doVAR   ( -- a )
                                   1149 ;       Code for VARIABLE and CREATE.
      000588 05 69                 1150         .word      LINK
                           00058A  1151 LINK	= . 
      00058A 45                    1152 	.byte      COMPO+5
      00058B 44 4F 56 41 52        1153         .ascii     "DOVAR"
      000590                       1154 DOVAR:
      000590 1D 00 02         [ 2] 1155 	SUBW X,#2
      000593 90 85            [ 2] 1156         POPW Y    ;get return addr (pfa)
      000595 90 FE            [ 2] 1157         LDW Y,(Y) ; indirect address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000597 FF               [ 2] 1158         LDW (X),Y    ;push on stack
      000598 81               [ 4] 1159         RET     ;go to RET of EXEC
                                   1160 
                                   1161 ;       BASE    ( -- a )
                                   1162 ;       Radix base for numeric I/O.
      000599 05 8A                 1163         .word      LINK        
                           00059B  1164 LINK = . 
      00059B 04                    1165         .byte      4
      00059C 42 41 53 45           1166         .ascii     "BASE"
      0005A0                       1167 BASE:
      0005A0 90 AE 00 06      [ 2] 1168 	LDW Y,#UBASE 
      0005A4 1D 00 02         [ 2] 1169 	SUBW X,#2
      0005A7 FF               [ 2] 1170         LDW (X),Y
      0005A8 81               [ 4] 1171         RET
                                   1172 
                                   1173 ;       tmp     ( -- a )
                                   1174 ;       A temporary storage.
      0005A9 05 9B                 1175         .word      LINK
                                   1176         
                           0005AB  1177 LINK = . 
      0005AB 03                    1178 	.byte      3
      0005AC 54 4D 50              1179         .ascii     "TMP"
      0005AF                       1180 TEMP:
      0005AF 90 AE 00 08      [ 2] 1181 	LDW Y,#UTMP
      0005B3 1D 00 02         [ 2] 1182 	SUBW X,#2
      0005B6 FF               [ 2] 1183         LDW (X),Y
      0005B7 81               [ 4] 1184         RET
                                   1185 
                                   1186 ;       >IN     ( -- a )
                                   1187 ;        Hold parsing pointer.
      0005B8 05 AB                 1188         .word      LINK
                           0005BA  1189 LINK = . 
      0005BA 03                    1190         .byte      3
      0005BB 3E 49 4E              1191         .ascii    ">IN"
      0005BE                       1192 INN:
      0005BE 90 AE 00 0A      [ 2] 1193 	LDW Y,#UINN 
      0005C2 1D 00 02         [ 2] 1194 	SUBW X,#2
      0005C5 FF               [ 2] 1195         LDW (X),Y
      0005C6 81               [ 4] 1196         RET
                                   1197 
                                   1198 ;       #TIB    ( -- a )
                                   1199 ;       Count in terminal input buffer.
      0005C7 05 BA                 1200         .word      LINK
                           0005C9  1201 LINK = . 
      0005C9 04                    1202         .byte      4
      0005CA 23 54 49 42           1203         .ascii     "#TIB"
      0005CE                       1204 NTIB:
      0005CE 90 AE 00 0C      [ 2] 1205 	LDW Y,#UCTIB 
      0005D2 1D 00 02         [ 2] 1206 	SUBW X,#2
      0005D5 FF               [ 2] 1207         LDW (X),Y
      0005D6 81               [ 4] 1208         RET
                                   1209 
                                   1210 ;       TBUF ( -- a )
                                   1211 ;       address of 128 bytes transaction buffer 
      0005D7 05 C9                 1212         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                           0005D9  1213         LINK=.
      0005D9 04                    1214         .byte 4 
      0005DA 54 42 55 46           1215         .ascii "TBUF"
      0005DE                       1216 TBUF:
      0005DE 90 AE 06 80      [ 2] 1217         ldw y,#ROWBUFF
      0005E2 1D 00 02         [ 2] 1218         subw x,#CELLL
      0005E5 FF               [ 2] 1219         ldw (x),y 
      0005E6 81               [ 4] 1220         ret 
                                   1221 
                                   1222 ; systeme variable 
                                   1223 ; compilation destination 
                                   1224 ; TFLASH ( -- A )
      0005E7 05 D9                 1225         .word LINK 
                           0005E9  1226         LINK=.
      0005E9 06                    1227         .byte 6 
      0005EA 54 46 4C 41 53 48     1228         .ascii "TFLASH"         
      0005F0                       1229 TFLASH:
      0005F0 1D 00 02         [ 2] 1230         subw x,#CELLL 
      0005F3 90 AE 00 1E      [ 2] 1231         ldw y,#UTFLASH
      0005F7 FF               [ 2] 1232         ldw (x),y 
      0005F8 81               [ 4] 1233         ret 
                                   1234 
                                   1235 ;       "EVAL   ( -- a )
                                   1236 ;       Execution vector of EVAL.
      0005F9 05 E9                 1237         .word      LINK
                           0005FB  1238 LINK = . 
      0005FB 05                    1239         .byte      5
      0005FC 27 45 56 41 4C        1240         .ascii     "'EVAL"
      000601                       1241 TEVAL:
      000601 90 AE 00 10      [ 2] 1242 	LDW Y,#UINTER 
      000605 1D 00 02         [ 2] 1243 	SUBW X,#2
      000608 FF               [ 2] 1244         LDW (X),Y
      000609 81               [ 4] 1245         RET
                                   1246 
                                   1247 ;       HLD     ( -- a )
                                   1248 ;       Hold a pointer of output string.
      00060A 05 FB                 1249         .word      LINK
                           00060C  1250 LINK = . 
      00060C 03                    1251         .byte      3
      00060D 48 4C 44              1252         .ascii     "HLD"
      000610                       1253 HLD:
      000610 90 AE 00 12      [ 2] 1254 	LDW Y,#UHLD 
      000614 1D 00 02         [ 2] 1255 	SUBW X,#2
      000617 FF               [ 2] 1256         LDW (X),Y
      000618 81               [ 4] 1257         RET
                                   1258 
                                   1259 ;       CONTEXT ( -- a )
                                   1260 ;       Start vocabulary search.
      000619 06 0C                 1261         .word      LINK
                           00061B  1262 LINK = . 
      00061B 07                    1263         .byte      7
      00061C 43 4F 4E 54 45 58 54  1264         .ascii     "CONTEXT"
      000623                       1265 CNTXT:
      000623 90 AE 00 14      [ 2] 1266 	LDW Y,#UCNTXT
      000627 1D 00 02         [ 2] 1267 	SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00062A FF               [ 2] 1268         LDW (X),Y
      00062B 81               [ 4] 1269         RET
                                   1270 
                                   1271 ;       VP      ( -- a )
                                   1272 ;       Point to top of variables
      00062C 06 1B                 1273         .word      LINK
                           00062E  1274 LINK = . 
      00062E 02                    1275         .byte      2
      00062F 56 50                 1276         .ascii     "VP"
      000631                       1277 VPP:
      000631 90 AE 00 16      [ 2] 1278 	LDW Y,#UVP 
      000635 1D 00 02         [ 2] 1279 	SUBW X,#2
      000638 FF               [ 2] 1280         LDW (X),Y
      000639 81               [ 4] 1281         RET
                                   1282 
                                   1283 ;       CP    ( -- a )
                                   1284 ;       Pointer to top of FLASH 
      00063A 06 2E                 1285         .word LINK 
                           00063C  1286         LINK=.
      00063C 02                    1287         .byte 2 
      00063D 43 50                 1288         .ascii "CP"
      00063F                       1289 CPP: 
      00063F 90 AE 00 18      [ 2] 1290         ldw y,#UCP 
      000643 1D 00 02         [ 2] 1291         subw x,#CELLL 
      000646 FF               [ 2] 1292         ldw (x),y 
      000647 81               [ 4] 1293         ret                
                                   1294 
                                   1295 ;       LAST    ( -- a )
                                   1296 ;       Point to last name in dictionary.
      000648 06 3C                 1297         .word      LINK
                           00064A  1298 LINK = . 
      00064A 04                    1299         .byte      4
      00064B 4C 41 53 54           1300         .ascii     "LAST"
      00064F                       1301 LAST:
      00064F 90 AE 00 1A      [ 2] 1302 	LDW Y,#ULAST 
      000653 1D 00 02         [ 2] 1303 	SUBW X,#2
      000656 FF               [ 2] 1304         LDW (X),Y
      000657 81               [ 4] 1305         RET
                                   1306 
                                   1307 ; address of system variable URLAST 
                                   1308 ;       RAMLAST ( -- a )
                                   1309 ; RAM dictionary context 
      000658 06 4A                 1310         .word LINK 
                           00065A  1311         LINK=. 
      00065A 07                    1312         .byte 7  
      00065B 52 41 4D 4C 41 53 54  1313         .ascii "RAMLAST" 
      000662                       1314 RAMLAST: 
      000662 90 AE 00 20      [ 2] 1315         ldw y,#URLAST 
      000666 1D 00 02         [ 2] 1316         subw x,#CELLL 
      000669 FF               [ 2] 1317         ldw (x),y 
      00066A 81               [ 4] 1318         ret 
                                   1319 
                                   1320 ; OFFSET ( -- a )
                                   1321 ; address of system variable OFFSET 
      00066B 06 5A                 1322         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           00066D  1323         LINK=.
      00066D 06                    1324         .byte 6
      00066E 4F 46 46 53 45 54     1325         .ascii "OFFSET" 
      000674                       1326 OFFSET: 
      000674 1D 00 02         [ 2] 1327         subw x,#CELLL
      000677 90 AE 00 1C      [ 2] 1328         ldw y,#UOFFSET 
      00067B FF               [ 2] 1329         ldw (x),y 
      00067C 81               [ 4] 1330         ret 
                                   1331 
                                   1332 ; adjust jump address adding OFFSET
                                   1333 ; ADR-ADJ ( a -- a+offset )
      00067D                       1334 ADRADJ: 
      00067D CD 06 74         [ 4] 1335         call OFFSET 
      000680 CD 04 3C         [ 4] 1336         call AT 
      000683 CC 06 DE         [ 2] 1337         jp PLUS 
                                   1338 
                                   1339 
                                   1340 ;; Common functions
                                   1341 
                                   1342 ;       ?DUP    ( w -- w w | 0 )
                                   1343 ;       Dup tos if its is not zero.
      000686 06 6D                 1344         .word      LINK
                           000688  1345 LINK = . 
      000688 04                    1346         .byte      4
      000689 3F 44 55 50           1347         .ascii     "?DUP"
      00068D                       1348 QDUP:
      00068D 90 93            [ 1] 1349         LDW Y,X
      00068F 90 FE            [ 2] 1350 	LDW Y,(Y)
      000691 27 04            [ 1] 1351         JREQ     QDUP1
      000693 1D 00 02         [ 2] 1352 	SUBW X,#2
      000696 FF               [ 2] 1353         LDW (X),Y
      000697 81               [ 4] 1354 QDUP1:  RET
                                   1355 
                                   1356 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1357 ;       Rot 3rd item to top.
      000698 06 88                 1358         .word      LINK
                           00069A  1359 LINK = . 
      00069A 03                    1360         .byte      3
      00069B 52 4F 54              1361         .ascii     "ROT"
      00069E                       1362 ROT:
      00069E 90 93            [ 1] 1363         ldw y,x 
      0006A0 90 FE            [ 2] 1364         ldw y,(y)
      0006A2 90 89            [ 2] 1365         pushw y 
      0006A4 90 93            [ 1] 1366         ldw y,x 
      0006A6 90 EE 04         [ 2] 1367         ldw y,(4,y)
      0006A9 FF               [ 2] 1368         ldw (x),y 
      0006AA 90 93            [ 1] 1369         ldw y,x 
      0006AC 90 EE 02         [ 2] 1370         ldw y,(2,y)
      0006AF EF 04            [ 2] 1371         ldw (4,x),y 
      0006B1 90 85            [ 2] 1372         popw y 
      0006B3 EF 02            [ 2] 1373         ldw (2,x),y
      0006B5 81               [ 4] 1374         ret 
                                   1375 
                                   1376 ;       2DROP   ( w w -- )
                                   1377 ;       Discard two items on stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006B6 06 9A                 1378         .word      LINK
                           0006B8  1379 LINK = . 
      0006B8 05                    1380         .byte      5
      0006B9 32 44 52 4F 50        1381         .ascii     "2DROP"
      0006BE                       1382 DDROP:
      0006BE 1C 00 04         [ 2] 1383         ADDW X,#4
      0006C1 81               [ 4] 1384         RET
                                   1385 
                                   1386 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1387 ;       Duplicate top two items.
      0006C2 06 B8                 1388         .word      LINK
                           0006C4  1389 LINK = . 
      0006C4 04                    1390         .byte      4
      0006C5 32 44 55 50           1391         .ascii     "2DUP"
      0006C9                       1392 DDUP:
      0006C9 1D 00 04         [ 2] 1393         SUBW X,#4
      0006CC 90 93            [ 1] 1394         LDW Y,X
      0006CE 90 EE 06         [ 2] 1395         LDW Y,(6,Y)
      0006D1 EF 02            [ 2] 1396         LDW (2,X),Y
      0006D3 90 93            [ 1] 1397         LDW Y,X
      0006D5 90 EE 04         [ 2] 1398         LDW Y,(4,Y)
      0006D8 FF               [ 2] 1399         LDW (X),Y
      0006D9 81               [ 4] 1400         RET
                                   1401 
                                   1402 ;       +       ( w w -- sum )
                                   1403 ;       Add top two items.
      0006DA 06 C4                 1404         .word      LINK
                           0006DC  1405 LINK = . 
      0006DC 01                    1406         .byte      1
      0006DD 2B                    1407         .ascii     "+"
      0006DE                       1408 PLUS:
      0006DE 90 93            [ 1] 1409         LDW Y,X
      0006E0 90 FE            [ 2] 1410         LDW Y,(Y)
      0006E2 90 BF 24         [ 2] 1411         LDW YTEMP,Y
      0006E5 1C 00 02         [ 2] 1412         ADDW X,#2
      0006E8 90 93            [ 1] 1413         LDW Y,X
      0006EA 90 FE            [ 2] 1414         LDW Y,(Y)
      0006EC 72 B9 00 24      [ 2] 1415         ADDW Y,YTEMP
      0006F0 FF               [ 2] 1416         LDW (X),Y
      0006F1 81               [ 4] 1417         RET
                                   1418 
                                   1419 ;       NOT     ( w -- w )
                                   1420 ;       One's complement of tos.
      0006F2 06 DC                 1421         .word      LINK
                           0006F4  1422 LINK = . 
      0006F4 03                    1423         .byte      3
      0006F5 4E 4F 54              1424         .ascii     "NOT"
      0006F8                       1425 INVER:
      0006F8 90 93            [ 1] 1426         LDW Y,X
      0006FA 90 FE            [ 2] 1427         LDW Y,(Y)
      0006FC 90 53            [ 2] 1428         CPLW Y
      0006FE FF               [ 2] 1429         LDW (X),Y
      0006FF 81               [ 4] 1430         RET
                                   1431 
                                   1432 ;       NEGATE  ( n -- -n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1433 ;       Two's complement of tos.
      000700 06 F4                 1434         .word      LINK
                           000702  1435 LINK = . 
      000702 06                    1436         .byte      6
      000703 4E 45 47 41 54 45     1437         .ascii     "NEGATE"
      000709                       1438 NEGAT:
      000709 90 93            [ 1] 1439         LDW Y,X
      00070B 90 FE            [ 2] 1440         LDW Y,(Y)
      00070D 90 50            [ 2] 1441         NEGW Y
      00070F FF               [ 2] 1442         LDW (X),Y
      000710 81               [ 4] 1443         RET
                                   1444 
                                   1445 ;       DNEGATE ( d -- -d )
                                   1446 ;       Two's complement of top double.
      000711 07 02                 1447         .word      LINK
                           000713  1448 LINK = . 
      000713 07                    1449         .byte      7
      000714 44 4E 45 47 41 54 45  1450         .ascii     "DNEGATE"
      00071B                       1451 DNEGA:
      00071B 90 93            [ 1] 1452         LDW Y,X
      00071D 90 FE            [ 2] 1453 	LDW Y,(Y)
      00071F 90 53            [ 2] 1454         CPLW Y     
      000721 90 BF 24         [ 2] 1455 	LDW YTEMP,Y
      000724 90 93            [ 1] 1456         LDW Y,X
      000726 90 EE 02         [ 2] 1457         LDW Y,(2,Y)
      000729 90 53            [ 2] 1458         CPLW Y
      00072B 72 A9 00 01      [ 2] 1459         addw y,#1
      00072F EF 02            [ 2] 1460         LDW (2,X),Y
      000731 90 BE 24         [ 2] 1461         LDW Y,YTEMP
      000734 24 02            [ 1] 1462         JRNC DN1 
      000736 90 5C            [ 2] 1463         INCW Y
      000738 FF               [ 2] 1464 DN1:    LDW (X),Y
      000739 81               [ 4] 1465         RET
                                   1466 
                                   1467 
                                   1468 ;       S>D ( n -- d )
                                   1469 ; convert single integer to double 
      00073A 07 13                 1470         .word LINK 
                           00073C  1471         LINK=. 
      00073C 03                    1472         .byte 3 
      00073D 53 3E 44              1473         .ascii "S>D"
      000740                       1474 STOD: 
      000740 1D 00 02         [ 2] 1475         subw x,#CELLL 
      000743 90 5F            [ 1] 1476         clrw y 
      000745 FF               [ 2] 1477         ldw (x),y 
      000746 90 93            [ 1] 1478         ldw y,x 
      000748 90 EE 02         [ 2] 1479         ldw y,(2,y)
      00074B 2A 05            [ 1] 1480         jrpl 1$ 
      00074D 90 AE FF FF      [ 2] 1481         ldw y,#-1
      000751 FF               [ 2] 1482         ldw (x),y 
      000752 81               [ 4] 1483 1$:     ret 
                                   1484 
                                   1485 
                                   1486 
                                   1487 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1488 ;       -       ( n1 n2 -- n1-n2 )
                                   1489 ;       Subtraction.
      000753 07 3C                 1490         .word      LINK
                           000755  1491 LINK = . 
      000755 01                    1492         .byte      1
      000756 2D                    1493         .ascii     "-"
      000757                       1494 SUBB:
      000757 90 93            [ 1] 1495         LDW Y,X
      000759 90 FE            [ 2] 1496         LDW Y,(Y)
      00075B 90 BF 24         [ 2] 1497         LDW YTEMP,Y
      00075E 1C 00 02         [ 2] 1498         ADDW X,#2
      000761 90 93            [ 1] 1499         LDW Y,X
      000763 90 FE            [ 2] 1500         LDW Y,(Y)
      000765 72 B2 00 24      [ 2] 1501         SUBW Y,YTEMP
      000769 FF               [ 2] 1502         LDW (X),Y
      00076A 81               [ 4] 1503         RET
                                   1504 
                                   1505 ;       ABS     ( n -- n )
                                   1506 ;       Return  absolute value of n.
      00076B 07 55                 1507         .word      LINK
                           00076D  1508 LINK = . 
      00076D 03                    1509         .byte      3
      00076E 41 42 53              1510         .ascii     "ABS"
      000771                       1511 ABSS:
      000771 90 93            [ 1] 1512         LDW Y,X
      000773 90 FE            [ 2] 1513 	LDW Y,(Y)
      000775 2A 03            [ 1] 1514         JRPL     AB1     ;negate:
      000777 90 50            [ 2] 1515         NEGW     Y     ;else negate hi byte
      000779 FF               [ 2] 1516         LDW (X),Y
      00077A 81               [ 4] 1517 AB1:    RET
                                   1518 
                                   1519 ;       =       ( w w -- t )
                                   1520 ;       Return true if top two are =al.
      00077B 07 6D                 1521         .word      LINK
                           00077D  1522 LINK = . 
      00077D 01                    1523         .byte      1
      00077E 3D                    1524         .ascii     "="
      00077F                       1525 EQUAL:
      00077F A6 FF            [ 1] 1526         LD A,#0xFF  ;true
      000781 90 93            [ 1] 1527         LDW Y,X    ;D = n2
      000783 90 FE            [ 2] 1528         LDW Y,(Y)
      000785 90 BF 24         [ 2] 1529         LDW YTEMP,Y
      000788 1C 00 02         [ 2] 1530         ADDW X,#2
      00078B 90 93            [ 1] 1531         LDW Y,X
      00078D 90 FE            [ 2] 1532         LDW Y,(Y)
      00078F 90 B3 24         [ 2] 1533         CPW Y,YTEMP     ;if n2 <> n1
      000792 27 01            [ 1] 1534         JREQ     EQ1
      000794 4F               [ 1] 1535         CLR A
      000795 F7               [ 1] 1536 EQ1:    LD (X),A
      000796 E7 01            [ 1] 1537         LD (1,X),A
      000798 81               [ 4] 1538 	RET     
                                   1539 
                                   1540 ;       U<      ( u u -- t )
                                   1541 ;       Unsigned compare of top two items.
      000799 07 7D                 1542         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                           00079B  1543 LINK = . 
      00079B 02                    1544         .byte      2
      00079C 55 3C                 1545         .ascii     "U<"
      00079E                       1546 ULESS:
      00079E A6 FF            [ 1] 1547         LD A,#0xFF  ;true
      0007A0 90 93            [ 1] 1548         LDW Y,X    ;D = n2
      0007A2 90 FE            [ 2] 1549         LDW Y,(Y)
      0007A4 90 BF 24         [ 2] 1550         LDW YTEMP,Y
      0007A7 1C 00 02         [ 2] 1551         ADDW X,#2
      0007AA 90 93            [ 1] 1552         LDW Y,X
      0007AC 90 FE            [ 2] 1553         LDW Y,(Y)
      0007AE 90 B3 24         [ 2] 1554         CPW Y,YTEMP     ;if n2 <> n1
      0007B1 25 01            [ 1] 1555         JRULT     ULES1
      0007B3 4F               [ 1] 1556         CLR A
      0007B4 F7               [ 1] 1557 ULES1:  LD (X),A
      0007B5 E7 01            [ 1] 1558         LD (1,X),A
      0007B7 81               [ 4] 1559 	RET     
                                   1560 
                                   1561 ;       <       ( n1 n2 -- t )
                                   1562 ;       Signed compare of top two items.
      0007B8 07 9B                 1563         .word      LINK
                           0007BA  1564 LINK = . 
      0007BA 01                    1565         .byte      1
      0007BB 3C                    1566         .ascii     "<"
      0007BC                       1567 LESS:
      0007BC A6 FF            [ 1] 1568         LD A,#0xFF  ;true
      0007BE 90 93            [ 1] 1569         LDW Y,X    ;D = n2
      0007C0 90 FE            [ 2] 1570         LDW Y,(Y)
      0007C2 90 BF 24         [ 2] 1571         LDW YTEMP,Y
      0007C5 1C 00 02         [ 2] 1572         ADDW X,#2
      0007C8 90 93            [ 1] 1573         LDW Y,X
      0007CA 90 FE            [ 2] 1574         LDW Y,(Y)
      0007CC 90 B3 24         [ 2] 1575         CPW Y,YTEMP     ;if n2 <> n1
      0007CF 2F 01            [ 1] 1576         JRSLT     LT1
      0007D1 4F               [ 1] 1577         CLR A
      0007D2 F7               [ 1] 1578 LT1:    LD (X),A
      0007D3 E7 01            [ 1] 1579         LD (1,X),A
      0007D5 81               [ 4] 1580 	RET     
                                   1581 
                                   1582 ;       MAX     ( n n -- n )
                                   1583 ;       Return greater of two top items.
      0007D6 07 BA                 1584         .word      LINK
                           0007D8  1585 LINK = . 
      0007D8 03                    1586         .byte      3
      0007D9 4D 41 58              1587         .ascii     "MAX"
      0007DC                       1588 MAX:
      0007DC 90 93            [ 1] 1589         LDW Y,X    ;D = n2
      0007DE 90 EE 02         [ 2] 1590         LDW Y,(2,Y)
      0007E1 90 BF 24         [ 2] 1591         LDW YTEMP,Y
      0007E4 90 93            [ 1] 1592         LDW Y,X
      0007E6 90 FE            [ 2] 1593         LDW Y,(Y)
      0007E8 90 B3 24         [ 2] 1594         CPW Y,YTEMP     ;if n2 <> n1
      0007EB 2F 02            [ 1] 1595         JRSLT     MAX1
      0007ED EF 02            [ 2] 1596         LDW (2,X),Y
      0007EF 1C 00 02         [ 2] 1597 MAX1:   ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007F2 81               [ 4] 1598 	RET     
                                   1599 
                                   1600 ;       MIN     ( n n -- n )
                                   1601 ;       Return smaller of top two items.
      0007F3 07 D8                 1602         .word      LINK
                           0007F5  1603 LINK = . 
      0007F5 03                    1604         .byte      3
      0007F6 4D 49 4E              1605         .ascii     "MIN"
      0007F9                       1606 MIN:
      0007F9 90 93            [ 1] 1607         LDW Y,X    ;D = n2
      0007FB 90 EE 02         [ 2] 1608         LDW Y,(2,Y)
      0007FE 90 BF 24         [ 2] 1609         LDW YTEMP,Y
      000801 90 93            [ 1] 1610         LDW Y,X
      000803 90 FE            [ 2] 1611         LDW Y,(Y)
      000805 90 B3 24         [ 2] 1612         CPW Y,YTEMP     ;if n2 <> n1
      000808 2C 02            [ 1] 1613         JRSGT     MIN1
      00080A EF 02            [ 2] 1614         LDW (2,X),Y
      00080C 1C 00 02         [ 2] 1615 MIN1:	ADDW X,#2
      00080F 81               [ 4] 1616 	RET     
                                   1617 
                                   1618 ;       WITHIN  ( u ul uh -- t )
                                   1619 ;       Return true if u is within
                                   1620 ;       range of ul and uh. ( ul <= u < uh )
      000810 07 F5                 1621         .word      LINK
                           000812  1622 LINK = . 
      000812 06                    1623         .byte      6
      000813 57 49 54 48 49 4E     1624         .ascii     "WITHIN"
      000819                       1625 WITHI:
      000819 CD 05 0D         [ 4] 1626         CALL     OVER
      00081C CD 07 57         [ 4] 1627         CALL     SUBB
      00081F CD 04 AC         [ 4] 1628         CALL     TOR
      000822 CD 07 57         [ 4] 1629         CALL     SUBB
      000825 CD 04 8D         [ 4] 1630         CALL     RFROM
      000828 CC 07 9E         [ 2] 1631         JP     ULESS
                                   1632 
                                   1633 ;; Divide
                                   1634 
                                   1635 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1636 ;       Unsigned divide of a double by a
                                   1637 ;       single. Return mod and quotient.
      00082B 08 12                 1638         .word      LINK
                           00082D  1639 LINK = . 
      00082D 06                    1640         .byte      6
      00082E 55 4D 2F 4D 4F 44     1641         .ascii     "UM/MOD"
      000834                       1642 UMMOD:
      000834 BF 22            [ 2] 1643 	LDW XTEMP,X	; save stack pointer
      000836 FE               [ 2] 1644 	LDW X,(X)	; un
      000837 BF 24            [ 2] 1645 	LDW YTEMP,X     ; save un
      000839 90 BE 22         [ 2] 1646 	LDW Y,XTEMP	; stack pointer
      00083C 90 EE 04         [ 2] 1647 	LDW Y,(4,Y)     ; Y=udl
      00083F BE 22            [ 2] 1648 	LDW X,XTEMP
      000841 EE 02            [ 2] 1649 	LDW X,(2,X)	; X=udh
      000843 B3 24            [ 2] 1650 	CPW X,YTEMP
      000845 23 0F            [ 2] 1651 	JRULE MMSM1
      000847 BE 22            [ 2] 1652 	LDW X,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000849 1C 00 02         [ 2] 1653 	ADDW X,#2	; pop off 1 level
      00084C 90 AE FF FF      [ 2] 1654 	LDW Y,#0xFFFF
      000850 FF               [ 2] 1655 	LDW (X),Y
      000851 90 5F            [ 1] 1656 	CLRW Y
      000853 EF 02            [ 2] 1657 	LDW (2,X),Y
      000855 81               [ 4] 1658 	RET
      000856                       1659 MMSM1:
                                   1660 ; take advantage of divw x,y when udh==0
      000856 5D               [ 2] 1661         tnzw x  ; is udh==0?
      000857 26 11            [ 1] 1662         jrne MMSM2 
      000859 93               [ 1] 1663         ldw x,y    ;udl 
      00085A 90 BE 24         [ 2] 1664         ldw y,YTEMP ; divisor 
      00085D 65               [ 2] 1665         divw x,y 
      00085E 89               [ 2] 1666         pushw x     ; quotient 
      00085F BE 22            [ 2] 1667         ldw x,XTEMP 
      000861 1C 00 02         [ 2] 1668         addw x,#CELLL 
      000864 EF 02            [ 2] 1669         ldw (2,x),y  ; ur
      000866 90 85            [ 2] 1670         popw y 
      000868 FF               [ 2] 1671         ldw (x),y ; uq 
      000869 81               [ 4] 1672         ret 
      00086A                       1673 MMSM2:        
      00086A A6 11            [ 1] 1674 	LD A,#17	; loop count
      00086C                       1675 MMSM3:
      00086C B3 24            [ 2] 1676 	CPW X,YTEMP	; compare udh to un
      00086E 25 04            [ 1] 1677 	JRULT MMSM4	; can't subtract
      000870 72 B0 00 24      [ 2] 1678 	SUBW X,YTEMP	; can subtract
      000874                       1679 MMSM4:
      000874 8C               [ 1] 1680 	CCF	; quotient bit
      000875 90 59            [ 2] 1681 	RLCW Y	; rotate into quotient
      000877 59               [ 2] 1682 	RLCW X	; rotate into remainder
      000878 4A               [ 1] 1683 	DEC A	; repeat
      000879 22 F1            [ 1] 1684 	JRUGT MMSM3
      00087B 56               [ 2] 1685         RRCW X 
      00087C BF 24            [ 2] 1686 	LDW YTEMP,X	; done, save remainder
      00087E BE 22            [ 2] 1687 	LDW X,XTEMP
      000880 1C 00 02         [ 2] 1688 	ADDW X,#2	; drop
      000883 FF               [ 2] 1689 	LDW (X),Y
      000884 90 BE 24         [ 2] 1690 	LDW Y,YTEMP	; save quotient
      000887 EF 02            [ 2] 1691 	LDW (2,X),Y
      000889 81               [ 4] 1692 	RET
                                   1693 	
                                   1694 ;       M/MOD   ( d n -- r q )
                                   1695 ;       Signed floored divide of double by
                                   1696 ;       single. Return mod and quotient.
      00088A 08 2D                 1697         .word      LINK
                           00088C  1698 LINK = . 
      00088C 05                    1699         .byte      5
      00088D 4D 2F 4D 4F 44        1700         .ascii     "M/MOD"
      000892                       1701 MSMOD:  
      000892 CD 04 E3         [ 4] 1702         CALL	DUPP
      000895 CD 05 1C         [ 4] 1703         CALL	ZLESS
      000898 CD 04 E3         [ 4] 1704         CALL	DUPP
      00089B CD 04 AC         [ 4] 1705         CALL	TOR
      00089E CD 03 E7         [ 4] 1706         CALL	QBRAN
      0008A1 08 AF                 1707         .word	MMOD1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0008A3 CD 07 09         [ 4] 1708         CALL	NEGAT
      0008A6 CD 04 AC         [ 4] 1709         CALL	TOR
      0008A9 CD 07 1B         [ 4] 1710         CALL	DNEGA
      0008AC CD 04 8D         [ 4] 1711         CALL	RFROM
      0008AF CD 04 AC         [ 4] 1712 MMOD1:	CALL	TOR
      0008B2 CD 04 E3         [ 4] 1713         CALL	DUPP
      0008B5 CD 05 1C         [ 4] 1714         CALL	ZLESS
      0008B8 CD 03 E7         [ 4] 1715         CALL	QBRAN
      0008BB 08 C3                 1716         .word	MMOD2
      0008BD CD 04 A0         [ 4] 1717         CALL	RAT
      0008C0 CD 06 DE         [ 4] 1718         CALL	PLUS
      0008C3 CD 04 8D         [ 4] 1719 MMOD2:	CALL	RFROM
      0008C6 CD 08 34         [ 4] 1720         CALL	UMMOD
      0008C9 CD 04 8D         [ 4] 1721         CALL	RFROM
      0008CC CD 03 E7         [ 4] 1722         CALL	QBRAN
      0008CF 08 DA                 1723         .word	MMOD3
      0008D1 CD 04 F3         [ 4] 1724         CALL	SWAPP
      0008D4 CD 07 09         [ 4] 1725         CALL	NEGAT
      0008D7 CD 04 F3         [ 4] 1726         CALL	SWAPP
      0008DA 81               [ 4] 1727 MMOD3:	RET
                                   1728 
                                   1729 ;       /MOD    ( n n -- r q )
                                   1730 ;       Signed divide. Return mod and quotient.
      0008DB 08 8C                 1731         .word      LINK
                           0008DD  1732 LINK = . 
      0008DD 04                    1733         .byte      4
      0008DE 2F 4D 4F 44           1734         .ascii     "/MOD"
      0008E2                       1735 SLMOD:
      0008E2 CD 05 0D         [ 4] 1736         CALL	OVER
      0008E5 CD 05 1C         [ 4] 1737         CALL	ZLESS
      0008E8 CD 04 F3         [ 4] 1738         CALL	SWAPP
      0008EB CC 08 92         [ 2] 1739         JP	MSMOD
                                   1740 
                                   1741 ;       MOD     ( n n -- r )
                                   1742 ;       Signed divide. Return mod only.
      0008EE 08 DD                 1743         .word      LINK
                           0008F0  1744 LINK = . 
      0008F0 03                    1745         .byte      3
      0008F1 4D 4F 44              1746         .ascii     "MOD"
      0008F4                       1747 MODD:
      0008F4 CD 08 E2         [ 4] 1748 	CALL	SLMOD
      0008F7 CC 04 D9         [ 2] 1749 	JP	DROP
                                   1750 
                                   1751 ;       /       ( n n -- q )
                                   1752 ;       Signed divide. Return quotient only.
      0008FA 08 F0                 1753         .word      LINK
                           0008FC  1754 LINK = . 
      0008FC 01                    1755         .byte      1
      0008FD 2F                    1756         .ascii     "/"
      0008FE                       1757 SLASH:
      0008FE CD 08 E2         [ 4] 1758         CALL	SLMOD
      000901 CD 04 F3         [ 4] 1759         CALL	SWAPP
      000904 CC 04 D9         [ 2] 1760         JP	DROP
                                   1761 
                                   1762 ;; Multiply
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1763 
                                   1764 ;       UM*     ( u u -- ud )
                                   1765 ;       Unsigned multiply. Return double product.
      000907 08 FC                 1766         .word      LINK
                           000909  1767 LINK = . 
      000909 03                    1768         .byte      3
      00090A 55 4D 2A              1769         .ascii     "UM*"
      00090D                       1770 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1771 ; take advantage of SP addressing modes
                                   1772 ; these PRODx in RAM are not required
                                   1773 ; the product is kept on stack as local variable 
                                   1774         ;; bytes offset on data stack 
                           000002  1775         da=2 
                           000003  1776         db=3 
                           000000  1777         dc=0 
                           000001  1778         dd=1 
                                   1779         ;; product bytes offset on return stack 
                           000001  1780         UD1=1  ; ud bits 31..24
                           000002  1781         UD2=2  ; ud bits 23..16
                           000003  1782         UD3=3  ; ud bits 15..8 
                           000004  1783         UD4=4  ; ud bits 7..0 
                                   1784         ;; local variable for product set to zero   
      00090D 90 5F            [ 1] 1785         clrw y 
      00090F 90 89            [ 2] 1786         pushw y  ; bits 15..0
      000911 90 89            [ 2] 1787         pushw y  ; bits 31..16 
      000913 E6 03            [ 1] 1788         ld a,(db,x) ; b 
      000915 90 97            [ 1] 1789         ld yl,a 
      000917 E6 01            [ 1] 1790         ld a,(dd,x)   ; d
      000919 90 42            [ 4] 1791         mul y,a    ; b*d  
      00091B 17 03            [ 2] 1792         ldw (UD3,sp),y ; lowest weight product 
      00091D E6 03            [ 1] 1793         ld a,(db,x)
      00091F 90 97            [ 1] 1794         ld yl,a 
      000921 E6 00            [ 1] 1795         ld a,(dc,x)
      000923 90 42            [ 4] 1796         mul y,a  ; b*c 
                                   1797         ;;; do the partial sum 
      000925 72 F9 02         [ 2] 1798         addw y,(UD2,sp)
      000928 4F               [ 1] 1799         clr a 
      000929 49               [ 1] 1800         rlc a
      00092A 6B 01            [ 1] 1801         ld (UD1,sp),a 
      00092C 17 02            [ 2] 1802         ldw (UD2,sp),y 
      00092E E6 02            [ 1] 1803         ld a,(da,x)
      000930 90 97            [ 1] 1804         ld yl,a 
      000932 E6 01            [ 1] 1805         ld a,(dd,x)
      000934 90 42            [ 4] 1806         mul y,a   ; a*d 
                                   1807         ;; do partial sum 
      000936 72 F9 02         [ 2] 1808         addw y,(UD2,sp)
      000939 4F               [ 1] 1809         clr a 
      00093A 19 01            [ 1] 1810         adc a,(UD1,sp)
      00093C 6B 01            [ 1] 1811         ld (UD1,sp),a  
      00093E 17 02            [ 2] 1812         ldw (UD2,sp),y 
      000940 E6 02            [ 1] 1813         ld a,(da,x)
      000942 90 97            [ 1] 1814         ld yl,a 
      000944 E6 00            [ 1] 1815         ld a,(dc,x)
      000946 90 42            [ 4] 1816         mul y,a  ;  a*c highest weight product 
                                   1817         ;;; do partial sum 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000948 72 F9 01         [ 2] 1818         addw y,(UD1,sp)
      00094B FF               [ 2] 1819         ldw (x),y  ; udh 
      00094C 16 03            [ 2] 1820         ldw y,(UD3,sp)
      00094E EF 02            [ 2] 1821         ldw (2,x),y  ; udl  
      000950 5B 04            [ 2] 1822         addw sp,#4 ; drop local variable 
      000952 81               [ 4] 1823         ret  
                                   1824 
                                   1825 
                                   1826 ;       *       ( n n -- n )
                                   1827 ;       Signed multiply. Return single product.
      000953 09 09                 1828         .word      LINK
                           000955  1829 LINK = . 
      000955 01                    1830         .byte      1
      000956 2A                    1831         .ascii     "*"
      000957                       1832 STAR:
      000957 CD 09 0D         [ 4] 1833 	CALL	UMSTA
      00095A CC 04 D9         [ 2] 1834 	JP	DROP
                                   1835 
                                   1836 ;       M*      ( n n -- d )
                                   1837 ;       Signed multiply. Return double product.
      00095D 09 55                 1838         .word      LINK
                           00095F  1839 LINK = . 
      00095F 02                    1840         .byte      2
      000960 4D 2A                 1841         .ascii     "M*"
      000962                       1842 MSTAR:      
      000962 CD 06 C9         [ 4] 1843         CALL	DDUP
      000965 CD 05 58         [ 4] 1844         CALL	XORR
      000968 CD 05 1C         [ 4] 1845         CALL	ZLESS
      00096B CD 04 AC         [ 4] 1846         CALL	TOR
      00096E CD 07 71         [ 4] 1847         CALL	ABSS
      000971 CD 04 F3         [ 4] 1848         CALL	SWAPP
      000974 CD 07 71         [ 4] 1849         CALL	ABSS
      000977 CD 09 0D         [ 4] 1850         CALL	UMSTA
      00097A CD 04 8D         [ 4] 1851         CALL	RFROM
      00097D CD 03 E7         [ 4] 1852         CALL	QBRAN
      000980 09 85                 1853         .word	MSTA1
      000982 CD 07 1B         [ 4] 1854         CALL	DNEGA
      000985 81               [ 4] 1855 MSTA1:	RET
                                   1856 
                                   1857 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1858 ;       Multiply n1 and n2, then divide
                                   1859 ;       by n3. Return mod and quotient.
      000986 09 5F                 1860         .word      LINK
                           000988  1861 LINK = . 
      000988 05                    1862         .byte      5
      000989 2A 2F 4D 4F 44        1863         .ascii     "*/MOD"
      00098E                       1864 SSMOD:
      00098E CD 04 AC         [ 4] 1865         CALL     TOR
      000991 CD 09 62         [ 4] 1866         CALL     MSTAR
      000994 CD 04 8D         [ 4] 1867         CALL     RFROM
      000997 CC 08 92         [ 2] 1868         JP     MSMOD
                                   1869 
                                   1870 ;       */      ( n1 n2 n3 -- q )
                                   1871 ;       Multiply n1 by n2, then divide
                                   1872 ;       by n3. Return quotient only.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00099A 09 88                 1873         .word      LINK
                           00099C  1874 LINK = . 
      00099C 02                    1875         .byte      2
      00099D 2A 2F                 1876         .ascii     "*/"
      00099F                       1877 STASL:
      00099F CD 09 8E         [ 4] 1878         CALL	SSMOD
      0009A2 CD 04 F3         [ 4] 1879         CALL	SWAPP
      0009A5 CC 04 D9         [ 2] 1880         JP	DROP
                                   1881 
                                   1882 ;; Miscellaneous
                                   1883 
                                   1884 ;       CELL+   ( a -- a )
                                   1885 ;       Add cell size in byte to address.
      0009A8 09 9C                 1886         .word      LINK
                           0009AA  1887 LINK = . 
      0009AA 02                    1888         .byte       2
      0009AB 32 2B                 1889         .ascii     "2+"
      0009AD                       1890 CELLP:
      0009AD 90 93            [ 1] 1891         LDW Y,X
      0009AF 90 FE            [ 2] 1892 	LDW Y,(Y)
      0009B1 72 A9 00 02      [ 2] 1893         ADDW Y,#CELLL 
      0009B5 FF               [ 2] 1894         LDW (X),Y
      0009B6 81               [ 4] 1895         RET
                                   1896 
                                   1897 ;       CELL-   ( a -- a )
                                   1898 ;       Subtract 2 from address.
      0009B7 09 AA                 1899         .word      LINK
                           0009B9  1900 LINK = . 
      0009B9 02                    1901         .byte       2
      0009BA 32 2D                 1902         .ascii     "2-"
      0009BC                       1903 CELLM:
      0009BC 90 93            [ 1] 1904         LDW Y,X
      0009BE 90 FE            [ 2] 1905 	LDW Y,(Y)
      0009C0 72 A2 00 02      [ 2] 1906         SUBW Y,#CELLL
      0009C4 FF               [ 2] 1907         LDW (X),Y
      0009C5 81               [ 4] 1908         RET
                                   1909 
                                   1910 ;       CELLS   ( n -- n )
                                   1911 ;       Multiply tos by 2.
      0009C6 09 B9                 1912         .word      LINK
                           0009C8  1913 LINK = . 
      0009C8 02                    1914         .byte       2
      0009C9 32 2A                 1915         .ascii     "2*"
      0009CB                       1916 CELLS:
      0009CB 90 93            [ 1] 1917         LDW Y,X
      0009CD 90 FE            [ 2] 1918 	LDW Y,(Y)
      0009CF 90 58            [ 2] 1919         SLAW Y
      0009D1 FF               [ 2] 1920         LDW (X),Y
      0009D2 81               [ 4] 1921         RET
                                   1922 
                                   1923 ;       1+      ( a -- a )
                                   1924 ;       Add cell size in byte to address.
      0009D3 09 C8                 1925         .word      LINK
                           0009D5  1926 LINK = . 
      0009D5 02                    1927         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009D6 31 2B                 1928         .ascii     "1+"
      0009D8                       1929 ONEP:
      0009D8 90 93            [ 1] 1930         LDW Y,X
      0009DA 90 FE            [ 2] 1931 	LDW Y,(Y)
      0009DC 90 5C            [ 2] 1932         INCW Y
      0009DE FF               [ 2] 1933         LDW (X),Y
      0009DF 81               [ 4] 1934         RET
                                   1935 
                                   1936 ;       1-      ( a -- a )
                                   1937 ;       Subtract 2 from address.
      0009E0 09 D5                 1938         .word      LINK
                           0009E2  1939 LINK = . 
      0009E2 02                    1940         .byte      2
      0009E3 31 2D                 1941         .ascii     "1-"
      0009E5                       1942 ONEM:
      0009E5 90 93            [ 1] 1943         LDW Y,X
      0009E7 90 FE            [ 2] 1944 	LDW Y,(Y)
      0009E9 90 5A            [ 2] 1945         DECW Y
      0009EB FF               [ 2] 1946         LDW (X),Y
      0009EC 81               [ 4] 1947         RET
                                   1948 
                                   1949 ;  shift left n times 
                                   1950 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009ED 09 E2                 1951         .word LINK 
                           0009EF  1952         LINK=.
      0009EF 06                    1953         .byte 6 
      0009F0 4C 53 48 49 46 54     1954         .ascii "LSHIFT"
      0009F6                       1955 LSHIFT:
      0009F6 E6 01            [ 1] 1956         ld a,(1,x)
      0009F8 1C 00 02         [ 2] 1957         addw x,#CELLL 
      0009FB 90 93            [ 1] 1958         ldw y,x 
      0009FD 90 FE            [ 2] 1959         ldw y,(y)
      0009FF                       1960 LSHIFT1:
      0009FF 4D               [ 1] 1961         tnz a 
      000A00 27 05            [ 1] 1962         jreq LSHIFT4 
      000A02 90 58            [ 2] 1963         sllw y 
      000A04 4A               [ 1] 1964         dec a 
      000A05 20 F8            [ 2] 1965         jra LSHIFT1 
      000A07                       1966 LSHIFT4:
      000A07 FF               [ 2] 1967         ldw (x),y 
      000A08 81               [ 4] 1968         ret 
                                   1969 
                                   1970 ; shift right n times                 
                                   1971 ; RSHIFT (n1 n2 -- n1>>n2 )
      000A09 09 EF                 1972         .word LINK 
                           000A0B  1973         LINK=.
      000A0B 06                    1974         .byte 6
      000A0C 52 53 48 49 46 54     1975         .ascii "RSHIFT"
      000A12                       1976 RSHIFT:
      000A12 E6 01            [ 1] 1977         ld a,(1,x)
      000A14 1C 00 02         [ 2] 1978         addw x,#CELLL 
      000A17 90 93            [ 1] 1979         ldw y,x 
      000A19 90 FE            [ 2] 1980         ldw y,(y)
      000A1B                       1981 RSHIFT1:
      000A1B 4D               [ 1] 1982         tnz a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000A1C 27 05            [ 1] 1983         jreq RSHIFT4 
      000A1E 90 54            [ 2] 1984         srlw y 
      000A20 4A               [ 1] 1985         dec a 
      000A21 20 F8            [ 2] 1986         jra RSHIFT1 
      000A23                       1987 RSHIFT4:
      000A23 FF               [ 2] 1988         ldw (x),y 
      000A24 81               [ 4] 1989         ret 
                                   1990 
                                   1991 
                                   1992 ;       2/      ( n -- n )
                                   1993 ;       divide  tos by 2.
      000A25 0A 0B                 1994         .word      LINK
                           000A27  1995 LINK = . 
      000A27 02                    1996         .byte      2
      000A28 32 2F                 1997         .ascii     "2/"
      000A2A                       1998 TWOSL:
      000A2A 90 93            [ 1] 1999         LDW Y,X
      000A2C 90 FE            [ 2] 2000 	LDW Y,(Y)
      000A2E 90 57            [ 2] 2001         SRAW Y
      000A30 FF               [ 2] 2002         LDW (X),Y
      000A31 81               [ 4] 2003         RET
                                   2004 
                                   2005 ;       BL      ( -- 32 )
                                   2006 ;       Return 32,  blank character.
      000A32 0A 27                 2007         .word      LINK
                           000A34  2008 LINK = . 
      000A34 02                    2009         .byte      2
      000A35 42 4C                 2010         .ascii     "BL"
      000A37                       2011 BLANK:
      000A37 1D 00 02         [ 2] 2012         SUBW X,#2
      000A3A 90 AE 00 20      [ 2] 2013 	LDW Y,#32
      000A3E FF               [ 2] 2014         LDW (X),Y
      000A3F 81               [ 4] 2015         RET
                                   2016 
                                   2017 ;         0     ( -- 0)
                                   2018 ;         Return 0.
      000A40 0A 34                 2019         .word      LINK
                           000A42  2020 LINK = . 
      000A42 01                    2021         .byte       1
      000A43 30                    2022         .ascii     "0"
      000A44                       2023 ZERO:
      000A44 1D 00 02         [ 2] 2024         SUBW X,#2
      000A47 90 5F            [ 1] 2025 	CLRW Y
      000A49 FF               [ 2] 2026         LDW (X),Y
      000A4A 81               [ 4] 2027         RET
                                   2028 
                                   2029 ;         1     ( -- 1)
                                   2030 ;         Return 1.
      000A4B 0A 42                 2031         .word      LINK
                           000A4D  2032 LINK = . 
      000A4D 01                    2033         .byte       1
      000A4E 31                    2034         .ascii     "1"
      000A4F                       2035 ONE:
      000A4F 1D 00 02         [ 2] 2036         SUBW X,#2
      000A52 90 AE 00 01      [ 2] 2037 	LDW Y,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A56 FF               [ 2] 2038         LDW (X),Y
      000A57 81               [ 4] 2039         RET
                                   2040 
                                   2041 ;         -1    ( -- -1)
                                   2042 ;         Return 32,  blank character.
      000A58 0A 4D                 2043         .word      LINK
                           000A5A  2044 LINK = . 
      000A5A 02                    2045         .byte       2
      000A5B 2D 31                 2046         .ascii     "-1"
      000A5D                       2047 MONE:
      000A5D 1D 00 02         [ 2] 2048         SUBW X,#2
      000A60 90 AE FF FF      [ 2] 2049 	LDW Y,#0xFFFF
      000A64 FF               [ 2] 2050         LDW (X),Y
      000A65 81               [ 4] 2051         RET
                                   2052 
                                   2053 ;       >CHAR   ( c -- c )
                                   2054 ;       Filter non-printing characters.
      000A66 0A 5A                 2055         .word      LINK
                           000A68  2056 LINK = . 
      000A68 05                    2057         .byte      5
      000A69 3E 43 48 41 52        2058         .ascii     ">CHAR"
      000A6E                       2059 TCHAR:
      000A6E E6 01            [ 1] 2060         ld a,(1,x)
      000A70 A1 20            [ 1] 2061         cp a,#32  
      000A72 2B 05            [ 1] 2062         jrmi 1$ 
      000A74 A1 7F            [ 1] 2063         cp a,#127 
      000A76 2A 01            [ 1] 2064         jrpl 1$ 
      000A78 81               [ 4] 2065         ret 
      000A79 A6 5F            [ 1] 2066 1$:     ld a,#'_ 
      000A7B E7 01            [ 1] 2067         ld (1,x),a 
      000A7D 81               [ 4] 2068         ret 
                                   2069 
                                   2070 ;       DEPTH   ( -- n )
                                   2071 ;       Return  depth of  data stack.
      000A7E 0A 68                 2072         .word      LINK
                           000A80  2073 LINK = . 
      000A80 05                    2074         .byte      5
      000A81 44 45 50 54 48        2075         .ascii     "DEPTH"
      000A86                       2076 DEPTH: 
      000A86 90 BE 2A         [ 2] 2077         LDW Y,SP0    ;save data stack ptr
      000A89 BF 22            [ 2] 2078 	LDW XTEMP,X
      000A8B 72 B2 00 22      [ 2] 2079         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A8F 90 57            [ 2] 2080         SRAW Y    ;Y = #stack items
      000A91 1D 00 02         [ 2] 2081 	SUBW X,#2
      000A94 FF               [ 2] 2082         LDW (X),Y     ; if neg, underflow
      000A95 81               [ 4] 2083         RET
                                   2084 
                                   2085 ;       PICK    ( ... +n -- ... w )
                                   2086 ;       Copy  nth stack item to tos.
      000A96 0A 80                 2087         .word      LINK
                           000A98  2088 LINK = . 
      000A98 04                    2089         .byte      4
      000A99 50 49 43 4B           2090         .ascii     "PICK"
      000A9D                       2091 PICK:
      000A9D 90 93            [ 1] 2092         LDW Y,X   ;D = n1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A9F 90 FE            [ 2] 2093         LDW Y,(Y)
                                   2094 ; modified for standard compliance          
                                   2095 ; 0 PICK must be equivalent to DUP 
      000AA1 90 5C            [ 2] 2096         INCW Y 
      000AA3 90 58            [ 2] 2097         SLAW Y
      000AA5 BF 22            [ 2] 2098         LDW XTEMP,X
      000AA7 72 B9 00 22      [ 2] 2099         ADDW Y,XTEMP
      000AAB 90 FE            [ 2] 2100         LDW Y,(Y)
      000AAD FF               [ 2] 2101         LDW (X),Y
      000AAE 81               [ 4] 2102         RET
                                   2103 
                                   2104 ;; Memory access
                                   2105 
                                   2106 ;       +!      ( n a -- )
                                   2107 ;       Add n to  contents at address a.
      000AAF 0A 98                 2108         .word      LINK
                           000AB1  2109 LINK = . 
      000AB1 02                    2110         .byte      2
      000AB2 2B 21                 2111         .ascii     "+!"
      000AB4                       2112 PSTOR:
      000AB4 90 93            [ 1] 2113         ldw y,x 
      000AB6 90 FE            [ 2] 2114         ldw y,(y)
      000AB8 90 BF 24         [ 2] 2115         ldw YTEMP,y  ; address
      000ABB 90 FE            [ 2] 2116         ldw y,(y)  
      000ABD 90 89            [ 2] 2117         pushw y  ; value at address 
      000ABF 90 93            [ 1] 2118         ldw y,x 
      000AC1 90 EE 02         [ 2] 2119         ldw y,(2,y) ; n 
      000AC4 72 F9 01         [ 2] 2120         addw y,(1,sp) ; n+value
      000AC7 91 CF 24         [ 5] 2121         ldw [YTEMP],y ;  a!
      000ACA 90 85            [ 2] 2122         popw y    ;drop local var
      000ACC 1C 00 04         [ 2] 2123         addw x,#4 ; DDROP 
      000ACF 81               [ 4] 2124         ret 
                                   2125 
                                   2126 ;       2!      ( d a -- )
                                   2127 ;       Store  double integer to address a.
      000AD0 0A B1                 2128         .word      LINK
                           000AD2  2129 LINK = . 
      000AD2 02                    2130         .byte      2
      000AD3 32 21                 2131         .ascii     "2!"
      000AD5                       2132 DSTOR:
      000AD5 90 93            [ 1] 2133         ldw y,x 
      000AD7 90 FE            [ 2] 2134         ldw y,(y)
      000AD9 90 BF 24         [ 2] 2135         ldw YTEMP,y ; address 
      000ADC 1C 00 02         [ 2] 2136         addw x,#CELLL ; drop a 
      000ADF 90 93            [ 1] 2137         ldw y,x 
      000AE1 90 FE            [ 2] 2138         ldw y,(y) ; hi word 
      000AE3 89               [ 2] 2139         pushw x 
      000AE4 EE 02            [ 2] 2140         ldw x,(2,x) ; lo word 
      000AE6 91 CF 24         [ 5] 2141         ldw [YTEMP],y
      000AE9 90 93            [ 1] 2142         ldw y,x 
      000AEB AE 00 02         [ 2] 2143         ldw x,#2 
      000AEE 92 DF 24         [ 5] 2144         ldw ([YTEMP],x),y 
      000AF1 85               [ 2] 2145         popw x 
      000AF2 1C 00 04         [ 2] 2146         addw x,#4 ; DDROP 
      000AF5 81               [ 4] 2147         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2148 
                                   2149 ;       2@      ( a -- d )
                                   2150 ;       Fetch double integer from address a.
      000AF6 0A D2                 2151         .word      LINK
                           000AF8  2152 LINK = . 
      000AF8 02                    2153         .byte      2
      000AF9 32 40                 2154         .ascii     "2@"
      000AFB                       2155 DAT:
      000AFB 90 93            [ 1] 2156         ldw y,x 
      000AFD 90 FE            [ 2] 2157         ldw y,(y) ;address 
      000AFF 90 BF 24         [ 2] 2158         ldw YTEMP,y 
      000B02 1D 00 02         [ 2] 2159         subw x,#CELLL ; space for udh 
      000B05 91 CE 24         [ 5] 2160         ldw y,[YTEMP] ; udh 
      000B08 FF               [ 2] 2161         ldw (x),y 
      000B09 90 AE 00 02      [ 2] 2162         ldw y,#2
      000B0D 91 DE 24         [ 5] 2163         ldw y,([YTEMP],y) ; udl 
      000B10 EF 02            [ 2] 2164         ldw (2,x),y
      000B12 81               [ 4] 2165         ret 
                                   2166 
                                   2167 ;       COUNT   ( b -- b +n )
                                   2168 ;       Return count byte of a string
                                   2169 ;       and add 1 to byte address.
      000B13 0A F8                 2170         .word      LINK
                           000B15  2171 LINK = . 
      000B15 05                    2172         .byte      5
      000B16 43 4F 55 4E 54        2173         .ascii     "COUNT"
      000B1B                       2174 COUNT:
      000B1B 90 93            [ 1] 2175         ldw y,x 
      000B1D 90 FE            [ 2] 2176         ldw y,(y) ; address 
      000B1F 90 F6            [ 1] 2177         ld a,(y)  ; count 
      000B21 90 5C            [ 2] 2178         incw y 
      000B23 FF               [ 2] 2179         ldw (x),y 
      000B24 1D 00 02         [ 2] 2180         subw x,#CELLL 
      000B27 E7 01            [ 1] 2181         ld (1,x),a 
      000B29 7F               [ 1] 2182         clr (x)
      000B2A 81               [ 4] 2183         ret 
                                   2184 
                                   2185 ;       HERE    ( -- a )
                                   2186 ;       Return  top of  variables
      000B2B 0B 15                 2187         .word      LINK
                           000B2D  2188 LINK = . 
      000B2D 04                    2189         .byte      4
      000B2E 48 45 52 45           2190         .ascii     "HERE"
      000B32                       2191 HERE:
      000B32 90 AE 00 16      [ 2] 2192       	ldw y,#UVP 
      000B36 90 FE            [ 2] 2193         ldw y,(y)
      000B38 1D 00 02         [ 2] 2194         subw x,#CELLL 
      000B3B FF               [ 2] 2195         ldw (x),y 
      000B3C 81               [ 4] 2196         ret 
                                   2197 
                                   2198 ;       PAD     ( -- a )
                                   2199 ;       Return address of text buffer
                                   2200 ;       above  code dictionary.
      000B3D 0B 2D                 2201         .word      LINK
                           000B3F  2202 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B3F 03                    2203         .byte      3
      000B40 50 41 44              2204         .ascii     "PAD"
      000B43                       2205 PAD:
      000B43 CD 0B 32         [ 4] 2206         CALL     HERE
      000B46 CD 03 B4         [ 4] 2207         CALL     DOLIT
      000B49 00 50                 2208         .word      80
      000B4B CC 06 DE         [ 2] 2209         JP     PLUS
                                   2210 
                                   2211 ;       TIB     ( -- a )
                                   2212 ;       Return address of terminal input buffer.
      000B4E 0B 3F                 2213         .word      LINK
                           000B50  2214 LINK = . 
      000B50 03                    2215         .byte      3
      000B51 54 49 42              2216         .ascii     "TIB"
      000B54                       2217 TIB:
      000B54 CD 05 CE         [ 4] 2218         CALL     NTIB
      000B57 CD 09 AD         [ 4] 2219         CALL     CELLP
      000B5A CC 04 3C         [ 2] 2220         JP     AT
                                   2221 
                                   2222 ;       @EXECUTE        ( a -- )
                                   2223 ;       Execute vector stored in address a.
      000B5D 0B 50                 2224         .word      LINK
                           000B5F  2225 LINK = . 
      000B5F 08                    2226         .byte      8
      000B60 40 45 58 45 43 55 54  2227         .ascii     "@EXECUTE"
             45
      000B68                       2228 ATEXE:
      000B68 CD 04 3C         [ 4] 2229         CALL     AT
      000B6B CD 06 8D         [ 4] 2230         CALL     QDUP    ;?address or zero
      000B6E CD 03 E7         [ 4] 2231         CALL     QBRAN
      000B71 0B 76                 2232         .word      EXE1
      000B73 CD 04 0E         [ 4] 2233         CALL     EXECU   ;execute if non-zero
      000B76 81               [ 4] 2234 EXE1:   RET     ;do nothing if zero
                                   2235 
                                   2236 ;       CMOVE   ( b1 b2 u -- )
                                   2237 ;       Copy u bytes from b1 to b2.
      000B77 0B 5F                 2238         .word      LINK
                           000B79  2239 LINK = . 
      000B79 05                    2240         .byte      5
      000B7A 43 4D 4F 56 45        2241         .ascii     "CMOVE"
      000B7F                       2242 CMOVE:
      000B7F CD 04 AC         [ 4] 2243         CALL	TOR
      000B82 CD 03 FE         [ 4] 2244         CALL	BRAN
      000B85 0B 9F                 2245         .word	CMOV2
      000B87 CD 04 AC         [ 4] 2246 CMOV1:	CALL	TOR
      000B8A CD 04 E3         [ 4] 2247         CALL	DUPP
      000B8D CD 04 5A         [ 4] 2248         CALL	CAT
      000B90 CD 04 A0         [ 4] 2249         CALL	RAT
      000B93 CD 04 49         [ 4] 2250         CALL	CSTOR
      000B96 CD 09 D8         [ 4] 2251         CALL	ONEP
      000B99 CD 04 8D         [ 4] 2252         CALL	RFROM
      000B9C CD 09 D8         [ 4] 2253         CALL	ONEP
      000B9F CD 03 C8         [ 4] 2254 CMOV2:	CALL	DONXT
      000BA2 0B 87                 2255         .word	CMOV1
      000BA4 CC 06 BE         [ 2] 2256         JP	DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2257 
                                   2258 ;       FILL    ( b u c -- )
                                   2259 ;       Fill u bytes of character c
                                   2260 ;       to area beginning at b.
      000BA7 0B 79                 2261         .word       LINK
                           000BA9  2262 LINK = . 
      000BA9 04                    2263         .byte       4
      000BAA 46 49 4C 4C           2264         .ascii     "FILL"
      000BAE                       2265 FILL:
      000BAE 90 93            [ 1] 2266         ldw y,x 
      000BB0 90 E6 01         [ 1] 2267         ld a,(1,y) ; c 
      000BB3 1C 00 02         [ 2] 2268         addw x,#CELLL ; drop c 
      000BB6 90 93            [ 1] 2269         ldw y,x 
      000BB8 90 FE            [ 2] 2270         ldw y,(y) ; count
      000BBA 90 89            [ 2] 2271         pushw y 
      000BBC 1C 00 02         [ 2] 2272         addw x,#CELLL ; drop u 
      000BBF 90 93            [ 1] 2273         ldw y,x 
      000BC1 1C 00 02         [ 2] 2274         addw x,#CELLL ; drop b 
      000BC4 90 FE            [ 2] 2275         ldw y,(y) ; address
      000BC6 90 BF 24         [ 2] 2276         ldw YTEMP,y
      000BC9 90 85            [ 2] 2277         popw y ; count 
      000BCB                       2278 FILL1:  
      000BCB 92 C7 24         [ 4] 2279         ld [YTEMP],a 
      000BCE 3C 25            [ 1] 2280         inc YTEMP+1
      000BD0 24 02            [ 1] 2281         jrnc FILL2 
      000BD2 3C 24            [ 1] 2282         inc YTEMP
      000BD4                       2283 FILL2: 
      000BD4 90 5A            [ 2] 2284         decw y ; count 
      000BD6 26 F3            [ 1] 2285         jrne FILL1  
      000BD8 81               [ 4] 2286         ret 
                                   2287 
                                   2288 ;       ERASE   ( b u -- )
                                   2289 ;       Erase u bytes beginning at b.
      000BD9 0B A9                 2290         .word      LINK
                           000BDB  2291 LINK = . 
      000BDB 05                    2292         .byte      5
      000BDC 45 52 41 53 45        2293         .ascii     "ERASE"
      000BE1                       2294 ERASE:
      000BE1 90 5F            [ 1] 2295         clrw y 
      000BE3 1D 00 02         [ 2] 2296         subw x,#CELLL 
      000BE6 FF               [ 2] 2297         ldw (x),y 
      000BE7 CC 0B AE         [ 2] 2298         jp FILL 
                                   2299 
                                   2300 
                                   2301 ;       PACK0   ( b u a -- a )
                                   2302 ;       Build a counted string with
                                   2303 ;       u characters from b. Null fill.
      000BEA 0B DB                 2304         .word      LINK
                           000BEC  2305 LINK = . 
      000BEC 05                    2306         .byte      5
      000BED 50 41 43 4B 30        2307         .ascii     "PACK0"
      000BF2                       2308 PACKS:
      000BF2 CD 04 E3         [ 4] 2309         CALL     DUPP
      000BF5 CD 04 AC         [ 4] 2310         CALL     TOR     ;strings only on cell boundary
      000BF8 CD 06 C9         [ 4] 2311         CALL     DDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BFB CD 04 49         [ 4] 2312         CALL     CSTOR
      000BFE CD 09 D8         [ 4] 2313         CALL     ONEP ;save count
      000C01 CD 04 F3         [ 4] 2314         CALL     SWAPP
      000C04 CD 0B 7F         [ 4] 2315         CALL     CMOVE
      000C07 CD 04 8D         [ 4] 2316         CALL     RFROM
      000C0A 81               [ 4] 2317         RET
                                   2318 
                                   2319 ;; Numeric output, single precision
                                   2320 
                                   2321 ;       DIGIT   ( u -- c )
                                   2322 ;       Convert digit u to a character.
      000C0B 0B EC                 2323         .word      LINK
                           000C0D  2324 LINK = . 
      000C0D 05                    2325         .byte      5
      000C0E 44 49 47 49 54        2326         .ascii     "DIGIT"
      000C13                       2327 DIGIT:
      000C13 CD 03 B4         [ 4] 2328         CALL	DOLIT
      000C16 00 09                 2329         .word	9
      000C18 CD 05 0D         [ 4] 2330         CALL	OVER
      000C1B CD 07 BC         [ 4] 2331         CALL	LESS
      000C1E CD 03 B4         [ 4] 2332         CALL	DOLIT
      000C21 00 07                 2333         .word	7
      000C23 CD 05 2F         [ 4] 2334         CALL	ANDD
      000C26 CD 06 DE         [ 4] 2335         CALL	PLUS
      000C29 CD 03 B4         [ 4] 2336         CALL	DOLIT
      000C2C 00 30                 2337         .word	48	;'0'
      000C2E CC 06 DE         [ 2] 2338         JP	PLUS
                                   2339 
                                   2340 ;       EXTRACT ( n base -- n c )
                                   2341 ;       Extract least significant digit from n.
      000C31 0C 0D                 2342         .word      LINK
                           000C33  2343 LINK = . 
      000C33 07                    2344         .byte      7
      000C34 45 58 54 52 41 43 54  2345         .ascii     "EXTRACT"
      000C3B                       2346 EXTRC:
      000C3B CD 0A 44         [ 4] 2347         CALL     ZERO
      000C3E CD 04 F3         [ 4] 2348         CALL     SWAPP
      000C41 CD 08 34         [ 4] 2349         CALL     UMMOD
      000C44 CD 04 F3         [ 4] 2350         CALL     SWAPP
      000C47 CC 0C 13         [ 2] 2351         JP     DIGIT
                                   2352 
                                   2353 ;       <#      ( -- )
                                   2354 ;       Initiate  numeric output process.
      000C4A 0C 33                 2355         .word      LINK
                           000C4C  2356 LINK = . 
      000C4C 02                    2357         .byte      2
      000C4D 3C 23                 2358         .ascii     "<#"
      000C4F                       2359 BDIGS:
      000C4F CD 0B 43         [ 4] 2360         CALL     PAD
      000C52 CD 06 10         [ 4] 2361         CALL     HLD
      000C55 CC 04 25         [ 2] 2362         JP     STORE
                                   2363 
                                   2364 ;       HOLD    ( c -- )
                                   2365 ;       Insert a character into output string.
      000C58 0C 4C                 2366         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                           000C5A  2367 LINK = . 
      000C5A 04                    2368         .byte      4
      000C5B 48 4F 4C 44           2369         .ascii     "HOLD"
      000C5F                       2370 HOLD:
      000C5F CD 06 10         [ 4] 2371         CALL     HLD
      000C62 CD 04 3C         [ 4] 2372         CALL     AT
      000C65 CD 09 E5         [ 4] 2373         CALL     ONEM
      000C68 CD 04 E3         [ 4] 2374         CALL     DUPP
      000C6B CD 06 10         [ 4] 2375         CALL     HLD
      000C6E CD 04 25         [ 4] 2376         CALL     STORE
      000C71 CC 04 49         [ 2] 2377         JP     CSTOR
                                   2378 
                                   2379 ;       #       ( u -- u )
                                   2380 ;       Extract one digit from u and
                                   2381 ;       append digit to output string.
      000C74 0C 5A                 2382         .word      LINK
                           000C76  2383 LINK = . 
      000C76 01                    2384         .byte      1
      000C77 23                    2385         .ascii     "#"
      000C78                       2386 DIG:
      000C78 CD 05 A0         [ 4] 2387         CALL     BASE
      000C7B CD 04 3C         [ 4] 2388         CALL     AT
      000C7E CD 0C 3B         [ 4] 2389         CALL     EXTRC
      000C81 CC 0C 5F         [ 2] 2390         JP     HOLD
                                   2391 
                                   2392 ;       #S      ( u -- 0 )
                                   2393 ;       Convert u until all digits
                                   2394 ;       are added to output string.
      000C84 0C 76                 2395         .word      LINK
                           000C86  2396 LINK = . 
      000C86 02                    2397         .byte      2
      000C87 23 53                 2398         .ascii     "#S"
      000C89                       2399 DIGS:
      000C89 CD 0C 78         [ 4] 2400 DIGS1:  CALL     DIG
      000C8C CD 04 E3         [ 4] 2401         CALL     DUPP
      000C8F CD 03 E7         [ 4] 2402         CALL     QBRAN
      000C92 0C 96                 2403         .word      DIGS2
      000C94 20 F3            [ 2] 2404         JRA     DIGS1
      000C96 81               [ 4] 2405 DIGS2:  RET
                                   2406 
                                   2407 ;       SIGN    ( n -- )
                                   2408 ;       Add a minus sign to
                                   2409 ;       numeric output string.
      000C97 0C 86                 2410         .word      LINK
                           000C99  2411 LINK = . 
      000C99 04                    2412         .byte      4
      000C9A 53 49 47 4E           2413         .ascii     "SIGN"
      000C9E                       2414 SIGN:
      000C9E CD 05 1C         [ 4] 2415         CALL     ZLESS
      000CA1 CD 03 E7         [ 4] 2416         CALL     QBRAN
      000CA4 0C AE                 2417         .word      SIGN1
      000CA6 CD 03 B4         [ 4] 2418         CALL     DOLIT
      000CA9 00 2D                 2419         .word      45	;"-"
      000CAB CC 0C 5F         [ 2] 2420         JP     HOLD
      000CAE 81               [ 4] 2421 SIGN1:  RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2422 
                                   2423 ;       #>      ( w -- b u )
                                   2424 ;       Prepare output string.
      000CAF 0C 99                 2425         .word      LINK
                           000CB1  2426 LINK = . 
      000CB1 02                    2427         .byte      2
      000CB2 23 3E                 2428         .ascii     "#>"
      000CB4                       2429 EDIGS:
      000CB4 CD 04 D9         [ 4] 2430         CALL     DROP
      000CB7 CD 06 10         [ 4] 2431         CALL     HLD
      000CBA CD 04 3C         [ 4] 2432         CALL     AT
      000CBD CD 0B 43         [ 4] 2433         CALL     PAD
      000CC0 CD 05 0D         [ 4] 2434         CALL     OVER
      000CC3 CC 07 57         [ 2] 2435         JP     SUBB
                                   2436 
                                   2437 ;       str     ( w -- b u )
                                   2438 ;       Convert a signed integer
                                   2439 ;       to a numeric string.
      000CC6 0C B1                 2440         .word      LINK
                           000CC8  2441 LINK = . 
      000CC8 03                    2442         .byte      3
      000CC9 53 54 52              2443         .ascii     "STR"
      000CCC                       2444 STR:
      000CCC CD 04 E3         [ 4] 2445         CALL     DUPP
      000CCF CD 04 AC         [ 4] 2446         CALL     TOR
      000CD2 CD 07 71         [ 4] 2447         CALL     ABSS
      000CD5 CD 0C 4F         [ 4] 2448         CALL     BDIGS
      000CD8 CD 0C 89         [ 4] 2449         CALL     DIGS
      000CDB CD 04 8D         [ 4] 2450         CALL     RFROM
      000CDE CD 0C 9E         [ 4] 2451         CALL     SIGN
      000CE1 CC 0C B4         [ 2] 2452         JP     EDIGS
                                   2453 
                                   2454 ;       HEX     ( -- )
                                   2455 ;       Use radix 16 as base for
                                   2456 ;       numeric conversions.
      000CE4 0C C8                 2457         .word      LINK
                           000CE6  2458 LINK = . 
      000CE6 03                    2459         .byte      3
      000CE7 48 45 58              2460         .ascii     "HEX"
      000CEA                       2461 HEX:
      000CEA CD 03 B4         [ 4] 2462         CALL     DOLIT
      000CED 00 10                 2463         .word      16
      000CEF CD 05 A0         [ 4] 2464         CALL     BASE
      000CF2 CC 04 25         [ 2] 2465         JP     STORE
                                   2466 
                                   2467 ;       DECIMAL ( -- )
                                   2468 ;       Use radix 10 as base
                                   2469 ;       for numeric conversions.
      000CF5 0C E6                 2470         .word      LINK
                           000CF7  2471 LINK = . 
      000CF7 07                    2472         .byte      7
      000CF8 44 45 43 49 4D 41 4C  2473         .ascii     "DECIMAL"
      000CFF                       2474 DECIM:
      000CFF CD 03 B4         [ 4] 2475         CALL     DOLIT
      000D02 00 0A                 2476         .word      10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D04 CD 05 A0         [ 4] 2477         CALL     BASE
      000D07 CC 04 25         [ 2] 2478         JP     STORE
                                   2479 
                                   2480 ;; Numeric input, single precision
                                   2481 
                                   2482 ;       DIGIT?  ( c base -- u t )
                                   2483 ;       Convert a character to its numeric
                                   2484 ;       value. A flag indicates success.
      000D0A 0C F7                 2485         .word      LINK
                           000D0C  2486 LINK = . 
      000D0C 06                    2487         .byte       6
      000D0D 44 49 47 49 54 3F     2488         .ascii     "DIGIT?"
      000D13                       2489 DIGTQ:
      000D13 CD 04 AC         [ 4] 2490         CALL     TOR
      000D16 CD 03 B4         [ 4] 2491         CALL     DOLIT
      000D19 00 30                 2492         .word     48	; "0"
      000D1B CD 07 57         [ 4] 2493         CALL     SUBB
      000D1E CD 03 B4         [ 4] 2494         CALL     DOLIT
      000D21 00 09                 2495         .word      9
      000D23 CD 05 0D         [ 4] 2496         CALL     OVER
      000D26 CD 07 BC         [ 4] 2497         CALL     LESS
      000D29 CD 03 E7         [ 4] 2498         CALL     QBRAN
      000D2C 0D 44                 2499         .word      DGTQ1
      000D2E CD 03 B4         [ 4] 2500         CALL     DOLIT
      000D31 00 07                 2501         .word      7
      000D33 CD 07 57         [ 4] 2502         CALL     SUBB
      000D36 CD 04 E3         [ 4] 2503         CALL     DUPP
      000D39 CD 03 B4         [ 4] 2504         CALL     DOLIT
      000D3C 00 0A                 2505         .word      10
      000D3E CD 07 BC         [ 4] 2506         CALL     LESS
      000D41 CD 05 43         [ 4] 2507         CALL     ORR
      000D44 CD 04 E3         [ 4] 2508 DGTQ1:  CALL     DUPP
      000D47 CD 04 8D         [ 4] 2509         CALL     RFROM
      000D4A CC 07 9E         [ 2] 2510         JP     ULESS
                                   2511 
                                   2512 ;       NUMBER? ( a -- n T | a F )
                                   2513 ;       Convert a number string to
                                   2514 ;       integer. Push a flag on tos.
      000D4D 0D 0C                 2515         .word      LINK
                           000D4F  2516 LINK = . 
      000D4F 07                    2517         .byte      7
      000D50 4E 55 4D 42 45 52 3F  2518         .ascii     "NUMBER?"
      000D57                       2519 NUMBQ:
      000D57 CD 05 A0         [ 4] 2520         CALL     BASE
      000D5A CD 04 3C         [ 4] 2521         CALL     AT
      000D5D CD 04 AC         [ 4] 2522         CALL     TOR
      000D60 CD 0A 44         [ 4] 2523         CALL     ZERO
      000D63 CD 05 0D         [ 4] 2524         CALL     OVER
      000D66 CD 0B 1B         [ 4] 2525         CALL     COUNT
      000D69 CD 05 0D         [ 4] 2526         CALL     OVER
      000D6C CD 04 5A         [ 4] 2527         CALL     CAT
      000D6F CD 03 B4         [ 4] 2528         CALL     DOLIT
      000D72 00 24                 2529         .word     36	; "0x"
      000D74 CD 07 7F         [ 4] 2530         CALL     EQUAL
      000D77 CD 03 E7         [ 4] 2531         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D7A 0D 8B                 2532         .word      NUMQ1
      000D7C CD 0C EA         [ 4] 2533         CALL     HEX
      000D7F CD 04 F3         [ 4] 2534         CALL     SWAPP
      000D82 CD 09 D8         [ 4] 2535         CALL     ONEP
      000D85 CD 04 F3         [ 4] 2536         CALL     SWAPP
      000D88 CD 09 E5         [ 4] 2537         CALL     ONEM
      000D8B CD 05 0D         [ 4] 2538 NUMQ1:  CALL     OVER
      000D8E CD 04 5A         [ 4] 2539         CALL     CAT
      000D91 CD 03 B4         [ 4] 2540         CALL     DOLIT
      000D94 00 2D                 2541         .word     45	; "-"
      000D96 CD 07 7F         [ 4] 2542         CALL     EQUAL
      000D99 CD 04 AC         [ 4] 2543         CALL     TOR
      000D9C CD 04 F3         [ 4] 2544         CALL     SWAPP
      000D9F CD 04 A0         [ 4] 2545         CALL     RAT
      000DA2 CD 07 57         [ 4] 2546         CALL     SUBB
      000DA5 CD 04 F3         [ 4] 2547         CALL     SWAPP
      000DA8 CD 04 A0         [ 4] 2548         CALL     RAT
      000DAB CD 06 DE         [ 4] 2549         CALL     PLUS
      000DAE CD 06 8D         [ 4] 2550         CALL     QDUP
      000DB1 CD 03 E7         [ 4] 2551         CALL     QBRAN
      000DB4 0E 15                 2552         .word      NUMQ6
      000DB6 CD 09 E5         [ 4] 2553         CALL     ONEM
      000DB9 CD 04 AC         [ 4] 2554         CALL     TOR
      000DBC CD 04 E3         [ 4] 2555 NUMQ2:  CALL     DUPP
      000DBF CD 04 AC         [ 4] 2556         CALL     TOR
      000DC2 CD 04 5A         [ 4] 2557         CALL     CAT
      000DC5 CD 05 A0         [ 4] 2558         CALL     BASE
      000DC8 CD 04 3C         [ 4] 2559         CALL     AT
      000DCB CD 0D 13         [ 4] 2560         CALL     DIGTQ
      000DCE CD 03 E7         [ 4] 2561         CALL     QBRAN
      000DD1 0E 03                 2562         .word      NUMQ4
      000DD3 CD 04 F3         [ 4] 2563         CALL     SWAPP
      000DD6 CD 05 A0         [ 4] 2564         CALL     BASE
      000DD9 CD 04 3C         [ 4] 2565         CALL     AT
      000DDC CD 09 57         [ 4] 2566         CALL     STAR
      000DDF CD 06 DE         [ 4] 2567         CALL     PLUS
      000DE2 CD 04 8D         [ 4] 2568         CALL     RFROM
      000DE5 CD 09 D8         [ 4] 2569         CALL     ONEP
      000DE8 CD 03 C8         [ 4] 2570         CALL     DONXT
      000DEB 0D BC                 2571         .word      NUMQ2
      000DED CD 04 A0         [ 4] 2572         CALL     RAT
      000DF0 CD 04 F3         [ 4] 2573         CALL     SWAPP
      000DF3 CD 04 D9         [ 4] 2574         CALL     DROP
      000DF6 CD 03 E7         [ 4] 2575         CALL     QBRAN
      000DF9 0D FE                 2576         .word      NUMQ3
      000DFB CD 07 09         [ 4] 2577         CALL     NEGAT
      000DFE CD 04 F3         [ 4] 2578 NUMQ3:  CALL     SWAPP
      000E01 20 0F            [ 2] 2579         JRA     NUMQ5
      000E03 CD 04 8D         [ 4] 2580 NUMQ4:  CALL     RFROM
      000E06 CD 04 8D         [ 4] 2581         CALL     RFROM
      000E09 CD 06 BE         [ 4] 2582         CALL     DDROP
      000E0C CD 06 BE         [ 4] 2583         CALL     DDROP
      000E0F CD 0A 44         [ 4] 2584         CALL     ZERO
      000E12 CD 04 E3         [ 4] 2585 NUMQ5:  CALL     DUPP
      000E15 CD 04 8D         [ 4] 2586 NUMQ6:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E18 CD 06 BE         [ 4] 2587         CALL     DDROP
      000E1B CD 04 8D         [ 4] 2588         CALL     RFROM
      000E1E CD 05 A0         [ 4] 2589         CALL     BASE
      000E21 CC 04 25         [ 2] 2590         JP     STORE
                                   2591 
                                   2592 ;; Basic I/O
                                   2593 
                                   2594 ;       KEY     ( -- c )
                                   2595 ;       Wait for and return an
                                   2596 ;       input character.
      000E24 0D 4F                 2597         .word      LINK
                           000E26  2598 LINK = . 
      000E26 03                    2599         .byte      3
      000E27 4B 45 59              2600         .ascii     "KEY"
      000E2A                       2601 KEY:
      000E2A 72 0B 52 40 FB   [ 2] 2602         btjf UART2_SR,#UART_SR_RXNE,. 
      000E2F C6 52 41         [ 1] 2603         ld a,UART2_DR 
      000E32 1D 00 02         [ 2] 2604         subw x,#CELLL 
      000E35 E7 01            [ 1] 2605         ld (1,x),a 
      000E37 7F               [ 1] 2606         clr (x)
      000E38 81               [ 4] 2607         ret 
                                   2608 
                                   2609 ;       NUF?    ( -- t )
                                   2610 ;       Return false if no input,
                                   2611 ;       else pause and if CR return true.
      000E39 0E 26                 2612         .word      LINK
                           000E3B  2613 LINK = . 
      000E3B 04                    2614         .byte      4
      000E3C 4E 55 46 3F           2615         .ascii     "NUF?"
      000E40                       2616 NUFQ:
      000E40 CD 03 80         [ 4] 2617         CALL     QKEY
      000E43 CD 04 E3         [ 4] 2618         CALL     DUPP
      000E46 CD 03 E7         [ 4] 2619         CALL     QBRAN
      000E49 0E 59                 2620         .word    NUFQ1
      000E4B CD 06 BE         [ 4] 2621         CALL     DDROP
      000E4E CD 0E 2A         [ 4] 2622         CALL     KEY
      000E51 CD 03 B4         [ 4] 2623         CALL     DOLIT
      000E54 00 0D                 2624         .word      CRR
      000E56 CC 07 7F         [ 2] 2625         JP     EQUAL
      000E59 81               [ 4] 2626 NUFQ1:  RET
                                   2627 
                                   2628 ;       SPACE   ( -- )
                                   2629 ;       Send  blank character to
                                   2630 ;       output device.
      000E5A 0E 3B                 2631         .word      LINK
                           000E5C  2632 LINK = . 
      000E5C 05                    2633         .byte      5
      000E5D 53 50 41 43 45        2634         .ascii     "SPACE"
      000E62                       2635 SPACE:
      000E62 CD 0A 37         [ 4] 2636         CALL     BLANK
      000E65 CC 03 9E         [ 2] 2637         JP     EMIT
                                   2638 
                                   2639 ;       SPACES  ( +n -- )
                                   2640 ;       Send n spaces to output device.
      000E68 0E 5C                 2641         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000E6A  2642 LINK = . 
      000E6A 06                    2643         .byte      6
      000E6B 53 50 41 43 45 53     2644         .ascii     "SPACES"
      000E71                       2645 SPACS:
      000E71 CD 0A 44         [ 4] 2646         CALL     ZERO
      000E74 CD 07 DC         [ 4] 2647         CALL     MAX
      000E77 CD 04 AC         [ 4] 2648         CALL     TOR
      000E7A 20 03            [ 2] 2649         JRA      CHAR2
      000E7C CD 0E 62         [ 4] 2650 CHAR1:  CALL     SPACE
      000E7F CD 03 C8         [ 4] 2651 CHAR2:  CALL     DONXT
      000E82 0E 7C                 2652         .word    CHAR1
      000E84 81               [ 4] 2653         RET
                                   2654 
                                   2655 ;       TYPE    ( b u -- )
                                   2656 ;       Output u characters from b.
      000E85 0E 6A                 2657         .word      LINK
                           000E87  2658 LINK = . 
      000E87 04                    2659         .byte      4
      000E88 54 59 50 45           2660         .ascii     "TYPE"
      000E8C                       2661 TYPES:
      000E8C CD 04 AC         [ 4] 2662         CALL     TOR
      000E8F 20 0C            [ 2] 2663         JRA     TYPE2
      000E91 CD 04 E3         [ 4] 2664 TYPE1:  CALL     DUPP
      000E94 CD 04 5A         [ 4] 2665         CALL     CAT
      000E97 CD 03 9E         [ 4] 2666         CALL     EMIT
      000E9A CD 09 D8         [ 4] 2667         CALL     ONEP
      000E9D CD 03 C8         [ 4] 2668 TYPE2:  CALL     DONXT
      000EA0 0E 91                 2669         .word      TYPE1
      000EA2 CC 04 D9         [ 2] 2670         JP     DROP
                                   2671 
                                   2672 ;       CR      ( -- )
                                   2673 ;       Output a carriage return
                                   2674 ;       and a line feed.
      000EA5 0E 87                 2675         .word      LINK
                           000EA7  2676 LINK = . 
      000EA7 02                    2677         .byte      2
      000EA8 43 52                 2678         .ascii     "CR"
      000EAA                       2679 CR:
      000EAA CD 03 B4         [ 4] 2680         CALL     DOLIT
      000EAD 00 0D                 2681         .word      CRR
      000EAF CD 03 9E         [ 4] 2682         CALL     EMIT
      000EB2 CD 03 B4         [ 4] 2683         CALL     DOLIT
      000EB5 00 0A                 2684         .word      LF
      000EB7 CC 03 9E         [ 2] 2685         JP     EMIT
                                   2686 
                                   2687 ;       do$     ( -- a )
                                   2688 ;       Return  address of a compiled
                                   2689 ;       string.
      000EBA 0E A7                 2690         .word      LINK
                           000EBC  2691 LINK = . 
      000EBC 43                    2692 	.byte      COMPO+3
      000EBD 44 4F 24              2693         .ascii     "DO$"
      000EC0                       2694 DOSTR:
      000EC0 CD 04 8D         [ 4] 2695         CALL     RFROM
      000EC3 CD 04 A0         [ 4] 2696         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EC6 CD 04 8D         [ 4] 2697         CALL     RFROM
      000EC9 CD 0B 1B         [ 4] 2698         CALL     COUNT
      000ECC CD 06 DE         [ 4] 2699         CALL     PLUS
      000ECF CD 04 AC         [ 4] 2700         CALL     TOR
      000ED2 CD 04 F3         [ 4] 2701         CALL     SWAPP
      000ED5 CD 04 AC         [ 4] 2702         CALL     TOR
      000ED8 81               [ 4] 2703         RET
                                   2704 
                                   2705 ;       $"|     ( -- a )
                                   2706 ;       Run time routine compiled by $".
                                   2707 ;       Return address of a compiled string.
      000ED9 0E BC                 2708         .word      LINK
                           000EDB  2709 LINK = . 
      000EDB 43                    2710 	.byte      COMPO+3
      000EDC 24 22 7C              2711         .byte     '$','"','|'
      000EDF                       2712 STRQP:
      000EDF CD 0E C0         [ 4] 2713         CALL     DOSTR
      000EE2 81               [ 4] 2714         RET
                                   2715 
                                   2716 ;       ."|     ( -- )
                                   2717 ;       Run time routine of ." .
                                   2718 ;       Output a compiled string.
      000EE3 0E DB                 2719         .word      LINK
                           000EE5  2720 LINK = . 
      000EE5 43                    2721 	.byte      COMPO+3
      000EE6 2E 22 7C              2722         .byte     '.','"','|'
      000EE9                       2723 DOTQP:
      000EE9 CD 0E C0         [ 4] 2724         CALL     DOSTR
      000EEC CD 0B 1B         [ 4] 2725         CALL     COUNT
      000EEF CC 0E 8C         [ 2] 2726         JP     TYPES
                                   2727 
                                   2728 ;       .R      ( n +n -- )
                                   2729 ;       Display an integer in a field
                                   2730 ;       of n columns, right justified.
      000EF2 0E E5                 2731         .word      LINK
                           000EF4  2732 LINK = . 
      000EF4 02                    2733         .byte      2
      000EF5 2E 52                 2734         .ascii     ".R"
      000EF7                       2735 DOTR:
      000EF7 CD 04 AC         [ 4] 2736         CALL     TOR
      000EFA CD 0C CC         [ 4] 2737         CALL     STR
      000EFD CD 04 8D         [ 4] 2738         CALL     RFROM
      000F00 CD 05 0D         [ 4] 2739         CALL     OVER
      000F03 CD 07 57         [ 4] 2740         CALL     SUBB
      000F06 CD 0E 71         [ 4] 2741         CALL     SPACS
      000F09 CC 0E 8C         [ 2] 2742         JP     TYPES
                                   2743 
                                   2744 ;       U.R     ( u +n -- )
                                   2745 ;       Display an unsigned integer
                                   2746 ;       in n column, right justified.
      000F0C 0E F4                 2747         .word      LINK
                           000F0E  2748 LINK = . 
      000F0E 03                    2749         .byte      3
      000F0F 55 2E 52              2750         .ascii     "U.R"
      000F12                       2751 UDOTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F12 CD 04 AC         [ 4] 2752         CALL     TOR
      000F15 CD 0C 4F         [ 4] 2753         CALL     BDIGS
      000F18 CD 0C 89         [ 4] 2754         CALL     DIGS
      000F1B CD 0C B4         [ 4] 2755         CALL     EDIGS
      000F1E CD 04 8D         [ 4] 2756         CALL     RFROM
      000F21 CD 05 0D         [ 4] 2757         CALL     OVER
      000F24 CD 07 57         [ 4] 2758         CALL     SUBB
      000F27 CD 0E 71         [ 4] 2759         CALL     SPACS
      000F2A CC 0E 8C         [ 2] 2760         JP     TYPES
                                   2761 
                                   2762 ;       U.      ( u -- )
                                   2763 ;       Display an unsigned integer
                                   2764 ;       in free format.
      000F2D 0F 0E                 2765         .word      LINK
                           000F2F  2766 LINK = . 
      000F2F 02                    2767         .byte      2
      000F30 55 2E                 2768         .ascii     "U."
      000F32                       2769 UDOT:
      000F32 CD 0C 4F         [ 4] 2770         CALL     BDIGS
      000F35 CD 0C 89         [ 4] 2771         CALL     DIGS
      000F38 CD 0C B4         [ 4] 2772         CALL     EDIGS
      000F3B CD 0E 62         [ 4] 2773         CALL     SPACE
      000F3E CC 0E 8C         [ 2] 2774         JP     TYPES
                                   2775 
                                   2776 ;       .       ( w -- )
                                   2777 ;       Display an integer in free
                                   2778 ;       format, preceeded by a space.
      000F41 0F 2F                 2779         .word      LINK
                           000F43  2780 LINK = . 
      000F43 01                    2781         .byte      1
      000F44 2E                    2782         .ascii     "."
      000F45                       2783 DOT:
      000F45 CD 05 A0         [ 4] 2784         CALL     BASE
      000F48 CD 04 3C         [ 4] 2785         CALL     AT
      000F4B CD 03 B4         [ 4] 2786         CALL     DOLIT
      000F4E 00 0A                 2787         .word      10
      000F50 CD 05 58         [ 4] 2788         CALL     XORR    ;?decimal
      000F53 CD 03 E7         [ 4] 2789         CALL     QBRAN
      000F56 0F 5B                 2790         .word      DOT1
      000F58 CC 0F 32         [ 2] 2791         JP     UDOT
      000F5B CD 0C CC         [ 4] 2792 DOT1:   CALL     STR
      000F5E CD 0E 62         [ 4] 2793         CALL     SPACE
      000F61 CC 0E 8C         [ 2] 2794         JP     TYPES
                                   2795 
                                   2796 ;       ?       ( a -- )
                                   2797 ;       Display contents in memory cell.
      000F64 0F 43                 2798         .word      LINK
                                   2799         
                           000F66  2800 LINK = . 
      000F66 01                    2801         .byte      1
      000F67 3F                    2802         .ascii     "?"
      000F68                       2803 QUEST:
      000F68 CD 04 3C         [ 4] 2804         CALL     AT
      000F6B CC 0F 45         [ 2] 2805         JP     DOT
                                   2806 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2807 ;; Parsing
                                   2808 
                                   2809 ;       parse   ( b u c -- b u delta ; <string> )
                                   2810 ;       Scan string delimited by c.
                                   2811 ;       Return found string and its offset.
      000F6E 0F 66                 2812         .word      LINK
                           000F70  2813 LINK = . 
      000F70 05                    2814         .byte      5
      000F71 70 61 72 73 65        2815         .ascii     "parse"
      000F76                       2816 PARS:
      000F76 CD 05 AF         [ 4] 2817         CALL     TEMP
      000F79 CD 04 25         [ 4] 2818         CALL     STORE
      000F7C CD 05 0D         [ 4] 2819         CALL     OVER
      000F7F CD 04 AC         [ 4] 2820         CALL     TOR
      000F82 CD 04 E3         [ 4] 2821         CALL     DUPP
      000F85 CD 03 E7         [ 4] 2822         CALL     QBRAN
      000F88 10 2E                 2823         .word    PARS8
      000F8A CD 09 E5         [ 4] 2824         CALL     ONEM
      000F8D CD 05 AF         [ 4] 2825         CALL     TEMP
      000F90 CD 04 3C         [ 4] 2826         CALL     AT
      000F93 CD 0A 37         [ 4] 2827         CALL     BLANK
      000F96 CD 07 7F         [ 4] 2828         CALL     EQUAL
      000F99 CD 03 E7         [ 4] 2829         CALL     QBRAN
      000F9C 0F CF                 2830         .word      PARS3
      000F9E CD 04 AC         [ 4] 2831         CALL     TOR
      000FA1 CD 0A 37         [ 4] 2832 PARS1:  CALL     BLANK
      000FA4 CD 05 0D         [ 4] 2833         CALL     OVER
      000FA7 CD 04 5A         [ 4] 2834         CALL     CAT     ;skip leading blanks ONLY
      000FAA CD 07 57         [ 4] 2835         CALL     SUBB
      000FAD CD 05 1C         [ 4] 2836         CALL     ZLESS
      000FB0 CD 06 F8         [ 4] 2837         CALL     INVER
      000FB3 CD 03 E7         [ 4] 2838         CALL     QBRAN
      000FB6 0F CC                 2839         .word      PARS2
      000FB8 CD 09 D8         [ 4] 2840         CALL     ONEP
      000FBB CD 03 C8         [ 4] 2841         CALL     DONXT
      000FBE 0F A1                 2842         .word      PARS1
      000FC0 CD 04 8D         [ 4] 2843         CALL     RFROM
      000FC3 CD 04 D9         [ 4] 2844         CALL     DROP
      000FC6 CD 0A 44         [ 4] 2845         CALL     ZERO
      000FC9 CC 04 E3         [ 2] 2846         JP     DUPP
      000FCC CD 04 8D         [ 4] 2847 PARS2:  CALL     RFROM
      000FCF CD 05 0D         [ 4] 2848 PARS3:  CALL     OVER
      000FD2 CD 04 F3         [ 4] 2849         CALL     SWAPP
      000FD5 CD 04 AC         [ 4] 2850         CALL     TOR
      000FD8 CD 05 AF         [ 4] 2851 PARS4:  CALL     TEMP
      000FDB CD 04 3C         [ 4] 2852         CALL     AT
      000FDE CD 05 0D         [ 4] 2853         CALL     OVER
      000FE1 CD 04 5A         [ 4] 2854         CALL     CAT
      000FE4 CD 07 57         [ 4] 2855         CALL     SUBB    ;scan for delimiter
      000FE7 CD 05 AF         [ 4] 2856         CALL     TEMP
      000FEA CD 04 3C         [ 4] 2857         CALL     AT
      000FED CD 0A 37         [ 4] 2858         CALL     BLANK
      000FF0 CD 07 7F         [ 4] 2859         CALL     EQUAL
      000FF3 CD 03 E7         [ 4] 2860         CALL     QBRAN
      000FF6 0F FB                 2861         .word      PARS5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000FF8 CD 05 1C         [ 4] 2862         CALL     ZLESS
      000FFB CD 03 E7         [ 4] 2863 PARS5:  CALL     QBRAN
      000FFE 10 10                 2864         .word      PARS6
      001000 CD 09 D8         [ 4] 2865         CALL     ONEP
      001003 CD 03 C8         [ 4] 2866         CALL     DONXT
      001006 0F D8                 2867         .word      PARS4
      001008 CD 04 E3         [ 4] 2868         CALL     DUPP
      00100B CD 04 AC         [ 4] 2869         CALL     TOR
      00100E 20 0F            [ 2] 2870         JRA     PARS7
      001010 CD 04 8D         [ 4] 2871 PARS6:  CALL     RFROM
      001013 CD 04 D9         [ 4] 2872         CALL     DROP
      001016 CD 04 E3         [ 4] 2873         CALL     DUPP
      001019 CD 09 D8         [ 4] 2874         CALL     ONEP
      00101C CD 04 AC         [ 4] 2875         CALL     TOR
      00101F CD 05 0D         [ 4] 2876 PARS7:  CALL     OVER
      001022 CD 07 57         [ 4] 2877         CALL     SUBB
      001025 CD 04 8D         [ 4] 2878         CALL     RFROM
      001028 CD 04 8D         [ 4] 2879         CALL     RFROM
      00102B CC 07 57         [ 2] 2880         JP     SUBB
      00102E CD 05 0D         [ 4] 2881 PARS8:  CALL     OVER
      001031 CD 04 8D         [ 4] 2882         CALL     RFROM
      001034 CC 07 57         [ 2] 2883         JP     SUBB
                                   2884 
                                   2885 ;       PARSE   ( c -- b u ; <string> )
                                   2886 ;       Scan input stream and return
                                   2887 ;       counted string delimited by c.
      001037 0F 70                 2888         .word      LINK
                           001039  2889 LINK = . 
      001039 05                    2890         .byte      5
      00103A 50 41 52 53 45        2891         .ascii     "PARSE"
      00103F                       2892 PARSE:
      00103F CD 04 AC         [ 4] 2893         CALL     TOR
      001042 CD 0B 54         [ 4] 2894         CALL     TIB
      001045 CD 05 BE         [ 4] 2895         CALL     INN
      001048 CD 04 3C         [ 4] 2896         CALL     AT
      00104B CD 06 DE         [ 4] 2897         CALL     PLUS    ;current input buffer pointer
      00104E CD 05 CE         [ 4] 2898         CALL     NTIB
      001051 CD 04 3C         [ 4] 2899         CALL     AT
      001054 CD 05 BE         [ 4] 2900         CALL     INN
      001057 CD 04 3C         [ 4] 2901         CALL     AT
      00105A CD 07 57         [ 4] 2902         CALL     SUBB    ;remaining count
      00105D CD 04 8D         [ 4] 2903         CALL     RFROM
      001060 CD 0F 76         [ 4] 2904         CALL     PARS
      001063 CD 05 BE         [ 4] 2905         CALL     INN
      001066 CC 0A B4         [ 2] 2906         JP     PSTOR
                                   2907 
                                   2908 ;       .(      ( -- )
                                   2909 ;       Output following string up to next ) .
      001069 10 39                 2910         .word      LINK
                           00106B  2911 LINK = . 
      00106B 82                    2912 	.byte      IMEDD+2
      00106C 2E 28                 2913         .ascii     ".("
      00106E                       2914 DOTPR:
      00106E CD 03 B4         [ 4] 2915         CALL     DOLIT
      001071 00 29                 2916         .word     41	; ")"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001073 CD 10 3F         [ 4] 2917         CALL     PARSE
      001076 CC 0E 8C         [ 2] 2918         JP     TYPES
                                   2919 
                                   2920 ;       (       ( -- )
                                   2921 ;       Ignore following string up to next ).
                                   2922 ;       A comment.
      001079 10 6B                 2923         .word      LINK
                           00107B  2924 LINK = . 
      00107B 81                    2925 	.byte      IMEDD+1
      00107C 28                    2926         .ascii     "("
      00107D                       2927 PAREN:
      00107D CD 03 B4         [ 4] 2928         CALL     DOLIT
      001080 00 29                 2929         .word     41	; ")"
      001082 CD 10 3F         [ 4] 2930         CALL     PARSE
      001085 CC 06 BE         [ 2] 2931         JP     DDROP
                                   2932 
                                   2933 ;       \       ( -- )
                                   2934 ;       Ignore following text till
                                   2935 ;       end of line.
      001088 10 7B                 2936         .word      LINK
                           00108A  2937 LINK = . 
      00108A 81                    2938 	.byte      IMEDD+1
      00108B 5C                    2939         .ascii     "\"
      00108C                       2940 BKSLA:
      00108C 90 AE 00 0C      [ 2] 2941         ldw y,#UCTIB ; #TIB  
      001090 90 FE            [ 2] 2942         ldw y,(y)
      001092 90 89            [ 2] 2943         pushw y ; count in TIB 
      001094 90 AE 00 0A      [ 2] 2944         ldw y,#UINN ; >IN 
      001098 90 BF 24         [ 2] 2945         ldw YTEMP,y
      00109B 90 85            [ 2] 2946         popw y 
      00109D 91 CF 24         [ 5] 2947         ldw [YTEMP],y
      0010A0 81               [ 4] 2948         ret 
                                   2949 
                                   2950 ;       WORD    ( c -- a ; <string> )
                                   2951 ;       Parse a word from input stream
                                   2952 ;       and copy it to code dictionary.
      0010A1 10 8A                 2953         .word      LINK
                           0010A3  2954 LINK = . 
      0010A3 04                    2955         .byte      4
      0010A4 57 4F 52 44           2956         .ascii     "WORD"
      0010A8                       2957 WORDD:
      0010A8 CD 10 3F         [ 4] 2958         CALL     PARSE
      0010AB CD 0B 32         [ 4] 2959         CALL     HERE
      0010AE CD 09 AD         [ 4] 2960         CALL     CELLP
      0010B1 CC 0B F2         [ 2] 2961         JP     PACKS
                                   2962 
                                   2963 ;       TOKEN   ( -- a ; <string> )
                                   2964 ;       Parse a word from input stream
                                   2965 ;       and copy it to name dictionary.
      0010B4 10 A3                 2966         .word      LINK
                           0010B6  2967 LINK = . 
      0010B6 05                    2968         .byte      5
      0010B7 54 4F 4B 45 4E        2969         .ascii     "TOKEN"
      0010BC                       2970 TOKEN:
      0010BC CD 0A 37         [ 4] 2971         CALL     BLANK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010BF CC 10 A8         [ 2] 2972         JP     WORDD
                                   2973 
                                   2974 ;; Dictionary search
                                   2975 
                                   2976 ;       NAME>   ( na -- ca )
                                   2977 ;       Return a code address given
                                   2978 ;       a name address.
      0010C2 10 B6                 2979         .word      LINK
                           0010C4  2980 LINK = . 
      0010C4 05                    2981         .byte      5
      0010C5 4E 41 4D 45 3E        2982         .ascii     "NAME>"
      0010CA                       2983 NAMET:
      0010CA CD 0B 1B         [ 4] 2984         CALL     COUNT
      0010CD CD 03 B4         [ 4] 2985         CALL     DOLIT
      0010D0 00 1F                 2986         .word      31
      0010D2 CD 05 2F         [ 4] 2987         CALL     ANDD
      0010D5 CC 06 DE         [ 2] 2988         JP     PLUS
                                   2989 
                                   2990 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2991 ;       Compare u cells in two
                                   2992 ;       strings. Return 0 if identical.
      0010D8 10 C4                 2993         .word      LINK
                           0010DA  2994 LINK = . 
      0010DA 05                    2995         .byte       5
      0010DB 53 41 4D 45 3F        2996         .ascii     "SAME?"
      0010E0                       2997 SAMEQ:
      0010E0 CD 09 E5         [ 4] 2998         CALL     ONEM
      0010E3 CD 04 AC         [ 4] 2999         CALL     TOR
      0010E6 20 29            [ 2] 3000         JRA     SAME2
      0010E8 CD 05 0D         [ 4] 3001 SAME1:  CALL     OVER
      0010EB CD 04 A0         [ 4] 3002         CALL     RAT
      0010EE CD 06 DE         [ 4] 3003         CALL     PLUS
      0010F1 CD 04 5A         [ 4] 3004         CALL     CAT
      0010F4 CD 05 0D         [ 4] 3005         CALL     OVER
      0010F7 CD 04 A0         [ 4] 3006         CALL     RAT
      0010FA CD 06 DE         [ 4] 3007         CALL     PLUS
      0010FD CD 04 5A         [ 4] 3008         CALL     CAT
      001100 CD 07 57         [ 4] 3009         CALL     SUBB
      001103 CD 06 8D         [ 4] 3010         CALL     QDUP
      001106 CD 03 E7         [ 4] 3011         CALL     QBRAN
      001109 11 11                 3012         .word      SAME2
      00110B CD 04 8D         [ 4] 3013         CALL     RFROM
      00110E CC 04 D9         [ 2] 3014         JP     DROP
      001111 CD 03 C8         [ 4] 3015 SAME2:  CALL     DONXT
      001114 10 E8                 3016         .word      SAME1
      001116 CC 0A 44         [ 2] 3017         JP     ZERO
                                   3018 
                                   3019 ;       find    ( a va -- ca na | a F )
                                   3020 ;       Search vocabulary for string.
                                   3021 ;       Return ca and na if succeeded.
      001119 10 DA                 3022         .word      LINK
                           00111B  3023 LINK = . 
      00111B 04                    3024         .byte      4
      00111C 46 49 4E 44           3025         .ascii     "FIND"
      001120                       3026 FIND:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001120 CD 04 F3         [ 4] 3027         CALL     SWAPP
      001123 CD 04 E3         [ 4] 3028         CALL     DUPP
      001126 CD 04 5A         [ 4] 3029         CALL     CAT
      001129 CD 05 AF         [ 4] 3030         CALL     TEMP
      00112C CD 04 25         [ 4] 3031         CALL     STORE
      00112F CD 04 E3         [ 4] 3032         CALL     DUPP
      001132 CD 04 3C         [ 4] 3033         CALL     AT
      001135 CD 04 AC         [ 4] 3034         CALL     TOR
      001138 CD 09 AD         [ 4] 3035         CALL     CELLP
      00113B CD 04 F3         [ 4] 3036         CALL     SWAPP
      00113E CD 04 3C         [ 4] 3037 FIND1:  CALL     AT
      001141 CD 04 E3         [ 4] 3038         CALL     DUPP
      001144 CD 03 E7         [ 4] 3039         CALL     QBRAN
      001147 11 7D                 3040         .word      FIND6
      001149 CD 04 E3         [ 4] 3041         CALL     DUPP
      00114C CD 04 3C         [ 4] 3042         CALL     AT
      00114F CD 03 B4         [ 4] 3043         CALL     DOLIT
      001152 1F 7F                 3044         .word      MASKK
      001154 CD 05 2F         [ 4] 3045         CALL     ANDD
      001157 CD 04 A0         [ 4] 3046         CALL     RAT
      00115A CD 05 58         [ 4] 3047         CALL     XORR
      00115D CD 03 E7         [ 4] 3048         CALL     QBRAN
      001160 11 6C                 3049         .word      FIND2
      001162 CD 09 AD         [ 4] 3050         CALL     CELLP
      001165 CD 03 B4         [ 4] 3051         CALL     DOLIT
      001168 FF FF                 3052         .word     0xFFFF
      00116A 20 0C            [ 2] 3053         JRA     FIND3
      00116C CD 09 AD         [ 4] 3054 FIND2:  CALL     CELLP
      00116F CD 05 AF         [ 4] 3055         CALL     TEMP
      001172 CD 04 3C         [ 4] 3056         CALL     AT
      001175 CD 10 E0         [ 4] 3057         CALL     SAMEQ
      001178 CD 03 FE         [ 4] 3058 FIND3:  CALL     BRAN
      00117B 11 8C                 3059         .word      FIND4
      00117D CD 04 8D         [ 4] 3060 FIND6:  CALL     RFROM
      001180 CD 04 D9         [ 4] 3061         CALL     DROP
      001183 CD 04 F3         [ 4] 3062         CALL     SWAPP
      001186 CD 09 BC         [ 4] 3063         CALL     CELLM
      001189 CC 04 F3         [ 2] 3064         JP     SWAPP
      00118C CD 03 E7         [ 4] 3065 FIND4:  CALL     QBRAN
      00118F 11 99                 3066         .word      FIND5
      001191 CD 09 BC         [ 4] 3067         CALL     CELLM
      001194 CD 09 BC         [ 4] 3068         CALL     CELLM
      001197 20 A5            [ 2] 3069         JRA     FIND1
      001199 CD 04 8D         [ 4] 3070 FIND5:  CALL     RFROM
      00119C CD 04 D9         [ 4] 3071         CALL     DROP
      00119F CD 04 F3         [ 4] 3072         CALL     SWAPP
      0011A2 CD 04 D9         [ 4] 3073         CALL     DROP
      0011A5 CD 09 BC         [ 4] 3074         CALL     CELLM
      0011A8 CD 04 E3         [ 4] 3075         CALL     DUPP
      0011AB CD 10 CA         [ 4] 3076         CALL     NAMET
      0011AE CC 04 F3         [ 2] 3077         JP     SWAPP
                                   3078 
                                   3079 ;       NAME?   ( a -- ca na | a F )
                                   3080 ;       Search vocabularies for a string.
      0011B1 11 1B                 3081         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                           0011B3  3082 LINK = . 
      0011B3 05                    3083         .byte      5
      0011B4 4E 41 4D 45 3F        3084         .ascii     "NAME?"
      0011B9                       3085 NAMEQ:
      0011B9 CD 06 23         [ 4] 3086         CALL   CNTXT
      0011BC CC 11 20         [ 2] 3087         JP     FIND
                                   3088 
                                   3089 ;; Terminal response
                                   3090 
                                   3091 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3092 ;       Backup cursor by one character.
      0011BF 11 B3                 3093         .word      LINK
                           0011C1  3094 LINK = . 
      0011C1 02                    3095         .byte      2
      0011C2 5E 48                 3096         .ascii     "^H"
      0011C4                       3097 BKSP:
      0011C4 CD 04 AC         [ 4] 3098         CALL     TOR
      0011C7 CD 05 0D         [ 4] 3099         CALL     OVER
      0011CA CD 04 8D         [ 4] 3100         CALL     RFROM
      0011CD CD 04 F3         [ 4] 3101         CALL     SWAPP
      0011D0 CD 05 0D         [ 4] 3102         CALL     OVER
      0011D3 CD 05 58         [ 4] 3103         CALL     XORR
      0011D6 CD 03 E7         [ 4] 3104         CALL     QBRAN
      0011D9 11 F4                 3105         .word      BACK1
      0011DB CD 03 B4         [ 4] 3106         CALL     DOLIT
      0011DE 00 08                 3107         .word      BKSPP
      0011E0 CD 03 9E         [ 4] 3108         CALL     EMIT
      0011E3 CD 09 E5         [ 4] 3109         CALL     ONEM
      0011E6 CD 0A 37         [ 4] 3110         CALL     BLANK
      0011E9 CD 03 9E         [ 4] 3111         CALL     EMIT
      0011EC CD 03 B4         [ 4] 3112         CALL     DOLIT
      0011EF 00 08                 3113         .word      BKSPP
      0011F1 CC 03 9E         [ 2] 3114         JP     EMIT
      0011F4 81               [ 4] 3115 BACK1:  RET
                                   3116 
                                   3117 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3118 ;       Accept and echo key stroke
                                   3119 ;       and bump cursor.
      0011F5 11 C1                 3120         .word      LINK
                           0011F7  3121 LINK = . 
      0011F7 03                    3122         .byte      3
      0011F8 54 41 50              3123         .ascii     "TAP"
      0011FB                       3124 TAP:
      0011FB CD 04 E3         [ 4] 3125         CALL     DUPP
      0011FE CD 03 9E         [ 4] 3126         CALL     EMIT
      001201 CD 05 0D         [ 4] 3127         CALL     OVER
      001204 CD 04 49         [ 4] 3128         CALL     CSTOR
      001207 CC 09 D8         [ 2] 3129         JP     ONEP
                                   3130 
                                   3131 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3132 ;       Process a key stroke,
                                   3133 ;       CR or backspace.
      00120A 11 F7                 3134         .word      LINK
                           00120C  3135 LINK = . 
      00120C 04                    3136         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00120D 4B 54 41 50           3137         .ascii     "KTAP"
      001211                       3138 KTAP:
      001211 CD 04 E3         [ 4] 3139         CALL     DUPP
      001214 CD 03 B4         [ 4] 3140         CALL     DOLIT
      001217 00 0D                 3141         .word      CRR
      001219 CD 05 58         [ 4] 3142         CALL     XORR
      00121C CD 03 E7         [ 4] 3143         CALL     QBRAN
      00121F 12 37                 3144         .word      KTAP2
      001221 CD 03 B4         [ 4] 3145         CALL     DOLIT
      001224 00 08                 3146         .word      BKSPP
      001226 CD 05 58         [ 4] 3147         CALL     XORR
      001229 CD 03 E7         [ 4] 3148         CALL     QBRAN
      00122C 12 34                 3149         .word      KTAP1
      00122E CD 0A 37         [ 4] 3150         CALL     BLANK
      001231 CC 11 FB         [ 2] 3151         JP     TAP
      001234 CC 11 C4         [ 2] 3152 KTAP1:  JP     BKSP
      001237 CD 04 D9         [ 4] 3153 KTAP2:  CALL     DROP
      00123A CD 04 F3         [ 4] 3154         CALL     SWAPP
      00123D CD 04 D9         [ 4] 3155         CALL     DROP
      001240 CC 04 E3         [ 2] 3156         JP     DUPP
                                   3157 
                                   3158 ;       accept  ( b u -- b u )
                                   3159 ;       Accept characters to input
                                   3160 ;       buffer. Return with actual count.
      001243 12 0C                 3161         .word      LINK
                           001245  3162 LINK = . 
      001245 06                    3163         .byte      6
      001246 41 43 43 45 50 54     3164         .ascii     "ACCEPT"
      00124C                       3165 ACCEP:
      00124C CD 05 0D         [ 4] 3166         CALL     OVER
      00124F CD 06 DE         [ 4] 3167         CALL     PLUS
      001252 CD 05 0D         [ 4] 3168         CALL     OVER
      001255 CD 06 C9         [ 4] 3169 ACCP1:  CALL     DDUP
      001258 CD 05 58         [ 4] 3170         CALL     XORR
      00125B CD 03 E7         [ 4] 3171         CALL     QBRAN
      00125E 12 80                 3172         .word      ACCP4
      001260 CD 0E 2A         [ 4] 3173         CALL     KEY
      001263 CD 04 E3         [ 4] 3174         CALL     DUPP
      001266 CD 0A 37         [ 4] 3175         CALL     BLANK
      001269 CD 03 B4         [ 4] 3176         CALL     DOLIT
      00126C 00 7F                 3177         .word      127
      00126E CD 08 19         [ 4] 3178         CALL     WITHI
      001271 CD 03 E7         [ 4] 3179         CALL     QBRAN
      001274 12 7B                 3180         .word      ACCP2
      001276 CD 11 FB         [ 4] 3181         CALL     TAP
      001279 20 03            [ 2] 3182         JRA     ACCP3
      00127B CD 12 11         [ 4] 3183 ACCP2:  CALL     KTAP
      00127E 20 D5            [ 2] 3184 ACCP3:  JRA     ACCP1
      001280 CD 04 D9         [ 4] 3185 ACCP4:  CALL     DROP
      001283 CD 05 0D         [ 4] 3186         CALL     OVER
      001286 CC 07 57         [ 2] 3187         JP     SUBB
                                   3188 
                                   3189 ;       QUERY   ( -- )
                                   3190 ;       Accept input stream to
                                   3191 ;       terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001289 12 45                 3192         .word      LINK
                                   3193         
                           00128B  3194 LINK = . 
      00128B 05                    3195         .byte      5
      00128C 51 55 45 52 59        3196         .ascii     "QUERY"
      001291                       3197 QUERY:
      001291 CD 0B 54         [ 4] 3198         CALL     TIB
      001294 CD 03 B4         [ 4] 3199         CALL     DOLIT
      001297 00 50                 3200         .word      80
      001299 CD 12 4C         [ 4] 3201         CALL     ACCEP
      00129C CD 05 CE         [ 4] 3202         CALL     NTIB
      00129F CD 04 25         [ 4] 3203         CALL     STORE
      0012A2 CD 04 D9         [ 4] 3204         CALL     DROP
      0012A5 CD 0A 44         [ 4] 3205         CALL     ZERO
      0012A8 CD 05 BE         [ 4] 3206         CALL     INN
      0012AB CC 04 25         [ 2] 3207         JP     STORE
                                   3208 
                                   3209 ;       ABORT   ( -- )
                                   3210 ;       Reset data stack and
                                   3211 ;       jump to QUIT.
      0012AE 12 8B                 3212         .word      LINK
                           0012B0  3213 LINK = . 
      0012B0 05                    3214         .byte      5
      0012B1 41 42 4F 52 54        3215         .ascii     "ABORT"
      0012B6                       3216 ABORT:
      0012B6 CD 13 AD         [ 4] 3217         CALL     PRESE
      0012B9 CC 13 CA         [ 2] 3218         JP     QUIT
                                   3219 
                                   3220 ;       abort"  ( f -- )
                                   3221 ;       Run time routine of ABORT".
                                   3222 ;       Abort with a message.
      0012BC 12 B0                 3223         .word      LINK
                           0012BE  3224 LINK = . 
      0012BE 46                    3225 	.byte      COMPO+6
      0012BF 41 42 4F 52 54        3226         .ascii     "ABORT"
      0012C4 22                    3227         .byte      '"'
      0012C5                       3228 ABORQ:
      0012C5 CD 03 E7         [ 4] 3229         CALL     QBRAN
      0012C8 12 E4                 3230         .word      ABOR2   ;text flag
      0012CA CD 0E C0         [ 4] 3231         CALL     DOSTR
      0012CD CD 0E 62         [ 4] 3232 ABOR1:  CALL     SPACE
      0012D0 CD 0B 1B         [ 4] 3233         CALL     COUNT
      0012D3 CD 0E 8C         [ 4] 3234         CALL     TYPES
      0012D6 CD 03 B4         [ 4] 3235         CALL     DOLIT
      0012D9 00 3F                 3236         .word     63 ; "?"
      0012DB CD 03 9E         [ 4] 3237         CALL     EMIT
      0012DE CD 0E AA         [ 4] 3238         CALL     CR
      0012E1 CC 12 B6         [ 2] 3239         JP     ABORT   ;pass error string
      0012E4 CD 0E C0         [ 4] 3240 ABOR2:  CALL     DOSTR
      0012E7 CC 04 D9         [ 2] 3241         JP     DROP
                                   3242 
                                   3243 ;; The text interpreter
                                   3244 
                                   3245 ;       $INTERPRET      ( a -- )
                                   3246 ;       Interpret a word. If failed,
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3247 ;       try to convert it to an integer.
      0012EA 12 BE                 3248         .word      LINK
                           0012EC  3249 LINK = . 
      0012EC 0A                    3250         .byte      10
      0012ED 24 49 4E 54 45 52 50  3251         .ascii     "$INTERPRET"
             52 45 54
      0012F7                       3252 INTER:
      0012F7 CD 11 B9         [ 4] 3253         CALL     NAMEQ
      0012FA CD 06 8D         [ 4] 3254         CALL     QDUP    ;?defined
      0012FD CD 03 E7         [ 4] 3255         CALL     QBRAN
      001300 13 21                 3256         .word      INTE1
      001302 CD 04 3C         [ 4] 3257         CALL     AT
      001305 CD 03 B4         [ 4] 3258         CALL     DOLIT
      001308 40 00                 3259 	.word       0x4000	; COMPO*256
      00130A CD 05 2F         [ 4] 3260         CALL     ANDD    ;?compile only lexicon bits
      00130D CD 12 C5         [ 4] 3261         CALL     ABORQ
      001310 0D                    3262         .byte      13
      001311 20 63 6F 6D 70 69 6C  3263         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00131E CC 04 0E         [ 2] 3264         JP     EXECU
      001321 CD 0D 57         [ 4] 3265 INTE1:  CALL     NUMBQ   ;convert a number
      001324 CD 03 E7         [ 4] 3266         CALL     QBRAN
      001327 12 CD                 3267         .word    ABOR1
      001329 81               [ 4] 3268         RET
                                   3269 
                                   3270 ;       [       ( -- )
                                   3271 ;       Start  text interpreter.
      00132A 12 EC                 3272         .word      LINK
                           00132C  3273 LINK = . 
      00132C 81                    3274 	.byte      IMEDD+1
      00132D 5B                    3275         .ascii     "["
      00132E                       3276 LBRAC:
      00132E CD 03 B4         [ 4] 3277         CALL   DOLIT
      001331 12 F7                 3278         .word  INTER
      001333 CD 06 01         [ 4] 3279         CALL   TEVAL
      001336 CC 04 25         [ 2] 3280         JP     STORE
                                   3281 
                                   3282 ;       .OK     ( -- )
                                   3283 ;       Display 'ok' while interpreting.
      001339 13 2C                 3284         .word      LINK
                           00133B  3285 LINK = . 
      00133B 03                    3286         .byte      3
      00133C 2E 4F 4B              3287         .ascii     ".OK"
      00133F                       3288 DOTOK:
      00133F CD 03 B4         [ 4] 3289         CALL     DOLIT
      001342 12 F7                 3290         .word      INTER
      001344 CD 06 01         [ 4] 3291         CALL     TEVAL
      001347 CD 04 3C         [ 4] 3292         CALL     AT
      00134A CD 07 7F         [ 4] 3293         CALL     EQUAL
      00134D CD 03 E7         [ 4] 3294         CALL     QBRAN
      001350 13 59                 3295         .word      DOTO1
      001352 CD 0E E9         [ 4] 3296         CALL     DOTQP
      001355 03                    3297         .byte      3
      001356 20 6F 6B              3298         .ascii     " ok"
      001359 CC 0E AA         [ 2] 3299 DOTO1:  JP     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3300 
                                   3301 ;       ?STACK  ( -- )
                                   3302 ;       Abort if stack underflows.
      00135C 13 3B                 3303         .word      LINK
                           00135E  3304 LINK = . 
      00135E 06                    3305         .byte      6
      00135F 3F 53 54 41 43 4B     3306         .ascii     "?STACK"
      001365                       3307 QSTAC: 
      001365 CD 0A 86         [ 4] 3308         CALL     DEPTH
      001368 CD 05 1C         [ 4] 3309         CALL     ZLESS   ;check only for underflow
      00136B CD 12 C5         [ 4] 3310         CALL     ABORQ
      00136E 0B                    3311         .byte      11
      00136F 20 75 6E 64 65 72 66  3312         .ascii     " underflow "
             6C 6F 77 20
      00137A 81               [ 4] 3313         RET
                                   3314 
                                   3315 ;       EVAL    ( -- )
                                   3316 ;       Interpret  input stream.
      00137B 13 5E                 3317         .word      LINK
                           00137D  3318 LINK = . 
      00137D 04                    3319         .byte      4
      00137E 45 56 41 4C           3320         .ascii     "EVAL"
      001382                       3321 EVAL:
      001382 CD 10 BC         [ 4] 3322 EVAL1:  CALL     TOKEN
      001385 CD 04 E3         [ 4] 3323         CALL     DUPP
      001388 CD 04 5A         [ 4] 3324         CALL     CAT     ;?input stream empty
      00138B CD 03 E7         [ 4] 3325         CALL     QBRAN
      00138E 13 9E                 3326         .word    EVAL2
      001390 CD 06 01         [ 4] 3327         CALL     TEVAL
      001393 CD 0B 68         [ 4] 3328         CALL     ATEXE
      001396 CD 13 65         [ 4] 3329         CALL     QSTAC   ;evaluate input, check stack
      001399 CD 03 FE         [ 4] 3330         CALL     BRAN
      00139C 13 82                 3331         .word    EVAL1
      00139E CD 04 D9         [ 4] 3332 EVAL2:  CALL     DROP
      0013A1 CC 13 3F         [ 2] 3333         JP       DOTOK
                                   3334 
                                   3335 ;       PRESET  ( -- )
                                   3336 ;       Reset data stack pointer and
                                   3337 ;       terminal input buffer.
      0013A4 13 7D                 3338         .word      LINK
                           0013A6  3339 LINK = . 
      0013A6 06                    3340         .byte      6
      0013A7 50 52 45 53 45 54     3341         .ascii     "PRESET"
      0013AD                       3342 PRESE:
      0013AD CD 03 B4         [ 4] 3343         CALL     DOLIT
      0013B0 06 80                 3344         .word      SPP
      0013B2 CD 04 D0         [ 4] 3345         CALL     SPSTO
      0013B5 CD 03 B4         [ 4] 3346         CALL     DOLIT
      0013B8 07 00                 3347         .word      TIBB
      0013BA CD 05 CE         [ 4] 3348         CALL     NTIB
      0013BD CD 09 AD         [ 4] 3349         CALL     CELLP
      0013C0 CC 04 25         [ 2] 3350         JP     STORE
                                   3351 
                                   3352 ;       QUIT    ( -- )
                                   3353 ;       Reset return stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3354 ;       and start text interpreter.
      0013C3 13 A6                 3355         .word      LINK
                           0013C5  3356 LINK = . 
      0013C5 04                    3357         .byte      4
      0013C6 51 55 49 54           3358         .ascii     "QUIT"
      0013CA                       3359 QUIT:
      0013CA CD 03 B4         [ 4] 3360         CALL     DOLIT
      0013CD 07 FF                 3361         .word      RPP
      0013CF CD 04 77         [ 4] 3362         CALL     RPSTO   ;reset return stack pointer
      0013D2 CD 13 2E         [ 4] 3363 QUIT1:  CALL     LBRAC   ;start interpretation
      0013D5 CD 12 91         [ 4] 3364 QUIT2:  CALL     QUERY   ;get input
      0013D8 CD 13 82         [ 4] 3365         CALL     EVAL
      0013DB 20 F8            [ 2] 3366         JRA     QUIT2   ;continue till error
                                   3367 
                                   3368 ;; The compiler
                                   3369 
                                   3370 ;       '       ( -- ca )
                                   3371 ;       Search vocabularies for
                                   3372 ;       next word in input stream.
      0013DD 13 C5                 3373         .word      LINK
                           0013DF  3374 LINK = . 
      0013DF 01                    3375         .byte      1
      0013E0 27                    3376         .ascii     "'"
      0013E1                       3377 TICK:
      0013E1 CD 10 BC         [ 4] 3378         CALL     TOKEN
      0013E4 CD 11 B9         [ 4] 3379         CALL     NAMEQ   ;?defined
      0013E7 CD 03 E7         [ 4] 3380         CALL     QBRAN
      0013EA 12 CD                 3381         .word      ABOR1
      0013EC 81               [ 4] 3382         RET     ;yes, push code address
                                   3383 
                                   3384 ;       ALLOT   ( n -- )
                                   3385 ;       Allocate n bytes to RAM 
      0013ED 13 DF                 3386         .word      LINK
                           0013EF  3387         LINK = . 
      0013EF 05                    3388         .byte      5
      0013F0 41 4C 4C 4F 54        3389         .ascii     "ALLOT"
      0013F5                       3390 ALLOT:
      0013F5 CD 06 31         [ 4] 3391         CALL     VPP
                                   3392 ; must update APP_VP each time VP is modidied
      0013F8 CD 0A B4         [ 4] 3393         call PSTOR 
      0013FB CC 1B 6F         [ 2] 3394         jp UPDATVP 
                                   3395 
                                   3396 ;       ,       ( w -- )
                                   3397 ;         Compile an integer into
                                   3398 ;         variable space.
      0013FE 13 EF                 3399         .word      LINK
                           001400  3400 LINK = . 
      001400 01                    3401         .byte      1
      001401 2C                    3402         .ascii     ","
      001402                       3403 COMMA:
      001402 CD 0B 32         [ 4] 3404         CALL     HERE
      001405 CD 04 E3         [ 4] 3405         CALL     DUPP
      001408 CD 09 AD         [ 4] 3406         CALL     CELLP   ;cell boundary
      00140B CD 06 31         [ 4] 3407         CALL     VPP
      00140E CD 04 25         [ 4] 3408         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001411 CC 04 25         [ 2] 3409         JP     STORE
                                   3410 
                                   3411 ;       C,      ( c -- )
                                   3412 ;       Compile a byte into
                                   3413 ;       variables space.
      001414 14 00                 3414        .word      LINK
                           001416  3415 LINK = . 
      001416 02                    3416         .byte      2
      001417 43 2C                 3417         .ascii     "C,"
      001419                       3418 CCOMMA:
      001419 CD 0B 32         [ 4] 3419         CALL     HERE
      00141C CD 04 E3         [ 4] 3420         CALL     DUPP
      00141F CD 09 D8         [ 4] 3421         CALL     ONEP
      001422 CD 06 31         [ 4] 3422         CALL     VPP
      001425 CD 04 25         [ 4] 3423         CALL     STORE
      001428 CC 04 49         [ 2] 3424         JP     CSTOR
                                   3425 
                                   3426 ;       [COMPILE]       ( -- ; <string> )
                                   3427 ;       Compile next immediate
                                   3428 ;       word into code dictionary.
      00142B 14 16                 3429         .word      LINK
                           00142D  3430 LINK = . 
      00142D 89                    3431 	.byte      IMEDD+9
      00142E 5B 43 4F 4D 50 49 4C  3432         .ascii     "[COMPILE]"
             45 5D
      001437                       3433 BCOMP:
      001437 CD 13 E1         [ 4] 3434         CALL     TICK
      00143A CC 16 FD         [ 2] 3435         JP     JSRC
                                   3436 
                                   3437 ;       COMPILE ( -- )
                                   3438 ;       Compile next jsr in
                                   3439 ;       colon list to code dictionary.
      00143D 14 2D                 3440         .word      LINK
                           00143F  3441 LINK = . 
      00143F 47                    3442 	.byte      COMPO+7
      001440 43 4F 4D 50 49 4C 45  3443         .ascii     "COMPILE"
      001447                       3444 COMPI:
      001447 CD 04 8D         [ 4] 3445         CALL     RFROM
      00144A CD 04 E3         [ 4] 3446         CALL     DUPP
      00144D CD 04 3C         [ 4] 3447         CALL     AT
      001450 CD 16 FD         [ 4] 3448         CALL     JSRC    ;compile subroutine
      001453 CD 09 AD         [ 4] 3449         CALL     CELLP
      001456 90 93            [ 1] 3450         ldw y,x 
      001458 90 FE            [ 2] 3451         ldw y,(y)
      00145A 1C 00 02         [ 2] 3452         addw x,#CELLL 
      00145D 90 FC            [ 2] 3453         jp (y)
                                   3454 
                                   3455 ;       LITERAL ( w -- )
                                   3456 ;       Compile tos to dictionary
                                   3457 ;       as an integer literal.
      00145F 14 3F                 3458         .word      LINK
                           001461  3459 LINK = . 
      001461 87                    3460 	.byte      IMEDD+7
      001462 4C 49 54 45 52 41 4C  3461         .ascii     "LITERAL"
      001469                       3462 LITER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001469 CD 14 47         [ 4] 3463         CALL     COMPI
      00146C 03 B4                 3464         .word DOLIT 
      00146E CC 14 02         [ 2] 3465         JP     COMMA
                                   3466 
                                   3467 ;       $,"     ( -- )
                                   3468 ;       Compile a literal string
                                   3469 ;       up to next " .
      001471 14 61                 3470         .word      LINK
                           001473  3471 LINK = . 
      001473 03                    3472         .byte      3
      001474 24 2C 22              3473         .byte     '$',',','"'
      001477                       3474 STRCQ:
      001477 CD 03 B4         [ 4] 3475         CALL     DOLIT
      00147A 00 22                 3476         .word     34	; "
      00147C CD 10 3F         [ 4] 3477         CALL     PARSE
      00147F CD 0B 32         [ 4] 3478         CALL     HERE
      001482 CD 0B F2         [ 4] 3479         CALL     PACKS   ;string to code dictionary
      001485 CD 0B 1B         [ 4] 3480         CALL     COUNT
      001488 CD 06 DE         [ 4] 3481         CALL     PLUS    ;calculate aligned end of string
      00148B CD 06 31         [ 4] 3482         CALL     VPP
      00148E CC 04 25         [ 2] 3483         JP     STORE
                                   3484 
                                   3485 ;; Structures
                                   3486 
                                   3487 ;       FOR     ( -- a )
                                   3488 ;       Start a FOR-NEXT loop
                                   3489 ;       structure in a colon definition.
      001491 14 73                 3490         .word      LINK
                           001493  3491 LINK = . 
      001493 83                    3492 	.byte      IMEDD+3
      001494 46 4F 52              3493         .ascii     "FOR"
      001497                       3494 FOR:
      001497 CD 14 47         [ 4] 3495         CALL     COMPI
      00149A 04 AC                 3496         .word TOR 
      00149C CC 0B 32         [ 2] 3497         JP     HERE
                                   3498 
                                   3499 ;       NEXT    ( a -- )
                                   3500 ;       Terminate a FOR-NEXT loop.
      00149F 14 93                 3501         .word      LINK
                           0014A1  3502 LINK = . 
      0014A1 84                    3503 	.byte      IMEDD+4
      0014A2 4E 45 58 54           3504         .ascii     "NEXT"
      0014A6                       3505 NEXT:
      0014A6 CD 14 47         [ 4] 3506         CALL     COMPI
      0014A9 03 C8                 3507         .word DONXT 
      0014AB CD 06 7D         [ 4] 3508         call ADRADJ
      0014AE CC 14 02         [ 2] 3509         JP     COMMA
                                   3510 
                                   3511 ;       I ( -- n )
                                   3512 ;       stack FOR-NEXT COUNTER 
      0014B1 14 A1                 3513         .word LINK 
                           0014B3  3514         LINK=.
      0014B3 01                    3515         .byte 1 
      0014B4 49                    3516         .ascii "I"
      0014B5                       3517 IFETCH: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0014B5 1D 00 02         [ 2] 3518         subw x,#CELLL 
      0014B8 16 03            [ 2] 3519         ldw y,(3,sp)
      0014BA FF               [ 2] 3520         ldw (x),y 
      0014BB 81               [ 4] 3521         ret 
                                   3522 
                                   3523 ;       BEGIN   ( -- a )
                                   3524 ;       Start an infinite or
                                   3525 ;       indefinite loop structure.
      0014BC 14 B3                 3526         .word      LINK
                           0014BE  3527 LINK = . 
      0014BE 85                    3528 	.byte      IMEDD+5
      0014BF 42 45 47 49 4E        3529         .ascii     "BEGIN"
      0014C4                       3530 BEGIN:
      0014C4 CC 0B 32         [ 2] 3531         JP     HERE
                                   3532 
                                   3533 ;       UNTIL   ( a -- )
                                   3534 ;       Terminate a BEGIN-UNTIL
                                   3535 ;       indefinite loop structure.
      0014C7 14 BE                 3536         .word      LINK
                           0014C9  3537 LINK = . 
      0014C9 85                    3538 	.byte      IMEDD+5
      0014CA 55 4E 54 49 4C        3539         .ascii     "UNTIL"
      0014CF                       3540 UNTIL:
      0014CF CD 14 47         [ 4] 3541         CALL     COMPI
      0014D2 03 E7                 3542         .word    QBRAN 
      0014D4 CD 06 7D         [ 4] 3543         call ADRADJ
      0014D7 CC 14 02         [ 2] 3544         JP     COMMA
                                   3545 
                                   3546 ;       AGAIN   ( a -- )
                                   3547 ;       Terminate a BEGIN-AGAIN
                                   3548 ;       infinite loop structure.
      0014DA 14 C9                 3549         .word      LINK
                           0014DC  3550 LINK = . 
      0014DC 85                    3551 	.byte      IMEDD+5
      0014DD 41 47 41 49 4E        3552         .ascii     "AGAIN"
      0014E2                       3553 AGAIN:
      0014E2 CD 14 47         [ 4] 3554         CALL     COMPI
      0014E5 03 FE                 3555         .word BRAN
      0014E7 CD 06 7D         [ 4] 3556         call ADRADJ 
      0014EA CC 14 02         [ 2] 3557         JP     COMMA
                                   3558 
                                   3559 ;       IF      ( -- A )
                                   3560 ;       Begin a conditional branch.
      0014ED 14 DC                 3561         .word      LINK
                           0014EF  3562 LINK = . 
      0014EF 82                    3563 	.byte      IMEDD+2
      0014F0 49 46                 3564         .ascii     "IF"
      0014F2                       3565 IFF:
      0014F2 CD 14 47         [ 4] 3566         CALL     COMPI
      0014F5 03 E7                 3567         .word QBRAN
      0014F7 CD 0B 32         [ 4] 3568         CALL     HERE
      0014FA CD 0A 44         [ 4] 3569         CALL     ZERO
      0014FD CC 14 02         [ 2] 3570         JP     COMMA
                                   3571 
                                   3572 ;       THEN        ( A -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3573 ;       Terminate a conditional branch structure.
      001500 14 EF                 3574         .word      LINK
                           001502  3575 LINK = . 
      001502 84                    3576 	.byte      IMEDD+4
      001503 54 48 45 4E           3577         .ascii     "THEN"
      001507                       3578 THENN:
      001507 CD 0B 32         [ 4] 3579         CALL     HERE
      00150A CD 06 7D         [ 4] 3580         call ADRADJ 
      00150D CD 04 F3         [ 4] 3581         CALL     SWAPP
      001510 CC 04 25         [ 2] 3582         JP     STORE
                                   3583 
                                   3584 ;       ELSE        ( A -- A )
                                   3585 ;       Start the false clause in an IF-ELSE-THEN structure.
      001513 15 02                 3586         .word      LINK
                           001515  3587 LINK = . 
      001515 84                    3588 	.byte      IMEDD+4
      001516 45 4C 53 45           3589         .ascii     "ELSE"
      00151A                       3590 ELSEE:
      00151A CD 14 47         [ 4] 3591         CALL     COMPI
      00151D 03 FE                 3592         .word BRAN
      00151F CD 0B 32         [ 4] 3593         CALL     HERE
      001522 CD 0A 44         [ 4] 3594         CALL     ZERO
      001525 CD 14 02         [ 4] 3595         CALL     COMMA
      001528 CD 04 F3         [ 4] 3596         CALL     SWAPP
      00152B CD 0B 32         [ 4] 3597         CALL     HERE
      00152E CD 06 7D         [ 4] 3598         call ADRADJ 
      001531 CD 04 F3         [ 4] 3599         CALL     SWAPP
      001534 CC 04 25         [ 2] 3600         JP     STORE
                                   3601 
                                   3602 ;       AHEAD       ( -- A )
                                   3603 ;       Compile a forward branch instruction.
      001537 15 15                 3604         .word      LINK
                           001539  3605 LINK = . 
      001539 85                    3606 	.byte      IMEDD+5
      00153A 41 48 45 41 44        3607         .ascii     "AHEAD"
      00153F                       3608 AHEAD:
      00153F CD 14 47         [ 4] 3609         CALL     COMPI
      001542 03 FE                 3610         .word BRAN
      001544 CD 0B 32         [ 4] 3611         CALL     HERE
      001547 CD 0A 44         [ 4] 3612         CALL     ZERO
      00154A CC 14 02         [ 2] 3613         JP     COMMA
                                   3614 
                                   3615 ;       WHILE       ( a -- A a )
                                   3616 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00154D 15 39                 3617         .word      LINK
                           00154F  3618 LINK = . 
      00154F 85                    3619 	.byte      IMEDD+5
      001550 57 48 49 4C 45        3620         .ascii     "WHILE"
      001555                       3621 WHILE:
      001555 CD 14 47         [ 4] 3622         CALL     COMPI
      001558 03 E7                 3623         .word QBRAN
      00155A CD 0B 32         [ 4] 3624         CALL     HERE
      00155D CD 0A 44         [ 4] 3625         CALL     ZERO
      001560 CD 14 02         [ 4] 3626         CALL     COMMA
      001563 CC 04 F3         [ 2] 3627         JP     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3628 
                                   3629 ;       REPEAT      ( A a -- )
                                   3630 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001566 15 4F                 3631         .word      LINK
                           001568  3632 LINK = . 
      001568 86                    3633         .byte      IMEDD+6
      001569 52 45 50 45 41 54     3634         .ascii     "REPEAT"
      00156F                       3635 REPEA:
      00156F CD 14 47         [ 4] 3636         CALL     COMPI
      001572 03 FE                 3637         .word BRAN
      001574 CD 06 7D         [ 4] 3638         call ADRADJ 
      001577 CD 14 02         [ 4] 3639         CALL     COMMA
      00157A CD 0B 32         [ 4] 3640         CALL     HERE
      00157D CD 06 7D         [ 4] 3641         call ADRADJ 
      001580 CD 04 F3         [ 4] 3642         CALL     SWAPP
      001583 CC 04 25         [ 2] 3643         JP     STORE
                                   3644 
                                   3645 ;       AFT         ( a -- a A )
                                   3646 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001586 15 68                 3647         .word      LINK
                           001588  3648 LINK = . 
      001588 83                    3649 	.byte      IMEDD+3
      001589 41 46 54              3650         .ascii     "AFT"
      00158C                       3651 AFT:
      00158C CD 04 D9         [ 4] 3652         CALL     DROP
      00158F CD 15 3F         [ 4] 3653         CALL     AHEAD
      001592 CD 0B 32         [ 4] 3654         CALL     HERE
      001595 CC 04 F3         [ 2] 3655         JP     SWAPP
                                   3656 
                                   3657 ;       ABORT"      ( -- ; <string> )
                                   3658 ;       Conditional abort with an error message.
      001598 15 88                 3659         .word      LINK
                           00159A  3660 LINK = . 
      00159A 86                    3661 	.byte      IMEDD+6
      00159B 41 42 4F 52 54        3662         .ascii     "ABORT"
      0015A0 22                    3663         .byte      '"'
      0015A1                       3664 ABRTQ:
      0015A1 CD 14 47         [ 4] 3665         CALL     COMPI
      0015A4 12 C5                 3666         .word ABORQ
      0015A6 CC 14 77         [ 2] 3667         JP     STRCQ
                                   3668 
                                   3669 ;       $"     ( -- ; <string> )
                                   3670 ;       Compile an inline string literal.
      0015A9 15 9A                 3671         .word      LINK
                           0015AB  3672 LINK = . 
      0015AB 82                    3673 	.byte      IMEDD+2
      0015AC 24 22                 3674         .byte     '$','"'
      0015AE                       3675 STRQ:
      0015AE CD 14 47         [ 4] 3676         CALL     COMPI
      0015B1 0E DF                 3677         .word STRQP 
      0015B3 CC 14 77         [ 2] 3678         JP     STRCQ
                                   3679 
                                   3680 ;       ."          ( -- ; <string> )
                                   3681 ;       Compile an inline string literal to be typed out at run time.
      0015B6 15 AB                 3682         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           0015B8  3683 LINK = . 
      0015B8 82                    3684 	.byte      IMEDD+2
      0015B9 2E 22                 3685         .byte     '.','"'
      0015BB                       3686 DOTQ:
      0015BB CD 14 47         [ 4] 3687         CALL     COMPI
      0015BE 0E E9                 3688         .word DOTQP 
      0015C0 CC 14 77         [ 2] 3689         JP     STRCQ
                                   3690 
                                   3691 ;; Name compiler
                                   3692 
                                   3693 ;       ?UNIQUE ( a -- a )
                                   3694 ;       Display a warning message
                                   3695 ;       if word already exists.
      0015C3 15 B8                 3696         .word      LINK
                           0015C5  3697 LINK = . 
      0015C5 07                    3698         .byte      7
      0015C6 3F 55 4E 49 51 55 45  3699         .ascii     "?UNIQUE"
      0015CD                       3700 UNIQU:
      0015CD CD 04 E3         [ 4] 3701         CALL     DUPP
      0015D0 CD 11 B9         [ 4] 3702         CALL     NAMEQ   ;?name exists
      0015D3 CD 03 E7         [ 4] 3703         CALL     QBRAN
      0015D6 15 EC                 3704         .word      UNIQ1
      0015D8 CD 0E E9         [ 4] 3705         CALL     DOTQP   ;redef are OK
      0015DB 07                    3706         .byte       7
      0015DC 20 72 65 44 65 66 20  3707         .ascii     " reDef "       
      0015E3 CD 05 0D         [ 4] 3708         CALL     OVER
      0015E6 CD 0B 1B         [ 4] 3709         CALL     COUNT
      0015E9 CD 0E 8C         [ 4] 3710         CALL     TYPES   ;just in case
      0015EC CC 04 D9         [ 2] 3711 UNIQ1:  JP     DROP
                                   3712 
                                   3713 ;       $,n     ( na -- )
                                   3714 ;       Build a new dictionary name
                                   3715 ;       using string at na.
                                   3716 ; compile dans l'espace des variables 
      0015EF 15 C5                 3717         .word      LINK
                           0015F1  3718 LINK = . 
      0015F1 03                    3719         .byte      3
      0015F2 24 2C 6E              3720         .ascii     "$,n"
      0015F5                       3721 SNAME:
      0015F5 CD 04 E3         [ 4] 3722         CALL     DUPP
      0015F8 CD 04 5A         [ 4] 3723         CALL     CAT     ;?null input
      0015FB CD 03 E7         [ 4] 3724         CALL     QBRAN
      0015FE 16 2B                 3725         .word      PNAM1
      001600 CD 15 CD         [ 4] 3726         CALL     UNIQU   ;?redefinition
      001603 CD 04 E3         [ 4] 3727         CALL     DUPP
      001606 CD 0B 1B         [ 4] 3728         CALL     COUNT
      001609 CD 06 DE         [ 4] 3729         CALL     PLUS
      00160C CD 06 31         [ 4] 3730         CALL     VPP
      00160F CD 04 25         [ 4] 3731         CALL     STORE
      001612 CD 04 E3         [ 4] 3732         CALL     DUPP
      001615 CD 06 4F         [ 4] 3733         CALL     LAST
      001618 CD 04 25         [ 4] 3734         CALL     STORE   ;save na for vocabulary link
      00161B CD 09 BC         [ 4] 3735         CALL     CELLM   ;link address
      00161E CD 06 23         [ 4] 3736         CALL     CNTXT
      001621 CD 04 3C         [ 4] 3737         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001624 CD 04 F3         [ 4] 3738         CALL     SWAPP
      001627 CD 04 25         [ 4] 3739         CALL     STORE
      00162A 81               [ 4] 3740         RET     ;save code pointer
      00162B CD 0E DF         [ 4] 3741 PNAM1:  CALL     STRQP
      00162E 05                    3742         .byte      5
      00162F 20 6E 61 6D 65        3743         .ascii     " name" ;null input
      001634 CC 12 CD         [ 2] 3744         JP     ABOR1
                                   3745 
                                   3746 ;; FORTH compiler
                                   3747 
                                   3748 ;       $COMPILE        ( a -- )
                                   3749 ;       Compile next word to
                                   3750 ;       dictionary as a token or literal.
      001637 15 F1                 3751         .word      LINK
                           001639  3752 LINK = . 
      001639 08                    3753         .byte      8
      00163A 24 43 4F 4D 50 49 4C  3754         .ascii     "$COMPILE"
             45
      001642                       3755 SCOMP:
      001642 CD 11 B9         [ 4] 3756         CALL     NAMEQ
      001645 CD 06 8D         [ 4] 3757         CALL     QDUP    ;?defined
      001648 CD 03 E7         [ 4] 3758         CALL     QBRAN
      00164B 16 63                 3759         .word      SCOM2
      00164D CD 04 3C         [ 4] 3760         CALL     AT
      001650 CD 03 B4         [ 4] 3761         CALL     DOLIT
      001653 80 00                 3762         .word     0x8000	;  IMEDD*256
      001655 CD 05 2F         [ 4] 3763         CALL     ANDD    ;?immediate
      001658 CD 03 E7         [ 4] 3764         CALL     QBRAN
      00165B 16 60                 3765         .word      SCOM1
      00165D CC 04 0E         [ 2] 3766         JP     EXECU
      001660 CC 16 FD         [ 2] 3767 SCOM1:  JP     JSRC
      001663 CD 0D 57         [ 4] 3768 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001666 CD 03 E7         [ 4] 3769         CALL     QBRAN
      001669 12 CD                 3770         .word      ABOR1
      00166B CC 14 69         [ 2] 3771         JP     LITER
                                   3772 
                                   3773 ;       OVERT   ( -- )
                                   3774 ;       Link a new word into vocabulary.
      00166E 16 39                 3775         .word      LINK
                           001670  3776 LINK = . 
      001670 05                    3777         .byte      5
      001671 4F 56 45 52 54        3778         .ascii     "OVERT"
      001676                       3779 OVERT:
      001676 CD 06 4F         [ 4] 3780         CALL     LAST
      001679 CD 04 3C         [ 4] 3781         CALL     AT
      00167C CD 06 23         [ 4] 3782         CALL     CNTXT
      00167F CC 04 25         [ 2] 3783         JP     STORE
                                   3784 
                                   3785 ;       ;       ( -- )
                                   3786 ;       Terminate a colon definition.
      001682 16 70                 3787         .word      LINK
                           001684  3788 LINK = . 
      001684 C1                    3789 	.byte      IMEDD+COMPO+1
      001685 3B                    3790         .ascii     ";"
      001686                       3791 SEMIS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           000001  3792 .if OPTIMIZE ; more compact and faster
      001686 CD 03 B4         [ 4] 3793         call DOLIT 
      001689 00 81                 3794         .word 0x81   ; opcode for RET 
      00168B CD 14 19         [ 4] 3795         call CCOMMA 
                           000000  3796 .else
                                   3797         CALL     COMPI
                                   3798         .word EXIT 
                                   3799 .endif 
      00168E CD 13 2E         [ 4] 3800         CALL     LBRAC
      001691 CD 16 76         [ 4] 3801         call OVERT 
      001694 CD 1F A7         [ 4] 3802         CALL FMOVE
      001697 CD 06 8D         [ 4] 3803         call QDUP 
      00169A CD 03 E7         [ 4] 3804         call QBRAN 
      00169D 17 CD                 3805         .word SET_RAMLAST 
      00169F CD 20 2F         [ 4] 3806         CALL UPDATPTR
      0016A2 81               [ 4] 3807         RET 
                                   3808 
                                   3809 
                                   3810 ;       Terminate an ISR definition 
                                   3811 ;       retourn ca of ISR as double
                                   3812 ;       I; ( -- ud )
      0016A3 16 84                 3813         .word LINK 
                           0016A5  3814         LINK=.
      0016A5 C2                    3815         .byte 2+IMEDD+COMPO 
      0016A6 49 3B                 3816         .ascii "I;" 
      0016A8                       3817 ISEMI:
      0016A8 1D 00 02         [ 2] 3818         subw x,#CELLL  
      0016AB 90 AE 00 80      [ 2] 3819         ldw y,#IRET_CODE 
      0016AF FF               [ 2] 3820         ldw (x),y 
      0016B0 CD 14 19         [ 4] 3821         call CCOMMA
      0016B3 CD 13 2E         [ 4] 3822         call LBRAC 
      0016B6 CD 20 6E         [ 4] 3823         call IFMOVE
      0016B9 CD 06 8D         [ 4] 3824         call QDUP 
      0016BC CD 03 E7         [ 4] 3825         CALL QBRAN 
      0016BF 17 CD                 3826         .word SET_RAMLAST
      0016C1 CD 06 3F         [ 4] 3827         CALL CPP
      0016C4 CD 04 3C         [ 4] 3828         call AT 
      0016C7 CD 04 F3         [ 4] 3829         call SWAPP 
      0016CA CD 06 3F         [ 4] 3830         CALL CPP 
      0016CD CD 04 25         [ 4] 3831         call STORE 
      0016D0 CD 1B 58         [ 4] 3832         call UPDATCP 
      0016D3 CD 1B 19         [ 4] 3833         call EEPVP 
      0016D6 CD 04 D9         [ 4] 3834         call DROP 
      0016D9 CD 04 3C         [ 4] 3835         call AT 
      0016DC CD 06 31         [ 4] 3836         call VPP 
      0016DF CD 04 25         [ 4] 3837         call STORE 
      0016E2 CC 0A 44         [ 2] 3838         jp ZERO
      0016E5 81               [ 4] 3839         ret           
                                   3840         
                                   3841 
                                   3842 ;       ]       ( -- )
                                   3843 ;       Start compiling words in
                                   3844 ;       input stream.
      0016E6 16 A5                 3845         .word      LINK
                           0016E8  3846 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0016E8 01                    3847         .byte      1
      0016E9 5D                    3848         .ascii     "]"
      0016EA                       3849 RBRAC:
      0016EA CD 03 B4         [ 4] 3850         CALL   DOLIT
      0016ED 16 42                 3851         .word  SCOMP
      0016EF CD 06 01         [ 4] 3852         CALL   TEVAL
      0016F2 CC 04 25         [ 2] 3853         JP     STORE
                                   3854 
                                   3855 ;       CALL,    ( ca -- )
                                   3856 ;       Compile a subroutine call.
      0016F5 16 E8                 3857         .word      LINK
                           0016F7  3858 LINK = . 
      0016F7 05                    3859         .byte      5
      0016F8 43 41 4C 4C 2C        3860         .ascii     "CALL,"
      0016FD                       3861 JSRC:
      0016FD CD 03 B4         [ 4] 3862         CALL     DOLIT
      001700 00 CD                 3863         .word     CALLL     ;CALL
      001702 CD 14 19         [ 4] 3864         CALL     CCOMMA
      001705 CC 14 02         [ 2] 3865         JP     COMMA
                                   3866 
                                   3867 ;       INIT-OFS ( -- )
                                   3868 ;       compute offset to adjust jump address 
                                   3869 ;       set variable OFFSET 
      001708 16 F7                 3870         .word LINK 
                           00170A  3871         LINK=.
      00170A 08                    3872         .byte 8 
      00170B 49 4E 49 54 2D 4F 46  3873         .ascii "INIT-OFS" 
             53
      001713                       3874 INITOFS:
      001713 CD 05 F0         [ 4] 3875         call TFLASH 
      001716 CD 04 3C         [ 4] 3876         CALL AT 
      001719 CD 04 E3         [ 4] 3877         CALL DUPP 
      00171C CD 03 E7         [ 4] 3878         call QBRAN
      00171F 17 30                 3879         .word 1$
      001721 CD 04 D9         [ 4] 3880         call DROP  
      001724 CD 06 3F         [ 4] 3881         call CPP 
      001727 CD 04 3C         [ 4] 3882         call AT 
      00172A CD 0B 32         [ 4] 3883         call HERE
      00172D CD 07 57         [ 4] 3884         call SUBB 
      001730 CD 06 74         [ 4] 3885 1$:     call OFFSET 
      001733 CC 04 25         [ 2] 3886         jp STORE  
                                   3887 
                                   3888 ;       :       ( -- ; <string> )
                                   3889 ;       Start a new colon definition
                                   3890 ;       using next word as its name.
      001736 17 0A                 3891         .word      LINK
                           001738  3892 LINK = . 
      001738 01                    3893         .byte      1
      001739 3A                    3894         .ascii     ":"
      00173A                       3895 COLON:
      00173A CD 17 13         [ 4] 3896         call INITOFS       
      00173D CD 10 BC         [ 4] 3897         CALL   TOKEN
      001740 CD 15 F5         [ 4] 3898         CALL   SNAME
      001743 CC 16 EA         [ 2] 3899         JP     RBRAC
                                   3900 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3901 ;       I:  ( -- )
                                   3902 ;       Start interrupt service routine definition
                                   3903 ;       those definition have no name.
      001746 17 38                 3904         .word LINK
                           001748  3905         LINK=.
      001748 02                    3906         .byte 2 
      001749 49 3A                 3907         .ascii "I:" 
      00174B                       3908 ICOLON:
      00174B CD 17 13         [ 4] 3909         call INITOFS 
      00174E CC 16 EA         [ 2] 3910         jp RBRAC  
                                   3911 
                                   3912 ;       IMMEDIATE       ( -- )
                                   3913 ;       Make last compiled word
                                   3914 ;       an immediate word.
      001751 17 48                 3915         .word      LINK
                           001753  3916 LINK = . 
      001753 09                    3917         .byte      9
      001754 49 4D 4D 45 44 49 41  3918         .ascii     "IMMEDIATE"
             54 45
      00175D                       3919 IMMED:
      00175D CD 03 B4         [ 4] 3920         CALL     DOLIT
      001760 80 00                 3921         .word     0x8000	;  IMEDD*256
      001762 CD 06 4F         [ 4] 3922         CALL     LAST
      001765 CD 04 3C         [ 4] 3923         CALL     AT
      001768 CD 04 3C         [ 4] 3924         CALL     AT
      00176B CD 05 43         [ 4] 3925         CALL     ORR
      00176E CD 06 4F         [ 4] 3926         CALL     LAST
      001771 CD 04 3C         [ 4] 3927         CALL     AT
      001774 CC 04 25         [ 2] 3928         JP     STORE
                                   3929 
                                   3930 ;; Defining words
                                   3931 
                                   3932 ;       CREATE  ( -- ; <string> )
                                   3933 ;       Compile a new array
                                   3934 ;       without allocating space.
      001777 17 53                 3935         .word      LINK
                           001779  3936 LINK = . 
      001779 06                    3937         .byte      6
      00177A 43 52 45 41 54 45     3938         .ascii     "CREATE"
      001780                       3939 CREAT:
      001780 CD 10 BC         [ 4] 3940         CALL     TOKEN
      001783 CD 15 F5         [ 4] 3941         CALL     SNAME
      001786 CD 16 76         [ 4] 3942         CALL     OVERT        
      001789 CD 14 47         [ 4] 3943         CALL     COMPI 
      00178C 05 90                 3944         .word DOVAR 
      00178E 81               [ 4] 3945         RET
                                   3946 
                                   3947 ;       VARIABLE        ( -- ; <string> )
                                   3948 ;       Compile a new variable
                                   3949 ;       initialized to 0.
      00178F 17 79                 3950         .word      LINK
                           001791  3951 LINK = . 
      001791 08                    3952         .byte      8
      001792 56 41 52 49 41 42 4C  3953         .ascii     "VARIABLE"
             45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      00179A                       3954 VARIA:
                                   3955 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00179A CD 0B 32         [ 4] 3956         CALL HERE
      00179D CD 04 E3         [ 4] 3957         CALL DUPP 
      0017A0 CD 09 AD         [ 4] 3958         CALL CELLP
      0017A3 CD 06 31         [ 4] 3959         CALL VPP 
      0017A6 CD 04 25         [ 4] 3960         CALL STORE
      0017A9 CD 17 80         [ 4] 3961         CALL CREAT
      0017AC CD 04 E3         [ 4] 3962         CALL DUPP
      0017AF CD 14 02         [ 4] 3963         CALL COMMA
      0017B2 CD 0A 44         [ 4] 3964         CALL ZERO
      0017B5 CD 04 F3         [ 4] 3965         call SWAPP 
      0017B8 CD 04 25         [ 4] 3966         CALL STORE
      0017BB CD 1F A7         [ 4] 3967         CALL FMOVE ; move definition to FLASH
      0017BE CD 06 8D         [ 4] 3968         CALL QDUP 
      0017C1 CD 03 E7         [ 4] 3969         CALL QBRAN 
      0017C4 17 CD                 3970         .word SET_RAMLAST   
      0017C6 CD 1B 6F         [ 4] 3971         call UPDATVP  ; don't update if variable kept in RAM.
      0017C9 CD 20 2F         [ 4] 3972         CALL UPDATPTR
      0017CC 81               [ 4] 3973         RET         
      0017CD                       3974 SET_RAMLAST: 
      0017CD CD 06 4F         [ 4] 3975         CALL LAST 
      0017D0 CD 04 3C         [ 4] 3976         CALL AT 
      0017D3 CD 06 62         [ 4] 3977         CALL RAMLAST 
      0017D6 CC 04 25         [ 2] 3978         jp STORE  
                                   3979 
                                   3980 
                                   3981 ;       CONSTANT  ( n -- ; <string> )
                                   3982 ;       Compile a new constant 
                                   3983 ;       n CONSTANT name 
      0017D9 17 91                 3984         .word LINK 
                           0017DB  3985         LINK=. 
      0017DB 08                    3986         .byte 8 
      0017DC 43 4F 4E 53 54 41 4E  3987         .ascii "CONSTANT" 
             54
      0017E4                       3988 CONSTANT:          
      0017E4 CD 10 BC         [ 4] 3989         CALL TOKEN
      0017E7 CD 15 F5         [ 4] 3990         CALL SNAME 
      0017EA CD 16 76         [ 4] 3991         CALL OVERT 
      0017ED CD 14 47         [ 4] 3992         CALL COMPI 
      0017F0 18 0E                 3993         .word DOCONST
      0017F2 CD 14 02         [ 4] 3994         CALL COMMA 
      0017F5 CD 1F A7         [ 4] 3995         CALL FMOVE
      0017F8 CD 06 8D         [ 4] 3996         CALL QDUP 
      0017FB CD 03 E7         [ 4] 3997         CALL QBRAN 
      0017FE 17 CD                 3998         .word SET_RAMLAST  
      001800 CD 20 2F         [ 4] 3999         CALL UPDATPTR  
      001803 81               [ 4] 4000 1$:     RET          
                                   4001 
                                   4002 ; CONSTANT runtime semantic 
                                   4003 ; doCONST  ( -- n )
      001804 17 DB                 4004         .word LINK 
                           001806  4005         LINK=.
      001806 07                    4006         .byte 7
      001807 44 4F 43 4F 4E 53 54  4007         .ascii "DOCONST"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00180E                       4008 DOCONST:
      00180E 1D 00 02         [ 2] 4009         subw x,#CELLL
      001811 90 85            [ 2] 4010         popw y 
      001813 90 FE            [ 2] 4011         ldw y,(y) 
      001815 FF               [ 2] 4012         ldw (x),y 
      001816 81               [ 4] 4013         ret 
                                   4014 
                                   4015 
                                   4016 ;; Tools
                                   4017 
                                   4018 ;       _TYPE   ( b u -- )
                                   4019 ;       Display a string. Filter
                                   4020 ;       non-printing characters.
      001817 18 06                 4021         .word      LINK
                           001819  4022 LINK = . 
      001819 05                    4023         .byte      5
      00181A 5F 54 59 50 45        4024         .ascii     "_TYPE"
      00181F                       4025 UTYPE:
      00181F CD 04 AC         [ 4] 4026         CALL     TOR     ;start count down loop
      001822 20 0F            [ 2] 4027         JRA     UTYP2   ;skip first pass
      001824 CD 04 E3         [ 4] 4028 UTYP1:  CALL     DUPP
      001827 CD 04 5A         [ 4] 4029         CALL     CAT
      00182A CD 0A 6E         [ 4] 4030         CALL     TCHAR
      00182D CD 03 9E         [ 4] 4031         CALL     EMIT    ;display only printable
      001830 CD 09 D8         [ 4] 4032         CALL     ONEP    ;increment address
      001833 CD 03 C8         [ 4] 4033 UTYP2:  CALL     DONXT
      001836 18 24                 4034         .word      UTYP1   ;loop till done
      001838 CC 04 D9         [ 2] 4035         JP     DROP
                                   4036 
                                   4037 ;       dm+     ( a u -- a )
                                   4038 ;       Dump u bytes from ,
                                   4039 ;       leaving a+u on  stack.
      00183B 18 19                 4040         .word      LINK
                           00183D  4041 LINK = . 
      00183D 03                    4042         .byte      3
      00183E 64 6D 2B              4043         .ascii     "dm+"
      001841                       4044 DUMPP:
      001841 CD 05 0D         [ 4] 4045         CALL     OVER
      001844 CD 03 B4         [ 4] 4046         CALL     DOLIT
      001847 00 04                 4047         .word      4
      001849 CD 0F 12         [ 4] 4048         CALL     UDOTR   ;display address
      00184C CD 0E 62         [ 4] 4049         CALL     SPACE
      00184F CD 04 AC         [ 4] 4050         CALL     TOR     ;start count down loop
      001852 20 11            [ 2] 4051         JRA     PDUM2   ;skip first pass
      001854 CD 04 E3         [ 4] 4052 PDUM1:  CALL     DUPP
      001857 CD 04 5A         [ 4] 4053         CALL     CAT
      00185A CD 03 B4         [ 4] 4054         CALL     DOLIT
      00185D 00 03                 4055         .word      3
      00185F CD 0F 12         [ 4] 4056         CALL     UDOTR   ;display numeric data
      001862 CD 09 D8         [ 4] 4057         CALL     ONEP    ;increment address
      001865 CD 03 C8         [ 4] 4058 PDUM2:  CALL     DONXT
      001868 18 54                 4059         .word      PDUM1   ;loop till done
      00186A 81               [ 4] 4060         RET
                                   4061 
                                   4062 ;       DUMP    ( a u -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4063 ;       Dump u bytes from a,
                                   4064 ;       in a formatted manner.
      00186B 18 3D                 4065         .word      LINK
                           00186D  4066 LINK = . 
      00186D 04                    4067         .byte      4
      00186E 44 55 4D 50           4068         .ascii     "DUMP"
      001872                       4069 DUMP:
      001872 CD 05 A0         [ 4] 4070         CALL     BASE
      001875 CD 04 3C         [ 4] 4071         CALL     AT
      001878 CD 04 AC         [ 4] 4072         CALL     TOR
      00187B CD 0C EA         [ 4] 4073         CALL     HEX     ;save radix, set hex
      00187E CD 03 B4         [ 4] 4074         CALL     DOLIT
      001881 00 10                 4075         .word      16
      001883 CD 08 FE         [ 4] 4076         CALL     SLASH   ;change count to lines
      001886 CD 04 AC         [ 4] 4077         CALL     TOR     ;start count down loop
      001889 CD 0E AA         [ 4] 4078 DUMP1:  CALL     CR
      00188C CD 03 B4         [ 4] 4079         CALL     DOLIT
      00188F 00 10                 4080         .word      16
      001891 CD 06 C9         [ 4] 4081         CALL     DDUP
      001894 CD 18 41         [ 4] 4082         CALL     DUMPP   ;display numeric
      001897 CD 06 9E         [ 4] 4083         CALL     ROT
      00189A CD 06 9E         [ 4] 4084         CALL     ROT
      00189D CD 0E 62         [ 4] 4085         CALL     SPACE
      0018A0 CD 0E 62         [ 4] 4086         CALL     SPACE
      0018A3 CD 18 1F         [ 4] 4087         CALL     UTYPE   ;display printable characters
      0018A6 CD 03 C8         [ 4] 4088         CALL     DONXT
      0018A9 18 89                 4089         .word      DUMP1   ;loop till done
      0018AB CD 04 D9         [ 4] 4090 DUMP3:  CALL     DROP
      0018AE CD 04 8D         [ 4] 4091         CALL     RFROM
      0018B1 CD 05 A0         [ 4] 4092         CALL     BASE
      0018B4 CC 04 25         [ 2] 4093         JP     STORE   ;restore radix
                                   4094 
                                   4095 ;       .S      ( ... -- ... )
                                   4096 ;        Display  contents of stack.
      0018B7 18 6D                 4097         .word      LINK
                           0018B9  4098 LINK = . 
      0018B9 02                    4099         .byte      2
      0018BA 2E 53                 4100         .ascii     ".S"
      0018BC                       4101 DOTS:
      0018BC CD 0E AA         [ 4] 4102         CALL     CR
      0018BF CD 0A 86         [ 4] 4103         CALL     DEPTH   ;stack depth
      0018C2 CD 04 AC         [ 4] 4104         CALL     TOR     ;start count down loop
      0018C5 20 09            [ 2] 4105         JRA     DOTS2   ;skip first pass
      0018C7 CD 04 A0         [ 4] 4106 DOTS1:  CALL     RAT
      0018CA CD 0A 9D         [ 4] 4107 	CALL     PICK
      0018CD CD 0F 45         [ 4] 4108         CALL     DOT     ;index stack, display contents
      0018D0 CD 03 C8         [ 4] 4109 DOTS2:  CALL     DONXT
      0018D3 18 C7                 4110         .word      DOTS1   ;loop till done
      0018D5 CD 0E E9         [ 4] 4111         CALL     DOTQP
      0018D8 05                    4112         .byte      5
      0018D9 20 3C 73 70 20        4113         .ascii     " <sp "
      0018DE 81               [ 4] 4114         RET
                                   4115 
                                   4116 ;       >NAME   ( ca -- na | F )
                                   4117 ;       Convert code address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4118 ;       to a name address.
      0018DF 18 B9                 4119         .word      LINK
                           0018E1  4120 LINK = . 
      0018E1 05                    4121         .byte      5
      0018E2 3E 4E 41 4D 45        4122         .ascii     ">NAME"
      0018E7                       4123 TNAME:
      0018E7 CD 06 23         [ 4] 4124         CALL     CNTXT   ;vocabulary link
      0018EA CD 04 3C         [ 4] 4125 TNAM2:  CALL     AT
      0018ED CD 04 E3         [ 4] 4126         CALL     DUPP    ;?last word in a vocabulary
      0018F0 CD 03 E7         [ 4] 4127         CALL     QBRAN
      0018F3 19 0E                 4128         .word      TNAM4
      0018F5 CD 06 C9         [ 4] 4129         CALL     DDUP
      0018F8 CD 10 CA         [ 4] 4130         CALL     NAMET
      0018FB CD 05 58         [ 4] 4131         CALL     XORR    ;compare
      0018FE CD 03 E7         [ 4] 4132         CALL     QBRAN
      001901 19 08                 4133         .word      TNAM3
      001903 CD 09 BC         [ 4] 4134         CALL     CELLM   ;continue with next word
      001906 20 E2            [ 2] 4135         JRA     TNAM2
      001908 CD 04 F3         [ 4] 4136 TNAM3:  CALL     SWAPP
      00190B CC 04 D9         [ 2] 4137         JP     DROP
      00190E CD 06 BE         [ 4] 4138 TNAM4:  CALL     DDROP
      001911 CC 0A 44         [ 2] 4139         JP     ZERO
                                   4140 
                                   4141 ;       .ID     ( na -- )
                                   4142 ;        Display  name at address.
      001914 18 E1                 4143         .word      LINK
                           001916  4144 LINK = . 
      001916 03                    4145         .byte      3
      001917 2E 49 44              4146         .ascii     ".ID"
      00191A                       4147 DOTID:
      00191A CD 06 8D         [ 4] 4148         CALL     QDUP    ;if zero no name
      00191D CD 03 E7         [ 4] 4149         CALL     QBRAN
      001920 19 30                 4150         .word      DOTI1
      001922 CD 0B 1B         [ 4] 4151         CALL     COUNT
      001925 CD 03 B4         [ 4] 4152         CALL     DOLIT
      001928 00 1F                 4153         .word      0x1F
      00192A CD 05 2F         [ 4] 4154         CALL     ANDD    ;mask lexicon bits
      00192D CC 18 1F         [ 2] 4155         JP     UTYPE
      001930 CD 0E E9         [ 4] 4156 DOTI1:  CALL     DOTQP
      001933 09                    4157         .byte      9
      001934 20 6E 6F 4E 61 6D 65  4158         .ascii     " noName"
      00193B 81               [ 4] 4159         RET
                                   4160 
                           000000  4161 WANT_SEE=0
                           000000  4162 .if WANT_SEE 
                                   4163 ;       SEE     ( -- ; <string> )
                                   4164 ;       A simple decompiler.
                                   4165 ;       Updated for byte machines.
                                   4166         .word      LINK
                                   4167 LINK = . 
                                   4168         .byte      3
                                   4169         .ascii     "SEE"
                                   4170 SEE:
                                   4171         CALL     TICK    ;starting address
                                   4172         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173         CALL     ONEM
                                   4174 SEE1:   CALL     ONEP
                                   4175         CALL     DUPP
                                   4176         CALL     AT
                                   4177         CALL     DUPP
                                   4178         CALL     QBRAN
                                   4179         .word    SEE2
                                   4180         CALL     TNAME   ;?is it a name
                                   4181 SEE2:   CALL     QDUP    ;name address or zero
                                   4182         CALL     QBRAN
                                   4183         .word    SEE3
                                   4184         CALL     SPACE
                                   4185         CALL     DOTID   ;display name
                                   4186         CALL     ONEP
                                   4187         JRA      SEE4
                                   4188 SEE3:   CALL     DUPP
                                   4189         CALL     CAT
                                   4190         CALL     UDOT    ;display number
                                   4191 SEE4:   CALL     NUFQ    ;user control
                                   4192         CALL     QBRAN
                                   4193         .word    SEE1
                                   4194         JP     DROP
                                   4195 .endif ; WANT_SEE 
                                   4196 
                                   4197 ;       WORDS   ( -- )
                                   4198 ;       Display names in vocabulary.
      00193C 19 16                 4199         .word      LINK
                           00193E  4200 LINK = . 
      00193E 05                    4201         .byte      5
      00193F 57 4F 52 44 53        4202         .ascii     "WORDS"
      001944                       4203 WORDS:
      001944 CD 0E AA         [ 4] 4204         CALL     CR
      001947 CD 06 23         [ 4] 4205         CALL     CNTXT   ;only in context
      00194A CD 04 3C         [ 4] 4206 WORS1:  CALL     AT
      00194D CD 06 8D         [ 4] 4207         CALL     QDUP    ;?at end of list
      001950 CD 03 E7         [ 4] 4208         CALL     QBRAN
      001953 19 66                 4209         .word      WORS2
      001955 CD 04 E3         [ 4] 4210         CALL     DUPP
      001958 CD 0E 62         [ 4] 4211         CALL     SPACE
      00195B CD 19 1A         [ 4] 4212         CALL     DOTID   ;display a name
      00195E CD 09 BC         [ 4] 4213         CALL     CELLM
      001961 CD 03 FE         [ 4] 4214         CALL     BRAN
      001964 19 4A                 4215         .word      WORS1
      001966 81               [ 4] 4216 WORS2:  RET
                                   4217 
                                   4218         
                                   4219 ;; Hardware reset
                                   4220 
                                   4221 ;       hi      ( -- )
                                   4222 ;       Display sign-on message.
      001967 19 3E                 4223         .word      LINK
                           001969  4224 LINK = . 
      001969 02                    4225         .byte      2
      00196A 68 69                 4226         .ascii     "hi"
      00196C                       4227 HI:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      00196C CD 0E AA         [ 4] 4228         CALL     CR
      00196F CD 0E E9         [ 4] 4229         CALL     DOTQP   ;initialize I/O
      001972 0F                    4230         .byte      15
      001973 73 74 6D 38 65 46 6F  4231         .ascii     "stm8eForth v"
             72 74 68 20 76
      00197F 33                    4232 	.byte      VER+'0'
      001980 2E                    4233         .byte      '.' 
      001981 30                    4234 	.byte      EXT+'0' ;version
      001982 CC 0E AA         [ 2] 4235         JP     CR
                                   4236 
                           000000  4237 WANT_DEBUG=0
                           000000  4238 .if WANT_DEBUG 
                                   4239 ;       DEBUG      ( -- )
                                   4240 ;       Display sign-on message.
                                   4241 ;        .word      LINK
                                   4242 LINK = . 
                                   4243         .byte      5
                                   4244         .ascii     "DEBUG"
                                   4245 DEBUG:
                                   4246 	CALL DOLIT
                                   4247 	.word 0x65
                                   4248 	CALL EMIT
                                   4249 	CALL DOLIT
                                   4250 	.word 0
                                   4251  	CALL ZLESS 
                                   4252 	CALL DOLIT
                                   4253 	.word 0xFFFE
                                   4254 	CALL ZLESS 
                                   4255 	CALL UPLUS 
                                   4256  	CALL DROP 
                                   4257 	CALL DOLIT
                                   4258 	.word 3
                                   4259 	CALL UPLUS 
                                   4260 	CALL UPLUS 
                                   4261  	CALL DROP
                                   4262 	CALL DOLIT
                                   4263 	.word 0x43
                                   4264 	CALL UPLUS 
                                   4265  	CALL DROP
                                   4266 	CALL EMIT
                                   4267 	CALL DOLIT
                                   4268 	.word 0x4F
                                   4269 	CALL DOLIT
                                   4270 	.word 0x6F
                                   4271  	CALL XORR
                                   4272 	CALL DOLIT
                                   4273 	.word 0xF0
                                   4274  	CALL ANDD
                                   4275 	CALL DOLIT
                                   4276 	.word 0x4F
                                   4277  	CALL ORR
                                   4278 	CALL EMIT
                                   4279 	CALL DOLIT
                                   4280 	.word 8
                                   4281 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4282 	.word 6
                                   4283  	CALL SWAPP
                                   4284 	CALL OVER
                                   4285 	CALL XORR
                                   4286 	CALL DOLIT
                                   4287 	.word 3
                                   4288 	CALL ANDD 
                                   4289 	CALL ANDD
                                   4290 	CALL DOLIT
                                   4291 	.word 0x70
                                   4292 	CALL UPLUS 
                                   4293 	CALL DROP
                                   4294 	CALL EMIT
                                   4295 	CALL DOLIT
                                   4296 	.word 0
                                   4297 	CALL QBRAN
                                   4298 	.word DEBUG1
                                   4299 	CALL DOLIT
                                   4300 	.word 0x3F
                                   4301 DEBUG1:
                                   4302 	CALL DOLIT
                                   4303 	.word 0xFFFF
                                   4304 	CALL QBRAN
                                   4305 	.word DEBUG2
                                   4306 	CALL DOLIT
                                   4307 	.word 0x74
                                   4308 	CALL BRAN
                                   4309 	.word DEBUG3
                                   4310 DEBUG2:
                                   4311 	CALL DOLIT
                                   4312 	.word 0x21
                                   4313 DEBUG3:
                                   4314 	CALL EMIT
                                   4315 	CALL DOLIT
                                   4316 	.word 0x68
                                   4317 	CALL DOLIT
                                   4318 	.word 0x80
                                   4319 	CALL STORE
                                   4320 	CALL DOLIT
                                   4321 	.word 0x80
                                   4322 	CALL AT
                                   4323 	CALL EMIT
                                   4324 	CALL DOLIT
                                   4325 	.word 0x4D
                                   4326 	CALL TOR
                                   4327 	CALL RAT
                                   4328 	CALL RFROM
                                   4329 	CALL ANDD
                                   4330 	CALL EMIT
                                   4331 	CALL DOLIT
                                   4332 	.word 0x61
                                   4333 	CALL DOLIT
                                   4334 	.word 0xA
                                   4335 	CALL TOR
                                   4336 DEBUG4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4337 	CALL DOLIT
                                   4338 	.word 1
                                   4339 	CALL UPLUS 
                                   4340 	CALL DROP
                                   4341 	CALL DONXT
                                   4342 	.word DEBUG4
                                   4343 	CALL EMIT
                                   4344 	CALL DOLIT
                                   4345 	.word 0x656D
                                   4346 	CALL DOLIT
                                   4347 	.word 0x100
                                   4348 	CALL UMSTA
                                   4349 	CALL SWAPP
                                   4350 	CALL DOLIT
                                   4351 	.word 0x100
                                   4352 	CALL UMSTA
                                   4353 	CALL SWAPP 
                                   4354 	CALL DROP
                                   4355 	CALL EMIT
                                   4356 	CALL EMIT
                                   4357 	CALL DOLIT
                                   4358 	.word 0x2043
                                   4359 	CALL DOLIT
                                   4360 	.word 0
                                   4361 	CALL DOLIT
                                   4362 	.word 0x100
                                   4363 	CALL UMMOD
                                   4364 	CALL EMIT
                                   4365 	CALL EMIT
                                   4366 	;JP ORIG
                                   4367 	RET
                                   4368 .endif ; WANT_DEBUG 
                                   4369 
                                   4370 
                                   4371 ;       'BOOT   ( -- a )
                                   4372 ;       The application startup vector.
      001985 19 69                 4373         .word      LINK
                           001987  4374 LINK = . 
      001987 05                    4375         .byte      5
      001988 27 42 4F 4F 54        4376         .ascii     "'BOOT"
      00198D                       4377 TBOOT:
      00198D CD 05 90         [ 4] 4378         CALL     DOVAR
      001990 40 02                 4379         .word    APP_RUN      ;application to boot
                                   4380 
                                   4381 ;       COLD    ( -- )
                                   4382 ;       The hilevel cold start s=ence.
      001992 19 87                 4383         .word      LINK
                           001994  4384         LINK = . 
      001994 04                    4385         .byte      4
      001995 43 4F 4C 44           4386         .ascii     "COLD"
      001999                       4387 COLD:
                           000000  4388 .if WANT_DEBUG
                                   4389         CALL DEBUG
                                   4390 .endif ; WANT_DEBUG
      001999 CD 03 B4         [ 4] 4391 COLD1:  CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00199C 00 2F                 4392         .word      UZERO
      00199E CD 03 B4         [ 4] 4393 	CALL     DOLIT
      0019A1 00 06                 4394         .word      UPP
      0019A3 CD 03 B4         [ 4] 4395         CALL     DOLIT
      0019A6 00 1A                 4396 	.word      UEND-UZERO
      0019A8 CD 0B 7F         [ 4] 4397         CALL     CMOVE   ;initialize user area
                                   4398 
                                   4399 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019AB 90 CE 40 02      [ 2] 4400         ldw y,APP_RUN 
      0019AF 26 0B            [ 1] 4401         jrne 0$
      0019B1 1D 00 02         [ 2] 4402         subw x,#CELLL 
      0019B4 90 AE 19 6C      [ 2] 4403         ldw y,#HI  
      0019B8 FF               [ 2] 4404         ldw (x),y
      0019B9 CD 1B 47         [ 4] 4405         call UPDATRUN 
      0019BC                       4406 0$:        
                                   4407 ; update LAST with APP_LAST 
                                   4408 ; if APP_LAST > LAST else do the opposite
      0019BC 90 CE 40 00      [ 2] 4409         ldw y,APP_LAST 
      0019C0 90 B3 1A         [ 2] 4410         cpw y,ULAST 
      0019C3 22 05            [ 1] 4411         jrugt 1$ 
                                   4412 ; save LAST at APP_LAST  
      0019C5 CD 1B 2F         [ 4] 4413         call UPDATLAST 
      0019C8 20 06            [ 2] 4414         jra 2$
      0019CA                       4415 1$: ; update LAST with APP_LAST 
      0019CA 90 BF 1A         [ 2] 4416         ldw ULAST,y
      0019CD 90 BF 14         [ 2] 4417         ldw UCNTXT,y
      0019D0                       4418 2$:  
                                   4419 ; update APP_CP if < app_space 
      0019D0 90 CE 40 04      [ 2] 4420         ldw y,APP_CP  
      0019D4 90 B3 18         [ 2] 4421         cpw y,UCP   
      0019D7 24 06            [ 1] 4422         jruge 3$ 
      0019D9 CD 1B 58         [ 4] 4423         call UPDATCP
      0019DC 90 BE 18         [ 2] 4424         ldw y,UCP   
      0019DF                       4425 3$:
      0019DF 90 BF 18         [ 2] 4426         ldw UCP,y                 
                                   4427 ; update UVP with APP_VP  
                                   4428 ; if APP_VP>UVP else do the opposite 
      0019E2 90 CE 40 06      [ 2] 4429         ldw y,APP_VP 
      0019E6 90 B3 16         [ 2] 4430         cpw y,UVP 
      0019E9 22 05            [ 1] 4431         jrugt 4$
      0019EB CD 1B 6F         [ 4] 4432         call UPDATVP 
      0019EE 20 03            [ 2] 4433         jra 6$
      0019F0                       4434 4$: ; update UVP with APP_VP 
      0019F0 90 BF 16         [ 2] 4435         ldw UVP,y 
      0019F3                       4436 6$:      
      0019F3 CD 13 AD         [ 4] 4437         CALL     PRESE   ;initialize data stack and TIB
      0019F6 CD 19 8D         [ 4] 4438         CALL     TBOOT
      0019F9 CD 0B 68         [ 4] 4439         CALL     ATEXE   ;application boot
      0019FC CD 16 76         [ 4] 4440         CALL     OVERT
      0019FF CC 13 CA         [ 2] 4441         JP     QUIT    ;start interpretation
                                   4442 
                           000001  4443 WANT_MATH_CONST = 1 
                           000001  4444 .if WANT_MATH_CONST 
                                   4445         ; irrational constants 
                                   4446         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4447         .include "../const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      001A02 19 94                   31         .word LINK 
                           001A04    32         LINK=.
      001A04 02                      33         .byte 2
      001A05 50 49                   34         .ascii "PI" 
      001A07                         35 PII:
      001A07 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      001A0A 90 AE 01 63      [ 2]   37         ldw y,#355 
      001A0E EF 02            [ 2]   38         ldw (2,x),y 
      001A10 90 AE 00 71      [ 2]   39         ldw y,#113 
      001A14 FF               [ 2]   40         ldw (x),y 
      001A15 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      001A16 1A 04                   48         .word LINK 
                           001A18    49         LINK=.
      001A18 05                      50         .byte 5 
      001A19 53 51 52 54 32          51         .ascii "SQRT2" 
      001A1E                         52 SQRT2:
      001A1E 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      001A21 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A25 EF 02            [ 2]   55         ldw (2,x),y 
      001A27 90 AE 36 24      [ 2]   56         ldw y,#13860 
      001A2B FF               [ 2]   57         ldw (x),y 
      001A2C 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      001A2D 1A 18                   63         .word LINK 
                           001A2F    64         LINK=.
      001A2F 05                      65         .byte 5
      001A30 53 51 52 54 33          66         .ascii "SQRT3" 
      001A35                         67 SQRT3: 
      001A35 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001A38 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001A3C EF 02            [ 2]   70     ldw (2,x),y 
      001A3E 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      001A42 FF               [ 2]   72     ldw (x),y 
      001A43 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      001A44 1A 2F                   78         .word LINK 
                           001A46    79         LINK=.
      001A46 01                      80         .byte 1
      001A47 45                      81         .ascii "E" 
      001A48                         82 ENEPER:
      001A48 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001A4B 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001A4F EF 02            [ 2]   85     ldw (2,x),y 
      001A51 90 AE 29 32      [ 2]   86     ldw y,#10546 
      001A55 FF               [ 2]   87     ldw (x),y 
      001A56 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001A57 1A 46                   92         .word LINK 
                           001A59    93         LINK=.
      001A59 06                      94         .byte 6 
      001A5A 53 51 52 54 31 30       95         .ascii "SQRT10" 
      001A60                         96 SQRT10:
      001A60 1D 00 04         [ 2]   97     subw x,#2*CELLL
      001A63 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001A67 EF 02            [ 2]   99     ldw (2,x),y 
      001A69 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001A6D FF               [ 2]  101     ldw (x),y 
      001A6E 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001A6F 1A 59                  107         .word LINK 
                           001A71   108         LINK=. 
      001A71 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A72 31 32 52 54 32         110         .ascii "12RT2"
      001A77                        111 RT12_2:
      001A77 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A7A 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A7E EF 02            [ 2]  114     ldw (2,x),y 
      001A80 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A84 FF               [ 2]  116     ldw (x),y 
      001A85 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A86 1A 71                  122         .word LINK 
                           001A88   123         LINK=.
      001A88 05                     124         .byte 5 
      001A89 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001A8E                        126 LOG2S:
      001A8E 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A91 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001A95 EF 02            [ 2]  129     ldw (2,x),y 
      001A97 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001A9B FF               [ 2]  131     ldw (x),y 
      001A9C 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001A9D 1A 88                  137         .word LINK 
                           001A9F   138         LINK=.
      001A9F 04                     139         .byte 4 
      001AA0 4C 4E 32 53            140         .ascii "LN2S" 
      001AA4                        141 LN2S: 
      001AA4 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001AA7 90 AE 01 E5      [ 2]  143     ldw y,#485
      001AAB EF 02            [ 2]  144     ldw (2,x),y 
      001AAD 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001AB1 FF               [ 2]  146     ldw (x),y 
      001AB2 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4448 .endif ; WANT_MATH_CONST
                                   4449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4450         .include "flash_disco.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize PTR16 
                                     28 ; PTR!  ( a -- )
                                     29 ;---------------------------------
      001AB3 1A 9F                   30     .word LINK 
                           001AB5    31     LINK=.
      001AB5 04                      32     .byte 4 
      001AB6 50 54 52 21             33     .ascii "PTR!"
      001ABA                         34 PSTO:
      001ABA 90 93            [ 1]   35     ldw y,x
      001ABC 90 FE            [ 2]   36     ldw y,(y)
      001ABE 90 BF 32         [ 2]   37     ldw PTR16,y  
      001AC1 1C 00 02         [ 2]   38     addw x,#CELLL 
      001AC4 81               [ 4]   39     ret 
                                     40 
                                     41 ;-----------------------------------
                                     42 ; return EEPROM base address 
                                     43 ;  EEPROM  ( -- a )
                                     44 ;-----------------------------------
      001AC5 1A B5                   45     .word LINK 
                           001AC7    46 LINK=.
      001AC7 06                      47     .byte 6 
      001AC8 45 45 50 52 4F 4D       48     .ascii "EEPROM"
      001ACE                         49 EEPROM: 
      001ACE 90 AE 40 00      [ 2]   50     ldw y,#EEPROM_BASE
      001AD2 1D 00 02         [ 2]   51     subw x,#CELLL 
      001AD5 FF               [ 2]   52     ldw (x),y 
      001AD6 81               [ 4]   53     ret
                                     54 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                     55 ;---------------------------------
                                     56 ; return APP_LAST address 
                                     57 ; EEP-LAST ( -- a )
                                     58 ;---------------------------------
      001AD7 1A C7                   59 	.word LINK 
                           001AD9    60 	LINK=.
      001AD9 08                      61 	.byte 8 
      001ADA 45 45 50 2D 4C 41 53    62 	.ascii "EEP-LAST"
             54
      001AE2                         63 EEPLAST:
      001AE2 1D 00 02         [ 2]   64 	subw x,#CELLL 
      001AE5 90 AE 40 00      [ 2]   65 	ldw y,#APP_LAST 
      001AE9 FF               [ 2]   66 	ldw (x),y 
      001AEA 81               [ 4]   67 	ret 
                                     68 
                                     69 ;----------------------------------
                                     70 ; return APP_RUN address 	
                                     71 ; EEP-RUN ( -- a )
                                     72 ;-----------------------------------
      001AEB 1A D9                   73 	.word LINK 
                           001AED    74 	LINK=.
      001AED 07                      75 	.byte 7
      001AEE 45 45 50 2D 52 55 4E    76 	.ascii "EEP-RUN"
      001AF5                         77 EEPRUN:
      001AF5 1D 00 02         [ 2]   78 	subw x,#CELLL 
      001AF8 90 AE 40 02      [ 2]   79 	ldw y,#APP_RUN 
      001AFC FF               [ 2]   80 	ldw (x),y 
      001AFD 81               [ 4]   81 	ret 
                                     82 
                                     83 ;------------------------------------
                                     84 ; return APP_CP address  
                                     85 ; EEP-CP ( -- a )
                                     86 ;------------------------------------
      001AFE 1A ED                   87 	.word LINK
                           001B00    88 	LINK=.
      001B00 06                      89 	.byte 6 
      001B01 45 45 50 2D 43 50       90 	.ascii "EEP-CP"
      001B07                         91 EEPCP:
      001B07 1D 00 02         [ 2]   92 	subw x,#CELLL 
      001B0A 90 AE 40 04      [ 2]   93 	ldw y,#APP_CP  
      001B0E FF               [ 2]   94 	ldw (x),y 
      001B0F 81               [ 4]   95 	ret 
                                     96 
                                     97 ;------------------------------------
                                     98 ; return APP_VP address 
                                     99 ; EEP-VP ( -- a )
                                    100 ;-------------------------------------
      001B10 1B 00                  101 	.word LINK
                           001B12   102 	LINK=.
      001B12 06                     103 	.byte 6
      001B13 45 45 50 2D 56 50      104 	.ascii "EEP-VP"
      001B19                        105 EEPVP:
      001B19 1D 00 02         [ 2]  106 	subw x,#CELLL 
      001B1C 90 AE 40 06      [ 2]  107 	ldw y,#APP_VP  
      001B20 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B21 81               [ 4]  109 	ret 
                                    110 
                                    111 ;----------------------------------
                                    112 ; update APP_LAST with LAST 
                                    113 ; UPDAT-LAST ( -- )
                                    114 ;----------------------------------
      001B22 1B 12                  115 	.word LINK 
                           001B24   116 	LINK=.
      001B24 0A                     117 	.byte 10
      001B25 55 50 44 41 54 2D 4C   118 	.ascii "UPDAT-LAST"
             41 53 54
      001B2F                        119 UPDATLAST:
      001B2F CD 06 4F         [ 4]  120 	call LAST
      001B32 CD 04 3C         [ 4]  121 	call AT  
      001B35 CD 1A E2         [ 4]  122 	call EEPLAST
      001B38 CC 1C 96         [ 2]  123 	jp EE_STORE 
                                    124 
                                    125 ;---------------------------------
                                    126 ; update APP_RUN 
                                    127 ; UPDAT-RUN ( a -- )
                                    128 ;---------------------------------
      001B3B 1B 24                  129 	.word LINK
                           001B3D   130 	LINK=.
      001B3D 09                     131 	.byte 9
      001B3E 55 50 44 41 54 2D 52   132 	.ascii "UPDAT-RUN"
             55 4E
      001B47                        133 UPDATRUN:
      001B47 CD 1A F5         [ 4]  134 	call EEPRUN
      001B4A CC 1C 96         [ 2]  135 	jp EE_STORE 
                                    136 	
                                    137 ;---------------------------------
                                    138 ; update APP_CP with CP 
                                    139 ; UPDAT-CP ( -- )
                                    140 ;---------------------------------
      001B4D 1B 3D                  141 	.word LINK 
                           001B4F   142 	LINK=.
      001B4F 08                     143 	.byte 8 
      001B50 55 50 44 41 54 2D 43   144 	.ascii "UPDAT-CP"
             50
      001B58                        145 UPDATCP:
      001B58 CD 06 3F         [ 4]  146 	call CPP 
      001B5B CD 04 3C         [ 4]  147 	call AT 
      001B5E CD 1B 07         [ 4]  148 	call EEPCP 
      001B61 CC 1C 96         [ 2]  149 	jp EE_STORE 
                                    150 
                                    151 ;----------------------------------
                                    152 ; update APP_VP with VP 
                                    153 ; UPDAT-VP ( -- )
                                    154 ;----------------------------------
      001B64 1B 4F                  155 	.word LINK
                           001B66   156 	LINK=.
      001B66 08                     157 	.byte 8 
      001B67 55 50 44 41 54 2D 56   158 	.ascii "UPDAT-VP" 
             50
      001B6F                        159 UPDATVP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B6F CD 06 31         [ 4]  160 	call VPP 
      001B72 CD 04 3C         [ 4]  161 	call AT
      001B75 CD 1B 19         [ 4]  162 	call EEPVP 
      001B78 CC 1C 96         [ 2]  163 	jp EE_STORE
                                    164 	
                                    165 
                                    166 ;----------------------------------
                                    167 ; unlock EEPROM/OPT for writing/erasing
                                    168 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    169 ;  UNLKEE   ( -- )
                                    170 ;----------------------------------
      001B7B 1B 66                  171     .word LINK 
                           001B7D   172 LINK=.
      001B7D 06                     173     .byte 6 
      001B7E 55 4E 4C 4B 45 45      174     .ascii "UNLKEE"
      001B84                        175 unlock_eeprom:
      001B84 35 00 50 5B      [ 1]  176 	mov FLASH_CR2,#0 
      001B88 35 FF 50 5C      [ 1]  177 	mov FLASH_NCR2,#0xFF 
      001B8C 35 AE 50 64      [ 1]  178 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B90 35 56 50 64      [ 1]  179     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B94 72 07 50 5F FB   [ 2]  180 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B99 81               [ 4]  181 	ret
                                    182 
                                    183 ;----------------------------------
                                    184 ; unlock FLASH for writing/erasing
                                    185 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    186 ; UNLKFL  ( -- )
                                    187 ;----------------------------------
      001B9A 1B 7D                  188     .word LINK 
                           001B9C   189 LINK=. 
      001B9C 06                     190     .byte 6 
      001B9D 55 4E 4C 4B 46 4C      191     .ascii "UNLKFL"    
      001BA3                        192 unlock_flash:
      001BA3 35 00 50 5B      [ 1]  193 	mov FLASH_CR2,#0 
      001BA7 35 FF 50 5C      [ 1]  194 	mov FLASH_NCR2,#0xFF 
      001BAB 35 56 50 62      [ 1]  195 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BAF 35 AE 50 62      [ 1]  196 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BB3 72 03 50 5F FB   [ 2]  197 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001BB8 81               [ 4]  198 	ret
                                    199 
                                    200 ;-----------------------------
                                    201 ; unlock FLASH or EEPROM 
                                    202 ; according to PTR16 address 
                                    203 ;  UNLOCK ( -- )
                                    204 ;-----------------------------
      001BB9 1B 9C                  205 	.word LINK 
                           001BBB   206 	LINK=.
      001BBB 06                     207 	.byte 6
      001BBC 55 4E 4C 4F 43 4B      208 	.ascii "UNLOCK"
      001BC2                        209 unlock:
                                    210 ; put addr[15:0] in Y, for bounds check.
      001BC2 90 BE 32         [ 2]  211 	ldw y,PTR16   ; Y=addr15:0
      001BC5 90 A3 80 00      [ 2]  212     cpw y,#FLASH_BASE
      001BC9 24 10            [ 1]  213     jruge 4$
      001BCB 90 A3 40 00      [ 2]  214 	cpw y,#EEPROM_BASE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BCF 25 0D            [ 1]  215     jrult 9$
      001BD1 90 A3 48 7F      [ 2]  216 	cpw y,#OPTION_END 
      001BD5 22 07            [ 1]  217 	jrugt 9$
      001BD7 CD 1B 84         [ 4]  218 	call unlock_eeprom
      001BDA 81               [ 4]  219 	ret 
      001BDB CD 1B A3         [ 4]  220 4$: call unlock_flash
      001BDE 81               [ 4]  221 9$: ret 
                                    222 
                                    223 ;-------------------------
                                    224 ; lock write access to 
                                    225 ; FLASH and EEPROM 
                                    226 ; LOCK ( -- )
                                    227 ;-------------------------
      001BDF 1B BB                  228 	.word LINK 
                           001BE1   229 	LINK=.
      001BE1 04                     230 	.byte 4 
      001BE2 4C 4F 43 4B            231 	.ascii "LOCK" 
      001BE6                        232 lock: 
      001BE6 72 13 50 5F      [ 1]  233 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BEA 72 17 50 5F      [ 1]  234 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BEE 81               [ 4]  235 	ret 
                                    236 
                                    237 ;-------------------------
                                    238 ; increment PTR16 
                                    239 ; INC-PTR16 ( -- )
                                    240 ;-------------------------
      001BEF 1B E1                  241 	.word LINK 
                           001BF1   242 	LINK=. 
      001BF1 08                     243 	.byte 8 
      001BF2 49 4E 43 2D 50 54 52   244 	.ascii "INC-PTR16" 
             31 36
      001BFB                        245 INC_PTR16:
      001BFB 90 89            [ 2]  246 	pushw y 
      001BFD 90 BE 32         [ 2]  247 	ldw y,PTR16 
      001C00 90 5C            [ 2]  248 	incw y 
      001C02 90 BF 32         [ 2]  249 	ldw PTR16,y
      001C05 90 85            [ 2]  250 	popw y 
      001C07 81               [ 4]  251 	ret 
                                    252 
                                    253 
                                    254 ;----------------------------
                                    255 ; write a byte at address pointed 
                                    256 ; by PTR16 and increment PTR16.
                                    257 ; Expect pointer already initialized 
                                    258 ; and memory unlocked 
                                    259 ; WR-BYTE ( c -- )
                                    260 ;----------------------------
      001C08 1B F1                  261 	.word LINK 
                           001C0A   262 	LINK=. 
      001C0A 07                     263 	.byte 7 
      001C0B 57 52 2D 42 59 54 45   264 	.ascii "WR-BYTE" 
                                    265 
      001C12                        266 WR_BYTE:
      001C12 90 93            [ 1]  267 	ldw y,x 
      001C14 90 FE            [ 2]  268 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001C16 1C 00 02         [ 2]  269 	addw x,#CELLL 
      001C19 90 9F            [ 1]  270 	ld a,yl
      001C1B 92 C7 32         [ 4]  271 	ld [PTR16],a
      001C1E 72 05 50 5F FB   [ 2]  272 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C23 20 D6            [ 2]  273 	jra INC_PTR16 
                                    274 
                                    275 ;---------------------------------------
                                    276 ; write a word at address pointed 
                                    277 ; by PTR16 and incrment PTR16 
                                    278 ; Expect pointer already initialized 
                                    279 ; WR-WORD ( w -- )
                                    280 ;---------------------------------------
      001C25 1C 0A                  281 	.word LINK 
                           001C27   282 	LINK=.
      001C27 07                     283 	.byte 7
      001C28 57 52 2D 57 4F 52 44   284 	.ascii "WR-WORD"
      001C2F                        285 WR_WORD:
      001C2F 90 93            [ 1]  286 	ldw y,x 
      001C31 90 FE            [ 2]  287 	ldw y,(y)
      001C33 90 89            [ 2]  288 	pushw y 
      001C35 90 5E            [ 1]  289 	swapw y 
      001C37 FF               [ 2]  290 	ldw (x),y 
      001C38 CD 1C 12         [ 4]  291 	call WR_BYTE 
      001C3B 90 85            [ 2]  292 	popw y 
      001C3D 1D 00 02         [ 2]  293 	subw x,#CELLL
      001C40 FF               [ 2]  294 	ldw (x),y 
      001C41 CD 1C 12         [ 4]  295 	call WR_BYTE
      001C44 CC 1B E6         [ 2]  296 	jp lock 
                                    297 
                                    298 
                                    299 ;---------------------------------------
                                    300 ; write a byte to FLASH or EEPROM/OPTION  
                                    301 ; EEC!  (c a -- )
                                    302 ;---------------------------------------
      001C47 1C 27                  303     .word LINK 
                           001C49   304 	LINK=.
      001C49 04                     305     .byte 4 
      001C4A 45 45 43 21            306     .ascii "EEC!"
                                    307 	; local variables 
                           000001   308 	BTW = 1   ; byte to write offset on stack
                           000002   309     OPT = 2 
                           000002   310 	VSIZE = 2
      001C4E                        311 EE_CSTORE:
      001C4E 52 02            [ 2]  312 	sub sp,#VSIZE
      001C50 CD 1A BA         [ 4]  313     call PSTO
      001C53 E6 01            [ 1]  314 	ld a,(1,x)
      001C55 43               [ 1]  315 	cpl a 
      001C56 6B 01            [ 1]  316 	ld (BTW,sp),a ; byte to write 
      001C58 0F 02            [ 1]  317 	clr (OPT,sp)  ; OPTION flag
      001C5A CD 1B C2         [ 4]  318 	call unlock 
                                    319 	; check if option
      001C5D 90 BE 32         [ 2]  320 	ldw y,PTR16 
      001C60 90 A3 48 00      [ 2]  321 	cpw y,#OPTION_BASE
      001C64 2B 10            [ 1]  322 	jrmi 2$
      001C66 90 A3 48 80      [ 2]  323 	cpw y,#OPTION_END+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C6A 2A 0A            [ 1]  324 	jrpl 2$
      001C6C 03 02            [ 1]  325 	cpl (OPT,sp)
                                    326 	; OPTION WRITE require this unlock 
      001C6E 72 1E 50 5B      [ 1]  327     bset FLASH_CR2,#FLASH_CR2_OPT
      001C72 72 1F 50 5C      [ 1]  328     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001C76                        329 2$: 
      001C76 CD 1C 12         [ 4]  330 	call WR_BYTE 	
      001C79 0D 02            [ 1]  331 	tnz (OPT,sp)
      001C7B 27 0D            [ 1]  332 	jreq 3$ 
      001C7D 7B 01            [ 1]  333     ld a,(BTW,sp)
      001C7F 90 5F            [ 1]  334     clrw y
      001C81 90 97            [ 1]  335 	ld yl,a 
      001C83 1D 00 02         [ 2]  336 	subw x,#CELLL 
      001C86 FF               [ 2]  337 	ldw (x),y 
      001C87 CD 1C 12         [ 4]  338 	call WR_BYTE
      001C8A                        339 3$: 
      001C8A CD 1B E6         [ 4]  340 	call lock 
      001C8D 5B 02            [ 2]  341 	addw sp,#VSIZE 
      001C8F 81               [ 4]  342     ret
                                    343 
                                    344 ;------------------------------
                                    345 ; write integer in FLASH|EEPROM
                                    346 ; EE! ( n a -- )
                                    347 ;------------------------------
      001C90 1C 49                  348 	.word LINK 
                           001C92   349 	LINK=.
      001C92 03                     350 	.byte 3 
      001C93 45 45 21               351 	.ascii "EE!"
      001C96                        352 EE_STORE:
      001C96 CD 1A BA         [ 4]  353 	call PSTO 
      001C99 CD 1B C2         [ 4]  354 	call unlock 
      001C9C CC 1C 2F         [ 2]  355 	jp WR_WORD 
                                    356 
                                    357 
                                    358 ;----------------------------
                                    359 ; Erase flash memory row 
                                    360 ; stm8s105c6 as 128 bytes rows
                                    361 ; ROW-ERASE ( a -- )
                                    362 ;----------------------------
      001C9F 1C 92                  363 	.word LINK 
                           001CA1   364 	LINK=. 
      001CA1 09                     365 	.byte 9 
      001CA2 52 4F 57 2D 45 52 41   366 	.ascii "ROW-ERASE" 
             53 45
      001CAB                        367 row_erase:
      001CAB CD 1A BA         [ 4]  368 	call PSTO
                                    369 ;code must be execute from RAM 
                                    370 ;copy routine to PAD 
      001CAE 1D 00 02         [ 2]  371 	subw x,#CELLL 
      001CB1 90 AE 1C F8      [ 2]  372 	ldw y,#row_erase_proc
      001CB5 FF               [ 2]  373 	ldw (x),y 
      001CB6 CD 0B 43         [ 4]  374 	call PAD 
      001CB9 90 AE 1D 1B      [ 2]  375 	ldw y,#row_erase_proc_end 
      001CBD 72 A2 1C F8      [ 2]  376 	subw y,#row_erase_proc
      001CC1 1D 00 02         [ 2]  377 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001CC4 FF               [ 2]  378 	ldw (x),y 
      001CC5 CD 0B 7F         [ 4]  379 	call CMOVE 
      001CC8                        380 block_erase:
      001CC8 90 BE 32         [ 2]  381 	ldw y,PTR16
      001CCB 90 A3 21 00      [ 2]  382 	cpw y,#app_space 
      001CCF 2A 13            [ 1]  383 	jrpl erase_flash 
                                    384 ; erase EEPROM block
      001CD1 90 A3 40 00      [ 2]  385 	cpw y,#EEPROM_BASE 
      001CD5 24 01            [ 1]  386 	jruge 1$
      001CD7 81               [ 4]  387 	ret ; bad address 
      001CD8 90 A3 43 FF      [ 2]  388 1$: cpw y,#EEPROM_END 
      001CDC 23 01            [ 2]  389 	jrule 2$ 
      001CDE 81               [ 4]  390 	ret ; bad address 
      001CDF                        391 2$:	
      001CDF CD 1B 84         [ 4]  392 	call unlock_eeprom 
      001CE2 20 03            [ 2]  393 	jra proceed_erase
                                    394 ; erase flash block:
      001CE4                        395 erase_flash:
      001CE4 CD 1B A3         [ 4]  396 	call unlock_flash 
      001CE7                        397 proceed_erase:
      001CE7 CD 0B 43         [ 4]  398 	call PAD 
      001CEA 90 93            [ 1]  399 	ldw y,x
      001CEC 90 FE            [ 2]  400 	ldw y,(y)
      001CEE 1C 00 02         [ 2]  401 	addw x,#CELLL  
      001CF1 90 FD            [ 4]  402 	call (y) 
      001CF3 72 17 50 5F      [ 1]  403 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001CF7 81               [ 4]  404 	ret 
                                    405 
                                    406 ; this routine is to be copied to PAD 
      001CF8                        407 row_erase_proc:
      001CF8 35 20 50 5B      [ 1]  408 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001CFC 35 DF 50 5C      [ 1]  409 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D00 4F               [ 1]  410 	clr a 
      001D01 90 5F            [ 1]  411 	clrw y 
      001D03 91 D7 32         [ 4]  412 	ld ([PTR16],y),a
      001D06 90 5C            [ 2]  413     incw y
      001D08 91 D7 32         [ 4]  414 	ld ([PTR16],y),a
      001D0B 90 5C            [ 2]  415     incw y
      001D0D 91 D7 32         [ 4]  416 	ld ([PTR16],y),a
      001D10 90 5C            [ 2]  417     incw y
      001D12 91 D7 32         [ 4]  418 	ld ([PTR16],y),a
      001D15 72 05 50 5F FB   [ 2]  419 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D1A 81               [ 4]  420 	ret
      001D1B                        421 row_erase_proc_end:
                                    422 
                                    423 
                                    424 ;-----------------------------------
                                    425 ; block programming must be 
                                    426 ; executed from RAM 
                                    427 ; initial contidions: 
                                    428 ; 		memory unlocked
                                    429 ;       PTR16 initialized 
                                    430 ; input: 
                                    431 ;    x   buffer address 
                                    432 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                           000001   433 	BCNT=1 
      001D1B                        434 copy_buffer:
      001D1B 4B 80            [ 1]  435 	push #BLOCK_SIZE  
                                    436 ;enable block programming 
      001D1D 72 10 50 5B      [ 1]  437 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D21 72 11 50 5C      [ 1]  438 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D25 90 5F            [ 1]  439 	clrw y
      001D27 F6               [ 1]  440 1$:	ld a,(x)
      001D28 91 D7 32         [ 4]  441 	ld ([PTR16],y),a
      001D2B 5C               [ 2]  442 	incw x 
      001D2C 90 5C            [ 2]  443 	incw y 
      001D2E 0A 01            [ 1]  444 	dec (BCNT,sp)
      001D30 26 F5            [ 1]  445 	jrne 1$
                                    446 ; wait EOP bit 
      001D32 72 05 50 5F FB   [ 2]  447 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D37 84               [ 1]  448 	pop a ; remove BCNT from stack 
      001D38 81               [ 4]  449 	ret 
      001D39                        450 copy_buffer_end:
                                    451 
                                    452 ;-------------------------
                                    453 ; move program_row to RAM 
                                    454 ; in TIB 
                                    455 ;------------------------
      001D39                        456 copy_prog_to_ram:
      001D39 1D 00 06         [ 2]  457 	subw x,#6
      001D3C 90 AE 1D 1B      [ 2]  458 	ldw y,#copy_buffer 
      001D40 EF 04            [ 2]  459 	ldw (4,x),y 
      001D42 90 AE 07 00      [ 2]  460 	ldw y,#TIBBASE
      001D46 EF 02            [ 2]  461 	ldw (2,x),y 
      001D48 90 AE 1D 39      [ 2]  462 	ldw y,#copy_buffer_end 
      001D4C 72 A2 1D 1B      [ 2]  463 	subw y,#copy_buffer  
      001D50 FF               [ 2]  464 	ldw (x),y 
      001D51 CD 0B 7F         [ 4]  465 	call CMOVE 
      001D54 81               [ 4]  466 	ret 
                                    467 
                                    468 
                                    469 ;-----------------------------
                                    470 ; write a row in FLASH/EEPROM 
                                    471 ; WR-ROW ( ab ar -- )
                                    472 ; ab -> address 128 byte buffer to write 
                                    473 ; ar ->  row address in FLASH|EEPROM 
                                    474 ;-----------------------------
      001D55 1C A1                  475 	.word LINK 
                           001D57   476 	LINK=.
      001D57 06                     477 	.byte 6 
      001D58 57 52 2D 52 4F 57      478 	.ascii "WR-ROW"
      001D5E                        479 WR_ROW:
      001D5E CD 1A BA         [ 4]  480 	call PSTO
                                    481 ; align to FLASH block 
      001D61 A6 80            [ 1]  482 	ld a,#0x80 
      001D63 B4 33            [ 1]  483 	and a,PTR8 
      001D65 B7 33            [ 1]  484 	ld PTR8,a  
      001D67 CD 1D 39         [ 4]  485 	call copy_prog_to_ram
      001D6A CD 1B C2         [ 4]  486 	call unlock
      001D6D 90 93            [ 1]  487 	ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D6F 90 FE            [ 2]  488 	ldw y,(y)
      001D71 1C 00 02         [ 2]  489 	addw x,#CELLL 
      001D74 89               [ 2]  490 	pushw x 
      001D75 93               [ 1]  491 	ldw x,y ; buffer address in x 
      001D76 CD 07 00         [ 4]  492 	call TIBBASE
      001D79 CD 1B E6         [ 4]  493 	call lock
      001D7C 85               [ 2]  494 	popw x 
      001D7D 81               [ 4]  495 	ret 
                                    496 
                                    497 ;-------------------------------------
                                    498 ; change value of OPTION register 
                                    499 ; SET-OPT (c n -- ) 
                                    500 ; c new value.
                                    501 ; n OPT  number {1..7}
                                    502 ;--------------------------------------
      001D7E 1D 57                  503 		.word LINK 
                           001D80   504 		LINK=.
      001D80 07                     505 		.byte 7 
      001D81 53 45 54 2D 4F 50 54   506 		.ascii "SET-OPT" 
      001D88                        507 set_option: 
      001D88 90 93            [ 1]  508 		ldw y,x 
      001D8A 90 FE            [ 2]  509 		ldw y,(y)
      001D8C 27 06            [ 1]  510 		jreq 1$
      001D8E 90 A3 00 07      [ 2]  511 		cpw y,#7 
      001D92 23 04            [ 2]  512 		jrule 2$ 
                                    513 ; invalid OPTION number 		
      001D94 1C 00 04         [ 2]  514 1$:		addw x,#2*CELLL
      001D97 81               [ 4]  515 		ret
      001D98 90 58            [ 2]  516 2$:		sllw y 
      001D9A 72 A9 47 FF      [ 2]  517 		addw y,#OPTION_BASE-1
      001D9E FF               [ 2]  518 		ldw (x),y 
      001D9F CD 1C 4E         [ 4]  519 		call EE_CSTORE
      001DA2 81               [ 4]  520 		ret 
                                    521 
                                    522 
                                    523 
                                    524 ;--------------------------------------
                                    525 ; reset system to its original state 
                                    526 ; before any user modification
                                    527 ; PRISTINE ( -- )
                                    528 ;-------------------------------------
      001DA3 1D 80                  529 	.word LINK  
                           001DA5   530 	LINK=.
      001DA5 08                     531 	.byte 8 
      001DA6 50 52 49 53 54 49 4E   532 	.ascii "PRISTINE"
             45
      001DAE                        533 pristine:
                                    534 ;;; erase EEPROM
      001DAE CD 1A CE         [ 4]  535 	call EEPROM 
      001DB1 CD 04 E3         [ 4]  536 1$:	call DUPP 
      001DB4 CD 1C AB         [ 4]  537 	call row_erase
      001DB7 90 93            [ 1]  538 	ldw y,x 
      001DB9 90 FE            [ 2]  539 	ldw y,(y)
      001DBB 72 A9 00 80      [ 2]  540 	addw y,#BLOCK_SIZE
      001DBF FF               [ 2]  541 	ldw (x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001DC0 90 A3 48 00      [ 2]  542 	cpw y,#OPTION_BASE 
      001DC4 25 EB            [ 1]  543 	jrult 1$
                                    544 ;;; reset OPTION to default values
      001DC6 90 AE 00 01      [ 2]  545 	ldw y,#1 ; OPT1 
      001DCA FF               [ 2]  546 2$:	ldw (x),y   
      001DCB 90 5F            [ 1]  547 	clrw y 
      001DCD EF 02            [ 2]  548 	ldw (2,x),y  ; ( 0 1 -- ) 
      001DCF CD 06 C9         [ 4]  549 	call DDUP    ; ( 0 1 0 1 -- )  
      001DD2 CD 1D 88         [ 4]  550 	call set_option
      001DD5 90 93            [ 1]  551 	ldw y,x 
      001DD7 90 FE            [ 2]  552 	ldw y,(y)
      001DD9 90 5C            [ 2]  553 	incw y  ; next OPTION 
      001DDB 90 A3 00 08      [ 2]  554 	cpw y,#8 
      001DDF 25 E9            [ 1]  555 	jrult 2$
                                    556 ;;; erase first row of app_space 	
      001DE1 CD 04 D9         [ 4]  557 	call DROP 
      001DE4 90 AE 21 00      [ 2]  558 	ldw y,#app_space
      001DE8 FF               [ 2]  559 	ldw (x),y   
      001DE9 CD 1C AB         [ 4]  560 	call row_erase 
                                    561 ; reset interrupt vectors 
      001DEC 1D 00 02         [ 2]  562 	subw x,#CELLL 
      001DEF 90 5F            [ 1]  563 	clrw y  
      001DF1 FF               [ 2]  564 4$:	ldw (x),y  ; ( n -- ) int# 
      001DF2 CD 04 E3         [ 4]  565 	call DUPP  
      001DF5 CD 1E 12         [ 4]  566 	call reset_vector
      001DF8 90 93            [ 1]  567 	ldw y,x 
      001DFA 90 FE            [ 2]  568 	ldw y,(y)
      001DFC 90 5C            [ 2]  569 	incw y   ; next vector 
      001DFE 90 A3 00 1D      [ 2]  570 	cpw y,#29 
      001E02 25 ED            [ 1]  571 	jrult 4$
      001E04 CC 00 04         [ 2]  572 	jp NonHandledInterrupt ; reset MCU
                                    573 
                                    574 ;------------------------------
                                    575 ; reset an interrupt vector 
                                    576 ; to its initial value 
                                    577 ; i.e. NonHandledInterrupt
                                    578 ; RST-IVEC ( n -- )
                                    579 ;-----------------------------
      001E07 1D A5                  580 	.word LINK 
                           001E09   581 	LINK=. 
      001E09 08                     582 	.byte 8 
      001E0A 52 53 54 2D 49 56 45   583 	.ascii "RST-IVEC"
             43
      001E12                        584 reset_vector:
      001E12 90 93            [ 1]  585 	ldw y,x
      001E14 1C 00 02         [ 2]  586 	addw x,#CELLL 
      001E17 90 FE            [ 2]  587 	ldw y,(y)
      001E19 90 A3 00 17      [ 2]  588 	cpw y,#23 
      001E1D 27 2D            [ 1]  589 	jreq 9$
      001E1F 90 A3 00 1D      [ 2]  590 	cpw y,#29 ; last vector
      001E23 22 27            [ 1]  591 	jrugt 9$  
      001E25 90 58            [ 2]  592 	sllw y 
      001E27 90 58            [ 2]  593 	sllw y 
      001E29 72 A9 80 08      [ 2]  594 	addw y,#0x8008 ; irq0 address 
      001E2D 1D 00 02         [ 2]  595 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E30 FF               [ 2]  596 	ldw (x),y 
      001E31 CD 1A BA         [ 4]  597 	call PSTO 
      001E34 1D 00 02         [ 2]  598 	subw x,#CELLL 
      001E37 90 5F            [ 1]  599 	clrw y
      001E39 A6 82            [ 1]  600 	ld a,#0x82 
      001E3B 90 95            [ 1]  601 	ld yh,a
      001E3D FF               [ 2]  602 	ldw (x),y
      001E3E CD 1C 2F         [ 4]  603 	call WR_WORD 
      001E41 1D 00 02         [ 2]  604 	subw x,#CELLL
      001E44 90 AE 00 04      [ 2]  605 	ldw y,#NonHandledInterrupt
      001E48 FF               [ 2]  606 	ldw (x),y 
      001E49 CD 1C 2F         [ 4]  607 	call WR_WORD 
      001E4C 81               [ 4]  608 9$:	ret 
                                    609 
                                    610 
                                    611 ;------------------------------
                                    612 ; all interrupt vector with 
                                    613 ; an address >= a are resetted 
                                    614 ; to default
                                    615 ; CHKIVEC ( a -- )
                                    616 ;------------------------------
      001E4D 1E 09                  617 	.word LINK 
                           001E4F   618 	LINK=.
      001E4F 07                     619 	.byte 7
      001E50 43 48 4B 49 56 45 43   620 	.ascii "CHKIVEC"
                                    621 ;local variables 
                           000001   622 	SSP=1
                           000003   623 	CADR=3
                           000005   624 	OFS=5
                           000006   625 	VSIZE=6  
      001E57                        626 CHKIVEC:
      001E57 52 06            [ 2]  627 	sub sp,#VSIZE ;alloc local variables 
      001E59 90 93            [ 1]  628 	ldw y,x 
      001E5B 90 FE            [ 2]  629 	ldw y,(y)
      001E5D 17 03            [ 2]  630 	ldw (CADR,sp),y ; ca 
      001E5F 1F 01            [ 2]  631 	ldw (SSP,sp),x 
      001E61 AE 80 0A         [ 2]  632 	ldw x,#0x800a ; irq0 address 
      001E64 BF 32            [ 2]  633 	ldw PTR16,X
      001E66 AE FF FC         [ 2]  634 	ldw x,#-4 
      001E69 1C 00 04         [ 2]  635 1$:	addw x,#4
      001E6C A3 00 78         [ 2]  636 	cpw x,#30*4 ; irq0-29 
      001E6F 27 22            [ 1]  637 	jreq 9$
      001E71 90 93            [ 1]  638 	ldw y,x  
      001E73 91 D6 32         [ 4]  639 	ld a,([PTR16],y)
      001E76 11 03            [ 1]  640 	cp a,(CADR,sp)
      001E78 25 EF            [ 1]  641 	jrult 1$
      001E7A 90 5C            [ 2]  642 	incw y 
      001E7C 91 D6 32         [ 4]  643 	ld a,([PTR16],y)
      001E7F 11 04            [ 1]  644 	cp a,(CADR+1,sp) 
      001E81 25 E6            [ 1]  645 	jrult 1$ 
      001E83 1F 05            [ 2]  646 	ldw (OFS,sp),x 
      001E85 54               [ 2]  647 	srlw x
      001E86 54               [ 2]  648 	srlw x 
      001E87 90 93            [ 1]  649 	ldw y,x 
      001E89 1E 01            [ 2]  650 	ldw x,(SSP,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E8B FF               [ 2]  651 	ldw (x),y
      001E8C CD 1E 12         [ 4]  652 	call reset_vector
      001E8F 1E 05            [ 2]  653 	ldw x,(OFS,sp) 
      001E91 20 D6            [ 2]  654 	jra 1$
      001E93 1E 01            [ 2]  655 9$:	ldw x,(SSP,sp) 
      001E95 1C 00 02         [ 2]  656 	addw x,#CELLL 
      001E98 5B 06            [ 2]  657 	addw sp,#VSIZE ; drop local variables  
      001E9A 81               [ 4]  658 	ret 
                                    659 
                                    660 ;------------------------------
                                    661 ; set interrupt vector 
                                    662 ; SET-IVEC ( a n -- )
                                    663 ;  a Handler address
                                    664 ;  n  vector # 0 .. 29 
                                    665 ;-----------------------------
      001E9B 1E 4F                  666 	.word LINK
                           001E9D   667 	LINK=.
      001E9D 08                     668 	.byte 8 
      001E9E 53 45 54 2D 49 56 45   669 	.ascii "SET-IVEC" 
             43
      001EA6                        670 set_vector:
      001EA6 90 93            [ 1]  671     ldw y,x 
      001EA8 90 FE            [ 2]  672 	ldw y,(y) ; vector #
      001EAA 90 A3 00 1D      [ 2]  673 	cpw y,#29 ; last vector
      001EAE 23 04            [ 2]  674 	jrule 2$
      001EB0 1C 00 04         [ 2]  675 	addw x,#2*CELLL 
      001EB3 81               [ 4]  676 	ret
      001EB4 90 58            [ 2]  677 2$:	sllw y 
      001EB6 90 58            [ 2]  678 	sllw y 
      001EB8 72 A9 80 08      [ 2]  679 	addw y,#0X8008 ; IRQ0 vector address 
      001EBC FF               [ 2]  680 	ldw (x),y  ; vector address 
      001EBD CD 1A BA         [ 4]  681 	call PSTO 
      001EC0 90 5F            [ 1]  682 	clrw y 
      001EC2 A6 82            [ 1]  683 	ld a,#0x82 
      001EC4 90 95            [ 1]  684 	ld yh,a 
      001EC6 1D 00 02         [ 2]  685 	subw x,#CELLL 
      001EC9 FF               [ 2]  686 	ldw (x),y 
      001ECA CD 1C 2F         [ 4]  687 	call WR_WORD 
      001ECD CD 1C 2F         [ 4]  688 	call WR_WORD 
      001ED0 81               [ 4]  689 9$: ret 
                                    690 
                                    691 
                                    692 ;------------------------
                                    693 ; Compile word to flash
                                    694 ; EE, (w -- )
                                    695 ;-----------------------
      001ED1 1E 9D                  696 	.word LINK
                           001ED3   697 	LINK=.
      001ED3 03                     698 	.byte 3
      001ED4 45 45 2C               699 	.ascii "EE,"
      001ED7                        700 EE_COMMA:
      001ED7 1D 00 02         [ 2]  701 	subw x,#CELLL 
      001EDA 90 BE 18         [ 2]  702 	ldw y,UCP
      001EDD 90 89            [ 2]  703 	pushw y 
      001EDF FF               [ 2]  704 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001EE0 CD 1C 96         [ 4]  705 	call EE_STORE
      001EE3 90 85            [ 2]  706 	popw y 
      001EE5 72 A9 00 02      [ 2]  707 	addw y,#2
      001EE9 90 BF 18         [ 2]  708 	ldw UCP,y
      001EEC 81               [ 4]  709 	ret 
                                    710 
                                    711 
                                    712 ;-------------------------
                                    713 ; Compile byte to flash 
                                    714 ; EEC, ( c -- )	
                                    715 ;-------------------------
      001EED 1E D3                  716 	.word LINK 
                           001EEF   717 	LINK=.
      001EEF 04                     718 	.byte 4 
      001EF0 45 45 43 2C            719 	.ascii "EEC,"
      001EF4                        720 EE_CCOMMA:
      001EF4 1D 00 02         [ 2]  721 	subw x,#CELLL 
      001EF7 90 BE 18         [ 2]  722 	ldw y,UCP
      001EFA 90 89            [ 2]  723 	pushw y 
      001EFC FF               [ 2]  724 	ldw (x),y 
      001EFD CD 1C 4E         [ 4]  725 	call EE_CSTORE
      001F00 90 85            [ 2]  726 	popw y 
      001F02 90 5C            [ 2]  727 	incw y 
      001F04 90 BF 18         [ 2]  728 	ldw UCP,y
      001F07 81               [ 4]  729 	ret 
                                    730 
                                    731 
                                    732 ;--------------------------
                                    733 ; copy FLASH block to ROWBUF
                                    734 ; ROW>BUF ( ar -- )
                                    735 ; ar row address 
                                    736 ;--------------------------
      001F08 1E EF                  737 	.word LINK 
                           001F0A   738 	LINK=.
      001F0A 07                     739 	.byte 7 
      001F0B 52 4F 57 3E 42 55 46   740 	.ascii "ROW>BUF"
      001F12                        741 ROW2BUF: 
                                    742 ; align row address to block boundary
      001F12 E6 01            [ 1]  743 	ld a,(1,x)
      001F14 A4 80            [ 1]  744 	and a,#BLOCK_SIZE 
      001F16 E7 01            [ 1]  745 	ld (1,x),a 
      001F18 1D 00 04         [ 2]  746 	subw x,#2*CELLL 
      001F1B 90 AE 06 80      [ 2]  747 	ldw y,#ROWBUFF 
      001F1F EF 02            [ 2]  748 	ldw (2,x),y 
      001F21 90 AE 00 80      [ 2]  749 	ldw y,#BLOCK_SIZE
      001F25 FF               [ 2]  750 	ldw (x),y 
      001F26 CD 0B 7F         [ 4]  751 	call CMOVE 
      001F29 81               [ 4]  752 	ret 
                                    753 
                                    754 
                                    755 ;---------------------------
                                    756 ; copy ROWBUFF to flash 
                                    757 ; BUF>ROW ( ar -- )
                                    758 ; ar row address
                                    759 ;---------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F2A 1F 0A                  760 	.word LINK 
                           001F2C   761 	LINK=.
      001F2C 07                     762 	.byte 7 
      001F2D 42 55 46 3E 52 4F 57   763 	.ascii "BUF>ROW" 
      001F34                        764 BUF2ROW:
      001F34 CD 05 DE         [ 4]  765 	call TBUF ; ( ar Ab -- )
      001F37 CD 04 F3         [ 4]  766 	call SWAPP ; ( ab ar -- )
      001F3A CD 1D 5E         [ 4]  767 	call WR_ROW 
      001F3D 81               [ 4]  768 	ret 
                                    769 
                                    770 ;---------------------------------
                                    771 ; how many byte free in that row 
                                    772 ; RFREE ( a -- n )
                                    773 ; a is least byte of target address
                                    774 ;----------------------------------
      001F3E 1F 2C                  775 	.word LINK 
                           001F40   776 	LINK=.
      001F40 05                     777 	.byte 5 
      001F41 52 46 52 45 45         778 	.ascii "RFREE"
      001F46                        779 RFREE:
      001F46 E6 01            [ 1]  780 	ld a,(1,x)
      001F48 A4 7F            [ 1]  781 	and a,#BLOCK_SIZE-1 
      001F4A B7 24            [ 1]  782 	ld YTEMP,a 
      001F4C A6 80            [ 1]  783 	ld a,#BLOCK_SIZE 
      001F4E B0 24            [ 1]  784 	sub a,YTEMP 
      001F50 90 5F            [ 1]  785 	clrw y 
      001F52 90 97            [ 1]  786 	ld yl,a
      001F54 FF               [ 2]  787 	ldw (x),y 
      001F55 81               [ 4]  788 	ret 
                                    789 
                                    790 ;---------------------------------
                                    791 ; write u bytes to flash/EEPROM 
                                    792 ; constraint to row limit 
                                    793 ; RAM>EE ( af a u1 -- u2 )
                                    794 ; af flash address 
                                    795 ; a ram address 
                                    796 ; u bytes count
                                    797 ; return u2 bytes written  
                                    798 ;-------------------------------
      001F56 1F 40                  799 	.word LINK 
                           001F58   800 	LINK=. 
      001F58 06                     801 	.byte 6
      001F59 52 41 4D 3E 45 45      802 	.ascii "RAM>EE"
                                    803 	
      001F5F                        804 RAM2EE:
                                    805 ; PICK af
      001F5F CD 03 B4         [ 4]  806 	call DOLIT 
      001F62 00 02                  807 	.word 2 
      001F64 CD 0A 9D         [ 4]  808 	call PICK  ; { -- af a u1 af }
      001F67 CD 04 E3         [ 4]  809 	call DUPP 
      001F6A CD 1F 12         [ 4]  810 	call ROW2BUF ; copy in ROWBUFF  
      001F6D CD 04 E3         [ 4]  811 	call DUPP 
      001F70 CD 04 AC         [ 4]  812 	call TOR 
      001F73 CD 03 B4         [ 4]  813 	call DOLIT 
      001F76 00 7F                  814 	.word BLOCK_SIZE-1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001F78 CD 05 2F         [ 4]  815 	call ANDD 
      001F7B CD 03 B4         [ 4]  816 	call DOLIT 
      001F7E 06 80                  817 	.word ROWBUFF 
      001F80 CD 06 DE         [ 4]  818 	call PLUS  ; ( -- af a u1 ab )
      001F83 CD 04 F3         [ 4]  819 	call SWAPP ;  ( -- af a ab u1 )
      001F86 CD 04 8D         [ 4]  820 	call RFROM  ; ( -- af a ab u1 af )
      001F89 CD 1F 46         [ 4]  821 	call RFREE  ; ( -- af a ab u1 n )
      001F8C CD 07 F9         [ 4]  822 	call MIN    
      001F8F CD 04 E3         [ 4]  823 	call DUPP 
      001F92 CD 04 AC         [ 4]  824 	call TOR  
      001F95 CD 0B 7F         [ 4]  825 	call CMOVE  ; copy RAM to RAM from a to ab 
      001F98 CD 1F 34         [ 4]  826 	call BUF2ROW ; ( af --  ) write ROWBUFF to flash 
      001F9B CD 04 8D         [ 4]  827 	call RFROM  ; how many written 
      001F9E 81               [ 4]  828 	ret 
                                    829 
                                    830 
                                    831 ;--------------------------
                                    832 ; move new colon definition to FLASH 
                                    833 ; using WR-ROW for efficiency 
                                    834 ; preserving bytes already used 
                                    835 ; in the current block. 
                                    836 ; At this point the compiler as completed
                                    837 ; in RAM and pointers CP and CNTXT are updated.
                                    838 ; CNTXT point to nfa of new word and  
                                    839 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    840 ; 
                                    841 ; FMOVE ( -- cp+ )
                                    842 ; 
                                    843 ;--------------------------
      001F9F 1F 58                  844 	.word LINK 
                           001FA1   845 	LINK=.
      001FA1 05                     846 	.byte 5 
      001FA2 46 4D 4F 56 45         847 	.ascii "FMOVE" 
      001FA7                        848 FMOVE:
      001FA7 CD 05 F0         [ 4]  849 	call TFLASH 
      001FAA CD 04 3C         [ 4]  850 	CALL AT 
      001FAD CD 03 E7         [ 4]  851 	CALL QBRAN 
      001FB0 20 1F                  852 	.word no_move  
      001FB2 CD 06 3F         [ 4]  853 	call CPP  
      001FB5 CD 04 3C         [ 4]  854 	call AT  
      001FB8 CD 04 E3         [ 4]  855 	call DUPP ; ( cp cp -- )
      001FBB CD 06 23         [ 4]  856 	call CNTXT 
      001FBE CD 04 3C         [ 4]  857 	call AT 
      001FC1 CD 03 B4         [ 4]  858 	call DOLIT 
      001FC4 00 02                  859 	.word 2 
      001FC6 CD 07 57         [ 4]  860 	call SUBB ; ( cp cp la -- ) \ new word link address in RAM  
      001FC9 CD 04 E3         [ 4]  861 	call DUPP 
      001FCC CD 04 AC         [ 4]  862 	call TOR    ; ( cp cp la R: la ) 
      001FCF                        863 FMOVE2:
      001FCF CD 0B 32         [ 4]  864 	call HERE  ; ( cp cp la vp  R: la )
      001FD2 CD 04 A0         [ 4]  865 	call RAT   ; ( cp cp la vp la R: la )
      001FD5 CD 07 57         [ 4]  866 	call SUBB ; ( cp cp la wl R: la  ) \ wl is bytes to copy 
      001FD8                        867 next_row:
      001FD8 CD 04 E3         [ 4]  868 	call DUPP 
      001FDB CD 04 AC         [ 4]  869 	call TOR  ; ( cp cp la wl -- ) R: a wl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001FDE CD 1F 5F         [ 4]  870 	call RAM2EE ; ( cp cp la wl -- cp u2 ) u2 is byte written to FLASH 
      001FE1 CD 04 E3         [ 4]  871 	call DUPP 
      001FE4 CD 04 AC         [ 4]  872 	call TOR
      001FE7 CD 06 DE         [ 4]  873 	call PLUS  ; ( cp+ ) 
      001FEA CD 04 E3         [ 4]  874 	call DUPP 
      001FED CD 04 8D         [ 4]  875 	call RFROM  ; ( cp+ cp+ u2  R: a wl ) 
      001FF0 CD 04 8D         [ 4]  876 	call RFROM  ; ( cp+ cp+ u2 wl R: a ) 
      001FF3 CD 05 0D         [ 4]  877 	call OVER   ; ( cp+ cp+ u2 wl u2 -- )
      001FF6 CD 07 57         [ 4]  878 	call SUBB  ; ( cp+ cp+ u2 wl- R: a )
      001FF9 CD 04 E3         [ 4]  879 	call DUPP 
      001FFC CD 03 E7         [ 4]  880 	call QBRAN
      001FFF 20 18                  881 	.word fmove_done 
      002001 CD 04 F3         [ 4]  882 	call SWAPP  ; ( cp+ cp+ wl- u2 R: a )
      002004 CD 04 8D         [ 4]  883 	call RFROM ; ( cp+ cp+ wl- u2 a -- ) 
      002007 CD 06 DE         [ 4]  884 	call PLUS  ; ( cp+ cp+ wl- a+ )
      00200A CD 04 E3         [ 4]  885 	call DUPP 
      00200D CD 04 AC         [ 4]  886 	call TOR   ; ( cp+ cp+ wl- a+ ) R: a+
      002010 CD 04 F3         [ 4]  887 	call SWAPP ; ( cp+ cp+ a+ wl- )
      002013 CD 03 FE         [ 4]  888 	call BRAN
      002016 1F D8                  889 	.word next_row  
      002018                        890 fmove_done:	
      002018 CD 04 8D         [ 4]  891 	call RFROM  ; ( -- cp+ cp+ u2 wl- a  )
      00201B 1C 00 08         [ 2]  892 	addw x,#4*CELLL ; (  -- cp+ ) new CP 
      00201E 81               [ 4]  893  	ret  
      00201F                        894 no_move:
      00201F CD 0A 44         [ 4]  895 	call ZERO
      002022 81               [ 4]  896 	ret 
                                    897 
                                    898 ;------------------------------------------
                                    899 ; adjust pointers after **FMOVE** operetion.
                                    900 ; UPDAT-PTR ( cp+ -- )
                                    901 ; cp+ is new CP position after FMOVE 
                                    902 ;-------------------------------------------
      002023 1F A1                  903 	.word LINK 
                           002025   904 	LINK=.
      002025 09                     905 	.byte 9
      002026 55 50 44 41 54 2D 50   906 	.ascii "UPDAT-PTR" 
             54 52
      00202F                        907 UPDATPTR:
                                    908 ;reset VP to previous position  
      00202F CD 1B 19         [ 4]  909 	call EEPVP 
      002032 CD 04 3C         [ 4]  910 	call AT
      002035 CD 06 31         [ 4]  911 	call VPP 
      002038 CD 04 25         [ 4]  912 	call STORE
                                    913 ;update CONTEXT and LAST 
      00203B CD 1B 07         [ 4]  914 	call EEPCP 
      00203E CD 04 3C         [ 4]  915 	call AT
      002041 CD 03 B4         [ 4]  916 	call DOLIT 
      002044 00 02                  917 	.word 2 
      002046 CD 06 DE         [ 4]  918 	call PLUS 
      002049 CD 04 E3         [ 4]  919 	call DUPP 
      00204C CD 06 23         [ 4]  920 	call CNTXT 
      00204F CD 04 25         [ 4]  921 	call STORE
      002052 CD 06 4F         [ 4]  922 	call LAST
      002055 CD 04 25         [ 4]  923 	call STORE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      002058 CD 1B 2F         [ 4]  924 	call UPDATLAST 
                                    925 ;update CP 
      00205B CD 06 3F         [ 4]  926 	call CPP 
      00205E CD 04 25         [ 4]  927 	call STORE
      002061 CD 1B 58         [ 4]  928 	call UPDATCP 
      002064 81               [ 4]  929 	ret 
                                    930 
                                    931 ;-----------------------------
                                    932 ; move interrupt sub-routine
                                    933 ; in flash memory
                                    934 ;----------------------------- 
      002065 20 25                  935 	.word LINK 
                           002067   936 	LINK=. 
      002067 06                     937 	.byte 6
      002068 49 46 4D 4F 56 45      938 	.ascii "IFMOVE" 
      00206E                        939 IFMOVE:
      00206E CD 05 F0         [ 4]  940 	call TFLASH 
      002071 CD 04 3C         [ 4]  941 	CALL AT 
      002074 CD 03 E7         [ 4]  942 	CALL QBRAN 
      002077 20 1F                  943 	.word no_move 
      002079 CD 06 3F         [ 4]  944 	call CPP 
      00207C CD 04 3C         [ 4]  945 	call AT 
      00207F CD 04 E3         [ 4]  946 	call DUPP ; ( cp cp -- )
      002082 CD 1B 19         [ 4]  947 	call EEPVP 
      002085 CD 04 3C         [ 4]  948 	call AT  ; ( cp cp a )
      002088 CD 04 AC         [ 4]  949 	call TOR 
      00208B CD 04 A0         [ 4]  950 	call RAT ; ( cp cp a -- ) R: a 
      00208E CC 1F CF         [ 2]  951 	jp FMOVE2 
                                    952 
                                    953 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4451 
                                   4452 ;===============================================================
                                   4453 
                           002067  4454 LASTN =	LINK   ;last name defined
                                   4455 
                                   4456 ; application code begin here
      002100                       4457 	.bndry 128 ; align on flash block  
      002100                       4458 app_space: 
                                   4459 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        00077A R   |   6 ABOR1      0012CD R
  6 ABOR2      0012E4 R   |   6 ABORQ      0012C5 R   |   6 ABORT      0012B6 R
  6 ABRTQ      0015A1 R   |   6 ABSS       000771 R   |   6 ACCEP      00124C R
  6 ACCP1      001255 R   |   6 ACCP2      00127B R   |   6 ACCP3      00127E R
  6 ACCP4      001280 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     00067D R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        00158C R   |   6 AGAIN      0014E2 R
  6 AHEAD      00153F R   |   6 ALLOT      0013F5 R   |   6 ANDD       00052F R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         00043C R   |   6 ATEXE      000B68 R
  6 AUTORUN    00012B R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |     B19200  =  000003 
    B230400 =  000007     |     B2400   =  000000     |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |     B57600  =  000005 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      0011F4 R
  6 BASE       0005A0 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      001437 R   |   6 BDIGS      000C4F R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00500F 
  6 BEGIN      0014C4 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      00108C R   |   6 BKSP       0011C4 R   |     BKSPP   =  000008 
  6 BLANK      000A37 R   |     BLOCK_SI=  000080     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001F34 R   |   6 BYE        0000B8 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CARRY   =  000028 
  6 CAT        00045A R   |   6 CCOMMA     001419 R   |     CELLL   =  000002 
  6 CELLM      0009BC R   |   6 CELLP      0009AD R   |   6 CELLS      0009CB R
    CFG_GCR =  007F60     |   6 CHAR1      000E7C R   |   6 CHAR2      000E7F R
  6 CHKIVEC    001E57 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000B87 R
  6 CMOV2      000B9F R   |   6 CMOVE      000B7F R   |     CNTDWN  =  000030 
  6 CNTXT      000623 R   |   6 COLD       001999 R   |   6 COLD1      001999 R
  6 COLON      00173A R   |   6 COMMA      001402 R   |   6 COMPI      001447 R
    COMPO   =  000040     |   6 CONSTANT   0017E4 R   |   6 COUNT      000B1B R
  6 CPP        00063F R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EAA R   |   6 CREAT      001780 R   |     CRR     =  00000D 
  6 CSTOR      000449 R   |   6 DAT        000AFB R   |     DATSTK  =  000680 
  6 DDROP      0006BE R   |   6 DDUP       0006C9 R   |     DEBUG   =  000001 
  6 DECIM      000CFF R   |   6 DEPTH      000A86 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000D44 R   |   6 DI         0000C6 R
  6 DIG        000C78 R   |   6 DIGIT      000C13 R   |   6 DIGS       000C89 R
  6 DIGS1      000C89 R   |   6 DIGS2      000C96 R   |   6 DIGTQ      000D13 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000738 R
  6 DNEGA      00071B R   |   6 DOCONST    00180E R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EC0 R   |   6 DOT        000F45 R
  6 DOT1       000F5B R   |   6 DOTI1      001930 R   |   6 DOTID      00191A R
  6 DOTO1      001359 R   |   6 DOTOK      00133F R   |   6 DOTPR      00106E R
  6 DOTQ       0015BB R   |   6 DOTQP      000EE9 R   |   6 DOTR       000EF7 R
  6 DOTS       0018BC R   |   6 DOTS1      0018C7 R   |   6 DOTS2      0018D0 R
  6 DOVAR      000590 R   |   6 DROP       0004D9 R   |   6 DSTOR      000AD5 R
  6 DUMP       001872 R   |   6 DUMP1      001889 R   |   6 DUMP3      0018AB R
  6 DUMPP      001841 R   |   6 DUPP       0004E3 R   |   6 EDIGS      000CB4 R
  6 EEPCP      001B07 R   |   6 EEPLAST    001AE2 R   |   6 EEPROM     001ACE R
    EEPROM_B=  004000     |     EEPROM_E=  0043FF     |     EEPROM_S=  000400 
  6 EEPRUN     001AF5 R   |   6 EEPVP      001B19 R   |   6 EE_CCOMM   001EF4 R
  6 EE_COMMA   001ED7 R   |   6 EE_CSTOR   001C4E R   |   6 EE_STORE   001C96 R
  6 EI         0000BF R   |   6 ELSEE      00151A R   |   6 EMIT       00039E R
  6 ENEPER     001A48 R   |   6 EQ1        000795 R   |   6 EQUAL      00077F R
  6 ERASE      000BE1 R   |     ERR     =  00001B     |   6 EVAL       001382 R
  6 EVAL1      001382 R   |   6 EVAL2      00139E R   |   6 EXE1       000B76 R
  6 EXECU      00040E R   |   6 EXIT       00041E R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000C3B R
    FHSE    =  F42400     |     FHSE_K  =  003E80     |     FHSE_M  =  000010 
  6 FILL       000BAE R   |   6 FILL1      000BCB R   |   6 FILL2      000BD4 R
  6 FIND       001120 R   |   6 FIND1      00113E R   |   6 FIND2      00116C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND3      001178 R   |   6 FIND4      00118C R   |   6 FIND5      001199 R
  6 FIND6      00117D R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |   6 FMOVE      001FA7 R   |   6 FMOVE2     001FCF R
  6 FOR        001497 R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
  6 FREEVAR    000223 R   |   6 FREEVAR4   000259 R   |     GPIO_BAS=  005000 
    GPIO_SIZ=  000005     |   6 HERE       000B32 R   |   6 HEX        000CEA R
  6 HI         00196C R   |   6 HLD        000610 R   |   6 HOLD       000C5F R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00174B R   |   6 IFETCH     0014B5 R
  6 IFF        0014F2 R   |   6 IFMOVE     00206E R   |     IMEDD   =  000080 
  6 IMMED      00175D R   |   6 INCH       000392 R   |   6 INC_PTR1   001BFB R
  6 INITOFS    001713 R   |   6 INN        0005BE R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001321 R   |   6 INTER      0012F7 R   |     INT_ADC1=  000016 
    INT_AWU =  000001     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_RES1=  000008     |     INT_RES2=  000009     |     INT_RES3=  000011 
    INT_RES4=  000012     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0006F8 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0016A8 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0016FD R   |   6 KEY        000E2A R   |   6 KTAP       001211 R
  6 KTAP1      001234 R   |   6 KTAP2      001237 R   |   6 LAST       00064F R
  6 LASTN   =  002067 R   |   6 LBRAC      00132E R   |     LD1_BIT =  000000 
    LD1_MASK=  000001     |     LD1_PORT=  00500F     |   6 LESS       0007BC R
    LF      =  00000A     |   6 LINK    =  002067 R   |   6 LITER      001469 R
  6 LN2S       001AA4 R   |   6 LOG2S      001A8E R   |   6 LSHIFT     0009F6 R
  6 LSHIFT1    0009FF R   |   6 LSHIFT4    000A07 R   |   6 LT1        0007D2 R
    MASKK   =  001F7F     |   6 MAX        0007DC R   |   6 MAX1       0007EF R
  6 MIN        0007F9 R   |   6 MIN1       00080C R   |     MISCOPT =  004805 
    MISCOPT_=  000004     |     MISCOPT_=  000002     |     MISCOPT_=  000003 
    MISCOPT_=  000000     |     MISCOPT_=  000001     |   6 MMOD1      0008AF R
  6 MMOD2      0008C3 R   |   6 MMOD3      0008DA R   |   6 MMSM1      000856 R
  6 MMSM2      00086A R   |   6 MMSM3      00086C R   |   6 MMSM4      000874 R
  6 MODD       0008F4 R   |   6 MONE       000A5D R   |     MS      =  00002E 
  6 MSEC       0002CE R   |   6 MSMOD      000892 R   |   6 MSTA1      000985 R
  6 MSTAR      000962 R   |     NAFR    =  004804     |   6 NAMEQ      0011B9 R
  6 NAMET      0010CA R   |     NCLKOPT =  004808     |   6 NEGAT      000709 R
  6 NEX1       0003D5 R   |   6 NEXT       0014A6 R   |     NHSECNT =  00480A 
    NMISCOPT=  004806     |     NMISCOPT=  FFFFFFFB     |     NMISCOPT=  FFFFFFFD 
    NMISCOPT=  FFFFFFFC     |     NMISCOPT=  FFFFFFFF     |     NMISCOPT=  FFFFFFFE 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPTBL  =  00487F 
  6 NTIB       0005CE R   |     NUBC    =  004802     |   6 NUFQ       000E40 R
  6 NUFQ1      000E59 R   |   6 NUMBQ      000D57 R   |   6 NUMQ1      000D8B R
  6 NUMQ2      000DBC R   |   6 NUMQ3      000DFE R   |   6 NUMQ4      000E03 R
  6 NUMQ5      000E12 R   |   6 NUMQ6      000E15 R   |   6 NonHandl   000004 R
  6 OFFSET     000674 R   |     OFS     =  000005     |   6 ONE        000A4F R
  6 ONEM       0009E5 R   |   6 ONEP       0009D8 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |   6 ORIG       00004B R
  6 ORR        000543 R   |   6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       00050D R   |   6 OVERT      001676 R   |     PA      =  000000 
  6 PACKS      000BF2 R   |   6 PAD        000B43 R   |   6 PAREN      00107D R
  6 PARS       000F76 R   |   6 PARS1      000FA1 R   |   6 PARS2      000FCC R
  6 PARS3      000FCF R   |   6 PARS4      000FD8 R   |   6 PARS5      000FFB R
  6 PARS6      001010 R   |   6 PARS7      00101F R   |   6 PARS8      00102E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  6 PARSE      00103F R   |   6 PAUSE      0002DE R   |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      001854 R
  6 PDUM2      001865 R   |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
  6 PICK       000A9D R   |   6 PII        001A07 R   |     PIN0    =  000000 
    PIN1    =  000001     |     PIN2    =  000002     |     PIN3    =  000003 
    PIN4    =  000004     |     PIN5    =  000005     |     PIN6    =  000006 
    PIN7    =  000007     |   6 PLUS       0006DE R   |   6 PNAM1      00162B R
  6 PRESE      0013AD R   |     PROD1   =  000022     |     PROD2   =  000024 
    PROD3   =  000026     |   6 PROTECTE   0001FF R   |   6 PSTO       001ABA R
  6 PSTOR      000AB4 R   |     PTR16   =  000032     |     PTR8    =  000033 
  6 QBRAN      0003E7 R   |   6 QDUP       00068D R   |   6 QDUP1      000697 R
  6 QKEY       000380 R   |   6 QSTAC      001365 R   |   6 QUERY      001291 R
  6 QUEST      000F68 R   |   6 QUIT       0013CA R   |   6 QUIT1      0013D2 R
  6 QUIT2      0013D5 R   |   6 RAM2EE     001F5F R   |     RAMBASE =  000000 
  6 RAMLAST    000662 R   |     RAM_BASE=  000000     |     RAM_END =  0007FF 
    RAM_SIZE=  000800     |   6 RANDOM     00027C R   |   6 RAT        0004A0 R
  6 RBRAC      0016EA R   |   6 REPEA      00156F R   |   6 RFREE      001F46 R
  6 RFROM      00048D R   |     ROP     =  004800     |   6 ROT        00069E R
  6 ROW2BUF    001F12 R   |     ROWBUFF =  000680     |     RP0     =  00002C 
  6 RPAT       00046A R   |     RPP     =  0007FF     |   6 RPSTO      000477 R
  6 RSHIFT     000A12 R   |   6 RSHIFT1    000A1B R   |   6 RSHIFT4    000A23 R
    RST_SR  =  0050B3     |   6 RT12_2     001A77 R   |   6 SAME1      0010E8 R
  6 SAME2      001111 R   |   6 SAMEQ      0010E0 R   |   6 SCOM1      001660 R
  6 SCOM2      001663 R   |   6 SCOMP      001642 R   |   6 SEED       000263 R
    SEEDX   =  000035     |     SEEDY   =  000037     |   6 SEMIS      001686 R
  6 SETISP     0000D2 R   |   6 SET_RAML   0017CD R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000C9E R   |   6 SIGN1      000CAE R
  6 SLASH      0008FE R   |   6 SLMOD      0008E2 R   |   6 SNAME      0015F5 R
    SP0     =  00002A     |   6 SPACE      000E62 R   |   6 SPACS      000E71 R
  6 SPAT       0004C3 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  000680     |     SPSAVE  =  000001     |   6 SPSTO      0004D0 R
  6 SQRT10     001A60 R   |   6 SQRT2      001A1E R   |   6 SQRT3      001A35 R
  6 SSMOD      00098E R   |     SSP     =  000001     |     STACK   =  0007FF 
  6 STAR       000957 R   |   6 STASL      00099F R   |   6 STOD       000740 R
  6 STORE      000425 R   |   6 STR        000CCC R   |   6 STRCQ      001477 R
  6 STRQ       0015AE R   |   6 STRQP      000EDF R   |   6 SUBB       000757 R
  6 SWAPP      0004F3 R   |     SWIM_CSR=  007F80     |   6 TAP        0011FB R
  6 TBOOT      00198D R   |   6 TBUF       0005DE R   |     TBUFFBAS=  000680 
  6 TCHAR      000A6E R   |   6 TEMP       0005AF R   |   6 TEVAL      000601 R
  6 TFLASH     0005F0 R   |   6 THENN      001507 R   |   6 TIB        000B54 R
    TIBB    =  000700     |     TIBBASE =  000700     |     TIC     =  000027 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

  6 TICK       0013E1 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R
  6 TIMER      0002F8 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0018EA R   |   6 TNAM3      001908 R   |   6 TNAM4      00190E R
  6 TNAME      0018E7 R   |   6 TOFLASH    000333 R   |   6 TOKEN      0010BC R
  6 TOR        0004AC R   |   6 TORAM      000373 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000A2A R   |   6 TYPE1      000E91 R   |   6 TYPE2      000E9D R
  6 TYPES      000E8C R   |   6 Timer4Ha   000009 R   |   6 TrapHand   000000 R
    UART2_BR=  005242     |     UART2_BR=  005243     |     UART2_CR=  005244 
    UART2_CR=  005245     |     UART2_CR=  005246     |     UART2_CR=  005247 
    UART2_CR=  005248     |     UART2_CR=  004249     |     UART2_DR=  005241 
    UART2_GT=  00524A     |     UART2_PO=  00500F     |     UART2_PS=  00524B 
    UART2_RX=  000006     |     UART2_SR=  005240     |     UART2_TX=  000005 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000F32 R   |   6 UDOTR      000F12 R
  6 UEND       000049 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      0007B4 R
  6 ULESS      00079E R   |   6 UMMOD      000834 R   |   6 UMSTA      00090D R
  6 UNIQ1      0015EC R   |   6 UNIQU      0015CD R   |   6 UNTIL      0014CF R
    UOFFSET =  00001C     |   6 UPDATCP    001B58 R   |   6 UPDATLAS   001B2F R
  6 UPDATPTR   00202F R   |   6 UPDATRUN   001B47 R   |   6 UPDATVP    001B6F R
  6 UPL1       000584 R   |   6 UPLUS      00056D R   |     UPP     =  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    URLAST  =  000020     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001824 R   |   6 UTYP2      001833 R
  6 UTYPE      00181F R   |     UVP     =  000016     |   6 UZERO      00002F R
  6 VARIA      00179A R   |     VAR_BASE=  000080     |     VAR_TOP =  0007BF 
    VER     =  000003     |   6 VPP        000631 R   |     VSIZE   =  000006 
    WANT_DEB=  000000     |     WANT_MAT=  000001     |     WANT_SEE=  000000 
  6 WHILE      001555 R   |   6 WITHI      000819 R   |   6 WORDD      0010A8 R
  6 WORDS      001944 R   |   6 WORS1      00194A R   |   6 WORS2      001966 R
  6 WR_BYTE    001C12 R   |   6 WR_ROW     001D5E R   |   6 WR_WORD    001C2F R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     X4_FLASH=  00BFFF 
    X4_FLASH=  004000     |     X6_FLASH=  00FFFF     |     X6_FLASH=  008000 
  6 XORR       000558 R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       000A44 R   |   6 ZL1        000525 R   |   6 ZLESS      00051C R
  6 app_spac   002100 R   |   6 block_er   001CC8 R   |   6 clear_ra   00001D R
  6 clock_in   000066 R   |   6 copy_buf   001D1B R   |   6 copy_buf   001D39 R
  6 copy_pro   001D39 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 erase_fl   001CE4 R
  6 fmove_do   002018 R   |   6 lock       001BE6 R   |   6 main       00001A R
  6 next_row   001FD8 R   |   6 no_move    00201F R   |   6 pristine   001DAE R
  6 proceed_   001CE7 R   |   6 reboot     000325 R   |   6 reset_ve   001E12 R
  6 row_eras   001CAB R   |   6 row_eras   001CF8 R   |   6 row_eras   001D1B R
  6 set_opti   001D88 R   |   6 set_vect   001EA6 R   |   6 uart2_in   000078 R
  6 unlock     001BC2 R   |   6 unlock_e   001B84 R   |   6 unlock_f   001BA3 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2100   flags    0

