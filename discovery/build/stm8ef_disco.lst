ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "../inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 ÂµC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                        	.include "../inc/stm8s_disco.inc"
                                        ;-------------------------------------
                                        ; STM8S-Discovery card 
                                        ;-------------------------------------
                                        
                                        
                                 
                                 
                                 
                                        
                                        
                                        ; LD1 LED 
                                 
                                 
                                 
                                        
                                        ; BEEP
                                 
                                 
                                 
                                        
                                        ; TS1 
                                        ; use TIMER 1 3 channels 
                                        
                                        
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacÃ© le numÃ©ro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x40 variables space, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x780 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ;
                                     47 ;       EF30  verion 3.0, 2020-06-23 Picatout
                                     48 ;
                                     49 ;       EF12, Version 2.1, 18apr00cht
                                     50 ;               move to 8000H replacing WHYP.
                                     51 ;               copy interrupt vectors from WHYPFLSH.S19
                                     52 ;               to EF12.S19 before flashing
                                     53 ;               add TICKS1 and DELAY1 for motor stepping
                                     54 ;
                                     55 ;       EF12, 02/18/00, C. H. Ting
                                     56 ;       Adapt 86eForth v2.02 to 68HC12.
                                     57 ;               Use WHYP to seed EF12.ASM
                                     58 ;               Use AS12 native 68HC12 assembler:
                                     59 ;               as12 ef12.asm >ef12.lst
                                     60 ;       EF12A, add ADC code, 02mar00cht
                                     61 ;       EF12B, 01mar00cht
                                     62 ;               stack to 0x78, return stack to 0xf8.
                                     63 ;               add all port definitions
                                     64 ;               add PWM registers
                                     65 ;               add SPI registers and code
                                     66 ;       EF12C, 12mar00cht
                                     67 ;               add MAX5250 D/A converter
                                     68 ;       EF12D, 15mar00cht
                                     69 ;               add all the Lexel interface words
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12E, 18apr00cht, save for reference
                                     71 ;
                                     72 ;       Copyright (c) 2000
                                     73 ;       Dr. C. H. Ting
                                     74 ;       156 14th Avenue
                                     75 ;       San Mateo, CA 94402
                                     76 ;       (650) 571-7639
                                     77 ;
                                     78 
                                     79 
                                     80 ;*********************************************************
                                     81 ;	Assembler constants
                                     82 ;*********************************************************
                           000000    83 RAMBASE =	0x0000	   ;ram base
                           0007FE    84 STACK   =	RAM_END-1  ;system (return) stack empty 48 bytes 24 CELLS 
                           00077F    85 DATSTK  =	RAM_END-128	;data stack  empty, grow down 
                           00077F    86 TIBBASE =       RAM_END-128  ; transaction input buffer addr. 80 bytes 
                                     87 
                                     88 
                                     89 
                                     90 ;; Memory allocation
                                     91 
                           000006    92 UPP     =     RAMBASE+6          ; systeme variables base address 
                           00077F    93 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FE    94 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           00077F    95 TIBB    =     RAMBASE+TIBBASE    ; transaction input buffer
                           000080    96 VAR_BASE =    RAMBASE+0x80       ; user variables start here .
                           0007BE    97 VAR_TOP =     STACK-32*CELLL     ; reserve 32 cells for data stack. 
                                     98 
                                     99 ; user variables constants 
                           000006   100 UBASE = UPP       ; numeric base 
                           000008   101 UTMP = UBASE+2    ; temporary storage
                           00000A   102 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   103 UCTIB = UINN+2    ; tib count 
                           00000E   104 UTIB = UCTIB+2    ; tib address 
                           000010   105 UINTER = UTIB+2   ; interpreter vector 
                           000012   106 UHLD = UINTER+2   ; hold 
                           000014   107 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   108 UVP = UCNTXT+2    ; variable pointer 
                           000018   109 UCP = UVP+2      ; code pointer
                           00001A   110 ULAST = UCP+2    ; last dictionary pointer 
                                    111 
                                    112 ;******  System Variables  ******
                           00001C   113 XTEMP	=	ULAST+2;address called by CREATE
                           00001E   114 YTEMP	=	XTEMP+2	;address called by CREATE
                           00001C   115 PROD1 = XTEMP	;space for UM*
                           00001E   116 PROD2 = PROD1+2
                           000020   117 PROD3 = PROD2+2
                           000022   118 CARRY = PROD3+2
                           000024   119 SP0	= CARRY+2	;initial data stack pointer
                           000026   120 RP0	= SP0+2		;initial return stack pointer
                           000028   121 MS    =   RP0+2         ; millisecond counter 
                           00002A   122 CNTDWN =  MS+2          ; count down timer 
                           00002C   123 PTR16 = CNTDWN+2        ; middle byte of farptr 
                           00002E   124 PTR8 = PTR16+2           ; least byte of farptr 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000030   125 SEEDX = PTR8+2          ; PRNG seed X 
                           000032   126 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    127 
                                    128 ; EEPROM persistant data  
                           004000   129 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   130 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   131 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   132 APP_VP = APP_CP+2  ; free data space pointer 
                                    133 
                                    134 
                                    135 ;***********************************************
                                    136 ;; Version control
                                    137 
                           000003   138 VER     =     3         ;major release version
                           000000   139 EXT     =     0         ;minor extension
                                    140 
                                    141 ;; Constants
                                    142 
                           00FFFF   143 TRUEE   =     0xFFFF      ;true flag
                                    144 
                           000040   145 COMPO   =     0x40     ;lexicon compile only bit
                           000080   146 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   147 MASKK   =     0x1F7F  ;lexicon bit mask
                                    148 
                           000002   149 CELLL   =     2       ;size of a cell
                           00000A   150 BASEE   =     10      ;default radix
                           000008   151 BKSPP   =     8       ;back space
                           00000A   152 LF      =     10      ;line feed
                           00000D   153 CRR     =     13      ;carriage return
                           00001B   154 ERR     =     27      ;error escape
                           000027   155 TIC     =     39      ;tick
                           0000CD   156 CALLL   =     0xCD     ;CALL opcodes
                           000080   157 IRET_CODE =   0x80    ; IRET opcode 
                                    158 
                                    159         .macro _ledon
                                    160         bset PD_ODR,#LD1_BIT
                                    161         .endm
                                    162 
                                    163         .macro _ledoff
                                    164         bres PD_ODR,#LD1_BIT
                                    165         .endm
                                    166 
                                    167 ;**********************************************************
                                    168         .area DATA (ABS)
      000000                        169         .org RAMBASE 
                                    170 ;**********************************************************
                                    171 
                                    172 ;**********************************************************
                                    173         .area SSEG (ABS) ; STACK
      001700                        174         .org 0x1700
      001700                        175         .ds 256 
                                    176 ; space for DATSTK,TIB and STACK         
                                    177 ;**********************************************************
                                    178 
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .area HOME ; vectors table
                                    181 ;**********************************************************
      000000 82 00 00 16            182 	int main	        ; reset
      000004 82 00 00 00            183 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            184 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            185 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            186 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            187 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            188 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            189 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            190 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            191 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            192 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            193 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            194 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            195 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            196 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            197 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            198 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            199 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            200 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            201 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            202 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            203 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            204 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            205 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            206 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            207 	int Timer4Handler	; irq23
      000068 82 00 00 00            208 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            209 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            210 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            211 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            212 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            213 	int NonHandledInterrupt	; irq29
                                    214 
                                    215 ;**********************************************************
                                    216         .area CODE
                                    217 ;**********************************************************
                                    218 
                                    219 ; non handled interrupt reset MCU
      000000                        220 NonHandledInterrupt:
      000000 A6 80            [ 1]  221         ld a, #0x80
      000002 C7 50 D1         [ 1]  222         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    223 	;iret
                                    224 
                                    225 ; used for milliseconds counter 
                                    226 ; MS is 16 bits counter 
      000005                        227 Timer4Handler:
      000005 72 5F 53 42      [ 1]  228 	clr TIM4_SR 
      000009 BE 28            [ 2]  229         ldw x,MS 
      00000B 5C               [ 2]  230         incw x 
      00000C BF 28            [ 2]  231         ldw MS,x
      00000E BE 2A            [ 2]  232         ldw x,CNTDWN 
      000010 27 03            [ 1]  233         jreq 1$
      000012 5A               [ 2]  234         decw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000013 BF 2A            [ 2]  235         ldw CNTDWN,x 
      000015                        236 1$:         
      000015 80               [11]  237         iret 
                                    238 
                                    239 
                                    240 ;; Main entry points and COLD start data
      000016                        241 main:
                                    242 ; clear all RAM
      000016 AE 00 00         [ 2]  243 	ldw X,#RAMBASE
      000019                        244 clear_ram0:
      000019 7F               [ 1]  245 	clr (X)
      00001A 5C               [ 2]  246 	incw X
      00001B A3 07 FF         [ 2]  247 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  248 	jrule clear_ram0
      000020 AE 07 FE         [ 2]  249         ldw x,#RPP
      000023 94               [ 1]  250         ldw sp,x
                                    251 ; set SEEDX and SEEDY to 1 
      000024 3C 31            [ 1]  252         inc SEEDX+1 
      000026 3C 33            [ 1]  253         inc SEEDY+1          
      000028 CC 00 43         [ 2]  254 	jp ORIG
                                    255 
                                    256 ; COLD initialize these variables.
      00002B                        257 UZERO:
      00002B 00 0A                  258         .word      BASEE   ;BASE
      00002D 00 00                  259         .word      0       ;tmp
      00002F 00 00                  260         .word      0       ;>IN
      000031 00 00                  261         .word      0       ;#TIB
      000033 07 7F                  262         .word      TIBB    ;TIB
      000035 12 48                  263         .word      INTER   ;'EVAL
      000037 00 00                  264         .word      0       ;HLD
      000039 1E 14                  265         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  266         .word      VAR_BASE   ;variables free space pointer 
      00003D 1E 80                  267         .word      app_space ; FLASH free space pointer 
      00003F 1E 14                  268         .word      LASTN   ;LAST
      000041 00 00                  269 UEND:   .word      0
                                    270 
      000043                        271 ORIG:   
                                    272 ; initialize SP
      000043 AE 07 FE         [ 2]  273         LDW     X,#STACK  ;initialize return stack
      000046 94               [ 1]  274         LDW     SP,X
      000047 BF 26            [ 2]  275         LDW     RP0,X
      000049 AE 07 7F         [ 2]  276         LDW     X,#DATSTK ;initialize data stack
      00004C BF 24            [ 2]  277         LDW     SP0,X
                                    278 ; initialize PD_0 as output to control LD1 LED 
                                    279 ; added by Picatout 
      00004E 72 10 50 12      [ 1]  280         bset PD_CR1,#LD1_BIT
      000052 72 10 50 13      [ 1]  281         bset PD_CR2,#LD1_BIT
      000056 72 10 50 11      [ 1]  282         bset PD_DDR,#LD1_BIT
      00005A                        283         _ledoff
      00005A 72 11 50 0F      [ 1]    1         bres PD_ODR,#LD1_BIT
                                    284 ; initialize clock to HSE
                                    285 ; no divisor 16Mhz 
                                    286 ; Added by Picatout 
      00005E                        287 clock_init:
      00005E 72 5F 50 C6      [ 1]  288         clr CLK_CKDIVR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000062 72 12 50 C5      [ 1]  289 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000066 A6 B4            [ 1]  290 	ld a,#CLK_SWR_HSE
      000068 C7 50 C4         [ 1]  291 	ld CLK_SWR,a
      00006B C1 50 C3         [ 1]  292 1$:	cp a,CLK_CMSR
      00006E 26 FB            [ 1]  293 	jrne 1$
                                    294         
                                    295 ; initialize UART2, 115200 8N1
      000070                        296 uart2_init:
      000070 72 16 50 C7      [ 1]  297 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2 ; enable signal
                                    298 	; configure tx pin
      000074 72 1A 50 11      [ 1]  299 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      000078 72 1A 50 12      [ 1]  300 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      00007C 72 1A 50 13      [ 1]  301 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    302 	; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8B
      000080 35 0B 52 43      [ 1]  303 	mov UART2_BRR2,#0x0b ; must be loaded first
      000084 35 08 52 42      [ 1]  304 	mov UART2_BRR1,#0x8
      000088 35 0C 52 45      [ 1]  305 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    306 ; initialize timer4, used for millisecond interrupt  
      00008C 35 07 53 45      [ 1]  307 	mov TIM4_PSCR,#7 ; prescale 128  
      000090 35 7D 53 46      [ 1]  308 	mov TIM4_ARR,#125 ; set for 1msec.
      000094 35 05 53 40      [ 1]  309 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000098 72 10 53 41      [ 1]  310 	bset TIM4_IER,#TIM4_IER_UIE 
                                    311 ; set TIM4 interrupt priority to highest
      00009C A6 3F            [ 1]  312         ld a,#~(IPR_MASK<<6)
      00009E C4 7F 75         [ 1]  313         and a,ITC_SPR6
      0000A1 AA C0            [ 1]  314         or a,#(IPR3<<6)
      0000A3 C7 7F 75         [ 1]  315         ld ITC_SPR6,a 
      0000A6 9A               [ 1]  316         rim
      0000A7 CC 18 63         [ 2]  317         jp  COLD   ;default=MN1
                                    318 
                                    319 
                                    320 ;; place MCU in sleep mode with
                                    321 ;; halt opcode 
                                    322 ;; BYE ( -- )
      0000AA 00 00                  323         .word 0
                           0000AC   324         LINK=.
      0000AC 03                     325         .byte 3 
      0000AD 42 59 45               326         .ascii "BYE"
      0000B0                        327 BYE: 
      0000B0 8E               [10]  328         halt 
      0000B1 81               [ 4]  329         ret 
                                    330 
                                    331 ; Enable interrupts 
                                    332 ; EI ( -- )
      0000B2 00 AC                  333         .word LINK 
                           0000B4   334         LINK=.
      0000B4 02                     335         .byte 2
      0000B5 45 49                  336         .ascii "EI"
      0000B7                        337 EI:
      0000B7 9A               [ 1]  338         rim 
      0000B8 81               [ 4]  339         ret 
                                    340 
                                    341 ; Disable interrupts
                                    342 ; DI ( -- )
      0000B9 00 B4                  343         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           0000BB   344         LINK=.
      0000BB 02                     345         .byte 2 
      0000BC 44 49                  346         .ascii "DI"
      0000BE                        347 DI:
      0000BE 9B               [ 1]  348         sim 
      0000BF 81               [ 4]  349         ret 
                                    350 
                                    351 ; set interrupt priority level 
                                    352 ; SET-ISP ( n1 n2 -- )
                                    353 ; n1 level {1..3}
                                    354 ; n2 vector {0..29}
      0000C0 00 BB                  355         .word LINK 
                           0000C2   356         LINK=.
      0000C2 07                     357         .byte 7 
      0000C3 53 45 54 2D 49 53 50   358         .ascii "SET-ISP"
      0000CA                        359 SETISP:
      0000CA 90 93            [ 1]  360         ldw y,x 
      0000CC 90 FE            [ 2]  361         ldw y,(y)
      0000CE A6 04            [ 1]  362         ld a,#4 ; 4 slot per register 
                                    363 ;  quotient select register, remainder select slot in register.        
      0000D0 90 62            [ 2]  364         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D2 A4 03            [ 1]  365         and a,#3 
      0000D4 48               [ 1]  366         sll a ; 2*SLOT  lshift 
      0000D5 72 A9 7F 70      [ 2]  367         addw y,#ITC_SPR1 
      0000D9 FF               [ 2]  368         ldw (x),y  ; ( level reg -- )
      0000DA 90 5F            [ 1]  369         clrw y 
      0000DC 90 97            [ 1]  370         ld yl,a 
      0000DE 1D 00 02         [ 2]  371         subw x,#CELLL 
      0000E1 FF               [ 2]  372         ldw (x),y  ; ( level reg lshift -- )
      0000E2 90 93            [ 1]  373         ldw y,x 
      0000E4 90 EE 02         [ 2]  374         ldw y,(2,y) 
      0000E7 90 F6            [ 1]  375         ld a,(y)   ; reg_value
      0000E9 1D 00 02         [ 2]  376         subw x,#CELLL 
      0000EC FF               [ 2]  377         ldw (x),y ; ( level reg lshift rval -- )
      0000ED CD 04 AE         [ 4]  378         call OVER ; ( level reg lshift rval lshift -- )
      0000F0 CD 03 5F         [ 4]  379         call DOLIT 
      0000F3 00 03                  380         .word 3
      0000F5 CD 04 94         [ 4]  381         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F8 CD 09 47         [ 4]  382         call LSHIFT ; creat slot mask 
      0000FB CD 06 49         [ 4]  383         call INVER  ; ( level reg lshift rval mask )
      0000FE CD 04 D0         [ 4]  384         call ANDD ; ( level reg lshift slot_masked )
      000101 CD 04 4D         [ 4]  385         call TOR  ; ( level reg lshift -- R: slot_masked )
      000104 CD 05 EF         [ 4]  386         call ROT  ; ( reg lshift level )
      000107 CD 04 94         [ 4]  387         call SWAPP ; ( reg level lshift )
      00010A CD 09 47         [ 4]  388         call LSHIFT  ; ( reg slot_level -- )
      00010D CD 04 2E         [ 4]  389         call RFROM ; ( reg slot_level masked_val )
      000110 CD 04 E4         [ 4]  390         call ORR   ; ( reg updated_rval )
      000113 CD 04 94         [ 4]  391         call SWAPP 
      000116 CD 03 EA         [ 4]  392         call CSTOR
                                    393 
                                    394 ; set application startup vector 
      000119 00 C2                  395         .word LINK 
                           00011B   396         LINK=.
      00011B 07                     397         .byte 7
      00011C 41 55 54 4F 52 55 4E   398         .ascii "AUTORUN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000123                        399 AUTORUN:
      000123 CD 10 0D         [ 4]  400         call TOKEN 
      000126 CD 04 84         [ 4]  401         call DUPP 
      000129 CD 03 92         [ 4]  402         call QBRAN 
      00012C 02 09                  403         .word FORGET2
      00012E CD 11 0A         [ 4]  404         call NAMEQ
      000131 CD 05 DE         [ 4]  405         call QDUP 
      000134 CD 03 92         [ 4]  406         call QBRAN 
      000137 02 09                  407         .word FORGET2
      000139 CD 04 7A         [ 4]  408         call DROP 
      00013C 1D 00 04         [ 2]  409         subw x,#2*CELLL 
      00013F 90 5F            [ 1]  410         clrw y 
      000141 FF               [ 2]  411         ldw (x),y 
      000142 90 AE 40 02      [ 2]  412         ldw y,#APP_RUN 
      000146 EF 02            [ 2]  413         ldw (2,x),y 
      000148 CC 1B 3C         [ 2]  414         jp EESTO 
                                    415 
                                    416 ;; Reset dictionary pointer before 
                                    417 ;; forgotten word. RAM space and 
                                    418 ;; interrupt vector defined after 
                                    419 ;; must be resetted also.
      00014B 01 1B                  420         .word LINK 
                           00014D   421         LINK=.
      00014D 06                     422         .byte 6
      00014E 46 4F 52 47 45 54      423         .ascii "FORGET" 
      000154                        424 FORGET: 
      000154 CD 10 0D         [ 4]  425         call TOKEN
      000157 CD 04 84         [ 4]  426         call DUPP 
      00015A CD 03 92         [ 4]  427         call QBRAN 
      00015D 02 09                  428         .word FORGET2
      00015F CD 11 0A         [ 4]  429         call NAMEQ ; ( a -- ca na | a F )
      000162 CD 05 DE         [ 4]  430         call QDUP 
      000165 CD 03 92         [ 4]  431         call QBRAN 
      000168 02 09                  432         .word FORGET2
                                    433 ; only forget users words 
      00016A CD 04 84         [ 4]  434         call DUPP ; ( ca na na )
      00016D CD 03 5F         [ 4]  435         call DOLIT 
      000170 1E 80                  436         .word app_space 
      000172 CD 04 94         [ 4]  437         call SWAPP 
      000175 CD 06 EF         [ 4]  438         call  ULESS 
      000178 CD 03 92         [ 4]  439         call QBRAN 
      00017B 01 CB                  440         .word FORGET6 
                                    441 ; ( ca na -- )        
                                    442 ;reset ivec with address >= ca
      00017D CD 04 94         [ 4]  443         call SWAPP ; ( na ca -- ) 
      000180 CD 1D 1E         [ 4]  444         call CHKIVEC ; ( na -- ) 
                                    445 ; start at LAST and link back to na 
                                    446 ; if variable found reset VP at that point.
      000183                        447 FORGET1:
      000183 CD 05 CE         [ 4]  448         call LAST 
      000186 CD 03 DD         [ 4]  449         call AT 
      000189 CD 04 84         [ 4]  450         call DUPP  ; ( -- na last last )
      00018C CD 02 1F         [ 4]  451         call FREEVAR ; ( -- na last )
      00018F CD 04 84         [ 4]  452         call DUPP 
      000192 CD 03 5F         [ 4]  453         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000195 00 02                  454         .word 2 
      000197 CD 06 A8         [ 4]  455         call SUBB ; ( na last -- na last lfa ) link address 
      00019A CD 03 DD         [ 4]  456         call AT 
      00019D CD 04 84         [ 4]  457         call DUPP ; ( -- na last a a )
      0001A0 CD 05 A2         [ 4]  458         call CNTXT 
      0001A3 CD 03 C6         [ 4]  459         call STORE
      0001A6 CD 05 CE         [ 4]  460         call LAST  
      0001A9 CD 03 C6         [ 4]  461         call STORE ; ( --  na last )
      0001AC CD 04 AE         [ 4]  462         call OVER 
      0001AF CD 06 D0         [ 4]  463         call EQUAL ; ( na last na -- na T|F ) 
      0001B2 CD 03 92         [ 4]  464         call QBRAN 
      0001B5 01 83                  465         .word FORGET1 
                                    466 ; ( na -- )
      0001B7 CD 03 5F         [ 4]  467         call DOLIT 
      0001BA 00 02                  468         .word 2 
      0001BC CD 06 A8         [ 4]  469         call SUBB 
      0001BF CD 05 BE         [ 4]  470         call CPP 
      0001C2 CD 03 C6         [ 4]  471         call STORE  
      0001C5 CD 1A 26         [ 4]  472         call UPDATCP 
      0001C8 CC 19 FD         [ 2]  473         jp UPDATLAST 
      0001CB                        474 FORGET6: ; tried to forget a RAM or system word 
                                    475 ; ( ca na -- )
      0001CB 1D 00 02         [ 2]  476         subw x,#CELLL 
      0001CE 90 BE 24         [ 2]  477         ldw y,SP0 
      0001D1 FF               [ 2]  478         ldw (x),y  
      0001D2 CD 06 EF         [ 4]  479         call ULESS
      0001D5 CD 03 92         [ 4]  480         call QBRAN 
      0001D8 01 FB                  481         .word PROTECTED 
      0001DA CD 12 16         [ 4]  482         call ABORQ 
      0001DD 1D                     483         .byte 29
      0001DE 20 46 6F 72 20 52 41   484         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FB                        485 PROTECTED:
      0001FB CD 12 16         [ 4]  486         call ABORQ
      0001FE 0A                     487         .byte 10
      0001FF 20 50 72 6F 74 65 63   488         .ascii " Protected"
             74 65 64
      000209                        489 FORGET2: ; no name or not found in dictionary 
      000209 CD 12 16         [ 4]  490         call ABORQ
      00020C 05                     491         .byte 5
      00020D 20 77 68 61 74         492         .ascii " what"
      000212                        493 FORGET4:
      000212 CC 04 7A         [ 2]  494         jp DROP 
                                    495 
                                    496 
                                    497 ;---------------------------------
                                    498 ; if na is variable 
                                    499 ; free variable data  
                                    500 ; FREEVAR ( na -- )
                                    501 ;---------------------------------
      000215 01 4D                  502         .word LINK 
                           000217   503         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000217 07                     504         .byte 7 
      000218 46 52 45 45 56 41 52   505         .ascii "FREEVAR"
      00021F                        506 FREEVAR:
      00021F CD 04 84         [ 4]  507         call DUPP ; ( na na -- )
      000222 CD 03 FB         [ 4]  508         CALL CAT  ; ( na c -- )
      000225 CD 09 29         [ 4]  509         call ONEP ;
      000228 CD 06 2F         [ 4]  510         CALL PLUS ; ( na c+1 -- ca ) 
      00022B CD 09 29         [ 4]  511         call ONEP ; ( ca+ -- ) to get routne address 
      00022E CD 04 84         [ 4]  512         call DUPP ; ( ca+ ca+ -- )
      000231 CD 03 DD         [ 4]  513         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000234 CD 03 5F         [ 4]  514         call DOLIT 
      000237 05 31                  515         .word DOVAR ; if routine address is DOVAR then variable 
      000239 CD 06 D0         [ 4]  516         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00023C CD 03 92         [ 4]  517         call QBRAN 
      00023F 02 55                  518         .word FREEVAR4 
      000241 CD 03 5F         [ 4]  519         call DOLIT 
      000244 00 02                  520         .word 2 
      000246 CD 06 2F         [ 4]  521         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000249 CD 03 DD         [ 4]  522         call AT 
      00024C CD 05 B0         [ 4]  523         call VPP   
      00024F CD 03 C6         [ 4]  524         call STORE 
      000252 CC 1A 3D         [ 2]  525         jp UPDATVP 
      000255                        526 FREEVAR4: ; not variable
      000255 CC 04 7A         [ 2]  527         jp  DROP 
                                    528 
                                    529 ;    SEED ( n -- )
                                    530 ; Initialize PRNG seed with n 
      000258 02 17                  531         .word LINK 
                           00025A   532         LINK=. 
      00025A 04                     533         .byte 4 
      00025B 53 45 45 44            534         .ascii "SEED" 
      00025F                        535 SEED:
      00025F 90 93            [ 1]  536         ldw y,x 
      000261 1C 00 02         [ 2]  537         addw x,#CELLL
      000264 90 FE            [ 2]  538         ldw y,(y)
      000266 90 9E            [ 1]  539         ld a,yh 
      000268 B7 30            [ 1]  540         ld SEEDX,a 
      00026A 90 9F            [ 1]  541         ld a,yl 
      00026C B7 32            [ 1]  542         ld SEEDY,a 
      00026E 81               [ 4]  543         ret 
                                    544 
                                    545 ;    RANDOM ( u1 -- u2 )
                                    546 ; Pseudo random number betwen 0 and u1-1
      00026F 02 5A                  547         .word LINK 
                           000271   548         LINK=.
      000271 06                     549         .byte 6
      000272 52 41 4E 44 4F 4D      550         .ascii "RANDOM" 
      000278                        551 RANDOM:
                                    552 ;local variable 
                           000001   553         SPSAVE=1
                           000002   554         VSIZE=2 
      000278 52 02            [ 2]  555         sub sp,#VSIZE
      00027A 1F 01            [ 2]  556         ldw (SPSAVE,sp),x  
                                    557 ; XTEMP=(SEEDX<<5)^SEEDX 
      00027C 90 93            [ 1]  558         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00027E 90 FE            [ 2]  559         ldw y,(y)
      000280 90 BF 1E         [ 2]  560         ldw YTEMP,y 
      000283 BE 30            [ 2]  561 	ldw x,SEEDX 
      000285 58               [ 2]  562 	sllw x 
      000286 58               [ 2]  563 	sllw x 
      000287 58               [ 2]  564 	sllw x 
      000288 58               [ 2]  565 	sllw x 
      000289 58               [ 2]  566 	sllw x 
      00028A 9E               [ 1]  567 	ld a,xh 
      00028B B8 30            [ 1]  568 	xor a,SEEDX 
      00028D B7 1C            [ 1]  569 	ld XTEMP,a 
      00028F 9F               [ 1]  570 	ld a,xl 
      000290 B8 31            [ 1]  571 	xor a,SEEDX+1 
      000292 B7 1D            [ 1]  572 	ld XTEMP+1,a 
                                    573 ; SEEDX=SEEDY 
      000294 BE 32            [ 2]  574 	ldw x,SEEDY 
      000296 BF 30            [ 2]  575 	ldw SEEDX,x  
                                    576 ; SEEDY=SEEDY^(SEEDY>>1)
      000298 54               [ 2]  577 	srlw x 
      000299 9E               [ 1]  578 	ld a,xh 
      00029A B8 32            [ 1]  579 	xor a,SEEDY 
      00029C B7 32            [ 1]  580 	ld SEEDY,a  
      00029E 9F               [ 1]  581 	ld a,xl 
      00029F B8 33            [ 1]  582 	xor a,SEEDY+1 
      0002A1 B7 33            [ 1]  583 	ld SEEDY+1,a 
                                    584 ; XTEMP>>3 
      0002A3 BE 1C            [ 2]  585 	ldw x,XTEMP 
      0002A5 54               [ 2]  586 	srlw x 
      0002A6 54               [ 2]  587 	srlw x 
      0002A7 54               [ 2]  588 	srlw x 
                                    589 ; x=XTEMP^x 
      0002A8 9E               [ 1]  590 	ld a,xh 
      0002A9 B8 1C            [ 1]  591 	xor a,XTEMP 
      0002AB 95               [ 1]  592 	ld xh,a 
      0002AC 9F               [ 1]  593 	ld a,xl 
      0002AD B8 1D            [ 1]  594 	xor a,XTEMP+1  
      0002AF 97               [ 1]  595 	ld xl,a 
                                    596 ; SEEDY=x^SEEDY 
      0002B0 B8 33            [ 1]  597 	xor a,SEEDY+1
      0002B2 97               [ 1]  598 	ld xl,a 
      0002B3 9E               [ 1]  599 	ld a,xh 
      0002B4 B8 32            [ 1]  600 	xor a,SEEDY
      0002B6 95               [ 1]  601 	ld xh,a 
      0002B7 BF 32            [ 2]  602 	ldw SEEDY,x 
                                    603 ; return SEEDY modulo YTEMP  
      0002B9 90 BE 1E         [ 2]  604 	ldw y,YTEMP  
      0002BC 65               [ 2]  605 	divw x,y 
      0002BD 1E 01            [ 2]  606 	ldw x,(SPSAVE,sp)
      0002BF FF               [ 2]  607         ldw (x),y 
      0002C0 5B 02            [ 2]  608         addw sp,#VSIZE 
      0002C2 81               [ 4]  609 	ret 
                                    610 
                                    611 
                                    612 ;;
                                    613 ;; get millisecond counter 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    614 ;; msec ( -- u )
                                    615 ;; Added by Picatout 2020-04-26
      0002C3 02 71                  616         .word LINK  
                           0002C5   617         LINK = . 
      0002C5 04                     618         .byte 4
      0002C6 4D 53 45 43            619         .ascii "MSEC"
      0002CA                        620 MSEC: 
      0002CA 1D 00 02         [ 2]  621         subw x,#CELLL 
      0002CD 90 BE 28         [ 2]  622         ldw y,MS 
      0002D0 FF               [ 2]  623         ldw (x),y 
      0002D1 81               [ 4]  624         ret 
                                    625 
                                    626 ; suspend execution for u msec 
                                    627 ;  pause ( u -- )
      0002D2 02 C5                  628         .word LINK 
                           0002D4   629         LINK=.
      0002D4 05                     630         .byte 5 
      0002D5 50 41 55 53 45         631         .ascii "PAUSE"
      0002DA                        632 PAUSE:
      0002DA 90 93            [ 1]  633         ldw y,x
      0002DC 90 FE            [ 2]  634         ldw y,(y)
      0002DE 72 B9 00 28      [ 2]  635         addw y,MS 
      0002E2 8F               [10]  636 1$:     wfi  
      0002E3 90 B3 28         [ 2]  637         cpw y,MS  
      0002E6 26 FA            [ 1]  638         jrne 1$        
      0002E8 1C 00 02         [ 2]  639         addw x,#CELLL 
      0002EB 81               [ 4]  640         ret 
                                    641 
                                    642 ; initialize count down timer 
                                    643 ;  TIMER ( u -- )  milliseconds 
      0002EC 02 D4                  644         .word LINK 
                           0002EE   645         LINK=.
      0002EE 05                     646         .byte 5 
      0002EF 54 49 4D 45 52         647         .ascii "TIMER" 
      0002F4                        648 TIMER:
      0002F4 90 93            [ 1]  649         ldw y,x
      0002F6 90 FE            [ 2]  650         ldw y,(y) 
      0002F8 90 BF 2A         [ 2]  651         ldw CNTDWN,y
      0002FB 1C 00 02         [ 2]  652         addw x,#CELLL 
      0002FE 81               [ 4]  653         ret 
                                    654 
                                    655 ; check for TIMER exiparition 
                                    656 ;  TIMEOUT? ( -- 0|-1 )
      0002FF 02 EE                  657         .word LINK 
                           000301   658         LINK=. 
      000301 08                     659         .byte 8 
      000302 54 49 4D 45 4F 55 54   660         .ascii "TIMEOUT?"
             3F
      00030A                        661 TIMEOUTQ: 
      00030A 4F               [ 1]  662         clr a
      00030B 1D 00 02         [ 2]  663         subw x,#CELLL 
      00030E 90 BE 2A         [ 2]  664         ldw y,CNTDWN 
      000311 26 01            [ 1]  665         jrne 1$ 
      000313 43               [ 1]  666         cpl a 
      000314 E7 01            [ 1]  667 1$:     ld (1,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000316 F7               [ 1]  668         ld (x),a 
      000317 81               [ 4]  669         ret         
                                    670 
                                    671 ; reboot MCU 
                                    672 ; REBOOT ( -- )
      000318 03 01                  673         .word LINK 
                           00031A   674         LINK=. 
      00031A 06                     675         .byte 6 
      00031B 52 45 42 4F 4F 54      676         .ascii "REBOOT"
      000321                        677 reboot:
      000321 CC 00 00         [ 2]  678         jp NonHandledInterrupt
                                    679 
                                    680 
                                    681 ;; Device dependent I/O
                                    682 ;       ?RX     ( -- c T | F )
                                    683 ;         Return input byte and true, or false.
      000324 03 1A                  684         .word      LINK 
                           000326   685 LINK	= .
      000326 04                     686         .byte      4
      000327 3F 4B 45 59            687         .ascii     "?KEY"
      00032B                        688 QKEY:
      00032B 90 5F            [ 1]  689         CLRW Y 
      00032D 72 0B 52 40 0B   [ 2]  690         BTJF UART2_SR,#UART_SR_RXNE,INCH   ;check status
      000332 C6 52 41         [ 1]  691         LD    A,UART2_DR   ;get char in A
      000335 1D 00 02         [ 2]  692 	SUBW	X,#2
      000338 E7 01            [ 1]  693         LD     (1,X),A
      00033A 7F               [ 1]  694 	CLR	(X)
      00033B 90 53            [ 2]  695         CPLW     Y
      00033D                        696 INCH:
      00033D 1D 00 02         [ 2]  697 	SUBW	X,#2
      000340 FF               [ 2]  698         LDW     (X),Y
      000341 81               [ 4]  699         RET
                                    700 
                                    701 ;       TX!     ( c -- )
                                    702 ;       Send character c to  output device.
      000342 03 26                  703         .word      LINK
                           000344   704 LINK	= .
      000344 04                     705         .byte      4
      000345 45 4D 49 54            706         .ascii     "EMIT"
      000349                        707 EMIT:
      000349 E6 01            [ 1]  708         LD     A,(1,X)
      00034B 1C 00 02         [ 2]  709 	ADDW	X,#2
      00034E 72 0F 52 40 FB   [ 2]  710 OUTPUT: BTJF UART2_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      000353 C7 52 41         [ 1]  711         LD    UART2_DR,A   ;send A
      000356 81               [ 4]  712         RET
                                    713 
                                    714 ;; The kernel
                                    715 
                                    716 ;       doLIT   ( -- w )
                                    717 ;       Push an inline literal.
      000357 03 44                  718         .word      LINK
                           000359   719 LINK	= 	.
      000359 45                     720 	.byte      COMPO+5
      00035A 44 4F 4C 49 54         721         .ascii     "DOLIT"
      00035F                        722 DOLIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00035F 1D 00 02         [ 2]  723 	SUBW X,#2
      000362 16 01            [ 2]  724         ldw y,(1,sp)
      000364 90 FE            [ 2]  725         ldw y,(y)
      000366 FF               [ 2]  726         ldw (x),y
      000367 90 85            [ 2]  727         popw y 
      000369 90 EC 02         [ 2]  728         jp (2,y)
                                    729 
                                    730 ;       next    ( -- )
                                    731 ;       Code for  single index loop.
      00036C 03 59                  732         .word      LINK
                           00036E   733 LINK	= 	.
      00036E 44                     734 	.byte      COMPO+4
      00036F 6E 65 78 74            735         .ascii     "next"
      000373                        736 DONXT:
      000373 16 03            [ 2]  737 	LDW Y,(3,SP)
      000375 90 5A            [ 2]  738 	DECW Y
      000377 2A 07            [ 1]  739 	JRPL NEX1 ; jump if N=0
      000379 90 85            [ 2]  740 	POPW Y
      00037B 5B 02            [ 2]  741         addw sp,#2
      00037D 90 EC 02         [ 2]  742         JP (2,Y)
      000380                        743 NEX1:
      000380 17 03            [ 2]  744         LDW (3,SP),Y
      000382 90 85            [ 2]  745         POPW Y
      000384 90 FE            [ 2]  746 	LDW Y,(Y)
      000386 90 FC            [ 2]  747 	JP (Y)
                                    748 
                                    749 ;       ?branch ( f -- )
                                    750 ;       Branch if flag is zero.
      000388 03 6E                  751         .word      LINK
                           00038A   752 LINK	= 	.
      00038A 47                     753 	.byte      COMPO+7
      00038B 3F 42 52 41 4E 43 48   754         .ascii     "?BRANCH"
      000392                        755 QBRAN:	
      000392 90 93            [ 1]  756         LDW Y,X
      000394 1C 00 02         [ 2]  757 	ADDW X,#2
      000397 90 FE            [ 2]  758 	LDW Y,(Y)
      000399 27 0E            [ 1]  759         JREQ     BRAN
      00039B 90 85            [ 2]  760 	POPW Y
      00039D 90 EC 02         [ 2]  761 	JP (2,Y)
                                    762         
                                    763 ;       branch  ( -- )
                                    764 ;       Branch to an inline address.
      0003A0 03 8A                  765         .word      LINK
                           0003A2   766 LINK	= 	.
      0003A2 46                     767 	.byte      COMPO+6
      0003A3 42 52 41 4E 43 48      768         .ascii     "BRANCH"
      0003A9                        769 BRAN:
      0003A9 90 85            [ 2]  770         POPW Y
      0003AB 90 FE            [ 2]  771 	LDW Y,(Y)
      0003AD 90 FC            [ 2]  772         JP     (Y)
                                    773 
                                    774 ;       EXECUTE ( ca -- )
                                    775 ;       Execute  word at ca.
      0003AF 03 A2                  776         .word      LINK
                           0003B1   777 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0003B1 07                     778         .byte       7
      0003B2 45 58 45 43 55 54 45   779         .ascii     "EXECUTE"
      0003B9                        780 EXECU:
      0003B9 90 93            [ 1]  781         LDW Y,X
      0003BB 1C 00 02         [ 2]  782 	ADDW X,#2
      0003BE 90 FE            [ 2]  783 	LDW  Y,(Y)
      0003C0 90 FC            [ 2]  784         JP   (Y)
                                    785 
                           000001   786 OPTIMIZE = 1
                           000001   787 .if OPTIMIZE 
                                    788 ; replace CALL EXIT by 
                                    789 ; RET opcode
                                    790 ; See modificaiton to  ";" word
                                    791 ; then EXIT not required 
                           000000   792 .else 
                                    793 ;       EXIT    ( -- )
                                    794 ;       Terminate a colon definition.
                                    795         .word      LINK
                                    796         LINK = .
                                    797         .byte      4
                                    798         .ascii     "EXIT"
                                    799 EXIT:
                                    800         POPW Y
                                    801         RET
                                    802 .endif 
                                    803 
                                    804 ;       !       ( w a -- )
                                    805 ;       Pop  data stack to memory.
      0003C2 03 B1                  806         .word      LINK
                           0003C4   807 LINK = .
      0003C4 01                     808         .byte      1
      0003C5 21                     809         .ascii     "!"
      0003C6                        810 STORE:
      0003C6 90 93            [ 1]  811         LDW Y,X
      0003C8 90 FE            [ 2]  812         LDW Y,(Y)    ;Y=a
      0003CA 90 BF 1E         [ 2]  813         LDW YTEMP,Y
      0003CD 90 93            [ 1]  814         LDW Y,X
      0003CF 90 EE 02         [ 2]  815         LDW Y,(2,Y)
      0003D2 91 CF 1E         [ 5]  816         LDW [YTEMP],Y ;store w at a
      0003D5 1C 00 04         [ 2]  817         ADDW X,#4 ; DDROP 
      0003D8 81               [ 4]  818         RET     
                                    819 
                                    820 ;       @       ( a -- w )
                                    821 ;       Push memory location to stack.
      0003D9 03 C4                  822         .word      LINK
                           0003DB   823 LINK	= 	.
      0003DB 01                     824         .byte    1
      0003DC 40                     825         .ascii	"@"
      0003DD                        826 AT:
      0003DD 90 93            [ 1]  827         LDW Y,X     ;Y = a
      0003DF 90 FE            [ 2]  828         LDW Y,(Y)   ; address 
      0003E1 90 FE            [ 2]  829         LDW Y,(Y)   ; value 
      0003E3 FF               [ 2]  830         LDW (X),Y ;w = @Y
      0003E4 81               [ 4]  831         RET     
                                    832 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    833 ;       C!      ( c b -- )
                                    834 ;       Pop  data stack to byte memory.
      0003E5 03 DB                  835         .word      LINK
                           0003E7   836 LINK	= .
      0003E7 02                     837         .byte      2
      0003E8 43 21                  838         .ascii     "C!"
      0003EA                        839 CSTOR:
      0003EA 90 93            [ 1]  840         LDW Y,X
      0003EC 90 FE            [ 2]  841 	LDW Y,(Y)    ;Y=b
      0003EE E6 03            [ 1]  842         LD A,(3,X)    ;D = c
      0003F0 90 F7            [ 1]  843         LD  (Y),A     ;store c at b
      0003F2 1C 00 04         [ 2]  844 	ADDW X,#4 ; DDROP 
      0003F5 81               [ 4]  845         RET     
                                    846 
                                    847 ;       C@      ( b -- c )
                                    848 ;       Push byte in memory to  stack.
      0003F6 03 E7                  849         .word      LINK
                           0003F8   850 LINK	= 	.
      0003F8 02                     851         .byte      2
      0003F9 43 40                  852         .ascii     "C@"
      0003FB                        853 CAT:
      0003FB 90 93            [ 1]  854         LDW Y,X     ;Y=b
      0003FD 90 FE            [ 2]  855         LDW Y,(Y)
      0003FF 90 F6            [ 1]  856         LD A,(Y)
      000401 E7 01            [ 1]  857         LD (1,X),A
      000403 7F               [ 1]  858         CLR (X)
      000404 81               [ 4]  859         RET     
                                    860 
                                    861 ;       RP@     ( -- a )
                                    862 ;       Push current RP to data stack.
      000405 03 F8                  863         .word      LINK
                           000407   864 LINK	= .
      000407 03                     865         .byte      3
      000408 52 50 40               866         .ascii     "RP@"
      00040B                        867 RPAT:
      00040B 90 96            [ 1]  868         LDW Y,SP    ;save return addr
      00040D 1D 00 02         [ 2]  869         SUBW X,#2
      000410 FF               [ 2]  870         LDW (X),Y
      000411 81               [ 4]  871         RET     
                                    872 
                                    873 ;       RP!     ( a -- )
                                    874 ;       Set  return stack pointer.
      000412 04 07                  875         .word      LINK
                           000414   876 LINK	= 	. 
      000414 43                     877 	.byte      COMPO+3
      000415 52 50 21               878         .ascii     "RP!"
      000418                        879 RPSTO:
      000418 90 85            [ 2]  880         POPW Y
      00041A 90 BF 1E         [ 2]  881         LDW YTEMP,Y
      00041D 90 93            [ 1]  882         LDW Y,X
      00041F 90 FE            [ 2]  883         LDW Y,(Y)
      000421 90 94            [ 1]  884         LDW SP,Y
      000423 1C 00 02         [ 2]  885         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000426 92 CC 1E         [ 5]  886         JP [YTEMP]
                                    887 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    888 ;       R>      ( -- w )
                                    889 ;       Pop return stack to data stack.
      000429 04 14                  890         .word      LINK
                           00042B   891 LINK	= 	. 
      00042B 42                     892 	.byte      COMPO+2
      00042C 52 3E                  893         .ascii     "R>"
      00042E                        894 RFROM:
      00042E 90 85            [ 2]  895         POPW Y    ;save return addr
      000430 90 BF 1E         [ 2]  896         LDW YTEMP,Y
      000433 90 85            [ 2]  897         POPW Y
      000435 1D 00 02         [ 2]  898         SUBW X,#2
      000438 FF               [ 2]  899         LDW (X),Y
      000439 92 CC 1E         [ 5]  900         JP [YTEMP]
                                    901 
                                    902 ;       R@      ( -- w )
                                    903 ;       Copy top of return stack to stack.
      00043C 04 2B                  904         .word      LINK
                           00043E   905 LINK	= 	. 
      00043E 02                     906         .byte      2
      00043F 52 40                  907         .ascii     "R@"
      000441                        908 RAT:
      000441 16 03            [ 2]  909         ldw y,(3,sp)
      000443 1D 00 02         [ 2]  910         subw x,#CELLL 
      000446 FF               [ 2]  911         ldw (x),y 
      000447 81               [ 4]  912         ret 
                                    913 
                                    914 ;       >R      ( w -- )
                                    915 ;       Push data stack to return stack.
      000448 04 3E                  916         .word      LINK
                           00044A   917 LINK	= 	. 
      00044A 42                     918 	.byte      COMPO+2
      00044B 3E 52                  919         .ascii     ">R"
      00044D                        920 TOR:
      00044D 90 85            [ 2]  921         POPW Y    ;save return addr
      00044F 90 BF 1E         [ 2]  922         LDW YTEMP,Y
      000452 90 93            [ 1]  923         LDW Y,X
      000454 90 FE            [ 2]  924         LDW Y,(Y)
      000456 90 89            [ 2]  925         PUSHW Y    ;restore return addr
      000458 1C 00 02         [ 2]  926         ADDW X,#2
      00045B 92 CC 1E         [ 5]  927         JP [YTEMP]
                                    928 
                                    929 ;       SP@     ( -- a )
                                    930 ;       Push current stack pointer.
      00045E 04 4A                  931         .word      LINK
                           000460   932 LINK	= 	. 
      000460 03                     933         .byte      3
      000461 53 50 40               934         .ascii     "SP@"
      000464                        935 SPAT:
      000464 90 93            [ 1]  936 	LDW Y,X
      000466 1D 00 02         [ 2]  937         SUBW X,#2
      000469 FF               [ 2]  938 	LDW (X),Y
      00046A 81               [ 4]  939         RET     
                                    940 
                                    941 ;       SP!     ( a -- )
                                    942 ;       Set  data stack pointer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00046B 04 60                  943         .word      LINK
                           00046D   944 LINK	= 	. 
      00046D 03                     945         .byte      3
      00046E 53 50 21               946         .ascii     "SP!"
      000471                        947 SPSTO:
      000471 FE               [ 2]  948         LDW     X,(X)     ;X = a
      000472 81               [ 4]  949         RET     
                                    950 
                                    951 ;       DROP    ( w -- )
                                    952 ;       Discard top stack item.
      000473 04 6D                  953         .word      LINK
                           000475   954 LINK	= 	. 
      000475 04                     955         .byte      4
      000476 44 52 4F 50            956         .ascii     "DROP"
      00047A                        957 DROP:
      00047A 1C 00 02         [ 2]  958         ADDW X,#2     
      00047D 81               [ 4]  959         RET     
                                    960 
                                    961 ;       DUP     ( w -- w w )
                                    962 ;       Duplicate  top stack item.
      00047E 04 75                  963         .word      LINK
                           000480   964 LINK	= 	. 
      000480 03                     965         .byte      3
      000481 44 55 50               966         .ascii     "DUP"
      000484                        967 DUPP:
      000484 90 93            [ 1]  968 	LDW Y,X
      000486 1D 00 02         [ 2]  969         SUBW X,#2
      000489 90 FE            [ 2]  970 	LDW Y,(Y)
      00048B FF               [ 2]  971 	LDW (X),Y
      00048C 81               [ 4]  972         RET     
                                    973 
                                    974 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    975 ;       Exchange top two stack items.
      00048D 04 80                  976         .word      LINK
                           00048F   977 LINK	= 	. 
      00048F 04                     978         .byte      4
      000490 53 57 41 50            979         .ascii     "SWAP"
      000494                        980 SWAPP:
      000494 90 93            [ 1]  981         LDW Y,X
      000496 90 FE            [ 2]  982         LDW Y,(Y)
      000498 90 BF 1E         [ 2]  983         LDW YTEMP,Y
      00049B 90 93            [ 1]  984         LDW Y,X
      00049D 90 EE 02         [ 2]  985         LDW Y,(2,Y)
      0004A0 FF               [ 2]  986         LDW (X),Y
      0004A1 90 BE 1E         [ 2]  987         LDW Y,YTEMP
      0004A4 EF 02            [ 2]  988         LDW (2,X),Y
      0004A6 81               [ 4]  989         RET     
                                    990 
                                    991 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    992 ;       Copy second stack item to top.
      0004A7 04 8F                  993         .word      LINK
                           0004A9   994 LINK	= . 
      0004A9 04                     995         .byte      4
      0004AA 4F 56 45 52            996         .ascii     "OVER"
      0004AE                        997 OVER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004AE 1D 00 02         [ 2]  998         SUBW X,#2
      0004B1 90 93            [ 1]  999         LDW Y,X
      0004B3 90 EE 04         [ 2] 1000         LDW Y,(4,Y)
      0004B6 FF               [ 2] 1001         LDW (X),Y
      0004B7 81               [ 4] 1002         RET     
                                   1003 
                                   1004 ;       0<      ( n -- t )
                                   1005 ;       Return true if n is negative.
      0004B8 04 A9                 1006         .word      LINK
                           0004BA  1007 LINK	= . 
      0004BA 02                    1008         .byte      2
      0004BB 30 3C                 1009         .ascii     "0<"
      0004BD                       1010 ZLESS:
      0004BD A6 FF            [ 1] 1011         LD A,#0xFF
      0004BF 90 93            [ 1] 1012         LDW Y,X
      0004C1 90 FE            [ 2] 1013         LDW Y,(Y)
      0004C3 2B 01            [ 1] 1014         JRMI     ZL1
      0004C5 4F               [ 1] 1015         CLR A   ;false
      0004C6 F7               [ 1] 1016 ZL1:    LD     (X),A
      0004C7 E7 01            [ 1] 1017         LD (1,X),A
      0004C9 81               [ 4] 1018 	RET     
                                   1019 
                                   1020 ;       AND     ( w w -- w )
                                   1021 ;       Bitwise AND.
      0004CA 04 BA                 1022         .word      LINK
                           0004CC  1023 LINK	= . 
      0004CC 03                    1024         .byte      3
      0004CD 41 4E 44              1025         .ascii     "AND"
      0004D0                       1026 ANDD:
      0004D0 F6               [ 1] 1027         LD  A,(X)    ;D=w
      0004D1 E4 02            [ 1] 1028         AND A,(2,X)
      0004D3 E7 02            [ 1] 1029         LD (2,X),A
      0004D5 E6 01            [ 1] 1030         LD A,(1,X)
      0004D7 E4 03            [ 1] 1031         AND A,(3,X)
      0004D9 E7 03            [ 1] 1032         LD (3,X),A
      0004DB 1C 00 02         [ 2] 1033         ADDW X,#2
      0004DE 81               [ 4] 1034         RET
                                   1035 
                                   1036 ;       OR      ( w w -- w )
                                   1037 ;       Bitwise inclusive OR.
      0004DF 04 CC                 1038         .word      LINK
                           0004E1  1039 LINK = . 
      0004E1 02                    1040         .byte      2
      0004E2 4F 52                 1041         .ascii     "OR"
      0004E4                       1042 ORR:
      0004E4 F6               [ 1] 1043         LD A,(X)    ;D=w
      0004E5 EA 02            [ 1] 1044         OR A,(2,X)
      0004E7 E7 02            [ 1] 1045         LD (2,X),A
      0004E9 E6 01            [ 1] 1046         LD A,(1,X)
      0004EB EA 03            [ 1] 1047         OR A,(3,X)
      0004ED E7 03            [ 1] 1048         LD (3,X),A
      0004EF 1C 00 02         [ 2] 1049         ADDW X,#2
      0004F2 81               [ 4] 1050         RET
                                   1051 
                                   1052 ;       XOR     ( w w -- w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1053 ;       Bitwise exclusive OR.
      0004F3 04 E1                 1054         .word      LINK
                           0004F5  1055 LINK	= . 
      0004F5 03                    1056         .byte      3
      0004F6 58 4F 52              1057         .ascii     "XOR"
      0004F9                       1058 XORR:
      0004F9 F6               [ 1] 1059         LD A,(X)    ;D=w
      0004FA E8 02            [ 1] 1060         XOR A,(2,X)
      0004FC E7 02            [ 1] 1061         LD (2,X),A
      0004FE E6 01            [ 1] 1062         LD A,(1,X)
      000500 E8 03            [ 1] 1063         XOR A,(3,X)
      000502 E7 03            [ 1] 1064         LD (3,X),A
      000504 1C 00 02         [ 2] 1065         ADDW X,#2
      000507 81               [ 4] 1066         RET
                                   1067 
                                   1068 ;       UM+     ( u u -- udsum )
                                   1069 ;       Add two unsigned single
                                   1070 ;       and return a double sum.
      000508 04 F5                 1071         .word      LINK
                           00050A  1072 LINK	= . 
      00050A 03                    1073         .byte      3
      00050B 55 4D 2B              1074         .ascii     "UM+"
      00050E                       1075 UPLUS:
      00050E A6 01            [ 1] 1076         LD A,#1
      000510 90 93            [ 1] 1077         LDW Y,X
      000512 90 EE 02         [ 2] 1078         LDW Y,(2,Y)
      000515 90 BF 1E         [ 2] 1079         LDW YTEMP,Y
      000518 90 93            [ 1] 1080         LDW Y,X
      00051A 90 FE            [ 2] 1081         LDW Y,(Y)
      00051C 72 B9 00 1E      [ 2] 1082         ADDW Y,YTEMP
      000520 EF 02            [ 2] 1083         LDW (2,X),Y
      000522 25 01            [ 1] 1084         JRC     UPL1
      000524 4F               [ 1] 1085         CLR A
      000525 E7 01            [ 1] 1086 UPL1:   LD     (1,X),A
      000527 7F               [ 1] 1087         CLR (X)
      000528 81               [ 4] 1088         RET
                                   1089 
                                   1090 ;; System and user variables
                                   1091 
                                   1092 ;       doVAR   ( -- a )
                                   1093 ;       Code for VARIABLE and CREATE.
      000529 05 0A                 1094         .word      LINK
                           00052B  1095 LINK	= . 
      00052B 45                    1096 	.byte      COMPO+5
      00052C 44 4F 56 41 52        1097         .ascii     "DOVAR"
      000531                       1098 DOVAR:
      000531 1D 00 02         [ 2] 1099 	SUBW X,#2
      000534 90 85            [ 2] 1100         POPW Y    ;get return addr (pfa)
      000536 90 FE            [ 2] 1101         LDW Y,(Y) ; indirect address 
      000538 FF               [ 2] 1102         LDW (X),Y    ;push on stack
      000539 81               [ 4] 1103         RET     ;go to RET of EXEC
                                   1104 
                                   1105 ;       BASE    ( -- a )
                                   1106 ;       Radix base for numeric I/O.
      00053A 05 2B                 1107         .word      LINK        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                           00053C  1108 LINK = . 
      00053C 04                    1109         .byte      4
      00053D 42 41 53 45           1110         .ascii     "BASE"
      000541                       1111 BASE:
      000541 90 AE 00 06      [ 2] 1112 	LDW Y,#UBASE 
      000545 1D 00 02         [ 2] 1113 	SUBW X,#2
      000548 FF               [ 2] 1114         LDW (X),Y
      000549 81               [ 4] 1115         RET
                                   1116 
                                   1117 ;       tmp     ( -- a )
                                   1118 ;       A temporary storage.
      00054A 05 3C                 1119         .word      LINK
                                   1120         
                           00054C  1121 LINK = . 
      00054C 03                    1122 	.byte      3
      00054D 54 4D 50              1123         .ascii     "TMP"
      000550                       1124 TEMP:
      000550 90 AE 00 08      [ 2] 1125 	LDW Y,#UTMP
      000554 1D 00 02         [ 2] 1126 	SUBW X,#2
      000557 FF               [ 2] 1127         LDW (X),Y
      000558 81               [ 4] 1128         RET
                                   1129 
                                   1130 ;       >IN     ( -- a )
                                   1131 ;        Hold parsing pointer.
      000559 05 4C                 1132         .word      LINK
                           00055B  1133 LINK = . 
      00055B 03                    1134         .byte      3
      00055C 3E 49 4E              1135         .ascii    ">IN"
      00055F                       1136 INN:
      00055F 90 AE 00 0A      [ 2] 1137 	LDW Y,#UINN 
      000563 1D 00 02         [ 2] 1138 	SUBW X,#2
      000566 FF               [ 2] 1139         LDW (X),Y
      000567 81               [ 4] 1140         RET
                                   1141 
                                   1142 ;       #TIB    ( -- a )
                                   1143 ;       Count in terminal input buffer.
      000568 05 5B                 1144         .word      LINK
                           00056A  1145 LINK = . 
      00056A 04                    1146         .byte      4
      00056B 23 54 49 42           1147         .ascii     "#TIB"
      00056F                       1148 NTIB:
      00056F 90 AE 00 0C      [ 2] 1149 	LDW Y,#UCTIB 
      000573 1D 00 02         [ 2] 1150 	SUBW X,#2
      000576 FF               [ 2] 1151         LDW (X),Y
      000577 81               [ 4] 1152         RET
                                   1153 
                                   1154 ;       "EVAL   ( -- a )
                                   1155 ;       Execution vector of EVAL.
      000578 05 6A                 1156         .word      LINK
                           00057A  1157 LINK = . 
      00057A 05                    1158         .byte      5
      00057B 27 45 56 41 4C        1159         .ascii     "'EVAL"
      000580                       1160 TEVAL:
      000580 90 AE 00 10      [ 2] 1161 	LDW Y,#UINTER 
      000584 1D 00 02         [ 2] 1162 	SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000587 FF               [ 2] 1163         LDW (X),Y
      000588 81               [ 4] 1164         RET
                                   1165 
                                   1166 ;       HLD     ( -- a )
                                   1167 ;       Hold a pointer of output string.
      000589 05 7A                 1168         .word      LINK
                           00058B  1169 LINK = . 
      00058B 03                    1170         .byte      3
      00058C 48 4C 44              1171         .ascii     "HLD"
      00058F                       1172 HLD:
      00058F 90 AE 00 12      [ 2] 1173 	LDW Y,#UHLD 
      000593 1D 00 02         [ 2] 1174 	SUBW X,#2
      000596 FF               [ 2] 1175         LDW (X),Y
      000597 81               [ 4] 1176         RET
                                   1177 
                                   1178 ;       CONTEXT ( -- a )
                                   1179 ;       Start vocabulary search.
      000598 05 8B                 1180         .word      LINK
                           00059A  1181 LINK = . 
      00059A 07                    1182         .byte      7
      00059B 43 4F 4E 54 45 58 54  1183         .ascii     "CONTEXT"
      0005A2                       1184 CNTXT:
      0005A2 90 AE 00 14      [ 2] 1185 	LDW Y,#UCNTXT
      0005A6 1D 00 02         [ 2] 1186 	SUBW X,#2
      0005A9 FF               [ 2] 1187         LDW (X),Y
      0005AA 81               [ 4] 1188         RET
                                   1189 
                                   1190 ;       VP      ( -- a )
                                   1191 ;       Point to top of variables
      0005AB 05 9A                 1192         .word      LINK
                           0005AD  1193 LINK = . 
      0005AD 02                    1194         .byte      2
      0005AE 56 50                 1195         .ascii     "VP"
      0005B0                       1196 VPP:
      0005B0 90 AE 00 16      [ 2] 1197 	LDW Y,#UVP 
      0005B4 1D 00 02         [ 2] 1198 	SUBW X,#2
      0005B7 FF               [ 2] 1199         LDW (X),Y
      0005B8 81               [ 4] 1200         RET
                                   1201 
                                   1202 ;       CP    ( -- a )
                                   1203 ;       Pointer to top of FLASH 
      0005B9 05 AD                 1204         .word LINK 
                           0005BB  1205         LINK=.
      0005BB 02                    1206         .byte 2 
      0005BC 43 50                 1207         .ascii "CP"
      0005BE                       1208 CPP: 
      0005BE 90 AE 00 18      [ 2] 1209         ldw y,#UCP 
      0005C2 1D 00 02         [ 2] 1210         subw x,#CELLL 
      0005C5 FF               [ 2] 1211         ldw (x),y 
      0005C6 81               [ 4] 1212         ret                
                                   1213 
                                   1214 ;       LAST    ( -- a )
                                   1215 ;       Point to last name in dictionary.
      0005C7 05 BB                 1216         .word      LINK
                           0005C9  1217 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C9 04                    1218         .byte      4
      0005CA 4C 41 53 54           1219         .ascii     "LAST"
      0005CE                       1220 LAST:
      0005CE 90 AE 00 1A      [ 2] 1221 	LDW Y,#ULAST 
      0005D2 1D 00 02         [ 2] 1222 	SUBW X,#2
      0005D5 FF               [ 2] 1223         LDW (X),Y
      0005D6 81               [ 4] 1224         RET
                                   1225 
                                   1226 ;; Common functions
                                   1227 
                                   1228 ;       ?DUP    ( w -- w w | 0 )
                                   1229 ;       Dup tos if its is not zero.
      0005D7 05 C9                 1230         .word      LINK
                           0005D9  1231 LINK = . 
      0005D9 04                    1232         .byte      4
      0005DA 3F 44 55 50           1233         .ascii     "?DUP"
      0005DE                       1234 QDUP:
      0005DE 90 93            [ 1] 1235         LDW Y,X
      0005E0 90 FE            [ 2] 1236 	LDW Y,(Y)
      0005E2 27 04            [ 1] 1237         JREQ     QDUP1
      0005E4 1D 00 02         [ 2] 1238 	SUBW X,#2
      0005E7 FF               [ 2] 1239         LDW (X),Y
      0005E8 81               [ 4] 1240 QDUP1:  RET
                                   1241 
                                   1242 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1243 ;       Rot 3rd item to top.
      0005E9 05 D9                 1244         .word      LINK
                           0005EB  1245 LINK = . 
      0005EB 03                    1246         .byte      3
      0005EC 52 4F 54              1247         .ascii     "ROT"
      0005EF                       1248 ROT:
      0005EF 90 93            [ 1] 1249         ldw y,x 
      0005F1 90 FE            [ 2] 1250         ldw y,(y)
      0005F3 90 89            [ 2] 1251         pushw y 
      0005F5 90 93            [ 1] 1252         ldw y,x 
      0005F7 90 EE 04         [ 2] 1253         ldw y,(4,y)
      0005FA FF               [ 2] 1254         ldw (x),y 
      0005FB 90 93            [ 1] 1255         ldw y,x 
      0005FD 90 EE 02         [ 2] 1256         ldw y,(2,y)
      000600 EF 04            [ 2] 1257         ldw (4,x),y 
      000602 90 85            [ 2] 1258         popw y 
      000604 EF 02            [ 2] 1259         ldw (2,x),y
      000606 81               [ 4] 1260         ret 
                                   1261 
                                   1262 ;       2DROP   ( w w -- )
                                   1263 ;       Discard two items on stack.
      000607 05 EB                 1264         .word      LINK
                           000609  1265 LINK = . 
      000609 05                    1266         .byte      5
      00060A 32 44 52 4F 50        1267         .ascii     "2DROP"
      00060F                       1268 DDROP:
      00060F 1C 00 04         [ 2] 1269         ADDW X,#4
      000612 81               [ 4] 1270         RET
                                   1271 
                                   1272 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1273 ;       Duplicate top two items.
      000613 06 09                 1274         .word      LINK
                           000615  1275 LINK = . 
      000615 04                    1276         .byte      4
      000616 32 44 55 50           1277         .ascii     "2DUP"
      00061A                       1278 DDUP:
      00061A 1D 00 04         [ 2] 1279         SUBW X,#4
      00061D 90 93            [ 1] 1280         LDW Y,X
      00061F 90 EE 06         [ 2] 1281         LDW Y,(6,Y)
      000622 EF 02            [ 2] 1282         LDW (2,X),Y
      000624 90 93            [ 1] 1283         LDW Y,X
      000626 90 EE 04         [ 2] 1284         LDW Y,(4,Y)
      000629 FF               [ 2] 1285         LDW (X),Y
      00062A 81               [ 4] 1286         RET
                                   1287 
                                   1288 ;       +       ( w w -- sum )
                                   1289 ;       Add top two items.
      00062B 06 15                 1290         .word      LINK
                           00062D  1291 LINK = . 
      00062D 01                    1292         .byte      1
      00062E 2B                    1293         .ascii     "+"
      00062F                       1294 PLUS:
      00062F 90 93            [ 1] 1295         LDW Y,X
      000631 90 FE            [ 2] 1296         LDW Y,(Y)
      000633 90 BF 1E         [ 2] 1297         LDW YTEMP,Y
      000636 1C 00 02         [ 2] 1298         ADDW X,#2
      000639 90 93            [ 1] 1299         LDW Y,X
      00063B 90 FE            [ 2] 1300         LDW Y,(Y)
      00063D 72 B9 00 1E      [ 2] 1301         ADDW Y,YTEMP
      000641 FF               [ 2] 1302         LDW (X),Y
      000642 81               [ 4] 1303         RET
                                   1304 
                                   1305 ;       NOT     ( w -- w )
                                   1306 ;       One's complement of tos.
      000643 06 2D                 1307         .word      LINK
                           000645  1308 LINK = . 
      000645 03                    1309         .byte      3
      000646 4E 4F 54              1310         .ascii     "NOT"
      000649                       1311 INVER:
      000649 90 93            [ 1] 1312         LDW Y,X
      00064B 90 FE            [ 2] 1313         LDW Y,(Y)
      00064D 90 53            [ 2] 1314         CPLW Y
      00064F FF               [ 2] 1315         LDW (X),Y
      000650 81               [ 4] 1316         RET
                                   1317 
                                   1318 ;       NEGATE  ( n -- -n )
                                   1319 ;       Two's complement of tos.
      000651 06 45                 1320         .word      LINK
                           000653  1321 LINK = . 
      000653 06                    1322         .byte      6
      000654 4E 45 47 41 54 45     1323         .ascii     "NEGATE"
      00065A                       1324 NEGAT:
      00065A 90 93            [ 1] 1325         LDW Y,X
      00065C 90 FE            [ 2] 1326         LDW Y,(Y)
      00065E 90 50            [ 2] 1327         NEGW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000660 FF               [ 2] 1328         LDW (X),Y
      000661 81               [ 4] 1329         RET
                                   1330 
                                   1331 ;       DNEGATE ( d -- -d )
                                   1332 ;       Two's complement of top double.
      000662 06 53                 1333         .word      LINK
                           000664  1334 LINK = . 
      000664 07                    1335         .byte      7
      000665 44 4E 45 47 41 54 45  1336         .ascii     "DNEGATE"
      00066C                       1337 DNEGA:
      00066C 90 93            [ 1] 1338         LDW Y,X
      00066E 90 FE            [ 2] 1339 	LDW Y,(Y)
      000670 90 53            [ 2] 1340         CPLW Y     
      000672 90 BF 1E         [ 2] 1341 	LDW YTEMP,Y
      000675 90 93            [ 1] 1342         LDW Y,X
      000677 90 EE 02         [ 2] 1343         LDW Y,(2,Y)
      00067A 90 53            [ 2] 1344         CPLW Y
      00067C 72 A9 00 01      [ 2] 1345         addw y,#1
      000680 EF 02            [ 2] 1346         LDW (2,X),Y
      000682 90 BE 1E         [ 2] 1347         LDW Y,YTEMP
      000685 24 02            [ 1] 1348         JRNC DN1 
      000687 90 5C            [ 2] 1349         INCW Y
      000689 FF               [ 2] 1350 DN1:    LDW (X),Y
      00068A 81               [ 4] 1351         RET
                                   1352 
                                   1353 
                                   1354 ;       S>D ( n -- d )
                                   1355 ; convert single integer to double 
      00068B 06 64                 1356         .word LINK 
                           00068D  1357         LINK=. 
      00068D 03                    1358         .byte 3 
      00068E 53 3E 44              1359         .ascii "S>D"
      000691                       1360 STOD: 
      000691 1D 00 02         [ 2] 1361         subw x,#CELLL 
      000694 90 5F            [ 1] 1362         clrw y 
      000696 FF               [ 2] 1363         ldw (x),y 
      000697 90 93            [ 1] 1364         ldw y,x 
      000699 90 EE 02         [ 2] 1365         ldw y,(2,y)
      00069C 2A 05            [ 1] 1366         jrpl 1$ 
      00069E 90 AE FF FF      [ 2] 1367         ldw y,#-1
      0006A2 FF               [ 2] 1368         ldw (x),y 
      0006A3 81               [ 4] 1369 1$:     ret 
                                   1370 
                                   1371 
                                   1372 
                                   1373 
                                   1374 ;       -       ( n1 n2 -- n1-n2 )
                                   1375 ;       Subtraction.
      0006A4 06 8D                 1376         .word      LINK
                           0006A6  1377 LINK = . 
      0006A6 01                    1378         .byte      1
      0006A7 2D                    1379         .ascii     "-"
      0006A8                       1380 SUBB:
      0006A8 90 93            [ 1] 1381         LDW Y,X
      0006AA 90 FE            [ 2] 1382         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006AC 90 BF 1E         [ 2] 1383         LDW YTEMP,Y
      0006AF 1C 00 02         [ 2] 1384         ADDW X,#2
      0006B2 90 93            [ 1] 1385         LDW Y,X
      0006B4 90 FE            [ 2] 1386         LDW Y,(Y)
      0006B6 72 B2 00 1E      [ 2] 1387         SUBW Y,YTEMP
      0006BA FF               [ 2] 1388         LDW (X),Y
      0006BB 81               [ 4] 1389         RET
                                   1390 
                                   1391 ;       ABS     ( n -- n )
                                   1392 ;       Return  absolute value of n.
      0006BC 06 A6                 1393         .word      LINK
                           0006BE  1394 LINK = . 
      0006BE 03                    1395         .byte      3
      0006BF 41 42 53              1396         .ascii     "ABS"
      0006C2                       1397 ABSS:
      0006C2 90 93            [ 1] 1398         LDW Y,X
      0006C4 90 FE            [ 2] 1399 	LDW Y,(Y)
      0006C6 2A 03            [ 1] 1400         JRPL     AB1     ;negate:
      0006C8 90 50            [ 2] 1401         NEGW     Y     ;else negate hi byte
      0006CA FF               [ 2] 1402         LDW (X),Y
      0006CB 81               [ 4] 1403 AB1:    RET
                                   1404 
                                   1405 ;       =       ( w w -- t )
                                   1406 ;       Return true if top two are =al.
      0006CC 06 BE                 1407         .word      LINK
                           0006CE  1408 LINK = . 
      0006CE 01                    1409         .byte      1
      0006CF 3D                    1410         .ascii     "="
      0006D0                       1411 EQUAL:
      0006D0 A6 FF            [ 1] 1412         LD A,#0xFF  ;true
      0006D2 90 93            [ 1] 1413         LDW Y,X    ;D = n2
      0006D4 90 FE            [ 2] 1414         LDW Y,(Y)
      0006D6 90 BF 1E         [ 2] 1415         LDW YTEMP,Y
      0006D9 1C 00 02         [ 2] 1416         ADDW X,#2
      0006DC 90 93            [ 1] 1417         LDW Y,X
      0006DE 90 FE            [ 2] 1418         LDW Y,(Y)
      0006E0 90 B3 1E         [ 2] 1419         CPW Y,YTEMP     ;if n2 <> n1
      0006E3 27 01            [ 1] 1420         JREQ     EQ1
      0006E5 4F               [ 1] 1421         CLR A
      0006E6 F7               [ 1] 1422 EQ1:    LD (X),A
      0006E7 E7 01            [ 1] 1423         LD (1,X),A
      0006E9 81               [ 4] 1424 	RET     
                                   1425 
                                   1426 ;       U<      ( u u -- t )
                                   1427 ;       Unsigned compare of top two items.
      0006EA 06 CE                 1428         .word      LINK
                           0006EC  1429 LINK = . 
      0006EC 02                    1430         .byte      2
      0006ED 55 3C                 1431         .ascii     "U<"
      0006EF                       1432 ULESS:
      0006EF A6 FF            [ 1] 1433         LD A,#0xFF  ;true
      0006F1 90 93            [ 1] 1434         LDW Y,X    ;D = n2
      0006F3 90 FE            [ 2] 1435         LDW Y,(Y)
      0006F5 90 BF 1E         [ 2] 1436         LDW YTEMP,Y
      0006F8 1C 00 02         [ 2] 1437         ADDW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006FB 90 93            [ 1] 1438         LDW Y,X
      0006FD 90 FE            [ 2] 1439         LDW Y,(Y)
      0006FF 90 B3 1E         [ 2] 1440         CPW Y,YTEMP     ;if n2 <> n1
      000702 25 01            [ 1] 1441         JRULT     ULES1
      000704 4F               [ 1] 1442         CLR A
      000705 F7               [ 1] 1443 ULES1:  LD (X),A
      000706 E7 01            [ 1] 1444         LD (1,X),A
      000708 81               [ 4] 1445 	RET     
                                   1446 
                                   1447 ;       <       ( n1 n2 -- t )
                                   1448 ;       Signed compare of top two items.
      000709 06 EC                 1449         .word      LINK
                           00070B  1450 LINK = . 
      00070B 01                    1451         .byte      1
      00070C 3C                    1452         .ascii     "<"
      00070D                       1453 LESS:
      00070D A6 FF            [ 1] 1454         LD A,#0xFF  ;true
      00070F 90 93            [ 1] 1455         LDW Y,X    ;D = n2
      000711 90 FE            [ 2] 1456         LDW Y,(Y)
      000713 90 BF 1E         [ 2] 1457         LDW YTEMP,Y
      000716 1C 00 02         [ 2] 1458         ADDW X,#2
      000719 90 93            [ 1] 1459         LDW Y,X
      00071B 90 FE            [ 2] 1460         LDW Y,(Y)
      00071D 90 B3 1E         [ 2] 1461         CPW Y,YTEMP     ;if n2 <> n1
      000720 2F 01            [ 1] 1462         JRSLT     LT1
      000722 4F               [ 1] 1463         CLR A
      000723 F7               [ 1] 1464 LT1:    LD (X),A
      000724 E7 01            [ 1] 1465         LD (1,X),A
      000726 81               [ 4] 1466 	RET     
                                   1467 
                                   1468 ;       MAX     ( n n -- n )
                                   1469 ;       Return greater of two top items.
      000727 07 0B                 1470         .word      LINK
                           000729  1471 LINK = . 
      000729 03                    1472         .byte      3
      00072A 4D 41 58              1473         .ascii     "MAX"
      00072D                       1474 MAX:
      00072D 90 93            [ 1] 1475         LDW Y,X    ;D = n2
      00072F 90 EE 02         [ 2] 1476         LDW Y,(2,Y)
      000732 90 BF 1E         [ 2] 1477         LDW YTEMP,Y
      000735 90 93            [ 1] 1478         LDW Y,X
      000737 90 FE            [ 2] 1479         LDW Y,(Y)
      000739 90 B3 1E         [ 2] 1480         CPW Y,YTEMP     ;if n2 <> n1
      00073C 2F 02            [ 1] 1481         JRSLT     MAX1
      00073E EF 02            [ 2] 1482         LDW (2,X),Y
      000740 1C 00 02         [ 2] 1483 MAX1:   ADDW X,#2
      000743 81               [ 4] 1484 	RET     
                                   1485 
                                   1486 ;       MIN     ( n n -- n )
                                   1487 ;       Return smaller of top two items.
      000744 07 29                 1488         .word      LINK
                           000746  1489 LINK = . 
      000746 03                    1490         .byte      3
      000747 4D 49 4E              1491         .ascii     "MIN"
      00074A                       1492 MIN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00074A 90 93            [ 1] 1493         LDW Y,X    ;D = n2
      00074C 90 EE 02         [ 2] 1494         LDW Y,(2,Y)
      00074F 90 BF 1E         [ 2] 1495         LDW YTEMP,Y
      000752 90 93            [ 1] 1496         LDW Y,X
      000754 90 FE            [ 2] 1497         LDW Y,(Y)
      000756 90 B3 1E         [ 2] 1498         CPW Y,YTEMP     ;if n2 <> n1
      000759 2C 02            [ 1] 1499         JRSGT     MIN1
      00075B EF 02            [ 2] 1500         LDW (2,X),Y
      00075D 1C 00 02         [ 2] 1501 MIN1:	ADDW X,#2
      000760 81               [ 4] 1502 	RET     
                                   1503 
                                   1504 ;       WITHIN  ( u ul uh -- t )
                                   1505 ;       Return true if u is within
                                   1506 ;       range of ul and uh. ( ul <= u < uh )
      000761 07 46                 1507         .word      LINK
                           000763  1508 LINK = . 
      000763 06                    1509         .byte      6
      000764 57 49 54 48 49 4E     1510         .ascii     "WITHIN"
      00076A                       1511 WITHI:
      00076A CD 04 AE         [ 4] 1512         CALL     OVER
      00076D CD 06 A8         [ 4] 1513         CALL     SUBB
      000770 CD 04 4D         [ 4] 1514         CALL     TOR
      000773 CD 06 A8         [ 4] 1515         CALL     SUBB
      000776 CD 04 2E         [ 4] 1516         CALL     RFROM
      000779 CC 06 EF         [ 2] 1517         JP     ULESS
                                   1518 
                                   1519 ;; Divide
                                   1520 
                                   1521 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1522 ;       Unsigned divide of a double by a
                                   1523 ;       single. Return mod and quotient.
      00077C 07 63                 1524         .word      LINK
                           00077E  1525 LINK = . 
      00077E 06                    1526         .byte      6
      00077F 55 4D 2F 4D 4F 44     1527         .ascii     "UM/MOD"
      000785                       1528 UMMOD:
      000785 BF 1C            [ 2] 1529 	LDW XTEMP,X	; save stack pointer
      000787 FE               [ 2] 1530 	LDW X,(X)	; un
      000788 BF 1E            [ 2] 1531 	LDW YTEMP,X     ; save un
      00078A 90 BE 1C         [ 2] 1532 	LDW Y,XTEMP	; stack pointer
      00078D 90 EE 04         [ 2] 1533 	LDW Y,(4,Y)     ; Y=udl
      000790 BE 1C            [ 2] 1534 	LDW X,XTEMP
      000792 EE 02            [ 2] 1535 	LDW X,(2,X)	; X=udh
      000794 B3 1E            [ 2] 1536 	CPW X,YTEMP
      000796 23 0F            [ 2] 1537 	JRULE MMSM1
      000798 BE 1C            [ 2] 1538 	LDW X,XTEMP
      00079A 1C 00 02         [ 2] 1539 	ADDW X,#2	; pop off 1 level
      00079D 90 AE FF FF      [ 2] 1540 	LDW Y,#0xFFFF
      0007A1 FF               [ 2] 1541 	LDW (X),Y
      0007A2 90 5F            [ 1] 1542 	CLRW Y
      0007A4 EF 02            [ 2] 1543 	LDW (2,X),Y
      0007A6 81               [ 4] 1544 	RET
      0007A7                       1545 MMSM1:
                                   1546 ; take advantage of divw x,y when udh==0
      0007A7 5D               [ 2] 1547         tnzw x  ; is udh==0?
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0007A8 26 11            [ 1] 1548         jrne MMSM2 
      0007AA 93               [ 1] 1549         ldw x,y    ;udl 
      0007AB 90 BE 1E         [ 2] 1550         ldw y,YTEMP ; divisor 
      0007AE 65               [ 2] 1551         divw x,y 
      0007AF 89               [ 2] 1552         pushw x     ; quotient 
      0007B0 BE 1C            [ 2] 1553         ldw x,XTEMP 
      0007B2 1C 00 02         [ 2] 1554         addw x,#CELLL 
      0007B5 EF 02            [ 2] 1555         ldw (2,x),y  ; ur
      0007B7 90 85            [ 2] 1556         popw y 
      0007B9 FF               [ 2] 1557         ldw (x),y ; uq 
      0007BA 81               [ 4] 1558         ret 
      0007BB                       1559 MMSM2:        
      0007BB A6 11            [ 1] 1560 	LD A,#17	; loop count
      0007BD                       1561 MMSM3:
      0007BD B3 1E            [ 2] 1562 	CPW X,YTEMP	; compare udh to un
      0007BF 25 04            [ 1] 1563 	JRULT MMSM4	; can't subtract
      0007C1 72 B0 00 1E      [ 2] 1564 	SUBW X,YTEMP	; can subtract
      0007C5                       1565 MMSM4:
      0007C5 8C               [ 1] 1566 	CCF	; quotient bit
      0007C6 90 59            [ 2] 1567 	RLCW Y	; rotate into quotient
      0007C8 59               [ 2] 1568 	RLCW X	; rotate into remainder
      0007C9 4A               [ 1] 1569 	DEC A	; repeat
      0007CA 22 F1            [ 1] 1570 	JRUGT MMSM3
      0007CC 56               [ 2] 1571         RRCW X 
      0007CD BF 1E            [ 2] 1572 	LDW YTEMP,X	; done, save remainder
      0007CF BE 1C            [ 2] 1573 	LDW X,XTEMP
      0007D1 1C 00 02         [ 2] 1574 	ADDW X,#2	; drop
      0007D4 FF               [ 2] 1575 	LDW (X),Y
      0007D5 90 BE 1E         [ 2] 1576 	LDW Y,YTEMP	; save quotient
      0007D8 EF 02            [ 2] 1577 	LDW (2,X),Y
      0007DA 81               [ 4] 1578 	RET
                                   1579 	
                                   1580 ;       M/MOD   ( d n -- r q )
                                   1581 ;       Signed floored divide of double by
                                   1582 ;       single. Return mod and quotient.
      0007DB 07 7E                 1583         .word      LINK
                           0007DD  1584 LINK = . 
      0007DD 05                    1585         .byte      5
      0007DE 4D 2F 4D 4F 44        1586         .ascii     "M/MOD"
      0007E3                       1587 MSMOD:  
      0007E3 CD 04 84         [ 4] 1588         CALL	DUPP
      0007E6 CD 04 BD         [ 4] 1589         CALL	ZLESS
      0007E9 CD 04 84         [ 4] 1590         CALL	DUPP
      0007EC CD 04 4D         [ 4] 1591         CALL	TOR
      0007EF CD 03 92         [ 4] 1592         CALL	QBRAN
      0007F2 08 00                 1593         .word	MMOD1
      0007F4 CD 06 5A         [ 4] 1594         CALL	NEGAT
      0007F7 CD 04 4D         [ 4] 1595         CALL	TOR
      0007FA CD 06 6C         [ 4] 1596         CALL	DNEGA
      0007FD CD 04 2E         [ 4] 1597         CALL	RFROM
      000800 CD 04 4D         [ 4] 1598 MMOD1:	CALL	TOR
      000803 CD 04 84         [ 4] 1599         CALL	DUPP
      000806 CD 04 BD         [ 4] 1600         CALL	ZLESS
      000809 CD 03 92         [ 4] 1601         CALL	QBRAN
      00080C 08 14                 1602         .word	MMOD2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00080E CD 04 41         [ 4] 1603         CALL	RAT
      000811 CD 06 2F         [ 4] 1604         CALL	PLUS
      000814 CD 04 2E         [ 4] 1605 MMOD2:	CALL	RFROM
      000817 CD 07 85         [ 4] 1606         CALL	UMMOD
      00081A CD 04 2E         [ 4] 1607         CALL	RFROM
      00081D CD 03 92         [ 4] 1608         CALL	QBRAN
      000820 08 2B                 1609         .word	MMOD3
      000822 CD 04 94         [ 4] 1610         CALL	SWAPP
      000825 CD 06 5A         [ 4] 1611         CALL	NEGAT
      000828 CD 04 94         [ 4] 1612         CALL	SWAPP
      00082B 81               [ 4] 1613 MMOD3:	RET
                                   1614 
                                   1615 ;       /MOD    ( n n -- r q )
                                   1616 ;       Signed divide. Return mod and quotient.
      00082C 07 DD                 1617         .word      LINK
                           00082E  1618 LINK = . 
      00082E 04                    1619         .byte      4
      00082F 2F 4D 4F 44           1620         .ascii     "/MOD"
      000833                       1621 SLMOD:
      000833 CD 04 AE         [ 4] 1622         CALL	OVER
      000836 CD 04 BD         [ 4] 1623         CALL	ZLESS
      000839 CD 04 94         [ 4] 1624         CALL	SWAPP
      00083C CC 07 E3         [ 2] 1625         JP	MSMOD
                                   1626 
                                   1627 ;       MOD     ( n n -- r )
                                   1628 ;       Signed divide. Return mod only.
      00083F 08 2E                 1629         .word      LINK
                           000841  1630 LINK = . 
      000841 03                    1631         .byte      3
      000842 4D 4F 44              1632         .ascii     "MOD"
      000845                       1633 MODD:
      000845 CD 08 33         [ 4] 1634 	CALL	SLMOD
      000848 CC 04 7A         [ 2] 1635 	JP	DROP
                                   1636 
                                   1637 ;       /       ( n n -- q )
                                   1638 ;       Signed divide. Return quotient only.
      00084B 08 41                 1639         .word      LINK
                           00084D  1640 LINK = . 
      00084D 01                    1641         .byte      1
      00084E 2F                    1642         .ascii     "/"
      00084F                       1643 SLASH:
      00084F CD 08 33         [ 4] 1644         CALL	SLMOD
      000852 CD 04 94         [ 4] 1645         CALL	SWAPP
      000855 CC 04 7A         [ 2] 1646         JP	DROP
                                   1647 
                                   1648 ;; Multiply
                                   1649 
                                   1650 ;       UM*     ( u u -- ud )
                                   1651 ;       Unsigned multiply. Return double product.
      000858 08 4D                 1652         .word      LINK
                           00085A  1653 LINK = . 
      00085A 03                    1654         .byte      3
      00085B 55 4D 2A              1655         .ascii     "UM*"
      00085E                       1656 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1657 ; take advantage of SP addressing modes
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1658 ; these PRODx in RAM are not required
                                   1659 ; the product is kept on stack as local variable 
                                   1660         ;; bytes offset on data stack 
                           000002  1661         da=2 
                           000003  1662         db=3 
                           000000  1663         dc=0 
                           000001  1664         dd=1 
                                   1665         ;; product bytes offset on return stack 
                           000001  1666         UD1=1  ; ud bits 31..24
                           000002  1667         UD2=2  ; ud bits 23..16
                           000003  1668         UD3=3  ; ud bits 15..8 
                           000004  1669         UD4=4  ; ud bits 7..0 
                                   1670         ;; local variable for product set to zero   
      00085E 90 5F            [ 1] 1671         clrw y 
      000860 90 89            [ 2] 1672         pushw y  ; bits 15..0
      000862 90 89            [ 2] 1673         pushw y  ; bits 31..16 
      000864 E6 03            [ 1] 1674         ld a,(db,x) ; b 
      000866 90 97            [ 1] 1675         ld yl,a 
      000868 E6 01            [ 1] 1676         ld a,(dd,x)   ; d
      00086A 90 42            [ 4] 1677         mul y,a    ; b*d  
      00086C 17 03            [ 2] 1678         ldw (UD3,sp),y ; lowest weight product 
      00086E E6 03            [ 1] 1679         ld a,(db,x)
      000870 90 97            [ 1] 1680         ld yl,a 
      000872 E6 00            [ 1] 1681         ld a,(dc,x)
      000874 90 42            [ 4] 1682         mul y,a  ; b*c 
                                   1683         ;;; do the partial sum 
      000876 72 F9 02         [ 2] 1684         addw y,(UD2,sp)
      000879 4F               [ 1] 1685         clr a 
      00087A 49               [ 1] 1686         rlc a
      00087B 6B 01            [ 1] 1687         ld (UD1,sp),a 
      00087D 17 02            [ 2] 1688         ldw (UD2,sp),y 
      00087F E6 02            [ 1] 1689         ld a,(da,x)
      000881 90 97            [ 1] 1690         ld yl,a 
      000883 E6 01            [ 1] 1691         ld a,(dd,x)
      000885 90 42            [ 4] 1692         mul y,a   ; a*d 
                                   1693         ;; do partial sum 
      000887 72 F9 02         [ 2] 1694         addw y,(UD2,sp)
      00088A 4F               [ 1] 1695         clr a 
      00088B 19 01            [ 1] 1696         adc a,(UD1,sp)
      00088D 6B 01            [ 1] 1697         ld (UD1,sp),a  
      00088F 17 02            [ 2] 1698         ldw (UD2,sp),y 
      000891 E6 02            [ 1] 1699         ld a,(da,x)
      000893 90 97            [ 1] 1700         ld yl,a 
      000895 E6 00            [ 1] 1701         ld a,(dc,x)
      000897 90 42            [ 4] 1702         mul y,a  ;  a*c highest weight product 
                                   1703         ;;; do partial sum 
      000899 72 F9 01         [ 2] 1704         addw y,(UD1,sp)
      00089C FF               [ 2] 1705         ldw (x),y  ; udh 
      00089D 16 03            [ 2] 1706         ldw y,(UD3,sp)
      00089F EF 02            [ 2] 1707         ldw (2,x),y  ; udl  
      0008A1 5B 04            [ 2] 1708         addw sp,#4 ; drop local variable 
      0008A3 81               [ 4] 1709         ret  
                                   1710 
                                   1711 
                                   1712 ;       *       ( n n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1713 ;       Signed multiply. Return single product.
      0008A4 08 5A                 1714         .word      LINK
                           0008A6  1715 LINK = . 
      0008A6 01                    1716         .byte      1
      0008A7 2A                    1717         .ascii     "*"
      0008A8                       1718 STAR:
      0008A8 CD 08 5E         [ 4] 1719 	CALL	UMSTA
      0008AB CC 04 7A         [ 2] 1720 	JP	DROP
                                   1721 
                                   1722 ;       M*      ( n n -- d )
                                   1723 ;       Signed multiply. Return double product.
      0008AE 08 A6                 1724         .word      LINK
                           0008B0  1725 LINK = . 
      0008B0 02                    1726         .byte      2
      0008B1 4D 2A                 1727         .ascii     "M*"
      0008B3                       1728 MSTAR:      
      0008B3 CD 06 1A         [ 4] 1729         CALL	DDUP
      0008B6 CD 04 F9         [ 4] 1730         CALL	XORR
      0008B9 CD 04 BD         [ 4] 1731         CALL	ZLESS
      0008BC CD 04 4D         [ 4] 1732         CALL	TOR
      0008BF CD 06 C2         [ 4] 1733         CALL	ABSS
      0008C2 CD 04 94         [ 4] 1734         CALL	SWAPP
      0008C5 CD 06 C2         [ 4] 1735         CALL	ABSS
      0008C8 CD 08 5E         [ 4] 1736         CALL	UMSTA
      0008CB CD 04 2E         [ 4] 1737         CALL	RFROM
      0008CE CD 03 92         [ 4] 1738         CALL	QBRAN
      0008D1 08 D6                 1739         .word	MSTA1
      0008D3 CD 06 6C         [ 4] 1740         CALL	DNEGA
      0008D6 81               [ 4] 1741 MSTA1:	RET
                                   1742 
                                   1743 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1744 ;       Multiply n1 and n2, then divide
                                   1745 ;       by n3. Return mod and quotient.
      0008D7 08 B0                 1746         .word      LINK
                           0008D9  1747 LINK = . 
      0008D9 05                    1748         .byte      5
      0008DA 2A 2F 4D 4F 44        1749         .ascii     "*/MOD"
      0008DF                       1750 SSMOD:
      0008DF CD 04 4D         [ 4] 1751         CALL     TOR
      0008E2 CD 08 B3         [ 4] 1752         CALL     MSTAR
      0008E5 CD 04 2E         [ 4] 1753         CALL     RFROM
      0008E8 CC 07 E3         [ 2] 1754         JP     MSMOD
                                   1755 
                                   1756 ;       */      ( n1 n2 n3 -- q )
                                   1757 ;       Multiply n1 by n2, then divide
                                   1758 ;       by n3. Return quotient only.
      0008EB 08 D9                 1759         .word      LINK
                           0008ED  1760 LINK = . 
      0008ED 02                    1761         .byte      2
      0008EE 2A 2F                 1762         .ascii     "*/"
      0008F0                       1763 STASL:
      0008F0 CD 08 DF         [ 4] 1764         CALL	SSMOD
      0008F3 CD 04 94         [ 4] 1765         CALL	SWAPP
      0008F6 CC 04 7A         [ 2] 1766         JP	DROP
                                   1767 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1768 ;; Miscellaneous
                                   1769 
                                   1770 ;       CELL+   ( a -- a )
                                   1771 ;       Add cell size in byte to address.
      0008F9 08 ED                 1772         .word      LINK
                           0008FB  1773 LINK = . 
      0008FB 02                    1774         .byte       2
      0008FC 32 2B                 1775         .ascii     "2+"
      0008FE                       1776 CELLP:
      0008FE 90 93            [ 1] 1777         LDW Y,X
      000900 90 FE            [ 2] 1778 	LDW Y,(Y)
      000902 72 A9 00 02      [ 2] 1779         ADDW Y,#CELLL 
      000906 FF               [ 2] 1780         LDW (X),Y
      000907 81               [ 4] 1781         RET
                                   1782 
                                   1783 ;       CELL-   ( a -- a )
                                   1784 ;       Subtract 2 from address.
      000908 08 FB                 1785         .word      LINK
                           00090A  1786 LINK = . 
      00090A 02                    1787         .byte       2
      00090B 32 2D                 1788         .ascii     "2-"
      00090D                       1789 CELLM:
      00090D 90 93            [ 1] 1790         LDW Y,X
      00090F 90 FE            [ 2] 1791 	LDW Y,(Y)
      000911 72 A2 00 02      [ 2] 1792         SUBW Y,#CELLL
      000915 FF               [ 2] 1793         LDW (X),Y
      000916 81               [ 4] 1794         RET
                                   1795 
                                   1796 ;       CELLS   ( n -- n )
                                   1797 ;       Multiply tos by 2.
      000917 09 0A                 1798         .word      LINK
                           000919  1799 LINK = . 
      000919 02                    1800         .byte       2
      00091A 32 2A                 1801         .ascii     "2*"
      00091C                       1802 CELLS:
      00091C 90 93            [ 1] 1803         LDW Y,X
      00091E 90 FE            [ 2] 1804 	LDW Y,(Y)
      000920 90 58            [ 2] 1805         SLAW Y
      000922 FF               [ 2] 1806         LDW (X),Y
      000923 81               [ 4] 1807         RET
                                   1808 
                                   1809 ;       1+      ( a -- a )
                                   1810 ;       Add cell size in byte to address.
      000924 09 19                 1811         .word      LINK
                           000926  1812 LINK = . 
      000926 02                    1813         .byte      2
      000927 31 2B                 1814         .ascii     "1+"
      000929                       1815 ONEP:
      000929 90 93            [ 1] 1816         LDW Y,X
      00092B 90 FE            [ 2] 1817 	LDW Y,(Y)
      00092D 90 5C            [ 2] 1818         INCW Y
      00092F FF               [ 2] 1819         LDW (X),Y
      000930 81               [ 4] 1820         RET
                                   1821 
                                   1822 ;       1-      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1823 ;       Subtract 2 from address.
      000931 09 26                 1824         .word      LINK
                           000933  1825 LINK = . 
      000933 02                    1826         .byte      2
      000934 31 2D                 1827         .ascii     "1-"
      000936                       1828 ONEM:
      000936 90 93            [ 1] 1829         LDW Y,X
      000938 90 FE            [ 2] 1830 	LDW Y,(Y)
      00093A 90 5A            [ 2] 1831         DECW Y
      00093C FF               [ 2] 1832         LDW (X),Y
      00093D 81               [ 4] 1833         RET
                                   1834 
                                   1835 ;  shift left n times 
                                   1836 ; LSHIFT ( n1 n2 -- n1<<n2 )
      00093E 09 33                 1837         .word LINK 
                           000940  1838         LINK=.
      000940 06                    1839         .byte 6 
      000941 4C 53 48 49 46 54     1840         .ascii "LSHIFT"
      000947                       1841 LSHIFT:
      000947 E6 01            [ 1] 1842         ld a,(1,x)
      000949 1C 00 02         [ 2] 1843         addw x,#CELLL 
      00094C 90 93            [ 1] 1844         ldw y,x 
      00094E 90 FE            [ 2] 1845         ldw y,(y)
      000950                       1846 LSHIFT1:
      000950 4D               [ 1] 1847         tnz a 
      000951 27 05            [ 1] 1848         jreq LSHIFT4 
      000953 90 58            [ 2] 1849         sllw y 
      000955 4A               [ 1] 1850         dec a 
      000956 20 F8            [ 2] 1851         jra LSHIFT1 
      000958                       1852 LSHIFT4:
      000958 FF               [ 2] 1853         ldw (x),y 
      000959 81               [ 4] 1854         ret 
                                   1855 
                                   1856 ; shift right n times                 
                                   1857 ; RSHIFT (n1 n2 -- n1>>n2 )
      00095A 09 40                 1858         .word LINK 
                           00095C  1859         LINK=.
      00095C 06                    1860         .byte 6
      00095D 52 53 48 49 46 54     1861         .ascii "RSHIFT"
      000963                       1862 RSHIFT:
      000963 E6 01            [ 1] 1863         ld a,(1,x)
      000965 1C 00 02         [ 2] 1864         addw x,#CELLL 
      000968 90 93            [ 1] 1865         ldw y,x 
      00096A 90 FE            [ 2] 1866         ldw y,(y)
      00096C                       1867 RSHIFT1:
      00096C 4D               [ 1] 1868         tnz a 
      00096D 27 05            [ 1] 1869         jreq RSHIFT4 
      00096F 90 54            [ 2] 1870         srlw y 
      000971 4A               [ 1] 1871         dec a 
      000972 20 F8            [ 2] 1872         jra RSHIFT1 
      000974                       1873 RSHIFT4:
      000974 FF               [ 2] 1874         ldw (x),y 
      000975 81               [ 4] 1875         ret 
                                   1876 
                                   1877 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1878 ;       2/      ( n -- n )
                                   1879 ;       divide  tos by 2.
      000976 09 5C                 1880         .word      LINK
                           000978  1881 LINK = . 
      000978 02                    1882         .byte      2
      000979 32 2F                 1883         .ascii     "2/"
      00097B                       1884 TWOSL:
      00097B 90 93            [ 1] 1885         LDW Y,X
      00097D 90 FE            [ 2] 1886 	LDW Y,(Y)
      00097F 90 57            [ 2] 1887         SRAW Y
      000981 FF               [ 2] 1888         LDW (X),Y
      000982 81               [ 4] 1889         RET
                                   1890 
                                   1891 ;       BL      ( -- 32 )
                                   1892 ;       Return 32,  blank character.
      000983 09 78                 1893         .word      LINK
                           000985  1894 LINK = . 
      000985 02                    1895         .byte      2
      000986 42 4C                 1896         .ascii     "BL"
      000988                       1897 BLANK:
      000988 1D 00 02         [ 2] 1898         SUBW X,#2
      00098B 90 AE 00 20      [ 2] 1899 	LDW Y,#32
      00098F FF               [ 2] 1900         LDW (X),Y
      000990 81               [ 4] 1901         RET
                                   1902 
                                   1903 ;         0     ( -- 0)
                                   1904 ;         Return 0.
      000991 09 85                 1905         .word      LINK
                           000993  1906 LINK = . 
      000993 01                    1907         .byte       1
      000994 30                    1908         .ascii     "0"
      000995                       1909 ZERO:
      000995 1D 00 02         [ 2] 1910         SUBW X,#2
      000998 90 5F            [ 1] 1911 	CLRW Y
      00099A FF               [ 2] 1912         LDW (X),Y
      00099B 81               [ 4] 1913         RET
                                   1914 
                                   1915 ;         1     ( -- 1)
                                   1916 ;         Return 1.
      00099C 09 93                 1917         .word      LINK
                           00099E  1918 LINK = . 
      00099E 01                    1919         .byte       1
      00099F 31                    1920         .ascii     "1"
      0009A0                       1921 ONE:
      0009A0 1D 00 02         [ 2] 1922         SUBW X,#2
      0009A3 90 AE 00 01      [ 2] 1923 	LDW Y,#1
      0009A7 FF               [ 2] 1924         LDW (X),Y
      0009A8 81               [ 4] 1925         RET
                                   1926 
                                   1927 ;         -1    ( -- -1)
                                   1928 ;         Return 32,  blank character.
      0009A9 09 9E                 1929         .word      LINK
                           0009AB  1930 LINK = . 
      0009AB 02                    1931         .byte       2
      0009AC 2D 31                 1932         .ascii     "-1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009AE                       1933 MONE:
      0009AE 1D 00 02         [ 2] 1934         SUBW X,#2
      0009B1 90 AE FF FF      [ 2] 1935 	LDW Y,#0xFFFF
      0009B5 FF               [ 2] 1936         LDW (X),Y
      0009B6 81               [ 4] 1937         RET
                                   1938 
                                   1939 ;       >CHAR   ( c -- c )
                                   1940 ;       Filter non-printing characters.
      0009B7 09 AB                 1941         .word      LINK
                           0009B9  1942 LINK = . 
      0009B9 05                    1943         .byte      5
      0009BA 3E 43 48 41 52        1944         .ascii     ">CHAR"
      0009BF                       1945 TCHAR:
      0009BF E6 01            [ 1] 1946         ld a,(1,x)
      0009C1 A1 20            [ 1] 1947         cp a,#32  
      0009C3 2B 05            [ 1] 1948         jrmi 1$ 
      0009C5 A1 7F            [ 1] 1949         cp a,#127 
      0009C7 2A 01            [ 1] 1950         jrpl 1$ 
      0009C9 81               [ 4] 1951         ret 
      0009CA A6 5F            [ 1] 1952 1$:     ld a,#'_ 
      0009CC E7 01            [ 1] 1953         ld (1,x),a 
      0009CE 81               [ 4] 1954         ret 
                                   1955 
                                   1956 ;       DEPTH   ( -- n )
                                   1957 ;       Return  depth of  data stack.
      0009CF 09 B9                 1958         .word      LINK
                           0009D1  1959 LINK = . 
      0009D1 05                    1960         .byte      5
      0009D2 44 45 50 54 48        1961         .ascii     "DEPTH"
      0009D7                       1962 DEPTH: 
      0009D7 90 BE 24         [ 2] 1963         LDW Y,SP0    ;save data stack ptr
      0009DA BF 1C            [ 2] 1964 	LDW XTEMP,X
      0009DC 72 B2 00 1C      [ 2] 1965         SUBW Y,XTEMP     ;#bytes = SP0 - X
      0009E0 90 57            [ 2] 1966         SRAW Y    ;Y = #stack items
      0009E2 1D 00 02         [ 2] 1967 	SUBW X,#2
      0009E5 FF               [ 2] 1968         LDW (X),Y     ; if neg, underflow
      0009E6 81               [ 4] 1969         RET
                                   1970 
                                   1971 ;       PICK    ( ... +n -- ... w )
                                   1972 ;       Copy  nth stack item to tos.
      0009E7 09 D1                 1973         .word      LINK
                           0009E9  1974 LINK = . 
      0009E9 04                    1975         .byte      4
      0009EA 50 49 43 4B           1976         .ascii     "PICK"
      0009EE                       1977 PICK:
      0009EE 90 93            [ 1] 1978         LDW Y,X   ;D = n1
      0009F0 90 FE            [ 2] 1979         LDW Y,(Y)
                                   1980 ; modified for standard compliance          
                                   1981 ; 0 PICK must be equivalent to DUP 
      0009F2 90 5C            [ 2] 1982         INCW Y 
      0009F4 90 58            [ 2] 1983         SLAW Y
      0009F6 BF 1C            [ 2] 1984         LDW XTEMP,X
      0009F8 72 B9 00 1C      [ 2] 1985         ADDW Y,XTEMP
      0009FC 90 FE            [ 2] 1986         LDW Y,(Y)
      0009FE FF               [ 2] 1987         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009FF 81               [ 4] 1988         RET
                                   1989 
                                   1990 ;; Memory access
                                   1991 
                                   1992 ;       +!      ( n a -- )
                                   1993 ;       Add n to  contents at address a.
      000A00 09 E9                 1994         .word      LINK
                           000A02  1995 LINK = . 
      000A02 02                    1996         .byte      2
      000A03 2B 21                 1997         .ascii     "+!"
      000A05                       1998 PSTOR:
      000A05 90 93            [ 1] 1999         ldw y,x 
      000A07 90 FE            [ 2] 2000         ldw y,(y)
      000A09 90 BF 1E         [ 2] 2001         ldw YTEMP,y  ; address
      000A0C 90 FE            [ 2] 2002         ldw y,(y)  
      000A0E 90 89            [ 2] 2003         pushw y  ; value at address 
      000A10 90 93            [ 1] 2004         ldw y,x 
      000A12 90 EE 02         [ 2] 2005         ldw y,(2,y) ; n 
      000A15 72 F9 01         [ 2] 2006         addw y,(1,sp) ; n+value
      000A18 91 CF 1E         [ 5] 2007         ldw [YTEMP],y ;  a!
      000A1B 90 85            [ 2] 2008         popw y    ;drop local var
      000A1D 1C 00 04         [ 2] 2009         addw x,#4 ; DDROP 
      000A20 81               [ 4] 2010         ret 
                                   2011 
                                   2012 ;       2!      ( d a -- )
                                   2013 ;       Store  double integer to address a.
      000A21 0A 02                 2014         .word      LINK
                           000A23  2015 LINK = . 
      000A23 02                    2016         .byte      2
      000A24 32 21                 2017         .ascii     "2!"
      000A26                       2018 DSTOR:
      000A26 90 93            [ 1] 2019         ldw y,x 
      000A28 90 FE            [ 2] 2020         ldw y,(y)
      000A2A 90 BF 1E         [ 2] 2021         ldw YTEMP,y ; address 
      000A2D 1C 00 02         [ 2] 2022         addw x,#CELLL ; drop a 
      000A30 90 93            [ 1] 2023         ldw y,x 
      000A32 90 FE            [ 2] 2024         ldw y,(y) ; hi word 
      000A34 89               [ 2] 2025         pushw x 
      000A35 EE 02            [ 2] 2026         ldw x,(2,x) ; lo word 
      000A37 91 CF 1E         [ 5] 2027         ldw [YTEMP],y
      000A3A 90 93            [ 1] 2028         ldw y,x 
      000A3C AE 00 02         [ 2] 2029         ldw x,#2 
      000A3F 92 DF 1E         [ 5] 2030         ldw ([YTEMP],x),y 
      000A42 85               [ 2] 2031         popw x 
      000A43 1C 00 04         [ 2] 2032         addw x,#4 ; DDROP 
      000A46 81               [ 4] 2033         ret 
                                   2034 
                                   2035 ;       2@      ( a -- d )
                                   2036 ;       Fetch double integer from address a.
      000A47 0A 23                 2037         .word      LINK
                           000A49  2038 LINK = . 
      000A49 02                    2039         .byte      2
      000A4A 32 40                 2040         .ascii     "2@"
      000A4C                       2041 DAT:
      000A4C 90 93            [ 1] 2042         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A4E 90 FE            [ 2] 2043         ldw y,(y) ;address 
      000A50 90 BF 1E         [ 2] 2044         ldw YTEMP,y 
      000A53 1D 00 02         [ 2] 2045         subw x,#CELLL ; space for udh 
      000A56 91 CE 1E         [ 5] 2046         ldw y,[YTEMP] ; udh 
      000A59 FF               [ 2] 2047         ldw (x),y 
      000A5A 90 AE 00 02      [ 2] 2048         ldw y,#2
      000A5E 91 DE 1E         [ 5] 2049         ldw y,([YTEMP],y) ; udl 
      000A61 EF 02            [ 2] 2050         ldw (2,x),y
      000A63 81               [ 4] 2051         ret 
                                   2052 
                                   2053 ;       COUNT   ( b -- b +n )
                                   2054 ;       Return count byte of a string
                                   2055 ;       and add 1 to byte address.
      000A64 0A 49                 2056         .word      LINK
                           000A66  2057 LINK = . 
      000A66 05                    2058         .byte      5
      000A67 43 4F 55 4E 54        2059         .ascii     "COUNT"
      000A6C                       2060 COUNT:
      000A6C 90 93            [ 1] 2061         ldw y,x 
      000A6E 90 FE            [ 2] 2062         ldw y,(y) ; address 
      000A70 90 F6            [ 1] 2063         ld a,(y)  ; count 
      000A72 90 5C            [ 2] 2064         incw y 
      000A74 FF               [ 2] 2065         ldw (x),y 
      000A75 1D 00 02         [ 2] 2066         subw x,#CELLL 
      000A78 E7 01            [ 1] 2067         ld (1,x),a 
      000A7A 7F               [ 1] 2068         clr (x)
      000A7B 81               [ 4] 2069         ret 
                                   2070 
                                   2071 ;       HERE    ( -- a )
                                   2072 ;       Return  top of  variables
      000A7C 0A 66                 2073         .word      LINK
                           000A7E  2074 LINK = . 
      000A7E 04                    2075         .byte      4
      000A7F 48 45 52 45           2076         .ascii     "HERE"
      000A83                       2077 HERE:
      000A83 90 AE 00 16      [ 2] 2078       	ldw y,#UVP 
      000A87 90 FE            [ 2] 2079         ldw y,(y)
      000A89 1D 00 02         [ 2] 2080         subw x,#CELLL 
      000A8C FF               [ 2] 2081         ldw (x),y 
      000A8D 81               [ 4] 2082         ret 
                                   2083 
                                   2084 ;       PAD     ( -- a )
                                   2085 ;       Return address of text buffer
                                   2086 ;       above  code dictionary.
      000A8E 0A 7E                 2087         .word      LINK
                           000A90  2088 LINK = . 
      000A90 03                    2089         .byte      3
      000A91 50 41 44              2090         .ascii     "PAD"
      000A94                       2091 PAD:
      000A94 CD 0A 83         [ 4] 2092         CALL     HERE
      000A97 CD 03 5F         [ 4] 2093         CALL     DOLIT
      000A9A 00 50                 2094         .word      80
      000A9C CC 06 2F         [ 2] 2095         JP     PLUS
                                   2096 
                                   2097 ;       TIB     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2098 ;       Return address of terminal input buffer.
      000A9F 0A 90                 2099         .word      LINK
                           000AA1  2100 LINK = . 
      000AA1 03                    2101         .byte      3
      000AA2 54 49 42              2102         .ascii     "TIB"
      000AA5                       2103 TIB:
      000AA5 CD 05 6F         [ 4] 2104         CALL     NTIB
      000AA8 CD 08 FE         [ 4] 2105         CALL     CELLP
      000AAB CC 03 DD         [ 2] 2106         JP     AT
                                   2107 
                                   2108 ;       @EXECUTE        ( a -- )
                                   2109 ;       Execute vector stored in address a.
      000AAE 0A A1                 2110         .word      LINK
                           000AB0  2111 LINK = . 
      000AB0 08                    2112         .byte      8
      000AB1 40 45 58 45 43 55 54  2113         .ascii     "@EXECUTE"
             45
      000AB9                       2114 ATEXE:
      000AB9 CD 03 DD         [ 4] 2115         CALL     AT
      000ABC CD 05 DE         [ 4] 2116         CALL     QDUP    ;?address or zero
      000ABF CD 03 92         [ 4] 2117         CALL     QBRAN
      000AC2 0A C7                 2118         .word      EXE1
      000AC4 CD 03 B9         [ 4] 2119         CALL     EXECU   ;execute if non-zero
      000AC7 81               [ 4] 2120 EXE1:   RET     ;do nothing if zero
                                   2121 
                                   2122 ;       CMOVE   ( b1 b2 u -- )
                                   2123 ;       Copy u bytes from b1 to b2.
      000AC8 0A B0                 2124         .word      LINK
                           000ACA  2125 LINK = . 
      000ACA 05                    2126         .byte      5
      000ACB 43 4D 4F 56 45        2127         .ascii     "CMOVE"
      000AD0                       2128 CMOVE:
      000AD0 CD 04 4D         [ 4] 2129         CALL	TOR
      000AD3 CD 03 A9         [ 4] 2130         CALL	BRAN
      000AD6 0A F0                 2131         .word	CMOV2
      000AD8 CD 04 4D         [ 4] 2132 CMOV1:	CALL	TOR
      000ADB CD 04 84         [ 4] 2133         CALL	DUPP
      000ADE CD 03 FB         [ 4] 2134         CALL	CAT
      000AE1 CD 04 41         [ 4] 2135         CALL	RAT
      000AE4 CD 03 EA         [ 4] 2136         CALL	CSTOR
      000AE7 CD 09 29         [ 4] 2137         CALL	ONEP
      000AEA CD 04 2E         [ 4] 2138         CALL	RFROM
      000AED CD 09 29         [ 4] 2139         CALL	ONEP
      000AF0 CD 03 73         [ 4] 2140 CMOV2:	CALL	DONXT
      000AF3 0A D8                 2141         .word	CMOV1
      000AF5 CC 06 0F         [ 2] 2142         JP	DDROP
                                   2143 
                                   2144 ;       FILL    ( b u c -- )
                                   2145 ;       Fill u bytes of character c
                                   2146 ;       to area beginning at b.
      000AF8 0A CA                 2147         .word       LINK
                           000AFA  2148 LINK = . 
      000AFA 04                    2149         .byte       4
      000AFB 46 49 4C 4C           2150         .ascii     "FILL"
      000AFF                       2151 FILL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AFF 90 93            [ 1] 2152         ldw y,x 
      000B01 90 E6 01         [ 1] 2153         ld a,(1,y) ; c 
      000B04 1C 00 02         [ 2] 2154         addw x,#CELLL ; drop c 
      000B07 90 93            [ 1] 2155         ldw y,x 
      000B09 90 FE            [ 2] 2156         ldw y,(y) ; count
      000B0B 90 89            [ 2] 2157         pushw y 
      000B0D 1C 00 02         [ 2] 2158         addw x,#CELLL ; drop u 
      000B10 90 93            [ 1] 2159         ldw y,x 
      000B12 1C 00 02         [ 2] 2160         addw x,#CELLL ; drop b 
      000B15 90 FE            [ 2] 2161         ldw y,(y) ; address
      000B17 90 BF 1E         [ 2] 2162         ldw YTEMP,y
      000B1A 90 85            [ 2] 2163         popw y ; count 
      000B1C                       2164 FILL1:  
      000B1C 92 C7 1E         [ 4] 2165         ld [YTEMP],a 
      000B1F 3C 1F            [ 1] 2166         inc YTEMP+1
      000B21 24 02            [ 1] 2167         jrnc FILL2 
      000B23 3C 1E            [ 1] 2168         inc YTEMP
      000B25                       2169 FILL2: 
      000B25 90 5A            [ 2] 2170         decw y ; count 
      000B27 26 F3            [ 1] 2171         jrne FILL1  
      000B29 81               [ 4] 2172         ret 
                                   2173 
                                   2174 ;       ERASE   ( b u -- )
                                   2175 ;       Erase u bytes beginning at b.
      000B2A 0A FA                 2176         .word      LINK
                           000B2C  2177 LINK = . 
      000B2C 05                    2178         .byte      5
      000B2D 45 52 41 53 45        2179         .ascii     "ERASE"
      000B32                       2180 ERASE:
      000B32 90 5F            [ 1] 2181         clrw y 
      000B34 1D 00 02         [ 2] 2182         subw x,#CELLL 
      000B37 FF               [ 2] 2183         ldw (x),y 
      000B38 CC 0A FF         [ 2] 2184         jp FILL 
                                   2185 
                                   2186 
                                   2187 ;       PACK0   ( b u a -- a )
                                   2188 ;       Build a counted string with
                                   2189 ;       u characters from b. Null fill.
      000B3B 0B 2C                 2190         .word      LINK
                           000B3D  2191 LINK = . 
      000B3D 05                    2192         .byte      5
      000B3E 50 41 43 4B 30        2193         .ascii     "PACK0"
      000B43                       2194 PACKS:
      000B43 CD 04 84         [ 4] 2195         CALL     DUPP
      000B46 CD 04 4D         [ 4] 2196         CALL     TOR     ;strings only on cell boundary
      000B49 CD 06 1A         [ 4] 2197         CALL     DDUP
      000B4C CD 03 EA         [ 4] 2198         CALL     CSTOR
      000B4F CD 09 29         [ 4] 2199         CALL     ONEP ;save count
      000B52 CD 04 94         [ 4] 2200         CALL     SWAPP
      000B55 CD 0A D0         [ 4] 2201         CALL     CMOVE
      000B58 CD 04 2E         [ 4] 2202         CALL     RFROM
      000B5B 81               [ 4] 2203         RET
                                   2204 
                                   2205 ;; Numeric output, single precision
                                   2206 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2207 ;       DIGIT   ( u -- c )
                                   2208 ;       Convert digit u to a character.
      000B5C 0B 3D                 2209         .word      LINK
                           000B5E  2210 LINK = . 
      000B5E 05                    2211         .byte      5
      000B5F 44 49 47 49 54        2212         .ascii     "DIGIT"
      000B64                       2213 DIGIT:
      000B64 CD 03 5F         [ 4] 2214         CALL	DOLIT
      000B67 00 09                 2215         .word	9
      000B69 CD 04 AE         [ 4] 2216         CALL	OVER
      000B6C CD 07 0D         [ 4] 2217         CALL	LESS
      000B6F CD 03 5F         [ 4] 2218         CALL	DOLIT
      000B72 00 07                 2219         .word	7
      000B74 CD 04 D0         [ 4] 2220         CALL	ANDD
      000B77 CD 06 2F         [ 4] 2221         CALL	PLUS
      000B7A CD 03 5F         [ 4] 2222         CALL	DOLIT
      000B7D 00 30                 2223         .word	48	;'0'
      000B7F CC 06 2F         [ 2] 2224         JP	PLUS
                                   2225 
                                   2226 ;       EXTRACT ( n base -- n c )
                                   2227 ;       Extract least significant digit from n.
      000B82 0B 5E                 2228         .word      LINK
                           000B84  2229 LINK = . 
      000B84 07                    2230         .byte      7
      000B85 45 58 54 52 41 43 54  2231         .ascii     "EXTRACT"
      000B8C                       2232 EXTRC:
      000B8C CD 09 95         [ 4] 2233         CALL     ZERO
      000B8F CD 04 94         [ 4] 2234         CALL     SWAPP
      000B92 CD 07 85         [ 4] 2235         CALL     UMMOD
      000B95 CD 04 94         [ 4] 2236         CALL     SWAPP
      000B98 CC 0B 64         [ 2] 2237         JP     DIGIT
                                   2238 
                                   2239 ;       <#      ( -- )
                                   2240 ;       Initiate  numeric output process.
      000B9B 0B 84                 2241         .word      LINK
                           000B9D  2242 LINK = . 
      000B9D 02                    2243         .byte      2
      000B9E 3C 23                 2244         .ascii     "<#"
      000BA0                       2245 BDIGS:
      000BA0 CD 0A 94         [ 4] 2246         CALL     PAD
      000BA3 CD 05 8F         [ 4] 2247         CALL     HLD
      000BA6 CC 03 C6         [ 2] 2248         JP     STORE
                                   2249 
                                   2250 ;       HOLD    ( c -- )
                                   2251 ;       Insert a character into output string.
      000BA9 0B 9D                 2252         .word      LINK
                           000BAB  2253 LINK = . 
      000BAB 04                    2254         .byte      4
      000BAC 48 4F 4C 44           2255         .ascii     "HOLD"
      000BB0                       2256 HOLD:
      000BB0 CD 05 8F         [ 4] 2257         CALL     HLD
      000BB3 CD 03 DD         [ 4] 2258         CALL     AT
      000BB6 CD 09 36         [ 4] 2259         CALL     ONEM
      000BB9 CD 04 84         [ 4] 2260         CALL     DUPP
      000BBC CD 05 8F         [ 4] 2261         CALL     HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000BBF CD 03 C6         [ 4] 2262         CALL     STORE
      000BC2 CC 03 EA         [ 2] 2263         JP     CSTOR
                                   2264 
                                   2265 ;       #       ( u -- u )
                                   2266 ;       Extract one digit from u and
                                   2267 ;       append digit to output string.
      000BC5 0B AB                 2268         .word      LINK
                           000BC7  2269 LINK = . 
      000BC7 01                    2270         .byte      1
      000BC8 23                    2271         .ascii     "#"
      000BC9                       2272 DIG:
      000BC9 CD 05 41         [ 4] 2273         CALL     BASE
      000BCC CD 03 DD         [ 4] 2274         CALL     AT
      000BCF CD 0B 8C         [ 4] 2275         CALL     EXTRC
      000BD2 CC 0B B0         [ 2] 2276         JP     HOLD
                                   2277 
                                   2278 ;       #S      ( u -- 0 )
                                   2279 ;       Convert u until all digits
                                   2280 ;       are added to output string.
      000BD5 0B C7                 2281         .word      LINK
                           000BD7  2282 LINK = . 
      000BD7 02                    2283         .byte      2
      000BD8 23 53                 2284         .ascii     "#S"
      000BDA                       2285 DIGS:
      000BDA CD 0B C9         [ 4] 2286 DIGS1:  CALL     DIG
      000BDD CD 04 84         [ 4] 2287         CALL     DUPP
      000BE0 CD 03 92         [ 4] 2288         CALL     QBRAN
      000BE3 0B E7                 2289         .word      DIGS2
      000BE5 20 F3            [ 2] 2290         JRA     DIGS1
      000BE7 81               [ 4] 2291 DIGS2:  RET
                                   2292 
                                   2293 ;       SIGN    ( n -- )
                                   2294 ;       Add a minus sign to
                                   2295 ;       numeric output string.
      000BE8 0B D7                 2296         .word      LINK
                           000BEA  2297 LINK = . 
      000BEA 04                    2298         .byte      4
      000BEB 53 49 47 4E           2299         .ascii     "SIGN"
      000BEF                       2300 SIGN:
      000BEF CD 04 BD         [ 4] 2301         CALL     ZLESS
      000BF2 CD 03 92         [ 4] 2302         CALL     QBRAN
      000BF5 0B FF                 2303         .word      SIGN1
      000BF7 CD 03 5F         [ 4] 2304         CALL     DOLIT
      000BFA 00 2D                 2305         .word      45	;"-"
      000BFC CC 0B B0         [ 2] 2306         JP     HOLD
      000BFF 81               [ 4] 2307 SIGN1:  RET
                                   2308 
                                   2309 ;       #>      ( w -- b u )
                                   2310 ;       Prepare output string.
      000C00 0B EA                 2311         .word      LINK
                           000C02  2312 LINK = . 
      000C02 02                    2313         .byte      2
      000C03 23 3E                 2314         .ascii     "#>"
      000C05                       2315 EDIGS:
      000C05 CD 04 7A         [ 4] 2316         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C08 CD 05 8F         [ 4] 2317         CALL     HLD
      000C0B CD 03 DD         [ 4] 2318         CALL     AT
      000C0E CD 0A 94         [ 4] 2319         CALL     PAD
      000C11 CD 04 AE         [ 4] 2320         CALL     OVER
      000C14 CC 06 A8         [ 2] 2321         JP     SUBB
                                   2322 
                                   2323 ;       str     ( w -- b u )
                                   2324 ;       Convert a signed integer
                                   2325 ;       to a numeric string.
      000C17 0C 02                 2326         .word      LINK
                           000C19  2327 LINK = . 
      000C19 03                    2328         .byte      3
      000C1A 53 54 52              2329         .ascii     "STR"
      000C1D                       2330 STR:
      000C1D CD 04 84         [ 4] 2331         CALL     DUPP
      000C20 CD 04 4D         [ 4] 2332         CALL     TOR
      000C23 CD 06 C2         [ 4] 2333         CALL     ABSS
      000C26 CD 0B A0         [ 4] 2334         CALL     BDIGS
      000C29 CD 0B DA         [ 4] 2335         CALL     DIGS
      000C2C CD 04 2E         [ 4] 2336         CALL     RFROM
      000C2F CD 0B EF         [ 4] 2337         CALL     SIGN
      000C32 CC 0C 05         [ 2] 2338         JP     EDIGS
                                   2339 
                                   2340 ;       HEX     ( -- )
                                   2341 ;       Use radix 16 as base for
                                   2342 ;       numeric conversions.
      000C35 0C 19                 2343         .word      LINK
                           000C37  2344 LINK = . 
      000C37 03                    2345         .byte      3
      000C38 48 45 58              2346         .ascii     "HEX"
      000C3B                       2347 HEX:
      000C3B CD 03 5F         [ 4] 2348         CALL     DOLIT
      000C3E 00 10                 2349         .word      16
      000C40 CD 05 41         [ 4] 2350         CALL     BASE
      000C43 CC 03 C6         [ 2] 2351         JP     STORE
                                   2352 
                                   2353 ;       DECIMAL ( -- )
                                   2354 ;       Use radix 10 as base
                                   2355 ;       for numeric conversions.
      000C46 0C 37                 2356         .word      LINK
                           000C48  2357 LINK = . 
      000C48 07                    2358         .byte      7
      000C49 44 45 43 49 4D 41 4C  2359         .ascii     "DECIMAL"
      000C50                       2360 DECIM:
      000C50 CD 03 5F         [ 4] 2361         CALL     DOLIT
      000C53 00 0A                 2362         .word      10
      000C55 CD 05 41         [ 4] 2363         CALL     BASE
      000C58 CC 03 C6         [ 2] 2364         JP     STORE
                                   2365 
                                   2366 ;; Numeric input, single precision
                                   2367 
                                   2368 ;       DIGIT?  ( c base -- u t )
                                   2369 ;       Convert a character to its numeric
                                   2370 ;       value. A flag indicates success.
      000C5B 0C 48                 2371         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                           000C5D  2372 LINK = . 
      000C5D 06                    2373         .byte       6
      000C5E 44 49 47 49 54 3F     2374         .ascii     "DIGIT?"
      000C64                       2375 DIGTQ:
      000C64 CD 04 4D         [ 4] 2376         CALL     TOR
      000C67 CD 03 5F         [ 4] 2377         CALL     DOLIT
      000C6A 00 30                 2378         .word     48	; "0"
      000C6C CD 06 A8         [ 4] 2379         CALL     SUBB
      000C6F CD 03 5F         [ 4] 2380         CALL     DOLIT
      000C72 00 09                 2381         .word      9
      000C74 CD 04 AE         [ 4] 2382         CALL     OVER
      000C77 CD 07 0D         [ 4] 2383         CALL     LESS
      000C7A CD 03 92         [ 4] 2384         CALL     QBRAN
      000C7D 0C 95                 2385         .word      DGTQ1
      000C7F CD 03 5F         [ 4] 2386         CALL     DOLIT
      000C82 00 07                 2387         .word      7
      000C84 CD 06 A8         [ 4] 2388         CALL     SUBB
      000C87 CD 04 84         [ 4] 2389         CALL     DUPP
      000C8A CD 03 5F         [ 4] 2390         CALL     DOLIT
      000C8D 00 0A                 2391         .word      10
      000C8F CD 07 0D         [ 4] 2392         CALL     LESS
      000C92 CD 04 E4         [ 4] 2393         CALL     ORR
      000C95 CD 04 84         [ 4] 2394 DGTQ1:  CALL     DUPP
      000C98 CD 04 2E         [ 4] 2395         CALL     RFROM
      000C9B CC 06 EF         [ 2] 2396         JP     ULESS
                                   2397 
                                   2398 ;       NUMBER? ( a -- n T | a F )
                                   2399 ;       Convert a number string to
                                   2400 ;       integer. Push a flag on tos.
      000C9E 0C 5D                 2401         .word      LINK
                           000CA0  2402 LINK = . 
      000CA0 07                    2403         .byte      7
      000CA1 4E 55 4D 42 45 52 3F  2404         .ascii     "NUMBER?"
      000CA8                       2405 NUMBQ:
      000CA8 CD 05 41         [ 4] 2406         CALL     BASE
      000CAB CD 03 DD         [ 4] 2407         CALL     AT
      000CAE CD 04 4D         [ 4] 2408         CALL     TOR
      000CB1 CD 09 95         [ 4] 2409         CALL     ZERO
      000CB4 CD 04 AE         [ 4] 2410         CALL     OVER
      000CB7 CD 0A 6C         [ 4] 2411         CALL     COUNT
      000CBA CD 04 AE         [ 4] 2412         CALL     OVER
      000CBD CD 03 FB         [ 4] 2413         CALL     CAT
      000CC0 CD 03 5F         [ 4] 2414         CALL     DOLIT
      000CC3 00 24                 2415         .word     36	; "0x"
      000CC5 CD 06 D0         [ 4] 2416         CALL     EQUAL
      000CC8 CD 03 92         [ 4] 2417         CALL     QBRAN
      000CCB 0C DC                 2418         .word      NUMQ1
      000CCD CD 0C 3B         [ 4] 2419         CALL     HEX
      000CD0 CD 04 94         [ 4] 2420         CALL     SWAPP
      000CD3 CD 09 29         [ 4] 2421         CALL     ONEP
      000CD6 CD 04 94         [ 4] 2422         CALL     SWAPP
      000CD9 CD 09 36         [ 4] 2423         CALL     ONEM
      000CDC CD 04 AE         [ 4] 2424 NUMQ1:  CALL     OVER
      000CDF CD 03 FB         [ 4] 2425         CALL     CAT
      000CE2 CD 03 5F         [ 4] 2426         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CE5 00 2D                 2427         .word     45	; "-"
      000CE7 CD 06 D0         [ 4] 2428         CALL     EQUAL
      000CEA CD 04 4D         [ 4] 2429         CALL     TOR
      000CED CD 04 94         [ 4] 2430         CALL     SWAPP
      000CF0 CD 04 41         [ 4] 2431         CALL     RAT
      000CF3 CD 06 A8         [ 4] 2432         CALL     SUBB
      000CF6 CD 04 94         [ 4] 2433         CALL     SWAPP
      000CF9 CD 04 41         [ 4] 2434         CALL     RAT
      000CFC CD 06 2F         [ 4] 2435         CALL     PLUS
      000CFF CD 05 DE         [ 4] 2436         CALL     QDUP
      000D02 CD 03 92         [ 4] 2437         CALL     QBRAN
      000D05 0D 66                 2438         .word      NUMQ6
      000D07 CD 09 36         [ 4] 2439         CALL     ONEM
      000D0A CD 04 4D         [ 4] 2440         CALL     TOR
      000D0D CD 04 84         [ 4] 2441 NUMQ2:  CALL     DUPP
      000D10 CD 04 4D         [ 4] 2442         CALL     TOR
      000D13 CD 03 FB         [ 4] 2443         CALL     CAT
      000D16 CD 05 41         [ 4] 2444         CALL     BASE
      000D19 CD 03 DD         [ 4] 2445         CALL     AT
      000D1C CD 0C 64         [ 4] 2446         CALL     DIGTQ
      000D1F CD 03 92         [ 4] 2447         CALL     QBRAN
      000D22 0D 54                 2448         .word      NUMQ4
      000D24 CD 04 94         [ 4] 2449         CALL     SWAPP
      000D27 CD 05 41         [ 4] 2450         CALL     BASE
      000D2A CD 03 DD         [ 4] 2451         CALL     AT
      000D2D CD 08 A8         [ 4] 2452         CALL     STAR
      000D30 CD 06 2F         [ 4] 2453         CALL     PLUS
      000D33 CD 04 2E         [ 4] 2454         CALL     RFROM
      000D36 CD 09 29         [ 4] 2455         CALL     ONEP
      000D39 CD 03 73         [ 4] 2456         CALL     DONXT
      000D3C 0D 0D                 2457         .word      NUMQ2
      000D3E CD 04 41         [ 4] 2458         CALL     RAT
      000D41 CD 04 94         [ 4] 2459         CALL     SWAPP
      000D44 CD 04 7A         [ 4] 2460         CALL     DROP
      000D47 CD 03 92         [ 4] 2461         CALL     QBRAN
      000D4A 0D 4F                 2462         .word      NUMQ3
      000D4C CD 06 5A         [ 4] 2463         CALL     NEGAT
      000D4F CD 04 94         [ 4] 2464 NUMQ3:  CALL     SWAPP
      000D52 20 0F            [ 2] 2465         JRA     NUMQ5
      000D54 CD 04 2E         [ 4] 2466 NUMQ4:  CALL     RFROM
      000D57 CD 04 2E         [ 4] 2467         CALL     RFROM
      000D5A CD 06 0F         [ 4] 2468         CALL     DDROP
      000D5D CD 06 0F         [ 4] 2469         CALL     DDROP
      000D60 CD 09 95         [ 4] 2470         CALL     ZERO
      000D63 CD 04 84         [ 4] 2471 NUMQ5:  CALL     DUPP
      000D66 CD 04 2E         [ 4] 2472 NUMQ6:  CALL     RFROM
      000D69 CD 06 0F         [ 4] 2473         CALL     DDROP
      000D6C CD 04 2E         [ 4] 2474         CALL     RFROM
      000D6F CD 05 41         [ 4] 2475         CALL     BASE
      000D72 CC 03 C6         [ 2] 2476         JP     STORE
                                   2477 
                                   2478 ;; Basic I/O
                                   2479 
                                   2480 ;       KEY     ( -- c )
                                   2481 ;       Wait for and return an
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2482 ;       input character.
      000D75 0C A0                 2483         .word      LINK
                           000D77  2484 LINK = . 
      000D77 03                    2485         .byte      3
      000D78 4B 45 59              2486         .ascii     "KEY"
      000D7B                       2487 KEY:
      000D7B 72 0B 52 40 FB   [ 2] 2488         btjf UART2_SR,#UART_SR_RXNE,. 
      000D80 C6 52 41         [ 1] 2489         ld a,UART2_DR 
      000D83 1D 00 02         [ 2] 2490         subw x,#CELLL 
      000D86 E7 01            [ 1] 2491         ld (1,x),a 
      000D88 7F               [ 1] 2492         clr (x)
      000D89 81               [ 4] 2493         ret 
                                   2494 
                                   2495 ;       NUF?    ( -- t )
                                   2496 ;       Return false if no input,
                                   2497 ;       else pause and if CR return true.
      000D8A 0D 77                 2498         .word      LINK
                           000D8C  2499 LINK = . 
      000D8C 04                    2500         .byte      4
      000D8D 4E 55 46 3F           2501         .ascii     "NUF?"
      000D91                       2502 NUFQ:
      000D91 CD 03 2B         [ 4] 2503         CALL     QKEY
      000D94 CD 04 84         [ 4] 2504         CALL     DUPP
      000D97 CD 03 92         [ 4] 2505         CALL     QBRAN
      000D9A 0D AA                 2506         .word    NUFQ1
      000D9C CD 06 0F         [ 4] 2507         CALL     DDROP
      000D9F CD 0D 7B         [ 4] 2508         CALL     KEY
      000DA2 CD 03 5F         [ 4] 2509         CALL     DOLIT
      000DA5 00 0D                 2510         .word      CRR
      000DA7 CC 06 D0         [ 2] 2511         JP     EQUAL
      000DAA 81               [ 4] 2512 NUFQ1:  RET
                                   2513 
                                   2514 ;       SPACE   ( -- )
                                   2515 ;       Send  blank character to
                                   2516 ;       output device.
      000DAB 0D 8C                 2517         .word      LINK
                           000DAD  2518 LINK = . 
      000DAD 05                    2519         .byte      5
      000DAE 53 50 41 43 45        2520         .ascii     "SPACE"
      000DB3                       2521 SPACE:
      000DB3 CD 09 88         [ 4] 2522         CALL     BLANK
      000DB6 CC 03 49         [ 2] 2523         JP     EMIT
                                   2524 
                                   2525 ;       SPACES  ( +n -- )
                                   2526 ;       Send n spaces to output device.
      000DB9 0D AD                 2527         .word      LINK
                           000DBB  2528 LINK = . 
      000DBB 06                    2529         .byte      6
      000DBC 53 50 41 43 45 53     2530         .ascii     "SPACES"
      000DC2                       2531 SPACS:
      000DC2 CD 09 95         [ 4] 2532         CALL     ZERO
      000DC5 CD 07 2D         [ 4] 2533         CALL     MAX
      000DC8 CD 04 4D         [ 4] 2534         CALL     TOR
      000DCB 20 03            [ 2] 2535         JRA      CHAR2
      000DCD CD 0D B3         [ 4] 2536 CHAR1:  CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000DD0 CD 03 73         [ 4] 2537 CHAR2:  CALL     DONXT
      000DD3 0D CD                 2538         .word    CHAR1
      000DD5 81               [ 4] 2539         RET
                                   2540 
                                   2541 ;       TYPE    ( b u -- )
                                   2542 ;       Output u characters from b.
      000DD6 0D BB                 2543         .word      LINK
                           000DD8  2544 LINK = . 
      000DD8 04                    2545         .byte      4
      000DD9 54 59 50 45           2546         .ascii     "TYPE"
      000DDD                       2547 TYPES:
      000DDD CD 04 4D         [ 4] 2548         CALL     TOR
      000DE0 20 0C            [ 2] 2549         JRA     TYPE2
      000DE2 CD 04 84         [ 4] 2550 TYPE1:  CALL     DUPP
      000DE5 CD 03 FB         [ 4] 2551         CALL     CAT
      000DE8 CD 03 49         [ 4] 2552         CALL     EMIT
      000DEB CD 09 29         [ 4] 2553         CALL     ONEP
      000DEE CD 03 73         [ 4] 2554 TYPE2:  CALL     DONXT
      000DF1 0D E2                 2555         .word      TYPE1
      000DF3 CC 04 7A         [ 2] 2556         JP     DROP
                                   2557 
                                   2558 ;       CR      ( -- )
                                   2559 ;       Output a carriage return
                                   2560 ;       and a line feed.
      000DF6 0D D8                 2561         .word      LINK
                           000DF8  2562 LINK = . 
      000DF8 02                    2563         .byte      2
      000DF9 43 52                 2564         .ascii     "CR"
      000DFB                       2565 CR:
      000DFB CD 03 5F         [ 4] 2566         CALL     DOLIT
      000DFE 00 0D                 2567         .word      CRR
      000E00 CD 03 49         [ 4] 2568         CALL     EMIT
      000E03 CD 03 5F         [ 4] 2569         CALL     DOLIT
      000E06 00 0A                 2570         .word      LF
      000E08 CC 03 49         [ 2] 2571         JP     EMIT
                                   2572 
                                   2573 ;       do$     ( -- a )
                                   2574 ;       Return  address of a compiled
                                   2575 ;       string.
      000E0B 0D F8                 2576         .word      LINK
                           000E0D  2577 LINK = . 
      000E0D 43                    2578 	.byte      COMPO+3
      000E0E 44 4F 24              2579         .ascii     "DO$"
      000E11                       2580 DOSTR:
      000E11 CD 04 2E         [ 4] 2581         CALL     RFROM
      000E14 CD 04 41         [ 4] 2582         CALL     RAT
      000E17 CD 04 2E         [ 4] 2583         CALL     RFROM
      000E1A CD 0A 6C         [ 4] 2584         CALL     COUNT
      000E1D CD 06 2F         [ 4] 2585         CALL     PLUS
      000E20 CD 04 4D         [ 4] 2586         CALL     TOR
      000E23 CD 04 94         [ 4] 2587         CALL     SWAPP
      000E26 CD 04 4D         [ 4] 2588         CALL     TOR
      000E29 81               [ 4] 2589         RET
                                   2590 
                                   2591 ;       $"|     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2592 ;       Run time routine compiled by $".
                                   2593 ;       Return address of a compiled string.
      000E2A 0E 0D                 2594         .word      LINK
                           000E2C  2595 LINK = . 
      000E2C 43                    2596 	.byte      COMPO+3
      000E2D 24 22 7C              2597         .byte     '$','"','|'
      000E30                       2598 STRQP:
      000E30 CD 0E 11         [ 4] 2599         CALL     DOSTR
      000E33 81               [ 4] 2600         RET
                                   2601 
                                   2602 ;       ."|     ( -- )
                                   2603 ;       Run time routine of ." .
                                   2604 ;       Output a compiled string.
      000E34 0E 2C                 2605         .word      LINK
                           000E36  2606 LINK = . 
      000E36 43                    2607 	.byte      COMPO+3
      000E37 2E 22 7C              2608         .byte     '.','"','|'
      000E3A                       2609 DOTQP:
      000E3A CD 0E 11         [ 4] 2610         CALL     DOSTR
      000E3D CD 0A 6C         [ 4] 2611         CALL     COUNT
      000E40 CC 0D DD         [ 2] 2612         JP     TYPES
                                   2613 
                                   2614 ;       .R      ( n +n -- )
                                   2615 ;       Display an integer in a field
                                   2616 ;       of n columns, right justified.
      000E43 0E 36                 2617         .word      LINK
                           000E45  2618 LINK = . 
      000E45 02                    2619         .byte      2
      000E46 2E 52                 2620         .ascii     ".R"
      000E48                       2621 DOTR:
      000E48 CD 04 4D         [ 4] 2622         CALL     TOR
      000E4B CD 0C 1D         [ 4] 2623         CALL     STR
      000E4E CD 04 2E         [ 4] 2624         CALL     RFROM
      000E51 CD 04 AE         [ 4] 2625         CALL     OVER
      000E54 CD 06 A8         [ 4] 2626         CALL     SUBB
      000E57 CD 0D C2         [ 4] 2627         CALL     SPACS
      000E5A CC 0D DD         [ 2] 2628         JP     TYPES
                                   2629 
                                   2630 ;       U.R     ( u +n -- )
                                   2631 ;       Display an unsigned integer
                                   2632 ;       in n column, right justified.
      000E5D 0E 45                 2633         .word      LINK
                           000E5F  2634 LINK = . 
      000E5F 03                    2635         .byte      3
      000E60 55 2E 52              2636         .ascii     "U.R"
      000E63                       2637 UDOTR:
      000E63 CD 04 4D         [ 4] 2638         CALL     TOR
      000E66 CD 0B A0         [ 4] 2639         CALL     BDIGS
      000E69 CD 0B DA         [ 4] 2640         CALL     DIGS
      000E6C CD 0C 05         [ 4] 2641         CALL     EDIGS
      000E6F CD 04 2E         [ 4] 2642         CALL     RFROM
      000E72 CD 04 AE         [ 4] 2643         CALL     OVER
      000E75 CD 06 A8         [ 4] 2644         CALL     SUBB
      000E78 CD 0D C2         [ 4] 2645         CALL     SPACS
      000E7B CC 0D DD         [ 2] 2646         JP     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2647 
                                   2648 ;       U.      ( u -- )
                                   2649 ;       Display an unsigned integer
                                   2650 ;       in free format.
      000E7E 0E 5F                 2651         .word      LINK
                           000E80  2652 LINK = . 
      000E80 02                    2653         .byte      2
      000E81 55 2E                 2654         .ascii     "U."
      000E83                       2655 UDOT:
      000E83 CD 0B A0         [ 4] 2656         CALL     BDIGS
      000E86 CD 0B DA         [ 4] 2657         CALL     DIGS
      000E89 CD 0C 05         [ 4] 2658         CALL     EDIGS
      000E8C CD 0D B3         [ 4] 2659         CALL     SPACE
      000E8F CC 0D DD         [ 2] 2660         JP     TYPES
                                   2661 
                                   2662 ;       .       ( w -- )
                                   2663 ;       Display an integer in free
                                   2664 ;       format, preceeded by a space.
      000E92 0E 80                 2665         .word      LINK
                           000E94  2666 LINK = . 
      000E94 01                    2667         .byte      1
      000E95 2E                    2668         .ascii     "."
      000E96                       2669 DOT:
      000E96 CD 05 41         [ 4] 2670         CALL     BASE
      000E99 CD 03 DD         [ 4] 2671         CALL     AT
      000E9C CD 03 5F         [ 4] 2672         CALL     DOLIT
      000E9F 00 0A                 2673         .word      10
      000EA1 CD 04 F9         [ 4] 2674         CALL     XORR    ;?decimal
      000EA4 CD 03 92         [ 4] 2675         CALL     QBRAN
      000EA7 0E AC                 2676         .word      DOT1
      000EA9 CC 0E 83         [ 2] 2677         JP     UDOT
      000EAC CD 0C 1D         [ 4] 2678 DOT1:   CALL     STR
      000EAF CD 0D B3         [ 4] 2679         CALL     SPACE
      000EB2 CC 0D DD         [ 2] 2680         JP     TYPES
                                   2681 
                                   2682 ;       ?       ( a -- )
                                   2683 ;       Display contents in memory cell.
      000EB5 0E 94                 2684         .word      LINK
                                   2685         
                           000EB7  2686 LINK = . 
      000EB7 01                    2687         .byte      1
      000EB8 3F                    2688         .ascii     "?"
      000EB9                       2689 QUEST:
      000EB9 CD 03 DD         [ 4] 2690         CALL     AT
      000EBC CC 0E 96         [ 2] 2691         JP     DOT
                                   2692 
                                   2693 ;; Parsing
                                   2694 
                                   2695 ;       parse   ( b u c -- b u delta ; <string> )
                                   2696 ;       Scan string delimited by c.
                                   2697 ;       Return found string and its offset.
      000EBF 0E B7                 2698         .word      LINK
                           000EC1  2699 LINK = . 
      000EC1 05                    2700         .byte      5
      000EC2 70 61 72 73 65        2701         .ascii     "parse"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EC7                       2702 PARS:
      000EC7 CD 05 50         [ 4] 2703         CALL     TEMP
      000ECA CD 03 C6         [ 4] 2704         CALL     STORE
      000ECD CD 04 AE         [ 4] 2705         CALL     OVER
      000ED0 CD 04 4D         [ 4] 2706         CALL     TOR
      000ED3 CD 04 84         [ 4] 2707         CALL     DUPP
      000ED6 CD 03 92         [ 4] 2708         CALL     QBRAN
      000ED9 0F 7F                 2709         .word    PARS8
      000EDB CD 09 36         [ 4] 2710         CALL     ONEM
      000EDE CD 05 50         [ 4] 2711         CALL     TEMP
      000EE1 CD 03 DD         [ 4] 2712         CALL     AT
      000EE4 CD 09 88         [ 4] 2713         CALL     BLANK
      000EE7 CD 06 D0         [ 4] 2714         CALL     EQUAL
      000EEA CD 03 92         [ 4] 2715         CALL     QBRAN
      000EED 0F 20                 2716         .word      PARS3
      000EEF CD 04 4D         [ 4] 2717         CALL     TOR
      000EF2 CD 09 88         [ 4] 2718 PARS1:  CALL     BLANK
      000EF5 CD 04 AE         [ 4] 2719         CALL     OVER
      000EF8 CD 03 FB         [ 4] 2720         CALL     CAT     ;skip leading blanks ONLY
      000EFB CD 06 A8         [ 4] 2721         CALL     SUBB
      000EFE CD 04 BD         [ 4] 2722         CALL     ZLESS
      000F01 CD 06 49         [ 4] 2723         CALL     INVER
      000F04 CD 03 92         [ 4] 2724         CALL     QBRAN
      000F07 0F 1D                 2725         .word      PARS2
      000F09 CD 09 29         [ 4] 2726         CALL     ONEP
      000F0C CD 03 73         [ 4] 2727         CALL     DONXT
      000F0F 0E F2                 2728         .word      PARS1
      000F11 CD 04 2E         [ 4] 2729         CALL     RFROM
      000F14 CD 04 7A         [ 4] 2730         CALL     DROP
      000F17 CD 09 95         [ 4] 2731         CALL     ZERO
      000F1A CC 04 84         [ 2] 2732         JP     DUPP
      000F1D CD 04 2E         [ 4] 2733 PARS2:  CALL     RFROM
      000F20 CD 04 AE         [ 4] 2734 PARS3:  CALL     OVER
      000F23 CD 04 94         [ 4] 2735         CALL     SWAPP
      000F26 CD 04 4D         [ 4] 2736         CALL     TOR
      000F29 CD 05 50         [ 4] 2737 PARS4:  CALL     TEMP
      000F2C CD 03 DD         [ 4] 2738         CALL     AT
      000F2F CD 04 AE         [ 4] 2739         CALL     OVER
      000F32 CD 03 FB         [ 4] 2740         CALL     CAT
      000F35 CD 06 A8         [ 4] 2741         CALL     SUBB    ;scan for delimiter
      000F38 CD 05 50         [ 4] 2742         CALL     TEMP
      000F3B CD 03 DD         [ 4] 2743         CALL     AT
      000F3E CD 09 88         [ 4] 2744         CALL     BLANK
      000F41 CD 06 D0         [ 4] 2745         CALL     EQUAL
      000F44 CD 03 92         [ 4] 2746         CALL     QBRAN
      000F47 0F 4C                 2747         .word      PARS5
      000F49 CD 04 BD         [ 4] 2748         CALL     ZLESS
      000F4C CD 03 92         [ 4] 2749 PARS5:  CALL     QBRAN
      000F4F 0F 61                 2750         .word      PARS6
      000F51 CD 09 29         [ 4] 2751         CALL     ONEP
      000F54 CD 03 73         [ 4] 2752         CALL     DONXT
      000F57 0F 29                 2753         .word      PARS4
      000F59 CD 04 84         [ 4] 2754         CALL     DUPP
      000F5C CD 04 4D         [ 4] 2755         CALL     TOR
      000F5F 20 0F            [ 2] 2756         JRA     PARS7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F61 CD 04 2E         [ 4] 2757 PARS6:  CALL     RFROM
      000F64 CD 04 7A         [ 4] 2758         CALL     DROP
      000F67 CD 04 84         [ 4] 2759         CALL     DUPP
      000F6A CD 09 29         [ 4] 2760         CALL     ONEP
      000F6D CD 04 4D         [ 4] 2761         CALL     TOR
      000F70 CD 04 AE         [ 4] 2762 PARS7:  CALL     OVER
      000F73 CD 06 A8         [ 4] 2763         CALL     SUBB
      000F76 CD 04 2E         [ 4] 2764         CALL     RFROM
      000F79 CD 04 2E         [ 4] 2765         CALL     RFROM
      000F7C CC 06 A8         [ 2] 2766         JP     SUBB
      000F7F CD 04 AE         [ 4] 2767 PARS8:  CALL     OVER
      000F82 CD 04 2E         [ 4] 2768         CALL     RFROM
      000F85 CC 06 A8         [ 2] 2769         JP     SUBB
                                   2770 
                                   2771 ;       PARSE   ( c -- b u ; <string> )
                                   2772 ;       Scan input stream and return
                                   2773 ;       counted string delimited by c.
      000F88 0E C1                 2774         .word      LINK
                           000F8A  2775 LINK = . 
      000F8A 05                    2776         .byte      5
      000F8B 50 41 52 53 45        2777         .ascii     "PARSE"
      000F90                       2778 PARSE:
      000F90 CD 04 4D         [ 4] 2779         CALL     TOR
      000F93 CD 0A A5         [ 4] 2780         CALL     TIB
      000F96 CD 05 5F         [ 4] 2781         CALL     INN
      000F99 CD 03 DD         [ 4] 2782         CALL     AT
      000F9C CD 06 2F         [ 4] 2783         CALL     PLUS    ;current input buffer pointer
      000F9F CD 05 6F         [ 4] 2784         CALL     NTIB
      000FA2 CD 03 DD         [ 4] 2785         CALL     AT
      000FA5 CD 05 5F         [ 4] 2786         CALL     INN
      000FA8 CD 03 DD         [ 4] 2787         CALL     AT
      000FAB CD 06 A8         [ 4] 2788         CALL     SUBB    ;remaining count
      000FAE CD 04 2E         [ 4] 2789         CALL     RFROM
      000FB1 CD 0E C7         [ 4] 2790         CALL     PARS
      000FB4 CD 05 5F         [ 4] 2791         CALL     INN
      000FB7 CC 0A 05         [ 2] 2792         JP     PSTOR
                                   2793 
                                   2794 ;       .(      ( -- )
                                   2795 ;       Output following string up to next ) .
      000FBA 0F 8A                 2796         .word      LINK
                           000FBC  2797 LINK = . 
      000FBC 82                    2798 	.byte      IMEDD+2
      000FBD 2E 28                 2799         .ascii     ".("
      000FBF                       2800 DOTPR:
      000FBF CD 03 5F         [ 4] 2801         CALL     DOLIT
      000FC2 00 29                 2802         .word     41	; ")"
      000FC4 CD 0F 90         [ 4] 2803         CALL     PARSE
      000FC7 CC 0D DD         [ 2] 2804         JP     TYPES
                                   2805 
                                   2806 ;       (       ( -- )
                                   2807 ;       Ignore following string up to next ).
                                   2808 ;       A comment.
      000FCA 0F BC                 2809         .word      LINK
                           000FCC  2810 LINK = . 
      000FCC 81                    2811 	.byte      IMEDD+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000FCD 28                    2812         .ascii     "("
      000FCE                       2813 PAREN:
      000FCE CD 03 5F         [ 4] 2814         CALL     DOLIT
      000FD1 00 29                 2815         .word     41	; ")"
      000FD3 CD 0F 90         [ 4] 2816         CALL     PARSE
      000FD6 CC 06 0F         [ 2] 2817         JP     DDROP
                                   2818 
                                   2819 ;       \       ( -- )
                                   2820 ;       Ignore following text till
                                   2821 ;       end of line.
      000FD9 0F CC                 2822         .word      LINK
                           000FDB  2823 LINK = . 
      000FDB 81                    2824 	.byte      IMEDD+1
      000FDC 5C                    2825         .ascii     "\"
      000FDD                       2826 BKSLA:
      000FDD 90 AE 00 0C      [ 2] 2827         ldw y,#UCTIB ; #TIB  
      000FE1 90 FE            [ 2] 2828         ldw y,(y)
      000FE3 90 89            [ 2] 2829         pushw y ; count in TIB 
      000FE5 90 AE 00 0A      [ 2] 2830         ldw y,#UINN ; >IN 
      000FE9 90 BF 1E         [ 2] 2831         ldw YTEMP,y
      000FEC 90 85            [ 2] 2832         popw y 
      000FEE 91 CF 1E         [ 5] 2833         ldw [YTEMP],y
      000FF1 81               [ 4] 2834         ret 
                                   2835 
                                   2836 ;       WORD    ( c -- a ; <string> )
                                   2837 ;       Parse a word from input stream
                                   2838 ;       and copy it to code dictionary.
      000FF2 0F DB                 2839         .word      LINK
                           000FF4  2840 LINK = . 
      000FF4 04                    2841         .byte      4
      000FF5 57 4F 52 44           2842         .ascii     "WORD"
      000FF9                       2843 WORDD:
      000FF9 CD 0F 90         [ 4] 2844         CALL     PARSE
      000FFC CD 0A 83         [ 4] 2845         CALL     HERE
      000FFF CD 08 FE         [ 4] 2846         CALL     CELLP
      001002 CC 0B 43         [ 2] 2847         JP     PACKS
                                   2848 
                                   2849 ;       TOKEN   ( -- a ; <string> )
                                   2850 ;       Parse a word from input stream
                                   2851 ;       and copy it to name dictionary.
      001005 0F F4                 2852         .word      LINK
                           001007  2853 LINK = . 
      001007 05                    2854         .byte      5
      001008 54 4F 4B 45 4E        2855         .ascii     "TOKEN"
      00100D                       2856 TOKEN:
      00100D CD 09 88         [ 4] 2857         CALL     BLANK
      001010 CC 0F F9         [ 2] 2858         JP     WORDD
                                   2859 
                                   2860 ;; Dictionary search
                                   2861 
                                   2862 ;       NAME>   ( na -- ca )
                                   2863 ;       Return a code address given
                                   2864 ;       a name address.
      001013 10 07                 2865         .word      LINK
                           001015  2866 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001015 05                    2867         .byte      5
      001016 4E 41 4D 45 3E        2868         .ascii     "NAME>"
      00101B                       2869 NAMET:
      00101B CD 0A 6C         [ 4] 2870         CALL     COUNT
      00101E CD 03 5F         [ 4] 2871         CALL     DOLIT
      001021 00 1F                 2872         .word      31
      001023 CD 04 D0         [ 4] 2873         CALL     ANDD
      001026 CC 06 2F         [ 2] 2874         JP     PLUS
                                   2875 
                                   2876 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2877 ;       Compare u cells in two
                                   2878 ;       strings. Return 0 if identical.
      001029 10 15                 2879         .word      LINK
                           00102B  2880 LINK = . 
      00102B 05                    2881         .byte       5
      00102C 53 41 4D 45 3F        2882         .ascii     "SAME?"
      001031                       2883 SAMEQ:
      001031 CD 09 36         [ 4] 2884         CALL     ONEM
      001034 CD 04 4D         [ 4] 2885         CALL     TOR
      001037 20 29            [ 2] 2886         JRA     SAME2
      001039 CD 04 AE         [ 4] 2887 SAME1:  CALL     OVER
      00103C CD 04 41         [ 4] 2888         CALL     RAT
      00103F CD 06 2F         [ 4] 2889         CALL     PLUS
      001042 CD 03 FB         [ 4] 2890         CALL     CAT
      001045 CD 04 AE         [ 4] 2891         CALL     OVER
      001048 CD 04 41         [ 4] 2892         CALL     RAT
      00104B CD 06 2F         [ 4] 2893         CALL     PLUS
      00104E CD 03 FB         [ 4] 2894         CALL     CAT
      001051 CD 06 A8         [ 4] 2895         CALL     SUBB
      001054 CD 05 DE         [ 4] 2896         CALL     QDUP
      001057 CD 03 92         [ 4] 2897         CALL     QBRAN
      00105A 10 62                 2898         .word      SAME2
      00105C CD 04 2E         [ 4] 2899         CALL     RFROM
      00105F CC 04 7A         [ 2] 2900         JP     DROP
      001062 CD 03 73         [ 4] 2901 SAME2:  CALL     DONXT
      001065 10 39                 2902         .word      SAME1
      001067 CC 09 95         [ 2] 2903         JP     ZERO
                                   2904 
                                   2905 ;       find    ( a va -- ca na | a F )
                                   2906 ;       Search vocabulary for string.
                                   2907 ;       Return ca and na if succeeded.
      00106A 10 2B                 2908         .word      LINK
                           00106C  2909 LINK = . 
      00106C 04                    2910         .byte      4
      00106D 46 49 4E 44           2911         .ascii     "FIND"
      001071                       2912 FIND:
      001071 CD 04 94         [ 4] 2913         CALL     SWAPP
      001074 CD 04 84         [ 4] 2914         CALL     DUPP
      001077 CD 03 FB         [ 4] 2915         CALL     CAT
      00107A CD 05 50         [ 4] 2916         CALL     TEMP
      00107D CD 03 C6         [ 4] 2917         CALL     STORE
      001080 CD 04 84         [ 4] 2918         CALL     DUPP
      001083 CD 03 DD         [ 4] 2919         CALL     AT
      001086 CD 04 4D         [ 4] 2920         CALL     TOR
      001089 CD 08 FE         [ 4] 2921         CALL     CELLP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00108C CD 04 94         [ 4] 2922         CALL     SWAPP
      00108F CD 03 DD         [ 4] 2923 FIND1:  CALL     AT
      001092 CD 04 84         [ 4] 2924         CALL     DUPP
      001095 CD 03 92         [ 4] 2925         CALL     QBRAN
      001098 10 CE                 2926         .word      FIND6
      00109A CD 04 84         [ 4] 2927         CALL     DUPP
      00109D CD 03 DD         [ 4] 2928         CALL     AT
      0010A0 CD 03 5F         [ 4] 2929         CALL     DOLIT
      0010A3 1F 7F                 2930         .word      MASKK
      0010A5 CD 04 D0         [ 4] 2931         CALL     ANDD
      0010A8 CD 04 41         [ 4] 2932         CALL     RAT
      0010AB CD 04 F9         [ 4] 2933         CALL     XORR
      0010AE CD 03 92         [ 4] 2934         CALL     QBRAN
      0010B1 10 BD                 2935         .word      FIND2
      0010B3 CD 08 FE         [ 4] 2936         CALL     CELLP
      0010B6 CD 03 5F         [ 4] 2937         CALL     DOLIT
      0010B9 FF FF                 2938         .word     0xFFFF
      0010BB 20 0C            [ 2] 2939         JRA     FIND3
      0010BD CD 08 FE         [ 4] 2940 FIND2:  CALL     CELLP
      0010C0 CD 05 50         [ 4] 2941         CALL     TEMP
      0010C3 CD 03 DD         [ 4] 2942         CALL     AT
      0010C6 CD 10 31         [ 4] 2943         CALL     SAMEQ
      0010C9 CD 03 A9         [ 4] 2944 FIND3:  CALL     BRAN
      0010CC 10 DD                 2945         .word      FIND4
      0010CE CD 04 2E         [ 4] 2946 FIND6:  CALL     RFROM
      0010D1 CD 04 7A         [ 4] 2947         CALL     DROP
      0010D4 CD 04 94         [ 4] 2948         CALL     SWAPP
      0010D7 CD 09 0D         [ 4] 2949         CALL     CELLM
      0010DA CC 04 94         [ 2] 2950         JP     SWAPP
      0010DD CD 03 92         [ 4] 2951 FIND4:  CALL     QBRAN
      0010E0 10 EA                 2952         .word      FIND5
      0010E2 CD 09 0D         [ 4] 2953         CALL     CELLM
      0010E5 CD 09 0D         [ 4] 2954         CALL     CELLM
      0010E8 20 A5            [ 2] 2955         JRA     FIND1
      0010EA CD 04 2E         [ 4] 2956 FIND5:  CALL     RFROM
      0010ED CD 04 7A         [ 4] 2957         CALL     DROP
      0010F0 CD 04 94         [ 4] 2958         CALL     SWAPP
      0010F3 CD 04 7A         [ 4] 2959         CALL     DROP
      0010F6 CD 09 0D         [ 4] 2960         CALL     CELLM
      0010F9 CD 04 84         [ 4] 2961         CALL     DUPP
      0010FC CD 10 1B         [ 4] 2962         CALL     NAMET
      0010FF CC 04 94         [ 2] 2963         JP     SWAPP
                                   2964 
                                   2965 ;       NAME?   ( a -- ca na | a F )
                                   2966 ;       Search vocabularies for a string.
      001102 10 6C                 2967         .word      LINK
                           001104  2968 LINK = . 
      001104 05                    2969         .byte      5
      001105 4E 41 4D 45 3F        2970         .ascii     "NAME?"
      00110A                       2971 NAMEQ:
      00110A CD 05 A2         [ 4] 2972         CALL   CNTXT
      00110D CC 10 71         [ 2] 2973         JP     FIND
                                   2974 
                                   2975 ;; Terminal response
                                   2976 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2977 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2978 ;       Backup cursor by one character.
      001110 11 04                 2979         .word      LINK
                           001112  2980 LINK = . 
      001112 02                    2981         .byte      2
      001113 5E 48                 2982         .ascii     "^H"
      001115                       2983 BKSP:
      001115 CD 04 4D         [ 4] 2984         CALL     TOR
      001118 CD 04 AE         [ 4] 2985         CALL     OVER
      00111B CD 04 2E         [ 4] 2986         CALL     RFROM
      00111E CD 04 94         [ 4] 2987         CALL     SWAPP
      001121 CD 04 AE         [ 4] 2988         CALL     OVER
      001124 CD 04 F9         [ 4] 2989         CALL     XORR
      001127 CD 03 92         [ 4] 2990         CALL     QBRAN
      00112A 11 45                 2991         .word      BACK1
      00112C CD 03 5F         [ 4] 2992         CALL     DOLIT
      00112F 00 08                 2993         .word      BKSPP
      001131 CD 03 49         [ 4] 2994         CALL     EMIT
      001134 CD 09 36         [ 4] 2995         CALL     ONEM
      001137 CD 09 88         [ 4] 2996         CALL     BLANK
      00113A CD 03 49         [ 4] 2997         CALL     EMIT
      00113D CD 03 5F         [ 4] 2998         CALL     DOLIT
      001140 00 08                 2999         .word      BKSPP
      001142 CC 03 49         [ 2] 3000         JP     EMIT
      001145 81               [ 4] 3001 BACK1:  RET
                                   3002 
                                   3003 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3004 ;       Accept and echo key stroke
                                   3005 ;       and bump cursor.
      001146 11 12                 3006         .word      LINK
                           001148  3007 LINK = . 
      001148 03                    3008         .byte      3
      001149 54 41 50              3009         .ascii     "TAP"
      00114C                       3010 TAP:
      00114C CD 04 84         [ 4] 3011         CALL     DUPP
      00114F CD 03 49         [ 4] 3012         CALL     EMIT
      001152 CD 04 AE         [ 4] 3013         CALL     OVER
      001155 CD 03 EA         [ 4] 3014         CALL     CSTOR
      001158 CC 09 29         [ 2] 3015         JP     ONEP
                                   3016 
                                   3017 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3018 ;       Process a key stroke,
                                   3019 ;       CR or backspace.
      00115B 11 48                 3020         .word      LINK
                           00115D  3021 LINK = . 
      00115D 04                    3022         .byte      4
      00115E 4B 54 41 50           3023         .ascii     "KTAP"
      001162                       3024 KTAP:
      001162 CD 04 84         [ 4] 3025         CALL     DUPP
      001165 CD 03 5F         [ 4] 3026         CALL     DOLIT
      001168 00 0D                 3027         .word      CRR
      00116A CD 04 F9         [ 4] 3028         CALL     XORR
      00116D CD 03 92         [ 4] 3029         CALL     QBRAN
      001170 11 88                 3030         .word      KTAP2
      001172 CD 03 5F         [ 4] 3031         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001175 00 08                 3032         .word      BKSPP
      001177 CD 04 F9         [ 4] 3033         CALL     XORR
      00117A CD 03 92         [ 4] 3034         CALL     QBRAN
      00117D 11 85                 3035         .word      KTAP1
      00117F CD 09 88         [ 4] 3036         CALL     BLANK
      001182 CC 11 4C         [ 2] 3037         JP     TAP
      001185 CC 11 15         [ 2] 3038 KTAP1:  JP     BKSP
      001188 CD 04 7A         [ 4] 3039 KTAP2:  CALL     DROP
      00118B CD 04 94         [ 4] 3040         CALL     SWAPP
      00118E CD 04 7A         [ 4] 3041         CALL     DROP
      001191 CC 04 84         [ 2] 3042         JP     DUPP
                                   3043 
                                   3044 ;       accept  ( b u -- b u )
                                   3045 ;       Accept characters to input
                                   3046 ;       buffer. Return with actual count.
      001194 11 5D                 3047         .word      LINK
                           001196  3048 LINK = . 
      001196 06                    3049         .byte      6
      001197 41 43 43 45 50 54     3050         .ascii     "ACCEPT"
      00119D                       3051 ACCEP:
      00119D CD 04 AE         [ 4] 3052         CALL     OVER
      0011A0 CD 06 2F         [ 4] 3053         CALL     PLUS
      0011A3 CD 04 AE         [ 4] 3054         CALL     OVER
      0011A6 CD 06 1A         [ 4] 3055 ACCP1:  CALL     DDUP
      0011A9 CD 04 F9         [ 4] 3056         CALL     XORR
      0011AC CD 03 92         [ 4] 3057         CALL     QBRAN
      0011AF 11 D1                 3058         .word      ACCP4
      0011B1 CD 0D 7B         [ 4] 3059         CALL     KEY
      0011B4 CD 04 84         [ 4] 3060         CALL     DUPP
      0011B7 CD 09 88         [ 4] 3061         CALL     BLANK
      0011BA CD 03 5F         [ 4] 3062         CALL     DOLIT
      0011BD 00 7F                 3063         .word      127
      0011BF CD 07 6A         [ 4] 3064         CALL     WITHI
      0011C2 CD 03 92         [ 4] 3065         CALL     QBRAN
      0011C5 11 CC                 3066         .word      ACCP2
      0011C7 CD 11 4C         [ 4] 3067         CALL     TAP
      0011CA 20 03            [ 2] 3068         JRA     ACCP3
      0011CC CD 11 62         [ 4] 3069 ACCP2:  CALL     KTAP
      0011CF 20 D5            [ 2] 3070 ACCP3:  JRA     ACCP1
      0011D1 CD 04 7A         [ 4] 3071 ACCP4:  CALL     DROP
      0011D4 CD 04 AE         [ 4] 3072         CALL     OVER
      0011D7 CC 06 A8         [ 2] 3073         JP     SUBB
                                   3074 
                                   3075 ;       QUERY   ( -- )
                                   3076 ;       Accept input stream to
                                   3077 ;       terminal input buffer.
      0011DA 11 96                 3078         .word      LINK
                                   3079         
                           0011DC  3080 LINK = . 
      0011DC 05                    3081         .byte      5
      0011DD 51 55 45 52 59        3082         .ascii     "QUERY"
      0011E2                       3083 QUERY:
      0011E2 CD 0A A5         [ 4] 3084         CALL     TIB
      0011E5 CD 03 5F         [ 4] 3085         CALL     DOLIT
      0011E8 00 50                 3086         .word      80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0011EA CD 11 9D         [ 4] 3087         CALL     ACCEP
      0011ED CD 05 6F         [ 4] 3088         CALL     NTIB
      0011F0 CD 03 C6         [ 4] 3089         CALL     STORE
      0011F3 CD 04 7A         [ 4] 3090         CALL     DROP
      0011F6 CD 09 95         [ 4] 3091         CALL     ZERO
      0011F9 CD 05 5F         [ 4] 3092         CALL     INN
      0011FC CC 03 C6         [ 2] 3093         JP     STORE
                                   3094 
                                   3095 ;       ABORT   ( -- )
                                   3096 ;       Reset data stack and
                                   3097 ;       jump to QUIT.
      0011FF 11 DC                 3098         .word      LINK
                           001201  3099 LINK = . 
      001201 05                    3100         .byte      5
      001202 41 42 4F 52 54        3101         .ascii     "ABORT"
      001207                       3102 ABORT:
      001207 CD 12 FE         [ 4] 3103         CALL     PRESE
      00120A CC 13 1B         [ 2] 3104         JP     QUIT
                                   3105 
                                   3106 ;       abort"  ( f -- )
                                   3107 ;       Run time routine of ABORT".
                                   3108 ;       Abort with a message.
      00120D 12 01                 3109         .word      LINK
                           00120F  3110 LINK = . 
      00120F 46                    3111 	.byte      COMPO+6
      001210 41 42 4F 52 54        3112         .ascii     "ABORT"
      001215 22                    3113         .byte      '"'
      001216                       3114 ABORQ:
      001216 CD 03 92         [ 4] 3115         CALL     QBRAN
      001219 12 35                 3116         .word      ABOR2   ;text flag
      00121B CD 0E 11         [ 4] 3117         CALL     DOSTR
      00121E CD 0D B3         [ 4] 3118 ABOR1:  CALL     SPACE
      001221 CD 0A 6C         [ 4] 3119         CALL     COUNT
      001224 CD 0D DD         [ 4] 3120         CALL     TYPES
      001227 CD 03 5F         [ 4] 3121         CALL     DOLIT
      00122A 00 3F                 3122         .word     63 ; "?"
      00122C CD 03 49         [ 4] 3123         CALL     EMIT
      00122F CD 0D FB         [ 4] 3124         CALL     CR
      001232 CC 12 07         [ 2] 3125         JP     ABORT   ;pass error string
      001235 CD 0E 11         [ 4] 3126 ABOR2:  CALL     DOSTR
      001238 CC 04 7A         [ 2] 3127         JP     DROP
                                   3128 
                                   3129 ;; The text interpreter
                                   3130 
                                   3131 ;       $INTERPRET      ( a -- )
                                   3132 ;       Interpret a word. If failed,
                                   3133 ;       try to convert it to an integer.
      00123B 12 0F                 3134         .word      LINK
                           00123D  3135 LINK = . 
      00123D 0A                    3136         .byte      10
      00123E 24 49 4E 54 45 52 50  3137         .ascii     "$INTERPRET"
             52 45 54
      001248                       3138 INTER:
      001248 CD 11 0A         [ 4] 3139         CALL     NAMEQ
      00124B CD 05 DE         [ 4] 3140         CALL     QDUP    ;?defined
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00124E CD 03 92         [ 4] 3141         CALL     QBRAN
      001251 12 72                 3142         .word      INTE1
      001253 CD 03 DD         [ 4] 3143         CALL     AT
      001256 CD 03 5F         [ 4] 3144         CALL     DOLIT
      001259 40 00                 3145 	.word       0x4000	; COMPO*256
      00125B CD 04 D0         [ 4] 3146         CALL     ANDD    ;?compile only lexicon bits
      00125E CD 12 16         [ 4] 3147         CALL     ABORQ
      001261 0D                    3148         .byte      13
      001262 20 63 6F 6D 70 69 6C  3149         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00126F CC 03 B9         [ 2] 3150         JP     EXECU
      001272 CD 0C A8         [ 4] 3151 INTE1:  CALL     NUMBQ   ;convert a number
      001275 CD 03 92         [ 4] 3152         CALL     QBRAN
      001278 12 1E                 3153         .word    ABOR1
      00127A 81               [ 4] 3154         RET
                                   3155 
                                   3156 ;       [       ( -- )
                                   3157 ;       Start  text interpreter.
      00127B 12 3D                 3158         .word      LINK
                           00127D  3159 LINK = . 
      00127D 81                    3160 	.byte      IMEDD+1
      00127E 5B                    3161         .ascii     "["
      00127F                       3162 LBRAC:
      00127F CD 03 5F         [ 4] 3163         CALL   DOLIT
      001282 12 48                 3164         .word  INTER
      001284 CD 05 80         [ 4] 3165         CALL   TEVAL
      001287 CC 03 C6         [ 2] 3166         JP     STORE
                                   3167 
                                   3168 ;       .OK     ( -- )
                                   3169 ;       Display 'ok' while interpreting.
      00128A 12 7D                 3170         .word      LINK
                           00128C  3171 LINK = . 
      00128C 03                    3172         .byte      3
      00128D 2E 4F 4B              3173         .ascii     ".OK"
      001290                       3174 DOTOK:
      001290 CD 03 5F         [ 4] 3175         CALL     DOLIT
      001293 12 48                 3176         .word      INTER
      001295 CD 05 80         [ 4] 3177         CALL     TEVAL
      001298 CD 03 DD         [ 4] 3178         CALL     AT
      00129B CD 06 D0         [ 4] 3179         CALL     EQUAL
      00129E CD 03 92         [ 4] 3180         CALL     QBRAN
      0012A1 12 AA                 3181         .word      DOTO1
      0012A3 CD 0E 3A         [ 4] 3182         CALL     DOTQP
      0012A6 03                    3183         .byte      3
      0012A7 20 6F 6B              3184         .ascii     " ok"
      0012AA CC 0D FB         [ 2] 3185 DOTO1:  JP     CR
                                   3186 
                                   3187 ;       ?STACK  ( -- )
                                   3188 ;       Abort if stack underflows.
      0012AD 12 8C                 3189         .word      LINK
                           0012AF  3190 LINK = . 
      0012AF 06                    3191         .byte      6
      0012B0 3F 53 54 41 43 4B     3192         .ascii     "?STACK"
      0012B6                       3193 QSTAC: 
      0012B6 CD 09 D7         [ 4] 3194         CALL     DEPTH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0012B9 CD 04 BD         [ 4] 3195         CALL     ZLESS   ;check only for underflow
      0012BC CD 12 16         [ 4] 3196         CALL     ABORQ
      0012BF 0B                    3197         .byte      11
      0012C0 20 75 6E 64 65 72 66  3198         .ascii     " underflow "
             6C 6F 77 20
      0012CB 81               [ 4] 3199         RET
                                   3200 
                                   3201 ;       EVAL    ( -- )
                                   3202 ;       Interpret  input stream.
      0012CC 12 AF                 3203         .word      LINK
                           0012CE  3204 LINK = . 
      0012CE 04                    3205         .byte      4
      0012CF 45 56 41 4C           3206         .ascii     "EVAL"
      0012D3                       3207 EVAL:
      0012D3 CD 10 0D         [ 4] 3208 EVAL1:  CALL     TOKEN
      0012D6 CD 04 84         [ 4] 3209         CALL     DUPP
      0012D9 CD 03 FB         [ 4] 3210         CALL     CAT     ;?input stream empty
      0012DC CD 03 92         [ 4] 3211         CALL     QBRAN
      0012DF 12 EF                 3212         .word    EVAL2
      0012E1 CD 05 80         [ 4] 3213         CALL     TEVAL
      0012E4 CD 0A B9         [ 4] 3214         CALL     ATEXE
      0012E7 CD 12 B6         [ 4] 3215         CALL     QSTAC   ;evaluate input, check stack
      0012EA CD 03 A9         [ 4] 3216         CALL     BRAN
      0012ED 12 D3                 3217         .word    EVAL1
      0012EF CD 04 7A         [ 4] 3218 EVAL2:  CALL     DROP
      0012F2 CC 12 90         [ 2] 3219         JP       DOTOK
                                   3220 
                                   3221 ;       PRESET  ( -- )
                                   3222 ;       Reset data stack pointer and
                                   3223 ;       terminal input buffer.
      0012F5 12 CE                 3224         .word      LINK
                           0012F7  3225 LINK = . 
      0012F7 06                    3226         .byte      6
      0012F8 50 52 45 53 45 54     3227         .ascii     "PRESET"
      0012FE                       3228 PRESE:
      0012FE CD 03 5F         [ 4] 3229         CALL     DOLIT
      001301 07 7F                 3230         .word      SPP
      001303 CD 04 71         [ 4] 3231         CALL     SPSTO
      001306 CD 03 5F         [ 4] 3232         CALL     DOLIT
      001309 07 7F                 3233         .word      TIBB
      00130B CD 05 6F         [ 4] 3234         CALL     NTIB
      00130E CD 08 FE         [ 4] 3235         CALL     CELLP
      001311 CC 03 C6         [ 2] 3236         JP     STORE
                                   3237 
                                   3238 ;       QUIT    ( -- )
                                   3239 ;       Reset return stack pointer
                                   3240 ;       and start text interpreter.
      001314 12 F7                 3241         .word      LINK
                           001316  3242 LINK = . 
      001316 04                    3243         .byte      4
      001317 51 55 49 54           3244         .ascii     "QUIT"
      00131B                       3245 QUIT:
      00131B CD 03 5F         [ 4] 3246         CALL     DOLIT
      00131E 07 FE                 3247         .word      RPP
      001320 CD 04 18         [ 4] 3248         CALL     RPSTO   ;reset return stack pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001323 CD 12 7F         [ 4] 3249 QUIT1:  CALL     LBRAC   ;start interpretation
      001326 CD 11 E2         [ 4] 3250 QUIT2:  CALL     QUERY   ;get input
      001329 CD 12 D3         [ 4] 3251         CALL     EVAL
      00132C 20 F8            [ 2] 3252         JRA     QUIT2   ;continue till error
                                   3253 
                                   3254 ;; The compiler
                                   3255 
                                   3256 ;       '       ( -- ca )
                                   3257 ;       Search vocabularies for
                                   3258 ;       next word in input stream.
      00132E 13 16                 3259         .word      LINK
                           001330  3260 LINK = . 
      001330 01                    3261         .byte      1
      001331 27                    3262         .ascii     "'"
      001332                       3263 TICK:
      001332 CD 10 0D         [ 4] 3264         CALL     TOKEN
      001335 CD 11 0A         [ 4] 3265         CALL     NAMEQ   ;?defined
      001338 CD 03 92         [ 4] 3266         CALL     QBRAN
      00133B 12 1E                 3267         .word      ABOR1
      00133D 81               [ 4] 3268         RET     ;yes, push code address
                                   3269 
                                   3270 ;       ALLOT   ( n -- )
                                   3271 ;       Allocate n bytes to RAM 
      00133E 13 30                 3272         .word      LINK
                           001340  3273         LINK = . 
      001340 05                    3274         .byte      5
      001341 41 4C 4C 4F 54        3275         .ascii     "ALLOT"
      001346                       3276 ALLOT:
      001346 CD 05 B0         [ 4] 3277         CALL     VPP
                                   3278 ; must update APP_VP each time VP is modidied
      001349 CD 0A 05         [ 4] 3279         call PSTOR 
      00134C CC 1A 3D         [ 2] 3280         jp UPDATVP 
                                   3281 
                                   3282 ;       ,       ( w -- )
                                   3283 ;         Compile an integer into
                                   3284 ;         variable space.
      00134F 13 40                 3285         .word      LINK
                           001351  3286 LINK = . 
      001351 01                    3287         .byte      1
      001352 2C                    3288         .ascii     ","
      001353                       3289 COMMA:
      001353 CD 0A 83         [ 4] 3290         CALL     HERE
      001356 CD 04 84         [ 4] 3291         CALL     DUPP
      001359 CD 08 FE         [ 4] 3292         CALL     CELLP   ;cell boundary
      00135C CD 05 B0         [ 4] 3293         CALL     VPP
      00135F CD 03 C6         [ 4] 3294         CALL     STORE
      001362 CC 03 C6         [ 2] 3295         JP     STORE
                                   3296 
                                   3297 ;       C,      ( c -- )
                                   3298 ;       Compile a byte into
                                   3299 ;       variables space.
      001365 13 51                 3300        .word      LINK
                           001367  3301 LINK = . 
      001367 02                    3302         .byte      2
      001368 43 2C                 3303         .ascii     "C,"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00136A                       3304 CCOMMA:
      00136A CD 0A 83         [ 4] 3305         CALL     HERE
      00136D CD 04 84         [ 4] 3306         CALL     DUPP
      001370 CD 09 29         [ 4] 3307         CALL     ONEP
      001373 CD 05 B0         [ 4] 3308         CALL     VPP
      001376 CD 03 C6         [ 4] 3309         CALL     STORE
      001379 CC 03 EA         [ 2] 3310         JP     CSTOR
                                   3311 
                                   3312 ;       [COMPILE]       ( -- ; <string> )
                                   3313 ;       Compile next immediate
                                   3314 ;       word into code dictionary.
      00137C 13 67                 3315         .word      LINK
                           00137E  3316 LINK = . 
      00137E 89                    3317 	.byte      IMEDD+9
      00137F 5B 43 4F 4D 50 49 4C  3318         .ascii     "[COMPILE]"
             45 5D
      001388                       3319 BCOMP:
      001388 CD 13 32         [ 4] 3320         CALL     TICK
      00138B CC 16 1D         [ 2] 3321         JP     JSRC
                                   3322 
                                   3323 ;       COMPILE ( -- )
                                   3324 ;       Compile next jsr in
                                   3325 ;       colon list to code dictionary.
      00138E 13 7E                 3326         .word      LINK
                           001390  3327 LINK = . 
      001390 47                    3328 	.byte      COMPO+7
      001391 43 4F 4D 50 49 4C 45  3329         .ascii     "COMPILE"
      001398                       3330 COMPI:
      001398 CD 04 2E         [ 4] 3331         CALL     RFROM
      00139B CD 04 84         [ 4] 3332         CALL     DUPP
      00139E CD 03 DD         [ 4] 3333         CALL     AT
      0013A1 CD 16 1D         [ 4] 3334         CALL     JSRC    ;compile subroutine
      0013A4 CD 08 FE         [ 4] 3335         CALL     CELLP
      0013A7 90 93            [ 1] 3336         ldw y,x 
      0013A9 90 FE            [ 2] 3337         ldw y,(y)
      0013AB 1C 00 02         [ 2] 3338         addw x,#CELLL 
      0013AE 90 FC            [ 2] 3339         jp (y)
                                   3340 
                                   3341 ;       LITERAL ( w -- )
                                   3342 ;       Compile tos to dictionary
                                   3343 ;       as an integer literal.
      0013B0 13 90                 3344         .word      LINK
                           0013B2  3345 LINK = . 
      0013B2 87                    3346 	.byte      IMEDD+7
      0013B3 4C 49 54 45 52 41 4C  3347         .ascii     "LITERAL"
      0013BA                       3348 LITER:
      0013BA CD 13 98         [ 4] 3349         CALL     COMPI
      0013BD 03 5F                 3350         .word DOLIT 
      0013BF CC 13 53         [ 2] 3351         JP     COMMA
                                   3352 
                                   3353 ;       $,"     ( -- )
                                   3354 ;       Compile a literal string
                                   3355 ;       up to next " .
      0013C2 13 B2                 3356         .word      LINK
                           0013C4  3357 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0013C4 03                    3358         .byte      3
      0013C5 24 2C 22              3359         .byte     '$',',','"'
      0013C8                       3360 STRCQ:
      0013C8 CD 03 5F         [ 4] 3361         CALL     DOLIT
      0013CB 00 22                 3362         .word     34	; "
      0013CD CD 0F 90         [ 4] 3363         CALL     PARSE
      0013D0 CD 0A 83         [ 4] 3364         CALL     HERE
      0013D3 CD 0B 43         [ 4] 3365         CALL     PACKS   ;string to code dictionary
      0013D6 CD 0A 6C         [ 4] 3366         CALL     COUNT
      0013D9 CD 06 2F         [ 4] 3367         CALL     PLUS    ;calculate aligned end of string
      0013DC CD 05 B0         [ 4] 3368         CALL     VPP
      0013DF CC 03 C6         [ 2] 3369         JP     STORE
                                   3370 
                                   3371 ;; Structures
                                   3372 
                                   3373 ;       FOR     ( -- a )
                                   3374 ;       Start a FOR-NEXT loop
                                   3375 ;       structure in a colon definition.
      0013E2 13 C4                 3376         .word      LINK
                           0013E4  3377 LINK = . 
      0013E4 83                    3378 	.byte      IMEDD+3
      0013E5 46 4F 52              3379         .ascii     "FOR"
      0013E8                       3380 FOR:
      0013E8 CD 13 98         [ 4] 3381         CALL     COMPI
      0013EB 04 4D                 3382         .word TOR 
      0013ED CC 0A 83         [ 2] 3383         JP     HERE
                                   3384 
                                   3385 ;       NEXT    ( a -- )
                                   3386 ;       Terminate a FOR-NEXT loop.
      0013F0 13 E4                 3387         .word      LINK
                           0013F2  3388 LINK = . 
      0013F2 84                    3389 	.byte      IMEDD+4
      0013F3 4E 45 58 54           3390         .ascii     "NEXT"
      0013F7                       3391 NEXT:
      0013F7 CD 13 98         [ 4] 3392         CALL     COMPI
      0013FA 03 73                 3393         .word DONXT 
      0013FC CC 13 53         [ 2] 3394         JP     COMMA
                                   3395 
                                   3396 ;       I ( -- n )
                                   3397 ;       stack FOR-NEXT COUNTER 
      0013FF 13 F2                 3398         .word LINK 
                           001401  3399         LINK=.
      001401 01                    3400         .byte 1 
      001402 49                    3401         .ascii "I"
      001403                       3402 IFETCH: 
      001403 1D 00 02         [ 2] 3403         subw x,#CELLL 
      001406 16 03            [ 2] 3404         ldw y,(3,sp)
      001408 FF               [ 2] 3405         ldw (x),y 
      001409 81               [ 4] 3406         ret 
                                   3407 
                                   3408 ;       BEGIN   ( -- a )
                                   3409 ;       Start an infinite or
                                   3410 ;       indefinite loop structure.
      00140A 14 01                 3411         .word      LINK
                           00140C  3412 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00140C 85                    3413 	.byte      IMEDD+5
      00140D 42 45 47 49 4E        3414         .ascii     "BEGIN"
      001412                       3415 BEGIN:
      001412 CC 0A 83         [ 2] 3416         JP     HERE
                                   3417 
                                   3418 ;       UNTIL   ( a -- )
                                   3419 ;       Terminate a BEGIN-UNTIL
                                   3420 ;       indefinite loop structure.
      001415 14 0C                 3421         .word      LINK
                           001417  3422 LINK = . 
      001417 85                    3423 	.byte      IMEDD+5
      001418 55 4E 54 49 4C        3424         .ascii     "UNTIL"
      00141D                       3425 UNTIL:
      00141D CD 13 98         [ 4] 3426         CALL     COMPI
      001420 03 92                 3427         .word    QBRAN 
      001422 CC 13 53         [ 2] 3428         JP     COMMA
                                   3429 
                                   3430 ;       AGAIN   ( a -- )
                                   3431 ;       Terminate a BEGIN-AGAIN
                                   3432 ;       infinite loop structure.
      001425 14 17                 3433         .word      LINK
                           001427  3434 LINK = . 
      001427 85                    3435 	.byte      IMEDD+5
      001428 41 47 41 49 4E        3436         .ascii     "AGAIN"
      00142D                       3437 AGAIN:
      00142D CD 13 98         [ 4] 3438         CALL     COMPI
      001430 03 A9                 3439         .word BRAN
      001432 CC 13 53         [ 2] 3440         JP     COMMA
                                   3441 
                                   3442 ;       IF      ( -- A )
                                   3443 ;       Begin a conditional branch.
      001435 14 27                 3444         .word      LINK
                           001437  3445 LINK = . 
      001437 82                    3446 	.byte      IMEDD+2
      001438 49 46                 3447         .ascii     "IF"
      00143A                       3448 IFF:
      00143A CD 13 98         [ 4] 3449         CALL     COMPI
      00143D 03 92                 3450         .word QBRAN
      00143F CD 0A 83         [ 4] 3451         CALL     HERE
      001442 CD 09 95         [ 4] 3452         CALL     ZERO
      001445 CC 13 53         [ 2] 3453         JP     COMMA
                                   3454 
                                   3455 ;       THEN        ( A -- )
                                   3456 ;       Terminate a conditional branch structure.
      001448 14 37                 3457         .word      LINK
                           00144A  3458 LINK = . 
      00144A 84                    3459 	.byte      IMEDD+4
      00144B 54 48 45 4E           3460         .ascii     "THEN"
      00144F                       3461 THENN:
      00144F CD 0A 83         [ 4] 3462         CALL     HERE
      001452 CD 04 94         [ 4] 3463         CALL     SWAPP
      001455 CC 03 C6         [ 2] 3464         JP     STORE
                                   3465 
                                   3466 ;       ELSE        ( A -- A )
                                   3467 ;       Start the false clause in an IF-ELSE-THEN structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001458 14 4A                 3468         .word      LINK
                           00145A  3469 LINK = . 
      00145A 84                    3470 	.byte      IMEDD+4
      00145B 45 4C 53 45           3471         .ascii     "ELSE"
      00145F                       3472 ELSEE:
      00145F CD 13 98         [ 4] 3473         CALL     COMPI
      001462 03 A9                 3474         .word BRAN
      001464 CD 0A 83         [ 4] 3475         CALL     HERE
      001467 CD 09 95         [ 4] 3476         CALL     ZERO
      00146A CD 13 53         [ 4] 3477         CALL     COMMA
      00146D CD 04 94         [ 4] 3478         CALL     SWAPP
      001470 CD 0A 83         [ 4] 3479         CALL     HERE
      001473 CD 04 94         [ 4] 3480         CALL     SWAPP
      001476 CC 03 C6         [ 2] 3481         JP     STORE
                                   3482 
                                   3483 ;       AHEAD       ( -- A )
                                   3484 ;       Compile a forward branch instruction.
      001479 14 5A                 3485         .word      LINK
                           00147B  3486 LINK = . 
      00147B 85                    3487 	.byte      IMEDD+5
      00147C 41 48 45 41 44        3488         .ascii     "AHEAD"
      001481                       3489 AHEAD:
      001481 CD 13 98         [ 4] 3490         CALL     COMPI
      001484 03 A9                 3491         .word BRAN
      001486 CD 0A 83         [ 4] 3492         CALL     HERE
      001489 CD 09 95         [ 4] 3493         CALL     ZERO
      00148C CC 13 53         [ 2] 3494         JP     COMMA
                                   3495 
                                   3496 ;       WHILE       ( a -- A a )
                                   3497 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00148F 14 7B                 3498         .word      LINK
                           001491  3499 LINK = . 
      001491 85                    3500 	.byte      IMEDD+5
      001492 57 48 49 4C 45        3501         .ascii     "WHILE"
      001497                       3502 WHILE:
      001497 CD 13 98         [ 4] 3503         CALL     COMPI
      00149A 03 92                 3504         .word QBRAN
      00149C CD 0A 83         [ 4] 3505         CALL     HERE
      00149F CD 09 95         [ 4] 3506         CALL     ZERO
      0014A2 CD 13 53         [ 4] 3507         CALL     COMMA
      0014A5 CC 04 94         [ 2] 3508         JP     SWAPP
                                   3509 
                                   3510 ;       REPEAT      ( A a -- )
                                   3511 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0014A8 14 91                 3512         .word      LINK
                           0014AA  3513 LINK = . 
      0014AA 86                    3514         .byte      IMEDD+6
      0014AB 52 45 50 45 41 54     3515         .ascii     "REPEAT"
      0014B1                       3516 REPEA:
      0014B1 CD 13 98         [ 4] 3517         CALL     COMPI
      0014B4 03 A9                 3518         .word BRAN
      0014B6 CD 13 53         [ 4] 3519         CALL     COMMA
      0014B9 CD 0A 83         [ 4] 3520         CALL     HERE
      0014BC CD 04 94         [ 4] 3521         CALL     SWAPP
      0014BF CC 03 C6         [ 2] 3522         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3523 
                                   3524 ;       AFT         ( a -- a A )
                                   3525 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0014C2 14 AA                 3526         .word      LINK
                           0014C4  3527 LINK = . 
      0014C4 83                    3528 	.byte      IMEDD+3
      0014C5 41 46 54              3529         .ascii     "AFT"
      0014C8                       3530 AFT:
      0014C8 CD 04 7A         [ 4] 3531         CALL     DROP
      0014CB CD 14 81         [ 4] 3532         CALL     AHEAD
      0014CE CD 0A 83         [ 4] 3533         CALL     HERE
      0014D1 CC 04 94         [ 2] 3534         JP     SWAPP
                                   3535 
                                   3536 ;       ABORT"      ( -- ; <string> )
                                   3537 ;       Conditional abort with an error message.
      0014D4 14 C4                 3538         .word      LINK
                           0014D6  3539 LINK = . 
      0014D6 86                    3540 	.byte      IMEDD+6
      0014D7 41 42 4F 52 54        3541         .ascii     "ABORT"
      0014DC 22                    3542         .byte      '"'
      0014DD                       3543 ABRTQ:
      0014DD CD 13 98         [ 4] 3544         CALL     COMPI
      0014E0 12 16                 3545         .word ABORQ
      0014E2 CC 13 C8         [ 2] 3546         JP     STRCQ
                                   3547 
                                   3548 ;       $"     ( -- ; <string> )
                                   3549 ;       Compile an inline string literal.
      0014E5 14 D6                 3550         .word      LINK
                           0014E7  3551 LINK = . 
      0014E7 82                    3552 	.byte      IMEDD+2
      0014E8 24 22                 3553         .byte     '$','"'
      0014EA                       3554 STRQ:
      0014EA CD 13 98         [ 4] 3555         CALL     COMPI
      0014ED 0E 30                 3556         .word STRQP 
      0014EF CC 13 C8         [ 2] 3557         JP     STRCQ
                                   3558 
                                   3559 ;       ."          ( -- ; <string> )
                                   3560 ;       Compile an inline string literal to be typed out at run time.
      0014F2 14 E7                 3561         .word      LINK
                           0014F4  3562 LINK = . 
      0014F4 82                    3563 	.byte      IMEDD+2
      0014F5 2E 22                 3564         .byte     '.','"'
      0014F7                       3565 DOTQ:
      0014F7 CD 13 98         [ 4] 3566         CALL     COMPI
      0014FA 0E 3A                 3567         .word DOTQP 
      0014FC CC 13 C8         [ 2] 3568         JP     STRCQ
                                   3569 
                                   3570 ;; Name compiler
                                   3571 
                                   3572 ;       ?UNIQUE ( a -- a )
                                   3573 ;       Display a warning message
                                   3574 ;       if word already exists.
      0014FF 14 F4                 3575         .word      LINK
                           001501  3576 LINK = . 
      001501 07                    3577         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001502 3F 55 4E 49 51 55 45  3578         .ascii     "?UNIQUE"
      001509                       3579 UNIQU:
      001509 CD 04 84         [ 4] 3580         CALL     DUPP
      00150C CD 11 0A         [ 4] 3581         CALL     NAMEQ   ;?name exists
      00150F CD 03 92         [ 4] 3582         CALL     QBRAN
      001512 15 28                 3583         .word      UNIQ1
      001514 CD 0E 3A         [ 4] 3584         CALL     DOTQP   ;redef are OK
      001517 07                    3585         .byte       7
      001518 20 72 65 44 65 66 20  3586         .ascii     " reDef "       
      00151F CD 04 AE         [ 4] 3587         CALL     OVER
      001522 CD 0A 6C         [ 4] 3588         CALL     COUNT
      001525 CD 0D DD         [ 4] 3589         CALL     TYPES   ;just in case
      001528 CC 04 7A         [ 2] 3590 UNIQ1:  JP     DROP
                                   3591 
                                   3592 ;       $,n     ( na -- )
                                   3593 ;       Build a new dictionary name
                                   3594 ;       using string at na.
                                   3595 ; compile dans l'espace flash
      00152B 15 01                 3596         .word      LINK
                           00152D  3597 LINK = . 
      00152D 03                    3598         .byte      3
      00152E 24 2C 6E              3599         .ascii     "$,n"
      001531                       3600 SNAME:
      001531 CD 04 84         [ 4] 3601         CALL     DUPP
      001534 CD 03 FB         [ 4] 3602         CALL     CAT     ;?null input
      001537 CD 03 92         [ 4] 3603         CALL     QBRAN
      00153A 15 61                 3604         .word      PNAM1
      00153C CD 15 09         [ 4] 3605         CALL     UNIQU   ;?redefinition
      00153F CD 1E 1F         [ 4] 3606         CALL    NAME_TO_FLASH 
      001542 CD 05 BE         [ 4] 3607         CALL    CPP 
      001545 CD 03 DD         [ 4] 3608         CALL    AT 
      001548 CD 08 FE         [ 4] 3609         CALL    CELLP 
      00154B CD 04 84         [ 4] 3610         CALL     DUPP
      00154E CD 05 CE         [ 4] 3611         CALL     LAST 
      001551 CD 03 C6         [ 4] 3612         CALL     STORE
      001554 CD 05 A2         [ 4] 3613         CALL     CNTXT
      001557 CD 03 C6         [ 4] 3614         CALL     STORE
      00155A CD 05 BE         [ 4] 3615         CALL    CPP 
      00155D CD 03 C6         [ 4] 3616         CALL    STORE 
      001560 81               [ 4] 3617         RET     ;save code pointer
      001561 CD 0E 30         [ 4] 3618 PNAM1:  CALL     STRQP
      001564 05                    3619         .byte      5
      001565 20 6E 61 6D 65        3620         .ascii     " name" ;null input
      00156A CC 12 1E         [ 2] 3621         JP     ABOR1
                                   3622 
                                   3623 ;; FORTH compiler
                                   3624 
                                   3625 ;       $COMPILE        ( a -- )
                                   3626 ;       Compile next word to
                                   3627 ;       dictionary as a token or literal.
      00156D 15 2D                 3628         .word      LINK
                           00156F  3629 LINK = . 
      00156F 08                    3630         .byte      8
      001570 24 43 4F 4D 50 49 4C  3631         .ascii     "$COMPILE"
             45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001578                       3632 SCOMP:
      001578 CD 11 0A         [ 4] 3633         CALL     NAMEQ
      00157B CD 05 DE         [ 4] 3634         CALL     QDUP    ;?defined
      00157E CD 03 92         [ 4] 3635         CALL     QBRAN
      001581 15 99                 3636         .word      SCOM2
      001583 CD 03 DD         [ 4] 3637         CALL     AT
      001586 CD 03 5F         [ 4] 3638         CALL     DOLIT
      001589 80 00                 3639         .word     0x8000	;  IMEDD*256
      00158B CD 04 D0         [ 4] 3640         CALL     ANDD    ;?immediate
      00158E CD 03 92         [ 4] 3641         CALL     QBRAN
      001591 15 96                 3642         .word      SCOM1
      001593 CC 03 B9         [ 2] 3643         JP     EXECU
      001596 CC 16 1D         [ 2] 3644 SCOM1:  JP     JSRC
      001599 CD 0C A8         [ 4] 3645 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00159C CD 03 92         [ 4] 3646         CALL     QBRAN
      00159F 12 1E                 3647         .word      ABOR1
      0015A1 CC 13 BA         [ 2] 3648         JP     LITER
                                   3649 
                                   3650 ;       OVERT   ( -- )
                                   3651 ;       Link a new word into vocabulary.
      0015A4 15 6F                 3652         .word      LINK
                           0015A6  3653 LINK = . 
      0015A6 05                    3654         .byte      5
      0015A7 4F 56 45 52 54        3655         .ascii     "OVERT"
      0015AC                       3656 OVERT:
      0015AC CD 05 CE         [ 4] 3657         CALL     LAST
      0015AF CD 03 DD         [ 4] 3658         CALL     AT
      0015B2 CD 05 A2         [ 4] 3659         CALL     CNTXT
      0015B5 CC 03 C6         [ 2] 3660         JP     STORE
                                   3661 
                                   3662 ;       ;       ( -- )
                                   3663 ;       Terminate a colon definition.
      0015B8 15 A6                 3664         .word      LINK
                           0015BA  3665 LINK = . 
      0015BA C1                    3666 	.byte      IMEDD+COMPO+1
      0015BB 3B                    3667         .ascii     ";"
      0015BC                       3668 SEMIS:
                           000001  3669 .if OPTIMIZE ; more compact and faster
      0015BC CD 03 5F         [ 4] 3670         call DOLIT 
      0015BF 00 81                 3671         .word 0x81   ; opcode for RET 
      0015C1 CD 13 6A         [ 4] 3672         call CCOMMA 
                           000000  3673 .else
                                   3674         CALL     COMPI
                                   3675         .word EXIT 
                                   3676 .endif 
      0015C4 CD 12 7F         [ 4] 3677         CALL     LBRAC
      0015C7 CD 15 AC         [ 4] 3678         call OVERT 
      0015CA CD 1D F1         [ 4] 3679         CALL UPDATPTR
      0015CD 81               [ 4] 3680         RET 
                                   3681 
                                   3682 
                                   3683 ;       Terminate an ISR definition 
                                   3684 ;       retourn ca of ISR as double
                                   3685 ;       I; ( -- ud )
      0015CE 15 BA                 3686         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           0015D0  3687         LINK=.
      0015D0 C2                    3688         .byte 2+IMEDD+COMPO 
      0015D1 49 3B                 3689         .ascii "I;" 
      0015D3                       3690 ISEMI:
      0015D3 1D 00 02         [ 2] 3691         subw x,#CELLL  
      0015D6 90 AE 00 80      [ 2] 3692         ldw y,#IRET_CODE 
      0015DA FF               [ 2] 3693         ldw (x),y 
      0015DB CD 13 6A         [ 4] 3694         call CCOMMA
      0015DE CD 12 7F         [ 4] 3695         call LBRAC 
      0015E1 CD 05 BE         [ 4] 3696         CALL CPP
      0015E4 CD 03 DD         [ 4] 3697         call AT 
      0015E7 CD 04 94         [ 4] 3698         call SWAPP 
      0015EA CD 05 BE         [ 4] 3699         CALL CPP 
      0015ED CD 03 C6         [ 4] 3700         call STORE 
      0015F0 CD 1A 26         [ 4] 3701         call UPDATCP 
      0015F3 CD 19 E6         [ 4] 3702         call EEPVP 
      0015F6 CD 04 7A         [ 4] 3703         call DROP 
      0015F9 CD 03 DD         [ 4] 3704         call AT 
      0015FC CD 05 B0         [ 4] 3705         call VPP 
      0015FF CD 03 C6         [ 4] 3706         call STORE 
      001602 CC 09 95         [ 2] 3707         jp ZERO
      001605 81               [ 4] 3708         ret           
                                   3709         
                                   3710 
                                   3711 ;       ]       ( -- )
                                   3712 ;       Start compiling words in
                                   3713 ;       input stream.
      001606 15 D0                 3714         .word      LINK
                           001608  3715 LINK = . 
      001608 01                    3716         .byte      1
      001609 5D                    3717         .ascii     "]"
      00160A                       3718 RBRAC:
      00160A CD 03 5F         [ 4] 3719         CALL   DOLIT
      00160D 15 78                 3720         .word  SCOMP
      00160F CD 05 80         [ 4] 3721         CALL   TEVAL
      001612 CC 03 C6         [ 2] 3722         JP     STORE
                                   3723 
                                   3724 ;       CALL,    ( ca -- )
                                   3725 ;       Compile a subroutine call.
      001615 16 08                 3726         .word      LINK
                           001617  3727 LINK = . 
      001617 05                    3728         .byte      5
      001618 43 41 4C 4C 2C        3729         .ascii     "CALL,"
      00161D                       3730 JSRC:
      00161D CD 03 5F         [ 4] 3731         CALL     DOLIT
      001620 00 CD                 3732         .word     CALLL     ;CALL
      001622 CD 13 6A         [ 4] 3733         CALL     CCOMMA
      001625 CC 13 53         [ 2] 3734         JP     COMMA
                                   3735 
                                   3736 ;       :       ( -- ; <string> )
                                   3737 ;       Start a new colon definition
                                   3738 ;       using next word as its name.
      001628 16 17                 3739         .word      LINK
                           00162A  3740 LINK = . 
      00162A 01                    3741         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00162B 3A                    3742         .ascii     ":"
      00162C                       3743 COLON:
      00162C CD 10 0D         [ 4] 3744         CALL   TOKEN
      00162F CD 15 31         [ 4] 3745         CALL   SNAME
      001632 CC 16 0A         [ 2] 3746         JP     RBRAC
                                   3747 
                                   3748 ;       I:  ( -- )
                                   3749 ;       Start interrupt service routine definition
                                   3750 ;       those definition have no name.
      001635 16 2A                 3751         .word LINK
                           001637  3752         LINK=.
      001637 02                    3753         .byte 2 
      001638 49 3A                 3754         .ascii "I:" 
      00163A                       3755 ICOLON:
      00163A CC 16 0A         [ 2] 3756         jp RBRAC  
                                   3757 
                                   3758 ;       IMMEDIATE       ( -- )
                                   3759 ;       Make last compiled word
                                   3760 ;       an immediate word.
      00163D 16 37                 3761         .word      LINK
                           00163F  3762 LINK = . 
      00163F 09                    3763         .byte      9
      001640 49 4D 4D 45 44 49 41  3764         .ascii     "IMMEDIATE"
             54 45
      001649                       3765 IMMED:
      001649 CD 03 5F         [ 4] 3766         CALL     DOLIT
      00164C 80 00                 3767         .word     0x8000	;  IMEDD*256
      00164E CD 05 CE         [ 4] 3768         CALL     LAST
      001651 CD 03 DD         [ 4] 3769         CALL     AT
      001654 CD 03 DD         [ 4] 3770         CALL     AT
      001657 CD 04 E4         [ 4] 3771         CALL     ORR
      00165A CD 05 CE         [ 4] 3772         CALL     LAST
      00165D CD 03 DD         [ 4] 3773         CALL     AT
      001660 CC 03 C6         [ 2] 3774         JP     STORE
                                   3775 
                                   3776 ;; Defining words
                                   3777 
                                   3778 ;       CREATE  ( -- ; <string> )
                                   3779 ;       Compile a new array
                                   3780 ;       without allocating space.
      001663 16 3F                 3781         .word      LINK
                           001665  3782 LINK = . 
      001665 06                    3783         .byte      6
      001666 43 52 45 41 54 45     3784         .ascii     "CREATE"
      00166C                       3785 CREAT:
      00166C CD 10 0D         [ 4] 3786         CALL     TOKEN
      00166F CD 15 31         [ 4] 3787         CALL     SNAME
      001672 CD 15 AC         [ 4] 3788         CALL     OVERT        
      001675 CD 13 98         [ 4] 3789         CALL     COMPI 
      001678 05 31                 3790         .word DOVAR 
      00167A 81               [ 4] 3791         RET
                                   3792 
                                   3793 ;       VARIABLE        ( -- ; <string> )
                                   3794 ;       Compile a new variable
                                   3795 ;       initialized to 0.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00167B 16 65                 3796         .word      LINK
                           00167D  3797 LINK = . 
      00167D 08                    3798         .byte      8
      00167E 56 41 52 49 41 42 4C  3799         .ascii     "VARIABLE"
             45
      001686                       3800 VARIA:
                                   3801 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001686 CD 0A 83         [ 4] 3802         CALL HERE
      001689 CD 04 84         [ 4] 3803         CALL DUPP 
      00168C CD 08 FE         [ 4] 3804         CALL CELLP
      00168F CD 05 B0         [ 4] 3805         CALL VPP 
      001692 CD 03 C6         [ 4] 3806         CALL STORE
      001695 CD 16 6C         [ 4] 3807         CALL CREAT
      001698 CD 04 84         [ 4] 3808         CALL DUPP
      00169B CD 13 53         [ 4] 3809         CALL COMMA
      00169E CD 09 95         [ 4] 3810         CALL ZERO
      0016A1 CD 04 94         [ 4] 3811         call SWAPP 
      0016A4 CD 03 C6         [ 4] 3812         CALL STORE
      0016A7 CD 1A 3D         [ 4] 3813         call UPDATVP  ; don't update if variable kept in RAM.
      0016AA CD 1D F1         [ 4] 3814         CALL UPDATPTR
      0016AD 81               [ 4] 3815         RET         
                                   3816 
                                   3817 
                                   3818 ;       CONSTANT  ( n -- ; <string> )
                                   3819 ;       Compile a new constant 
                                   3820 ;       n CONSTANT name 
      0016AE 16 7D                 3821         .word LINK 
                           0016B0  3822         LINK=. 
      0016B0 08                    3823         .byte 8 
      0016B1 43 4F 4E 53 54 41 4E  3824         .ascii "CONSTANT" 
             54
      0016B9                       3825 CONSTANT:          
      0016B9 CD 10 0D         [ 4] 3826         CALL TOKEN
      0016BC CD 15 31         [ 4] 3827         CALL SNAME 
      0016BF CD 15 AC         [ 4] 3828         CALL OVERT 
      0016C2 CD 13 98         [ 4] 3829         CALL COMPI 
      0016C5 16 D8                 3830         .word DOCONST
      0016C7 CD 13 53         [ 4] 3831         CALL COMMA 
      0016CA CD 1D F1         [ 4] 3832         CALL UPDATPTR  
      0016CD 81               [ 4] 3833 1$:     RET          
                                   3834 
                                   3835 ; CONSTANT runtime semantic 
                                   3836 ; doCONST  ( -- n )
      0016CE 16 B0                 3837         .word LINK 
                           0016D0  3838         LINK=.
      0016D0 07                    3839         .byte 7
      0016D1 44 4F 43 4F 4E 53 54  3840         .ascii "DOCONST"
      0016D8                       3841 DOCONST:
      0016D8 1D 00 02         [ 2] 3842         subw x,#CELLL
      0016DB 90 85            [ 2] 3843         popw y 
      0016DD 90 FE            [ 2] 3844         ldw y,(y) 
      0016DF FF               [ 2] 3845         ldw (x),y 
      0016E0 81               [ 4] 3846         ret 
                                   3847 
                                   3848 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3849 ;; Tools
                                   3850 
                                   3851 ;       _TYPE   ( b u -- )
                                   3852 ;       Display a string. Filter
                                   3853 ;       non-printing characters.
      0016E1 16 D0                 3854         .word      LINK
                           0016E3  3855 LINK = . 
      0016E3 05                    3856         .byte      5
      0016E4 5F 54 59 50 45        3857         .ascii     "_TYPE"
      0016E9                       3858 UTYPE:
      0016E9 CD 04 4D         [ 4] 3859         CALL     TOR     ;start count down loop
      0016EC 20 0F            [ 2] 3860         JRA     UTYP2   ;skip first pass
      0016EE CD 04 84         [ 4] 3861 UTYP1:  CALL     DUPP
      0016F1 CD 03 FB         [ 4] 3862         CALL     CAT
      0016F4 CD 09 BF         [ 4] 3863         CALL     TCHAR
      0016F7 CD 03 49         [ 4] 3864         CALL     EMIT    ;display only printable
      0016FA CD 09 29         [ 4] 3865         CALL     ONEP    ;increment address
      0016FD CD 03 73         [ 4] 3866 UTYP2:  CALL     DONXT
      001700 16 EE                 3867         .word      UTYP1   ;loop till done
      001702 CC 04 7A         [ 2] 3868         JP     DROP
                                   3869 
                                   3870 ;       dm+     ( a u -- a )
                                   3871 ;       Dump u bytes from ,
                                   3872 ;       leaving a+u on  stack.
      001705 16 E3                 3873         .word      LINK
                           001707  3874 LINK = . 
      001707 03                    3875         .byte      3
      001708 64 6D 2B              3876         .ascii     "dm+"
      00170B                       3877 DUMPP:
      00170B CD 04 AE         [ 4] 3878         CALL     OVER
      00170E CD 03 5F         [ 4] 3879         CALL     DOLIT
      001711 00 04                 3880         .word      4
      001713 CD 0E 63         [ 4] 3881         CALL     UDOTR   ;display address
      001716 CD 0D B3         [ 4] 3882         CALL     SPACE
      001719 CD 04 4D         [ 4] 3883         CALL     TOR     ;start count down loop
      00171C 20 11            [ 2] 3884         JRA     PDUM2   ;skip first pass
      00171E CD 04 84         [ 4] 3885 PDUM1:  CALL     DUPP
      001721 CD 03 FB         [ 4] 3886         CALL     CAT
      001724 CD 03 5F         [ 4] 3887         CALL     DOLIT
      001727 00 03                 3888         .word      3
      001729 CD 0E 63         [ 4] 3889         CALL     UDOTR   ;display numeric data
      00172C CD 09 29         [ 4] 3890         CALL     ONEP    ;increment address
      00172F CD 03 73         [ 4] 3891 PDUM2:  CALL     DONXT
      001732 17 1E                 3892         .word      PDUM1   ;loop till done
      001734 81               [ 4] 3893         RET
                                   3894 
                                   3895 ;       DUMP    ( a u -- )
                                   3896 ;       Dump u bytes from a,
                                   3897 ;       in a formatted manner.
      001735 17 07                 3898         .word      LINK
                           001737  3899 LINK = . 
      001737 04                    3900         .byte      4
      001738 44 55 4D 50           3901         .ascii     "DUMP"
      00173C                       3902 DUMP:
      00173C CD 05 41         [ 4] 3903         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00173F CD 03 DD         [ 4] 3904         CALL     AT
      001742 CD 04 4D         [ 4] 3905         CALL     TOR
      001745 CD 0C 3B         [ 4] 3906         CALL     HEX     ;save radix, set hex
      001748 CD 03 5F         [ 4] 3907         CALL     DOLIT
      00174B 00 10                 3908         .word      16
      00174D CD 08 4F         [ 4] 3909         CALL     SLASH   ;change count to lines
      001750 CD 04 4D         [ 4] 3910         CALL     TOR     ;start count down loop
      001753 CD 0D FB         [ 4] 3911 DUMP1:  CALL     CR
      001756 CD 03 5F         [ 4] 3912         CALL     DOLIT
      001759 00 10                 3913         .word      16
      00175B CD 06 1A         [ 4] 3914         CALL     DDUP
      00175E CD 17 0B         [ 4] 3915         CALL     DUMPP   ;display numeric
      001761 CD 05 EF         [ 4] 3916         CALL     ROT
      001764 CD 05 EF         [ 4] 3917         CALL     ROT
      001767 CD 0D B3         [ 4] 3918         CALL     SPACE
      00176A CD 0D B3         [ 4] 3919         CALL     SPACE
      00176D CD 16 E9         [ 4] 3920         CALL     UTYPE   ;display printable characters
      001770 CD 03 73         [ 4] 3921         CALL     DONXT
      001773 17 53                 3922         .word      DUMP1   ;loop till done
      001775 CD 04 7A         [ 4] 3923 DUMP3:  CALL     DROP
      001778 CD 04 2E         [ 4] 3924         CALL     RFROM
      00177B CD 05 41         [ 4] 3925         CALL     BASE
      00177E CC 03 C6         [ 2] 3926         JP     STORE   ;restore radix
                                   3927 
                                   3928 ;       .S      ( ... -- ... )
                                   3929 ;        Display  contents of stack.
      001781 17 37                 3930         .word      LINK
                           001783  3931 LINK = . 
      001783 02                    3932         .byte      2
      001784 2E 53                 3933         .ascii     ".S"
      001786                       3934 DOTS:
      001786 CD 0D FB         [ 4] 3935         CALL     CR
      001789 CD 09 D7         [ 4] 3936         CALL     DEPTH   ;stack depth
      00178C CD 04 4D         [ 4] 3937         CALL     TOR     ;start count down loop
      00178F 20 09            [ 2] 3938         JRA     DOTS2   ;skip first pass
      001791 CD 04 41         [ 4] 3939 DOTS1:  CALL     RAT
      001794 CD 09 EE         [ 4] 3940 	CALL     PICK
      001797 CD 0E 96         [ 4] 3941         CALL     DOT     ;index stack, display contents
      00179A CD 03 73         [ 4] 3942 DOTS2:  CALL     DONXT
      00179D 17 91                 3943         .word      DOTS1   ;loop till done
      00179F CD 0E 3A         [ 4] 3944         CALL     DOTQP
      0017A2 05                    3945         .byte      5
      0017A3 20 3C 73 70 20        3946         .ascii     " <sp "
      0017A8 81               [ 4] 3947         RET
                                   3948 
                                   3949 ;       >NAME   ( ca -- na | F )
                                   3950 ;       Convert code address
                                   3951 ;       to a name address.
      0017A9 17 83                 3952         .word      LINK
                           0017AB  3953 LINK = . 
      0017AB 05                    3954         .byte      5
      0017AC 3E 4E 41 4D 45        3955         .ascii     ">NAME"
      0017B1                       3956 TNAME:
      0017B1 CD 05 A2         [ 4] 3957         CALL     CNTXT   ;vocabulary link
      0017B4 CD 03 DD         [ 4] 3958 TNAM2:  CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0017B7 CD 04 84         [ 4] 3959         CALL     DUPP    ;?last word in a vocabulary
      0017BA CD 03 92         [ 4] 3960         CALL     QBRAN
      0017BD 17 D8                 3961         .word      TNAM4
      0017BF CD 06 1A         [ 4] 3962         CALL     DDUP
      0017C2 CD 10 1B         [ 4] 3963         CALL     NAMET
      0017C5 CD 04 F9         [ 4] 3964         CALL     XORR    ;compare
      0017C8 CD 03 92         [ 4] 3965         CALL     QBRAN
      0017CB 17 D2                 3966         .word      TNAM3
      0017CD CD 09 0D         [ 4] 3967         CALL     CELLM   ;continue with next word
      0017D0 20 E2            [ 2] 3968         JRA     TNAM2
      0017D2 CD 04 94         [ 4] 3969 TNAM3:  CALL     SWAPP
      0017D5 CC 04 7A         [ 2] 3970         JP     DROP
      0017D8 CD 06 0F         [ 4] 3971 TNAM4:  CALL     DDROP
      0017DB CC 09 95         [ 2] 3972         JP     ZERO
                                   3973 
                                   3974 ;       .ID     ( na -- )
                                   3975 ;        Display  name at address.
      0017DE 17 AB                 3976         .word      LINK
                           0017E0  3977 LINK = . 
      0017E0 03                    3978         .byte      3
      0017E1 2E 49 44              3979         .ascii     ".ID"
      0017E4                       3980 DOTID:
      0017E4 CD 05 DE         [ 4] 3981         CALL     QDUP    ;if zero no name
      0017E7 CD 03 92         [ 4] 3982         CALL     QBRAN
      0017EA 17 FA                 3983         .word      DOTI1
      0017EC CD 0A 6C         [ 4] 3984         CALL     COUNT
      0017EF CD 03 5F         [ 4] 3985         CALL     DOLIT
      0017F2 00 1F                 3986         .word      0x1F
      0017F4 CD 04 D0         [ 4] 3987         CALL     ANDD    ;mask lexicon bits
      0017F7 CC 16 E9         [ 2] 3988         JP     UTYPE
      0017FA CD 0E 3A         [ 4] 3989 DOTI1:  CALL     DOTQP
      0017FD 09                    3990         .byte      9
      0017FE 20 6E 6F 4E 61 6D 65  3991         .ascii     " noName"
      001805 81               [ 4] 3992         RET
                                   3993 
                           000000  3994 WANT_SEE=0
                           000000  3995 .if WANT_SEE 
                                   3996 ;       SEE     ( -- ; <string> )
                                   3997 ;       A simple decompiler.
                                   3998 ;       Updated for byte machines.
                                   3999         .word      LINK
                                   4000 LINK = . 
                                   4001         .byte      3
                                   4002         .ascii     "SEE"
                                   4003 SEE:
                                   4004         CALL     TICK    ;starting address
                                   4005         CALL     CR
                                   4006         CALL     ONEM
                                   4007 SEE1:   CALL     ONEP
                                   4008         CALL     DUPP
                                   4009         CALL     AT
                                   4010         CALL     DUPP
                                   4011         CALL     QBRAN
                                   4012         .word    SEE2
                                   4013         CALL     TNAME   ;?is it a name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4014 SEE2:   CALL     QDUP    ;name address or zero
                                   4015         CALL     QBRAN
                                   4016         .word    SEE3
                                   4017         CALL     SPACE
                                   4018         CALL     DOTID   ;display name
                                   4019         CALL     ONEP
                                   4020         JRA      SEE4
                                   4021 SEE3:   CALL     DUPP
                                   4022         CALL     CAT
                                   4023         CALL     UDOT    ;display number
                                   4024 SEE4:   CALL     NUFQ    ;user control
                                   4025         CALL     QBRAN
                                   4026         .word    SEE1
                                   4027         JP     DROP
                                   4028 .endif ; WANT_SEE 
                                   4029 
                                   4030 ;       WORDS   ( -- )
                                   4031 ;       Display names in vocabulary.
      001806 17 E0                 4032         .word      LINK
                           001808  4033 LINK = . 
      001808 05                    4034         .byte      5
      001809 57 4F 52 44 53        4035         .ascii     "WORDS"
      00180E                       4036 WORDS:
      00180E CD 0D FB         [ 4] 4037         CALL     CR
      001811 CD 05 A2         [ 4] 4038         CALL     CNTXT   ;only in context
      001814 CD 03 DD         [ 4] 4039 WORS1:  CALL     AT
      001817 CD 05 DE         [ 4] 4040         CALL     QDUP    ;?at end of list
      00181A CD 03 92         [ 4] 4041         CALL     QBRAN
      00181D 18 30                 4042         .word      WORS2
      00181F CD 04 84         [ 4] 4043         CALL     DUPP
      001822 CD 0D B3         [ 4] 4044         CALL     SPACE
      001825 CD 17 E4         [ 4] 4045         CALL     DOTID   ;display a name
      001828 CD 09 0D         [ 4] 4046         CALL     CELLM
      00182B CD 03 A9         [ 4] 4047         CALL     BRAN
      00182E 18 14                 4048         .word      WORS1
      001830 81               [ 4] 4049 WORS2:  RET
                                   4050 
                                   4051         
                                   4052 ;; Hardware reset
                                   4053 
                                   4054 ;       hi      ( -- )
                                   4055 ;       Display sign-on message.
      001831 18 08                 4056         .word      LINK
                           001833  4057 LINK = . 
      001833 02                    4058         .byte      2
      001834 68 69                 4059         .ascii     "hi"
      001836                       4060 HI:
      001836 CD 0D FB         [ 4] 4061         CALL     CR
      001839 CD 0E 3A         [ 4] 4062         CALL     DOTQP   ;initialize I/O
      00183C 0F                    4063         .byte      15
      00183D 73 74 6D 38 65 46 6F  4064         .ascii     "stm8eForth v"
             72 74 68 20 76
      001849 33                    4065 	.byte      VER+'0'
      00184A 2E                    4066         .byte      '.' 
      00184B 30                    4067 	.byte      EXT+'0' ;version
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00184C CC 0D FB         [ 2] 4068         JP     CR
                                   4069 
                           000000  4070 WANT_DEBUG=0
                           000000  4071 .if WANT_DEBUG 
                                   4072 ;       DEBUG      ( -- )
                                   4073 ;       Display sign-on message.
                                   4074 ;        .word      LINK
                                   4075 LINK = . 
                                   4076         .byte      5
                                   4077         .ascii     "DEBUG"
                                   4078 DEBUG:
                                   4079 	CALL DOLIT
                                   4080 	.word 0x65
                                   4081 	CALL EMIT
                                   4082 	CALL DOLIT
                                   4083 	.word 0
                                   4084  	CALL ZLESS 
                                   4085 	CALL DOLIT
                                   4086 	.word 0xFFFE
                                   4087 	CALL ZLESS 
                                   4088 	CALL UPLUS 
                                   4089  	CALL DROP 
                                   4090 	CALL DOLIT
                                   4091 	.word 3
                                   4092 	CALL UPLUS 
                                   4093 	CALL UPLUS 
                                   4094  	CALL DROP
                                   4095 	CALL DOLIT
                                   4096 	.word 0x43
                                   4097 	CALL UPLUS 
                                   4098  	CALL DROP
                                   4099 	CALL EMIT
                                   4100 	CALL DOLIT
                                   4101 	.word 0x4F
                                   4102 	CALL DOLIT
                                   4103 	.word 0x6F
                                   4104  	CALL XORR
                                   4105 	CALL DOLIT
                                   4106 	.word 0xF0
                                   4107  	CALL ANDD
                                   4108 	CALL DOLIT
                                   4109 	.word 0x4F
                                   4110  	CALL ORR
                                   4111 	CALL EMIT
                                   4112 	CALL DOLIT
                                   4113 	.word 8
                                   4114 	CALL DOLIT
                                   4115 	.word 6
                                   4116  	CALL SWAPP
                                   4117 	CALL OVER
                                   4118 	CALL XORR
                                   4119 	CALL DOLIT
                                   4120 	.word 3
                                   4121 	CALL ANDD 
                                   4122 	CALL ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4123 	CALL DOLIT
                                   4124 	.word 0x70
                                   4125 	CALL UPLUS 
                                   4126 	CALL DROP
                                   4127 	CALL EMIT
                                   4128 	CALL DOLIT
                                   4129 	.word 0
                                   4130 	CALL QBRAN
                                   4131 	.word DEBUG1
                                   4132 	CALL DOLIT
                                   4133 	.word 0x3F
                                   4134 DEBUG1:
                                   4135 	CALL DOLIT
                                   4136 	.word 0xFFFF
                                   4137 	CALL QBRAN
                                   4138 	.word DEBUG2
                                   4139 	CALL DOLIT
                                   4140 	.word 0x74
                                   4141 	CALL BRAN
                                   4142 	.word DEBUG3
                                   4143 DEBUG2:
                                   4144 	CALL DOLIT
                                   4145 	.word 0x21
                                   4146 DEBUG3:
                                   4147 	CALL EMIT
                                   4148 	CALL DOLIT
                                   4149 	.word 0x68
                                   4150 	CALL DOLIT
                                   4151 	.word 0x80
                                   4152 	CALL STORE
                                   4153 	CALL DOLIT
                                   4154 	.word 0x80
                                   4155 	CALL AT
                                   4156 	CALL EMIT
                                   4157 	CALL DOLIT
                                   4158 	.word 0x4D
                                   4159 	CALL TOR
                                   4160 	CALL RAT
                                   4161 	CALL RFROM
                                   4162 	CALL ANDD
                                   4163 	CALL EMIT
                                   4164 	CALL DOLIT
                                   4165 	.word 0x61
                                   4166 	CALL DOLIT
                                   4167 	.word 0xA
                                   4168 	CALL TOR
                                   4169 DEBUG4:
                                   4170 	CALL DOLIT
                                   4171 	.word 1
                                   4172 	CALL UPLUS 
                                   4173 	CALL DROP
                                   4174 	CALL DONXT
                                   4175 	.word DEBUG4
                                   4176 	CALL EMIT
                                   4177 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4178 	.word 0x656D
                                   4179 	CALL DOLIT
                                   4180 	.word 0x100
                                   4181 	CALL UMSTA
                                   4182 	CALL SWAPP
                                   4183 	CALL DOLIT
                                   4184 	.word 0x100
                                   4185 	CALL UMSTA
                                   4186 	CALL SWAPP 
                                   4187 	CALL DROP
                                   4188 	CALL EMIT
                                   4189 	CALL EMIT
                                   4190 	CALL DOLIT
                                   4191 	.word 0x2043
                                   4192 	CALL DOLIT
                                   4193 	.word 0
                                   4194 	CALL DOLIT
                                   4195 	.word 0x100
                                   4196 	CALL UMMOD
                                   4197 	CALL EMIT
                                   4198 	CALL EMIT
                                   4199 	;JP ORIG
                                   4200 	RET
                                   4201 .endif ; WANT_DEBUG 
                                   4202 
                                   4203 
                                   4204 ;       'BOOT   ( -- a )
                                   4205 ;       The application startup vector.
      00184F 18 33                 4206         .word      LINK
                           001851  4207 LINK = . 
      001851 05                    4208         .byte      5
      001852 27 42 4F 4F 54        4209         .ascii     "'BOOT"
      001857                       4210 TBOOT:
      001857 CD 05 31         [ 4] 4211         CALL     DOVAR
      00185A 40 02                 4212         .word    APP_RUN      ;application to boot
                                   4213 
                                   4214 ;       COLD    ( -- )
                                   4215 ;       The hilevel cold start s=ence.
      00185C 18 51                 4216         .word      LINK
                           00185E  4217         LINK = . 
      00185E 04                    4218         .byte      4
      00185F 43 4F 4C 44           4219         .ascii     "COLD"
      001863                       4220 COLD:
                           000000  4221 .if WANT_DEBUG
                                   4222         CALL DEBUG
                                   4223 .endif ; WANT_DEBUG
      001863 CD 03 5F         [ 4] 4224 COLD1:  CALL     DOLIT
      001866 00 2B                 4225         .word      UZERO
      001868 CD 03 5F         [ 4] 4226 	CALL     DOLIT
      00186B 00 06                 4227         .word      UPP
      00186D CD 03 5F         [ 4] 4228         CALL     DOLIT
      001870 00 16                 4229 	.word      UEND-UZERO
      001872 CD 0A D0         [ 4] 4230         CALL     CMOVE   ;initialize user area
                                   4231 
                                   4232 ; if APP_RUN==0 initialize with ca de 'hi'  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001875 90 CE 40 02      [ 2] 4233         ldw y,APP_RUN 
      001879 26 0B            [ 1] 4234         jrne 0$
      00187B 1D 00 02         [ 2] 4235         subw x,#CELLL 
      00187E 90 AE 18 36      [ 2] 4236         ldw y,#HI  
      001882 FF               [ 2] 4237         ldw (x),y
      001883 CD 1A 15         [ 4] 4238         call UPDATRUN 
      001886                       4239 0$:        
                                   4240 ; update LAST with APP_LAST 
                                   4241 ; if APP_LAST > LAST else do the opposite
      001886 90 CE 40 00      [ 2] 4242         ldw y,APP_LAST 
      00188A 90 B3 1A         [ 2] 4243         cpw y,ULAST 
      00188D 22 05            [ 1] 4244         jrugt 1$ 
                                   4245 ; save LAST at APP_LAST  
      00188F CD 19 FD         [ 4] 4246         call UPDATLAST 
      001892 20 06            [ 2] 4247         jra 2$
      001894                       4248 1$: ; update LAST with APP_LAST 
      001894 90 BF 1A         [ 2] 4249         ldw ULAST,y
      001897 90 BF 14         [ 2] 4250         ldw UCNTXT,y
      00189A                       4251 2$:  
                                   4252 ; update APP_CP if < app_space 
      00189A 90 CE 40 04      [ 2] 4253         ldw y,APP_CP  
      00189E 90 B3 18         [ 2] 4254         cpw y,UCP   
      0018A1 24 06            [ 1] 4255         jruge 3$ 
      0018A3 CD 1A 26         [ 4] 4256         call UPDATCP
      0018A6 90 BE 18         [ 2] 4257         ldw y,UCP   
      0018A9                       4258 3$:
      0018A9 90 BF 18         [ 2] 4259         ldw UCP,y                 
                                   4260 ; update UVP with APP_VP  
                                   4261 ; if APP_VP>UVP else do the opposite 
      0018AC 90 CE 40 06      [ 2] 4262         ldw y,APP_VP 
      0018B0 90 B3 16         [ 2] 4263         cpw y,UVP 
      0018B3 22 05            [ 1] 4264         jrugt 4$
      0018B5 CD 1A 3D         [ 4] 4265         call UPDATVP 
      0018B8 20 03            [ 2] 4266         jra 6$
      0018BA                       4267 4$: ; update UVP with APP_VP 
      0018BA 90 BF 16         [ 2] 4268         ldw UVP,y 
      0018BD                       4269 6$:      
      0018BD CD 12 FE         [ 4] 4270         CALL     PRESE   ;initialize data stack and TIB
      0018C0 CD 18 57         [ 4] 4271         CALL     TBOOT
      0018C3 CD 0A B9         [ 4] 4272         CALL     ATEXE   ;application boot
      0018C6 CD 15 AC         [ 4] 4273         CALL     OVERT
      0018C9 CC 13 1B         [ 2] 4274         JP     QUIT    ;start interpretation
                                   4275 
                           000001  4276 WANT_MATH_CONST = 1 
                           000001  4277 .if WANT_MATH_CONST 
                                   4278         ; irrational constants 
                                   4279         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4280         .include "../const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      0018CC 18 5E                   31         .word LINK 
                           0018CE    32         LINK=.
      0018CE 02                      33         .byte 2
      0018CF 50 49                   34         .ascii "PI" 
      0018D1                         35 PII:
      0018D1 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      0018D4 90 AE 01 63      [ 2]   37         ldw y,#355 
      0018D8 EF 02            [ 2]   38         ldw (2,x),y 
      0018DA 90 AE 00 71      [ 2]   39         ldw y,#113 
      0018DE FF               [ 2]   40         ldw (x),y 
      0018DF 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      0018E0 18 CE                   48         .word LINK 
                           0018E2    49         LINK=.
      0018E2 05                      50         .byte 5 
      0018E3 53 51 52 54 32          51         .ascii "SQRT2" 
      0018E8                         52 SQRT2:
      0018E8 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      0018EB 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      0018EF EF 02            [ 2]   55         ldw (2,x),y 
      0018F1 90 AE 36 24      [ 2]   56         ldw y,#13860 
      0018F5 FF               [ 2]   57         ldw (x),y 
      0018F6 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      0018F7 18 E2                   63         .word LINK 
                           0018F9    64         LINK=.
      0018F9 05                      65         .byte 5
      0018FA 53 51 52 54 33          66         .ascii "SQRT3" 
      0018FF                         67 SQRT3: 
      0018FF 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001902 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001906 EF 02            [ 2]   70     ldw (2,x),y 
      001908 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00190C FF               [ 2]   72     ldw (x),y 
      00190D 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00190E 18 F9                   78         .word LINK 
                           001910    79         LINK=.
      001910 01                      80         .byte 1
      001911 45                      81         .ascii "E" 
      001912                         82 ENEPER:
      001912 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001915 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001919 EF 02            [ 2]   85     ldw (2,x),y 
      00191B 90 AE 29 32      [ 2]   86     ldw y,#10546 
      00191F FF               [ 2]   87     ldw (x),y 
      001920 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001921 19 10                   92         .word LINK 
                           001923    93         LINK=.
      001923 06                      94         .byte 6 
      001924 53 51 52 54 31 30       95         .ascii "SQRT10" 
      00192A                         96 SQRT10:
      00192A 1D 00 04         [ 2]   97     subw x,#2*CELLL
      00192D 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001931 EF 02            [ 2]   99     ldw (2,x),y 
      001933 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001937 FF               [ 2]  101     ldw (x),y 
      001938 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001939 19 23                  107         .word LINK 
                           00193B   108         LINK=. 
      00193B 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00193C 31 32 52 54 32         110         .ascii "12RT2"
      001941                        111 RT12_2:
      001941 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001944 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001948 EF 02            [ 2]  114     ldw (2,x),y 
      00194A 90 AE 62 CD      [ 2]  115     ldw y,#25293
      00194E FF               [ 2]  116     ldw (x),y 
      00194F 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001950 19 3B                  122         .word LINK 
                           001952   123         LINK=.
      001952 05                     124         .byte 5 
      001953 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001958                        126 LOG2S:
      001958 1D 00 04         [ 2]  127     subw x,#2*CELLL
      00195B 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      00195F EF 02            [ 2]  129     ldw (2,x),y 
      001961 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001965 FF               [ 2]  131     ldw (x),y 
      001966 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001967 19 52                  137         .word LINK 
                           001969   138         LINK=.
      001969 04                     139         .byte 4 
      00196A 4C 4E 32 53            140         .ascii "LN2S" 
      00196E                        141 LN2S: 
      00196E 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001971 90 AE 01 E5      [ 2]  143     ldw y,#485
      001975 EF 02            [ 2]  144     ldw (2,x),y 
      001977 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      00197B FF               [ 2]  146     ldw (x),y 
      00197C 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4281 .endif ; WANT_MATH_CONST
                                   4282 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4283         .include "flash_disco.asm"
                                      1 ;;
                                      2 ; Copyright Jacques DeschÃªnes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize PTR16 
                                     28 ; PTR!  ( a -- )
                                     29 ;---------------------------------
      00197D 19 69                   30     .word LINK 
                           00197F    31     LINK=.
      00197F 03                      32     .byte 3 
      001980 50 54 52 21             33     .ascii "PTR!"
      001984                         34 PSTO:
      001984 90 93            [ 1]   35     ldw y,x
      001986 90 FE            [ 2]   36     ldw y,(y)
      001988 90 BF 2C         [ 2]   37     ldw PTR16,y 
      00198B 1C 00 02         [ 2]   38     addw x,#CELLL 
      00198E 81               [ 4]   39     ret 
                                     40 
                                     41 ;-----------------------------------
                                     42 ; return EEPROM base address 
                                     43 ; as a double 
                                     44 ;  EEPROM  ( -- a )
                                     45 ;-----------------------------------
      00198F 19 7F                   46     .word LINK 
                           001991    47 LINK=.
      001991 06                      48     .byte 6 
      001992 45 45 50 52 4F 4D       49     .ascii "EEPROM"
      001998                         50 EEPROM: 
      001998 90 AE 40 00      [ 2]   51     ldw y,#EEPROM_BASE
      00199C 1D 00 02         [ 2]   52     subw x,#CELLL 
      00199F FF               [ 2]   53     ldw (x),y 
      0019A0 81               [ 4]   54     ret
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                     55 
                                     56 ;---------------------------------
                                     57 ; return APP_LAST address
                                     58 ; EEP-LAST ( -- a )
                                     59 ;---------------------------------
      0019A1 19 91                   60 	.word LINK 
                           0019A3    61 	LINK=.
      0019A3 08                      62 	.byte 8 
      0019A4 45 45 50 2D 4C 41 53    63 	.ascii "EEP-LAST"
             54
      0019AC                         64 EEPLAST:
      0019AC 1D 00 02         [ 2]   65 	subw x,#CELLL 
      0019AF 90 AE 40 00      [ 2]   66 	ldw y,#APP_LAST 
      0019B3 EF 02            [ 2]   67 	ldw (2,x),y 
      0019B5 81               [ 4]   68 	ret 
                                     69 
                                     70 ;----------------------------------
                                     71 ; return APP_RUN address
                                     72 ; EEP-RUN ( -- a )
                                     73 ;-----------------------------------
      0019B6 19 A3                   74 	.word LINK 
                           0019B8    75 	LINK=.
      0019B8 07                      76 	.byte 7
      0019B9 45 45 50 2D 52 55 4E    77 	.ascii "EEP-RUN"
      0019C0                         78 EEPRUN:
      0019C0 1D 00 02         [ 2]   79 	subw x,#CELLL 
      0019C3 90 AE 40 02      [ 2]   80 	ldw y,#APP_RUN 
      0019C7 EF 02            [ 2]   81 	ldw (2,x),y 
      0019C9 81               [ 4]   82 	ret 
                                     83 
                                     84 ;------------------------------------
                                     85 ; return APP_CP address
                                     86 ; EEP-CP ( -- a )
                                     87 ;------------------------------------
      0019CA 19 B8                   88 	.word LINK
                           0019CC    89 	LINK=.
      0019CC 06                      90 	.byte 6 
      0019CD 45 45 50 2D 43 50       91 	.ascii "EEP-CP"
      0019D3                         92 EEPCP:
      0019D3 1D 00 02         [ 2]   93 	subw x,#CELLL 
      0019D6 90 AE 40 04      [ 2]   94 	ldw y,#APP_CP  
      0019DA EF 02            [ 2]   95 	ldw (2,x),y 
      0019DC 81               [ 4]   96 	ret 
                                     97 
                                     98 ;------------------------------------
                                     99 ; return APP_VP address  
                                    100 ; EEP-VP ( -- a )
                                    101 ;-------------------------------------
      0019DD 19 CC                  102 	.word LINK
                           0019DF   103 	LINK=.
      0019DF 06                     104 	.byte 6
      0019E0 45 45 50 2D 56 50      105 	.ascii "EEP-VP"
      0019E6                        106 EEPVP:
      0019E6 1D 00 02         [ 2]  107 	subw x,#CELLL 
      0019E9 90 AE 40 06      [ 2]  108 	ldw y,#APP_VP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0019ED EF 02            [ 2]  109 	ldw (2,x),y 
      0019EF 81               [ 4]  110 	ret 
                                    111 
                                    112 ;----------------------------------
                                    113 ; update APP_LAST with LAST 
                                    114 ; UPDAT-LAST ( -- )
                                    115 ;----------------------------------
      0019F0 19 DF                  116 	.word LINK 
                           0019F2   117 	LINK=.
      0019F2 0A                     118 	.byte 10
      0019F3 55 50 44 41 54 2D 4C   119 	.ascii "UPDAT-LAST"
             41 53 54
      0019FD                        120 UPDATLAST:
      0019FD CD 05 CE         [ 4]  121 	call LAST
      001A00 CD 03 DD         [ 4]  122 	call AT  
      001A03 CD 19 AC         [ 4]  123 	call EEPLAST
      001A06 CC 1B 3C         [ 2]  124 	jp EESTO 
                                    125 
                                    126 ;---------------------------------
                                    127 ; update APP_RUN 
                                    128 ; UPDAT-RUN ( a -- )
                                    129 ;---------------------------------
      001A09 19 F2                  130 	.word LINK
                           001A0B   131 	LINK=.
      001A0B 09                     132 	.byte 9
      001A0C 55 50 44 41 54 2D 52   133 	.ascii "UPDAT-RUN"
             55 4E
      001A15                        134 UPDATRUN:
      001A15 CD 19 C0         [ 4]  135 	call EEPRUN
      001A18 CC 1B 3C         [ 2]  136 	jp EESTO 
                                    137 	
                                    138 ;---------------------------------
                                    139 ; update APP_CP with CP 
                                    140 ; UPDAT-CP ( -- )
                                    141 ;---------------------------------
      001A1B 1A 0B                  142 	.word LINK 
                           001A1D   143 	LINK=.
      001A1D 08                     144 	.byte 8 
      001A1E 55 50 44 41 54 2D 43   145 	.ascii "UPDAT-CP"
             50
      001A26                        146 UPDATCP:
      001A26 CD 05 BE         [ 4]  147 	call CPP 
      001A29 CD 03 DD         [ 4]  148 	call AT 
      001A2C CD 19 D3         [ 4]  149 	call EEPCP 
      001A2F CC 1B 3C         [ 2]  150 	jp EESTO 
                                    151 
                                    152 ;----------------------------------
                                    153 ; update APP_VP with VP 
                                    154 ; UPDAT-VP ( -- )
                                    155 ;----------------------------------
      001A32 1A 1D                  156 	.word LINK
                           001A34   157 	LINK=.
      001A34 08                     158 	.byte 8 
      001A35 55 50 44 41 54 2D 56   159 	.ascii "UPDAT-VP" 
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001A3D                        160 UPDATVP:
      001A3D CD 05 B0         [ 4]  161 	call VPP 
      001A40 CD 03 DD         [ 4]  162 	call AT
      001A43 CD 19 E6         [ 4]  163 	call EEPVP 
      001A46 CC 1B 3C         [ 2]  164 	jp EESTO
                                    165 	
                                    166 
                                    167 ;----------------------------------
                                    168 ; unlock EEPROM/OPT for writing/erasing
                                    169 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    170 ;  UNLKEE   ( -- )
                                    171 ;----------------------------------
      001A49 1A 34                  172     .word LINK 
                           001A4B   173 LINK=.
      001A4B 06                     174     .byte 6 
      001A4C 55 4E 4C 4B 45 45      175     .ascii "UNLKEE"
      001A52                        176 unlock_eeprom:
      001A52 35 00 50 5B      [ 1]  177 	mov FLASH_CR2,#0 
      001A56 35 FF 50 5C      [ 1]  178 	mov FLASH_NCR2,#0xFF 
      001A5A 35 AE 50 64      [ 1]  179 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001A5E 35 56 50 64      [ 1]  180     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001A62 72 07 50 5F FB   [ 2]  181 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001A67 81               [ 4]  182 	ret
                                    183 
                                    184 ;----------------------------------
                                    185 ; unlock FLASH for writing/erasing
                                    186 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    187 ; UNLKFL  ( -- )
                                    188 ;----------------------------------
      001A68 1A 4B                  189     .word LINK 
                           001A6A   190 LINK=. 
      001A6A 06                     191     .byte 6 
      001A6B 55 4E 4C 4B 46 4C      192     .ascii "UNLKFL"    
      001A71                        193 unlock_flash:
      001A71 35 00 50 5B      [ 1]  194 	mov FLASH_CR2,#0 
      001A75 35 FF 50 5C      [ 1]  195 	mov FLASH_NCR2,#0xFF 
      001A79 35 56 50 62      [ 1]  196 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001A7D 35 AE 50 62      [ 1]  197 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001A81 72 03 50 5F FB   [ 2]  198 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001A86 81               [ 4]  199 	ret
                                    200 
                                    201 ;-----------------------------
                                    202 ; unlock FLASH or EEPROM 
                                    203 ; according to PTR16 address 
                                    204 ;  UNLOCK ( -- )
                                    205 ;-----------------------------
      001A87 1A 6A                  206 	.word LINK 
                           001A89   207 	LINK=.
      001A89 06                     208 	.byte 6
      001A8A 55 4E 4C 4F 43 4B      209 	.ascii "UNLOCK"
      001A90                        210 unlock:
                                    211 ; put addr[15:0] in Y, for bounds check.
      001A90 90 BE 2C         [ 2]  212 	ldw y,PTR16   ; Y=addr15:0
      001A93 90 A3 80 00      [ 2]  213     cpw y,#FLASH_BASE
      001A97 24 10            [ 1]  214     jruge 4$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A99 90 A3 40 00      [ 2]  215 	cpw y,#EEPROM_BASE  
      001A9D 25 0D            [ 1]  216     jrult 9$
      001A9F 90 A3 48 7F      [ 2]  217 	cpw y,#OPTION_END 
      001AA3 22 07            [ 1]  218 	jrugt 9$
      001AA5 CD 1A 52         [ 4]  219 	call unlock_eeprom
      001AA8 81               [ 4]  220 	ret 
      001AA9 CD 1A 71         [ 4]  221 4$: call unlock_flash
      001AAC 81               [ 4]  222 9$: ret 
                                    223 
                                    224 ;-------------------------
                                    225 ; lock write access to 
                                    226 ; FLASH and EEPROM 
                                    227 ; LOCK ( -- )
                                    228 ;-------------------------
      001AAD 1A 89                  229 	.word LINK 
                           001AAF   230 	LINK=.
      001AAF 04                     231 	.byte 4 
      001AB0 4C 4F 43 4B            232 	.ascii "LOCK" 
      001AB4                        233 lock: 
      001AB4 72 13 50 5F      [ 1]  234 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001AB8 72 17 50 5F      [ 1]  235 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001ABC 81               [ 4]  236 	ret 
                                    237 
                                    238 ;-------------------------
                                    239 ; increment PTR16 
                                    240 ; INC-PTR ( -- )
                                    241 ;-------------------------
      001ABD 1A AF                  242 	.word LINK 
                           001ABF   243 	LINK=. 
      001ABF 08                     244 	.byte 8 
      001AC0 49 4E 43 2D 50 54 52   245 	.ascii "INC-PTR" 
      001AC7                        246 inc_ptr:
      001AC7 90 BE 2C         [ 2]  247 	ldw y,PTR16 
      001ACA 90 5C            [ 2]  248 	incw y 
      001ACC 90 BF 2C         [ 2]  249 	ldw PTR16,y
      001ACF 81               [ 4]  250 	 ret 
                                    251 
                                    252 ;----------------------------
                                    253 ; write a byte at address pointed 
                                    254 ; by PTR16 and increment PTR16.
                                    255 ; Expect pointer already initialized 
                                    256 ; and memory unlocked 
                                    257 ; WR-BYTE ( c -- )
                                    258 ;----------------------------
                                    259 
      001AD0 1A BF                  260 	.word LINK 
                           001AD2   261 	LINK=. 
      001AD2 07                     262 	.byte 7 
      001AD3 57 52 2D 42 59 54 45   263 	.ascii "WR-BYTE" 
                                    264 
      001ADA                        265 WR_BYTE:
      001ADA 90 93            [ 1]  266 	ldw y,x 
      001ADC 90 FE            [ 2]  267 	ldw y,(y)
      001ADE 1C 00 02         [ 2]  268 	addw x,#CELLL 
      001AE1 90 9F            [ 1]  269 	ld a,yl
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001AE3 92 C7 2C         [ 4]  270 	ld [PTR16],a
      001AE6 72 05 50 5F FB   [ 2]  271 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001AEB 20 DA            [ 2]  272 	jra inc_ptr 
                                    273 
                                    274 
                                    275 
                                    276 ;---------------------------------------
                                    277 ; write a byte to FLASH or EEPROM/OPTION  
                                    278 ; EEC!  (c a -- )
                                    279 ;---------------------------------------
      001AED 1A D2                  280     .word LINK 
                           001AEF   281 	LINK=.
      001AEF 04                     282     .byte 4 
      001AF0 45 45 43 21            283     .ascii "EEC!"
                                    284 	; local variables 
                           000001   285 	BTW = 1   ; byte to write offset on stack
                           000002   286     OPT = 2 
                           000002   287 	VSIZE = 2
      001AF4                        288 EECSTO:
      001AF4 52 02            [ 2]  289 	sub sp,#VSIZE
      001AF6 CD 19 84         [ 4]  290     call PSTO
      001AF9 E6 01            [ 1]  291 	ld a,(1,x)
      001AFB 43               [ 1]  292 	cpl a 
      001AFC 6B 01            [ 1]  293 	ld (BTW,sp),a ; byte to write 
      001AFE 0F 02            [ 1]  294 	clr (OPT,sp)  ; OPTION flag
      001B00 CD 1A 90         [ 4]  295 	call unlock 
                                    296 	; check if option
      001B03 90 BE 2C         [ 2]  297 	ldw y,PTR16 
      001B06 90 A3 48 00      [ 2]  298 	cpw y,#OPTION_BASE
      001B0A 2B 10            [ 1]  299 	jrmi 2$
      001B0C 90 A3 48 80      [ 2]  300 	cpw y,#OPTION_END+1
      001B10 2A 0A            [ 1]  301 	jrpl 2$
      001B12 03 02            [ 1]  302 	cpl (OPT,sp)
                                    303 	; OPTION WRITE require this unlock 
      001B14 72 1E 50 5B      [ 1]  304     bset FLASH_CR2,#FLASH_CR2_OPT
      001B18 72 1F 50 5C      [ 1]  305     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001B1C                        306 2$: 
      001B1C CD 1A DA         [ 4]  307 	call WR_BYTE 	
      001B1F 0D 02            [ 1]  308 	tnz (OPT,sp)
      001B21 27 0D            [ 1]  309 	jreq 3$ 
      001B23 7B 01            [ 1]  310     ld a,(BTW,sp)
      001B25 90 5F            [ 1]  311     clrw y
      001B27 90 97            [ 1]  312 	ld yl,a 
      001B29 1D 00 02         [ 2]  313 	subw x,#CELLL 
      001B2C FF               [ 2]  314 	ldw (x),y 
      001B2D CD 1A DA         [ 4]  315 	call WR_BYTE
      001B30                        316 3$: 
      001B30 CD 1A B4         [ 4]  317 	call lock 
      001B33 5B 02            [ 2]  318 	addw sp,#VSIZE 
      001B35 81               [ 4]  319     ret
                                    320 
                                    321 ;------------------------------
                                    322 ; write integer in FLASH|EEPROM
                                    323 ; EE! ( n a -- )
                                    324 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B36 1A EF                  325 	.word LINK 
                           001B38   326 	LINK=.
      001B38 03                     327 	.byte 3 
      001B39 45 45 21               328 	.ascii "EE!"
      001B3C                        329 EESTO:
      001B3C CD 19 84         [ 4]  330 	call PSTO 
      001B3F CD 1A 90         [ 4]  331 	call unlock 
      001B42 90 93            [ 1]  332 	ldw y,x 
      001B44 90 FE            [ 2]  333 	ldw y,(y)
      001B46 90 89            [ 2]  334 	pushw y 
      001B48 90 5E            [ 1]  335 	swapw y 
      001B4A FF               [ 2]  336 	ldw (x),y 
      001B4B CD 1A DA         [ 4]  337 	call WR_BYTE 
      001B4E 90 85            [ 2]  338 	popw y 
      001B50 1D 00 02         [ 2]  339 	subw x,#CELLL
      001B53 FF               [ 2]  340 	ldw (x),y 
      001B54 CD 1A DA         [ 4]  341 	call WR_BYTE
      001B57 CC 1A B4         [ 2]  342 	jp lock 
                                    343 
                                    344 
                                    345 ;----------------------------
                                    346 ; Erase flash memory row 
                                    347 ; stm8s105 as 128 bytes rows
                                    348 ; ROW-ERASE ( a -- )
                                    349 ;----------------------------
      001B5A 1B 38                  350 	.word LINK 
                           001B5C   351 	LINK=. 
      001B5C 09                     352 	.byte 9 
      001B5D 52 4F 57 2D 45 52 41   353 	.ascii "ROW-ERASE" 
             53 45
      001B66                        354 row_erase:
      001B66 CD 19 84         [ 4]  355 	call PSTO
                                    356 ;code must be execute from RAM 
                                    357 ;copy routine to PAD 
      001B69 1D 00 02         [ 2]  358 	subw x,#CELLL 
      001B6C 90 AE 1B B3      [ 2]  359 	ldw y,#row_erase_proc
      001B70 FF               [ 2]  360 	ldw (x),y 
      001B71 CD 0A 94         [ 4]  361 	call PAD 
      001B74 90 AE 1B D6      [ 2]  362 	ldw y,#row_erase_proc_end 
      001B78 72 A2 1B B3      [ 2]  363 	subw y,#row_erase_proc
      001B7C 1D 00 02         [ 2]  364 	subw x,#CELLL 
      001B7F FF               [ 2]  365 	ldw (x),y 
      001B80 CD 0A D0         [ 4]  366 	call CMOVE 
      001B83                        367 block_erase:
      001B83 90 BE 2C         [ 2]  368 	ldw y,PTR16
      001B86 90 A3 1E 80      [ 2]  369 	cpw y,#app_space 
      001B8A 2A 13            [ 1]  370 	jrpl erase_flash 
                                    371 ; erase EEPROM block
      001B8C 90 A3 40 00      [ 2]  372 	cpw y,#EEPROM_BASE 
      001B90 24 01            [ 1]  373 	jruge 1$
      001B92 81               [ 4]  374 	ret ; bad address 
      001B93 90 A3 43 FF      [ 2]  375 1$: cpw y,#EEPROM_END 
      001B97 23 01            [ 2]  376 	jrule 2$ 
      001B99 81               [ 4]  377 	ret ; bad address 
      001B9A                        378 2$:	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001B9A CD 1A 52         [ 4]  379 	call unlock_eeprom 
      001B9D 20 03            [ 2]  380 	jra proceed_erase
                                    381 ; erase flash block:
      001B9F                        382 erase_flash:
      001B9F CD 1A 71         [ 4]  383 	call unlock_flash 
      001BA2                        384 proceed_erase:
      001BA2 CD 0A 94         [ 4]  385 	call PAD 
      001BA5 90 93            [ 1]  386 	ldw y,x
      001BA7 90 FE            [ 2]  387 	ldw y,(y)
      001BA9 1C 00 02         [ 2]  388 	addw x,#CELLL  
      001BAC 90 FD            [ 4]  389 	call (y) 
      001BAE 72 17 50 5F      [ 1]  390 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BB2 81               [ 4]  391 	ret 
                                    392 
                                    393 ; this routine is to be copied to PAD 
      001BB3                        394 row_erase_proc:
      001BB3 35 20 50 5B      [ 1]  395 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001BB7 35 DF 50 5C      [ 1]  396 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001BBB 4F               [ 1]  397 	clr a 
      001BBC 90 5F            [ 1]  398 	clrw y 
      001BBE 91 D7 2C         [ 4]  399 	ld ([PTR16],y),a
      001BC1 90 5C            [ 2]  400     incw y
      001BC3 91 D7 2C         [ 4]  401 	ld ([PTR16],y),a
      001BC6 90 5C            [ 2]  402     incw y
      001BC8 91 D7 2C         [ 4]  403 	ld ([PTR16],y),a
      001BCB 90 5C            [ 2]  404     incw y
      001BCD 91 D7 2C         [ 4]  405 	ld ([PTR16],y),a
      001BD0 72 05 50 5F FB   [ 2]  406 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001BD5 81               [ 4]  407 	ret
      001BD6                        408 row_erase_proc_end:
                                    409 
                                    410 
                                    411 ;-----------------------------------
                                    412 ; block programming must be 
                                    413 ; executed from RAM 
                                    414 ; initial contidions: 
                                    415 ; 		memory unlocked
                                    416 ;       PTR16 initialized 
                                    417 ; input: 
                                    418 ;    x   buffer address 
                                    419 ;-----------------------------------
                           000001   420 	BCNT=1 
      001BD6                        421 copy_buffer:
      001BD6 4B 80            [ 1]  422 	push #BLOCK_SIZE  
                                    423 ;enable block programming 
      001BD8 72 10 50 5B      [ 1]  424 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001BDC 72 11 50 5C      [ 1]  425 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001BE0 90 5F            [ 1]  426 	clrw y
      001BE2 F6               [ 1]  427 1$:	ld a,(x)
      001BE3 91 D7 2C         [ 4]  428 	ld ([PTR16],y),a
      001BE6 5C               [ 2]  429 	incw x 
      001BE7 90 5C            [ 2]  430 	incw y 
      001BE9 0A 01            [ 1]  431 	dec (BCNT,sp)
      001BEB 26 F5            [ 1]  432 	jrne 1$
                                    433 ; wait EOP bit 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001BED 72 05 50 5F FB   [ 2]  434 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001BF2 84               [ 1]  435 	pop a ; remove BCNT from stack 
      001BF3 81               [ 4]  436 	ret 
      001BF4                        437 copy_buffer_end:
                                    438 
                                    439 ;-------------------------
                                    440 ; move program_row to RAM 
                                    441 ; in TIB 
                                    442 ;------------------------
      001BF4                        443 copy_prog_to_ram:
      001BF4 1D 00 06         [ 2]  444 	subw x,#6
      001BF7 90 AE 1B D6      [ 2]  445 	ldw y,#copy_buffer 
      001BFB EF 04            [ 2]  446 	ldw (4,x),y 
      001BFD 90 AE 07 7F      [ 2]  447 	ldw y,#TIBBASE
      001C01 EF 02            [ 2]  448 	ldw (2,x),y 
      001C03 90 AE 1B F4      [ 2]  449 	ldw y,#copy_buffer_end 
      001C07 72 A2 1B D6      [ 2]  450 	subw y,#copy_buffer  
      001C0B FF               [ 2]  451 	ldw (x),y 
      001C0C CD 0A D0         [ 4]  452 	call CMOVE 
      001C0F 81               [ 4]  453 	ret 
                                    454 
                                    455 
                                    456 ;-----------------------------
                                    457 ; write a row in FLASH/EEPROM 
                                    458 ; WR-ROW ( ab ar -- )
                                    459 ; ab -> address 128 byte buffer to write 
                                    460 ; ar ->  row address in FLASH|EEPROM 
                                    461 ;-----------------------------
      001C10 1B 5C                  462 	.word LINK 
                           001C12   463 	LINK=.
      001C12 06                     464 	.byte 6 
      001C13 57 52 2D 52 4F 57      465 	.ascii "WR-ROW"
      001C19                        466 write_row:
      001C19 CD 19 84         [ 4]  467 	call PSTO
                                    468 ; align to FLASH block 
      001C1C A6 80            [ 1]  469 	ld a,#0x80 
      001C1E B4 2E            [ 1]  470 	and a,PTR8 
      001C20 B7 2E            [ 1]  471 	ld PTR8,a  
      001C22 CD 1B F4         [ 4]  472 	call copy_prog_to_ram
      001C25 CD 1A 90         [ 4]  473 	call unlock
      001C28 90 93            [ 1]  474 	ldw y,x 
      001C2A 90 FE            [ 2]  475 	ldw y,(y)
      001C2C 1C 00 02         [ 2]  476 	addw x,#CELLL 
      001C2F 89               [ 2]  477 	pushw x 
      001C30 93               [ 1]  478 	ldw x,y ; buffer address in x 
      001C31 CD 07 7F         [ 4]  479 	call TIBBASE
      001C34 CD 1A B4         [ 4]  480 	call lock
      001C37 85               [ 2]  481 	popw x 
      001C38 81               [ 4]  482 	ret 
                                    483 
                                    484 ;-------------------------------------
                                    485 ; change value of OPTION register 
                                    486 ; SET-OPT (c n -- ) 
                                    487 ; c new value.
                                    488 ; n OPT  number {1..7}
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                    489 ;--------------------------------------
      001C39 1C 12                  490 		.word LINK 
                           001C3B   491 		LINK=.
      001C3B 07                     492 		.byte 7 
      001C3C 53 45 54 2D 4F 50 54   493 		.ascii "SET-OPT" 
      001C43                        494 set_option: 
      001C43 90 93            [ 1]  495 		ldw y,x 
      001C45 90 FE            [ 2]  496 		ldw y,(y)
      001C47 27 06            [ 1]  497 		jreq 1$
      001C49 90 A3 00 07      [ 2]  498 		cpw y,#7 
      001C4D 23 04            [ 2]  499 		jrule 2$ 
                                    500 ; invalid OPTION number 		
      001C4F 1C 00 04         [ 2]  501 1$:		addw x,#2*CELLL
      001C52 81               [ 4]  502 		ret
      001C53 90 58            [ 2]  503 2$:		sllw y 
      001C55 72 A9 47 FF      [ 2]  504 		addw y,#OPTION_BASE-1
      001C59 FF               [ 2]  505 		ldw (x),y 
      001C5A 1D 00 02         [ 2]  506 		subw x,#CELLL 
      001C5D 90 5F            [ 1]  507 		clrw y 
      001C5F FF               [ 2]  508 		ldw (x),y 
      001C60 CD 1A F4         [ 4]  509 		call EECSTO
      001C63 81               [ 4]  510 		ret 
                                    511 
                                    512 
                                    513 
                                    514 ;--------------------------------------
                                    515 ; reset system to its original state 
                                    516 ; before any user modification
                                    517 ; PRISTINE ( -- )
                                    518 ;-------------------------------------
      001C64 1C 3B                  519 	.word LINK  
                           001C66   520 	LINK=.
      001C66 08                     521 	.byte 8 
      001C67 50 52 49 53 54 49 4E   522 	.ascii "PRISTINE"
             45
      001C6F                        523 pristine:
                                    524 ;;; erase EEPROM
      001C6F CD 19 98         [ 4]  525 	call EEPROM 
      001C72 CD 04 84         [ 4]  526 1$:	call DUPP 
      001C75 CD 1B 66         [ 4]  527 	call row_erase
      001C78 90 93            [ 1]  528 	ldw y,x 
      001C7A 90 EE 02         [ 2]  529 	ldw y,(2,y)
      001C7D 72 A9 00 80      [ 2]  530 	addw y,#BLOCK_SIZE
      001C81 EF 02            [ 2]  531 	ldw (2,x),y
      001C83 90 A3 48 00      [ 2]  532 	cpw y,#OPTION_BASE 
      001C87 25 E9            [ 1]  533 	jrult 1$
                                    534 ;;; reset OPTION to default values
      001C89 90 AE 00 01      [ 2]  535 	ldw y,#1 ; OPT1 
      001C8D FF               [ 2]  536 2$:	ldw (x),y   
      001C8E 90 5F            [ 1]  537 	clrw y 
      001C90 EF 02            [ 2]  538 	ldw (2,x),y  ; ( 0 1 -- ) 
      001C92 CD 06 1A         [ 4]  539 	call DDUP    ; ( 0 1 0 1 -- )  
      001C95 CD 1C 43         [ 4]  540 	call set_option
      001C98 90 93            [ 1]  541 	ldw y,x 
      001C9A 90 FE            [ 2]  542 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001C9C 90 5C            [ 2]  543 	incw y  ; next OPTION 
      001C9E 90 A3 00 08      [ 2]  544 	cpw y,#8 
      001CA2 25 E9            [ 1]  545 	jrult 2$
                                    546 ;;; erase first row of app_space 	
      001CA4 90 AE 1E 80      [ 2]  547 	ldw y,#app_space
      001CA8 FF               [ 2]  548 	ldw (x),y  
      001CA9 CD 1B 66         [ 4]  549 	call row_erase 
                                    550 ; reset interrupt vectors 
      001CAC 1D 00 02         [ 2]  551 	subw x,#CELLL 
      001CAF 90 5F            [ 1]  552 	clrw y  
      001CB1 FF               [ 2]  553 4$:	ldw (x),y  ; ( n -- ) int# 
      001CB2 CD 04 84         [ 4]  554 	call DUPP  
      001CB5 CD 1C D2         [ 4]  555 	call reset_vector
      001CB8 90 93            [ 1]  556 	ldw y,x 
      001CBA 90 FE            [ 2]  557 	ldw y,(y)
      001CBC 90 5C            [ 2]  558 	incw y   ; next vector 
      001CBE 90 A3 00 19      [ 2]  559 	cpw y,#25 
      001CC2 25 ED            [ 1]  560 	jrult 4$
      001CC4 CC 00 00         [ 2]  561 	jp NonHandledInterrupt ; reset MCU
                                    562 
                                    563 ;------------------------------
                                    564 ; reset an interrupt vector 
                                    565 ; to its initial value 
                                    566 ; i.e. NonHandledInterrupt
                                    567 ; RST-IVEC ( n -- )
                                    568 ;-----------------------------
      001CC7 1C 66                  569 	.word LINK 
                           001CC9   570 	LINK=. 
      001CC9 08                     571 	.byte 8 
      001CCA 52 53 54 2D 49 56 45   572 	.ascii "RST-IVEC"
             43
      001CD2                        573 reset_vector:
      001CD2 90 93            [ 1]  574 	ldw y,x
      001CD4 1C 00 02         [ 2]  575 	addw x,#CELLL 
      001CD7 90 FE            [ 2]  576 	ldw y,(y)
      001CD9 90 A3 00 17      [ 2]  577 	cpw y,#23 
      001CDD 27 34            [ 1]  578 	jreq 9$
      001CDF 90 A3 00 1D      [ 2]  579 	cpw y,#29 ; last vector
      001CE3 22 2E            [ 1]  580 	jrugt 9$  
      001CE5 90 58            [ 2]  581 	sllw y 
      001CE7 90 58            [ 2]  582 	sllw y 
      001CE9 72 A9 80 08      [ 2]  583 	addw y,#0x8008 ; irq0 address 
      001CED 90 BF 1E         [ 2]  584 	ldw YTEMP,y
      001CF0 1D 00 04         [ 2]  585 	subw x,#2*CELLL 
      001CF3 FF               [ 2]  586 	ldw (x),y 
      001CF4 90 5F            [ 1]  587 	clrw y 
      001CF6 A6 82            [ 1]  588 	ld a,#0x82 
      001CF8 90 95            [ 1]  589 	ld yh,a
      001CFA EF 02            [ 2]  590 	ldw (2,x),y
      001CFC CD 1B 3C         [ 4]  591 	call EESTO
      001CFF 1D 00 04         [ 2]  592 	subw x,#2*CELLL
      001D02 90 AE 00 00      [ 2]  593 	ldw y,#NonHandledInterrupt
      001D06 EF 02            [ 2]  594 	ldw (2,x),y 
      001D08 90 BE 1E         [ 2]  595 	ldw y,YTEMP  
      001D0B 72 A9 00 02      [ 2]  596 	addw y,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D0F FF               [ 2]  597 	ldw (x),y 
      001D10 CD 1B 3C         [ 4]  598 	call EESTO
      001D13 81               [ 4]  599 9$:	ret 
                                    600 
                                    601 
                                    602 ;------------------------------
                                    603 ; all interrupt vector with 
                                    604 ; an address >= a are resetted 
                                    605 ; to default
                                    606 ; CHKIVEC ( a -- )
                                    607 ;------------------------------
      001D14 1C C9                  608 	.word LINK 
                           001D16   609 	LINK=.
      001D16 07                     610 	.byte 7
      001D17 43 48 4B 49 56 45 43   611 	.ascii "CHKIVEC"
                                    612 ;local variables 
                           000001   613 	SSP=1
                           000003   614 	CADR=3
                           000005   615 	OFS=5
                           000006   616 	VSIZE=6  
      001D1E                        617 CHKIVEC:
      001D1E 52 06            [ 2]  618 	sub sp,#VSIZE ;alloc local variables 
      001D20 90 93            [ 1]  619 	ldw y,x 
      001D22 90 FE            [ 2]  620 	ldw y,(y)
      001D24 17 03            [ 2]  621 	ldw (CADR,sp),y ; ca 
      001D26 1F 01            [ 2]  622 	ldw (SSP,sp),x 
      001D28 AE 80 0A         [ 2]  623 	ldw x,#0x800a ; irq0 address 
      001D2B BF 2C            [ 2]  624 	ldw PTR16,X
      001D2D AE FF FC         [ 2]  625 	ldw x,#-4 
      001D30 1C 00 04         [ 2]  626 1$:	addw x,#4
      001D33 A3 00 78         [ 2]  627 	cpw x,#30*4 ; irq0-29 
      001D36 27 22            [ 1]  628 	jreq 9$
      001D38 90 93            [ 1]  629 	ldw y,x  
      001D3A 91 D6 2C         [ 4]  630 	ld a,([PTR16],y)
      001D3D 11 03            [ 1]  631 	cp a,(CADR,sp)
      001D3F 25 EF            [ 1]  632 	jrult 1$
      001D41 90 5C            [ 2]  633 	incw y 
      001D43 91 D6 2C         [ 4]  634 	ld a,([PTR16],y)
      001D46 11 04            [ 1]  635 	cp a,(CADR+1,sp) 
      001D48 25 E6            [ 1]  636 	jrult 1$ 
      001D4A 1F 05            [ 2]  637 	ldw (OFS,sp),x 
      001D4C 54               [ 2]  638 	srlw x
      001D4D 54               [ 2]  639 	srlw x 
      001D4E 90 93            [ 1]  640 	ldw y,x 
      001D50 1E 01            [ 2]  641 	ldw x,(SSP,sp)
      001D52 FF               [ 2]  642 	ldw (x),y
      001D53 CD 1C D2         [ 4]  643 	call reset_vector
      001D56 1E 05            [ 2]  644 	ldw x,(OFS,sp) 
      001D58 20 D6            [ 2]  645 	jra 1$
      001D5A 1E 01            [ 2]  646 9$:	ldw x,(SSP,sp) 
      001D5C 1C 00 02         [ 2]  647 	addw x,#CELLL 
      001D5F 5B 06            [ 2]  648 	addw sp,#VSIZE ; drop local variables  
      001D61 81               [ 4]  649 	ret 
                                    650 
                                    651 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    652 ; set interrupt vector 
                                    653 ; SET-IVEC ( a n -- )
                                    654 ;  a Handler address
                                    655 ;  n  vector # 0 .. 29 
                                    656 ;-----------------------------
      001D62 1D 16                  657 	.word LINK
                           001D64   658 	LINK=.
      001D64 08                     659 	.byte 8 
      001D65 53 45 54 2D 49 56 45   660 	.ascii "SET-IVEC" 
             43
      001D6D                        661 set_vector:
      001D6D 90 93            [ 1]  662     ldw y,x 
      001D6F 1C 00 02         [ 2]  663 	addw x,#CELLL 
      001D72 90 FE            [ 2]  664 	ldw y,(y) ; vector #
      001D74 90 A3 00 1D      [ 2]  665 	cpw y,#29 ; last vector
      001D78 23 04            [ 2]  666 	jrule 2$
      001D7A 1C 00 02         [ 2]  667 	addw x,#CELLL 
      001D7D 81               [ 4]  668 	ret
      001D7E 90 58            [ 2]  669 2$:	sllw y 
      001D80 90 58            [ 2]  670 	sllw y 
      001D82 72 A9 80 08      [ 2]  671 	addw y,#0X8008 ; IRQ0 vector address 
      001D86 90 BF 1E         [ 2]  672 	ldw YTEMP,y ; vector address 
      001D89 90 5F            [ 1]  673 	clrw y 
      001D8B A6 82            [ 1]  674 	ld a,#0x82 
      001D8D 90 95            [ 1]  675 	ld yh,a 
                                    676 ;  write 0x8200
      001D8F 1D 00 04         [ 2]  677 	subw x,#2*CELLL 
      001D92 EF 02            [ 2]  678 	ldw (2,x),y 
      001D94 90 BE 1E         [ 2]  679 	ldw y,YTEMP
      001D97 FF               [ 2]  680 	ldw (x),y ; vector address 
      001D98 CD 1B 3C         [ 4]  681 	call EESTO 
                                    682 ; write bits 15..0 int vector 
      001D9B 1D 00 02         [ 2]  683 	subw x,#CELLL 
      001D9E 90 BE 1E         [ 2]  684 	ldw y,YTEMP 
      001DA1 72 A9 00 02      [ 2]  685 	addw y,#2 
      001DA5 FF               [ 2]  686 	ldw (x),y 
      001DA6 CD 1B 3C         [ 4]  687 	call EESTO
      001DA9 81               [ 4]  688 9$: ret 
                                    689 
                                    690 
                                    691 ;------------------------
                                    692 ; Compile word to flash
                                    693 ; EE, (w -- )
                                    694 ;-----------------------
      001DAA 1D 64                  695 	.word LINK
                           001DAC   696 	LINK=.
      001DAC 03                     697 	.byte 3
      001DAD 45 45 2C               698 	.ascii "EE,"
      001DB0                        699 EE_COMMA:
      001DB0 1D 00 02         [ 2]  700 	subw x,#CELLL 
      001DB3 90 BE 18         [ 2]  701 	ldw y,UCP
      001DB6 90 89            [ 2]  702 	pushw y 
      001DB8 FF               [ 2]  703 	ldw (x),y 
      001DB9 CD 1B 3C         [ 4]  704 	call EESTO
      001DBC 90 85            [ 2]  705 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001DBE 72 A9 00 02      [ 2]  706 	addw y,#2
      001DC2 90 BF 18         [ 2]  707 	ldw UCP,y
      001DC5 81               [ 4]  708 	ret 
                                    709 
                                    710 
                                    711 ;-------------------------
                                    712 ; Compile byte to flash 
                                    713 ; EEC, ( c -- )	
                                    714 ;-------------------------
      001DC6 1D AC                  715 	.word LINK 
                           001DC8   716 	LINK=.
      001DC8 04                     717 	.byte 4 
      001DC9 45 45 43 2C            718 	.ascii "EEC,"
      001DCD                        719 EEC_COMMA:
      001DCD 1D 00 04         [ 2]  720 	subw x,#2*CELLL 
      001DD0 90 BE 18         [ 2]  721 	ldw y,UCP
      001DD3 90 89            [ 2]  722 	pushw y 
      001DD5 EF 02            [ 2]  723 	ldw (2,x),y 
      001DD7 90 5F            [ 1]  724 	clrw y 
      001DD9 FF               [ 2]  725 	ldw (x),y
      001DDA CD 1A F4         [ 4]  726 	call EECSTO
      001DDD 90 85            [ 2]  727 	popw y 
      001DDF 90 5C            [ 2]  728 	incw y 
      001DE1 90 BF 18         [ 2]  729 	ldw UCP,y
      001DE4 81               [ 4]  730 	ret 
                                    731 
                                    732 
                                    733 
                                    734 ;------------------------------------------
                                    735 ; adjust pointers after **FMOVE** operetion.
                                    736 ; UPDAT-PTR ( cp+ -- )
                                    737 ; cp+ is new CP position after FMOVE 
                                    738 ;-------------------------------------------
      001DE5 1D C8                  739 	.word LINK 
                           001DE7   740 	LINK=.
      001DE7 09                     741 	.byte 9
      001DE8 55 50 44 41 54 2D 50   742 	.ascii "UPDAT-PTR" 
             54 52
      001DF1                        743 UPDATPTR:
                                    744 ;update CONTEXT and LAST 
      001DF1 CD 19 D3         [ 4]  745 	call EEPCP 
      001DF4 CD 03 DD         [ 4]  746 	call AT
      001DF7 CD 03 5F         [ 4]  747 	call DOLIT 
      001DFA 00 02                  748 	.word 2 
      001DFC CD 06 2F         [ 4]  749 	call PLUS 
      001DFF CD 04 84         [ 4]  750 	call DUPP 
      001E02 CD 05 A2         [ 4]  751 	call CNTXT 
      001E05 CD 03 C6         [ 4]  752 	call STORE
      001E08 CD 05 CE         [ 4]  753 	call LAST
      001E0B CD 03 C6         [ 4]  754 	call STORE 
      001E0E CD 19 FD         [ 4]  755 	call UPDATLAST 
      001E11 81               [ 4]  756 	ret 
                                    757 
                                    758 ;--------------------------------------
                                    759 ; write new definition name to flash 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    760 ; NAME>FLASH ( a - a+ )
                                    761 ;--------------------------------------
      001E12 1D E7                  762 	.word LINK 
                           001E14   763 	LINK=.
      001E14 0A                     764 	.byte 10
      001E15 4E 41 4D 45 3E 46 4C   765 	.ascii "NAME>FLASH" 
             41 53 48
      001E1F                        766 NAME_TO_FLASH:
      001E1F CD 05 BE         [ 4]  767 	call CPP 
      001E22 CD 03 DD         [ 4]  768 	call AT 
      001E25 CD 19 84         [ 4]  769 	call PSTO 
      001E28 CD 05 A2         [ 4]  770 	call CNTXT 
      001E2B CD 03 DD         [ 4]  771 	call AT 
      001E2E CD 1B 3C         [ 4]  772 	call EESTO 
      001E31 CD 0A 6C         [ 4]  773 	call COUNT ; ( -- b u ) 
      001E34 CD 09 29         [ 4]  774 	call ONEP 
      001E37 CD 05 50         [ 4]  775 	call TEMP
      001E3A CD 03 C6         [ 4]  776 	call STORE 
      001E3D CD 09 36         [ 4]  777 	call ONEM 
      001E40 CD 04 84         [ 4]  778 1$: call DUPP 
      001E43 CD 03 FB         [ 4]  779 	call CAT 
      001E46 CD 1A DA         [ 4]  780 	call WR_BYTE 
      001E49 CD 05 50         [ 4]  781 	call TEMP
      001E4C CD 03 DD         [ 4]  782 	call AT 
      001E4F CD 09 36         [ 4]  783 	call ONEM  
      001E52 CD 05 DE         [ 4]  784 	call QDUP 
      001E55 CD 03 92         [ 4]  785 	call QBRAN 
      001E58 1E 68                  786 	.word 2$ 
      001E5A CD 05 50         [ 4]  787 	call TEMP 
      001E5D CD 03 C6         [ 4]  788 	call STORE 
      001E60 CD 09 29         [ 4]  789 	call ONEP 
      001E63 CD 03 A9         [ 4]  790 	call BRAN 
      001E66 1E 40                  791 	.word 1$
      001E68 90 BE 2C         [ 2]  792 2$: ldw y,PTR16 
      001E6B FF               [ 2]  793 	ldw (x),y 
      001E6C 81               [ 4]  794 	ret  
                                    795 
                                    796 
                                    797 
                                    798 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   4284 
                                   4285 ;===============================================================
                                   4286 
                           001E14  4287 LASTN =	LINK   ;last name defined
                                   4288 
                                   4289 ; application code begin here
      001E80                       4290 	.bndry 128 ; align on flash block  
      001E80                       4291 app_space: 
                                   4292 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0006CB R   |   6 ABOR1      00121E R
  6 ABOR2      001235 R   |   6 ABORQ      001216 R   |   6 ABORT      001207 R
  6 ABRTQ      0014DD R   |   6 ABSS       0006C2 R   |   6 ACCEP      00119D R
  6 ACCP1      0011A6 R   |   6 ACCP2      0011CC R   |   6 ACCP3      0011CF R
  6 ACCP4      0011D1 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        0014C8 R   |   6 AGAIN      00142D R   |   6 AHEAD      001481 R
  6 ALLOT      001346 R   |   6 ANDD       0004D0 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0003DD R   |   6 ATEXE      000AB9 R   |   6 AUTORUN    000123 R
    AWU_APR =  0050F1     |     AWU_CSR1=  0050F0     |     AWU_TBR =  0050F2 
    B115200 =  000006     |     B19200  =  000003     |     B230400 =  000007 
    B2400   =  000000     |     B38400  =  000004     |     B460800 =  000008 
    B4800   =  000001     |     B57600  =  000005     |     B921600 =  000009 
    B9600   =  000002     |   6 BACK1      001145 R   |   6 BASE       000541 R
    BASEE   =  00000A     |     BCNT    =  000001     |   6 BCOMP      001388 R
  6 BDIGS      000BA0 R   |     BEEP_BIT=  000004     |     BEEP_CSR=  0050F3 
    BEEP_MAS=  000010     |     BEEP_POR=  00500F     |   6 BEGIN      001412 R
    BIT0    =  000000     |     BIT1    =  000001     |     BIT2    =  000002 
    BIT3    =  000003     |     BIT4    =  000004     |     BIT5    =  000005 
    BIT6    =  000006     |     BIT7    =  000007     |   6 BKSLA      000FDD R
  6 BKSP       001115 R   |     BKSPP   =  000008     |   6 BLANK      000988 R
    BLOCK_SI=  000080     |   6 BRAN       0003A9 R   |     BTW     =  000001 
  6 BYE        0000B0 R   |     CADR    =  000003     |     CALLL   =  0000CD 
    CARRY   =  000022     |   6 CAT        0003FB R   |   6 CCOMMA     00136A R
    CELLL   =  000002     |   6 CELLM      00090D R   |   6 CELLP      0008FE R
  6 CELLS      00091C R   |     CFG_GCR =  007F60     |   6 CHAR1      000DCD R
  6 CHAR2      000DD0 R   |   6 CHKIVEC    001D1E R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000AD8 R   |   6 CMOV2      000AF0 R   |   6 CMOVE      000AD0 R
    CNTDWN  =  00002A     |   6 CNTXT      0005A2 R   |   6 COLD       001863 R
  6 COLD1      001863 R   |   6 COLON      00162C R   |   6 COMMA      001353 R
  6 COMPI      001398 R   |     COMPO   =  000040     |   6 CONSTANT   0016B9 R
  6 COUNT      000A6C R   |   6 CPP        0005BE R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000DFB R   |   6 CREAT      00166C R
    CRR     =  00000D     |   6 CSTOR      0003EA R   |   6 DAT        000A4C R
    DATSTK  =  00077F     |   6 DDROP      00060F R   |   6 DDUP       00061A R
  6 DECIM      000C50 R   |   6 DEPTH      0009D7 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000C95 R   |   6 DI         0000BE R
  6 DIG        000BC9 R   |   6 DIGIT      000B64 R   |   6 DIGS       000BDA R
  6 DIGS1      000BDA R   |   6 DIGS2      000BE7 R   |   6 DIGTQ      000C64 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000689 R
  6 DNEGA      00066C R   |   6 DOCONST    0016D8 R   |   6 DOLIT      00035F R
  6 DONXT      000373 R   |   6 DOSTR      000E11 R   |   6 DOT        000E96 R
  6 DOT1       000EAC R   |   6 DOTI1      0017FA R   |   6 DOTID      0017E4 R
  6 DOTO1      0012AA R   |   6 DOTOK      001290 R   |   6 DOTPR      000FBF R
  6 DOTQ       0014F7 R   |   6 DOTQP      000E3A R   |   6 DOTR       000E48 R
  6 DOTS       001786 R   |   6 DOTS1      001791 R   |   6 DOTS2      00179A R
  6 DOVAR      000531 R   |   6 DROP       00047A R   |   6 DSTOR      000A26 R
  6 DUMP       00173C R   |   6 DUMP1      001753 R   |   6 DUMP3      001775 R
  6 DUMPP      00170B R   |   6 DUPP       000484 R   |   6 EDIGS      000C05 R
  6 EECSTO     001AF4 R   |   6 EEC_COMM   001DCD R   |   6 EEPCP      0019D3 R
  6 EEPLAST    0019AC R   |   6 EEPROM     001998 R   |     EEPROM_B=  004000 
    EEPROM_E=  0043FF     |     EEPROM_S=  000400     |   6 EEPRUN     0019C0 R
  6 EEPVP      0019E6 R   |   6 EESTO      001B3C R   |   6 EE_COMMA   001DB0 R
  6 EI         0000B7 R   |   6 ELSEE      00145F R   |   6 EMIT       000349 R
  6 ENEPER     001912 R   |   6 EQ1        0006E6 R   |   6 EQUAL      0006D0 R
  6 ERASE      000B32 R   |     ERR     =  00001B     |   6 EVAL       0012D3 R
  6 EVAL1      0012D3 R   |   6 EVAL2      0012EF R   |   6 EXE1       000AC7 R
  6 EXECU      0003B9 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000B8C R   |     FHSE    =  F42400 
    FHSE_K  =  003E80     |     FHSE_M  =  000010     |   6 FILL       000AFF R
  6 FILL1      000B1C R   |   6 FILL2      000B25 R   |   6 FIND       001071 R
  6 FIND1      00108F R   |   6 FIND2      0010BD R   |   6 FIND3      0010C9 R
  6 FIND4      0010DD R   |   6 FIND5      0010EA R   |   6 FIND6      0010CE R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
  6 FOR        0013E8 R   |   6 FORGET     000154 R   |   6 FORGET1    000183 R
  6 FORGET2    000209 R   |   6 FORGET4    000212 R   |   6 FORGET6    0001CB R
  6 FREEVAR    00021F R   |   6 FREEVAR4   000255 R   |     GPIO_BAS=  005000 
    GPIO_SIZ=  000005     |   6 HERE       000A83 R   |   6 HEX        000C3B R
  6 HI         001836 R   |   6 HLD        00058F R   |   6 HOLD       000BB0 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00163A R   |   6 IFETCH     001403 R
  6 IFF        00143A R   |     IMEDD   =  000080     |   6 IMMED      001649 R
  6 INCH       00033D R   |   6 INN        00055F R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001272 R   |   6 INTER      001248 R   |     INT_ADC1=  000016 
    INT_AWU =  000001     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_RES1=  000008     |     INT_RES2=  000009     |     INT_RES3=  000011 
    INT_RES4=  000012     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      000649 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0015D3 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       00161D R   |   6 KEY        000D7B R   |   6 KTAP       001162 R
  6 KTAP1      001185 R   |   6 KTAP2      001188 R   |   6 LAST       0005CE R
  6 LASTN   =  001E14 R   |   6 LBRAC      00127F R   |     LD1_BIT =  000000 
    LD1_MASK=  000001     |     LD1_PORT=  00500F     |   6 LESS       00070D R
    LF      =  00000A     |   6 LINK    =  001E14 R   |   6 LITER      0013BA R
  6 LN2S       00196E R   |   6 LOG2S      001958 R   |   6 LSHIFT     000947 R
  6 LSHIFT1    000950 R   |   6 LSHIFT4    000958 R   |   6 LT1        000723 R
    MASKK   =  001F7F     |   6 MAX        00072D R   |   6 MAX1       000740 R
  6 MIN        00074A R   |   6 MIN1       00075D R   |     MISCOPT =  004805 
    MISCOPT_=  000004     |     MISCOPT_=  000002     |     MISCOPT_=  000003 
    MISCOPT_=  000000     |     MISCOPT_=  000001     |   6 MMOD1      000800 R
  6 MMOD2      000814 R   |   6 MMOD3      00082B R   |   6 MMSM1      0007A7 R
  6 MMSM2      0007BB R   |   6 MMSM3      0007BD R   |   6 MMSM4      0007C5 R
  6 MODD       000845 R   |   6 MONE       0009AE R   |     MS      =  000028 
  6 MSEC       0002CA R   |   6 MSMOD      0007E3 R   |   6 MSTA1      0008D6 R
  6 MSTAR      0008B3 R   |     NAFR    =  004804     |   6 NAMEQ      00110A R
  6 NAMET      00101B R   |   6 NAME_TO_   001E1F R   |     NCLKOPT =  004808 
  6 NEGAT      00065A R   |   6 NEX1       000380 R   |   6 NEXT       0013F7 R
    NHSECNT =  00480A     |     NMISCOPT=  004806     |     NMISCOPT=  FFFFFFFB 
    NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC     |     NMISCOPT=  FFFFFFFF 
    NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPTBL  =  00487F     |   6 NTIB       00056F R   |     NUBC    =  004802 
  6 NUFQ       000D91 R   |   6 NUFQ1      000DAA R   |   6 NUMBQ      000CA8 R
  6 NUMQ1      000CDC R   |   6 NUMQ2      000D0D R   |   6 NUMQ3      000D4F R
  6 NUMQ4      000D54 R   |   6 NUMQ5      000D63 R   |   6 NUMQ6      000D66 R
  6 NonHandl   000000 R   |     OFS     =  000005     |   6 ONE        0009A0 R
  6 ONEM       000936 R   |   6 ONEP       000929 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |   6 ORIG       000043 R
  6 ORR        0004E4 R   |   6 OUTPUT     00034E R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       0004AE R   |   6 OVERT      0015AC R   |     PA      =  000000 
  6 PACKS      000B43 R   |   6 PAD        000A94 R   |   6 PAREN      000FCE R
  6 PARS       000EC7 R   |   6 PARS1      000EF2 R   |   6 PARS2      000F1D R
  6 PARS3      000F20 R   |   6 PARS4      000F29 R   |   6 PARS5      000F4C R
  6 PARS6      000F61 R   |   6 PARS7      000F70 R   |   6 PARS8      000F7F R
  6 PARSE      000F90 R   |   6 PAUSE      0002DA R   |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_CR1  =  005008 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]

Symbol Table

    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      00171E R
  6 PDUM2      00172F R   |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
  6 PICK       0009EE R   |   6 PII        0018D1 R   |     PIN0    =  000000 
    PIN1    =  000001     |     PIN2    =  000002     |     PIN3    =  000003 
    PIN4    =  000004     |     PIN5    =  000005     |     PIN6    =  000006 
    PIN7    =  000007     |   6 PLUS       00062F R   |   6 PNAM1      001561 R
  6 PRESE      0012FE R   |     PROD1   =  00001C     |     PROD2   =  00001E 
    PROD3   =  000020     |   6 PROTECTE   0001FB R   |   6 PSTO       001984 R
  6 PSTOR      000A05 R   |     PTR16   =  00002C     |     PTR8    =  00002E 
  6 QBRAN      000392 R   |   6 QDUP       0005DE R   |   6 QDUP1      0005E8 R
  6 QKEY       00032B R   |   6 QSTAC      0012B6 R   |   6 QUERY      0011E2 R
  6 QUEST      000EB9 R   |   6 QUIT       00131B R   |   6 QUIT1      001323 R
  6 QUIT2      001326 R   |     RAMBASE =  000000     |     RAM_BASE=  000000 
    RAM_END =  0007FF     |     RAM_SIZE=  000800     |   6 RANDOM     000278 R
  6 RAT        000441 R   |   6 RBRAC      00160A R   |   6 REPEA      0014B1 R
  6 RFROM      00042E R   |     ROP     =  004800     |   6 ROT        0005EF R
    RP0     =  000026     |   6 RPAT       00040B R   |     RPP     =  0007FE 
  6 RPSTO      000418 R   |   6 RSHIFT     000963 R   |   6 RSHIFT1    00096C R
  6 RSHIFT4    000974 R   |     RST_SR  =  0050B3     |   6 RT12_2     001941 R
  6 SAME1      001039 R   |   6 SAME2      001062 R   |   6 SAMEQ      001031 R
  6 SCOM1      001596 R   |   6 SCOM2      001599 R   |   6 SCOMP      001578 R
  6 SEED       00025F R   |     SEEDX   =  000030     |     SEEDY   =  000032 
  6 SEMIS      0015BC R   |   6 SETISP     0000CA R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000BEF R   |   6 SIGN1      000BFF R
  6 SLASH      00084F R   |   6 SLMOD      000833 R   |   6 SNAME      001531 R
    SP0     =  000024     |   6 SPACE      000DB3 R   |   6 SPACS      000DC2 R
  6 SPAT       000464 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  00077F     |     SPSAVE  =  000001     |   6 SPSTO      000471 R
  6 SQRT10     00192A R   |   6 SQRT2      0018E8 R   |   6 SQRT3      0018FF R
  6 SSMOD      0008DF R   |     SSP     =  000001     |     STACK   =  0007FE 
  6 STAR       0008A8 R   |   6 STASL      0008F0 R   |   6 STOD       000691 R
  6 STORE      0003C6 R   |   6 STR        000C1D R   |   6 STRCQ      0013C8 R
  6 STRQ       0014EA R   |   6 STRQP      000E30 R   |   6 SUBB       0006A8 R
  6 SWAPP      000494 R   |     SWIM_CSR=  007F80     |   6 TAP        00114C R
  6 TBOOT      001857 R   |   6 TCHAR      0009BF R   |   6 TEMP       000550 R
  6 TEVAL      000580 R   |   6 THENN      00144F R   |   6 TIB        000AA5 R
    TIBB    =  00077F     |     TIBBASE =  00077F     |     TIC     =  000027 
  6 TICK       001332 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00030A R
  6 TIMER      0002F4 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0017B4 R   |   6 TNAM3      0017D2 R   |   6 TNAM4      0017D8 R
  6 TNAME      0017B1 R   |   6 TOKEN      00100D R   |   6 TOR        00044D R
    TRUEE   =  00FFFF     |   6 TWOSL      00097B R   |   6 TYPE1      000DE2 R
  6 TYPE2      000DEE R   |   6 TYPES      000DDD R   |   6 Timer4Ha   000005 R
    UART2_BR=  005242     |     UART2_BR=  005243     |     UART2_CR=  005244 
    UART2_CR=  005245     |     UART2_CR=  005246     |     UART2_CR=  005247 
    UART2_CR=  005248     |     UART2_CR=  004249     |     UART2_DR=  005241 
    UART2_GT=  00524A     |     UART2_PO=  00500F     |     UART2_PS=  00524B 
    UART2_RX=  000006     |     UART2_SR=  005240     |     UART2_TX=  000005 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000E83 R   |   6 UDOTR      000E63 R
  6 UEND       000041 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      000705 R
  6 ULESS      0006EF R   |   6 UMMOD      000785 R   |   6 UMSTA      00085E R
  6 UNIQ1      001528 R   |   6 UNIQU      001509 R   |   6 UNTIL      00141D R
  6 UPDATCP    001A26 R   |   6 UPDATLAS   0019FD R   |   6 UPDATPTR   001DF1 R
  6 UPDATRUN   001A15 R   |   6 UPDATVP    001A3D R   |   6 UPL1       000525 R
  6 UPLUS      00050E R   |     UPP     =  000006     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      0016EE R   |   6 UTYP2      0016FD R
  6 UTYPE      0016E9 R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      001686 R   |     VAR_BASE=  000080     |     VAR_TOP =  0007BE 
    VER     =  000003     |   6 VPP        0005B0 R   |     VSIZE   =  000006 
    WANT_DEB=  000000     |     WANT_MAT=  000001     |     WANT_SEE=  000000 
  6 WHILE      001497 R   |   6 WITHI      00076A R   |   6 WORDD      000FF9 R
  6 WORDS      00180E R   |   6 WORS1      001814 R   |   6 WORS2      001830 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

  6 WR_BYTE    001ADA R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    X4_FLASH=  00BFFF     |     X4_FLASH=  004000     |     X6_FLASH=  00FFFF 
    X6_FLASH=  008000     |   6 XORR       0004F9 R   |     XTEMP   =  00001C 
    YTEMP   =  00001E     |   6 ZERO       000995 R   |   6 ZL1        0004C6 R
  6 ZLESS      0004BD R   |   6 app_spac   001E80 R   |   6 block_er   001B83 R
  6 clear_ra   000019 R   |   6 clock_in   00005E R   |   6 copy_buf   001BD6 R
  6 copy_buf   001BF4 R   |   6 copy_pro   001BF4 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001B9F R   |   6 inc_ptr    001AC7 R   |   6 lock       001AB4 R
  6 main       000016 R   |   6 pristine   001C6F R   |   6 proceed_   001BA2 R
  6 reboot     000321 R   |   6 reset_ve   001CD2 R   |   6 row_eras   001B66 R
  6 row_eras   001BB3 R   |   6 row_eras   001BD6 R   |   6 set_opti   001C43 R
  6 set_vect   001D6D R   |   6 uart2_in   000070 R   |   6 unlock     001A90 R
  6 unlock_e   001A52 R   |   6 unlock_f   001A71 R   |   6 write_ro   001C19 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1E80   flags    0

