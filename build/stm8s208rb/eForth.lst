ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                            
                                            ; reserve space on rstack
                                            ; for local variabls
                                            .macro _VARS n 
                                            
                                            ; discard space reserved 
                                            ; for local vars on rstack 
                                            .macro _DROP_VARS n 
                                        
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                            ; drop n CELLS
                                            .macro _DROPN n 
                                        
                                           ; drop from rstack 
                                           .macro _RDROP 
                                        
                                           ; drop double from rstack
                                           .macro _DRDROP
                                        
                                           ; test point, print character 
                                           ; and stack contain
                                           .macro _TP c 
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; to enable _TP macro 
                                        ; set to 1 
                                 
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        .endif 
                                 
                                 
                                        .endif 
                                 
                                 
                                        .endif 
                                        
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; file: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; file: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include 32 bits  
                                        ; floating point library
                                        ; file: float.asm   
                                 
                                 
                                 
                                        .endif 
                                        
                                        ; to include 24 bits 
                                        ; floating point library
                                        ; file: float24.asm 
                                 
                                 
                                        	WANT_FLOAT= 0 
                                        	WANT_DOUBLE=0 ; not compatible with float24 
                                        .endif
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        NUCLEO_8S20X=1 
                                        	.include "inc/stm8s208.inc"
                                        	.include "inc/nucleo_8s208.inc"
                                        .endif
                                        
                                 
                                 
                                        	.include "inc/stm8s207.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2022 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2022/11/14
                                        ; STM8S207K8 µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019,2022
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S207K8 have 64K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                 
                                 
                                 
                                 
                                        
                                        
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_CR1 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                          
                                        ; SPI_CR2 bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SPI_SR bit fields 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                         
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt software priority 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/nucleo_8s207.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s207k8
                                        
                                        ; crystal on board is 8Mhz
                                        ; st-link crystal 
                                 
                                        
                                        ; LD3 is user LED
                                        ; connected to PC5 via Q2
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                        
                                        ; user interface UART via STLINK (T_VCP)
                                        ; port used by  UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; clock enable bit 
                                 
                                        
                                        ; uart3 registers 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        .endif 
                                        
                                        
                                 
                                        NUCLEO_8S20X=0
                                        	.include "inc/stm8s105.inc"
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO_8S20X 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ; floatting point state bits in UFPSW 
                           000000   122 ZBIT=0 ; zero bit flag
                           000001   123 NBIT=1 ; negative flag 
                           000002   124 OVBIT=2 ; overflow flag 
                                    125 
                                    126 
                                    127 ;; Memory allocation
                           000006   128 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   129 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   130 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   131 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   132 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   133 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   134 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    135 
                                    136 ; user variables constants 
                           000006   137 UBASE = UPP       ; numeric base 
                           000008   138 UFPSW = UBASE+2  ; floating point state word 
                           00000A   139 UTMP = UFPSW+2    ; temporary storage
                           00000C   140 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   141 UCTIB = UINN+2    ; tib count 
                           000010   142 UTIB = UCTIB+2    ; tib address 
                           000012   143 UINTER = UTIB+2   ; interpreter vector 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000014   144 UHLD = UINTER+2   ; hold 
                           000016   145 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   146 UVP = UCNTXT+2    ; variable pointer 
                           00001A   147 UCP = UVP+2      ; code pointer
                           00001C   148 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   149 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           000020   150 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   151 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    152 
                                    153 ;******  System Variables  ******
                           000024   154 XTEMP	=	URLAST +2;address called by CREATE
                           000026   155 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   156 PROD1 = XTEMP	;space for UM*
                           000026   157 PROD2 = PROD1+2
                           000028   158 PROD3 = PROD2+2
                           00002A   159 CARRY = PROD3+2
                           00002C   160 SP0	= CARRY+2	;initial data stack pointer
                           00002E   161 RP0	= SP0+2		;initial return stack pointer
                           000030   162 MS    =   RP0+2         ; millisecond counter 
                           000032   163 CNTDWN =  MS+2          ; count down timer 
                           000034   164 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   165 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   166 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   167 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   168 SEEDY = SEEDX+2         ; PRNG seed Y 
                           00003C   169 RX_CHAR = SEEDY+2       ; last char received from UART 
                           00003D   170 CHAR_RDY = RX_CHAR+1    ; boolean flag TRUE if char received 
                                    171 
                                    172 ; EEPROM persistant data  
                           004000   173 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   174 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   175 APP_CP = APP_RUN+2     ; free application space pointer 
                           004006   176 APP_VP = APP_CP+2      ; free data space pointer 
                                    177 
                                    178 
                                    179 ;***********************************************
                                    180 ;; Version control
                                    181 
                           000004   182 VER     =     4         ;major release version
                           000001   183 EXT     =     1         ;minor extension
                                    184 
                                    185 ;; Constants
                                    186 
                           00FFFF   187 TRUEE   =     0xFFFF      ;true flag
                                    188 
                           000040   189 COMPO   =     0x40     ;lexicon compile only bit
                           000080   190 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   191 MASKK   =     0x1F7F  ;lexicon bit mask
                                    192 
                           000002   193 CELLL   =     2       ;size of a cell
                           000004   194 DBL_SIZE =    2*CELLL ; size of double integer 
                           00000A   195 BASEE   =     10      ;default radix
                           000008   196 BKSPP   =     8       ;back space
                           00000A   197 LF      =     10      ;line feed
                           00000D   198 CRR     =     13      ;carriage return
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                           000011   199 XON     =     17
                           000013   200 XOFF    =     19
                           000018   201 CTRL_X  =     24      ; reboot hotkey 
                           00001B   202 ERR     =     27      ;error escape
                           000027   203 TIC     =     39      ;tick
                           0000CD   204 CALLL   =     0xCD     ;CALL opcodes
                           000080   205 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   206 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   207 JPIMM   =     0xCC    ; JP addr opcode 
                                    208 
                                    209         .macro _ledon
                                    210             bset LED_PORT,#LED_BIT
                                    211         .endm
                                    212 
                                    213         .macro _ledoff
                                    214             bres LED_PORT,#LED_BIT
                                    215         .endm
                                    216 
                                    217 ;**********************************************************
                                    218         .area DATA (ABS)
      000000                        219         .org RAMBASE 
                                    220 ;**********************************************************
                                    221 
                                    222 ;**********************************************************
                                    223         .area SSEG (ABS) ; STACK
      001700                        224         .org 0x1700
      001700                        225         .ds 256 
                                    226 ; space for DATSTK,TIB and STACK         
                                    227 ;**********************************************************
                                    228 
                                    229 ;**********************************************************
                                    230         .area HOME ; vectors table
                                    231 ;**********************************************************
      000000 82 00 00 2E            232 	int main	        ; reset
      000004 82 00 00 00            233 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            234 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            235 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            236 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            237 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            238 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            239 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            240 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            241 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            242 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            243 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            244 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            245 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            246 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            247 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            248 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            249 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            250 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            251 	int NonHandledInterrupt	; irq17
      000050 82 00 00 12            252 	int UartRxHandler	; irq18
      000054 82 00 00 00            253 	int NonHandledInterrupt	; irq19
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000058 82 00 00 00            254 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 12            255 	int UartRxHandler	; irq21
      000060 82 00 00 00            256 	int NonHandledInterrupt	; irq22
      000064 82 00 00 01            257 	int Timer4Handler	; irq23
      000068 82 00 00 00            258 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            259 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            260 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            261 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            262 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            263 	int NonHandledInterrupt	; irq29
                                    264 
                                    265 ;**********************************************************
                                    266         .area CODE
                                    267 ;**********************************************************
                                    268 
                                    269 ; non handled interrupt reset MCU
      000000                        270 NonHandledInterrupt:
      000000 80               [11]  271         iret 
                                    272 ;        ld a, #0x80
                                    273 ;        ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    274 
                                    275 ; used for milliseconds counter 
                                    276 ; MS is 16 bits counter 
      000001                        277 Timer4Handler:
      000001 72 5F 53 42      [ 1]  278 	clr TIM4_SR 
      000005 BE 30            [ 2]  279         ldw x,MS 
      000007 5C               [ 1]  280         incw x 
      000008 BF 30            [ 2]  281         ldw MS,x
      00000A BE 32            [ 2]  282         ldw x,CNTDWN 
      00000C 27 03            [ 1]  283         jreq 1$
      00000E 5A               [ 2]  284         decw x 
      00000F BF 32            [ 2]  285         ldw CNTDWN,x 
      000011                        286 1$:         
      000011 80               [11]  287         iret 
                                    288 
      000012                        289 UartRxHandler:
      000012 72 0B 52 40 0F   [ 2]  290         btjf UART_SR,#UART_SR_RXNE,1$
      000017 C6 52 41         [ 1]  291         LD A,UART_DR 
      00001A 27 0A            [ 1]  292         JREQ 1$ 
      00001C A1 18            [ 1]  293         CP A,#CTRL_X 
      00001E 27 07            [ 1]  294         JREQ reset_mcu 
                                    295 ; accept this character 
      000020 B7 3C            [ 1]  296         LD RX_CHAR,A 
      000022 35 FF 00 3D      [ 1]  297         MOV CHAR_RDY,#255 
      000026 80               [11]  298 1$:     IRET         
      000027                        299 reset_mcu: 
      000027 A6 80            [ 1]  300         LD A, #0x80
      000029 C7 50 D1         [ 1]  301         LD WWDG_CR,A ; WWDG_CR used to reset mcu
      00002C 20 FE            [ 2]  302         JRA . 
                                    303 
                                    304 
                                    305 ;; Main entry points and COLD start data
      00002E                        306 main:
                                    307 ; clear all RAM
      00002E AE 00 00         [ 2]  308 	ldw X,#RAMBASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000031                        309 clear_ram0:
      000031 7F               [ 1]  310 	clr (X)
      000032 5C               [ 1]  311 	incw X
      000033 A3 17 FF         [ 2]  312 	cpw X,#RAM_END
      000036 23 F9            [ 2]  313 	jrule clear_ram0
      000038 AE 17 FF         [ 2]  314         ldw x,#RPP
      00003B 94               [ 1]  315         ldw sp,x
                                    316 ; set SEEDX and SEEDY to 1 
      00003C 3C 39            [ 1]  317         inc SEEDX+1 
      00003E 3C 3B            [ 1]  318         inc SEEDY+1          
      000040 CC 00 61         [ 2]  319 	jp ORIG
                                    320 
                                    321 ; COLD initialize these variables.
      000043                        322 UZERO:
      000043 00 0A                  323         .word      BASEE   ;BASE
      000045 00 00                  324         .word      0       ; floating point state 
      000047 00 00                  325         .word      0       ;tmp
      000049 00 00                  326         .word      0       ;>IN
      00004B 00 00                  327         .word      0       ;#TIB
      00004D 17 00                  328         .word      TIBB    ;TIB
      00004F 14 C4                  329         .word      INTER   ;'EVAL
      000051 00 00                  330         .word      0       ;HLD
      000053 34 F6                  331         .word      LASTN  ;CNTXT pointer
      000055 00 80                  332         .word      VAR_BASE   ;variables free space pointer 
      000057 35 80                  333         .word      app_space ; FLASH free space pointer 
      000059 34 F6                  334         .word      LASTN   ;LAST
      00005B 00 00                  335         .word      0        ; OFFSET 
      00005D 00 00                  336         .word      0       ; TFLASH
                                    337 ;       .word      0       ; URLAST   
      00005F 00 00                  338 UEND:   .word      0
                                    339 
      000061                        340 ORIG:   
                                    341 ; initialize SP
      000061 AE 17 FF         [ 2]  342         LDW     X,#STACK  ;initialize return stack
      000064 94               [ 1]  343         LDW     SP,X
      000065 BF 2E            [ 2]  344         LDW     RP0,X
      000067 AE 16 80         [ 2]  345         LDW     X,#DATSTK ;initialize data stack
      00006A BF 2C            [ 2]  346         LDW     SP0,X
                           000001   347 .if NUCLEO_8S20X|DISCOVERY         
                                    348 ; initialize USER LED on board 
                                    349 ; added by Picatout 
      00006C 72 1A 50 0D      [ 1]  350         bset LED_CR1,#LED_BIT
      000070 72 1A 50 0E      [ 1]  351         bset LED_CR2,#LED_BIT
      000074 72 1A 50 0C      [ 1]  352         bset LED_DDR,#LED_BIT
                                    353 .endif 
      000078                        354         _ledoff
      000078 72 1B 50 0A      [ 1]    1             bres LED_PORT,#LED_BIT
                                    355 ; initialize clock to HSI
                                    356 ; no divisor 16Mhz 
                                    357 ; Added by Picatout 
      00007C                        358 clock_init:
      00007C 72 5F 50 C6      [ 1]  359         clr CLK_CKDIVR
      000080 72 12 50 C5      [ 1]  360 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   361 .if NUCLEO_8S20X|DOORBELL
      000084 35 E1 50 C4      [ 1]  362 	mov CLK_SWR,#CLK_SWR_HSI ; 16 Mhz internal 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           000000   363 .else ; DISCOVERY as 16Mhz crystal
                                    364 	mov CLK_SWR,#CLK_SWR_HSE
                                    365 .endif 
      000088 C6 50 C4         [ 1]  366 	ld a,CLK_SWR
      00008B C1 50 C3         [ 1]  367 1$:	cp a,CLK_CMSR
      00008E 26 FB            [ 1]  368 	jrne 1$
                                    369         
                                    370 ; initialize UART, 115200 8N1
                           000001   371 .if NUCLEO_8S20X|DISCOVERY
      000090                        372 uart_init:
                                    373 ;	bset CLK_PCKENR1,#UART_PCKEN
                                    374 	; configure tx pin
      000090 72 1A 50 11      [ 1]  375 	bset UART_PORT_DDR,#UART_TX_PIN ; tx pin
      000094 72 1A 50 12      [ 1]  376 	bset UART_PORT_CR1,#UART_TX_PIN ; push-pull output
      000098 72 1A 50 13      [ 1]  377 	bset UART_PORT_CR2,#UART_TX_PIN ; fast output
                                    378 ; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                                    379 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    380 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      00009C A6 E1            [ 1]  381 	ld a,#CLK_SWR_HSI
      00009E C1 50 C3         [ 1]  382 	cp a,CLK_CMSR 
      0000A1 27 0A            [ 1]  383 	jreq 2$ 
      0000A3                        384 1$: ; 8 Mhz 	
      0000A3 35 05 52 43      [ 1]  385 	mov UART_BRR2,#0x05 ; must be loaded first
      0000A7 35 04 52 42      [ 1]  386 	mov UART_BRR1,#0x4
      0000AB 20 08            [ 2]  387 	jra 3$
      0000AD                        388 2$: ; 16 Mhz 	
      0000AD 35 0B 52 43      [ 1]  389 	mov UART_BRR2,#0x0b ; must be loaded first
      0000B1 35 08 52 42      [ 1]  390 	mov UART_BRR1,#0x08
      0000B5                        391 3$:
      0000B5 72 5F 52 41      [ 1]  392         clr UART_DR
      0000B9 35 2C 52 45      [ 1]  393 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN)|(1<<UART_CR2_RIEN));
      0000BD 72 10 52 45      [ 1]  394 	bset UART_CR2,#UART_CR2_SBK
      0000C1 72 0D 52 40 FB   [ 2]  395         btjf UART_SR,#UART_SR_TC,.
                                    396 .endif 
                                    397 ; initialize timer4, used for millisecond interrupt  
      0000C6 35 07 53 45      [ 1]  398 	mov TIM4_PSCR,#7 ; prescale 128  
      0000CA 35 7D 53 46      [ 1]  399 	mov TIM4_ARR,#125 ; set for 1msec.
      0000CE 35 05 53 40      [ 1]  400 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000D2 72 10 53 41      [ 1]  401 	bset TIM4_IER,#TIM4_IER_UIE 
                                    402 ; set TIM4 interrupt priority to highest
      0000D6 A6 3F            [ 1]  403         ld a,#~(IPR_MASK<<6)
      0000D8 C4 7F 75         [ 1]  404         and a,ITC_SPR6
      0000DB AA C0            [ 1]  405         or a,#(IPR3<<6)
      0000DD C7 7F 75         [ 1]  406         ld ITC_SPR6,a 
      0000E0 9A               [ 1]  407         rim
      0000E1 CC 1C B6         [ 2]  408         jp  COLD   ;default=MN1
                                    409 
                                    410 
                           000000   411         LINK = 0  ; used by _HEADER macro 
                                    412 
                                    413 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    414 ;; place MCU in sleep mode with
                                    415 ;; halt opcode 
                                    416 ;; BYE ( -- )
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000E4                        418         _HEADER BYE,3,"BYE"
      0000E4 00 00                    1         .word LINK 
                           0000E6     2         LINK=.
      0000E6 03                       3         .byte 3  
      0000E7 42 59 45                 4         .ascii "BYE"
      0000EA                          5         BYE:
      0000EA 8E               [10]  419         halt 
      0000EB 81               [ 4]  420         ret 
                                    421 
                                    422 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    423 ; Enable interrupts 
                                    424 ; EI ( -- )
                                    425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000EC                        426         _HEADER EI,2,"EI"
      0000EC 00 E6                    1         .word LINK 
                           0000EE     2         LINK=.
      0000EE 02                       3         .byte 2  
      0000EF 45 49                    4         .ascii "EI"
      0000F1                          5         EI:
      0000F1 9A               [ 1]  427         rim 
      0000F2 81               [ 4]  428         ret 
                                    429 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    430 ; Disable interrupts
                                    431 ; DI ( -- )
                                    432 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000F3                        433         _HEADER DI,2,"DI"
      0000F3 00 EE                    1         .word LINK 
                           0000F5     2         LINK=.
      0000F5 02                       3         .byte 2  
      0000F6 44 49                    4         .ascii "DI"
      0000F8                          5         DI:
      0000F8 9B               [ 1]  434         sim 
      0000F9 81               [ 4]  435         ret 
                                    436 
                                    437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    438 ; set interrupt priority level 
                                    439 ; SET-ISP ( n1 n2 -- )
                                    440 ; n1 level {1..3}
                                    441 ; n2 vector {0..29}
                                    442 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000FA                        443         _HEADER SETISP,7,"SET-ISP"
      0000FA 00 F5                    1         .word LINK 
                           0000FC     2         LINK=.
      0000FC 07                       3         .byte 7  
      0000FD 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      000104                          5         SETISP:
      000104 90 93            [ 1]  444         ldw y,x 
      000106 90 FE            [ 2]  445         ldw y,(y)
      000108 A6 04            [ 1]  446         ld a,#4 ; 4 slot per register 
                                    447 ;  quotient select register, remainder select slot in register.        
      00010A 90 62            [ 2]  448         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      00010C A4 03            [ 1]  449         and a,#3 
      00010E 48               [ 1]  450         sll a ; 2*SLOT  lshift 
      00010F 72 A9 7F 70      [ 2]  451         addw y,#ITC_SPR1 
      000113 FF               [ 2]  452         ldw (x),y  ; ( level reg -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000114 90 5F            [ 1]  453         clrw y 
      000116 90 97            [ 1]  454         ld yl,a 
      000118 1D 00 02         [ 2]  455         subw x,#CELLL 
      00011B FF               [ 2]  456         ldw (x),y  ; ( level reg lshift -- )
      00011C 90 93            [ 1]  457         ldw y,x 
      00011E 90 EE 02         [ 2]  458         ldw y,(2,y) 
      000121 90 F6            [ 1]  459         ld a,(y)   ; reg_value
      000123 1D 00 02         [ 2]  460         subw x,#CELLL 
      000126 FF               [ 2]  461         ldw (x),y ; ( level reg lshift rval -- )
      000127 CD 06 85         [ 4]  462         call OVER ; ( level reg lshift rval lshift -- )
      00012A CD 04 B3         [ 4]  463         call DOLIT 
      00012D 00 03                  464         .word 3
      00012F CD 06 6D         [ 4]  465         call SWAPP  ; ( level reg lshift rval 3 lshift )
      000132 CD 0C 05         [ 4]  466         call LSHIFT ; creat slot mask 
      000135 CD 08 B9         [ 4]  467         call INVER  ; ( level reg lshift rval mask )
      000138 CD 06 BA         [ 4]  468         call ANDD ; ( level reg lshift slot_masked )
      00013B CD 06 26         [ 4]  469         call TOR  ; ( level reg lshift -- R: slot_masked )
      00013E CD 08 21         [ 4]  470         call ROT  ; ( reg lshift level )
      000141 CD 06 6D         [ 4]  471         call SWAPP ; ( reg level lshift )
      000144 CD 0C 05         [ 4]  472         call LSHIFT  ; ( reg slot_level -- )
      000147 CD 05 78         [ 4]  473         call RFROM ; ( reg slot_level masked_val )
      00014A CD 06 CE         [ 4]  474         call ORR   ; ( reg updated_rval )
      00014D CD 06 6D         [ 4]  475         call SWAPP 
      000150 CC 05 34         [ 2]  476         jp CSTOR
                                    477 
                                    478 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    479 ; sélectionne l'application 
                                    480 ; qui démarre automatique lors 
                                    481 ; d'un COLD start 
                                    482 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000153                        483         _HEADER AUTORUN,7,"AUTORUN"
      000153 00 FC                    1         .word LINK 
                           000155     2         LINK=.
      000155 07                       3         .byte 7  
      000156 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      00015D                          5         AUTORUN:
      00015D CD 12 85         [ 4]  484         call TOKEN 
      000160 CD 06 5D         [ 4]  485         call DUPP 
      000163 CD 04 DC         [ 4]  486         call QBRAN 
      000166 02 43                  487         .word FORGET2
      000168 CD 13 82         [ 4]  488         call NAMEQ
      00016B CD 08 10         [ 4]  489         call QDUP 
      00016E CD 04 DC         [ 4]  490         call QBRAN 
      000171 02 43                  491         .word FORGET2
      000173                        492         _DROP 
      000173 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000176 1D 00 04         [ 2]  493         subw x,#2*CELLL 
      000179 90 5F            [ 1]  494         clrw y 
      00017B FF               [ 2]  495         ldw (x),y 
      00017C 90 AE 40 02      [ 2]  496         ldw y,#APP_RUN 
      000180 EF 02            [ 2]  497         ldw (2,x),y 
      000182 CC 1F C4         [ 2]  498         jp EESTORE 
                                    499 
                                    500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    501 ;; Reset dictionary pointer before 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    502 ;; forgotten word. RAM space and 
                                    503 ;; interrupt vector defined after 
                                    504 ;; must be resetted also.
                                    505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000185                        506         _HEADER FORGET,6,"FORGET"
      000185 01 55                    1         .word LINK 
                           000187     2         LINK=.
      000187 06                       3         .byte 6  
      000188 46 4F 52 47 45 54        4         .ascii "FORGET"
      00018E                          5         FORGET:
      00018E CD 12 85         [ 4]  507         call TOKEN
      000191 CD 06 5D         [ 4]  508         call DUPP 
      000194 CD 04 DC         [ 4]  509         call QBRAN 
      000197 02 43                  510         .word FORGET2
      000199 CD 13 82         [ 4]  511         call NAMEQ ; ( a -- ca na | a F )
      00019C CD 08 10         [ 4]  512         call QDUP 
      00019F CD 04 DC         [ 4]  513         call QBRAN 
      0001A2 02 43                  514         .word FORGET2
                                    515 ; only forget users words 
      0001A4 CD 06 5D         [ 4]  516         call DUPP ; ( ca na na )
      0001A7 CD 04 B3         [ 4]  517         call DOLIT 
      0001AA 35 80                  518         .word app_space 
      0001AC CD 06 6D         [ 4]  519         call SWAPP 
      0001AF CD 09 54         [ 4]  520         call  ULESS 
      0001B2 CD 04 DC         [ 4]  521         call QBRAN 
      0001B5 02 05                  522         .word FORGET6 
                                    523 ; ( ca na -- )        
                                    524 ;reset ivec with address >= ca
      0001B7 CD 06 6D         [ 4]  525         call SWAPP ; ( na ca -- ) 
      0001BA CD 21 C7         [ 4]  526         call CHKIVEC ; ( na -- ) 
                                    527 ; start at LAST and link back to na 
                                    528 ; if variable found reset VP at that point.
      0001BD                        529 FORGET1:
      0001BD CD 07 D2         [ 4]  530         call LAST 
      0001C0 CD 05 27         [ 4]  531         call AT 
      0001C3 CD 06 5D         [ 4]  532         call DUPP  ; ( -- na last last )
      0001C6 CD 02 59         [ 4]  533         call FREEVAR ; ( -- na last )
      0001C9 CD 06 5D         [ 4]  534         call DUPP 
      0001CC CD 04 B3         [ 4]  535         call DOLIT 
      0001CF 00 02                  536         .word 2 
      0001D1 CD 09 16         [ 4]  537         call SUBB ; ( na last -- na last lfa ) link address 
      0001D4 CD 05 27         [ 4]  538         call AT 
      0001D7 CD 06 5D         [ 4]  539         call DUPP ; ( -- na last a a )
      0001DA CD 07 A6         [ 4]  540         call CNTXT 
      0001DD CD 05 15         [ 4]  541         call STORE
      0001E0 CD 07 D2         [ 4]  542         call LAST  
      0001E3 CD 05 15         [ 4]  543         call STORE ; ( --  na last )
      0001E6 CD 06 85         [ 4]  544         call OVER 
      0001E9 CD 09 3E         [ 4]  545         call EQUAL ; ( na last na -- na T|F ) 
      0001EC CD 04 DC         [ 4]  546         call QBRAN 
      0001EF 01 BD                  547         .word FORGET1 
                                    548 ; ( na -- )
      0001F1 CD 04 B3         [ 4]  549         call DOLIT 
      0001F4 00 02                  550         .word 2 
      0001F6 CD 09 16         [ 4]  551         call SUBB 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001F9 CD 07 C2         [ 4]  552         call CPP 
      0001FC CD 05 15         [ 4]  553         call STORE  
      0001FF CD 1D F3         [ 4]  554         call UPDATCP 
      000202 CC 1D CA         [ 2]  555         jp UPDATLAST 
      000205                        556 FORGET6: ; tried to forget a RAM or system word 
                                    557 ; ( ca na -- )
      000205 1D 00 02         [ 2]  558         subw x,#CELLL 
      000208 90 BE 2C         [ 2]  559         ldw y,SP0 
      00020B FF               [ 2]  560         ldw (x),y  
      00020C CD 09 54         [ 4]  561         call ULESS
      00020F CD 04 DC         [ 4]  562         call QBRAN 
      000212 02 35                  563         .word PROTECTED 
      000214 CD 14 8E         [ 4]  564         call ABORQ 
      000217 1D                     565         .byte 29
      000218 20 46 6F 72 20 52 41   566         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      000235                        567 PROTECTED:
      000235 CD 14 8E         [ 4]  568         call ABORQ
      000238 0A                     569         .byte 10
      000239 20 50 72 6F 74 65 63   570         .ascii " Protected"
             74 65 64
      000243                        571 FORGET2: ; no name or not found in dictionary 
      000243 CD 14 8E         [ 4]  572         call ABORQ
      000246 05                     573         .byte 5
      000247 20 77 68 61 74         574         .ascii " what"
      00024C                        575 FORGET4:
      00024C CC 06 53         [ 2]  576         jp DROP 
                                    577 
                                    578 
                                    579 ;;;;;;;;;;;;;;;;;;;;;
                                    580 ; if na is variable 
                                    581 ; free variable data  
                                    582 ; FREEVAR ( na -- )
                                    583 ;;;;;;;;;;;;;;;;;;;;;;
      00024F                        584         _HEADER FREEVAR,7,"FREEVAR"
      00024F 01 87                    1         .word LINK 
                           000251     2         LINK=.
      000251 07                       3         .byte 7  
      000252 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000259                          5         FREEVAR:
      000259 CD 06 5D         [ 4]  585         call DUPP ; ( na na -- )
      00025C CD 05 45         [ 4]  586         CALL CAT  ; ( na c -- )
      00025F CD 0B E7         [ 4]  587         call ONEP ;
      000262 CD 08 80         [ 4]  588         CALL PLUS ; ( na c+1 -- ca ) 
      000265 CD 0B E7         [ 4]  589         call ONEP ; ( ca+ -- ) to get routne address 
      000268 CD 06 5D         [ 4]  590         call DUPP ; ( ca+ ca+ -- )
      00026B CD 05 27         [ 4]  591         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      00026E CD 04 B3         [ 4]  592         call DOLIT 
      000271 07 13                  593         .word DOVAR ; if routine address is DOVAR then variable 
      000273 CD 09 3E         [ 4]  594         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000276 CD 04 DC         [ 4]  595         call QBRAN 
      000279 02 8F                  596         .word FREEVAR4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00027B CD 04 B3         [ 4]  597         call DOLIT 
      00027E 00 02                  598         .word 2 
      000280 CD 08 80         [ 4]  599         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000283 CD 05 27         [ 4]  600         call AT 
      000286 CD 07 B4         [ 4]  601         call VPP   
      000289 CD 05 15         [ 4]  602         call STORE 
      00028C CC 1E 0A         [ 2]  603         jp UPDATVP 
      00028F                        604 FREEVAR4: ; not variable
      00028F                        605         _DROP 
      00028F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000292 81               [ 4]  606         RET 
                                    607 
                                    608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    609 ;    SEED ( n -- )
                                    610 ; Initialize PRNG seed with n 
                                    611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000293                        612         _HEADER SEED,4,"SEED"
      000293 02 51                    1         .word LINK 
                           000295     2         LINK=.
      000295 04                       3         .byte 4  
      000296 53 45 45 44              4         .ascii "SEED"
      00029A                          5         SEED:
      00029A 90 93            [ 1]  613         ldw y,x 
      00029C 1C 00 02         [ 2]  614         addw x,#CELLL
      00029F 90 FE            [ 2]  615         ldw y,(y)
      0002A1 90 9E            [ 1]  616         ld a,yh 
      0002A3 B7 38            [ 1]  617         ld SEEDX,a 
      0002A5 90 9F            [ 1]  618         ld a,yl 
      0002A7 B7 3A            [ 1]  619         ld SEEDY,a 
      0002A9 81               [ 4]  620         ret 
                                    621 
                                    622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    623 ;    RANDOM ( u1 -- u2 )
                                    624 ; Pseudo random number betwen 0 and u1-1
                                    625 ;  XOR32 algorithm 
                                    626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002AA                        627         _HEADER RANDOM,6,"RANDOM"
      0002AA 02 95                    1         .word LINK 
                           0002AC     2         LINK=.
      0002AC 06                       3         .byte 6  
      0002AD 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      0002B3                          5         RANDOM:
                                    628 ;local variable 
                           000001   629         SPSAVE=1
                           000002   630         VSIZE=2 
      0002B3 52 02            [ 2]  631         sub sp,#VSIZE
      0002B5 1F 01            [ 2]  632         ldw (SPSAVE,sp),x  
                                    633 ; XTEMP=(SEEDX<<5)^SEEDX 
      0002B7 90 93            [ 1]  634         ldw y,x 
      0002B9 90 FE            [ 2]  635         ldw y,(y)
      0002BB 90 BF 26         [ 2]  636         ldw YTEMP,y 
      0002BE BE 38            [ 2]  637 	ldw x,SEEDX 
      0002C0 58               [ 2]  638 	sllw x 
      0002C1 58               [ 2]  639 	sllw x 
      0002C2 58               [ 2]  640 	sllw x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002C3 58               [ 2]  641 	sllw x 
      0002C4 58               [ 2]  642 	sllw x 
      0002C5 9E               [ 1]  643 	ld a,xh 
      0002C6 B8 38            [ 1]  644 	xor a,SEEDX 
      0002C8 B7 24            [ 1]  645 	ld XTEMP,a 
      0002CA 9F               [ 1]  646 	ld a,xl 
      0002CB B8 39            [ 1]  647 	xor a,SEEDX+1 
      0002CD B7 25            [ 1]  648 	ld XTEMP+1,a 
                                    649 ; SEEDX=SEEDY 
      0002CF BE 3A            [ 2]  650 	ldw x,SEEDY 
      0002D1 BF 38            [ 2]  651 	ldw SEEDX,x  
                                    652 ; SEEDY=SEEDY^(SEEDY>>1)
      0002D3 54               [ 2]  653 	srlw x 
      0002D4 9E               [ 1]  654 	ld a,xh 
      0002D5 B8 3A            [ 1]  655 	xor a,SEEDY 
      0002D7 B7 3A            [ 1]  656 	ld SEEDY,a  
      0002D9 9F               [ 1]  657 	ld a,xl 
      0002DA B8 3B            [ 1]  658 	xor a,SEEDY+1 
      0002DC B7 3B            [ 1]  659 	ld SEEDY+1,a 
                                    660 ; XTEMP>>3 
      0002DE BE 24            [ 2]  661 	ldw x,XTEMP 
      0002E0 54               [ 2]  662 	srlw x 
      0002E1 54               [ 2]  663 	srlw x 
      0002E2 54               [ 2]  664 	srlw x 
                                    665 ; x=XTEMP^x 
      0002E3 9E               [ 1]  666 	ld a,xh 
      0002E4 B8 24            [ 1]  667 	xor a,XTEMP 
      0002E6 95               [ 1]  668 	ld xh,a 
      0002E7 9F               [ 1]  669 	ld a,xl 
      0002E8 B8 25            [ 1]  670 	xor a,XTEMP+1  
      0002EA 97               [ 1]  671 	ld xl,a 
                                    672 ; SEEDY=x^SEEDY 
      0002EB B8 3B            [ 1]  673 	xor a,SEEDY+1
      0002ED 97               [ 1]  674 	ld xl,a 
      0002EE 9E               [ 1]  675 	ld a,xh 
      0002EF B8 3A            [ 1]  676 	xor a,SEEDY
      0002F1 95               [ 1]  677 	ld xh,a 
      0002F2 BF 3A            [ 2]  678 	ldw SEEDY,x 
                                    679 ; return SEEDY modulo YTEMP  
      0002F4 90 BE 26         [ 2]  680 	ldw y,YTEMP  
      0002F7 65               [ 2]  681 	divw x,y 
      0002F8 1E 01            [ 2]  682 	ldw x,(SPSAVE,sp)
      0002FA FF               [ 2]  683         ldw (x),y 
      0002FB 5B 02            [ 2]  684         addw sp,#VSIZE 
      0002FD 81               [ 4]  685 	ret 
                                    686 
                                    687 
                                    688 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    689 ;; get millisecond counter 
                                    690 ;; msec ( -- u )
                                    691 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002FE                        692         _HEADER MSEC,4,"MSEC"
      0002FE 02 AC                    1         .word LINK 
                           000300     2         LINK=.
      000300 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000301 4D 53 45 43              4         .ascii "MSEC"
      000305                          5         MSEC:
      000305 1D 00 02         [ 2]  693         subw x,#CELLL 
      000308 90 BE 30         [ 2]  694         ldw y,MS 
      00030B FF               [ 2]  695         ldw (x),y 
      00030C 81               [ 4]  696         ret 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ; suspend execution for u msec 
                                    700 ;  pause ( u -- )
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00030D                        702         _HEADER PAUSE,5,"PAUSE"
      00030D 03 00                    1         .word LINK 
                           00030F     2         LINK=.
      00030F 05                       3         .byte 5  
      000310 50 41 55 53 45           4         .ascii "PAUSE"
      000315                          5         PAUSE:
      000315 90 93            [ 1]  703         ldw y,x
      000317 90 FE            [ 2]  704         ldw y,(y)
      000319 72 B9 00 30      [ 2]  705         addw y,MS 
      00031D 8F               [10]  706 1$:     wfi  
      00031E 90 B3 30         [ 2]  707         cpw y,MS  
      000321 26 FA            [ 1]  708         jrne 1$        
      000323 1C 00 02         [ 2]  709         addw x,#CELLL 
      000326 81               [ 4]  710         ret 
                                    711 
                                    712 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    713 ; initialize count down timer 
                                    714 ;  TIMER ( u -- )  milliseconds
                                    715 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000327                        716         _HEADER TIMER,5,"TIMER"
      000327 03 0F                    1         .word LINK 
                           000329     2         LINK=.
      000329 05                       3         .byte 5  
      00032A 54 49 4D 45 52           4         .ascii "TIMER"
      00032F                          5         TIMER:
      00032F 90 93            [ 1]  717         ldw y,x
      000331 90 FE            [ 2]  718         ldw y,(y) 
      000333 90 BF 32         [ 2]  719         ldw CNTDWN,y
      000336 1C 00 02         [ 2]  720         addw x,#CELLL 
      000339 81               [ 4]  721         ret 
                                    722 
                                    723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    724 ; check for TIMER exiparition 
                                    725 ;  TIMEOUT? ( -- 0|-1 )
                                    726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00033A                        727         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      00033A 03 29                    1         .word LINK 
                           00033C     2         LINK=.
      00033C 08                       3         .byte 8  
      00033D 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      000345                          5         TIMEOUTQ:
      000345 4F               [ 1]  728         clr a
      000346 1D 00 02         [ 2]  729         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000349 90 BE 32         [ 2]  730         ldw y,CNTDWN 
      00034C 26 01            [ 1]  731         jrne 1$ 
      00034E 43               [ 1]  732         cpl a 
      00034F E7 01            [ 1]  733 1$:     ld (1,x),a 
      000351 F7               [ 1]  734         ld (x),a 
      000352 81               [ 4]  735         ret         
                                    736 
                                    737 ;;;;;;;;;;;;;;;;;;;;;
                                    738 ; reboot MCU 
                                    739 ; REBOOT ( -- )
                                    740 ;;;;;;;;;;;;;;;;;;;;;
      000353                        741         _HEADER reboot,6,"REBOOT"
      000353 03 3C                    1         .word LINK 
                           000355     2         LINK=.
      000355 06                       3         .byte 6  
      000356 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      00035C                          5         reboot:
      00035C CD 10 38         [ 4]  742         CALL CR
      00035F 72 0D 52 40 FB   [ 2]  743         BTJF UART_SR,#UART_SR_TC,.
      000364 CC 00 27         [ 2]  744         jp reset_mcu
                                    745 
                                    746 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    747 ; compile to flash memory 
                                    748 ; TO-FLASH ( -- )
                                    749 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000367                        750         _HEADER TOFLASH,8,"TO-FLASH"
      000367 03 55                    1         .word LINK 
                           000369     2         LINK=.
      000369 08                       3         .byte 8  
      00036A 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000372                          5         TOFLASH:
      000372 CD 07 E5         [ 4]  751         call RAMLAST 
      000375 CD 05 27         [ 4]  752         call AT 
      000378 CD 08 10         [ 4]  753         call QDUP 
      00037B CD 04 DC         [ 4]  754         call QBRAN
      00037E 03 A1                  755         .word 1$
      000380 CD 14 8E         [ 4]  756         call ABORQ 
      000383 1D                     757         .byte 29
      000384 20 4E 6F 74 20 77 68   758         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      0003A1 90 AE FF FF      [ 2]  759 1$:     ldw y,#-1 
      0003A5 90 BF 20         [ 2]  760         ldw UTFLASH,y
      0003A8 81               [ 4]  761         ret 
                                    762 
                                    763 ;;;;;;;;;;;;;;;;;;;;;;
                                    764 ; compile to RAM 
                                    765 ; TO-RAM ( -- )
                                    766 ;;;;;;;;;;;;;;;;;;;;;;
      0003A9                        767         _HEADER TORAM,6,"TO-RAM"
      0003A9 03 69                    1         .word LINK 
                           0003AB     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AB 06                       3         .byte 6  
      0003AC 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      0003B2                          5         TORAM:
      0003B2 90 5F            [ 1]  768         clrw y 
      0003B4 90 BF 20         [ 2]  769         ldw UTFLASH,y 
      0003B7 81               [ 4]  770         ret 
                                    771 
                                    772 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    773 ;; BAUD RATE constants table
                                    774 ; values to put in BRR1 & BRR2 
                                    775 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0003B8                        776 baudrate: 
      0003B8 A0 1B                  777 	.byte 0xa0,0x1b ; 2400
      0003BA D0 05                  778 	.byte 0xd0,0x5  ; 4800 
      0003BC 68 03                  779 	.byte 0x68,0x3  ; 9600
      0003BE 34 01                  780 	.byte 0x34,0x1  ; 19200
      0003C0 11 06                  781 	.byte 0x11,0x6  ; 57600
      0003C2 08 0B                  782 	.byte 0x8,0xb   ; 115200
                                    783 
                                    784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    785 ; BAUD RATE CONSTANTS names 
                                    786 ; 2400 baud  ( -- n )
                                    787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0003C4                        788         _HEADER B2K4,4,"B2K4"
      0003C4 03 AB                    1         .word LINK 
                           0003C6     2         LINK=.
      0003C6 04                       3         .byte 4  
      0003C7 42 32 4B 34              4         .ascii "B2K4"
      0003CB                          5         B2K4:
      0003CB 1D 00 02         [ 2]  789 	subw x,#CELLL 
      0003CE 90 5F            [ 1]  790         clrw y
      0003D0 FF               [ 2]  791         ldw (x),y
      0003D1 81               [ 4]  792 	ret
                                    793 
                                    794 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    795 ; 4800 baud	
                                    796 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0003D2                        797         _HEADER B4K8,4,"B4K8"
      0003D2 03 C6                    1         .word LINK 
                           0003D4     2         LINK=.
      0003D4 04                       3         .byte 4  
      0003D5 42 34 4B 38              4         .ascii "B4K8"
      0003D9                          5         B4K8:
      0003D9 1D 00 02         [ 2]  798         subw x,#CELLL 
      0003DC 90 AE 00 02      [ 2]  799         ldw y,#2 
      0003E0 FF               [ 2]  800         ldw (x),y
      0003E1 81               [ 4]  801         ret 
                                    802 
                                    803 ;;;;;;;;;;;;;;;;;;;;
                                    804 ; 9600 baud
                                    805 ;;;;;;;;;;;;;;;;;;;;
      0003E2                        806         _HEADER B9K6,4,"B9K6"
      0003E2 03 D4                    1         .word LINK 
                           0003E4     2         LINK=.
      0003E4 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003E5 42 39 4B 36              4         .ascii "B9K6"
      0003E9                          5         B9K6:
      0003E9 1D 00 02         [ 2]  807         subw x,#CELLL 
      0003EC 90 AE 00 04      [ 2]  808         ldw y,#4 
      0003F0 FF               [ 2]  809         ldw (x),y 
      0003F1 81               [ 4]  810         ret 
                                    811 ;;;;;;;;;;;;;;
                                    812 ; 19200 baud
                                    813 ;;;;;;;;;;;;;;
      0003F2                        814         _HEADER B19K2,5,"B19K2"
      0003F2 03 E4                    1         .word LINK 
                           0003F4     2         LINK=.
      0003F4 05                       3         .byte 5  
      0003F5 42 31 39 4B 32           4         .ascii "B19K2"
      0003FA                          5         B19K2:
      0003FA 1D 00 02         [ 2]  815         subw x,#CELLL
      0003FD 90 AE 00 06      [ 2]  816         ldw y,#6 
      000401 FF               [ 2]  817         ldw (x),y 
      000402 81               [ 4]  818         ret 
                                    819 ;;;;;;;;;;;;;;
                                    820 ; 57600 baud  
                                    821 ;;;;;;;;;;;;;;
      000403                        822         _HEADER B57K6,5,"B57K6"
      000403 03 F4                    1         .word LINK 
                           000405     2         LINK=.
      000405 05                       3         .byte 5  
      000406 42 35 37 4B 36           4         .ascii "B57K6"
      00040B                          5         B57K6:
      00040B 1D 00 02         [ 2]  823         subw x,#CELLL 
      00040E 90 AE 00 08      [ 2]  824         ldw y,#8 
      000412 FF               [ 2]  825         ldw (x),y 
      000413 81               [ 4]  826         ret 
                                    827 ;;;;;;;;;;;;;;
                                    828 ; 115200 baud 
                                    829 ;;;;;;;;;;;;;;
      000414                        830         _HEADER B115K2,6,"B115K2"
      000414 04 05                    1         .word LINK 
                           000416     2         LINK=.
      000416 06                       3         .byte 6  
      000417 42 31 31 35 4B 32        4         .ascii "B115K2"
      00041D                          5         B115K2:
      00041D 1D 00 02         [ 2]  831 	subw x,#CELLL 
      000420 90 AE 00 0A      [ 2]  832         ldw y,#10 
      000424 FF               [ 2]  833         ldw (x),y 
      000425 81               [ 4]  834         ret 
                                    835 
                                    836 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    837 ;; set UART2 BAUD rate
                                    838 ;	BAUD ( u -- )
                                    839 ;;;;;;;;;;;;;;;;;;;;;;;
      000426                        840         _HEADER BAUD,4,"BAUD"
      000426 04 16                    1         .word LINK 
                           000428     2         LINK=.
      000428 04                       3         .byte 4  
      000429 42 41 55 44              4         .ascii "BAUD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00042D                          5         BAUD:
      00042D 1D 00 02         [ 2]  841 	subw x,#CELLL
      000430 90 AE 03 B8      [ 2]  842         ldw y,#baudrate 
      000434 FF               [ 2]  843         ldw (x),y 
      000435 CD 08 80         [ 4]  844         call PLUS
      000438 90 93            [ 1]  845         ldw y,x  
      00043A 90 FE            [ 2]  846         ldw y,(y)
      00043C 90 F6            [ 1]  847         ld a,(y)
      00043E 88               [ 1]  848         push a 
      00043F 90 5C            [ 1]  849         incw y 
      000441 90 F6            [ 1]  850         ld a,(y)
      000443 C7 52 43         [ 1]  851         ld UART_BRR2,a 
      000446 84               [ 1]  852         pop a
      000447 C7 52 42         [ 1]  853         ld UART_BRR1,a 
      00044A 1C 00 02         [ 2]  854         addw x,#CELLL 
      00044D 81               [ 4]  855         ret 
                                    856 
                                    857 ;; Device dependent I/O
                                    858 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    859 ;       ?RX     ( -- c T | F )
                                    860 ;         Return input character and true, or only false.
                                    861 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00044E                        862         _HEADER QKEY,4,"?KEY"
      00044E 04 28                    1         .word LINK 
                           000450     2         LINK=.
      000450 04                       3         .byte 4  
      000451 3F 4B 45 59              4         .ascii "?KEY"
      000455                          5         QKEY:
      000455 3D 3D            [ 1]  863         TNZ CHAR_RDY 
      000457 26 07            [ 1]  864         JRNE  INCH 
      000459 1D 00 02         [ 2]  865 	SUBW	X,#CELLL
      00045C 90 5F            [ 1]  866         CLRW    Y 
      00045E FF               [ 2]  867         LDW (X),Y
      00045F 81               [ 4]  868         RET 
      000460                        869 INCH:         
      000460 9B               [ 1]  870         SIM
      000461 1D 00 04         [ 2]  871         SUBW X, #2*CELLL 
      000464 B6 3C            [ 1]  872         LD A,   RX_CHAR  
      000466 6F 02            [ 1]  873         CLR     (CELLL,X)
      000468 E7 03            [ 1]  874         LD     (CELLL+1,X),A
      00046A 90 AE FF FF      [ 2]  875 	LDW     Y,#-1
      00046E FF               [ 2]  876         LDw     (X),Y 
      00046F 3F 3D            [ 1]  877         CLR     CHAR_RDY 
      000471 9A               [ 1]  878         RIM 
      000472 81               [ 4]  879         RET 
                                    880 
                                    881 
                                    882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    883 ;       TX!     ( c -- )
                                    884 ;       Send character c to  output device.
                                    885 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000473                        886         _HEADER EMIT,4,"EMIT"
      000473 04 50                    1         .word LINK 
                           000475     2         LINK=.
      000475 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000476 45 4D 49 54              4         .ascii "EMIT"
      00047A                          5         EMIT:
      00047A E6 01            [ 1]  887         LD     A,(1,X)
      00047C 1C 00 02         [ 2]  888 	ADDW	X,#2
      00047F                        889 putc:         
      00047F 72 0F 52 40 FB   [ 2]  890 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000484 C7 52 41         [ 1]  891         LD    UART_DR,A   ;send A
      000487 81               [ 4]  892         RET
                                    893 
                                    894 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    895 ;       FC-XON  ( -- )
                                    896 ;       send XON character 
                                    897 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000488                        898         _HEADER FC_XON,6,"FC-XON"
      000488 04 75                    1         .word LINK 
                           00048A     2         LINK=.
      00048A 06                       3         .byte 6  
      00048B 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      000491                          5         FC_XON:
      000491 1D 00 02         [ 2]  899         subw x,#CELLL 
      000494 7F               [ 1]  900         clr (x)
      000495 A6 11            [ 1]  901         ld a,#XON 
      000497 E7 01            [ 1]  902         ld (1,x),a 
      000499 CD 04 7A         [ 4]  903         call EMIT 
      00049C 81               [ 4]  904         ret 
                                    905 
                                    906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    907 ;       FC-XOFF ( -- )
                                    908 ;       Send XOFF character 
                                    909 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00049D                        910         _HEADER FC_XOFF,7,"FC-XOFF"
      00049D 04 8A                    1         .word LINK 
                           00049F     2         LINK=.
      00049F 07                       3         .byte 7  
      0004A0 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      0004A7                          5         FC_XOFF:
      0004A7 1D 00 02         [ 2]  911         subw x,#CELLL 
      0004AA 7F               [ 1]  912         clr (x)
      0004AB A6 13            [ 1]  913         ld a,#XOFF 
      0004AD E7 01            [ 1]  914         ld (1,x),a 
      0004AF CD 04 7A         [ 4]  915         call EMIT 
      0004B2 81               [ 4]  916         ret
                                    917 
                                    918 ;; The kernel
                                    919 
                                    920 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    921 ;       doLIT   ( -- w )
                                    922 ;       Push an inline literal.
                                    923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004B3                        924 DOLIT:
      0004B3 1D 00 02         [ 2]  925 	SUBW X,#2
      0004B6 16 01            [ 2]  926         ldw y,(1,sp)
      0004B8 90 FE            [ 2]  927         ldw y,(y)
      0004BA FF               [ 2]  928         ldw (x),y
      0004BB 90 85            [ 2]  929         popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004BD 90 EC 02         [ 2]  930         jp (2,y)
                                    931 
                                    932 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    933 ;       NEXT    ( -- )
                                    934 ;       Code for  single index loop.
                                    935 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004C0                        936         _HEADER DONXT,COMPO+4,"NEXT"
      0004C0 04 9F                    1         .word LINK 
                           0004C2     2         LINK=.
      0004C2 44                       3         .byte COMPO+4  
      0004C3 4E 45 58 54              4         .ascii "NEXT"
      0004C7                          5         DONXT:
      0004C7 16 03            [ 2]  937 	LDW Y,(3,SP)
      0004C9 90 5A            [ 2]  938 	DECW Y
      0004CB 2A 07            [ 1]  939 	JRPL NEX1 ; jump if N=0
      0004CD 90 85            [ 2]  940 	POPW Y
      0004CF 5B 02            [ 2]  941         addw sp,#2
      0004D1 90 EC 02         [ 2]  942         JP (2,Y)
      0004D4                        943 NEX1:
      0004D4 17 03            [ 2]  944         LDW (3,SP),Y
      0004D6 90 85            [ 2]  945         POPW Y
      0004D8 90 FE            [ 2]  946 	LDW Y,(Y)
      0004DA 90 FC            [ 2]  947 	JP (Y)
                                    948 
                                    949 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    950 ;       ?branch ( f -- )
                                    951 ;       Branch if flag is zero.
                                    952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    953 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      0004DC                        954 QBRAN:	
      0004DC 90 93            [ 1]  955         LDW Y,X
      0004DE 1C 00 02         [ 2]  956 	ADDW X,#2
      0004E1 90 FE            [ 2]  957 	LDW Y,(Y)
      0004E3 27 13            [ 1]  958         JREQ     BRAN
      0004E5 90 85            [ 2]  959 	POPW Y
      0004E7 90 EC 02         [ 2]  960 	JP (2,Y)
                                    961 
                                    962 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    963 ;  TBRANCH ( f -- )
                                    964 ;  branch if f==TRUE 
                                    965 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    966 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004EA                        967 TBRAN: 
      0004EA 90 93            [ 1]  968         LDW Y,X 
      0004EC 1C 00 02         [ 2]  969         ADDW X,#2 
      0004EF 90 FE            [ 2]  970         LDW Y,(Y)
      0004F1 26 05            [ 1]  971         JRNE BRAN 
      0004F3 90 85            [ 2]  972         POPW Y 
      0004F5 90 EC 02         [ 2]  973         JP (2,Y)
                                    974 
                                    975 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    976 ;       branch  ( -- )
                                    977 ;       Branch to an inline address.
                                    978 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    979 ;       _HEADER BRAN,COMPO+6,"BRANCH"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004F8                        980 BRAN:
      0004F8 90 85            [ 2]  981         POPW Y
      0004FA 90 FE            [ 2]  982 	LDW Y,(Y)
      0004FC 90 FC            [ 2]  983         JP  (Y)
                                    984 
                                    985 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    986 ;       EXECUTE ( ca -- )
                                    987 ;       Execute  word at ca.
                                    988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FE                        989         _HEADER EXECU,7,"EXECUTE"
      0004FE 04 C2                    1         .word LINK 
                           000500     2         LINK=.
      000500 07                       3         .byte 7  
      000501 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      000508                          5         EXECU:
      000508 90 93            [ 1]  990         LDW Y,X
      00050A 1C 00 02         [ 2]  991 	ADDW X,#CELLL 
      00050D 90 FE            [ 2]  992 	LDW  Y,(Y)
      00050F 90 FC            [ 2]  993         JP   (Y)
                                    994 
                           000001   995 OPTIMIZE = 1
                           000001   996 .if OPTIMIZE 
                                    997 ; remplacement de CALL EXIT par 
                                    998 ; le opcode de RET.
                                    999 ; Voir modification au code de ";"
                           000000  1000 .else 
                                   1001 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1002 ;       EXIT    ( -- )
                                   1003 ;       Terminate a colon definition.
                                   1004 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1005 ;       _HEADER EXIT,4,"EXIT"
                                   1006 EXIT:
                                   1007         POPW Y
                                   1008         RET
                                   1009 .endif 
                                   1010 
                                   1011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1012 ;       !       ( w a -- )
                                   1013 ;       Pop  data stack to memory.
                                   1014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000511                       1015         _HEADER STORE,1,"!"
      000511 05 00                    1         .word LINK 
                           000513     2         LINK=.
      000513 01                       3         .byte 1  
      000514 21                       4         .ascii "!"
      000515                          5         STORE:
      000515 90 93            [ 1] 1016         LDW Y,X
      000517 90 FE            [ 2] 1017         LDW Y,(Y)    ;Y=a
      000519 89               [ 2] 1018         PUSHW X
      00051A EE 02            [ 2] 1019         LDW X,(2,X) ; x=w 
      00051C 90 FF            [ 2] 1020         LDW (Y),X 
      00051E 85               [ 2] 1021         POPW X  
      00051F                       1022         _DDROP 
      00051F 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      000522 81               [ 4] 1023         RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1024 
                                   1025 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1026 ;       @       ( a -- w )
                                   1027 ;       Push memory location to stack.
                                   1028 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000523                       1029         _HEADER AT,1,"@"
      000523 05 13                    1         .word LINK 
                           000525     2         LINK=.
      000525 01                       3         .byte 1  
      000526 40                       4         .ascii "@"
      000527                          5         AT:
      000527 90 93            [ 1] 1030         LDW Y,X     ;Y = a
      000529 90 FE            [ 2] 1031         LDW Y,(Y)   ; address 
      00052B 90 FE            [ 2] 1032         LDW Y,(Y)   ; value 
      00052D FF               [ 2] 1033         LDW (X),Y ;w = @Y
      00052E 81               [ 4] 1034         RET     
                                   1035 
                                   1036 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1037 ;       C!      ( c b -- )
                                   1038 ;       Pop  data stack to byte memory.
                                   1039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00052F                       1040         _HEADER CSTOR,2,"C!"
      00052F 05 25                    1         .word LINK 
                           000531     2         LINK=.
      000531 02                       3         .byte 2  
      000532 43 21                    4         .ascii "C!"
      000534                          5         CSTOR:
      000534 90 93            [ 1] 1041         LDW Y,X
      000536 90 FE            [ 2] 1042 	LDW Y,(Y)    ;Y=b
      000538 E6 03            [ 1] 1043         LD A,(3,X)    ;D = c
      00053A 90 F7            [ 1] 1044         LD  (Y),A     ;store c at b
      00053C 1C 00 04         [ 2] 1045 	ADDW X,#4 ; DDROP 
      00053F 81               [ 4] 1046         RET     
                                   1047 
                                   1048 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1049 ;       C@      ( b -- c )
                                   1050 ;       Push byte in memory to  stack.
                                   1051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000540                       1052         _HEADER CAT,2,"C@"
      000540 05 31                    1         .word LINK 
                           000542     2         LINK=.
      000542 02                       3         .byte 2  
      000543 43 40                    4         .ascii "C@"
      000545                          5         CAT:
      000545 90 93            [ 1] 1053         LDW Y,X     ;Y=b
      000547 90 FE            [ 2] 1054         LDW Y,(Y)
      000549 90 F6            [ 1] 1055         LD A,(Y)
      00054B E7 01            [ 1] 1056         LD (1,X),A
      00054D 7F               [ 1] 1057         CLR (X)
      00054E 81               [ 4] 1058         RET     
                                   1059 
                                   1060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1061 ;       RP@     ( -- a )
                                   1062 ;       Push current RP to data stack.
                                   1063 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00054F                       1064         _HEADER RPAT,3,"RP@"
      00054F 05 42                    1         .word LINK 
                           000551     2         LINK=.
      000551 03                       3         .byte 3  
      000552 52 50 40                 4         .ascii "RP@"
      000555                          5         RPAT:
      000555 90 96            [ 1] 1065         LDW Y,SP    ;save return addr
      000557 1D 00 02         [ 2] 1066         SUBW X,#2
      00055A FF               [ 2] 1067         LDW (X),Y
      00055B 81               [ 4] 1068         RET     
                                   1069 
                                   1070 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1071 ;       RP!     ( a -- )
                                   1072 ;       Set  return stack pointer.
                                   1073 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00055C                       1074         _HEADER RPSTO,COMPO+3,"RP!"
      00055C 05 51                    1         .word LINK 
                           00055E     2         LINK=.
      00055E 43                       3         .byte COMPO+3  
      00055F 52 50 21                 4         .ascii "RP!"
      000562                          5         RPSTO:
      000562 90 85            [ 2] 1075         POPW Y
      000564 90 BF 26         [ 2] 1076         LDW YTEMP,Y
      000567 90 93            [ 1] 1077         LDW Y,X
      000569 90 FE            [ 2] 1078         LDW Y,(Y)
      00056B 90 94            [ 1] 1079         LDW SP,Y
      00056D 1C 00 02         [ 2] 1080         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      000570 92 CC 26         [ 5] 1081         JP [YTEMP]
                                   1082 
                                   1083 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1084 ;       R>      ( -- w )
                                   1085 ;       Pop return stack to data stack.
                                   1086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000573                       1087         _HEADER RFROM,2,"R>"
      000573 05 5E                    1         .word LINK 
                           000575     2         LINK=.
      000575 02                       3         .byte 2  
      000576 52 3E                    4         .ascii "R>"
      000578                          5         RFROM:
      000578 1D 00 02         [ 2] 1088         SUBW X,#CELLL 
      00057B 16 03            [ 2] 1089         LDW Y,(3,SP)
      00057D FF               [ 2] 1090         LDW (X),Y 
      00057E 90 85            [ 2] 1091         POPW Y 
      000580 5B 02            [ 2] 1092         ADDW SP,#2 
      000582 90 FC            [ 2] 1093         JP (Y)
                                   1094 
                                   1095 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1096 ;       R@      ( -- w )
                                   1097 ;       Copy top of return stack to stack.
                                   1098 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000584                       1099         _HEADER RAT,2,"R@"
      000584 05 75                    1         .word LINK 
                           000586     2         LINK=.
      000586 02                       3         .byte 2  
      000587 52 40                    4         .ascii "R@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000589                          5         RAT:
      000589 16 03            [ 2] 1100         ldw y,(3,sp)
      00058B 1D 00 02         [ 2] 1101         subw x,#CELLL 
      00058E FF               [ 2] 1102         ldw (x),y 
      00058F 81               [ 4] 1103         ret 
                                   1104 
                                   1105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1106 ;       LOCAL ( n -- )
                                   1107 ;       reserve n slots on return stack
                                   1108 ;       for local variables 
                                   1109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000590                       1110         _HEADER LOCAL,5,"LOCAL"
      000590 05 86                    1         .word LINK 
                           000592     2         LINK=.
      000592 05                       3         .byte 5  
      000593 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000598                          5         LOCAL:
      000598 90 85            [ 2] 1111         POPW Y  
      00059A 90 BF 26         [ 2] 1112         LDW YTEMP,Y ; RETURN ADDRESS 
      00059D E6 01            [ 1] 1113         LD A,(1,X)
      00059F 90 97            [ 1] 1114         LD YL,A 
      0005A1 A6 02            [ 1] 1115         LD A,#CELLL 
      0005A3 90 42            [ 4] 1116         MUL Y,A 
      0005A5 90 BF 24         [ 2] 1117         LDw XTEMP,Y
      0005A8 90 96            [ 1] 1118         LDW Y,SP 
      0005AA 72 B2 00 24      [ 2] 1119         SUBW Y,XTEMP
      0005AE 90 94            [ 1] 1120         LDW SP,Y 
      0005B0 1C 00 02         [ 2] 1121         ADDW X,#CELLL 
      0005B3 92 CC 26         [ 5] 1122         JP [YTEMP]
                                   1123 
                                   1124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1125 ;       NRDROP ( n -- )
                                   1126 ;       drop n elements from rstack
                                   1127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B6                       1128         _HEADER NRDROP,6,"NRDROP" 
      0005B6 05 92                    1         .word LINK 
                           0005B8     2         LINK=.
      0005B8 06                       3         .byte 6  
      0005B9 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      0005BF                          5         NRDROP:
      0005BF 90 85            [ 2] 1129         POPW Y 
      0005C1 90 BF 26         [ 2] 1130         LDW YTEMP,Y ; RETURN ADDRESS 
      0005C4 E6 01            [ 1] 1131         LD A,(1,X)
      0005C6 90 97            [ 1] 1132         LD YL,A  
      0005C8 A6 02            [ 1] 1133         LD A,#CELLL 
      0005CA 90 42            [ 4] 1134         MUL Y,A 
      0005CC 90 BF 24         [ 2] 1135         LDW XTEMP,Y 
      0005CF 90 96            [ 1] 1136         LDW Y,SP 
      0005D1 72 B9 00 24      [ 2] 1137         ADDW Y,XTEMP 
      0005D5 90 94            [ 1] 1138         LDW SP,Y  
      0005D7 1C 00 02         [ 2] 1139         ADDW X,#CELLL 
      0005DA 92 CC 26         [ 5] 1140         JP [YTEMP]
                                   1141 
                                   1142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1143 ;        ( n -- w)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1144 ;      fetch nth element ofr return stack 
                                   1145 ;      n==0 is same as R@ 
                                   1146 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005DD                       1147         _HEADER NRAT,3,"NR@"
      0005DD 05 B8                    1         .word LINK 
                           0005DF     2         LINK=.
      0005DF 03                       3         .byte 3  
      0005E0 4E 52 40                 4         .ascii "NR@"
      0005E3                          5         NRAT:
      0005E3 E6 01            [ 1] 1148         LD A,(1,X)
      0005E5 90 97            [ 1] 1149         LD YL,A 
      0005E7 A6 02            [ 1] 1150         LD A,#CELLL 
      0005E9 90 42            [ 4] 1151         MUL Y,A 
      0005EB 90 BF 26         [ 2] 1152         LDW YTEMP,Y 
      0005EE 90 96            [ 1] 1153         LDW Y,SP 
      0005F0 72 A9 00 03      [ 2] 1154         ADDW Y,#3 
      0005F4 72 B9 00 26      [ 2] 1155         ADDW Y,YTEMP 
      0005F8 90 FE            [ 2] 1156         LDW Y,(Y)
      0005FA FF               [ 2] 1157         LDW (X),Y 
      0005FB 81               [ 4] 1158         RET 
                                   1159 
                                   1160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1161 ;       NR! ( w n --  )
                                   1162 ;       store w on nth position of 
                                   1163 ;       return stack 
                                   1164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005FC                       1165         _HEADER NRSTO,3,"NR!"
      0005FC 05 DF                    1         .word LINK 
                           0005FE     2         LINK=.
      0005FE 03                       3         .byte 3  
      0005FF 4E 52 21                 4         .ascii "NR!"
      000602                          5         NRSTO:
      000602 90 96            [ 1] 1166         LDW Y,SP
      000604 72 A9 00 03      [ 2] 1167         ADDW Y,#3 
      000608 90 BF 26         [ 2] 1168         LDW YTEMP,Y 
      00060B E6 01            [ 1] 1169         LD A,(1,X)
      00060D 90 97            [ 1] 1170         LD YL,A 
      00060F A6 02            [ 1] 1171         LD A,#CELLL 
      000611 90 42            [ 4] 1172         MUL Y,A 
      000613 72 B9 00 26      [ 2] 1173         ADDW Y,YTEMP
      000617 89               [ 2] 1174         PUSHW X 
      000618 EE 02            [ 2] 1175         LDW X,(CELLL,X)
      00061A 90 FF            [ 2] 1176         LDW (Y),X
      00061C 85               [ 2] 1177         POPW X 
      00061D                       1178         _DROPN DBL_SIZE  
      00061D 1C 00 08         [ 2]    1     ADDW X,#DBL_SIZE*CELLL 
      000620 81               [ 4] 1179         RET 
                                   1180 
                                   1181 
                                   1182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1183 ;       >R      ( w -- )
                                   1184 ;       Push data stack to return stack.
                                   1185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000621                       1186         _HEADER TOR,COMPO+2,">R"
      000621 05 FE                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                           000623     2         LINK=.
      000623 42                       3         .byte COMPO+2  
      000624 3E 52                    4         .ascii ">R"
      000626                          5         TOR:
      000626 90 85            [ 2] 1187         POPW Y    ;save return addr
      000628 90 BF 26         [ 2] 1188         LDW YTEMP,Y
      00062B 90 93            [ 1] 1189         LDW Y,X
      00062D 90 FE            [ 2] 1190         LDW Y,(Y)  ; W
      00062F 90 89            [ 2] 1191         PUSHW Y    ;W >R 
      000631 1C 00 02         [ 2] 1192         ADDW X,#2
      000634 92 CC 26         [ 5] 1193         JP [YTEMP]
                                   1194 
                                   1195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1196 ;       SP@     ( -- a )
                                   1197 ;       Push current stack pointer.
                                   1198 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000637                       1199         _HEADER SPAT,3,"SP@"
      000637 06 23                    1         .word LINK 
                           000639     2         LINK=.
      000639 03                       3         .byte 3  
      00063A 53 50 40                 4         .ascii "SP@"
      00063D                          5         SPAT:
      00063D 90 93            [ 1] 1200 	LDW Y,X
      00063F 1D 00 02         [ 2] 1201         SUBW X,#2
      000642 FF               [ 2] 1202 	LDW (X),Y
      000643 81               [ 4] 1203         RET     
                                   1204 
                                   1205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1206 ;       SP!     ( a -- )
                                   1207 ;       Set  data stack pointer.
                                   1208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000644                       1209         _HEADER SPSTO,3,"SP!"
      000644 06 39                    1         .word LINK 
                           000646     2         LINK=.
      000646 03                       3         .byte 3  
      000647 53 50 21                 4         .ascii "SP!"
      00064A                          5         SPSTO:
      00064A FE               [ 2] 1210         LDW     X,(X)     ;X = a
      00064B 81               [ 4] 1211         RET     
                                   1212 
                                   1213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1214 ;       DROP    ( w -- )
                                   1215 ;       Discard top stack item.
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00064C                       1217         _HEADER DROP,4,"DROP"
      00064C 06 46                    1         .word LINK 
                           00064E     2         LINK=.
      00064E 04                       3         .byte 4  
      00064F 44 52 4F 50              4         .ascii "DROP"
      000653                          5         DROP:
      000653 1C 00 02         [ 2] 1218         ADDW X,#2     
      000656 81               [ 4] 1219         RET     
                                   1220 
                                   1221 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1222 ;       DUP     ( w -- w w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1223 ;       Duplicate  top stack item.
                                   1224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000657                       1225         _HEADER DUPP,3,"DUP"
      000657 06 4E                    1         .word LINK 
                           000659     2         LINK=.
      000659 03                       3         .byte 3  
      00065A 44 55 50                 4         .ascii "DUP"
      00065D                          5         DUPP:
      00065D 90 93            [ 1] 1226 	LDW Y,X
      00065F 1D 00 02         [ 2] 1227         SUBW X,#2
      000662 90 FE            [ 2] 1228 	LDW Y,(Y)
      000664 FF               [ 2] 1229 	LDW (X),Y
      000665 81               [ 4] 1230         RET     
                                   1231 
                                   1232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1233 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1234 ;       Exchange top two stack items.
                                   1235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000666                       1236         _HEADER SWAPP,4,"SWAP"
      000666 06 59                    1         .word LINK 
                           000668     2         LINK=.
      000668 04                       3         .byte 4  
      000669 53 57 41 50              4         .ascii "SWAP"
      00066D                          5         SWAPP:
      00066D 90 93            [ 1] 1237         LDW Y,X
      00066F 90 FE            [ 2] 1238         LDW Y,(Y)
      000671 90 89            [ 2] 1239         PUSHW Y  
      000673 90 93            [ 1] 1240         LDW Y,X
      000675 90 EE 02         [ 2] 1241         LDW Y,(2,Y)
      000678 FF               [ 2] 1242         LDW (X),Y
      000679 90 85            [ 2] 1243         POPW Y 
      00067B EF 02            [ 2] 1244         LDW (2,X),Y
      00067D 81               [ 4] 1245         RET     
                                   1246 
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1248 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1249 ;       Copy second stack item to top.
                                   1250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00067E                       1251         _HEADER OVER,4,"OVER"
      00067E 06 68                    1         .word LINK 
                           000680     2         LINK=.
      000680 04                       3         .byte 4  
      000681 4F 56 45 52              4         .ascii "OVER"
      000685                          5         OVER:
      000685 1D 00 02         [ 2] 1252         SUBW X,#2
      000688 90 93            [ 1] 1253         LDW Y,X
      00068A 90 EE 04         [ 2] 1254         LDW Y,(4,Y)
      00068D FF               [ 2] 1255         LDW (X),Y
      00068E 81               [ 4] 1256         RET     
                                   1257 
                                   1258 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1259 ;       0<      ( n -- t )
                                   1260 ;       Return true if n is negative.
                                   1261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00068F                       1262         _HEADER ZLESS,2,"0<"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00068F 06 80                    1         .word LINK 
                           000691     2         LINK=.
      000691 02                       3         .byte 2  
      000692 30 3C                    4         .ascii "0<"
      000694                          5         ZLESS:
      000694 A6 FF            [ 1] 1263         LD A,#0xFF
      000696 90 93            [ 1] 1264         LDW Y,X
      000698 90 FE            [ 2] 1265         LDW Y,(Y)
      00069A 2B 01            [ 1] 1266         JRMI     ZL1
      00069C 4F               [ 1] 1267         CLR A   ;false
      00069D F7               [ 1] 1268 ZL1:    LD     (X),A
      00069E E7 01            [ 1] 1269         LD (1,X),A
      0006A0 81               [ 4] 1270 	RET     
                                   1271 
                                   1272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1273 ;       0= ( n -- f )
                                   1274 ;   n==0?
                                   1275 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006A1                       1276         _HEADER ZEQUAL,2,"0="
      0006A1 06 91                    1         .word LINK 
                           0006A3     2         LINK=.
      0006A3 02                       3         .byte 2  
      0006A4 30 3D                    4         .ascii "0="
      0006A6                          5         ZEQUAL:
      0006A6 A6 FF            [ 1] 1277         LD A,#0XFF 
      0006A8 90 93            [ 1] 1278         LDW Y,X 
      0006AA 90 FE            [ 2] 1279         LDW Y,(Y)
      0006AC 27 02            [ 1] 1280         JREQ ZEQU1 
      0006AE A6 00            [ 1] 1281         LD A,#0 
      0006B0                       1282 ZEQU1:  
      0006B0 F7               [ 1] 1283         LD (X),A 
      0006B1 E7 01            [ 1] 1284         LD (1,X),A         
      0006B3 81               [ 4] 1285         RET 
                                   1286 
                                   1287 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1288 ;       AND     ( w w -- w )
                                   1289 ;       Bitwise AND.
                                   1290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006B4                       1291         _HEADER ANDD,3,"AND"
      0006B4 06 A3                    1         .word LINK 
                           0006B6     2         LINK=.
      0006B6 03                       3         .byte 3  
      0006B7 41 4E 44                 4         .ascii "AND"
      0006BA                          5         ANDD:
      0006BA F6               [ 1] 1292         LD  A,(X)    ;D=w
      0006BB E4 02            [ 1] 1293         AND A,(2,X)
      0006BD E7 02            [ 1] 1294         LD (2,X),A
      0006BF E6 01            [ 1] 1295         LD A,(1,X)
      0006C1 E4 03            [ 1] 1296         AND A,(3,X)
      0006C3 E7 03            [ 1] 1297         LD (3,X),A
      0006C5 1C 00 02         [ 2] 1298         ADDW X,#2
      0006C8 81               [ 4] 1299         RET
                                   1300 
                                   1301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1302 ;       OR      ( w w -- w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1303 ;       Bitwise inclusive OR.
                                   1304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006C9                       1305         _HEADER ORR,2,"OR"
      0006C9 06 B6                    1         .word LINK 
                           0006CB     2         LINK=.
      0006CB 02                       3         .byte 2  
      0006CC 4F 52                    4         .ascii "OR"
      0006CE                          5         ORR:
      0006CE F6               [ 1] 1306         LD A,(X)    ;D=w
      0006CF EA 02            [ 1] 1307         OR A,(2,X)
      0006D1 E7 02            [ 1] 1308         LD (2,X),A
      0006D3 E6 01            [ 1] 1309         LD A,(1,X)
      0006D5 EA 03            [ 1] 1310         OR A,(3,X)
      0006D7 E7 03            [ 1] 1311         LD (3,X),A
      0006D9 1C 00 02         [ 2] 1312         ADDW X,#2
      0006DC 81               [ 4] 1313         RET
                                   1314 
                                   1315 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1316 ;       XOR     ( w w -- w )
                                   1317 ;       Bitwise exclusive OR.
                                   1318 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006DD                       1319         _HEADER XORR,3,"XOR"
      0006DD 06 CB                    1         .word LINK 
                           0006DF     2         LINK=.
      0006DF 03                       3         .byte 3  
      0006E0 58 4F 52                 4         .ascii "XOR"
      0006E3                          5         XORR:
      0006E3 F6               [ 1] 1320         LD A,(X)    ;D=w
      0006E4 E8 02            [ 1] 1321         XOR A,(2,X)
      0006E6 E7 02            [ 1] 1322         LD (2,X),A
      0006E8 E6 01            [ 1] 1323         LD A,(1,X)
      0006EA E8 03            [ 1] 1324         XOR A,(3,X)
      0006EC E7 03            [ 1] 1325         LD (3,X),A
      0006EE 1C 00 02         [ 2] 1326         ADDW X,#2
      0006F1 81               [ 4] 1327         RET
                                   1328 
                                   1329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1330 ;       UM+     ( u u -- udsum )
                                   1331 ;       Add two unsigned single
                                   1332 ;       and return a double sum.
                                   1333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F2                       1334         _HEADER UPLUS,3,"UM+"
      0006F2 06 DF                    1         .word LINK 
                           0006F4     2         LINK=.
      0006F4 03                       3         .byte 3  
      0006F5 55 4D 2B                 4         .ascii "UM+"
      0006F8                          5         UPLUS:
      0006F8 A6 01            [ 1] 1335         LD A,#1
      0006FA 90 93            [ 1] 1336         LDW Y,X
      0006FC 90 EE 02         [ 2] 1337         LDW Y,(2,Y)
      0006FF 90 BF 26         [ 2] 1338         LDW YTEMP,Y
      000702 90 93            [ 1] 1339         LDW Y,X
      000704 90 FE            [ 2] 1340         LDW Y,(Y)
      000706 72 B9 00 26      [ 2] 1341         ADDW Y,YTEMP
      00070A EF 02            [ 2] 1342         LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00070C 25 01            [ 1] 1343         JRC     UPL1
      00070E 4F               [ 1] 1344         CLR A
      00070F E7 01            [ 1] 1345 UPL1:   LD     (1,X),A
      000711 7F               [ 1] 1346         CLR (X)
      000712 81               [ 4] 1347         RET
                                   1348 
                                   1349 ;; System and user variables
                                   1350 
                                   1351 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1352 ;       doVAR   ( -- a )
                                   1353 ;       run time code 
                                   1354 ;       for VARIABLE and CREATE.
                                   1355 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1356 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      000713                       1357 DOVAR:
      000713 1D 00 02         [ 2] 1358 	SUBW X,#2
      000716 90 85            [ 2] 1359         POPW Y    ;get return addr (pfa)
      000718 90 FE            [ 2] 1360         LDW Y,(Y) ; indirect address 
      00071A FF               [ 2] 1361         LDW (X),Y    ;push on stack
      00071B 81               [ 4] 1362         RET     ;go to RET of EXEC
                                   1363 
                                   1364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1365 ;       BASE    ( -- a )
                                   1366 ;       Radix base for numeric I/O.
                                   1367 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00071C                       1368         _HEADER BASE,4,"BASE"
      00071C 06 F4                    1         .word LINK 
                           00071E     2         LINK=.
      00071E 04                       3         .byte 4  
      00071F 42 41 53 45              4         .ascii "BASE"
      000723                          5         BASE:
      000723 90 AE 00 06      [ 2] 1369 	LDW Y,#UBASE 
      000727 1D 00 02         [ 2] 1370 	SUBW X,#2
      00072A FF               [ 2] 1371         LDW (X),Y
      00072B 81               [ 4] 1372         RET
                                   1373 
                                   1374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1375 ;       tmp     ( -- a )
                                   1376 ;       A temporary storage.
                                   1377 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00072C                       1378         _HEADER TEMP,3,"TMP"
      00072C 07 1E                    1         .word LINK 
                           00072E     2         LINK=.
      00072E 03                       3         .byte 3  
      00072F 54 4D 50                 4         .ascii "TMP"
      000732                          5         TEMP:
      000732 90 AE 00 0A      [ 2] 1379 	LDW Y,#UTMP
      000736 1D 00 02         [ 2] 1380 	SUBW X,#2
      000739 FF               [ 2] 1381         LDW (X),Y
      00073A 81               [ 4] 1382         RET
                                   1383 
                                   1384 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1385 ;       >IN     ( -- a )
                                   1386 ;        Hold parsing pointer.
                                   1387 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00073B                       1388         _HEADER INN,3,">IN"
      00073B 07 2E                    1         .word LINK 
                           00073D     2         LINK=.
      00073D 03                       3         .byte 3  
      00073E 3E 49 4E                 4         .ascii ">IN"
      000741                          5         INN:
      000741 90 AE 00 0C      [ 2] 1389 	LDW Y,#UINN 
      000745 1D 00 02         [ 2] 1390 	SUBW X,#2
      000748 FF               [ 2] 1391         LDW (X),Y
      000749 81               [ 4] 1392         RET
                                   1393 
                                   1394 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1395 ;       #TIB    ( -- a )
                                   1396 ;       Count in terminal input 
                                   1397 ;       buffer.
                                   1398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00074A                       1399         _HEADER NTIB,4,"#TIB"
      00074A 07 3D                    1         .word LINK 
                           00074C     2         LINK=.
      00074C 04                       3         .byte 4  
      00074D 23 54 49 42              4         .ascii "#TIB"
      000751                          5         NTIB:
      000751 90 AE 00 0E      [ 2] 1400 	LDW Y,#UCTIB 
      000755 1D 00 02         [ 2] 1401 	SUBW X,#2
      000758 FF               [ 2] 1402         LDW (X),Y
      000759 81               [ 4] 1403         RET
                                   1404 
                                   1405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1406 ;       TBUF ( -- a )
                                   1407 ;       address of 128 bytes 
                                   1408 ;       transaction buffer
                                   1409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00075A                       1410         _HEADER TBUF,4,"TBUF"
      00075A 07 4C                    1         .word LINK 
                           00075C     2         LINK=.
      00075C 04                       3         .byte 4  
      00075D 54 42 55 46              4         .ascii "TBUF"
      000761                          5         TBUF:
      000761 90 AE 16 80      [ 2] 1411         ldw y,#ROWBUFF
      000765 1D 00 02         [ 2] 1412         subw x,#CELLL
      000768 FF               [ 2] 1413         ldw (x),y 
      000769 81               [ 4] 1414         ret 
                                   1415 
                                   1416 ; systeme variable 
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1418 ; compilation destination 
                                   1419 ; TFLASH ( -- A )
                                   1420 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00076A                       1421         _HEADER TFLASH,6,"TFLASH"
      00076A 07 5C                    1         .word LINK 
                           00076C     2         LINK=.
      00076C 06                       3         .byte 6  
      00076D 54 46 4C 41 53 48        4         .ascii "TFLASH"
      000773                          5         TFLASH:
      000773 1D 00 02         [ 2] 1422         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000776 90 AE 00 20      [ 2] 1423         ldw y,#UTFLASH
      00077A FF               [ 2] 1424         ldw (x),y 
      00077B 81               [ 4] 1425         ret 
                                   1426 
                                   1427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1428 ;       "EVAL   ( -- a )
                                   1429 ;       Execution vector of EVAL.
                                   1430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00077C                       1431         _HEADER TEVAL,5,"'EVAL"
      00077C 07 6C                    1         .word LINK 
                           00077E     2         LINK=.
      00077E 05                       3         .byte 5  
      00077F 27 45 56 41 4C           4         .ascii "'EVAL"
      000784                          5         TEVAL:
      000784 90 AE 00 12      [ 2] 1432 	LDW Y,#UINTER 
      000788 1D 00 02         [ 2] 1433 	SUBW X,#2
      00078B FF               [ 2] 1434         LDW (X),Y
      00078C 81               [ 4] 1435         RET
                                   1436 
                                   1437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1438 ;       HLD     ( -- a )
                                   1439 ;       Hold a pointer of output
                                   1440 ;        string.
                                   1441 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00078D                       1442         _HEADER HLD,3,"HLD"
      00078D 07 7E                    1         .word LINK 
                           00078F     2         LINK=.
      00078F 03                       3         .byte 3  
      000790 48 4C 44                 4         .ascii "HLD"
      000793                          5         HLD:
      000793 90 AE 00 14      [ 2] 1443 	LDW Y,#UHLD 
      000797 1D 00 02         [ 2] 1444 	SUBW X,#2
      00079A FF               [ 2] 1445         LDW (X),Y
      00079B 81               [ 4] 1446         RET
                                   1447 
                                   1448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1449 ;       CONTEXT ( -- a )
                                   1450 ;       Start vocabulary search.
                                   1451 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00079C                       1452         _HEADER CNTXT,7,"CONTEXT"
      00079C 07 8F                    1         .word LINK 
                           00079E     2         LINK=.
      00079E 07                       3         .byte 7  
      00079F 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      0007A6                          5         CNTXT:
      0007A6 90 AE 00 16      [ 2] 1453 	LDW Y,#UCNTXT
      0007AA 1D 00 02         [ 2] 1454 	SUBW X,#2
      0007AD FF               [ 2] 1455         LDW (X),Y
      0007AE 81               [ 4] 1456         RET
                                   1457 
                                   1458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1459 ;       VP      ( -- a )
                                   1460 ;       Point to top of variables
                                   1461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007AF                       1462         _HEADER VPP,2,"VP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007AF 07 9E                    1         .word LINK 
                           0007B1     2         LINK=.
      0007B1 02                       3         .byte 2  
      0007B2 56 50                    4         .ascii "VP"
      0007B4                          5         VPP:
      0007B4 90 AE 00 18      [ 2] 1463 	LDW Y,#UVP 
      0007B8 1D 00 02         [ 2] 1464 	SUBW X,#2
      0007BB FF               [ 2] 1465         LDW (X),Y
      0007BC 81               [ 4] 1466         RET
                                   1467 
                                   1468 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1469 ;       CP    ( -- a )
                                   1470 ;       Pointer to top of FLASH 
                                   1471 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007BD                       1472         _HEADER CPP,2,"CP"
      0007BD 07 B1                    1         .word LINK 
                           0007BF     2         LINK=.
      0007BF 02                       3         .byte 2  
      0007C0 43 50                    4         .ascii "CP"
      0007C2                          5         CPP:
      0007C2 90 AE 00 1A      [ 2] 1473         ldw y,#UCP 
      0007C6 1D 00 02         [ 2] 1474         subw x,#CELLL 
      0007C9 FF               [ 2] 1475         ldw (x),y 
      0007CA 81               [ 4] 1476         ret                
                                   1477 
                                   1478 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1479 ;       LAST    ( -- a )
                                   1480 ;       Point to last name in 
                                   1481 ;       dictionary.
                                   1482 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007CB                       1483         _HEADER LAST,4,"LAST"
      0007CB 07 BF                    1         .word LINK 
                           0007CD     2         LINK=.
      0007CD 04                       3         .byte 4  
      0007CE 4C 41 53 54              4         .ascii "LAST"
      0007D2                          5         LAST:
      0007D2 90 AE 00 1C      [ 2] 1484 	LDW Y,#ULAST 
      0007D6 1D 00 02         [ 2] 1485 	SUBW X,#2
      0007D9 FF               [ 2] 1486         LDW (X),Y
      0007DA 81               [ 4] 1487         RET
                                   1488 
                                   1489 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1490 ; address of system variable URLAST 
                                   1491 ;       RAMLAST ( -- a )
                                   1492 ; RAM dictionary context 
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007DB                       1494         _HEADER RAMLAST,7,"RAMLAST"
      0007DB 07 CD                    1         .word LINK 
                           0007DD     2         LINK=.
      0007DD 07                       3         .byte 7  
      0007DE 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007E5                          5         RAMLAST:
      0007E5 90 AE 00 22      [ 2] 1495         ldw y,#URLAST 
      0007E9 1D 00 02         [ 2] 1496         subw x,#CELLL 
      0007EC FF               [ 2] 1497         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007ED 81               [ 4] 1498         ret 
                                   1499 
                                   1500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1501 ;       OFFSET ( -- a )
                                   1502 ;       address of system 
                                   1503 ;       variable OFFSET 
                                   1504 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007EE                       1505         _HEADER OFFSET,6,"OFFSET"
      0007EE 07 DD                    1         .word LINK 
                           0007F0     2         LINK=.
      0007F0 06                       3         .byte 6  
      0007F1 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007F7                          5         OFFSET:
      0007F7 1D 00 02         [ 2] 1506         subw x,#CELLL
      0007FA 90 AE 00 1E      [ 2] 1507         ldw y,#UOFFSET 
      0007FE FF               [ 2] 1508         ldw (x),y 
      0007FF 81               [ 4] 1509         ret 
                                   1510 
                                   1511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1512 ; adjust jump address 
                                   1513 ;  adding OFFSET
                                   1514 ; ADR-ADJ ( a -- a+offset )
                                   1515 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000800                       1516 ADRADJ: 
      000800 CD 07 F7         [ 4] 1517         call OFFSET 
      000803 CD 05 27         [ 4] 1518         call AT 
      000806 CC 08 80         [ 2] 1519         jp PLUS 
                                   1520 
                                   1521 
                                   1522 ;; Common functions
                                   1523 
                                   1524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1525 ;       ?DUP    ( w -- w w | 0 )
                                   1526 ;       Dup tos if its is not zero.
                                   1527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000809                       1528         _HEADER QDUP,4,"?DUP"
      000809 07 F0                    1         .word LINK 
                           00080B     2         LINK=.
      00080B 04                       3         .byte 4  
      00080C 3F 44 55 50              4         .ascii "?DUP"
      000810                          5         QDUP:
      000810 90 93            [ 1] 1529         LDW Y,X
      000812 90 FE            [ 2] 1530 	LDW Y,(Y)
      000814 27 04            [ 1] 1531         JREQ     QDUP1
      000816 1D 00 02         [ 2] 1532 	SUBW X,#CELLL 
      000819 FF               [ 2] 1533         LDW (X),Y
      00081A 81               [ 4] 1534 QDUP1:  RET
                                   1535 
                                   1536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1537 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1538 ;       Rot 3rd item to top.
                                   1539 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00081B                       1540         _HEADER ROT,3,"ROT"
      00081B 08 0B                    1         .word LINK 
                           00081D     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00081D 03                       3         .byte 3  
      00081E 52 4F 54                 4         .ascii "ROT"
      000821                          5         ROT:
      000821 90 93            [ 1] 1541         ldw y,x 
      000823 90 FE            [ 2] 1542         ldw y,(y)
      000825 90 89            [ 2] 1543         pushw y 
      000827 90 93            [ 1] 1544         ldw y,x 
      000829 90 EE 04         [ 2] 1545         ldw y,(4,y)
      00082C FF               [ 2] 1546         ldw (x),y 
      00082D 90 93            [ 1] 1547         ldw y,x 
      00082F 90 EE 02         [ 2] 1548         ldw y,(2,y)
      000832 EF 04            [ 2] 1549         ldw (4,x),y 
      000834 90 85            [ 2] 1550         popw y 
      000836 EF 02            [ 2] 1551         ldw (2,x),y
      000838 81               [ 4] 1552         ret 
                                   1553 
                                   1554 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1555 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1556 ;    rotate left 3 top elements 
                                   1557 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000839                       1558     _HEADER NROT,4,"<ROT"
      000839 08 1D                    1         .word LINK 
                           00083B     2         LINK=.
      00083B 04                       3         .byte 4  
      00083C 3C 52 4F 54              4         .ascii "<ROT"
      000840                          5         NROT:
      000840 90 93            [ 1] 1559     LDW Y,X 
      000842 90 FE            [ 2] 1560     LDW Y,(Y)
      000844 90 89            [ 2] 1561     PUSHW Y ; n3 >R 
      000846 90 93            [ 1] 1562     LDW Y,X 
      000848 90 EE 02         [ 2] 1563     LDW Y,(2,Y) ; Y = n2 
      00084B FF               [ 2] 1564     LDW (X),Y   ; TOS = n2 
      00084C 90 93            [ 1] 1565     LDW Y,X    
      00084E 90 EE 04         [ 2] 1566     LDW Y,(4,Y) ; Y = n1 
      000851 EF 02            [ 2] 1567     LDW (2,X),Y ;   = n1 
      000853 90 85            [ 2] 1568     POPW Y  ; R> Y 
      000855 EF 04            [ 2] 1569     LDW (4,X),Y ; = n3 
      000857 81               [ 4] 1570     RET 
                                   1571 
                                   1572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1573 ;       2DROP   ( w w -- )
                                   1574 ;       Discard two items on stack.
                                   1575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000858                       1576         _HEADER DDROP,5,"2DROP"
      000858 08 3B                    1         .word LINK 
                           00085A     2         LINK=.
      00085A 05                       3         .byte 5  
      00085B 32 44 52 4F 50           4         .ascii "2DROP"
      000860                          5         DDROP:
      000860 1C 00 04         [ 2] 1577         ADDW X,#4
      000863 81               [ 4] 1578         RET
                                   1579 
                                   1580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1581 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1582 ;       Duplicate top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000864                       1584         _HEADER DDUP,4,"2DUP"
      000864 08 5A                    1         .word LINK 
                           000866     2         LINK=.
      000866 04                       3         .byte 4  
      000867 32 44 55 50              4         .ascii "2DUP"
      00086B                          5         DDUP:
      00086B 1D 00 04         [ 2] 1585         SUBW X,#2*CELLL 
      00086E 90 93            [ 1] 1586         LDW Y,X
      000870 90 EE 06         [ 2] 1587         LDW Y,(3*CELLL,Y)
      000873 EF 02            [ 2] 1588         LDW (CELLL,X),Y
      000875 90 93            [ 1] 1589         LDW Y,X
      000877 90 EE 04         [ 2] 1590         LDW Y,(2*CELLL,Y)
      00087A FF               [ 2] 1591         LDW (X),Y
      00087B 81               [ 4] 1592         RET
                                   1593 
                                   1594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1595 ;       +       ( w w -- sum )
                                   1596 ;       Add top two items.
                                   1597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087C                       1598         _HEADER PLUS,1,"+"
      00087C 08 66                    1         .word LINK 
                           00087E     2         LINK=.
      00087E 01                       3         .byte 1  
      00087F 2B                       4         .ascii "+"
      000880                          5         PLUS:
      000880 90 93            [ 1] 1599         LDW Y,X
      000882 90 FE            [ 2] 1600         LDW Y,(Y)
      000884 90 BF 26         [ 2] 1601         LDW YTEMP,Y
      000887 1C 00 02         [ 2] 1602         ADDW X,#2
      00088A 90 93            [ 1] 1603         LDW Y,X
      00088C 90 FE            [ 2] 1604         LDW Y,(Y)
      00088E 72 B9 00 26      [ 2] 1605         ADDW Y,YTEMP
      000892 FF               [ 2] 1606         LDW (X),Y
      000893 81               [ 4] 1607         RET
                                   1608 
                                   1609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1610 ;       TRUE ( -- -1 )
                                   1611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000894                       1612         _HEADER TRUE,4,"TRUE"
      000894 08 7E                    1         .word LINK 
                           000896     2         LINK=.
      000896 04                       3         .byte 4  
      000897 54 52 55 45              4         .ascii "TRUE"
      00089B                          5         TRUE:
      00089B A6 FF            [ 1] 1613         LD A,#255 
      00089D 1D 00 02         [ 2] 1614         SUBW X,#CELLL
      0008A0 F7               [ 1] 1615         LD (X),A 
      0008A1 E7 01            [ 1] 1616         LD (1,X),A 
      0008A3 81               [ 4] 1617         RET 
                                   1618 
                                   1619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1620 ;       FALSE ( -- 0 )
                                   1621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008A4                       1622         _HEADER FALSE,5,"FALSE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0008A4 08 96                    1         .word LINK 
                           0008A6     2         LINK=.
      0008A6 05                       3         .byte 5  
      0008A7 46 41 4C 53 45           4         .ascii "FALSE"
      0008AC                          5         FALSE:
      0008AC 1D 00 02         [ 2] 1623         SUBW X,#CELLL 
      0008AF 7F               [ 1] 1624         CLR (X) 
      0008B0 6F 01            [ 1] 1625         CLR (1,X)
      0008B2 81               [ 4] 1626         RET 
                                   1627 
                                   1628 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1629 ;       NOT     ( w -- w )
                                   1630 ;       One's complement of tos.
                                   1631 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008B3                       1632         _HEADER INVER,3,"NOT"
      0008B3 08 A6                    1         .word LINK 
                           0008B5     2         LINK=.
      0008B5 03                       3         .byte 3  
      0008B6 4E 4F 54                 4         .ascii "NOT"
      0008B9                          5         INVER:
      0008B9 90 93            [ 1] 1633         LDW Y,X
      0008BB 90 FE            [ 2] 1634         LDW Y,(Y)
      0008BD 90 53            [ 2] 1635         CPLW Y
      0008BF FF               [ 2] 1636         LDW (X),Y
      0008C0 81               [ 4] 1637         RET
                                   1638 
                                   1639 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1640 ;       NEGATE  ( n -- -n )
                                   1641 ;       Two's complement of tos.
                                   1642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008C1                       1643         _HEADER NEGAT,6,"NEGATE"
      0008C1 08 B5                    1         .word LINK 
                           0008C3     2         LINK=.
      0008C3 06                       3         .byte 6  
      0008C4 4E 45 47 41 54 45        4         .ascii "NEGATE"
      0008CA                          5         NEGAT:
      0008CA 90 93            [ 1] 1644         LDW Y,X
      0008CC 90 FE            [ 2] 1645         LDW Y,(Y)
      0008CE 90 50            [ 2] 1646         NEGW Y
      0008D0 FF               [ 2] 1647         LDW (X),Y
      0008D1 81               [ 4] 1648         RET
                                   1649 
                                   1650 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1651 ;       DNEGATE ( d -- -d )
                                   1652 ;       Two's complement of double.
                                   1653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008D2                       1654         _HEADER DNEGA,7,"DNEGATE"
      0008D2 08 C3                    1         .word LINK 
                           0008D4     2         LINK=.
      0008D4 07                       3         .byte 7  
      0008D5 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0008DC                          5         DNEGA:
      0008DC 90 93            [ 1] 1655         LDW Y,X
      0008DE 90 FE            [ 2] 1656 	LDW Y,(Y)
      0008E0 90 53            [ 2] 1657         CPLW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0008E2 90 89            [ 2] 1658         PUSHW Y      ; Y >R 
      0008E4 90 93            [ 1] 1659         LDW Y,X
      0008E6 90 EE 02         [ 2] 1660         LDW Y,(2,Y)
      0008E9 90 53            [ 2] 1661         CPLW Y
      0008EB 72 A9 00 01      [ 2] 1662         ADDW Y,#1
      0008EF EF 02            [ 2] 1663         LDW (2,X),Y
      0008F1 90 85            [ 2] 1664         POPW Y       ; R> Y  
      0008F3 24 02            [ 1] 1665         JRNC DN1 
      0008F5 90 5C            [ 1] 1666         INCW Y
      0008F7 FF               [ 2] 1667 DN1:    LDW (X),Y
      0008F8 81               [ 4] 1668         RET
                                   1669 
                                   1670 
                                   1671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1672 ;       S>D ( n -- d )
                                   1673 ; convert single integer to double 
                                   1674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008F9                       1675         _HEADER STOD,3,"S>D"
      0008F9 08 D4                    1         .word LINK 
                           0008FB     2         LINK=.
      0008FB 03                       3         .byte 3  
      0008FC 53 3E 44                 4         .ascii "S>D"
      0008FF                          5         STOD:
      0008FF 1D 00 02         [ 2] 1676         SUBW X,#CELLL 
      000902 7F               [ 1] 1677         CLR (X) 
      000903 6F 01            [ 1] 1678         CLR (1,X) 
      000905 90 93            [ 1] 1679         LDW Y,X 
      000907 90 EE 02         [ 2] 1680         LDW Y,(2,Y)
      00090A 2A 05            [ 1] 1681         JRPL 1$
      00090C 90 AE FF FF      [ 2] 1682         LDW Y,#-1 
      000910 FF               [ 2] 1683         LDW (X),Y 
      000911 81               [ 4] 1684 1$:     RET 
                                   1685 
                                   1686 
                                   1687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1688 ;       -       ( n1 n2 -- n1-n2 )
                                   1689 ;       Subtraction.
                                   1690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000912                       1691         _HEADER SUBB,1,"-"
      000912 08 FB                    1         .word LINK 
                           000914     2         LINK=.
      000914 01                       3         .byte 1  
      000915 2D                       4         .ascii "-"
      000916                          5         SUBB:
      000916 90 93            [ 1] 1692         LDW Y,X
      000918 90 FE            [ 2] 1693         LDW Y,(Y) ; n2 
      00091A 90 BF 26         [ 2] 1694         LDW YTEMP,Y 
      00091D 1C 00 02         [ 2] 1695         ADDW X,#CELLL 
      000920 90 93            [ 1] 1696         LDW Y,X
      000922 90 FE            [ 2] 1697         LDW Y,(Y) ; n1 
      000924 72 B2 00 26      [ 2] 1698         SUBW Y,YTEMP ; n1-n2 
      000928 FF               [ 2] 1699         LDW (X),Y
      000929 81               [ 4] 1700         RET
                                   1701 
                                   1702 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   1703 ;       ABS     ( n -- n )
                                   1704 ;       Return  absolute value of n.
                                   1705 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00092A                       1706         _HEADER ABSS,3,"ABS"
      00092A 09 14                    1         .word LINK 
                           00092C     2         LINK=.
      00092C 03                       3         .byte 3  
      00092D 41 42 53                 4         .ascii "ABS"
      000930                          5         ABSS:
      000930 90 93            [ 1] 1707         LDW Y,X
      000932 90 FE            [ 2] 1708 	LDW Y,(Y)
      000934 2A 03            [ 1] 1709         JRPL     AB1     ;negate:
      000936 90 50            [ 2] 1710         NEGW     Y     ;else negate hi byte
      000938 FF               [ 2] 1711         LDW (X),Y
      000939 81               [ 4] 1712 AB1:    RET
                                   1713 
                                   1714 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1715 ;       =       ( w w -- t )
                                   1716 ;       Return true if top two are equal.
                                   1717 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00093A                       1718         _HEADER EQUAL,1,"="
      00093A 09 2C                    1         .word LINK 
                           00093C     2         LINK=.
      00093C 01                       3         .byte 1  
      00093D 3D                       4         .ascii "="
      00093E                          5         EQUAL:
      00093E A6 FF            [ 1] 1719         LD A,#0xFF  ;true
      000940 90 93            [ 1] 1720         LDW Y,X    
      000942 90 FE            [ 2] 1721         LDW Y,(Y)   ; n2 
      000944 1C 00 02         [ 2] 1722         ADDW X,#CELLL 
      000947 F3               [ 2] 1723         CPW Y,(X)   ; n1==n2
      000948 27 01            [ 1] 1724         JREQ EQ1 
      00094A 4F               [ 1] 1725         CLR A 
      00094B F7               [ 1] 1726 EQ1:    LD (X),A
      00094C E7 01            [ 1] 1727         LD (1,X),A
      00094E 81               [ 4] 1728 	RET     
                                   1729 
                                   1730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1731 ;       U<      ( u1 u2 -- f )
                                   1732 ;       Unsigned compare of top two items.
                                   1733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00094F                       1734         _HEADER ULESS,2,"U<"
      00094F 09 3C                    1         .word LINK 
                           000951     2         LINK=.
      000951 02                       3         .byte 2  
      000952 55 3C                    4         .ascii "U<"
      000954                          5         ULESS:
      000954 A6 FF            [ 1] 1735         LD A,#0xFF  ;true
      000956 90 93            [ 1] 1736         LDW Y,X    
      000958 90 EE 02         [ 2] 1737         LDW Y,(2,Y) ; u1 
      00095B F3               [ 2] 1738         CPW Y,(X)   ; cpw u1  u2 
      00095C 25 01            [ 1] 1739         JRULT     ULES1
      00095E 4F               [ 1] 1740         CLR A
      00095F 1C 00 02         [ 2] 1741 ULES1:  ADDW X,#CELLL 
      000962 F7               [ 1] 1742         LD (X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000963 E7 01            [ 1] 1743         LD (1,X),A
      000965 81               [ 4] 1744 	RET     
                                   1745 
                                   1746 
                                   1747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1748 ;       <       ( n1 n2 -- t )
                                   1749 ;       Signed compare of top two items.
                                   1750 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000966                       1751         _HEADER LESS,1,"<"
      000966 09 51                    1         .word LINK 
                           000968     2         LINK=.
      000968 01                       3         .byte 1  
      000969 3C                       4         .ascii "<"
      00096A                          5         LESS:
      00096A A6 FF            [ 1] 1752         LD A,#0xFF  ;true
      00096C 90 93            [ 1] 1753         LDW Y,X    
      00096E 90 EE 02         [ 2] 1754         LDW Y,(2,Y)  ; n1 
      000971 F3               [ 2] 1755         CPW Y,(X)  ; n1 < n2 ? 
      000972 2F 01            [ 1] 1756         JRSLT     LT1
      000974 4F               [ 1] 1757         CLR A
      000975 1C 00 02         [ 2] 1758 LT1:    ADDW X,#CELLL 
      000978 F7               [ 1] 1759         LD (X),A
      000979 E7 01            [ 1] 1760         LD (1,X),A
      00097B 81               [ 4] 1761 	RET     
                                   1762 
                                   1763 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1764 ;   U> ( u1 u2 -- f )
                                   1765 ;   f = true if u1>u2 
                                   1766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00097C                       1767         _HEADER UGREAT,2,"U>"
      00097C 09 68                    1         .word LINK 
                           00097E     2         LINK=.
      00097E 02                       3         .byte 2  
      00097F 55 3E                    4         .ascii "U>"
      000981                          5         UGREAT:
      000981 A6 FF            [ 1] 1768         LD A,#255  
      000983 90 93            [ 1] 1769         LDW Y,X 
      000985 90 EE 02         [ 2] 1770         LDW Y,(2,Y)  ; u1 
      000988 F3               [ 2] 1771         CPW Y,(X)  ; u1 > u2 
      000989 22 01            [ 1] 1772         JRUGT UGREAT1 
      00098B 4F               [ 1] 1773         CLR A   
      00098C                       1774 UGREAT1:
      00098C 1C 00 02         [ 2] 1775         ADDW X,#CELLL 
      00098F F7               [ 1] 1776         LD (X),A 
      000990 E7 01            [ 1] 1777         LD (1,X),A 
      000992 81               [ 4] 1778         RET 
                                   1779 
                                   1780 
                                   1781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1782 ;       >   (n1 n2 -- f )
                                   1783 ;  signed compare n1 n2 
                                   1784 ;  true if n1 > n2 
                                   1785 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000993                       1786         _HEADER GREAT,1,">"
      000993 09 7E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000995     2         LINK=.
      000995 01                       3         .byte 1  
      000996 3E                       4         .ascii ">"
      000997                          5         GREAT:
      000997 A6 FF            [ 1] 1787         LD A,#0xFF ;
      000999 90 93            [ 1] 1788         LDW Y,X 
      00099B 90 EE 02         [ 2] 1789         LDW Y,(2,Y)  ; n1 
      00099E F3               [ 2] 1790         CPW Y,(X) ; n1 > n2 ?  
      00099F 2C 01            [ 1] 1791         JRSGT GREAT1 
      0009A1 4F               [ 1] 1792         CLR  A
      0009A2                       1793 GREAT1:
      0009A2 1C 00 02         [ 2] 1794         ADDW X,#CELLL 
      0009A5 F7               [ 1] 1795         LD (X),A 
      0009A6 E7 01            [ 1] 1796         LD (1,X),A 
      0009A8 81               [ 4] 1797         RET 
                                   1798 
                                   1799 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1800 ;       MAX     ( n n -- n )
                                   1801 ;       Return greater of two top items.
                                   1802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009A9                       1803         _HEADER MAX,3,"MAX"
      0009A9 09 95                    1         .word LINK 
                           0009AB     2         LINK=.
      0009AB 03                       3         .byte 3  
      0009AC 4D 41 58                 4         .ascii "MAX"
      0009AF                          5         MAX:
      0009AF 90 93            [ 1] 1804         LDW Y,X    
      0009B1 90 FE            [ 2] 1805         LDW Y,(Y) ; n2 
      0009B3 E3 02            [ 2] 1806         CPW Y,(2,X)   
      0009B5 2F 02            [ 1] 1807         JRSLT  MAX1
      0009B7 EF 02            [ 2] 1808         LDW (2,X),Y
      0009B9 1C 00 02         [ 2] 1809 MAX1:   ADDW X,#2
      0009BC 81               [ 4] 1810 	RET     
                                   1811 
                                   1812 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1813 ;       MIN     ( n n -- n )
                                   1814 ;       Return smaller of top two items.
                                   1815 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009BD                       1816         _HEADER MIN,3,"MIN"
      0009BD 09 AB                    1         .word LINK 
                           0009BF     2         LINK=.
      0009BF 03                       3         .byte 3  
      0009C0 4D 49 4E                 4         .ascii "MIN"
      0009C3                          5         MIN:
      0009C3 90 93            [ 1] 1817         LDW Y,X    
      0009C5 90 FE            [ 2] 1818         LDW Y,(Y)  ; n2 
      0009C7 E3 02            [ 2] 1819         CPW Y,(2,X) 
      0009C9 2C 02            [ 1] 1820         JRSGT MIN1
      0009CB EF 02            [ 2] 1821         LDW (2,X),Y
      0009CD 1C 00 02         [ 2] 1822 MIN1:	ADDW X,#2
      0009D0 81               [ 4] 1823 	RET     
                                   1824 
                                   1825 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1826 ;       WITHIN  ( u ul uh -- t )
                                   1827 ;       Return true if u is within
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   1828 ;       range of ul and uh. ( ul <= u < uh )
                                   1829 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009D1                       1830         _HEADER WITHI,6,"WITHIN"
      0009D1 09 BF                    1         .word LINK 
                           0009D3     2         LINK=.
      0009D3 06                       3         .byte 6  
      0009D4 57 49 54 48 49 4E        4         .ascii "WITHIN"
      0009DA                          5         WITHI:
      0009DA CD 06 85         [ 4] 1831         CALL     OVER
      0009DD CD 09 16         [ 4] 1832         CALL     SUBB
      0009E0 CD 06 26         [ 4] 1833         CALL     TOR
      0009E3 CD 09 16         [ 4] 1834         CALL     SUBB
      0009E6 CD 05 78         [ 4] 1835         CALL     RFROM
      0009E9 CC 09 54         [ 2] 1836         JP     ULESS
                                   1837 
                                   1838 ;; Divide
                                   1839 
                                   1840 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1841 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1842 ;       Unsigned divide of a double by a
                                   1843 ;       single. Return mod and quotient.
                                   1844 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1845 ; 2021-02-22
                                   1846 ; changed algorithm for Jeeek one 
                                   1847 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009EC                       1848         _HEADER UMMOD,6,"UM/MOD"
      0009EC 09 D3                    1         .word LINK 
                           0009EE     2         LINK=.
      0009EE 06                       3         .byte 6  
      0009EF 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009F5                          5         UMMOD:
      0009F5 90 93            [ 1] 1849         LDW     Y,X             ; stack pointer to Y
      0009F7 FE               [ 2] 1850         LDW     X,(X)           ; un
      0009F8 BF 26            [ 2] 1851         LDW     YTEMP,X         ; save un
      0009FA 93               [ 1] 1852         LDW     X,Y
      0009FB 5C               [ 1] 1853         INCW    X               ; drop un
      0009FC 5C               [ 1] 1854         INCW    X
      0009FD 89               [ 2] 1855         PUSHW   X               ; save stack pointer
      0009FE FE               [ 2] 1856         LDW     X,(X)           ; X=udh
      0009FF 26 0B            [ 1] 1857         JRNE    MMSM0
      000A01 1E 01            [ 2] 1858         LDW    X,(1,SP)
      000A03 EE 02            [ 2] 1859         LDW    X,(2,X)          ; udl 
      000A05 90 BE 26         [ 2] 1860         LDW     Y,YTEMP         ;divisor 
      000A08 65               [ 2] 1861         DIVW    X,Y             ; udl/un 
      000A09 51               [ 1] 1862         EXGW    X,Y 
      000A0A 20 26            [ 2] 1863         JRA     MMSMb 
      000A0C                       1864 MMSM0:    
      000A0C 90 EE 04         [ 2] 1865         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      000A0F B3 26            [ 2] 1866         CPW     X,YTEMP
      000A11 25 09            [ 1] 1867         JRULT   MMSM1           ; X is still on the R-stack
      000A13 85               [ 2] 1868         POPW    X               ; restore stack pointer
      000A14 90 5F            [ 1] 1869         CLRW    Y
      000A16 EF 02            [ 2] 1870         LDW     (2,X),Y         ; remainder 0
      000A18 90 5A            [ 2] 1871         DECW    Y
      000A1A FF               [ 2] 1872         LDW     (X),Y           ; quotient max. 16 bit value
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000A1B 81               [ 4] 1873         RET
      000A1C                       1874 MMSM1:
      000A1C A6 10            [ 1] 1875         LD      A,#16           ; loop count
      000A1E 90 58            [ 2] 1876         SLLW    Y               ; udl shift udl into udh
      000A20                       1877 MMSM3:
      000A20 59               [ 2] 1878         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      000A21 25 04            [ 1] 1879         JRC     MMSMa           ; if carry out of rotate
      000A23 B3 26            [ 2] 1880         CPW     X,YTEMP         ; compare udh to un
      000A25 25 05            [ 1] 1881         JRULT   MMSM4           ; can't subtract
      000A27                       1882 MMSMa:
      000A27 72 B0 00 26      [ 2] 1883         SUBW    X,YTEMP         ; can subtract
      000A2B 98               [ 1] 1884         RCF
      000A2C                       1885 MMSM4:
      000A2C 8C               [ 1] 1886         CCF                     ; quotient bit
      000A2D 90 59            [ 2] 1887         RLCW    Y               ; rotate into quotient, rotate out udl
      000A2F 4A               [ 1] 1888         DEC     A               ; repeat
      000A30 26 EE            [ 1] 1889         JRNE    MMSM3           ; if A == 0
      000A32                       1890 MMSMb:
      000A32 BF 26            [ 2] 1891         LDW     YTEMP,X         ; done, save remainder
      000A34 85               [ 2] 1892         POPW    X               ; restore stack pointer
      000A35 FF               [ 2] 1893         LDW     (X),Y           ; save quotient
      000A36 90 BE 26         [ 2] 1894         LDW     Y,YTEMP         ; remainder onto stack
      000A39 EF 02            [ 2] 1895         LDW     (2,X),Y
      000A3B 81               [ 4] 1896         RET
                                   1897 
                                   1898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1899 ;   U/MOD ( u1 u2 -- ur uq )
                                   1900 ;   unsigned divide u1/u2 
                                   1901 ;   return remainder and quotient 
                                   1902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A3C                       1903         _HEADER USLMOD,5,"U/MOD"
      000A3C 09 EE                    1         .word LINK 
                           000A3E     2         LINK=.
      000A3E 05                       3         .byte 5  
      000A3F 55 2F 4D 4F 44           4         .ascii "U/MOD"
      000A44                          5         USLMOD:
      000A44 90 93            [ 1] 1904         LDW Y,X 
      000A46 90 FE            [ 2] 1905         LDW Y,(Y)  ; dividend 
      000A48 89               [ 2] 1906         PUSHW X    ; DP >R 
      000A49 EE 02            [ 2] 1907         LDW X,(2,X) ; divisor 
      000A4B 65               [ 2] 1908         DIVW X,Y 
      000A4C 89               [ 2] 1909         PUSHW X     ; quotient 
      000A4D 1E 03            [ 2] 1910         LDW X,(3,SP) ; DP 
      000A4F EF 02            [ 2] 1911         LDW (2,X),Y ; remainder 
      000A51 16 01            [ 2] 1912         LDW Y,(1,SP) ; quotient 
      000A53 FF               [ 2] 1913         LDW (X),Y 
      000A54 5B 04            [ 2] 1914         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A56 81               [ 4] 1915         RET 
                                   1916 
                                   1917 
                                   1918 
                                   1919 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1920 ;       M/MOD   ( d n -- r q )
                                   1921 ;       Signed floored divide of double by
                                   1922 ;       single. Return mod and quotient.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   1923 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A57                       1924         _HEADER MSMOD,5,"M/MOD"
      000A57 0A 3E                    1         .word LINK 
                           000A59     2         LINK=.
      000A59 05                       3         .byte 5  
      000A5A 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A5F                          5         MSMOD:
      000A5F CD 06 5D         [ 4] 1925         CALL	DUPP
      000A62 CD 06 94         [ 4] 1926         CALL	ZLESS
      000A65 CD 06 5D         [ 4] 1927         CALL	DUPP
      000A68 CD 06 26         [ 4] 1928         CALL	TOR
      000A6B CD 04 DC         [ 4] 1929         CALL	QBRAN
      000A6E 0A 7C                 1930         .word	MMOD1
      000A70 CD 08 CA         [ 4] 1931         CALL	NEGAT
      000A73 CD 06 26         [ 4] 1932         CALL	TOR
      000A76 CD 08 DC         [ 4] 1933         CALL	DNEGA
      000A79 CD 05 78         [ 4] 1934         CALL	RFROM
      000A7C CD 06 26         [ 4] 1935 MMOD1:	CALL	TOR
      000A7F CD 06 5D         [ 4] 1936         CALL	DUPP
      000A82 CD 06 94         [ 4] 1937         CALL	ZLESS
      000A85 CD 04 DC         [ 4] 1938         CALL	QBRAN
      000A88 0A 90                 1939         .word	MMOD2
      000A8A CD 05 89         [ 4] 1940         CALL	RAT
      000A8D CD 08 80         [ 4] 1941         CALL	PLUS
      000A90 CD 05 78         [ 4] 1942 MMOD2:	CALL	RFROM
      000A93 CD 09 F5         [ 4] 1943         CALL	UMMOD
      000A96 CD 05 78         [ 4] 1944         CALL	RFROM
      000A99 CD 04 DC         [ 4] 1945         CALL	QBRAN
      000A9C 0A A7                 1946         .word	MMOD3
      000A9E CD 06 6D         [ 4] 1947         CALL	SWAPP
      000AA1 CD 08 CA         [ 4] 1948         CALL	NEGAT
      000AA4 CC 06 6D         [ 2] 1949         JP	SWAPP
      000AA7 81               [ 4] 1950 MMOD3:	RET
                                   1951 
                                   1952 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1953 ;       /MOD    ( n1 n2 -- r q )
                                   1954 ;       Signed divide n1/n2. 
                                   1955 ;       Return mod and quotient.
                                   1956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AA8                       1957         _HEADER SLMOD,4,"/MOD"
      000AA8 0A 59                    1         .word LINK 
                           000AAA     2         LINK=.
      000AAA 04                       3         .byte 4  
      000AAB 2F 4D 4F 44              4         .ascii "/MOD"
      000AAF                          5         SLMOD:
      000AAF F6               [ 1] 1958         LD A,(X)
      000AB0 88               [ 1] 1959         PUSH A   ; n2 sign 
      000AB1 E6 02            [ 1] 1960         LD A,(2,X)
      000AB3 88               [ 1] 1961         PUSH A    ; n1 sign 
      000AB4 CD 09 30         [ 4] 1962         CALL ABSS 
      000AB7 CD 06 26         [ 4] 1963         CALL TOR  ; 
      000ABA CD 09 30         [ 4] 1964         CALL ABSS 
      000ABD CD 05 89         [ 4] 1965         CALL RAT   
      000AC0 CD 0A 44         [ 4] 1966         CALL USLMOD 
      000AC3 7B 03            [ 1] 1967         LD A,(3,SP)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AC5 1A 04            [ 1] 1968         OR A,(4,SP)
      000AC7 2A 30            [ 1] 1969         JRPL SLMOD8 ; both positive nothing to change 
      000AC9 7B 03            [ 1] 1970         LD A,(3,SP)
      000ACB 18 04            [ 1] 1971         XOR A,(4,SP)
      000ACD 2A 1D            [ 1] 1972         JRPL SLMOD1
                                   1973 ; dividend and divisor are opposite sign          
      000ACF CD 08 CA         [ 4] 1974         CALL NEGAT ; negative quotient
      000AD2 CD 06 85         [ 4] 1975         CALL OVER 
      000AD5 CD 06 A6         [ 4] 1976         CALL ZEQUAL 
      000AD8                       1977         _TBRAN SLMOD8 
      000AD8 CD 04 EA         [ 4]    1     CALL TBRAN 
      000ADB 0A F9                    2     .word SLMOD8 
      000ADD CD 0B F4         [ 4] 1978         CALL ONEM   ; add one to quotient 
      000AE0 CD 05 89         [ 4] 1979         CALL RAT 
      000AE3 CD 08 21         [ 4] 1980         CALL ROT 
      000AE6 CD 09 16         [ 4] 1981         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000AE9 CD 06 6D         [ 4] 1982         CALL SWAPP
      000AEC                       1983 SLMOD1:
      000AEC 7B 04            [ 1] 1984         LD A,(4,SP) ; divisor sign 
      000AEE 2A 09            [ 1] 1985         JRPL SLMOD8 
      000AF0 CD 06 26         [ 4] 1986         CALL TOR 
      000AF3 CD 08 CA         [ 4] 1987         CALL NEGAT ; if divisor negative negate remainder 
      000AF6 CD 05 78         [ 4] 1988         CALL RFROM 
      000AF9                       1989 SLMOD8: 
      000AF9 5B 04            [ 2] 1990         ADDW SP,#4 
      000AFB 81               [ 4] 1991         RET 
                                   1992 
                                   1993 
                                   1994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1995 ;       MOD     ( n n -- r )
                                   1996 ;       Signed divide. Return mod only.
                                   1997 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AFC                       1998         _HEADER MODD,3,"MOD"
      000AFC 0A AA                    1         .word LINK 
                           000AFE     2         LINK=.
      000AFE 03                       3         .byte 3  
      000AFF 4D 4F 44                 4         .ascii "MOD"
      000B02                          5         MODD:
      000B02 CD 0A AF         [ 4] 1999 	CALL	SLMOD
      000B05 CC 06 53         [ 2] 2000 	JP	DROP
                                   2001 
                                   2002 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2003 ;       /       ( n n -- q )
                                   2004 ;       Signed divide. Return quotient only.
                                   2005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B08                       2006         _HEADER SLASH,1,"/"
      000B08 0A FE                    1         .word LINK 
                           000B0A     2         LINK=.
      000B0A 01                       3         .byte 1  
      000B0B 2F                       4         .ascii "/"
      000B0C                          5         SLASH:
      000B0C CD 0A AF         [ 4] 2007         CALL	SLMOD
      000B0F CD 06 6D         [ 4] 2008         CALL	SWAPP
      000B12 CC 06 53         [ 2] 2009         JP	DROP
                                   2010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2011 ;; Multiply
                                   2012 
                                   2013 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2014 ;       UM*     ( u1 u2 -- ud )
                                   2015 ;       Unsigned multiply. Return 
                                   2016 ;       double product.
                                   2017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B15                       2018         _HEADER UMSTA,3,"UM*"
      000B15 0B 0A                    1         .word LINK 
                           000B17     2         LINK=.
      000B17 03                       3         .byte 3  
      000B18 55 4D 2A                 4         .ascii "UM*"
      000B1B                          5         UMSTA:
                                   2019 ; stack have 4 bytes u1=a:b u2=c:d
                                   2020         ;; bytes offset on data stack 
                           000002  2021         u1hi=2 
                           000003  2022         u1lo=3 
                           000000  2023         u2hi=0 
                           000001  2024         u2lo=1 
                                   2025         ;;;;;; local variables ;;;;;;;;;
                                   2026         ;; product bytes offset on return stack 
                           000001  2027         UD1=1  ; ud bits 31..24
                           000002  2028         UD2=2  ; ud bits 23..16
                           000003  2029         UD3=3  ; ud bits 15..8 
                           000004  2030         UD4=4  ; ud bits 7..0 
                                   2031         ;; local variable for product set to zero   
      000B1B 90 5F            [ 1] 2032         clrw y 
      000B1D 90 89            [ 2] 2033         pushw y  ; bits 15..0
      000B1F 90 89            [ 2] 2034         pushw y  ; bits 31..16 
      000B21 E6 03            [ 1] 2035         ld a,(u1lo,x) ;  
      000B23 90 97            [ 1] 2036         ld yl,a 
      000B25 E6 01            [ 1] 2037         ld a,(u2lo,x)   ; 
      000B27 90 42            [ 4] 2038         mul y,a    ; u1lo*u2lo  
      000B29 17 03            [ 2] 2039         ldw (UD3,sp),y ; lowest weight product 
      000B2B E6 03            [ 1] 2040         ld a,(u1lo,x)
      000B2D 90 97            [ 1] 2041         ld yl,a 
      000B2F E6 00            [ 1] 2042         ld a,(u2hi,x)
      000B31 90 42            [ 4] 2043         mul y,a  ; u1lo*u2hi 
                                   2044         ;;; do the partial sum 
      000B33 72 F9 02         [ 2] 2045         addw y,(UD2,sp)
      000B36 4F               [ 1] 2046         clr a 
      000B37 49               [ 1] 2047         rlc a
      000B38 6B 01            [ 1] 2048         ld (UD1,sp),a 
      000B3A 17 02            [ 2] 2049         ldw (UD2,sp),y 
      000B3C E6 02            [ 1] 2050         ld a,(u1hi,x)
      000B3E 90 97            [ 1] 2051         ld yl,a 
      000B40 E6 01            [ 1] 2052         ld a,(u2lo,x)
      000B42 90 42            [ 4] 2053         mul y,a   ; u1hi*u2lo  
                                   2054         ;; do partial sum 
      000B44 72 F9 02         [ 2] 2055         addw y,(UD2,sp)
      000B47 4F               [ 1] 2056         clr a 
      000B48 19 01            [ 1] 2057         adc a,(UD1,sp)
      000B4A 6B 01            [ 1] 2058         ld (UD1,sp),a  
      000B4C 17 02            [ 2] 2059         ldw (UD2,sp),y 
      000B4E E6 02            [ 1] 2060         ld a,(u1hi,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B50 90 97            [ 1] 2061         ld yl,a 
      000B52 E6 00            [ 1] 2062         ld a,(u2hi,x)
      000B54 90 42            [ 4] 2063         mul y,a  ;  u1hi*u2hi highest weight product 
                                   2064         ;;; do partial sum 
      000B56 72 F9 01         [ 2] 2065         addw y,(UD1,sp)
      000B59 FF               [ 2] 2066         ldw (x),y  ; udh 
      000B5A 16 03            [ 2] 2067         ldw y,(UD3,sp)
      000B5C EF 02            [ 2] 2068         ldw (2,x),y  ; udl  
      000B5E 5B 04            [ 2] 2069         addw sp,#4 ; drop local variable 
      000B60 81               [ 4] 2070         ret  
                                   2071 
                                   2072 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2073 ;       *       ( n n -- n )
                                   2074 ;       Signed multiply. Return 
                                   2075 ;       single product.
                                   2076 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B61                       2077         _HEADER STAR,1,"*"
      000B61 0B 17                    1         .word LINK 
                           000B63     2         LINK=.
      000B63 01                       3         .byte 1  
      000B64 2A                       4         .ascii "*"
      000B65                          5         STAR:
      000B65 CD 0B 1B         [ 4] 2078 	CALL	UMSTA
      000B68                       2079         _DROP 
      000B68 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      000B6B 81               [ 4] 2080         RET 
                                   2081 
                                   2082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2083 ;       M*      ( n n -- d )
                                   2084 ;       Signed multiply. Return 
                                   2085 ;       double product.
                                   2086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B6C                       2087         _HEADER MSTAR,2,"M*"
      000B6C 0B 63                    1         .word LINK 
                           000B6E     2         LINK=.
      000B6E 02                       3         .byte 2  
      000B6F 4D 2A                    4         .ascii "M*"
      000B71                          5         MSTAR:
      000B71 CD 08 6B         [ 4] 2088         CALL	DDUP
      000B74 CD 06 E3         [ 4] 2089         CALL	XORR
      000B77 CD 06 94         [ 4] 2090         CALL	ZLESS
      000B7A CD 06 26         [ 4] 2091         CALL	TOR
      000B7D CD 09 30         [ 4] 2092         CALL	ABSS
      000B80 CD 06 6D         [ 4] 2093         CALL	SWAPP
      000B83 CD 09 30         [ 4] 2094         CALL	ABSS
      000B86 CD 0B 1B         [ 4] 2095         CALL	UMSTA
      000B89 CD 05 78         [ 4] 2096         CALL	RFROM
      000B8C CD 04 DC         [ 4] 2097         CALL	QBRAN
      000B8F 0B 94                 2098         .word	MSTA1
      000B91 CC 08 DC         [ 2] 2099         JP	DNEGA
      000B94 81               [ 4] 2100 MSTA1:	RET
                                   2101 
                                   2102 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2103 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2104 ;       Multiply n1 and n2, then divide
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2105 ;       by n3. Return mod and quotient.
                                   2106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B95                       2107         _HEADER SSMOD,5,"*/MOD"
      000B95 0B 6E                    1         .word LINK 
                           000B97     2         LINK=.
      000B97 05                       3         .byte 5  
      000B98 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B9D                          5         SSMOD:
      000B9D CD 06 26         [ 4] 2108         CALL     TOR
      000BA0 CD 0B 71         [ 4] 2109         CALL     MSTAR
      000BA3 CD 05 78         [ 4] 2110         CALL     RFROM
      000BA6 CC 0A 5F         [ 2] 2111         JP     MSMOD
                                   2112 
                                   2113 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2114 ;       */      ( n1 n2 n3 -- q )
                                   2115 ;       Multiply n1 by n2, then divide
                                   2116 ;       by n3. Return quotient only.
                                   2117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BA9                       2118         _HEADER STASL,2,"*/"
      000BA9 0B 97                    1         .word LINK 
                           000BAB     2         LINK=.
      000BAB 02                       3         .byte 2  
      000BAC 2A 2F                    4         .ascii "*/"
      000BAE                          5         STASL:
      000BAE CD 0B 9D         [ 4] 2119         CALL	SSMOD
      000BB1 CD 06 6D         [ 4] 2120         CALL	SWAPP
      000BB4 CC 06 53         [ 2] 2121         JP	DROP
                                   2122 
                                   2123 ;; Miscellaneous
                                   2124 
                                   2125 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2126 ;       2+   ( a -- a )
                                   2127 ;       Add cell size in byte to address.
                                   2128 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BB7                       2129         _HEADER CELLP,2,"2+"
      000BB7 0B AB                    1         .word LINK 
                           000BB9     2         LINK=.
      000BB9 02                       3         .byte 2  
      000BBA 32 2B                    4         .ascii "2+"
      000BBC                          5         CELLP:
      000BBC 90 93            [ 1] 2130         LDW Y,X
      000BBE 90 FE            [ 2] 2131 	LDW Y,(Y)
      000BC0 72 A9 00 02      [ 2] 2132         ADDW Y,#CELLL 
      000BC4 FF               [ 2] 2133         LDW (X),Y
      000BC5 81               [ 4] 2134         RET
                                   2135 
                                   2136 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2137 ;       2-   ( a -- a )
                                   2138 ;       Subtract 2 from address.
                                   2139 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC6                       2140         _HEADER CELLM,2,"2-"
      000BC6 0B B9                    1         .word LINK 
                           000BC8     2         LINK=.
      000BC8 02                       3         .byte 2  
      000BC9 32 2D                    4         .ascii "2-"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000BCB                          5         CELLM:
      000BCB 90 93            [ 1] 2141         LDW Y,X
      000BCD 90 FE            [ 2] 2142 	LDW Y,(Y)
      000BCF 72 A2 00 02      [ 2] 2143         SUBW Y,#CELLL
      000BD3 FF               [ 2] 2144         LDW (X),Y
      000BD4 81               [ 4] 2145         RET
                                   2146 
                                   2147 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2148 ;       2*   ( n -- n )
                                   2149 ;       Multiply tos by 2.
                                   2150 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD5                       2151         _HEADER CELLS,2,"2*"
      000BD5 0B C8                    1         .word LINK 
                           000BD7     2         LINK=.
      000BD7 02                       3         .byte 2  
      000BD8 32 2A                    4         .ascii "2*"
      000BDA                          5         CELLS:
      000BDA                       2152 TWOSTAR:        
      000BDA 90 93            [ 1] 2153         LDW Y,X
      000BDC 90 FE            [ 2] 2154 	LDW Y,(Y)
      000BDE 90 58            [ 2] 2155         SLAW Y
      000BE0 FF               [ 2] 2156         LDW (X),Y
      000BE1 81               [ 4] 2157         RET
                                   2158 
                                   2159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2160 ;       1+      ( a -- a )
                                   2161 ;       Add cell size in byte 
                                   2162 ;       to address.
                                   2163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BE2                       2164         _HEADER ONEP,2,"1+"
      000BE2 0B D7                    1         .word LINK 
                           000BE4     2         LINK=.
      000BE4 02                       3         .byte 2  
      000BE5 31 2B                    4         .ascii "1+"
      000BE7                          5         ONEP:
      000BE7 90 93            [ 1] 2165         LDW Y,X
      000BE9 90 FE            [ 2] 2166 	LDW Y,(Y)
      000BEB 90 5C            [ 1] 2167         INCW Y
      000BED FF               [ 2] 2168         LDW (X),Y
      000BEE 81               [ 4] 2169         RET
                                   2170 
                                   2171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2172 ;       1-      ( a -- a )
                                   2173 ;       Subtract 2 from address.
                                   2174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BEF                       2175         _HEADER ONEM,2,"1-"
      000BEF 0B E4                    1         .word LINK 
                           000BF1     2         LINK=.
      000BF1 02                       3         .byte 2  
      000BF2 31 2D                    4         .ascii "1-"
      000BF4                          5         ONEM:
      000BF4 90 93            [ 1] 2176         LDW Y,X
      000BF6 90 FE            [ 2] 2177 	LDW Y,(Y)
      000BF8 90 5A            [ 2] 2178         DECW Y
      000BFA FF               [ 2] 2179         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BFB 81               [ 4] 2180         RET
                                   2181 
                                   2182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2183 ;  shift left n times 
                                   2184 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2185 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BFC                       2186         _HEADER LSHIFT,6,"LSHIFT"
      000BFC 0B F1                    1         .word LINK 
                           000BFE     2         LINK=.
      000BFE 06                       3         .byte 6  
      000BFF 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000C05                          5         LSHIFT:
      000C05 E6 01            [ 1] 2187         ld a,(1,x)
      000C07 1C 00 02         [ 2] 2188         addw x,#CELLL 
      000C0A 90 93            [ 1] 2189         ldw y,x 
      000C0C 90 FE            [ 2] 2190         ldw y,(y)
      000C0E                       2191 LSHIFT1:
      000C0E 4D               [ 1] 2192         tnz a 
      000C0F 27 05            [ 1] 2193         jreq LSHIFT4 
      000C11 90 58            [ 2] 2194         sllw y 
      000C13 4A               [ 1] 2195         dec a 
      000C14 20 F8            [ 2] 2196         jra LSHIFT1 
      000C16                       2197 LSHIFT4:
      000C16 FF               [ 2] 2198         ldw (x),y 
      000C17 81               [ 4] 2199         ret 
                                   2200 
                                   2201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2202 ; shift right n times                 
                                   2203 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2204 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C18                       2205         _HEADER RSHIFT,6,"RSHIFT"
      000C18 0B FE                    1         .word LINK 
                           000C1A     2         LINK=.
      000C1A 06                       3         .byte 6  
      000C1B 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000C21                          5         RSHIFT:
      000C21 E6 01            [ 1] 2206         ld a,(1,x)
      000C23 1C 00 02         [ 2] 2207         addw x,#CELLL 
      000C26 90 93            [ 1] 2208         ldw y,x 
      000C28 90 FE            [ 2] 2209         ldw y,(y)
      000C2A                       2210 RSHIFT1:
      000C2A 4D               [ 1] 2211         tnz a 
      000C2B 27 05            [ 1] 2212         jreq RSHIFT4 
      000C2D 90 54            [ 2] 2213         srlw y 
      000C2F 4A               [ 1] 2214         dec a 
      000C30 20 F8            [ 2] 2215         jra RSHIFT1 
      000C32                       2216 RSHIFT4:
      000C32 FF               [ 2] 2217         ldw (x),y 
      000C33 81               [ 4] 2218         ret 
                                   2219 
                                   2220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2221 ;       2/      ( n -- n )
                                   2222 ;       divide  tos by 2.
                                   2223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C34                       2224         _HEADER TWOSL,2,"2/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C34 0C 1A                    1         .word LINK 
                           000C36     2         LINK=.
      000C36 02                       3         .byte 2  
      000C37 32 2F                    4         .ascii "2/"
      000C39                          5         TWOSL:
      000C39 90 93            [ 1] 2225         LDW Y,X
      000C3B 90 FE            [ 2] 2226 	LDW Y,(Y)
      000C3D 90 57            [ 2] 2227         SRAW Y
      000C3F FF               [ 2] 2228         LDW (X),Y
      000C40 81               [ 4] 2229         RET
                                   2230 
                                   2231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2232 ;       BL      ( -- 32 )
                                   2233 ;       Return 32,  blank character.
                                   2234 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C41                       2235         _HEADER BLANK,2,"BL"
      000C41 0C 36                    1         .word LINK 
                           000C43     2         LINK=.
      000C43 02                       3         .byte 2  
      000C44 42 4C                    4         .ascii "BL"
      000C46                          5         BLANK:
      000C46 1D 00 02         [ 2] 2236         SUBW X,#2
      000C49 90 AE 00 20      [ 2] 2237 	LDW Y,#32
      000C4D FF               [ 2] 2238         LDW (X),Y
      000C4E 81               [ 4] 2239         RET
                                   2240 
                                   2241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2242 ;         0     ( -- 0)
                                   2243 ;         Return 0.
                                   2244 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C4F                       2245         _HEADER ZERO,1,"0"
      000C4F 0C 43                    1         .word LINK 
                           000C51     2         LINK=.
      000C51 01                       3         .byte 1  
      000C52 30                       4         .ascii "0"
      000C53                          5         ZERO:
      000C53 1D 00 02         [ 2] 2246         SUBW X,#2
      000C56 90 5F            [ 1] 2247 	CLRW Y
      000C58 FF               [ 2] 2248         LDW (X),Y
      000C59 81               [ 4] 2249         RET
                                   2250 
                                   2251 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2252 ;         1     ( -- 1)
                                   2253 ;         Return 1.
                                   2254 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C5A                       2255         _HEADER ONE,1,"1"
      000C5A 0C 51                    1         .word LINK 
                           000C5C     2         LINK=.
      000C5C 01                       3         .byte 1  
      000C5D 31                       4         .ascii "1"
      000C5E                          5         ONE:
      000C5E 1D 00 02         [ 2] 2256         SUBW X,#2
      000C61 90 AE 00 01      [ 2] 2257 	LDW Y,#1
      000C65 FF               [ 2] 2258         LDW (X),Y
      000C66 81               [ 4] 2259         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2260 
                                   2261 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2262 ;         -1    ( -- -1)
                                   2263 ;   Return -1
                                   2264 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C67                       2265         _HEADER MONE,2,"-1"
      000C67 0C 5C                    1         .word LINK 
                           000C69     2         LINK=.
      000C69 02                       3         .byte 2  
      000C6A 2D 31                    4         .ascii "-1"
      000C6C                          5         MONE:
      000C6C 1D 00 02         [ 2] 2266         SUBW X,#2
      000C6F 90 AE FF FF      [ 2] 2267 	LDW Y,#0xFFFF
      000C73 FF               [ 2] 2268         LDW (X),Y
      000C74 81               [ 4] 2269         RET
                                   2270 
                                   2271 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2272 ;       >CHAR   ( c -- c )
                                   2273 ;       Filter non-printing characters.
                                   2274 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C75                       2275         _HEADER TCHAR,5,">CHAR"
      000C75 0C 69                    1         .word LINK 
                           000C77     2         LINK=.
      000C77 05                       3         .byte 5  
      000C78 3E 43 48 41 52           4         .ascii ">CHAR"
      000C7D                          5         TCHAR:
      000C7D E6 01            [ 1] 2276         ld a,(1,x)
      000C7F A1 20            [ 1] 2277         cp a,#32  
      000C81 2B 05            [ 1] 2278         jrmi 1$ 
      000C83 A1 7F            [ 1] 2279         cp a,#127 
      000C85 2A 01            [ 1] 2280         jrpl 1$ 
      000C87 81               [ 4] 2281         ret 
      000C88 A6 5F            [ 1] 2282 1$:     ld a,#'_ 
      000C8A E7 01            [ 1] 2283         ld (1,x),a 
      000C8C 81               [ 4] 2284         ret 
                                   2285 
                                   2286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2287 ;       DEPTH   ( -- n )
                                   2288 ;       Return  depth of  data stack.
                                   2289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C8D                       2290         _HEADER DEPTH,5,"DEPTH"
      000C8D 0C 77                    1         .word LINK 
                           000C8F     2         LINK=.
      000C8F 05                       3         .byte 5  
      000C90 44 45 50 54 48           4         .ascii "DEPTH"
      000C95                          5         DEPTH:
      000C95 90 BE 2C         [ 2] 2291         LDW Y,SP0    ;save data stack ptr
      000C98 BF 24            [ 2] 2292 	LDW XTEMP,X
      000C9A 72 B2 00 24      [ 2] 2293         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C9E 90 57            [ 2] 2294         SRAW Y    ;Y = #stack items
      000CA0 1D 00 02         [ 2] 2295 	SUBW X,#2
      000CA3 FF               [ 2] 2296         LDW (X),Y     ; if neg, underflow
      000CA4 81               [ 4] 2297         RET
                                   2298 
                                   2299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2300 ;       PICK    ( ... +n -- ... w )
                                   2301 ;       Copy  nth stack item to tos.
                                   2302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CA5                       2303         _HEADER PICK,4,"PICK"
      000CA5 0C 8F                    1         .word LINK 
                           000CA7     2         LINK=.
      000CA7 04                       3         .byte 4  
      000CA8 50 49 43 4B              4         .ascii "PICK"
      000CAC                          5         PICK:
      000CAC 90 93            [ 1] 2304         LDW Y,X   ;D = n1
      000CAE 90 FE            [ 2] 2305         LDW Y,(Y)
                                   2306 ; modified for standard compliance          
                                   2307 ; 0 PICK must be equivalent to DUP 
      000CB0 90 5C            [ 1] 2308         INCW Y 
      000CB2 90 58            [ 2] 2309         SLAW Y
      000CB4 BF 24            [ 2] 2310         LDW XTEMP,X
      000CB6 72 B9 00 24      [ 2] 2311         ADDW Y,XTEMP
      000CBA 90 FE            [ 2] 2312         LDW Y,(Y)
      000CBC FF               [ 2] 2313         LDW (X),Y
      000CBD 81               [ 4] 2314         RET
                                   2315 
                                   2316 ;; Memory access
                                   2317 
                                   2318 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2319 ;       +!      ( n a -- )
                                   2320 ;       Add n to  contents at 
                                   2321 ;       address a.
                                   2322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CBE                       2323         _HEADER PSTOR,2,"+!"
      000CBE 0C A7                    1         .word LINK 
                           000CC0     2         LINK=.
      000CC0 02                       3         .byte 2  
      000CC1 2B 21                    4         .ascii "+!"
      000CC3                          5         PSTOR:
      000CC3 89               [ 2] 2324         PUSHW X   ; R: DP 
      000CC4 90 93            [ 1] 2325         LDW Y,X 
      000CC6 FE               [ 2] 2326         LDW X,(X) ; a 
      000CC7 90 EE 02         [ 2] 2327         LDW Y,(2,Y)  ; n 
      000CCA 90 89            [ 2] 2328         PUSHW Y      ; R: DP n 
      000CCC 90 93            [ 1] 2329         LDW Y,X 
      000CCE 90 FE            [ 2] 2330         LDW Y,(Y)
      000CD0 72 F9 01         [ 2] 2331         ADDW Y,(1,SP) ; *a + n 
      000CD3 FF               [ 2] 2332         LDW (X),Y 
      000CD4 1E 03            [ 2] 2333         LDW X,(3,SP) ; DP
      000CD6 1C 00 04         [ 2] 2334         ADDW X,#2*CELLL  ; ( n a -- )  
      000CD9 5B 04            [ 2] 2335         ADDW SP,#2*CELLL ; R: DP n -- 
      000CDB 81               [ 4] 2336         RET 
                                   2337                 
                                   2338 
                                   2339 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2340 ;       2!      ( d a -- )
                                   2341 ;       Store  double integer 
                                   2342 ;       to address a.
                                   2343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CDC                       2344         _HEADER DSTOR,2,"2!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000CDC 0C C0                    1         .word LINK 
                           000CDE     2         LINK=.
      000CDE 02                       3         .byte 2  
      000CDF 32 21                    4         .ascii "2!"
      000CE1                          5         DSTOR:
      000CE1 90 93            [ 1] 2345         LDW Y,X 
      000CE3 89               [ 2] 2346         PUSHW X 
      000CE4 FE               [ 2] 2347         LDW X,(X) ; a 
      000CE5 90 EE 02         [ 2] 2348         LDW Y,(2,Y) ; dhi 
      000CE8 FF               [ 2] 2349         LDW (X),Y 
      000CE9 16 01            [ 2] 2350         LDW Y,(1,SP)  
      000CEB 90 EE 04         [ 2] 2351         LDW Y,(4,Y) ; dlo 
      000CEE EF 02            [ 2] 2352         LDW (2,X),Y  
      000CF0 85               [ 2] 2353         POPW X 
      000CF1 1C 00 06         [ 2] 2354         ADDW X,#3*CELLL 
      000CF4 81               [ 4] 2355         RET 
                                   2356 
                                   2357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2358 ;       2@      ( a -- d )
                                   2359 ;       Fetch double integer 
                                   2360 ;       from address a.
                                   2361 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CF5                       2362         _HEADER DAT,2,"2@"
      000CF5 0C DE                    1         .word LINK 
                           000CF7     2         LINK=.
      000CF7 02                       3         .byte 2  
      000CF8 32 40                    4         .ascii "2@"
      000CFA                          5         DAT:
      000CFA 90 93            [ 1] 2363         ldw y,x 
      000CFC 1D 00 02         [ 2] 2364         subw x,#CELLL 
      000CFF 90 FE            [ 2] 2365         ldw y,(y) ;address 
      000D01 90 89            [ 2] 2366         pushw y  
      000D03 90 FE            [ 2] 2367         ldw y,(y) ; dhi 
      000D05 FF               [ 2] 2368         ldw (x),y 
      000D06 90 85            [ 2] 2369         popw y 
      000D08 90 EE 02         [ 2] 2370         ldw y,(2,y) ; dlo 
      000D0B EF 02            [ 2] 2371         ldw (2,x),y 
      000D0D 81               [ 4] 2372         ret 
                                   2373 
                                   2374 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2375 ;       COUNT   ( b -- b +n )
                                   2376 ;       Return count byte of a string
                                   2377 ;       and add 1 to byte address.
                                   2378 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D0E                       2379         _HEADER COUNT,5,"COUNT"
      000D0E 0C F7                    1         .word LINK 
                           000D10     2         LINK=.
      000D10 05                       3         .byte 5  
      000D11 43 4F 55 4E 54           4         .ascii "COUNT"
      000D16                          5         COUNT:
      000D16 90 93            [ 1] 2380         ldw y,x 
      000D18 90 FE            [ 2] 2381         ldw y,(y) ; address 
      000D1A 90 F6            [ 1] 2382         ld a,(y)  ; count 
      000D1C 90 5C            [ 1] 2383         incw y 
      000D1E FF               [ 2] 2384         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000D1F 1D 00 02         [ 2] 2385         subw x,#CELLL 
      000D22 E7 01            [ 1] 2386         ld (1,x),a 
      000D24 7F               [ 1] 2387         clr (x)
      000D25 81               [ 4] 2388         ret 
                                   2389 
                                   2390 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2391 ;       HERE    ( -- a )
                                   2392 ;       Return  top of  variables
                                   2393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D26                       2394         _HEADER HERE,4,"HERE"
      000D26 0D 10                    1         .word LINK 
                           000D28     2         LINK=.
      000D28 04                       3         .byte 4  
      000D29 48 45 52 45              4         .ascii "HERE"
      000D2D                          5         HERE:
      000D2D 90 AE 00 18      [ 2] 2395       	ldw y,#UVP 
      000D31 90 FE            [ 2] 2396         ldw y,(y)
      000D33 1D 00 02         [ 2] 2397         subw x,#CELLL 
      000D36 FF               [ 2] 2398         ldw (x),y 
      000D37 81               [ 4] 2399         ret 
                                   2400 
                                   2401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2402 ;       PAD     ( -- a )
                                   2403 ;       Return address of text buffer
                                   2404 ;       above  code dictionary.
                                   2405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D38                       2406         _HEADER PAD,3,"PAD"
      000D38 0D 28                    1         .word LINK 
                           000D3A     2         LINK=.
      000D3A 03                       3         .byte 3  
      000D3B 50 41 44                 4         .ascii "PAD"
      000D3E                          5         PAD:
      000D3E CD 0D 2D         [ 4] 2407         CALL     HERE
      000D41                       2408         _DOLIT   80
      000D41 CD 04 B3         [ 4]    1     CALL DOLIT 
      000D44 00 50                    2     .word 80 
      000D46 CC 08 80         [ 2] 2409         JP     PLUS
                                   2410 
                                   2411 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2412 ;       TIB     ( -- a )
                                   2413 ;       Return address of 
                                   2414 ;       terminal input buffer.
                                   2415 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D49                       2416         _HEADER TIB,3,"TIB"
      000D49 0D 3A                    1         .word LINK 
                           000D4B     2         LINK=.
      000D4B 03                       3         .byte 3  
      000D4C 54 49 42                 4         .ascii "TIB"
      000D4F                          5         TIB:
      000D4F CD 07 51         [ 4] 2417         CALL     NTIB
      000D52 CD 0B BC         [ 4] 2418         CALL     CELLP
      000D55 CC 05 27         [ 2] 2419         JP     AT
                                   2420 
                                   2421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2422 ;       @EXECUTE        ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   2423 ;       Execute vector stored in 
                                   2424 ;       address a.
                                   2425 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D58                       2426         _HEADER ATEXE,8,"@EXECUTE"
      000D58 0D 4B                    1         .word LINK 
                           000D5A     2         LINK=.
      000D5A 08                       3         .byte 8  
      000D5B 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D63                          5         ATEXE:
      000D63 CD 05 27         [ 4] 2427         CALL     AT
      000D66 CD 08 10         [ 4] 2428         CALL     QDUP    ;?address or zero
      000D69 CD 04 DC         [ 4] 2429         CALL     QBRAN
      000D6C 0D 71                 2430         .word      EXE1
      000D6E CD 05 08         [ 4] 2431         CALL     EXECU   ;execute if non-zero
      000D71 81               [ 4] 2432 EXE1:   RET     ;do nothing if zero
                                   2433 
                                   2434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2435 ;       CMOVE   ( b1 b2 u -- )
                                   2436 ;       Copy u bytes from b1 to b2.
                                   2437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D72                       2438         _HEADER CMOVE,5,"CMOVE"
      000D72 0D 5A                    1         .word LINK 
                           000D74     2         LINK=.
      000D74 05                       3         .byte 5  
      000D75 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D7A                          5         CMOVE:
                                   2439         ;;;;  local variables ;;;;;;;
                           000005  2440         DP = 5
                           000003  2441         YTMP = 3 
                           000001  2442         CNT  = 1 
                                   2443         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D7A 89               [ 2] 2444         PUSHW X  ; R: DP  
      000D7B 52 02            [ 2] 2445         SUB SP,#2 ; R: DP YTMP 
      000D7D 90 93            [ 1] 2446         LDW Y,X 
      000D7F 90 FE            [ 2] 2447         LDW Y,(Y) ; CNT 
      000D81 90 89            [ 2] 2448         PUSHW Y  ; R: DP YTMP CNT
      000D83 90 93            [ 1] 2449         LDW Y,X 
      000D85 90 EE 02         [ 2] 2450         LDW Y,(2,Y) ; b2, dest 
      000D88 EE 04            [ 2] 2451         LDW X,(4,X) ; b1, src 
      000D8A 17 03            [ 2] 2452         LDW (YTMP,SP),Y 
      000D8C 13 03            [ 2] 2453         CPW X,(YTMP,SP) 
      000D8E 22 1A            [ 1] 2454         JRUGT CMOV2  ; src>dest 
                                   2455 ; src<dest copy from top to bottom
      000D90 72 FB 01         [ 2] 2456         ADDW X,(CNT,SP)
      000D93 72 F9 01         [ 2] 2457         ADDW Y,(CNT,SP)
      000D96                       2458 CMOV1:  
      000D96 17 03            [ 2] 2459         LDW (YTMP,SP),Y 
      000D98 16 01            [ 2] 2460         LDW Y,(CNT,SP)
      000D9A 27 22            [ 1] 2461         JREQ CMOV3 
      000D9C 90 5A            [ 2] 2462         DECW Y 
      000D9E 17 01            [ 2] 2463         LDW (CNT,SP),Y 
      000DA0 16 03            [ 2] 2464         LDW Y,(YTMP,SP)
      000DA2 5A               [ 2] 2465         DECW X
      000DA3 F6               [ 1] 2466         LD A,(X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000DA4 90 5A            [ 2] 2467         DECW Y 
      000DA6 90 F7            [ 1] 2468         LD (Y),A 
      000DA8 20 EC            [ 2] 2469         JRA CMOV1
                                   2470 ; src>dest copy from bottom to top   
      000DAA                       2471 CMOV2: 
      000DAA 17 03            [ 2] 2472         LDW (YTMP,SP),Y 
      000DAC 16 01            [ 2] 2473         LDW Y,(CNT,SP)
      000DAE 27 0E            [ 1] 2474         JREQ CMOV3
      000DB0 90 5A            [ 2] 2475         DECW Y 
      000DB2 17 01            [ 2] 2476         LDW (CNT,SP),Y 
      000DB4 16 03            [ 2] 2477         LDW Y,(YTMP,SP)
      000DB6 F6               [ 1] 2478         LD A,(X)
      000DB7 5C               [ 1] 2479         INCW X 
      000DB8 90 F7            [ 1] 2480         LD (Y),A 
      000DBA 90 5C            [ 1] 2481         INCW Y 
      000DBC 20 EC            [ 2] 2482         JRA CMOV2 
      000DBE                       2483 CMOV3:
      000DBE 1E 05            [ 2] 2484         LDW X,(DP,SP)
      000DC0 1C 00 06         [ 2] 2485         ADDW X,#3*CELLL 
      000DC3 5B 06            [ 2] 2486         ADDW SP,#3*CELLL 
      000DC5 81               [ 4] 2487         RET 
                                   2488         
                                   2489 
                                   2490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2491 ;       FILL    ( b u c -- )
                                   2492 ;       Fill u bytes of character c
                                   2493 ;       to area beginning at b.
                                   2494 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DC6                       2495         _HEADER FILL,4,"FILL"
      000DC6 0D 74                    1         .word LINK 
                           000DC8     2         LINK=.
      000DC8 04                       3         .byte 4  
      000DC9 46 49 4C 4C              4         .ascii "FILL"
      000DCD                          5         FILL:
      000DCD E6 01            [ 1] 2496         LD A,(1,X)
      000DCF 90 93            [ 1] 2497         LDW Y,X 
      000DD1 1C 00 06         [ 2] 2498         ADDW X,#3*CELLL 
      000DD4 89               [ 2] 2499         PUSHW X ; R: DP 
      000DD5 93               [ 1] 2500         LDW X,Y 
      000DD6 EE 04            [ 2] 2501         LDW X,(4,X) ; b
      000DD8 90 EE 02         [ 2] 2502         LDW Y,(2,Y) ; u
      000DDB                       2503 FILL0:
      000DDB 27 06            [ 1] 2504         JREQ FILL1
      000DDD F7               [ 1] 2505         LD (X),A 
      000DDE 5C               [ 1] 2506         INCW X 
      000DDF 90 5A            [ 2] 2507         DECW Y 
      000DE1 20 F8            [ 2] 2508         JRA FILL0         
      000DE3 85               [ 2] 2509 FILL1: POPW X 
      000DE4 81               [ 4] 2510         RET         
                                   2511         
                                   2512 
                                   2513 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2514 ;       ERASE   ( b u -- )
                                   2515 ;       Erase u bytes beginning at b.
                                   2516 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DE5                       2517         _HEADER ERASE,5,"ERASE"
      000DE5 0D C8                    1         .word LINK 
                           000DE7     2         LINK=.
      000DE7 05                       3         .byte 5  
      000DE8 45 52 41 53 45           4         .ascii "ERASE"
      000DED                          5         ERASE:
      000DED 90 5F            [ 1] 2518         clrw y 
      000DEF 1D 00 02         [ 2] 2519         subw x,#CELLL 
      000DF2 FF               [ 2] 2520         ldw (x),y 
      000DF3 CC 0D CD         [ 2] 2521         jp FILL 
                                   2522 
                                   2523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2524 ;       PACK0   ( b u a -- a )
                                   2525 ;       Build a counted string with
                                   2526 ;       u characters from b. Null fill.
                                   2527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DF6                       2528         _HEADER PACKS,5,"PACK0"
      000DF6 0D E7                    1         .word LINK 
                           000DF8     2         LINK=.
      000DF8 05                       3         .byte 5  
      000DF9 50 41 43 4B 30           4         .ascii "PACK0"
      000DFE                          5         PACKS:
      000DFE CD 06 5D         [ 4] 2529         CALL     DUPP
      000E01 CD 06 26         [ 4] 2530         CALL     TOR     ;strings only on cell boundary
      000E04 CD 08 6B         [ 4] 2531         CALL     DDUP
      000E07 CD 05 34         [ 4] 2532         CALL     CSTOR
      000E0A CD 0B E7         [ 4] 2533         CALL     ONEP ;save count
      000E0D CD 06 6D         [ 4] 2534         CALL     SWAPP
      000E10 CD 0D 7A         [ 4] 2535         CALL     CMOVE
      000E13 CD 05 78         [ 4] 2536         CALL     RFROM
      000E16 81               [ 4] 2537         RET
                                   2538 
                                   2539 ;; Numeric output, single precision
                                   2540 
                                   2541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2542 ;       DIGIT   ( u -- c )
                                   2543 ;       Convert digit u to a character.
                                   2544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E17                       2545         _HEADER DIGIT,5,"DIGIT"
      000E17 0D F8                    1         .word LINK 
                           000E19     2         LINK=.
      000E19 05                       3         .byte 5  
      000E1A 44 49 47 49 54           4         .ascii "DIGIT"
      000E1F                          5         DIGIT:
      000E1F CD 04 B3         [ 4] 2546         CALL	DOLIT
      000E22 00 09                 2547         .word	9
      000E24 CD 06 85         [ 4] 2548         CALL	OVER
      000E27 CD 09 6A         [ 4] 2549         CALL	LESS
      000E2A CD 04 B3         [ 4] 2550         CALL	DOLIT
      000E2D 00 07                 2551         .word	7
      000E2F CD 06 BA         [ 4] 2552         CALL	ANDD
      000E32 CD 08 80         [ 4] 2553         CALL	PLUS
      000E35 CD 04 B3         [ 4] 2554         CALL	DOLIT
      000E38 00 30                 2555         .word	48	;'0'
      000E3A CC 08 80         [ 2] 2556         JP	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   2557 
                                   2558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2559 ;       EXTRACT ( n base -- n c )
                                   2560 ;       Extract least significant 
                                   2561 ;       digit from n.
                                   2562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E3D                       2563         _HEADER EXTRC,7,"EXTRACT"
      000E3D 0E 19                    1         .word LINK 
                           000E3F     2         LINK=.
      000E3F 07                       3         .byte 7  
      000E40 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000E47                          5         EXTRC:
      000E47 CD 0C 53         [ 4] 2564         CALL     ZERO
      000E4A CD 06 6D         [ 4] 2565         CALL     SWAPP
      000E4D CD 09 F5         [ 4] 2566         CALL     UMMOD
      000E50 CD 06 6D         [ 4] 2567         CALL     SWAPP
      000E53 CC 0E 1F         [ 2] 2568         JP     DIGIT
                                   2569 
                                   2570 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2571 ;       <#      ( -- )
                                   2572 ;       Initiate  numeric 
                                   2573 ;       output process.
                                   2574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E56                       2575         _HEADER BDIGS,2,"#<"
      000E56 0E 3F                    1         .word LINK 
                           000E58     2         LINK=.
      000E58 02                       3         .byte 2  
      000E59 23 3C                    4         .ascii "#<"
      000E5B                          5         BDIGS:
      000E5B CD 0D 3E         [ 4] 2576         CALL     PAD
      000E5E CD 07 93         [ 4] 2577         CALL     HLD
      000E61 CC 05 15         [ 2] 2578         JP     STORE
                                   2579 
                                   2580 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2581 ;       HOLD    ( c -- )
                                   2582 ;       Insert a character 
                                   2583 ;       into output string.
                                   2584 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E64                       2585         _HEADER HOLD,4,"HOLD"
      000E64 0E 58                    1         .word LINK 
                           000E66     2         LINK=.
      000E66 04                       3         .byte 4  
      000E67 48 4F 4C 44              4         .ascii "HOLD"
      000E6B                          5         HOLD:
      000E6B CD 07 93         [ 4] 2586         CALL     HLD
      000E6E CD 05 27         [ 4] 2587         CALL     AT
      000E71 CD 0B F4         [ 4] 2588         CALL     ONEM
      000E74 CD 06 5D         [ 4] 2589         CALL     DUPP
      000E77 CD 07 93         [ 4] 2590         CALL     HLD
      000E7A CD 05 15         [ 4] 2591         CALL     STORE
      000E7D CC 05 34         [ 2] 2592         JP     CSTOR
                                   2593 
                                   2594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2595 ;       #       ( u -- u )
                                   2596 ;       Extract one digit from u and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   2597 ;       append digit to output string.
                                   2598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E80                       2599         _HEADER DIG,1,"#"
      000E80 0E 66                    1         .word LINK 
                           000E82     2         LINK=.
      000E82 01                       3         .byte 1  
      000E83 23                       4         .ascii "#"
      000E84                          5         DIG:
      000E84 CD 07 23         [ 4] 2600         CALL     BASE
      000E87 CD 05 27         [ 4] 2601         CALL     AT
      000E8A CD 0E 47         [ 4] 2602         CALL     EXTRC
      000E8D CC 0E 6B         [ 2] 2603         JP     HOLD
                                   2604 
                                   2605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2606 ;       #S      ( u -- 0 )
                                   2607 ;       Convert u until all digits
                                   2608 ;       are added to output string.
                                   2609 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E90                       2610         _HEADER DIGS,2,"#S"
      000E90 0E 82                    1         .word LINK 
                           000E92     2         LINK=.
      000E92 02                       3         .byte 2  
      000E93 23 53                    4         .ascii "#S"
      000E95                          5         DIGS:
      000E95 CD 0E 84         [ 4] 2611 DIGS1:  CALL     DIG
      000E98 CD 06 5D         [ 4] 2612         CALL     DUPP
      000E9B CD 04 DC         [ 4] 2613         CALL     QBRAN
      000E9E 0E A2                 2614         .word      DIGS2
      000EA0 20 F3            [ 2] 2615         JRA     DIGS1
      000EA2 81               [ 4] 2616 DIGS2:  RET
                                   2617 
                                   2618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2619 ;       SIGN    ( n -- )
                                   2620 ;       Add a minus sign to
                                   2621 ;       numeric output string.
                                   2622 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EA3                       2623         _HEADER SIGN,4,"SIGN"
      000EA3 0E 92                    1         .word LINK 
                           000EA5     2         LINK=.
      000EA5 04                       3         .byte 4  
      000EA6 53 49 47 4E              4         .ascii "SIGN"
      000EAA                          5         SIGN:
      000EAA CD 06 94         [ 4] 2624         CALL     ZLESS
      000EAD CD 04 DC         [ 4] 2625         CALL     QBRAN
      000EB0 0E BA                 2626         .word      SIGN1
      000EB2 CD 04 B3         [ 4] 2627         CALL     DOLIT
      000EB5 00 2D                 2628         .word      45	;"-"
      000EB7 CC 0E 6B         [ 2] 2629         JP     HOLD
      000EBA 81               [ 4] 2630 SIGN1:  RET
                                   2631 
                                   2632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2633 ;       #>      ( w -- b u )
                                   2634 ;       Prepare output string.
                                   2635 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EBB                       2636         _HEADER EDIGS,2,"#>"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000EBB 0E A5                    1         .word LINK 
                           000EBD     2         LINK=.
      000EBD 02                       3         .byte 2  
      000EBE 23 3E                    4         .ascii "#>"
      000EC0                          5         EDIGS:
      000EC0 CD 06 53         [ 4] 2637         CALL     DROP
      000EC3 CD 07 93         [ 4] 2638         CALL     HLD
      000EC6 CD 05 27         [ 4] 2639         CALL     AT
      000EC9 CD 0D 3E         [ 4] 2640         CALL     PAD
      000ECC CD 06 85         [ 4] 2641         CALL     OVER
      000ECF CC 09 16         [ 2] 2642         JP     SUBB
                                   2643 
                                   2644 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2645 ;       str     ( w -- b u )
                                   2646 ;       Convert a signed integer
                                   2647 ;       to a numeric string.
                                   2648 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED2                       2649         _HEADER STR,3,"STR"
      000ED2 0E BD                    1         .word LINK 
                           000ED4     2         LINK=.
      000ED4 03                       3         .byte 3  
      000ED5 53 54 52                 4         .ascii "STR"
      000ED8                          5         STR:
      000ED8 CD 06 5D         [ 4] 2650         CALL     DUPP
      000EDB CD 06 26         [ 4] 2651         CALL     TOR
      000EDE CD 09 30         [ 4] 2652         CALL     ABSS
      000EE1 CD 0E 5B         [ 4] 2653         CALL     BDIGS
      000EE4 CD 0E 95         [ 4] 2654         CALL     DIGS
      000EE7 CD 05 78         [ 4] 2655         CALL     RFROM
      000EEA CD 0E AA         [ 4] 2656         CALL     SIGN
      000EED CC 0E C0         [ 2] 2657         JP     EDIGS
                                   2658 
                                   2659 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2660 ;       HEX     ( -- )
                                   2661 ;       Use radix 16 as base for
                                   2662 ;       numeric conversions.
                                   2663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EF0                       2664         _HEADER HEX,3,"HEX"
      000EF0 0E D4                    1         .word LINK 
                           000EF2     2         LINK=.
      000EF2 03                       3         .byte 3  
      000EF3 48 45 58                 4         .ascii "HEX"
      000EF6                          5         HEX:
      000EF6 CD 04 B3         [ 4] 2665         CALL     DOLIT
      000EF9 00 10                 2666         .word      16
      000EFB CD 07 23         [ 4] 2667         CALL     BASE
      000EFE CC 05 15         [ 2] 2668         JP     STORE
                                   2669 
                                   2670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2671 ;       DECIMAL ( -- )
                                   2672 ;       Use radix 10 as base
                                   2673 ;       for numeric conversions.
                                   2674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F01                       2675         _HEADER DECIM,7,"DECIMAL"
      000F01 0E F2                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                           000F03     2         LINK=.
      000F03 07                       3         .byte 7  
      000F04 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000F0B                          5         DECIM:
      000F0B CD 04 B3         [ 4] 2676         CALL     DOLIT
      000F0E 00 0A                 2677         .word      10
      000F10 CD 07 23         [ 4] 2678         CALL     BASE
      000F13 CC 05 15         [ 2] 2679         JP     STORE
                                   2680 
                                   2681 ;; Numeric input, single precision
                                   2682 
                                   2683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2684 ;       DIGIT?  ( c base -- u t )
                                   2685 ;       Convert a character to its numeric
                                   2686 ;       value. A flag indicates success.
                                   2687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F16                       2688         _HEADER DIGTQ,6,"DIGIT?"
      000F16 0F 03                    1         .word LINK 
                           000F18     2         LINK=.
      000F18 06                       3         .byte 6  
      000F19 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000F1F                          5         DIGTQ:
      000F1F CD 06 26         [ 4] 2689         CALL     TOR
      000F22 CD 04 B3         [ 4] 2690         CALL     DOLIT
      000F25 00 30                 2691         .word     48	; "0"
      000F27 CD 09 16         [ 4] 2692         CALL     SUBB
      000F2A CD 04 B3         [ 4] 2693         CALL     DOLIT
      000F2D 00 09                 2694         .word      9
      000F2F CD 06 85         [ 4] 2695         CALL     OVER
      000F32 CD 09 6A         [ 4] 2696         CALL     LESS
      000F35 CD 04 DC         [ 4] 2697         CALL     QBRAN
      000F38 0F 50                 2698         .word      DGTQ1
      000F3A CD 04 B3         [ 4] 2699         CALL     DOLIT
      000F3D 00 07                 2700         .word      7
      000F3F CD 09 16         [ 4] 2701         CALL     SUBB
      000F42 CD 06 5D         [ 4] 2702         CALL     DUPP
      000F45 CD 04 B3         [ 4] 2703         CALL     DOLIT
      000F48 00 0A                 2704         .word      10
      000F4A CD 09 6A         [ 4] 2705         CALL     LESS
      000F4D CD 06 CE         [ 4] 2706         CALL     ORR
      000F50 CD 06 5D         [ 4] 2707 DGTQ1:  CALL     DUPP
      000F53 CD 05 78         [ 4] 2708         CALL     RFROM
      000F56 CC 09 54         [ 2] 2709         JP     ULESS
                                   2710 
                                   2711 
                                   2712 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2713 ; move parse to next char 
                                   2714 ; input:
                                   2715 ;   a    string pointer 
                                   2716 ;   cnt  string length 
                                   2717 ; output:
                                   2718 ;    a    a+1 
                                   2719 ;    cnt  cnt-1
                                   2720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F59                       2721 NEXT_CHAR:: ; ( a cnt -- a cnt )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   2722 ; increment a 
      000F59 6C 03            [ 1] 2723     INC (CELLL+1,X) 
      000F5B 26 02            [ 1] 2724     JRNE 1$
      000F5D 6C 02            [ 1] 2725     INC (CELLL,X)
      000F5F                       2726 1$: ; decrement cnt 
      000F5F 90 93            [ 1] 2727     LDW Y,X 
      000F61 90 FE            [ 2] 2728     LDW Y,(Y)
      000F63 90 5A            [ 2] 2729     DECW Y 
      000F65 FF               [ 2] 2730     LDW (X),Y
      000F66 81               [ 4] 2731     RET 
                                   2732 
                                   2733 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2734 ; check if first character of string
                                   2735 ; is 'c' 
                                   2736 ; if true 
                                   2737 ;     return  a++ cnt-- -1  
                                   2738 ; else 
                                   2739 ;   return a cnt 0 
                                   2740 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F67                       2741 ACCEPT_CHAR:: ; ( a cnt c -- a cnt 0|-1 )
      000F67 CD 06 26         [ 4] 2742     CALL TOR ; a cnt r: c 
                                   2743 ; exit if end of string, cnt==0? 
      000F6A E6 01            [ 1] 2744     LD A,(1,X) ; cnt always < 256 
      000F6C 26 02            [ 1] 2745     JRNE 1$
      000F6E 20 15            [ 2] 2746     JRA 2$ 
      000F70 90 93            [ 1] 2747 1$: LDW Y,X 
      000F72 90 EE 02         [ 2] 2748     LDW Y,(CELLL,Y) ; a 
      000F75 90 F6            [ 1] 2749     LD A,(Y)
      000F77 11 02            [ 1] 2750     CP A,(2,SP) ; c 
      000F79 26 0A            [ 1] 2751     JRNE 2$
                                   2752 ; accept c
      000F7B CD 0F 59         [ 4] 2753     CALL NEXT_CHAR      
      000F7E                       2754     _DOLIT -1
      000F7E CD 04 B3         [ 4]    1     CALL DOLIT 
      000F81 FF FF                    2     .word -1 
      000F83 20 05            [ 2] 2755     JRA 4$  
      000F85                       2756 2$: ; ignore char 
      000F85                       2757     _DOLIT 0
      000F85 CD 04 B3         [ 4]    1     CALL DOLIT 
      000F88 00 00                    2     .word 0 
      000F8A 5B 02            [ 2] 2758 4$: ADDW SP,#CELLL ; drop c 
      000F8C 81               [ 4] 2759     RET 
                                   2760 
                                   2761 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2762 ; check for negative sign 
                                   2763 ; ajust pointer and cnt
                                   2764 ; input:
                                   2765 ;    a        string pointer 
                                   2766 ;    cnt      string length
                                   2767 ; output:
                                   2768 ;    a       adjusted pointer 
                                   2769 ;    cnt     adjusted count
                                   2770 ;    f       boolean flag, true if '-'  
                                   2771 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F8D                       2772 NSIGN: ; ( a cnt -- a cnt f ) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000F8D 1D 00 02         [ 2] 2773     SUBW X,#CELLL ; a cntr f 
      000F90 4B 00            [ 1] 2774     PUSH #0 
                                   2775 ; if count==0 exit 
      000F92 E6 03            [ 1] 2776     LD A,(CELLL+1,X)
      000F94 27 1A            [ 1] 2777     JREQ NO_ADJ 
      000F96 90 93            [ 1] 2778     LDW Y,X 
      000F98 90 EE 04         [ 2] 2779     LDW Y,(2*CELLL,Y) ; a 
      000F9B 90 F6            [ 1] 2780     LD A,(Y) ; char=*a  
      000F9D A1 2D            [ 1] 2781     CP A,#'-' 
      000F9F 27 07            [ 1] 2782     JREQ NEG_SIGN
      000FA1 A1 2B            [ 1] 2783     CP A,#'+' 
      000FA3 27 05            [ 1] 2784     JREQ ADJ_CSTRING
      000FA5 CC 0F B0         [ 2] 2785     JP NO_ADJ  
      000FA8                       2786 NEG_SIGN:
      000FA8 03 01            [ 1] 2787     CPL (1,SP)
      000FAA                       2788 ADJ_CSTRING: 
                                   2789 ; increment a 
      000FAA 90 5C            [ 1] 2790     INCW Y ; a++ 
      000FAC EF 04            [ 2] 2791     LDW (2*CELLL,X),Y 
                                   2792 ; decrement cnt 
      000FAE 6A 03            [ 1] 2793     DEC (CELLL+1,X)    
      000FB0                       2794 NO_ADJ: 
      000FB0 84               [ 1] 2795     POP A 
      000FB1 F7               [ 1] 2796     LD (X),A 
      000FB2 E7 01            [ 1] 2797     LD (1,X),A 
      000FB4 81               [ 4] 2798     RET 
                                   2799 
                           000000  2800 .ifeq  WANT_DOUBLE  
                                   2801 ; this code included only if WANT_DOUBLE=0
                                   2802 
                                   2803 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2804 ; skip digits,stop at first non digit.
                                   2805 ; count skipped digits 
                                   2806 ; input:
                                   2807 ;    a     string address 
                                   2808 ;    cnt   charaters left in string 
                                   2809 ; output:
                                   2810 ;    a+         updated a 
                                   2811 ;    cnt-       updated cnt
                                   2812 ;    skip       digits skipped 
                                   2813 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
                                   2814 ; local variables
                                   2815         CNT = 1 ; byte
                                   2816         SKIP = 2 ; byte 
                                   2817         VARS_SIZE=2        
                                   2818 SKIP_DIGITS: ; ( a cnt -- a+ cnt- skip )
                                   2819         _VARS VARS_SIZE ; space on rstack for local vars 
                                   2820         CLR (SKIP,SP)
                                   2821         LD A,(1,X); cnt 
                                   2822         LD (CNT,SP),A 
                                   2823         _DROP ; drop cnt from stack 
                                   2824 1$:     TNZ (CNT,SP)
                                   2825         JREQ 8$
                                   2826         CALL COUNT  
                                   2827         CALL BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   2828         CALL AT 
                                   2829         CALL DIGTQ 
                                   2830         _QBRAN 6$ ; not a digit
                                   2831         INC (SKIP,SP)
                                   2832         DEC (CNT,SP)
                                   2833         _DROP ; c 
                                   2834         JRA 1$ 
                                   2835 6$:     _DROP ; c 
                                   2836         CALL ONEM ; a--         
                                   2837 8$:     SUBW X,#2*CELLL ; space for cnt- 
                                   2838         CLRW Y 
                                   2839         LD A,(SKIP,SP)
                                   2840         LD YL,A 
                                   2841         LDW (X),Y 
                                   2842         LD A,(CNT,SP)
                                   2843         LD YL,A 
                                   2844         LDW (CELLL,X),Y ;  
                                   2845         _DROP_VARS VARS_SIZE ; discard local vars 
                                   2846         RET 
                                   2847 
                                   2848 
                                   2849 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2850 ; get all digits in row 
                                   2851 ; stop at first non-digit or end of string
                                   2852 ; ( n a cnt -- n  a+ cnt- digits )
                                   2853 ; input:
                                   2854 ;   n    initial value of integer 
                                   2855 ;   a    string address 
                                   2856 ;   cnt  # chars in string 
                                   2857 ; output:
                                   2858 ;   n    integer value after parse 
                                   2859 ;   a+   incremented a 
                                   2860 ;   cnt- decremented cnt 
                                   2861 ;   f_skip  -1 ->       some digits have been skip  
                                   2862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2863 ; local variables 
                                   2864         SKIP=4 ;byte # digits skipped   
                                   2865         UINT=2   ;word 
                                   2866         CNT=1    ; byte 
                                   2867         VARS_SIZE=4
                                   2868 parse_digits: ; ( n a cnt -- n  a+ cnt- skip )
                                   2869     SUB SP,#VARS_SIZE
                                   2870     CLR (SKIP,SP)
                                   2871     LD A,(1,X) ; count 
                                   2872     LD (CNT,SP),A 
                                   2873     _DROP ; drop cnt from stack 
                                   2874     LDW Y,X 
                                   2875     LDW Y,(CELLL,Y) ; n 
                                   2876     LDW (UINT,SP),Y  
                                   2877 0$:
                                   2878     TNZ (CNT,SP)
                                   2879     JREQ 9$ 
                                   2880 1$: CALL COUNT ; n a+ char 
                                   2881     CALL BASE 
                                   2882     CALL AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   2883     CALL DIGTQ 
                                   2884     _QBRAN 8$ ; not a digit
                                   2885     DEC (CNT,SP)
                                   2886     SUBW X,#CELLL 
                                   2887     LDW Y,(UINT,SP)
                                   2888     LDW (X),Y 
                                   2889     CALL BASE 
                                   2890     CALL AT 
                                   2891     CALL UMSTA ; u u -- ud 
                                   2892 ; check for overflow 
                                   2893     LDW Y,X 
                                   2894     LDW Y,(Y)
                                   2895     _DROP ; ud hi word 
                                   2896     TNZW Y 
                                   2897     JREQ 4$ ; no overflow yet 
                                   2898 ; when overflow count following digits 
                                   2899 ; but don't integrate them in UINT 
                                   2900 ; round last value of UINT 
                                   2901     _DROP  ; ud low word 
                                   2902     CALL BASE
                                   2903     CALL AT  
                                   2904     CALL TWOSL 
                                   2905     CALL LESS ; last_digit < BASE/2 ? 
                                   2906     _TBRAN 2$  ; no rounding 
                                   2907 ; round up UINT 
                                   2908     LDW Y,(UINT,SP)
                                   2909     INCW Y 
                                   2910     LDW (UINT,SP),Y 
                                   2911 2$: CALL ONEM ; a-- 
                                   2912     INC (CNT,SP) ; cnt++
                                   2913     LDW Y,(UINT,SP)
                                   2914     LDW (CELLL,X),Y 
                                   2915     SUBW X,#CELLL ; space for count 
                                   2916     LD A,(CNT,SP)
                                   2917     CLRW Y 
                                   2918     LD YL,A 
                                   2919     LDW (X),Y ; n a+ cnt- 
                                   2920     CALL SKIP_DIGITS ; n a+ cnt- skip  
                                   2921     JRA 10$     
                                   2922 4$: 
                                   2923     CALL PLUS ; udlo+digit  
                                   2924     LDW Y,X 
                                   2925     LDW Y,(Y) ; n 
                                   2926     LDW (UINT,SP),Y 
                                   2927     _DROP ; sum from stack 
                                   2928     JRA 0$ 
                                   2929 8$: ; n a+ char
                                   2930     _DROP ; drop char 
                                   2931     CALL ONEM ; decrement a 
                                   2932 9$: ; no more digits 
                                   2933     LDW Y,(UINT,SP)
                                   2934     LDW (CELLL,X),Y ; 
                                   2935     SUBW X,#2*CELLL ; make space for cnt- digits 
                                   2936     LD A,(CNT,SP)
                                   2937     CLRW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   2938     LD YL,A 
                                   2939     LDW (CELLL,X),Y ; u a+ cnt- 
                                   2940     LD A,(SKIP,SP)
                                   2941     LD YL,A 
                                   2942     LDW (X),Y ; u a+ cnt- digits 
                                   2943 10$:
                                   2944     _DROP_VARS VARS_SIZE  ; dicard local variables 
                                   2945     RET 
                                   2946 
                                   2947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2948 ;       NUMBER? ( a -- n T | a F )
                                   2949 ;       Convert a number string to
                                   2950 ;       integer. Push a flag on tos.
                                   2951 ;  if integer parse fail because of extra 
                                   2952 ;  character in string and WANT_FLOAT24=1 
                                   2953 ;  in config.inc then jump to FLOAT? in
                                   2954 ;  float24.asm
                                   2955 ; 
                                   2956 ; accepted number format:
                                   2957 ;    decimal ::= ['-'|'+']dec_digits+
                                   2958 ;    hexadecimal ::= ['-'|'+']'$'hex_digits+
                                   2959 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2960         _HEADER NUMBQ,7,"NUMBER?"
                                   2961 ; save BASE
                                   2962         CALL     BASE
                                   2963         CALL     AT
                                   2964         CALL     TOR
                                   2965         CALL     ZERO
                                   2966         CALL     OVER
                                   2967         CALL     COUNT ; string length,  a 0 a+ cnt 
                                   2968 ; check for negative number 
                                   2969         CALL    NSIGN 
                                   2970         CALL    TOR    ; save number sign 
                                   2971 ;  check hexadecimal character        
                                   2972         _DOLIT  '$'
                                   2973         CALL    ACCEPT_CHAR 
                                   2974         _QBRAN  1$ 
                                   2975         CALL    HEX 
                                   2976 1$: ; stack: a 0 a cnt r: base sign 
                                   2977         CALL     parse_digits ; a 0 a+ cnt- -- a n a+ cnt- skip R: base sign
                                   2978         CALL    OVER 
                                   2979         _TBRAN  NUMQ6 
                                   2980         _DROPN 3   ; a n  R: base sign 
                                   2981         CALL     RFROM   ; a n sign R: base 
                                   2982         _QBRAN   NUMQ3
                                   2983         CALL     NEGAT ; a n R: base 
                                   2984 NUMQ3:  
                                   2985         CALL    SWAPP ; n a 
                                   2986         LDW  Y, #-1 
                                   2987         LDW (X),Y     ; n -1 R: base 
                                   2988         JRA      NUMQ9
                                   2989 NUMQ6:  
                                   2990 .if WANT_FLOAT24 
                                   2991 ; float24 installed try floating point number  
                                   2992         JP    FLOATQ  ; a n a+ cnt- skip R: base sign   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   2993 .else ; error unknown token 
                                   2994         _RDROP ; remove sign from rstack 
                                   2995         ADDW  X,#3*CELLL ; drop a+ cnt skip S: a n  R: base  
                                   2996         CLRW Y  
                                   2997         LDW (X),Y  ;  a 0 R: base 
                                   2998 .endif 
                                   2999 ; restore BASE 
                                   3000 NUMQ9: 
                                   3001         CALL     RFROM
                                   3002         CALL     BASE
                                   3003         JP       STORE
                                   3004 .endif ; WANT_DOUBLE   
                                   3005 
                                   3006 ;; Basic I/O
                                   3007 
                                   3008 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3009 ;       KEY     ( -- c )
                                   3010 ;       Wait for and return an
                                   3011 ;       input character.
                                   3012 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FB5                       3013         _HEADER KEY,3,"KEY"
      000FB5 0F 18                    1         .word LINK 
                           000FB7     2         LINK=.
      000FB7 03                       3         .byte 3  
      000FB8 4B 45 59                 4         .ascii "KEY"
      000FBB                          5         KEY:
      000FBB 3D 3D            [ 1] 3014 0$:     TNZ CHAR_RDY 
      000FBD 27 FC            [ 1] 3015         JREQ 0$         
      000FBF 9B               [ 1] 3016         SIM 
      000FC0 1D 00 02         [ 2] 3017         SUBW X,#CELLL 
      000FC3 7F               [ 1] 3018         CLR (X)
      000FC4 B6 3C            [ 1] 3019         LD A,RX_CHAR 
      000FC6 E7 01            [ 1] 3020         LD (1,X),A 
      000FC8 3F 3D            [ 1] 3021         CLR CHAR_RDY 
      000FCA 9A               [ 1] 3022         RIM 
      000FCB 81               [ 4] 3023         RET  
                                   3024 
                                   3025 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3026 ;       NUF?    ( -- t )
                                   3027 ;       Return false if no input,
                                   3028 ;       else pause and if CR return true.
                                   3029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FCC                       3030         _HEADER NUFQ,4,"NUF?"
      000FCC 0F B7                    1         .word LINK 
                           000FCE     2         LINK=.
      000FCE 04                       3         .byte 4  
      000FCF 4E 55 46 3F              4         .ascii "NUF?"
      000FD3                          5         NUFQ:
      000FD3 CD 04 55         [ 4] 3031         CALL     QKEY
      000FD6 CD 06 5D         [ 4] 3032         CALL     DUPP
      000FD9 CD 04 DC         [ 4] 3033         CALL     QBRAN
      000FDC 0F EC                 3034         .word    NUFQ1
      000FDE CD 08 60         [ 4] 3035         CALL     DDROP
      000FE1 CD 0F BB         [ 4] 3036         CALL     KEY
      000FE4 CD 04 B3         [ 4] 3037         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      000FE7 00 0D                 3038         .word      CRR
      000FE9 CC 09 3E         [ 2] 3039         JP     EQUAL
      000FEC 81               [ 4] 3040 NUFQ1:  RET
                                   3041 
                                   3042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3043 ;       SPACE   ( -- )
                                   3044 ;       Send  blank character to
                                   3045 ;       output device.
                                   3046 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FED                       3047         _HEADER SPACE,5,"SPACE"
      000FED 0F CE                    1         .word LINK 
                           000FEF     2         LINK=.
      000FEF 05                       3         .byte 5  
      000FF0 53 50 41 43 45           4         .ascii "SPACE"
      000FF5                          5         SPACE:
      000FF5 CD 0C 46         [ 4] 3048         CALL     BLANK
      000FF8 CC 04 7A         [ 2] 3049         JP     EMIT
                                   3050 
                                   3051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3052 ;       SPACES  ( +n -- )
                                   3053 ;       Send n spaces to output device.
                                   3054 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000FFB                       3055         _HEADER SPACS,6,"SPACES"
      000FFB 0F EF                    1         .word LINK 
                           000FFD     2         LINK=.
      000FFD 06                       3         .byte 6  
      000FFE 53 50 41 43 45 53        4         .ascii "SPACES"
      001004                          5         SPACS:
      001004 CD 0C 53         [ 4] 3056         CALL     ZERO
      001007 CD 09 AF         [ 4] 3057         CALL     MAX
      00100A CD 06 26         [ 4] 3058         CALL     TOR
      00100D 20 03            [ 2] 3059         JRA      CHAR2
      00100F CD 0F F5         [ 4] 3060 CHAR1:  CALL     SPACE
      001012 CD 04 C7         [ 4] 3061 CHAR2:  CALL     DONXT
      001015 10 0F                 3062         .word    CHAR1
      001017 81               [ 4] 3063         RET
                                   3064 
                                   3065 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3066 ;       TYPE    ( b u -- )
                                   3067 ;       Output u characters from b.
                                   3068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001018                       3069         _HEADER TYPES,4,"TYPE"
      001018 0F FD                    1         .word LINK 
                           00101A     2         LINK=.
      00101A 04                       3         .byte 4  
      00101B 54 59 50 45              4         .ascii "TYPE"
      00101F                          5         TYPES:
      00101F CD 06 26         [ 4] 3070         CALL     TOR
      001022 20 06            [ 2] 3071         JRA     TYPE2
      001024 CD 0D 16         [ 4] 3072 TYPE1:  CALL     COUNT 
      001027 CD 04 7A         [ 4] 3073         CALL     EMIT
      00102A                       3074 TYPE2:  _DONXT  TYPE1
      00102A CD 04 C7         [ 4]    1     CALL DONXT 
      00102D 10 24                    2     .word TYPE1 
      00102F                       3075         _DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00102F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001032 81               [ 4] 3076         RET 
                                   3077 
                                   3078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3079 ;       CR      ( -- )
                                   3080 ;       Output a carriage return
                                   3081 ;       and a line feed.
                                   3082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001033                       3083         _HEADER CR,2,"CR"
      001033 10 1A                    1         .word LINK 
                           001035     2         LINK=.
      001035 02                       3         .byte 2  
      001036 43 52                    4         .ascii "CR"
      001038                          5         CR:
      001038                       3084         _DOLIT  CRR 
      001038 CD 04 B3         [ 4]    1     CALL DOLIT 
      00103B 00 0D                    2     .word CRR 
      00103D CD 04 7A         [ 4] 3085         CALL    EMIT
      001040                       3086         _DOLIT  LF
      001040 CD 04 B3         [ 4]    1     CALL DOLIT 
      001043 00 0A                    2     .word LF 
      001045 CC 04 7A         [ 2] 3087         JP      EMIT
                                   3088 
                                   3089 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3090 ;       do$     ( -- a )
                                   3091 ;       Return  address of a compiled
                                   3092 ;       string.
                                   3093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3094 ;       _HEADER DOSTR,COMPO+3,"DO$"
      001048                       3095 DOSTR:
      001048 CD 05 78         [ 4] 3096         CALL     RFROM
      00104B CD 05 89         [ 4] 3097         CALL     RAT
      00104E CD 05 78         [ 4] 3098         CALL     RFROM
      001051 CD 0D 16         [ 4] 3099         CALL     COUNT
      001054 CD 08 80         [ 4] 3100         CALL     PLUS
      001057 CD 06 26         [ 4] 3101         CALL     TOR
      00105A CD 06 6D         [ 4] 3102         CALL     SWAPP
      00105D CD 06 26         [ 4] 3103         CALL     TOR
      001060 81               [ 4] 3104         RET
                                   3105 
                                   3106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3107 ;       $"|     ( -- a )
                                   3108 ;       Run time routine compiled by $".
                                   3109 ;       Return address of a compiled string.
                                   3110 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3111 ;       _HEADER STRQP,COMPO+3,"$\"|"
      001061                       3112 STRQP:
      001061 CD 10 48         [ 4] 3113         CALL     DOSTR
      001064 81               [ 4] 3114         RET
                                   3115 
                                   3116 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3117 ;       ."|     ( -- )
                                   3118 ;       Run time routine of ." .
                                   3119 ;       Output a compiled string.
                                   3120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3121 ;       _HEADER DOTQP,COMPO+3,".\"|"
      001065                       3122 DOTQP:
      001065 CD 10 48         [ 4] 3123         CALL     DOSTR
      001068 CD 0D 16         [ 4] 3124         CALL     COUNT
      00106B CC 10 1F         [ 2] 3125         JP     TYPES
                                   3126 
                                   3127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3128 ;       .R      ( n +n -- )
                                   3129 ;       Display an integer in a field
                                   3130 ;       of n columns, right justified.
                                   3131 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00106E                       3132         _HEADER DOTR,2,".R"
      00106E 10 35                    1         .word LINK 
                           001070     2         LINK=.
      001070 02                       3         .byte 2  
      001071 2E 52                    4         .ascii ".R"
      001073                          5         DOTR:
      001073 CD 06 26         [ 4] 3133         CALL     TOR
      001076 CD 0E D8         [ 4] 3134         CALL     STR
      001079 CD 05 78         [ 4] 3135         CALL     RFROM
      00107C CD 06 85         [ 4] 3136         CALL     OVER
      00107F CD 09 16         [ 4] 3137         CALL     SUBB
      001082 CD 10 04         [ 4] 3138         CALL     SPACS
      001085 CC 10 1F         [ 2] 3139         JP     TYPES
                                   3140 
                                   3141 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3142 ;       U.R     ( u +n -- )
                                   3143 ;       Display an unsigned integer
                                   3144 ;       in n column, right justified.
                                   3145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001088                       3146         _HEADER UDOTR,3,"U.R"
      001088 10 70                    1         .word LINK 
                           00108A     2         LINK=.
      00108A 03                       3         .byte 3  
      00108B 55 2E 52                 4         .ascii "U.R"
      00108E                          5         UDOTR:
      00108E CD 06 26         [ 4] 3147         CALL     TOR
      001091 CD 0E 5B         [ 4] 3148         CALL     BDIGS
      001094 CD 0E 95         [ 4] 3149         CALL     DIGS
      001097 CD 0E C0         [ 4] 3150         CALL     EDIGS
      00109A CD 05 78         [ 4] 3151         CALL     RFROM
      00109D CD 06 85         [ 4] 3152         CALL     OVER
      0010A0 CD 09 16         [ 4] 3153         CALL     SUBB
      0010A3 CD 10 04         [ 4] 3154         CALL     SPACS
      0010A6 CC 10 1F         [ 2] 3155         JP     TYPES
                                   3156 
                                   3157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3158 ;       U.      ( u -- )
                                   3159 ;       Display an unsigned integer
                                   3160 ;       in free format.
                                   3161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010A9                       3162         _HEADER UDOT,2,"U."
      0010A9 10 8A                    1         .word LINK 
                           0010AB     2         LINK=.
      0010AB 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      0010AC 55 2E                    4         .ascii "U."
      0010AE                          5         UDOT:
      0010AE CD 0E 5B         [ 4] 3163         CALL     BDIGS
      0010B1 CD 0E 95         [ 4] 3164         CALL     DIGS
      0010B4 CD 0E C0         [ 4] 3165         CALL     EDIGS
      0010B7 CD 0F F5         [ 4] 3166         CALL     SPACE
      0010BA CC 10 1F         [ 2] 3167         JP     TYPES
                                   3168 
                                   3169 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3170 ;   H. ( n -- )
                                   3171 ;   display n in hexadecimal 
                                   3172 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010BD                       3173         _HEADER HDOT,2,"H."
      0010BD 10 AB                    1         .word LINK 
                           0010BF     2         LINK=.
      0010BF 02                       3         .byte 2  
      0010C0 48 2E                    4         .ascii "H."
      0010C2                          5         HDOT:
      0010C2 CD 07 23         [ 4] 3174         CALL BASE 
      0010C5 CD 05 27         [ 4] 3175         CALL AT 
      0010C8 CD 06 26         [ 4] 3176         CALL TOR 
      0010CB CD 0E F6         [ 4] 3177         CALL HEX 
      0010CE CD 10 AE         [ 4] 3178         CALL UDOT 
      0010D1 CD 05 78         [ 4] 3179         CALL RFROM 
      0010D4 CD 07 23         [ 4] 3180         CALL BASE 
      0010D7 CC 05 15         [ 2] 3181         JP STORE 
                                   3182          
                                   3183 
                                   3184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3185 ;       .       ( w -- )
                                   3186 ;       Display an integer in free
                                   3187 ;       format, preceeded by a space.
                                   3188 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010DA                       3189         _HEADER DOT,1,"."
      0010DA 10 BF                    1         .word LINK 
                           0010DC     2         LINK=.
      0010DC 01                       3         .byte 1  
      0010DD 2E                       4         .ascii "."
      0010DE                          5         DOT:
      0010DE CD 07 23         [ 4] 3190         CALL     BASE
      0010E1 CD 05 27         [ 4] 3191         CALL     AT
      0010E4 CD 04 B3         [ 4] 3192         CALL     DOLIT
      0010E7 00 0A                 3193         .word      10
      0010E9 CD 06 E3         [ 4] 3194         CALL     XORR    ;?decimal
      0010EC CD 04 DC         [ 4] 3195         CALL     QBRAN
      0010EF 10 F3                 3196         .word      DOT1
      0010F1 20 BB            [ 2] 3197         JRA     UDOT
      0010F3 CD 0E D8         [ 4] 3198 DOT1:   CALL     STR
      0010F6 CD 0F F5         [ 4] 3199         CALL     SPACE
      0010F9 CC 10 1F         [ 2] 3200         JP     TYPES
                                   3201 
                                   3202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3203 ;       ?       ( a -- )
                                   3204 ;       Display contents in memory cell.
                                   3205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0010FC                       3206         _HEADER QUEST,1,"?"
      0010FC 10 DC                    1         .word LINK 
                           0010FE     2         LINK=.
      0010FE 01                       3         .byte 1  
      0010FF 3F                       4         .ascii "?"
      001100                          5         QUEST:
      001100 CD 05 27         [ 4] 3207         CALL     AT
      001103 20 D9            [ 2] 3208         JRA     DOT
                                   3209 
                                   3210 ;; Parsing
                                   3211 
                                   3212 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3213 ;       parse   ( b u c -- b u delta ; <string> )
                                   3214 ;       Scan string delimited by c.
                                   3215 ;       Return found string and its offset.
                                   3216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001105                       3217         _HEADER PARS,5,"PARS$"
      001105 10 FE                    1         .word LINK 
                           001107     2         LINK=.
      001107 05                       3         .byte 5  
      001108 50 41 52 53 24           4         .ascii "PARS$"
      00110D                          5         PARS:
      00110D CD 07 32         [ 4] 3218         CALL     TEMP
      001110 CD 05 15         [ 4] 3219         CALL     STORE
      001113 CD 06 85         [ 4] 3220         CALL     OVER
      001116 CD 06 26         [ 4] 3221         CALL     TOR
      001119 CD 06 5D         [ 4] 3222         CALL     DUPP
      00111C CD 04 DC         [ 4] 3223         CALL     QBRAN
      00111F 11 C5                 3224         .word    PARS8
      001121 CD 0B F4         [ 4] 3225         CALL     ONEM
      001124 CD 07 32         [ 4] 3226         CALL     TEMP
      001127 CD 05 27         [ 4] 3227         CALL     AT
      00112A CD 0C 46         [ 4] 3228         CALL     BLANK
      00112D CD 09 3E         [ 4] 3229         CALL     EQUAL
      001130 CD 04 DC         [ 4] 3230         CALL     QBRAN
      001133 11 66                 3231         .word      PARS3
      001135 CD 06 26         [ 4] 3232         CALL     TOR
      001138 CD 0C 46         [ 4] 3233 PARS1:  CALL     BLANK
      00113B CD 06 85         [ 4] 3234         CALL     OVER
      00113E CD 05 45         [ 4] 3235         CALL     CAT     ;skip leading blanks ONLY
      001141 CD 09 16         [ 4] 3236         CALL     SUBB
      001144 CD 06 94         [ 4] 3237         CALL     ZLESS
      001147 CD 08 B9         [ 4] 3238         CALL     INVER
      00114A CD 04 DC         [ 4] 3239         CALL     QBRAN
      00114D 11 63                 3240         .word      PARS2
      00114F CD 0B E7         [ 4] 3241         CALL     ONEP
      001152 CD 04 C7         [ 4] 3242         CALL     DONXT
      001155 11 38                 3243         .word      PARS1
      001157 CD 05 78         [ 4] 3244         CALL     RFROM
      00115A CD 06 53         [ 4] 3245         CALL     DROP
      00115D CD 0C 53         [ 4] 3246         CALL     ZERO
      001160 CC 06 5D         [ 2] 3247         JP     DUPP
      001163 CD 05 78         [ 4] 3248 PARS2:  CALL     RFROM
      001166 CD 06 85         [ 4] 3249 PARS3:  CALL     OVER
      001169 CD 06 6D         [ 4] 3250         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      00116C CD 06 26         [ 4] 3251         CALL     TOR
      00116F CD 07 32         [ 4] 3252 PARS4:  CALL     TEMP
      001172 CD 05 27         [ 4] 3253         CALL     AT
      001175 CD 06 85         [ 4] 3254         CALL     OVER
      001178 CD 05 45         [ 4] 3255         CALL     CAT
      00117B CD 09 16         [ 4] 3256         CALL     SUBB    ;scan for delimiter
      00117E CD 07 32         [ 4] 3257         CALL     TEMP
      001181 CD 05 27         [ 4] 3258         CALL     AT
      001184 CD 0C 46         [ 4] 3259         CALL     BLANK
      001187 CD 09 3E         [ 4] 3260         CALL     EQUAL
      00118A CD 04 DC         [ 4] 3261         CALL     QBRAN
      00118D 11 92                 3262         .word      PARS5
      00118F CD 06 94         [ 4] 3263         CALL     ZLESS
      001192 CD 04 DC         [ 4] 3264 PARS5:  CALL     QBRAN
      001195 11 A7                 3265         .word      PARS6
      001197 CD 0B E7         [ 4] 3266         CALL     ONEP
      00119A CD 04 C7         [ 4] 3267         CALL     DONXT
      00119D 11 6F                 3268         .word      PARS4
      00119F CD 06 5D         [ 4] 3269         CALL     DUPP
      0011A2 CD 06 26         [ 4] 3270         CALL     TOR
      0011A5 20 0F            [ 2] 3271         JRA     PARS7
      0011A7 CD 05 78         [ 4] 3272 PARS6:  CALL     RFROM
      0011AA CD 06 53         [ 4] 3273         CALL     DROP
      0011AD CD 06 5D         [ 4] 3274         CALL     DUPP
      0011B0 CD 0B E7         [ 4] 3275         CALL     ONEP
      0011B3 CD 06 26         [ 4] 3276         CALL     TOR
      0011B6 CD 06 85         [ 4] 3277 PARS7:  CALL     OVER
      0011B9 CD 09 16         [ 4] 3278         CALL     SUBB
      0011BC CD 05 78         [ 4] 3279         CALL     RFROM
      0011BF CD 05 78         [ 4] 3280         CALL     RFROM
      0011C2 CC 09 16         [ 2] 3281         JP     SUBB
      0011C5 CD 06 85         [ 4] 3282 PARS8:  CALL     OVER
      0011C8 CD 05 78         [ 4] 3283         CALL     RFROM
      0011CB CC 09 16         [ 2] 3284         JP     SUBB
                                   3285 
                                   3286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3287 ;       PARSE   ( c -- b u ; <string> )
                                   3288 ;       Scan input stream and return
                                   3289 ;       counted string delimited by c.
                                   3290 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0011CE                       3291         _HEADER PARSE,5,"PARSE"
      0011CE 11 07                    1         .word LINK 
                           0011D0     2         LINK=.
      0011D0 05                       3         .byte 5  
      0011D1 50 41 52 53 45           4         .ascii "PARSE"
      0011D6                          5         PARSE:
      0011D6 CD 06 26         [ 4] 3292         CALL     TOR
      0011D9 CD 0D 4F         [ 4] 3293         CALL     TIB
      0011DC CD 07 41         [ 4] 3294         CALL     INN
      0011DF CD 05 27         [ 4] 3295         CALL     AT
      0011E2 CD 08 80         [ 4] 3296         CALL     PLUS    ;current input buffer pointer
      0011E5 CD 07 51         [ 4] 3297         CALL     NTIB
      0011E8 CD 05 27         [ 4] 3298         CALL     AT
      0011EB CD 07 41         [ 4] 3299         CALL     INN
      0011EE CD 05 27         [ 4] 3300         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0011F1 CD 09 16         [ 4] 3301         CALL     SUBB    ;remaining count
      0011F4 CD 05 78         [ 4] 3302         CALL     RFROM
      0011F7 CD 11 0D         [ 4] 3303         CALL     PARS
      0011FA CD 07 41         [ 4] 3304         CALL     INN
      0011FD CC 0C C3         [ 2] 3305         JP     PSTOR
                                   3306 
                                   3307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3308 ;       .(      ( -- )
                                   3309 ;       Output following string up to next ) .
                                   3310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001200                       3311         _HEADER DOTPR,IMEDD+2,".("
      001200 11 D0                    1         .word LINK 
                           001202     2         LINK=.
      001202 82                       3         .byte IMEDD+2  
      001203 2E 28                    4         .ascii ".("
      001205                          5         DOTPR:
      001205 CD 04 B3         [ 4] 3312         CALL     DOLIT
      001208 00 29                 3313         .word     41	; ")"
      00120A CD 11 D6         [ 4] 3314         CALL     PARSE
      00120D CC 10 1F         [ 2] 3315         JP     TYPES
                                   3316 
                                   3317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3318 ;       (       ( -- )
                                   3319 ;       Ignore following string up to next ).
                                   3320 ;       A comment.
                                   3321 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001210                       3322         _HEADER PAREN,IMEDD+1,"("
      001210 12 02                    1         .word LINK 
                           001212     2         LINK=.
      001212 81                       3         .byte IMEDD+1  
      001213 28                       4         .ascii "("
      001214                          5         PAREN:
      001214 CD 04 B3         [ 4] 3323         CALL     DOLIT
      001217 00 29                 3324         .word     41	; ")"
      001219 CD 11 D6         [ 4] 3325         CALL     PARSE
      00121C CC 08 60         [ 2] 3326         JP     DDROP
                                   3327 
                                   3328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3329 ;       \       ( -- )
                                   3330 ;       Ignore following text till
                                   3331 ;       end of line.
                                   3332 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00121F                       3333         _HEADER BKSLA,IMEDD+1,'\'
      00121F 12 12                    1         .word LINK 
                           001221     2         LINK=.
      001221 81                       3         .byte IMEDD+1  
      001222 5C                       4         .ascii '\'
      001223                          5         BKSLA:
                                   3334 
      001223 45 0F 0D         [ 1] 3335         mov UINN+1,UCTIB+1
      001226 81               [ 4] 3336         ret 
                                   3337 
                                   3338 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3339 ;       WORD    ( c -- a ; <string> )
                                   3340 ;       Parse a word from input stream
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   3341 ;       and copy it to code dictionary.
                                   3342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001227                       3343         _HEADER WORDD,4,"WORD"
      001227 12 21                    1         .word LINK 
                           001229     2         LINK=.
      001229 04                       3         .byte 4  
      00122A 57 4F 52 44              4         .ascii "WORD"
      00122E                          5         WORDD:
      00122E CD 11 D6         [ 4] 3344         CALL     PARSE
      001231 CD 0D 2D         [ 4] 3345         CALL     HERE
      001234 CD 0B BC         [ 4] 3346         CALL     CELLP
                           000000  3347 .IF CASE_SENSE 
                                   3348         JP      PACKS 
                           000001  3349 .ELSE                 
      001237 CD 0D FE         [ 4] 3350         CALL     PACKS
                                   3351 ; uppercase TOKEN 
      00123A CD 06 5D         [ 4] 3352         CALL    DUPP 
      00123D CD 0D 16         [ 4] 3353         CALL    COUNT 
      001240 CD 06 26         [ 4] 3354         CALL    TOR 
      001243 CD 04 F8         [ 4] 3355         CALL    BRAN 
      001246 12 74                 3356         .word   UPPER2  
      001248                       3357 UPPER:
      001248 CD 06 5D         [ 4] 3358         CALL    DUPP 
      00124B CD 05 45         [ 4] 3359         CALL    CAT
      00124E CD 06 5D         [ 4] 3360         CALL    DUPP 
      001251 CD 04 B3         [ 4] 3361         CALL   DOLIT
      001254 00 61                 3362         .word   'a' 
      001256 CD 04 B3         [ 4] 3363         CALL    DOLIT
      001259 00 7B                 3364         .word   'z'+1 
      00125B CD 09 DA         [ 4] 3365         CALL   WITHI 
      00125E CD 04 DC         [ 4] 3366         CALL   QBRAN
      001261 12 6B                 3367         .word  UPPER1  
      001263 CD 04 B3         [ 4] 3368         CALL    DOLIT 
      001266 00 DF                 3369         .word   0xDF 
      001268 CD 06 BA         [ 4] 3370         CALL    ANDD 
      00126B                       3371 UPPER1:
      00126B CD 06 85         [ 4] 3372         CALL    OVER 
      00126E CD 05 34         [ 4] 3373         CALL    CSTOR          
      001271 CD 0B E7         [ 4] 3374         CALL    ONEP 
      001274                       3375 UPPER2: 
      001274 CD 04 C7         [ 4] 3376         CALL    DONXT
      001277 12 48                 3377         .word   UPPER  
      001279 CD 06 53         [ 4] 3378         CALL    DROP  
      00127C 81               [ 4] 3379         RET 
                                   3380 .ENDIF 
                                   3381 
                                   3382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3383 ;       TOKEN   ( -- a ; <string> )
                                   3384 ;       Parse a word from input stream
                                   3385 ;       and copy it to name dictionary.
                                   3386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00127D                       3387         _HEADER TOKEN,5,"TOKEN"
      00127D 12 29                    1         .word LINK 
                           00127F     2         LINK=.
      00127F 05                       3         .byte 5  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001280 54 4F 4B 45 4E           4         .ascii "TOKEN"
      001285                          5         TOKEN:
      001285 CD 0C 46         [ 4] 3388         CALL     BLANK
      001288 CC 12 2E         [ 2] 3389         JP     WORDD
                                   3390 
                                   3391 ;; Dictionary search
                                   3392 
                                   3393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3394 ;       NAME>   ( na -- ca )
                                   3395 ;       Return a code address given
                                   3396 ;       a name address.
                                   3397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00128B                       3398         _HEADER NAMET,5,"NAME>"
      00128B 12 7F                    1         .word LINK 
                           00128D     2         LINK=.
      00128D 05                       3         .byte 5  
      00128E 4E 41 4D 45 3E           4         .ascii "NAME>"
      001293                          5         NAMET:
      001293 CD 0D 16         [ 4] 3399         CALL     COUNT
      001296 CD 04 B3         [ 4] 3400         CALL     DOLIT
      001299 00 1F                 3401         .word      31
      00129B CD 06 BA         [ 4] 3402         CALL     ANDD
      00129E CC 08 80         [ 2] 3403         JP     PLUS
                                   3404 
                                   3405 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3406 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3407 ;       Compare u cells in two
                                   3408 ;       strings. Return 0 if identical.
                                   3409 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012A1                       3410         _HEADER SAMEQ,5,"SAME?"
      0012A1 12 8D                    1         .word LINK 
                           0012A3     2         LINK=.
      0012A3 05                       3         .byte 5  
      0012A4 53 41 4D 45 3F           4         .ascii "SAME?"
      0012A9                          5         SAMEQ:
      0012A9 CD 0B F4         [ 4] 3411         CALL     ONEM
      0012AC CD 06 26         [ 4] 3412         CALL     TOR
      0012AF 20 29            [ 2] 3413         JRA     SAME2
      0012B1 CD 06 85         [ 4] 3414 SAME1:  CALL     OVER
      0012B4 CD 05 89         [ 4] 3415         CALL     RAT
      0012B7 CD 08 80         [ 4] 3416         CALL     PLUS
      0012BA CD 05 45         [ 4] 3417         CALL     CAT
      0012BD CD 06 85         [ 4] 3418         CALL     OVER
      0012C0 CD 05 89         [ 4] 3419         CALL     RAT
      0012C3 CD 08 80         [ 4] 3420         CALL     PLUS
      0012C6 CD 05 45         [ 4] 3421         CALL     CAT
      0012C9 CD 09 16         [ 4] 3422         CALL     SUBB
      0012CC CD 08 10         [ 4] 3423         CALL     QDUP
      0012CF CD 04 DC         [ 4] 3424         CALL     QBRAN
      0012D2 12 DA                 3425         .word      SAME2
      0012D4 CD 05 78         [ 4] 3426         CALL     RFROM
      0012D7 CC 06 53         [ 2] 3427         JP     DROP
      0012DA CD 04 C7         [ 4] 3428 SAME2:  CALL     DONXT
      0012DD 12 B1                 3429         .word      SAME1
      0012DF CC 0C 53         [ 2] 3430         JP     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   3431 
                                   3432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3433 ;       find    ( a va -- ca na | a F )
                                   3434 ;       Search vocabulary for string.
                                   3435 ;       Return ca and na if succeeded.
                                   3436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012E2                       3437         _HEADER FIND,4,"FIND"
      0012E2 12 A3                    1         .word LINK 
                           0012E4     2         LINK=.
      0012E4 04                       3         .byte 4  
      0012E5 46 49 4E 44              4         .ascii "FIND"
      0012E9                          5         FIND:
      0012E9 CD 06 6D         [ 4] 3438         CALL     SWAPP
      0012EC CD 06 5D         [ 4] 3439         CALL     DUPP
      0012EF CD 05 45         [ 4] 3440         CALL     CAT
      0012F2 CD 07 32         [ 4] 3441         CALL     TEMP
      0012F5 CD 05 15         [ 4] 3442         CALL     STORE
      0012F8 CD 06 5D         [ 4] 3443         CALL     DUPP
      0012FB CD 05 27         [ 4] 3444         CALL     AT
      0012FE CD 06 26         [ 4] 3445         CALL     TOR
      001301 CD 0B BC         [ 4] 3446         CALL     CELLP
      001304 CD 06 6D         [ 4] 3447         CALL     SWAPP
      001307 CD 05 27         [ 4] 3448 FIND1:  CALL     AT
      00130A CD 06 5D         [ 4] 3449         CALL     DUPP
      00130D CD 04 DC         [ 4] 3450         CALL     QBRAN
      001310 13 46                 3451         .word      FIND6
      001312 CD 06 5D         [ 4] 3452         CALL     DUPP
      001315 CD 05 27         [ 4] 3453         CALL     AT
      001318 CD 04 B3         [ 4] 3454         CALL     DOLIT
      00131B 1F 7F                 3455         .word      MASKK
      00131D CD 06 BA         [ 4] 3456         CALL     ANDD
      001320 CD 05 89         [ 4] 3457         CALL     RAT
      001323 CD 06 E3         [ 4] 3458         CALL     XORR
      001326 CD 04 DC         [ 4] 3459         CALL     QBRAN
      001329 13 35                 3460         .word      FIND2
      00132B CD 0B BC         [ 4] 3461         CALL     CELLP
      00132E CD 04 B3         [ 4] 3462         CALL     DOLIT
      001331 FF FF                 3463         .word     0xFFFF
      001333 20 0C            [ 2] 3464         JRA     FIND3
      001335 CD 0B BC         [ 4] 3465 FIND2:  CALL     CELLP
      001338 CD 07 32         [ 4] 3466         CALL     TEMP
      00133B CD 05 27         [ 4] 3467         CALL     AT
      00133E CD 12 A9         [ 4] 3468         CALL     SAMEQ
      001341 CD 04 F8         [ 4] 3469 FIND3:  CALL     BRAN
      001344 13 55                 3470         .word      FIND4
      001346 CD 05 78         [ 4] 3471 FIND6:  CALL     RFROM
      001349 CD 06 53         [ 4] 3472         CALL     DROP
      00134C CD 06 6D         [ 4] 3473         CALL     SWAPP
      00134F CD 0B CB         [ 4] 3474         CALL     CELLM
      001352 CC 06 6D         [ 2] 3475         JP     SWAPP
      001355 CD 04 DC         [ 4] 3476 FIND4:  CALL     QBRAN
      001358 13 62                 3477         .word      FIND5
      00135A CD 0B CB         [ 4] 3478         CALL     CELLM
      00135D CD 0B CB         [ 4] 3479         CALL     CELLM
      001360 20 A5            [ 2] 3480         JRA     FIND1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001362 CD 05 78         [ 4] 3481 FIND5:  CALL     RFROM
      001365 CD 06 53         [ 4] 3482         CALL     DROP
      001368 CD 06 6D         [ 4] 3483         CALL     SWAPP
      00136B CD 06 53         [ 4] 3484         CALL     DROP
      00136E CD 0B CB         [ 4] 3485         CALL     CELLM
      001371 CD 06 5D         [ 4] 3486         CALL     DUPP
      001374 CD 12 93         [ 4] 3487         CALL     NAMET
      001377 CC 06 6D         [ 2] 3488         JP     SWAPP
                                   3489 
                                   3490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3491 ;       NAME?   ( a -- ca na | a F )
                                   3492 ;       Search vocabularies for a string.
                                   3493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00137A                       3494         _HEADER NAMEQ,5,"NAME?"
      00137A 12 E4                    1         .word LINK 
                           00137C     2         LINK=.
      00137C 05                       3         .byte 5  
      00137D 4E 41 4D 45 3F           4         .ascii "NAME?"
      001382                          5         NAMEQ:
      001382 CD 07 A6         [ 4] 3495         CALL   CNTXT
      001385 CC 12 E9         [ 2] 3496         JP     FIND
                                   3497 
                                   3498 ;; Terminal response
                                   3499 
                                   3500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3501 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3502 ;       Backup cursor by one character.
                                   3503 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001388                       3504         _HEADER BKSP,2,"^H"
      001388 13 7C                    1         .word LINK 
                           00138A     2         LINK=.
      00138A 02                       3         .byte 2  
      00138B 5E 48                    4         .ascii "^H"
      00138D                          5         BKSP:
      00138D CD 06 26         [ 4] 3505         CALL     TOR
      001390 CD 06 85         [ 4] 3506         CALL     OVER
      001393 CD 05 78         [ 4] 3507         CALL     RFROM
      001396 CD 06 6D         [ 4] 3508         CALL     SWAPP
      001399 CD 06 85         [ 4] 3509         CALL     OVER
      00139C CD 06 E3         [ 4] 3510         CALL     XORR
      00139F CD 04 DC         [ 4] 3511         CALL     QBRAN
      0013A2 13 BD                 3512         .word      BACK1
      0013A4 CD 04 B3         [ 4] 3513         CALL     DOLIT
      0013A7 00 08                 3514         .word      BKSPP
      0013A9 CD 04 7A         [ 4] 3515         CALL     EMIT
      0013AC CD 0B F4         [ 4] 3516         CALL     ONEM
      0013AF CD 0C 46         [ 4] 3517         CALL     BLANK
      0013B2 CD 04 7A         [ 4] 3518         CALL     EMIT
      0013B5 CD 04 B3         [ 4] 3519         CALL     DOLIT
      0013B8 00 08                 3520         .word      BKSPP
      0013BA CC 04 7A         [ 2] 3521         JP     EMIT
      0013BD 81               [ 4] 3522 BACK1:  RET
                                   3523 
                                   3524 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3525 ;       TAP    ( bot eot cur c -- bot eot cur )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   3526 ;       Accept and echo key stroke
                                   3527 ;       and bump cursor.
                                   3528 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013BE                       3529         _HEADER TAP,3,"TAP"
      0013BE 13 8A                    1         .word LINK 
                           0013C0     2         LINK=.
      0013C0 03                       3         .byte 3  
      0013C1 54 41 50                 4         .ascii "TAP"
      0013C4                          5         TAP:
      0013C4 CD 06 5D         [ 4] 3530         CALL     DUPP
      0013C7 CD 04 7A         [ 4] 3531         CALL     EMIT
      0013CA CD 06 85         [ 4] 3532         CALL     OVER
      0013CD CD 05 34         [ 4] 3533         CALL     CSTOR
      0013D0 CC 0B E7         [ 2] 3534         JP     ONEP
                                   3535 
                                   3536 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3537 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3538 ;       Process a key stroke,
                                   3539 ;       CR,LF or backspace.
                                   3540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013D3                       3541         _HEADER KTAP,4,"KTAP"
      0013D3 13 C0                    1         .word LINK 
                           0013D5     2         LINK=.
      0013D5 04                       3         .byte 4  
      0013D6 4B 54 41 50              4         .ascii "KTAP"
      0013DA                          5         KTAP:
      0013DA CD 06 5D         [ 4] 3542         CALL     DUPP
      0013DD CD 04 B3         [ 4] 3543         CALL     DOLIT
                           000001  3544 .if EOL_CR
      0013E0 00 0D                 3545         .word   CRR
                           000000  3546 .else ; EOL_LF 
                                   3547         .word   LF
                                   3548 .endif 
      0013E2 CD 06 E3         [ 4] 3549         CALL     XORR
      0013E5 CD 04 DC         [ 4] 3550         CALL     QBRAN
      0013E8 14 00                 3551         .word      KTAP2
      0013EA CD 04 B3         [ 4] 3552         CALL     DOLIT
      0013ED 00 08                 3553         .word      BKSPP
      0013EF CD 06 E3         [ 4] 3554         CALL     XORR
      0013F2 CD 04 DC         [ 4] 3555         CALL     QBRAN
      0013F5 13 FD                 3556         .word      KTAP1
      0013F7 CD 0C 46         [ 4] 3557         CALL     BLANK
      0013FA CC 13 C4         [ 2] 3558         JP     TAP
      0013FD CC 13 8D         [ 2] 3559 KTAP1:  JP     BKSP
      001400 CD 06 53         [ 4] 3560 KTAP2:  CALL     DROP
      001403 CD 06 6D         [ 4] 3561         CALL     SWAPP
      001406 CD 06 53         [ 4] 3562         CALL     DROP
      001409 CC 06 5D         [ 2] 3563         JP     DUPP
                                   3564 
                                   3565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3566 ;       accept  ( b u -- b u )
                                   3567 ;       Accept characters to input
                                   3568 ;       buffer. Return with actual count.
                                   3569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00140C                       3570         _HEADER ACCEP,6,"ACCEPT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      00140C 13 D5                    1         .word LINK 
                           00140E     2         LINK=.
      00140E 06                       3         .byte 6  
      00140F 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001415                          5         ACCEP:
      001415 CD 06 85         [ 4] 3571         CALL     OVER
      001418 CD 08 80         [ 4] 3572         CALL     PLUS
      00141B CD 06 85         [ 4] 3573         CALL     OVER
      00141E CD 08 6B         [ 4] 3574 ACCP1:  CALL     DDUP
      001421 CD 06 E3         [ 4] 3575         CALL     XORR
      001424 CD 04 DC         [ 4] 3576         CALL     QBRAN
      001427 14 49                 3577         .word      ACCP4
      001429 CD 0F BB         [ 4] 3578         CALL     KEY
      00142C CD 06 5D         [ 4] 3579         CALL     DUPP
      00142F CD 0C 46         [ 4] 3580         CALL     BLANK
      001432 CD 04 B3         [ 4] 3581         CALL     DOLIT
      001435 00 7F                 3582         .word      127
      001437 CD 09 DA         [ 4] 3583         CALL     WITHI
      00143A CD 04 DC         [ 4] 3584         CALL     QBRAN
      00143D 14 44                 3585         .word      ACCP2
      00143F CD 13 C4         [ 4] 3586         CALL     TAP
      001442 20 03            [ 2] 3587         JRA     ACCP3
      001444 CD 13 DA         [ 4] 3588 ACCP2:  CALL     KTAP
      001447 20 D5            [ 2] 3589 ACCP3:  JRA     ACCP1
      001449 CD 06 53         [ 4] 3590 ACCP4:  CALL     DROP
      00144C CD 06 85         [ 4] 3591         CALL     OVER
      00144F CC 09 16         [ 2] 3592         JP     SUBB
                                   3593 
                                   3594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3595 ;       QUERY   ( -- )
                                   3596 ;       Accept input stream to
                                   3597 ;       terminal input buffer.
                                   3598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001452                       3599         _HEADER QUERY,5,"QUERY"
      001452 14 0E                    1         .word LINK 
                           001454     2         LINK=.
      001454 05                       3         .byte 5  
      001455 51 55 45 52 59           4         .ascii "QUERY"
      00145A                          5         QUERY:
      00145A CD 0D 4F         [ 4] 3600         CALL     TIB
      00145D CD 04 B3         [ 4] 3601         CALL     DOLIT
      001460 00 50                 3602         .word      80
      001462 CD 14 15         [ 4] 3603         CALL     ACCEP
      001465 CD 07 51         [ 4] 3604         CALL     NTIB
      001468 CD 05 15         [ 4] 3605         CALL     STORE
      00146B CD 06 53         [ 4] 3606         CALL     DROP
      00146E CD 0C 53         [ 4] 3607         CALL     ZERO
      001471 CD 07 41         [ 4] 3608         CALL     INN
      001474 CC 05 15         [ 2] 3609         JP     STORE
                                   3610 
                                   3611 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3612 ;       ABORT   ( -- )
                                   3613 ;       Reset data stack and
                                   3614 ;       jump to QUIT.
                                   3615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001477                       3616         _HEADER ABORT,5,"ABORT"
      001477 14 54                    1         .word LINK 
                           001479     2         LINK=.
      001479 05                       3         .byte 5  
      00147A 41 42 4F 52 54           4         .ascii "ABORT"
      00147F                          5         ABORT:
      00147F CD 15 77         [ 4] 3617         CALL     PRESE
      001482 CC 15 94         [ 2] 3618         JP     QUIT
                                   3619 
                                   3620 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3621 ;       abort"  ( f -- )
                                   3622 ;       Run time routine of ABORT".
                                   3623 ;       Abort with a message.
                                   3624 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001485                       3625         _HEADER ABORQ,COMPO+6,'ABORT"'
      001485 14 79                    1         .word LINK 
                           001487     2         LINK=.
      001487 46                       3         .byte COMPO+6  
      001488 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      00148E                          5         ABORQ:
      00148E CD 04 DC         [ 4] 3626         CALL     QBRAN
      001491 14 B1                 3627         .word      ABOR2   ;text flag
      001493 CD 10 48         [ 4] 3628         CALL     DOSTR
      001496 35 0A 07 23      [ 1] 3629 ABOR1:  MOV     BASE,#10 ; reset to default 
      00149A CD 0F F5         [ 4] 3630         CALL     SPACE
      00149D CD 0D 16         [ 4] 3631         CALL     COUNT
      0014A0 CD 10 1F         [ 4] 3632         CALL     TYPES
      0014A3 CD 04 B3         [ 4] 3633         CALL     DOLIT
      0014A6 00 3F                 3634         .word     63 ; "?"
      0014A8 CD 04 7A         [ 4] 3635         CALL     EMIT
      0014AB CD 10 38         [ 4] 3636         CALL     CR
      0014AE CC 14 7F         [ 2] 3637         JP     ABORT   ;pass error string
      0014B1 CD 10 48         [ 4] 3638 ABOR2:  CALL     DOSTR
      0014B4 CC 06 53         [ 2] 3639         JP     DROP
                                   3640 
                                   3641 ;; The text interpreter
                                   3642 
                                   3643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3644 ;       $INTERPRET      ( a -- )
                                   3645 ;       Interpret a word. If failed,
                                   3646 ;       try to convert it to an integer.
                                   3647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014B7                       3648         _HEADER INTER,10,"$INTERPRET"
      0014B7 14 87                    1         .word LINK 
                           0014B9     2         LINK=.
      0014B9 0A                       3         .byte 10  
      0014BA 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      0014C4                          5         INTER:
      0014C4 CD 13 82         [ 4] 3649         CALL     NAMEQ
      0014C7 CD 08 10         [ 4] 3650         CALL     QDUP    ;?defined
      0014CA CD 04 DC         [ 4] 3651         CALL     QBRAN
      0014CD 14 EE                 3652         .word      INTE1
      0014CF CD 05 27         [ 4] 3653         CALL     AT
      0014D2 CD 04 B3         [ 4] 3654         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0014D5 40 00                 3655 	.word       0x4000	; COMPO*256
      0014D7 CD 06 BA         [ 4] 3656         CALL     ANDD    ;?compile only lexicon bits
      0014DA CD 14 8E         [ 4] 3657         CALL     ABORQ
      0014DD 0D                    3658         .byte      13
      0014DE 20 63 6F 6D 70 69 6C  3659         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0014EB CC 05 08         [ 2] 3660         JP      EXECU
      0014EE                       3661 INTE1:  
      0014EE CD 25 6E         [ 4] 3662         CALL     NUMBQ   ;convert a number
      0014F1 CD 04 DC         [ 4] 3663         CALL     QBRAN
      0014F4 14 96                 3664         .word    ABOR1
      0014F6 81               [ 4] 3665         RET
                                   3666 
                                   3667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3668 ;       [       ( -- )
                                   3669 ;       Start  text interpreter.
                                   3670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014F7                       3671         _HEADER LBRAC,IMEDD+1,"["
      0014F7 14 B9                    1         .word LINK 
                           0014F9     2         LINK=.
      0014F9 81                       3         .byte IMEDD+1  
      0014FA 5B                       4         .ascii "["
      0014FB                          5         LBRAC:
      0014FB CD 04 B3         [ 4] 3672         CALL   DOLIT
      0014FE 14 C4                 3673         .word  INTER
      001500 CD 07 84         [ 4] 3674         CALL   TEVAL
      001503 CC 05 15         [ 2] 3675         JP     STORE
                                   3676 
                                   3677 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3678 ;       .OK     ( -- )
                                   3679 ;       Display 'ok' while interpreting.
                                   3680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001506                       3681         _HEADER DOTOK,3,".OK"
      001506 14 F9                    1         .word LINK 
                           001508     2         LINK=.
      001508 03                       3         .byte 3  
      001509 2E 4F 4B                 4         .ascii ".OK"
      00150C                          5         DOTOK:
      00150C CD 04 B3         [ 4] 3682         CALL     DOLIT
      00150F 14 C4                 3683         .word      INTER
      001511 CD 07 84         [ 4] 3684         CALL     TEVAL
      001514 CD 05 27         [ 4] 3685         CALL     AT
      001517 CD 09 3E         [ 4] 3686         CALL     EQUAL
      00151A CD 04 DC         [ 4] 3687         CALL     QBRAN
      00151D 15 26                 3688         .word      DOTO1
      00151F CD 10 65         [ 4] 3689         CALL     DOTQP
      001522 03                    3690         .byte      3
      001523 20 6F 6B              3691         .ascii     " ok"
      001526 CC 10 38         [ 2] 3692 DOTO1:  JP     CR
                                   3693 
                                   3694 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3695 ;       ?STACK  ( -- )
                                   3696 ;       Abort if stack underflows.
                                   3697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001529                       3698         _HEADER QSTAC,6,"?STACK"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001529 15 08                    1         .word LINK 
                           00152B     2         LINK=.
      00152B 06                       3         .byte 6  
      00152C 3F 53 54 41 43 4B        4         .ascii "?STACK"
      001532                          5         QSTAC:
      001532 CD 0C 95         [ 4] 3699         CALL     DEPTH
      001535 CD 06 94         [ 4] 3700         CALL     ZLESS   ;check only for underflow
      001538 CD 14 8E         [ 4] 3701         CALL     ABORQ
      00153B 0B                    3702         .byte      11
      00153C 20 75 6E 64 65 72 66  3703         .ascii     " underflow "
             6C 6F 77 20
      001547 81               [ 4] 3704         RET
                                   3705 
                                   3706 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3707 ;       EVAL    ( -- )
                                   3708 ;       Interpret  input stream.
                                   3709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001548                       3710         _HEADER EVAL,4,"EVAL"
      001548 15 2B                    1         .word LINK 
                           00154A     2         LINK=.
      00154A 04                       3         .byte 4  
      00154B 45 56 41 4C              4         .ascii "EVAL"
      00154F                          5         EVAL:
      00154F CD 12 85         [ 4] 3711 EVAL1:  CALL     TOKEN
      001552 CD 06 5D         [ 4] 3712         CALL     DUPP
      001555 CD 05 45         [ 4] 3713         CALL     CAT     ;?input stream empty
      001558 CD 04 DC         [ 4] 3714         CALL     QBRAN
      00155B 15 68                 3715         .word    EVAL2
      00155D CD 07 84         [ 4] 3716         CALL     TEVAL
      001560 CD 0D 63         [ 4] 3717         CALL     ATEXE
      001563 CD 15 32         [ 4] 3718         CALL     QSTAC   ;evaluate input, check stack
      001566 20 E7            [ 2] 3719         JRA     EVAL1 
      001568 CD 06 53         [ 4] 3720 EVAL2:  CALL     DROP
      00156B CC 15 0C         [ 2] 3721         JP       DOTOK
                                   3722 
                                   3723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3724 ;       PRESET  ( -- )
                                   3725 ;       Reset data stack pointer and
                                   3726 ;       terminal input buffer.
                                   3727 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00156E                       3728         _HEADER PRESE,6,"PRESET"
      00156E 15 4A                    1         .word LINK 
                           001570     2         LINK=.
      001570 06                       3         .byte 6  
      001571 50 52 45 53 45 54        4         .ascii "PRESET"
      001577                          5         PRESE:
      001577 CD 04 B3         [ 4] 3729         CALL     DOLIT
      00157A 16 80                 3730         .word      SPP
      00157C CD 06 4A         [ 4] 3731         CALL     SPSTO
      00157F CD 04 B3         [ 4] 3732         CALL     DOLIT
      001582 17 00                 3733         .word      TIBB
      001584 CD 07 51         [ 4] 3734         CALL     NTIB
      001587 CD 0B BC         [ 4] 3735         CALL     CELLP
      00158A CC 05 15         [ 2] 3736         JP     STORE
                                   3737 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3738 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3739 ;       QUIT    ( -- )
                                   3740 ;       Reset return stack pointer
                                   3741 ;       and start text interpreter.
                                   3742 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00158D                       3743         _HEADER QUIT,4,"QUIT"
      00158D 15 70                    1         .word LINK 
                           00158F     2         LINK=.
      00158F 04                       3         .byte 4  
      001590 51 55 49 54              4         .ascii "QUIT"
      001594                          5         QUIT:
      001594 CD 04 B3         [ 4] 3744         CALL     DOLIT
      001597 17 FF                 3745         .word      RPP
      001599 CD 05 62         [ 4] 3746         CALL     RPSTO   ;reset return stack pointer
      00159C CD 14 FB         [ 4] 3747 QUIT1:  CALL     LBRAC   ;start interpretation
      00159F CD 14 5A         [ 4] 3748 QUIT2:  CALL     QUERY   ;get input
      0015A2 CD 15 4F         [ 4] 3749         CALL     EVAL
      0015A5 20 F8            [ 2] 3750         JRA     QUIT2   ;continue till error
                                   3751 
                                   3752 ;; The compiler
                                   3753 
                                   3754 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3755 ;       '       ( -- ca )
                                   3756 ;       Search vocabularies for
                                   3757 ;       next word in input stream.
                                   3758 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015A7                       3759         _HEADER TICK,1,"'"
      0015A7 15 8F                    1         .word LINK 
                           0015A9     2         LINK=.
      0015A9 01                       3         .byte 1  
      0015AA 27                       4         .ascii "'"
      0015AB                          5         TICK:
      0015AB CD 12 85         [ 4] 3760         CALL     TOKEN
      0015AE CD 13 82         [ 4] 3761         CALL     NAMEQ   ;?defined
      0015B1 CD 04 DC         [ 4] 3762         CALL     QBRAN
      0015B4 14 96                 3763         .word      ABOR1
      0015B6 81               [ 4] 3764         RET     ;yes, push code address
                                   3765 
                                   3766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3767 ;       ALLOT   ( n -- )
                                   3768 ;       Allocate n bytes to RAM 
                                   3769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B7                       3770         _HEADER ALLOT,5,"ALLOT"
      0015B7 15 A9                    1         .word LINK 
                           0015B9     2         LINK=.
      0015B9 05                       3         .byte 5  
      0015BA 41 4C 4C 4F 54           4         .ascii "ALLOT"
      0015BF                          5         ALLOT:
      0015BF CD 07 B4         [ 4] 3771         CALL     VPP
                                   3772 ; must update APP_VP each time VP is modidied
      0015C2 CD 0C C3         [ 4] 3773         call PSTOR 
      0015C5 CC 1E 0A         [ 2] 3774         jp UPDATVP 
                                   3775 
                                   3776 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3777 ;       ,       ( w -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   3778 ;         Compile an integer into
                                   3779 ;         variable space.
                                   3780 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015C8                       3781         _HEADER COMMA,1,^/","/
      0015C8 15 B9                    1         .word LINK 
                           0015CA     2         LINK=.
      0015CA 01                       3         .byte 1  
      0015CB 2C                       4         .ascii ","
      0015CC                          5         COMMA:
      0015CC CD 0D 2D         [ 4] 3782         CALL     HERE
      0015CF CD 06 5D         [ 4] 3783         CALL     DUPP
      0015D2 CD 0B BC         [ 4] 3784         CALL     CELLP   ;cell boundary
      0015D5 CD 07 B4         [ 4] 3785         CALL     VPP
      0015D8 CD 05 15         [ 4] 3786         CALL     STORE
      0015DB CC 05 15         [ 2] 3787         JP     STORE
                                   3788 
                                   3789 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3790 ;       C,      ( c -- )
                                   3791 ;       Compile a byte into
                                   3792 ;       variables space.
                                   3793 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DE                       3794         _HEADER CCOMMA,2,^/"C,"/
      0015DE 15 CA                    1         .word LINK 
                           0015E0     2         LINK=.
      0015E0 02                       3         .byte 2  
      0015E1 43 2C                    4         .ascii "C,"
      0015E3                          5         CCOMMA:
      0015E3 CD 0D 2D         [ 4] 3795         CALL     HERE
      0015E6 CD 06 5D         [ 4] 3796         CALL     DUPP
      0015E9 CD 0B E7         [ 4] 3797         CALL     ONEP
      0015EC CD 07 B4         [ 4] 3798         CALL     VPP
      0015EF CD 05 15         [ 4] 3799         CALL     STORE
      0015F2 CC 05 34         [ 2] 3800         JP     CSTOR
                                   3801 
                                   3802 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3803 ;       [COMPILE]       ( -- ; <string> )
                                   3804 ;       Compile next immediate
                                   3805 ;       word into code dictionary.
                                   3806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015F5                       3807         _HEADER BCOMP,COMPO+IMEDD+9,"[COMPILE]"
      0015F5 15 E0                    1         .word LINK 
                           0015F7     2         LINK=.
      0015F7 C9                       3         .byte COMPO+IMEDD+9  
      0015F8 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
             45 5D
      001601                          5         BCOMP:
      001601 CD 15 AB         [ 4] 3808         CALL     TICK
      001604 CC 18 E8         [ 2] 3809         JP     JSRC
                                   3810 
                                   3811 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3812 ;       COMPILE ( -- )
                                   3813 ;       Compile next jsr in
                                   3814 ;       colon list to code dictionary.
                                   3815 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001607                       3816         _HEADER COMPI,COMPO+7,"COMPILE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001607 15 F7                    1         .word LINK 
                           001609     2         LINK=.
      001609 47                       3         .byte COMPO+7  
      00160A 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001611                          5         COMPI:
      001611 CD 05 78         [ 4] 3817         CALL     RFROM
      001614 CD 06 5D         [ 4] 3818         CALL     DUPP
      001617 CD 05 27         [ 4] 3819         CALL     AT
      00161A CD 18 E8         [ 4] 3820         CALL     JSRC    ;compile subroutine
      00161D CD 0B BC         [ 4] 3821         CALL     CELLP
      001620 90 93            [ 1] 3822         ldw y,x 
      001622 90 FE            [ 2] 3823         ldw y,(y)
      001624 1C 00 02         [ 2] 3824         addw x,#CELLL 
      001627 90 FC            [ 2] 3825         jp (y)
                                   3826 
                                   3827 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3828 ;       LITERAL ( w -- )
                                   3829 ;       Compile tos to dictionary
                                   3830 ;       as an integer literal.
                                   3831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001629                       3832         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      001629 16 09                    1         .word LINK 
                           00162B     2         LINK=.
      00162B C7                       3         .byte COMPO+IMEDD+7  
      00162C 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      001633                          5         LITER:
      001633 CD 16 11         [ 4] 3833         CALL     COMPI
      001636 04 B3                 3834         .word DOLIT 
      001638 CC 15 CC         [ 2] 3835         JP     COMMA
                                   3836 
                                   3837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3838 ;       $,"     ( -- )
                                   3839 ;       Compile a literal string
                                   3840 ;       up to next " .
                                   3841 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3842 ;        _HEADER STRCQ,3,^/'$,"'/
      00163B                       3843 STRCQ:
      00163B CD 04 B3         [ 4] 3844         CALL     DOLIT
      00163E 00 22                 3845         .word     34	; "
      001640 CD 11 D6         [ 4] 3846         CALL     PARSE
      001643 CD 0D 2D         [ 4] 3847         CALL     HERE
      001646 CD 0D FE         [ 4] 3848         CALL     PACKS   ;string to code dictionary
      001649 CD 0D 16         [ 4] 3849         CALL     COUNT
      00164C CD 08 80         [ 4] 3850         CALL     PLUS    ;calculate aligned end of string
      00164F CD 07 B4         [ 4] 3851         CALL     VPP
      001652 CC 05 15         [ 2] 3852         JP     STORE
                                   3853 
                                   3854 ;; Structures
                                   3855 
                                   3856 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3857 ;       FOR     ( -- a )
                                   3858 ;       Start a FOR-NEXT loop
                                   3859 ;       structure in a colon definition.
                                   3860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001655                       3861         _HEADER FOR,COMPO+IMEDD+3,"FOR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001655 16 2B                    1         .word LINK 
                           001657     2         LINK=.
      001657 C3                       3         .byte COMPO+IMEDD+3  
      001658 46 4F 52                 4         .ascii "FOR"
      00165B                          5         FOR:
      00165B CD 16 11         [ 4] 3862         CALL     COMPI
      00165E 06 26                 3863         .word TOR 
      001660 CC 0D 2D         [ 2] 3864         JP     HERE
                                   3865 
                                   3866 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3867 ;       NEXT    ( a -- )
                                   3868 ;       Terminate a FOR-NEXT loop.
                                   3869 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001663                       3870         _HEADER NEXT,COMPO+IMEDD+4,"NEXT"
      001663 16 57                    1         .word LINK 
                           001665     2         LINK=.
      001665 C4                       3         .byte COMPO+IMEDD+4  
      001666 4E 45 58 54              4         .ascii "NEXT"
      00166A                          5         NEXT:
      00166A CD 16 11         [ 4] 3871         CALL     COMPI
      00166D 04 C7                 3872         .word DONXT 
      00166F CD 08 00         [ 4] 3873         call ADRADJ
      001672 CC 15 CC         [ 2] 3874         JP     COMMA
                                   3875 
                                   3876 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3877 ;       I ( -- n )
                                   3878 ;       stack COUNTER
                                   3879 ;       of innermost FOR-NEXT  
                                   3880 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001675                       3881         _HEADER IFETCH,1,"I"
      001675 16 65                    1         .word LINK 
                           001677     2         LINK=.
      001677 01                       3         .byte 1  
      001678 49                       4         .ascii "I"
      001679                          5         IFETCH:
      001679 1D 00 02         [ 2] 3882         subw x,#CELLL 
      00167C 16 03            [ 2] 3883         ldw y,(3,sp)
      00167E FF               [ 2] 3884         ldw (x),y 
      00167F 81               [ 4] 3885         ret 
                                   3886 
                                   3887 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3888 ;       J ( -- n )
                                   3889 ;   stack COUNTER
                                   3890 ;   of outer FOR-NEXT  
                                   3891 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001680                       3892         _HEADER JFETCH,1,"J"
      001680 16 77                    1         .word LINK 
                           001682     2         LINK=.
      001682 01                       3         .byte 1  
      001683 4A                       4         .ascii "J"
      001684                          5         JFETCH:
      001684 1D 00 02         [ 2] 3893         SUBW X,#CELLL 
      001687 16 05            [ 2] 3894         LDW Y,(5,SP)
      001689 FF               [ 2] 3895         LDW (X),Y 
      00168A 81               [ 4] 3896         RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   3897 
                                   3898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3899 ;       BEGIN   ( -- a )
                                   3900 ;       Start an infinite or
                                   3901 ;       indefinite loop structure.
                                   3902 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00168B                       3903         _HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
      00168B 16 82                    1         .word LINK 
                           00168D     2         LINK=.
      00168D C5                       3         .byte COMPO+IMEDD+5  
      00168E 42 45 47 49 4E           4         .ascii "BEGIN"
      001693                          5         BEGIN:
      001693 CC 0D 2D         [ 2] 3904         JP     HERE
                                   3905 
                                   3906 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3907 ;       UNTIL   ( a -- )
                                   3908 ;       Terminate a BEGIN-UNTIL
                                   3909 ;       indefinite loop structure.
                                   3910 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001696                       3911         _HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
      001696 16 8D                    1         .word LINK 
                           001698     2         LINK=.
      001698 C5                       3         .byte COMPO+IMEDD+5  
      001699 55 4E 54 49 4C           4         .ascii "UNTIL"
      00169E                          5         UNTIL:
      00169E CD 16 11         [ 4] 3912         CALL     COMPI
      0016A1 04 DC                 3913         .word    QBRAN 
      0016A3 CD 08 00         [ 4] 3914         call ADRADJ
      0016A6 CC 15 CC         [ 2] 3915         JP     COMMA
                                   3916 
                                   3917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3918 ;       AGAIN   ( a -- )
                                   3919 ;       Terminate a BEGIN-AGAIN
                                   3920 ;       infinite loop structure.
                                   3921 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016A9                       3922         _HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
      0016A9 16 98                    1         .word LINK 
                           0016AB     2         LINK=.
      0016AB C5                       3         .byte COMPO+IMEDD+5  
      0016AC 41 47 41 49 4E           4         .ascii "AGAIN"
      0016B1                          5         AGAIN:
                           000001  3923 .if OPTIMIZE 
      0016B1                       3924         _DOLIT JPIMM 
      0016B1 CD 04 B3         [ 4]    1     CALL DOLIT 
      0016B4 00 CC                    2     .word JPIMM 
      0016B6 CD 15 E3         [ 4] 3925         CALL  CCOMMA
                           000000  3926 .else 
                                   3927         CALL     COMPI
                                   3928         .word BRAN
                                   3929 .endif 
      0016B9 CD 08 00         [ 4] 3930         call ADRADJ 
      0016BC CC 15 CC         [ 2] 3931         JP     COMMA
                                   3932 
                                   3933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3934 ;       IF      ( -- A )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   3935 ;       Begin a conditional branch.
                                   3936 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016BF                       3937         _HEADER IFF,COMPO+IMEDD+2,"IF"
      0016BF 16 AB                    1         .word LINK 
                           0016C1     2         LINK=.
      0016C1 C2                       3         .byte COMPO+IMEDD+2  
      0016C2 49 46                    4         .ascii "IF"
      0016C4                          5         IFF:
      0016C4 CD 16 11         [ 4] 3938         CALL     COMPI
      0016C7 04 DC                 3939         .word QBRAN
      0016C9 CD 0D 2D         [ 4] 3940         CALL     HERE
      0016CC CD 0C 53         [ 4] 3941         CALL     ZERO
      0016CF CC 15 CC         [ 2] 3942         JP     COMMA
                                   3943 
                                   3944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3945 ;       THEN        ( A -- )
                                   3946 ;       Terminate a conditional 
                                   3947 ;       branch structure.
                                   3948 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D2                       3949         _HEADER THENN,COMPO+IMEDD+4,"THEN"
      0016D2 16 C1                    1         .word LINK 
                           0016D4     2         LINK=.
      0016D4 C4                       3         .byte COMPO+IMEDD+4  
      0016D5 54 48 45 4E              4         .ascii "THEN"
      0016D9                          5         THENN:
      0016D9 CD 0D 2D         [ 4] 3950         CALL     HERE
      0016DC CD 08 00         [ 4] 3951         call ADRADJ 
      0016DF CD 06 6D         [ 4] 3952         CALL     SWAPP
      0016E2 CC 05 15         [ 2] 3953         JP     STORE
                                   3954 
                                   3955 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3956 ;       ELSE        ( A -- A )
                                   3957 ;       Start the false clause in 
                                   3958 ;       an IF-ELSE-THEN structure.
                                   3959 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E5                       3960         _HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
      0016E5 16 D4                    1         .word LINK 
                           0016E7     2         LINK=.
      0016E7 C4                       3         .byte COMPO+IMEDD+4  
      0016E8 45 4C 53 45              4         .ascii "ELSE"
      0016EC                          5         ELSEE:
                           000001  3961 .if OPTIMIZE 
      0016EC                       3962         _DOLIT JPIMM 
      0016EC CD 04 B3         [ 4]    1     CALL DOLIT 
      0016EF 00 CC                    2     .word JPIMM 
      0016F1 CD 15 E3         [ 4] 3963         CALL CCOMMA 
                           000000  3964 .else 
                                   3965          CALL     COMPI
                                   3966         .word BRAN
                                   3967 .endif 
      0016F4 CD 0D 2D         [ 4] 3968         CALL     HERE
      0016F7 CD 0C 53         [ 4] 3969         CALL     ZERO
      0016FA CD 15 CC         [ 4] 3970         CALL     COMMA
      0016FD CD 06 6D         [ 4] 3971         CALL     SWAPP
      001700 CD 0D 2D         [ 4] 3972         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001703 CD 08 00         [ 4] 3973         call ADRADJ 
      001706 CD 06 6D         [ 4] 3974         CALL     SWAPP
      001709 CC 05 15         [ 2] 3975         JP     STORE
                                   3976 
                                   3977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3978 ;       AHEAD       ( -- A )
                                   3979 ;       Compile a forward branch
                                   3980 ;       instruction.
                                   3981 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00170C                       3982         _HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
      00170C 16 E7                    1         .word LINK 
                           00170E     2         LINK=.
      00170E C5                       3         .byte COMPO+IMEDD+5  
      00170F 41 48 45 41 44           4         .ascii "AHEAD"
      001714                          5         AHEAD:
                           000001  3983 .if OPTIMIZE 
      001714                       3984         _DOLIT JPIMM 
      001714 CD 04 B3         [ 4]    1     CALL DOLIT 
      001717 00 CC                    2     .word JPIMM 
      001719 CD 15 E3         [ 4] 3985         CALL CCOMMA
                           000000  3986 .else 
                                   3987         CALL     COMPI
                                   3988         .word BRAN
                                   3989 .endif 
      00171C CD 0D 2D         [ 4] 3990         CALL     HERE
      00171F CD 0C 53         [ 4] 3991         CALL     ZERO
      001722 CC 15 CC         [ 2] 3992         JP     COMMA
                                   3993 
                                   3994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3995 ;       WHILE       ( a -- A a )
                                   3996 ;       Conditional branch out of a 
                                   3997 ;       BEGIN-WHILE-REPEAT loop.
                                   3998 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001725                       3999         _HEADER WHILE,COMPO+IMEDD+5,"WHILE"
      001725 17 0E                    1         .word LINK 
                           001727     2         LINK=.
      001727 C5                       3         .byte COMPO+IMEDD+5  
      001728 57 48 49 4C 45           4         .ascii "WHILE"
      00172D                          5         WHILE:
      00172D CD 16 11         [ 4] 4000         CALL     COMPI
      001730 04 DC                 4001         .word QBRAN
      001732 CD 0D 2D         [ 4] 4002         CALL     HERE
      001735 CD 0C 53         [ 4] 4003         CALL     ZERO
      001738 CD 15 CC         [ 4] 4004         CALL     COMMA
      00173B CC 06 6D         [ 2] 4005         JP     SWAPP
                                   4006 
                                   4007 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4008 ;       REPEAT      ( A a -- )
                                   4009 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   4010 ;       indefinite loop.
                                   4011 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00173E                       4012         _HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
      00173E 17 27                    1         .word LINK 
                           001740     2         LINK=.
      001740 C6                       3         .byte COMPO+IMEDD+6  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001741 52 45 50 45 41 54        4         .ascii "REPEAT"
      001747                          5         REPEA:
                           000001  4013 .if OPTIMIZE 
      001747                       4014         _DOLIT JPIMM 
      001747 CD 04 B3         [ 4]    1     CALL DOLIT 
      00174A 00 CC                    2     .word JPIMM 
      00174C CD 15 E3         [ 4] 4015         CALL  CCOMMA
                           000000  4016 .else 
                                   4017         CALL     COMPI
                                   4018         .word BRAN
                                   4019 .endif 
      00174F CD 08 00         [ 4] 4020         call ADRADJ 
      001752 CD 15 CC         [ 4] 4021         CALL     COMMA
      001755 CD 0D 2D         [ 4] 4022         CALL     HERE
      001758 CD 08 00         [ 4] 4023         call ADRADJ 
      00175B CD 06 6D         [ 4] 4024         CALL     SWAPP
      00175E CC 05 15         [ 2] 4025         JP     STORE
                                   4026 
                                   4027 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4028 ;       AFT         ( a -- a A )
                                   4029 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   4030 ;       loop the first time through.
                                   4031 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001761                       4032         _HEADER AFT,COMPO+IMEDD+3,"AFT"
      001761 17 40                    1         .word LINK 
                           001763     2         LINK=.
      001763 C3                       3         .byte COMPO+IMEDD+3  
      001764 41 46 54                 4         .ascii "AFT"
      001767                          5         AFT:
      001767 CD 06 53         [ 4] 4033         CALL     DROP
      00176A CD 17 14         [ 4] 4034         CALL     AHEAD
      00176D CD 0D 2D         [ 4] 4035         CALL     HERE
      001770 CC 06 6D         [ 2] 4036         JP     SWAPP
                                   4037 
                                   4038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4039 ;       ABORT"      ( -- ; <string> )
                                   4040 ;       Conditional abort with an error message.
                                   4041 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001773                       4042         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      001773 17 63                    1         .word LINK 
                           001775     2         LINK=.
      001775 86                       3         .byte IMEDD+6  
      001776 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      00177C                          5         ABRTQ:
      00177C CD 16 11         [ 4] 4043         CALL     COMPI
      00177F 14 8E                 4044         .word ABORQ
      001781 CC 16 3B         [ 2] 4045         JP     STRCQ
                                   4046 
                                   4047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4048 ;       $"     ( -- ; <string> )
                                   4049 ;       Compile an inline string literal.
                                   4050 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001784                       4051         _HEADER STRQ,IMEDD+COMPO+2,'$"'
      001784 17 75                    1         .word LINK 
                           001786     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001786 C2                       3         .byte IMEDD+COMPO+2  
      001787 24 22                    4         .ascii '$"'
      001789                          5         STRQ:
      001789 CD 16 11         [ 4] 4052         CALL     COMPI
      00178C 10 61                 4053         .word STRQP 
      00178E CC 16 3B         [ 2] 4054         JP     STRCQ
                                   4055 
                                   4056 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4057 ;       ."          ( -- ; <string> )
                                   4058 ;       Compile an inline string literal 
                                   4059 ;       to be typed out at run time.
                                   4060 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001791                       4061         _HEADER DOTQ,IMEDD+COMPO+2,'."'
      001791 17 86                    1         .word LINK 
                           001793     2         LINK=.
      001793 C2                       3         .byte IMEDD+COMPO+2  
      001794 2E 22                    4         .ascii '."'
      001796                          5         DOTQ:
      001796 CD 16 11         [ 4] 4062         CALL     COMPI
      001799 10 65                 4063         .word DOTQP 
      00179B CC 16 3B         [ 2] 4064         JP     STRCQ
                                   4065 
                                   4066 ;; Name compiler
                                   4067 
                                   4068 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4069 ;       ?UNIQUE ( a -- a )
                                   4070 ;       Display a warning message
                                   4071 ;       if word already exists.
                                   4072 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00179E                       4073         _HEADER UNIQU,7,"?UNIQUE"
      00179E 17 93                    1         .word LINK 
                           0017A0     2         LINK=.
      0017A0 07                       3         .byte 7  
      0017A1 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      0017A8                          5         UNIQU:
      0017A8 CD 06 5D         [ 4] 4074         CALL     DUPP
      0017AB CD 13 82         [ 4] 4075         CALL     NAMEQ   ;?name exists
      0017AE CD 04 DC         [ 4] 4076         CALL     QBRAN
      0017B1 17 C7                 4077         .word      UNIQ1
      0017B3 CD 10 65         [ 4] 4078         CALL     DOTQP   ;redef are OK
      0017B6 07                    4079         .byte       7
      0017B7 20 72 65 44 65 66 20  4080         .ascii     " reDef "       
      0017BE CD 06 85         [ 4] 4081         CALL     OVER
      0017C1 CD 0D 16         [ 4] 4082         CALL     COUNT
      0017C4 CD 10 1F         [ 4] 4083         CALL     TYPES   ;just in case
      0017C7 CC 06 53         [ 2] 4084 UNIQ1:  JP     DROP
                                   4085 
                                   4086 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4087 ;       $,n     ( na -- )
                                   4088 ;       Build a new dictionary name
                                   4089 ;       using string at na.
                                   4090 ; compile dans l'espace des variables 
                                   4091 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4092 ;        _HEADER SNAME,3,^/"$,n"/
      0017CA                       4093 SNAME: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      0017CA CD 06 5D         [ 4] 4094         CALL     DUPP
      0017CD CD 05 45         [ 4] 4095         CALL     CAT     ;?null input
      0017D0 CD 04 DC         [ 4] 4096         CALL     QBRAN
      0017D3 18 00                 4097         .word      PNAM1
      0017D5 CD 17 A8         [ 4] 4098         CALL     UNIQU   ;?redefinition
      0017D8 CD 06 5D         [ 4] 4099         CALL     DUPP
      0017DB CD 0D 16         [ 4] 4100         CALL     COUNT
      0017DE CD 08 80         [ 4] 4101         CALL     PLUS
      0017E1 CD 07 B4         [ 4] 4102         CALL     VPP
      0017E4 CD 05 15         [ 4] 4103         CALL     STORE
      0017E7 CD 06 5D         [ 4] 4104         CALL     DUPP
      0017EA CD 07 D2         [ 4] 4105         CALL     LAST
      0017ED CD 05 15         [ 4] 4106         CALL     STORE   ;save na for vocabulary link
      0017F0 CD 0B CB         [ 4] 4107         CALL     CELLM   ;link address
      0017F3 CD 07 A6         [ 4] 4108         CALL     CNTXT
      0017F6 CD 05 27         [ 4] 4109         CALL     AT
      0017F9 CD 06 6D         [ 4] 4110         CALL     SWAPP
      0017FC CD 05 15         [ 4] 4111         CALL     STORE
      0017FF 81               [ 4] 4112         RET     ;save code pointer
      001800 CD 10 61         [ 4] 4113 PNAM1:  CALL     STRQP
      001803 05                    4114         .byte      5
      001804 20 6E 61 6D 65        4115         .ascii     " name" ;null input
      001809 CC 14 96         [ 2] 4116         JP     ABOR1
                                   4117 
                                   4118 ;; FORTH compiler
                                   4119 
                                   4120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4121 ;       $COMPILE        ( a -- )
                                   4122 ;       Compile next word to
                                   4123 ;       dictionary as a token or literal.
                                   4124 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00180C                       4125         _HEADER SCOMP,8,"$COMPILE"
      00180C 17 A0                    1         .word LINK 
                           00180E     2         LINK=.
      00180E 08                       3         .byte 8  
      00180F 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001817                          5         SCOMP:
      001817 CD 13 82         [ 4] 4126         CALL     NAMEQ
      00181A CD 08 10         [ 4] 4127         CALL     QDUP    ;?defined
      00181D CD 04 DC         [ 4] 4128         CALL     QBRAN
      001820 18 38                 4129         .word      SCOM2
      001822 CD 05 27         [ 4] 4130         CALL     AT
      001825 CD 04 B3         [ 4] 4131         CALL     DOLIT
      001828 80 00                 4132         .word     0x8000	;  IMEDD*256
      00182A CD 06 BA         [ 4] 4133         CALL     ANDD    ;?immediate
      00182D CD 04 DC         [ 4] 4134         CALL     QBRAN
      001830 18 35                 4135         .word      SCOM1
      001832 CC 05 08         [ 2] 4136         JP     EXECU
      001835 CC 18 E8         [ 2] 4137 SCOM1:  JP     JSRC
      001838 CD 25 6E         [ 4] 4138 SCOM2:  CALL     NUMBQ   ;try to convert to number 
      00183B CD 08 10         [ 4] 4139         CALL    QDUP  
      00183E CD 04 DC         [ 4] 4140         CALL     QBRAN
      001841 14 96                 4141         .word      ABOR1
                           000001  4142 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001843                       4143         _DOLIT  -1
      001843 CD 04 B3         [ 4]    1     CALL DOLIT 
      001846 FF FF                    2     .word -1 
      001848 CD 09 3E         [ 4] 4144         CALL    EQUAL
      00184B                       4145         _QBRAN DLITER
      00184B CD 04 DC         [ 4]    1     CALL QBRAN
      00184E 29 4F                    2     .word DLITER
      001850 CC 16 33         [ 2] 4146         JP  LITER 
                                   4147 .endif 
                           000000  4148 .if WANT_FLOAT24 
                                   4149         _DOLIT -1 
                                   4150         CALL EQUAL 
                                   4151         _QBRAN FLITER
                                   4152         JP  LITER  
                                   4153 .endif 
      001853                       4154         _DROP 
      001853 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001856 CC 16 33         [ 2] 4155         JP     LITER
                                   4156 
                                   4157 
                                   4158 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4159 ;       OVERT   ( -- )
                                   4160 ;       Link a new word into vocabulary.
                                   4161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001859                       4162         _HEADER OVERT,5,"OVERT"
      001859 18 0E                    1         .word LINK 
                           00185B     2         LINK=.
      00185B 05                       3         .byte 5  
      00185C 4F 56 45 52 54           4         .ascii "OVERT"
      001861                          5         OVERT:
      001861 CD 07 D2         [ 4] 4163         CALL     LAST
      001864 CD 05 27         [ 4] 4164         CALL     AT
      001867 CD 07 A6         [ 4] 4165         CALL     CNTXT
      00186A CC 05 15         [ 2] 4166         JP     STORE
                                   4167 
                                   4168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4169 ;       ;       ( -- )
                                   4170 ;       Terminate a colon definition.
                                   4171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00186D                       4172         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      00186D 18 5B                    1         .word LINK 
                           00186F     2         LINK=.
      00186F C1                       3         .byte IMEDD+COMPO+1  
      001870 3B                       4         .ascii ";"
      001871                          5         SEMIS:
                           000001  4173 .if OPTIMIZE ; more compact and faster
      001871 CD 04 B3         [ 4] 4174         call DOLIT 
      001874 00 81                 4175         .word 0x81   ; opcode for RET 
      001876 CD 15 E3         [ 4] 4176         call CCOMMA 
                           000000  4177 .else
                                   4178         CALL     COMPI
                                   4179         .word EXIT 
                                   4180 .endif 
      001879 CD 14 FB         [ 4] 4181         CALL     LBRAC
      00187C CD 18 61         [ 4] 4182         call OVERT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      00187F CD 23 66         [ 4] 4183         CALL FMOVE
      001882 CD 08 10         [ 4] 4184         call QDUP 
      001885 CD 04 DC         [ 4] 4185         call QBRAN 
      001888 1A 15                 4186         .word SET_RAMLAST 
      00188A CD 23 FA         [ 4] 4187         CALL UPDATPTR
      00188D 81               [ 4] 4188         RET 
                                   4189 
                                   4190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4191 ;       Terminate an ISR definition 
                                   4192 ;       retourn ca of ISR as double
                                   4193 ;       I; ( -- ud )
                                   4194 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00188E                       4195        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      00188E 18 6F                    1         .word LINK 
                           001890     2         LINK=.
      001890 C2                       3         .byte 2+IMEDD+COMPO  
      001891 49 3B                    4         .ascii "I;"
      001893                          5         ISEMI:
      001893 1D 00 02         [ 2] 4196         subw x,#CELLL  
      001896 90 AE 00 80      [ 2] 4197         ldw y,#IRET_CODE 
      00189A FF               [ 2] 4198         ldw (x),y 
      00189B CD 15 E3         [ 4] 4199         call CCOMMA
      00189E CD 14 FB         [ 4] 4200         call LBRAC 
      0018A1 CD 24 3F         [ 4] 4201         call IFMOVE
      0018A4 CD 08 10         [ 4] 4202         call QDUP 
      0018A7 CD 04 DC         [ 4] 4203         CALL QBRAN 
      0018AA 1A 15                 4204         .word SET_RAMLAST
      0018AC CD 07 C2         [ 4] 4205         CALL CPP
      0018AF CD 05 27         [ 4] 4206         call AT 
      0018B2 CD 06 6D         [ 4] 4207         call SWAPP 
      0018B5 CD 07 C2         [ 4] 4208         CALL CPP 
      0018B8 CD 05 15         [ 4] 4209         call STORE 
      0018BB CD 1D F3         [ 4] 4210         call UPDATCP 
      0018BE CD 1D B0         [ 4] 4211         call EEPVP 
      0018C1                       4212         _DROP 
      0018C1 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018C4 CD 05 27         [ 4] 4213         call AT 
      0018C7 CD 07 B4         [ 4] 4214         call VPP 
      0018CA CD 05 15         [ 4] 4215         call STORE 
      0018CD CC 0C 53         [ 2] 4216         jp ZERO
      0018D0 81               [ 4] 4217         ret           
                                   4218         
                                   4219 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4220 ;       ]       ( -- )
                                   4221 ;       Start compiling words in
                                   4222 ;       input stream.
                                   4223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018D1                       4224         _HEADER RBRAC,1,"]"
      0018D1 18 90                    1         .word LINK 
                           0018D3     2         LINK=.
      0018D3 01                       3         .byte 1  
      0018D4 5D                       4         .ascii "]"
      0018D5                          5         RBRAC:
      0018D5 CD 04 B3         [ 4] 4225         CALL   DOLIT
      0018D8 18 17                 4226         .word  SCOMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      0018DA CD 07 84         [ 4] 4227         CALL   TEVAL
      0018DD CC 05 15         [ 2] 4228         JP     STORE
                                   4229 
                                   4230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4231 ;       CALL,    ( ca -- )
                                   4232 ;       Compile a subroutine call.
                                   4233 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018E0                       4234         _HEADER JSRC,5,^/"CALL,"/
      0018E0 18 D3                    1         .word LINK 
                           0018E2     2         LINK=.
      0018E2 05                       3         .byte 5  
      0018E3 43 41 4C 4C 2C           4         .ascii "CALL,"
      0018E8                          5         JSRC:
                           000001  4235 .if OPTIMIZE 
                                   4236 ;;;;; optimization code ;;;;;;;;;;;;;;;
      0018E8 90 AE 06 53      [ 2] 4237         LDW Y,#DROP 
      0018EC 90 BF 26         [ 2] 4238         LDW YTEMP,Y 
      0018EF 90 93            [ 1] 4239         LDW Y,X 
      0018F1 90 FE            [ 2] 4240         LDW Y,(Y)
      0018F3 90 B3 26         [ 2] 4241         CPW Y,YTEMP 
      0018F6 26 13            [ 1] 4242         JRNE JSRC1         
                                   4243 ; replace CALL DROP BY  ADDW X,#CELLL 
      0018F8 1C 00 02         [ 2] 4244         ADDW X,#CELLL 
      0018FB                       4245         _DOLIT ADDWX ; opcode 
      0018FB CD 04 B3         [ 4]    1     CALL DOLIT 
      0018FE 00 1C                    2     .word ADDWX 
      001900 CD 15 E3         [ 4] 4246         CALL   CCOMMA 
      001903                       4247         _DOLIT CELLL 
      001903 CD 04 B3         [ 4]    1     CALL DOLIT 
      001906 00 02                    2     .word CELLL 
      001908 CC 15 CC         [ 2] 4248         JP      COMMA 
      00190B                       4249 JSRC1: ; check for DDROP 
      00190B 90 AE 08 60      [ 2] 4250         LDW Y,#DDROP 
      00190F 90 BF 26         [ 2] 4251         LDW YTEMP,Y 
      001912 90 93            [ 1] 4252         LDW Y,X 
      001914 90 FE            [ 2] 4253         LDW Y,(Y)
      001916 90 B3 26         [ 2] 4254         CPW Y,YTEMP 
      001919 26 13            [ 1] 4255         JRNE JSRC2 
                                   4256 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      00191B 1C 00 02         [ 2] 4257         ADDW X,#CELLL 
      00191E                       4258         _DOLIT ADDWX 
      00191E CD 04 B3         [ 4]    1     CALL DOLIT 
      001921 00 1C                    2     .word ADDWX 
      001923 CD 15 E3         [ 4] 4259         CALL  CCOMMA 
      001926                       4260         _DOLIT 2*CELLL 
      001926 CD 04 B3         [ 4]    1     CALL DOLIT 
      001929 00 04                    2     .word 2*CELLL 
      00192B CC 15 CC         [ 2] 4261         JP  COMMA 
      00192E                       4262 JSRC2: 
                                   4263 ;;;;;;;; end optimization code ;;;;;;;;;;        
                                   4264 .endif        
      00192E CD 04 B3         [ 4] 4265         CALL     DOLIT
      001931 00 CD                 4266         .word     CALLL     ;CALL
      001933 CD 15 E3         [ 4] 4267         CALL     CCOMMA
      001936 CC 15 CC         [ 2] 4268         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   4269 
                                   4270 ;       INIT-OFS ( -- )
                                   4271 ;       compute offset to adjust jump address 
                                   4272 ;       set variable OFFSET 
      001939 18 E2                 4273         .word LINK 
                           00193B  4274         LINK=.
      00193B 08                    4275         .byte 8 
      00193C 49 4E 49 54 2D 4F 46  4276         .ascii "INIT-OFS" 
             53
      001944                       4277 INITOFS:
      001944 CD 07 73         [ 4] 4278         call TFLASH 
      001947 CD 05 27         [ 4] 4279         CALL AT 
      00194A CD 06 5D         [ 4] 4280         CALL DUPP 
      00194D CD 04 DC         [ 4] 4281         call QBRAN
      001950 19 61                 4282         .word 1$
      001952                       4283         _DROP  
      001952 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001955 CD 07 C2         [ 4] 4284         call CPP 
      001958 CD 05 27         [ 4] 4285         call AT 
      00195B CD 0D 2D         [ 4] 4286         call HERE
      00195E CD 09 16         [ 4] 4287         call SUBB 
      001961 CD 07 F7         [ 4] 4288 1$:     call OFFSET 
      001964 CC 05 15         [ 2] 4289         jp STORE  
                                   4290 
                                   4291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4292 ;       :       ( -- ; <string> )
                                   4293 ;       Start a new colon definition
                                   4294 ;       using next word as its name.
                                   4295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001967                       4296         _HEADER COLON,1,":"
      001967 19 3B                    1         .word LINK 
                           001969     2         LINK=.
      001969 01                       3         .byte 1  
      00196A 3A                       4         .ascii ":"
      00196B                          5         COLON:
      00196B CD 19 44         [ 4] 4297         call INITOFS       
      00196E CD 12 85         [ 4] 4298         CALL   TOKEN
      001971 CD 17 CA         [ 4] 4299         CALL   SNAME
      001974 CC 18 D5         [ 2] 4300         JP     RBRAC
                                   4301 
                                   4302 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4303 ;       I:  ( -- )
                                   4304 ;       Start interrupt service 
                                   4305 ;       routine definition
                                   4306 ;       those definition have 
                                   4307 ;       no name.
                                   4308 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001977                       4309         _HEADER ICOLON,2,"I:"
      001977 19 69                    1         .word LINK 
                           001979     2         LINK=.
      001979 02                       3         .byte 2  
      00197A 49 3A                    4         .ascii "I:"
      00197C                          5         ICOLON:
      00197C CD 19 44         [ 4] 4310         call INITOFS 
      00197F CC 18 D5         [ 2] 4311         jp RBRAC  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                   4312 
                                   4313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4314 ;       IMMEDIATE       ( -- )
                                   4315 ;       Make last compiled word
                                   4316 ;       an immediate word.
                                   4317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001982                       4318         _HEADER IMMED,9,"IMMEDIATE"
      001982 19 79                    1         .word LINK 
                           001984     2         LINK=.
      001984 09                       3         .byte 9  
      001985 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      00198E                          5         IMMED:
      00198E CD 04 B3         [ 4] 4319         CALL	DOLIT
      001991 80 00                 4320         .word	(IMEDD<<8)
      001993 CD 07 D2         [ 4] 4321 IMM01:  CALL	LAST
      001996 CD 05 27         [ 4] 4322         CALL    AT
      001999 CD 05 27         [ 4] 4323         CALL    AT
      00199C CD 06 CE         [ 4] 4324         CALL    ORR
      00199F CD 07 D2         [ 4] 4325         CALL    LAST
      0019A2 CD 05 27         [ 4] 4326         CALL    AT
      0019A5 CC 05 15         [ 2] 4327         JP      STORE
                                   4328 
                                   4329 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4330 ;		COMPILE-ONLY  ( -- )
                                   4331 ;		Make last compiled word 
                                   4332 ;		a compile only word.
                                   4333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019A8                       4334         _HEADER COMPONLY,12,"COMPILE-ONLY"
      0019A8 19 84                    1         .word LINK 
                           0019AA     2         LINK=.
      0019AA 0C                       3         .byte 12  
      0019AB 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE-ONLY"
             2D 4F 4E 4C 59
      0019B7                          5         COMPONLY:
      0019B7 CD 04 B3         [ 4] 4335         CALL     DOLIT
      0019BA 40 00                 4336         .word    (COMPO<<8)
      0019BC CC 19 93         [ 2] 4337         JP       IMM01
                                   4338 		
                                   4339 ;; Defining words
                                   4340 
                                   4341 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4342 ;       CREATE  ( -- ; <string> )
                                   4343 ;       Compile a new array
                                   4344 ;       without allocating space.
                                   4345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019BF                       4346         _HEADER CREAT,6,"CREATE"
      0019BF 19 AA                    1         .word LINK 
                           0019C1     2         LINK=.
      0019C1 06                       3         .byte 6  
      0019C2 43 52 45 41 54 45        4         .ascii "CREATE"
      0019C8                          5         CREAT:
      0019C8 CD 12 85         [ 4] 4347         CALL     TOKEN
      0019CB CD 17 CA         [ 4] 4348         CALL     SNAME
      0019CE CD 18 61         [ 4] 4349         CALL     OVERT        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      0019D1 CD 16 11         [ 4] 4350         CALL     COMPI 
      0019D4 07 13                 4351         .word DOVAR 
      0019D6 81               [ 4] 4352         RET
                                   4353 
                                   4354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4355 ;       VARIABLE  ( -- ; <string> )
                                   4356 ;       Compile a new variable
                                   4357 ;       initialized to 0.
                                   4358 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019D7                       4359         _HEADER VARIA,8,"VARIABLE"
      0019D7 19 C1                    1         .word LINK 
                           0019D9     2         LINK=.
      0019D9 08                       3         .byte 8  
      0019DA 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      0019E2                          5         VARIA:
                                   4360 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0019E2 CD 0D 2D         [ 4] 4361         CALL HERE
      0019E5 CD 06 5D         [ 4] 4362         CALL DUPP 
      0019E8 CD 0B BC         [ 4] 4363         CALL CELLP
      0019EB CD 07 B4         [ 4] 4364         CALL VPP 
      0019EE CD 05 15         [ 4] 4365         CALL STORE
      0019F1 CD 19 C8         [ 4] 4366         CALL CREAT
      0019F4 CD 06 5D         [ 4] 4367         CALL DUPP
      0019F7 CD 15 CC         [ 4] 4368         CALL COMMA
      0019FA CD 0C 53         [ 4] 4369         CALL ZERO
      0019FD CD 06 6D         [ 4] 4370         call SWAPP 
      001A00 CD 05 15         [ 4] 4371         CALL STORE
      001A03 CD 23 66         [ 4] 4372         CALL FMOVE ; move definition to FLASH
      001A06 CD 08 10         [ 4] 4373         CALL QDUP 
      001A09 CD 04 DC         [ 4] 4374         CALL QBRAN 
      001A0C 1A 15                 4375         .word SET_RAMLAST   
      001A0E CD 1E 0A         [ 4] 4376         call UPDATVP  ; don't update if variable kept in RAM.
      001A11 CD 23 FA         [ 4] 4377         CALL UPDATPTR
      001A14 81               [ 4] 4378         RET         
      001A15                       4379 SET_RAMLAST: 
      001A15 CD 07 D2         [ 4] 4380         CALL LAST 
      001A18 CD 05 27         [ 4] 4381         CALL AT 
      001A1B CD 07 E5         [ 4] 4382         CALL RAMLAST 
      001A1E CC 05 15         [ 2] 4383         JP STORE  
                                   4384 
                                   4385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4386 ;       CONSTANT  ( n -- ; <string> )
                                   4387 ;       Compile a new constant 
                                   4388 ;       n CONSTANT name 
                                   4389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A21                       4390         _HEADER CONSTANT,8,"CONSTANT"
      001A21 19 D9                    1         .word LINK 
                           001A23     2         LINK=.
      001A23 08                       3         .byte 8  
      001A24 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001A2C                          5         CONSTANT:
      001A2C CD 12 85         [ 4] 4391         CALL TOKEN
      001A2F CD 17 CA         [ 4] 4392         CALL SNAME 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001A32 CD 18 61         [ 4] 4393         CALL OVERT 
      001A35 CD 16 11         [ 4] 4394         CALL COMPI 
      001A38 1A 4C                 4395         .word DOCONST
      001A3A CD 15 CC         [ 4] 4396         CALL COMMA 
      001A3D CD 23 66         [ 4] 4397         CALL FMOVE
      001A40 CD 08 10         [ 4] 4398         CALL QDUP 
      001A43 CD 04 DC         [ 4] 4399         CALL QBRAN 
      001A46 1A 15                 4400         .word SET_RAMLAST  
      001A48 CD 23 FA         [ 4] 4401         CALL UPDATPTR  
      001A4B 81               [ 4] 4402 1$:     RET          
                                   4403 
                                   4404 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4405 ; CONSTANT runtime semantic 
                                   4406 ; doCONST  ( -- n )
                                   4407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4408 ;       _HEADER DOCONST,7,"DOCONST"
      001A4C                       4409 DOCONST:
      001A4C 1D 00 02         [ 2] 4410         subw x,#CELLL
      001A4F 90 85            [ 2] 4411         popw y 
      001A51 90 FE            [ 2] 4412         ldw y,(y) 
      001A53 FF               [ 2] 4413         ldw (x),y 
      001A54 81               [ 4] 4414         ret 
                                   4415 
                                   4416 ;----------------------------------
                                   4417 ; create double constant 
                                   4418 ; 2CONSTANT ( d -- ; <string> )
                                   4419 ;----------------------------------
      001A55                       4420         _HEADER DCONST,9,"2CONSTANT"
      001A55 1A 23                    1         .word LINK 
                           001A57     2         LINK=.
      001A57 09                       3         .byte 9  
      001A58 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001A61                          5         DCONST:
      001A61 CD 12 85         [ 4] 4421         CALL TOKEN
      001A64 CD 17 CA         [ 4] 4422         CALL SNAME 
      001A67 CD 18 61         [ 4] 4423         CALL OVERT 
      001A6A CD 16 11         [ 4] 4424         CALL COMPI 
      001A6D 1A 84                 4425         .word DO_DCONST
      001A6F CD 15 CC         [ 4] 4426         CALL COMMA
      001A72 CD 15 CC         [ 4] 4427         CALL COMMA  
      001A75 CD 23 66         [ 4] 4428         CALL FMOVE
      001A78 CD 08 10         [ 4] 4429         CALL QDUP 
      001A7B CD 04 DC         [ 4] 4430         CALL QBRAN 
      001A7E 1A 15                 4431         .word SET_RAMLAST  
      001A80 CD 23 FA         [ 4] 4432         CALL UPDATPTR  
      001A83 81               [ 4] 4433 1$:     RET          
                                   4434     
                                   4435 ;----------------------------------
                                   4436 ; runtime for DCONST 
                                   4437 ; stack double constant 
                                   4438 ; DO-DCONST ( -- d )
                                   4439 ;-----------------------------------
                                   4440 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001A84                       4441 DO_DCONST:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001A84 90 85            [ 2] 4442     popw y 
      001A86 90 BF 26         [ 2] 4443     ldw YTEMP,y 
      001A89 1D 00 04         [ 2] 4444     subw x,#2*CELLL 
      001A8C 90 FE            [ 2] 4445     ldw y,(y)
      001A8E FF               [ 2] 4446     ldw (x),y 
      001A8F 90 BE 26         [ 2] 4447     ldw y,YTEMP 
      001A92 90 EE 02         [ 2] 4448     ldw y,(2,y)
      001A95 EF 02            [ 2] 4449     ldw (2,x),y 
      001A97 81               [ 4] 4450     ret 
                                   4451 
                                   4452 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4453 ;;          TOOLS 
                                   4454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4455 
                                   4456 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4457 ;       _TYPE   ( b u -- )
                                   4458 ;       Display a string. Filter
                                   4459 ;       non-printing characters.
                                   4460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A98                       4461         _HEADER UTYPE,5,"_TYPE"
      001A98 1A 57                    1         .word LINK 
                           001A9A     2         LINK=.
      001A9A 05                       3         .byte 5  
      001A9B 5F 54 59 50 45           4         .ascii "_TYPE"
      001AA0                          5         UTYPE:
      001AA0 CD 06 26         [ 4] 4462         CALL     TOR     ;start count down loop
      001AA3 20 0F            [ 2] 4463         JRA     UTYP2   ;skip first pass
      001AA5 CD 06 5D         [ 4] 4464 UTYP1:  CALL     DUPP
      001AA8 CD 05 45         [ 4] 4465         CALL     CAT
      001AAB CD 0C 7D         [ 4] 4466         CALL     TCHAR
      001AAE CD 04 7A         [ 4] 4467         CALL     EMIT    ;display only printable
      001AB1 CD 0B E7         [ 4] 4468         CALL     ONEP    ;increment address
      001AB4 CD 04 C7         [ 4] 4469 UTYP2:  CALL     DONXT
      001AB7 1A A5                 4470         .word      UTYP1   ;loop till done
      001AB9 CC 06 53         [ 2] 4471         JP     DROP
                                   4472 
                                   4473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4474 ;       dm+     ( a u -- a )
                                   4475 ;       Dump u bytes from ,
                                   4476 ;       leaving a+u on  stack.
                                   4477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001ABC                       4478         _HEADER DUMPP,3,"DM+"
      001ABC 1A 9A                    1         .word LINK 
                           001ABE     2         LINK=.
      001ABE 03                       3         .byte 3  
      001ABF 44 4D 2B                 4         .ascii "DM+"
      001AC2                          5         DUMPP:
      001AC2 CD 06 85         [ 4] 4479         CALL     OVER
      001AC5 CD 04 B3         [ 4] 4480         CALL     DOLIT
      001AC8 00 04                 4481         .word      4
      001ACA CD 10 8E         [ 4] 4482         CALL     UDOTR   ;display address
      001ACD CD 0F F5         [ 4] 4483         CALL     SPACE
      001AD0 CD 06 26         [ 4] 4484         CALL     TOR     ;start count down loop
      001AD3 20 11            [ 2] 4485         JRA     PDUM2   ;skip first pass
      001AD5 CD 06 5D         [ 4] 4486 PDUM1:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001AD8 CD 05 45         [ 4] 4487         CALL     CAT
      001ADB CD 04 B3         [ 4] 4488         CALL     DOLIT
      001ADE 00 03                 4489         .word      3
      001AE0 CD 10 8E         [ 4] 4490         CALL     UDOTR   ;display numeric data
      001AE3 CD 0B E7         [ 4] 4491         CALL     ONEP    ;increment address
      001AE6 CD 04 C7         [ 4] 4492 PDUM2:  CALL     DONXT
      001AE9 1A D5                 4493         .word      PDUM1   ;loop till done
      001AEB 81               [ 4] 4494         RET
                                   4495 
                                   4496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4497 ;       DUMP    ( a u -- )
                                   4498 ;       Dump u bytes from a,
                                   4499 ;       in a formatted manner.
                                   4500 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AEC                       4501         _HEADER DUMP,4,"DUMP"
      001AEC 1A BE                    1         .word LINK 
                           001AEE     2         LINK=.
      001AEE 04                       3         .byte 4  
      001AEF 44 55 4D 50              4         .ascii "DUMP"
      001AF3                          5         DUMP:
      001AF3 CD 07 23         [ 4] 4502         CALL     BASE
      001AF6 CD 05 27         [ 4] 4503         CALL     AT
      001AF9 CD 06 26         [ 4] 4504         CALL     TOR
      001AFC CD 0E F6         [ 4] 4505         CALL     HEX     ;save radix, set hex
      001AFF CD 04 B3         [ 4] 4506         CALL     DOLIT
      001B02 00 10                 4507         .word      16
      001B04 CD 0B 0C         [ 4] 4508         CALL     SLASH   ;change count to lines
      001B07 CD 06 26         [ 4] 4509         CALL     TOR     ;start count down loop
      001B0A CD 10 38         [ 4] 4510 DUMP1:  CALL     CR
      001B0D CD 04 B3         [ 4] 4511         CALL     DOLIT
      001B10 00 10                 4512         .word      16
      001B12 CD 08 6B         [ 4] 4513         CALL     DDUP
      001B15 CD 1A C2         [ 4] 4514         CALL     DUMPP   ;display numeric
      001B18 CD 08 21         [ 4] 4515         CALL     ROT
      001B1B CD 08 21         [ 4] 4516         CALL     ROT
      001B1E CD 0F F5         [ 4] 4517         CALL     SPACE
      001B21 CD 0F F5         [ 4] 4518         CALL     SPACE
      001B24 CD 1A A0         [ 4] 4519         CALL     UTYPE   ;display printable characters
      001B27 CD 04 C7         [ 4] 4520         CALL     DONXT
      001B2A 1B 0A                 4521         .word      DUMP1   ;loop till done
      001B2C CD 06 53         [ 4] 4522 DUMP3:  CALL     DROP
      001B2F CD 05 78         [ 4] 4523         CALL     RFROM
      001B32 CD 07 23         [ 4] 4524         CALL     BASE
      001B35 CC 05 15         [ 2] 4525         JP     STORE   ;restore radix
                                   4526 
                                   4527 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4528 ;       .S      ( ... -- ... )
                                   4529 ;        Display  contents of stack.
                                   4530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B38                       4531         _HEADER DOTS,2,".S"
      001B38 1A EE                    1         .word LINK 
                           001B3A     2         LINK=.
      001B3A 02                       3         .byte 2  
      001B3B 2E 53                    4         .ascii ".S"
      001B3D                          5         DOTS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      001B3D CD 10 38         [ 4] 4532         CALL     CR
      001B40 CD 0C 95         [ 4] 4533         CALL     DEPTH   ;stack depth
      001B43 CD 06 26         [ 4] 4534         CALL     TOR     ;start count down loop
      001B46 20 09            [ 2] 4535         JRA     DOTS2   ;skip first pass
      001B48 CD 05 89         [ 4] 4536 DOTS1:  CALL     RAT
      001B4B CD 0C AC         [ 4] 4537 	CALL     PICK
      001B4E CD 10 DE         [ 4] 4538         CALL     DOT     ;index stack, display contents
      001B51 CD 04 C7         [ 4] 4539 DOTS2:  CALL     DONXT
      001B54 1B 48                 4540         .word      DOTS1   ;loop till done
      001B56 CD 10 65         [ 4] 4541         CALL     DOTQP
      001B59 05                    4542         .byte      5
      001B5A 20 3C 73 70 20        4543         .ascii     " <sp "
      001B5F 81               [ 4] 4544         RET
                                   4545 
                                   4546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4547 ;       >NAME   ( ca -- na | F )
                                   4548 ;       Convert code address
                                   4549 ;       to a name address.
                                   4550 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B60                       4551         _HEADER TNAME,5,">NAME"
      001B60 1B 3A                    1         .word LINK 
                           001B62     2         LINK=.
      001B62 05                       3         .byte 5  
      001B63 3E 4E 41 4D 45           4         .ascii ">NAME"
      001B68                          5         TNAME:
      001B68 CD 07 A6         [ 4] 4552         CALL     CNTXT   ;vocabulary link
      001B6B CD 05 27         [ 4] 4553 TNAM2:  CALL     AT
      001B6E CD 06 5D         [ 4] 4554         CALL     DUPP    ;?last word in a vocabulary
      001B71 CD 04 DC         [ 4] 4555         CALL     QBRAN
      001B74 1B 8F                 4556         .word      TNAM4
      001B76 CD 08 6B         [ 4] 4557         CALL     DDUP
      001B79 CD 12 93         [ 4] 4558         CALL     NAMET
      001B7C CD 06 E3         [ 4] 4559         CALL     XORR    ;compare
      001B7F CD 04 DC         [ 4] 4560         CALL     QBRAN
      001B82 1B 89                 4561         .word      TNAM3
      001B84 CD 0B CB         [ 4] 4562         CALL     CELLM   ;continue with next word
      001B87 20 E2            [ 2] 4563         JRA     TNAM2
      001B89 CD 06 6D         [ 4] 4564 TNAM3:  CALL     SWAPP
      001B8C CC 06 53         [ 2] 4565         JP     DROP
      001B8F CD 08 60         [ 4] 4566 TNAM4:  CALL     DDROP
      001B92 CC 0C 53         [ 2] 4567         JP     ZERO
                                   4568 
                                   4569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4570 ;       .ID     ( na -- )
                                   4571 ;        Display  name at address.
                                   4572 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B95                       4573         _HEADER DOTID,3,".ID"
      001B95 1B 62                    1         .word LINK 
                           001B97     2         LINK=.
      001B97 03                       3         .byte 3  
      001B98 2E 49 44                 4         .ascii ".ID"
      001B9B                          5         DOTID:
      001B9B CD 08 10         [ 4] 4574         CALL     QDUP    ;if zero no name
      001B9E CD 04 DC         [ 4] 4575         CALL     QBRAN
      001BA1 1B B1                 4576         .word      DOTI1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001BA3 CD 0D 16         [ 4] 4577         CALL     COUNT
      001BA6 CD 04 B3         [ 4] 4578         CALL     DOLIT
      001BA9 00 1F                 4579         .word      0x1F
      001BAB CD 06 BA         [ 4] 4580         CALL     ANDD    ;mask lexicon bits
      001BAE CC 1A A0         [ 2] 4581         JP     UTYPE
      001BB1 CD 10 65         [ 4] 4582 DOTI1:  CALL     DOTQP
      001BB4 09                    4583         .byte      9
      001BB5 20 6E 6F 4E 61 6D 65  4584         .ascii     " noName"
      001BBC 81               [ 4] 4585         RET
                                   4586 
                           000000  4587 WANT_SEE=0
                           000000  4588 .if WANT_SEE 
                                   4589 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4590 ;       SEE     ( -- ; <string> )
                                   4591 ;       A simple decompiler.
                                   4592 ;       Updated for byte machines.
                                   4593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4594         _HEADER SEE,3,"SEE"
                                   4595         CALL     TICK    ;starting address
                                   4596         CALL     CR
                                   4597         CALL     ONEM
                                   4598 SEE1:   CALL     ONEP
                                   4599         CALL     DUPP
                                   4600         CALL     AT
                                   4601         CALL     DUPP
                                   4602         CALL     QBRAN
                                   4603         .word    SEE2
                                   4604         CALL     TNAME   ;?is it a name
                                   4605 SEE2:   CALL     QDUP    ;name address or zero
                                   4606         CALL     QBRAN
                                   4607         .word    SEE3
                                   4608         CALL     SPACE
                                   4609         CALL     DOTID   ;display name
                                   4610         CALL     ONEP
                                   4611         JRA      SEE4
                                   4612 SEE3:   CALL     DUPP
                                   4613         CALL     CAT
                                   4614         CALL     UDOT    ;display number
                                   4615 SEE4:   CALL     NUFQ    ;user control
                                   4616         CALL     QBRAN
                                   4617         .word    SEE1
                                   4618         JP     DROP
                                   4619 .endif ; WANT_SEE 
                                   4620 
                                   4621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4622 ;       WORDS   ( -- )
                                   4623 ;       Display names in vocabulary.
                                   4624 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BBD                       4625         _HEADER WORDS,5,"WORDS"
      001BBD 1B 97                    1         .word LINK 
                           001BBF     2         LINK=.
      001BBF 05                       3         .byte 5  
      001BC0 57 4F 52 44 53           4         .ascii "WORDS"
      001BC5                          5         WORDS:
      001BC5 CD 10 38         [ 4] 4626         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



      001BC8 CD 07 A6         [ 4] 4627         CALL     CNTXT   ;only in context
      001BCB CD 05 27         [ 4] 4628 WORS1:  CALL     AT
      001BCE CD 08 10         [ 4] 4629         CALL     QDUP    ;?at end of list
      001BD1 CD 04 DC         [ 4] 4630         CALL     QBRAN
      001BD4 1B E7                 4631         .word      WORS2
      001BD6 CD 06 5D         [ 4] 4632         CALL     DUPP
      001BD9 CD 0F F5         [ 4] 4633         CALL     SPACE
      001BDC CD 1B 9B         [ 4] 4634         CALL     DOTID   ;display a name
      001BDF CD 0B CB         [ 4] 4635         CALL     CELLM
      001BE2 CD 04 F8         [ 4] 4636         CALL     BRAN
      001BE5 1B CB                 4637         .word      WORS1
      001BE7 81               [ 4] 4638 WORS2:  RET
                                   4639 
                                   4640         
                                   4641 ;; Hardware reset
                                   4642 
                                   4643 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4644 ;  COPYRIGTH
                                   4645 ; print copyright notice 
                                   4646 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BE8                       4647 COPYRIGHT:
      001BE8 CD 10 65         [ 4] 4648     CALL DOTQP 
      001BEB 2D                    4649     .byte 45 
      001BEC 43 6F 70 79 72 69 67  4650     .ascii "Copyright Jacques Deschenes, 2021, 2022,2023\n"
             68 74 20 4A 61 63 71
             75 65 73 20 44 65 73
             63 68 65 6E 65 73 2C
             20 32 30 32 31 2C 20
             32 30 32 32 2C 32 30
             32 33 0A
      001C19 81               [ 4] 4651     RET 
                                   4652 
                                   4653 
                                   4654 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4655 ;  PRINT_LICENSE 
                                   4656 ;  print GPL V3 license 
                                   4657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C1A                       4658 PRINT_LICENSE:
      001C1A CD 10 65         [ 4] 4659         CALL DOTQP 
      001C1D 10                    4660         .byte  16 
      001C1E 0A 4C 49 43 45 4E 53  4661         .ascii "\nLICENSE GPL V3\n"
             45 20 47 50 4C 20 56
             33 0A
      001C2E 81               [ 4] 4662         RET 
                                   4663 
                                   4664 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4665 ;    PRINT_VERSION ( c1 c2 -- )
                                   4666 ;    c2 minor 
                                   4667 ;    c1 major 
                                   4668 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C2F                       4669 PRINT_VERSION:
      001C2F CD 10 65         [ 4] 4670      CALL DOTQP 
      001C32 09                    4671      .byte 9
      001C33 20 76 65 72 73 69 6F  4672      .ascii " version "
             6E 20
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001C3C CD 0E 5B         [ 4] 4673      CALL BDIGS 
      001C3F CD 0E 95         [ 4] 4674      CALL DIGS 
      001C42 CD 0E 95         [ 4] 4675      CALL DIGS 
      001C45                       4676      _DOLIT '.' 
      001C45 CD 04 B3         [ 4]    1     CALL DOLIT 
      001C48 00 2E                    2     .word '.' 
      001C4A CD 0E 6B         [ 4] 4677      CALL HOLD 
      001C4D                       4678      _DROP 
      001C4D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001C50 CD 0E 95         [ 4] 4679      CALL DIGS 
      001C53 CD 0E C0         [ 4] 4680      CALL EDIGS 
      001C56 CD 10 1F         [ 4] 4681      CALL TYPES 
      001C59 81               [ 4] 4682      RET  
                                   4683 
                                   4684 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4685 ;       hi      ( -- )
                                   4686 ;       Display sign-on message.
                                   4687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C5A                       4688         _HEADER HI,2,"HI"
      001C5A 1B BF                    1         .word LINK 
                           001C5C     2         LINK=.
      001C5C 02                       3         .byte 2  
      001C5D 48 49                    4         .ascii "HI"
      001C5F                          5         HI:
      001C5F CD 10 38         [ 4] 4689         CALL     CR
      001C62 CD 10 65         [ 4] 4690         CALL     DOTQP   
      001C65 0A                    4691         .byte      10
      001C66 73 74 6D 38 65 46 6F  4692         .ascii     "stm8eForth"
             72 74 68
      001C70                       4693 	_DOLIT VER 
      001C70 CD 04 B3         [ 4]    1     CALL DOLIT 
      001C73 00 04                    2     .word VER 
      001C75                       4694         _DOLIT EXT 
      001C75 CD 04 B3         [ 4]    1     CALL DOLIT 
      001C78 00 01                    2     .word EXT 
      001C7A CD 1C 2F         [ 4] 4695         CALL PRINT_VERSION
                           000001  4696 .if WANT_DOUBLE 
      001C7D CD 24 72         [ 4] 4697         CALL DBLVER 
                                   4698 .endif 
                           000001  4699 .if WANT_FLOAT|WANT_FLOAT24
      001C80 CD 2B B9         [ 4] 4700         CALL FVER 
                                   4701 .endif         
      001C83 CD 1C 1A         [ 4] 4702         CALL PRINT_LICENSE
      001C86 CD 1B E8         [ 4] 4703         CALL COPYRIGHT
      001C89 CD 10 65         [ 4] 4704         CALL    DOTQP
                           000000  4705 .if NUCLEO_8S208RB         
                                   4706         .byte 18
                                   4707         .ascii  " on NUCLEO-8S208RB"
                                   4708 .endif
                           000001  4709 .if NUCLEO_8S207K8 
      001C8C 12                    4710         .byte 18 
      001C8D 20 6F 6E 20 4E 55 43  4711         .ascii  " on NUCLEO-8S207K8" 
             4C 45 4F 2D 38 53 32
             30 37 4B 38
                                   4712 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                           000000  4713 .if DISCOVERY
                                   4714         .byte 19
                                   4715         .ascii  " on STM8S-DISCOVERY"
                                   4716 .endif
                           000000  4717 .if DOORBELL
                                   4718         .byte 16
                                   4719         .ascii  " on stm8s105k6b6"
                                   4720 .endif
      001C9F CC 10 38         [ 2] 4721         JP     CR
                                   4722 
                                   4723 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4724 ;       'BOOT   ( -- a )
                                   4725 ;       The application startup vector.
                                   4726 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CA2                       4727         _HEADER TBOOT,5,"'BOOT"
      001CA2 1C 5C                    1         .word LINK 
                           001CA4     2         LINK=.
      001CA4 05                       3         .byte 5  
      001CA5 27 42 4F 4F 54           4         .ascii "'BOOT"
      001CAA                          5         TBOOT:
      001CAA CD 07 13         [ 4] 4728         CALL     DOVAR
      001CAD 40 02                 4729         .word    APP_RUN      ;application to boot
                                   4730 
                                   4731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4732 ;       COLD    ( -- )
                                   4733 ;       The hilevel cold start s=ence.
                                   4734 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CAF                       4735         _HEADER COLD,4,"COLD"
      001CAF 1C A4                    1         .word LINK 
                           001CB1     2         LINK=.
      001CB1 04                       3         .byte 4  
      001CB2 43 4F 4C 44              4         .ascii "COLD"
      001CB6                          5         COLD:
      001CB6 CD 04 B3         [ 4] 4736 COLD1:  CALL     DOLIT
      001CB9 00 43                 4737         .word      UZERO
      001CBB CD 04 B3         [ 4] 4738 	CALL     DOLIT
      001CBE 00 06                 4739         .word      UPP
      001CC0 CD 04 B3         [ 4] 4740         CALL     DOLIT
      001CC3 00 1C                 4741 	.word      UEND-UZERO
      001CC5 CD 0D 7A         [ 4] 4742         CALL     CMOVE   ;initialize user area
      001CC8 90 CE 40 02      [ 2] 4743         ldw y,APP_RUN 
      001CCC 26 16            [ 1] 4744         jrne 1$
      001CCE                       4745 0$:
                                   4746 ; there is no autorun application
                                   4747 ; initialize EEPROM variables to default  
      001CCE 1D 00 02         [ 2] 4748         subw x,#CELLL 
      001CD1 90 AE 1C 5F      [ 2] 4749         ldw y,#HI  
      001CD5 FF               [ 2] 4750         ldw (x),y
      001CD6 CD 1D E2         [ 4] 4751         call UPDATRUN
      001CD9 CD 1D CA         [ 4] 4752         call UPDATLAST 
      001CDC CD 1D F3         [ 4] 4753         call UPDATCP 
      001CDF CD 1E 0A         [ 4] 4754         call UPDATVP
      001CE2 20 3D            [ 2] 4755         jra 6$ 
      001CE4                       4756 1$:        
                                   4757 ; if no app at app_space initialize EEPROM with ca of 'HI'  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



      001CE4 90 CE 35 80      [ 2] 4758         ldw y,app_space
      001CE8 27 E4            [ 1] 4759         jreq 0$ 
                                   4760 ; update LAST with APP_LAST 
                                   4761 ; if APP_LAST > LAST else do the opposite
      001CEA 90 CE 40 00      [ 2] 4762         ldw y,APP_LAST 
      001CEE 90 B3 1C         [ 2] 4763         cpw y,ULAST 
      001CF1 22 05            [ 1] 4764         jrugt 2$ 
                                   4765 ; save LAST at APP_LAST  
      001CF3 CD 1D CA         [ 4] 4766         call UPDATLAST 
      001CF6 20 06            [ 2] 4767         jra 3$
      001CF8                       4768 2$: ; update LAST with APP_LAST 
      001CF8 90 BF 1C         [ 2] 4769         ldw ULAST,y
      001CFB 90 BF 16         [ 2] 4770         ldw UCNTXT,y
      001CFE                       4771 3$:  
                                   4772 ; update APP_CP if < app_space 
      001CFE 90 CE 40 04      [ 2] 4773         ldw y,APP_CP  
      001D02 90 B3 1A         [ 2] 4774         cpw y,UCP   
      001D05 24 06            [ 1] 4775         jruge 4$ 
      001D07 CD 1D F3         [ 4] 4776         call UPDATCP
      001D0A 90 BE 1A         [ 2] 4777         ldw y,UCP   
      001D0D                       4778 4$:
      001D0D 90 BF 1A         [ 2] 4779         ldw UCP,y                 
                                   4780 ; update UVP with APP_VP  
                                   4781 ; if APP_VP>UVP else do the opposite 
      001D10 90 CE 40 06      [ 2] 4782         ldw y,APP_VP 
      001D14 90 B3 18         [ 2] 4783         cpw y,UVP 
      001D17 22 05            [ 1] 4784         jrugt 5$
      001D19 CD 1E 0A         [ 4] 4785         call UPDATVP 
      001D1C 20 03            [ 2] 4786         jra 6$
      001D1E                       4787 5$: ; update UVP with APP_VP 
      001D1E 90 BF 18         [ 2] 4788         ldw UVP,y 
      001D21                       4789 6$:      
      001D21 CD 15 77         [ 4] 4790         CALL     PRESE   ;initialize data stack and TIB
      001D24 CD 1C AA         [ 4] 4791         CALL     TBOOT
      001D27 CD 0D 63         [ 4] 4792         CALL     ATEXE   ;application boot
      001D2A CD 18 61         [ 4] 4793         CALL     OVERT
      001D2D CC 15 94         [ 2] 4794         JP     QUIT    ;start interpretation
                                   4795 
                                   4796 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4797         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001D30 1C B1                   31     .word LINK 
                           001D32    32     LINK=.
      001D32 03                      33     .byte 3 
      001D33 46 50 21                34     .ascii "FP!"
      001D36                         35 FPSTOR:
      001D36 90 93            [ 1]   36     ldw y,x
      001D38 90 FE            [ 2]   37     ldw y,(y)
      001D3A 90 9F            [ 1]   38     ld a,yl 
      001D3C B7 34            [ 1]   39     ld FPTR,a 
      001D3E 1C 00 02         [ 2]   40     addw x,#CELLL 
      001D41 90 93            [ 1]   41     ldw y,x 
      001D43 90 FE            [ 2]   42     ldw y,(y)
      001D45 90 BF 35         [ 2]   43     ldw PTR16,y
      001D48 1C 00 02         [ 2]   44     addw x,#CELLL 
      001D4B 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001D4C 1D 32                   52     .word LINK 
                           001D4E    53 LINK=.
      001D4E 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001D4F 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001D55                         56 EEPROM: 
      001D55 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001D59 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001D5C EF 02            [ 2]   59     ldw (2,x),y 
      001D5E 90 5F            [ 1]   60     clrw y 
      001D60 FF               [ 2]   61     ldw (x),y 
      001D61 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001D62 1D 4E                   68 	.word LINK 
                           001D64    69 	LINK=.
      001D64 08                      70 	.byte 8 
      001D65 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001D6D                         72 EEPLAST:
      001D6D 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001D70 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001D74 EF 02            [ 2]   75 	ldw (2,x),y 
      001D76 90 5F            [ 1]   76 	clrw y 
      001D78 FF               [ 2]   77 	ldw (x),y 
      001D79 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001D7A 1D 64                   84 	.word LINK 
                           001D7C    85 	LINK=.
      001D7C 07                      86 	.byte 7
      001D7D 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001D84                         88 EEPRUN:
      001D84 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001D87 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001D8B EF 02            [ 2]   91 	ldw (2,x),y 
      001D8D 90 5F            [ 1]   92 	clrw y 
      001D8F FF               [ 2]   93 	ldw (x),y 
      001D90 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001D91 1D 7C                  100 	.word LINK
                           001D93   101 	LINK=.
      001D93 06                     102 	.byte 6 
      001D94 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001D9A                        104 EEPCP:
      001D9A 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001D9D 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001DA1 EF 02            [ 2]  107 	ldw (2,x),y 
      001DA3 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



      001DA5 FF               [ 2]  109 	ldw (x),y 
      001DA6 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001DA7 1D 93                  116 	.word LINK
                           001DA9   117 	LINK=.
      001DA9 06                     118 	.byte 6
      001DAA 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001DB0                        120 EEPVP:
      001DB0 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001DB3 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001DB7 EF 02            [ 2]  123 	ldw (2,x),y 
      001DB9 90 5F            [ 1]  124 	clrw y 
      001DBB FF               [ 2]  125 	ldw (x),y 
      001DBC 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001DBD 1D A9                  132 	.word LINK 
                           001DBF   133 	LINK=.
      001DBF 0A                     134 	.byte 10
      001DC0 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001DCA                        136 UPDATLAST:
      001DCA CD 07 D2         [ 4]  137 	call LAST
      001DCD CD 05 27         [ 4]  138 	call AT  
      001DD0 CD 1D 6D         [ 4]  139 	call EEPLAST
      001DD3 CC 1F C4         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001DD6 1D BF                  146 	.word LINK
                           001DD8   147 	LINK=.
      001DD8 09                     148 	.byte 9
      001DD9 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001DE2                        150 UPDATRUN:
      001DE2 CD 1D 84         [ 4]  151 	call EEPRUN
      001DE5 CC 1F C4         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001DE8 1D D8                  158 	.word LINK 
                           001DEA   159 	LINK=.
      001DEA 08                     160 	.byte 8 
      001DEB 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



             50
      001DF3                        162 UPDATCP:
      001DF3 CD 07 C2         [ 4]  163 	call CPP 
      001DF6 CD 05 27         [ 4]  164 	call AT 
      001DF9 CD 1D 9A         [ 4]  165 	call EEPCP 
      001DFC CC 1F C4         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001DFF 1D EA                  172 	.word LINK
                           001E01   173 	LINK=.
      001E01 08                     174 	.byte 8 
      001E02 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001E0A                        176 UPDATVP:
      001E0A CD 07 B4         [ 4]  177 	call VPP 
      001E0D CD 05 27         [ 4]  178 	call AT
      001E10 CD 1D B0         [ 4]  179 	call EEPVP 
      001E13 CC 1F C4         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO_8S20X
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  FAR@   ( ud -- n )
                                    186 ;----------------------------------
      001E16 1E 01                  187     .word LINK 
                           001E18   188 LINK=.
      001E18 04                     189     .byte 4
      001E19 46 41 52 40            190     .ascii "FAR@"
      001E1D                        191 FARAT:
      001E1D CD 1D 36         [ 4]  192     call FPSTOR
      001E20 CC 1E E7         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FARC@ ( ud -- c)
                                    199 ;-------------------------------------
      001E23 1E 18                  200     .word LINK
                           001E25   201     LINK=.
      001E25 05                     202     .byte 5 
      001E26 46 41 52 43 40         203     .ascii "FARC@" 
      001E2B                        204 FARCAT:
      001E2B CD 1D 36         [ 4]  205     call FPSTOR
      001E2E CC 1F 09         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO_8S20X 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001E31 1E 25                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                           001E33   215 LINK=.
      001E33 06                     216     .byte 6 
      001E34 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001E3A                        218 UNLKEE:
      001E3A 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001E3E 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001E42 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001E46 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001E4A 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001E4F 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001E50 1E 33                  231     .word LINK 
                           001E52   232 LINK=. 
      001E52 06                     233     .byte 6 
      001E53 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001E59                        235 UNLKFL:
      001E59 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001E5D 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001E61 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001E65 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001E69 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001E6E 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001E6F 1E 52                  248 	.word LINK 
                           001E71   249 	LINK=.
      001E71 06                     250 	.byte 6
      001E72 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001E78                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001E78 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001E7B 3D 34            [ 1]  256 	tnz FPTR 
      001E7D 26 16            [ 1]  257 	jrne 4$
      001E7F 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001E83 24 10            [ 1]  259     jruge 4$
      001E85 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001E89 25 0D            [ 1]  261     jrult 9$
      001E8B 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001E8F 22 07            [ 1]  263 	jrugt 9$
      001E91 CD 1E 3A         [ 4]  264 	call UNLKEE
      001E94 81               [ 4]  265 	ret 
      001E95 CD 1E 59         [ 4]  266 4$: call UNLKFL
      001E98 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001E99 1E 71                  274 	.word LINK 
                           001E9B   275 	LINK=.
      001E9B 04                     276 	.byte 4 
      001E9C 4C 4F 43 4B            277 	.ascii "LOCK" 
      001EA0                        278 LOCK: 
      001EA0 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001EA4 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001EA8 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001EA9 1E 9B                  287 	.word LINK 
                           001EAB   288 	LINK=. 
      001EAB 08                     289 	.byte 8 
      001EAC 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001EB4                        291 INC_FPTR:
      001EB4 3C 36            [ 1]  292 	inc PTR8 
      001EB6 26 0C            [ 1]  293 	jrne 1$
      001EB8 90 89            [ 2]  294 	pushw y 
      001EBA 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001EBD 90 5C            [ 1]  296 	incw y 
      001EBF 90 BF 34         [ 2]  297 	ldw FPTR,y
      001EC2 90 85            [ 2]  298 	popw y  
      001EC4 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001EC5 1E AB                  305 	.word LINK 
                           001EC7   306 	LINK=.
      001EC7 04                     307 	.byte 4 
      001EC8 50 54 52 2B            308 	.ascii "PTR+"
      001ECC                        309 PTRPLUS:
      001ECC 90 93            [ 1]  310 	ldw y,x 
      001ECE 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001ED1 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001ED5 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001ED8 24 02            [ 1]  314 	jrnc 1$
      001EDA 3C 34            [ 1]  315 	inc FPTR 
      001EDC 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001EDD 1E C7                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                           001EDF   324 	LINK=.
      001EDF 07                     325 	.byte 7 
      001EE0 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001EE7                        327 EE_READ:
      001EE7 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001EEA 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001EEE 90 95            [ 1]  330 	ld yh,a 
      001EF0 CD 1E B4         [ 4]  331 	call INC_FPTR 
      001EF3 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001EF7 CD 1E B4         [ 4]  333 	call INC_FPTR 
      001EFA 90 97            [ 1]  334 	ld yl,a 
      001EFC FF               [ 2]  335 	ldw (x),y 
      001EFD 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001EFE 1E DF                  342 	.word LINK 
                           001F00   343 	LINK=.
      001F00 08                     344 	.byte 8
      001F01 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001F09                        346 EE_CREAD:
      001F09 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001F0C 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001F10 CD 1E B4         [ 4]  349 	call INC_FPTR
      001F13 90 5F            [ 1]  350 	clrw y 
      001F15 90 97            [ 1]  351 	ld yl,a 
      001F17 FF               [ 2]  352 	ldw (x),y 
      001F18 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001F19 1F 00                  362 	.word LINK 
                           001F1B   363 	LINK=. 
      001F1B 07                     364 	.byte 7 
      001F1C 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001F23                        367 WR_BYTE:
      001F23 CD 04 A7         [ 4]  368 	call FC_XOFF
      001F26 90 93            [ 1]  369 	ldw y,x 
      001F28 90 FE            [ 2]  370 	ldw y,(y)
      001F2A 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001F2D 90 9F            [ 1]  372 	ld a,yl
      001F2F 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001F33 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F38 CD 04 91         [ 4]  375 	call FC_XON
      001F3B CC 1E B4         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001F3E 1F 1B                  385 	.word LINK 
                           001F40   386 	LINK=.
      001F40 07                     387 	.byte 7 
      001F41 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001F48                        389 WR_WORD:
      001F48 CD 04 A7         [ 4]  390 	call FC_XOFF
      001F4B 90 93            [ 1]  391 	ldw y,x
      001F4D 90 FE            [ 2]  392 	ldw y,(y)
      001F4F 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001F52 90 9E            [ 1]  394 	ld a,yh 
      001F54 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001F58 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F5D CD 1E B4         [ 4]  397 	call INC_FPTR 
      001F60 90 9F            [ 1]  398 	ld a,yl 
      001F62 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001F66 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F6B CD 04 91         [ 4]  401 	call FC_XON
      001F6E CC 1E B4         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001F71 1F 40                  409     .word LINK 
                           001F73   410 	LINK=.
      001F73 04                     411     .byte 4 
      001F74 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001F78                        417 EECSTORE:
      001F78 52 02            [ 2]  418 	sub sp,#VSIZE
      001F7A CD 1D 36         [ 4]  419     call FPSTOR
      001F7D E6 01            [ 1]  420 	ld a,(1,x)
      001F7F 43               [ 1]  421 	cpl a 
      001F80 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001F82 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001F84 CD 1E 78         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001F87 3D 34            [ 1]  426 	tnz FPTR 
      001F89 26 19            [ 1]  427 	jrne 2$
      001F8B 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001F8E 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001F92 2B 10            [ 1]  430 	jrmi 2$
      001F94 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001F98 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      001F9A 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001F9C 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001FA0 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001FA4                        437 2$: 
      001FA4 CD 1F 23         [ 4]  438 	call WR_BYTE 	
      001FA7 0D 02            [ 1]  439 	tnz (OPT,sp)
      001FA9 27 0D            [ 1]  440 	jreq 3$ 
      001FAB 7B 01            [ 1]  441     ld a,(BTW,sp)
      001FAD 90 5F            [ 1]  442     clrw y
      001FAF 90 97            [ 1]  443 	ld yl,a 
      001FB1 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001FB4 FF               [ 2]  445 	ldw (x),y 
      001FB5 CD 1F 23         [ 4]  446 	call WR_BYTE
      001FB8                        447 3$: 
      001FB8 CD 1E A0         [ 4]  448 	call LOCK 
      001FBB 5B 02            [ 2]  449 	addw sp,#VSIZE 
      001FBD 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      001FBE 1F 73                  456 	.word LINK 
                           001FC0   457 	LINK=.
      001FC0 03                     458 	.byte 3 
      001FC1 45 45 21               459 	.ascii "EE!"
      001FC4                        460 EESTORE:
      001FC4 CD 1D 36         [ 4]  461 	call FPSTOR 
      001FC7 CD 1E 78         [ 4]  462 	call UNLOCK 
      001FCA 90 93            [ 1]  463 	ldw y,x 
      001FCC 90 FE            [ 2]  464 	ldw y,(y)
      001FCE 90 89            [ 2]  465 	pushw y 
      001FD0 90 5E            [ 1]  466 	swapw y 
      001FD2 FF               [ 2]  467 	ldw (x),y 
      001FD3 CD 1F 23         [ 4]  468 	call WR_BYTE 
      001FD6 90 85            [ 2]  469 	popw y 
      001FD8 1D 00 02         [ 2]  470 	subw x,#CELLL
      001FDB FF               [ 2]  471 	ldw (x),y 
      001FDC CD 1F 23         [ 4]  472 	call WR_BYTE
      001FDF CC 1E A0         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      001FE2 1F C0                  481 	.word LINK 
                           001FE4   482 	LINK=. 
      001FE4 09                     483 	.byte 9 
      001FE5 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      001FEE                        485 row_erase:
      001FEE CD 04 A7         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      001FF1 CD 1D 36         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      001FF4 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001FF7 90 AE 20 47      [ 2]  491 	ldw y,#row_erase_proc
      001FFB FF               [ 2]  492 	ldw (x),y 
      001FFC CD 0D 3E         [ 4]  493 	call PAD 
      001FFF 90 AE 20 6E      [ 2]  494 	ldw y,#row_erase_proc_end 
      002003 72 A2 20 47      [ 2]  495 	subw y,#row_erase_proc
      002007 1D 00 02         [ 2]  496 	subw x,#CELLL 
      00200A FF               [ 2]  497 	ldw (x),y 
      00200B CD 0D 7A         [ 4]  498 	call CMOVE 
      00200E                        499 block_erase:
      00200E 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      002011 90 A3 35 80      [ 2]  501 	cpw y,#app_space 
      002015 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      002017 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      00201B 24 04            [ 1]  505 	jruge 1$
      00201D CD 04 91         [ 4]  506 	call FC_XON
      002020 81               [ 4]  507 	ret ; bad address 
      002021 90 A3 43 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      002025 23 04            [ 2]  509 	jrule 2$ 
      002027 CD 04 91         [ 4]  510 	call FC_XON
      00202A 81               [ 4]  511 	ret ; bad address 
      00202B                        512 2$:	
      00202B CD 1E 3A         [ 4]  513 	call UNLKEE 
      00202E 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      002030                        516 erase_flash:
      002030 CD 1E 59         [ 4]  517 	call UNLKFL 
      002033                        518 proceed_erase:
      002033 CD 0D 3E         [ 4]  519 	call PAD 
      002036 90 93            [ 1]  520 	ldw y,x
      002038 90 FE            [ 2]  521 	ldw y,(y)
      00203A 1C 00 02         [ 2]  522 	addw x,#CELLL  
      00203D 90 FD            [ 4]  523 	call (y) 
      00203F 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      002043 CD 04 91         [ 4]  525 	call FC_XON
      002046 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      002047                        529 row_erase_proc:
      002047 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00204B 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      00204F 4F               [ 1]  532 	clr a 
      002050 90 5F            [ 1]  533 	clrw y 
      002052 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      002056 90 5C            [ 1]  535     incw y
      002058 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      00205C 90 5C            [ 1]  537     incw y
      00205E 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      002062 90 5C            [ 1]  539     incw y
      002064 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      002068 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      00206D 81               [ 4]  542 	ret
      00206E                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      00206E                        556 copy_buffer:
      00206E 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      002070 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      002074 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      002078 90 5F            [ 1]  561 	clrw y
      00207A F6               [ 1]  562 1$:	ld a,(x)
      00207B 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      00207F 5C               [ 1]  564 	incw x 
      002080 90 5C            [ 1]  565 	incw y 
      002082 0A 01            [ 1]  566 	dec (BCNT,sp)
      002084 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      002086 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      00208B 84               [ 1]  570 	pop a ; remove BCNT from stack 
      00208C 81               [ 4]  571 	ret 
      00208D                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      00208D                        578 copy_prog_to_ram:
      00208D 1D 00 06         [ 2]  579 	subw x,#6
      002090 90 AE 20 6E      [ 2]  580 	ldw y,#copy_buffer 
      002094 EF 04            [ 2]  581 	ldw (4,x),y 
      002096 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      00209A EF 02            [ 2]  583 	ldw (2,x),y 
      00209C 90 AE 20 8D      [ 2]  584 	ldw y,#copy_buffer_end 
      0020A0 72 A2 20 6E      [ 2]  585 	subw y,#copy_buffer  
      0020A4 FF               [ 2]  586 	ldw (x),y 
      0020A5 CD 0D 7A         [ 4]  587 	call CMOVE 
      0020A8 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



      0020A9 1F E4                  597 	.word LINK 
                           0020AB   598 	LINK=.
      0020AB 06                     599 	.byte 6 
      0020AC 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      0020B2                        601 write_row:
      0020B2 CD 04 A7         [ 4]  602 	call FC_XOFF
      0020B5 CD 1D 36         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      0020B8 A6 80            [ 1]  605 	ld a,#0x80 
      0020BA B4 36            [ 1]  606 	and a,PTR8 
      0020BC B7 36            [ 1]  607 	ld PTR8,a  
      0020BE CD 20 8D         [ 4]  608 	call copy_prog_to_ram
      0020C1 CD 1E 78         [ 4]  609 	call UNLOCK
      0020C4 90 93            [ 1]  610 	ldw y,x 
      0020C6 90 FE            [ 2]  611 	ldw y,(y)
      0020C8 1C 00 02         [ 2]  612 	addw x,#CELLL 
      0020CB 89               [ 2]  613 	pushw x 
      0020CC 93               [ 1]  614 	ldw x,y ; buffer address in x 
      0020CD CD 17 00         [ 4]  615 	call TIBBASE
      0020D0 CD 1E A0         [ 4]  616 	call LOCK
      0020D3 85               [ 2]  617 	popw x 
      0020D4 CD 04 91         [ 4]  618 	call FC_XON 
      0020D7 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      0020D8 20 AB                  627 		.word LINK 
                           0020DA   628 		LINK=.
      0020DA 07                     629 		.byte 7 
      0020DB 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      0020E2                        631 set_option: 
      0020E2 90 93            [ 1]  632 		ldw y,x 
      0020E4 90 FE            [ 2]  633 		ldw y,(y)
      0020E6 27 06            [ 1]  634 		jreq 1$
      0020E8 90 A3 00 07      [ 2]  635 		cpw y,#7 
      0020EC 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      0020EE 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      0020F1 81               [ 4]  639 		ret
      0020F2 90 58            [ 2]  640 2$:		sllw y 
      0020F4 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      0020F8 FF               [ 2]  642 		ldw (x),y 
      0020F9 1D 00 02         [ 2]  643 		subw x,#CELLL 
      0020FC 90 5F            [ 1]  644 		clrw y 
      0020FE FF               [ 2]  645 		ldw (x),y 
      0020FF CD 1F 78         [ 4]  646 		call EECSTORE
      002102 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      002103 20 DA                  656 	.word LINK  
                           002105   657 	LINK=.
      002105 08                     658 	.byte 8 
      002106 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      00210E                        660 pristine:
                                    661 ;;; erase EEPROM
      00210E CD 1D 55         [ 4]  662 	call EEPROM 
      002111 CD 08 6B         [ 4]  663 1$:	call DDUP 
      002114 CD 1F EE         [ 4]  664 	call row_erase
      002117 90 93            [ 1]  665 	ldw y,x 
      002119 90 EE 02         [ 2]  666 	ldw y,(2,y)
      00211C 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      002120 EF 02            [ 2]  668 	ldw (2,x),y
      002122 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      002126 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      002128 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      00212C FF               [ 2]  673 2$:	ldw (x),y   
      00212D 90 5F            [ 1]  674 	clrw y 
      00212F EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      002131 CD 08 6B         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      002134 CD 20 E2         [ 4]  677 	call set_option
      002137 90 93            [ 1]  678 	ldw y,x 
      002139 90 FE            [ 2]  679 	ldw y,(y)
      00213B 90 5C            [ 1]  680 	incw y  ; next OPTION 
      00213D 90 A3 00 08      [ 2]  681 	cpw y,#8 
      002141 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      002143 90 AE 35 80      [ 2]  684 	ldw y,#app_space
      002147 EF 02            [ 2]  685 	ldw (2,x),y  
      002149 90 5F            [ 1]  686 	clrw y 
      00214B FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      00214C CD 1F EE         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      00214F 1D 00 02         [ 2]  690 	subw x,#CELLL 
      002152 90 5F            [ 1]  691 	clrw y  
      002154 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      002155 CD 06 5D         [ 4]  693 	call DUPP  
      002158 CD 21 75         [ 4]  694 	call reset_vector
      00215B 90 93            [ 1]  695 	ldw y,x 
      00215D 90 FE            [ 2]  696 	ldw y,(y)
      00215F 90 5C            [ 1]  697 	incw y   ; next vector 
      002161 90 A3 00 19      [ 2]  698 	cpw y,#25 
      002165 25 ED            [ 1]  699 	jrult 4$
      002167 CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      00216A 21 05                  708 	.word LINK 
                           00216C   709 	LINK=. 
      00216C 08                     710 	.byte 8 
      00216D 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      002175                        712 reset_vector:
      002175 90 93            [ 1]  713 	ldw y,x
      002177 1C 00 02         [ 2]  714 	addw x,#CELLL 
      00217A 90 FE            [ 2]  715 	ldw y,(y)
      00217C 90 A3 00 17      [ 2]  716 	cpw y,#23 
      002180 27 3A            [ 1]  717 	jreq 9$
      002182 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      002186 22 34            [ 1]  719 	jrugt 9$  
      002188 90 58            [ 2]  720 	sllw y 
      00218A 90 58            [ 2]  721 	sllw y 
      00218C 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      002190 90 BF 26         [ 2]  723 	ldw YTEMP,y
      002193 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      002196 EF 02            [ 2]  725 	ldw (2,x),y 
      002198 90 5F            [ 1]  726 	clrw y
      00219A FF               [ 2]  727 	ldw (x),y 
      00219B A6 82            [ 1]  728 	ld a,#0x82 
      00219D 90 95            [ 1]  729 	ld yh,a
      00219F EF 04            [ 2]  730 	ldw (4,x),y
      0021A1 CD 1F C4         [ 4]  731 	call EESTORE
      0021A4 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0021A7 90 5F            [ 1]  733 	clrw y 
      0021A9 FF               [ 2]  734 	ldw (x),y 
      0021AA 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0021AE EF 04            [ 2]  736 	ldw (4,x),y 
      0021B0 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0021B3 72 A9 00 02      [ 2]  738 	addw y,#2
      0021B7 EF 02            [ 2]  739 	ldw (2,x),y 
      0021B9 CD 1F C4         [ 4]  740 	call EESTORE
      0021BC 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      0021BD 21 6C                  750 	.word LINK 
                           0021BF   751 	LINK=.
      0021BF 07                     752 	.byte 7
      0021C0 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      0021C7                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      0021C7 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      0021C9 90 93            [ 1]  761 	ldw y,x 
      0021CB 90 FE            [ 2]  762 	ldw y,(y)
      0021CD 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      0021CF 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      0021D1 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      0021D4 BF 35            [ 2]  766 	ldw PTR16,X
      0021D6 AE FF FC         [ 2]  767 	ldw x,#-4 
      0021D9 1C 00 04         [ 2]  768 1$:	addw x,#4
      0021DC A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      0021DF 27 22            [ 1]  770 	jreq 9$
      0021E1 90 93            [ 1]  771 	ldw y,x  
      0021E3 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      0021E6 11 03            [ 1]  773 	cp a,(CADR,sp)
      0021E8 25 EF            [ 1]  774 	jrult 1$
      0021EA 90 5C            [ 1]  775 	incw y 
      0021EC 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      0021EF 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      0021F1 25 E6            [ 1]  778 	jrult 1$ 
      0021F3 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      0021F5 54               [ 2]  780 	srlw x
      0021F6 54               [ 2]  781 	srlw x 
      0021F7 90 93            [ 1]  782 	ldw y,x 
      0021F9 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      0021FB FF               [ 2]  784 	ldw (x),y
      0021FC CD 21 75         [ 4]  785 	call reset_vector
      0021FF 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      002201 20 D6            [ 2]  787 	jra 1$
      002203 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      002205 1C 00 02         [ 2]  789 	addw x,#CELLL 
      002208 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      00220A 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      00220B 21 BF                  799 	.word LINK
                           00220D   800 	LINK=.
      00220D 08                     801 	.byte 8 
      00220E 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      002216                        803 set_vector:
      002216 90 93            [ 1]  804     ldw y,x 
      002218 1C 00 02         [ 2]  805 	addw x,#CELLL 
      00221B 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      00221D 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      002221 23 04            [ 2]  808 	jrule 2$
      002223 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      002226 81               [ 4]  810 	ret
      002227 90 58            [ 2]  811 2$:	sllw y 
      002229 90 58            [ 2]  812 	sllw y 
      00222B 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      00222F 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      002232 A6 82            [ 1]  815 	ld a,#0x82 
      002234 90 95            [ 1]  816 	ld yh,a 
      002236 E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      002238 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      00223A 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      00223D EF 04            [ 2]  821 	ldw (4,x),y 
      00223F 90 BE 26         [ 2]  822 	ldw y,YTEMP
      002242 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002244 90 5F            [ 1]  824 	clrw y 
      002246 FF               [ 2]  825 	ldw (x),y   ; as a double 
      002247 CD 1F C4         [ 4]  826 	call EESTORE 
      00224A 90 93            [ 1]  827 	ldw y,x 
      00224C 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      00224F 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      002252 EF 04            [ 2]  830 	ldw (4,x),y 
      002254 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      002257 72 A9 00 02      [ 2]  832 	addw y,#2 
      00225B EF 02            [ 2]  833 	ldw (2,x),y 
      00225D 90 5F            [ 1]  834 	clrw y 
      00225F FF               [ 2]  835 	ldw (x),y 
      002260 CD 1F C4         [ 4]  836 	call EESTORE
      002263 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      002266 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      002267 22 0D                  845 	.word LINK
                           002269   846 	LINK=.
      002269 03                     847 	.byte 3
      00226A 45 45 2C               848 	.ascii "EE,"
      00226D                        849 EE_COMMA:
      00226D 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      002270 90 BE 1A         [ 2]  851 	ldw y,UCP
      002273 90 89            [ 2]  852 	pushw y 
      002275 EF 02            [ 2]  853 	ldw (2,x),y 
      002277 90 5F            [ 1]  854 	clrw y 
      002279 FF               [ 2]  855 	ldw (x),y
      00227A CD 1F C4         [ 4]  856 	call EESTORE
      00227D 90 85            [ 2]  857 	popw y 
      00227F 72 A9 00 02      [ 2]  858 	addw y,#2
      002283 90 BF 1A         [ 2]  859 	ldw UCP,y
      002286 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      002287 22 69                  867 	.word LINK 
                           002289   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      002289 04                     869 	.byte 4 
      00228A 45 45 43 2C            870 	.ascii "EEC,"
      00228E                        871 EE_CCOMMA:
      00228E 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      002291 90 BE 1A         [ 2]  873 	ldw y,UCP
      002294 90 89            [ 2]  874 	pushw y 
      002296 EF 02            [ 2]  875 	ldw (2,x),y 
      002298 90 5F            [ 1]  876 	clrw y 
      00229A FF               [ 2]  877 	ldw (x),y
      00229B CD 1F 78         [ 4]  878 	call EECSTORE
      00229E 90 85            [ 2]  879 	popw y 
      0022A0 90 5C            [ 1]  880 	incw y 
      0022A2 90 BF 1A         [ 2]  881 	ldw UCP,y
      0022A5 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0022A6 22 89                  889 	.word LINK 
                           0022A8   890 	LINK=.
      0022A8 07                     891 	.byte 7 
      0022A9 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0022B0                        893 ROW2BUF: 
      0022B0 CD 1D 36         [ 4]  894 	call FPSTOR 
      0022B3 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0022B5 88               [ 1]  896 	push a 
      0022B6 B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0022B8 B7 36            [ 1]  898 	ld PTR8,a
      0022BA 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      0022BE 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      0022C2 90 F7            [ 1]  901 	ld (y),a
      0022C4 CD 1E B4         [ 4]  902 	call INC_FPTR
      0022C7 90 5C            [ 1]  903 	incw y 
      0022C9 0A 01            [ 1]  904 	dec (1,sp)
      0022CB 26 F1            [ 1]  905 	jrne 1$ 
      0022CD 84               [ 1]  906 	pop a 
      0022CE 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      0022CF 22 A8                  915 	.word LINK 
                           0022D1   916 	LINK=.
      0022D1 07                     917 	.byte 7 
      0022D2 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      0022D9                        919 BUF2ROW:
      0022D9 CD 07 61         [ 4]  920 	call TBUF ; ( ud rb -- )
      0022DC CD 08 21         [ 4]  921 	call ROT 
      0022DF CD 08 21         [ 4]  922 	call ROT  ; ( rb ud -- )
      0022E2 CD 20 B2         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      0022E5 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      0022E6 22 D1                  931 	.word LINK 
                           0022E8   932 	LINK=.
      0022E8 05                     933 	.byte 5 
      0022E9 52 46 52 45 45         934 	.ascii "RFREE"
      0022EE                        935 RFREE:
      0022EE E6 01            [ 1]  936 	ld a,(1,x)
      0022F0 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      0022F2 B7 26            [ 1]  938 	ld YTEMP,a 
      0022F4 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      0022F6 B0 26            [ 1]  940 	sub a,YTEMP 
      0022F8 90 5F            [ 1]  941 	clrw y 
      0022FA 90 97            [ 1]  942 	ld yl,a
      0022FC FF               [ 2]  943 	ldw (x),y 
      0022FD 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      0022FE 22 E8                  955 	.word LINK 
                           002300   956 	LINK=. 
      002300 06                     957 	.byte 6
      002301 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      002307                        960 RAM2EE:
                                    961 ; copy ud on top 
      002307 90 93            [ 1]  962 	ldw y,x 
      002309 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      00230C 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      00230F 90 93            [ 1]  965 	ldw y,x 
      002311 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      002314 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      002317 FF               [ 2]  968 	ldw (x),y 
      002318 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      00231B EF 02            [ 2]  970 	ldw (2,x),y 
      00231D CD 22 B0         [ 4]  971 	call ROW2BUF 
      002320 90 93            [ 1]  972 	ldw y,x 
      002322 90 EE 06         [ 2]  973 	ldw y,(6,y)
      002325 90 89            [ 2]  974 	pushw y ; udl 
      002327 90 9F            [ 1]  975 	ld a,yl
      002329 A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      00232B 90 5F            [ 1]  977 	clrw y 
      00232D 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      00232F 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      002333 1D 00 02         [ 2]  980 	subw x,#CELLL 
      002336 FF               [ 2]  981 	ldw (x),y  
      002337 CD 06 6D         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      00233A CD 05 78         [ 4]  983 	call RFROM  
      00233D CD 22 EE         [ 4]  984 	call RFREE 
      002340 CD 09 C3         [ 4]  985 	call MIN
      002343 CD 06 5D         [ 4]  986 	call DUPP 
      002346 CD 06 26         [ 4]  987 	call TOR  
      002349 CD 0D 7A         [ 4]  988 	call CMOVE
      00234C CD 22 D9         [ 4]  989 	call BUF2ROW 
      00234F CD 05 78         [ 4]  990 	call RFROM 
      002352 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      002353 23 00                  999 	.word LINK 
                           002355  1000 	LINK=. 
      002355 05                    1001 	.byte 5 
      002356 46 41 44 44 52        1002 	.ascii "FADDR"
      00235B                       1003 FADDR:
      00235B CC 0C 53         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      00235E 23 55                 1020 	.word LINK 
                           002360  1021 	LINK=.
      002360 05                    1022 	.byte 5 
      002361 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      002366                       1024 FMOVE:
      002366 CD 07 73         [ 4] 1025 	call TFLASH 
      002369 CD 05 27         [ 4] 1026 	CALL AT 
      00236C CD 04 DC         [ 4] 1027 	CALL QBRAN 
      00236F 23 EA                 1028 	.word no_move  
      002371 CD 07 C2         [ 4] 1029 	call CPP
      002374 CD 05 27         [ 4] 1030 	call AT  
      002377 CD 06 5D         [ 4] 1031 	call DUPP ; ( udl udl -- )
      00237A CD 07 A6         [ 4] 1032 	call CNTXT 
      00237D CD 05 27         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



      002380 CD 04 B3         [ 4] 1034 	call DOLIT 
      002383 00 02                 1035 	.word 2 
      002385 CD 09 16         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      002388 CD 06 6D         [ 4] 1037 	call SWAPP 
      00238B CD 23 5B         [ 4] 1038 	call FADDR 
      00238E CD 08 21         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      002391 CD 06 5D         [ 4] 1040 	call DUPP 
      002394 CD 06 26         [ 4] 1041 	call TOR    ; R: a 
      002397                       1042 FMOVE2: 
      002397 CD 0D 2D         [ 4] 1043 	call HERE 
      00239A CD 05 89         [ 4] 1044 	call RAT 
      00239D CD 09 16         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0023A0                       1046 next_row:
      0023A0 CD 06 5D         [ 4] 1047 	call DUPP 
      0023A3 CD 06 26         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0023A6 CD 23 07         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0023A9 CD 06 5D         [ 4] 1050 	call DUPP 
      0023AC CD 06 26         [ 4] 1051 	call TOR
      0023AF CD 08 80         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0023B2 CD 06 5D         [ 4] 1053 	call DUPP 
      0023B5 CD 0C 53         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0023B8 CD 05 78         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0023BB CD 05 78         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0023BE CD 06 85         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0023C1 CD 09 16         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0023C4 CD 06 5D         [ 4] 1059 	call DUPP 
      0023C7 CD 04 DC         [ 4] 1060 	call QBRAN
      0023CA 23 E3                 1061 	.word fmove_done 
      0023CC CD 06 6D         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0023CF CD 05 78         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0023D2 CD 08 80         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      0023D5 CD 06 5D         [ 4] 1065 	call DUPP 
      0023D8 CD 06 26         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0023DB CD 06 6D         [ 4] 1067 	call SWAPP 
      0023DE CD 04 F8         [ 4] 1068 	call BRAN
      0023E1 23 A0                 1069 	.word next_row  
      0023E3                       1070 fmove_done:	
      0023E3 CD 05 78         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0023E6 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0023E9 81               [ 4] 1073  	ret  
      0023EA                       1074 no_move:
      0023EA CD 0C 53         [ 4] 1075 	call ZERO
      0023ED 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      0023EE 23 60                 1083 	.word LINK 
                           0023F0  1084 	LINK=.
      0023F0 09                    1085 	.byte 9
      0023F1 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      0023FA                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      0023FA CD 1D B0         [ 4] 1089 	call EEPVP 
      0023FD                       1090 	_DROP 
      0023FD 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002400 CD 05 27         [ 4] 1091 	call AT
      002403 CD 07 B4         [ 4] 1092 	call VPP 
      002406 CD 05 15         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      002409 CD 1D 9A         [ 4] 1095 	call EEPCP 
      00240C                       1096 	_DROP
      00240C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00240F CD 05 27         [ 4] 1097 	call AT
      002412 CD 04 B3         [ 4] 1098 	call DOLIT 
      002415 00 02                 1099 	.word 2 
      002417 CD 08 80         [ 4] 1100 	call PLUS 
      00241A CD 06 5D         [ 4] 1101 	call DUPP 
      00241D CD 07 A6         [ 4] 1102 	call CNTXT 
      002420 CD 05 15         [ 4] 1103 	call STORE
      002423 CD 07 D2         [ 4] 1104 	call LAST
      002426 CD 05 15         [ 4] 1105 	call STORE 
      002429 CD 1D CA         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      00242C CD 07 C2         [ 4] 1108 	call CPP 
      00242F CD 05 15         [ 4] 1109 	call STORE
      002432 CD 1D F3         [ 4] 1110 	call UPDATCP 
      002435 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      002436 23 F0                 1117 	.word LINK 
                           002438  1118 	LINK=. 
      002438 06                    1119 	.byte 6
      002439 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      00243F                       1121 IFMOVE:
      00243F CD 07 73         [ 4] 1122 	call TFLASH 
      002442 CD 05 27         [ 4] 1123 	CALL AT 
      002445 CD 04 DC         [ 4] 1124 	CALL QBRAN 
      002448 23 EA                 1125 	.word no_move 
      00244A CD 07 C2         [ 4] 1126 	call CPP 
      00244D CD 05 27         [ 4] 1127 	call AT 
      002450 CD 06 5D         [ 4] 1128 	call DUPP ; ( udl udl -- )
      002453 CD 1D B0         [ 4] 1129 	call EEPVP 
      002456                       1130 	_DROP
      002456 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002459 CD 05 27         [ 4] 1131 	call AT  ; ( udl udl a )
      00245C CD 06 26         [ 4] 1132 	call TOR 
      00245F CD 23 5B         [ 4] 1133 	call FADDR
      002462 CD 05 89         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      002465 CC 23 97         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                           000000  4798 .if WANT_SCALING_CONST 
                                   4799         .include "const_ratio.asm"
                                   4800 .endif
                           000000  4801 .if WANT_CONST_TABLE 
                                   4802         .include "ctable.asm"
                                   4803 .endif
                           000001  4804 .if WANT_DOUBLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                                   4805         .include "double.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021,2022 
                                      3 ;; This file is part of stm8_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm8_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm8_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;************************************
                                     21 ;    doubles integers library 
                                     22 ;    doubles are signed 32 bits, two's complement 
                                     23 ;    range: {-2147483647...2147483647}  
                                     24 ;    -2147483648  is reserved as an overflow marker 
                                     25 ; 
                                     26 ;  double input formats:
                                     27 ;    decimal_base::= ['-'|'+']dec_digits+['.'][dec_digits]*
                                     28 ;    hexadecimal_base::=['-'|'+']'$'hex_digits+['.'][hex_digits]*
                                     29 ;    The '.' indicate a double number, i.e. 32 bits
                                     30 ;    The '.' can be placed anywhere in digits sequence: first, middle,last  
                                     31 ;    otherwise it is a single number, i.e. 16 bits 
                                     32 ;
                                     33 ;    if float.asm library is compiled with project a 'e'|'E' character is 
                                     34 ;    mandatory to differentiate a float from a double.
                                     35 ;    exmpample:
                                     36 ;         3.141593  is double 3141593
                                     37 ;         3.141593e is float32  PI 
                                     38 ;         0.  is valid null double
                                     39 ;         0e  is valid null float32  
                                     40 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     41 
                                     42     .module DOUBLE 
                                     43 
                           000001    44     DVER_MAJOR=1 
                           000000    45     DVER_MINOR=0 
                                     46 
                                     47 
                                     48 
                                     49 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     50 ;  DBL-VER ( -- )
                                     51 ;  print library version 
                                     52 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002468                         53     _HEADER DBLVER,7,"DBL-VER"
      002468 24 38                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                           00246A     2         LINK=.
      00246A 07                       3         .byte 7  
      00246B 44 42 4C 2D 56 45 52     4         .ascii "DBL-VER"
      002472                          5         DBLVER:
      002472 CD 10 38         [ 4]   54     CALL CR 
      002475 CD 10 65         [ 4]   55     CALL DOTQP 
      002478 18                      56     .byte  24 
      002479 64 6F 75 62 6C 65 20    57     .ascii "double integer library, "
             69 6E 74 65 67 65 72
             20 6C 69 62 72 61 72
             79 2C 20
      002491                         58     _DOLIT DVER_MAJOR 
      002491 CD 04 B3         [ 4]    1     CALL DOLIT 
      002494 00 01                    2     .word DVER_MAJOR 
      002496                         59     _DOLIT DVER_MINOR  
      002496 CD 04 B3         [ 4]    1     CALL DOLIT 
      002499 00 00                    2     .word DVER_MINOR 
      00249B CC 1C 2F         [ 2]   60     JP PRINT_VERSION   
                                     61 
                                     62 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     63 ; uint32 * uint8
                                     64 ; input:
                                     65 ;   ud   uint32 
                                     66 ;   u8   uint8 
                                     67 ; output:
                                     68 ;   ud    = uint32*uint8   
                                     69 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     70     ; local vars 
                           000003    71     M8U=3 ; uint8 multiplier 
                           000002    72     OVF_LO=2 ; product overflow low byte
                           000001    73     OVF_HI=1 ; product overflow hi byte always 0.  
                           000000    74 .if 0
                                     75     _HEADER UDU8STAR,5,"UDU8*"
                           000001    76 .else 
      00249E                         77 UDU8STAR: ; ( ud u8 -- prod )
                                     78 .endif 
      00249E CD 06 26         [ 4]   79     CALL TOR ; ud r: u8 
      0024A1 4B 00            [ 1]   80     PUSH #0  ; R: uint8 0 0
      0024A3 E6 03            [ 1]   81     LD A,(CELLL+1,X) ; ud bits 7:0
      0024A5 90 97            [ 1]   82     LD YL,A    
      0024A7 7B 03            [ 1]   83     LD A,(M8U,SP) ; uint8 
      0024A9 90 42            [ 4]   84     MUL Y,A
      0024AB 90 9F            [ 1]   85     LD A,YL   
      0024AD E7 03            [ 1]   86     LD (CELLL+1,X),A  ; product bits 7:0 
      0024AF 90 9E            [ 1]   87     LD A,YH     ; partial prodcut bits 15:8
      0024B1 6B 02            [ 1]   88     LD (OVF_LO,SP),A ; r: uint8 ovf  0 
      0024B3 E6 02            [ 1]   89     LD A,(CELLL,X)  ; ud bits 15:8 
      0024B5 90 97            [ 1]   90     LD YL,A     
      0024B7 7B 03            [ 1]   91     LD A,(M8U,SP) ; uint8 
      0024B9 90 42            [ 4]   92     MUL Y,A    
      0024BB 72 F9 01         [ 2]   93     ADDW Y,(OVF_HI,SP) ; Y+=overflow 1  
      0024BE 90 9F            [ 1]   94     LD A,YL        
      0024C0 E7 02            [ 1]   95     LD (CELLL,X),A  ; product bits 15:8
      0024C2 90 9E            [ 1]   96     LD A,YH     
      0024C4 6B 02            [ 1]   97     LD (OVF_LO,SP),A ; overflow 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



      0024C6 E6 01            [ 1]   98     LD A,(1,X)  ; ud bits 23:16 
      0024C8 90 97            [ 1]   99     LD YL,A 
      0024CA 7B 03            [ 1]  100     LD A,(M8U,SP) ; uint8 
      0024CC 90 42            [ 4]  101     MUL Y,A 
      0024CE 72 F9 01         [ 2]  102     ADDW Y,(OVF_HI,SP) ; Y+=overflow 
      0024D1 90 9F            [ 1]  103     LD A,YL    
      0024D3 E7 01            [ 1]  104     LD (1,X),A  ; product bits 23:16
      0024D5 90 9E            [ 1]  105     LD A,YH     
      0024D7 6B 02            [ 1]  106     LD (OVF_LO,SP),A ; overflow 
      0024D9 F6               [ 1]  107     LD A,(X)    
      0024DA 90 97            [ 1]  108     LD YL,A     ; ud bits 31:24
      0024DC 7B 03            [ 1]  109     LD A,(M8U,SP) ; uint8 
      0024DE 90 42            [ 4]  110     MUL Y,A 
      0024E0 72 F9 01         [ 2]  111     ADDW Y,(OVF_HI,SP) ; Y+= overflow 
      0024E3 90 9F            [ 1]  112     LD A,YL
      0024E5 4D               [ 1]  113     TNZ A 
      0024E6 2B 06            [ 1]  114     JRMI 1$  ; product overflow 
      0024E8 F7               [ 1]  115     LD (X),A  ; product bits 31:24 
                                    116 ; if overflow return 2^32-1
      0024E9 90 9E            [ 1]  117     LD A,YH
      0024EB 4D               [ 1]  118     TNZ A  
      0024EC 27 09            [ 1]  119     JREQ 2$
      0024EE                        120 1$: ; product overflow 
      0024EE 90 AE 80 00      [ 2]  121     LDW Y,#0X8000 
      0024F2 FF               [ 2]  122     LDW (X),Y 
      0024F3 90 5F            [ 1]  123     CLRW Y 
      0024F5 EF 02            [ 2]  124     LDW (CELLL,X),Y  
      0024F7                        125 2$:    
      0024F7 5B 03            [ 2]  126     ADD SP,#CELLL+1 ; drop M8U, OVF_2  and OVF_1 from r: 
      0024F9 81               [ 4]  127     RET
                                    128 
                                    129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    130 ; get all digits in row 
                                    131 ; stop at first non-digit or end of string
                                    132 ; if number>2^30 abort with overflow  
                                    133 ; ( dlo dhi a cnt -- dlo dhi a cnt )
                                    134 ; input:
                                    135 ;   dlo     low word of integer 
                                    136 ;   dlhi    high word of integer 
                                    137 ;   a       string pointer 
                                    138 ;   cnt     string length 
                                    139 ; output:
                                    140 ;   dlo     updated 
                                    141 ;   dhi     updated 
                                    142 ;   a       incremented
                                    143 ;   cnt     decremented 
                                    144 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0024FA                        145 parse_digits: ; ( dlo dhi a cnt -- dlo dhi a cnt )
      0024FA CD 06 5D         [ 4]  146     CALL DUPP 
      0024FD                        147     _QBRAN parse_d5  ; end of string 
      0024FD CD 04 DC         [ 4]    1     CALL QBRAN
      002500 25 63                    2     .word parse_d5
      002502 CD 06 26         [ 4]  148     CALL TOR   ; dlo dhi a R: cntr 
      002505 CD 0D 16         [ 4]  149     CALL COUNT ; dlo dhi a+ char 
      002508 CD 07 23         [ 4]  150     CALL BASE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



      00250B CD 05 27         [ 4]  151     CALL AT 
      00250E CD 0F 1F         [ 4]  152     CALL DIGTQ 
      002511                        153     _QBRAN parse_d4 ; not a digit
      002511 CD 04 DC         [ 4]    1     CALL QBRAN
      002514 25 57                    2     .word parse_d4
      002516 CD 28 B0         [ 4]  154     CALL DTOR  ; dlo dhi R: cntr a+ c  
      002519 CD 07 23         [ 4]  155     CALL BASE 
      00251C CD 05 27         [ 4]  156     CALL AT 
                                    157 ;    CALL UDSSTAR
      00251F CD 24 9E         [ 4]  158     CALL UDU8STAR 
      002522 F6               [ 1]  159     LD A,(X)
      002523 2A 1E            [ 1]  160     JRPL parse_d2 
                                    161 ; overflow 
      002525                        162     _DOLIT 10 
      002525 CD 04 B3         [ 4]    1     CALL DOLIT 
      002528 00 0A                    2     .word 10 
      00252A CD 07 23         [ 4]  163     CALL BASE 
      00252D CD 05 15         [ 4]  164     CALL STORE 
      002530 CD 14 8E         [ 4]  165     CALL ABORQ 
      002533 0F                     166     .byte 15
      002534 20 69 6E 70 75 74 20   167     .ascii " input overflow"
             6F 76 65 72 66 6C 6F
             77
      002543                        168 parse_d2:     
      002543 CD 05 78         [ 4]  169     CALL RFROM 
      002546 CD 0C 53         [ 4]  170     CALL ZERO 
      002549 CD 2B 56         [ 4]  171     CALL DPLUS 
      00254C CD 05 78         [ 4]  172     CALL RFROM  ; dlo dhi a+ 
      00254F CD 05 78         [ 4]  173     CALL RFROM ; dlo dhi a+ cntr 
      002552 CD 0B F4         [ 4]  174     CALL ONEM 
      002555 20 A3            [ 2]  175     JRA parse_digits ; dlo dhi a+ R: 
      002557                        176 parse_d4:
      002557 90 93            [ 1]  177     LDW Y,X 
      002559 90 EE 02         [ 2]  178     LDW Y,(CELLL,Y)
      00255C 90 5A            [ 2]  179     DECW Y  ; dec(a)
      00255E EF 02            [ 2]  180     LDW (CELLL,X),Y 
      002560 90 85            [ 2]  181     POPW Y 
      002562 FF               [ 2]  182     LDW (X),Y ; dlo dhi a cnt  
      002563                        183 parse_d5:
      002563 81               [ 4]  184     RET 
                                    185 
                                    186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    187 ;   NUMBER? (a -- s -1 |d -2 | a 0 )
                                    188 ;   convert string to integer 
                                    189 ;  if integer parse fail because of extra 
                                    190 ;  characters in string and WANT_FLOAT=1 
                                    191 ;  in config.inc then jump to FLOAT? in
                                    192 ;  float.asm
                                    193 ; 
                                    194 ; accepted integer format:
                                    195 ;    decimal ::= ['-'|'+']dec_digits+
                                    196 ;    hexadecimal ::= ['-'|'+']'$'hex_digits+
                                    197 ;   Optional '.' anywhere in digits 
                                    198 ;   sequence signal a double integer.
                                    199 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]



      002564                        200     _HEADER NUMBQ,7,"NUMBER?"
      002564 24 6A                    1         .word LINK 
                           002566     2         LINK=.
      002566 07                       3         .byte 7  
      002567 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      00256E                          5         NUMBQ:
                                    201 ; save current base value 
      00256E CD 07 23         [ 4]  202     CALL BASE 
      002571 CD 05 27         [ 4]  203     CALL AT 
      002574 CD 06 26         [ 4]  204     CALL TOR  ; R: base
                                    205 ; create d? flags R: 
                                    206 ; d? double integer flag 0=int16,-1=int32  
      002577                        207     _DOLIT 0 
      002577 CD 04 B3         [ 4]    1     CALL DOLIT 
      00257A 00 00                    2     .word 0 
      00257C CD 06 26         [ 4]  208     CALL TOR ; R: base d?=0 default to single 
      00257F CD 06 5D         [ 4]  209     CALL DUPP 
      002582 CD 0C 53         [ 4]  210     CALL ZERO 
      002585 CD 06 5D         [ 4]  211     CALL DUPP 
      002588 CD 08 21         [ 4]  212     CALL ROT ; a ud=0 a 
      00258B CD 0D 16         [ 4]  213     CALL COUNT ; a ud a+1 cnt 
                                    214 ; check for number sign 
      00258E CD 0F 8D         [ 4]  215     CALL NSIGN 
      002591 CD 06 26         [ 4]  216     CALL TOR ; R: base d?=0 s?   
                                    217 ; check for hexadecimal character '$'
      002594                        218     _DOLIT '$'
      002594 CD 04 B3         [ 4]    1     CALL DOLIT 
      002597 00 24                    2     .word '$' 
      002599 CD 0F 67         [ 4]  219     CALL ACCEPT_CHAR
      00259C                        220     _QBRAN 1$ 
      00259C CD 04 DC         [ 4]    1     CALL QBRAN
      00259F 25 A4                    2     .word 1$
      0025A1 CD 0E F6         [ 4]  221     CALL HEX 
      0025A4                        222 1$:    
                                    223 ; now parse digits 
                                    224 ; check for end of string     
      0025A4 CD 08 10         [ 4]  225     CALL QDUP ; dlo dhi a cnt R: base d? s? 
      0025A7                        226     _TBRAN 2$  ; parse not complete 
      0025A7 CD 04 EA         [ 4]    1     CALL TBRAN 
      0025AA 25 B4                    2     .word 2$ 
                                    227 ; invalid format clean stack     
      0025AC 1C 00 06         [ 2]  228     ADDW X,#3*CELLL ; drop ud a 
      0025AF 5B 04            [ 2]  229     ADDW SP,#DBL_SIZE ; drop d? s? from r: 
      0025B1 CC 26 2E         [ 2]  230     JP BAD_FORMAT 
      0025B4                        231 2$:    
      0025B4 CD 24 FA         [ 4]  232     CALL parse_digits ; 
      0025B7 CD 08 10         [ 4]  233     CALL QDUP
      0025BA                        234     _QBRAN INTGR_FMT ; end of string 
      0025BA CD 04 DC         [ 4]    1     CALL QBRAN
      0025BD 26 02                    2     .word INTGR_FMT
                                    235 ; more characters to parse 
                                    236 ; if next char=='.' set d?=-1 
                                    237 ; and try for more digits  
      0025BF                        238     _DOLIT '.' 
      0025BF CD 04 B3         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]



      0025C2 00 2E                    2     .word '.' 
      0025C4 CD 0F 67         [ 4]  239     CALL ACCEPT_CHAR
      0025C7 CD 06 85         [ 4]  240     CALL OVER 
      0025CA CD 06 26         [ 4]  241     CALL TOR   ; dlo dhi a cnt f  r: base d? s? cnt  
      0025CD                        242     _QBRAN 6$  
      0025CD CD 04 DC         [ 4]    1     CALL QBRAN
      0025D0 25 E1                    2     .word 6$
                                    243 ; it is a double integer set d?=-1
      0025D2 03 05            [ 1]  244     CPL (5,SP)
      0025D4 03 06            [ 1]  245     CPL (6,SP) ; d?=-1, int32 
      0025D6 CD 24 FA         [ 4]  246     CALL parse_digits 
      0025D9 CD 08 10         [ 4]  247     CALL QDUP     
      0025DC                        248     _QBRAN 8$ ; end of string, it is a double integer  
      0025DC CD 04 DC         [ 4]    1     CALL QBRAN
      0025DF 26 00                    2     .word 8$
      0025E1                        249 6$: ; float number or bad format
                           000001   250 .if WANT_FLOAT
      0025E1 CD 05 78         [ 4]  251     CALL RFROM ; cnt before last parse_digits 
      0025E4 CD 06 85         [ 4]  252     CALL OVER ; dlo dhi a cnt n cnt 
      0025E7 CD 09 16         [ 4]  253     CALL SUBB ; dlo dhi a cnt ndec -> how many digits after '.' 
      0025EA CD 05 78         [ 4]  254     CALL RFROM ; dlo dhi a cnt ndec sign  
      0025ED 5B 02            [ 2]  255     ADDW SP,#CELLL ; drop d? not required by FLOAT? 
      0025EF CD 06 26         [ 4]  256     CALL TOR 
      0025F2 CD 06 26         [ 4]  257     CALL TOR  ;  dlo dhi a cnt r: base sign digits 
      0025F5 CC 2E A5         [ 2]  258     JP FLOATQ ;  dlo dhi a cnt r: base sign digits
                                    259 .endif 
                                    260 ; error not a number 
                                    261 ; stack frame: dlo dhi a cnt r: base d? s? cnt 
                                    262 ; clean stacks 
      0025F8                        263     _DROPN 4*CELLL ; drop dlo dhi a cnt 
      0025F8 1C 00 10         [ 2]    1     ADDW X,#4*CELLL*CELLL 
      0025FB 5B 06            [ 2]  264     ADDW SP,#3*CELLL ; drop d? s? cnt   
      0025FD CC 26 2E         [ 2]  265     JP BAD_FORMAT      
      002600                        266 8$:
      002600 5B 02            [ 2]  267     ADDW SP,#CELLL ; drop cnt from r: 
      002602                        268 INTGR_FMT: ; got an integer format 
                                    269 ; end of string
      002602 1C 00 02         [ 2]  270     ADDW X,#CELLL ; drop a+
      002605 CD 08 21         [ 4]  271     CALL ROT 
      002608 1C 00 02         [ 2]  272     ADDW X,#CELLL ; drop a 
                                    273 ; stracks: dlo dhi R: base d? sign  
      00260B CD 05 78         [ 4]  274     CALL RFROM  ; a dlo dhi sign 
      00260E                        275     _QBRAN 1$
      00260E CD 04 DC         [ 4]    1     CALL QBRAN
      002611 26 16                    2     .word 1$
      002613 CD 08 DC         [ 4]  276     CALL DNEGA
      002616                        277 1$: 
      002616                        278     _DOLIT -2  ; double return -2 flag 
      002616 CD 04 B3         [ 4]    1     CALL DOLIT 
      002619 FF FE                    2     .word -2 
      00261B CD 05 78         [ 4]  279     CALL RFROM ; dlo dhi -2 d? R: base 
      00261E                        280     _TBRAN NUMQ8 
      00261E CD 04 EA         [ 4]    1     CALL TBRAN 
      002621 26 33                    2     .word NUMQ8 
      002623 CD 06 6D         [ 4]  281     CALL SWAPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]



      002626                        282     _DROP
      002626 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002629 CD 0B E7         [ 4]  283     CALL ONEP   ; single return -1 flag   
      00262C                        284     _BRAN NUMQ8 
      00262C 20 05            [ 2]    1     JRA NUMQ8  
      00262E                        285 BAD_FORMAT: ; a R: base 
      00262E                        286     _DOLIT 0 
      00262E CD 04 B3         [ 4]    1     CALL DOLIT 
      002631 00 00                    2     .word 0 
      002633                        287 NUMQ8: 
      002633 CD 05 78         [ 4]  288     CALL RFROM     
      002636 CD 07 23         [ 4]  289     CALL BASE 
      002639 CC 05 15         [ 2]  290     JP STORE 
                                    291   
                                    292 
                                    293 
                                    294 
                                    295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    296 ;   DABS ( d -- d )
                                    297 ;   absolute value of double
                                    298 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00263C                        299     _HEADER DABS,4,"DABS"
      00263C 25 66                    1         .word LINK 
                           00263E     2         LINK=.
      00263E 04                       3         .byte 4  
      00263F 44 41 42 53              4         .ascii "DABS"
      002643                          5         DABS:
      002643 F6               [ 1]  300     LD A,(X) 
      002644 A4 80            [ 1]  301     AND A,#0X80 
      002646 27 03            [ 1]  302     JREQ DABS1 
      002648 CC 08 DC         [ 2]  303     JP DNEGA 
      00264B                        304 DABS1:
      00264B 81               [ 4]  305     RET 
                                    306 
                                    307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    308 ;  DSIGN ( d -- d f )
                                    309 ;  sign of double 
                                    310 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00264C                        311     _HEADER DSIGN,5,"DSIGN"
      00264C 26 3E                    1         .word LINK 
                           00264E     2         LINK=.
      00264E 05                       3         .byte 5  
      00264F 44 53 49 47 4E           4         .ascii "DSIGN"
      002654                          5         DSIGN:
      002654 A6 00            [ 1]  312     LD A,#0 
      002656 90 93            [ 1]  313     LDW Y,X 
      002658 90 FE            [ 2]  314     LDW Y,(Y)
      00265A 2A 02            [ 1]  315     JRPL DSIGN1
      00265C A6 FF            [ 1]  316     LD A,#0XFF 
      00265E                        317 DSIGN1:
      00265E 1D 00 02         [ 2]  318     SUBW X,#2 
      002661 F7               [ 1]  319     LD (X),A 
      002662 E7 01            [ 1]  320     LD (1,X),A 
      002664 81               [ 4]  321     RET 
                                    322 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]



                                    323 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    324 ;   DS/MOD ( ud us - ur udq )
                                    325 ;   unsigned divide double by single 
                                    326 ;   return double quotient 
                                    327 ;   and single remainder 
                                    328 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002665                        329     _HEADER DSLMOD,6,"DS/MOD"
      002665 26 4E                    1         .word LINK 
                           002667     2         LINK=.
      002667 06                       3         .byte 6  
      002668 44 53 2F 4D 4F 44        4         .ascii "DS/MOD"
      00266E                          5         DSLMOD:
      00266E 90 93            [ 1]  330         LDW     Y,X             ; stack pointer to Y
      002670 FE               [ 2]  331         LDW     X,(X)           ; un
      002671 BF 26            [ 2]  332         LDW     YTEMP,X         ; save un
      002673 93               [ 1]  333         LDW     X,Y
      002674 89               [ 2]  334         PUSHW   X               ; save stack pointer
      002675 90 89            [ 2]  335         PUSHW   Y 
      002677 EE 02            [ 2]  336         LDW     X,(2,X)           ; X=udh
      002679 90 BE 26         [ 2]  337         LDW     Y,YTEMP         ; divisor 
      00267C 65               [ 2]  338         DIVW    X,Y 
      00267D BF 24            [ 2]  339         LDW     XTEMP,X         ; QUOTIENT hi 
      00267F 93               [ 1]  340         LDW     X,Y             ; remainder in X 
      002680 90 85            [ 2]  341         POPW    Y 
      002682 90 EE 04         [ 2]  342         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      002685 A6 10            [ 1]  343         LD      A,#16           ; loop count
      002687 90 58            [ 2]  344         SLLW    Y               ; udl shift udl into udh
      002689                        345 DSLMOD3:
      002689 59               [ 2]  346         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      00268A 25 04            [ 1]  347         JRC     DSLMODa         ; if carry out of rotate
      00268C B3 26            [ 2]  348         CPW     X,YTEMP         ; compare udh to un
      00268E 25 05            [ 1]  349         JRULT   DSLMOD4         ; can't subtract
      002690                        350 DSLMODa:
      002690 72 B0 00 26      [ 2]  351         SUBW    X,YTEMP         ; can subtract
      002694 98               [ 1]  352         RCF
      002695                        353 DSLMOD4:
      002695 8C               [ 1]  354         CCF                     ; quotient bit
      002696 90 59            [ 2]  355         RLCW    Y               ; rotate into quotient, rotate out udl
      002698 4A               [ 1]  356         DEC     A               ; repeat
      002699 26 EE            [ 1]  357         JRNE    DSLMOD3           ; if A == 0
      00269B                        358 DSLMODb:
      00269B BF 26            [ 2]  359         LDW     YTEMP,X         ; done, save remainder
      00269D 85               [ 2]  360         POPW    X               ; restore stack pointer
      00269E EF 02            [ 2]  361         LDW     (2,X),Y           ; save quotient low 
      0026A0 90 BE 24         [ 2]  362         LDW     Y,XTEMP         ; quotient hi 
      0026A3 FF               [ 2]  363         LDW     (X),Y           ; save quotient hi 
      0026A4 90 BE 26         [ 2]  364         LDW     Y,YTEMP         ; remainder onto stack
      0026A7 EF 04            [ 2]  365         LDW     (4,X),Y
      0026A9 81               [ 4]  366         RET 
                                    367 
                                    368 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    369 ;   D# ( d -- d )
                                    370 ;   extract least digit 
                                    371 ;   from double integer 
                                    372 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]



      0026AA                        373     _HEADER DDIG,2,"D#"
      0026AA 26 67                    1         .word LINK 
                           0026AC     2         LINK=.
      0026AC 02                       3         .byte 2  
      0026AD 44 23                    4         .ascii "D#"
      0026AF                          5         DDIG:
      0026AF CD 07 23         [ 4]  374     CALL BASE 
      0026B2 CD 05 27         [ 4]  375     CALL AT 
      0026B5 CD 26 6E         [ 4]  376     CALL DSLMOD
      0026B8 CD 08 21         [ 4]  377     CALL ROT   
      0026BB CD 0E 1F         [ 4]  378     CALL DIGIT 
      0026BE CC 0E 6B         [ 2]  379     JP HOLD 
                                    380      
                                    381 
                                    382 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    383 ;    D#S ( d -- s )
                                    384 ;   extract digit from double 
                                    385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026C1                        386     _HEADER DDIGS,3,"D#S"
      0026C1 26 AC                    1         .word LINK 
                           0026C3     2         LINK=.
      0026C3 03                       3         .byte 3  
      0026C4 44 23 53                 4         .ascii "D#S"
      0026C7                          5         DDIGS:
      0026C7 CD 26 AF         [ 4]  387     CALL    DDIG 
      0026CA CD 08 6B         [ 4]  388     CALL    DDUP 
      0026CD CD 28 36         [ 4]  389     CALL    DZEQUAL
      0026D0                        390     _QBRAN  DDIGS 
      0026D0 CD 04 DC         [ 4]    1     CALL QBRAN
      0026D3 26 C7                    2     .word DDIGS
      0026D5                        391     _DROP 
      0026D5 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0026D8 81               [ 4]  392     RET
                                    393 
                                    394 
                                    395 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    396 ;   D. ( d -- )
                                    397 ;   display double integer 
                                    398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0026D9                        399     _HEADER DDOT,2,"D."
      0026D9 26 C3                    1         .word LINK 
                           0026DB     2         LINK=.
      0026DB 02                       3         .byte 2  
      0026DC 44 2E                    4         .ascii "D."
      0026DE                          5         DDOT:
      0026DE CD 0F F5         [ 4]  400     CALL SPACE
      0026E1 CD 26 54         [ 4]  401     CALL DSIGN 
      0026E4 CD 06 26         [ 4]  402     CALL TOR
      0026E7 CD 05 89         [ 4]  403     CALL RAT 
      0026EA                        404     _QBRAN DDOT0
      0026EA CD 04 DC         [ 4]    1     CALL QBRAN
      0026ED 26 F2                    2     .word DDOT0
      0026EF CD 08 DC         [ 4]  405     CALL DNEGA 
      0026F2                        406 DDOT0:     
      0026F2 CD 0E 5B         [ 4]  407     CALL BDIGS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]



      0026F5 CD 26 C7         [ 4]  408     CALL DDIGS 
      0026F8 CD 05 78         [ 4]  409     CALL RFROM 
      0026FB                        410     _QBRAN DDOT1 
      0026FB CD 04 DC         [ 4]    1     CALL QBRAN
      0026FE 27 08                    2     .word DDOT1
      002700                        411     _DOLIT '-' 
      002700 CD 04 B3         [ 4]    1     CALL DOLIT 
      002703 00 2D                    2     .word '-' 
      002705 CD 0E 6B         [ 4]  412     CALL HOLD 
      002708                        413 DDOT1: 
      002708 CD 0E C0         [ 4]  414     CALL EDIGS 
      00270B CD 10 1F         [ 4]  415     CALL TYPES     
      00270E A6 2E            [ 1]  416     LD A,#'.
      002710 CC 04 7F         [ 2]  417     JP putc  
                                    418      
                                    419 
                                    420 
                                    421 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    422 ;  UDS* ( ud u -- ud*u )
                                    423 ;  uint32*uint16 
                                    424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002713                        425     _HEADER UDSSTAR,4,"UDS*"
      002713 26 DB                    1         .word LINK 
                           002715     2         LINK=.
      002715 04                       3         .byte 4  
      002716 55 44 53 2A              4         .ascii "UDS*"
      00271A                          5         UDSSTAR:
      00271A CD 06 26         [ 4]  426     CALL TOR 
      00271D CD 06 6D         [ 4]  427     CALL SWAPP 
      002720 CD 05 89         [ 4]  428     CALL RAT 
      002723 CD 0B 1B         [ 4]  429     CALL UMSTA ; udlo*u 
      002726 CD 08 21         [ 4]  430     CALL ROT 
      002729 CD 05 78         [ 4]  431     CALL RFROM 
      00272C CD 0B 1B         [ 4]  432     CALL UMSTA ; udhi*u 
      00272F                        433     _DROP  ; drop overflow 
      00272F 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002732 CC 08 80         [ 2]  434     JP PLUS  ; udlo*u+(uhi*u<<16)
                                    435 
                                    436 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    437 ; multiply double by unsigned single 
                                    438 ; return double 
                                    439 ;  ( d u -- d )
                                    440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002735                        441     _HEADER DSSTAR,3,"DS*"
      002735 27 15                    1         .word LINK 
                           002737     2         LINK=.
      002737 03                       3         .byte 3  
      002738 44 53 2A                 4         .ascii "DS*"
      00273B                          5         DSSTAR:
                                    442 ;DSSTAR:
      00273B CD 06 26         [ 4]  443     CALL TOR
      00273E CD 26 54         [ 4]  444     CALL DSIGN 
      002741 CD 08 40         [ 4]  445     CALL NROT 
      002744 CD 26 43         [ 4]  446     CALL DABS
      002747 CD 05 78         [ 4]  447     CALL RFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]



      00274A CD 27 1A         [ 4]  448     CALL UDSSTAR  
      00274D CD 08 21         [ 4]  449     CALL ROT 
      002750                        450     _QBRAN DSSTAR3 
      002750 CD 04 DC         [ 4]    1     CALL QBRAN
      002753 27 58                    2     .word DSSTAR3
      002755 CC 08 DC         [ 2]  451     JP DNEGA 
      002758                        452 DSSTAR3:
      002758 81               [ 4]  453     RET 
                                    454 
                                    455 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    456 ;  2SWAP ( d1 d2 -- d2 d1 )
                                    457 ;  swap double 
                                    458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002759                        459     _HEADER DSWAP,5,"2SWAP"
      002759 27 37                    1         .word LINK 
                           00275B     2         LINK=.
      00275B 05                       3         .byte 5  
      00275C 32 53 57 41 50           4         .ascii "2SWAP"
      002761                          5         DSWAP:
      002761 90 93            [ 1]  460     LDW Y,X 
      002763 90 FE            [ 2]  461     LDW Y,(Y)
      002765 90 BF 26         [ 2]  462     LDW YTEMP,Y ; d2 hi 
      002768 90 93            [ 1]  463     LDW Y,X 
      00276A 90 EE 02         [ 2]  464     LDW Y,(2,Y)
      00276D 90 BF 24         [ 2]  465     LDW XTEMP,Y  ; d2 lo 
      002770 90 93            [ 1]  466     LDW Y,X 
      002772 90 EE 04         [ 2]  467     LDW Y,(4,Y)  ; d1 hi 
      002775 FF               [ 2]  468     LDW (X),Y 
      002776 90 93            [ 1]  469     LDW Y,X
      002778 90 EE 06         [ 2]  470     LDW Y,(6,Y)  ; d1 lo 
      00277B EF 02            [ 2]  471     LDW (2,X),Y
      00277D 90 BE 26         [ 2]  472     LDW Y,YTEMP  
      002780 EF 04            [ 2]  473     LDW (4,X),Y 
      002782 90 BE 24         [ 2]  474     LDW Y,XTEMP 
      002785 EF 06            [ 2]  475     LDW (6,X),Y 
      002787 81               [ 4]  476     RET 
                                    477 
                                    478 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    479 ;    DCLZ ( d -- u )
                                    480 ;    double count leading zeros
                                    481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002788                        482     _HEADER DCLZ,4,"DCLZ"
      002788 27 5B                    1         .word LINK 
                           00278A     2         LINK=.
      00278A 04                       3         .byte 4  
      00278B 44 43 4C 5A              4         .ascii "DCLZ"
      00278F                          5         DCLZ:
      00278F 4F               [ 1]  483     CLR A 
      002790 90 93            [ 1]  484     LDW Y,X 
      002792 90 FE            [ 2]  485     LDW Y,(Y)
      002794 2B 18            [ 1]  486     JRMI DCLZ8 ; no leading zero 
      002796 27 09            [ 1]  487     JREQ DCLZ4 ; >=16 
      002798                        488 DCLZ1: ; <16
      002798 90 58            [ 2]  489     SLLW Y
      00279A 4C               [ 1]  490     INC A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]



      00279B 90 5D            [ 2]  491     TNZW Y 
      00279D 2B 0F            [ 1]  492     JRMI DCLZ8
      00279F 20 F7            [ 2]  493     JRA DCLZ1 
      0027A1                        494 DCLZ4: ; >=16 
      0027A1 A6 10            [ 1]  495     LD A,#16 
      0027A3 90 93            [ 1]  496     LDW Y,X 
      0027A5 90 EE 02         [ 2]  497     LDW Y,(2,Y)
      0027A8 2B 04            [ 1]  498     JRMI DCLZ8 
      0027AA 26 EC            [ 1]  499     JRNE DCLZ1 
      0027AC AB 10            [ 1]  500     ADD A,#16
      0027AE                        501 DCLZ8: 
      0027AE 1C 00 02         [ 2]  502     ADDW X,#2 
      0027B1 90 5F            [ 1]  503     CLRW Y 
      0027B3 90 97            [ 1]  504     LD YL,A 
      0027B5 FF               [ 2]  505     LDW (X),Y 
      0027B6 81               [ 4]  506     RET 
                                    507 
                                    508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    509 ;   <2ROT ( d1 d2 d3 -- d3 d1 d2 )
                                    510 ;   rotate left doubles 
                                    511 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027B7                        512     _HEADER NDROT,5,"<2ROT"
      0027B7 27 8A                    1         .word LINK 
                           0027B9     2         LINK=.
      0027B9 05                       3         .byte 5  
      0027BA 3C 32 52 4F 54           4         .ascii "<2ROT"
      0027BF                          5         NDROT:
                                    513 ; save d3 in temp 
      0027BF 90 93            [ 1]  514     LDW Y,X 
      0027C1 90 FE            [ 2]  515     LDW Y,(Y)
      0027C3 90 BF 26         [ 2]  516     LDW YTEMP,Y  ; d3 hi 
      0027C6 90 93            [ 1]  517     LDW Y,X 
      0027C8 90 EE 02         [ 2]  518     LDW Y,(2,Y)
      0027CB 90 BF 24         [ 2]  519     LDW XTEMP,Y  ; d3 lo 
                                    520 ; put d2 in d1 slot 
      0027CE 90 93            [ 1]  521     LDW Y,X 
      0027D0 90 EE 04         [ 2]  522     LDW Y,(4,Y) 
      0027D3 FF               [ 2]  523     LDW (X),Y   ; d2 hi 
      0027D4 90 93            [ 1]  524     LDW Y,X 
      0027D6 90 EE 06         [ 2]  525     LDW Y,(6,Y)
      0027D9 EF 02            [ 2]  526     LDW (2,X),Y ; d2 lo
                                    527 ; put d1 in d2 slot 
      0027DB 90 93            [ 1]  528     LDW Y,X 
      0027DD 90 EE 08         [ 2]  529     LDW Y,(8,Y) 
      0027E0 EF 04            [ 2]  530     LDW (4,X),Y ; d1 hi 
      0027E2 90 93            [ 1]  531     LDW Y,X 
      0027E4 90 EE 0A         [ 2]  532     LDW Y,(10,Y)
      0027E7 EF 06            [ 2]  533     LDW (6,X),Y  ; d1 lo 
                                    534 ; put d3 in d1 slot 
      0027E9 90 BE 26         [ 2]  535     LDW Y,YTEMP 
      0027EC EF 08            [ 2]  536     LDW (8,X),Y  ; d3 hi 
      0027EE 90 BE 24         [ 2]  537     LDW Y,XTEMP 
      0027F1 EF 0A            [ 2]  538     LDW (10,X),Y  ; d3 lo 
      0027F3 81               [ 4]  539     RET 
                                    540 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]



                                    541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    542 ;   2ROT ( d1 d2 d3 -- d2 d3 d1 )
                                    543 ;   rotate right doubles 
                                    544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0027F4                        545     _HEADER DROT,4,"2ROT"
      0027F4 27 B9                    1         .word LINK 
                           0027F6     2         LINK=.
      0027F6 04                       3         .byte 4  
      0027F7 32 52 4F 54              4         .ascii "2ROT"
      0027FB                          5         DROT:
                                    546 ; save d3 in temp 
      0027FB 90 93            [ 1]  547     LDW Y,X 
      0027FD 90 FE            [ 2]  548     LDW Y,(Y)
      0027FF 90 BF 26         [ 2]  549     LDW YTEMP,Y ; d3 hi 
      002802 90 93            [ 1]  550     LDW Y,X 
      002804 90 EE 02         [ 2]  551     LDW Y,(2,Y)
      002807 90 BF 24         [ 2]  552     LDW XTEMP,Y ; d3 lo 
                                    553 ; put d1 in d3 slot 
      00280A 90 93            [ 1]  554     LDW Y,X 
      00280C 90 EE 08         [ 2]  555     LDW Y,(8,Y)
      00280F FF               [ 2]  556     LDW (X),Y  ; d1 hi 
      002810 90 93            [ 1]  557     LDW Y,X 
      002812 90 EE 0A         [ 2]  558     LDW Y,(10,Y) 
      002815 EF 02            [ 2]  559     LDW (2,X),Y ; d1 lo 
                                    560 ; put d2 in d1 slot 
      002817 90 93            [ 1]  561     LDW Y,X 
      002819 90 EE 04         [ 2]  562     LDW Y,(4,Y) ; d2 hi 
      00281C EF 08            [ 2]  563     LDW (8,X),Y 
      00281E 90 93            [ 1]  564     LDW Y,X 
      002820 90 EE 06         [ 2]  565     LDW Y,(6,Y) ; d2 lo 
      002823 EF 0A            [ 2]  566     LDW (10,X),Y 
                                    567 ; put d3 in d2 slot 
      002825 90 BE 26         [ 2]  568     LDW Y,YTEMP 
      002828 EF 04            [ 2]  569     LDW (4,X),Y 
      00282A 90 BE 24         [ 2]  570     LDW Y,XTEMP 
      00282D EF 06            [ 2]  571     LDW (6,X),Y 
      00282F 81               [ 4]  572     RET 
                                    573 
                                    574 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    575 ;    D0= ( d -- 0|-1 )
                                    576 ;    check if double is 0 
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002830                        578     _HEADER DZEQUAL,3,"D0="
      002830 27 F6                    1         .word LINK 
                           002832     2         LINK=.
      002832 03                       3         .byte 3  
      002833 44 30 3D                 4         .ascii "D0="
      002836                          5         DZEQUAL:
      002836 4F               [ 1]  579     CLR A  
      002837 90 93            [ 1]  580     LDW Y,X 
      002839 90 FE            [ 2]  581     LDW Y,(Y)
      00283B 26 09            [ 1]  582     JRNE ZEQ1 
      00283D 90 93            [ 1]  583     LDW Y,X 
      00283F 90 EE 02         [ 2]  584     LDW Y,(2,Y)
      002842 26 02            [ 1]  585     JRNE ZEQ1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]



      002844 A6 FF            [ 1]  586     LD A,#0xFF
      002846                        587 ZEQ1:
      002846 1C 00 02         [ 2]  588     ADDW X,#CELLL 
      002849 F7               [ 1]  589     LD (X),A
      00284A E7 01            [ 1]  590     LD (1,X),A
      00284C 81               [ 4]  591 	RET     
                                    592 
                                    593 
                                    594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    595 ;   D= ( d1 d2 -- f )
                                    596 ;   d1==d2?
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00284D                        598     _HEADER DEQUAL,2,"D="
      00284D 28 32                    1         .word LINK 
                           00284F     2         LINK=.
      00284F 02                       3         .byte 2  
      002850 44 3D                    4         .ascii "D="
      002852                          5         DEQUAL:
      002852 A6 00            [ 1]  599     LD A,#0 
      002854 90 93            [ 1]  600     LDW Y,X 
      002856 90 FE            [ 2]  601     LDW Y,(Y)
      002858 E3 04            [ 2]  602     CPW Y,(4,X)
      00285A 26 0B            [ 1]  603     JRNE DEQU4 
      00285C 90 93            [ 1]  604     LDW Y,X 
      00285E 90 EE 02         [ 2]  605     LDW Y,(2,Y)
      002861 E3 06            [ 2]  606     CPW Y,(6,X)
      002863 26 02            [ 1]  607     JRNE DEQU4 
      002865 A6 FF            [ 1]  608     LD A,#0XFF
      002867                        609 DEQU4:
      002867 1C 00 06         [ 2]  610     ADDW X,#6
      00286A F7               [ 1]  611     LD (X),A 
      00286B E7 01            [ 1]  612     LD (1,X),A 
      00286D 81               [ 4]  613     RET 
                                    614 
                                    615 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    616 ;   D> ( d1 d2 -- f )
                                    617 ;   d1>d2?
                                    618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00286E                        619     _HEADER DGREAT,2,"D>"
      00286E 28 4F                    1         .word LINK 
                           002870     2         LINK=.
      002870 02                       3         .byte 2  
      002871 44 3E                    4         .ascii "D>"
      002873                          5         DGREAT:
      002873 CD 27 61         [ 4]  620     CALL DSWAP 
      002876 CC 28 7E         [ 2]  621     JP DLESS 
                                    622 
                                    623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    624 ;   D< ( d1 d2 -- f )
                                    625 ;   d1<d2? 
                                    626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002879                        627     _HEADER DLESS,2,"D<"
      002879 28 70                    1         .word LINK 
                           00287B     2         LINK=.
      00287B 02                       3         .byte 2  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 147.
Hexadecimal [24-Bits]



      00287C 44 3C                    4         .ascii "D<"
      00287E                          5         DLESS:
      00287E CD 2B 84         [ 4]  628     CALL DSUB
      002881 CD 0C 53         [ 4]  629     CALL ZERO
      002884 CD 08 40         [ 4]  630     CALL NROT  
      002887 CD 28 99         [ 4]  631     CALL DZLESS 
      00288A                        632     _QBRAN DLESS4
      00288A CD 04 DC         [ 4]    1     CALL QBRAN
      00288D 28 92                    2     .word DLESS4
      00288F CC 08 B9         [ 2]  633     JP INVER  
      002892                        634 DLESS4:
      002892 81               [ 4]  635     RET
                                    636 
                                    637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    638 ;  D0< ( d -- f )
                                    639 ;  d<0? 
                                    640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002893                        641     _HEADER DZLESS,3,"D0<"
      002893 28 7B                    1         .word LINK 
                           002895     2         LINK=.
      002895 03                       3         .byte 3  
      002896 44 30 3C                 4         .ascii "D0<"
      002899                          5         DZLESS:
      002899 A6 00            [ 1]  642     LD A,#0 
      00289B 90 93            [ 1]  643     LDW Y,X 
      00289D 90 FE            [ 2]  644     LDW Y,(Y)
      00289F 2A 02            [ 1]  645     JRPL DZLESS1 
      0028A1 A6 FF            [ 1]  646     LD A,#0XFF 
      0028A3                        647 DZLESS1:
      0028A3 1C 00 02         [ 2]  648     ADDW X,#CELLL 
      0028A6 F7               [ 1]  649     LD (X),A 
      0028A7 E7 01            [ 1]  650     LD (1,X),A    
      0028A9 81               [ 4]  651     RET 
                                    652 
                                    653 
                                    654 
                                    655 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    656 ;   2>R ( d -- R: d )
                                    657 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028AA                        658     _HEADER DTOR,3,"2>R"
      0028AA 28 95                    1         .word LINK 
                           0028AC     2         LINK=.
      0028AC 03                       3         .byte 3  
      0028AD 32 3E 52                 4         .ascii "2>R"
      0028B0                          5         DTOR:
      0028B0 90 85            [ 2]  659     POPW Y 
      0028B2 90 BF 26         [ 2]  660     LDW YTEMP,Y 
      0028B5 90 93            [ 1]  661     LDW Y,X 
      0028B7 90 EE 02         [ 2]  662     LDW Y,(2,Y)
      0028BA 90 89            [ 2]  663     PUSHW Y   ; d low 
      0028BC 90 93            [ 1]  664     LDW Y,X 
      0028BE 90 FE            [ 2]  665     LDW Y,(Y)
      0028C0 90 89            [ 2]  666     PUSHW Y   ; d hi 
      0028C2                        667     _DDROP  
      0028C2 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 148.
Hexadecimal [24-Bits]



      0028C5 92 CC 26         [ 5]  668     JP [YTEMP]
                                    669 
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    671 ;  2R> ( -- d ) R: d --      
                                    672 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028C8                        673     _HEADER DRFROM,3,"2R>"
      0028C8 28 AC                    1         .word LINK 
                           0028CA     2         LINK=.
      0028CA 03                       3         .byte 3  
      0028CB 32 52 3E                 4         .ascii "2R>"
      0028CE                          5         DRFROM:
      0028CE 90 85            [ 2]  674     POPW Y      ; d hi 
      0028D0 90 BF 26         [ 2]  675     LDW YTEMP,Y 
      0028D3 1D 00 04         [ 2]  676     SUBW X,#DBL_SIZE
      0028D6 90 85            [ 2]  677     POPW Y       ; d hi 
      0028D8 FF               [ 2]  678     LDW (X),Y 
      0028D9 90 85            [ 2]  679     POPW Y       ; d low  
      0028DB EF 02            [ 2]  680     LDW (2,X),Y 
      0028DD 92 CC 26         [ 5]  681     JP [YTEMP]
                                    682     
                                    683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    684 ;   2R@ ( -- d )
                                    685 ;   fecth a double from RSTACK
                                    686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028E0                        687     _HEADER DRAT,3,"2R@"
      0028E0 28 CA                    1         .word LINK 
                           0028E2     2         LINK=.
      0028E2 03                       3         .byte 3  
      0028E3 32 52 40                 4         .ascii "2R@"
      0028E6                          5         DRAT:
      0028E6 90 85            [ 2]  688     POPW Y 
      0028E8 90 BF 26         [ 2]  689     LDW YTEMP,Y 
      0028EB 1D 00 04         [ 2]  690     SUBW X,#DBL_SIZE  
      0028EE 16 01            [ 2]  691     LDW Y,(1,SP)
      0028F0 FF               [ 2]  692     LDW (X),Y 
      0028F1 16 03            [ 2]  693     LDW Y,(3,SP)
      0028F3 EF 02            [ 2]  694     LDW (2,X),Y 
      0028F5 92 CC 26         [ 5]  695     JP [YTEMP]
                                    696 
                                    697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    698 ;  2VARIABLE <name> 
                                    699 ;  create a double variable 
                                    700 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0028F8                        701     _HEADER DVARIA,9,"2VARIABLE"
      0028F8 28 E2                    1         .word LINK 
                           0028FA     2         LINK=.
      0028FA 09                       3         .byte 9  
      0028FB 32 56 41 52 49 41 42     4         .ascii "2VARIABLE"
             4C 45
      002904                          5         DVARIA:
      002904 CD 0D 2D         [ 4]  702         CALL HERE
      002907 CD 06 5D         [ 4]  703         CALL DUPP
      00290A                        704         _DOLIT 4  
      00290A CD 04 B3         [ 4]    1     CALL DOLIT 
      00290D 00 04                    2     .word 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 149.
Hexadecimal [24-Bits]



      00290F CD 08 80         [ 4]  705         CALL PLUS 
      002912 CD 07 B4         [ 4]  706         CALL VPP 
      002915 CD 05 15         [ 4]  707         CALL STORE
      002918 CD 19 C8         [ 4]  708         CALL CREAT
      00291B CD 06 5D         [ 4]  709         CALL DUPP
      00291E CD 15 CC         [ 4]  710         CALL COMMA
      002921 CD 0C 53         [ 4]  711         CALL ZERO
      002924 CD 06 85         [ 4]  712         CALL OVER 
      002927 CD 05 15         [ 4]  713         CALL STORE 
      00292A CD 0C 53         [ 4]  714         CALL ZERO 
      00292D CD 06 6D         [ 4]  715         CALL SWAPP 
      002930 CD 05 15         [ 4]  716         CALL STORE
      002933 CD 23 66         [ 4]  717         CALL FMOVE ; move definition to FLASH
      002936 CD 08 10         [ 4]  718         CALL QDUP 
      002939 CD 04 DC         [ 4]  719         CALL QBRAN 
      00293C 1A 15                  720         .word SET_RAMLAST   
      00293E CD 1E 0A         [ 4]  721         CALL UPDATVP  ; don't update if variable kept in RAM.
      002941 CC 23 FA         [ 2]  722         JP UPDATPTR
                                    723                 
                                    724 
                                    725 
                                    726 
                                    727 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    728 ;  2LITERAL ( d -- )
                                    729 ;  compile double literal 
                                    730 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002944                        731     _HEADER DLITER,COMPO+IMEDD+8,"2LITERAL"
      002944 28 FA                    1         .word LINK 
                           002946     2         LINK=.
      002946 C8                       3         .byte COMPO+IMEDD+8  
      002947 32 4C 49 54 45 52 41     4         .ascii "2LITERAL"
             4C
      00294F                          5         DLITER:
      00294F CD 16 11         [ 4]  732     CALL COMPI 
      002952 29 5A                  733     .word do2lit 
      002954 CD 15 CC         [ 4]  734     CALL COMMA 
      002957 CC 15 CC         [ 2]  735     JP   COMMA 
                                    736 
                                    737 
                                    738 ; runtime for 2LITERAL 
      00295A                        739 do2lit:
      00295A 1D 00 04         [ 2]  740     SUBW X,#DBL_SIZE  
      00295D 16 01            [ 2]  741     LDW Y,(1,SP)
      00295F 90 FE            [ 2]  742     LDW Y,(Y)
      002961 FF               [ 2]  743     LDW (X),Y 
      002962 16 01            [ 2]  744     LDW Y,(1,SP)
      002964 90 EE 02         [ 2]  745     LDW Y,(2,Y)
      002967 EF 02            [ 2]  746     LDW (2,X),Y 
      002969 90 85            [ 2]  747     POPW Y 
      00296B 90 EC 04         [ 2]  748     JP (DBL_SIZE,Y)
                                    749 
                                    750 
                                    751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    752 ;   2OVER ( d1 d2 -- d1 d2 d1 )
                                    753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 150.
Hexadecimal [24-Bits]



      00296E                        754     _HEADER DOVER,5,"2OVER"
      00296E 29 46                    1         .word LINK 
                           002970     2         LINK=.
      002970 05                       3         .byte 5  
      002971 32 4F 56 45 52           4         .ascii "2OVER"
      002976                          5         DOVER:
      002976 90 93            [ 1]  755     LDW Y,X 
      002978 1D 00 04         [ 2]  756     SUBW X,#DBL_SIZE 
      00297B 90 89            [ 2]  757     PUSHW Y 
      00297D 90 EE 04         [ 2]  758     LDW Y,(4,Y)  ; d1 hi 
      002980 FF               [ 2]  759     LDW (X),Y 
      002981 90 85            [ 2]  760     POPW Y 
      002983 90 EE 06         [ 2]  761     LDW Y,(6,Y)  ;d1 lo 
      002986 EF 02            [ 2]  762     LDW (2,X),Y 
      002988 81               [ 4]  763     RET 
                                    764 
                                    765 
                                    766 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    767 ;   D2/ ( d -- d/2 )
                                    768 ;   divide double by 2 
                                    769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002989                        770     _HEADER D2SLASH,3,"D2/"
      002989 29 70                    1         .word LINK 
                           00298B     2         LINK=.
      00298B 03                       3         .byte 3  
      00298C 44 32 2F                 4         .ascii "D2/"
      00298F                          5         D2SLASH:
      00298F 90 93            [ 1]  771     LDW Y,X 
      002991 90 FE            [ 2]  772     LDW Y,(Y)
      002993 90 57            [ 2]  773     SRAW Y 
      002995 FF               [ 2]  774     LDW (X),Y 
      002996 90 93            [ 1]  775     LDW Y,X 
      002998 90 EE 02         [ 2]  776     LDW Y,(2,Y)
      00299B 90 56            [ 2]  777     RRCW Y 
      00299D EF 02            [ 2]  778     LDW (2,X),Y 
      00299F 81               [ 4]  779     RET
                                    780 
                                    781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    782 ;  D2* ( d -- d*2 )
                                    783 ;  multiply double by 2 
                                    784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029A0                        785     _HEADER D2STAR,3,"D2*"
      0029A0 29 8B                    1         .word LINK 
                           0029A2     2         LINK=.
      0029A2 03                       3         .byte 3  
      0029A3 44 32 2A                 4         .ascii "D2*"
      0029A6                          5         D2STAR:
      0029A6 90 93            [ 1]  786     LDW Y,X 
      0029A8 90 EE 02         [ 2]  787     LDW Y,(2,Y)
      0029AB 98               [ 1]  788     RCF 
      0029AC 90 59            [ 2]  789     RLCW Y 
      0029AE EF 02            [ 2]  790     LDW (2,X),Y 
      0029B0 90 93            [ 1]  791     LDW Y,X 
      0029B2 90 FE            [ 2]  792     LDW Y,(Y)
      0029B4 90 59            [ 2]  793     RLCW Y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 151.
Hexadecimal [24-Bits]



      0029B6 FF               [ 2]  794     LDW (X),Y 
      0029B7 81               [ 4]  795     RET 
                                    796 
                                    797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    798 ;   DLSHIFT ( d n -- d )
                                    799 ;   left shift double 
                                    800 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029B8                        801     _HEADER DLSHIFT,7,"DLSHIFT"
      0029B8 29 A2                    1         .word LINK 
                           0029BA     2         LINK=.
      0029BA 07                       3         .byte 7  
      0029BB 44 4C 53 48 49 46 54     4         .ascii "DLSHIFT"
      0029C2                          5         DLSHIFT:
      0029C2 E6 01            [ 1]  802     LD A,(1,X) ; shift count 
      0029C4 A4 1F            [ 1]  803     AND A,#31
      0029C6 1C 00 02         [ 2]  804     ADDW X,#CELLL 
      0029C9 90 93            [ 1]  805     LDW Y,X 
      0029CB 90 FE            [ 2]  806     LDW Y,(Y)
      0029CD 90 BF 26         [ 2]  807     LDW YTEMP,Y  ; d hi 
      0029D0 90 93            [ 1]  808     LDW Y,X 
      0029D2 90 EE 02         [ 2]  809     LDW Y,(2,Y)  ; d low 
      0029D5                        810 DLSHIFT1:
      0029D5 4D               [ 1]  811     TNZ A 
      0029D6 27 12            [ 1]  812     JREQ DLSHIFT2 
      0029D8 98               [ 1]  813     RCF 
      0029D9 90 59            [ 2]  814     RLCW Y 
      0029DB 90 89            [ 2]  815     PUSHW Y 
      0029DD 90 BE 26         [ 2]  816     LDW Y,YTEMP 
      0029E0 90 59            [ 2]  817     RLCW Y 
      0029E2 90 BF 26         [ 2]  818     LDW YTEMP,Y 
      0029E5 90 85            [ 2]  819     POPW Y 
      0029E7 4A               [ 1]  820     DEC A 
      0029E8 20 EB            [ 2]  821     JRA DLSHIFT1 
      0029EA                        822 DLSHIFT2:
      0029EA EF 02            [ 2]  823     LDW (2,X),Y 
      0029EC 90 BE 26         [ 2]  824     LDW Y,YTEMP 
      0029EF FF               [ 2]  825     LDW (X),Y 
      0029F0 81               [ 4]  826     RET 
                                    827 
                                    828 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    829 ;  DRSHIFT ( d n -- d )
                                    830 ;  shift right n bits 
                                    831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0029F1                        832     _HEADER DRSHIFT,7,"DRSHIFT"
      0029F1 29 BA                    1         .word LINK 
                           0029F3     2         LINK=.
      0029F3 07                       3         .byte 7  
      0029F4 44 52 53 48 49 46 54     4         .ascii "DRSHIFT"
      0029FB                          5         DRSHIFT:
      0029FB E6 01            [ 1]  833     LD A,(1,X)
      0029FD A4 1F            [ 1]  834     AND A,#31
      0029FF 1C 00 02         [ 2]  835     ADDW X,#2 
      002A02                        836 DRSHIFT1:
      002A02 4D               [ 1]  837     TNZ A 
      002A03 27 13            [ 1]  838     JREQ DRSHIFT2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 152.
Hexadecimal [24-Bits]



      002A05 90 93            [ 1]  839     LDW Y,X 
      002A07 90 FE            [ 2]  840     LDW Y,(Y)
      002A09 90 54            [ 2]  841     SRLW Y 
      002A0B FF               [ 2]  842     LDW (X),Y 
      002A0C 90 93            [ 1]  843     LDW Y,X 
      002A0E 90 EE 02         [ 2]  844     LDW Y,(2,Y)
      002A11 90 56            [ 2]  845     RRCW Y 
      002A13 EF 02            [ 2]  846     LDW (2,X),Y 
      002A15 4A               [ 1]  847     DEC A
      002A16 20 EA            [ 2]  848     JRA DRSHIFT1  
      002A18                        849 DRSHIFT2:
      002A18 81               [ 4]  850     RET 
                                    851 
                                    852 
                                    853 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    854 ;   D* ( d1 d2 -- d3 )
                                    855 ;   double product 
                                    856 ;   d3 = d1 * d2
                                    857 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A19                        858     _HEADER DSTAR,2,"D*"
      002A19 29 F3                    1         .word LINK 
                           002A1B     2         LINK=.
      002A1B 02                       3         .byte 2  
      002A1C 44 2A                    4         .ascii "D*"
      002A1E                          5         DSTAR:
      002A1E 90 5F            [ 1]  859     CLRW Y 
      002A20 F6               [ 1]  860     LD A,(X)   ; d2 sign 
      002A21 E8 04            [ 1]  861     XOR A,(4,X) ; d1 sign 
      002A23 2A 02            [ 1]  862     JRPL 1$
      002A25 90 53            [ 2]  863     CPLW Y  
      002A27 52 02            [ 2]  864 1$: SUB SP,#2 
      002A29 17 01            [ 2]  865     LDW (1,SP),Y ; R: prod_sign 
      002A2B CD 26 43         [ 4]  866     CALL DABS   
      002A2E CD 28 B0         [ 4]  867     CALL DTOR 
      002A31 CD 26 43         [ 4]  868     CALL DABS
      002A34 CD 08 6B         [ 4]  869     CALL DDUP   ; ud1 ud1  
      002A37 CD 05 78         [ 4]  870     CALL RFROM  ; ud1 ud1 ud2hi 
      002A3A CD 27 3B         [ 4]  871     CALL DSSTAR ; ud1 drop udhi 
                                    872 ; shift partial product 16 bits left 
      002A3D                        873     _DROP   ; drop overflow 
      002A3D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002A40 CD 0C 53         [ 4]  874     CALL ZERO   ; ud1 prodhi 
      002A43 CD 06 6D         [ 4]  875     CALL SWAPP  
      002A46 CD 27 61         [ 4]  876     CALL DSWAP  ; dprodhi ud1 
      002A49 CD 05 78         [ 4]  877     CALL RFROM  ; dprodhi ud1 ud2lo
      002A4C CD 27 3B         [ 4]  878     CALL DSSTAR ; dprodhi dprodlo 
      002A4F CD 2B 56         [ 4]  879     CALL DPLUS    
      002A52 CD 05 78         [ 4]  880     CALL RFROM    ; dprod ps 
      002A55                        881     _QBRAN DDSTAR3 
      002A55 CD 04 DC         [ 4]    1     CALL QBRAN
      002A58 2A 5D                    2     .word DDSTAR3
      002A5A CC 08 DC         [ 2]  882     JP DNEGA 
      002A5D                        883 DDSTAR3:  
      002A5D 81               [ 4]  884     RET 
                                    885 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 153.
Hexadecimal [24-Bits]



                                    886 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    887 ;  UD/MOD ( ud1 ud2 -- udr udq )
                                    888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002A5E                        889     _HEADER UDSLMOD,6,"UD/MOD"
      002A5E 2A 1B                    1         .word LINK 
                           002A60     2         LINK=.
      002A60 06                       3         .byte 6  
      002A61 55 44 2F 4D 4F 44        4         .ascii "UD/MOD"
      002A67                          5         UDSLMOD:
                                    890 ;;;;;;;;;;;LOCAL VARIABLES ;;;;;;;;;;;;;;;;
                           000009   891     QLO = 9   ;   int16 
                           000007   892     QHI = 7   ;   int16 
                           000006   893     CNT1 = 6  ;   byte 
                           000005   894     CNT2 = 5  ;   byte 
                           000001   895     DIVISOR=1 ;   double 
                           00000A   896     VARS_SIZE=10   
                                    897 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    898 ; unsigned double division 
      002A67                        899     _VARS VARS_SIZE  ; space for local variables 
      002A67 52 0A            [ 2]    1     sub sp,#VARS_SIZE 
      002A69 90 5F            [ 1]  900     CLRW Y 
      002A6B 17 09            [ 2]  901     LDW (QLO,SP),Y 
      002A6D 17 07            [ 2]  902     LDW (QHI,SP),Y ; quotient=0  
      002A6F 90 93            [ 1]  903     LDW Y,X 
      002A71 90 FE            [ 2]  904     LDW Y,(Y)
      002A73 90 89            [ 2]  905     PUSHW Y 
      002A75 90 93            [ 1]  906     LDW Y,X 
      002A77 90 EE 02         [ 2]  907     LDW Y,(CELLL,Y)
      002A7A 72 F2 01         [ 2]  908     SUBW Y,(1,SP)
      002A7D                        909     _RDROP 
      002A7D 5B 02            [ 2]    1    ADDW SP,#CELLL
      002A7F 27 2E            [ 1]  910     JREQ UDSLA1 
      002A81 CD 29 76         [ 4]  911     CALL DOVER 
      002A84 CD 27 8F         [ 4]  912     CALL DCLZ ; n2, dividend leading zeros  
      002A87 CD 06 26         [ 4]  913     CALL TOR 
      002A8A CD 08 6B         [ 4]  914     CALL DDUP    
      002A8D CD 27 8F         [ 4]  915     CALL DCLZ  ; n1, divisor leading zeros
      002A90 CD 05 78         [ 4]  916     CALL RFROM ; n1 n2 
      002A93 CD 09 16         [ 4]  917     CALL SUBB  ; loop count 
      002A96 90 93            [ 1]  918     LDW Y,X 
      002A98 90 FE            [ 2]  919     LDW Y,(Y)
      002A9A 90 9F            [ 1]  920     LD A,YL 
      002A9C 6B 06            [ 1]  921     LD (CNT1,SP),A
      002A9E 6B 05            [ 1]  922     LD (CNT2,SP),A 
      002AA0 90 5D            [ 2]  923     TNZW Y 
      002AA2 2A 19            [ 1]  924     JRPL UDSLA2
                                    925 ; quotient is null
                                    926 ; replace divisor by 0 
                                    927 ; and exit  
      002AA4                        928     _DROP ; shift count 
      002AA4 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002AA7 90 5F            [ 1]  929     CLRW Y 
      002AA9 FF               [ 2]  930     LDW (X),Y 
      002AAA EF 02            [ 2]  931     LDW (CELLL,X),Y 
      002AAC                        932     _DROP_VARS VARS_SIZE  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 154.
Hexadecimal [24-Bits]



      002AAC 5B 0A            [ 2]    1     addw sp,#VARS_SIZE
      002AAE 81               [ 4]  933     RET 
      002AAF                        934 UDSLA1: ; divisor=0
                                    935 ; return r=q=$8000.0000
      002AAF 90 AE 80 00      [ 2]  936     LDW Y,#0X8000 
      002AB3 FF               [ 2]  937     LDW (X),Y 
      002AB4 EF 04            [ 2]  938     LDW (DBL_SIZE,X),Y 
      002AB6 90 5F            [ 1]  939     CLRW Y 
      002AB8 EF 06            [ 2]  940     LDW (DBL_SIZE+CELLL,X),Y 
      002ABA                        941     _DROP_VARS VARS_SIZE 
      002ABA 5B 0A            [ 2]    1     addw sp,#VARS_SIZE
      002ABC 81               [ 4]  942     RET 
      002ABD                        943 UDSLA2:
      002ABD CD 29 C2         [ 4]  944     CALL DLSHIFT ; align divisor with dividend
      002AC0                        945     _DRDROP  
      002AC0 5B 04            [ 2]    1    ADDW SP,#2*CELLL 
      002AC2 CD 28 B0         [ 4]  946     CALL DTOR ; R: divisor   
      002AC5                        947 UDSLA3: ; division loop -- dividend divisor  
      002AC5 CD 08 6B         [ 4]  948     CALL DDUP
      002AC8 CD 28 E6         [ 4]  949     CALL DRAT   ; dividend dividend divisor 
      002ACB CD 2B 84         [ 4]  950     CALL DSUB   ; dividend diff 
      002ACE F6               [ 1]  951     LD A,(X)
      002ACF 2B 03            [ 1]  952     JRMI UDSLA4 ; dividend diff  
      002AD1 CD 27 61         [ 4]  953     CALL DSWAP ; diff dividend  
      002AD4                        954 UDSLA4: ; shift quotient and add qlbit 
      002AD4                        955     _DDROP 
      002AD4 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002AD7 16 09            [ 2]  956     LDW Y,(QLO,SP) ; quotient low 
      002AD9 48               [ 1]  957     SLL A
      002ADA 8C               [ 1]  958     CCF   
      002ADB 90 59            [ 2]  959     RLCW Y
      002ADD 17 09            [ 2]  960     LDW (QLO,SP),Y 
      002ADF 16 07            [ 2]  961     LDW Y,(QHI,SP) ; quotient hi 
      002AE1 90 59            [ 2]  962     RLCW Y 
      002AE3 17 07            [ 2]  963     LDW (QHI,SP),Y 
      002AE5 7B 05            [ 1]  964     LD A,(CNT2,SP)
      002AE7 27 15            [ 1]  965     JREQ UDSLA8 
      002AE9 0A 05            [ 1]  966     DEC (CNT2,SP) ; loop counter  
                                    967 ; shift dividend left 1 bit   DIVIDEND:A LSHIFT 1    
      002AEB 90 93            [ 1]  968     LDW Y,X 
      002AED 90 EE 02         [ 2]  969     LDW Y,(CELLL,Y)
      002AF0 98               [ 1]  970     RCF 
      002AF1 90 59            [ 2]  971     RLCW Y 
      002AF3 EF 02            [ 2]  972     LDW (CELLL,X),Y 
      002AF5 90 93            [ 1]  973     LDW Y,X 
      002AF7 90 FE            [ 2]  974     LDW Y,(Y)
      002AF9 90 59            [ 2]  975     RLCW Y 
      002AFB FF               [ 2]  976     LDW (X),Y 
      002AFC 20 C7            [ 2]  977     JRA UDSLA3 
      002AFE                        978 UDSLA8:
      002AFE 5B 05            [ 2]  979     ADDW SP,#DBL_SIZE+1  ; drop divisor and cnt2 
      002B00 84               [ 1]  980     POP A 
      002B01 90 5F            [ 1]  981     CLRW Y 
      002B03 90 97            [ 1]  982     LD YL,A 
      002B05 1D 00 02         [ 2]  983     SUBW X,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 155.
Hexadecimal [24-Bits]



      002B08 FF               [ 2]  984     LDW (X),Y  
      002B09 CD 29 FB         [ 4]  985     CALL DRSHIFT 
                                    986     ; quotient replace dividend 
      002B0C CD 28 CE         [ 4]  987     CALL DRFROM  ; quotient 
      002B0F 81               [ 4]  988     RET 
                                    989 
                                    990 
                                    991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    992 ;   D/MOD  ( d1 d2 -- dr dq )
                                    993 ;   double division dq=d1/d2
                                    994 ;   dr remainder double 
                                    995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B10                        996     _HEADER DDSLMOD,5,"D/MOD"  
      002B10 2A 60                    1         .word LINK 
                           002B12     2         LINK=.
      002B12 05                       3         .byte 5  
      002B13 44 2F 4D 4F 44           4         .ascii "D/MOD"
      002B18                          5         DDSLMOD:
      002B18 E6 04            [ 1]  997     LD A,(DBL_SIZE,X) ; dividend sign 
      002B1A 88               [ 1]  998     PUSH A 
      002B1B F6               [ 1]  999     LD A,(X) 
      002B1C 88               [ 1] 1000     PUSH A ; divisor sign 
      002B1D CD 26 43         [ 4] 1001     CALL DABS 
      002B20 CD 28 B0         [ 4] 1002     CALL DTOR ; R: sign abs(divisor)
      002B23 CD 26 43         [ 4] 1003     CALL DABS  ; ud1  
      002B26 CD 28 CE         [ 4] 1004     CALL DRFROM  ; ud1 ud2 R: sign 
      002B29 CD 2A 67         [ 4] 1005     CALL UDSLMOD ; ud1/ud2 -- udr udq  
      002B2C 84               [ 1] 1006     POP  A ; divisor sign  
      002B2D 18 01            [ 1] 1007     XOR A,(1,SP)
      002B2F 27 03            [ 1] 1008     JREQ 1$ 
      002B31 CD 08 DC         [ 4] 1009     CALL DNEGA
      002B34 84               [ 1] 1010 1$: POP A  
      002B35 4D               [ 1] 1011     TNZ A 
      002B36 27 09            [ 1] 1012     JREQ 2$ 
      002B38 CD 28 B0         [ 4] 1013     CALL DTOR 
      002B3B CD 08 DC         [ 4] 1014     CALL DNEGA 
      002B3E CD 28 CE         [ 4] 1015     CALL DRFROM
      002B41                       1016 2$:        
      002B41 81               [ 4] 1017     RET 
                                   1018 
                                   1019 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1020 ;   D/  ( d1 d2 -- dq )
                                   1021 ;   division double by double 
                                   1022 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002B42                       1023     _HEADER DSLASH,2,"D/"
      002B42 2B 12                    1         .word LINK 
                           002B44     2         LINK=.
      002B44 02                       3         .byte 2  
      002B45 44 2F                    4         .ascii "D/"
      002B47                          5         DSLASH:
      002B47 CD 2B 18         [ 4] 1024     CALL DDSLMOD
      002B4A CD 27 61         [ 4] 1025     CALL DSWAP
      002B4D                       1026     _DDROP 
      002B4D 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002B50 81               [ 4] 1027     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 156.
Hexadecimal [24-Bits]



                                   1028 
                                   1029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1030 ;   D+ ( d1 d2 -- d3 )
                                   1031 ;   add 2 doubles 
                                   1032 ;   d3=d1+d2 
                                   1033 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000003  1034     D2LO=3 
                           000001  1035     D2HI=1 
      002B51                       1036     _HEADER DPLUS,2,"D+"
      002B51 2B 44                    1         .word LINK 
                           002B53     2         LINK=.
      002B53 02                       3         .byte 2  
      002B54 44 2B                    4         .ascii "D+"
      002B56                          5         DPLUS:
                                   1037 ; 2>R 
      002B56 90 93            [ 1] 1038     LDW Y,X 
      002B58 90 EE 02         [ 2] 1039     LDW Y,(CELLL,Y)
      002B5B 90 89            [ 2] 1040     PUSHW Y   ; d2 lo  
      002B5D 90 93            [ 1] 1041     LDW Y,X 
      002B5F 90 FE            [ 2] 1042     LDW Y,(Y) 
      002B61 90 89            [ 2] 1043     PUSHW Y ; d2 hi 
      002B63                       1044     _DROPN 2 ; d2 
      002B63 1C 00 04         [ 2]    1     ADDW X,#2*CELLL 
      002B66 90 93            [ 1] 1045     LDW Y,X 
      002B68 90 EE 02         [ 2] 1046     LDW Y,(CELLL,Y) ; d1lo 
      002B6B 72 F9 03         [ 2] 1047     ADDW Y,(D2LO,SP)
      002B6E EF 02            [ 2] 1048     LDW (CELLL,X),Y 
      002B70 90 93            [ 1] 1049     LDW Y,X 
      002B72 90 FE            [ 2] 1050     LDW Y,(Y)
      002B74 24 02            [ 1] 1051     JRNC 1$
      002B76 90 5C            [ 1] 1052     INCW Y 
      002B78                       1053 1$:
      002B78 72 F9 01         [ 2] 1054     ADDW Y,(D2HI,SP)
      002B7B FF               [ 2] 1055     LDW (X),Y 
      002B7C 5B 04            [ 2] 1056     ADDW SP,#DBL_SIZE ; drop d2 from r: 
      002B7E 81               [ 4] 1057     RET 
                                   1058 
                                   1059 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1060 ;   D- ( d1 d2 -- d3 )
                                   1061 ;   d3=d1-d2 
                                   1062 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000003  1063     D2LO=3 
                           000001  1064     D2HI=1 
      002B7F                       1065     _HEADER DSUB,2,"D-"
      002B7F 2B 53                    1         .word LINK 
                           002B81     2         LINK=.
      002B81 02                       3         .byte 2  
      002B82 44 2D                    4         .ascii "D-"
      002B84                          5         DSUB:
      002B84 90 93            [ 1] 1066     LDW Y,X 
      002B86 90 EE 02         [ 2] 1067     LDW Y,(CELLL,Y)
      002B89 90 89            [ 2] 1068     PUSHW Y ; d2 lo 
      002B8B 90 93            [ 1] 1069     LDW Y,X 
      002B8D 90 FE            [ 2] 1070     LDW Y,(Y)
      002B8F 90 89            [ 2] 1071     PUSHW Y ; d2 hi 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 157.
Hexadecimal [24-Bits]



      002B91                       1072     _DROPN 2 ; d2 
      002B91 1C 00 04         [ 2]    1     ADDW X,#2*CELLL 
      002B94 90 93            [ 1] 1073     LDW Y,X 
      002B96 90 EE 02         [ 2] 1074     LDW Y,(CELLL,Y)
      002B99 72 F2 03         [ 2] 1075     SUBW Y,(D2LO,SP)
      002B9C EF 02            [ 2] 1076     LDW (CELLL,X),Y 
      002B9E 90 93            [ 1] 1077     LDW Y,X 
      002BA0 90 FE            [ 2] 1078     LDW Y,(Y)
      002BA2 24 02            [ 1] 1079     JRNC 1$
      002BA4 90 5A            [ 2] 1080     DECW Y 
      002BA6                       1081 1$: 
      002BA6 72 F2 01         [ 2] 1082     SUBW Y,(D2HI,SP)
      002BA9 FF               [ 2] 1083     LDW (X),Y 
      002BAA 5B 04            [ 2] 1084     ADDW SP,#DBL_SIZE ; drop d2 from r: 
      002BAC 81               [ 4] 1085     RET 
                                   1086 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 158.
Hexadecimal [24-Bits]



                                   4806 .endif 
                           000001  4807 .if WANT_FLOAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 159.
Hexadecimal [24-Bits]



                                   4808         .include "float.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;*********************************
                                     21 ;    floating point library
                                     22 ;    adapted from 
                                     23 ;    Forth dimensions Vol. IV #1 
                                     24 ;    published in  may/june 1982
                                     25 ;
                                     26 ; Creation date: 2021-06-15 
                                     27 ;
                                     28 ;  This file is part of stm8_eforth 
                                     29 ;  project and same licence apply.
                                     30 ;************************************
                                     31 
                                     32 ;*************************************************
                                     33 ;  FLOAT format double for storage 
                                     34 ;  bits 23:0  signed mantissa
                                     35 ;  bits  31:24  signed exponent log10 
                                     36 ; 
                                     37 ;  input float format:
                                     38 ;      float32::= ['-'|'+']digits+['.']'e'|'E'['-'|'+'][digits]*
                                     39 ;      the presence of 'e'|'E' character is mandatory 
                                     40 ;      to differentiate float32 from double.
                                     41 ;    example:
                                     42 ;         3.141593  is double 3141593
                                     43 ;         3.141593e is float32  PI 
                                     44 ;         0e   is valid null float. 
                                     45 ;         0.  is valid null double
                                     46 ;***********************************************  
                                     47 
                                     48     .module FLOAT 
                                     49 
                           000001    50 .if WANT_DOUBLE 
                                     51 ; already included 
                           000000    52 .else
                                     53 ;  must be included  
                                     54     .include "double.asm"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 160.
Hexadecimal [24-Bits]



                                     55 .endif  
                                     56 
                           7FFFFF    57     MAX_MANTISSA = 0x7FFFFF 
                                     58 
                           000001    59     F32_MAJOR=1 
                           000001    60     F32_MINOR=1 
                                     61 
                           000004    62     FLOAT_SIZE=2*CELLL 
                                     63 
                                     64 ; floating point state bits in FPSW 
                           000001    65     ZBIT=1 ; zero bit flag
                           000002    66     NBIT=2 ; negative flag 
                           000004    67     OVBIT=4 ; overflow flag 
                                     68 
                                     69 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     70 ;   FLOAT-VER ( -- )
                                     71 ;   print library version 
                                     72 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BAD                         73     _HEADER FVER,9,"FLOAT-VER"
      002BAD 2B 81                    1         .word LINK 
                           002BAF     2         LINK=.
      002BAF 09                       3         .byte 9  
      002BB0 46 4C 4F 41 54 2D 56     4         .ascii "FLOAT-VER"
             45 52
      002BB9                          5         FVER:
      002BB9 CD 10 65         [ 4]   74     CALL DOTQP 
      002BBC 12                      75     .byte  18 
      002BBD 0A 66 6C 6F 61 74 33    76     .ascii "\nfloat32 library, "
             32 20 6C 69 62 72 61
             72 79 2C 20
      002BCF                         77     _DOLIT F32_MAJOR     
      002BCF CD 04 B3         [ 4]    1     CALL DOLIT 
      002BD2 00 01                    2     .word F32_MAJOR 
      002BD4                         78     _DOLIT F32_MINOR 
      002BD4 CD 04 B3         [ 4]    1     CALL DOLIT 
      002BD7 00 01                    2     .word F32_MINOR 
      002BD9 CC 1C 2F         [ 2]   79     JP PRINT_VERSION 
                                     80     
                                     81 
                                     82 ;-------------------------
                                     83 ;    FPSW ( -- a )
                                     84 ;    floating state variable
                                     85 ;    bit 0 zero flag 
                                     86 ;    bit 1 negative flag 
                                     87 ;    bit 2 overflow/error flag 
                                     88 ;---------------------------
                                     89 ;    _HEADER FPSW,4,"FPSW"
      002BDC                         90 FPSW:
      002BDC 90 AE 00 08      [ 2]   91 	LDW Y,#UFPSW  
      002BE0 1D 00 02         [ 2]   92 	SUBW X,#2
      002BE3 FF               [ 2]   93     LDW (X),Y
      002BE4 81               [ 4]   94     RET
                                     95 
                                     96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     97 ;   FINIT ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 161.
Hexadecimal [24-Bits]



                                     98 ;   initialize floating point 
                                     99 ;   library 
                                    100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    101 ;    _HEADER FINIT,5,"FINIT"
      002BE5                        102 FINIT:
      002BE5 3F 09            [ 1]  103     CLR UFPSW+1 ; reset state bits 
      002BE7 81               [ 4]  104     RET 
                                    105 
                                    106 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    107 ;    FER ( -- u )
                                    108 ;    return FPSW value 
                                    109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    110 ;    _HEADER FER,3,"FER"
      002BE8                        111 FER:
      002BE8 CD 2B DC         [ 4]  112     CALL FPSW 
      002BEB CD 05 27         [ 4]  113     CALL AT 
      002BEE 81               [ 4]  114     RET 
                                    115 
                                    116 
                                    117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    118 ;    FZE  ( -- 0|-1 )
                                    119 ;    return FPSW zero flag 
                                    120 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002BEF                        121     _HEADER FZE,3,"FZE"
      002BEF 2B AF                    1         .word LINK 
                           002BF1     2         LINK=.
      002BF1 03                       3         .byte 3  
      002BF2 46 5A 45                 4         .ascii "FZE"
      002BF5                          5         FZE:
      002BF5 CD 2B DC         [ 4]  122     CALL FPSW
      002BF8 CD 05 27         [ 4]  123     CALL AT  
      002BFB CD 0C 5E         [ 4]  124     CALL ONE 
      002BFE CD 06 BA         [ 4]  125     CALL ANDD
      002C01 CD 08 CA         [ 4]  126     CALL NEGAT  
      002C04 81               [ 4]  127     RET 
                                    128 
                                    129 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    130 ;    FNE ( -- 0|-1 )
                                    131 ;    return FPSW negative flag 
                                    132 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C05                        133     _HEADER FNE,3,"FNE"
      002C05 2B F1                    1         .word LINK 
                           002C07     2         LINK=.
      002C07 03                       3         .byte 3  
      002C08 46 4E 45                 4         .ascii "FNE"
      002C0B                          5         FNE:
      002C0B CD 2B DC         [ 4]  134     CALL FPSW 
      002C0E CD 05 27         [ 4]  135     CALL AT 
      002C11                        136     _DOLIT 2 
      002C11 CD 04 B3         [ 4]    1     CALL DOLIT 
      002C14 00 02                    2     .word 2 
      002C16 CD 06 BA         [ 4]  137     CALL ANDD
      002C19 CD 0C 39         [ 4]  138     CALL TWOSL
      002C1C CD 08 CA         [ 4]  139     CALL NEGAT   
      002C1F 81               [ 4]  140     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 162.
Hexadecimal [24-Bits]



                                    141 
                                    142 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    143 ;   FOV (  -- 0|-1 )
                                    144 ;   return FPSW overflow flag 
                                    145 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002C20                        146     _HEADER FOV,3,"FOV"
      002C20 2C 07                    1         .word LINK 
                           002C22     2         LINK=.
      002C22 03                       3         .byte 3  
      002C23 46 4F 56                 4         .ascii "FOV"
      002C26                          5         FOV:
      002C26 CD 2B DC         [ 4]  147     CALL FPSW
      002C29 CD 05 27         [ 4]  148     CALL AT  
      002C2C                        149     _DOLIT 4 
      002C2C CD 04 B3         [ 4]    1     CALL DOLIT 
      002C2F 00 04                    2     .word 4 
      002C31 CD 06 BA         [ 4]  150     CALL ANDD
      002C34                        151     _DOLIT 2 
      002C34 CD 04 B3         [ 4]    1     CALL DOLIT 
      002C37 00 02                    2     .word 2 
      002C39 CD 0C 21         [ 4]  152     CALL RSHIFT 
      002C3C CD 08 CA         [ 4]  153     CALL NEGAT  
      002C3F 81               [ 4]  154     RET 
                                    155 
                                    156 
                                    157 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    158 ;    SFZ ( f# -- f# )
                                    159 ;    set FPSW zero flag 
                                    160 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    161 ;    _HEADER SFZ,3,"SFZ"
      002C40                        162 SFZ:
      002C40 CD 2B E8         [ 4]  163     CALL FER 
      002C43                        164     _DOLIT 0xfffe 
      002C43 CD 04 B3         [ 4]    1     CALL DOLIT 
      002C46 FF FE                    2     .word 0xfffe 
      002C48 CD 06 BA         [ 4]  165     CALL ANDD 
      002C4B CD 06 26         [ 4]  166     CALL TOR    
      002C4E CD 08 6B         [ 4]  167     CALL DDUP 
      002C51                        168     _DOLIT 0xFF  
      002C51 CD 04 B3         [ 4]    1     CALL DOLIT 
      002C54 00 FF                    2     .word 0xFF 
      002C56 CD 06 BA         [ 4]  169     CALL ANDD
      002C59 CD 28 36         [ 4]  170     CALL DZEQUAL 
      002C5C                        171     _DOLIT 1 
      002C5C CD 04 B3         [ 4]    1     CALL DOLIT 
      002C5F 00 01                    2     .word 1 
      002C61 CD 06 BA         [ 4]  172     CALL ANDD 
      002C64 CD 05 78         [ 4]  173     CALL RFROM 
      002C67 CD 06 CE         [ 4]  174     CALL ORR 
      002C6A CD 2B DC         [ 4]  175     CALL FPSW 
      002C6D CD 05 15         [ 4]  176     CALL STORE 
      002C70 81               [ 4]  177     RET 
                                    178 
                                    179 
                                    180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 163.
Hexadecimal [24-Bits]



                                    181 ;   SFN ( f# -- f# )
                                    182 ;   set FPSW negative flag 
                                    183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    184 ;    _HEADER SFN,3,"SFN"
      002C71                        185 SFN:
      002C71 CD 2B E8         [ 4]  186     CALL FER 
      002C74                        187     _DOLIT 0xFFFD 
      002C74 CD 04 B3         [ 4]    1     CALL DOLIT 
      002C77 FF FD                    2     .word 0xFFFD 
      002C79 CD 06 BA         [ 4]  188     CALL ANDD  
      002C7C CD 06 26         [ 4]  189     CALL TOR 
      002C7F CD 06 5D         [ 4]  190     CALL DUPP 
      002C82                        191     _DOLIT 0X80 
      002C82 CD 04 B3         [ 4]    1     CALL DOLIT 
      002C85 00 80                    2     .word 0X80 
      002C87 CD 06 BA         [ 4]  192     CALL ANDD 
      002C8A                        193     _DOLIT 6 
      002C8A CD 04 B3         [ 4]    1     CALL DOLIT 
      002C8D 00 06                    2     .word 6 
      002C8F CD 0C 21         [ 4]  194     CALL RSHIFT 
      002C92 CD 05 78         [ 4]  195     CALL RFROM 
      002C95 CD 06 CE         [ 4]  196     CALL ORR 
      002C98 CD 2B DC         [ 4]  197     CALL FPSW 
      002C9B CD 05 15         [ 4]  198     CALL STORE 
      002C9E 81               [ 4]  199     RET 
                                    200 
                                    201 
                                    202 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    203 ;   SFV ( e -- )
                                    204 ;   set overflow flag if e>127 
                                    205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    206 ;    _HEADER SFV,3,"SFV"
      002C9F                        207 SFV:
      002C9F                        208     _DOLIT 127 
      002C9F CD 04 B3         [ 4]    1     CALL DOLIT 
      002CA2 00 7F                    2     .word 127 
      002CA4 CD 09 97         [ 4]  209     CALL GREAT
      002CA7                        210     _QBRAN 1$
      002CA7 CD 04 DC         [ 4]    1     CALL QBRAN
      002CAA 2C BD                    2     .word 1$
      002CAC CD 2B E8         [ 4]  211     CALL FER 
      002CAF                        212     _DOLIT 4 
      002CAF CD 04 B3         [ 4]    1     CALL DOLIT 
      002CB2 00 04                    2     .word 4 
      002CB4 CD 06 CE         [ 4]  213     CALL ORR 
      002CB7 CD 2B DC         [ 4]  214     CALL FPSW 
      002CBA CD 05 15         [ 4]  215     CALL STORE 
      002CBD                        216 1$:
      002CBD 81               [ 4]  217     RET 
                                    218 
                                    219 
                                    220 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    221 ;  SET-FPSW ( f# -- f# )
                                    222 ;  set float status word 
                                    223 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 164.
Hexadecimal [24-Bits]



                                    224 ;    _HEADER SET_FPSW,8,"SET-FPSW"
      002CBE                        225 SET_FPSW:
      002CBE CD 2C 40         [ 4]  226     CALL SFZ 
      002CC1 CD 2C 71         [ 4]  227     CALL SFN 
      002CC4 81               [ 4]  228     RET 
                                    229 
                                    230 
                                    231 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    232 ;  FSPLIT( f# -- m e )
                                    233 ;  split float in mantissa/exponent/sign 
                                    234 ; input:
                                    235 ;   f#   float32 
                                    236 ; output: 
                                    237 ;  m mantissa as a signed double 
                                    238 ;  e exponent as a signed single
                                    239 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    240 ;    _HEADER FSPLIT,6,"FSPLIT"             
      002CC5                        241 FSPLIT:
                                    242 ;    CALL FINIT 
                                    243 ;    CALL SFN
                                    244 ;    CALL SFZ 
      002CC5 90 93            [ 1]  245     LDW Y,X 
      002CC7 90 FE            [ 2]  246     LDW Y,(Y)
      002CC9 90 89            [ 2]  247     PUSHW Y 
      002CCB 4F               [ 1]  248     CLR A  
      002CCC 90 5E            [ 1]  249     SWAPW Y 
      002CCE 2A 01            [ 1]  250     JRPL FSPLIT1 
      002CD0 43               [ 1]  251     CPL A 
      002CD1                        252 FSPLIT1: ; sign extend mantissa 
      002CD1 90 5E            [ 1]  253     SWAPW Y 
      002CD3 90 95            [ 1]  254     LD YH,A 
      002CD5 FF               [ 2]  255     LDW (X),Y 
      002CD6 1D 00 02         [ 2]  256     SUBW X,#CELLL 
      002CD9 90 85            [ 2]  257     POPW Y 
      002CDB 4F               [ 1]  258     CLR A 
      002CDC 90 5D            [ 2]  259     TNZW Y 
      002CDE 2A 01            [ 1]  260     JRPL FSPLIT2 
      002CE0 43               [ 1]  261     CPL A 
      002CE1                        262 FSPLIT2:
      002CE1 90 5E            [ 1]  263     SWAPW Y 
      002CE3 90 95            [ 1]  264     LD YH,A 
      002CE5 FF               [ 2]  265     LDW (X),Y 
      002CE6 81               [ 4]  266     RET 
                                    267 
                                    268 
                                    269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    270 ;    FMERGE ( m e -- f# )
                                    271 ;    built float from mantissa/exponent 
                                    272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    273 ;   _HEADER FMERGE,6,"FMERGE"
      002CE7                        274 FMERGE:
      002CE7 CD 06 5D         [ 4]  275     CALL DUPP 
      002CEA CD 09 30         [ 4]  276     CALL ABSS 
      002CED CD 2C 9F         [ 4]  277     CALL SFV
      002CF0                        278 STEXP1:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 165.
Hexadecimal [24-Bits]



      002CF0 90 93            [ 1]  279     LDW Y,X 
      002CF2 90 FE            [ 2]  280     LDW Y,(Y)
      002CF4 4F               [ 1]  281     CLR A 
      002CF5 90 95            [ 1]  282     LD YH,A
      002CF7 90 5E            [ 1]  283     SWAPW Y 
      002CF9 90 89            [ 2]  284     PUSHW Y  ; e >r 
      002CFB 1C 00 02         [ 2]  285     ADDW X,#CELLL 
      002CFE CD 08 6B         [ 4]  286     CALL DDUP 
      002D01 CD 26 43         [ 4]  287     CALL DABS
      002D04 CD 06 6D         [ 4]  288     CALL SWAPP 
      002D07                        289     _DROP  
      002D07 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002D0A CD 2C 9F         [ 4]  290     CALL SFV 
      002D0D                        291 STEXP2: 
      002D0D 4F               [ 1]  292     CLR A 
      002D0E F7               [ 1]  293     LD (X),A     
      002D0F CD 05 78         [ 4]  294     CALL RFROM 
      002D12 CD 06 CE         [ 4]  295     CALL ORR
      002D15 CD 2C 40         [ 4]  296     CALL SFZ 
      002D18 CD 2C 71         [ 4]  297     CALL SFN 
      002D1B 81               [ 4]  298     RET 
                                    299 
                                    300 
                                    301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    302 ;   E. ( f# -- )
                                    303 ;   print float in scientific 
                                    304 ;   format 
                                    305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002D1C                        306     _HEADER EDOT,2,"E."
      002D1C 2C 22                    1         .word LINK 
                           002D1E     2         LINK=.
      002D1E 02                       3         .byte 2  
      002D1F 45 2E                    4         .ascii "E."
      002D21                          5         EDOT:
      002D21 CD 07 23         [ 4]  307     CALL BASE 
      002D24 CD 05 27         [ 4]  308     CALL AT 
      002D27 CD 06 26         [ 4]  309     CALL TOR 
      002D2A                        310     _DOLIT 10 
      002D2A CD 04 B3         [ 4]    1     CALL DOLIT 
      002D2D 00 0A                    2     .word 10 
      002D2F CD 07 23         [ 4]  311     CALL BASE 
      002D32 CD 05 15         [ 4]  312     CALL STORE 
      002D35 CD 2C C5         [ 4]  313     CALL FSPLIT ; m e 
      002D38                        314 EDOT0:
      002D38 CD 06 26         [ 4]  315     CALL TOR   
      002D3B CD 26 43         [ 4]  316     CALL DABS 
      002D3E CD 0F F5         [ 4]  317     CALL SPACE 
      002D41 CD 0E 5B         [ 4]  318     CALL BDIGS     
      002D44                        319 EDOT2: 
      002D44 CD 26 AF         [ 4]  320     CALL DDIG
      002D47 CD 05 78         [ 4]  321     CALL RFROM 
      002D4A CD 0B E7         [ 4]  322     CALL ONEP 
      002D4D CD 06 26         [ 4]  323     CALL TOR 
      002D50 CD 06 5D         [ 4]  324     CALL DUPP
      002D53                        325     _QBRAN EDOT3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 166.
Hexadecimal [24-Bits]



      002D53 CD 04 DC         [ 4]    1     CALL QBRAN
      002D56 2D 5A                    2     .word EDOT3
      002D58 20 EA            [ 2]  326     JRA EDOT2  
      002D5A                        327 EDOT3:
      002D5A CD 06 85         [ 4]  328     CALL OVER 
      002D5D CD 07 23         [ 4]  329     CALL BASE 
      002D60 CD 05 27         [ 4]  330     CALL AT 
      002D63 CD 09 54         [ 4]  331     CALL ULESS 
      002D66                        332     _QBRAN EDOT2 
      002D66 CD 04 DC         [ 4]    1     CALL QBRAN
      002D69 2D 44                    2     .word EDOT2
      002D6B                        333     _DOLIT '.'
      002D6B CD 04 B3         [ 4]    1     CALL DOLIT 
      002D6E 00 2E                    2     .word '.' 
      002D70 CD 0E 6B         [ 4]  334     CALL HOLD  
      002D73 CD 26 AF         [ 4]  335     CALL DDIG
      002D76 CD 2C 0B         [ 4]  336     CALL FNE 
      002D79                        337     _QBRAN EDOT4 
      002D79 CD 04 DC         [ 4]    1     CALL QBRAN
      002D7C 2D 86                    2     .word EDOT4
      002D7E                        338     _DOLIT '-'
      002D7E CD 04 B3         [ 4]    1     CALL DOLIT 
      002D81 00 2D                    2     .word '-' 
      002D83 CD 0E 6B         [ 4]  339     CALL HOLD 
      002D86                        340 EDOT4:       
      002D86                        341     _DROP 
      002D86 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002D89 CD 0E C0         [ 4]  342     CALL EDIGS 
      002D8C CD 10 1F         [ 4]  343     CALL TYPES
      002D8F CD 05 78         [ 4]  344     CALL RFROM 
      002D92 CD 08 10         [ 4]  345     CALL QDUP 
      002D95                        346     _QBRAN EDOT5     
      002D95 CD 04 DC         [ 4]    1     CALL QBRAN
      002D98 2D AA                    2     .word EDOT5
      002D9A                        347     _DOLIT 'E'
      002D9A CD 04 B3         [ 4]    1     CALL DOLIT 
      002D9D 00 45                    2     .word 'E' 
      002D9F CD 04 7A         [ 4]  348     CALL EMIT
      002DA2                        349     _DOLIT 1 
      002DA2 CD 04 B3         [ 4]    1     CALL DOLIT 
      002DA5 00 01                    2     .word 1 
      002DA7 CD 10 73         [ 4]  350     CALL DOTR
      002DAA                        351 EDOT5: 
      002DAA CD 05 78         [ 4]  352     CALL RFROM 
      002DAD CD 07 23         [ 4]  353     CALL BASE 
      002DB0 CD 05 15         [ 4]  354     CALL STORE  
      002DB3 81               [ 4]  355     RET 
                                    356 
                                    357 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                    358 ;   F. (f# -- )
                                    359 ;   print float in fixed
                                    360 ;   point format. 
                                    361 ;;;;;;;;;;;;;;;;;;;;;;;;;
      002DB4                        362     _HEADER FDOT,2,"F."
      002DB4 2D 1E                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 167.
Hexadecimal [24-Bits]



                           002DB6     2         LINK=.
      002DB6 02                       3         .byte 2  
      002DB7 46 2E                    4         .ascii "F."
      002DB9                          5         FDOT:
      002DB9 CD 07 23         [ 4]  363     CALL BASE 
      002DBC CD 05 27         [ 4]  364     CALL AT 
      002DBF CD 06 26         [ 4]  365     CALL TOR 
      002DC2                        366     _DOLIT 10 
      002DC2 CD 04 B3         [ 4]    1     CALL DOLIT 
      002DC5 00 0A                    2     .word 10 
      002DC7 CD 07 23         [ 4]  367     CALL BASE 
      002DCA CD 05 15         [ 4]  368     CALL STORE 
      002DCD CD 2C C5         [ 4]  369     CALL    FSPLIT
      002DD0 CD 06 5D         [ 4]  370     CALL    DUPP  
      002DD3 CD 09 30         [ 4]  371     CALL    ABSS 
      002DD6                        372     _DOLIT  8
      002DD6 CD 04 B3         [ 4]    1     CALL DOLIT 
      002DD9 00 08                    2     .word 8 
      002DDB CD 09 97         [ 4]  373     CALL    GREAT 
      002DDE                        374     _QBRAN  FDOT1 
      002DDE CD 04 DC         [ 4]    1     CALL QBRAN
      002DE1 2D E6                    2     .word FDOT1
      002DE3 CC 2D 38         [ 2]  375     JP      EDOT0 
      002DE6                        376 FDOT1:
      002DE6 CD 0F F5         [ 4]  377     CALL    SPACE
      002DE9 CD 06 26         [ 4]  378     CALL    TOR 
      002DEC CD 2C 0B         [ 4]  379     CALL    FNE 
      002DEF                        380     _QBRAN  FDOT0 
      002DEF CD 04 DC         [ 4]    1     CALL QBRAN
      002DF2 2D F7                    2     .word FDOT0
      002DF4 CD 08 DC         [ 4]  381     CALL    DNEGA 
      002DF7                        382 FDOT0: 
      002DF7 CD 0E 5B         [ 4]  383     CALL    BDIGS
      002DFA CD 05 89         [ 4]  384     CALL    RAT  
      002DFD CD 06 94         [ 4]  385     CALL    ZLESS 
      002E00                        386     _QBRAN  FDOT6 
      002E00 CD 04 DC         [ 4]    1     CALL QBRAN
      002E03 2E 28                    2     .word FDOT6
      002E05                        387 FDOT2: ; e<0 
      002E05 CD 26 AF         [ 4]  388     CALL    DDIG 
      002E08 CD 05 78         [ 4]  389     CALL    RFROM
      002E0B CD 0B E7         [ 4]  390     CALL    ONEP 
      002E0E CD 08 10         [ 4]  391     CALL    QDUP 
      002E11                        392     _QBRAN  FDOT3 
      002E11 CD 04 DC         [ 4]    1     CALL QBRAN
      002E14 2E 1B                    2     .word FDOT3
      002E16 CD 06 26         [ 4]  393     CALL    TOR 
      002E19 20 EA            [ 2]  394     JRA   FDOT2 
      002E1B                        395 FDOT3:
      002E1B                        396     _DOLIT  '.' 
      002E1B CD 04 B3         [ 4]    1     CALL DOLIT 
      002E1E 00 2E                    2     .word '.' 
      002E20 CD 0E 6B         [ 4]  397     CALL    HOLD 
      002E23 CD 26 C7         [ 4]  398     CALL    DDIGS
      002E26 20 12            [ 2]  399     JRA   FDOT9  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 168.
Hexadecimal [24-Bits]



      002E28                        400 FDOT6: ; e>=0 
      002E28 20 08            [ 2]  401     JRA   FDOT8
      002E2A                        402 FDOT7:     
      002E2A                        403     _DOLIT  '0'
      002E2A CD 04 B3         [ 4]    1     CALL DOLIT 
      002E2D 00 30                    2     .word '0' 
      002E2F CD 0E 6B         [ 4]  404     CALL    HOLD 
      002E32                        405 FDOT8:
      002E32 CD 04 C7         [ 4]  406     CALL    DONXT 
      002E35 2E 2A                  407     .word   FDOT7
      002E37 CD 26 C7         [ 4]  408     CALL    DDIGS 
      002E3A                        409 FDOT9:
      002E3A CD 2C 0B         [ 4]  410     CALL    FNE 
      002E3D                        411     _QBRAN  FDOT10 
      002E3D CD 04 DC         [ 4]    1     CALL QBRAN
      002E40 2E 4A                    2     .word FDOT10
      002E42                        412     _DOLIT '-' 
      002E42 CD 04 B3         [ 4]    1     CALL DOLIT 
      002E45 00 2D                    2     .word '-' 
      002E47 CD 0E 6B         [ 4]  413     CALL   HOLD 
      002E4A                        414 FDOT10:
      002E4A CD 0E C0         [ 4]  415     CALL    EDIGS 
      002E4D CD 10 1F         [ 4]  416     CALL    TYPES 
      002E50 A6 45            [ 1]  417     LD  A,  #'E 
      002E52 CD 04 7F         [ 4]  418     CALL    putc   
      002E55 CD 05 78         [ 4]  419     CALL    RFROM 
      002E58 CD 07 23         [ 4]  420     CALL    BASE 
      002E5B CD 05 15         [ 4]  421     CALL    STORE 
      002E5E 81               [ 4]  422     RET 
                                    423 
                                    424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    425 ; return parsed exponent or 
                                    426 ; input:
                                    427 ;   a     string pointer to first digit 
                                    428 ;   cnt   digits left in string 
                                    429 ; output:
                                    430 ;    e     exponent 
                                    431 ;    0|-1  parse success flag 
                                    432 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002E5F                        433 parse_exponent: ; a cnt -- e -1 | 0 
      002E5F CD 06 26         [ 4]  434     CALL TOR   ; a R: cnt 
      002E62 CD 0C 53         [ 4]  435     CALL ZERO
      002E65 CD 06 5D         [ 4]  436     CALL DUPP 
      002E68 CD 08 21         [ 4]  437     CALL ROT  ; 0 0 a r: cnt  
      002E6B CD 05 78         [ 4]  438     CALL RFROM ; 0 0 a cnt 
      002E6E CD 0F 8D         [ 4]  439     CALL NSIGN  
      002E71 CD 06 26         [ 4]  440     CALL TOR  ; 0 0 a cnt r: esign 
      002E74 CD 08 10         [ 4]  441     CALL QDUP
      002E77                        442     _QBRAN PARSE_SUCCESS ; no digits e=0
      002E77 CD 04 DC         [ 4]    1     CALL QBRAN
      002E7A 2E 91                    2     .word PARSE_SUCCESS
      002E7C CD 24 FA         [ 4]  443     CALL parse_digits
      002E7F                        444     _QBRAN PARSE_SUCCESS ; parsed to end of string 
      002E7F CD 04 DC         [ 4]    1     CALL QBRAN
      002E82 2E 91                    2     .word PARSE_SUCCESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 169.
Hexadecimal [24-Bits]



      002E84                        445 PARSE_FAILED: ; digits left 
      002E84 CD 05 78         [ 4]  446     CALL RFROM ; ud a esign 
      002E87                        447     _DDROP ; ud  
      002E87 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002E8A                        448     _DDROP ; drop ud  
      002E8A 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002E8D CD 0C 53         [ 4]  449     CALL ZERO ; 0 
      002E90 81               [ 4]  450     RET  
      002E91                        451 PARSE_SUCCESS: 
      002E91                        452     _DDROP ; drop dhi a 
      002E91 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002E94 CD 05 78         [ 4]  453     CALL RFROM ; esign  
      002E97                        454     _QBRAN 1$
      002E97 CD 04 DC         [ 4]    1     CALL QBRAN
      002E9A 2E 9F                    2     .word 1$
      002E9C CD 08 CA         [ 4]  455     CALL NEGAT
      002E9F                        456 1$:
      002E9F                        457     _DOLIT -1 ; -- e -1 
      002E9F CD 04 B3         [ 4]    1     CALL DOLIT 
      002EA2 FF FF                    2     .word -1 
      002EA4 81               [ 4]  458     RET 
                                    459 
                                    460 
                                    461 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    462 ;  NUMBER? from double.asm jump here 
                                    463 ;  if number can't be parsed as an integer 
                                    464 ;  mantissa already parsed.
                                    465 ;   FLOAT?  
                                    466 ; stacks frames at input: 
                                    467 ;  s: a dlo dhi a cnt
                                    468 ;     a    adress string token  
                                    469 ;     dhi:dlo   mantissa already parsed as uint32 
                                    470 ;     a     moving string pointer 
                                    471 ;     cnt   # characters in string 
                                    472 ;  r: base sign digits
                                    473 ;     base   value of BASE at entry of NUMBER? 
                                    474 ;     sign   mantissa sign 
                                    475 ;     digits count of digits after '.'  
                                    476 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    477 ;    _HEADER FLOATQ,5,"FLOAT?" ; ( -- float32 -3 )
      002EA5                        478 FLOATQ:
                                    479 ; BASE must be 10 
      002EA5 CD 07 23         [ 4]  480     CALL BASE 
      002EA8 CD 05 27         [ 4]  481     CALL AT 
      002EAB                        482     _DOLIT 10 
      002EAB CD 04 B3         [ 4]    1     CALL DOLIT 
      002EAE 00 0A                    2     .word 10 
      002EB0 CD 09 3E         [ 4]  483     CALL EQUAL 
      002EB3                        484     _QBRAN FLOAT_ERROR
      002EB3 CD 04 DC         [ 4]    1     CALL QBRAN
      002EB6 2F 29                    2     .word FLOAT_ERROR
                                    485 ; next char must be 'E' 
      002EB8                        486     _DOLIT 'E' 
      002EB8 CD 04 B3         [ 4]    1     CALL DOLIT 
      002EBB 00 45                    2     .word 'E' 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 170.
Hexadecimal [24-Bits]



      002EBD CD 0F 67         [ 4]  487     CALL ACCEPT_CHAR 
      002EC0                        488     _QBRAN FLOAT_ERROR
      002EC0 CD 04 DC         [ 4]    1     CALL QBRAN
      002EC3 2F 29                    2     .word FLOAT_ERROR
                                    489 ; scale mantissa <=0x7fffff
      002EC5 CD 27 61         [ 4]  490     CALL DSWAP 
      002EC8 90 93            [ 1]  491     LDW Y,X 
      002ECA 90 FE            [ 2]  492     LDW Y,(Y)
      002ECC 90 A3 00 7F      [ 2]  493     CPW Y,#0x7f
      002ED0 2B 0F            [ 1]  494     JRMI 1$ 
                                    495 ; too big scale down 
      002ED2 CD 30 2E         [ 4]  496     CALL SCALETOMIN 
      002ED5 90 93            [ 1]  497     LDW Y,X 
      002ED7 90 FE            [ 2]  498     LDW Y,(Y)
      002ED9 72 F9 01         [ 2]  499     ADDW Y,(1,SP) 
      002EDC 17 01            [ 2]  500     LDW (1,SP),Y 
      002EDE                        501     _DROP
      002EDE 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002EE1                        502 1$:
      002EE1 CD 27 61         [ 4]  503     CALL DSWAP ; a ud a+ cnt- 
      002EE4 CD 2E 5F         [ 4]  504     CALL parse_exponent ; -- e -1 | 0 
      002EE7                        505     _QBRAN FLOAT_ERROR 
      002EE7 CD 04 DC         [ 4]    1     CALL QBRAN
      002EEA 2F 29                    2     .word FLOAT_ERROR
      002EEC CD 05 78         [ 4]  506     CALL RFROM 
      002EEF CD 09 16         [ 4]  507     CALL SUBB ; e - digits 
      002EF2 CD 06 26         [ 4]  508     CALL TOR ; a ud 
      002EF5 CD 2F EE         [ 4]  509     CALL SCALETOMAX 
      002EF8 CD 05 78         [ 4]  510     CALL RFROM 
      002EFB CD 06 6D         [ 4]  511     CALL SWAPP 
      002EFE CD 09 16         [ 4]  512     CALL SUBB 
      002F01 CD 08 40         [ 4]  513     CALL NROT 
      002F04 CD 05 78         [ 4]  514     CALL RFROM ; a e ud msign 
      002F07                        515     _QBRAN 2$ 
      002F07 CD 04 DC         [ 4]    1     CALL QBRAN
      002F0A 2F 0F                    2     .word 2$
      002F0C CD 08 DC         [ 4]  516     CALL DNEGA ; a e -ud 
      002F0F CD 08 21         [ 4]  517 2$: CALL ROT   ; a ud e 
      002F12 CD 06 26         [ 4]  518     CALL TOR   ; a ud r: base e 
      002F15 CD 08 21         [ 4]  519     CALL ROT   ; ud a r: base e 
      002F18 CD 06 53         [ 4]  520     CALL DROP  ; ud r: base e 
      002F1B CD 05 78         [ 4]  521     CALL RFROM ; ud e r: base 
      002F1E CD 2C E7         [ 4]  522     CALL FMERGE ; ud e -- float  
      002F21                        523     _DOLIT -3  ; ud e -3 
      002F21 CD 04 B3         [ 4]    1     CALL DOLIT 
      002F24 FF FD                    2     .word -3 
      002F26 CC 2F 3A         [ 2]  524     JP FLOAT_EXIT 
      002F29                        525 FLOAT_ERROR: ; a ud a cnt r: base sign digits 
      002F29 CD 28 CE         [ 4]  526     CALL DRFROM ; sign digits       
      002F2C                        527     _DDROP ; drop sign digits 
      002F2C 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F2F                        528     _DDROP ; drop a cnt 
      002F2F 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002F32                        529     _DDROP ; drop ud 
      002F32 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 171.
Hexadecimal [24-Bits]



      002F35                        530     _DOLIT 0  ; a 0 r: base 
      002F35 CD 04 B3         [ 4]    1     CALL DOLIT 
      002F38 00 00                    2     .word 0 
      002F3A                        531 FLOAT_EXIT: 
      002F3A CD 05 78         [ 4]  532     CALL RFROM 
      002F3D CD 07 23         [ 4]  533     CALL BASE 
      002F40 CC 05 15         [ 2]  534     JP STORE
                                    535 
                                    536 
                                    537 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    538 ;  LSCALE ( f# -- f# )
                                    539 ;  m *=10 , e -= 1
                                    540 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    541 ;    _HEADER LSCALE,6,"LSCALE"
      002F43                        542 LSCALE:
      002F43 CD 2C C5         [ 4]  543     CALL FSPLIT 
      002F46 CD 0C 5E         [ 4]  544     CALL ONE 
      002F49 CD 09 16         [ 4]  545     CALL SUBB 
      002F4C CD 06 26         [ 4]  546     CALL TOR
      002F4F                        547     _DOLIT 10 
      002F4F CD 04 B3         [ 4]    1     CALL DOLIT 
      002F52 00 0A                    2     .word 10 
      002F54 CD 27 3B         [ 4]  548     CALL DSSTAR
      002F57 CD 05 78         [ 4]  549     CALL RFROM 
      002F5A CD 2C E7         [ 4]  550     CALL FMERGE 
      002F5D 81               [ 4]  551     RET  
                                    552 
                                    553 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    554 ;  RSCALE ( f# -- f# )
                                    555 ;  m /=10 , e+=1 
                                    556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    557 ;    _HEADER RSCALE,6,"RSCALE"
      002F5E                        558 RSCALE:
      002F5E CD 2C C5         [ 4]  559     CALL FSPLIT 
      002F61 CD 0C 5E         [ 4]  560     CALL ONE 
      002F64 CD 08 80         [ 4]  561     CALL PLUS 
      002F67 CD 06 26         [ 4]  562     CALL TOR 
      002F6A                        563     _DOLIT 10 
      002F6A CD 04 B3         [ 4]    1     CALL DOLIT 
      002F6D 00 0A                    2     .word 10 
      002F6F CD 26 6E         [ 4]  564     CALL DSLMOD 
      002F72 CD 08 21         [ 4]  565     CALL ROT 
      002F75                        566     _DROP 
      002F75 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002F78 CD 05 78         [ 4]  567     CALL RFROM 
      002F7B CD 2C E7         [ 4]  568     CALL FMERGE 
      002F7E 81               [ 4]  569     RET 
                                    570 
                                    571 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    572 ;  SCALEUP ( ud u1 u2 -- ud*10 u1 u2 )
                                    573 ;  while (ud<=0xcccccccc && u1<u2 ){
                                    574 ;        ud*10;
                                    575 ;        u2--;
                                    576 ;  }  
                                    577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 172.
Hexadecimal [24-Bits]



      002F7F                        578 SCALEUP:
      002F7F CD 08 6B         [ 4]  579     CALL DDUP
      002F82 CD 09 6A         [ 4]  580     CALL LESS  
      002F85                        581     _QBRAN SCALEUP3
      002F85 CD 04 DC         [ 4]    1     CALL QBRAN
      002F88 2F B5                    2     .word SCALEUP3
      002F8A CD 28 B0         [ 4]  582     CALL DTOR   ; R: u1 u2  
      002F8D CD 08 6B         [ 4]  583     CALL DDUP 
      002F90                        584     _DOLIT 0XCCCC 
      002F90 CD 04 B3         [ 4]    1     CALL DOLIT 
      002F93 CC CC                    2     .word 0XCCCC 
      002F95                        585     _DOLIT 0XCCC 
      002F95 CD 04 B3         [ 4]    1     CALL DOLIT 
      002F98 0C CC                    2     .word 0XCCC 
      002F9A CD 28 73         [ 4]  586     CALL DGREAT  
      002F9D                        587     _TBRAN SCALEUP2 
      002F9D CD 04 EA         [ 4]    1     CALL TBRAN 
      002FA0 2F B2                    2     .word SCALEUP2 
      002FA2                        588     _DOLIT 10 
      002FA2 CD 04 B3         [ 4]    1     CALL DOLIT 
      002FA5 00 0A                    2     .word 10 
      002FA7 CD 27 1A         [ 4]  589     CALL UDSSTAR 
      002FAA CD 28 CE         [ 4]  590     CALL DRFROM 
      002FAD CD 0B F4         [ 4]  591     CALL ONEM
      002FB0 20 CD            [ 2]  592     JRA SCALEUP
      002FB2                        593 SCALEUP2:
      002FB2 CD 28 CE         [ 4]  594     CALL DRFROM
      002FB5                        595 SCALEUP3: 
      002FB5 81               [ 4]  596     RET 
                                    597 
                                    598 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    599 ; SCALEDOWN ( ud u1 u2 -- ud u1 u2 )
                                    600 ;  whhile (ud && u1>u2 ){ 
                                    601 ;     ud/10;
                                    602 ;     u2++;
                                    603 ;  } 
                                    604 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      002FB6                        605 SCALEDOWN: 
      002FB6 CD 08 6B         [ 4]  606     CALL DDUP 
      002FB9 CD 09 97         [ 4]  607     CALL GREAT 
      002FBC                        608     _QBRAN SCALDN3 
      002FBC CD 04 DC         [ 4]    1     CALL QBRAN
      002FBF 2F E5                    2     .word SCALDN3
      002FC1 CD 28 B0         [ 4]  609     CALL DTOR 
      002FC4 CD 08 6B         [ 4]  610     CALL DDUP 
      002FC7 CD 28 36         [ 4]  611     CALL DZEQUAL 
      002FCA                        612     _TBRAN SCALDN2  
      002FCA CD 04 EA         [ 4]    1     CALL TBRAN 
      002FCD 2F E2                    2     .word SCALDN2 
      002FCF                        613     _DOLIT 10
      002FCF CD 04 B3         [ 4]    1     CALL DOLIT 
      002FD2 00 0A                    2     .word 10 
      002FD4 CD 0C 53         [ 4]  614     CALL ZERO  
      002FD7 CD 2B 47         [ 4]  615     CALL DSLASH 
      002FDA CD 28 CE         [ 4]  616     CALL DRFROM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 173.
Hexadecimal [24-Bits]



      002FDD CD 0B E7         [ 4]  617     CALL ONEP  
      002FE0 20 D4            [ 2]  618     JRA SCALEDOWN 
      002FE2                        619 SCALDN2:
      002FE2 CD 28 CE         [ 4]  620     CALL DRFROM 
      002FE5                        621 SCALDN3:
      002FE5 81               [ 4]  622     RET 
                                    623 
                                    624 
                                    625 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    626 ; scale up ud while <=MAX_MANTISSA
                                    627 ; ud*10^e 
                                    628 ; input:
                                    629 ;   ud     unsigned double 
                                    630 ; output:
                                    631 ;   ud*10^e  
                                    632 ;   e      log scaling factor 
                                    633 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000001   634 .if 1 
      002FE6                        635     _HEADER SCALETOMAX,5,"M>MAX"
      002FE6 2D B6                    1         .word LINK 
                           002FE8     2         LINK=.
      002FE8 05                       3         .byte 5  
      002FE9 4D 3E 4D 41 58           4         .ascii "M>MAX"
      002FEE                          5         SCALETOMAX:
                           000000   636 .else     
                                    637 SCALETOMAX:
                                    638 .endif 
      002FEE 4B 00            [ 1]  639     PUSH #0 
      002FF0 CD 08 6B         [ 4]  640     CALL DDUP 
      002FF3 CD 06 CE         [ 4]  641     CALL ORR
      002FF6                        642     _QBRAN 9$  
      002FF6 CD 04 DC         [ 4]    1     CALL QBRAN
      002FF9 30 1C                    2     .word 9$
      002FFB                        643 1$: 
      002FFB CD 08 6B         [ 4]  644     CALL DDUP 
      002FFE                        645     _DOLIT 0xcccc ; ((MAX_MANTISSA/10) & 0XFFFF)
      002FFE CD 04 B3         [ 4]    1     CALL DOLIT 
      003001 CC CC                    2     .word 0xcccc 
      003003                        646     _DOLIT 0xc ; ((MAX_MANTISSA/10)>>16)  
      003003 CD 04 B3         [ 4]    1     CALL DOLIT 
      003006 00 0C                    2     .word 0xc 
      003008 CD 28 73         [ 4]  647     CALL DGREAT 
      00300B                        648     _TBRAN 9$ 
      00300B CD 04 EA         [ 4]    1     CALL TBRAN 
      00300E 30 1C                    2     .word 9$ 
      003010                        649     _DOLIT 10 
      003010 CD 04 B3         [ 4]    1     CALL DOLIT 
      003013 00 0A                    2     .word 10 
      003015 CD 24 9E         [ 4]  650     CALL UDU8STAR
      003018 0C 01            [ 1]  651     INC (1,SP) 
      00301A                        652     _BRAN 1$
      00301A 20 DF            [ 2]    1     JRA 1$  
      00301C                        653 9$: 
      00301C                        654 POP_EXP:
      00301C 84               [ 1]  655     POP A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 174.
Hexadecimal [24-Bits]



      00301D 90 5F            [ 1]  656     CLRW Y 
      00301F 90 97            [ 1]  657     LD YL,A 
      003021 1D 00 02         [ 2]  658     SUBW X,#CELLL 
      003024 FF               [ 2]  659     LDW (X),Y 
      003025                        660 SCALETOM_EXIT:  
      003025 81               [ 4]  661     RET 
                                    662 
                                    663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    664 ; scale down ud until <= MAX_MANTISSA 
                                    665 ; input:
                                    666 ;   ud 
                                    667 ; output:
                                    668 ;   ud/10^e 
                                    669 ;   e 
                                    670 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           000003   671     EXP=3 
                           000001   672     REMDR=1 
                           000001   673 .if 1 
      003026                        674     _HEADER SCALETOMIN,5,"M>MIN"
      003026 2F E8                    1         .word LINK 
                           003028     2         LINK=.
      003028 05                       3         .byte 5  
      003029 4D 3E 4D 49 4E           4         .ascii "M>MIN"
      00302E                          5         SCALETOMIN:
                           000000   675 .else 
                                    676 SCALETOMIN:
                                    677 .endif 
      00302E 4B 00            [ 1]  678     PUSH #0 ; EXP  
      003030 90 5F            [ 1]  679     CLRW Y  ; REMDR
      003032 90 89            [ 2]  680     PUSHW Y ; remainder  
      003034                        681 1$:
      003034 CD 08 6B         [ 4]  682     CALL DDUP 
      003037                        683     _DOLIT 0xcccc ; ((MAX_MANTISSA/10) & 0XFFFF)
      003037 CD 04 B3         [ 4]    1     CALL DOLIT 
      00303A CC CC                    2     .word 0xcccc 
      00303C                        684     _DOLIT 0xc ; ((MAX_MANTISSA/10)>>16)  
      00303C CD 04 B3         [ 4]    1     CALL DOLIT 
      00303F 00 0C                    2     .word 0xc 
      003041 CD 28 73         [ 4]  685     CALL DGREAT 
      003044                        686     _TBRAN 3$
      003044 CD 04 EA         [ 4]    1     CALL TBRAN 
      003047 30 62                    2     .word 3$ 
                                    687 ; round it 
      003049 90 85            [ 2]  688     POPW Y 
      00304B 90 A3 00 05      [ 2]  689     CPW Y,#5 
      00304F 2B CB            [ 1]  690     JRMI POP_EXP 
      003051 90 93            [ 1]  691     LDW Y,X 
      003053 90 EE 02         [ 2]  692     LDW Y,(CELLL,Y)
      003056 72 A9 00 01      [ 2]  693     ADDW Y,#1 
      00305A 24 02            [ 1]  694     JRNC 2$ 
      00305C 6C 03            [ 1]  695     INC (3,X)
      00305E EF 02            [ 2]  696 2$: LDW (CELLL,X),Y 
      003060 20 BA            [ 2]  697     JRA POP_EXP 
      003062                        698 3$:
      003062                        699     _DOLIT 10 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 175.
Hexadecimal [24-Bits]



      003062 CD 04 B3         [ 4]    1     CALL DOLIT 
      003065 00 0A                    2     .word 10 
      003067                        700     _DOLIT 0 
      003067 CD 04 B3         [ 4]    1     CALL DOLIT 
      00306A 00 00                    2     .word 0 
      00306C CD 2A 67         [ 4]  701     CALL UDSLMOD
      00306F CD 27 61         [ 4]  702     CALL DSWAP 
      003072                        703     _DROP   
      003072 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003075 90 93            [ 1]  704     LDW Y,X 
      003077 90 FE            [ 2]  705     LDW Y,(Y)
      003079 17 01            [ 2]  706     LDW (REMDR,SP),Y 
      00307B 0C 03            [ 1]  707     INC (EXP,SP)
      00307D                        708     _DROP 
      00307D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003080 20 B2            [ 2]  709     JRA 1$
                                    710 
                                    711 
                                    712 
                                    713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    714 ;  F-ALIGN ( f#1 f#2 -- m1 m2 e )
                                    715 ;  align to same exponent 
                                    716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    717 ;    _HEADER FALIGN,7,"F-ALIGN"
      003082                        718 FALIGN:
      003082 CD 2C C5         [ 4]  719     CALL FSPLIT 
      003085 CD 06 26         [ 4]  720     CALL TOR 
      003088 CD 27 61         [ 4]  721     CALL DSWAP 
      00308B CD 2C C5         [ 4]  722     CALL FSPLIT 
      00308E CD 06 26         [ 4]  723     CALL TOR    ; m2 m1 R: e2 e1 
      003091 CD 27 61         [ 4]  724     CALL DSWAP 
      003094 CD 28 E6         [ 4]  725     CALL DRAT 
      003097 CD 09 3E         [ 4]  726     CALL EQUAL 
      00309A                        727     _TBRAN FALGN8
      00309A CD 04 EA         [ 4]    1     CALL TBRAN 
      00309D 31 1F                    2     .word FALGN8 
                                    728 ; scaleup the largest float 
                                    729 ; but limit mantissa <=0xccccccc
                                    730 ; to avoid mantissa overflow     
      00309F CD 28 E6         [ 4]  731     CALL DRAT ; m1 m2 e2 e1 
      0030A2 CD 09 97         [ 4]  732     CALL GREAT 
      0030A5                        733     _QBRAN FALGN4 ; e2<e1 
      0030A5 CD 04 DC         [ 4]    1     CALL QBRAN
      0030A8 30 BB                    2     .word FALGN4
                                    734 ; e2>e1 then scale up m2   
      0030AA CD 28 CE         [ 4]  735     CALL DRFROM 
      0030AD CD 06 6D         [ 4]  736     CALL SWAPP 
      0030B0 CD 2F 7F         [ 4]  737     CALL SCALEUP 
      0030B3 CD 06 6D         [ 4]  738     CALL SWAPP 
      0030B6 CD 28 B0         [ 4]  739     CALL DTOR 
      0030B9 20 0F            [ 2]  740     JRA FALGN6
      0030BB                        741 FALGN4: ; e2<e1 then scaleup m1 
      0030BB CD 27 61         [ 4]  742     CALL DSWAP 
      0030BE CD 28 CE         [ 4]  743     CALL DRFROM 
      0030C1 CD 2F 7F         [ 4]  744     CALL SCALEUP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 176.
Hexadecimal [24-Bits]



      0030C4 CD 28 B0         [ 4]  745     CALL DTOR
      0030C7 CD 27 61         [ 4]  746     CALL DSWAP 
                                    747 ; check again for e2==e1 
                                    748 ; if scaleup was not enough 
                                    749 ; to equalize exponent then
                                    750 ; scaledown smallest float     
      0030CA                        751 FALGN6: 
      0030CA CD 28 E6         [ 4]  752     CALL DRAT 
      0030CD CD 09 3E         [ 4]  753     CALL EQUAL 
      0030D0                        754     _TBRAN FALGN8 
      0030D0 CD 04 EA         [ 4]    1     CALL TBRAN 
      0030D3 31 1F                    2     .word FALGN8 
                                    755 ; e2!=e1 need to scale down smallest 
      0030D5 CD 28 E6         [ 4]  756     CALL DRAT 
      0030D8 CD 09 97         [ 4]  757     CALL GREAT 
      0030DB                        758     _QBRAN FALGN7 ; e2<e1 
      0030DB CD 04 DC         [ 4]    1     CALL QBRAN
      0030DE 30 F1                    2     .word FALGN7
                                    759 ; e2>e1 scaledown m1 
      0030E0 CD 27 61         [ 4]  760     CALL DSWAP 
      0030E3 CD 28 CE         [ 4]  761     CALL DRFROM 
      0030E6 CD 2F B6         [ 4]  762     CALL SCALEDOWN
      0030E9 CD 06 6D         [ 4]  763     CALL SWAPP 
      0030EC CD 28 B0         [ 4]  764     CALL DTOR 
      0030EF 20 0F            [ 2]  765     JRA FALGN71  
      0030F1                        766 FALGN7: ; e2<e1 scaledown m2 
      0030F1 CD 28 CE         [ 4]  767     CALL DRFROM 
      0030F4 CD 06 6D         [ 4]  768     CALL SWAPP 
      0030F7 CD 2F B6         [ 4]  769     CALL SCALEDOWN 
      0030FA CD 06 6D         [ 4]  770     CALL SWAPP 
      0030FD CD 28 B0         [ 4]  771     CALL DTOR 
                                    772 ; after scaledown if e2!=e1 
                                    773 ; this imply that one of mantissa 
                                    774 ; as been nullified by scalling 
                                    775 ; hence keep largest exponent 
      003100                        776 FALGN71:
      003100 CD 28 E6         [ 4]  777     CALL DRAT 
      003103 CD 09 3E         [ 4]  778     CALL EQUAL
      003106                        779     _TBRAN FALGN8 
      003106 CD 04 EA         [ 4]    1     CALL TBRAN 
      003109 31 1F                    2     .word FALGN8 
      00310B CD 28 CE         [ 4]  780     CALL DRFROM 
      00310E CD 08 6B         [ 4]  781     CALL DDUP 
      003111 CD 09 97         [ 4]  782     CALL GREAT 
      003114                        783     _TBRAN FALGN72
      003114 CD 04 EA         [ 4]    1     CALL TBRAN 
      003117 31 1C                    2     .word FALGN72 
      003119 CD 06 6D         [ 4]  784     CALL SWAPP     
      00311C                        785 FALGN72:
      00311C CD 28 B0         [ 4]  786     CALL DTOR  ; now smallest e is at rtop.
      00311F                        787 FALGN8:
      00311F CD 28 CE         [ 4]  788     CALL DRFROM 
      003122                        789     _DROP 
      003122 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      003125 81               [ 4]  790     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 177.
Hexadecimal [24-Bits]



                                    791 
                                    792 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    793 ;   F+ ( f#1 f#2 -- f#1+f#2 )
                                    794 ;   float addition 
                                    795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003126                        796     _HEADER FPLUS,2,"F+"
      003126 30 28                    1         .word LINK 
                           003128     2         LINK=.
      003128 02                       3         .byte 2  
      003129 46 2B                    4         .ascii "F+"
      00312B                          5         FPLUS:
      00312B CD 30 82         [ 4]  797     CALL FALIGN 
      00312E CD 06 26         [ 4]  798     CALL TOR 
      003131 CD 2B 56         [ 4]  799     CALL DPLUS
      003134 CD 26 54         [ 4]  800     CALL DSIGN 
      003137 CD 06 26         [ 4]  801     CALL TOR 
      00313A CD 26 43         [ 4]  802     CALL DABS 
      00313D CD 31 96         [ 4]  803     CALL SCALETOM
      003140 CD 05 78         [ 4]  804     CALL RFROM 
      003143                        805     _QBRAN FPLUS1 
      003143 CD 04 DC         [ 4]    1     CALL QBRAN
      003146 31 4B                    2     .word FPLUS1
      003148 CD 08 DC         [ 4]  806     CALL DNEGA  
      00314B                        807 FPLUS1: 
      00314B CD 08 21         [ 4]  808     CALL ROT   
      00314E CD 05 78         [ 4]  809     CALL RFROM
      003151 CD 08 80         [ 4]  810     CALL PLUS  
      003154 CD 2C E7         [ 4]  811     CALL FMERGE 
      003157 81               [ 4]  812     RET 
                                    813 
                                    814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    815 ;  F- ( f#1 f#2 -- f#1-f#2 )
                                    816 ;  substraction 
                                    817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003158                        818     _HEADER FSUB,2,"F-"
      003158 31 28                    1         .word LINK 
                           00315A     2         LINK=.
      00315A 02                       3         .byte 2  
      00315B 46 2D                    4         .ascii "F-"
      00315D                          5         FSUB:
      00315D CD 30 82         [ 4]  819     CALL FALIGN 
      003160 CD 06 26         [ 4]  820     CALL TOR 
      003163 CD 2B 84         [ 4]  821     CALL DSUB
      003166 CD 26 54         [ 4]  822     CALL DSIGN 
      003169 CD 06 26         [ 4]  823     CALL TOR 
      00316C CD 26 43         [ 4]  824     CALL DABS 
      00316F CD 31 96         [ 4]  825     CALL SCALETOM 
      003172 CD 05 78         [ 4]  826     CALL RFROM 
      003175                        827     _QBRAN FSUB1 
      003175 CD 04 DC         [ 4]    1     CALL QBRAN
      003178 31 7D                    2     .word FSUB1
      00317A CD 08 DC         [ 4]  828     CALL DNEGA 
      00317D                        829 FSUB1:
      00317D CD 08 21         [ 4]  830     CALL ROT 
      003180 CD 05 78         [ 4]  831     CALL RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 178.
Hexadecimal [24-Bits]



      003183 CD 08 80         [ 4]  832     CALL PLUS  
      003186 CD 2C E7         [ 4]  833     CALL FMERGE 
      003189 81               [ 4]  834     RET 
                                    835 
                                    836 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    837 ; /mod10  ( m -- m/10 r )
                                    838 ; divide mantissa by 10 
                                    839 ; return quotient and remainder 
                                    840 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00318A                        841 UMOD10:
      00318A                        842     _DOLIT 10 
      00318A CD 04 B3         [ 4]    1     CALL DOLIT 
      00318D 00 0A                    2     .word 10 
      00318F CD 26 6E         [ 4]  843     CALL DSLMOD
      003192 CD 08 21         [ 4]  844     CALL ROT  
      003195 81               [ 4]  845     RET 
                                    846 
                                    847 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    848 ;   SCALE>M ( ud1 -- e ud2 )
                                    849 ;   scale down a double  
                                    850 ;   by repeated d/10
                                    851 ;   until ud<=MAX_MANTISSA   
                                    852 ;   e is log10 exponent of scaled down
                                    853 ;   ud2 is scaled down ud1 
                                    854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    855 ;    _HEADER SCALETOM,7,"SCALE>M"
      003196                        856 SCALETOM:
      003196 CD 0C 53         [ 4]  857     CALL ZERO 
      003199 CD 08 40         [ 4]  858     CALL NROT 
      00319C 90 93            [ 1]  859     LDW Y,X 
      00319E 90 FE            [ 2]  860     LDW Y,(Y)
      0031A0 90 89            [ 2]  861     PUSHW Y 
      0031A2 7B 01            [ 1]  862     LD A,(1,SP)
      0031A4 1A 02            [ 1]  863     OR A,(2,SP)
      0031A6 90 93            [ 1]  864     LDW Y,X 
      0031A8 90 EE 02         [ 2]  865     LDW Y,(CELLL,Y)
      0031AB 17 01            [ 2]  866     LDW (1,SP),Y 
      0031AD 1A 01            [ 1]  867     OR A,(1,SP)
      0031AF 1A 02            [ 1]  868     OR A,(2,SP)
      0031B1                        869     _RDROP 
      0031B1 5B 02            [ 2]    1    ADDW SP,#CELLL
      0031B3 27 21            [ 1]  870     JREQ SCAL2     
      0031B5                        871 SCAL1:
      0031B5 CD 06 5D         [ 4]  872     CALL DUPP 
      0031B8                        873     _DOLIT 0X7F 
      0031B8 CD 04 B3         [ 4]    1     CALL DOLIT 
      0031BB 00 7F                    2     .word 0X7F 
      0031BD CD 09 81         [ 4]  874     CALL UGREAT 
      0031C0                        875     _QBRAN SCAL2  
      0031C0 CD 04 DC         [ 4]    1     CALL QBRAN
      0031C3 31 D6                    2     .word SCAL2
      0031C5 CD 31 8A         [ 4]  876     CALL UMOD10 
      0031C8                        877     _DROP 
      0031C8 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0031CB CD 08 21         [ 4]  878     CALL ROT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 179.
Hexadecimal [24-Bits]



      0031CE CD 0B E7         [ 4]  879     CALL ONEP 
      0031D1 CD 08 40         [ 4]  880     CALL NROT  
      0031D4 20 DF            [ 2]  881     JRA SCAL1 
      0031D6                        882 SCAL2:
      0031D6 81               [ 4]  883     RET 
                                    884 
                                    885 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    886 ;  UDIV10 ( ut -- ut )
                                    887 ;  divide a 48 bits uint by 10 
                                    888 ;  used to scale down MM* 
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0031D7                        890 UDIV10:
      0031D7 90 93            [ 1]  891     LDW Y,X 
      0031D9 90 FE            [ 2]  892     LDW Y,(Y)
      0031DB A6 0A            [ 1]  893     LD A,#10 
      0031DD 90 62            [ 2]  894     DIV Y,A 
      0031DF FF               [ 2]  895     LDW (X),Y 
      0031E0 90 95            [ 1]  896     LD YH,A 
      0031E2 E6 02            [ 1]  897     LD A,(2,X)
      0031E4 90 97            [ 1]  898     LD YL,A 
      0031E6 A6 0A            [ 1]  899     LD A,#10 
      0031E8 90 62            [ 2]  900     DIV Y,A 
      0031EA 90 95            [ 1]  901     LD YH,A 
      0031EC 90 9F            [ 1]  902     LD A,YL 
      0031EE E7 02            [ 1]  903     LD (2,X),A 
      0031F0 E6 03            [ 1]  904     LD A,(3,X)
      0031F2 90 97            [ 1]  905     LD YL,A 
      0031F4 A6 0A            [ 1]  906     LD A,#10 
      0031F6 90 62            [ 2]  907     DIV Y,A 
      0031F8 90 95            [ 1]  908     LD YH,A 
      0031FA 90 9F            [ 1]  909     LD A,YL 
      0031FC E7 03            [ 1]  910     LD (3,X),A 
      0031FE E6 04            [ 1]  911     LD A,(4,X)
      003200 90 97            [ 1]  912     LD YL,A 
      003202 A6 0A            [ 1]  913     LD A,#10 
      003204 90 62            [ 2]  914     DIV Y,A 
      003206 90 95            [ 1]  915     LD YH,A 
      003208 90 9F            [ 1]  916     LD A,YL 
      00320A E7 04            [ 1]  917     LD (4,X),A 
      00320C E6 05            [ 1]  918     LD A,(5,X)
      00320E 90 97            [ 1]  919     LD YL,A 
      003210 A6 0A            [ 1]  920     LD A,#10 
      003212 90 62            [ 2]  921     DIV Y,A 
      003214 90 9F            [ 1]  922     LD A,YL 
      003216 E7 05            [ 1]  923     LD (5,X),A 
      003218 81               [ 4]  924     RET 
                                    925 
                                    926 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    927 ;   MM* ( m1 m2 -- m3 e )
                                    928 ;   mantissa product 
                                    929 ;  scale down to 23 bits 
                                    930 ;   e  is log10 scaling factor.
                                    931 ;   The maximum product size 
                                    932 ;   before scaling is 46 bits .
                                    933 ;   UDIV10 is used to scale down.  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 180.
Hexadecimal [24-Bits]



                                    934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    935 ;    _HEADER MMSTAR,3,"MM*"
      003219                        936 MMSTAR:
      003219 CD 08 6B         [ 4]  937     CALL DDUP
      00321C CD 28 36         [ 4]  938     CALL DZEQUAL
      00321F                        939     _TBRAN MMSTA2
      00321F CD 04 EA         [ 4]    1     CALL TBRAN 
      003222 32 2F                    2     .word MMSTA2 
      003224                        940 MMSTA1:
      003224 CD 29 76         [ 4]  941     CALL DOVER 
      003227 CD 28 36         [ 4]  942     CALL DZEQUAL 
      00322A                        943     _QBRAN MMSTA3 
      00322A CD 04 DC         [ 4]    1     CALL QBRAN
      00322D 32 3A                    2     .word MMSTA3
      00322F                        944 MMSTA2: ; ( -- 0 0 0 )
      00322F 1C 00 02         [ 2]  945     ADDW X,#2 
      003232 90 5F            [ 1]  946     CLRW Y 
      003234 FF               [ 2]  947     LDW (X),Y 
      003235 EF 02            [ 2]  948     LDW (2,X),Y
      003237 EF 04            [ 2]  949     LDW (4,X),Y 
      003239 81               [ 4]  950     RET 
      00323A                        951 MMSTA3:
      00323A CD 26 54         [ 4]  952     CALL DSIGN 
      00323D CD 06 26         [ 4]  953     CALL TOR    ; R: m2sign 
      003240 CD 26 43         [ 4]  954     CALL DABS   ; m1 um2 
      003243 CD 27 61         [ 4]  955     CALL DSWAP  ; um2 m1 
      003246 CD 26 54         [ 4]  956     CALL DSIGN  ; um2 m1 m1sign 
      003249 CD 05 78         [ 4]  957     CALL RFROM 
      00324C CD 06 E3         [ 4]  958     CALL XORR 
      00324F CD 06 26         [ 4]  959     CALL TOR   ; R: product_sign 
      003252 CD 26 43         [ 4]  960     CALL DABS  ; um2 um1  
      003255 CD 28 B0         [ 4]  961     CALL DTOR  ; um2 
      003258 CD 06 5D         [ 4]  962     CALL DUPP  ; um2 um2hi 
      00325B CD 05 89         [ 4]  963     CALL RAT   ; um2 um2hi um1hi
                                    964 ; first partial product  
                                    965 ; pd1=um2hi*um1hi 
      00325E CD 0B 65         [ 4]  966     CALL STAR 
      003261 CD 0C 53         [ 4]  967     CALL ZERO 
      003264 CD 06 6D         [ 4]  968     CALL SWAPP ; pd1<<16  
      003267 CD 27 61         [ 4]  969     CALL DSWAP ; pd1 um2 
      00326A CD 06 85         [ 4]  970     CALL OVER  ; pd1 um2 um2lo 
      00326D CD 05 78         [ 4]  971     CALL RFROM ; pd1 um2 um2lo um1hi 
                                    972 ; pd2=um2lo*um1hi 
      003270 CD 0B 1B         [ 4]  973     CALL UMSTA ; pd1 um2 pd2 
      003273 CD 27 61         [ 4]  974     CALL DSWAP ; pd1 pd2 um2 
      003276 CD 05 89         [ 4]  975     CALL RAT   ; pd1 pd2 um2 um1lo 
                                    976 ; pd3= um2hi*um1lo 
      003279 CD 0B 1B         [ 4]  977     CALL UMSTA ; pd1 pd2 um2lo pd3 
      00327C CD 08 21         [ 4]  978     CALL ROT ; pd1 pd2 pd3 um2lo 
      00327F CD 06 26         [ 4]  979     CALL TOR ; pd1 pd2 pd3 R: psign um1lo um2lo 
                                    980 ; pd1+pd2+pd3  pd1
      003282 CD 2B 56         [ 4]  981     CALL DPLUS 
      003285 CD 2B 56         [ 4]  982     CALL DPLUS  
      003288 CD 28 CE         [ 4]  983     CALL DRFROM ; triple um2lo um1lo 
                                    984 ; last partial product um2lo*um1lo 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 181.
Hexadecimal [24-Bits]



      00328B CD 0B 1B         [ 4]  985     CALL UMSTA ; prod pd4 
                                    986 ; mm*=prod<<16+pd4  
      00328E CD 28 B0         [ 4]  987     CALL DTOR ;   R: psign pd4lo pd4hi  
                                    988  ; add pd4hi to prodlo and propagate carry 
      003291 90 93            [ 1]  989     LDW Y,X 
      003293 90 EE 02         [ 2]  990     LDW Y,(2,Y)  ; prodlo 
      003296 72 F9 01         [ 2]  991     ADDW Y,(1,SP)  ; prodlo+pd4hi 
      003299 17 01            [ 2]  992     LDW (1,SP),Y    ; plo phi  
      00329B 90 93            [ 1]  993     LDW Y,X
      00329D 90 FE            [ 2]  994     LDW Y,(Y) ; prodhi  
      00329F 24 04            [ 1]  995     JRNC MMSTA4
      0032A1 72 A9 00 01      [ 2]  996     ADDW Y,#1 ; add carry 
      0032A5                        997 MMSTA4:     
      0032A5 1D 00 02         [ 2]  998     SUBW X,#2 
      0032A8 FF               [ 2]  999     LDW (X),Y 
      0032A9 90 85            [ 2] 1000     POPW Y 
      0032AB EF 02            [ 2] 1001     LDW (2,X),Y 
      0032AD 90 85            [ 2] 1002     POPW Y 
      0032AF EF 04            [ 2] 1003     LDW (4,X),Y
      0032B1 CD 0C 53         [ 4] 1004     CALL ZERO 
      0032B4 CD 06 26         [ 4] 1005     CALL TOR 
      0032B7                       1006 MMSTA5:
      0032B7 CD 08 10         [ 4] 1007     CALL QDUP 
      0032BA                       1008     _QBRAN MMSTA6 
      0032BA CD 04 DC         [ 4]    1     CALL QBRAN
      0032BD 32 CD                    2     .word MMSTA6
      0032BF CD 31 D7         [ 4] 1009     CALL UDIV10 
      0032C2 CD 05 78         [ 4] 1010     CALL RFROM 
      0032C5 CD 0B E7         [ 4] 1011     CALL ONEP 
      0032C8 CD 06 26         [ 4] 1012     CALL TOR 
      0032CB 20 EA            [ 2] 1013     JRA MMSTA5 
                                   1014 ; now scale to double 
                                   1015 ; scale further <= MAX_MANTISSA 
      0032CD                       1016 MMSTA6: 
      0032CD CD 05 78         [ 4] 1017     CALL RFROM 
      0032D0 CD 08 40         [ 4] 1018     CALL NROT 
      0032D3 CD 31 96         [ 4] 1019     CALL SCALETOM
      0032D6 CD 28 B0         [ 4] 1020     CALL DTOR 
      0032D9 CD 08 80         [ 4] 1021     CALL PLUS 
      0032DC CD 28 CE         [ 4] 1022     CALL DRFROM 
      0032DF CD 05 78         [ 4] 1023     CALL RFROM
      0032E2                       1024     _QBRAN MMSTA7
      0032E2 CD 04 DC         [ 4]    1     CALL QBRAN
      0032E5 32 EA                    2     .word MMSTA7
      0032E7 CD 08 DC         [ 4] 1025     CALL DNEGA
      0032EA                       1026 MMSTA7:
      0032EA CD 08 21         [ 4] 1027     CALL ROT ; m e 
      0032ED 81               [ 4] 1028     RET 
                                   1029 
                                   1030 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1031 ;    F* ( f#1 f#2 -- f#3 )
                                   1032 ;    float product 
                                   1033 ;    f#3=f#1 * f#2 
                                   1034 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0032EE                       1035     _HEADER FSTAR,2,"F*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 182.
Hexadecimal [24-Bits]



      0032EE 31 5A                    1         .word LINK 
                           0032F0     2         LINK=.
      0032F0 02                       3         .byte 2  
      0032F1 46 2A                    4         .ascii "F*"
      0032F3                          5         FSTAR:
      0032F3 CD 2C C5         [ 4] 1036     CALL FSPLIT ; f#1 m2 e2 
      0032F6 CD 06 26         [ 4] 1037     CALL TOR   
      0032F9 CD 27 61         [ 4] 1038     CALL DSWAP ; m2 f#1
      0032FC CD 2C C5         [ 4] 1039     CALL FSPLIT ; m2 m1 e1 
      0032FF CD 05 78         [ 4] 1040     CALL RFROM ; m2 m1 e1 e2 
      003302 CD 08 80         [ 4] 1041     CALL PLUS  ; m2 m1 e 
      003305 CD 06 26         [ 4] 1042     CALL TOR   ; m2 m1 R: e 
      003308 CD 32 19         [ 4] 1043     CALL MMSTAR ; m2*m1 e   
      00330B CD 05 78         [ 4] 1044     CALL RFROM 
      00330E CD 08 80         [ 4] 1045     CALL PLUS 
      003311 CD 2C E7         [ 4] 1046     CALL FMERGE ; f#3 
      003314 81               [ 4] 1047     RET 
                                   1048 
                                   1049 ; unsigned mutliply by 10 
                                   1050 ;  ( ud -- ud ) 
      003315                       1051 UMUL10:
      003315 90 93            [ 1] 1052     LDW Y,X 
      003317 90 EE 02         [ 2] 1053     LDW Y,(2,Y)
      00331A 90 89            [ 2] 1054     PUSHW Y 
      00331C 90 93            [ 1] 1055     LDW Y,X 
      00331E 90 FE            [ 2] 1056     LDW Y,(Y)
      003320 90 89            [ 2] 1057     PUSHW Y 
      003322 1D 00 02         [ 2] 1058     SUBW X,#CELLL 
      003325 7F               [ 1] 1059     CLR (X)
      003326 A6 03            [ 1] 1060     LD A,#3 
      003328 E7 01            [ 1] 1061     LD (1,X),A 
      00332A CD 29 C2         [ 4] 1062     CALL DLSHIFT 
      00332D 1D 00 04         [ 2] 1063     SUBW X,#2*CELLL 
      003330 16 03            [ 2] 1064     LDW Y,(3,SP)
      003332 98               [ 1] 1065     RCF 
      003333 90 59            [ 2] 1066     RLCW Y 
      003335 EF 02            [ 2] 1067     LDW (2,X),Y 
      003337 90 85            [ 2] 1068     POPW Y 
      003339 90 59            [ 2] 1069     RLCW Y 
      00333B FF               [ 2] 1070     LDW (X),Y 
      00333C CD 2B 56         [ 4] 1071     CALL DPLUS
      00333F 5B 02            [ 2] 1072     ADDW SP,#CELLL  
      003341 81               [ 4] 1073     RET 
                                   1074 
                                   1075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1076 ;  F/ ( f#1 f#2 -- f#3 )
                                   1077 ;  float division
                                   1078 ;  f#3 = f#1/f#2
                                   1079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003342                       1080     _HEADER FSLASH,2,"F/"
      003342 32 F0                    1         .word LINK 
                           003344     2         LINK=.
      003344 02                       3         .byte 2  
      003345 46 2F                    4         .ascii "F/"
      003347                          5         FSLASH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 183.
Hexadecimal [24-Bits]



      003347 CD 2C C5         [ 4] 1081     CALL FSPLIT  ; f#1 m2 e2 
      00334A E6 02            [ 1] 1082     LD A,(CELLL,X) ; msign 0|-1
      00334C 90 95            [ 1] 1083     LD YH,A 
      00334E 90 97            [ 1] 1084     LD YL,A 
      003350 90 89            [ 2] 1085     PUSHW Y  
      003352 CD 06 26         [ 4] 1086     CALL TOR ; f#1 m2   R: m2s e2 
      003355 CD 26 43         [ 4] 1087     CALL DABS   ; F#1 um2 
      003358 CD 27 61         [ 4] 1088     CALL DSWAP  ; um2 f#1 
      00335B CD 2C C5         [ 4] 1089     CALL FSPLIT  ; um2 m1 e1 
                                   1090 ; substract expoenents e1-e2 
      00335E 90 93            [ 1] 1091     LDW Y,X 
      003360 90 FE            [ 2] 1092     LDW Y,(Y)
      003362 72 F2 01         [ 2] 1093     SUBW Y,(1,SP) ; e1-e2
      003365 17 01            [ 2] 1094     LDW (1,SP),Y ; um2 m1 r: m2s e     
      003367                       1095     _DROP ; e1 
      003367 1C 00 02         [ 2]    1     ADDW X,#CELLL  
                                   1096 ; quotient sign = m1 sign xor m2 sign 
      00336A 7B 03            [ 1] 1097     LD A,(3,SP) 
      00336C F8               [ 1] 1098     XOR A,(X)
      00336D 6B 03            [ 1] 1099     LD (3,SP),A 
      00336F CD 26 43         [ 4] 1100     CALL DABS   ; um2 um1 R: qs e  
      003372 CD 27 61         [ 4] 1101     CALL DSWAP  ; um1 um2 R: qs e
      003375 CD 08 6B         [ 4] 1102     CALL DDUP  ; um1 um2 um2 R: qs e
      003378 CD 28 B0         [ 4] 1103     CALL DTOR  ; um1 um2 R: qs e um2 ( keep divisor needed later ) 
      00337B CD 2A 67         [ 4] 1104     CALL UDSLMOD ; remainder m1/m2 R: e m2 
      00337E                       1105 FSLASH1: ; fraction loop 
                                   1106 ; check for null remainder 
      00337E E6 04            [ 1] 1107     LD A,(4,X)
      003380 EA 05            [ 1] 1108     OR A,(5,X)
      003382 EA 06            [ 1] 1109     OR A,(6,X)
      003384 EA 07            [ 1] 1110     OR A,(7,X)
      003386 27 3F            [ 1] 1111     JREQ FSLASH8 
                                   1112 ; get fractional digits from remainder until mantissa saturate
                                   1113 ; remainder mantissa R: e divisor 
                                   1114 ; check for mantissa saturation 
      003388 CD 08 6B         [ 4] 1115     CALL DDUP 
                                   1116 ; _DOLIT #0xccccc 
      00338B 1D 00 04         [ 2] 1117     SUBW X,#2*CELLL 
      00338E 90 AE CC CC      [ 2] 1118     LDW Y,#0XCCCC 
      003392 EF 02            [ 2] 1119     LDW (2,X),Y 
      003394 90 AE 00 0C      [ 2] 1120     LDW Y,#0XC 
      003398 FF               [ 2] 1121     LDW (X),Y 
      003399 CD 28 73         [ 4] 1122     CALL DGREAT 
      00339C                       1123     _TBRAN FSLASH8 ; another loop would result in mantissa overflow 
      00339C CD 04 EA         [ 4]    1     CALL TBRAN 
      00339F 33 C7                    2     .word FSLASH8 
                                   1124 ; multiply mantissa by 10 
      0033A1 CD 33 15         [ 4] 1125     CALL UMUL10 
                                   1126 ; mutliply remainder by 10     
      0033A4 CD 27 61         [ 4] 1127     CALL DSWAP 
      0033A7 CD 33 15         [ 4] 1128     CALL UMUL10 
                                   1129 ; divide remainder by m2     
      0033AA CD 28 E6         [ 4] 1130     CALL DRAT  ; mantissa remainder divisor R: e divisor 
      0033AD CD 2A 67         [ 4] 1131     CALL UDSLMOD ; mantissa dr dq R: qs e divisor 
      0033B0 CD 27 61         [ 4] 1132     CALL DSWAP ; mantissa frac_digit remainder R: qs e divisor  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 184.
Hexadecimal [24-Bits]



      0033B3 CD 28 B0         [ 4] 1133     CALL DTOR  ; mantissa frac_digit R: qs e divisor remainder 
      0033B6 CD 2B 56         [ 4] 1134     CALL DPLUS ; mantissa+frac_digit 
      0033B9 CD 28 CE         [ 4] 1135     CALL DRFROM ; mantissa remainder R: qs e divisor  
      0033BC CD 27 61         [ 4] 1136     CALL DSWAP  ; remainder mantissa  
                                   1137 ; increment e 
      0033BF 16 05            [ 2] 1138     LDW Y,(5,SP) ; e 
      0033C1 90 5A            [ 2] 1139     DECW Y 
      0033C3 17 05            [ 2] 1140     LDW (5,SP),Y 
      0033C5 20 B7            [ 2] 1141     JRA FSLASH1
      0033C7                       1142 FSLASH8: ; remainder mantissa R: qs e divisor 
      0033C7 CD 27 61         [ 4] 1143     CALL DSWAP  
      0033CA                       1144     _DDROP  ; drop remainder     
      0033CA 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0033CD 5B 04            [ 2] 1145     ADDW SP,#2*CELLL ; drop divisor on rstack     
      0033CF 16 03            [ 2] 1146     LDW Y,(3,SP)    ; quotient sign 
      0033D1 2A 03            [ 1] 1147     JRPL FSLASH9 
      0033D3 CD 08 DC         [ 4] 1148     CALL DNEGA  
      0033D6                       1149 FSLASH9:
      0033D6 CD 05 78         [ 4] 1150     CALL RFROM  ; exponent 
      0033D9 CD 2C E7         [ 4] 1151     CALL FMERGE 
      0033DC 5B 02            [ 2] 1152     ADDW SP,#CELLL ; drop qs on rstack 
      0033DE 81               [ 4] 1153     RET 
                                   1154 
                                   1155 
                                   1156 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1157 ;   D>F  ( # -- f# )
                                   1158 ;   convert double to float 
                                   1159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0033DF                       1160     _HEADER DTOF,3,"D>F"
      0033DF 33 44                    1         .word LINK 
                           0033E1     2         LINK=.
      0033E1 03                       3         .byte 3  
      0033E2 44 3E 46                 4         .ascii "D>F"
      0033E5                          5         DTOF:
      0033E5 CD 26 54         [ 4] 1161     CALL DSIGN 
      0033E8 CD 06 26         [ 4] 1162     CALL TOR
      0033EB CD 26 43         [ 4] 1163     CALL DABS  
      0033EE                       1164 DTOF1:      
      0033EE CD 31 96         [ 4] 1165     CALL SCALETOM 
      0033F1 CD 05 78         [ 4] 1166     CALL RFROM
      0033F4                       1167     _QBRAN DTOF2 
      0033F4 CD 04 DC         [ 4]    1     CALL QBRAN
      0033F7 33 FC                    2     .word DTOF2
      0033F9 CD 08 DC         [ 4] 1168     CALL DNEGA 
      0033FC                       1169 DTOF2: 
      0033FC CD 08 21         [ 4] 1170     CALL ROT 
      0033FF CD 2C E7         [ 4] 1171     CALL FMERGE 
      003402 81               [ 4] 1172     RET 
                                   1173 
                                   1174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1175 ;   F>D  ( f# -- # )
                                   1176 ;  convert float to double 
                                   1177 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      003403                       1178     _HEADER FTOD,3,"F>D"
      003403 33 E1                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 185.
Hexadecimal [24-Bits]



                           003405     2         LINK=.
      003405 03                       3         .byte 3  
      003406 46 3E 44                 4         .ascii "F>D"
      003409                          5         FTOD:
      003409 CD 2C C5         [ 4] 1179     CALL FSPLIT ; m e 
      00340C CD 08 10         [ 4] 1180     CALL QDUP
      00340F                       1181     _QBRAN FTOD9
      00340F CD 04 DC         [ 4]    1     CALL QBRAN
      003412 34 93                    2     .word FTOD9
      003414 CD 06 26         [ 4] 1182     CALL TOR 
      003417 CD 26 54         [ 4] 1183     CALL DSIGN 
      00341A CD 08 40         [ 4] 1184     CALL NROT 
      00341D CD 26 43         [ 4] 1185     CALL DABS
      003420 CD 05 78         [ 4] 1186     CALL RFROM  
      003423 CD 06 5D         [ 4] 1187     CALL DUPP   
      003426 CD 06 94         [ 4] 1188     CALL ZLESS 
      003429                       1189     _QBRAN FTOD4 
      003429 CD 04 DC         [ 4]    1     CALL QBRAN
      00342C 34 5E                    2     .word FTOD4
                                   1190 ; negative exponent 
      00342E CD 09 30         [ 4] 1191     CALL ABSS 
      003431 CD 06 26         [ 4] 1192     CALL TOR
      003434 20 19            [ 2] 1193     JRA FTOD2  
      003436                       1194 FTOD1:
      003436 CD 08 6B         [ 4] 1195     CALL DDUP 
      003439 CD 28 36         [ 4] 1196     CALL DZEQUAL 
      00343C                       1197     _TBRAN FTOD3 
      00343C CD 04 EA         [ 4]    1     CALL TBRAN 
      00343F 34 56                    2     .word FTOD3 
      003441                       1198     _DOLIT 10 
      003441 CD 04 B3         [ 4]    1     CALL DOLIT 
      003444 00 0A                    2     .word 10 
      003446 CD 26 6E         [ 4] 1199     CALL DSLMOD 
      003449 CD 08 21         [ 4] 1200     CALL ROT 
      00344C                       1201     _DROP
      00344C 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00344F                       1202 FTOD2:      
      00344F                       1203     _DONXT FTOD1
      00344F CD 04 C7         [ 4]    1     CALL DONXT 
      003452 34 36                    2     .word FTOD1 
      003454 20 32            [ 2] 1204     JRA FTOD8   
      003456                       1205 FTOD3: 
      003456 CD 05 78         [ 4] 1206     CALL RFROM 
      003459                       1207     _DROP 
      003459 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00345C 20 2A            [ 2] 1208     JRA FTOD8  
                                   1209 ; positive exponent 
      00345E                       1210 FTOD4:
      00345E CD 06 26         [ 4] 1211     CALL TOR 
      003461 20 20            [ 2] 1212     JRA FTOD6
      003463                       1213 FTOD5:
      003463 CD 08 6B         [ 4] 1214     CALL DDUP 
      003466                       1215     _DOLIT 0XCCCC
      003466 CD 04 B3         [ 4]    1     CALL DOLIT 
      003469 CC CC                    2     .word 0XCCCC 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 186.
Hexadecimal [24-Bits]



      00346B                       1216     _DOLIT 0XCCC  
      00346B CD 04 B3         [ 4]    1     CALL DOLIT 
      00346E 0C CC                    2     .word 0XCCC 
      003470 CD 28 73         [ 4] 1217     CALL DGREAT 
      003473                       1218     _TBRAN FTOD3 
      003473 CD 04 EA         [ 4]    1     CALL TBRAN 
      003476 34 56                    2     .word FTOD3 
      003478                       1219     _DOLIT 10 
      003478 CD 04 B3         [ 4]    1     CALL DOLIT 
      00347B 00 0A                    2     .word 10 
      00347D CD 0C 53         [ 4] 1220     CALL ZERO 
      003480 CD 2A 1E         [ 4] 1221     CALL DSTAR 
      003483                       1222 FTOD6: 
      003483                       1223     _DONXT FTOD5 
      003483 CD 04 C7         [ 4]    1     CALL DONXT 
      003486 34 63                    2     .word FTOD5 
      003488                       1224 FTOD8:
      003488 CD 08 21         [ 4] 1225     CALL ROT 
      00348B                       1226     _QBRAN FTOD9 
      00348B CD 04 DC         [ 4]    1     CALL QBRAN
      00348E 34 93                    2     .word FTOD9
      003490 CD 08 DC         [ 4] 1227     CALL DNEGA
      003493                       1228 FTOD9:          
      003493 81               [ 4] 1229     RET 
                                   1230 
                                   1231 
                                   1232 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1233 ;   F0< ( f# -- f )
                                   1234 ;   true if f#<0
                                   1235 ;;;;;;;;;;;;;;;;;;;;;;;;
      003494                       1236     _HEADER FZLESS,3,"F0<"
      003494 34 05                    1         .word LINK 
                           003496     2         LINK=.
      003496 03                       3         .byte 3  
      003497 46 30 3C                 4         .ascii "F0<"
      00349A                          5         FZLESS:
      00349A CD 2C C5         [ 4] 1237     CALL FSPLIT 
      00349D                       1238     _DROP 
      00349D 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034A0 CD 06 6D         [ 4] 1239     CALL SWAPP 
      0034A3                       1240     _DROP 
      0034A3 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034A6 CD 06 94         [ 4] 1241     CALL ZLESS 
      0034A9 81               [ 4] 1242     RET
                                   1243 
                                   1244 ;;;;;;;;;;;;;;;;;;;;;;;;
                                   1245 ;   F< ( f#1 f#2 -- f )
                                   1246 ; true if f#1 < f#1 
                                   1247 ;;;;;;;;;;;;;;;;;;;;;;;
      0034AA                       1248     _HEADER FLESS,2,"F<"
      0034AA 34 96                    1         .word LINK 
                           0034AC     2         LINK=.
      0034AC 02                       3         .byte 2  
      0034AD 46 3C                    4         .ascii "F<"
      0034AF                          5         FLESS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 187.
Hexadecimal [24-Bits]



      0034AF CD 31 5D         [ 4] 1249     CALL FSUB  
      0034B2 CC 34 9A         [ 2] 1250     JP FZLESS
                                   1251 
                                   1252 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1253 ;   F> ( f#1 f#2 -- f )
                                   1254 ;   true fi f#1>f#2
                                   1255 ;;;;;;;;;;;;;;;;;;;;;;;;;
      0034B5                       1256     _HEADER FGREAT,2,"F>"
      0034B5 34 AC                    1         .word LINK 
                           0034B7     2         LINK=.
      0034B7 02                       3         .byte 2  
      0034B8 46 3E                    4         .ascii "F>"
      0034BA                          5         FGREAT:
      0034BA CD 27 61         [ 4] 1257     CALL DSWAP 
      0034BD CC 34 AF         [ 2] 1258     JP FLESS 
                                   1259 
                                   1260 ;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1261 ;   F= ( f#1 f#2 -- f ) 
                                   1262 ;   true fi f#1==f#2 
                                   1263 ;;;;;;;;;;;;;;;;;;;;;;;;;
      0034C0                       1264     _HEADER FEQUAL,2,"F="
      0034C0 34 B7                    1         .word LINK 
                           0034C2     2         LINK=.
      0034C2 02                       3         .byte 2  
      0034C3 46 3D                    4         .ascii "F="
      0034C5                          5         FEQUAL:
      0034C5 CC 28 52         [ 2] 1265     JP DEQUAL 
                                   1266 
                                   1267 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1268 ;   F0= ( f# -- f )
                                   1269 ;   true if f# is 0.0 
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0034C8                       1271     _HEADER FZEQUAL,3,"F0="
      0034C8 34 C2                    1         .word LINK 
                           0034CA     2         LINK=.
      0034CA 03                       3         .byte 3  
      0034CB 46 30 3D                 4         .ascii "F0="
      0034CE                          5         FZEQUAL:
      0034CE CD 2C C5         [ 4] 1272     CALL FSPLIT 
      0034D1                       1273     _DROP 
      0034D1 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0034D4 CC 28 36         [ 2] 1274     JP DZEQUAL  
                                   1275 
                                   1276 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1277 ;  FNEGATE ( f#1 -- f#2 )
                                   1278 ;  f#2 is negation of f#1 
                                   1279 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      0034D7                       1280     _HEADER FNEGA,7,"FNEGATE"
      0034D7 34 CA                    1         .word LINK 
                           0034D9     2         LINK=.
      0034D9 07                       3         .byte 7  
      0034DA 46 4E 45 47 41 54 45     4         .ascii "FNEGATE"
      0034E1                          5         FNEGA:
      0034E1 CD 2C C5         [ 4] 1281     CALL FSPLIT 
      0034E4 CD 06 26         [ 4] 1282     CALL TOR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 188.
Hexadecimal [24-Bits]



      0034E7 CD 08 DC         [ 4] 1283     CALL DNEGA
      0034EA CD 05 78         [ 4] 1284     CALL RFROM 
      0034ED CD 2C E7         [ 4] 1285     CALL FMERGE 
      0034F0 CD 2C 71         [ 4] 1286     CALL SFN 
      0034F3 81               [ 4] 1287     RET 
                                   1288 
                                   1289 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1290 ;  FABS ( f#1 -- abs(f#1) )
                                   1291 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0034F4                       1292     _HEADER FABS,4,"FABS"
      0034F4 34 D9                    1         .word LINK 
                           0034F6     2         LINK=.
      0034F6 04                       3         .byte 4  
      0034F7 46 41 42 53              4         .ascii "FABS"
      0034FB                          5         FABS:
      0034FB CD 2C C5         [ 4] 1293     CALL FSPLIT 
      0034FE CD 06 26         [ 4] 1294     CALL TOR 
      003501 CD 06 5D         [ 4] 1295     CALL DUPP 
      003504                       1296     _DOLIT 0X80 
      003504 CD 04 B3         [ 4]    1     CALL DOLIT 
      003507 00 80                    2     .word 0X80 
      003509 CD 06 BA         [ 4] 1297     CALL ANDD 
      00350C                       1298     _QBRAN FABS1
      00350C CD 04 DC         [ 4]    1     CALL QBRAN
      00350F 35 14                    2     .word FABS1
      003511 CD 08 DC         [ 4] 1299     CALL DNEGA 
      003514                       1300 FABS1: 
      003514 CD 05 78         [ 4] 1301     CALL RFROM 
      003517 CD 2C E7         [ 4] 1302     CALL FMERGE 
      00351A CD 2C 71         [ 4] 1303     CALL SFN 
      00351D 81               [ 4] 1304     RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 189.
Hexadecimal [24-Bits]



                                   4809 .endif 
                           000000  4810 .if WANT_FLOAT24 
                                   4811         .include "float24.asm"
                                   4812 .endif 
                                   4813 
                                   4814 ;===============================================================
                                   4815 
                           0034F6  4816 LASTN =	LINK   ;last name defined
                                   4817 
                                   4818 ; application code begin here
      003580                       4819 	.bndry 128 ; align on flash block  
      003580                       4820 app_space: 
      003580 00 00 00 00 00 00 00  4821 .word 0,0,0,0
             00
                                   4822 
                                   4823 
                                   4824 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 190.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000939 R   |   6 ABOR1      001496 R
  6 ABOR2      0014B1 R   |   6 ABORQ      00148E R   |   6 ABORT      00147F R
  6 ABRTQ      00177C R   |   6 ABSS       000930 R   |   6 ACCEP      001415 R
  6 ACCEPT_C   000F67 GR  |   6 ACCP1      00141E R   |   6 ACCP2      001444 R
  6 ACCP3      001447 R   |   6 ACCP4      001449 R   |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DRH =  005404 
    ADC_DRL =  005405     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
    ADDWX   =  00001C     |   6 ADJ_CSTR   000FAA R   |   6 ADRADJ     000800 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001767 R   |   6 AGAIN      0016B1 R   |   6 AHEAD      001714 R
  6 ALLOT      0015BF R   |   6 ANDD       0006BA R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000527 R   |   6 ATEXE      000D63 R   |   6 AUTORUN    00015D R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_CSR_=  000004 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     00041D R   |     B19200  =  000003     |   6 B19K2      0003FA R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       0003CB R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       0003D9 R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      00040B R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003E9 R   |   6 BACK1      0013BD R   |   6 BAD_FORM   00262E R
  6 BASE       000723 R   |     BASEE   =  00000A     |   6 BAUD       00042D R
    BCNT    =  000001     |   6 BCOMP      001601 R   |   6 BDIGS      000E5B R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      001693 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001223 R   |   6 BKSP       00138D R
    BKSPP   =  000008     |   6 BLANK      000C46 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0004F8 R
    BTW     =  000001     |   6 BUF2ROW    0022D9 R   |   6 BYE        0000EA R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        000545 R   |   6 CCOMMA     0015E3 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 191.
Hexadecimal [24-Bits]

Symbol Table

    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000BCB R
  6 CELLP      000BBC R   |   6 CELLS      000BDA R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      00100F R
  6 CHAR2      001012 R   |     CHAR_RDY=  00003D     |   6 CHKIVEC    0021C7 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000D96 R   |   6 CMOV2      000DAA R
  6 CMOV3      000DBE R   |   6 CMOVE      000D7A R   |     CNT     =  000001 
    CNT1    =  000006     |     CNT2    =  000005     |     CNTDWN  =  000032 
  6 CNTXT      0007A6 R   |   6 COLD       001CB6 R   |   6 COLD1      001CB6 R
  6 COLON      00196B R   |   6 COMMA      0015CC R   |   6 COMPI      001611 R
    COMPO   =  000040     |   6 COMPONLY   0019B7 R   |   6 CONSTANT   001A2C R
  6 COPYRIGH   001BE8 R   |   6 COUNT      000D16 R   |   6 CPP        0007C2 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         001038 R
  6 CREAT      0019C8 R   |     CRR     =  00000D     |   6 CSTOR      000534 R
    CTRL_X  =  000018     |     D2HI    =  000001     |     D2LO    =  000003 
  6 D2SLASH    00298F R   |   6 D2STAR     0029A6 R   |   6 DABS       002643 R
  6 DABS1      00264B R   |   6 DAT        000CFA R   |     DATSTK  =  001680 
  6 DBLVER     002472 R   |     DBL_SIZE=  000004     |   6 DCLZ       00278F R
  6 DCLZ1      002798 R   |   6 DCLZ4      0027A1 R   |   6 DCLZ8      0027AE R
  6 DCONST     001A61 R   |   6 DDIG       0026AF R   |   6 DDIGS      0026C7 R
  6 DDOT       0026DE R   |   6 DDOT0      0026F2 R   |   6 DDOT1      002708 R
  6 DDROP      000860 R   |   6 DDSLMOD    002B18 R   |   6 DDSTAR3    002A5D R
  6 DDUP       00086B R   |     DEBUG   =  000000     |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000F0B R   |   6 DEPTH      000C95 R
  6 DEQU4      002867 R   |   6 DEQUAL     002852 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGREAT     002873 R   |   6 DGTQ1      000F50 R
  6 DI         0000F8 R   |   6 DIG        000E84 R   |   6 DIGIT      000E1F R
  6 DIGS       000E95 R   |   6 DIGS1      000E95 R   |   6 DIGS2      000EA2 R
  6 DIGTQ      000F1F R   |     DISCOVER=  000000     |     DIVISOR =  000001 
  6 DLESS      00287E R   |   6 DLESS4     002892 R   |   6 DLITER     00294F R
  6 DLSHIFT    0029C2 R   |   6 DLSHIFT1   0029D5 R   |   6 DLSHIFT2   0029EA R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 192.
Hexadecimal [24-Bits]

Symbol Table

    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0008F7 R
  6 DNEGA      0008DC R   |   6 DOCONST    001A4C R   |   6 DOLIT      0004B3 R
  6 DONXT      0004C7 R   |     DOORBELL=  000000     |   6 DOSTR      001048 R
  6 DOT        0010DE R   |   6 DOT1       0010F3 R   |   6 DOTI1      001BB1 R
  6 DOTID      001B9B R   |   6 DOTO1      001526 R   |   6 DOTOK      00150C R
  6 DOTPR      001205 R   |   6 DOTQ       001796 R   |   6 DOTQP      001065 R
  6 DOTR       001073 R   |   6 DOTS       001B3D R   |   6 DOTS1      001B48 R
  6 DOTS2      001B51 R   |   6 DOVAR      000713 R   |   6 DOVER      002976 R
  6 DO_DCONS   001A84 R   |     DP      =  000005     |   6 DPLUS      002B56 R
  6 DRAT       0028E6 R   |   6 DRFROM     0028CE R   |   6 DROP       000653 R
  6 DROT       0027FB R   |   6 DRSHIFT    0029FB R   |   6 DRSHIFT1   002A02 R
  6 DRSHIFT2   002A18 R   |   6 DSIGN      002654 R   |   6 DSIGN1     00265E R
  6 DSLASH     002B47 R   |   6 DSLMOD     00266E R   |   6 DSLMOD3    002689 R
  6 DSLMOD4    002695 R   |   6 DSLMODa    002690 R   |   6 DSLMODb    00269B R
  6 DSSTAR     00273B R   |   6 DSSTAR3    002758 R   |   6 DSTAR      002A1E R
  6 DSTOR      000CE1 R   |   6 DSUB       002B84 R   |   6 DSWAP      002761 R
  6 DTOF       0033E5 R   |   6 DTOF1      0033EE R   |   6 DTOF2      0033FC R
  6 DTOR       0028B0 R   |   6 DUMP       001AF3 R   |   6 DUMP1      001B0A R
  6 DUMP3      001B2C R   |   6 DUMPP      001AC2 R   |   6 DUPP       00065D R
  6 DVARIA     002904 R   |     DVER_MAJ=  000001     |     DVER_MIN=  000000 
  6 DZEQUAL    002836 R   |   6 DZLESS     002899 R   |   6 DZLESS1    0028A3 R
  6 EDIGS      000EC0 R   |   6 EDOT       002D21 R   |   6 EDOT0      002D38 R
  6 EDOT2      002D44 R   |   6 EDOT3      002D5A R   |   6 EDOT4      002D86 R
  6 EDOT5      002DAA R   |   6 EECSTORE   001F78 R   |   6 EEPCP      001D9A R
  6 EEPLAST    001D6D R   |   6 EEPROM     001D55 R   |     EEPROM_B=  004000 
    EEPROM_E=  0043FF     |     EEPROM_R=  000010     |     EEPROM_S=  000400 
  6 EEPRUN     001D84 R   |   6 EEPVP      001DB0 R   |   6 EESTORE    001FC4 R
  6 EE_CCOMM   00228E R   |   6 EE_COMMA   00226D R   |   6 EE_CREAD   001F09 R
  6 EE_READ    001EE7 R   |   6 EI         0000F1 R   |   6 ELSEE      0016EC R
  6 EMIT       00047A R   |     EOL_CR  =  000001     |     EOL_LF  =  000000 
  6 EQ1        00094B R   |   6 EQUAL      00093E R   |   6 ERASE      000DED R
    ERR     =  00001B     |   6 EVAL       00154F R   |   6 EVAL1      00154F R
  6 EVAL2      001568 R   |   6 EXE1       000D71 R   |   6 EXECU      000508 R
    EXP     =  000003     |     EXT     =  000001     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000E47 R   |     F32_MAJO=  000001 
    F32_MINO=  000001     |   6 FABS       0034FB R   |   6 FABS1      003514 R
  6 FADDR      00235B R   |   6 FALGN4     0030BB R   |   6 FALGN6     0030CA R
  6 FALGN7     0030F1 R   |   6 FALGN71    003100 R   |   6 FALGN72    00311C R
  6 FALGN8     00311F R   |   6 FALIGN     003082 R   |   6 FALSE      0008AC R
  6 FARAT      001E1D R   |   6 FARCAT     001E2B R   |   6 FC_XOFF    0004A7 R
  6 FC_XON     000491 R   |   6 FDOT       002DB9 R   |   6 FDOT0      002DF7 R
  6 FDOT1      002DE6 R   |   6 FDOT10     002E4A R   |   6 FDOT2      002E05 R
  6 FDOT3      002E1B R   |   6 FDOT6      002E28 R   |   6 FDOT7      002E2A R
  6 FDOT8      002E32 R   |   6 FDOT9      002E3A R   |   6 FEQUAL     0034C5 R
  6 FER        002BE8 R   |   6 FGREAT     0034BA R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000DCD R   |   6 FILL0      000DDB R
  6 FILL1      000DE3 R   |   6 FIND       0012E9 R   |   6 FIND1      001307 R
  6 FIND2      001335 R   |   6 FIND3      001341 R   |   6 FIND4      001355 R
  6 FIND5      001362 R   |   6 FIND6      001346 R   |   6 FINIT      002BE5 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 193.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_EN=  017FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  010000     |     FLASH_WS=  00480D 
  6 FLESS      0034AF R   |   6 FLOATQ     002EA5 R   |   6 FLOAT_ER   002F29 R
  6 FLOAT_EX   002F3A R   |     FLOAT_SI=  000004     |     FLSI    =  01F400 
  6 FMERGE     002CE7 R   |   6 FMOVE      002366 R   |   6 FMOVE2     002397 R
  6 FNE        002C0B R   |   6 FNEGA      0034E1 R   |   6 FOR        00165B R
  6 FORGET     00018E R   |   6 FORGET1    0001BD R   |   6 FORGET2    000243 R
  6 FORGET4    00024C R   |   6 FORGET6    000205 R   |   6 FOV        002C26 R
  6 FPLUS      00312B R   |   6 FPLUS1     00314B R   |   6 FPSTOR     001D36 R
  6 FPSW       002BDC R   |     FPTR    =  000034     |   6 FREEVAR    000259 R
  6 FREEVAR4   00028F R   |   6 FSLASH     003347 R   |   6 FSLASH1    00337E R
  6 FSLASH8    0033C7 R   |   6 FSLASH9    0033D6 R   |   6 FSPLIT     002CC5 R
  6 FSPLIT1    002CD1 R   |   6 FSPLIT2    002CE1 R   |   6 FSTAR      0032F3 R
  6 FSUB       00315D R   |   6 FSUB1      00317D R   |   6 FTOD       003409 R
  6 FTOD1      003436 R   |   6 FTOD2      00344F R   |   6 FTOD3      003456 R
  6 FTOD4      00345E R   |   6 FTOD5      003463 R   |   6 FTOD6      003483 R
  6 FTOD8      003488 R   |   6 FTOD9      003493 R   |   6 FVER       002BB9 R
  6 FZE        002BF5 R   |   6 FZEQUAL    0034CE R   |   6 FZLESS     00349A R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      000997 R   |   6 GREAT1     0009A2 R
  6 HDOT       0010C2 R   |   6 HERE       000D2D R   |   6 HEX        000EF6 R
  6 HI         001C5F R   |   6 HLD        000793 R   |   6 HOLD       000E6B R
    HSECNT  =  004809     |     I2C_BASE=  005210     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRH=  000006     |     I2C_CCRH=  000007     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00197C R   |   6 IFETCH     001679 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 194.
Hexadecimal [24-Bits]

Symbol Table

  6 IFF        0016C4 R   |   6 IFMOVE     00243F R   |     IMEDD   =  000080 
  6 IMM01      001993 R   |   6 IMMED      00198E R   |   6 INCH       000460 R
  6 INC_FPTR   001EB4 R   |   6 INITOFS    001944 R   |   6 INN        000741 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      0014EE R   |   6 INTER      0014C4 R
  6 INTGR_FM   002602 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0008B9 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      001893 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KEY=  000055     |     IWDG_KEY=  0000CC     |     IWDG_KEY=  0000AA 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JFETCH     001684 R   |     JPIMM   =  0000CC     |   6 JSRC       0018E8 R
  6 JSRC1      00190B R   |   6 JSRC2      00192E R   |   6 KEY        000FBB R
  6 KTAP       0013DA R   |   6 KTAP1      0013FD R   |   6 KTAP2      001400 R
  6 LAST       0007D2 R   |   6 LASTN   =  0034F6 R   |   6 LBRAC      0014FB R
    LED_BIT =  000005     |     LED_CR1 =  00500D     |     LED_CR2 =  00500E 
    LED_DDR =  00500C     |     LED_MASK=  000020     |     LED_PORT=  00500A 
  6 LESS       00096A R   |     LF      =  00000A     |   6 LINK    =  0034F6 R
  6 LITER      001633 R   |   6 LOCAL      000598 R   |   6 LOCK       001EA0 R
  6 LSCALE     002F43 R   |   6 LSHIFT     000C05 R   |   6 LSHIFT1    000C0E R
  6 LSHIFT4    000C16 R   |   6 LT1        000975 R   |     M8U     =  000003 
    MASKK   =  001F7F     |   6 MAX        0009AF R   |   6 MAX1       0009B9 R
    MAX_MANT=  7FFFFF     |   6 MIN        0009C3 R   |   6 MIN1       0009CD R
  6 MMOD1      000A7C R   |   6 MMOD2      000A90 R   |   6 MMOD3      000AA7 R
  6 MMSM0      000A0C R   |   6 MMSM1      000A1C R   |   6 MMSM3      000A20 R
  6 MMSM4      000A2C R   |   6 MMSMa      000A27 R   |   6 MMSMb      000A32 R
  6 MMSTA1     003224 R   |   6 MMSTA2     00322F R   |   6 MMSTA3     00323A R
  6 MMSTA4     0032A5 R   |   6 MMSTA5     0032B7 R   |   6 MMSTA6     0032CD R
  6 MMSTA7     0032EA R   |   6 MMSTAR     003219 R   |   6 MODD       000B02 R
  6 MONE       000C6C R   |     MS      =  000030     |   6 MSEC       000305 R
  6 MSMOD      000A5F R   |   6 MSTA1      000B94 R   |   6 MSTAR      000B71 R
    NAFR    =  004804     |   6 NAMEQ      001382 R   |   6 NAMET      001293 R
    NBIT    =  000002     |     NCLKOPT =  004808     |   6 NDROT      0027BF R
  6 NEGAT      0008CA R   |   6 NEG_SIGN   000FA8 R   |   6 NEX1       0004D4 R
  6 NEXT       00166A R   |   6 NEXT_CHA   000F59 GR  |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 195.
Hexadecimal [24-Bits]

Symbol Table

    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NO_ADJ     000FB0 R   |   6 NRAT       0005E3 R   |   6 NRDROP     0005BF R
  6 NROT       000840 R   |   6 NRSTO      000602 R   |   6 NSIGN      000F8D R
  6 NTIB       000751 R   |     NUBC    =  004802     |     NUCLEO_8=  000001 
    NUCLEO_8=  000000     |     NUCLEO_8=  000001     |   6 NUFQ       000FD3 R
  6 NUFQ1      000FEC R   |   6 NUMBQ      00256E R   |   6 NUMQ8      002633 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     0007F7 R   |     OFS     =  000005     |     OFS_UART=  000002 
    OFS_UART=  000003     |     OFS_UART=  000004     |     OFS_UART=  000005 
    OFS_UART=  000006     |     OFS_UART=  000007     |     OFS_UART=  000008 
    OFS_UART=  000009     |     OFS_UART=  000001     |     OFS_UART=  000009 
    OFS_UART=  00000A     |     OFS_UART=  000000     |   6 ONE        000C5E R
  6 ONEM       000BF4 R   |   6 ONEP       000BE7 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTIMIZE=  000001     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000061 R   |   6 ORR        0006CE R
  6 OUTPUT     00047F R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |     OVBIT   =  000004 
  6 OVER       000685 R   |   6 OVERT      001861 R   |     OVF_HI  =  000001 
    OVF_LO  =  000002     |     PA      =  000000     |   6 PACKS      000DFE R
  6 PAD        000D3E R   |   6 PAREN      001214 R   |   6 PARS       00110D R
  6 PARS1      001138 R   |   6 PARS2      001163 R   |   6 PARS3      001166 R
  6 PARS4      00116F R   |   6 PARS5      001192 R   |   6 PARS6      0011A7 R
  6 PARS7      0011B6 R   |   6 PARS8      0011C5 R   |   6 PARSE      0011D6 R
  6 PARSE_FA   002E84 R   |   6 PARSE_SU   002E91 R   |   6 PAUSE      000315 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001AD5 R   |   6 PDUM2      001AE6 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000CAC R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       000880 R
  6 PNAM1      001800 R   |   6 POP_EXP    00301C R   |   6 PRESE      001577 R
  6 PRINT_LI   001C1A R   |   6 PRINT_VE   001C2F R   |     PROD1   =  000024 
    PROD2   =  000026     |     PROD3   =  000028     |   6 PROTECTE   000235 R
  6 PSTOR      000CC3 R   |     PTR16   =  000035     |     PTR8    =  000036 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 196.
Hexadecimal [24-Bits]

Symbol Table

  6 PTRPLUS    001ECC R   |   6 QBRAN      0004DC R   |   6 QDUP       000810 R
  6 QDUP1      00081A R   |     QHI     =  000007     |   6 QKEY       000455 R
    QLO     =  000009     |   6 QSTAC      001532 R   |   6 QUERY      00145A R
  6 QUEST      001100 R   |   6 QUIT       001594 R   |   6 QUIT1      00159C R
  6 QUIT2      00159F R   |   6 RAM2EE     002307 R   |     RAMBASE =  000000 
  6 RAMLAST    0007E5 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RANDOM     0002B3 R   |   6 RAT        000589 R
  6 RBRAC      0018D5 R   |     REMDR   =  000001     |   6 REPEA      001747 R
  6 RFREE      0022EE R   |   6 RFROM      000578 R   |     ROP     =  004800 
  6 ROT        000821 R   |   6 ROW2BUF    0022B0 R   |     ROWBUFF =  001680 
    RP0     =  00002E     |   6 RPAT       000555 R   |     RPP     =  0017FF 
  6 RPSTO      000562 R   |   6 RSCALE     002F5E R   |   6 RSHIFT     000C21 R
  6 RSHIFT1    000C2A R   |   6 RSHIFT4    000C32 R   |     RST_SR  =  0050B3 
    RX_CHAR =  00003C     |   6 SAME1      0012B1 R   |   6 SAME2      0012DA R
  6 SAMEQ      0012A9 R   |   6 SCAL1      0031B5 R   |   6 SCAL2      0031D6 R
  6 SCALDN2    002FE2 R   |   6 SCALDN3    002FE5 R   |   6 SCALEDOW   002FB6 R
  6 SCALETOM   003196 R   |   6 SCALETOM   002FEE R   |   6 SCALETOM   00302E R
  6 SCALETOM   003025 R   |   6 SCALEUP    002F7F R   |   6 SCALEUP2   002FB2 R
  6 SCALEUP3   002FB5 R   |   6 SCOM1      001835 R   |   6 SCOM2      001838 R
  6 SCOMP      001817 R   |   6 SEED       00029A R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      001871 R   |   6 SETISP     000104 R
  6 SET_FPSW   002CBE R   |   6 SET_RAML   001A15 R   |   6 SFN        002C71 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SFV        002C9F R
  6 SFZ        002C40 R   |   6 SIGN       000EAA R   |   6 SIGN1      000EBA R
  6 SLASH      000B0C R   |   6 SLMOD      000AAF R   |   6 SLMOD1     000AEC R
  6 SLMOD8     000AF9 R   |   6 SNAME      0017CA R   |     SP0     =  00002C 
  6 SPACE      000FF5 R   |   6 SPACS      001004 R   |   6 SPAT       00063D R
    SPI_CR1 =  005200     |     SPI_CR1_=  000003     |     SPI_CR1_=  000000 
    SPI_CR1_=  000001     |     SPI_CR1_=  000007     |     SPI_CR1_=  000002 
    SPI_CR1_=  000006     |     SPI_CR2 =  005201     |     SPI_CR2_=  000007 
    SPI_CR2_=  000006     |     SPI_CR2_=  000005     |     SPI_CR2_=  000004 
    SPI_CR2_=  000002     |     SPI_CR2_=  000000     |     SPI_CR2_=  000001 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_SR_B=  000007 
    SPI_SR_C=  000004     |     SPI_SR_M=  000005     |     SPI_SR_O=  000006 
    SPI_SR_R=  000000     |     SPI_SR_T=  000001     |     SPI_SR_W=  000003 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      00064A R   |   6 SSMOD      000B9D R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000B65 R   |   6 STASL      000BAE R
  6 STEXP1     002CF0 R   |   6 STEXP2     002D0D R   |   6 STOD       0008FF R
  6 STORE      000515 R   |   6 STR        000ED8 R   |   6 STRCQ      00163B R
  6 STRQ       001789 R   |   6 STRQP      001061 R   |   6 SUBB       000916 R
  6 SWAPP      00066D R   |     SWIM_CSR=  007F80     |   6 TAP        0013C4 R
  6 TBOOT      001CAA R   |   6 TBRAN      0004EA R   |   6 TBUF       000761 R
    TBUFFBAS=  001680     |   6 TCHAR      000C7D R   |   6 TEMP       000732 R
  6 TEVAL      000784 R   |   6 TFLASH     000773 R   |   6 THENN      0016D9 R
  6 TIB        000D4F R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0015AB R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 197.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 198.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   000345 R
  6 TIMER      00032F R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001B6B R   |   6 TNAM3      001B89 R   |   6 TNAM4      001B8F R
  6 TNAME      001B68 R   |   6 TOFLASH    000372 R   |   6 TOKEN      001285 R
  6 TOR        000626 R   |   6 TORAM      0003B2 R   |   6 TRUE       00089B R
    TRUEE   =  00FFFF     |   6 TWOSL      000C39 R   |   6 TWOSTAR    000BDA R
  6 TYPE1      001024 R   |   6 TYPE2      00102A R   |   6 TYPES      00101F R
  6 Timer4Ha   000001 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  005000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000002 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00500F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  005242     |     UART_BRR=  005243 
    UART_CR1=  005244     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  005245     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  005241     |     UART_PCK=  000003 
    UART_POR=  00500F     |     UART_POR=  005012     |     UART_POR=  005013 
    UART_POR=  005011     |     UART_POR=  005010     |     UART_POR=  00500F 
    UART_RX_=  000006     |     UART_SR =  005240     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UART_TX_=  000005     |     UBASE   =  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 199.
Hexadecimal [24-Bits]

Symbol Table

    UBC     =  004801     |     UCNTXT  =  000016     |     UCP     =  00001A 
    UCTIB   =  00000E     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDIV10     0031D7 R
  6 UDOT       0010AE R   |   6 UDOTR      00108E R   |   6 UDSLA1     002AAF R
  6 UDSLA2     002ABD R   |   6 UDSLA3     002AC5 R   |   6 UDSLA4     002AD4 R
  6 UDSLA8     002AFE R   |   6 UDSLMOD    002A67 R   |   6 UDSSTAR    00271A R
  6 UDU8STAR   00249E R   |   6 UEND       00005F R   |     UFPSW   =  000008 
  6 UGREAT     000981 R   |   6 UGREAT1    00098C R   |     UHLD    =  000014 
    UINN    =  00000C     |     UINTER  =  000012     |     ULAST   =  00001C 
  6 ULES1      00095F R   |   6 ULESS      000954 R   |   6 UMMOD      0009F5 R
  6 UMOD10     00318A R   |   6 UMSTA      000B1B R   |   6 UMUL10     003315 R
  6 UNIQ1      0017C7 R   |   6 UNIQU      0017A8 R   |   6 UNLKEE     001E3A R
  6 UNLKFL     001E59 R   |   6 UNLOCK     001E78 R   |   6 UNTIL      00169E R
    UOFFSET =  00001E     |   6 UPDATCP    001DF3 R   |   6 UPDATLAS   001DCA R
  6 UPDATPTR   0023FA R   |   6 UPDATRUN   001DE2 R   |   6 UPDATVP    001E0A R
  6 UPL1       00070F R   |   6 UPLUS      0006F8 R   |     UPP     =  000006 
  6 UPPER      001248 R   |   6 UPPER1     00126B R   |   6 UPPER2     001274 R
    URLAST  =  000022     |   6 USLMOD     000A44 R   |     UTFLASH =  000020 
    UTIB    =  000010     |     UTMP    =  00000A     |   6 UTYP1      001AA5 R
  6 UTYP2      001AB4 R   |   6 UTYPE      001AA0 R   |     UVP     =  000018 
  6 UZERO      000043 R   |   6 UartRxHa   000012 R   |   6 VARIA      0019E2 R
    VARS_SIZ=  00000A     |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        0007B4 R   |     VSIZE   =  000006 
    WANT_CON=  000000     |     WANT_DOU=  000001     |     WANT_FLO=  000001 
    WANT_FLO=  000000     |     WANT_SCA=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00172D R
  6 WITHI      0009DA R   |   6 WORDD      00122E R   |   6 WORDS      001BC5 R
  6 WORS1      001BCB R   |   6 WORS2      001BE7 R   |   6 WR_BYTE    001F23 R
  6 WR_WORD    001F48 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  008000     |     XOFF    =  000013     |     XON     =  000011 
  6 XORR       0006E3 R   |     XTEMP   =  000024     |     YTEMP   =  000026 
    YTMP    =  000003     |     ZBIT    =  000001     |   6 ZEQ1       002846 R
  6 ZEQU1      0006B0 R   |   6 ZEQUAL     0006A6 R   |   6 ZERO       000C53 R
  6 ZL1        00069D R   |   6 ZLESS      000694 R   |   6 app_spac   003580 R
  6 baudrate   0003B8 R   |   6 block_er   00200E R   |   6 clear_ra   000031 R
  6 clock_in   00007C R   |   6 copy_buf   00206E R   |   6 copy_buf   00208D R
  6 copy_pro   00208D R   |   6 do2lit     00295A R   |   6 erase_fl   002030 R
  6 fmove_do   0023E3 R   |   6 main       00002E R   |   6 next_row   0023A0 R
  6 no_move    0023EA R   |   6 parse_d2   002543 R   |   6 parse_d4   002557 R
  6 parse_d5   002563 R   |   6 parse_di   0024FA R   |   6 parse_ex   002E5F R
  6 pristine   00210E R   |   6 proceed_   002033 R   |   6 putc       00047F R
  6 reboot     00035C R   |   6 reset_mc   000027 R   |   6 reset_ve   002175 R
  6 row_eras   001FEE R   |   6 row_eras   002047 R   |   6 row_eras   00206E R
  6 set_opti   0020E2 R   |   6 set_vect   002216 R   |     u1hi    =  000002 
    u1lo    =  000003     |     u2hi    =  000000     |     u2lo    =  000001 
  6 uart_ini   000090 R   |   6 write_ro   0020B2 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 200.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   3588   flags    0

