ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 ;-------------------------------------------------------------
                                     21 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                     22 ;  assemble using sdasstm8
                                     23 ;  implemented on NUCLEO-8S208RB board
                                     24 ;  Adapted by picatout 2019/10/27
                                     25 ;  https://github.com/picatout/stm8_nucleo/eForth
                                     26 ;--------------------------------------------------------------
                                     27 	.module EFORTH
                                     28          .optsdcc -mstm8
                                                .include "inc/macros.inc" 
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;--------------------------------------
                                        ;   console Input/Output module
                                        ;   DATE: 2019-12-11
                                        ;    
                                        ;   General usage macros.   
                                        ;
                                        ;--------------------------------------
                                        
                                            ; reserve space on stack
                                            ; for local variabls
                                            .macro _vars n 
                                            
                                            ; declare ARG_OFS for arguments 
                                            ; displacement on stack. This 
                                            ; value depend on local variables 
                                            ; size.
                                            .macro _argofs n 
                                        
                                            ; declare a function argument 
                                            ; position relative to stack pointer 
                                            ; _argofs must be called before it.
                                            .macro _arg name ofs 
                                        
                                            ; macro to create dictionary header record
                                            .macro _HEADER label,len,name 
                                        
                                            ; runtime literal 
                                            .macro _DOLIT value 
                                        
                                            ; branch if TOS<>0
                                            ; TBRANCH 
                                            .macro _TBRAN target 
                                            
                                            ; branch if TOS==0 
                                            ; 0BRANCH 
                                            .macro _QBRAN target 
                                        
                                            ; uncondittionnal BRANCH 
                                            .macro _BRAN target 
                                        
                                            ; run time NEXT 
                                            .macro _DONXT target 
                                        
                                            ; drop TOS 
                                            .macro _DROP 
                                          
                                           ; drop a double 
                                           .macro _DDROP 
                                        
                                                .include "inc/config.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                 
                                        
                                        ; select end of line character
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; file: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; file: ctable.asm 
                                 
                                        
                                        ; include double library 
                                 
                                        
                                        ; to include 32 bits  
                                        ; floating point library
                                        ; require double library
                                        ; file: float.asm   
                                 
                                        
                                        ; to include 24 bits 
                                        ; floating point library
                                        ; file: float24.asm 
                                 
                                        
                                        ; set to 1 to make vocabulary 
                                        ; case sensitive 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                 
                                        	.include "inc/stm8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;; Copyright Jacques Deschênes 2019,2020,2021 
                                        ;; This file is part of stm32_eforth  
                                        ;;
                                        ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                        ;;     it under the terms of the GNU General Public License as published by
                                        ;;     the Free Software Foundation, either version 3 of the License, or
                                        ;;     (at your option) any later version.
                                        ;;
                                        ;;     stm32_eforth is distributed in the hope that it will be useful,
                                        ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                        ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;;     GNU General Public License for more details.
                                        ;;
                                        ;;     You should have received a copy of the GNU General Public License
                                        ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                        ;;;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                 
                                        
                                        ; port used by  UART1
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; clock enable bit 
                                 
                                        
                                        ; uart1 registers 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        .endif
                                        
                                 
                                        NUCLEO_8S20X=1 
                                        	.include "inc/stm8s207.inc"
                                        	.include "inc/nucleo_8s207.inc"
                                        .endif 
                                        
                                        
                                 
                                        NUCLEO_8S20X=0
                                        	.include "inc/stm8s105.inc"
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                        
                                        	
                                         
                                        
                                        
                                        
                                     32 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     34 
                                     35 ;===============================================================
                                     36 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     37 ;  Date: 2020-06-07 
                                     38 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     39 ;  Date: 2019-10-26
                                     40 ;  Changes to memory map:
                                     41 ;       0x16f0  Data Stack, growing downward
                                     42 ;       0x1700  Terminal input buffer TIB
                                     43 ;       0x17ff  Return Stack, growing downard
                                     44 ;================================================================
                                     45 ;       STM8EF, Version 2.1, 13 July
                                     46 ;               Implemented on STM8S-Discovery Board.
                                     47 ;               Assembled by ST VisualDevelop STVD 
                                     48 ;               Bootup on internal 2 MHz clock
                                     49 ;               Switch to external 16 MHz crystal clock
                                     50 ;
                                     51 ; FORTH Virtual Machine:
                                     52 ; Subroutine threaded model
                                     53 ; SP Return stack pointer
                                     54 ; X Data stack pointer
                                     55 ; A,Y Scratch pad registers
                                     56 ;
                                     57 ; Memory Map:
                                     58 ; 0x0 RAM memory, system variables
                                     59 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     60 ; 0x780 Data stack, growing downward
                                     61 ; 0x790 Terminal input buffer TIB
                                     62 ; 0x7FF Return stack, growing downward
                                     63 ; 0x8000 Interrupt vector table
                                     64 ; 0x8080 FORTH startup code
                                     65 ; 0x80E7 Start of FORTH dictionary in ROM
                                     66 ; 0x9584 End of FORTH dictionary
                                     67 ;
                                     68 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     69 ;                  use UART1 instead of UART2 for communication with user.
                                     70 ;                  UART1 is available as ttyACM* device via USB connection.
                                     71 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     72 ;                  and MSEC word that return MS value.
                                     73 ;
                                     74 ;       EF12, Version 2.1, 18apr00cht
                                     75 ;               move to 8000H replacing WHYP.
                                     76 ;               copy interrupt vectors from WHYPFLSH.S19
                                     77 ;               to EF12.S19 before flashing
                                     78 ;               add TICKS1 and DELAY1 for motor stepping
                                     79 ;
                                     80 ;       EF12, 02/18/00, C. H. Ting
                                     81 ;       Adapt 86eForth v2.02 to 68HC12.
                                     82 ;               Use WHYP to seed EF12.ASM
                                     83 ;               Use AS12 native 68HC12 assembler:
                                     84 ;               as12 ef12.asm >ef12.lst
                                     85 ;       EF12A, add ADC code, 02mar00cht
                                     86 ;       EF12B, 01mar00cht
                                     87 ;               stack to 0x78, return stack to 0xf8.
                                     88 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     89 ;               add PWM registers
                                     90 ;               add SPI registers and code
                                     91 ;       EF12C, 12mar00cht
                                     92 ;               add MAX5250 D/A converter
                                     93 ;       EF12D, 15mar00cht
                                     94 ;               add all the Lexel interface words
                                     95 ;       EF12E, 18apr00cht, save for reference
                                     96 ;
                                     97 ;       Copyright (c) 2000
                                     98 ;       Dr. C. H. Ting
                                     99 ;       156 14th Avenue
                                    100 ;       San Mateo, CA 94402
                                    101 ;       (650) 571-7639
                                    102 ;
                                    103 
                                    104       
                                    105 ;*********************************************************
                                    106 ;	Assembler constants
                                    107 ;*********************************************************
                           000000   108 RAMBASE =	0x0000	   ;ram base
                           000001   109 .if NUCLEO_8S20X 
                           0017FF   110 STACK   =	0x17FF 	;system (return) stack empty 
                           001680   111 DATSTK  =	0x1680	;data stack  empty
                           001680   112 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   113 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000   114 .else ; DISCOVERY
                                    115 STACK   =	0x7FF 	;system (return) stack empty 
                                    116 DATSTK  =	0x680	;data stack  empty
                                    117 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                    118 TIBBASE =       0X700  ; transaction input buffer addr.
                                    119 .endif
                                    120 
                                    121 ;; Memory allocation
                           000006   122 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   123 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   124 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   125 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   126 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   127 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   128 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    129 
                                    130 ; user variables constants 
                           000006   131 UBASE = UPP       ; numeric base 
                           000008   132 UFPSW = UBASE+2  ; floating point state word 
                           00000A   133 UTMP = UFPSW+2    ; temporary storage
                           00000C   134 UINN = UTMP+2     ; >IN tib pointer 
                           00000E   135 UCTIB = UINN+2    ; tib count 
                           000010   136 UTIB = UCTIB+2    ; tib address 
                           000012   137 UINTER = UTIB+2   ; interpreter vector 
                           000014   138 UHLD = UINTER+2   ; hold 
                           000016   139 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000018   140 UVP = UCNTXT+2    ; variable pointer 
                           00001A   141 UCP = UVP+2      ; code pointer
                           00001C   142 ULAST = UCP+2    ; last dictionary pointer 
                           00001E   143 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   144 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000022   145 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    146 
                                    147 ;******  System Variables  ******
                           000024   148 XTEMP	=	URLAST +2;address called by CREATE
                           000026   149 YTEMP	=	XTEMP+2	;address called by CREATE
                           000024   150 PROD1 = XTEMP	;space for UM*
                           000026   151 PROD2 = PROD1+2
                           000028   152 PROD3 = PROD2+2
                           00002A   153 CARRY = PROD3+2
                           00002C   154 SP0	= CARRY+2	;initial data stack pointer
                           00002E   155 RP0	= SP0+2		;initial return stack pointer
                           000030   156 MS    =   RP0+2         ; millisecond counter 
                           000032   157 CNTDWN =  MS+2          ; count down timer 
                           000034   158 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000035   159 PTR16 = FPTR+1          ; middle byte of farptr 
                           000036   160 PTR8 = FPTR+2           ; least byte of farptr 
                           000038   161 SEEDX = PTR8+2          ; PRNG seed X 
                           00003A   162 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    163 
                                    164 ; EEPROM persistant data  
                           004000   165 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   166 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   167 APP_CP = APP_RUN+2     ; free application space pointer 
                           004006   168 APP_VP = APP_CP+2      ; free data space pointer 
                                    169 
                                    170 
                                    171 ;***********************************************
                                    172 ;; Version control
                                    173 
                           000004   174 VER     =     4         ;major release version
                           000000   175 EXT     =     0         ;minor extension
                                    176 
                                    177 ;; Constants
                                    178 
                           00FFFF   179 TRUEE   =     0xFFFF      ;true flag
                                    180 
                           000040   181 COMPO   =     0x40     ;lexicon compile only bit
                           000080   182 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   183 MASKK   =     0x1F7F  ;lexicon bit mask
                                    184 
                           000002   185 CELLL   =     2       ;size of a cell
                           00000A   186 BASEE   =     10      ;default radix
                           000008   187 BKSPP   =     8       ;back space
                           00000A   188 LF      =     10      ;line feed
                           00000D   189 CRR     =     13      ;carriage return
                           000011   190 XON     =     17
                           000013   191 XOFF    =     19
                           00001B   192 ERR     =     27      ;error escape
                           000027   193 TIC     =     39      ;tick
                           0000CD   194 CALLL   =     0xCD     ;CALL opcodes
                           000080   195 IRET_CODE =   0x80    ; IRET opcode 
                           00001C   196 ADDWX   =     0x1C    ; opcode for ADDW X,#word  
                           0000CC   197 JPIMM   =     0xCC    ; JP addr opcode 
                                    198 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    199         .macro _ledon
                                    200             bset LED_PORT,#LED_BIT
                                    201         .endm
                                    202 
                                    203         .macro _ledoff
                                    204             bres LED_PORT,#LED_BIT
                                    205         .endm
                                    206 
                                    207 ;**********************************************************
                                    208         .area DATA (ABS)
      000000                        209         .org RAMBASE 
                                    210 ;**********************************************************
                                    211 
                                    212 ;**********************************************************
                                    213         .area SSEG (ABS) ; STACK
      001700                        214         .org 0x1700
      001700                        215         .ds 256 
                                    216 ; space for DATSTK,TIB and STACK         
                                    217 ;**********************************************************
                                    218 
                                    219 ;**********************************************************
                                    220         .area HOME ; vectors table
                                    221 ;**********************************************************
      000000 82 00 00 16            222 	int main	        ; reset
      000004 82 00 00 00            223 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            224 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            225 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            226 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            227 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            228 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            229 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            230 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            231 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            232 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            233 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            234 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            235 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            236 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            237 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            238 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            239 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            240 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            241 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            242 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            243 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            244 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            245 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            246 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            247 	int Timer4Handler	; irq23
      000068 82 00 00 00            248 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            249 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            250 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            251 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            252 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            253 	int NonHandledInterrupt	; irq29
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    254 
                                    255 ;**********************************************************
                                    256         .area CODE
                                    257 ;**********************************************************
                                    258 
                                    259 ; non handled interrupt reset MCU
      000000                        260 NonHandledInterrupt:
      000000 A6 80            [ 1]  261         ld a, #0x80
      000002 C7 50 D1         [ 1]  262         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    263 	;iret
                                    264 
                                    265 ; used for milliseconds counter 
                                    266 ; MS is 16 bits counter 
      000005                        267 Timer4Handler:
      000005 72 5F 53 42      [ 1]  268 	clr TIM4_SR 
      000009 BE 30            [ 2]  269         ldw x,MS 
      00000B 5C               [ 1]  270         incw x 
      00000C BF 30            [ 2]  271         ldw MS,x
      00000E BE 32            [ 2]  272         ldw x,CNTDWN 
      000010 27 03            [ 1]  273         jreq 1$
      000012 5A               [ 2]  274         decw x 
      000013 BF 32            [ 2]  275         ldw CNTDWN,x 
      000015                        276 1$:         
      000015 80               [11]  277         iret 
                                    278 
                                    279 
                                    280 ;; Main entry points and COLD start data
      000016                        281 main:
                                    282 ; clear all RAM
      000016 AE 00 00         [ 2]  283 	ldw X,#RAMBASE
      000019                        284 clear_ram0:
      000019 7F               [ 1]  285 	clr (X)
      00001A 5C               [ 1]  286 	incw X
      00001B A3 17 FF         [ 2]  287 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  288 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  289         ldw x,#RPP
      000023 94               [ 1]  290         ldw sp,x
                                    291 ; set SEEDX and SEEDY to 1 
      000024 3C 39            [ 1]  292         inc SEEDX+1 
      000026 3C 3B            [ 1]  293         inc SEEDY+1          
      000028 CC 00 49         [ 2]  294 	jp ORIG
                                    295 
                                    296 ; COLD initialize these variables.
      00002B                        297 UZERO:
      00002B 00 0A                  298         .word      BASEE   ;BASE
      00002D 00 00                  299         .word      0       ; floating point state 
      00002F 00 00                  300         .word      0       ;tmp
      000031 00 00                  301         .word      0       ;>IN
      000033 00 00                  302         .word      0       ;#TIB
      000035 17 00                  303         .word      TIBB    ;TIB
      000037 15 34                  304         .word      INTER   ;'EVAL
      000039 00 00                  305         .word      0       ;HLD
      00003B 25 77                  306         .word      LASTN  ;CNTXT pointer
      00003D 00 80                  307         .word      VAR_BASE   ;variables free space pointer 
      00003F 26 00                  308         .word      app_space ; FLASH free space pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000041 25 77                  309         .word      LASTN   ;LAST
      000043 00 00                  310         .word      0        ; OFFSET 
      000045 00 00                  311         .word      0       ; TFLASH
                                    312 ;       .word      0       ; URLAST   
      000047 00 00                  313 UEND:   .word      0
                                    314 
      000049                        315 ORIG:   
                                    316 ; initialize SP
      000049 AE 17 FF         [ 2]  317         LDW     X,#STACK  ;initialize return stack
      00004C 94               [ 1]  318         LDW     SP,X
      00004D BF 2E            [ 2]  319         LDW     RP0,X
      00004F AE 16 80         [ 2]  320         LDW     X,#DATSTK ;initialize data stack
      000052 BF 2C            [ 2]  321         LDW     SP0,X
                           000001   322 .if NUCLEO_8S20X|DISCOVERY         
                                    323 ; initialize USER LED on board 
                                    324 ; added by Picatout 
      000054 72 1A 50 0D      [ 1]  325         bset LED_CR1,#LED_BIT
      000058 72 1A 50 0E      [ 1]  326         bset LED_CR2,#LED_BIT
      00005C 72 1A 50 0C      [ 1]  327         bset LED_DDR,#LED_BIT
                                    328 .endif 
      000060                        329         _ledoff
      000060 72 1B 50 0A      [ 1]    1             bres LED_PORT,#LED_BIT
                                    330 ; initialize clock to HSI
                                    331 ; no divisor 16Mhz 
                                    332 ; Added by Picatout 
      000064                        333 clock_init:
      000064 72 5F 50 C6      [ 1]  334         clr CLK_CKDIVR
      000068 72 12 50 C5      [ 1]  335 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   336 .if NUCLEO_8S20X|DOORBELL
      00006C 35 E1 50 C4      [ 1]  337 	mov CLK_SWR,#CLK_SWR_HSI ; 16 Mhz internal 
                           000000   338 .else ; DISCOVERY as 16Mhz crystal
                                    339 	mov CLK_SWR,#CLK_SWR_HSE
                                    340 .endif 
      000070 C6 50 C4         [ 1]  341 	ld a,CLK_SWR
      000073 C1 50 C3         [ 1]  342 1$:	cp a,CLK_CMSR
      000076 26 FB            [ 1]  343 	jrne 1$
                                    344         
                                    345 ; initialize UART, 115200 8N1
                           000001   346 .if NUCLEO_8S20X|DISCOVERY
      000078                        347 uart_init:
                                    348 ;	bset CLK_PCKENR1,#UART_PCKEN
                                    349 	; configure tx pin
      000078 72 1A 50 02      [ 1]  350 	bset UART_PORT_DDR,#UART_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  351 	bset UART_PORT_CR1,#UART_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  352 	bset UART_PORT_CR2,#UART_TX_PIN ; fast output
                                    353 ; baud rate 115200 Fmaster=16Mhz  16000000/115200=139=0x8b
                                    354 ; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    355 ; 1) check clock source, HSI at 16Mhz or HSE at 8Mhz  
      000084 A6 E1            [ 1]  356 	ld a,#CLK_SWR_HSI
      000086 C1 50 C3         [ 1]  357 	cp a,CLK_CMSR 
      000089 27 0A            [ 1]  358 	jreq 2$ 
      00008B                        359 1$: ; 8 Mhz 	
      00008B 35 05 52 33      [ 1]  360 	mov UART_BRR2,#0x05 ; must be loaded first
      00008F 35 04 52 32      [ 1]  361 	mov UART_BRR1,#0x4
      000093 20 08            [ 2]  362 	jra 3$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000095                        363 2$: ; 16 Mhz 	
      000095 35 0B 52 33      [ 1]  364 	mov UART_BRR2,#0x0b ; must be loaded first
      000099 35 08 52 32      [ 1]  365 	mov UART_BRR1,#0x08
      00009D                        366 3$:
      00009D 72 5F 52 31      [ 1]  367         clr UART_DR
      0000A1 35 0C 52 35      [ 1]  368 	mov UART_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN));
      0000A5 72 10 52 35      [ 1]  369 	bset UART_CR2,#UART_CR2_SBK
      0000A9 72 0D 52 30 FB   [ 2]  370         btjf UART_SR,#UART_SR_TC,.
                                    371 .endif 
                                    372 ; initialize timer4, used for millisecond interrupt  
      0000AE 35 07 53 45      [ 1]  373 	mov TIM4_PSCR,#7 ; prescale 128  
      0000B2 35 7D 53 46      [ 1]  374 	mov TIM4_ARR,#125 ; set for 1msec.
      0000B6 35 05 53 40      [ 1]  375 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      0000BA 72 10 53 41      [ 1]  376 	bset TIM4_IER,#TIM4_IER_UIE 
                                    377 ; set TIM4 interrupt priority to highest
      0000BE A6 3F            [ 1]  378         ld a,#~(IPR_MASK<<6)
      0000C0 C4 7F 75         [ 1]  379         and a,ITC_SPR6
      0000C3 AA C0            [ 1]  380         or a,#(IPR3<<6)
      0000C5 C7 7F 75         [ 1]  381         ld ITC_SPR6,a 
      0000C8 9A               [ 1]  382         rim
      0000C9 CC 1C FF         [ 2]  383         jp  COLD   ;default=MN1
                                    384 
                                    385 
                           000000   386         LINK = 0  ; used by _HEADER macro 
                                    387 
                                    388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
                                    389 ;; place MCU in sleep mode with
                                    390 ;; halt opcode 
                                    391 ;; BYE ( -- )
                                    392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000CC                        393         _HEADER BYE,3,"BYE"
      0000CC 00 00                    1         .word LINK 
                           0000CE     2         LINK=.
      0000CE 03                       3         .byte 3  
      0000CF 42 59 45                 4         .ascii "BYE"
      0000D2                          5         BYE:
      0000D2 8E               [10]  394         halt 
      0000D3 81               [ 4]  395         ret 
                                    396 
                                    397 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    398 ; Enable interrupts 
                                    399 ; EI ( -- )
                                    400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000D4                        401         _HEADER EI,2,"EI"
      0000D4 00 CE                    1         .word LINK 
                           0000D6     2         LINK=.
      0000D6 02                       3         .byte 2  
      0000D7 45 49                    4         .ascii "EI"
      0000D9                          5         EI:
      0000D9 9A               [ 1]  402         rim 
      0000DA 81               [ 4]  403         ret 
                                    404 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    405 ; Disable interrupts
                                    406 ; DI ( -- )
                                    407 ;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000DB                        408         _HEADER DI,2,"DI"
      0000DB 00 D6                    1         .word LINK 
                           0000DD     2         LINK=.
      0000DD 02                       3         .byte 2  
      0000DE 44 49                    4         .ascii "DI"
      0000E0                          5         DI:
      0000E0 9B               [ 1]  409         sim 
      0000E1 81               [ 4]  410         ret 
                                    411 
                                    412 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    413 ; set interrupt priority level 
                                    414 ; SET-ISP ( n1 n2 -- )
                                    415 ; n1 level {1..3}
                                    416 ; n2 vector {0..29}
                                    417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0000E2                        418         _HEADER SETISP,7,"SET-ISP"
      0000E2 00 DD                    1         .word LINK 
                           0000E4     2         LINK=.
      0000E4 07                       3         .byte 7  
      0000E5 53 45 54 2D 49 53 50     4         .ascii "SET-ISP"
      0000EC                          5         SETISP:
      0000EC 90 93            [ 1]  419         ldw y,x 
      0000EE 90 FE            [ 2]  420         ldw y,(y)
      0000F0 A6 04            [ 1]  421         ld a,#4 ; 4 slot per register 
                                    422 ;  quotient select register, remainder select slot in register.        
      0000F2 90 62            [ 2]  423         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000F4 A4 03            [ 1]  424         and a,#3 
      0000F6 48               [ 1]  425         sll a ; 2*SLOT  lshift 
      0000F7 72 A9 7F 70      [ 2]  426         addw y,#ITC_SPR1 
      0000FB FF               [ 2]  427         ldw (x),y  ; ( level reg -- )
      0000FC 90 5F            [ 1]  428         clrw y 
      0000FE 90 97            [ 1]  429         ld yl,a 
      000100 1D 00 02         [ 2]  430         subw x,#CELLL 
      000103 FF               [ 2]  431         ldw (x),y  ; ( level reg lshift -- )
      000104 90 93            [ 1]  432         ldw y,x 
      000106 90 EE 02         [ 2]  433         ldw y,(2,y) 
      000109 90 F6            [ 1]  434         ld a,(y)   ; reg_value
      00010B 1D 00 02         [ 2]  435         subw x,#CELLL 
      00010E FF               [ 2]  436         ldw (x),y ; ( level reg lshift rval -- )
      00010F CD 06 5E         [ 4]  437         call OVER ; ( level reg lshift rval lshift -- )
      000112 CD 04 8C         [ 4]  438         call DOLIT 
      000115 00 03                  439         .word 3
      000117 CD 06 46         [ 4]  440         call SWAPP  ; ( level reg lshift rval 3 lshift )
      00011A CD 0B DD         [ 4]  441         call LSHIFT ; creat slot mask 
      00011D CD 08 92         [ 4]  442         call INVER  ; ( level reg lshift rval mask )
      000120 CD 06 93         [ 4]  443         call ANDD ; ( level reg lshift slot_masked )
      000123 CD 05 FF         [ 4]  444         call TOR  ; ( level reg lshift -- R: slot_masked )
      000126 CD 07 FA         [ 4]  445         call ROT  ; ( reg lshift level )
      000129 CD 06 46         [ 4]  446         call SWAPP ; ( reg level lshift )
      00012C CD 0B DD         [ 4]  447         call LSHIFT  ; ( reg slot_level -- )
      00012F CD 05 51         [ 4]  448         call RFROM ; ( reg slot_level masked_val )
      000132 CD 06 A7         [ 4]  449         call ORR   ; ( reg updated_rval )
      000135 CD 06 46         [ 4]  450         call SWAPP 
      000138 CC 05 0D         [ 2]  451         jp CSTOR
                                    452 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    454 ; sélectionne l'application 
                                    455 ; qui démarre automatique lors 
                                    456 ; d'un COLD start 
                                    457 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00013B                        458         _HEADER AUTORUN,7,"AUTORUN"
      00013B 00 E4                    1         .word LINK 
                           00013D     2         LINK=.
      00013D 07                       3         .byte 7  
      00013E 41 55 54 4F 52 55 4E     4         .ascii "AUTORUN"
      000145                          5         AUTORUN:
      000145 CD 12 F9         [ 4]  459         call TOKEN 
      000148 CD 06 36         [ 4]  460         call DUPP 
      00014B CD 04 B5         [ 4]  461         call QBRAN 
      00014E 02 2B                  462         .word FORGET2
      000150 CD 13 F6         [ 4]  463         call NAMEQ
      000153 CD 07 E9         [ 4]  464         call QDUP 
      000156 CD 04 B5         [ 4]  465         call QBRAN 
      000159 02 2B                  466         .word FORGET2
      00015B                        467         _DROP 
      00015B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00015E 1D 00 04         [ 2]  468         subw x,#2*CELLL 
      000161 90 5F            [ 1]  469         clrw y 
      000163 FF               [ 2]  470         ldw (x),y 
      000164 90 AE 40 02      [ 2]  471         ldw y,#APP_RUN 
      000168 EF 02            [ 2]  472         ldw (2,x),y 
      00016A CC 20 09         [ 2]  473         jp EESTORE 
                                    474 
                                    475 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    476 ;; Reset dictionary pointer before 
                                    477 ;; forgotten word. RAM space and 
                                    478 ;; interrupt vector defined after 
                                    479 ;; must be resetted also.
                                    480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00016D                        481         _HEADER FORGET,6,"FORGET"
      00016D 01 3D                    1         .word LINK 
                           00016F     2         LINK=.
      00016F 06                       3         .byte 6  
      000170 46 4F 52 47 45 54        4         .ascii "FORGET"
      000176                          5         FORGET:
      000176 CD 12 F9         [ 4]  482         call TOKEN
      000179 CD 06 36         [ 4]  483         call DUPP 
      00017C CD 04 B5         [ 4]  484         call QBRAN 
      00017F 02 2B                  485         .word FORGET2
      000181 CD 13 F6         [ 4]  486         call NAMEQ ; ( a -- ca na | a F )
      000184 CD 07 E9         [ 4]  487         call QDUP 
      000187 CD 04 B5         [ 4]  488         call QBRAN 
      00018A 02 2B                  489         .word FORGET2
                                    490 ; only forget users words 
      00018C CD 06 36         [ 4]  491         call DUPP ; ( ca na na )
      00018F CD 04 8C         [ 4]  492         call DOLIT 
      000192 26 00                  493         .word app_space 
      000194 CD 06 46         [ 4]  494         call SWAPP 
      000197 CD 09 2D         [ 4]  495         call  ULESS 
      00019A CD 04 B5         [ 4]  496         call QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00019D 01 ED                  497         .word FORGET6 
                                    498 ; ( ca na -- )        
                                    499 ;reset ivec with address >= ca
      00019F CD 06 46         [ 4]  500         call SWAPP ; ( na ca -- ) 
      0001A2 CD 22 0C         [ 4]  501         call CHKIVEC ; ( na -- ) 
                                    502 ; start at LAST and link back to na 
                                    503 ; if variable found reset VP at that point.
      0001A5                        504 FORGET1:
      0001A5 CD 07 AB         [ 4]  505         call LAST 
      0001A8 CD 05 00         [ 4]  506         call AT 
      0001AB CD 06 36         [ 4]  507         call DUPP  ; ( -- na last last )
      0001AE CD 02 41         [ 4]  508         call FREEVAR ; ( -- na last )
      0001B1 CD 06 36         [ 4]  509         call DUPP 
      0001B4 CD 04 8C         [ 4]  510         call DOLIT 
      0001B7 00 02                  511         .word 2 
      0001B9 CD 08 EF         [ 4]  512         call SUBB ; ( na last -- na last lfa ) link address 
      0001BC CD 05 00         [ 4]  513         call AT 
      0001BF CD 06 36         [ 4]  514         call DUPP ; ( -- na last a a )
      0001C2 CD 07 7F         [ 4]  515         call CNTXT 
      0001C5 CD 04 EE         [ 4]  516         call STORE
      0001C8 CD 07 AB         [ 4]  517         call LAST  
      0001CB CD 04 EE         [ 4]  518         call STORE ; ( --  na last )
      0001CE CD 06 5E         [ 4]  519         call OVER 
      0001D1 CD 09 17         [ 4]  520         call EQUAL ; ( na last na -- na T|F ) 
      0001D4 CD 04 B5         [ 4]  521         call QBRAN 
      0001D7 01 A5                  522         .word FORGET1 
                                    523 ; ( na -- )
      0001D9 CD 04 8C         [ 4]  524         call DOLIT 
      0001DC 00 02                  525         .word 2 
      0001DE CD 08 EF         [ 4]  526         call SUBB 
      0001E1 CD 07 9B         [ 4]  527         call CPP 
      0001E4 CD 04 EE         [ 4]  528         call STORE  
      0001E7 CD 1E 3C         [ 4]  529         call UPDATCP 
      0001EA CC 1E 13         [ 2]  530         jp UPDATLAST 
      0001ED                        531 FORGET6: ; tried to forget a RAM or system word 
                                    532 ; ( ca na -- )
      0001ED 1D 00 02         [ 2]  533         subw x,#CELLL 
      0001F0 90 BE 2C         [ 2]  534         ldw y,SP0 
      0001F3 FF               [ 2]  535         ldw (x),y  
      0001F4 CD 09 2D         [ 4]  536         call ULESS
      0001F7 CD 04 B5         [ 4]  537         call QBRAN 
      0001FA 02 1D                  538         .word PROTECTED 
      0001FC CD 15 02         [ 4]  539         call ABORQ 
      0001FF 1D                     540         .byte 29
      000200 20 46 6F 72 20 52 41   541         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      00021D                        542 PROTECTED:
      00021D CD 15 02         [ 4]  543         call ABORQ
      000220 0A                     544         .byte 10
      000221 20 50 72 6F 74 65 63   545         .ascii " Protected"
             74 65 64
      00022B                        546 FORGET2: ; no name or not found in dictionary 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00022B CD 15 02         [ 4]  547         call ABORQ
      00022E 05                     548         .byte 5
      00022F 20 77 68 61 74         549         .ascii " what"
      000234                        550 FORGET4:
      000234 CC 06 2C         [ 2]  551         jp DROP 
                                    552 
                                    553 
                                    554 ;;;;;;;;;;;;;;;;;;;;;
                                    555 ; if na is variable 
                                    556 ; free variable data  
                                    557 ; FREEVAR ( na -- )
                                    558 ;;;;;;;;;;;;;;;;;;;;;;
      000237                        559         _HEADER FREEVAR,7,"FREEVAR"
      000237 01 6F                    1         .word LINK 
                           000239     2         LINK=.
      000239 07                       3         .byte 7  
      00023A 46 52 45 45 56 41 52     4         .ascii "FREEVAR"
      000241                          5         FREEVAR:
      000241 CD 06 36         [ 4]  560         call DUPP ; ( na na -- )
      000244 CD 05 1E         [ 4]  561         CALL CAT  ; ( na c -- )
      000247 CD 0B BF         [ 4]  562         call ONEP ;
      00024A CD 08 59         [ 4]  563         CALL PLUS ; ( na c+1 -- ca ) 
      00024D CD 0B BF         [ 4]  564         call ONEP ; ( ca+ -- ) to get routne address 
      000250 CD 06 36         [ 4]  565         call DUPP ; ( ca+ ca+ -- )
      000253 CD 05 00         [ 4]  566         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000256 CD 04 8C         [ 4]  567         call DOLIT 
      000259 06 EC                  568         .word DOVAR ; if routine address is DOVAR then variable 
      00025B CD 09 17         [ 4]  569         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00025E CD 04 B5         [ 4]  570         call QBRAN 
      000261 02 77                  571         .word FREEVAR4 
      000263 CD 04 8C         [ 4]  572         call DOLIT 
      000266 00 02                  573         .word 2 
      000268 CD 08 59         [ 4]  574         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00026B CD 05 00         [ 4]  575         call AT 
      00026E CD 07 8D         [ 4]  576         call VPP   
      000271 CD 04 EE         [ 4]  577         call STORE 
      000274 CC 1E 53         [ 2]  578         jp UPDATVP 
      000277                        579 FREEVAR4: ; not variable
      000277                        580         _DROP 
      000277 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00027A 81               [ 4]  581         RET 
                                    582 
                                    583 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    584 ;    SEED ( n -- )
                                    585 ; Initialize PRNG seed with n 
                                    586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00027B                        587         _HEADER SEED,4,"SEED"
      00027B 02 39                    1         .word LINK 
                           00027D     2         LINK=.
      00027D 04                       3         .byte 4  
      00027E 53 45 45 44              4         .ascii "SEED"
      000282                          5         SEED:
      000282 90 93            [ 1]  588         ldw y,x 
      000284 1C 00 02         [ 2]  589         addw x,#CELLL
      000287 90 FE            [ 2]  590         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000289 90 9E            [ 1]  591         ld a,yh 
      00028B B7 38            [ 1]  592         ld SEEDX,a 
      00028D 90 9F            [ 1]  593         ld a,yl 
      00028F B7 3A            [ 1]  594         ld SEEDY,a 
      000291 81               [ 4]  595         ret 
                                    596 
                                    597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    598 ;    RANDOM ( u1 -- u2 )
                                    599 ; Pseudo random number betwen 0 and u1-1
                                    600 ;  XOR32 algorithm 
                                    601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000292                        602         _HEADER RANDOM,6,"RANDOM"
      000292 02 7D                    1         .word LINK 
                           000294     2         LINK=.
      000294 06                       3         .byte 6  
      000295 52 41 4E 44 4F 4D        4         .ascii "RANDOM"
      00029B                          5         RANDOM:
                                    603 ;local variable 
                           000001   604         SPSAVE=1
                           000002   605         VSIZE=2 
      00029B 52 02            [ 2]  606         sub sp,#VSIZE
      00029D 1F 01            [ 2]  607         ldw (SPSAVE,sp),x  
                                    608 ; XTEMP=(SEEDX<<5)^SEEDX 
      00029F 90 93            [ 1]  609         ldw y,x 
      0002A1 90 FE            [ 2]  610         ldw y,(y)
      0002A3 90 BF 26         [ 2]  611         ldw YTEMP,y 
      0002A6 BE 38            [ 2]  612 	ldw x,SEEDX 
      0002A8 58               [ 2]  613 	sllw x 
      0002A9 58               [ 2]  614 	sllw x 
      0002AA 58               [ 2]  615 	sllw x 
      0002AB 58               [ 2]  616 	sllw x 
      0002AC 58               [ 2]  617 	sllw x 
      0002AD 9E               [ 1]  618 	ld a,xh 
      0002AE B8 38            [ 1]  619 	xor a,SEEDX 
      0002B0 B7 24            [ 1]  620 	ld XTEMP,a 
      0002B2 9F               [ 1]  621 	ld a,xl 
      0002B3 B8 39            [ 1]  622 	xor a,SEEDX+1 
      0002B5 B7 25            [ 1]  623 	ld XTEMP+1,a 
                                    624 ; SEEDX=SEEDY 
      0002B7 BE 3A            [ 2]  625 	ldw x,SEEDY 
      0002B9 BF 38            [ 2]  626 	ldw SEEDX,x  
                                    627 ; SEEDY=SEEDY^(SEEDY>>1)
      0002BB 54               [ 2]  628 	srlw x 
      0002BC 9E               [ 1]  629 	ld a,xh 
      0002BD B8 3A            [ 1]  630 	xor a,SEEDY 
      0002BF B7 3A            [ 1]  631 	ld SEEDY,a  
      0002C1 9F               [ 1]  632 	ld a,xl 
      0002C2 B8 3B            [ 1]  633 	xor a,SEEDY+1 
      0002C4 B7 3B            [ 1]  634 	ld SEEDY+1,a 
                                    635 ; XTEMP>>3 
      0002C6 BE 24            [ 2]  636 	ldw x,XTEMP 
      0002C8 54               [ 2]  637 	srlw x 
      0002C9 54               [ 2]  638 	srlw x 
      0002CA 54               [ 2]  639 	srlw x 
                                    640 ; x=XTEMP^x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002CB 9E               [ 1]  641 	ld a,xh 
      0002CC B8 24            [ 1]  642 	xor a,XTEMP 
      0002CE 95               [ 1]  643 	ld xh,a 
      0002CF 9F               [ 1]  644 	ld a,xl 
      0002D0 B8 25            [ 1]  645 	xor a,XTEMP+1  
      0002D2 97               [ 1]  646 	ld xl,a 
                                    647 ; SEEDY=x^SEEDY 
      0002D3 B8 3B            [ 1]  648 	xor a,SEEDY+1
      0002D5 97               [ 1]  649 	ld xl,a 
      0002D6 9E               [ 1]  650 	ld a,xh 
      0002D7 B8 3A            [ 1]  651 	xor a,SEEDY
      0002D9 95               [ 1]  652 	ld xh,a 
      0002DA BF 3A            [ 2]  653 	ldw SEEDY,x 
                                    654 ; return SEEDY modulo YTEMP  
      0002DC 90 BE 26         [ 2]  655 	ldw y,YTEMP  
      0002DF 65               [ 2]  656 	divw x,y 
      0002E0 1E 01            [ 2]  657 	ldw x,(SPSAVE,sp)
      0002E2 FF               [ 2]  658         ldw (x),y 
      0002E3 5B 02            [ 2]  659         addw sp,#VSIZE 
      0002E5 81               [ 4]  660 	ret 
                                    661 
                                    662 
                                    663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    664 ;; get millisecond counter 
                                    665 ;; msec ( -- u )
                                    666 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002E6                        667         _HEADER MSEC,4,"MSEC"
      0002E6 02 94                    1         .word LINK 
                           0002E8     2         LINK=.
      0002E8 04                       3         .byte 4  
      0002E9 4D 53 45 43              4         .ascii "MSEC"
      0002ED                          5         MSEC:
      0002ED 1D 00 02         [ 2]  668         subw x,#CELLL 
      0002F0 90 BE 30         [ 2]  669         ldw y,MS 
      0002F3 FF               [ 2]  670         ldw (x),y 
      0002F4 81               [ 4]  671         ret 
                                    672 
                                    673 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    674 ; suspend execution for u msec 
                                    675 ;  pause ( u -- )
                                    676 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0002F5                        677         _HEADER PAUSE,5,"PAUSE"
      0002F5 02 E8                    1         .word LINK 
                           0002F7     2         LINK=.
      0002F7 05                       3         .byte 5  
      0002F8 50 41 55 53 45           4         .ascii "PAUSE"
      0002FD                          5         PAUSE:
      0002FD 90 93            [ 1]  678         ldw y,x
      0002FF 90 FE            [ 2]  679         ldw y,(y)
      000301 72 B9 00 30      [ 2]  680         addw y,MS 
      000305 8F               [10]  681 1$:     wfi  
      000306 90 B3 30         [ 2]  682         cpw y,MS  
      000309 26 FA            [ 1]  683         jrne 1$        
      00030B 1C 00 02         [ 2]  684         addw x,#CELLL 
      00030E 81               [ 4]  685         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    686 
                                    687 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    688 ; initialize count down timer 
                                    689 ;  TIMER ( u -- )  milliseconds
                                    690 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00030F                        691         _HEADER TIMER,5,"TIMER"
      00030F 02 F7                    1         .word LINK 
                           000311     2         LINK=.
      000311 05                       3         .byte 5  
      000312 54 49 4D 45 52           4         .ascii "TIMER"
      000317                          5         TIMER:
      000317 90 93            [ 1]  692         ldw y,x
      000319 90 FE            [ 2]  693         ldw y,(y) 
      00031B 90 BF 32         [ 2]  694         ldw CNTDWN,y
      00031E 1C 00 02         [ 2]  695         addw x,#CELLL 
      000321 81               [ 4]  696         ret 
                                    697 
                                    698 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    699 ; check for TIMER exiparition 
                                    700 ;  TIMEOUT? ( -- 0|-1 )
                                    701 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000322                        702         _HEADER TIMEOUTQ,8,"TIMEOUT?"
      000322 03 11                    1         .word LINK 
                           000324     2         LINK=.
      000324 08                       3         .byte 8  
      000325 54 49 4D 45 4F 55 54     4         .ascii "TIMEOUT?"
             3F
      00032D                          5         TIMEOUTQ:
      00032D 4F               [ 1]  703         clr a
      00032E 1D 00 02         [ 2]  704         subw x,#CELLL 
      000331 90 BE 32         [ 2]  705         ldw y,CNTDWN 
      000334 26 01            [ 1]  706         jrne 1$ 
      000336 43               [ 1]  707         cpl a 
      000337 E7 01            [ 1]  708 1$:     ld (1,x),a 
      000339 F7               [ 1]  709         ld (x),a 
      00033A 81               [ 4]  710         ret         
                                    711 
                                    712 ;;;;;;;;;;;;;;;;;;;;;
                                    713 ; reboot MCU 
                                    714 ; REBOOT ( -- )
                                    715 ;;;;;;;;;;;;;;;;;;;;;
      00033B                        716         _HEADER reboot,6,"REBOOT"
      00033B 03 24                    1         .word LINK 
                           00033D     2         LINK=.
      00033D 06                       3         .byte 6  
      00033E 52 45 42 4F 4F 54        4         .ascii "REBOOT"
      000344                          5         reboot:
      000344 CC 00 00         [ 2]  717         jp NonHandledInterrupt
                                    718 
                                    719 ;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    720 ; compile to flash memory 
                                    721 ; TO-FLASH ( -- )
                                    722 ;;;;;;;;;;;;;;;;;;;;;;;;;;
      000347                        723         _HEADER TOFLASH,8,"TO-FLASH"
      000347 03 3D                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                           000349     2         LINK=.
      000349 08                       3         .byte 8  
      00034A 54 4F 2D 46 4C 41 53     4         .ascii "TO-FLASH"
             48
      000352                          5         TOFLASH:
      000352 CD 07 BE         [ 4]  724         call RAMLAST 
      000355 CD 05 00         [ 4]  725         call AT 
      000358 CD 07 E9         [ 4]  726         call QDUP 
      00035B CD 04 B5         [ 4]  727         call QBRAN
      00035E 03 81                  728         .word 1$
      000360 CD 15 02         [ 4]  729         call ABORQ 
      000363 1D                     730         .byte 29
      000364 20 4E 6F 74 20 77 68   731         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000381 90 AE FF FF      [ 2]  732 1$:     ldw y,#-1 
      000385 90 BF 20         [ 2]  733         ldw UTFLASH,y
      000388 81               [ 4]  734         ret 
                                    735 
                                    736 ;;;;;;;;;;;;;;;;;;;;;;
                                    737 ; compile to RAM 
                                    738 ; TO-RAM ( -- )
                                    739 ;;;;;;;;;;;;;;;;;;;;;;
      000389                        740         _HEADER TORAM,6,"TO-RAM"
      000389 03 49                    1         .word LINK 
                           00038B     2         LINK=.
      00038B 06                       3         .byte 6  
      00038C 54 4F 2D 52 41 4D        4         .ascii "TO-RAM"
      000392                          5         TORAM:
      000392 90 5F            [ 1]  741         clrw y 
      000394 90 BF 20         [ 2]  742         ldw UTFLASH,y 
      000397 81               [ 4]  743         ret 
                                    744 
                                    745 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    746 ;; BAUD RATE constants table
                                    747 ; values to put in BRR1 & BRR2 
                                    748 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000398                        749 baudrate: 
      000398 A0 1B                  750 	.byte 0xa0,0x1b ; 2400
      00039A D0 05                  751 	.byte 0xd0,0x5  ; 4800 
      00039C 68 03                  752 	.byte 0x68,0x3  ; 9600
      00039E 34 01                  753 	.byte 0x34,0x1  ; 19200
      0003A0 11 06                  754 	.byte 0x11,0x6  ; 57600
      0003A2 08 0B                  755 	.byte 0x8,0xb   ; 115200
                                    756 
                                    757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    758 ; BAUD RATE CONSTANTS names 
                                    759 ; 2400 baud  ( -- n )
                                    760 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0003A4                        761         _HEADER B2K4,4,"B2K4"
      0003A4 03 8B                    1         .word LINK 
                           0003A6     2         LINK=.
      0003A6 04                       3         .byte 4  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003A7 42 32 4B 34              4         .ascii "B2K4"
      0003AB                          5         B2K4:
      0003AB 1D 00 02         [ 2]  762 	subw x,#CELLL 
      0003AE 90 5F            [ 1]  763         clrw y
      0003B0 FF               [ 2]  764         ldw (x),y
      0003B1 81               [ 4]  765 	ret
                                    766 
                                    767 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    768 ; 4800 baud	
                                    769 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0003B2                        770         _HEADER B4K8,4,"B4K8"
      0003B2 03 A6                    1         .word LINK 
                           0003B4     2         LINK=.
      0003B4 04                       3         .byte 4  
      0003B5 42 34 4B 38              4         .ascii "B4K8"
      0003B9                          5         B4K8:
      0003B9 1D 00 02         [ 2]  771         subw x,#CELLL 
      0003BC 90 AE 00 02      [ 2]  772         ldw y,#2 
      0003C0 FF               [ 2]  773         ldw (x),y
      0003C1 81               [ 4]  774         ret 
                                    775 
                                    776 ;;;;;;;;;;;;;;;;;;;;
                                    777 ; 9600 baud
                                    778 ;;;;;;;;;;;;;;;;;;;;
      0003C2                        779         _HEADER B9K6,4,"B9K6"
      0003C2 03 B4                    1         .word LINK 
                           0003C4     2         LINK=.
      0003C4 04                       3         .byte 4  
      0003C5 42 39 4B 36              4         .ascii "B9K6"
      0003C9                          5         B9K6:
      0003C9 1D 00 02         [ 2]  780         subw x,#CELLL 
      0003CC 90 AE 00 04      [ 2]  781         ldw y,#4 
      0003D0 FF               [ 2]  782         ldw (x),y 
      0003D1 81               [ 4]  783         ret 
                                    784 ;;;;;;;;;;;;;;
                                    785 ; 19200 baud
                                    786 ;;;;;;;;;;;;;;
      0003D2                        787         _HEADER B19K2,5,"B19K2"
      0003D2 03 C4                    1         .word LINK 
                           0003D4     2         LINK=.
      0003D4 05                       3         .byte 5  
      0003D5 42 31 39 4B 32           4         .ascii "B19K2"
      0003DA                          5         B19K2:
      0003DA 1D 00 02         [ 2]  788         subw x,#CELLL
      0003DD 90 AE 00 06      [ 2]  789         ldw y,#6 
      0003E1 FF               [ 2]  790         ldw (x),y 
      0003E2 81               [ 4]  791         ret 
                                    792 ;;;;;;;;;;;;;;
                                    793 ; 57600 baud  
                                    794 ;;;;;;;;;;;;;;
      0003E3                        795         _HEADER B57K6,5,"B57K6"
      0003E3 03 D4                    1         .word LINK 
                           0003E5     2         LINK=.
      0003E5 05                       3         .byte 5  
      0003E6 42 35 37 4B 36           4         .ascii "B57K6"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003EB                          5         B57K6:
      0003EB 1D 00 02         [ 2]  796         subw x,#CELLL 
      0003EE 90 AE 00 08      [ 2]  797         ldw y,#8 
      0003F2 FF               [ 2]  798         ldw (x),y 
      0003F3 81               [ 4]  799         ret 
                                    800 ;;;;;;;;;;;;;;
                                    801 ; 115200 baud 
                                    802 ;;;;;;;;;;;;;;
      0003F4                        803         _HEADER B115K2,6,"B115K2"
      0003F4 03 E5                    1         .word LINK 
                           0003F6     2         LINK=.
      0003F6 06                       3         .byte 6  
      0003F7 42 31 31 35 4B 32        4         .ascii "B115K2"
      0003FD                          5         B115K2:
      0003FD 1D 00 02         [ 2]  804 	subw x,#CELLL 
      000400 90 AE 00 0A      [ 2]  805         ldw y,#10 
      000404 FF               [ 2]  806         ldw (x),y 
      000405 81               [ 4]  807         ret 
                                    808 
                                    809 ;;;;;;;;;;;;;;;;;;;;;;;	
                                    810 ;; set UART2 BAUD rate
                                    811 ;	BAUD ( u -- )
                                    812 ;;;;;;;;;;;;;;;;;;;;;;;
      000406                        813         _HEADER BAUD,4,"BAUD"
      000406 03 F6                    1         .word LINK 
                           000408     2         LINK=.
      000408 04                       3         .byte 4  
      000409 42 41 55 44              4         .ascii "BAUD"
      00040D                          5         BAUD:
      00040D 1D 00 02         [ 2]  814 	subw x,#CELLL
      000410 90 AE 03 98      [ 2]  815         ldw y,#baudrate 
      000414 FF               [ 2]  816         ldw (x),y 
      000415 CD 08 59         [ 4]  817         call PLUS
      000418 90 93            [ 1]  818         ldw y,x  
      00041A 90 FE            [ 2]  819         ldw y,(y)
      00041C 90 F6            [ 1]  820         ld a,(y)
      00041E 88               [ 1]  821         push a 
      00041F 90 5C            [ 1]  822         incw y 
      000421 90 F6            [ 1]  823         ld a,(y)
      000423 C7 52 33         [ 1]  824         ld UART_BRR2,a 
      000426 84               [ 1]  825         pop a
      000427 C7 52 32         [ 1]  826         ld UART_BRR1,a 
      00042A 1C 00 02         [ 2]  827         addw x,#CELLL 
      00042D 81               [ 4]  828         ret 
                                    829 
                                    830 ;; Device dependent I/O
                                    831 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    832 ;       ?RX     ( -- c T | F )
                                    833 ;         Return input byte and true, or false.
                                    834 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00042E                        835         _HEADER QKEY,4,"?KEY"
      00042E 04 08                    1         .word LINK 
                           000430     2         LINK=.
      000430 04                       3         .byte 4  
      000431 3F 4B 45 59              4         .ascii "?KEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000435                          5         QKEY:
      000435 90 5F            [ 1]  836         CLRW Y 
      000437 72 0B 52 30 0B   [ 2]  837         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      00043C C6 52 31         [ 1]  838         LD    A,UART_DR   ;get char in A
      00043F 1D 00 02         [ 2]  839 	SUBW	X,#2
      000442 E7 01            [ 1]  840         LD     (1,X),A
      000444 7F               [ 1]  841 	CLR	(X)
      000445 90 53            [ 2]  842         CPLW     Y
      000447                        843 INCH:
      000447 1D 00 02         [ 2]  844 		SUBW	X,#2
      00044A FF               [ 2]  845         LDW     (X),Y
      00044B 81               [ 4]  846         RET
                                    847 
                                    848 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    849 ;       TX!     ( c -- )
                                    850 ;       Send character c to  output device.
                                    851 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00044C                        852         _HEADER EMIT,4,"EMIT"
      00044C 04 30                    1         .word LINK 
                           00044E     2         LINK=.
      00044E 04                       3         .byte 4  
      00044F 45 4D 49 54              4         .ascii "EMIT"
      000453                          5         EMIT:
      000453 E6 01            [ 1]  853         LD     A,(1,X)
      000455 1C 00 02         [ 2]  854 	ADDW	X,#2
      000458                        855 putc:         
      000458 72 0F 52 30 FB   [ 2]  856 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      00045D C7 52 31         [ 1]  857         LD    UART_DR,A   ;send A
      000460 81               [ 4]  858         RET
                                    859 
                                    860 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    861 ;       FC-XON  ( -- )
                                    862 ;       send XON character 
                                    863 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000461                        864         _HEADER FC_XON,6,"FC-XON"
      000461 04 4E                    1         .word LINK 
                           000463     2         LINK=.
      000463 06                       3         .byte 6  
      000464 46 43 2D 58 4F 4E        4         .ascii "FC-XON"
      00046A                          5         FC_XON:
      00046A 1D 00 02         [ 2]  865         subw x,#CELLL 
      00046D 7F               [ 1]  866         clr (x)
      00046E A6 11            [ 1]  867         ld a,#XON 
      000470 E7 01            [ 1]  868         ld (1,x),a 
      000472 CD 04 53         [ 4]  869         call EMIT 
      000475 81               [ 4]  870         ret 
                                    871 
                                    872 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    873 ;       FC-XOFF ( -- )
                                    874 ;       Send XOFF character 
                                    875 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000476                        876         _HEADER FC_XOFF,7,"FC-XOFF"
      000476 04 63                    1         .word LINK 
                           000478     2         LINK=.
      000478 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000479 46 43 2D 58 4F 46 46     4         .ascii "FC-XOFF"
      000480                          5         FC_XOFF:
      000480 1D 00 02         [ 2]  877         subw x,#CELLL 
      000483 7F               [ 1]  878         clr (x)
      000484 A6 13            [ 1]  879         ld a,#XOFF 
      000486 E7 01            [ 1]  880         ld (1,x),a 
      000488 CD 04 53         [ 4]  881         call EMIT 
      00048B 81               [ 4]  882         ret
                                    883 
                                    884 ;; The kernel
                                    885 
                                    886 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    887 ;       doLIT   ( -- w )
                                    888 ;       Push an inline literal.
                                    889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00048C                        890 DOLIT:
      00048C 1D 00 02         [ 2]  891 	SUBW X,#2
      00048F 16 01            [ 2]  892         ldw y,(1,sp)
      000491 90 FE            [ 2]  893         ldw y,(y)
      000493 FF               [ 2]  894         ldw (x),y
      000494 90 85            [ 2]  895         popw y 
      000496 90 EC 02         [ 2]  896         jp (2,y)
                                    897 
                                    898 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    899 ;       NEXT    ( -- )
                                    900 ;       Code for  single index loop.
                                    901 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000499                        902         _HEADER DONXT,COMPO+4,"NEXT"
      000499 04 78                    1         .word LINK 
                           00049B     2         LINK=.
      00049B 44                       3         .byte COMPO+4  
      00049C 4E 45 58 54              4         .ascii "NEXT"
      0004A0                          5         DONXT:
      0004A0 16 03            [ 2]  903 	LDW Y,(3,SP)
      0004A2 90 5A            [ 2]  904 	DECW Y
      0004A4 2A 07            [ 1]  905 	JRPL NEX1 ; jump if N=0
      0004A6 90 85            [ 2]  906 	POPW Y
      0004A8 5B 02            [ 2]  907         addw sp,#2
      0004AA 90 EC 02         [ 2]  908         JP (2,Y)
      0004AD                        909 NEX1:
      0004AD 17 03            [ 2]  910         LDW (3,SP),Y
      0004AF 90 85            [ 2]  911         POPW Y
      0004B1 90 FE            [ 2]  912 	LDW Y,(Y)
      0004B3 90 FC            [ 2]  913 	JP (Y)
                                    914 
                                    915 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    916 ;       ?branch ( f -- )
                                    917 ;       Branch if flag is zero.
                                    918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    919 ;       _HEADER QBRAN,COMPO+7,"?BRANCH"        
      0004B5                        920 QBRAN:	
      0004B5 90 93            [ 1]  921         LDW Y,X
      0004B7 1C 00 02         [ 2]  922 	ADDW X,#2
      0004BA 90 FE            [ 2]  923 	LDW Y,(Y)
      0004BC 27 13            [ 1]  924         JREQ     BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004BE 90 85            [ 2]  925 	POPW Y
      0004C0 90 EC 02         [ 2]  926 	JP (2,Y)
                                    927 
                                    928 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    929 ;  TBRANCH ( f -- )
                                    930 ;  branch if f==TRUE 
                                    931 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    932 ;        _HEADER TBRAN,COMPO+7,"TBRANCH"
      0004C3                        933 TBRAN: 
      0004C3 90 93            [ 1]  934         LDW Y,X 
      0004C5 1C 00 02         [ 2]  935         ADDW X,#2 
      0004C8 90 FE            [ 2]  936         LDW Y,(Y)
      0004CA 26 05            [ 1]  937         JRNE BRAN 
      0004CC 90 85            [ 2]  938         POPW Y 
      0004CE 90 EC 02         [ 2]  939         JP (2,Y)
                                    940 
                                    941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    942 ;       branch  ( -- )
                                    943 ;       Branch to an inline address.
                                    944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    945 ;       _HEADER BRAN,COMPO+6,"BRANCH"
      0004D1                        946 BRAN:
      0004D1 90 85            [ 2]  947         POPW Y
      0004D3 90 FE            [ 2]  948 	LDW Y,(Y)
      0004D5 90 FC            [ 2]  949         JP  (Y)
                                    950 
                                    951 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    952 ;       EXECUTE ( ca -- )
                                    953 ;       Execute  word at ca.
                                    954 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004D7                        955         _HEADER EXECU,7,"EXECUTE"
      0004D7 04 9B                    1         .word LINK 
                           0004D9     2         LINK=.
      0004D9 07                       3         .byte 7  
      0004DA 45 58 45 43 55 54 45     4         .ascii "EXECUTE"
      0004E1                          5         EXECU:
      0004E1 90 93            [ 1]  956         LDW Y,X
      0004E3 1C 00 02         [ 2]  957 	ADDW X,#CELLL 
      0004E6 90 FE            [ 2]  958 	LDW  Y,(Y)
      0004E8 90 FC            [ 2]  959         JP   (Y)
                                    960 
                           000001   961 OPTIMIZE = 1
                           000001   962 .if OPTIMIZE 
                                    963 ; remplacement de CALL EXIT par 
                                    964 ; le opcode de RET.
                                    965 ; Voir modification au code de ";"
                           000000   966 .else 
                                    967 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    968 ;       EXIT    ( -- )
                                    969 ;       Terminate a colon definition.
                                    970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    971 ;       _HEADER EXIT,4,"EXIT"
                                    972 EXIT:
                                    973         POPW Y
                                    974         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                    975 .endif 
                                    976 
                                    977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    978 ;       !       ( w a -- )
                                    979 ;       Pop  data stack to memory.
                                    980 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004EA                        981         _HEADER STORE,1,"!"
      0004EA 04 D9                    1         .word LINK 
                           0004EC     2         LINK=.
      0004EC 01                       3         .byte 1  
      0004ED 21                       4         .ascii "!"
      0004EE                          5         STORE:
      0004EE 90 93            [ 1]  982         LDW Y,X
      0004F0 90 FE            [ 2]  983         LDW Y,(Y)    ;Y=a
      0004F2 89               [ 2]  984         PUSHW X
      0004F3 EE 02            [ 2]  985         LDW X,(2,X) ; x=w 
      0004F5 90 FF            [ 2]  986         LDW (Y),X 
      0004F7 85               [ 2]  987         POPW X  
      0004F8                        988         _DDROP 
      0004F8 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      0004FB 81               [ 4]  989         RET     
                                    990 
                                    991 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                    992 ;       @       ( a -- w )
                                    993 ;       Push memory location to stack.
                                    994 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0004FC                        995         _HEADER AT,1,"@"
      0004FC 04 EC                    1         .word LINK 
                           0004FE     2         LINK=.
      0004FE 01                       3         .byte 1  
      0004FF 40                       4         .ascii "@"
      000500                          5         AT:
      000500 90 93            [ 1]  996         LDW Y,X     ;Y = a
      000502 90 FE            [ 2]  997         LDW Y,(Y)   ; address 
      000504 90 FE            [ 2]  998         LDW Y,(Y)   ; value 
      000506 FF               [ 2]  999         LDW (X),Y ;w = @Y
      000507 81               [ 4] 1000         RET     
                                   1001 
                                   1002 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1003 ;       C!      ( c b -- )
                                   1004 ;       Pop  data stack to byte memory.
                                   1005 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000508                       1006         _HEADER CSTOR,2,"C!"
      000508 04 FE                    1         .word LINK 
                           00050A     2         LINK=.
      00050A 02                       3         .byte 2  
      00050B 43 21                    4         .ascii "C!"
      00050D                          5         CSTOR:
      00050D 90 93            [ 1] 1007         LDW Y,X
      00050F 90 FE            [ 2] 1008 	LDW Y,(Y)    ;Y=b
      000511 E6 03            [ 1] 1009         LD A,(3,X)    ;D = c
      000513 90 F7            [ 1] 1010         LD  (Y),A     ;store c at b
      000515 1C 00 04         [ 2] 1011 	ADDW X,#4 ; DDROP 
      000518 81               [ 4] 1012         RET     
                                   1013 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1015 ;       C@      ( b -- c )
                                   1016 ;       Push byte in memory to  stack.
                                   1017 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000519                       1018         _HEADER CAT,2,"C@"
      000519 05 0A                    1         .word LINK 
                           00051B     2         LINK=.
      00051B 02                       3         .byte 2  
      00051C 43 40                    4         .ascii "C@"
      00051E                          5         CAT:
      00051E 90 93            [ 1] 1019         LDW Y,X     ;Y=b
      000520 90 FE            [ 2] 1020         LDW Y,(Y)
      000522 90 F6            [ 1] 1021         LD A,(Y)
      000524 E7 01            [ 1] 1022         LD (1,X),A
      000526 7F               [ 1] 1023         CLR (X)
      000527 81               [ 4] 1024         RET     
                                   1025 
                                   1026 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1027 ;       RP@     ( -- a )
                                   1028 ;       Push current RP to data stack.
                                   1029 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000528                       1030         _HEADER RPAT,3,"RP@"
      000528 05 1B                    1         .word LINK 
                           00052A     2         LINK=.
      00052A 03                       3         .byte 3  
      00052B 52 50 40                 4         .ascii "RP@"
      00052E                          5         RPAT:
      00052E 90 96            [ 1] 1031         LDW Y,SP    ;save return addr
      000530 1D 00 02         [ 2] 1032         SUBW X,#2
      000533 FF               [ 2] 1033         LDW (X),Y
      000534 81               [ 4] 1034         RET     
                                   1035 
                                   1036 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1037 ;       RP!     ( a -- )
                                   1038 ;       Set  return stack pointer.
                                   1039 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000535                       1040         _HEADER RPSTO,COMPO+3,"RP!"
      000535 05 2A                    1         .word LINK 
                           000537     2         LINK=.
      000537 43                       3         .byte COMPO+3  
      000538 52 50 21                 4         .ascii "RP!"
      00053B                          5         RPSTO:
      00053B 90 85            [ 2] 1041         POPW Y
      00053D 90 BF 26         [ 2] 1042         LDW YTEMP,Y
      000540 90 93            [ 1] 1043         LDW Y,X
      000542 90 FE            [ 2] 1044         LDW Y,(Y)
      000544 90 94            [ 1] 1045         LDW SP,Y
      000546 1C 00 02         [ 2] 1046         ADDW X,#CELLL ; a was not dropped, Picatout 2020-05-24
      000549 92 CC 26         [ 5] 1047         JP [YTEMP]
                                   1048 
                                   1049 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1050 ;       R>      ( -- w )
                                   1051 ;       Pop return stack to data stack.
                                   1052 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00054C                       1053         _HEADER RFROM,2,"R>"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00054C 05 37                    1         .word LINK 
                           00054E     2         LINK=.
      00054E 02                       3         .byte 2  
      00054F 52 3E                    4         .ascii "R>"
      000551                          5         RFROM:
      000551 1D 00 02         [ 2] 1054         SUBW X,#CELLL 
      000554 16 03            [ 2] 1055         LDW Y,(3,SP)
      000556 FF               [ 2] 1056         LDW (X),Y 
      000557 90 85            [ 2] 1057         POPW Y 
      000559 5B 02            [ 2] 1058         ADDW SP,#2 
      00055B 90 FC            [ 2] 1059         JP (Y)
                                   1060 
                                   1061 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1062 ;       R@      ( -- w )
                                   1063 ;       Copy top of return stack to stack.
                                   1064 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00055D                       1065         _HEADER RAT,2,"R@"
      00055D 05 4E                    1         .word LINK 
                           00055F     2         LINK=.
      00055F 02                       3         .byte 2  
      000560 52 40                    4         .ascii "R@"
      000562                          5         RAT:
      000562 16 03            [ 2] 1066         ldw y,(3,sp)
      000564 1D 00 02         [ 2] 1067         subw x,#CELLL 
      000567 FF               [ 2] 1068         ldw (x),y 
      000568 81               [ 4] 1069         ret 
                                   1070 
                                   1071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1072 ;       LOCAL ( n -- )
                                   1073 ;       reserve n slots on return stack
                                   1074 ;       for local variables 
                                   1075 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000569                       1076         _HEADER LOCAL,5,"LOCAL"
      000569 05 5F                    1         .word LINK 
                           00056B     2         LINK=.
      00056B 05                       3         .byte 5  
      00056C 4C 4F 43 41 4C           4         .ascii "LOCAL"
      000571                          5         LOCAL:
      000571 90 85            [ 2] 1077         POPW Y  
      000573 90 BF 26         [ 2] 1078         LDW YTEMP,Y ; RETURN ADDRESS 
      000576 E6 01            [ 1] 1079         LD A,(1,X)
      000578 90 97            [ 1] 1080         LD YL,A 
      00057A A6 02            [ 1] 1081         LD A,#CELLL 
      00057C 90 42            [ 4] 1082         MUL Y,A 
      00057E 90 BF 24         [ 2] 1083         LDw XTEMP,Y
      000581 90 96            [ 1] 1084         LDW Y,SP 
      000583 72 B2 00 24      [ 2] 1085         SUBW Y,XTEMP
      000587 90 94            [ 1] 1086         LDW SP,Y 
      000589 1C 00 02         [ 2] 1087         ADDW X,#CELLL 
      00058C 92 CC 26         [ 5] 1088         JP [YTEMP]
                                   1089 
                                   1090 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1091 ;       NRDROP ( n -- )
                                   1092 ;       drop n elements from rstack
                                   1093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00058F                       1094         _HEADER NRDROP,6,"NRDROP" 
      00058F 05 6B                    1         .word LINK 
                           000591     2         LINK=.
      000591 06                       3         .byte 6  
      000592 4E 52 44 52 4F 50        4         .ascii "NRDROP"
      000598                          5         NRDROP:
      000598 90 85            [ 2] 1095         POPW Y 
      00059A 90 BF 26         [ 2] 1096         LDW YTEMP,Y ; RETURN ADDRESS 
      00059D E6 01            [ 1] 1097         LD A,(1,X)
      00059F 90 97            [ 1] 1098         LD YL,A  
      0005A1 A6 02            [ 1] 1099         LD A,#CELLL 
      0005A3 90 42            [ 4] 1100         MUL Y,A 
      0005A5 90 BF 24         [ 2] 1101         LDW XTEMP,Y 
      0005A8 90 96            [ 1] 1102         LDW Y,SP 
      0005AA 72 B9 00 24      [ 2] 1103         ADDW Y,XTEMP 
      0005AE 90 94            [ 1] 1104         LDW SP,Y  
      0005B0 1C 00 02         [ 2] 1105         ADDW X,#CELLL 
      0005B3 92 CC 26         [ 5] 1106         JP [YTEMP]
                                   1107 
                                   1108 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1109 ;        ( n -- w)
                                   1110 ;      fetch nth element ofr return stack 
                                   1111 ;      n==0 is same as R@ 
                                   1112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005B6                       1113         _HEADER NRAT,3,"NR@"
      0005B6 05 91                    1         .word LINK 
                           0005B8     2         LINK=.
      0005B8 03                       3         .byte 3  
      0005B9 4E 52 40                 4         .ascii "NR@"
      0005BC                          5         NRAT:
      0005BC E6 01            [ 1] 1114         LD A,(1,X)
      0005BE 90 97            [ 1] 1115         LD YL,A 
      0005C0 A6 02            [ 1] 1116         LD A,#CELLL 
      0005C2 90 42            [ 4] 1117         MUL Y,A 
      0005C4 90 BF 26         [ 2] 1118         LDW YTEMP,Y 
      0005C7 90 96            [ 1] 1119         LDW Y,SP 
      0005C9 72 A9 00 03      [ 2] 1120         ADDW Y,#3 
      0005CD 72 B9 00 26      [ 2] 1121         ADDW Y,YTEMP 
      0005D1 90 FE            [ 2] 1122         LDW Y,(Y)
      0005D3 FF               [ 2] 1123         LDW (X),Y 
      0005D4 81               [ 4] 1124         RET 
                                   1125 
                                   1126 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1127 ;       NR! ( w n --  )
                                   1128 ;       store w on nth position of 
                                   1129 ;       return stack 
                                   1130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005D5                       1131         _HEADER NRSTO,3,"NR!"
      0005D5 05 B8                    1         .word LINK 
                           0005D7     2         LINK=.
      0005D7 03                       3         .byte 3  
      0005D8 4E 52 21                 4         .ascii "NR!"
      0005DB                          5         NRSTO:
      0005DB 90 96            [ 1] 1132         LDW Y,SP
      0005DD 72 A9 00 03      [ 2] 1133         ADDW Y,#3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005E1 90 BF 26         [ 2] 1134         LDW YTEMP,Y 
      0005E4 E6 01            [ 1] 1135         LD A,(1,X)
      0005E6 90 97            [ 1] 1136         LD YL,A 
      0005E8 A6 02            [ 1] 1137         LD A,#CELLL 
      0005EA 90 42            [ 4] 1138         MUL Y,A 
      0005EC 72 B9 00 26      [ 2] 1139         ADDW Y,YTEMP
      0005F0 89               [ 2] 1140         PUSHW X 
      0005F1 EE 02            [ 2] 1141         LDW X,(2,X)
      0005F3 90 FF            [ 2] 1142         LDW (Y),X
      0005F5 85               [ 2] 1143         POPW X 
      0005F6 1C 00 04         [ 2] 1144         ADDW X,#2*CELLL 
      0005F9 81               [ 4] 1145         RET 
                                   1146 
                                   1147 
                                   1148 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1149 ;       >R      ( w -- )
                                   1150 ;       Push data stack to return stack.
                                   1151 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0005FA                       1152         _HEADER TOR,COMPO+2,">R"
      0005FA 05 D7                    1         .word LINK 
                           0005FC     2         LINK=.
      0005FC 42                       3         .byte COMPO+2  
      0005FD 3E 52                    4         .ascii ">R"
      0005FF                          5         TOR:
      0005FF 90 85            [ 2] 1153         POPW Y    ;save return addr
      000601 90 BF 26         [ 2] 1154         LDW YTEMP,Y
      000604 90 93            [ 1] 1155         LDW Y,X
      000606 90 FE            [ 2] 1156         LDW Y,(Y)  ; W
      000608 90 89            [ 2] 1157         PUSHW Y    ;W >R 
      00060A 1C 00 02         [ 2] 1158         ADDW X,#2
      00060D 92 CC 26         [ 5] 1159         JP [YTEMP]
                                   1160 
                                   1161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1162 ;       SP@     ( -- a )
                                   1163 ;       Push current stack pointer.
                                   1164 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000610                       1165         _HEADER SPAT,3,"SP@"
      000610 05 FC                    1         .word LINK 
                           000612     2         LINK=.
      000612 03                       3         .byte 3  
      000613 53 50 40                 4         .ascii "SP@"
      000616                          5         SPAT:
      000616 90 93            [ 1] 1166 	LDW Y,X
      000618 1D 00 02         [ 2] 1167         SUBW X,#2
      00061B FF               [ 2] 1168 	LDW (X),Y
      00061C 81               [ 4] 1169         RET     
                                   1170 
                                   1171 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1172 ;       SP!     ( a -- )
                                   1173 ;       Set  data stack pointer.
                                   1174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00061D                       1175         _HEADER SPSTO,3,"SP!"
      00061D 06 12                    1         .word LINK 
                           00061F     2         LINK=.
      00061F 03                       3         .byte 3  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000620 53 50 21                 4         .ascii "SP!"
      000623                          5         SPSTO:
      000623 FE               [ 2] 1176         LDW     X,(X)     ;X = a
      000624 81               [ 4] 1177         RET     
                                   1178 
                                   1179 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1180 ;       DROP    ( w -- )
                                   1181 ;       Discard top stack item.
                                   1182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000625                       1183         _HEADER DROP,4,"DROP"
      000625 06 1F                    1         .word LINK 
                           000627     2         LINK=.
      000627 04                       3         .byte 4  
      000628 44 52 4F 50              4         .ascii "DROP"
      00062C                          5         DROP:
      00062C 1C 00 02         [ 2] 1184         ADDW X,#2     
      00062F 81               [ 4] 1185         RET     
                                   1186 
                                   1187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1188 ;       DUP     ( w -- w w )
                                   1189 ;       Duplicate  top stack item.
                                   1190 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000630                       1191         _HEADER DUPP,3,"DUP"
      000630 06 27                    1         .word LINK 
                           000632     2         LINK=.
      000632 03                       3         .byte 3  
      000633 44 55 50                 4         .ascii "DUP"
      000636                          5         DUPP:
      000636 90 93            [ 1] 1192 	LDW Y,X
      000638 1D 00 02         [ 2] 1193         SUBW X,#2
      00063B 90 FE            [ 2] 1194 	LDW Y,(Y)
      00063D FF               [ 2] 1195 	LDW (X),Y
      00063E 81               [ 4] 1196         RET     
                                   1197 
                                   1198 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1199 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1200 ;       Exchange top two stack items.
                                   1201 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00063F                       1202         _HEADER SWAPP,4,"SWAP"
      00063F 06 32                    1         .word LINK 
                           000641     2         LINK=.
      000641 04                       3         .byte 4  
      000642 53 57 41 50              4         .ascii "SWAP"
      000646                          5         SWAPP:
      000646 90 93            [ 1] 1203         LDW Y,X
      000648 90 FE            [ 2] 1204         LDW Y,(Y)
      00064A 90 89            [ 2] 1205         PUSHW Y  
      00064C 90 93            [ 1] 1206         LDW Y,X
      00064E 90 EE 02         [ 2] 1207         LDW Y,(2,Y)
      000651 FF               [ 2] 1208         LDW (X),Y
      000652 90 85            [ 2] 1209         POPW Y 
      000654 EF 02            [ 2] 1210         LDW (2,X),Y
      000656 81               [ 4] 1211         RET     
                                   1212 
                                   1213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1214 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1215 ;       Copy second stack item to top.
                                   1216 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000657                       1217         _HEADER OVER,4,"OVER"
      000657 06 41                    1         .word LINK 
                           000659     2         LINK=.
      000659 04                       3         .byte 4  
      00065A 4F 56 45 52              4         .ascii "OVER"
      00065E                          5         OVER:
      00065E 1D 00 02         [ 2] 1218         SUBW X,#2
      000661 90 93            [ 1] 1219         LDW Y,X
      000663 90 EE 04         [ 2] 1220         LDW Y,(4,Y)
      000666 FF               [ 2] 1221         LDW (X),Y
      000667 81               [ 4] 1222         RET     
                                   1223 
                                   1224 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1225 ;       0<      ( n -- t )
                                   1226 ;       Return true if n is negative.
                                   1227 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000668                       1228         _HEADER ZLESS,2,"0<"
      000668 06 59                    1         .word LINK 
                           00066A     2         LINK=.
      00066A 02                       3         .byte 2  
      00066B 30 3C                    4         .ascii "0<"
      00066D                          5         ZLESS:
      00066D A6 FF            [ 1] 1229         LD A,#0xFF
      00066F 90 93            [ 1] 1230         LDW Y,X
      000671 90 FE            [ 2] 1231         LDW Y,(Y)
      000673 2B 01            [ 1] 1232         JRMI     ZL1
      000675 4F               [ 1] 1233         CLR A   ;false
      000676 F7               [ 1] 1234 ZL1:    LD     (X),A
      000677 E7 01            [ 1] 1235         LD (1,X),A
      000679 81               [ 4] 1236 	RET     
                                   1237 
                                   1238 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1239 ;       0= ( n -- f )
                                   1240 ;   n==0?
                                   1241 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00067A                       1242         _HEADER ZEQUAL,2,"0="
      00067A 06 6A                    1         .word LINK 
                           00067C     2         LINK=.
      00067C 02                       3         .byte 2  
      00067D 30 3D                    4         .ascii "0="
      00067F                          5         ZEQUAL:
      00067F A6 FF            [ 1] 1243         LD A,#0XFF 
      000681 90 93            [ 1] 1244         LDW Y,X 
      000683 90 FE            [ 2] 1245         LDW Y,(Y)
      000685 27 02            [ 1] 1246         JREQ ZEQU1 
      000687 A6 00            [ 1] 1247         LD A,#0 
      000689                       1248 ZEQU1:  
      000689 F7               [ 1] 1249         LD (X),A 
      00068A E7 01            [ 1] 1250         LD (1,X),A         
      00068C 81               [ 4] 1251         RET 
                                   1252 
                                   1253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1254 ;       AND     ( w w -- w )
                                   1255 ;       Bitwise AND.
                                   1256 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00068D                       1257         _HEADER ANDD,3,"AND"
      00068D 06 7C                    1         .word LINK 
                           00068F     2         LINK=.
      00068F 03                       3         .byte 3  
      000690 41 4E 44                 4         .ascii "AND"
      000693                          5         ANDD:
      000693 F6               [ 1] 1258         LD  A,(X)    ;D=w
      000694 E4 02            [ 1] 1259         AND A,(2,X)
      000696 E7 02            [ 1] 1260         LD (2,X),A
      000698 E6 01            [ 1] 1261         LD A,(1,X)
      00069A E4 03            [ 1] 1262         AND A,(3,X)
      00069C E7 03            [ 1] 1263         LD (3,X),A
      00069E 1C 00 02         [ 2] 1264         ADDW X,#2
      0006A1 81               [ 4] 1265         RET
                                   1266 
                                   1267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1268 ;       OR      ( w w -- w )
                                   1269 ;       Bitwise inclusive OR.
                                   1270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006A2                       1271         _HEADER ORR,2,"OR"
      0006A2 06 8F                    1         .word LINK 
                           0006A4     2         LINK=.
      0006A4 02                       3         .byte 2  
      0006A5 4F 52                    4         .ascii "OR"
      0006A7                          5         ORR:
      0006A7 F6               [ 1] 1272         LD A,(X)    ;D=w
      0006A8 EA 02            [ 1] 1273         OR A,(2,X)
      0006AA E7 02            [ 1] 1274         LD (2,X),A
      0006AC E6 01            [ 1] 1275         LD A,(1,X)
      0006AE EA 03            [ 1] 1276         OR A,(3,X)
      0006B0 E7 03            [ 1] 1277         LD (3,X),A
      0006B2 1C 00 02         [ 2] 1278         ADDW X,#2
      0006B5 81               [ 4] 1279         RET
                                   1280 
                                   1281 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1282 ;       XOR     ( w w -- w )
                                   1283 ;       Bitwise exclusive OR.
                                   1284 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006B6                       1285         _HEADER XORR,3,"XOR"
      0006B6 06 A4                    1         .word LINK 
                           0006B8     2         LINK=.
      0006B8 03                       3         .byte 3  
      0006B9 58 4F 52                 4         .ascii "XOR"
      0006BC                          5         XORR:
      0006BC F6               [ 1] 1286         LD A,(X)    ;D=w
      0006BD E8 02            [ 1] 1287         XOR A,(2,X)
      0006BF E7 02            [ 1] 1288         LD (2,X),A
      0006C1 E6 01            [ 1] 1289         LD A,(1,X)
      0006C3 E8 03            [ 1] 1290         XOR A,(3,X)
      0006C5 E7 03            [ 1] 1291         LD (3,X),A
      0006C7 1C 00 02         [ 2] 1292         ADDW X,#2
      0006CA 81               [ 4] 1293         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1294 
                                   1295 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1296 ;       UM+     ( u u -- udsum )
                                   1297 ;       Add two unsigned single
                                   1298 ;       and return a double sum.
                                   1299 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006CB                       1300         _HEADER UPLUS,3,"UM+"
      0006CB 06 B8                    1         .word LINK 
                           0006CD     2         LINK=.
      0006CD 03                       3         .byte 3  
      0006CE 55 4D 2B                 4         .ascii "UM+"
      0006D1                          5         UPLUS:
      0006D1 A6 01            [ 1] 1301         LD A,#1
      0006D3 90 93            [ 1] 1302         LDW Y,X
      0006D5 90 EE 02         [ 2] 1303         LDW Y,(2,Y)
      0006D8 90 BF 26         [ 2] 1304         LDW YTEMP,Y
      0006DB 90 93            [ 1] 1305         LDW Y,X
      0006DD 90 FE            [ 2] 1306         LDW Y,(Y)
      0006DF 72 B9 00 26      [ 2] 1307         ADDW Y,YTEMP
      0006E3 EF 02            [ 2] 1308         LDW (2,X),Y
      0006E5 25 01            [ 1] 1309         JRC     UPL1
      0006E7 4F               [ 1] 1310         CLR A
      0006E8 E7 01            [ 1] 1311 UPL1:   LD     (1,X),A
      0006EA 7F               [ 1] 1312         CLR (X)
      0006EB 81               [ 4] 1313         RET
                                   1314 
                                   1315 ;; System and user variables
                                   1316 
                                   1317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1318 ;       doVAR   ( -- a )
                                   1319 ;       run time code 
                                   1320 ;       for VARIABLE and CREATE.
                                   1321 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1322 ;       HEADER DOVAR,COMPO+5,"DOVAR"
      0006EC                       1323 DOVAR:
      0006EC 1D 00 02         [ 2] 1324 	SUBW X,#2
      0006EF 90 85            [ 2] 1325         POPW Y    ;get return addr (pfa)
      0006F1 90 FE            [ 2] 1326         LDW Y,(Y) ; indirect address 
      0006F3 FF               [ 2] 1327         LDW (X),Y    ;push on stack
      0006F4 81               [ 4] 1328         RET     ;go to RET of EXEC
                                   1329 
                                   1330 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1331 ;       BASE    ( -- a )
                                   1332 ;       Radix base for numeric I/O.
                                   1333 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0006F5                       1334         _HEADER BASE,4,"BASE"
      0006F5 06 CD                    1         .word LINK 
                           0006F7     2         LINK=.
      0006F7 04                       3         .byte 4  
      0006F8 42 41 53 45              4         .ascii "BASE"
      0006FC                          5         BASE:
      0006FC 90 AE 00 06      [ 2] 1335 	LDW Y,#UBASE 
      000700 1D 00 02         [ 2] 1336 	SUBW X,#2
      000703 FF               [ 2] 1337         LDW (X),Y
      000704 81               [ 4] 1338         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1339 
                                   1340 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1341 ;       tmp     ( -- a )
                                   1342 ;       A temporary storage.
                                   1343 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000705                       1344         _HEADER TEMP,3,"TMP"
      000705 06 F7                    1         .word LINK 
                           000707     2         LINK=.
      000707 03                       3         .byte 3  
      000708 54 4D 50                 4         .ascii "TMP"
      00070B                          5         TEMP:
      00070B 90 AE 00 0A      [ 2] 1345 	LDW Y,#UTMP
      00070F 1D 00 02         [ 2] 1346 	SUBW X,#2
      000712 FF               [ 2] 1347         LDW (X),Y
      000713 81               [ 4] 1348         RET
                                   1349 
                                   1350 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1351 ;       >IN     ( -- a )
                                   1352 ;        Hold parsing pointer.
                                   1353 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000714                       1354         _HEADER INN,3,">IN"
      000714 07 07                    1         .word LINK 
                           000716     2         LINK=.
      000716 03                       3         .byte 3  
      000717 3E 49 4E                 4         .ascii ">IN"
      00071A                          5         INN:
      00071A 90 AE 00 0C      [ 2] 1355 	LDW Y,#UINN 
      00071E 1D 00 02         [ 2] 1356 	SUBW X,#2
      000721 FF               [ 2] 1357         LDW (X),Y
      000722 81               [ 4] 1358         RET
                                   1359 
                                   1360 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1361 ;       #TIB    ( -- a )
                                   1362 ;       Count in terminal input 
                                   1363 ;       buffer.
                                   1364 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000723                       1365         _HEADER NTIB,4,"#TIB"
      000723 07 16                    1         .word LINK 
                           000725     2         LINK=.
      000725 04                       3         .byte 4  
      000726 23 54 49 42              4         .ascii "#TIB"
      00072A                          5         NTIB:
      00072A 90 AE 00 0E      [ 2] 1366 	LDW Y,#UCTIB 
      00072E 1D 00 02         [ 2] 1367 	SUBW X,#2
      000731 FF               [ 2] 1368         LDW (X),Y
      000732 81               [ 4] 1369         RET
                                   1370 
                                   1371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1372 ;       TBUF ( -- a )
                                   1373 ;       address of 128 bytes 
                                   1374 ;       transaction buffer
                                   1375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000733                       1376         _HEADER TBUF,4,"TBUF"
      000733 07 25                    1         .word LINK 
                           000735     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000735 04                       3         .byte 4  
      000736 54 42 55 46              4         .ascii "TBUF"
      00073A                          5         TBUF:
      00073A 90 AE 16 80      [ 2] 1377         ldw y,#ROWBUFF
      00073E 1D 00 02         [ 2] 1378         subw x,#CELLL
      000741 FF               [ 2] 1379         ldw (x),y 
      000742 81               [ 4] 1380         ret 
                                   1381 
                                   1382 ; systeme variable 
                                   1383 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1384 ; compilation destination 
                                   1385 ; TFLASH ( -- A )
                                   1386 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000743                       1387         _HEADER TFLASH,6,"TFLASH"
      000743 07 35                    1         .word LINK 
                           000745     2         LINK=.
      000745 06                       3         .byte 6  
      000746 54 46 4C 41 53 48        4         .ascii "TFLASH"
      00074C                          5         TFLASH:
      00074C 1D 00 02         [ 2] 1388         subw x,#CELLL 
      00074F 90 AE 00 20      [ 2] 1389         ldw y,#UTFLASH
      000753 FF               [ 2] 1390         ldw (x),y 
      000754 81               [ 4] 1391         ret 
                                   1392 
                                   1393 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1394 ;       "EVAL   ( -- a )
                                   1395 ;       Execution vector of EVAL.
                                   1396 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000755                       1397         _HEADER TEVAL,5,"'EVAL"
      000755 07 45                    1         .word LINK 
                           000757     2         LINK=.
      000757 05                       3         .byte 5  
      000758 27 45 56 41 4C           4         .ascii "'EVAL"
      00075D                          5         TEVAL:
      00075D 90 AE 00 12      [ 2] 1398 	LDW Y,#UINTER 
      000761 1D 00 02         [ 2] 1399 	SUBW X,#2
      000764 FF               [ 2] 1400         LDW (X),Y
      000765 81               [ 4] 1401         RET
                                   1402 
                                   1403 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1404 ;       HLD     ( -- a )
                                   1405 ;       Hold a pointer of output
                                   1406 ;        string.
                                   1407 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000766                       1408         _HEADER HLD,3,"HLD"
      000766 07 57                    1         .word LINK 
                           000768     2         LINK=.
      000768 03                       3         .byte 3  
      000769 48 4C 44                 4         .ascii "HLD"
      00076C                          5         HLD:
      00076C 90 AE 00 14      [ 2] 1409 	LDW Y,#UHLD 
      000770 1D 00 02         [ 2] 1410 	SUBW X,#2
      000773 FF               [ 2] 1411         LDW (X),Y
      000774 81               [ 4] 1412         RET
                                   1413 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1414 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1415 ;       CONTEXT ( -- a )
                                   1416 ;       Start vocabulary search.
                                   1417 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000775                       1418         _HEADER CNTXT,7,"CONTEXT"
      000775 07 68                    1         .word LINK 
                           000777     2         LINK=.
      000777 07                       3         .byte 7  
      000778 43 4F 4E 54 45 58 54     4         .ascii "CONTEXT"
      00077F                          5         CNTXT:
      00077F 90 AE 00 16      [ 2] 1419 	LDW Y,#UCNTXT
      000783 1D 00 02         [ 2] 1420 	SUBW X,#2
      000786 FF               [ 2] 1421         LDW (X),Y
      000787 81               [ 4] 1422         RET
                                   1423 
                                   1424 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1425 ;       VP      ( -- a )
                                   1426 ;       Point to top of variables
                                   1427 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000788                       1428         _HEADER VPP,2,"VP"
      000788 07 77                    1         .word LINK 
                           00078A     2         LINK=.
      00078A 02                       3         .byte 2  
      00078B 56 50                    4         .ascii "VP"
      00078D                          5         VPP:
      00078D 90 AE 00 18      [ 2] 1429 	LDW Y,#UVP 
      000791 1D 00 02         [ 2] 1430 	SUBW X,#2
      000794 FF               [ 2] 1431         LDW (X),Y
      000795 81               [ 4] 1432         RET
                                   1433 
                                   1434 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1435 ;       CP    ( -- a )
                                   1436 ;       Pointer to top of FLASH 
                                   1437 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000796                       1438         _HEADER CPP,2,"CP"
      000796 07 8A                    1         .word LINK 
                           000798     2         LINK=.
      000798 02                       3         .byte 2  
      000799 43 50                    4         .ascii "CP"
      00079B                          5         CPP:
      00079B 90 AE 00 1A      [ 2] 1439         ldw y,#UCP 
      00079F 1D 00 02         [ 2] 1440         subw x,#CELLL 
      0007A2 FF               [ 2] 1441         ldw (x),y 
      0007A3 81               [ 4] 1442         ret                
                                   1443 
                                   1444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1445 ;       LAST    ( -- a )
                                   1446 ;       Point to last name in 
                                   1447 ;       dictionary.
                                   1448 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007A4                       1449         _HEADER LAST,4,"LAST"
      0007A4 07 98                    1         .word LINK 
                           0007A6     2         LINK=.
      0007A6 04                       3         .byte 4  
      0007A7 4C 41 53 54              4         .ascii "LAST"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007AB                          5         LAST:
      0007AB 90 AE 00 1C      [ 2] 1450 	LDW Y,#ULAST 
      0007AF 1D 00 02         [ 2] 1451 	SUBW X,#2
      0007B2 FF               [ 2] 1452         LDW (X),Y
      0007B3 81               [ 4] 1453         RET
                                   1454 
                                   1455 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1456 ; address of system variable URLAST 
                                   1457 ;       RAMLAST ( -- a )
                                   1458 ; RAM dictionary context 
                                   1459 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007B4                       1460         _HEADER RAMLAST,7,"RAMLAST"
      0007B4 07 A6                    1         .word LINK 
                           0007B6     2         LINK=.
      0007B6 07                       3         .byte 7  
      0007B7 52 41 4D 4C 41 53 54     4         .ascii "RAMLAST"
      0007BE                          5         RAMLAST:
      0007BE 90 AE 00 22      [ 2] 1461         ldw y,#URLAST 
      0007C2 1D 00 02         [ 2] 1462         subw x,#CELLL 
      0007C5 FF               [ 2] 1463         ldw (x),y 
      0007C6 81               [ 4] 1464         ret 
                                   1465 
                                   1466 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1467 ;       OFFSET ( -- a )
                                   1468 ;       address of system 
                                   1469 ;       variable OFFSET 
                                   1470 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007C7                       1471         _HEADER OFFSET,6,"OFFSET"
      0007C7 07 B6                    1         .word LINK 
                           0007C9     2         LINK=.
      0007C9 06                       3         .byte 6  
      0007CA 4F 46 46 53 45 54        4         .ascii "OFFSET"
      0007D0                          5         OFFSET:
      0007D0 1D 00 02         [ 2] 1472         subw x,#CELLL
      0007D3 90 AE 00 1E      [ 2] 1473         ldw y,#UOFFSET 
      0007D7 FF               [ 2] 1474         ldw (x),y 
      0007D8 81               [ 4] 1475         ret 
                                   1476 
                                   1477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1478 ; adjust jump address 
                                   1479 ;  adding OFFSET
                                   1480 ; ADR-ADJ ( a -- a+offset )
                                   1481 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007D9                       1482 ADRADJ: 
      0007D9 CD 07 D0         [ 4] 1483         call OFFSET 
      0007DC CD 05 00         [ 4] 1484         call AT 
      0007DF CC 08 59         [ 2] 1485         jp PLUS 
                                   1486 
                                   1487 
                                   1488 ;; Common functions
                                   1489 
                                   1490 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1491 ;       ?DUP    ( w -- w w | 0 )
                                   1492 ;       Dup tos if its is not zero.
                                   1493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007E2                       1494         _HEADER QDUP,4,"?DUP"
      0007E2 07 C9                    1         .word LINK 
                           0007E4     2         LINK=.
      0007E4 04                       3         .byte 4  
      0007E5 3F 44 55 50              4         .ascii "?DUP"
      0007E9                          5         QDUP:
      0007E9 90 93            [ 1] 1495         LDW Y,X
      0007EB 90 FE            [ 2] 1496 	LDW Y,(Y)
      0007ED 27 04            [ 1] 1497         JREQ     QDUP1
      0007EF 1D 00 02         [ 2] 1498 	SUBW X,#CELLL 
      0007F2 FF               [ 2] 1499         LDW (X),Y
      0007F3 81               [ 4] 1500 QDUP1:  RET
                                   1501 
                                   1502 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1503 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1504 ;       Rot 3rd item to top.
                                   1505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0007F4                       1506         _HEADER ROT,3,"ROT"
      0007F4 07 E4                    1         .word LINK 
                           0007F6     2         LINK=.
      0007F6 03                       3         .byte 3  
      0007F7 52 4F 54                 4         .ascii "ROT"
      0007FA                          5         ROT:
      0007FA 90 93            [ 1] 1507         ldw y,x 
      0007FC 90 FE            [ 2] 1508         ldw y,(y)
      0007FE 90 89            [ 2] 1509         pushw y 
      000800 90 93            [ 1] 1510         ldw y,x 
      000802 90 EE 04         [ 2] 1511         ldw y,(4,y)
      000805 FF               [ 2] 1512         ldw (x),y 
      000806 90 93            [ 1] 1513         ldw y,x 
      000808 90 EE 02         [ 2] 1514         ldw y,(2,y)
      00080B EF 04            [ 2] 1515         ldw (4,x),y 
      00080D 90 85            [ 2] 1516         popw y 
      00080F EF 02            [ 2] 1517         ldw (2,x),y
      000811 81               [ 4] 1518         ret 
                                   1519 
                                   1520 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1521 ;    <ROT ( n1 n2 n3 -- n3 n1 n2 )
                                   1522 ;    rotate left 3 top elements 
                                   1523 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000812                       1524     _HEADER NROT,4,"<ROT"
      000812 07 F6                    1         .word LINK 
                           000814     2         LINK=.
      000814 04                       3         .byte 4  
      000815 3C 52 4F 54              4         .ascii "<ROT"
      000819                          5         NROT:
      000819 90 93            [ 1] 1525     LDW Y,X 
      00081B 90 FE            [ 2] 1526     LDW Y,(Y)
      00081D 90 89            [ 2] 1527     PUSHW Y ; n3 >R 
      00081F 90 93            [ 1] 1528     LDW Y,X 
      000821 90 EE 02         [ 2] 1529     LDW Y,(2,Y) ; Y = n2 
      000824 FF               [ 2] 1530     LDW (X),Y   ; TOS = n2 
      000825 90 93            [ 1] 1531     LDW Y,X    
      000827 90 EE 04         [ 2] 1532     LDW Y,(4,Y) ; Y = n1 
      00082A EF 02            [ 2] 1533     LDW (2,X),Y ;   = n1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00082C 90 85            [ 2] 1534     POPW Y  ; R> Y 
      00082E EF 04            [ 2] 1535     LDW (4,X),Y ; = n3 
      000830 81               [ 4] 1536     RET 
                                   1537 
                                   1538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1539 ;       2DROP   ( w w -- )
                                   1540 ;       Discard two items on stack.
                                   1541 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000831                       1542         _HEADER DDROP,5,"2DROP"
      000831 08 14                    1         .word LINK 
                           000833     2         LINK=.
      000833 05                       3         .byte 5  
      000834 32 44 52 4F 50           4         .ascii "2DROP"
      000839                          5         DDROP:
      000839 1C 00 04         [ 2] 1543         ADDW X,#4
      00083C 81               [ 4] 1544         RET
                                   1545 
                                   1546 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1547 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1548 ;       Duplicate top two items.
                                   1549 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00083D                       1550         _HEADER DDUP,4,"2DUP"
      00083D 08 33                    1         .word LINK 
                           00083F     2         LINK=.
      00083F 04                       3         .byte 4  
      000840 32 44 55 50              4         .ascii "2DUP"
      000844                          5         DDUP:
      000844 1D 00 04         [ 2] 1551         SUBW X,#4
      000847 90 93            [ 1] 1552         LDW Y,X
      000849 90 EE 06         [ 2] 1553         LDW Y,(6,Y)
      00084C EF 02            [ 2] 1554         LDW (2,X),Y
      00084E 90 93            [ 1] 1555         LDW Y,X
      000850 90 EE 04         [ 2] 1556         LDW Y,(4,Y)
      000853 FF               [ 2] 1557         LDW (X),Y
      000854 81               [ 4] 1558         RET
                                   1559 
                                   1560 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1561 ;       +       ( w w -- sum )
                                   1562 ;       Add top two items.
                                   1563 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000855                       1564         _HEADER PLUS,1,"+"
      000855 08 3F                    1         .word LINK 
                           000857     2         LINK=.
      000857 01                       3         .byte 1  
      000858 2B                       4         .ascii "+"
      000859                          5         PLUS:
      000859 90 93            [ 1] 1565         LDW Y,X
      00085B 90 FE            [ 2] 1566         LDW Y,(Y)
      00085D 90 BF 26         [ 2] 1567         LDW YTEMP,Y
      000860 1C 00 02         [ 2] 1568         ADDW X,#2
      000863 90 93            [ 1] 1569         LDW Y,X
      000865 90 FE            [ 2] 1570         LDW Y,(Y)
      000867 72 B9 00 26      [ 2] 1571         ADDW Y,YTEMP
      00086B FF               [ 2] 1572         LDW (X),Y
      00086C 81               [ 4] 1573         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1574 
                                   1575 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1576 ;       TRUE ( -- -1 )
                                   1577 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00086D                       1578         _HEADER TRUE,4,"TRUE"
      00086D 08 57                    1         .word LINK 
                           00086F     2         LINK=.
      00086F 04                       3         .byte 4  
      000870 54 52 55 45              4         .ascii "TRUE"
      000874                          5         TRUE:
      000874 A6 FF            [ 1] 1579         LD A,#255 
      000876 1D 00 02         [ 2] 1580         SUBW X,#CELLL
      000879 F7               [ 1] 1581         LD (X),A 
      00087A E7 01            [ 1] 1582         LD (1,X),A 
      00087C 81               [ 4] 1583         RET 
                                   1584 
                                   1585 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1586 ;       FALSE ( -- 0 )
                                   1587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00087D                       1588         _HEADER FALSE,5,"FALSE"
      00087D 08 6F                    1         .word LINK 
                           00087F     2         LINK=.
      00087F 05                       3         .byte 5  
      000880 46 41 4C 53 45           4         .ascii "FALSE"
      000885                          5         FALSE:
      000885 1D 00 02         [ 2] 1589         SUBW X,#CELLL 
      000888 7F               [ 1] 1590         CLR (X) 
      000889 6F 01            [ 1] 1591         CLR (1,X)
      00088B 81               [ 4] 1592         RET 
                                   1593 
                                   1594 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1595 ;       NOT     ( w -- w )
                                   1596 ;       One's complement of tos.
                                   1597 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00088C                       1598         _HEADER INVER,3,"NOT"
      00088C 08 7F                    1         .word LINK 
                           00088E     2         LINK=.
      00088E 03                       3         .byte 3  
      00088F 4E 4F 54                 4         .ascii "NOT"
      000892                          5         INVER:
      000892 90 93            [ 1] 1599         LDW Y,X
      000894 90 FE            [ 2] 1600         LDW Y,(Y)
      000896 90 53            [ 2] 1601         CPLW Y
      000898 FF               [ 2] 1602         LDW (X),Y
      000899 81               [ 4] 1603         RET
                                   1604 
                                   1605 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1606 ;       NEGATE  ( n -- -n )
                                   1607 ;       Two's complement of tos.
                                   1608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00089A                       1609         _HEADER NEGAT,6,"NEGATE"
      00089A 08 8E                    1         .word LINK 
                           00089C     2         LINK=.
      00089C 06                       3         .byte 6  
      00089D 4E 45 47 41 54 45        4         .ascii "NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0008A3                          5         NEGAT:
      0008A3 90 93            [ 1] 1610         LDW Y,X
      0008A5 90 FE            [ 2] 1611         LDW Y,(Y)
      0008A7 90 50            [ 2] 1612         NEGW Y
      0008A9 FF               [ 2] 1613         LDW (X),Y
      0008AA 81               [ 4] 1614         RET
                                   1615 
                                   1616 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1617 ;       DNEGATE ( d -- -d )
                                   1618 ;       Two's complement of double.
                                   1619 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008AB                       1620         _HEADER DNEGA,7,"DNEGATE"
      0008AB 08 9C                    1         .word LINK 
                           0008AD     2         LINK=.
      0008AD 07                       3         .byte 7  
      0008AE 44 4E 45 47 41 54 45     4         .ascii "DNEGATE"
      0008B5                          5         DNEGA:
      0008B5 90 93            [ 1] 1621         LDW Y,X
      0008B7 90 FE            [ 2] 1622 	LDW Y,(Y)
      0008B9 90 53            [ 2] 1623         CPLW Y
      0008BB 90 89            [ 2] 1624         PUSHW Y      ; Y >R 
      0008BD 90 93            [ 1] 1625         LDW Y,X
      0008BF 90 EE 02         [ 2] 1626         LDW Y,(2,Y)
      0008C2 90 53            [ 2] 1627         CPLW Y
      0008C4 72 A9 00 01      [ 2] 1628         ADDW Y,#1
      0008C8 EF 02            [ 2] 1629         LDW (2,X),Y
      0008CA 90 85            [ 2] 1630         POPW Y       ; R> Y  
      0008CC 24 02            [ 1] 1631         JRNC DN1 
      0008CE 90 5C            [ 1] 1632         INCW Y
      0008D0 FF               [ 2] 1633 DN1:    LDW (X),Y
      0008D1 81               [ 4] 1634         RET
                                   1635 
                                   1636 
                                   1637 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1638 ;       S>D ( n -- d )
                                   1639 ; convert single integer to double 
                                   1640 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008D2                       1641         _HEADER STOD,3,"S>D"
      0008D2 08 AD                    1         .word LINK 
                           0008D4     2         LINK=.
      0008D4 03                       3         .byte 3  
      0008D5 53 3E 44                 4         .ascii "S>D"
      0008D8                          5         STOD:
      0008D8 1D 00 02         [ 2] 1642         SUBW X,#CELLL 
      0008DB 7F               [ 1] 1643         CLR (X) 
      0008DC 6F 01            [ 1] 1644         CLR (1,X) 
      0008DE 90 93            [ 1] 1645         LDW Y,X 
      0008E0 90 EE 02         [ 2] 1646         LDW Y,(2,Y)
      0008E3 2A 05            [ 1] 1647         JRPL 1$
      0008E5 90 AE FF FF      [ 2] 1648         LDW Y,#-1 
      0008E9 FF               [ 2] 1649         LDW (X),Y 
      0008EA 81               [ 4] 1650 1$:     RET 
                                   1651 
                                   1652 
                                   1653 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   1654 ;       -       ( n1 n2 -- n1-n2 )
                                   1655 ;       Subtraction.
                                   1656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0008EB                       1657         _HEADER SUBB,1,"-"
      0008EB 08 D4                    1         .word LINK 
                           0008ED     2         LINK=.
      0008ED 01                       3         .byte 1  
      0008EE 2D                       4         .ascii "-"
      0008EF                          5         SUBB:
      0008EF 90 93            [ 1] 1658         LDW Y,X
      0008F1 90 FE            [ 2] 1659         LDW Y,(Y) ; n2 
      0008F3 90 BF 26         [ 2] 1660         LDW YTEMP,Y 
      0008F6 1C 00 02         [ 2] 1661         ADDW X,#CELLL 
      0008F9 90 93            [ 1] 1662         LDW Y,X
      0008FB 90 FE            [ 2] 1663         LDW Y,(Y) ; n1 
      0008FD 72 B2 00 26      [ 2] 1664         SUBW Y,YTEMP ; n1-n2 
      000901 FF               [ 2] 1665         LDW (X),Y
      000902 81               [ 4] 1666         RET
                                   1667 
                                   1668 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1669 ;       ABS     ( n -- n )
                                   1670 ;       Return  absolute value of n.
                                   1671 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000903                       1672         _HEADER ABSS,3,"ABS"
      000903 08 ED                    1         .word LINK 
                           000905     2         LINK=.
      000905 03                       3         .byte 3  
      000906 41 42 53                 4         .ascii "ABS"
      000909                          5         ABSS:
      000909 90 93            [ 1] 1673         LDW Y,X
      00090B 90 FE            [ 2] 1674 	LDW Y,(Y)
      00090D 2A 03            [ 1] 1675         JRPL     AB1     ;negate:
      00090F 90 50            [ 2] 1676         NEGW     Y     ;else negate hi byte
      000911 FF               [ 2] 1677         LDW (X),Y
      000912 81               [ 4] 1678 AB1:    RET
                                   1679 
                                   1680 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1681 ;       =       ( w w -- t )
                                   1682 ;       Return true if top two are equal.
                                   1683 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000913                       1684         _HEADER EQUAL,1,"="
      000913 09 05                    1         .word LINK 
                           000915     2         LINK=.
      000915 01                       3         .byte 1  
      000916 3D                       4         .ascii "="
      000917                          5         EQUAL:
      000917 A6 FF            [ 1] 1685         LD A,#0xFF  ;true
      000919 90 93            [ 1] 1686         LDW Y,X    
      00091B 90 FE            [ 2] 1687         LDW Y,(Y)   ; n2 
      00091D 1C 00 02         [ 2] 1688         ADDW X,#CELLL 
      000920 F3               [ 2] 1689         CPW Y,(X)   ; n1==n2
      000921 27 01            [ 1] 1690         JREQ EQ1 
      000923 4F               [ 1] 1691         CLR A 
      000924 F7               [ 1] 1692 EQ1:    LD (X),A
      000925 E7 01            [ 1] 1693         LD (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000927 81               [ 4] 1694 	RET     
                                   1695 
                                   1696 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1697 ;       U<      ( u1 u2 -- f )
                                   1698 ;       Unsigned compare of top two items.
                                   1699 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000928                       1700         _HEADER ULESS,2,"U<"
      000928 09 15                    1         .word LINK 
                           00092A     2         LINK=.
      00092A 02                       3         .byte 2  
      00092B 55 3C                    4         .ascii "U<"
      00092D                          5         ULESS:
      00092D A6 FF            [ 1] 1701         LD A,#0xFF  ;true
      00092F 90 93            [ 1] 1702         LDW Y,X    
      000931 90 EE 02         [ 2] 1703         LDW Y,(2,Y) ; u1 
      000934 F3               [ 2] 1704         CPW Y,(X)   ; cpw u1  u2 
      000935 25 01            [ 1] 1705         JRULT     ULES1
      000937 4F               [ 1] 1706         CLR A
      000938 1C 00 02         [ 2] 1707 ULES1:  ADDW X,#CELLL 
      00093B F7               [ 1] 1708         LD (X),A
      00093C E7 01            [ 1] 1709         LD (1,X),A
      00093E 81               [ 4] 1710 	RET     
                                   1711 
                                   1712 
                                   1713 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1714 ;       <       ( n1 n2 -- t )
                                   1715 ;       Signed compare of top two items.
                                   1716 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00093F                       1717         _HEADER LESS,1,"<"
      00093F 09 2A                    1         .word LINK 
                           000941     2         LINK=.
      000941 01                       3         .byte 1  
      000942 3C                       4         .ascii "<"
      000943                          5         LESS:
      000943 A6 FF            [ 1] 1718         LD A,#0xFF  ;true
      000945 90 93            [ 1] 1719         LDW Y,X    
      000947 90 EE 02         [ 2] 1720         LDW Y,(2,Y)  ; n1 
      00094A F3               [ 2] 1721         CPW Y,(X)  ; n1 < n2 ? 
      00094B 2F 01            [ 1] 1722         JRSLT     LT1
      00094D 4F               [ 1] 1723         CLR A
      00094E 1C 00 02         [ 2] 1724 LT1:    ADDW X,#CELLL 
      000951 F7               [ 1] 1725         LD (X),A
      000952 E7 01            [ 1] 1726         LD (1,X),A
      000954 81               [ 4] 1727 	RET     
                                   1728 
                                   1729 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1730 ;   U> ( u1 u2 -- f )
                                   1731 ;   f = true if u1>u2 
                                   1732 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000955                       1733         _HEADER UGREAT,2,"U>"
      000955 09 41                    1         .word LINK 
                           000957     2         LINK=.
      000957 02                       3         .byte 2  
      000958 55 3E                    4         .ascii "U>"
      00095A                          5         UGREAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      00095A A6 FF            [ 1] 1734         LD A,#255  
      00095C 90 93            [ 1] 1735         LDW Y,X 
      00095E 90 EE 02         [ 2] 1736         LDW Y,(2,Y)  ; u1 
      000961 F3               [ 2] 1737         CPW Y,(X)  ; u1 > u2 
      000962 22 01            [ 1] 1738         JRUGT UGREAT1 
      000964 4F               [ 1] 1739         CLR A   
      000965                       1740 UGREAT1:
      000965 1C 00 02         [ 2] 1741         ADDW X,#CELLL 
      000968 F7               [ 1] 1742         LD (X),A 
      000969 E7 01            [ 1] 1743         LD (1,X),A 
      00096B 81               [ 4] 1744         RET 
                                   1745 
                                   1746 
                                   1747 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1748 ;       >   (n1 n2 -- f )
                                   1749 ;  signed compare n1 n2 
                                   1750 ;  true if n1 > n2 
                                   1751 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00096C                       1752         _HEADER GREAT,1,">"
      00096C 09 57                    1         .word LINK 
                           00096E     2         LINK=.
      00096E 01                       3         .byte 1  
      00096F 3E                       4         .ascii ">"
      000970                          5         GREAT:
      000970 A6 FF            [ 1] 1753         LD A,#0xFF ;
      000972 90 93            [ 1] 1754         LDW Y,X 
      000974 90 EE 02         [ 2] 1755         LDW Y,(2,Y)  ; n1 
      000977 F3               [ 2] 1756         CPW Y,(X) ; n1 > n2 ?  
      000978 2C 01            [ 1] 1757         JRSGT GREAT1 
      00097A 4F               [ 1] 1758         CLR  A
      00097B                       1759 GREAT1:
      00097B 1C 00 02         [ 2] 1760         ADDW X,#CELLL 
      00097E F7               [ 1] 1761         LD (X),A 
      00097F E7 01            [ 1] 1762         LD (1,X),A 
      000981 81               [ 4] 1763         RET 
                                   1764 
                                   1765 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1766 ;       MAX     ( n n -- n )
                                   1767 ;       Return greater of two top items.
                                   1768 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000982                       1769         _HEADER MAX,3,"MAX"
      000982 09 6E                    1         .word LINK 
                           000984     2         LINK=.
      000984 03                       3         .byte 3  
      000985 4D 41 58                 4         .ascii "MAX"
      000988                          5         MAX:
      000988 90 93            [ 1] 1770         LDW Y,X    
      00098A 90 FE            [ 2] 1771         LDW Y,(Y) ; n2 
      00098C E3 02            [ 2] 1772         CPW Y,(2,X)   
      00098E 2F 02            [ 1] 1773         JRSLT  MAX1
      000990 EF 02            [ 2] 1774         LDW (2,X),Y
      000992 1C 00 02         [ 2] 1775 MAX1:   ADDW X,#2
      000995 81               [ 4] 1776 	RET     
                                   1777 
                                   1778 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   1779 ;       MIN     ( n n -- n )
                                   1780 ;       Return smaller of top two items.
                                   1781 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000996                       1782         _HEADER MIN,3,"MIN"
      000996 09 84                    1         .word LINK 
                           000998     2         LINK=.
      000998 03                       3         .byte 3  
      000999 4D 49 4E                 4         .ascii "MIN"
      00099C                          5         MIN:
      00099C 90 93            [ 1] 1783         LDW Y,X    
      00099E 90 FE            [ 2] 1784         LDW Y,(Y)  ; n2 
      0009A0 E3 02            [ 2] 1785         CPW Y,(2,X) 
      0009A2 2C 02            [ 1] 1786         JRSGT MIN1
      0009A4 EF 02            [ 2] 1787         LDW (2,X),Y
      0009A6 1C 00 02         [ 2] 1788 MIN1:	ADDW X,#2
      0009A9 81               [ 4] 1789 	RET     
                                   1790 
                                   1791 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1792 ;       WITHIN  ( u ul uh -- t )
                                   1793 ;       Return true if u is within
                                   1794 ;       range of ul and uh. ( ul <= u < uh )
                                   1795 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0009AA                       1796         _HEADER WITHI,6,"WITHIN"
      0009AA 09 98                    1         .word LINK 
                           0009AC     2         LINK=.
      0009AC 06                       3         .byte 6  
      0009AD 57 49 54 48 49 4E        4         .ascii "WITHIN"
      0009B3                          5         WITHI:
      0009B3 CD 06 5E         [ 4] 1797         CALL     OVER
      0009B6 CD 08 EF         [ 4] 1798         CALL     SUBB
      0009B9 CD 05 FF         [ 4] 1799         CALL     TOR
      0009BC CD 08 EF         [ 4] 1800         CALL     SUBB
      0009BF CD 05 51         [ 4] 1801         CALL     RFROM
      0009C2 CC 09 2D         [ 2] 1802         JP     ULESS
                                   1803 
                                   1804 ;; Divide
                                   1805 
                                   1806 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1807 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1808 ;       Unsigned divide of a double by a
                                   1809 ;       single. Return mod and quotient.
                                   1810 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1811 ; 2021-02-22
                                   1812 ; changed algorithm for Jeeek one 
                                   1813 ; ref: https://github.com/TG9541/stm8ef/pull/406        
      0009C5                       1814         _HEADER UMMOD,6,"UM/MOD"
      0009C5 09 AC                    1         .word LINK 
                           0009C7     2         LINK=.
      0009C7 06                       3         .byte 6  
      0009C8 55 4D 2F 4D 4F 44        4         .ascii "UM/MOD"
      0009CE                          5         UMMOD:
      0009CE 90 93            [ 1] 1815         LDW     Y,X             ; stack pointer to Y
      0009D0 FE               [ 2] 1816         LDW     X,(X)           ; un
      0009D1 BF 26            [ 2] 1817         LDW     YTEMP,X         ; save un
      0009D3 93               [ 1] 1818         LDW     X,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      0009D4 5C               [ 1] 1819         INCW    X               ; drop un
      0009D5 5C               [ 1] 1820         INCW    X
      0009D6 89               [ 2] 1821         PUSHW   X               ; save stack pointer
      0009D7 FE               [ 2] 1822         LDW     X,(X)           ; X=udh
      0009D8 26 0B            [ 1] 1823         JRNE    MMSM0
      0009DA 1E 01            [ 2] 1824         LDW    X,(1,SP)
      0009DC EE 02            [ 2] 1825         LDW    X,(2,X)          ; udl 
      0009DE 90 BE 26         [ 2] 1826         LDW     Y,YTEMP         ;divisor 
      0009E1 65               [ 2] 1827         DIVW    X,Y             ; udl/un 
      0009E2 51               [ 1] 1828         EXGW    X,Y 
      0009E3 20 26            [ 2] 1829         JRA     MMSMb 
      0009E5                       1830 MMSM0:    
      0009E5 90 EE 04         [ 2] 1831         LDW     Y,(4,Y)         ; Y=udl (offset before drop)
      0009E8 B3 26            [ 2] 1832         CPW     X,YTEMP
      0009EA 25 09            [ 1] 1833         JRULT   MMSM1           ; X is still on the R-stack
      0009EC 85               [ 2] 1834         POPW    X               ; restore stack pointer
      0009ED 90 5F            [ 1] 1835         CLRW    Y
      0009EF EF 02            [ 2] 1836         LDW     (2,X),Y         ; remainder 0
      0009F1 90 5A            [ 2] 1837         DECW    Y
      0009F3 FF               [ 2] 1838         LDW     (X),Y           ; quotient max. 16 bit value
      0009F4 81               [ 4] 1839         RET
      0009F5                       1840 MMSM1:
      0009F5 A6 10            [ 1] 1841         LD      A,#16           ; loop count
      0009F7 90 58            [ 2] 1842         SLLW    Y               ; udl shift udl into udh
      0009F9                       1843 MMSM3:
      0009F9 59               [ 2] 1844         RLCW    X               ; rotate udl bit into uhdh (= remainder)
      0009FA 25 04            [ 1] 1845         JRC     MMSMa           ; if carry out of rotate
      0009FC B3 26            [ 2] 1846         CPW     X,YTEMP         ; compare udh to un
      0009FE 25 05            [ 1] 1847         JRULT   MMSM4           ; can't subtract
      000A00                       1848 MMSMa:
      000A00 72 B0 00 26      [ 2] 1849         SUBW    X,YTEMP         ; can subtract
      000A04 98               [ 1] 1850         RCF
      000A05                       1851 MMSM4:
      000A05 8C               [ 1] 1852         CCF                     ; quotient bit
      000A06 90 59            [ 2] 1853         RLCW    Y               ; rotate into quotient, rotate out udl
      000A08 4A               [ 1] 1854         DEC     A               ; repeat
      000A09 26 EE            [ 1] 1855         JRNE    MMSM3           ; if A == 0
      000A0B                       1856 MMSMb:
      000A0B BF 26            [ 2] 1857         LDW     YTEMP,X         ; done, save remainder
      000A0D 85               [ 2] 1858         POPW    X               ; restore stack pointer
      000A0E FF               [ 2] 1859         LDW     (X),Y           ; save quotient
      000A0F 90 BE 26         [ 2] 1860         LDW     Y,YTEMP         ; remainder onto stack
      000A12 EF 02            [ 2] 1861         LDW     (2,X),Y
      000A14 81               [ 4] 1862         RET
                                   1863 
                                   1864 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1865 ;   U/MOD ( u1 u2 -- ur uq )
                                   1866 ;   unsigned divide u1/u2 
                                   1867 ;   return remainder and quotient 
                                   1868 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A15                       1869         _HEADER USLMOD,5,"U/MOD"
      000A15 09 C7                    1         .word LINK 
                           000A17     2         LINK=.
      000A17 05                       3         .byte 5  
      000A18 55 2F 4D 4F 44           4         .ascii "U/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000A1D                          5         USLMOD:
      000A1D 90 93            [ 1] 1870         LDW Y,X 
      000A1F 90 FE            [ 2] 1871         LDW Y,(Y)  ; dividend 
      000A21 89               [ 2] 1872         PUSHW X    ; DP >R 
      000A22 EE 02            [ 2] 1873         LDW X,(2,X) ; divisor 
      000A24 65               [ 2] 1874         DIVW X,Y 
      000A25 89               [ 2] 1875         PUSHW X     ; quotient 
      000A26 1E 03            [ 2] 1876         LDW X,(3,SP) ; DP 
      000A28 EF 02            [ 2] 1877         LDW (2,X),Y ; remainder 
      000A2A 16 01            [ 2] 1878         LDW Y,(1,SP) ; quotient 
      000A2C FF               [ 2] 1879         LDW (X),Y 
      000A2D 5B 04            [ 2] 1880         ADDW SP,#2*CELLL ; drop quotient and DP from rstack 
      000A2F 81               [ 4] 1881         RET 
                                   1882 
                                   1883 
                                   1884 
                                   1885 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
                                   1886 ;       M/MOD   ( d n -- r q )
                                   1887 ;       Signed floored divide of double by
                                   1888 ;       single. Return mod and quotient.
                                   1889 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A30                       1890         _HEADER MSMOD,5,"M/MOD"
      000A30 0A 17                    1         .word LINK 
                           000A32     2         LINK=.
      000A32 05                       3         .byte 5  
      000A33 4D 2F 4D 4F 44           4         .ascii "M/MOD"
      000A38                          5         MSMOD:
      000A38 CD 06 36         [ 4] 1891         CALL	DUPP
      000A3B CD 06 6D         [ 4] 1892         CALL	ZLESS
      000A3E CD 06 36         [ 4] 1893         CALL	DUPP
      000A41 CD 05 FF         [ 4] 1894         CALL	TOR
      000A44 CD 04 B5         [ 4] 1895         CALL	QBRAN
      000A47 0A 55                 1896         .word	MMOD1
      000A49 CD 08 A3         [ 4] 1897         CALL	NEGAT
      000A4C CD 05 FF         [ 4] 1898         CALL	TOR
      000A4F CD 08 B5         [ 4] 1899         CALL	DNEGA
      000A52 CD 05 51         [ 4] 1900         CALL	RFROM
      000A55 CD 05 FF         [ 4] 1901 MMOD1:	CALL	TOR
      000A58 CD 06 36         [ 4] 1902         CALL	DUPP
      000A5B CD 06 6D         [ 4] 1903         CALL	ZLESS
      000A5E CD 04 B5         [ 4] 1904         CALL	QBRAN
      000A61 0A 69                 1905         .word	MMOD2
      000A63 CD 05 62         [ 4] 1906         CALL	RAT
      000A66 CD 08 59         [ 4] 1907         CALL	PLUS
      000A69 CD 05 51         [ 4] 1908 MMOD2:	CALL	RFROM
      000A6C CD 09 CE         [ 4] 1909         CALL	UMMOD
      000A6F CD 05 51         [ 4] 1910         CALL	RFROM
      000A72 CD 04 B5         [ 4] 1911         CALL	QBRAN
      000A75 0A 80                 1912         .word	MMOD3
      000A77 CD 06 46         [ 4] 1913         CALL	SWAPP
      000A7A CD 08 A3         [ 4] 1914         CALL	NEGAT
      000A7D CC 06 46         [ 2] 1915         JP	SWAPP
      000A80 81               [ 4] 1916 MMOD3:	RET
                                   1917 
                                   1918 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   1919 ;       /MOD    ( n1 n2 -- r q )
                                   1920 ;       Signed divide n1/n2. 
                                   1921 ;       Return mod and quotient.
                                   1922 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000A81                       1923         _HEADER SLMOD,4,"/MOD"
      000A81 0A 32                    1         .word LINK 
                           000A83     2         LINK=.
      000A83 04                       3         .byte 4  
      000A84 2F 4D 4F 44              4         .ascii "/MOD"
      000A88                          5         SLMOD:
      000A88 F6               [ 1] 1924         LD A,(X)
      000A89 88               [ 1] 1925         PUSH A   ; n2 sign 
      000A8A E6 02            [ 1] 1926         LD A,(2,X)
      000A8C 88               [ 1] 1927         PUSH A    ; n1 sign 
      000A8D CD 09 09         [ 4] 1928         CALL ABSS 
      000A90 CD 05 FF         [ 4] 1929         CALL TOR  ; 
      000A93 CD 09 09         [ 4] 1930         CALL ABSS 
      000A96 CD 05 62         [ 4] 1931         CALL RAT   
      000A99 CD 0A 1D         [ 4] 1932         CALL USLMOD 
      000A9C 7B 03            [ 1] 1933         LD A,(3,SP)
      000A9E 1A 04            [ 1] 1934         OR A,(4,SP)
      000AA0 2A 30            [ 1] 1935         JRPL SLMOD8 ; both positive nothing to change 
      000AA2 7B 03            [ 1] 1936         LD A,(3,SP)
      000AA4 18 04            [ 1] 1937         XOR A,(4,SP)
      000AA6 2A 1D            [ 1] 1938         JRPL SLMOD1
                                   1939 ; dividend and divisor are opposite sign          
      000AA8 CD 08 A3         [ 4] 1940         CALL NEGAT ; negative quotient
      000AAB CD 06 5E         [ 4] 1941         CALL OVER 
      000AAE CD 06 7F         [ 4] 1942         CALL ZEQUAL 
      000AB1                       1943         _TBRAN SLMOD8 
      000AB1 CD 04 C3         [ 4]    1     CALL TBRAN 
      000AB4 0A D2                    2     .word SLMOD8 
      000AB6 CD 0B CC         [ 4] 1944         CALL ONEM   ; add one to quotient 
      000AB9 CD 05 62         [ 4] 1945         CALL RAT 
      000ABC CD 07 FA         [ 4] 1946         CALL ROT 
      000ABF CD 08 EF         [ 4] 1947         CALL SUBB  ; corrected_remainder=divisor-remainder 
      000AC2 CD 06 46         [ 4] 1948         CALL SWAPP
      000AC5                       1949 SLMOD1:
      000AC5 7B 04            [ 1] 1950         LD A,(4,SP) ; divisor sign 
      000AC7 2A 09            [ 1] 1951         JRPL SLMOD8 
      000AC9 CD 05 FF         [ 4] 1952         CALL TOR 
      000ACC CD 08 A3         [ 4] 1953         CALL NEGAT ; if divisor negative negate remainder 
      000ACF CD 05 51         [ 4] 1954         CALL RFROM 
      000AD2                       1955 SLMOD8: 
      000AD2 5B 04            [ 2] 1956         ADDW SP,#4 
      000AD4 81               [ 4] 1957         RET 
                                   1958 
                                   1959 
                                   1960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1961 ;       MOD     ( n n -- r )
                                   1962 ;       Signed divide. Return mod only.
                                   1963 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AD5                       1964         _HEADER MODD,3,"MOD"
      000AD5 0A 83                    1         .word LINK 
                           000AD7     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000AD7 03                       3         .byte 3  
      000AD8 4D 4F 44                 4         .ascii "MOD"
      000ADB                          5         MODD:
      000ADB CD 0A 88         [ 4] 1965 	CALL	SLMOD
      000ADE CC 06 2C         [ 2] 1966 	JP	DROP
                                   1967 
                                   1968 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1969 ;       /       ( n n -- q )
                                   1970 ;       Signed divide. Return quotient only.
                                   1971 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AE1                       1972         _HEADER SLASH,1,"/"
      000AE1 0A D7                    1         .word LINK 
                           000AE3     2         LINK=.
      000AE3 01                       3         .byte 1  
      000AE4 2F                       4         .ascii "/"
      000AE5                          5         SLASH:
      000AE5 CD 0A 88         [ 4] 1973         CALL	SLMOD
      000AE8 CD 06 46         [ 4] 1974         CALL	SWAPP
      000AEB CC 06 2C         [ 2] 1975         JP	DROP
                                   1976 
                                   1977 ;; Multiply
                                   1978 
                                   1979 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   1980 ;       UM*     ( u1 u2 -- ud )
                                   1981 ;       Unsigned multiply. Return 
                                   1982 ;       double product.
                                   1983 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000AEE                       1984         _HEADER UMSTA,3,"UM*"
      000AEE 0A E3                    1         .word LINK 
                           000AF0     2         LINK=.
      000AF0 03                       3         .byte 3  
      000AF1 55 4D 2A                 4         .ascii "UM*"
      000AF4                          5         UMSTA:
                                   1985 ; stack have 4 bytes u1=a:b u2=c:d
                                   1986         ;; bytes offset on data stack 
                           000002  1987         da=2 
                           000003  1988         db=3 
                           000000  1989         dc=0 
                           000001  1990         dd=1 
                                   1991         ;;;;;; local variables ;;;;;;;;;
                                   1992         ;; product bytes offset on return stack 
                           000001  1993         UD1=1  ; ud bits 31..24
                           000002  1994         UD2=2  ; ud bits 23..16
                           000003  1995         UD3=3  ; ud bits 15..8 
                           000004  1996         UD4=4  ; ud bits 7..0 
                                   1997         ;; local variable for product set to zero   
      000AF4 90 5F            [ 1] 1998         clrw y 
      000AF6 90 89            [ 2] 1999         pushw y  ; bits 15..0
      000AF8 90 89            [ 2] 2000         pushw y  ; bits 31..16 
      000AFA E6 03            [ 1] 2001         ld a,(db,x) ; b 
      000AFC 90 97            [ 1] 2002         ld yl,a 
      000AFE E6 01            [ 1] 2003         ld a,(dd,x)   ; d
      000B00 90 42            [ 4] 2004         mul y,a    ; b*d  
      000B02 17 03            [ 2] 2005         ldw (UD3,sp),y ; lowest weight product 
      000B04 E6 03            [ 1] 2006         ld a,(db,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000B06 90 97            [ 1] 2007         ld yl,a 
      000B08 E6 00            [ 1] 2008         ld a,(dc,x)
      000B0A 90 42            [ 4] 2009         mul y,a  ; b*c 
                                   2010         ;;; do the partial sum 
      000B0C 72 F9 02         [ 2] 2011         addw y,(UD2,sp)
      000B0F 4F               [ 1] 2012         clr a 
      000B10 49               [ 1] 2013         rlc a
      000B11 6B 01            [ 1] 2014         ld (UD1,sp),a 
      000B13 17 02            [ 2] 2015         ldw (UD2,sp),y 
      000B15 E6 02            [ 1] 2016         ld a,(da,x)
      000B17 90 97            [ 1] 2017         ld yl,a 
      000B19 E6 01            [ 1] 2018         ld a,(dd,x)
      000B1B 90 42            [ 4] 2019         mul y,a   ; a*d 
                                   2020         ;; do partial sum 
      000B1D 72 F9 02         [ 2] 2021         addw y,(UD2,sp)
      000B20 4F               [ 1] 2022         clr a 
      000B21 19 01            [ 1] 2023         adc a,(UD1,sp)
      000B23 6B 01            [ 1] 2024         ld (UD1,sp),a  
      000B25 17 02            [ 2] 2025         ldw (UD2,sp),y 
      000B27 E6 02            [ 1] 2026         ld a,(da,x)
      000B29 90 97            [ 1] 2027         ld yl,a 
      000B2B E6 00            [ 1] 2028         ld a,(dc,x)
      000B2D 90 42            [ 4] 2029         mul y,a  ;  a*c highest weight product 
                                   2030         ;;; do partial sum 
      000B2F 72 F9 01         [ 2] 2031         addw y,(UD1,sp)
      000B32 FF               [ 2] 2032         ldw (x),y  ; udh 
      000B33 16 03            [ 2] 2033         ldw y,(UD3,sp)
      000B35 EF 02            [ 2] 2034         ldw (2,x),y  ; udl  
      000B37 5B 04            [ 2] 2035         addw sp,#4 ; drop local variable 
      000B39 81               [ 4] 2036         ret  
                                   2037 
                                   2038 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2039 ;       *       ( n n -- n )
                                   2040 ;       Signed multiply. Return 
                                   2041 ;       single product.
                                   2042 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B3A                       2043         _HEADER STAR,1,"*"
      000B3A 0A F0                    1         .word LINK 
                           000B3C     2         LINK=.
      000B3C 01                       3         .byte 1  
      000B3D 2A                       4         .ascii "*"
      000B3E                          5         STAR:
      000B3E CD 0A F4         [ 4] 2044 	CALL	UMSTA
      000B41 CC 06 2C         [ 2] 2045 	JP	DROP
                                   2046 
                                   2047 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2048 ;       M*      ( n n -- d )
                                   2049 ;       Signed multiply. Return 
                                   2050 ;       double product.
                                   2051 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B44                       2052         _HEADER MSTAR,2,"M*"
      000B44 0B 3C                    1         .word LINK 
                           000B46     2         LINK=.
      000B46 02                       3         .byte 2  
      000B47 4D 2A                    4         .ascii "M*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000B49                          5         MSTAR:
      000B49 CD 08 44         [ 4] 2053         CALL	DDUP
      000B4C CD 06 BC         [ 4] 2054         CALL	XORR
      000B4F CD 06 6D         [ 4] 2055         CALL	ZLESS
      000B52 CD 05 FF         [ 4] 2056         CALL	TOR
      000B55 CD 09 09         [ 4] 2057         CALL	ABSS
      000B58 CD 06 46         [ 4] 2058         CALL	SWAPP
      000B5B CD 09 09         [ 4] 2059         CALL	ABSS
      000B5E CD 0A F4         [ 4] 2060         CALL	UMSTA
      000B61 CD 05 51         [ 4] 2061         CALL	RFROM
      000B64 CD 04 B5         [ 4] 2062         CALL	QBRAN
      000B67 0B 6C                 2063         .word	MSTA1
      000B69 CC 08 B5         [ 2] 2064         JP	DNEGA
      000B6C 81               [ 4] 2065 MSTA1:	RET
                                   2066 
                                   2067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2068 ;       */MOD   ( n1 n2 n3 -- r q )
                                   2069 ;       Multiply n1 and n2, then divide
                                   2070 ;       by n3. Return mod and quotient.
                                   2071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B6D                       2072         _HEADER SSMOD,5,"*/MOD"
      000B6D 0B 46                    1         .word LINK 
                           000B6F     2         LINK=.
      000B6F 05                       3         .byte 5  
      000B70 2A 2F 4D 4F 44           4         .ascii "*/MOD"
      000B75                          5         SSMOD:
      000B75 CD 05 FF         [ 4] 2073         CALL     TOR
      000B78 CD 0B 49         [ 4] 2074         CALL     MSTAR
      000B7B CD 05 51         [ 4] 2075         CALL     RFROM
      000B7E CC 0A 38         [ 2] 2076         JP     MSMOD
                                   2077 
                                   2078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2079 ;       */      ( n1 n2 n3 -- q )
                                   2080 ;       Multiply n1 by n2, then divide
                                   2081 ;       by n3. Return quotient only.
                                   2082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B81                       2083         _HEADER STASL,2,"*/"
      000B81 0B 6F                    1         .word LINK 
                           000B83     2         LINK=.
      000B83 02                       3         .byte 2  
      000B84 2A 2F                    4         .ascii "*/"
      000B86                          5         STASL:
      000B86 CD 0B 75         [ 4] 2084         CALL	SSMOD
      000B89 CD 06 46         [ 4] 2085         CALL	SWAPP
      000B8C CC 06 2C         [ 2] 2086         JP	DROP
                                   2087 
                                   2088 ;; Miscellaneous
                                   2089 
                                   2090 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2091 ;       2+   ( a -- a )
                                   2092 ;       Add cell size in byte to address.
                                   2093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B8F                       2094         _HEADER CELLP,2,"2+"
      000B8F 0B 83                    1         .word LINK 
                           000B91     2         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000B91 02                       3         .byte 2  
      000B92 32 2B                    4         .ascii "2+"
      000B94                          5         CELLP:
      000B94 90 93            [ 1] 2095         LDW Y,X
      000B96 90 FE            [ 2] 2096 	LDW Y,(Y)
      000B98 72 A9 00 02      [ 2] 2097         ADDW Y,#CELLL 
      000B9C FF               [ 2] 2098         LDW (X),Y
      000B9D 81               [ 4] 2099         RET
                                   2100 
                                   2101 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2102 ;       2-   ( a -- a )
                                   2103 ;       Subtract 2 from address.
                                   2104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000B9E                       2105         _HEADER CELLM,2,"2-"
      000B9E 0B 91                    1         .word LINK 
                           000BA0     2         LINK=.
      000BA0 02                       3         .byte 2  
      000BA1 32 2D                    4         .ascii "2-"
      000BA3                          5         CELLM:
      000BA3 90 93            [ 1] 2106         LDW Y,X
      000BA5 90 FE            [ 2] 2107 	LDW Y,(Y)
      000BA7 72 A2 00 02      [ 2] 2108         SUBW Y,#CELLL
      000BAB FF               [ 2] 2109         LDW (X),Y
      000BAC 81               [ 4] 2110         RET
                                   2111 
                                   2112 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2113 ;       2*   ( n -- n )
                                   2114 ;       Multiply tos by 2.
                                   2115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BAD                       2116         _HEADER CELLS,2,"2*"
      000BAD 0B A0                    1         .word LINK 
                           000BAF     2         LINK=.
      000BAF 02                       3         .byte 2  
      000BB0 32 2A                    4         .ascii "2*"
      000BB2                          5         CELLS:
      000BB2 90 93            [ 1] 2117         LDW Y,X
      000BB4 90 FE            [ 2] 2118 	LDW Y,(Y)
      000BB6 90 58            [ 2] 2119         SLAW Y
      000BB8 FF               [ 2] 2120         LDW (X),Y
      000BB9 81               [ 4] 2121         RET
                                   2122 
                                   2123 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2124 ;       1+      ( a -- a )
                                   2125 ;       Add cell size in byte 
                                   2126 ;       to address.
                                   2127 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BBA                       2128         _HEADER ONEP,2,"1+"
      000BBA 0B AF                    1         .word LINK 
                           000BBC     2         LINK=.
      000BBC 02                       3         .byte 2  
      000BBD 31 2B                    4         .ascii "1+"
      000BBF                          5         ONEP:
      000BBF 90 93            [ 1] 2129         LDW Y,X
      000BC1 90 FE            [ 2] 2130 	LDW Y,(Y)
      000BC3 90 5C            [ 1] 2131         INCW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000BC5 FF               [ 2] 2132         LDW (X),Y
      000BC6 81               [ 4] 2133         RET
                                   2134 
                                   2135 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2136 ;       1-      ( a -- a )
                                   2137 ;       Subtract 2 from address.
                                   2138 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BC7                       2139         _HEADER ONEM,2,"1-"
      000BC7 0B BC                    1         .word LINK 
                           000BC9     2         LINK=.
      000BC9 02                       3         .byte 2  
      000BCA 31 2D                    4         .ascii "1-"
      000BCC                          5         ONEM:
      000BCC 90 93            [ 1] 2140         LDW Y,X
      000BCE 90 FE            [ 2] 2141 	LDW Y,(Y)
      000BD0 90 5A            [ 2] 2142         DECW Y
      000BD2 FF               [ 2] 2143         LDW (X),Y
      000BD3 81               [ 4] 2144         RET
                                   2145 
                                   2146 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2147 ;  shift left n times 
                                   2148 ; LSHIFT ( n1 n2 -- n1<<n2 )
                                   2149 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BD4                       2150         _HEADER LSHIFT,6,"LSHIFT"
      000BD4 0B C9                    1         .word LINK 
                           000BD6     2         LINK=.
      000BD6 06                       3         .byte 6  
      000BD7 4C 53 48 49 46 54        4         .ascii "LSHIFT"
      000BDD                          5         LSHIFT:
      000BDD E6 01            [ 1] 2151         ld a,(1,x)
      000BDF 1C 00 02         [ 2] 2152         addw x,#CELLL 
      000BE2 90 93            [ 1] 2153         ldw y,x 
      000BE4 90 FE            [ 2] 2154         ldw y,(y)
      000BE6                       2155 LSHIFT1:
      000BE6 4D               [ 1] 2156         tnz a 
      000BE7 27 05            [ 1] 2157         jreq LSHIFT4 
      000BE9 90 58            [ 2] 2158         sllw y 
      000BEB 4A               [ 1] 2159         dec a 
      000BEC 20 F8            [ 2] 2160         jra LSHIFT1 
      000BEE                       2161 LSHIFT4:
      000BEE FF               [ 2] 2162         ldw (x),y 
      000BEF 81               [ 4] 2163         ret 
                                   2164 
                                   2165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2166 ; shift right n times                 
                                   2167 ; RSHIFT (n1 n2 -- n1>>n2 )
                                   2168 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000BF0                       2169         _HEADER RSHIFT,6,"RSHIFT"
      000BF0 0B D6                    1         .word LINK 
                           000BF2     2         LINK=.
      000BF2 06                       3         .byte 6  
      000BF3 52 53 48 49 46 54        4         .ascii "RSHIFT"
      000BF9                          5         RSHIFT:
      000BF9 E6 01            [ 1] 2170         ld a,(1,x)
      000BFB 1C 00 02         [ 2] 2171         addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000BFE 90 93            [ 1] 2172         ldw y,x 
      000C00 90 FE            [ 2] 2173         ldw y,(y)
      000C02                       2174 RSHIFT1:
      000C02 4D               [ 1] 2175         tnz a 
      000C03 27 05            [ 1] 2176         jreq RSHIFT4 
      000C05 90 54            [ 2] 2177         srlw y 
      000C07 4A               [ 1] 2178         dec a 
      000C08 20 F8            [ 2] 2179         jra RSHIFT1 
      000C0A                       2180 RSHIFT4:
      000C0A FF               [ 2] 2181         ldw (x),y 
      000C0B 81               [ 4] 2182         ret 
                                   2183 
                                   2184 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2185 ;       2/      ( n -- n )
                                   2186 ;       divide  tos by 2.
                                   2187 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C0C                       2188         _HEADER TWOSL,2,"2/"
      000C0C 0B F2                    1         .word LINK 
                           000C0E     2         LINK=.
      000C0E 02                       3         .byte 2  
      000C0F 32 2F                    4         .ascii "2/"
      000C11                          5         TWOSL:
      000C11 90 93            [ 1] 2189         LDW Y,X
      000C13 90 FE            [ 2] 2190 	LDW Y,(Y)
      000C15 90 57            [ 2] 2191         SRAW Y
      000C17 FF               [ 2] 2192         LDW (X),Y
      000C18 81               [ 4] 2193         RET
                                   2194 
                                   2195 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2196 ;       BL      ( -- 32 )
                                   2197 ;       Return 32,  blank character.
                                   2198 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C19                       2199         _HEADER BLANK,2,"BL"
      000C19 0C 0E                    1         .word LINK 
                           000C1B     2         LINK=.
      000C1B 02                       3         .byte 2  
      000C1C 42 4C                    4         .ascii "BL"
      000C1E                          5         BLANK:
      000C1E 1D 00 02         [ 2] 2200         SUBW X,#2
      000C21 90 AE 00 20      [ 2] 2201 	LDW Y,#32
      000C25 FF               [ 2] 2202         LDW (X),Y
      000C26 81               [ 4] 2203         RET
                                   2204 
                                   2205 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2206 ;         0     ( -- 0)
                                   2207 ;         Return 0.
                                   2208 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C27                       2209         _HEADER ZERO,1,"0"
      000C27 0C 1B                    1         .word LINK 
                           000C29     2         LINK=.
      000C29 01                       3         .byte 1  
      000C2A 30                       4         .ascii "0"
      000C2B                          5         ZERO:
      000C2B 1D 00 02         [ 2] 2210         SUBW X,#2
      000C2E 90 5F            [ 1] 2211 	CLRW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000C30 FF               [ 2] 2212         LDW (X),Y
      000C31 81               [ 4] 2213         RET
                                   2214 
                                   2215 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2216 ;         1     ( -- 1)
                                   2217 ;         Return 1.
                                   2218 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C32                       2219         _HEADER ONE,1,"1"
      000C32 0C 29                    1         .word LINK 
                           000C34     2         LINK=.
      000C34 01                       3         .byte 1  
      000C35 31                       4         .ascii "1"
      000C36                          5         ONE:
      000C36 1D 00 02         [ 2] 2220         SUBW X,#2
      000C39 90 AE 00 01      [ 2] 2221 	LDW Y,#1
      000C3D FF               [ 2] 2222         LDW (X),Y
      000C3E 81               [ 4] 2223         RET
                                   2224 
                                   2225 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2226 ;         -1    ( -- -1)
                                   2227 ;   Return -1
                                   2228 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C3F                       2229         _HEADER MONE,2,"-1"
      000C3F 0C 34                    1         .word LINK 
                           000C41     2         LINK=.
      000C41 02                       3         .byte 2  
      000C42 2D 31                    4         .ascii "-1"
      000C44                          5         MONE:
      000C44 1D 00 02         [ 2] 2230         SUBW X,#2
      000C47 90 AE FF FF      [ 2] 2231 	LDW Y,#0xFFFF
      000C4B FF               [ 2] 2232         LDW (X),Y
      000C4C 81               [ 4] 2233         RET
                                   2234 
                                   2235 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2236 ;       >CHAR   ( c -- c )
                                   2237 ;       Filter non-printing characters.
                                   2238 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C4D                       2239         _HEADER TCHAR,5,">CHAR"
      000C4D 0C 41                    1         .word LINK 
                           000C4F     2         LINK=.
      000C4F 05                       3         .byte 5  
      000C50 3E 43 48 41 52           4         .ascii ">CHAR"
      000C55                          5         TCHAR:
      000C55 E6 01            [ 1] 2240         ld a,(1,x)
      000C57 A1 20            [ 1] 2241         cp a,#32  
      000C59 2B 05            [ 1] 2242         jrmi 1$ 
      000C5B A1 7F            [ 1] 2243         cp a,#127 
      000C5D 2A 01            [ 1] 2244         jrpl 1$ 
      000C5F 81               [ 4] 2245         ret 
      000C60 A6 5F            [ 1] 2246 1$:     ld a,#'_ 
      000C62 E7 01            [ 1] 2247         ld (1,x),a 
      000C64 81               [ 4] 2248         ret 
                                   2249 
                                   2250 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2251 ;       DEPTH   ( -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2252 ;       Return  depth of  data stack.
                                   2253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C65                       2254         _HEADER DEPTH,5,"DEPTH"
      000C65 0C 4F                    1         .word LINK 
                           000C67     2         LINK=.
      000C67 05                       3         .byte 5  
      000C68 44 45 50 54 48           4         .ascii "DEPTH"
      000C6D                          5         DEPTH:
      000C6D 90 BE 2C         [ 2] 2255         LDW Y,SP0    ;save data stack ptr
      000C70 BF 24            [ 2] 2256 	LDW XTEMP,X
      000C72 72 B2 00 24      [ 2] 2257         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000C76 90 57            [ 2] 2258         SRAW Y    ;Y = #stack items
      000C78 1D 00 02         [ 2] 2259 	SUBW X,#2
      000C7B FF               [ 2] 2260         LDW (X),Y     ; if neg, underflow
      000C7C 81               [ 4] 2261         RET
                                   2262 
                                   2263 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2264 ;       PICK    ( ... +n -- ... w )
                                   2265 ;       Copy  nth stack item to tos.
                                   2266 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C7D                       2267         _HEADER PICK,4,"PICK"
      000C7D 0C 67                    1         .word LINK 
                           000C7F     2         LINK=.
      000C7F 04                       3         .byte 4  
      000C80 50 49 43 4B              4         .ascii "PICK"
      000C84                          5         PICK:
      000C84 90 93            [ 1] 2268         LDW Y,X   ;D = n1
      000C86 90 FE            [ 2] 2269         LDW Y,(Y)
                                   2270 ; modified for standard compliance          
                                   2271 ; 0 PICK must be equivalent to DUP 
      000C88 90 5C            [ 1] 2272         INCW Y 
      000C8A 90 58            [ 2] 2273         SLAW Y
      000C8C BF 24            [ 2] 2274         LDW XTEMP,X
      000C8E 72 B9 00 24      [ 2] 2275         ADDW Y,XTEMP
      000C92 90 FE            [ 2] 2276         LDW Y,(Y)
      000C94 FF               [ 2] 2277         LDW (X),Y
      000C95 81               [ 4] 2278         RET
                                   2279 
                                   2280 ;; Memory access
                                   2281 
                                   2282 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2283 ;       +!      ( n a -- )
                                   2284 ;       Add n to  contents at 
                                   2285 ;       address a.
                                   2286 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000C96                       2287         _HEADER PSTOR,2,"+!"
      000C96 0C 7F                    1         .word LINK 
                           000C98     2         LINK=.
      000C98 02                       3         .byte 2  
      000C99 2B 21                    4         .ascii "+!"
      000C9B                          5         PSTOR:
      000C9B 89               [ 2] 2288         PUSHW X   ; R: DP 
      000C9C 90 93            [ 1] 2289         LDW Y,X 
      000C9E FE               [ 2] 2290         LDW X,(X) ; a 
      000C9F 90 EE 02         [ 2] 2291         LDW Y,(2,Y)  ; n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000CA2 90 89            [ 2] 2292         PUSHW Y      ; R: DP n 
      000CA4 90 93            [ 1] 2293         LDW Y,X 
      000CA6 90 FE            [ 2] 2294         LDW Y,(Y)
      000CA8 72 F9 01         [ 2] 2295         ADDW Y,(1,SP) ; *a + n 
      000CAB FF               [ 2] 2296         LDW (X),Y 
      000CAC 1E 03            [ 2] 2297         LDW X,(3,SP) ; DP
      000CAE 1C 00 04         [ 2] 2298         ADDW X,#2*CELLL  ; ( n a -- )  
      000CB1 5B 04            [ 2] 2299         ADDW SP,#2*CELLL ; R: DP n -- 
      000CB3 81               [ 4] 2300         RET 
                                   2301                 
                                   2302 
                                   2303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2304 ;       2!      ( d a -- )
                                   2305 ;       Store  double integer 
                                   2306 ;       to address a.
                                   2307 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CB4                       2308         _HEADER DSTOR,2,"2!"
      000CB4 0C 98                    1         .word LINK 
                           000CB6     2         LINK=.
      000CB6 02                       3         .byte 2  
      000CB7 32 21                    4         .ascii "2!"
      000CB9                          5         DSTOR:
      000CB9 90 93            [ 1] 2309         LDW Y,X 
      000CBB 89               [ 2] 2310         PUSHW X 
      000CBC FE               [ 2] 2311         LDW X,(X) ; a 
      000CBD 90 EE 02         [ 2] 2312         LDW Y,(2,Y) ; dhi 
      000CC0 FF               [ 2] 2313         LDW (X),Y 
      000CC1 16 01            [ 2] 2314         LDW Y,(1,SP)  
      000CC3 90 EE 04         [ 2] 2315         LDW Y,(4,Y) ; dlo 
      000CC6 EF 02            [ 2] 2316         LDW (2,X),Y  
      000CC8 85               [ 2] 2317         POPW X 
      000CC9 1C 00 06         [ 2] 2318         ADDW X,#3*CELLL 
      000CCC 81               [ 4] 2319         RET 
                                   2320 
                                   2321 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2322 ;       2@      ( a -- d )
                                   2323 ;       Fetch double integer 
                                   2324 ;       from address a.
                                   2325 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CCD                       2326         _HEADER DAT,2,"2@"
      000CCD 0C B6                    1         .word LINK 
                           000CCF     2         LINK=.
      000CCF 02                       3         .byte 2  
      000CD0 32 40                    4         .ascii "2@"
      000CD2                          5         DAT:
      000CD2 90 93            [ 1] 2327         ldw y,x 
      000CD4 1D 00 02         [ 2] 2328         subw x,#CELLL 
      000CD7 90 FE            [ 2] 2329         ldw y,(y) ;address 
      000CD9 90 89            [ 2] 2330         pushw y  
      000CDB 90 FE            [ 2] 2331         ldw y,(y) ; dhi 
      000CDD FF               [ 2] 2332         ldw (x),y 
      000CDE 90 85            [ 2] 2333         popw y 
      000CE0 90 EE 02         [ 2] 2334         ldw y,(2,y) ; dlo 
      000CE3 EF 02            [ 2] 2335         ldw (2,x),y 
      000CE5 81               [ 4] 2336         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2337 
                                   2338 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2339 ;       COUNT   ( b -- b +n )
                                   2340 ;       Return count byte of a string
                                   2341 ;       and add 1 to byte address.
                                   2342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CE6                       2343         _HEADER COUNT,5,"COUNT"
      000CE6 0C CF                    1         .word LINK 
                           000CE8     2         LINK=.
      000CE8 05                       3         .byte 5  
      000CE9 43 4F 55 4E 54           4         .ascii "COUNT"
      000CEE                          5         COUNT:
      000CEE 90 93            [ 1] 2344         ldw y,x 
      000CF0 90 FE            [ 2] 2345         ldw y,(y) ; address 
      000CF2 90 F6            [ 1] 2346         ld a,(y)  ; count 
      000CF4 90 5C            [ 1] 2347         incw y 
      000CF6 FF               [ 2] 2348         ldw (x),y 
      000CF7 1D 00 02         [ 2] 2349         subw x,#CELLL 
      000CFA E7 01            [ 1] 2350         ld (1,x),a 
      000CFC 7F               [ 1] 2351         clr (x)
      000CFD 81               [ 4] 2352         ret 
                                   2353 
                                   2354 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2355 ;       HERE    ( -- a )
                                   2356 ;       Return  top of  variables
                                   2357 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000CFE                       2358         _HEADER HERE,4,"HERE"
      000CFE 0C E8                    1         .word LINK 
                           000D00     2         LINK=.
      000D00 04                       3         .byte 4  
      000D01 48 45 52 45              4         .ascii "HERE"
      000D05                          5         HERE:
      000D05 90 AE 00 18      [ 2] 2359       	ldw y,#UVP 
      000D09 90 FE            [ 2] 2360         ldw y,(y)
      000D0B 1D 00 02         [ 2] 2361         subw x,#CELLL 
      000D0E FF               [ 2] 2362         ldw (x),y 
      000D0F 81               [ 4] 2363         ret 
                                   2364 
                                   2365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2366 ;       PAD     ( -- a )
                                   2367 ;       Return address of text buffer
                                   2368 ;       above  code dictionary.
                                   2369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D10                       2370         _HEADER PAD,3,"PAD"
      000D10 0D 00                    1         .word LINK 
                           000D12     2         LINK=.
      000D12 03                       3         .byte 3  
      000D13 50 41 44                 4         .ascii "PAD"
      000D16                          5         PAD:
      000D16 CD 0D 05         [ 4] 2371         CALL     HERE
      000D19                       2372         _DOLIT   80
      000D19 CD 04 8C         [ 4]    1     CALL DOLIT 
      000D1C 00 50                    2     .word 80 
      000D1E CC 08 59         [ 2] 2373         JP     PLUS
                                   2374 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2376 ;       TIB     ( -- a )
                                   2377 ;       Return address of 
                                   2378 ;       terminal input buffer.
                                   2379 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D21                       2380         _HEADER TIB,3,"TIB"
      000D21 0D 12                    1         .word LINK 
                           000D23     2         LINK=.
      000D23 03                       3         .byte 3  
      000D24 54 49 42                 4         .ascii "TIB"
      000D27                          5         TIB:
      000D27 CD 07 2A         [ 4] 2381         CALL     NTIB
      000D2A CD 0B 94         [ 4] 2382         CALL     CELLP
      000D2D CC 05 00         [ 2] 2383         JP     AT
                                   2384 
                                   2385 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2386 ;       @EXECUTE        ( a -- )
                                   2387 ;       Execute vector stored in 
                                   2388 ;       address a.
                                   2389 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D30                       2390         _HEADER ATEXE,8,"@EXECUTE"
      000D30 0D 23                    1         .word LINK 
                           000D32     2         LINK=.
      000D32 08                       3         .byte 8  
      000D33 40 45 58 45 43 55 54     4         .ascii "@EXECUTE"
             45
      000D3B                          5         ATEXE:
      000D3B CD 05 00         [ 4] 2391         CALL     AT
      000D3E CD 07 E9         [ 4] 2392         CALL     QDUP    ;?address or zero
      000D41 CD 04 B5         [ 4] 2393         CALL     QBRAN
      000D44 0D 49                 2394         .word      EXE1
      000D46 CD 04 E1         [ 4] 2395         CALL     EXECU   ;execute if non-zero
      000D49 81               [ 4] 2396 EXE1:   RET     ;do nothing if zero
                                   2397 
                                   2398 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2399 ;       CMOVE   ( b1 b2 u -- )
                                   2400 ;       Copy u bytes from b1 to b2.
                                   2401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D4A                       2402         _HEADER CMOVE,5,"CMOVE"
      000D4A 0D 32                    1         .word LINK 
                           000D4C     2         LINK=.
      000D4C 05                       3         .byte 5  
      000D4D 43 4D 4F 56 45           4         .ascii "CMOVE"
      000D52                          5         CMOVE:
                                   2403         ;;;;  local variables ;;;;;;;
                           000005  2404         DP = 5
                           000003  2405         YTMP = 3 
                           000001  2406         CNT  = 1 
                                   2407         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D52 89               [ 2] 2408         PUSHW X  ; R: DP  
      000D53 52 02            [ 2] 2409         SUB SP,#2 ; R: DP YTMP 
      000D55 90 93            [ 1] 2410         LDW Y,X 
      000D57 90 FE            [ 2] 2411         LDW Y,(Y) ; CNT 
      000D59 90 89            [ 2] 2412         PUSHW Y  ; R: DP YTMP CNT
      000D5B 90 93            [ 1] 2413         LDW Y,X 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000D5D 90 EE 02         [ 2] 2414         LDW Y,(2,Y) ; b2, dest 
      000D60 EE 04            [ 2] 2415         LDW X,(4,X) ; b1, src 
      000D62 17 03            [ 2] 2416         LDW (YTMP,SP),Y 
      000D64 13 03            [ 2] 2417         CPW X,(YTMP,SP) 
      000D66 22 1A            [ 1] 2418         JRUGT CMOV2  ; src>dest 
                                   2419 ; src<dest copy from top to bottom
      000D68 72 FB 01         [ 2] 2420         ADDW X,(CNT,SP)
      000D6B 72 F9 01         [ 2] 2421         ADDW Y,(CNT,SP)
      000D6E                       2422 CMOV1:  
      000D6E 17 03            [ 2] 2423         LDW (YTMP,SP),Y 
      000D70 16 01            [ 2] 2424         LDW Y,(CNT,SP)
      000D72 27 22            [ 1] 2425         JREQ CMOV3 
      000D74 90 5A            [ 2] 2426         DECW Y 
      000D76 17 01            [ 2] 2427         LDW (CNT,SP),Y 
      000D78 16 03            [ 2] 2428         LDW Y,(YTMP,SP)
      000D7A 5A               [ 2] 2429         DECW X
      000D7B F6               [ 1] 2430         LD A,(X)
      000D7C 90 5A            [ 2] 2431         DECW Y 
      000D7E 90 F7            [ 1] 2432         LD (Y),A 
      000D80 20 EC            [ 2] 2433         JRA CMOV1
                                   2434 ; src>dest copy from bottom to top   
      000D82                       2435 CMOV2: 
      000D82 17 03            [ 2] 2436         LDW (YTMP,SP),Y 
      000D84 16 01            [ 2] 2437         LDW Y,(CNT,SP)
      000D86 27 0E            [ 1] 2438         JREQ CMOV3
      000D88 90 5A            [ 2] 2439         DECW Y 
      000D8A 17 01            [ 2] 2440         LDW (CNT,SP),Y 
      000D8C 16 03            [ 2] 2441         LDW Y,(YTMP,SP)
      000D8E F6               [ 1] 2442         LD A,(X)
      000D8F 5C               [ 1] 2443         INCW X 
      000D90 90 F7            [ 1] 2444         LD (Y),A 
      000D92 90 5C            [ 1] 2445         INCW Y 
      000D94 20 EC            [ 2] 2446         JRA CMOV2 
      000D96                       2447 CMOV3:
      000D96 1E 05            [ 2] 2448         LDW X,(DP,SP)
      000D98 1C 00 06         [ 2] 2449         ADDW X,#3*CELLL 
      000D9B 5B 06            [ 2] 2450         ADDW SP,#3*CELLL 
      000D9D 81               [ 4] 2451         RET 
                                   2452         
                                   2453 
                                   2454 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2455 ;       FILL    ( b u c -- )
                                   2456 ;       Fill u bytes of character c
                                   2457 ;       to area beginning at b.
                                   2458 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000D9E                       2459         _HEADER FILL,4,"FILL"
      000D9E 0D 4C                    1         .word LINK 
                           000DA0     2         LINK=.
      000DA0 04                       3         .byte 4  
      000DA1 46 49 4C 4C              4         .ascii "FILL"
      000DA5                          5         FILL:
      000DA5 E6 01            [ 1] 2460         LD A,(1,X)
      000DA7 90 93            [ 1] 2461         LDW Y,X 
      000DA9 1C 00 06         [ 2] 2462         ADDW X,#3*CELLL 
      000DAC 89               [ 2] 2463         PUSHW X ; R: DP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      000DAD 93               [ 1] 2464         LDW X,Y 
      000DAE EE 04            [ 2] 2465         LDW X,(4,X) ; b
      000DB0 90 EE 02         [ 2] 2466         LDW Y,(2,Y) ; u
      000DB3                       2467 FILL0:
      000DB3 27 06            [ 1] 2468         JREQ FILL1
      000DB5 F7               [ 1] 2469         LD (X),A 
      000DB6 5C               [ 1] 2470         INCW X 
      000DB7 90 5A            [ 2] 2471         DECW Y 
      000DB9 20 F8            [ 2] 2472         JRA FILL0         
      000DBB 85               [ 2] 2473 FILL1: POPW X 
      000DBC 81               [ 4] 2474         RET         
                                   2475         
                                   2476 
                                   2477 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2478 ;       ERASE   ( b u -- )
                                   2479 ;       Erase u bytes beginning at b.
                                   2480 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DBD                       2481         _HEADER ERASE,5,"ERASE"
      000DBD 0D A0                    1         .word LINK 
                           000DBF     2         LINK=.
      000DBF 05                       3         .byte 5  
      000DC0 45 52 41 53 45           4         .ascii "ERASE"
      000DC5                          5         ERASE:
      000DC5 90 5F            [ 1] 2482         clrw y 
      000DC7 1D 00 02         [ 2] 2483         subw x,#CELLL 
      000DCA FF               [ 2] 2484         ldw (x),y 
      000DCB CC 0D A5         [ 2] 2485         jp FILL 
                                   2486 
                                   2487 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2488 ;       PACK0   ( b u a -- a )
                                   2489 ;       Build a counted string with
                                   2490 ;       u characters from b. Null fill.
                                   2491 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000DCE                       2492         _HEADER PACKS,5,"PACK0"
      000DCE 0D BF                    1         .word LINK 
                           000DD0     2         LINK=.
      000DD0 05                       3         .byte 5  
      000DD1 50 41 43 4B 30           4         .ascii "PACK0"
      000DD6                          5         PACKS:
      000DD6 CD 06 36         [ 4] 2493         CALL     DUPP
      000DD9 CD 05 FF         [ 4] 2494         CALL     TOR     ;strings only on cell boundary
      000DDC CD 08 44         [ 4] 2495         CALL     DDUP
      000DDF CD 05 0D         [ 4] 2496         CALL     CSTOR
      000DE2 CD 0B BF         [ 4] 2497         CALL     ONEP ;save count
      000DE5 CD 06 46         [ 4] 2498         CALL     SWAPP
      000DE8 CD 0D 52         [ 4] 2499         CALL     CMOVE
      000DEB CD 05 51         [ 4] 2500         CALL     RFROM
      000DEE 81               [ 4] 2501         RET
                                   2502 
                                   2503 ;; Numeric output, single precision
                                   2504 
                                   2505 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2506 ;       DIGIT   ( u -- c )
                                   2507 ;       Convert digit u to a character.
                                   2508 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      000DEF                       2509         _HEADER DIGIT,5,"DIGIT"
      000DEF 0D D0                    1         .word LINK 
                           000DF1     2         LINK=.
      000DF1 05                       3         .byte 5  
      000DF2 44 49 47 49 54           4         .ascii "DIGIT"
      000DF7                          5         DIGIT:
      000DF7 CD 04 8C         [ 4] 2510         CALL	DOLIT
      000DFA 00 09                 2511         .word	9
      000DFC CD 06 5E         [ 4] 2512         CALL	OVER
      000DFF CD 09 43         [ 4] 2513         CALL	LESS
      000E02 CD 04 8C         [ 4] 2514         CALL	DOLIT
      000E05 00 07                 2515         .word	7
      000E07 CD 06 93         [ 4] 2516         CALL	ANDD
      000E0A CD 08 59         [ 4] 2517         CALL	PLUS
      000E0D CD 04 8C         [ 4] 2518         CALL	DOLIT
      000E10 00 30                 2519         .word	48	;'0'
      000E12 CC 08 59         [ 2] 2520         JP	PLUS
                                   2521 
                                   2522 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2523 ;       EXTRACT ( n base -- n c )
                                   2524 ;       Extract least significant 
                                   2525 ;       digit from n.
                                   2526 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E15                       2527         _HEADER EXTRC,7,"EXTRACT"
      000E15 0D F1                    1         .word LINK 
                           000E17     2         LINK=.
      000E17 07                       3         .byte 7  
      000E18 45 58 54 52 41 43 54     4         .ascii "EXTRACT"
      000E1F                          5         EXTRC:
      000E1F CD 0C 2B         [ 4] 2528         CALL     ZERO
      000E22 CD 06 46         [ 4] 2529         CALL     SWAPP
      000E25 CD 09 CE         [ 4] 2530         CALL     UMMOD
      000E28 CD 06 46         [ 4] 2531         CALL     SWAPP
      000E2B CC 0D F7         [ 2] 2532         JP     DIGIT
                                   2533 
                                   2534 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2535 ;       <#      ( -- )
                                   2536 ;       Initiate  numeric 
                                   2537 ;       output process.
                                   2538 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E2E                       2539         _HEADER BDIGS,2,"#<"
      000E2E 0E 17                    1         .word LINK 
                           000E30     2         LINK=.
      000E30 02                       3         .byte 2  
      000E31 23 3C                    4         .ascii "#<"
      000E33                          5         BDIGS:
      000E33 CD 0D 16         [ 4] 2540         CALL     PAD
      000E36 CD 07 6C         [ 4] 2541         CALL     HLD
      000E39 CC 04 EE         [ 2] 2542         JP     STORE
                                   2543 
                                   2544 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2545 ;       HOLD    ( c -- )
                                   2546 ;       Insert a character 
                                   2547 ;       into output string.
                                   2548 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      000E3C                       2549         _HEADER HOLD,4,"HOLD"
      000E3C 0E 30                    1         .word LINK 
                           000E3E     2         LINK=.
      000E3E 04                       3         .byte 4  
      000E3F 48 4F 4C 44              4         .ascii "HOLD"
      000E43                          5         HOLD:
      000E43 CD 07 6C         [ 4] 2550         CALL     HLD
      000E46 CD 05 00         [ 4] 2551         CALL     AT
      000E49 CD 0B CC         [ 4] 2552         CALL     ONEM
      000E4C CD 06 36         [ 4] 2553         CALL     DUPP
      000E4F CD 07 6C         [ 4] 2554         CALL     HLD
      000E52 CD 04 EE         [ 4] 2555         CALL     STORE
      000E55 CC 05 0D         [ 2] 2556         JP     CSTOR
                                   2557 
                                   2558 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2559 ;       #       ( u -- u )
                                   2560 ;       Extract one digit from u and
                                   2561 ;       append digit to output string.
                                   2562 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E58                       2563         _HEADER DIG,1,"#"
      000E58 0E 3E                    1         .word LINK 
                           000E5A     2         LINK=.
      000E5A 01                       3         .byte 1  
      000E5B 23                       4         .ascii "#"
      000E5C                          5         DIG:
      000E5C CD 06 FC         [ 4] 2564         CALL     BASE
      000E5F CD 05 00         [ 4] 2565         CALL     AT
      000E62 CD 0E 1F         [ 4] 2566         CALL     EXTRC
      000E65 CC 0E 43         [ 2] 2567         JP     HOLD
                                   2568 
                                   2569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2570 ;       #S      ( u -- 0 )
                                   2571 ;       Convert u until all digits
                                   2572 ;       are added to output string.
                                   2573 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E68                       2574         _HEADER DIGS,2,"#S"
      000E68 0E 5A                    1         .word LINK 
                           000E6A     2         LINK=.
      000E6A 02                       3         .byte 2  
      000E6B 23 53                    4         .ascii "#S"
      000E6D                          5         DIGS:
      000E6D CD 0E 5C         [ 4] 2575 DIGS1:  CALL     DIG
      000E70 CD 06 36         [ 4] 2576         CALL     DUPP
      000E73 CD 04 B5         [ 4] 2577         CALL     QBRAN
      000E76 0E 7A                 2578         .word      DIGS2
      000E78 20 F3            [ 2] 2579         JRA     DIGS1
      000E7A 81               [ 4] 2580 DIGS2:  RET
                                   2581 
                                   2582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2583 ;       SIGN    ( n -- )
                                   2584 ;       Add a minus sign to
                                   2585 ;       numeric output string.
                                   2586 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E7B                       2587         _HEADER SIGN,4,"SIGN"
      000E7B 0E 6A                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                           000E7D     2         LINK=.
      000E7D 04                       3         .byte 4  
      000E7E 53 49 47 4E              4         .ascii "SIGN"
      000E82                          5         SIGN:
      000E82 CD 06 6D         [ 4] 2588         CALL     ZLESS
      000E85 CD 04 B5         [ 4] 2589         CALL     QBRAN
      000E88 0E 92                 2590         .word      SIGN1
      000E8A CD 04 8C         [ 4] 2591         CALL     DOLIT
      000E8D 00 2D                 2592         .word      45	;"-"
      000E8F CC 0E 43         [ 2] 2593         JP     HOLD
      000E92 81               [ 4] 2594 SIGN1:  RET
                                   2595 
                                   2596 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2597 ;       #>      ( w -- b u )
                                   2598 ;       Prepare output string.
                                   2599 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000E93                       2600         _HEADER EDIGS,2,"#>"
      000E93 0E 7D                    1         .word LINK 
                           000E95     2         LINK=.
      000E95 02                       3         .byte 2  
      000E96 23 3E                    4         .ascii "#>"
      000E98                          5         EDIGS:
      000E98 CD 06 2C         [ 4] 2601         CALL     DROP
      000E9B CD 07 6C         [ 4] 2602         CALL     HLD
      000E9E CD 05 00         [ 4] 2603         CALL     AT
      000EA1 CD 0D 16         [ 4] 2604         CALL     PAD
      000EA4 CD 06 5E         [ 4] 2605         CALL     OVER
      000EA7 CC 08 EF         [ 2] 2606         JP     SUBB
                                   2607 
                                   2608 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2609 ;       str     ( w -- b u )
                                   2610 ;       Convert a signed integer
                                   2611 ;       to a numeric string.
                                   2612 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EAA                       2613         _HEADER STR,3,"STR"
      000EAA 0E 95                    1         .word LINK 
                           000EAC     2         LINK=.
      000EAC 03                       3         .byte 3  
      000EAD 53 54 52                 4         .ascii "STR"
      000EB0                          5         STR:
      000EB0 CD 06 36         [ 4] 2614         CALL     DUPP
      000EB3 CD 05 FF         [ 4] 2615         CALL     TOR
      000EB6 CD 09 09         [ 4] 2616         CALL     ABSS
      000EB9 CD 0E 33         [ 4] 2617         CALL     BDIGS
      000EBC CD 0E 6D         [ 4] 2618         CALL     DIGS
      000EBF CD 05 51         [ 4] 2619         CALL     RFROM
      000EC2 CD 0E 82         [ 4] 2620         CALL     SIGN
      000EC5 CC 0E 98         [ 2] 2621         JP     EDIGS
                                   2622 
                                   2623 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2624 ;       HEX     ( -- )
                                   2625 ;       Use radix 16 as base for
                                   2626 ;       numeric conversions.
                                   2627 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EC8                       2628         _HEADER HEX,3,"HEX"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      000EC8 0E AC                    1         .word LINK 
                           000ECA     2         LINK=.
      000ECA 03                       3         .byte 3  
      000ECB 48 45 58                 4         .ascii "HEX"
      000ECE                          5         HEX:
      000ECE CD 04 8C         [ 4] 2629         CALL     DOLIT
      000ED1 00 10                 2630         .word      16
      000ED3 CD 06 FC         [ 4] 2631         CALL     BASE
      000ED6 CC 04 EE         [ 2] 2632         JP     STORE
                                   2633 
                                   2634 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2635 ;       DECIMAL ( -- )
                                   2636 ;       Use radix 10 as base
                                   2637 ;       for numeric conversions.
                                   2638 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000ED9                       2639         _HEADER DECIM,7,"DECIMAL"
      000ED9 0E CA                    1         .word LINK 
                           000EDB     2         LINK=.
      000EDB 07                       3         .byte 7  
      000EDC 44 45 43 49 4D 41 4C     4         .ascii "DECIMAL"
      000EE3                          5         DECIM:
      000EE3 CD 04 8C         [ 4] 2640         CALL     DOLIT
      000EE6 00 0A                 2641         .word      10
      000EE8 CD 06 FC         [ 4] 2642         CALL     BASE
      000EEB CC 04 EE         [ 2] 2643         JP     STORE
                                   2644 
                                   2645 ;; Numeric input, single precision
                                   2646 
                                   2647 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2648 ;       DIGIT?  ( c base -- u t )
                                   2649 ;       Convert a character to its numeric
                                   2650 ;       value. A flag indicates success.
                                   2651 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000EEE                       2652         _HEADER DIGTQ,6,"DIGIT?"
      000EEE 0E DB                    1         .word LINK 
                           000EF0     2         LINK=.
      000EF0 06                       3         .byte 6  
      000EF1 44 49 47 49 54 3F        4         .ascii "DIGIT?"
      000EF7                          5         DIGTQ:
      000EF7 CD 05 FF         [ 4] 2653         CALL     TOR
      000EFA CD 04 8C         [ 4] 2654         CALL     DOLIT
      000EFD 00 30                 2655         .word     48	; "0"
      000EFF CD 08 EF         [ 4] 2656         CALL     SUBB
      000F02 CD 04 8C         [ 4] 2657         CALL     DOLIT
      000F05 00 09                 2658         .word      9
      000F07 CD 06 5E         [ 4] 2659         CALL     OVER
      000F0A CD 09 43         [ 4] 2660         CALL     LESS
      000F0D CD 04 B5         [ 4] 2661         CALL     QBRAN
      000F10 0F 28                 2662         .word      DGTQ1
      000F12 CD 04 8C         [ 4] 2663         CALL     DOLIT
      000F15 00 07                 2664         .word      7
      000F17 CD 08 EF         [ 4] 2665         CALL     SUBB
      000F1A CD 06 36         [ 4] 2666         CALL     DUPP
      000F1D CD 04 8C         [ 4] 2667         CALL     DOLIT
      000F20 00 0A                 2668         .word      10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      000F22 CD 09 43         [ 4] 2669         CALL     LESS
      000F25 CD 06 A7         [ 4] 2670         CALL     ORR
      000F28 CD 06 36         [ 4] 2671 DGTQ1:  CALL     DUPP
      000F2B CD 05 51         [ 4] 2672         CALL     RFROM
      000F2E CC 09 2D         [ 2] 2673         JP     ULESS
                                   2674 
                           000000  2675 .if  WANT_DOUBLE  
                           000001  2676 .iff 
                                   2677 
                                   2678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2679 ; get all digits in row 
                                   2680 ; stop at first non-digit or end of string
                                   2681 ; ( n a cntr -- n  a+ cntr-  )
                                   2682 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F31                       2683 parse_digits:
      000F31 CD 06 36         [ 4] 2684     CALL DUPP 
      000F34                       2685     _QBRAN 5$  
      000F34 CD 04 B5         [ 4]    1     CALL QBRAN
      000F37 0F 73                    2     .word 5$
      000F39 CD 05 FF         [ 4] 2686     CALL TOR   ; n a R: cntr 
      000F3C CD 0C EE         [ 4] 2687 1$: CALL COUNT ; n a+ char 
      000F3F CD 06 FC         [ 4] 2688     CALL BASE 
      000F42 CD 05 00         [ 4] 2689     CALL AT 
      000F45 CD 0E F7         [ 4] 2690     CALL DIGTQ 
      000F48                       2691     _QBRAN 4$ ; not a digit
      000F48 CD 04 B5         [ 4]    1     CALL QBRAN
      000F4B 0F 67                    2     .word 4$
      000F4D CD 07 FA         [ 4] 2692     CALL ROT 
      000F50 CD 06 FC         [ 4] 2693     CALL BASE 
      000F53 CD 05 00         [ 4] 2694     CALL AT 
      000F56 CD 0B 3E         [ 4] 2695     CALL STAR
      000F59 CD 08 59         [ 4] 2696     CALL PLUS
      000F5C CD 06 46         [ 4] 2697     CALL SWAPP  
      000F5F CD 05 51         [ 4] 2698     CALL RFROM  ; n a+ cntr 
      000F62 CD 0B CC         [ 4] 2699     CALL ONEM 
      000F65 20 CA            [ 2] 2700     JRA parse_digits ; n a+ cntr  
      000F67                       2701 4$: ; n a+ char R: cntr 
      000F67 90 93            [ 1] 2702     LDW Y,X 
      000F69 90 EE 02         [ 2] 2703     LDW Y,(2,Y)
      000F6C 90 5A            [ 2] 2704     DECW Y  ; dec(a)
      000F6E EF 02            [ 2] 2705     LDW (2,X),Y 
      000F70 90 85            [ 2] 2706     POPW Y 
      000F72 FF               [ 2] 2707     LDW (X),Y ; n a cntr  
      000F73                       2708 5$:
      000F73 81               [ 4] 2709     RET 
                                   2710 
                                   2711 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2712 ;       NUMBER? ( a -- n T | a F )
                                   2713 ;       Convert a number string to
                                   2714 ;       integer. Push a flag on tos.
                                   2715 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      000F74                       2716         _HEADER NUMBQ,7,"NUMBER?"
      000F74 0E F0                    1         .word LINK 
                           000F76     2         LINK=.
      000F76 07                       3         .byte 7  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      000F77 4E 55 4D 42 45 52 3F     4         .ascii "NUMBER?"
      000F7E                          5         NUMBQ:
                                   2717 ; save BASE
      000F7E CD 06 FC         [ 4] 2718         CALL     BASE
      000F81 CD 05 00         [ 4] 2719         CALL     AT
      000F84 CD 05 FF         [ 4] 2720         CALL     TOR
      000F87 CD 0C 2B         [ 4] 2721         CALL     ZERO
      000F8A CD 06 5E         [ 4] 2722         CALL     OVER
      000F8D CD 0C EE         [ 4] 2723         CALL     COUNT ; string length,  a 0 a+ cnt 
                                   2724 ;  check hexadecimal character        
      000F90 CD 06 5E         [ 4] 2725         CALL     OVER           ; a 0 a+ cnt a+ 
      000F93 CD 05 1E         [ 4] 2726         CALL     CAT
      000F96                       2727         _DOLIT   '$'  ; hex?    ; a 0 a+ cnt char '$'
      000F96 CD 04 8C         [ 4]    1     CALL DOLIT 
      000F99 00 24                    2     .word '$' 
      000F9B CD 09 17         [ 4] 2728         CALL     EQUAL
      000F9E                       2729         _QBRAN   NUMQ1
      000F9E CD 04 B5         [ 4]    1     CALL QBRAN
      000FA1 0F B2                    2     .word NUMQ1
      000FA3 CD 0E CE         [ 4] 2730         CALL     HEX
      000FA6 CD 06 46         [ 4] 2731         CALL     SWAPP
      000FA9 CD 0B BF         [ 4] 2732         CALL     ONEP
      000FAC CD 06 46         [ 4] 2733         CALL     SWAPP
      000FAF CD 0B CC         [ 4] 2734         CALL     ONEM
                                   2735 ; check for negative sign         
      000FB2 CD 06 5E         [ 4] 2736 NUMQ1:  CALL     OVER
      000FB5 CD 05 1E         [ 4] 2737         CALL     CAT
      000FB8                       2738         _DOLIT   '-'
      000FB8 CD 04 8C         [ 4]    1     CALL DOLIT 
      000FBB 00 2D                    2     .word '-' 
      000FBD CD 09 17         [ 4] 2739         CALL     EQUAL
      000FC0 CD 05 FF         [ 4] 2740         CALL     TOR    ; a 0 a+ cnt R: base sign 
                                   2741 ; update address and count 
      000FC3 CD 06 46         [ 4] 2742         CALL     SWAPP
      000FC6 CD 05 62         [ 4] 2743         CALL     RAT
      000FC9 CD 08 EF         [ 4] 2744         CALL     SUBB
      000FCC CD 06 46         [ 4] 2745         CALL     SWAPP
      000FCF CD 05 62         [ 4] 2746         CALL     RAT
      000FD2 CD 08 59         [ 4] 2747         CALL     PLUS  ; a 0 a+ cnt- R: base sign 
      000FD5 CD 07 E9         [ 4] 2748         CALL     QDUP
      000FD8                       2749         _QBRAN   NUMQ4  ; end of string  a 0 a+ R: base sign 
      000FD8 CD 04 B5         [ 4]    1     CALL QBRAN
      000FDB 10 00                    2     .word NUMQ4
      000FDD CD 0F 31         [ 4] 2750         CALL     parse_digits ; a 0 a+ cntr- -- a n a+ cntr-  R: base sign 
      000FE0 CD 06 36         [ 4] 2751         CALL     DUPP   ; a n a+ cnt cnt -- R: base sign  
      000FE3                       2752         _TBRAN   NUMQ6
      000FE3 CD 04 C3         [ 4]    1     CALL TBRAN 
      000FE6 10 08                    2     .word NUMQ6 
      000FE8 CD 08 39         [ 4] 2753         CALL     DDROP   ; a n  R: base sign  
      000FEB CD 05 51         [ 4] 2754         CALL     RFROM   ; a n sign R: base 
      000FEE                       2755         _QBRAN   NUMQ3
      000FEE CD 04 B5         [ 4]    1     CALL QBRAN
      000FF1 0F F6                    2     .word NUMQ3
      000FF3 CD 08 A3         [ 4] 2756         CALL     NEGAT ; a n R: base 
      000FF6 CD 06 46         [ 4] 2757 NUMQ3:  CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      000FF9 90 AE FF FF      [ 2] 2758         LDW  Y, #-1 
      000FFD FF               [ 2] 2759         LDW (X),Y     ; n -1 R: base 
      000FFE 20 10            [ 2] 2760         JRA      NUMQ9
      001000 CD 05 51         [ 4] 2761 NUMQ4:  CALL     RFROM
      001003 CD 08 39         [ 4] 2762         CALL     DDROP
      001006 20 08            [ 2] 2763         JRA      NUMQ9 
      001008                       2764 NUMQ6:  
                           000000  2765 .if WANT_FLOAT24 
                           000000  2766 .ift 
                                   2767         CALL     RFROM ; a n a+ cnt sign R: base 
                                   2768         CALL     FLOATQ  
                           000001  2769 .iff
      001008 5B 02            [ 2] 2770         ADDW SP,#CELLL ; remove sign from rstack 
      00100A 1C 00 04         [ 2] 2771         ADDW  X,#2*CELLL ; drop a+ cnt S: a n  R: sign 
      00100D 90 5F            [ 1] 2772         CLRW Y  
      00100F FF               [ 2] 2773         LDW (X),Y  ;  a 0 R: base 
                                   2774 .endif 
                                   2775 ; restore BASE 
      001010                       2776 NUMQ9: 
      001010 CD 05 51         [ 4] 2777         CALL     RFROM
      001013 CD 06 FC         [ 4] 2778         CALL     BASE
      001016 CC 04 EE         [ 2] 2779         JP       STORE
                                   2780 .endif ; WANT_DOUBLE   
                                   2781 
                                   2782 ;; Basic I/O
                                   2783 
                                   2784 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2785 ;       KEY     ( -- c )
                                   2786 ;       Wait for and return an
                                   2787 ;       input character.
                                   2788 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001019                       2789         _HEADER KEY,3,"KEY"
      001019 0F 76                    1         .word LINK 
                           00101B     2         LINK=.
      00101B 03                       3         .byte 3  
      00101C 4B 45 59                 4         .ascii "KEY"
      00101F                          5         KEY:
      00101F 72 0B 52 30 FB   [ 2] 2790         btjf UART_SR,#UART_SR_RXNE,. 
      001024 C6 52 31         [ 1] 2791         ld a,UART_DR 
      001027 1D 00 02         [ 2] 2792         subw x,#CELLL 
      00102A E7 01            [ 1] 2793         ld (1,x),a 
      00102C 7F               [ 1] 2794         clr (x)
      00102D 81               [ 4] 2795         ret 
                                   2796 
                                   2797 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2798 ;       NUF?    ( -- t )
                                   2799 ;       Return false if no input,
                                   2800 ;       else pause and if CR return true.
                                   2801 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00102E                       2802         _HEADER NUFQ,4,"NUF?"
      00102E 10 1B                    1         .word LINK 
                           001030     2         LINK=.
      001030 04                       3         .byte 4  
      001031 4E 55 46 3F              4         .ascii "NUF?"
      001035                          5         NUFQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001035 CD 04 35         [ 4] 2803         CALL     QKEY
      001038 CD 06 36         [ 4] 2804         CALL     DUPP
      00103B CD 04 B5         [ 4] 2805         CALL     QBRAN
      00103E 10 4E                 2806         .word    NUFQ1
      001040 CD 08 39         [ 4] 2807         CALL     DDROP
      001043 CD 10 1F         [ 4] 2808         CALL     KEY
      001046 CD 04 8C         [ 4] 2809         CALL     DOLIT
      001049 00 0D                 2810         .word      CRR
      00104B CC 09 17         [ 2] 2811         JP     EQUAL
      00104E 81               [ 4] 2812 NUFQ1:  RET
                                   2813 
                                   2814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2815 ;       SPACE   ( -- )
                                   2816 ;       Send  blank character to
                                   2817 ;       output device.
                                   2818 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00104F                       2819         _HEADER SPACE,5,"SPACE"
      00104F 10 30                    1         .word LINK 
                           001051     2         LINK=.
      001051 05                       3         .byte 5  
      001052 53 50 41 43 45           4         .ascii "SPACE"
      001057                          5         SPACE:
      001057 CD 0C 1E         [ 4] 2820         CALL     BLANK
      00105A CC 04 53         [ 2] 2821         JP     EMIT
                                   2822 
                                   2823 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2824 ;       SPACES  ( +n -- )
                                   2825 ;       Send n spaces to output device.
                                   2826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00105D                       2827         _HEADER SPACS,6,"SPACES"
      00105D 10 51                    1         .word LINK 
                           00105F     2         LINK=.
      00105F 06                       3         .byte 6  
      001060 53 50 41 43 45 53        4         .ascii "SPACES"
      001066                          5         SPACS:
      001066 CD 0C 2B         [ 4] 2828         CALL     ZERO
      001069 CD 09 88         [ 4] 2829         CALL     MAX
      00106C CD 05 FF         [ 4] 2830         CALL     TOR
      00106F 20 03            [ 2] 2831         JRA      CHAR2
      001071 CD 10 57         [ 4] 2832 CHAR1:  CALL     SPACE
      001074 CD 04 A0         [ 4] 2833 CHAR2:  CALL     DONXT
      001077 10 71                 2834         .word    CHAR1
      001079 81               [ 4] 2835         RET
                                   2836 
                                   2837 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2838 ;       TYPE    ( b u -- )
                                   2839 ;       Output u characters from b.
                                   2840 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00107A                       2841         _HEADER TYPES,4,"TYPE"
      00107A 10 5F                    1         .word LINK 
                           00107C     2         LINK=.
      00107C 04                       3         .byte 4  
      00107D 54 59 50 45              4         .ascii "TYPE"
      001081                          5         TYPES:
      001081 CD 05 FF         [ 4] 2842         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001084 20 06            [ 2] 2843         JRA     TYPE2
      001086 CD 0C EE         [ 4] 2844 TYPE1:  CALL     COUNT 
      001089 CD 04 53         [ 4] 2845         CALL     EMIT
      00108C                       2846 TYPE2:  _DONXT  TYPE1
      00108C CD 04 A0         [ 4]    1     CALL DONXT 
      00108F 10 86                    2     .word TYPE1 
      001091                       2847         _DROP
      001091 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001094 81               [ 4] 2848         RET 
                                   2849 
                                   2850 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2851 ;       CR      ( -- )
                                   2852 ;       Output a carriage return
                                   2853 ;       and a line feed.
                                   2854 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001095                       2855         _HEADER CR,2,"CR"
      001095 10 7C                    1         .word LINK 
                           001097     2         LINK=.
      001097 02                       3         .byte 2  
      001098 43 52                    4         .ascii "CR"
      00109A                          5         CR:
      00109A                       2856         _DOLIT  CRR 
      00109A CD 04 8C         [ 4]    1     CALL DOLIT 
      00109D 00 0D                    2     .word CRR 
      00109F CD 04 53         [ 4] 2857         CALL    EMIT
      0010A2                       2858         _DOLIT  LF
      0010A2 CD 04 8C         [ 4]    1     CALL DOLIT 
      0010A5 00 0A                    2     .word LF 
      0010A7 CC 04 53         [ 2] 2859         JP      EMIT
                                   2860 
                                   2861 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2862 ;       do$     ( -- a )
                                   2863 ;       Return  address of a compiled
                                   2864 ;       string.
                                   2865 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2866 ;       _HEADER DOSTR,COMPO+3,"DO$"
      0010AA                       2867 DOSTR:
      0010AA CD 05 51         [ 4] 2868         CALL     RFROM
      0010AD CD 05 62         [ 4] 2869         CALL     RAT
      0010B0 CD 05 51         [ 4] 2870         CALL     RFROM
      0010B3 CD 0C EE         [ 4] 2871         CALL     COUNT
      0010B6 CD 08 59         [ 4] 2872         CALL     PLUS
      0010B9 CD 05 FF         [ 4] 2873         CALL     TOR
      0010BC CD 06 46         [ 4] 2874         CALL     SWAPP
      0010BF CD 05 FF         [ 4] 2875         CALL     TOR
      0010C2 81               [ 4] 2876         RET
                                   2877 
                                   2878 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2879 ;       $"|     ( -- a )
                                   2880 ;       Run time routine compiled by $".
                                   2881 ;       Return address of a compiled string.
                                   2882 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2883 ;       _HEADER STRQP,COMPO+3,"$\"|"
      0010C3                       2884 STRQP:
      0010C3 CD 10 AA         [ 4] 2885         CALL     DOSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0010C6 81               [ 4] 2886         RET
                                   2887 
                                   2888 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2889 ;       ."|     ( -- )
                                   2890 ;       Run time routine of ." .
                                   2891 ;       Output a compiled string.
                                   2892 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2893 ;       _HEADER DOTQP,COMPO+3,".\"|"
      0010C7                       2894 DOTQP:
      0010C7 CD 10 AA         [ 4] 2895         CALL     DOSTR
      0010CA CD 0C EE         [ 4] 2896         CALL     COUNT
      0010CD CC 10 81         [ 2] 2897         JP     TYPES
                                   2898 
                                   2899 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2900 ;       .R      ( n +n -- )
                                   2901 ;       Display an integer in a field
                                   2902 ;       of n columns, right justified.
                                   2903 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010D0                       2904         _HEADER DOTR,2,".R"
      0010D0 10 97                    1         .word LINK 
                           0010D2     2         LINK=.
      0010D2 02                       3         .byte 2  
      0010D3 2E 52                    4         .ascii ".R"
      0010D5                          5         DOTR:
      0010D5 CD 05 FF         [ 4] 2905         CALL     TOR
      0010D8 CD 0E B0         [ 4] 2906         CALL     STR
      0010DB CD 05 51         [ 4] 2907         CALL     RFROM
      0010DE CD 06 5E         [ 4] 2908         CALL     OVER
      0010E1 CD 08 EF         [ 4] 2909         CALL     SUBB
      0010E4 CD 10 66         [ 4] 2910         CALL     SPACS
      0010E7 CC 10 81         [ 2] 2911         JP     TYPES
                                   2912 
                                   2913 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2914 ;       U.R     ( u +n -- )
                                   2915 ;       Display an unsigned integer
                                   2916 ;       in n column, right justified.
                                   2917 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0010EA                       2918         _HEADER UDOTR,3,"U.R"
      0010EA 10 D2                    1         .word LINK 
                           0010EC     2         LINK=.
      0010EC 03                       3         .byte 3  
      0010ED 55 2E 52                 4         .ascii "U.R"
      0010F0                          5         UDOTR:
      0010F0 CD 05 FF         [ 4] 2919         CALL     TOR
      0010F3 CD 0E 33         [ 4] 2920         CALL     BDIGS
      0010F6 CD 0E 6D         [ 4] 2921         CALL     DIGS
      0010F9 CD 0E 98         [ 4] 2922         CALL     EDIGS
      0010FC CD 05 51         [ 4] 2923         CALL     RFROM
      0010FF CD 06 5E         [ 4] 2924         CALL     OVER
      001102 CD 08 EF         [ 4] 2925         CALL     SUBB
      001105 CD 10 66         [ 4] 2926         CALL     SPACS
      001108 CC 10 81         [ 2] 2927         JP     TYPES
                                   2928 
                                   2929 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2930 ;       U.      ( u -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   2931 ;       Display an unsigned integer
                                   2932 ;       in free format.
                                   2933 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00110B                       2934         _HEADER UDOT,2,"U."
      00110B 10 EC                    1         .word LINK 
                           00110D     2         LINK=.
      00110D 02                       3         .byte 2  
      00110E 55 2E                    4         .ascii "U."
      001110                          5         UDOT:
      001110 CD 0E 33         [ 4] 2935         CALL     BDIGS
      001113 CD 0E 6D         [ 4] 2936         CALL     DIGS
      001116 CD 0E 98         [ 4] 2937         CALL     EDIGS
      001119 CD 10 57         [ 4] 2938         CALL     SPACE
      00111C CC 10 81         [ 2] 2939         JP     TYPES
                                   2940 
                                   2941 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2942 ;   H. ( n -- )
                                   2943 ;   display n in hexadecimal 
                                   2944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00111F                       2945         _HEADER HDOT,2,"H."
      00111F 11 0D                    1         .word LINK 
                           001121     2         LINK=.
      001121 02                       3         .byte 2  
      001122 48 2E                    4         .ascii "H."
      001124                          5         HDOT:
      001124 CD 06 FC         [ 4] 2946         CALL BASE 
      001127 CD 05 00         [ 4] 2947         CALL AT 
      00112A CD 05 FF         [ 4] 2948         CALL TOR 
      00112D CD 0E CE         [ 4] 2949         CALL HEX 
      001130 CD 11 10         [ 4] 2950         CALL UDOT 
      001133 CD 05 51         [ 4] 2951         CALL RFROM 
      001136 CD 06 FC         [ 4] 2952         CALL BASE 
      001139 CC 04 EE         [ 2] 2953         JP STORE 
                                   2954          
                                   2955 
                                   2956 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2957 ;       .       ( w -- )
                                   2958 ;       Display an integer in free
                                   2959 ;       format, preceeded by a space.
                                   2960 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00113C                       2961         _HEADER DOT,1,"."
      00113C 11 21                    1         .word LINK 
                           00113E     2         LINK=.
      00113E 01                       3         .byte 1  
      00113F 2E                       4         .ascii "."
      001140                          5         DOT:
      001140 CD 06 FC         [ 4] 2962         CALL     BASE
      001143 CD 05 00         [ 4] 2963         CALL     AT
      001146 CD 04 8C         [ 4] 2964         CALL     DOLIT
      001149 00 0A                 2965         .word      10
      00114B CD 06 BC         [ 4] 2966         CALL     XORR    ;?decimal
      00114E CD 04 B5         [ 4] 2967         CALL     QBRAN
      001151 11 55                 2968         .word      DOT1
      001153 20 BB            [ 2] 2969         JRA     UDOT
      001155 CD 0E B0         [ 4] 2970 DOT1:   CALL     STR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001158 CD 10 57         [ 4] 2971         CALL     SPACE
      00115B CC 10 81         [ 2] 2972         JP     TYPES
                                   2973 
                                   2974 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2975 ;       ?       ( a -- )
                                   2976 ;       Display contents in memory cell.
                                   2977 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00115E                       2978         _HEADER QUEST,1,"?"
      00115E 11 3E                    1         .word LINK 
                           001160     2         LINK=.
      001160 01                       3         .byte 1  
      001161 3F                       4         .ascii "?"
      001162                          5         QUEST:
      001162 CD 05 00         [ 4] 2979         CALL     AT
      001165 20 D9            [ 2] 2980         JRA     DOT
                                   2981 
                                   2982 ;; Parsing
                                   2983 
                                   2984 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   2985 ;       parse   ( b u c -- b u delta ; <string> )
                                   2986 ;       Scan string delimited by c.
                                   2987 ;       Return found string and its offset.
                                   2988 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001167                       2989         _HEADER PARS,5,"PARS$"
      001167 11 60                    1         .word LINK 
                           001169     2         LINK=.
      001169 05                       3         .byte 5  
      00116A 50 41 52 53 24           4         .ascii "PARS$"
      00116F                          5         PARS:
      00116F CD 07 0B         [ 4] 2990         CALL     TEMP
      001172 CD 04 EE         [ 4] 2991         CALL     STORE
      001175 CD 06 5E         [ 4] 2992         CALL     OVER
      001178 CD 05 FF         [ 4] 2993         CALL     TOR
      00117B CD 06 36         [ 4] 2994         CALL     DUPP
      00117E CD 04 B5         [ 4] 2995         CALL     QBRAN
      001181 12 27                 2996         .word    PARS8
      001183 CD 0B CC         [ 4] 2997         CALL     ONEM
      001186 CD 07 0B         [ 4] 2998         CALL     TEMP
      001189 CD 05 00         [ 4] 2999         CALL     AT
      00118C CD 0C 1E         [ 4] 3000         CALL     BLANK
      00118F CD 09 17         [ 4] 3001         CALL     EQUAL
      001192 CD 04 B5         [ 4] 3002         CALL     QBRAN
      001195 11 C8                 3003         .word      PARS3
      001197 CD 05 FF         [ 4] 3004         CALL     TOR
      00119A CD 0C 1E         [ 4] 3005 PARS1:  CALL     BLANK
      00119D CD 06 5E         [ 4] 3006         CALL     OVER
      0011A0 CD 05 1E         [ 4] 3007         CALL     CAT     ;skip leading blanks ONLY
      0011A3 CD 08 EF         [ 4] 3008         CALL     SUBB
      0011A6 CD 06 6D         [ 4] 3009         CALL     ZLESS
      0011A9 CD 08 92         [ 4] 3010         CALL     INVER
      0011AC CD 04 B5         [ 4] 3011         CALL     QBRAN
      0011AF 11 C5                 3012         .word      PARS2
      0011B1 CD 0B BF         [ 4] 3013         CALL     ONEP
      0011B4 CD 04 A0         [ 4] 3014         CALL     DONXT
      0011B7 11 9A                 3015         .word      PARS1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0011B9 CD 05 51         [ 4] 3016         CALL     RFROM
      0011BC CD 06 2C         [ 4] 3017         CALL     DROP
      0011BF CD 0C 2B         [ 4] 3018         CALL     ZERO
      0011C2 CC 06 36         [ 2] 3019         JP     DUPP
      0011C5 CD 05 51         [ 4] 3020 PARS2:  CALL     RFROM
      0011C8 CD 06 5E         [ 4] 3021 PARS3:  CALL     OVER
      0011CB CD 06 46         [ 4] 3022         CALL     SWAPP
      0011CE CD 05 FF         [ 4] 3023         CALL     TOR
      0011D1 CD 07 0B         [ 4] 3024 PARS4:  CALL     TEMP
      0011D4 CD 05 00         [ 4] 3025         CALL     AT
      0011D7 CD 06 5E         [ 4] 3026         CALL     OVER
      0011DA CD 05 1E         [ 4] 3027         CALL     CAT
      0011DD CD 08 EF         [ 4] 3028         CALL     SUBB    ;scan for delimiter
      0011E0 CD 07 0B         [ 4] 3029         CALL     TEMP
      0011E3 CD 05 00         [ 4] 3030         CALL     AT
      0011E6 CD 0C 1E         [ 4] 3031         CALL     BLANK
      0011E9 CD 09 17         [ 4] 3032         CALL     EQUAL
      0011EC CD 04 B5         [ 4] 3033         CALL     QBRAN
      0011EF 11 F4                 3034         .word      PARS5
      0011F1 CD 06 6D         [ 4] 3035         CALL     ZLESS
      0011F4 CD 04 B5         [ 4] 3036 PARS5:  CALL     QBRAN
      0011F7 12 09                 3037         .word      PARS6
      0011F9 CD 0B BF         [ 4] 3038         CALL     ONEP
      0011FC CD 04 A0         [ 4] 3039         CALL     DONXT
      0011FF 11 D1                 3040         .word      PARS4
      001201 CD 06 36         [ 4] 3041         CALL     DUPP
      001204 CD 05 FF         [ 4] 3042         CALL     TOR
      001207 20 0F            [ 2] 3043         JRA     PARS7
      001209 CD 05 51         [ 4] 3044 PARS6:  CALL     RFROM
      00120C CD 06 2C         [ 4] 3045         CALL     DROP
      00120F CD 06 36         [ 4] 3046         CALL     DUPP
      001212 CD 0B BF         [ 4] 3047         CALL     ONEP
      001215 CD 05 FF         [ 4] 3048         CALL     TOR
      001218 CD 06 5E         [ 4] 3049 PARS7:  CALL     OVER
      00121B CD 08 EF         [ 4] 3050         CALL     SUBB
      00121E CD 05 51         [ 4] 3051         CALL     RFROM
      001221 CD 05 51         [ 4] 3052         CALL     RFROM
      001224 CC 08 EF         [ 2] 3053         JP     SUBB
      001227 CD 06 5E         [ 4] 3054 PARS8:  CALL     OVER
      00122A CD 05 51         [ 4] 3055         CALL     RFROM
      00122D CC 08 EF         [ 2] 3056         JP     SUBB
                                   3057 
                                   3058 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3059 ;       PARSE   ( c -- b u ; <string> )
                                   3060 ;       Scan input stream and return
                                   3061 ;       counted string delimited by c.
                                   3062 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001230                       3063         _HEADER PARSE,5,"PARSE"
      001230 11 69                    1         .word LINK 
                           001232     2         LINK=.
      001232 05                       3         .byte 5  
      001233 50 41 52 53 45           4         .ascii "PARSE"
      001238                          5         PARSE:
      001238 CD 05 FF         [ 4] 3064         CALL     TOR
      00123B CD 0D 27         [ 4] 3065         CALL     TIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00123E CD 07 1A         [ 4] 3066         CALL     INN
      001241 CD 05 00         [ 4] 3067         CALL     AT
      001244 CD 08 59         [ 4] 3068         CALL     PLUS    ;current input buffer pointer
      001247 CD 07 2A         [ 4] 3069         CALL     NTIB
      00124A CD 05 00         [ 4] 3070         CALL     AT
      00124D CD 07 1A         [ 4] 3071         CALL     INN
      001250 CD 05 00         [ 4] 3072         CALL     AT
      001253 CD 08 EF         [ 4] 3073         CALL     SUBB    ;remaining count
      001256 CD 05 51         [ 4] 3074         CALL     RFROM
      001259 CD 11 6F         [ 4] 3075         CALL     PARS
      00125C CD 07 1A         [ 4] 3076         CALL     INN
      00125F CC 0C 9B         [ 2] 3077         JP     PSTOR
                                   3078 
                                   3079 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3080 ;       .(      ( -- )
                                   3081 ;       Output following string up to next ) .
                                   3082 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001262                       3083         _HEADER DOTPR,IMEDD+2,".("
      001262 12 32                    1         .word LINK 
                           001264     2         LINK=.
      001264 82                       3         .byte IMEDD+2  
      001265 2E 28                    4         .ascii ".("
      001267                          5         DOTPR:
      001267 CD 04 8C         [ 4] 3084         CALL     DOLIT
      00126A 00 29                 3085         .word     41	; ")"
      00126C CD 12 38         [ 4] 3086         CALL     PARSE
      00126F CC 10 81         [ 2] 3087         JP     TYPES
                                   3088 
                                   3089 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3090 ;       (       ( -- )
                                   3091 ;       Ignore following string up to next ).
                                   3092 ;       A comment.
                                   3093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001272                       3094         _HEADER PAREN,IMEDD+1,"("
      001272 12 64                    1         .word LINK 
                           001274     2         LINK=.
      001274 81                       3         .byte IMEDD+1  
      001275 28                       4         .ascii "("
      001276                          5         PAREN:
      001276 CD 04 8C         [ 4] 3095         CALL     DOLIT
      001279 00 29                 3096         .word     41	; ")"
      00127B CD 12 38         [ 4] 3097         CALL     PARSE
      00127E CC 08 39         [ 2] 3098         JP     DDROP
                                   3099 
                                   3100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3101 ;       \       ( -- )
                                   3102 ;       Ignore following text till
                                   3103 ;       end of line.
                                   3104 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001281                       3105         _HEADER BKSLA,IMEDD+1,"\\"
      001281 12 74                    1         .word LINK 
                           001283     2         LINK=.
      001283 81                       3         .byte IMEDD+1  
      001284 5C 5C                    4         .ascii "\\"
      001286                          5         BKSLA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001286 90 AE 00 0E      [ 2] 3106         ldw y,#UCTIB ; #TIB  
      00128A 90 FE            [ 2] 3107         ldw y,(y)
      00128C 90 89            [ 2] 3108         pushw y ; count in TIB 
      00128E 90 AE 00 0C      [ 2] 3109         ldw y,#UINN ; >IN 
      001292 90 BF 26         [ 2] 3110         ldw YTEMP,y
      001295 90 85            [ 2] 3111         popw y 
      001297 91 CF 26         [ 5] 3112         ldw [YTEMP],y
      00129A 81               [ 4] 3113         ret 
                                   3114 
                                   3115 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3116 ;       WORD    ( c -- a ; <string> )
                                   3117 ;       Parse a word from input stream
                                   3118 ;       and copy it to code dictionary.
                                   3119 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00129B                       3120         _HEADER WORDD,4,"WORD"
      00129B 12 83                    1         .word LINK 
                           00129D     2         LINK=.
      00129D 04                       3         .byte 4  
      00129E 57 4F 52 44              4         .ascii "WORD"
      0012A2                          5         WORDD:
      0012A2 CD 12 38         [ 4] 3121         CALL     PARSE
      0012A5 CD 0D 05         [ 4] 3122         CALL     HERE
      0012A8 CD 0B 94         [ 4] 3123         CALL     CELLP
                           000000  3124 .IF CASE_SENSE 
                                   3125         JP      PACKS 
                           000001  3126 .ELSE                 
      0012AB CD 0D D6         [ 4] 3127         CALL     PACKS
                                   3128 ; uppercase TOKEN 
      0012AE CD 06 36         [ 4] 3129         CALL    DUPP 
      0012B1 CD 0C EE         [ 4] 3130         CALL    COUNT 
      0012B4 CD 05 FF         [ 4] 3131         CALL    TOR 
      0012B7 CD 04 D1         [ 4] 3132         CALL    BRAN 
      0012BA 12 E8                 3133         .word   UPPER2  
      0012BC                       3134 UPPER:
      0012BC CD 06 36         [ 4] 3135         CALL    DUPP 
      0012BF CD 05 1E         [ 4] 3136         CALL    CAT
      0012C2 CD 06 36         [ 4] 3137         CALL    DUPP 
      0012C5 CD 04 8C         [ 4] 3138         CALL   DOLIT
      0012C8 00 61                 3139         .word   'a' 
      0012CA CD 04 8C         [ 4] 3140         CALL    DOLIT
      0012CD 00 7B                 3141         .word   'z'+1 
      0012CF CD 09 B3         [ 4] 3142         CALL   WITHI 
      0012D2 CD 04 B5         [ 4] 3143         CALL   QBRAN
      0012D5 12 DF                 3144         .word  UPPER1  
      0012D7 CD 04 8C         [ 4] 3145         CALL    DOLIT 
      0012DA 00 DF                 3146         .word   0xDF 
      0012DC CD 06 93         [ 4] 3147         CALL    ANDD 
      0012DF                       3148 UPPER1:
      0012DF CD 06 5E         [ 4] 3149         CALL    OVER 
      0012E2 CD 05 0D         [ 4] 3150         CALL    CSTOR          
      0012E5 CD 0B BF         [ 4] 3151         CALL    ONEP 
      0012E8                       3152 UPPER2: 
      0012E8 CD 04 A0         [ 4] 3153         CALL    DONXT
      0012EB 12 BC                 3154         .word   UPPER  
      0012ED CD 06 2C         [ 4] 3155         CALL    DROP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0012F0 81               [ 4] 3156         RET 
                                   3157 .ENDIF 
                                   3158 
                                   3159 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3160 ;       TOKEN   ( -- a ; <string> )
                                   3161 ;       Parse a word from input stream
                                   3162 ;       and copy it to name dictionary.
                                   3163 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012F1                       3164         _HEADER TOKEN,5,"TOKEN"
      0012F1 12 9D                    1         .word LINK 
                           0012F3     2         LINK=.
      0012F3 05                       3         .byte 5  
      0012F4 54 4F 4B 45 4E           4         .ascii "TOKEN"
      0012F9                          5         TOKEN:
      0012F9 CD 0C 1E         [ 4] 3165         CALL     BLANK
      0012FC CC 12 A2         [ 2] 3166         JP     WORDD
                                   3167 
                                   3168 ;; Dictionary search
                                   3169 
                                   3170 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3171 ;       NAME>   ( na -- ca )
                                   3172 ;       Return a code address given
                                   3173 ;       a name address.
                                   3174 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0012FF                       3175         _HEADER NAMET,5,"NAME>"
      0012FF 12 F3                    1         .word LINK 
                           001301     2         LINK=.
      001301 05                       3         .byte 5  
      001302 4E 41 4D 45 3E           4         .ascii "NAME>"
      001307                          5         NAMET:
      001307 CD 0C EE         [ 4] 3176         CALL     COUNT
      00130A CD 04 8C         [ 4] 3177         CALL     DOLIT
      00130D 00 1F                 3178         .word      31
      00130F CD 06 93         [ 4] 3179         CALL     ANDD
      001312 CC 08 59         [ 2] 3180         JP     PLUS
                                   3181 
                                   3182 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3183 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3184 ;       Compare u cells in two
                                   3185 ;       strings. Return 0 if identical.
                                   3186 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001315                       3187         _HEADER SAMEQ,5,"SAME?"
      001315 13 01                    1         .word LINK 
                           001317     2         LINK=.
      001317 05                       3         .byte 5  
      001318 53 41 4D 45 3F           4         .ascii "SAME?"
      00131D                          5         SAMEQ:
      00131D CD 0B CC         [ 4] 3188         CALL     ONEM
      001320 CD 05 FF         [ 4] 3189         CALL     TOR
      001323 20 29            [ 2] 3190         JRA     SAME2
      001325 CD 06 5E         [ 4] 3191 SAME1:  CALL     OVER
      001328 CD 05 62         [ 4] 3192         CALL     RAT
      00132B CD 08 59         [ 4] 3193         CALL     PLUS
      00132E CD 05 1E         [ 4] 3194         CALL     CAT
      001331 CD 06 5E         [ 4] 3195         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001334 CD 05 62         [ 4] 3196         CALL     RAT
      001337 CD 08 59         [ 4] 3197         CALL     PLUS
      00133A CD 05 1E         [ 4] 3198         CALL     CAT
      00133D CD 08 EF         [ 4] 3199         CALL     SUBB
      001340 CD 07 E9         [ 4] 3200         CALL     QDUP
      001343 CD 04 B5         [ 4] 3201         CALL     QBRAN
      001346 13 4E                 3202         .word      SAME2
      001348 CD 05 51         [ 4] 3203         CALL     RFROM
      00134B CC 06 2C         [ 2] 3204         JP     DROP
      00134E CD 04 A0         [ 4] 3205 SAME2:  CALL     DONXT
      001351 13 25                 3206         .word      SAME1
      001353 CC 0C 2B         [ 2] 3207         JP     ZERO
                                   3208 
                                   3209 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3210 ;       find    ( a va -- ca na | a F )
                                   3211 ;       Search vocabulary for string.
                                   3212 ;       Return ca and na if succeeded.
                                   3213 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001356                       3214         _HEADER FIND,4,"FIND"
      001356 13 17                    1         .word LINK 
                           001358     2         LINK=.
      001358 04                       3         .byte 4  
      001359 46 49 4E 44              4         .ascii "FIND"
      00135D                          5         FIND:
      00135D CD 06 46         [ 4] 3215         CALL     SWAPP
      001360 CD 06 36         [ 4] 3216         CALL     DUPP
      001363 CD 05 1E         [ 4] 3217         CALL     CAT
      001366 CD 07 0B         [ 4] 3218         CALL     TEMP
      001369 CD 04 EE         [ 4] 3219         CALL     STORE
      00136C CD 06 36         [ 4] 3220         CALL     DUPP
      00136F CD 05 00         [ 4] 3221         CALL     AT
      001372 CD 05 FF         [ 4] 3222         CALL     TOR
      001375 CD 0B 94         [ 4] 3223         CALL     CELLP
      001378 CD 06 46         [ 4] 3224         CALL     SWAPP
      00137B CD 05 00         [ 4] 3225 FIND1:  CALL     AT
      00137E CD 06 36         [ 4] 3226         CALL     DUPP
      001381 CD 04 B5         [ 4] 3227         CALL     QBRAN
      001384 13 BA                 3228         .word      FIND6
      001386 CD 06 36         [ 4] 3229         CALL     DUPP
      001389 CD 05 00         [ 4] 3230         CALL     AT
      00138C CD 04 8C         [ 4] 3231         CALL     DOLIT
      00138F 1F 7F                 3232         .word      MASKK
      001391 CD 06 93         [ 4] 3233         CALL     ANDD
      001394 CD 05 62         [ 4] 3234         CALL     RAT
      001397 CD 06 BC         [ 4] 3235         CALL     XORR
      00139A CD 04 B5         [ 4] 3236         CALL     QBRAN
      00139D 13 A9                 3237         .word      FIND2
      00139F CD 0B 94         [ 4] 3238         CALL     CELLP
      0013A2 CD 04 8C         [ 4] 3239         CALL     DOLIT
      0013A5 FF FF                 3240         .word     0xFFFF
      0013A7 20 0C            [ 2] 3241         JRA     FIND3
      0013A9 CD 0B 94         [ 4] 3242 FIND2:  CALL     CELLP
      0013AC CD 07 0B         [ 4] 3243         CALL     TEMP
      0013AF CD 05 00         [ 4] 3244         CALL     AT
      0013B2 CD 13 1D         [ 4] 3245         CALL     SAMEQ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0013B5 CD 04 D1         [ 4] 3246 FIND3:  CALL     BRAN
      0013B8 13 C9                 3247         .word      FIND4
      0013BA CD 05 51         [ 4] 3248 FIND6:  CALL     RFROM
      0013BD CD 06 2C         [ 4] 3249         CALL     DROP
      0013C0 CD 06 46         [ 4] 3250         CALL     SWAPP
      0013C3 CD 0B A3         [ 4] 3251         CALL     CELLM
      0013C6 CC 06 46         [ 2] 3252         JP     SWAPP
      0013C9 CD 04 B5         [ 4] 3253 FIND4:  CALL     QBRAN
      0013CC 13 D6                 3254         .word      FIND5
      0013CE CD 0B A3         [ 4] 3255         CALL     CELLM
      0013D1 CD 0B A3         [ 4] 3256         CALL     CELLM
      0013D4 20 A5            [ 2] 3257         JRA     FIND1
      0013D6 CD 05 51         [ 4] 3258 FIND5:  CALL     RFROM
      0013D9 CD 06 2C         [ 4] 3259         CALL     DROP
      0013DC CD 06 46         [ 4] 3260         CALL     SWAPP
      0013DF CD 06 2C         [ 4] 3261         CALL     DROP
      0013E2 CD 0B A3         [ 4] 3262         CALL     CELLM
      0013E5 CD 06 36         [ 4] 3263         CALL     DUPP
      0013E8 CD 13 07         [ 4] 3264         CALL     NAMET
      0013EB CC 06 46         [ 2] 3265         JP     SWAPP
                                   3266 
                                   3267 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3268 ;       NAME?   ( a -- ca na | a F )
                                   3269 ;       Search vocabularies for a string.
                                   3270 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013EE                       3271         _HEADER NAMEQ,5,"NAME?"
      0013EE 13 58                    1         .word LINK 
                           0013F0     2         LINK=.
      0013F0 05                       3         .byte 5  
      0013F1 4E 41 4D 45 3F           4         .ascii "NAME?"
      0013F6                          5         NAMEQ:
      0013F6 CD 07 7F         [ 4] 3272         CALL   CNTXT
      0013F9 CC 13 5D         [ 2] 3273         JP     FIND
                                   3274 
                                   3275 ;; Terminal response
                                   3276 
                                   3277 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3278 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3279 ;       Backup cursor by one character.
                                   3280 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0013FC                       3281         _HEADER BKSP,2,"^H"
      0013FC 13 F0                    1         .word LINK 
                           0013FE     2         LINK=.
      0013FE 02                       3         .byte 2  
      0013FF 5E 48                    4         .ascii "^H"
      001401                          5         BKSP:
      001401 CD 05 FF         [ 4] 3282         CALL     TOR
      001404 CD 06 5E         [ 4] 3283         CALL     OVER
      001407 CD 05 51         [ 4] 3284         CALL     RFROM
      00140A CD 06 46         [ 4] 3285         CALL     SWAPP
      00140D CD 06 5E         [ 4] 3286         CALL     OVER
      001410 CD 06 BC         [ 4] 3287         CALL     XORR
      001413 CD 04 B5         [ 4] 3288         CALL     QBRAN
      001416 14 31                 3289         .word      BACK1
      001418 CD 04 8C         [ 4] 3290         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00141B 00 08                 3291         .word      BKSPP
      00141D CD 04 53         [ 4] 3292         CALL     EMIT
      001420 CD 0B CC         [ 4] 3293         CALL     ONEM
      001423 CD 0C 1E         [ 4] 3294         CALL     BLANK
      001426 CD 04 53         [ 4] 3295         CALL     EMIT
      001429 CD 04 8C         [ 4] 3296         CALL     DOLIT
      00142C 00 08                 3297         .word      BKSPP
      00142E CC 04 53         [ 2] 3298         JP     EMIT
      001431 81               [ 4] 3299 BACK1:  RET
                                   3300 
                                   3301 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3302 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3303 ;       Accept and echo key stroke
                                   3304 ;       and bump cursor.
                                   3305 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001432                       3306         _HEADER TAP,3,"TAP"
      001432 13 FE                    1         .word LINK 
                           001434     2         LINK=.
      001434 03                       3         .byte 3  
      001435 54 41 50                 4         .ascii "TAP"
      001438                          5         TAP:
      001438 CD 06 36         [ 4] 3307         CALL     DUPP
      00143B CD 04 53         [ 4] 3308         CALL     EMIT
      00143E CD 06 5E         [ 4] 3309         CALL     OVER
      001441 CD 05 0D         [ 4] 3310         CALL     CSTOR
      001444 CC 0B BF         [ 2] 3311         JP     ONEP
                                   3312 
                                   3313 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3314 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3315 ;       Process a key stroke,
                                   3316 ;       CR,LF or backspace.
                                   3317 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001447                       3318         _HEADER KTAP,4,"KTAP"
      001447 14 34                    1         .word LINK 
                           001449     2         LINK=.
      001449 04                       3         .byte 4  
      00144A 4B 54 41 50              4         .ascii "KTAP"
      00144E                          5         KTAP:
      00144E CD 06 36         [ 4] 3319         CALL     DUPP
      001451 CD 04 8C         [ 4] 3320         CALL     DOLIT
                           000001  3321 .if EOL_CR
      001454 00 0D                 3322         .word   CRR
                           000000  3323 .else ; EOL_LF 
                                   3324         .word   LF
                                   3325 .endif 
      001456 CD 06 BC         [ 4] 3326         CALL     XORR
      001459 CD 04 B5         [ 4] 3327         CALL     QBRAN
      00145C 14 74                 3328         .word      KTAP2
      00145E CD 04 8C         [ 4] 3329         CALL     DOLIT
      001461 00 08                 3330         .word      BKSPP
      001463 CD 06 BC         [ 4] 3331         CALL     XORR
      001466 CD 04 B5         [ 4] 3332         CALL     QBRAN
      001469 14 71                 3333         .word      KTAP1
      00146B CD 0C 1E         [ 4] 3334         CALL     BLANK
      00146E CC 14 38         [ 2] 3335         JP     TAP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001471 CC 14 01         [ 2] 3336 KTAP1:  JP     BKSP
      001474 CD 06 2C         [ 4] 3337 KTAP2:  CALL     DROP
      001477 CD 06 46         [ 4] 3338         CALL     SWAPP
      00147A CD 06 2C         [ 4] 3339         CALL     DROP
      00147D CC 06 36         [ 2] 3340         JP     DUPP
                                   3341 
                                   3342 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3343 ;       accept  ( b u -- b u )
                                   3344 ;       Accept characters to input
                                   3345 ;       buffer. Return with actual count.
                                   3346 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001480                       3347         _HEADER ACCEP,6,"ACCEPT"
      001480 14 49                    1         .word LINK 
                           001482     2         LINK=.
      001482 06                       3         .byte 6  
      001483 41 43 43 45 50 54        4         .ascii "ACCEPT"
      001489                          5         ACCEP:
      001489 CD 06 5E         [ 4] 3348         CALL     OVER
      00148C CD 08 59         [ 4] 3349         CALL     PLUS
      00148F CD 06 5E         [ 4] 3350         CALL     OVER
      001492 CD 08 44         [ 4] 3351 ACCP1:  CALL     DDUP
      001495 CD 06 BC         [ 4] 3352         CALL     XORR
      001498 CD 04 B5         [ 4] 3353         CALL     QBRAN
      00149B 14 BD                 3354         .word      ACCP4
      00149D CD 10 1F         [ 4] 3355         CALL     KEY
      0014A0 CD 06 36         [ 4] 3356         CALL     DUPP
      0014A3 CD 0C 1E         [ 4] 3357         CALL     BLANK
      0014A6 CD 04 8C         [ 4] 3358         CALL     DOLIT
      0014A9 00 7F                 3359         .word      127
      0014AB CD 09 B3         [ 4] 3360         CALL     WITHI
      0014AE CD 04 B5         [ 4] 3361         CALL     QBRAN
      0014B1 14 B8                 3362         .word      ACCP2
      0014B3 CD 14 38         [ 4] 3363         CALL     TAP
      0014B6 20 03            [ 2] 3364         JRA     ACCP3
      0014B8 CD 14 4E         [ 4] 3365 ACCP2:  CALL     KTAP
      0014BB 20 D5            [ 2] 3366 ACCP3:  JRA     ACCP1
      0014BD CD 06 2C         [ 4] 3367 ACCP4:  CALL     DROP
      0014C0 CD 06 5E         [ 4] 3368         CALL     OVER
      0014C3 CC 08 EF         [ 2] 3369         JP     SUBB
                                   3370 
                                   3371 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3372 ;       QUERY   ( -- )
                                   3373 ;       Accept input stream to
                                   3374 ;       terminal input buffer.
                                   3375 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014C6                       3376         _HEADER QUERY,5,"QUERY"
      0014C6 14 82                    1         .word LINK 
                           0014C8     2         LINK=.
      0014C8 05                       3         .byte 5  
      0014C9 51 55 45 52 59           4         .ascii "QUERY"
      0014CE                          5         QUERY:
      0014CE CD 0D 27         [ 4] 3377         CALL     TIB
      0014D1 CD 04 8C         [ 4] 3378         CALL     DOLIT
      0014D4 00 50                 3379         .word      80
      0014D6 CD 14 89         [ 4] 3380         CALL     ACCEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0014D9 CD 07 2A         [ 4] 3381         CALL     NTIB
      0014DC CD 04 EE         [ 4] 3382         CALL     STORE
      0014DF CD 06 2C         [ 4] 3383         CALL     DROP
      0014E2 CD 0C 2B         [ 4] 3384         CALL     ZERO
      0014E5 CD 07 1A         [ 4] 3385         CALL     INN
      0014E8 CC 04 EE         [ 2] 3386         JP     STORE
                                   3387 
                                   3388 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3389 ;       ABORT   ( -- )
                                   3390 ;       Reset data stack and
                                   3391 ;       jump to QUIT.
                                   3392 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014EB                       3393         _HEADER ABORT,5,"ABORT"
      0014EB 14 C8                    1         .word LINK 
                           0014ED     2         LINK=.
      0014ED 05                       3         .byte 5  
      0014EE 41 42 4F 52 54           4         .ascii "ABORT"
      0014F3                          5         ABORT:
      0014F3 CD 15 E7         [ 4] 3394         CALL     PRESE
      0014F6 CC 16 04         [ 2] 3395         JP     QUIT
                                   3396 
                                   3397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3398 ;       abort"  ( f -- )
                                   3399 ;       Run time routine of ABORT".
                                   3400 ;       Abort with a message.
                                   3401 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0014F9                       3402         _HEADER ABORQ,COMPO+6,'ABORT"'
      0014F9 14 ED                    1         .word LINK 
                           0014FB     2         LINK=.
      0014FB 46                       3         .byte COMPO+6  
      0014FC 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      001502                          5         ABORQ:
      001502 CD 04 B5         [ 4] 3403         CALL     QBRAN
      001505 15 21                 3404         .word      ABOR2   ;text flag
      001507 CD 10 AA         [ 4] 3405         CALL     DOSTR
      00150A CD 10 57         [ 4] 3406 ABOR1:  CALL     SPACE
      00150D CD 0C EE         [ 4] 3407         CALL     COUNT
      001510 CD 10 81         [ 4] 3408         CALL     TYPES
      001513 CD 04 8C         [ 4] 3409         CALL     DOLIT
      001516 00 3F                 3410         .word     63 ; "?"
      001518 CD 04 53         [ 4] 3411         CALL     EMIT
      00151B CD 10 9A         [ 4] 3412         CALL     CR
      00151E CC 14 F3         [ 2] 3413         JP     ABORT   ;pass error string
      001521 CD 10 AA         [ 4] 3414 ABOR2:  CALL     DOSTR
      001524 CC 06 2C         [ 2] 3415         JP     DROP
                                   3416 
                                   3417 ;; The text interpreter
                                   3418 
                                   3419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3420 ;       $INTERPRET      ( a -- )
                                   3421 ;       Interpret a word. If failed,
                                   3422 ;       try to convert it to an integer.
                                   3423 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001527                       3424         _HEADER INTER,10,"$INTERPRET"
      001527 14 FB                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                           001529     2         LINK=.
      001529 0A                       3         .byte 10  
      00152A 24 49 4E 54 45 52 50     4         .ascii "$INTERPRET"
             52 45 54
      001534                          5         INTER:
      001534 CD 13 F6         [ 4] 3425         CALL     NAMEQ
      001537 CD 07 E9         [ 4] 3426         CALL     QDUP    ;?defined
      00153A CD 04 B5         [ 4] 3427         CALL     QBRAN
      00153D 15 5E                 3428         .word      INTE1
      00153F CD 05 00         [ 4] 3429         CALL     AT
      001542 CD 04 8C         [ 4] 3430         CALL     DOLIT
      001545 40 00                 3431 	.word       0x4000	; COMPO*256
      001547 CD 06 93         [ 4] 3432         CALL     ANDD    ;?compile only lexicon bits
      00154A CD 15 02         [ 4] 3433         CALL     ABORQ
      00154D 0D                    3434         .byte      13
      00154E 20 63 6F 6D 70 69 6C  3435         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00155B CC 04 E1         [ 2] 3436         JP      EXECU
      00155E                       3437 INTE1:  
      00155E CD 0F 7E         [ 4] 3438         CALL     NUMBQ   ;convert a number
      001561 CD 04 B5         [ 4] 3439         CALL     QBRAN
      001564 15 0A                 3440         .word    ABOR1
      001566 81               [ 4] 3441         RET
                                   3442 
                                   3443 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3444 ;       [       ( -- )
                                   3445 ;       Start  text interpreter.
                                   3446 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001567                       3447         _HEADER LBRAC,IMEDD+1,"["
      001567 15 29                    1         .word LINK 
                           001569     2         LINK=.
      001569 81                       3         .byte IMEDD+1  
      00156A 5B                       4         .ascii "["
      00156B                          5         LBRAC:
      00156B CD 04 8C         [ 4] 3448         CALL   DOLIT
      00156E 15 34                 3449         .word  INTER
      001570 CD 07 5D         [ 4] 3450         CALL   TEVAL
      001573 CC 04 EE         [ 2] 3451         JP     STORE
                                   3452 
                                   3453 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3454 ;       .OK     ( -- )
                                   3455 ;       Display 'ok' while interpreting.
                                   3456 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001576                       3457         _HEADER DOTOK,3,".OK"
      001576 15 69                    1         .word LINK 
                           001578     2         LINK=.
      001578 03                       3         .byte 3  
      001579 2E 4F 4B                 4         .ascii ".OK"
      00157C                          5         DOTOK:
      00157C CD 04 8C         [ 4] 3458         CALL     DOLIT
      00157F 15 34                 3459         .word      INTER
      001581 CD 07 5D         [ 4] 3460         CALL     TEVAL
      001584 CD 05 00         [ 4] 3461         CALL     AT
      001587 CD 09 17         [ 4] 3462         CALL     EQUAL
      00158A CD 04 B5         [ 4] 3463         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00158D 15 96                 3464         .word      DOTO1
      00158F CD 10 C7         [ 4] 3465         CALL     DOTQP
      001592 03                    3466         .byte      3
      001593 20 6F 6B              3467         .ascii     " ok"
      001596 CC 10 9A         [ 2] 3468 DOTO1:  JP     CR
                                   3469 
                                   3470 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3471 ;       ?STACK  ( -- )
                                   3472 ;       Abort if stack underflows.
                                   3473 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001599                       3474         _HEADER QSTAC,6,"?STACK"
      001599 15 78                    1         .word LINK 
                           00159B     2         LINK=.
      00159B 06                       3         .byte 6  
      00159C 3F 53 54 41 43 4B        4         .ascii "?STACK"
      0015A2                          5         QSTAC:
      0015A2 CD 0C 6D         [ 4] 3475         CALL     DEPTH
      0015A5 CD 06 6D         [ 4] 3476         CALL     ZLESS   ;check only for underflow
      0015A8 CD 15 02         [ 4] 3477         CALL     ABORQ
      0015AB 0B                    3478         .byte      11
      0015AC 20 75 6E 64 65 72 66  3479         .ascii     " underflow "
             6C 6F 77 20
      0015B7 81               [ 4] 3480         RET
                                   3481 
                                   3482 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3483 ;       EVAL    ( -- )
                                   3484 ;       Interpret  input stream.
                                   3485 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015B8                       3486         _HEADER EVAL,4,"EVAL"
      0015B8 15 9B                    1         .word LINK 
                           0015BA     2         LINK=.
      0015BA 04                       3         .byte 4  
      0015BB 45 56 41 4C              4         .ascii "EVAL"
      0015BF                          5         EVAL:
      0015BF CD 12 F9         [ 4] 3487 EVAL1:  CALL     TOKEN
      0015C2 CD 06 36         [ 4] 3488         CALL     DUPP
      0015C5 CD 05 1E         [ 4] 3489         CALL     CAT     ;?input stream empty
      0015C8 CD 04 B5         [ 4] 3490         CALL     QBRAN
      0015CB 15 D8                 3491         .word    EVAL2
      0015CD CD 07 5D         [ 4] 3492         CALL     TEVAL
      0015D0 CD 0D 3B         [ 4] 3493         CALL     ATEXE
      0015D3 CD 15 A2         [ 4] 3494         CALL     QSTAC   ;evaluate input, check stack
      0015D6 20 E7            [ 2] 3495         JRA     EVAL1 
      0015D8 CD 06 2C         [ 4] 3496 EVAL2:  CALL     DROP
      0015DB CC 15 7C         [ 2] 3497         JP       DOTOK
                                   3498 
                                   3499 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3500 ;       PRESET  ( -- )
                                   3501 ;       Reset data stack pointer and
                                   3502 ;       terminal input buffer.
                                   3503 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015DE                       3504         _HEADER PRESE,6,"PRESET"
      0015DE 15 BA                    1         .word LINK 
                           0015E0     2         LINK=.
      0015E0 06                       3         .byte 6  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0015E1 50 52 45 53 45 54        4         .ascii "PRESET"
      0015E7                          5         PRESE:
      0015E7 CD 04 8C         [ 4] 3505         CALL     DOLIT
      0015EA 16 80                 3506         .word      SPP
      0015EC CD 06 23         [ 4] 3507         CALL     SPSTO
      0015EF CD 04 8C         [ 4] 3508         CALL     DOLIT
      0015F2 17 00                 3509         .word      TIBB
      0015F4 CD 07 2A         [ 4] 3510         CALL     NTIB
      0015F7 CD 0B 94         [ 4] 3511         CALL     CELLP
      0015FA CC 04 EE         [ 2] 3512         JP     STORE
                                   3513 
                                   3514 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3515 ;       QUIT    ( -- )
                                   3516 ;       Reset return stack pointer
                                   3517 ;       and start text interpreter.
                                   3518 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0015FD                       3519         _HEADER QUIT,4,"QUIT"
      0015FD 15 E0                    1         .word LINK 
                           0015FF     2         LINK=.
      0015FF 04                       3         .byte 4  
      001600 51 55 49 54              4         .ascii "QUIT"
      001604                          5         QUIT:
      001604 CD 04 8C         [ 4] 3520         CALL     DOLIT
      001607 17 FF                 3521         .word      RPP
      001609 CD 05 3B         [ 4] 3522         CALL     RPSTO   ;reset return stack pointer
      00160C CD 15 6B         [ 4] 3523 QUIT1:  CALL     LBRAC   ;start interpretation
      00160F CD 14 CE         [ 4] 3524 QUIT2:  CALL     QUERY   ;get input
      001612 CD 15 BF         [ 4] 3525         CALL     EVAL
      001615 20 F8            [ 2] 3526         JRA     QUIT2   ;continue till error
                                   3527 
                                   3528 ;; The compiler
                                   3529 
                                   3530 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3531 ;       '       ( -- ca )
                                   3532 ;       Search vocabularies for
                                   3533 ;       next word in input stream.
                                   3534 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001617                       3535         _HEADER TICK,1,"'"
      001617 15 FF                    1         .word LINK 
                           001619     2         LINK=.
      001619 01                       3         .byte 1  
      00161A 27                       4         .ascii "'"
      00161B                          5         TICK:
      00161B CD 12 F9         [ 4] 3536         CALL     TOKEN
      00161E CD 13 F6         [ 4] 3537         CALL     NAMEQ   ;?defined
      001621 CD 04 B5         [ 4] 3538         CALL     QBRAN
      001624 15 0A                 3539         .word      ABOR1
      001626 81               [ 4] 3540         RET     ;yes, push code address
                                   3541 
                                   3542 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3543 ;       ALLOT   ( n -- )
                                   3544 ;       Allocate n bytes to RAM 
                                   3545 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001627                       3546         _HEADER ALLOT,5,"ALLOT"
      001627 16 19                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                           001629     2         LINK=.
      001629 05                       3         .byte 5  
      00162A 41 4C 4C 4F 54           4         .ascii "ALLOT"
      00162F                          5         ALLOT:
      00162F CD 07 8D         [ 4] 3547         CALL     VPP
                                   3548 ; must update APP_VP each time VP is modidied
      001632 CD 0C 9B         [ 4] 3549         call PSTOR 
      001635 CC 1E 53         [ 2] 3550         jp UPDATVP 
                                   3551 
                                   3552 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3553 ;       ,       ( w -- )
                                   3554 ;         Compile an integer into
                                   3555 ;         variable space.
                                   3556 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001638                       3557         _HEADER COMMA,1,^/"\,"/
      001638 16 29                    1         .word LINK 
                           00163A     2         LINK=.
      00163A 01                       3         .byte 1  
      00163B 5C 2C                    4         .ascii "\,"
      00163D                          5         COMMA:
      00163D CD 0D 05         [ 4] 3558         CALL     HERE
      001640 CD 06 36         [ 4] 3559         CALL     DUPP
      001643 CD 0B 94         [ 4] 3560         CALL     CELLP   ;cell boundary
      001646 CD 07 8D         [ 4] 3561         CALL     VPP
      001649 CD 04 EE         [ 4] 3562         CALL     STORE
      00164C CC 04 EE         [ 2] 3563         JP     STORE
                                   3564 
                                   3565 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3566 ;       C,      ( c -- )
                                   3567 ;       Compile a byte into
                                   3568 ;       variables space.
                                   3569 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00164F                       3570         _HEADER CCOMMA,2,^/"C,"/
      00164F 16 3A                    1         .word LINK 
                           001651     2         LINK=.
      001651 02                       3         .byte 2  
      001652 43 2C                    4         .ascii "C,"
      001654                          5         CCOMMA:
      001654 CD 0D 05         [ 4] 3571         CALL     HERE
      001657 CD 06 36         [ 4] 3572         CALL     DUPP
      00165A CD 0B BF         [ 4] 3573         CALL     ONEP
      00165D CD 07 8D         [ 4] 3574         CALL     VPP
      001660 CD 04 EE         [ 4] 3575         CALL     STORE
      001663 CC 05 0D         [ 2] 3576         JP     CSTOR
                                   3577 
                                   3578 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3579 ;       [COMPILE]       ( -- ; <string> )
                                   3580 ;       Compile next immediate
                                   3581 ;       word into code dictionary.
                                   3582 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001666                       3583         _HEADER BCOMP,COMPO+IMEDD+9,"[COMPILE]"
      001666 16 51                    1         .word LINK 
                           001668     2         LINK=.
      001668 C9                       3         .byte COMPO+IMEDD+9  
      001669 5B 43 4F 4D 50 49 4C     4         .ascii "[COMPILE]"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



             45 5D
      001672                          5         BCOMP:
      001672 CD 16 1B         [ 4] 3584         CALL     TICK
      001675 CC 19 49         [ 2] 3585         JP     JSRC
                                   3586 
                                   3587 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3588 ;       COMPILE ( -- )
                                   3589 ;       Compile next jsr in
                                   3590 ;       colon list to code dictionary.
                                   3591 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001678                       3592         _HEADER COMPI,COMPO+7,"COMPILE"
      001678 16 68                    1         .word LINK 
                           00167A     2         LINK=.
      00167A 47                       3         .byte COMPO+7  
      00167B 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE"
      001682                          5         COMPI:
      001682 CD 05 51         [ 4] 3593         CALL     RFROM
      001685 CD 06 36         [ 4] 3594         CALL     DUPP
      001688 CD 05 00         [ 4] 3595         CALL     AT
      00168B CD 19 49         [ 4] 3596         CALL     JSRC    ;compile subroutine
      00168E CD 0B 94         [ 4] 3597         CALL     CELLP
      001691 90 93            [ 1] 3598         ldw y,x 
      001693 90 FE            [ 2] 3599         ldw y,(y)
      001695 1C 00 02         [ 2] 3600         addw x,#CELLL 
      001698 90 FC            [ 2] 3601         jp (y)
                                   3602 
                                   3603 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3604 ;       LITERAL ( w -- )
                                   3605 ;       Compile tos to dictionary
                                   3606 ;       as an integer literal.
                                   3607 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00169A                       3608         _HEADER LITER,COMPO+IMEDD+7,"LITERAL"
      00169A 16 7A                    1         .word LINK 
                           00169C     2         LINK=.
      00169C C7                       3         .byte COMPO+IMEDD+7  
      00169D 4C 49 54 45 52 41 4C     4         .ascii "LITERAL"
      0016A4                          5         LITER:
      0016A4 CD 16 82         [ 4] 3609         CALL     COMPI
      0016A7 04 8C                 3610         .word DOLIT 
      0016A9 CC 16 3D         [ 2] 3611         JP     COMMA
                                   3612 
                                   3613 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3614 ;       $,"     ( -- )
                                   3615 ;       Compile a literal string
                                   3616 ;       up to next " .
                                   3617 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3618 ;        _HEADER STRCQ,3,^/'$,"'/
      0016AC                       3619 STRCQ:
      0016AC CD 04 8C         [ 4] 3620         CALL     DOLIT
      0016AF 00 22                 3621         .word     34	; "
      0016B1 CD 12 38         [ 4] 3622         CALL     PARSE
      0016B4 CD 0D 05         [ 4] 3623         CALL     HERE
      0016B7 CD 0D D6         [ 4] 3624         CALL     PACKS   ;string to code dictionary
      0016BA CD 0C EE         [ 4] 3625         CALL     COUNT
      0016BD CD 08 59         [ 4] 3626         CALL     PLUS    ;calculate aligned end of string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0016C0 CD 07 8D         [ 4] 3627         CALL     VPP
      0016C3 CC 04 EE         [ 2] 3628         JP     STORE
                                   3629 
                                   3630 ;; Structures
                                   3631 
                                   3632 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3633 ;       FOR     ( -- a )
                                   3634 ;       Start a FOR-NEXT loop
                                   3635 ;       structure in a colon definition.
                                   3636 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016C6                       3637         _HEADER FOR,COMPO+IMEDD+3,"FOR"
      0016C6 16 9C                    1         .word LINK 
                           0016C8     2         LINK=.
      0016C8 C3                       3         .byte COMPO+IMEDD+3  
      0016C9 46 4F 52                 4         .ascii "FOR"
      0016CC                          5         FOR:
      0016CC CD 16 82         [ 4] 3638         CALL     COMPI
      0016CF 05 FF                 3639         .word TOR 
      0016D1 CC 0D 05         [ 2] 3640         JP     HERE
                                   3641 
                                   3642 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3643 ;       NEXT    ( a -- )
                                   3644 ;       Terminate a FOR-NEXT loop.
                                   3645 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016D4                       3646         _HEADER NEXT,COMPO+IMEDD+4,"NEXT"
      0016D4 16 C8                    1         .word LINK 
                           0016D6     2         LINK=.
      0016D6 C4                       3         .byte COMPO+IMEDD+4  
      0016D7 4E 45 58 54              4         .ascii "NEXT"
      0016DB                          5         NEXT:
      0016DB CD 16 82         [ 4] 3647         CALL     COMPI
      0016DE 04 A0                 3648         .word DONXT 
      0016E0 CD 07 D9         [ 4] 3649         call ADRADJ
      0016E3 CC 16 3D         [ 2] 3650         JP     COMMA
                                   3651 
                                   3652 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3653 ;       I ( -- n )
                                   3654 ;       stack COUNTER
                                   3655 ;       of innermost FOR-NEXT  
                                   3656 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016E6                       3657         _HEADER IFETCH,1,"I"
      0016E6 16 D6                    1         .word LINK 
                           0016E8     2         LINK=.
      0016E8 01                       3         .byte 1  
      0016E9 49                       4         .ascii "I"
      0016EA                          5         IFETCH:
      0016EA 1D 00 02         [ 2] 3658         subw x,#CELLL 
      0016ED 16 03            [ 2] 3659         ldw y,(3,sp)
      0016EF FF               [ 2] 3660         ldw (x),y 
      0016F0 81               [ 4] 3661         ret 
                                   3662 
                                   3663 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3664 ;       J ( -- n )
                                   3665 ;   stack COUNTER
                                   3666 ;   of outer FOR-NEXT  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3667 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016F1                       3668         _HEADER JFETCH,1,"J"
      0016F1 16 E8                    1         .word LINK 
                           0016F3     2         LINK=.
      0016F3 01                       3         .byte 1  
      0016F4 4A                       4         .ascii "J"
      0016F5                          5         JFETCH:
      0016F5 1D 00 02         [ 2] 3669         SUBW X,#CELLL 
      0016F8 16 05            [ 2] 3670         LDW Y,(5,SP)
      0016FA FF               [ 2] 3671         LDW (X),Y 
      0016FB 81               [ 4] 3672         RET 
                                   3673 
                                   3674 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3675 ;       BEGIN   ( -- a )
                                   3676 ;       Start an infinite or
                                   3677 ;       indefinite loop structure.
                                   3678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0016FC                       3679         _HEADER BEGIN,COMPO+IMEDD+5,"BEGIN"
      0016FC 16 F3                    1         .word LINK 
                           0016FE     2         LINK=.
      0016FE C5                       3         .byte COMPO+IMEDD+5  
      0016FF 42 45 47 49 4E           4         .ascii "BEGIN"
      001704                          5         BEGIN:
      001704 CC 0D 05         [ 2] 3680         JP     HERE
                                   3681 
                                   3682 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3683 ;       UNTIL   ( a -- )
                                   3684 ;       Terminate a BEGIN-UNTIL
                                   3685 ;       indefinite loop structure.
                                   3686 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001707                       3687         _HEADER UNTIL,COMPO+IMEDD+5,"UNTIL"
      001707 16 FE                    1         .word LINK 
                           001709     2         LINK=.
      001709 C5                       3         .byte COMPO+IMEDD+5  
      00170A 55 4E 54 49 4C           4         .ascii "UNTIL"
      00170F                          5         UNTIL:
      00170F CD 16 82         [ 4] 3688         CALL     COMPI
      001712 04 B5                 3689         .word    QBRAN 
      001714 CD 07 D9         [ 4] 3690         call ADRADJ
      001717 CC 16 3D         [ 2] 3691         JP     COMMA
                                   3692 
                                   3693 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3694 ;       AGAIN   ( a -- )
                                   3695 ;       Terminate a BEGIN-AGAIN
                                   3696 ;       infinite loop structure.
                                   3697 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00171A                       3698         _HEADER AGAIN,COMPO+IMEDD+5,"AGAIN"
      00171A 17 09                    1         .word LINK 
                           00171C     2         LINK=.
      00171C C5                       3         .byte COMPO+IMEDD+5  
      00171D 41 47 41 49 4E           4         .ascii "AGAIN"
      001722                          5         AGAIN:
                           000001  3699 .if OPTIMIZE 
      001722                       3700         _DOLIT JPIMM 
      001722 CD 04 8C         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001725 00 CC                    2     .word JPIMM 
      001727 CD 16 54         [ 4] 3701         CALL  CCOMMA
                           000000  3702 .else 
                                   3703         CALL     COMPI
                                   3704         .word BRAN
                                   3705 .endif 
      00172A CD 07 D9         [ 4] 3706         call ADRADJ 
      00172D CC 16 3D         [ 2] 3707         JP     COMMA
                                   3708 
                                   3709 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3710 ;       IF      ( -- A )
                                   3711 ;       Begin a conditional branch.
                                   3712 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001730                       3713         _HEADER IFF,COMPO+IMEDD+2,"IF"
      001730 17 1C                    1         .word LINK 
                           001732     2         LINK=.
      001732 C2                       3         .byte COMPO+IMEDD+2  
      001733 49 46                    4         .ascii "IF"
      001735                          5         IFF:
      001735 CD 16 82         [ 4] 3714         CALL     COMPI
      001738 04 B5                 3715         .word QBRAN
      00173A CD 0D 05         [ 4] 3716         CALL     HERE
      00173D CD 0C 2B         [ 4] 3717         CALL     ZERO
      001740 CC 16 3D         [ 2] 3718         JP     COMMA
                                   3719 
                                   3720 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3721 ;       THEN        ( A -- )
                                   3722 ;       Terminate a conditional 
                                   3723 ;       branch structure.
                                   3724 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001743                       3725         _HEADER THENN,COMPO+IMEDD+4,"THEN"
      001743 17 32                    1         .word LINK 
                           001745     2         LINK=.
      001745 C4                       3         .byte COMPO+IMEDD+4  
      001746 54 48 45 4E              4         .ascii "THEN"
      00174A                          5         THENN:
      00174A CD 0D 05         [ 4] 3726         CALL     HERE
      00174D CD 07 D9         [ 4] 3727         call ADRADJ 
      001750 CD 06 46         [ 4] 3728         CALL     SWAPP
      001753 CC 04 EE         [ 2] 3729         JP     STORE
                                   3730 
                                   3731 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3732 ;       ELSE        ( A -- A )
                                   3733 ;       Start the false clause in 
                                   3734 ;       an IF-ELSE-THEN structure.
                                   3735 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001756                       3736         _HEADER ELSEE,COMPO+IMEDD+4,"ELSE"
      001756 17 45                    1         .word LINK 
                           001758     2         LINK=.
      001758 C4                       3         .byte COMPO+IMEDD+4  
      001759 45 4C 53 45              4         .ascii "ELSE"
      00175D                          5         ELSEE:
                           000001  3737 .if OPTIMIZE 
      00175D                       3738         _DOLIT JPIMM 
      00175D CD 04 8C         [ 4]    1     CALL DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001760 00 CC                    2     .word JPIMM 
      001762 CD 16 54         [ 4] 3739         CALL CCOMMA 
                           000000  3740 .else 
                                   3741          CALL     COMPI
                                   3742         .word BRAN
                                   3743 .endif 
      001765 CD 0D 05         [ 4] 3744         CALL     HERE
      001768 CD 0C 2B         [ 4] 3745         CALL     ZERO
      00176B CD 16 3D         [ 4] 3746         CALL     COMMA
      00176E CD 06 46         [ 4] 3747         CALL     SWAPP
      001771 CD 0D 05         [ 4] 3748         CALL     HERE
      001774 CD 07 D9         [ 4] 3749         call ADRADJ 
      001777 CD 06 46         [ 4] 3750         CALL     SWAPP
      00177A CC 04 EE         [ 2] 3751         JP     STORE
                                   3752 
                                   3753 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3754 ;       AHEAD       ( -- A )
                                   3755 ;       Compile a forward branch
                                   3756 ;       instruction.
                                   3757 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00177D                       3758         _HEADER AHEAD,COMPO+IMEDD+5,"AHEAD"
      00177D 17 58                    1         .word LINK 
                           00177F     2         LINK=.
      00177F C5                       3         .byte COMPO+IMEDD+5  
      001780 41 48 45 41 44           4         .ascii "AHEAD"
      001785                          5         AHEAD:
                           000001  3759 .if OPTIMIZE 
      001785                       3760         _DOLIT JPIMM 
      001785 CD 04 8C         [ 4]    1     CALL DOLIT 
      001788 00 CC                    2     .word JPIMM 
      00178A CD 16 54         [ 4] 3761         CALL CCOMMA
                           000000  3762 .else 
                                   3763         CALL     COMPI
                                   3764         .word BRAN
                                   3765 .endif 
      00178D CD 0D 05         [ 4] 3766         CALL     HERE
      001790 CD 0C 2B         [ 4] 3767         CALL     ZERO
      001793 CC 16 3D         [ 2] 3768         JP     COMMA
                                   3769 
                                   3770 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3771 ;       WHILE       ( a -- A a )
                                   3772 ;       Conditional branch out of a 
                                   3773 ;       BEGIN-WHILE-REPEAT loop.
                                   3774 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001796                       3775         _HEADER WHILE,COMPO+IMEDD+5,"WHILE"
      001796 17 7F                    1         .word LINK 
                           001798     2         LINK=.
      001798 C5                       3         .byte COMPO+IMEDD+5  
      001799 57 48 49 4C 45           4         .ascii "WHILE"
      00179E                          5         WHILE:
      00179E CD 16 82         [ 4] 3776         CALL     COMPI
      0017A1 04 B5                 3777         .word QBRAN
      0017A3 CD 0D 05         [ 4] 3778         CALL     HERE
      0017A6 CD 0C 2B         [ 4] 3779         CALL     ZERO
      0017A9 CD 16 3D         [ 4] 3780         CALL     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0017AC CC 06 46         [ 2] 3781         JP     SWAPP
                                   3782 
                                   3783 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3784 ;       REPEAT      ( A a -- )
                                   3785 ;       Terminate a BEGIN-WHILE-REPEAT 
                                   3786 ;       indefinite loop.
                                   3787 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017AF                       3788         _HEADER REPEA,COMPO+IMEDD+6,"REPEAT"
      0017AF 17 98                    1         .word LINK 
                           0017B1     2         LINK=.
      0017B1 C6                       3         .byte COMPO+IMEDD+6  
      0017B2 52 45 50 45 41 54        4         .ascii "REPEAT"
      0017B8                          5         REPEA:
                           000001  3789 .if OPTIMIZE 
      0017B8                       3790         _DOLIT JPIMM 
      0017B8 CD 04 8C         [ 4]    1     CALL DOLIT 
      0017BB 00 CC                    2     .word JPIMM 
      0017BD CD 16 54         [ 4] 3791         CALL  CCOMMA
                           000000  3792 .else 
                                   3793         CALL     COMPI
                                   3794         .word BRAN
                                   3795 .endif 
      0017C0 CD 07 D9         [ 4] 3796         call ADRADJ 
      0017C3 CD 16 3D         [ 4] 3797         CALL     COMMA
      0017C6 CD 0D 05         [ 4] 3798         CALL     HERE
      0017C9 CD 07 D9         [ 4] 3799         call ADRADJ 
      0017CC CD 06 46         [ 4] 3800         CALL     SWAPP
      0017CF CC 04 EE         [ 2] 3801         JP     STORE
                                   3802 
                                   3803 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3804 ;       AFT         ( a -- a A )
                                   3805 ;       Jump to THEN in a FOR-AFT-THEN-NEXT 
                                   3806 ;       loop the first time through.
                                   3807 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017D2                       3808         _HEADER AFT,COMPO+IMEDD+3,"AFT"
      0017D2 17 B1                    1         .word LINK 
                           0017D4     2         LINK=.
      0017D4 C3                       3         .byte COMPO+IMEDD+3  
      0017D5 41 46 54                 4         .ascii "AFT"
      0017D8                          5         AFT:
      0017D8 CD 06 2C         [ 4] 3809         CALL     DROP
      0017DB CD 17 85         [ 4] 3810         CALL     AHEAD
      0017DE CD 0D 05         [ 4] 3811         CALL     HERE
      0017E1 CC 06 46         [ 2] 3812         JP     SWAPP
                                   3813 
                                   3814 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3815 ;       ABORT"      ( -- ; <string> )
                                   3816 ;       Conditional abort with an error message.
                                   3817 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017E4                       3818         _HEADER ABRTQ,IMEDD+6,'ABORT"'
      0017E4 17 D4                    1         .word LINK 
                           0017E6     2         LINK=.
      0017E6 86                       3         .byte IMEDD+6  
      0017E7 41 42 4F 52 54 22        4         .ascii 'ABORT"'
      0017ED                          5         ABRTQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      0017ED CD 16 82         [ 4] 3819         CALL     COMPI
      0017F0 15 02                 3820         .word ABORQ
      0017F2 CC 16 AC         [ 2] 3821         JP     STRCQ
                                   3822 
                                   3823 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3824 ;       $"     ( -- ; <string> )
                                   3825 ;       Compile an inline string literal.
                                   3826 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0017F5                       3827         _HEADER STRQ,IMEDD+COMPO+2,'$"'
      0017F5 17 E6                    1         .word LINK 
                           0017F7     2         LINK=.
      0017F7 C2                       3         .byte IMEDD+COMPO+2  
      0017F8 24 22                    4         .ascii '$"'
      0017FA                          5         STRQ:
      0017FA CD 16 82         [ 4] 3828         CALL     COMPI
      0017FD 10 C3                 3829         .word STRQP 
      0017FF CC 16 AC         [ 2] 3830         JP     STRCQ
                                   3831 
                                   3832 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3833 ;       ."          ( -- ; <string> )
                                   3834 ;       Compile an inline string literal 
                                   3835 ;       to be typed out at run time.
                                   3836 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001802                       3837         _HEADER DOTQ,IMEDD+COMPO+2,'."'
      001802 17 F7                    1         .word LINK 
                           001804     2         LINK=.
      001804 C2                       3         .byte IMEDD+COMPO+2  
      001805 2E 22                    4         .ascii '."'
      001807                          5         DOTQ:
      001807 CD 16 82         [ 4] 3838         CALL     COMPI
      00180A 10 C7                 3839         .word DOTQP 
      00180C CC 16 AC         [ 2] 3840         JP     STRCQ
                                   3841 
                                   3842 ;; Name compiler
                                   3843 
                                   3844 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3845 ;       ?UNIQUE ( a -- a )
                                   3846 ;       Display a warning message
                                   3847 ;       if word already exists.
                                   3848 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00180F                       3849         _HEADER UNIQU,7,"?UNIQUE"
      00180F 18 04                    1         .word LINK 
                           001811     2         LINK=.
      001811 07                       3         .byte 7  
      001812 3F 55 4E 49 51 55 45     4         .ascii "?UNIQUE"
      001819                          5         UNIQU:
      001819 CD 06 36         [ 4] 3850         CALL     DUPP
      00181C CD 13 F6         [ 4] 3851         CALL     NAMEQ   ;?name exists
      00181F CD 04 B5         [ 4] 3852         CALL     QBRAN
      001822 18 38                 3853         .word      UNIQ1
      001824 CD 10 C7         [ 4] 3854         CALL     DOTQP   ;redef are OK
      001827 07                    3855         .byte       7
      001828 20 72 65 44 65 66 20  3856         .ascii     " reDef "       
      00182F CD 06 5E         [ 4] 3857         CALL     OVER
      001832 CD 0C EE         [ 4] 3858         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001835 CD 10 81         [ 4] 3859         CALL     TYPES   ;just in case
      001838 CC 06 2C         [ 2] 3860 UNIQ1:  JP     DROP
                                   3861 
                                   3862 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3863 ;       $,n     ( na -- )
                                   3864 ;       Build a new dictionary name
                                   3865 ;       using string at na.
                                   3866 ; compile dans l'espace des variables 
                                   3867 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3868 ;        _HEADER SNAME,3,^/"$,n"/
      00183B                       3869 SNAME: 
      00183B CD 06 36         [ 4] 3870         CALL     DUPP
      00183E CD 05 1E         [ 4] 3871         CALL     CAT     ;?null input
      001841 CD 04 B5         [ 4] 3872         CALL     QBRAN
      001844 18 71                 3873         .word      PNAM1
      001846 CD 18 19         [ 4] 3874         CALL     UNIQU   ;?redefinition
      001849 CD 06 36         [ 4] 3875         CALL     DUPP
      00184C CD 0C EE         [ 4] 3876         CALL     COUNT
      00184F CD 08 59         [ 4] 3877         CALL     PLUS
      001852 CD 07 8D         [ 4] 3878         CALL     VPP
      001855 CD 04 EE         [ 4] 3879         CALL     STORE
      001858 CD 06 36         [ 4] 3880         CALL     DUPP
      00185B CD 07 AB         [ 4] 3881         CALL     LAST
      00185E CD 04 EE         [ 4] 3882         CALL     STORE   ;save na for vocabulary link
      001861 CD 0B A3         [ 4] 3883         CALL     CELLM   ;link address
      001864 CD 07 7F         [ 4] 3884         CALL     CNTXT
      001867 CD 05 00         [ 4] 3885         CALL     AT
      00186A CD 06 46         [ 4] 3886         CALL     SWAPP
      00186D CD 04 EE         [ 4] 3887         CALL     STORE
      001870 81               [ 4] 3888         RET     ;save code pointer
      001871 CD 10 C3         [ 4] 3889 PNAM1:  CALL     STRQP
      001874 05                    3890         .byte      5
      001875 20 6E 61 6D 65        3891         .ascii     " name" ;null input
      00187A CC 15 0A         [ 2] 3892         JP     ABOR1
                                   3893 
                                   3894 ;; FORTH compiler
                                   3895 
                                   3896 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3897 ;       $COMPILE        ( a -- )
                                   3898 ;       Compile next word to
                                   3899 ;       dictionary as a token or literal.
                                   3900 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      00187D                       3901         _HEADER SCOMP,8,"$COMPILE"
      00187D 18 11                    1         .word LINK 
                           00187F     2         LINK=.
      00187F 08                       3         .byte 8  
      001880 24 43 4F 4D 50 49 4C     4         .ascii "$COMPILE"
             45
      001888                          5         SCOMP:
      001888 CD 13 F6         [ 4] 3902         CALL     NAMEQ
      00188B CD 07 E9         [ 4] 3903         CALL     QDUP    ;?defined
      00188E CD 04 B5         [ 4] 3904         CALL     QBRAN
      001891 18 A9                 3905         .word      SCOM2
      001893 CD 05 00         [ 4] 3906         CALL     AT
      001896 CD 04 8C         [ 4] 3907         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001899 80 00                 3908         .word     0x8000	;  IMEDD*256
      00189B CD 06 93         [ 4] 3909         CALL     ANDD    ;?immediate
      00189E CD 04 B5         [ 4] 3910         CALL     QBRAN
      0018A1 18 A6                 3911         .word      SCOM1
      0018A3 CC 04 E1         [ 2] 3912         JP     EXECU
      0018A6 CC 19 49         [ 2] 3913 SCOM1:  JP     JSRC
      0018A9 CD 0F 7E         [ 4] 3914 SCOM2:  CALL     NUMBQ   ;try to convert to number 
      0018AC CD 07 E9         [ 4] 3915         CALL    QDUP  
      0018AF CD 04 B5         [ 4] 3916         CALL     QBRAN
      0018B2 15 0A                 3917         .word      ABOR1
                           000000  3918 .if WANT_DOUBLE 
                                   3919         _DOLIT  -1
                                   3920         CALL    EQUAL
                                   3921         _QBRAN DLITER
                                   3922         JP  LITER 
                                   3923 .endif 
                           000000  3924 .if WANT_FLOAT24 
                                   3925         _DOLIT -1 
                                   3926         CALL EQUAL 
                                   3927         _QBRAN FLITER
                                   3928         JP  LITER  
                                   3929 .endif 
      0018B4                       3930         _DROP 
      0018B4 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0018B7 CC 16 A4         [ 2] 3931         JP     LITER
                                   3932 
                                   3933 
                                   3934 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3935 ;       OVERT   ( -- )
                                   3936 ;       Link a new word into vocabulary.
                                   3937 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018BA                       3938         _HEADER OVERT,5,"OVERT"
      0018BA 18 7F                    1         .word LINK 
                           0018BC     2         LINK=.
      0018BC 05                       3         .byte 5  
      0018BD 4F 56 45 52 54           4         .ascii "OVERT"
      0018C2                          5         OVERT:
      0018C2 CD 07 AB         [ 4] 3939         CALL     LAST
      0018C5 CD 05 00         [ 4] 3940         CALL     AT
      0018C8 CD 07 7F         [ 4] 3941         CALL     CNTXT
      0018CB CC 04 EE         [ 2] 3942         JP     STORE
                                   3943 
                                   3944 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3945 ;       ;       ( -- )
                                   3946 ;       Terminate a colon definition.
                                   3947 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018CE                       3948         _HEADER SEMIS,IMEDD+COMPO+1,^/";"/
      0018CE 18 BC                    1         .word LINK 
                           0018D0     2         LINK=.
      0018D0 C1                       3         .byte IMEDD+COMPO+1  
      0018D1 3B                       4         .ascii ";"
      0018D2                          5         SEMIS:
                           000001  3949 .if OPTIMIZE ; more compact and faster
      0018D2 CD 04 8C         [ 4] 3950         call DOLIT 
      0018D5 00 81                 3951         .word 0x81   ; opcode for RET 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      0018D7 CD 16 54         [ 4] 3952         call CCOMMA 
                           000000  3953 .else
                                   3954         CALL     COMPI
                                   3955         .word EXIT 
                                   3956 .endif 
      0018DA CD 15 6B         [ 4] 3957         CALL     LBRAC
      0018DD CD 18 C2         [ 4] 3958         call OVERT 
      0018E0 CD 23 AB         [ 4] 3959         CALL FMOVE
      0018E3 CD 07 E9         [ 4] 3960         call QDUP 
      0018E6 CD 04 B5         [ 4] 3961         call QBRAN 
      0018E9 1A 76                 3962         .word SET_RAMLAST 
      0018EB CD 24 3F         [ 4] 3963         CALL UPDATPTR
      0018EE 81               [ 4] 3964         RET 
                                   3965 
                                   3966 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3967 ;       Terminate an ISR definition 
                                   3968 ;       retourn ca of ISR as double
                                   3969 ;       I; ( -- ud )
                                   3970 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0018EF                       3971        _HEADER ISEMI,2+IMEDD+COMPO,^/"I;"/
      0018EF 18 D0                    1         .word LINK 
                           0018F1     2         LINK=.
      0018F1 C2                       3         .byte 2+IMEDD+COMPO  
      0018F2 49 3B                    4         .ascii "I;"
      0018F4                          5         ISEMI:
      0018F4 1D 00 02         [ 2] 3972         subw x,#CELLL  
      0018F7 90 AE 00 80      [ 2] 3973         ldw y,#IRET_CODE 
      0018FB FF               [ 2] 3974         ldw (x),y 
      0018FC CD 16 54         [ 4] 3975         call CCOMMA
      0018FF CD 15 6B         [ 4] 3976         call LBRAC 
      001902 CD 24 84         [ 4] 3977         call IFMOVE
      001905 CD 07 E9         [ 4] 3978         call QDUP 
      001908 CD 04 B5         [ 4] 3979         CALL QBRAN 
      00190B 1A 76                 3980         .word SET_RAMLAST
      00190D CD 07 9B         [ 4] 3981         CALL CPP
      001910 CD 05 00         [ 4] 3982         call AT 
      001913 CD 06 46         [ 4] 3983         call SWAPP 
      001916 CD 07 9B         [ 4] 3984         CALL CPP 
      001919 CD 04 EE         [ 4] 3985         call STORE 
      00191C CD 1E 3C         [ 4] 3986         call UPDATCP 
      00191F CD 1D F9         [ 4] 3987         call EEPVP 
      001922                       3988         _DROP 
      001922 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001925 CD 05 00         [ 4] 3989         call AT 
      001928 CD 07 8D         [ 4] 3990         call VPP 
      00192B CD 04 EE         [ 4] 3991         call STORE 
      00192E CC 0C 2B         [ 2] 3992         jp ZERO
      001931 81               [ 4] 3993         ret           
                                   3994         
                                   3995 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   3996 ;       ]       ( -- )
                                   3997 ;       Start compiling words in
                                   3998 ;       input stream.
                                   3999 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001932                       4000         _HEADER RBRAC,1,"]"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001932 18 F1                    1         .word LINK 
                           001934     2         LINK=.
      001934 01                       3         .byte 1  
      001935 5D                       4         .ascii "]"
      001936                          5         RBRAC:
      001936 CD 04 8C         [ 4] 4001         CALL   DOLIT
      001939 18 88                 4002         .word  SCOMP
      00193B CD 07 5D         [ 4] 4003         CALL   TEVAL
      00193E CC 04 EE         [ 2] 4004         JP     STORE
                                   4005 
                                   4006 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4007 ;       CALL,    ( ca -- )
                                   4008 ;       Compile a subroutine call.
                                   4009 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001941                       4010         _HEADER JSRC,5,^/"CALL,"/
      001941 19 34                    1         .word LINK 
                           001943     2         LINK=.
      001943 05                       3         .byte 5  
      001944 43 41 4C 4C 2C           4         .ascii "CALL,"
      001949                          5         JSRC:
                           000001  4011 .if OPTIMIZE 
                                   4012 ;;;;; optimization code ;;;;;;;;;;;;;;;
      001949 90 AE 06 2C      [ 2] 4013         LDW Y,#DROP 
      00194D 90 BF 26         [ 2] 4014         LDW YTEMP,Y 
      001950 90 93            [ 1] 4015         LDW Y,X 
      001952 90 FE            [ 2] 4016         LDW Y,(Y)
      001954 90 B3 26         [ 2] 4017         CPW Y,YTEMP 
      001957 26 13            [ 1] 4018         JRNE JSRC1         
                                   4019 ; replace CALL DROP BY  ADDW X,#CELLL 
      001959 1C 00 02         [ 2] 4020         ADDW X,#CELLL 
      00195C                       4021         _DOLIT ADDWX ; opcode 
      00195C CD 04 8C         [ 4]    1     CALL DOLIT 
      00195F 00 1C                    2     .word ADDWX 
      001961 CD 16 54         [ 4] 4022         CALL   CCOMMA 
      001964                       4023         _DOLIT CELLL 
      001964 CD 04 8C         [ 4]    1     CALL DOLIT 
      001967 00 02                    2     .word CELLL 
      001969 CC 16 3D         [ 2] 4024         JP      COMMA 
      00196C                       4025 JSRC1: ; check for DDROP 
      00196C 90 AE 08 39      [ 2] 4026         LDW Y,#DDROP 
      001970 90 BF 26         [ 2] 4027         LDW YTEMP,Y 
      001973 90 93            [ 1] 4028         LDW Y,X 
      001975 90 FE            [ 2] 4029         LDW Y,(Y)
      001977 90 B3 26         [ 2] 4030         CPW Y,YTEMP 
      00197A 26 13            [ 1] 4031         JRNE JSRC2 
                                   4032 ; replace CALL DDROP BY ADDW X,#2*CELLL 
      00197C 1C 00 02         [ 2] 4033         ADDW X,#CELLL 
      00197F                       4034         _DOLIT ADDWX 
      00197F CD 04 8C         [ 4]    1     CALL DOLIT 
      001982 00 1C                    2     .word ADDWX 
      001984 CD 16 54         [ 4] 4035         CALL  CCOMMA 
      001987                       4036         _DOLIT 2*CELLL 
      001987 CD 04 8C         [ 4]    1     CALL DOLIT 
      00198A 00 04                    2     .word 2*CELLL 
      00198C CC 16 3D         [ 2] 4037         JP  COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      00198F                       4038 JSRC2: 
                                   4039 ;;;;;;;; end optimization code ;;;;;;;;;;        
                                   4040 .endif        
      00198F CD 04 8C         [ 4] 4041         CALL     DOLIT
      001992 00 CD                 4042         .word     CALLL     ;CALL
      001994 CD 16 54         [ 4] 4043         CALL     CCOMMA
      001997 CC 16 3D         [ 2] 4044         JP     COMMA
                                   4045 
                                   4046 ;       INIT-OFS ( -- )
                                   4047 ;       compute offset to adjust jump address 
                                   4048 ;       set variable OFFSET 
      00199A 19 43                 4049         .word LINK 
                           00199C  4050         LINK=.
      00199C 08                    4051         .byte 8 
      00199D 49 4E 49 54 2D 4F 46  4052         .ascii "INIT-OFS" 
             53
      0019A5                       4053 INITOFS:
      0019A5 CD 07 4C         [ 4] 4054         call TFLASH 
      0019A8 CD 05 00         [ 4] 4055         CALL AT 
      0019AB CD 06 36         [ 4] 4056         CALL DUPP 
      0019AE CD 04 B5         [ 4] 4057         call QBRAN
      0019B1 19 C2                 4058         .word 1$
      0019B3                       4059         _DROP  
      0019B3 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      0019B6 CD 07 9B         [ 4] 4060         call CPP 
      0019B9 CD 05 00         [ 4] 4061         call AT 
      0019BC CD 0D 05         [ 4] 4062         call HERE
      0019BF CD 08 EF         [ 4] 4063         call SUBB 
      0019C2 CD 07 D0         [ 4] 4064 1$:     call OFFSET 
      0019C5 CC 04 EE         [ 2] 4065         jp STORE  
                                   4066 
                                   4067 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4068 ;       :       ( -- ; <string> )
                                   4069 ;       Start a new colon definition
                                   4070 ;       using next word as its name.
                                   4071 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019C8                       4072         _HEADER COLON,1,":"
      0019C8 19 9C                    1         .word LINK 
                           0019CA     2         LINK=.
      0019CA 01                       3         .byte 1  
      0019CB 3A                       4         .ascii ":"
      0019CC                          5         COLON:
      0019CC CD 19 A5         [ 4] 4073         call INITOFS       
      0019CF CD 12 F9         [ 4] 4074         CALL   TOKEN
      0019D2 CD 18 3B         [ 4] 4075         CALL   SNAME
      0019D5 CC 19 36         [ 2] 4076         JP     RBRAC
                                   4077 
                                   4078 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4079 ;       I:  ( -- )
                                   4080 ;       Start interrupt service 
                                   4081 ;       routine definition
                                   4082 ;       those definition have 
                                   4083 ;       no name.
                                   4084 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019D8                       4085         _HEADER ICOLON,2,"I:"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      0019D8 19 CA                    1         .word LINK 
                           0019DA     2         LINK=.
      0019DA 02                       3         .byte 2  
      0019DB 49 3A                    4         .ascii "I:"
      0019DD                          5         ICOLON:
      0019DD CD 19 A5         [ 4] 4086         call INITOFS 
      0019E0 CC 19 36         [ 2] 4087         jp RBRAC  
                                   4088 
                                   4089 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4090 ;       IMMEDIATE       ( -- )
                                   4091 ;       Make last compiled word
                                   4092 ;       an immediate word.
                                   4093 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      0019E3                       4094         _HEADER IMMED,9,"IMMEDIATE"
      0019E3 19 DA                    1         .word LINK 
                           0019E5     2         LINK=.
      0019E5 09                       3         .byte 9  
      0019E6 49 4D 4D 45 44 49 41     4         .ascii "IMMEDIATE"
             54 45
      0019EF                          5         IMMED:
      0019EF CD 04 8C         [ 4] 4095         CALL	DOLIT
      0019F2 80 00                 4096         .word	(IMEDD<<8)
      0019F4 CD 07 AB         [ 4] 4097 IMM01:  CALL	LAST
      0019F7 CD 05 00         [ 4] 4098         CALL    AT
      0019FA CD 05 00         [ 4] 4099         CALL    AT
      0019FD CD 06 A7         [ 4] 4100         CALL    ORR
      001A00 CD 07 AB         [ 4] 4101         CALL    LAST
      001A03 CD 05 00         [ 4] 4102         CALL    AT
      001A06 CC 04 EE         [ 2] 4103         JP      STORE
                                   4104 
                                   4105 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4106 ;		COMPILE-ONLY  ( -- )
                                   4107 ;		Make last compiled word 
                                   4108 ;		a compile only word.
                                   4109 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A09                       4110         _HEADER COMPONLY,12,"COMPILE-ONLY"
      001A09 19 E5                    1         .word LINK 
                           001A0B     2         LINK=.
      001A0B 0C                       3         .byte 12  
      001A0C 43 4F 4D 50 49 4C 45     4         .ascii "COMPILE-ONLY"
             2D 4F 4E 4C 59
      001A18                          5         COMPONLY:
      001A18 CD 04 8C         [ 4] 4111         CALL     DOLIT
      001A1B 40 00                 4112         .word    (COMPO<<8)
      001A1D CC 19 F4         [ 2] 4113         JP       IMM01
                                   4114 		
                                   4115 ;; Defining words
                                   4116 
                                   4117 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4118 ;       CREATE  ( -- ; <string> )
                                   4119 ;       Compile a new array
                                   4120 ;       without allocating space.
                                   4121 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A20                       4122         _HEADER CREAT,6,"CREATE"
      001A20 1A 0B                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                           001A22     2         LINK=.
      001A22 06                       3         .byte 6  
      001A23 43 52 45 41 54 45        4         .ascii "CREATE"
      001A29                          5         CREAT:
      001A29 CD 12 F9         [ 4] 4123         CALL     TOKEN
      001A2C CD 18 3B         [ 4] 4124         CALL     SNAME
      001A2F CD 18 C2         [ 4] 4125         CALL     OVERT        
      001A32 CD 16 82         [ 4] 4126         CALL     COMPI 
      001A35 06 EC                 4127         .word DOVAR 
      001A37 81               [ 4] 4128         RET
                                   4129 
                                   4130 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4131 ;       VARIABLE  ( -- ; <string> )
                                   4132 ;       Compile a new variable
                                   4133 ;       initialized to 0.
                                   4134 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A38                       4135         _HEADER VARIA,8,"VARIABLE"
      001A38 1A 22                    1         .word LINK 
                           001A3A     2         LINK=.
      001A3A 08                       3         .byte 8  
      001A3B 56 41 52 49 41 42 4C     4         .ascii "VARIABLE"
             45
      001A43                          5         VARIA:
                                   4136 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001A43 CD 0D 05         [ 4] 4137         CALL HERE
      001A46 CD 06 36         [ 4] 4138         CALL DUPP 
      001A49 CD 0B 94         [ 4] 4139         CALL CELLP
      001A4C CD 07 8D         [ 4] 4140         CALL VPP 
      001A4F CD 04 EE         [ 4] 4141         CALL STORE
      001A52 CD 1A 29         [ 4] 4142         CALL CREAT
      001A55 CD 06 36         [ 4] 4143         CALL DUPP
      001A58 CD 16 3D         [ 4] 4144         CALL COMMA
      001A5B CD 0C 2B         [ 4] 4145         CALL ZERO
      001A5E CD 06 46         [ 4] 4146         call SWAPP 
      001A61 CD 04 EE         [ 4] 4147         CALL STORE
      001A64 CD 23 AB         [ 4] 4148         CALL FMOVE ; move definition to FLASH
      001A67 CD 07 E9         [ 4] 4149         CALL QDUP 
      001A6A CD 04 B5         [ 4] 4150         CALL QBRAN 
      001A6D 1A 76                 4151         .word SET_RAMLAST   
      001A6F CD 1E 53         [ 4] 4152         call UPDATVP  ; don't update if variable kept in RAM.
      001A72 CD 24 3F         [ 4] 4153         CALL UPDATPTR
      001A75 81               [ 4] 4154         RET         
      001A76                       4155 SET_RAMLAST: 
      001A76 CD 07 AB         [ 4] 4156         CALL LAST 
      001A79 CD 05 00         [ 4] 4157         CALL AT 
      001A7C CD 07 BE         [ 4] 4158         CALL RAMLAST 
      001A7F CC 04 EE         [ 2] 4159         JP STORE  
                                   4160 
                                   4161 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4162 ;       CONSTANT  ( n -- ; <string> )
                                   4163 ;       Compile a new constant 
                                   4164 ;       n CONSTANT name 
                                   4165 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001A82                       4166         _HEADER CONSTANT,8,"CONSTANT"
      001A82 1A 3A                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                           001A84     2         LINK=.
      001A84 08                       3         .byte 8  
      001A85 43 4F 4E 53 54 41 4E     4         .ascii "CONSTANT"
             54
      001A8D                          5         CONSTANT:
      001A8D CD 12 F9         [ 4] 4167         CALL TOKEN
      001A90 CD 18 3B         [ 4] 4168         CALL SNAME 
      001A93 CD 18 C2         [ 4] 4169         CALL OVERT 
      001A96 CD 16 82         [ 4] 4170         CALL COMPI 
      001A99 1A AD                 4171         .word DOCONST
      001A9B CD 16 3D         [ 4] 4172         CALL COMMA 
      001A9E CD 23 AB         [ 4] 4173         CALL FMOVE
      001AA1 CD 07 E9         [ 4] 4174         CALL QDUP 
      001AA4 CD 04 B5         [ 4] 4175         CALL QBRAN 
      001AA7 1A 76                 4176         .word SET_RAMLAST  
      001AA9 CD 24 3F         [ 4] 4177         CALL UPDATPTR  
      001AAC 81               [ 4] 4178 1$:     RET          
                                   4179 
                                   4180 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4181 ; CONSTANT runtime semantic 
                                   4182 ; doCONST  ( -- n )
                                   4183 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4184 ;       _HEADER DOCONST,7,"DOCONST"
      001AAD                       4185 DOCONST:
      001AAD 1D 00 02         [ 2] 4186         subw x,#CELLL
      001AB0 90 85            [ 2] 4187         popw y 
      001AB2 90 FE            [ 2] 4188         ldw y,(y) 
      001AB4 FF               [ 2] 4189         ldw (x),y 
      001AB5 81               [ 4] 4190         ret 
                                   4191 
                                   4192 ;----------------------------------
                                   4193 ; create double constant 
                                   4194 ; 2CONSTANT ( d -- ; <string> )
                                   4195 ;----------------------------------
      001AB6                       4196         _HEADER DCONST,9,"2CONSTANT"
      001AB6 1A 84                    1         .word LINK 
                           001AB8     2         LINK=.
      001AB8 09                       3         .byte 9  
      001AB9 32 43 4F 4E 53 54 41     4         .ascii "2CONSTANT"
             4E 54
      001AC2                          5         DCONST:
      001AC2 CD 12 F9         [ 4] 4197         CALL TOKEN
      001AC5 CD 18 3B         [ 4] 4198         CALL SNAME 
      001AC8 CD 18 C2         [ 4] 4199         CALL OVERT 
      001ACB CD 16 82         [ 4] 4200         CALL COMPI 
      001ACE 1A E5                 4201         .word DO_DCONST
      001AD0 CD 16 3D         [ 4] 4202         CALL COMMA
      001AD3 CD 16 3D         [ 4] 4203         CALL COMMA  
      001AD6 CD 23 AB         [ 4] 4204         CALL FMOVE
      001AD9 CD 07 E9         [ 4] 4205         CALL QDUP 
      001ADC CD 04 B5         [ 4] 4206         CALL QBRAN 
      001ADF 1A 76                 4207         .word SET_RAMLAST  
      001AE1 CD 24 3F         [ 4] 4208         CALL UPDATPTR  
      001AE4 81               [ 4] 4209 1$:     RET          
                                   4210     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                   4211 ;----------------------------------
                                   4212 ; runtime for DCONST 
                                   4213 ; stack double constant 
                                   4214 ; DO-DCONST ( -- d )
                                   4215 ;-----------------------------------
                                   4216 ;       _HEADER DO_DCONST,9,"DO-DCONST"
      001AE5                       4217 DO_DCONST:
      001AE5 90 85            [ 2] 4218     popw y 
      001AE7 90 BF 26         [ 2] 4219     ldw YTEMP,y 
      001AEA 1D 00 04         [ 2] 4220     subw x,#2*CELLL 
      001AED 90 FE            [ 2] 4221     ldw y,(y)
      001AEF FF               [ 2] 4222     ldw (x),y 
      001AF0 90 BE 26         [ 2] 4223     ldw y,YTEMP 
      001AF3 90 EE 02         [ 2] 4224     ldw y,(2,y)
      001AF6 EF 02            [ 2] 4225     ldw (2,x),y 
      001AF8 81               [ 4] 4226     ret 
                                   4227 
                                   4228 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4229 ;;          TOOLS 
                                   4230 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4231 
                                   4232 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4233 ;       _TYPE   ( b u -- )
                                   4234 ;       Display a string. Filter
                                   4235 ;       non-printing characters.
                                   4236 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001AF9                       4237         _HEADER UTYPE,5,"_TYPE"
      001AF9 1A B8                    1         .word LINK 
                           001AFB     2         LINK=.
      001AFB 05                       3         .byte 5  
      001AFC 5F 54 59 50 45           4         .ascii "_TYPE"
      001B01                          5         UTYPE:
      001B01 CD 05 FF         [ 4] 4238         CALL     TOR     ;start count down loop
      001B04 20 0F            [ 2] 4239         JRA     UTYP2   ;skip first pass
      001B06 CD 06 36         [ 4] 4240 UTYP1:  CALL     DUPP
      001B09 CD 05 1E         [ 4] 4241         CALL     CAT
      001B0C CD 0C 55         [ 4] 4242         CALL     TCHAR
      001B0F CD 04 53         [ 4] 4243         CALL     EMIT    ;display only printable
      001B12 CD 0B BF         [ 4] 4244         CALL     ONEP    ;increment address
      001B15 CD 04 A0         [ 4] 4245 UTYP2:  CALL     DONXT
      001B18 1B 06                 4246         .word      UTYP1   ;loop till done
      001B1A CC 06 2C         [ 2] 4247         JP     DROP
                                   4248 
                                   4249 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4250 ;       dm+     ( a u -- a )
                                   4251 ;       Dump u bytes from ,
                                   4252 ;       leaving a+u on  stack.
                                   4253 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B1D                       4254         _HEADER DUMPP,3,"DM+"
      001B1D 1A FB                    1         .word LINK 
                           001B1F     2         LINK=.
      001B1F 03                       3         .byte 3  
      001B20 44 4D 2B                 4         .ascii "DM+"
      001B23                          5         DUMPP:
      001B23 CD 06 5E         [ 4] 4255         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001B26 CD 04 8C         [ 4] 4256         CALL     DOLIT
      001B29 00 04                 4257         .word      4
      001B2B CD 10 F0         [ 4] 4258         CALL     UDOTR   ;display address
      001B2E CD 10 57         [ 4] 4259         CALL     SPACE
      001B31 CD 05 FF         [ 4] 4260         CALL     TOR     ;start count down loop
      001B34 20 11            [ 2] 4261         JRA     PDUM2   ;skip first pass
      001B36 CD 06 36         [ 4] 4262 PDUM1:  CALL     DUPP
      001B39 CD 05 1E         [ 4] 4263         CALL     CAT
      001B3C CD 04 8C         [ 4] 4264         CALL     DOLIT
      001B3F 00 03                 4265         .word      3
      001B41 CD 10 F0         [ 4] 4266         CALL     UDOTR   ;display numeric data
      001B44 CD 0B BF         [ 4] 4267         CALL     ONEP    ;increment address
      001B47 CD 04 A0         [ 4] 4268 PDUM2:  CALL     DONXT
      001B4A 1B 36                 4269         .word      PDUM1   ;loop till done
      001B4C 81               [ 4] 4270         RET
                                   4271 
                                   4272 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4273 ;       DUMP    ( a u -- )
                                   4274 ;       Dump u bytes from a,
                                   4275 ;       in a formatted manner.
                                   4276 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B4D                       4277         _HEADER DUMP,4,"DUMP"
      001B4D 1B 1F                    1         .word LINK 
                           001B4F     2         LINK=.
      001B4F 04                       3         .byte 4  
      001B50 44 55 4D 50              4         .ascii "DUMP"
      001B54                          5         DUMP:
      001B54 CD 06 FC         [ 4] 4278         CALL     BASE
      001B57 CD 05 00         [ 4] 4279         CALL     AT
      001B5A CD 05 FF         [ 4] 4280         CALL     TOR
      001B5D CD 0E CE         [ 4] 4281         CALL     HEX     ;save radix, set hex
      001B60 CD 04 8C         [ 4] 4282         CALL     DOLIT
      001B63 00 10                 4283         .word      16
      001B65 CD 0A E5         [ 4] 4284         CALL     SLASH   ;change count to lines
      001B68 CD 05 FF         [ 4] 4285         CALL     TOR     ;start count down loop
      001B6B CD 10 9A         [ 4] 4286 DUMP1:  CALL     CR
      001B6E CD 04 8C         [ 4] 4287         CALL     DOLIT
      001B71 00 10                 4288         .word      16
      001B73 CD 08 44         [ 4] 4289         CALL     DDUP
      001B76 CD 1B 23         [ 4] 4290         CALL     DUMPP   ;display numeric
      001B79 CD 07 FA         [ 4] 4291         CALL     ROT
      001B7C CD 07 FA         [ 4] 4292         CALL     ROT
      001B7F CD 10 57         [ 4] 4293         CALL     SPACE
      001B82 CD 10 57         [ 4] 4294         CALL     SPACE
      001B85 CD 1B 01         [ 4] 4295         CALL     UTYPE   ;display printable characters
      001B88 CD 04 A0         [ 4] 4296         CALL     DONXT
      001B8B 1B 6B                 4297         .word      DUMP1   ;loop till done
      001B8D CD 06 2C         [ 4] 4298 DUMP3:  CALL     DROP
      001B90 CD 05 51         [ 4] 4299         CALL     RFROM
      001B93 CD 06 FC         [ 4] 4300         CALL     BASE
      001B96 CC 04 EE         [ 2] 4301         JP     STORE   ;restore radix
                                   4302 
                                   4303 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4304 ;       .S      ( ... -- ... )
                                   4305 ;        Display  contents of stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                   4306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001B99                       4307         _HEADER DOTS,2,".S"
      001B99 1B 4F                    1         .word LINK 
                           001B9B     2         LINK=.
      001B9B 02                       3         .byte 2  
      001B9C 2E 53                    4         .ascii ".S"
      001B9E                          5         DOTS:
      001B9E CD 10 9A         [ 4] 4308         CALL     CR
      001BA1 CD 0C 6D         [ 4] 4309         CALL     DEPTH   ;stack depth
      001BA4 CD 05 FF         [ 4] 4310         CALL     TOR     ;start count down loop
      001BA7 20 09            [ 2] 4311         JRA     DOTS2   ;skip first pass
      001BA9 CD 05 62         [ 4] 4312 DOTS1:  CALL     RAT
      001BAC CD 0C 84         [ 4] 4313 	CALL     PICK
      001BAF CD 11 40         [ 4] 4314         CALL     DOT     ;index stack, display contents
      001BB2 CD 04 A0         [ 4] 4315 DOTS2:  CALL     DONXT
      001BB5 1B A9                 4316         .word      DOTS1   ;loop till done
      001BB7 CD 10 C7         [ 4] 4317         CALL     DOTQP
      001BBA 05                    4318         .byte      5
      001BBB 20 3C 73 70 20        4319         .ascii     " <sp "
      001BC0 81               [ 4] 4320         RET
                                   4321 
                                   4322 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4323 ;       >NAME   ( ca -- na | F )
                                   4324 ;       Convert code address
                                   4325 ;       to a name address.
                                   4326 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BC1                       4327         _HEADER TNAME,5,">NAME"
      001BC1 1B 9B                    1         .word LINK 
                           001BC3     2         LINK=.
      001BC3 05                       3         .byte 5  
      001BC4 3E 4E 41 4D 45           4         .ascii ">NAME"
      001BC9                          5         TNAME:
      001BC9 CD 07 7F         [ 4] 4328         CALL     CNTXT   ;vocabulary link
      001BCC CD 05 00         [ 4] 4329 TNAM2:  CALL     AT
      001BCF CD 06 36         [ 4] 4330         CALL     DUPP    ;?last word in a vocabulary
      001BD2 CD 04 B5         [ 4] 4331         CALL     QBRAN
      001BD5 1B F0                 4332         .word      TNAM4
      001BD7 CD 08 44         [ 4] 4333         CALL     DDUP
      001BDA CD 13 07         [ 4] 4334         CALL     NAMET
      001BDD CD 06 BC         [ 4] 4335         CALL     XORR    ;compare
      001BE0 CD 04 B5         [ 4] 4336         CALL     QBRAN
      001BE3 1B EA                 4337         .word      TNAM3
      001BE5 CD 0B A3         [ 4] 4338         CALL     CELLM   ;continue with next word
      001BE8 20 E2            [ 2] 4339         JRA     TNAM2
      001BEA CD 06 46         [ 4] 4340 TNAM3:  CALL     SWAPP
      001BED CC 06 2C         [ 2] 4341         JP     DROP
      001BF0 CD 08 39         [ 4] 4342 TNAM4:  CALL     DDROP
      001BF3 CC 0C 2B         [ 2] 4343         JP     ZERO
                                   4344 
                                   4345 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4346 ;       .ID     ( na -- )
                                   4347 ;        Display  name at address.
                                   4348 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001BF6                       4349         _HEADER DOTID,3,".ID"
      001BF6 1B C3                    1         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                           001BF8     2         LINK=.
      001BF8 03                       3         .byte 3  
      001BF9 2E 49 44                 4         .ascii ".ID"
      001BFC                          5         DOTID:
      001BFC CD 07 E9         [ 4] 4350         CALL     QDUP    ;if zero no name
      001BFF CD 04 B5         [ 4] 4351         CALL     QBRAN
      001C02 1C 12                 4352         .word      DOTI1
      001C04 CD 0C EE         [ 4] 4353         CALL     COUNT
      001C07 CD 04 8C         [ 4] 4354         CALL     DOLIT
      001C0A 00 1F                 4355         .word      0x1F
      001C0C CD 06 93         [ 4] 4356         CALL     ANDD    ;mask lexicon bits
      001C0F CC 1B 01         [ 2] 4357         JP     UTYPE
      001C12 CD 10 C7         [ 4] 4358 DOTI1:  CALL     DOTQP
      001C15 09                    4359         .byte      9
      001C16 20 6E 6F 4E 61 6D 65  4360         .ascii     " noName"
      001C1D 81               [ 4] 4361         RET
                                   4362 
                           000000  4363 WANT_SEE=0
                           000000  4364 .if WANT_SEE 
                                   4365 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4366 ;       SEE     ( -- ; <string> )
                                   4367 ;       A simple decompiler.
                                   4368 ;       Updated for byte machines.
                                   4369 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4370         _HEADER SEE,3,"SEE"
                                   4371         CALL     TICK    ;starting address
                                   4372         CALL     CR
                                   4373         CALL     ONEM
                                   4374 SEE1:   CALL     ONEP
                                   4375         CALL     DUPP
                                   4376         CALL     AT
                                   4377         CALL     DUPP
                                   4378         CALL     QBRAN
                                   4379         .word    SEE2
                                   4380         CALL     TNAME   ;?is it a name
                                   4381 SEE2:   CALL     QDUP    ;name address or zero
                                   4382         CALL     QBRAN
                                   4383         .word    SEE3
                                   4384         CALL     SPACE
                                   4385         CALL     DOTID   ;display name
                                   4386         CALL     ONEP
                                   4387         JRA      SEE4
                                   4388 SEE3:   CALL     DUPP
                                   4389         CALL     CAT
                                   4390         CALL     UDOT    ;display number
                                   4391 SEE4:   CALL     NUFQ    ;user control
                                   4392         CALL     QBRAN
                                   4393         .word    SEE1
                                   4394         JP     DROP
                                   4395 .endif ; WANT_SEE 
                                   4396 
                                   4397 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4398 ;       WORDS   ( -- )
                                   4399 ;       Display names in vocabulary.
                                   4400 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001C1E                       4401         _HEADER WORDS,5,"WORDS"
      001C1E 1B F8                    1         .word LINK 
                           001C20     2         LINK=.
      001C20 05                       3         .byte 5  
      001C21 57 4F 52 44 53           4         .ascii "WORDS"
      001C26                          5         WORDS:
      001C26 CD 10 9A         [ 4] 4402         CALL     CR
      001C29 CD 07 7F         [ 4] 4403         CALL     CNTXT   ;only in context
      001C2C CD 05 00         [ 4] 4404 WORS1:  CALL     AT
      001C2F CD 07 E9         [ 4] 4405         CALL     QDUP    ;?at end of list
      001C32 CD 04 B5         [ 4] 4406         CALL     QBRAN
      001C35 1C 48                 4407         .word      WORS2
      001C37 CD 06 36         [ 4] 4408         CALL     DUPP
      001C3A CD 10 57         [ 4] 4409         CALL     SPACE
      001C3D CD 1B FC         [ 4] 4410         CALL     DOTID   ;display a name
      001C40 CD 0B A3         [ 4] 4411         CALL     CELLM
      001C43 CD 04 D1         [ 4] 4412         CALL     BRAN
      001C46 1C 2C                 4413         .word      WORS1
      001C48 81               [ 4] 4414 WORS2:  RET
                                   4415 
                                   4416         
                                   4417 ;; Hardware reset
                                   4418 
                                   4419 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4420 ;  COPYRIGTH
                                   4421 ; print copyright notice 
                                   4422 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C49                       4423 COPYRIGHT:
      001C49 CD 10 C7         [ 4] 4424     CALL DOTQP 
      001C4C 21                    4425     .byte 33 
      001C4D 4A 61 63 71 75 65 73  4426     .ascii "Jacques Deschenes, Copyright 2021"
             20 44 65 73 63 68 65
             6E 65 73 2C 20 43 6F
             70 79 72 69 67 68 74
             20 32 30 32 31
      001C6E CC 10 9A         [ 2] 4427     JP CR 
                                   4428 
                                   4429 
                                   4430 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4431 ;  PRT_LICENSE 
                                   4432 ;  print GPLV3 licence 
                                   4433 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001C71                       4434 PRT_LICENSE:
      001C71 CD 10 C7         [ 4] 4435         CALL DOTQP 
      001C74 0F                    4436         .byte  15 
      001C75 4C 49 43 45 4E 53 45  4437         .ascii "LICENSE GPLV3\r\n"
             20 47 50 4C 56 33 0D
             0A
      001C84 81               [ 4] 4438         RET 
                                   4439 
                                   4440 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4441 ;    PRINT_VERSION ( c1 c2 -- )
                                   4442 ;    c2 minor 
                                   4443 ;    c1 major 
                                   4444 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001C85                       4445 PRINT_VERSION:
      001C85 CD 10 C7         [ 4] 4446      CALL DOTQP 
      001C88 09                    4447      .byte 9
      001C89 20 76 65 72 73 69 6F  4448      .ascii " version "
             6E 20
      001C92 CD 0E 33         [ 4] 4449      CALL BDIGS 
      001C95 CD 0E 6D         [ 4] 4450      CALL DIGS 
      001C98 CD 0E 6D         [ 4] 4451      CALL DIGS 
      001C9B                       4452      _DOLIT '.' 
      001C9B CD 04 8C         [ 4]    1     CALL DOLIT 
      001C9E 00 2E                    2     .word '.' 
      001CA0 CD 0E 43         [ 4] 4453      CALL HOLD 
      001CA3                       4454      _DROP 
      001CA3 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      001CA6 CD 0E 6D         [ 4] 4455      CALL DIGS 
      001CA9 CD 0E 98         [ 4] 4456      CALL EDIGS 
      001CAC CC 10 81         [ 2] 4457      JP TYPES 
                                   4458       
                                   4459 
                                   4460 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4461 ;       hi      ( -- )
                                   4462 ;       Display sign-on message.
                                   4463 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CAF                       4464         _HEADER HI,2,"HI"
      001CAF 1C 20                    1         .word LINK 
                           001CB1     2         LINK=.
      001CB1 02                       3         .byte 2  
      001CB2 48 49                    4         .ascii "HI"
      001CB4                          5         HI:
      001CB4 CD 10 9A         [ 4] 4465         CALL     CR
      001CB7 CD 10 C7         [ 4] 4466         CALL     DOTQP   
      001CBA 0A                    4467         .byte      10
      001CBB 73 74 6D 38 65 46 6F  4468         .ascii     "stm8eForth"
             72 74 68
      001CC5                       4469 	_DOLIT VER 
      001CC5 CD 04 8C         [ 4]    1     CALL DOLIT 
      001CC8 00 04                    2     .word VER 
      001CCA                       4470         _DOLIT EXT 
      001CCA CD 04 8C         [ 4]    1     CALL DOLIT 
      001CCD 00 00                    2     .word EXT 
      001CCF CD 1C 85         [ 4] 4471         CALL PRINT_VERSION 
      001CD2 CD 10 C7         [ 4] 4472         CALL    DOTQP
                           000001  4473 .if NUCLEO_8S208RB         
      001CD5 12                    4474         .byte 18
      001CD6 20 6F 6E 20 4E 55 43  4475         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                                   4476 .endif
                           000000  4477 .if NUCLEO_8S207K8 
                                   4478         .byte 18 
                                   4479         .ascii  " on NUCLEO-8S207K8" 
                                   4480 .endif 
                           000000  4481 .if DISCOVERY
                                   4482         .byte 19
                                   4483         .ascii  " on STM8S-DISCOVERY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4484 .endif
                           000000  4485 .if DOORBELL
                                   4486         .byte 16
                                   4487         .ascii " on stm8s105k6b6"
                                   4488 .endif
      001CE8 CC 10 9A         [ 2] 4489         JP     CR
                                   4490 
                           000000  4491 WANT_DEBUG=0
                           000000  4492 .if WANT_DEBUG 
                                   4493 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4494 ;       DEBUG      ( -- )
                                   4495 ;       Display sign-on message.
                                   4496 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4497         _HEADER DEBUG,5,"DEBUG"
                                   4498 	CALL DOLIT
                                   4499 	.word 0x65
                                   4500 	CALL EMIT
                                   4501 	CALL ZERO
                                   4502  	CALL ZLESS 
                                   4503 	CALL DOLIT
                                   4504 	.word 0xFFFE
                                   4505 	CALL ZLESS 
                                   4506 	CALL UPLUS 
                                   4507  	_DROP 
                                   4508 	CALL DOLIT
                                   4509 	.word 3
                                   4510 	CALL UPLUS 
                                   4511 	CALL UPLUS 
                                   4512  	_DROP
                                   4513 	CALL DOLIT
                                   4514 	.word 0x43
                                   4515 	CALL UPLUS 
                                   4516  	_DROP
                                   4517 	CALL EMIT
                                   4518 	CALL DOLIT
                                   4519 	.word 0x4F
                                   4520 	CALL DOLIT
                                   4521 	.word 0x6F
                                   4522  	CALL XORR
                                   4523 	CALL DOLIT
                                   4524 	.word 0xF0
                                   4525  	CALL ANDD
                                   4526 	CALL DOLIT
                                   4527 	.word 0x4F
                                   4528  	CALL ORR
                                   4529 	CALL EMIT
                                   4530 	CALL DOLIT
                                   4531 	.word 8
                                   4532 	CALL DOLIT
                                   4533 	.word 6
                                   4534  	CALL SWAPP
                                   4535 	CALL OVER
                                   4536 	CALL XORR
                                   4537 	CALL DOLIT
                                   4538 	.word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4539 	CALL ANDD 
                                   4540 	CALL ANDD
                                   4541 	CALL DOLIT
                                   4542 	.word 0x70
                                   4543 	CALL UPLUS 
                                   4544 	_DROP
                                   4545 	CALL EMIT
                                   4546 	CALL ZERO
                                   4547 	CALL QBRAN
                                   4548 	.word DEBUG1
                                   4549 	CALL DOLIT
                                   4550 	.word 0x3F
                                   4551 DEBUG1:
                                   4552 	CALL DOLIT
                                   4553 	.word 0xFFFF
                                   4554 	CALL QBRAN
                                   4555 	.word DEBUG2
                                   4556 	CALL DOLIT
                                   4557 	.word 0x74
                                   4558 	CALL BRAN
                                   4559 	.word DEBUG3
                                   4560 DEBUG2:
                                   4561 	CALL DOLIT
                                   4562 	.word 0x21
                                   4563 DEBUG3:
                                   4564 	CALL EMIT
                                   4565 	CALL DOLIT
                                   4566 	.word 0x68
                                   4567 	CALL DOLIT
                                   4568 	.word 0x80
                                   4569 	CALL STORE
                                   4570 	CALL DOLIT
                                   4571 	.word 0x80
                                   4572 	CALL AT
                                   4573 	CALL EMIT
                                   4574 	CALL DOLIT
                                   4575 	.word 0x4D
                                   4576 	CALL TOR
                                   4577 	CALL RAT
                                   4578 	CALL RFROM
                                   4579 	CALL ANDD
                                   4580 	CALL EMIT
                                   4581 	CALL DOLIT
                                   4582 	.word 0x61
                                   4583 	CALL DOLIT
                                   4584 	.word 0xA
                                   4585 	CALL TOR
                                   4586 DEBUG4:
                                   4587 	CALL ONE
                                   4588 	CALL UPLUS 
                                   4589 	_DROP
                                   4590 	CALL DONXT
                                   4591 	.word DEBUG4
                                   4592 	CALL EMIT
                                   4593 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4594 	.word 0x656D
                                   4595 	CALL DOLIT
                                   4596 	.word 0x100
                                   4597 	CALL UMSTA
                                   4598 	CALL SWAPP
                                   4599 	CALL DOLIT
                                   4600 	.word 0x100
                                   4601 	CALL UMSTA
                                   4602 	CALL SWAPP 
                                   4603 	_DROP
                                   4604 	CALL EMIT
                                   4605 	CALL EMIT
                                   4606 	CALL DOLIT
                                   4607 	.word 0x2043
                                   4608 	CALL ZERO
                                   4609 	CALL DOLIT
                                   4610 	.word 0x100
                                   4611 	CALL UMMOD
                                   4612 	CALL EMIT
                                   4613 	CALL EMIT
                                   4614 	;JP ORIG
                                   4615 	RET
                                   4616 .endif ; WANT_DEBUG 
                                   4617 
                                   4618 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4619 ;       'BOOT   ( -- a )
                                   4620 ;       The application startup vector.
                                   4621 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CEB                       4622         _HEADER TBOOT,5,"'BOOT"
      001CEB 1C B1                    1         .word LINK 
                           001CED     2         LINK=.
      001CED 05                       3         .byte 5  
      001CEE 27 42 4F 4F 54           4         .ascii "'BOOT"
      001CF3                          5         TBOOT:
      001CF3 CD 06 EC         [ 4] 4623         CALL     DOVAR
      001CF6 40 02                 4624         .word    APP_RUN      ;application to boot
                                   4625 
                                   4626 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   4627 ;       COLD    ( -- )
                                   4628 ;       The hilevel cold start s=ence.
                                   4629 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      001CF8                       4630         _HEADER COLD,4,"COLD"
      001CF8 1C ED                    1         .word LINK 
                           001CFA     2         LINK=.
      001CFA 04                       3         .byte 4  
      001CFB 43 4F 4C 44              4         .ascii "COLD"
      001CFF                          5         COLD:
                           000000  4631 .if WANT_DEBUG
                                   4632         CALL DEBUG
                                   4633 .endif ; WANT_DEBUG
      001CFF CD 04 8C         [ 4] 4634 COLD1:  CALL     DOLIT
      001D02 00 2B                 4635         .word      UZERO
      001D04 CD 04 8C         [ 4] 4636 	CALL     DOLIT
      001D07 00 06                 4637         .word      UPP
      001D09 CD 04 8C         [ 4] 4638         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      001D0C 00 1C                 4639 	.word      UEND-UZERO
      001D0E CD 0D 52         [ 4] 4640         CALL     CMOVE   ;initialize user area
      001D11 90 CE 40 02      [ 2] 4641         ldw y,APP_RUN 
      001D15 26 16            [ 1] 4642         jrne 1$
      001D17                       4643 0$:
                                   4644 ; there is no autorun application
                                   4645 ; initialize EEPROM variables to default  
      001D17 1D 00 02         [ 2] 4646         subw x,#CELLL 
      001D1A 90 AE 1C B4      [ 2] 4647         ldw y,#HI  
      001D1E FF               [ 2] 4648         ldw (x),y
      001D1F CD 1E 2B         [ 4] 4649         call UPDATRUN
      001D22 CD 1E 13         [ 4] 4650         call UPDATLAST 
      001D25 CD 1E 3C         [ 4] 4651         call UPDATCP 
      001D28 CD 1E 53         [ 4] 4652         call UPDATVP
      001D2B 20 3D            [ 2] 4653         jra 6$ 
      001D2D                       4654 1$:        
                                   4655 ; if no app at app_space initialize EEPROM with ca of 'HI'  
      001D2D 90 CE 26 00      [ 2] 4656         ldw y,app_space
      001D31 27 E4            [ 1] 4657         jreq 0$ 
                                   4658 ; update LAST with APP_LAST 
                                   4659 ; if APP_LAST > LAST else do the opposite
      001D33 90 CE 40 00      [ 2] 4660         ldw y,APP_LAST 
      001D37 90 B3 1C         [ 2] 4661         cpw y,ULAST 
      001D3A 22 0B            [ 1] 4662         jrugt 3$ 
                                   4663 ; save LAST at APP_LAST  
      001D3C CD 1E 13         [ 4] 4664         call UPDATLAST 
      001D3F 20 06            [ 2] 4665         jra 3$
      001D41                       4666 2$: ; update LAST with APP_LAST 
      001D41 90 BF 1C         [ 2] 4667         ldw ULAST,y
      001D44 90 BF 16         [ 2] 4668         ldw UCNTXT,y
      001D47                       4669 3$:  
                                   4670 ; update APP_CP if < app_space 
      001D47 90 CE 40 04      [ 2] 4671         ldw y,APP_CP  
      001D4B 90 B3 1A         [ 2] 4672         cpw y,UCP   
      001D4E 24 06            [ 1] 4673         jruge 4$ 
      001D50 CD 1E 3C         [ 4] 4674         call UPDATCP
      001D53 90 BE 1A         [ 2] 4675         ldw y,UCP   
      001D56                       4676 4$:
      001D56 90 BF 1A         [ 2] 4677         ldw UCP,y                 
                                   4678 ; update UVP with APP_VP  
                                   4679 ; if APP_VP>UVP else do the opposite 
      001D59 90 CE 40 06      [ 2] 4680         ldw y,APP_VP 
      001D5D 90 B3 18         [ 2] 4681         cpw y,UVP 
      001D60 22 05            [ 1] 4682         jrugt 5$
      001D62 CD 1E 53         [ 4] 4683         call UPDATVP 
      001D65 20 03            [ 2] 4684         jra 6$
      001D67                       4685 5$: ; update UVP with APP_VP 
      001D67 90 BF 18         [ 2] 4686         ldw UVP,y 
      001D6A                       4687 6$:      
      001D6A CD 15 E7         [ 4] 4688         CALL     PRESE   ;initialize data stack and TIB
      001D6D CD 1C F3         [ 4] 4689         CALL     TBOOT
      001D70 CD 0D 3B         [ 4] 4690         CALL     ATEXE   ;application boot
      001D73 CD 18 C2         [ 4] 4691         CALL     OVERT
      001D76 CC 16 04         [ 2] 4692         JP     QUIT    ;start interpretation
                                   4693 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



                                   4694 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4695         .include "flash.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     22 ;  routines to write to FLASH, EEPROM 
                                     23 ;  and OPTION 
                                     24 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     25 
                                     26 
                                     27 ;--------------------------------
                                     28 ; initialize FPTR 
                                     29 ; FP!  ( ud -- )
                                     30 ;---------------------------------
      001D79 1C FA                   31     .word LINK 
                           001D7B    32     LINK=.
      001D7B 03                      33     .byte 3 
      001D7C 46 50 21                34     .ascii "FP!"
      001D7F                         35 FPSTOR:
      001D7F 90 93            [ 1]   36     ldw y,x
      001D81 90 FE            [ 2]   37     ldw y,(y)
      001D83 90 9F            [ 1]   38     ld a,yl 
      001D85 B7 34            [ 1]   39     ld FPTR,a 
      001D87 1C 00 02         [ 2]   40     addw x,#CELLL 
      001D8A 90 93            [ 1]   41     ldw y,x 
      001D8C 90 FE            [ 2]   42     ldw y,(y)
      001D8E 90 BF 35         [ 2]   43     ldw PTR16,y
      001D91 1C 00 02         [ 2]   44     addw x,#CELLL 
      001D94 81               [ 4]   45     ret 
                                     46 
                                     47 ;-----------------------------------
                                     48 ; return EEPROM base address 
                                     49 ; as a double 
                                     50 ;  EEPROM  ( -- ud )
                                     51 ;-----------------------------------
      001D95 1D 7B                   52     .word LINK 
                           001D97    53 LINK=.
      001D97 06                      54     .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



      001D98 45 45 50 52 4F 4D       55     .ascii "EEPROM"
      001D9E                         56 EEPROM: 
      001D9E 90 AE 40 00      [ 2]   57     ldw y,#EEPROM_BASE
      001DA2 1D 00 04         [ 2]   58     subw x,#2*CELLL 
      001DA5 EF 02            [ 2]   59     ldw (2,x),y 
      001DA7 90 5F            [ 1]   60     clrw y 
      001DA9 FF               [ 2]   61     ldw (x),y 
      001DAA 81               [ 4]   62     ret
                                     63 
                                     64 ;---------------------------------
                                     65 ; return APP_LAST pointer as double
                                     66 ; EEP-LAST ( -- ud )
                                     67 ;---------------------------------
      001DAB 1D 97                   68 	.word LINK 
                           001DAD    69 	LINK=.
      001DAD 08                      70 	.byte 8 
      001DAE 45 45 50 2D 4C 41 53    71 	.ascii "EEP-LAST"
             54
      001DB6                         72 EEPLAST:
      001DB6 1D 00 04         [ 2]   73 	subw x,#2*CELLL 
      001DB9 90 AE 40 00      [ 2]   74 	ldw y,#APP_LAST 
      001DBD EF 02            [ 2]   75 	ldw (2,x),y 
      001DBF 90 5F            [ 1]   76 	clrw y 
      001DC1 FF               [ 2]   77 	ldw (x),y 
      001DC2 81               [ 4]   78 	ret 
                                     79 
                                     80 ;----------------------------------
                                     81 ; return APP_RUN pointer as double	
                                     82 ; EEP-RUN ( -- ud )
                                     83 ;-----------------------------------
      001DC3 1D AD                   84 	.word LINK 
                           001DC5    85 	LINK=.
      001DC5 07                      86 	.byte 7
      001DC6 45 45 50 2D 52 55 4E    87 	.ascii "EEP-RUN"
      001DCD                         88 EEPRUN:
      001DCD 1D 00 04         [ 2]   89 	subw x,#2*CELLL 
      001DD0 90 AE 40 02      [ 2]   90 	ldw y,#APP_RUN 
      001DD4 EF 02            [ 2]   91 	ldw (2,x),y 
      001DD6 90 5F            [ 1]   92 	clrw y 
      001DD8 FF               [ 2]   93 	ldw (x),y 
      001DD9 81               [ 4]   94 	ret 
                                     95 
                                     96 ;------------------------------------
                                     97 ; return APP_CP pointer as double 
                                     98 ; EEP-CP ( -- ud )
                                     99 ;------------------------------------
      001DDA 1D C5                  100 	.word LINK
                           001DDC   101 	LINK=.
      001DDC 06                     102 	.byte 6 
      001DDD 45 45 50 2D 43 50      103 	.ascii "EEP-CP"
      001DE3                        104 EEPCP:
      001DE3 1D 00 04         [ 2]  105 	subw x,#2*CELLL 
      001DE6 90 AE 40 04      [ 2]  106 	ldw y,#APP_CP  
      001DEA EF 02            [ 2]  107 	ldw (2,x),y 
      001DEC 90 5F            [ 1]  108 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      001DEE FF               [ 2]  109 	ldw (x),y 
      001DEF 81               [ 4]  110 	ret 
                                    111 
                                    112 ;------------------------------------
                                    113 ; return APP_VP pointer as double 
                                    114 ; EEP-VP ( -- ud )
                                    115 ;-------------------------------------
      001DF0 1D DC                  116 	.word LINK
                           001DF2   117 	LINK=.
      001DF2 06                     118 	.byte 6
      001DF3 45 45 50 2D 56 50      119 	.ascii "EEP-VP"
      001DF9                        120 EEPVP:
      001DF9 1D 00 04         [ 2]  121 	subw x,#2*CELLL 
      001DFC 90 AE 40 06      [ 2]  122 	ldw y,#APP_VP  
      001E00 EF 02            [ 2]  123 	ldw (2,x),y 
      001E02 90 5F            [ 1]  124 	clrw y 
      001E04 FF               [ 2]  125 	ldw (x),y 
      001E05 81               [ 4]  126 	ret 
                                    127 
                                    128 ;----------------------------------
                                    129 ; update APP_LAST with LAST 
                                    130 ; UPDAT-LAST ( -- )
                                    131 ;----------------------------------
      001E06 1D F2                  132 	.word LINK 
                           001E08   133 	LINK=.
      001E08 0A                     134 	.byte 10
      001E09 55 50 44 41 54 2D 4C   135 	.ascii "UPDAT-LAST"
             41 53 54
      001E13                        136 UPDATLAST:
      001E13 CD 07 AB         [ 4]  137 	call LAST
      001E16 CD 05 00         [ 4]  138 	call AT  
      001E19 CD 1D B6         [ 4]  139 	call EEPLAST
      001E1C CC 20 09         [ 2]  140 	jp EESTORE 
                                    141 
                                    142 ;---------------------------------
                                    143 ; update APP_RUN 
                                    144 ; UPDAT-RUN ( a -- )
                                    145 ;---------------------------------
      001E1F 1E 08                  146 	.word LINK
                           001E21   147 	LINK=.
      001E21 09                     148 	.byte 9
      001E22 55 50 44 41 54 2D 52   149 	.ascii "UPDAT-RUN"
             55 4E
      001E2B                        150 UPDATRUN:
      001E2B CD 1D CD         [ 4]  151 	call EEPRUN
      001E2E CC 20 09         [ 2]  152 	jp EESTORE 
                                    153 	
                                    154 ;---------------------------------
                                    155 ; update APP_CP with CP 
                                    156 ; UPDAT-CP ( -- )
                                    157 ;---------------------------------
      001E31 1E 21                  158 	.word LINK 
                           001E33   159 	LINK=.
      001E33 08                     160 	.byte 8 
      001E34 55 50 44 41 54 2D 43   161 	.ascii "UPDAT-CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



             50
      001E3C                        162 UPDATCP:
      001E3C CD 07 9B         [ 4]  163 	call CPP 
      001E3F CD 05 00         [ 4]  164 	call AT 
      001E42 CD 1D E3         [ 4]  165 	call EEPCP 
      001E45 CC 20 09         [ 2]  166 	jp EESTORE 
                                    167 
                                    168 ;----------------------------------
                                    169 ; update APP_VP with VP 
                                    170 ; UPDAT-VP ( -- )
                                    171 ;----------------------------------
      001E48 1E 33                  172 	.word LINK
                           001E4A   173 	LINK=.
      001E4A 08                     174 	.byte 8 
      001E4B 55 50 44 41 54 2D 56   175 	.ascii "UPDAT-VP" 
             50
      001E53                        176 UPDATVP:
      001E53 CD 07 8D         [ 4]  177 	call VPP 
      001E56 CD 05 00         [ 4]  178 	call AT
      001E59 CD 1D F9         [ 4]  179 	call EEPVP 
      001E5C CC 20 09         [ 2]  180 	jp EESTORE
                                    181 	
                           000001   182 .if NUCLEO_8S20X
                                    183 ;----------------------------------
                                    184 ; fetch integer at address over 65535
                                    185 ;  F@   ( ud -- n )
                                    186 ;----------------------------------
      001E5F 1E 4A                  187     .word LINK 
                           001E61   188 LINK=.
      001E61 02                     189     .byte 2
      001E62 46 40                  190     .ascii "F@"
      001E64                        191 FARAT:
      001E64 CD 1D 7F         [ 4]  192     call FPSTOR
      001E67 CC 1F 2C         [ 2]  193 	jp EE_READ 
                                    194 
                                    195 
                                    196 ;-------------------------------------
                                    197 ; fetch C at address over 65535 
                                    198 ; FC@ ( ud -- c)
                                    199 ;-------------------------------------
      001E6A 1E 61                  200     .word LINK
                           001E6C   201     LINK=.
      001E6C 03                     202     .byte 3 
      001E6D 46 43 40               203     .ascii "FC@" 
      001E70                        204 FARCAT:
      001E70 CD 1D 7F         [ 4]  205     call FPSTOR
      001E73 CC 1F 4E         [ 2]  206 	jp EE_CREAD  
                                    207 .endif ; NUCLEO_8S20X 
                                    208 
                                    209 ;----------------------------------
                                    210 ; UNLOCK EEPROM/OPT for writing/erasing
                                    211 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    212 ;  UNLKEE   ( -- )
                                    213 ;----------------------------------
      001E76 1E 6C                  214     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           001E78   215 LINK=.
      001E78 06                     216     .byte 6 
      001E79 55 4E 4C 4B 45 45      217     .ascii "UNLKEE"
      001E7F                        218 UNLKEE:
      001E7F 35 00 50 5B      [ 1]  219 	mov FLASH_CR2,#0 
      001E83 35 FF 50 5C      [ 1]  220 	mov FLASH_NCR2,#0xFF 
      001E87 35 AE 50 64      [ 1]  221 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001E8B 35 56 50 64      [ 1]  222     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001E8F 72 07 50 5F FB   [ 2]  223 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001E94 81               [ 4]  224 	ret
                                    225 
                                    226 ;----------------------------------
                                    227 ; UNLOCK FLASH for writing/erasing
                                    228 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    229 ; UNLKFL  ( -- )
                                    230 ;----------------------------------
      001E95 1E 78                  231     .word LINK 
                           001E97   232 LINK=. 
      001E97 06                     233     .byte 6 
      001E98 55 4E 4C 4B 46 4C      234     .ascii "UNLKFL"    
      001E9E                        235 UNLKFL:
      001E9E 35 00 50 5B      [ 1]  236 	mov FLASH_CR2,#0 
      001EA2 35 FF 50 5C      [ 1]  237 	mov FLASH_NCR2,#0xFF 
      001EA6 35 56 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001EAA 35 AE 50 62      [ 1]  239 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001EAE 72 03 50 5F FB   [ 2]  240 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001EB3 81               [ 4]  241 	ret
                                    242 
                                    243 ;-----------------------------
                                    244 ; UNLOCK FLASH or EEPROM 
                                    245 ; according to FPTR address 
                                    246 ;  UNLOCK ( -- )
                                    247 ;-----------------------------
      001EB4 1E 97                  248 	.word LINK 
                           001EB6   249 	LINK=.
      001EB6 06                     250 	.byte 6
      001EB7 55 4E 4C 4F 43 4B      251 	.ascii "UNLOCK"
      001EBD                        252 UNLOCK:
                                    253 ; put addr[15:0] in Y, for bounds check.
      001EBD 90 BE 35         [ 2]  254 	ldw y,PTR16   ; Y=addr15:0
                                    255 ; check addr[23:16], if <> 0 then it is extened flash memory
      001EC0 3D 34            [ 1]  256 	tnz FPTR 
      001EC2 26 16            [ 1]  257 	jrne 4$
      001EC4 90 A3 80 00      [ 2]  258     cpw y,#FLASH_BASE
      001EC8 24 10            [ 1]  259     jruge 4$
      001ECA 90 A3 40 00      [ 2]  260 	cpw y,#EEPROM_BASE  
      001ECE 25 0D            [ 1]  261     jrult 9$
      001ED0 90 A3 48 7F      [ 2]  262 	cpw y,#OPTION_END 
      001ED4 22 07            [ 1]  263 	jrugt 9$
      001ED6 CD 1E 7F         [ 4]  264 	call UNLKEE
      001ED9 81               [ 4]  265 	ret 
      001EDA CD 1E 9E         [ 4]  266 4$: call UNLKFL
      001EDD 81               [ 4]  267 9$: ret 
                                    268 
                                    269 ;-------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                    270 ; LOCK write access to 
                                    271 ; FLASH and EEPROM 
                                    272 ; LOCK ( -- )
                                    273 ;-------------------------
      001EDE 1E B6                  274 	.word LINK 
                           001EE0   275 	LINK=.
      001EE0 04                     276 	.byte 4 
      001EE1 4C 4F 43 4B            277 	.ascii "LOCK" 
      001EE5                        278 LOCK: 
      001EE5 72 13 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001EE9 72 17 50 5F      [ 1]  280 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001EED 81               [ 4]  281 	ret 
                                    282 
                                    283 ;-------------------------
                                    284 ; increment FPTR 
                                    285 ; INC-FPTR ( -- )
                                    286 ;-------------------------
      001EEE 1E E0                  287 	.word LINK 
                           001EF0   288 	LINK=. 
      001EF0 08                     289 	.byte 8 
      001EF1 49 4E 43 2D 46 50 54   290 	.ascii "INC-FPTR" 
             52
      001EF9                        291 INC_FPTR:
      001EF9 3C 36            [ 1]  292 	inc PTR8 
      001EFB 26 0C            [ 1]  293 	jrne 1$
      001EFD 90 89            [ 2]  294 	pushw y 
      001EFF 90 BE 34         [ 2]  295 	ldw y,FPTR 
      001F02 90 5C            [ 1]  296 	incw y 
      001F04 90 BF 34         [ 2]  297 	ldw FPTR,y
      001F07 90 85            [ 2]  298 	popw y  
      001F09 81               [ 4]  299 1$: ret 
                                    300 
                                    301 ;------------------------------
                                    302 ; add u to FPTR 
                                    303 ; PTR+ ( u -- )
                                    304 ;------------------------------
      001F0A 1E F0                  305 	.word LINK 
                           001F0C   306 	LINK=.
      001F0C 04                     307 	.byte 4 
      001F0D 50 54 52 2B            308 	.ascii "PTR+"
      001F11                        309 PTRPLUS:
      001F11 90 93            [ 1]  310 	ldw y,x 
      001F13 1C 00 02         [ 2]  311 	addw x,#CELLL 
      001F16 72 B9 00 35      [ 2]  312 	addw y,PTR16 
      001F1A 90 BF 35         [ 2]  313 	ldw PTR16,y  
      001F1D 24 02            [ 1]  314 	jrnc 1$
      001F1F 3C 34            [ 1]  315 	inc FPTR 
      001F21 81               [ 4]  316 1$: ret 
                                    317 
                                    318 ;---------------------------------
                                    319 ; read word at address pointed FPTR
                                    320 ; increment FPTR 
                                    321 ; EE-READ ( -- w )
                                    322 ;------------------------------------
      001F22 1F 0C                  323 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]



                           001F24   324 	LINK=.
      001F24 07                     325 	.byte 7 
      001F25 45 45 2D 52 45 41 44   326 	.ascii "EE-READ"
      001F2C                        327 EE_READ:
      001F2C 1D 00 02         [ 2]  328 	subw x,#CELLL 
      001F2F 92 BC 00 34      [ 5]  329 	ldf a,[FPTR]
      001F33 90 95            [ 1]  330 	ld yh,a 
      001F35 CD 1E F9         [ 4]  331 	call INC_FPTR 
      001F38 92 BC 00 34      [ 5]  332 	ldf a,[FPTR]
      001F3C CD 1E F9         [ 4]  333 	call INC_FPTR 
      001F3F 90 97            [ 1]  334 	ld yl,a 
      001F41 FF               [ 2]  335 	ldw (x),y 
      001F42 81               [ 4]  336 	ret 
                                    337 
                                    338 ;---------------------------------------
                                    339 ; Read byte at address pointed by FPTR 
                                    340 ; EE-CREAD ( -- c )
                                    341 ;---------------------------------------
      001F43 1F 24                  342 	.word LINK 
                           001F45   343 	LINK=.
      001F45 08                     344 	.byte 8
      001F46 45 45 2D 43 52 45 41   345 	.ascii "EE-CREAD" 
             44
      001F4E                        346 EE_CREAD:
      001F4E 1D 00 02         [ 2]  347 	subw x,#CELLL 
      001F51 92 BC 00 34      [ 5]  348 	ldf a,[FPTR]	
      001F55 CD 1E F9         [ 4]  349 	call INC_FPTR
      001F58 90 5F            [ 1]  350 	clrw y 
      001F5A 90 97            [ 1]  351 	ld yl,a 
      001F5C FF               [ 2]  352 	ldw (x),y 
      001F5D 81               [ 4]  353 	ret 
                                    354 
                                    355 ;----------------------------
                                    356 ; write a byte at address pointed 
                                    357 ; by FPTR and increment FPTR.
                                    358 ; Expect pointer already initialized 
                                    359 ; and memory unlocked 
                                    360 ; WR-BYTE ( c -- )
                                    361 ;----------------------------
      001F5E 1F 45                  362 	.word LINK 
                           001F60   363 	LINK=. 
      001F60 07                     364 	.byte 7 
      001F61 57 52 2D 42 59 54 45   365 	.ascii "WR-BYTE" 
                                    366 
      001F68                        367 WR_BYTE:
      001F68 CD 04 80         [ 4]  368 	call FC_XOFF
      001F6B 90 93            [ 1]  369 	ldw y,x 
      001F6D 90 FE            [ 2]  370 	ldw y,(y)
      001F6F 1C 00 02         [ 2]  371 	addw x,#CELLL 
      001F72 90 9F            [ 1]  372 	ld a,yl
      001F74 92 BD 00 34      [ 4]  373 	ldf [FPTR],a
      001F78 72 05 50 5F FB   [ 2]  374 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001F7D CD 04 6A         [ 4]  375 	call FC_XON
      001F80 CC 1E F9         [ 2]  376 	jp INC_FPTR 
                                    377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]



                                    378 ;---------------------------------------
                                    379 ; write a word at address pointed 
                                    380 ; by FPTR and increment FPTR 
                                    381 ; Expect pointer already initialzed 
                                    382 ; and memory unlocked 
                                    383 ; WR-WORD ( w -- )
                                    384 ;---------------------------------------
      001F83 1F 60                  385 	.word LINK 
                           001F85   386 	LINK=.
      001F85 07                     387 	.byte 7 
      001F86 57 52 2D 57 4F 52 44   388 	.ascii "WR-WORD" 
      001F8D                        389 WR_WORD:
      001F8D CD 04 80         [ 4]  390 	call FC_XOFF
      001F90 90 93            [ 1]  391 	ldw y,x
      001F92 90 FE            [ 2]  392 	ldw y,(y)
      001F94 1C 00 02         [ 2]  393 	addw x,#CELLL 
      001F97 90 9E            [ 1]  394 	ld a,yh 
      001F99 92 BD 00 34      [ 4]  395 	ldf [FPTR],a
      001F9D 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001FA2 CD 1E F9         [ 4]  397 	call INC_FPTR 
      001FA5 90 9F            [ 1]  398 	ld a,yl 
      001FA7 92 BD 00 34      [ 4]  399 	ldf [FPTR],a
      001FAB 72 05 50 5F FB   [ 2]  400 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001FB0 CD 04 6A         [ 4]  401 	call FC_XON
      001FB3 CC 1E F9         [ 2]  402 	jp INC_FPTR 
                                    403 
                                    404 
                                    405 ;---------------------------------------
                                    406 ; write a byte to FLASH or EEPROM/OPTION  
                                    407 ; EEC!  (c ud -- )
                                    408 ;---------------------------------------
      001FB6 1F 85                  409     .word LINK 
                           001FB8   410 	LINK=.
      001FB8 04                     411     .byte 4 
      001FB9 45 45 43 21            412     .ascii "EEC!"
                                    413 	; local variables 
                           000001   414 	BTW = 1   ; byte to write offset on stack
                           000002   415     OPT = 2 
                           000002   416 	VSIZE = 2
      001FBD                        417 EECSTORE:
      001FBD 52 02            [ 2]  418 	sub sp,#VSIZE
      001FBF CD 1D 7F         [ 4]  419     call FPSTOR
      001FC2 E6 01            [ 1]  420 	ld a,(1,x)
      001FC4 43               [ 1]  421 	cpl a 
      001FC5 6B 01            [ 1]  422 	ld (BTW,sp),a ; byte to write 
      001FC7 0F 02            [ 1]  423 	clr (OPT,sp)  ; OPTION flag
      001FC9 CD 1E BD         [ 4]  424 	call UNLOCK 
                                    425 	; check if option
      001FCC 3D 34            [ 1]  426 	tnz FPTR 
      001FCE 26 19            [ 1]  427 	jrne 2$
      001FD0 90 BE 35         [ 2]  428 	ldw y,PTR16 
      001FD3 90 A3 48 00      [ 2]  429 	cpw y,#OPTION_BASE
      001FD7 2B 10            [ 1]  430 	jrmi 2$
      001FD9 90 A3 48 80      [ 2]  431 	cpw y,#OPTION_END+1
      001FDD 2A 0A            [ 1]  432 	jrpl 2$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]



      001FDF 03 02            [ 1]  433 	cpl (OPT,sp)
                                    434 	; OPTION WRITE require this UNLOCK 
      001FE1 72 1E 50 5B      [ 1]  435     bset FLASH_CR2,#FLASH_CR2_OPT
      001FE5 72 1F 50 5C      [ 1]  436     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001FE9                        437 2$: 
      001FE9 CD 1F 68         [ 4]  438 	call WR_BYTE 	
      001FEC 0D 02            [ 1]  439 	tnz (OPT,sp)
      001FEE 27 0D            [ 1]  440 	jreq 3$ 
      001FF0 7B 01            [ 1]  441     ld a,(BTW,sp)
      001FF2 90 5F            [ 1]  442     clrw y
      001FF4 90 97            [ 1]  443 	ld yl,a 
      001FF6 1D 00 02         [ 2]  444 	subw x,#CELLL 
      001FF9 FF               [ 2]  445 	ldw (x),y 
      001FFA CD 1F 68         [ 4]  446 	call WR_BYTE
      001FFD                        447 3$: 
      001FFD CD 1E E5         [ 4]  448 	call LOCK 
      002000 5B 02            [ 2]  449 	addw sp,#VSIZE 
      002002 81               [ 4]  450     ret
                                    451 
                                    452 ;------------------------------
                                    453 ; write integer in FLASH|EEPROM
                                    454 ; EE! ( n ud -- )
                                    455 ;------------------------------
      002003 1F B8                  456 	.word LINK 
                           002005   457 	LINK=.
      002005 03                     458 	.byte 3 
      002006 45 45 21               459 	.ascii "EE!"
      002009                        460 EESTORE:
      002009 CD 1D 7F         [ 4]  461 	call FPSTOR 
      00200C CD 1E BD         [ 4]  462 	call UNLOCK 
      00200F 90 93            [ 1]  463 	ldw y,x 
      002011 90 FE            [ 2]  464 	ldw y,(y)
      002013 90 89            [ 2]  465 	pushw y 
      002015 90 5E            [ 1]  466 	swapw y 
      002017 FF               [ 2]  467 	ldw (x),y 
      002018 CD 1F 68         [ 4]  468 	call WR_BYTE 
      00201B 90 85            [ 2]  469 	popw y 
      00201D 1D 00 02         [ 2]  470 	subw x,#CELLL
      002020 FF               [ 2]  471 	ldw (x),y 
      002021 CD 1F 68         [ 4]  472 	call WR_BYTE
      002024 CC 1E E5         [ 2]  473 	jp LOCK 
                                    474 
                                    475 
                                    476 ;----------------------------
                                    477 ; Erase flash memory row 
                                    478 ; stm8s208 as 128 bytes rows
                                    479 ; ROW-ERASE ( ud -- )
                                    480 ;----------------------------
      002027 20 05                  481 	.word LINK 
                           002029   482 	LINK=. 
      002029 09                     483 	.byte 9 
      00202A 52 4F 57 2D 45 52 41   484 	.ascii "ROW-ERASE" 
             53 45
      002033                        485 row_erase:
      002033 CD 04 80         [ 4]  486 	call FC_XOFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]



      002036 CD 1D 7F         [ 4]  487 	call FPSTOR
                                    488 ;code must be execute from RAM 
                                    489 ;copy routine to PAD 
      002039 1D 00 02         [ 2]  490 	subw x,#CELLL 
      00203C 90 AE 20 8C      [ 2]  491 	ldw y,#row_erase_proc
      002040 FF               [ 2]  492 	ldw (x),y 
      002041 CD 0D 16         [ 4]  493 	call PAD 
      002044 90 AE 20 B3      [ 2]  494 	ldw y,#row_erase_proc_end 
      002048 72 A2 20 8C      [ 2]  495 	subw y,#row_erase_proc
      00204C 1D 00 02         [ 2]  496 	subw x,#CELLL 
      00204F FF               [ 2]  497 	ldw (x),y 
      002050 CD 0D 52         [ 4]  498 	call CMOVE 
      002053                        499 block_erase:
      002053 90 BE 35         [ 2]  500 	ldw y,FPTR+1
      002056 90 A3 26 00      [ 2]  501 	cpw y,#app_space 
      00205A 2A 19            [ 1]  502 	jrpl erase_flash 
                                    503 ; erase EEPROM block
      00205C 90 A3 40 00      [ 2]  504 	cpw y,#EEPROM_BASE 
      002060 24 04            [ 1]  505 	jruge 1$
      002062 CD 04 6A         [ 4]  506 	call FC_XON
      002065 81               [ 4]  507 	ret ; bad address 
      002066 90 A3 47 FF      [ 2]  508 1$: cpw y,#EEPROM_END 
      00206A 23 04            [ 2]  509 	jrule 2$ 
      00206C CD 04 6A         [ 4]  510 	call FC_XON
      00206F 81               [ 4]  511 	ret ; bad address 
      002070                        512 2$:	
      002070 CD 1E 7F         [ 4]  513 	call UNLKEE 
      002073 20 03            [ 2]  514 	jra proceed_erase
                                    515 ; erase flash block:
      002075                        516 erase_flash:
      002075 CD 1E 9E         [ 4]  517 	call UNLKFL 
      002078                        518 proceed_erase:
      002078 CD 0D 16         [ 4]  519 	call PAD 
      00207B 90 93            [ 1]  520 	ldw y,x
      00207D 90 FE            [ 2]  521 	ldw y,(y)
      00207F 1C 00 02         [ 2]  522 	addw x,#CELLL  
      002082 90 FD            [ 4]  523 	call (y) 
      002084 72 17 50 5F      [ 1]  524 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      002088 CD 04 6A         [ 4]  525 	call FC_XON
      00208B 81               [ 4]  526 	ret 
                                    527 
                                    528 ; this routine is to be copied to PAD 
      00208C                        529 row_erase_proc:
      00208C 35 20 50 5B      [ 1]  530 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      002090 35 DF 50 5C      [ 1]  531 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      002094 4F               [ 1]  532 	clr a 
      002095 90 5F            [ 1]  533 	clrw y 
      002097 91 A7 00 34      [ 1]  534 	ldf ([FPTR],y),a
      00209B 90 5C            [ 1]  535     incw y
      00209D 91 A7 00 34      [ 1]  536 	ldf ([FPTR],y),a
      0020A1 90 5C            [ 1]  537     incw y
      0020A3 91 A7 00 34      [ 1]  538 	ldf ([FPTR],y),a
      0020A7 90 5C            [ 1]  539     incw y
      0020A9 91 A7 00 34      [ 1]  540 	ldf ([FPTR],y),a
      0020AD 72 05 50 5F FB   [ 2]  541 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]



      0020B2 81               [ 4]  542 	ret
      0020B3                        543 row_erase_proc_end:
                                    544 
                                    545 
                                    546 ;-----------------------------------
                                    547 ; block programming must be 
                                    548 ; executed from RAM 
                                    549 ; initial contidions: 
                                    550 ; 		memory unlocked
                                    551 ;       FPTR initialized 
                                    552 ; input: 
                                    553 ;    x   buffer address 
                                    554 ;-----------------------------------
                           000001   555 	BCNT=1 
      0020B3                        556 copy_buffer:
      0020B3 4B 80            [ 1]  557 	push #BLOCK_SIZE  
                                    558 ;enable block programming 
      0020B5 72 10 50 5B      [ 1]  559 	bset FLASH_CR2,#FLASH_CR2_PRG 
      0020B9 72 11 50 5C      [ 1]  560 	bres FLASH_NCR2,#FLASH_CR2_PRG
      0020BD 90 5F            [ 1]  561 	clrw y
      0020BF F6               [ 1]  562 1$:	ld a,(x)
      0020C0 91 A7 00 34      [ 1]  563 	ldf ([FPTR],y),a
      0020C4 5C               [ 1]  564 	incw x 
      0020C5 90 5C            [ 1]  565 	incw y 
      0020C7 0A 01            [ 1]  566 	dec (BCNT,sp)
      0020C9 26 F4            [ 1]  567 	jrne 1$
                                    568 ; wait EOP bit 
      0020CB 72 05 50 5F FB   [ 2]  569 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      0020D0 84               [ 1]  570 	pop a ; remove BCNT from stack 
      0020D1 81               [ 4]  571 	ret 
      0020D2                        572 copy_buffer_end:
                                    573 
                                    574 ;-------------------------
                                    575 ; move program_row to RAM 
                                    576 ; in TIB 
                                    577 ;------------------------
      0020D2                        578 copy_prog_to_ram:
      0020D2 1D 00 06         [ 2]  579 	subw x,#6
      0020D5 90 AE 20 B3      [ 2]  580 	ldw y,#copy_buffer 
      0020D9 EF 04            [ 2]  581 	ldw (4,x),y 
      0020DB 90 AE 17 00      [ 2]  582 	ldw y,#TIBBASE
      0020DF EF 02            [ 2]  583 	ldw (2,x),y 
      0020E1 90 AE 20 D2      [ 2]  584 	ldw y,#copy_buffer_end 
      0020E5 72 A2 20 B3      [ 2]  585 	subw y,#copy_buffer  
      0020E9 FF               [ 2]  586 	ldw (x),y 
      0020EA CD 0D 52         [ 4]  587 	call CMOVE 
      0020ED 81               [ 4]  588 	ret 
                                    589 
                                    590 
                                    591 ;-----------------------------
                                    592 ; write a row in FLASH/EEPROM 
                                    593 ; WR-ROW ( a ud -- )
                                    594 ; a -> address 128 byte buffer to write 
                                    595 ; ud ->  row address in FLASH|EEPROM 
                                    596 ;-----------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]



      0020EE 20 29                  597 	.word LINK 
                           0020F0   598 	LINK=.
      0020F0 06                     599 	.byte 6 
      0020F1 57 52 2D 52 4F 57      600 	.ascii "WR-ROW"
      0020F7                        601 write_row:
      0020F7 CD 04 80         [ 4]  602 	call FC_XOFF
      0020FA CD 1D 7F         [ 4]  603 	call FPSTOR
                                    604 ; align to FLASH block 
      0020FD A6 80            [ 1]  605 	ld a,#0x80 
      0020FF B4 36            [ 1]  606 	and a,PTR8 
      002101 B7 36            [ 1]  607 	ld PTR8,a  
      002103 CD 20 D2         [ 4]  608 	call copy_prog_to_ram
      002106 CD 1E BD         [ 4]  609 	call UNLOCK
      002109 90 93            [ 1]  610 	ldw y,x 
      00210B 90 FE            [ 2]  611 	ldw y,(y)
      00210D 1C 00 02         [ 2]  612 	addw x,#CELLL 
      002110 89               [ 2]  613 	pushw x 
      002111 93               [ 1]  614 	ldw x,y ; buffer address in x 
      002112 CD 17 00         [ 4]  615 	call TIBBASE
      002115 CD 1E E5         [ 4]  616 	call LOCK
      002118 85               [ 2]  617 	popw x 
      002119 CD 04 6A         [ 4]  618 	call FC_XON 
      00211C 81               [ 4]  619 	ret 
                                    620 
                                    621 ;-------------------------------------
                                    622 ; change value of OPTION register 
                                    623 ; SET-OPT (c n -- ) 
                                    624 ; c new value.
                                    625 ; n OPT  number {1..7}
                                    626 ;--------------------------------------
      00211D 20 F0                  627 		.word LINK 
                           00211F   628 		LINK=.
      00211F 07                     629 		.byte 7 
      002120 53 45 54 2D 4F 50 54   630 		.ascii "SET-OPT" 
      002127                        631 set_option: 
      002127 90 93            [ 1]  632 		ldw y,x 
      002129 90 FE            [ 2]  633 		ldw y,(y)
      00212B 27 06            [ 1]  634 		jreq 1$
      00212D 90 A3 00 07      [ 2]  635 		cpw y,#7 
      002131 23 04            [ 2]  636 		jrule 2$ 
                                    637 ; invalid OPTION number 		
      002133 1C 00 04         [ 2]  638 1$:		addw x,#2*CELLL
      002136 81               [ 4]  639 		ret
      002137 90 58            [ 2]  640 2$:		sllw y 
      002139 72 A9 47 FF      [ 2]  641 		addw y,#OPTION_BASE-1
      00213D FF               [ 2]  642 		ldw (x),y 
      00213E 1D 00 02         [ 2]  643 		subw x,#CELLL 
      002141 90 5F            [ 1]  644 		clrw y 
      002143 FF               [ 2]  645 		ldw (x),y 
      002144 CD 1F BD         [ 4]  646 		call EECSTORE
      002147 81               [ 4]  647 		ret 
                                    648 
                                    649 
                                    650 
                                    651 ;--------------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]



                                    652 ; reset system to its original state 
                                    653 ; before any user modification
                                    654 ; PRISTINE ( -- )
                                    655 ;-------------------------------------
      002148 21 1F                  656 	.word LINK  
                           00214A   657 	LINK=.
      00214A 08                     658 	.byte 8 
      00214B 50 52 49 53 54 49 4E   659 	.ascii "PRISTINE"
             45
      002153                        660 pristine:
                                    661 ;;; erase EEPROM
      002153 CD 1D 9E         [ 4]  662 	call EEPROM 
      002156 CD 08 44         [ 4]  663 1$:	call DDUP 
      002159 CD 20 33         [ 4]  664 	call row_erase
      00215C 90 93            [ 1]  665 	ldw y,x 
      00215E 90 EE 02         [ 2]  666 	ldw y,(2,y)
      002161 72 A9 00 80      [ 2]  667 	addw y,#BLOCK_SIZE
      002165 EF 02            [ 2]  668 	ldw (2,x),y
      002167 90 A3 48 00      [ 2]  669 	cpw y,#OPTION_BASE 
      00216B 25 E9            [ 1]  670 	jrult 1$
                                    671 ;;; reset OPTION to default values
      00216D 90 AE 00 01      [ 2]  672 	ldw y,#1 ; OPT1 
      002171 FF               [ 2]  673 2$:	ldw (x),y   
      002172 90 5F            [ 1]  674 	clrw y 
      002174 EF 02            [ 2]  675 	ldw (2,x),y  ; ( 0 1 -- ) 
      002176 CD 08 44         [ 4]  676 	call DDUP    ; ( 0 1 0 1 -- )  
      002179 CD 21 27         [ 4]  677 	call set_option
      00217C 90 93            [ 1]  678 	ldw y,x 
      00217E 90 FE            [ 2]  679 	ldw y,(y)
      002180 90 5C            [ 1]  680 	incw y  ; next OPTION 
      002182 90 A3 00 08      [ 2]  681 	cpw y,#8 
      002186 25 E9            [ 1]  682 	jrult 2$
                                    683 ;;; erase first row of app_space 	
      002188 90 AE 26 00      [ 2]  684 	ldw y,#app_space
      00218C EF 02            [ 2]  685 	ldw (2,x),y  
      00218E 90 5F            [ 1]  686 	clrw y 
      002190 FF               [ 2]  687 	ldw (x),y ; ( app_space 0 -- )
      002191 CD 20 33         [ 4]  688 	call row_erase 
                                    689 ; reset interrupt vectors 
      002194 1D 00 02         [ 2]  690 	subw x,#CELLL 
      002197 90 5F            [ 1]  691 	clrw y  
      002199 FF               [ 2]  692 4$:	ldw (x),y  ; ( n -- ) int# 
      00219A CD 06 36         [ 4]  693 	call DUPP  
      00219D CD 21 BA         [ 4]  694 	call reset_vector
      0021A0 90 93            [ 1]  695 	ldw y,x 
      0021A2 90 FE            [ 2]  696 	ldw y,(y)
      0021A4 90 5C            [ 1]  697 	incw y   ; next vector 
      0021A6 90 A3 00 19      [ 2]  698 	cpw y,#25 
      0021AA 25 ED            [ 1]  699 	jrult 4$
      0021AC CC 00 00         [ 2]  700 	jp NonHandledInterrupt ; reset MCU
                                    701 
                                    702 ;------------------------------
                                    703 ; reset an interrupt vector 
                                    704 ; to its initial value 
                                    705 ; i.e. NonHandledInterrupt
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]



                                    706 ; RST-IVEC ( n -- )
                                    707 ;-----------------------------
      0021AF 21 4A                  708 	.word LINK 
                           0021B1   709 	LINK=. 
      0021B1 08                     710 	.byte 8 
      0021B2 52 53 54 2D 49 56 45   711 	.ascii "RST-IVEC"
             43
      0021BA                        712 reset_vector:
      0021BA 90 93            [ 1]  713 	ldw y,x
      0021BC 1C 00 02         [ 2]  714 	addw x,#CELLL 
      0021BF 90 FE            [ 2]  715 	ldw y,(y)
      0021C1 90 A3 00 17      [ 2]  716 	cpw y,#23 
      0021C5 27 3A            [ 1]  717 	jreq 9$
      0021C7 90 A3 00 1D      [ 2]  718 	cpw y,#29 ; last vector
      0021CB 22 34            [ 1]  719 	jrugt 9$  
      0021CD 90 58            [ 2]  720 	sllw y 
      0021CF 90 58            [ 2]  721 	sllw y 
      0021D1 72 A9 80 08      [ 2]  722 	addw y,#0x8008 ; irq0 address 
      0021D5 90 BF 26         [ 2]  723 	ldw YTEMP,y
      0021D8 1D 00 06         [ 2]  724 	subw x,#3*CELLL 
      0021DB EF 02            [ 2]  725 	ldw (2,x),y 
      0021DD 90 5F            [ 1]  726 	clrw y
      0021DF FF               [ 2]  727 	ldw (x),y 
      0021E0 A6 82            [ 1]  728 	ld a,#0x82 
      0021E2 90 95            [ 1]  729 	ld yh,a
      0021E4 EF 04            [ 2]  730 	ldw (4,x),y
      0021E6 CD 20 09         [ 4]  731 	call EESTORE
      0021E9 1D 00 06         [ 2]  732 	subw x,#3*CELLL
      0021EC 90 5F            [ 1]  733 	clrw y 
      0021EE FF               [ 2]  734 	ldw (x),y 
      0021EF 90 AE 00 00      [ 2]  735 	ldw y,#NonHandledInterrupt
      0021F3 EF 04            [ 2]  736 	ldw (4,x),y 
      0021F5 90 BE 26         [ 2]  737 	ldw y,YTEMP  
      0021F8 72 A9 00 02      [ 2]  738 	addw y,#2
      0021FC EF 02            [ 2]  739 	ldw (2,x),y 
      0021FE CD 20 09         [ 4]  740 	call EESTORE
      002201 81               [ 4]  741 9$:	ret 
                                    742 
                                    743 
                                    744 ;------------------------------
                                    745 ; all interrupt vector with 
                                    746 ; an address >= a are resetted 
                                    747 ; to default
                                    748 ; CHKIVEC ( a -- )
                                    749 ;------------------------------
      002202 21 B1                  750 	.word LINK 
                           002204   751 	LINK=.
      002204 07                     752 	.byte 7
      002205 43 48 4B 49 56 45 43   753 	.ascii "CHKIVEC"
                                    754 ;local variables 
                           000001   755 	SSP=1
                           000003   756 	CADR=3
                           000005   757 	OFS=5
                           000006   758 	VSIZE=6  
      00220C                        759 CHKIVEC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]



      00220C 52 06            [ 2]  760 	sub sp,#VSIZE ;alloc local variables 
      00220E 90 93            [ 1]  761 	ldw y,x 
      002210 90 FE            [ 2]  762 	ldw y,(y)
      002212 17 03            [ 2]  763 	ldw (CADR,sp),y ; ca 
      002214 1F 01            [ 2]  764 	ldw (SSP,sp),x 
      002216 AE 80 0A         [ 2]  765 	ldw x,#0x800a ; irq0 address 
      002219 BF 35            [ 2]  766 	ldw PTR16,X
      00221B AE FF FC         [ 2]  767 	ldw x,#-4 
      00221E 1C 00 04         [ 2]  768 1$:	addw x,#4
      002221 A3 00 78         [ 2]  769 	cpw x,#30*4 ; irq0-29 
      002224 27 22            [ 1]  770 	jreq 9$
      002226 90 93            [ 1]  771 	ldw y,x  
      002228 91 D6 35         [ 4]  772 	ld a,([PTR16],y)
      00222B 11 03            [ 1]  773 	cp a,(CADR,sp)
      00222D 25 EF            [ 1]  774 	jrult 1$
      00222F 90 5C            [ 1]  775 	incw y 
      002231 91 D6 35         [ 4]  776 	ld a,([PTR16],y)
      002234 11 04            [ 1]  777 	cp a,(CADR+1,sp) 
      002236 25 E6            [ 1]  778 	jrult 1$ 
      002238 1F 05            [ 2]  779 	ldw (OFS,sp),x 
      00223A 54               [ 2]  780 	srlw x
      00223B 54               [ 2]  781 	srlw x 
      00223C 90 93            [ 1]  782 	ldw y,x 
      00223E 1E 01            [ 2]  783 	ldw x,(SSP,sp)
      002240 FF               [ 2]  784 	ldw (x),y
      002241 CD 21 BA         [ 4]  785 	call reset_vector
      002244 1E 05            [ 2]  786 	ldw x,(OFS,sp) 
      002246 20 D6            [ 2]  787 	jra 1$
      002248 1E 01            [ 2]  788 9$:	ldw x,(SSP,sp) 
      00224A 1C 00 02         [ 2]  789 	addw x,#CELLL 
      00224D 5B 06            [ 2]  790 	addw sp,#VSIZE ; drop local variables  
      00224F 81               [ 4]  791 	ret 
                                    792 
                                    793 ;------------------------------
                                    794 ; set interrupt vector 
                                    795 ; SET-IVEC ( ud n -- )
                                    796 ;  ud Handler address
                                    797 ;  n  vector # 0 .. 29 
                                    798 ;-----------------------------
      002250 22 04                  799 	.word LINK
                           002252   800 	LINK=.
      002252 08                     801 	.byte 8 
      002253 53 45 54 2D 49 56 45   802 	.ascii "SET-IVEC" 
             43
      00225B                        803 set_vector:
      00225B 90 93            [ 1]  804     ldw y,x 
      00225D 1C 00 02         [ 2]  805 	addw x,#CELLL 
      002260 90 FE            [ 2]  806 	ldw y,(y) ; vector #
      002262 90 A3 00 1D      [ 2]  807 	cpw y,#29 ; last vector
      002266 23 04            [ 2]  808 	jrule 2$
      002268 1C 00 04         [ 2]  809 	addw x,#2*CELLL 
      00226B 81               [ 4]  810 	ret
      00226C 90 58            [ 2]  811 2$:	sllw y 
      00226E 90 58            [ 2]  812 	sllw y 
      002270 72 A9 80 08      [ 2]  813 	addw y,#0X8008 ; IRQ0 vector address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]



      002274 90 BF 26         [ 2]  814 	ldw YTEMP,y ; vector address 
      002277 A6 82            [ 1]  815 	ld a,#0x82 
      002279 90 95            [ 1]  816 	ld yh,a 
      00227B E6 01            [ 1]  817 	ld a,(1,x) ; isr address bits 23..16 
      00227D 90 97            [ 1]  818 	ld yl,a 
                                    819 ;  write 0x82 + most significant byte of int address	
      00227F 1D 00 06         [ 2]  820 	subw x,#3*CELLL 
      002282 EF 04            [ 2]  821 	ldw (4,x),y 
      002284 90 BE 26         [ 2]  822 	ldw y,YTEMP
      002287 EF 02            [ 2]  823 	ldw (2,x),y ; vector address 
      002289 90 5F            [ 1]  824 	clrw y 
      00228B FF               [ 2]  825 	ldw (x),y   ; as a double 
      00228C CD 20 09         [ 4]  826 	call EESTORE 
      00228F 90 93            [ 1]  827 	ldw y,x 
      002291 90 EE 02         [ 2]  828 	ldw y,(2,y) ; bits 15..0 int vector 
      002294 1D 00 06         [ 2]  829 	subw x,#3*CELLL 
      002297 EF 04            [ 2]  830 	ldw (4,x),y 
      002299 90 BE 26         [ 2]  831 	ldw y,YTEMP 
      00229C 72 A9 00 02      [ 2]  832 	addw y,#2 
      0022A0 EF 02            [ 2]  833 	ldw (2,x),y 
      0022A2 90 5F            [ 1]  834 	clrw y 
      0022A4 FF               [ 2]  835 	ldw (x),y 
      0022A5 CD 20 09         [ 4]  836 	call EESTORE
      0022A8 1C 00 04         [ 2]  837 	addw x,#2*CELLL  
      0022AB 81               [ 4]  838 9$: ret 
                                    839 
                                    840 
                                    841 ;------------------------
                                    842 ; Compile word to flash
                                    843 ; EE, (w -- )
                                    844 ;-----------------------
      0022AC 22 52                  845 	.word LINK
                           0022AE   846 	LINK=.
      0022AE 03                     847 	.byte 3
      0022AF 45 45 2C               848 	.ascii "EE,"
      0022B2                        849 EE_COMMA:
      0022B2 1D 00 04         [ 2]  850 	subw x,#2*CELLL 
      0022B5 90 BE 1A         [ 2]  851 	ldw y,UCP
      0022B8 90 89            [ 2]  852 	pushw y 
      0022BA EF 02            [ 2]  853 	ldw (2,x),y 
      0022BC 90 5F            [ 1]  854 	clrw y 
      0022BE FF               [ 2]  855 	ldw (x),y
      0022BF CD 20 09         [ 4]  856 	call EESTORE
      0022C2 90 85            [ 2]  857 	popw y 
      0022C4 72 A9 00 02      [ 2]  858 	addw y,#2
      0022C8 90 BF 1A         [ 2]  859 	ldw UCP,y
      0022CB 81               [ 4]  860 	ret 
                                    861 
                                    862 
                                    863 ;-------------------------
                                    864 ; Compile byte to flash 
                                    865 ; EEC, ( c -- )	
                                    866 ;-------------------------
      0022CC 22 AE                  867 	.word LINK 
                           0022CE   868 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 126.
Hexadecimal [24-Bits]



      0022CE 04                     869 	.byte 4 
      0022CF 45 45 43 2C            870 	.ascii "EEC,"
      0022D3                        871 EE_CCOMMA:
      0022D3 1D 00 04         [ 2]  872 	subw x,#2*CELLL 
      0022D6 90 BE 1A         [ 2]  873 	ldw y,UCP
      0022D9 90 89            [ 2]  874 	pushw y 
      0022DB EF 02            [ 2]  875 	ldw (2,x),y 
      0022DD 90 5F            [ 1]  876 	clrw y 
      0022DF FF               [ 2]  877 	ldw (x),y
      0022E0 CD 1F BD         [ 4]  878 	call EECSTORE
      0022E3 90 85            [ 2]  879 	popw y 
      0022E5 90 5C            [ 1]  880 	incw y 
      0022E7 90 BF 1A         [ 2]  881 	ldw UCP,y
      0022EA 81               [ 4]  882 	ret 
                                    883 
                                    884 
                                    885 ;--------------------------
                                    886 ; copy FLASH block to ROWBUF
                                    887 ; ROW>BUF ( ud -- )
                                    888 ;--------------------------
      0022EB 22 CE                  889 	.word LINK 
                           0022ED   890 	LINK=.
      0022ED 07                     891 	.byte 7 
      0022EE 52 4F 57 3E 42 55 46   892 	.ascii "ROW>BUF"
      0022F5                        893 ROW2BUF: 
      0022F5 CD 1D 7F         [ 4]  894 	call FPSTOR 
      0022F8 A6 80            [ 1]  895 	ld a,#BLOCK_SIZE
      0022FA 88               [ 1]  896 	push a 
      0022FB B4 36            [ 1]  897 	and a,PTR8 ; block align 
      0022FD B7 36            [ 1]  898 	ld PTR8,a
      0022FF 90 AE 16 80      [ 2]  899 	ldw y,#ROWBUFF 
      002303 92 BC 00 34      [ 5]  900 1$: ldf a,[FPTR]
      002307 90 F7            [ 1]  901 	ld (y),a
      002309 CD 1E F9         [ 4]  902 	call INC_FPTR
      00230C 90 5C            [ 1]  903 	incw y 
      00230E 0A 01            [ 1]  904 	dec (1,sp)
      002310 26 F1            [ 1]  905 	jrne 1$ 
      002312 84               [ 1]  906 	pop a 
      002313 81               [ 4]  907 	ret 
                                    908 
                                    909 
                                    910 ;---------------------------
                                    911 ; copy ROWBUFF to flash 
                                    912 ; BUF>ROW ( ud -- )
                                    913 ; ud is row address as double 
                                    914 ;---------------------------
      002314 22 ED                  915 	.word LINK 
                           002316   916 	LINK=.
      002316 07                     917 	.byte 7 
      002317 42 55 46 3E 52 4F 57   918 	.ascii "BUF>ROW" 
      00231E                        919 BUF2ROW:
      00231E CD 07 3A         [ 4]  920 	call TBUF ; ( ud rb -- )
      002321 CD 07 FA         [ 4]  921 	call ROT 
      002324 CD 07 FA         [ 4]  922 	call ROT  ; ( rb ud -- )
      002327 CD 20 F7         [ 4]  923 	call write_row 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 127.
Hexadecimal [24-Bits]



      00232A 81               [ 4]  924 	ret 
                                    925 
                                    926 ;---------------------------------
                                    927 ; how many byte free in that row 
                                    928 ; RFREE ( a -- n )
                                    929 ; a is least byte of target address
                                    930 ;----------------------------------
      00232B 23 16                  931 	.word LINK 
                           00232D   932 	LINK=.
      00232D 05                     933 	.byte 5 
      00232E 52 46 52 45 45         934 	.ascii "RFREE"
      002333                        935 RFREE:
      002333 E6 01            [ 1]  936 	ld a,(1,x)
      002335 A4 7F            [ 1]  937 	and a,#BLOCK_SIZE-1 
      002337 B7 26            [ 1]  938 	ld YTEMP,a 
      002339 A6 80            [ 1]  939 	ld a,#BLOCK_SIZE 
      00233B B0 26            [ 1]  940 	sub a,YTEMP 
      00233D 90 5F            [ 1]  941 	clrw y 
      00233F 90 97            [ 1]  942 	ld yl,a
      002341 FF               [ 2]  943 	ldw (x),y 
      002342 81               [ 4]  944 	ret 
                                    945 
                                    946 ;---------------------------------
                                    947 ; write u bytes to flash/EEPROM 
                                    948 ; constraint to row limit 
                                    949 ; RAM>EE ( ud a u -- u2 )
                                    950 ; ud flash address 
                                    951 ; a ram address 
                                    952 ; u bytes count
                                    953 ; return u2 bytes written  
                                    954 ;-------------------------------
      002343 23 2D                  955 	.word LINK 
                           002345   956 	LINK=. 
      002345 06                     957 	.byte 6
      002346 52 41 4D 3E 45 45      958 	.ascii "RAM>EE"
                                    959 	
      00234C                        960 RAM2EE:
                                    961 ; copy ud on top 
      00234C 90 93            [ 1]  962 	ldw y,x 
      00234E 90 EE 06         [ 2]  963 	ldw y,(6,y) ; LSW of ud  
      002351 90 BF 26         [ 2]  964 	ldw YTEMP,y 
      002354 90 93            [ 1]  965 	ldw y,x 
      002356 90 EE 04         [ 2]  966 	ldw y,(4,y)  ; MSW of ud 
      002359 1D 00 04         [ 2]  967 	subw x,#2*CELLL 
      00235C FF               [ 2]  968 	ldw (x),y 
      00235D 90 BE 26         [ 2]  969 	ldw y,YTEMP 
      002360 EF 02            [ 2]  970 	ldw (2,x),y 
      002362 CD 22 F5         [ 4]  971 	call ROW2BUF 
      002365 90 93            [ 1]  972 	ldw y,x 
      002367 90 EE 06         [ 2]  973 	ldw y,(6,y)
      00236A 90 89            [ 2]  974 	pushw y ; udl 
      00236C 90 9F            [ 1]  975 	ld a,yl
      00236E A4 7F            [ 1]  976 	and a,#BLOCK_SIZE-1 
      002370 90 5F            [ 1]  977 	clrw y 
      002372 90 97            [ 1]  978 	ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 128.
Hexadecimal [24-Bits]



      002374 72 A9 16 80      [ 2]  979 	addw y,#ROWBUFF 
      002378 1D 00 02         [ 2]  980 	subw x,#CELLL 
      00237B FF               [ 2]  981 	ldw (x),y  
      00237C CD 06 46         [ 4]  982 	call SWAPP ;  ( ud a ra u -- )
      00237F CD 05 51         [ 4]  983 	call RFROM  
      002382 CD 23 33         [ 4]  984 	call RFREE 
      002385 CD 09 9C         [ 4]  985 	call MIN
      002388 CD 06 36         [ 4]  986 	call DUPP 
      00238B CD 05 FF         [ 4]  987 	call TOR  
      00238E CD 0D 52         [ 4]  988 	call CMOVE
      002391 CD 23 1E         [ 4]  989 	call BUF2ROW 
      002394 CD 05 51         [ 4]  990 	call RFROM 
      002397 81               [ 4]  991 	ret 
                                    992 
                                    993 
                                    994 ;--------------------------
                                    995 ; expand 16 bit address 
                                    996 ; to 32 bit address 
                                    997 ; FADDR ( a -- ud )
                                    998 ;--------------------------
      002398 23 45                  999 	.word LINK 
                           00239A  1000 	LINK=. 
      00239A 05                    1001 	.byte 5 
      00239B 46 41 44 44 52        1002 	.ascii "FADDR"
      0023A0                       1003 FADDR:
      0023A0 CC 0C 2B         [ 2] 1004 	jp ZERO 
                                   1005 
                                   1006 
                                   1007 ;--------------------------
                                   1008 ; move new colon definition to FLASH 
                                   1009 ; using WR-ROW for efficiency 
                                   1010 ; preserving bytes already used 
                                   1011 ; in the current block. 
                                   1012 ; At this point the compiler as completed
                                   1013 ; in RAM and pointers CP and CNTXT updated.
                                   1014 ; CNTXT point to nfa of new word and  
                                   1015 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1016 ; 
                                   1017 ; FMOVE ( -- cp+ )
                                   1018 ; 
                                   1019 ;--------------------------
      0023A3 23 9A                 1020 	.word LINK 
                           0023A5  1021 	LINK=.
      0023A5 05                    1022 	.byte 5 
      0023A6 46 4D 4F 56 45        1023 	.ascii "FMOVE" 
      0023AB                       1024 FMOVE:
      0023AB CD 07 4C         [ 4] 1025 	call TFLASH 
      0023AE CD 05 00         [ 4] 1026 	CALL AT 
      0023B1 CD 04 B5         [ 4] 1027 	CALL QBRAN 
      0023B4 24 2F                 1028 	.word no_move  
      0023B6 CD 07 9B         [ 4] 1029 	call CPP
      0023B9 CD 05 00         [ 4] 1030 	call AT  
      0023BC CD 06 36         [ 4] 1031 	call DUPP ; ( udl udl -- )
      0023BF CD 07 7F         [ 4] 1032 	call CNTXT 
      0023C2 CD 05 00         [ 4] 1033 	call AT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 129.
Hexadecimal [24-Bits]



      0023C5 CD 04 8C         [ 4] 1034 	call DOLIT 
      0023C8 00 02                 1035 	.word 2 
      0023CA CD 08 EF         [ 4] 1036 	call SUBB ; ( udl udl a -- )
      0023CD CD 06 46         [ 4] 1037 	call SWAPP 
      0023D0 CD 23 A0         [ 4] 1038 	call FADDR 
      0023D3 CD 07 FA         [ 4] 1039 	call ROT  ; ( udl ud a -- )
      0023D6 CD 06 36         [ 4] 1040 	call DUPP 
      0023D9 CD 05 FF         [ 4] 1041 	call TOR    ; R: a 
      0023DC                       1042 FMOVE2: 
      0023DC CD 0D 05         [ 4] 1043 	call HERE 
      0023DF CD 05 62         [ 4] 1044 	call RAT 
      0023E2 CD 08 EF         [ 4] 1045 	call SUBB ; (udl ud a wl -- )
      0023E5                       1046 next_row:
      0023E5 CD 06 36         [ 4] 1047 	call DUPP 
      0023E8 CD 05 FF         [ 4] 1048 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0023EB CD 23 4C         [ 4] 1049 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0023EE CD 06 36         [ 4] 1050 	call DUPP 
      0023F1 CD 05 FF         [ 4] 1051 	call TOR
      0023F4 CD 08 59         [ 4] 1052 	call PLUS  ; ( udl+ ) 
      0023F7 CD 06 36         [ 4] 1053 	call DUPP 
      0023FA CD 0C 2B         [ 4] 1054 	call ZERO   ; ( udl+ ud -- )
      0023FD CD 05 51         [ 4] 1055 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      002400 CD 05 51         [ 4] 1056 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      002403 CD 06 5E         [ 4] 1057 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002406 CD 08 EF         [ 4] 1058 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002409 CD 06 36         [ 4] 1059 	call DUPP 
      00240C CD 04 B5         [ 4] 1060 	call QBRAN
      00240F 24 28                 1061 	.word fmove_done 
      002411 CD 06 46         [ 4] 1062 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002414 CD 05 51         [ 4] 1063 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002417 CD 08 59         [ 4] 1064 	call PLUS  ; ( udl+2 ud wl- a+ )
      00241A CD 06 36         [ 4] 1065 	call DUPP 
      00241D CD 05 FF         [ 4] 1066 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      002420 CD 06 46         [ 4] 1067 	call SWAPP 
      002423 CD 04 D1         [ 4] 1068 	call BRAN
      002426 23 E5                 1069 	.word next_row  
      002428                       1070 fmove_done:	
      002428 CD 05 51         [ 4] 1071 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00242B 1C 00 0A         [ 2] 1072 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00242E 81               [ 4] 1073  	ret  
      00242F                       1074 no_move:
      00242F CD 0C 2B         [ 4] 1075 	call ZERO
      002432 81               [ 4] 1076 	ret 
                                   1077 
                                   1078 ;------------------------------------------
                                   1079 ; adjust pointers after **FMOVE** operetion.
                                   1080 ; UPDAT-PTR ( cp+ -- )
                                   1081 ; cp+ is new CP position after FMOVE 
                                   1082 ;-------------------------------------------
      002433 23 A5                 1083 	.word LINK 
                           002435  1084 	LINK=.
      002435 09                    1085 	.byte 9
      002436 55 50 44 41 54 2D 50  1086 	.ascii "UPDAT-PTR" 
             54 52
      00243F                       1087 UPDATPTR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 130.
Hexadecimal [24-Bits]



                                   1088 ;reset VP to previous position  
      00243F CD 1D F9         [ 4] 1089 	call EEPVP 
      002442                       1090 	_DROP 
      002442 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002445 CD 05 00         [ 4] 1091 	call AT
      002448 CD 07 8D         [ 4] 1092 	call VPP 
      00244B CD 04 EE         [ 4] 1093 	call STORE
                                   1094 ;update CONTEXT and LAST 
      00244E CD 1D E3         [ 4] 1095 	call EEPCP 
      002451                       1096 	_DROP
      002451 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      002454 CD 05 00         [ 4] 1097 	call AT
      002457 CD 04 8C         [ 4] 1098 	call DOLIT 
      00245A 00 02                 1099 	.word 2 
      00245C CD 08 59         [ 4] 1100 	call PLUS 
      00245F CD 06 36         [ 4] 1101 	call DUPP 
      002462 CD 07 7F         [ 4] 1102 	call CNTXT 
      002465 CD 04 EE         [ 4] 1103 	call STORE
      002468 CD 07 AB         [ 4] 1104 	call LAST
      00246B CD 04 EE         [ 4] 1105 	call STORE 
      00246E CD 1E 13         [ 4] 1106 	call UPDATLAST 
                                   1107 ;update CP 
      002471 CD 07 9B         [ 4] 1108 	call CPP 
      002474 CD 04 EE         [ 4] 1109 	call STORE
      002477 CD 1E 3C         [ 4] 1110 	call UPDATCP 
      00247A 81               [ 4] 1111 	ret 
                                   1112 
                                   1113 ;-----------------------------
                                   1114 ; move interrupt sub-routine
                                   1115 ; in flash memory
                                   1116 ;----------------------------- 
      00247B 24 35                 1117 	.word LINK 
                           00247D  1118 	LINK=. 
      00247D 06                    1119 	.byte 6
      00247E 49 46 4D 4F 56 45     1120 	.ascii "IFMOVE" 
      002484                       1121 IFMOVE:
      002484 CD 07 4C         [ 4] 1122 	call TFLASH 
      002487 CD 05 00         [ 4] 1123 	CALL AT 
      00248A CD 04 B5         [ 4] 1124 	CALL QBRAN 
      00248D 24 2F                 1125 	.word no_move 
      00248F CD 07 9B         [ 4] 1126 	call CPP 
      002492 CD 05 00         [ 4] 1127 	call AT 
      002495 CD 06 36         [ 4] 1128 	call DUPP ; ( udl udl -- )
      002498 CD 1D F9         [ 4] 1129 	call EEPVP 
      00249B                       1130 	_DROP
      00249B 1C 00 02         [ 2]    1     ADDW X,#CELLL  
      00249E CD 05 00         [ 4] 1131 	call AT  ; ( udl udl a )
      0024A1 CD 05 FF         [ 4] 1132 	call TOR 
      0024A4 CD 23 A0         [ 4] 1133 	call FADDR
      0024A7 CD 05 62         [ 4] 1134 	call RAT ; ( udl ud a -- ) R: a 
      0024AA CC 23 DC         [ 2] 1135 	jp FMOVE2 
                                   1136 
                                   1137 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 131.
Hexadecimal [24-Bits]



                           000000  4696 .if WANT_SCALING_CONST 
                                   4697         .include "const_ratio.asm"
                                   4698 .endif
                           000001  4699 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 132.
Hexadecimal [24-Bits]



                                   4700         .include "ctable.asm"
                                      1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                      2 ;; Copyright Jacques Deschênes 2019,2020,2021 
                                      3 ;; This file is part of stm32_eforth  
                                      4 ;;
                                      5 ;;     stm8_eforth is free software: you can redistribute it and/or modify
                                      6 ;;     it under the terms of the GNU General Public License as published by
                                      7 ;;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;;     (at your option) any later version.
                                      9 ;;
                                     10 ;;     stm32_eforth is distributed in the hope that it will be useful,
                                     11 ;;     but WITHOUT ANY WARRANTY;; without even the implied warranty of
                                     12 ;;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;;     GNU General Public License for more details.
                                     14 ;;
                                     15 ;;     You should have received a copy of the GNU General Public License
                                     16 ;;     along with stm32_eforth.  If not, see <http:;;www.gnu.org/licenses/>.
                                     17 ;;;;
                                     18 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     19 
                                     20 
                                     21 ;------------------------------
                                     22 ; words to create and read 
                                     23 ; constants tables in FLASH 
                                     24 ; and EEPROM
                                     25 ;------------------------------
                                     26 
                                     27 ;-----------------------------
                                     28 ; allocate space in CODE area 
                                     29 ; for constant table.
                                     30 ; CALLOT ( u -- ad )
                                     31 ; u  bytes to allocates 
                                     32 ; ad data address as double.
                                     33 ;-----------------------------
      0024AD 24 7D                   34     .word LINK 
                           0024AF    35     LINK=.
      0024AF 06                      36     .byte 6
      0024B0 43 41 4C 4C 4F 54       37     .ascii "CALLOT"
      0024B6                         38 CALLOT:
      0024B6 CD 07 9B         [ 4]   39     CALL CPP
      0024B9 CD 06 36         [ 4]   40     CALL DUPP 
      0024BC CD 05 00         [ 4]   41     CALL AT 
      0024BF CD 05 FF         [ 4]   42     CALL TOR 
      0024C2 CD 0C 9B         [ 4]   43     CALL PSTOR 
      0024C5 CD 1E 3C         [ 4]   44     CALL UPDATCP 
      0024C8 CD 05 51         [ 4]   45     CALL RFROM
      0024CB CC 0C 2B         [ 2]   46     JP ZERO 
                                     47 
                                     48 ;------------------------------
                                     49 ; create constants bytes table 
                                     50 ; in persistant memory
                                     51 ;  CTABLE ( n+ -- ad ; <string> )
                                     52 ; n+ bytes reserved 
                                     53 ;-----------------------------
      0024CE 24 AF                   54     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 133.
Hexadecimal [24-Bits]



                           0024D0    55     LINK=.
      0024D0 06                      56     .byte 6
      0024D1 43 54 41 42 4C 45       57     .ascii "CTABLE"
      0024D7                         58 CTABLE:
      0024D7 CD 24 B6         [ 4]   59     CALL CALLOT     
      0024DA CC 1A C2         [ 2]   60     JP DCONST 
                                     61      
                                     62 
                                     63 ;--------------------------------
                                     64 ; create constants words table 
                                     65 ; in persistant memory 
                                     66 ; WTABLE ( n+ -- ad ; <string> )
                                     67 ; n+  words reserved  
                                     68 ;--------------------------------
      0024DD 24 D0                   69     .word LINK 
                           0024DF    70     LINK=.
      0024DF 06                      71     .byte 6
      0024E0 57 54 41 42 4C 45       72     .ascii "WTABLE"
      0024E6                         73 WTABLE:
      0024E6 CD 0B B2         [ 4]   74     CALL CELLS  
      0024E9 CD 24 B6         [ 4]   75     CALL CALLOT 
      0024EC CC 1A C2         [ 2]   76     JP DCONST 
                                     77 
                                     78 ;---------------------------------
                                     79 ; stack an element of CTABLE 
                                     80 ; CTABL@ ( u ad -- c )
                                     81 ; u element order {0..size-1}
                                     82 ; a|ad table address 
                                     83 ;--------------------------------
      0024EF 24 DF                   84     .word LINK 
                           0024F1    85     LINK=.
      0024F1 06                      86     .byte 6
      0024F2 43 54 41 42 4C 40       87     .ascii "CTABL@" 
      0024F8                         88 CTAT:
      0024F8 CD 1D 7F         [ 4]   89     call FPSTOR 
      0024FB CD 1F 11         [ 4]   90     call PTRPLUS 
      0024FE CC 1F 4E         [ 2]   91     jp EE_CREAD 
                                     92 
                                     93 ;---------------------------------
                                     94 ; stack an element of WTABLE 
                                     95 ; WTABL@ ( u ud -- w )
                                     96 ; u is element order {0..size-1}
                                     97 ; a|ud table address 
                                     98 ;----------------------------------
      002501 24 F1                   99     .word LINK 
                           002503   100     LINK=.
      002503 06                     101     .byte 6
      002504 57 54 41 42 4C 40      102     .ascii "WTABL@" 
      00250A                        103 WTAT:
      00250A CD 1D 7F         [ 4]  104     call FPSTOR 
      00250D CD 0B B2         [ 4]  105     call CELLS 
      002510 CD 1F 11         [ 4]  106     call PTRPLUS 
      002513 CD 1F 2C         [ 4]  107     call EE_READ 
      002516 81               [ 4]  108     ret 
                                    109 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 134.
Hexadecimal [24-Bits]



                                    110 ;--------------------------
                                    111 ; tool to initialize character table 
                                    112 ; CTINIT ( ad -- )
                                    113 ; ad is table address 
                                    114 ;--------------------------
      002517 25 03                  115     .word LINK 
                           002519   116     LINK=.
      002519 06                     117     .byte 6 
      00251A 43 54 49 4E 49 54      118     .ascii "CTINIT"
      002520                        119 CTINIT:
      002520 CD 1D 7F         [ 4]  120     CALL FPSTOR
      002523 CD 1E BD         [ 4]  121     CALL UNLOCK
      002526 CD 0C 2B         [ 4]  122     CALL ZERO 
      002529 CD 0B BF         [ 4]  123 1$: CALL ONEP 
      00252C CD 06 36         [ 4]  124     CALL DUPP 
      00252F CD 25 7C         [ 4]  125     CALL INTQ 
      002532 CD 04 B5         [ 4]  126     CALL QBRAN 
      002535 25 3F                  127     .word 2$
      002537 CD 1F 68         [ 4]  128     call WR_BYTE 
      00253A CD 04 D1         [ 4]  129     CALL BRAN 
      00253D 25 29                  130     .word 1$ 
      00253F                        131 2$: _DDROP 
      00253F 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002542 CD 1E E5         [ 4]  132     CALL LOCK 
      002545 81               [ 4]  133     ret 
                                    134 
                                    135 ;--------------------------
                                    136 ; tool to initialize word table 
                                    137 ; WTINIT ( ad -- )
                                    138 ; ad is table address 
                                    139 ;--------------------------
      002546 25 19                  140     .word LINK 
                           002548   141     LINK=.
      002548 06                     142     .byte 6 
      002549 57 54 49 4E 49 54      143     .ascii "WTINIT"
      00254F                        144 WTINIT:
      00254F CD 1D 7F         [ 4]  145     CALL FPSTOR
      002552 CD 1E BD         [ 4]  146     CALL UNLOCK
      002555 CD 0C 2B         [ 4]  147     CALL ZERO 
      002558 CD 0B BF         [ 4]  148 1$: CALL ONEP 
      00255B CD 06 36         [ 4]  149     CALL DUPP
      00255E CD 25 7C         [ 4]  150     CALL INTQ
      002561 CD 04 B5         [ 4]  151     CALL QBRAN 
      002564 25 6E                  152     .word 2$
      002566 CD 1F 8D         [ 4]  153     call WR_WORD 
      002569 CD 04 D1         [ 4]  154     CALL BRAN 
      00256C 25 58                  155     .word 1$ 
      00256E                        156 2$: _DDROP 
      00256E 1C 00 04         [ 2]    1    ADDW X,#2*CELLL 
      002571 CD 1E E5         [ 4]  157     CALL LOCK 
      002574 81               [ 4]  158     ret 
                                    159 
                                    160 ;------------------------
                                    161 ; Prompted input for integer 
                                    162 ; display n+ in bracket and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 135.
Hexadecimal [24-Bits]



                                    163 ; '?' 
                                    164 ; [N]? ( n+ -- a )
                                    165 ;------------------------
      002575 25 48                  166     .word LINK 
                           002577   167     LINK=.
      002577 04                     168     .byte 4
      002578 5B 4E 5D 3F            169     .ascii "[N]?" 
      00257C                        170 INTQ:
      00257C CD 10 9A         [ 4]  171     CALL CR 
      00257F CD 04 8C         [ 4]  172     call DOLIT 
      002582 00 5B                  173     .word '[
      002584 CD 04 53         [ 4]  174     CALL EMIT 
      002587 CD 11 40         [ 4]  175     CALL DOT 
      00258A CD 10 C7         [ 4]  176     CALL  DOTQP
      00258D 03                     177     .byte 3
      00258E 5D 3F 20               178     .ascii "]? " 
      002591 CD 14 CE         [ 4]  179     CALL QUERY 
      002594 CD 12 F9         [ 4]  180     call TOKEN 
      002597 CC 0F 7E         [ 2]  181     jp NUMBQ
                                    182 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 136.
Hexadecimal [24-Bits]



                                   4701 .endif
                           000000  4702 .if WANT_DOUBLE 
                                   4703         .include "double.asm"
                                   4704 .endif 
                           000000  4705 .if WANT_FLOAT 
                                   4706         .include "float.asm"
                                   4707 .endif 
                           000000  4708 .if WANT_FLOAT24 
                                   4709         .include "float24.asm"
                                   4710 .endif 
                                   4711 
                                   4712 ;===============================================================
                                   4713 
                           002577  4714 LASTN =	LINK   ;last name defined
                                   4715 
                                   4716 ; application code begin here
      002600                       4717 	.bndry 128 ; align on flash block  
      002600                       4718 app_space: 
      002600 00 00 00 00 00 00 00  4719 .word 0,0,0,0
             00
                                   4720 
                                   4721 
                                   4722 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 137.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000912 R   |   6 ABOR1      00150A R
  6 ABOR2      001521 R   |   6 ABORQ      001502 R   |   6 ABORT      0014F3 R
  6 ABRTQ      0017ED R   |   6 ABSS       000909 R   |   6 ACCEP      001489 R
  6 ACCP1      001492 R   |   6 ACCP2      0014B8 R   |   6 ACCP3      0014BB R
  6 ACCP4      0014BD R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     ADDWX   =  00001C 
  6 ADRADJ     0007D9 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        0017D8 R   |   6 AGAIN      001722 R
  6 AHEAD      001785 R   |   6 ALLOT      00162F R   |   6 ANDD       000693 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         000500 R   |   6 ATEXE      000D3B R
  6 AUTORUN    000145 R   |     AWU_APR =  0050F1     |     AWU_CSR =  0050F0 
    AWU_TBR =  0050F2     |     B0_MASK =  000001     |     B115200 =  000006 
  6 B115K2     0003FD R   |     B19200  =  000003     |   6 B19K2      0003DA R
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
  6 B2K4       0003AB R   |     B2_MASK =  000004     |     B38400  =  000004 
    B3_MASK =  000008     |     B460800 =  000008     |     B4800   =  000001 
  6 B4K8       0003B9 R   |     B4_MASK =  000010     |     B57600  =  000005 
  6 B57K6      0003EB R   |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 B9K6       0003C9 R   |   6 BACK1      001431 R   |   6 BASE       0006FC R
    BASEE   =  00000A     |   6 BAUD       00040D R   |     BCNT    =  000001 
  6 BCOMP      001672 R   |   6 BDIGS      000E33 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001704 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001286 R   |   6 BKSP       001401 R   |     BKSPP   =  000008 
  6 BLANK      000C1E R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       0004D1 R   |     BTW     =  000001 
  6 BUF2ROW    00231E R   |   6 BYE        0000D2 R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CALLOT     0024B6 R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  00002A 
    CASE_SEN=  000000     |   6 CAT        00051E R   |   6 CCOMMA     001654 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000BA3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 138.
Hexadecimal [24-Bits]

Symbol Table

  6 CELLP      000B94 R   |   6 CELLS      000BB2 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      001071 R
  6 CHAR2      001074 R   |   6 CHKIVEC    00220C R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000D6E R   |   6 CMOV2      000D82 R   |   6 CMOV3      000D96 R
  6 CMOVE      000D52 R   |     CNT     =  000001     |     CNTDWN  =  000032 
  6 CNTXT      00077F R   |   6 COLD       001CFF R   |   6 COLD1      001CFF R
  6 COLON      0019CC R   |   6 COMMA      00163D R   |   6 COMPI      001682 R
    COMPO   =  000040     |   6 COMPONLY   001A18 R   |   6 CONSTANT   001A8D R
  6 COPYRIGH   001C49 R   |   6 COUNT      000CEE R   |   6 CPP        00079B R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         00109A R
  6 CREAT      001A29 R   |     CRR     =  00000D     |   6 CSTOR      00050D R
  6 CTABLE     0024D7 R   |   6 CTAT       0024F8 R   |   6 CTINIT     002520 R
  6 DAT        000CD2 R   |     DATSTK  =  001680     |   6 DCONST     001AC2 R
  6 DDROP      000839 R   |   6 DDUP       000844 R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000EE3 R   |   6 DEPTH      000C6D R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000F28 R
  6 DI         0000E0 R   |   6 DIG        000E5C R   |   6 DIGIT      000DF7 R
  6 DIGS       000E6D R   |   6 DIGS1      000E6D R   |   6 DIGS2      000E7A R
  6 DIGTQ      000EF7 R   |     DISCOVER=  000000     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        0008D0 R   |   6 DNEGA      0008B5 R
  6 DOCONST    001AAD R   |   6 DOLIT      00048C R   |   6 DONXT      0004A0 R
    DOORBELL=  000000     |   6 DOSTR      0010AA R   |   6 DOT        001140 R
  6 DOT1       001155 R   |   6 DOTI1      001C12 R   |   6 DOTID      001BFC R
  6 DOTO1      001596 R   |   6 DOTOK      00157C R   |   6 DOTPR      001267 R
  6 DOTQ       001807 R   |   6 DOTQP      0010C7 R   |   6 DOTR       0010D5 R
  6 DOTS       001B9E R   |   6 DOTS1      001BA9 R   |   6 DOTS2      001BB2 R
  6 DOVAR      0006EC R   |   6 DO_DCONS   001AE5 R   |     DP      =  000005 
  6 DROP       00062C R   |   6 DSTOR      000CB9 R   |   6 DUMP       001B54 R
  6 DUMP1      001B6B R   |   6 DUMP3      001B8D R   |   6 DUMPP      001B23 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 139.
Hexadecimal [24-Bits]

Symbol Table

  6 DUPP       000636 R   |   6 EDIGS      000E98 R   |   6 EECSTORE   001FBD R
  6 EEPCP      001DE3 R   |   6 EEPLAST    001DB6 R   |   6 EEPROM     001D9E R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_R=  000010 
    EEPROM_S=  000800     |   6 EEPRUN     001DCD R   |   6 EEPVP      001DF9 R
  6 EESTORE    002009 R   |   6 EE_CCOMM   0022D3 R   |   6 EE_COMMA   0022B2 R
  6 EE_CREAD   001F4E R   |   6 EE_READ    001F2C R   |   6 EI         0000D9 R
  6 ELSEE      00175D R   |   6 EMIT       000453 R   |     EOL_CR  =  000001 
    EOL_LF  =  000000     |   6 EQ1        000924 R   |   6 EQUAL      000917 R
  6 ERASE      000DC5 R   |     ERR     =  00001B     |   6 EVAL       0015BF R
  6 EVAL1      0015BF R   |   6 EVAL2      0015D8 R   |   6 EXE1       000D49 R
  6 EXECU      0004E1 R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000E1F R   |   6 FADDR      0023A0 R
  6 FALSE      000885 R   |   6 FARAT      001E64 R   |   6 FARCAT     001E70 R
  6 FC_XOFF    000480 R   |   6 FC_XON     00046A R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000DA5 R   |   6 FILL0      000DB3 R
  6 FILL1      000DBB R   |   6 FIND       00135D R   |   6 FIND1      00137B R
  6 FIND2      0013A9 R   |   6 FIND3      0013B5 R   |   6 FIND4      0013C9 R
  6 FIND5      0013D6 R   |   6 FIND6      0013BA R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  6 FMOVE      0023AB R   |   6 FMOVE2     0023DC R   |   6 FOR        0016CC R
  6 FORGET     000176 R   |   6 FORGET1    0001A5 R   |   6 FORGET2    00022B R
  6 FORGET4    000234 R   |   6 FORGET6    0001ED R   |   6 FPSTOR     001D7F R
    FPTR    =  000034     |   6 FREEVAR    000241 R   |   6 FREEVAR4   000277 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 GREAT      000970 R   |   6 GREAT1     00097B R
  6 HDOT       001124 R   |   6 HERE       000D05 R   |   6 HEX        000ECE R
  6 HI         001CB4 R   |   6 HLD        00076C R   |   6 HOLD       000E43 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 140.
Hexadecimal [24-Bits]

Symbol Table

    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     0019DD R   |   6 IFETCH     0016EA R
  6 IFF        001735 R   |   6 IFMOVE     002484 R   |     IMEDD   =  000080 
  6 IMM01      0019F4 R   |   6 IMMED      0019EF R   |   6 INCH       000447 R
  6 INC_FPTR   001EF9 R   |   6 INITOFS    0019A5 R   |   6 INN        00071A R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      00155E R   |   6 INTER      001534 R
  6 INTQ       00257C R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      000892 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0018F4 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JFETCH     0016F5 R   |     JPIMM   =  0000CC     |   6 JSRC       001949 R
  6 JSRC1      00196C R   |   6 JSRC2      00198F R   |   6 KEY        00101F R
  6 KTAP       00144E R   |   6 KTAP1      001471 R   |   6 KTAP2      001474 R
  6 LAST       0007AB R   |   6 LASTN   =  002577 R   |   6 LBRAC      00156B R
    LED_BIT =  000005     |     LED_CR1 =  00500D     |     LED_CR2 =  00500E 
    LED_DDR =  00500C     |     LED_MASK=  000020     |     LED_PORT=  00500A 
  6 LESS       000943 R   |     LF      =  00000A     |   6 LINK    =  002577 R
  6 LITER      0016A4 R   |   6 LOCAL      000571 R   |   6 LOCK       001EE5 R
  6 LSHIFT     000BDD R   |   6 LSHIFT1    000BE6 R   |   6 LSHIFT4    000BEE R
  6 LT1        00094E R   |     MASKK   =  001F7F     |   6 MAX        000988 R
  6 MAX1       000992 R   |   6 MIN        00099C R   |   6 MIN1       0009A6 R
  6 MMOD1      000A55 R   |   6 MMOD2      000A69 R   |   6 MMOD3      000A80 R
  6 MMSM0      0009E5 R   |   6 MMSM1      0009F5 R   |   6 MMSM3      0009F9 R
  6 MMSM4      000A05 R   |   6 MMSMa      000A00 R   |   6 MMSMb      000A0B R
  6 MODD       000ADB R   |   6 MONE       000C44 R   |     MS      =  000030 
  6 MSEC       0002ED R   |   6 MSMOD      000A38 R   |   6 MSTA1      000B6C R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 141.
Hexadecimal [24-Bits]

Symbol Table

  6 MSTAR      000B49 R   |     NAFR    =  004804     |   6 NAMEQ      0013F6 R
  6 NAMET      001307 R   |     NCLKOPT =  004808     |   6 NEGAT      0008A3 R
  6 NEX1       0004AD R   |   6 NEXT       0016DB R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NRAT       0005BC R   |   6 NRDROP     000598 R   |   6 NROT       000819 R
  6 NRSTO      0005DB R   |   6 NTIB       00072A R   |     NUBC    =  004802 
    NUCLEO_8=  000000     |     NUCLEO_8=  000001     |     NUCLEO_8=  000001 
  6 NUFQ       001035 R   |   6 NUFQ1      00104E R   |   6 NUMBQ      000F7E R
  6 NUMQ1      000FB2 R   |   6 NUMQ3      000FF6 R   |   6 NUMQ4      001000 R
  6 NUMQ6      001008 R   |   6 NUMQ9      001010 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     0007D0 R
    OFS     =  000005     |   6 ONE        000C36 R   |   6 ONEM       000BCC R
  6 ONEP       000BBF R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000049 R   |   6 ORR        0006A7 R   |   6 OUTPUT     000458 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       00065E R   |   6 OVERT      0018C2 R
    PA      =  000000     |   6 PACKS      000DD6 R   |   6 PAD        000D16 R
  6 PAREN      001276 R   |   6 PARS       00116F R   |   6 PARS1      00119A R
  6 PARS2      0011C5 R   |   6 PARS3      0011C8 R   |   6 PARS4      0011D1 R
  6 PARS5      0011F4 R   |   6 PARS6      001209 R   |   6 PARS7      001218 R
  6 PARS8      001227 R   |   6 PARSE      001238 R   |   6 PAUSE      0002FD R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001B36 R   |   6 PDUM2      001B47 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000C84 R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       000859 R
  6 PNAM1      001871 R   |   6 PRESE      0015E7 R   |   6 PRINT_VE   001C85 R
    PROD1   =  000024     |     PROD2   =  000026     |     PROD3   =  000028 
  6 PROTECTE   00021D R   |   6 PRT_LICE   001C71 R   |   6 PSTOR      000C9B R
    PTR16   =  000035     |     PTR8    =  000036     |   6 PTRPLUS    001F11 R
  6 QBRAN      0004B5 R   |   6 QDUP       0007E9 R   |   6 QDUP1      0007F3 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 142.
Hexadecimal [24-Bits]

Symbol Table

  6 QKEY       000435 R   |   6 QSTAC      0015A2 R   |   6 QUERY      0014CE R
  6 QUEST      001162 R   |   6 QUIT       001604 R   |   6 QUIT1      00160C R
  6 QUIT2      00160F R   |   6 RAM2EE     00234C R   |     RAMBASE =  000000 
  6 RAMLAST    0007BE R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RANDOM     00029B R   |   6 RAT        000562 R
  6 RBRAC      001936 R   |   6 REPEA      0017B8 R   |   6 RFREE      002333 R
  6 RFROM      000551 R   |     ROP     =  004800     |   6 ROT        0007FA R
  6 ROW2BUF    0022F5 R   |     ROWBUFF =  001680     |     RP0     =  00002E 
  6 RPAT       00052E R   |     RPP     =  0017FF     |   6 RPSTO      00053B R
  6 RSHIFT     000BF9 R   |   6 RSHIFT1    000C02 R   |   6 RSHIFT4    000C0A R
    RST_SR  =  0050B3     |   6 SAME1      001325 R   |   6 SAME2      00134E R
  6 SAMEQ      00131D R   |   6 SCOM1      0018A6 R   |   6 SCOM2      0018A9 R
  6 SCOMP      001888 R   |   6 SEED       000282 R   |     SEEDX   =  000038 
    SEEDY   =  00003A     |   6 SEMIS      0018D2 R   |   6 SETISP     0000EC R
  6 SET_RAML   001A76 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000E82 R   |   6 SIGN1      000E92 R   |   6 SLASH      000AE5 R
  6 SLMOD      000A88 R   |   6 SLMOD1     000AC5 R   |   6 SLMOD8     000AD2 R
  6 SNAME      00183B R   |     SP0     =  00002C     |   6 SPACE      001057 R
  6 SPACS      001066 R   |   6 SPAT       000616 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      000623 R   |   6 SSMOD      000B75 R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000B3E R   |   6 STASL      000B86 R
  6 STOD       0008D8 R   |   6 STORE      0004EE R   |   6 STR        000EB0 R
  6 STRCQ      0016AC R   |   6 STRQ       0017FA R   |   6 STRQP      0010C3 R
  6 SUBB       0008EF R   |   6 SWAPP      000646 R   |     SWIM_CSR=  007F80 
  6 TAP        001438 R   |   6 TBOOT      001CF3 R   |   6 TBRAN      0004C3 R
  6 TBUF       00073A R   |     TBUFFBAS=  001680     |   6 TCHAR      000C55 R
  6 TEMP       00070B R   |   6 TEVAL      00075D R   |   6 TFLASH     00074C R
  6 THENN      00174A R   |   6 TIB        000D27 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       00161B R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 143.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  000000     |     TIM2_CCE=  000001 
    TIM2_CCE=  000004     |     TIM2_CCE=  000005     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCM=  000000     |     TIM2_CCM=  000004     |     TIM2_CCM=  000003 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_CR1=  000007     |     TIM2_CR1=  000000     |     TIM2_CR1=  000003 
    TIM2_CR1=  000001     |     TIM2_CR1=  000002     |     TIM2_EGR=  005304 
    TIM2_EGR=  000001     |     TIM2_EGR=  000002     |     TIM2_EGR=  000003 
    TIM2_EGR=  000006     |     TIM2_EGR=  000000     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   00032D R   |   6 TIMER      000317 R   |     TIM_CR1_=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 144.
Hexadecimal [24-Bits]

Symbol Table

    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      001BCC R   |   6 TNAM3      001BEA R
  6 TNAM4      001BF0 R   |   6 TNAME      001BC9 R   |   6 TOFLASH    000352 R
  6 TOKEN      0012F9 R   |   6 TOR        0005FF R   |   6 TORAM      000392 R
  6 TRUE       000874 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000C11 R
  6 TYPE1      001086 R   |   6 TYPE2      00108C R   |   6 TYPES      001081 R
  6 Timer4Ha   000005 R   |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  005000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00500F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  005232 
    UART_BRR=  005233     |     UART_CR1=  005234     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  005235     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PCK=  000002 
    UART_POR=  005000     |     UART_POR=  005003     |     UART_POR=  005004 
    UART_POR=  005002     |     UART_POR=  005001     |     UART_POR=  005000 
    UART_PSC=  00000A     |     UART_RX_=  000004     |     UART_SR =  005230 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UART_TX_=  000005 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000016 
    UCP     =  00001A     |     UCTIB   =  00000E     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       001110 R   |   6 UDOTR      0010F0 R   |   6 UEND       000047 R
    UFPSW   =  000008     |   6 UGREAT     00095A R   |   6 UGREAT1    000965 R
    UHLD    =  000014     |     UINN    =  00000C     |     UINTER  =  000012 
    ULAST   =  00001C     |   6 ULES1      000938 R   |   6 ULESS      00092D R
  6 UMMOD      0009CE R   |   6 UMSTA      000AF4 R   |   6 UNIQ1      001838 R
  6 UNIQU      001819 R   |   6 UNLKEE     001E7F R   |   6 UNLKFL     001E9E R
  6 UNLOCK     001EBD R   |   6 UNTIL      00170F R   |     UOFFSET =  00001E 
  6 UPDATCP    001E3C R   |   6 UPDATLAS   001E13 R   |   6 UPDATPTR   00243F R
  6 UPDATRUN   001E2B R   |   6 UPDATVP    001E53 R   |   6 UPL1       0006E8 R
  6 UPLUS      0006D1 R   |     UPP     =  000006     |   6 UPPER      0012BC R
  6 UPPER1     0012DF R   |   6 UPPER2     0012E8 R   |     URLAST  =  000022 
  6 USLMOD     000A1D R   |     USR_BTN_=  000004     |     USR_BTN_=  000010 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 145.
Hexadecimal [24-Bits]

Symbol Table

    USR_BTN_=  005015     |     UTFLASH =  000020     |     UTIB    =  000010 
    UTMP    =  00000A     |   6 UTYP1      001B06 R   |   6 UTYP2      001B15 R
  6 UTYPE      001B01 R   |     UVP     =  000018     |   6 UZERO      00002B R
  6 VARIA      001A43 R   |     VAR_BASE=  000080     |     VAR_TOP =  0017BF 
    VER     =  000004     |   6 VPP        00078D R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_DOU=  000000 
    WANT_FLO=  000000     |     WANT_FLO=  000000     |     WANT_SCA=  000000 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      00179E R   |   6 WITHI      0009B3 R   |   6 WORDD      0012A2 R
  6 WORDS      001C26 R   |   6 WORS1      001C2C R   |   6 WORS2      001C48 R
  6 WR_BYTE    001F68 R   |   6 WR_WORD    001F8D R   |   6 WTABLE     0024E6 R
  6 WTAT       00250A R   |   6 WTINIT     00254F R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |     XMEM_SIZ=  017830     |     XOFF    =  000013 
    XON     =  000011     |   6 XORR       0006BC R   |     XTEMP   =  000024 
    YTEMP   =  000026     |     YTMP    =  000003     |   6 ZEQU1      000689 R
  6 ZEQUAL     00067F R   |   6 ZERO       000C2B R   |   6 ZL1        000676 R
  6 ZLESS      00066D R   |   6 app_spac   002600 R   |   6 baudrate   000398 R
  6 block_er   002053 R   |   6 clear_ra   000019 R   |   6 clock_in   000064 R
  6 copy_buf   0020B3 R   |   6 copy_buf   0020D2 R   |   6 copy_pro   0020D2 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   002075 R   |   6 fmove_do   002428 R
  6 main       000016 R   |   6 next_row   0023E5 R   |   6 no_move    00242F R
  6 parse_di   000F31 R   |   6 pristine   002153 R   |   6 proceed_   002078 R
  6 putc       000458 R   |   6 reboot     000344 R   |   6 reset_ve   0021BA R
  6 row_eras   002033 R   |   6 row_eras   00208C R   |   6 row_eras   0020B3 R
  6 set_opti   002127 R   |   6 set_vect   00225B R   |   6 uart_ini   000078 R
  6 write_ro   0020F7 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 146.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2608   flags    0

