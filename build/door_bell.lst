ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board or MCU set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        	.include "inc/stm8s208.inc"
                                        
                                        XMEM_SIZE=96304 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART1_SR
                                        UART_DR=UART1_DR
                                        .endif
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 µC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                 
                                        	.include "inc/stm8s_disco.inc"
                                        .endif 
                                 
                                 
                                 
                                        .endif 
                                        
                                         
                                        
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000000    89 .if NUCLEO 
                                     90 STACK   =	0x17FF 	;system (return) stack empty 
                                     91 DATSTK  =	0x1680	;data stack  empty
                                     92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                                     93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000001    94 .else ; DISCOVERY
                           0007FF    95 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    96 DATSTK  =	0x680	;data stack  empty
                           000680    97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           00001B   169 ERR     =     27      ;error escape
                           000027   170 TIC     =     39      ;tick
                           0000CD   171 CALLL   =     0xCD     ;CALL opcodes
                           000080   172 IRET_CODE =   0x80    ; IRET opcode 
                                    173 
                                    174         .macro _ledon
                                    175         .if NUCLEO
                                    176         bset PC_ODR,#LED2_BIT
                                    177         .else ;DISCOVERY 
                                    178         .if DISCOVERY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         bres PD_ODR,#LD1_BIT 
                                    180         .endif
                                    181         .endif
                                    182         .endm
                                    183 
                                    184         .macro _ledoff
                                    185         .if NUCLEO 
                                    186         bres PC_ODR,#LED2_BIT
                                    187         .else ;DISCOVERY 
                                    188         .if DISCOVERY
                                    189         bset PD_ODR,#LD1_BIT 
                                    190         .endif 
                                    191         .endif
                                    192         .endm
                                    193 
                                    194 ;**********************************************************
                                    195         .area DATA (ABS)
      000000                        196         .org RAMBASE 
                                    197 ;**********************************************************
                                    198 
                                    199 ;**********************************************************
                                    200         .area SSEG (ABS) ; STACK
      001700                        201         .org 0x1700
      001700                        202         .ds 256 
                                    203 ; space for DATSTK,TIB and STACK         
                                    204 ;**********************************************************
                                    205 
                                    206 ;**********************************************************
                                    207         .area HOME ; vectors table
                                    208 ;**********************************************************
      000000 82 00 00 16            209 	int main	        ; reset
      000004 82 00 00 00            210 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            211 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            212 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            213 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            214 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            215 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            216 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            217 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            218 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            219 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            220 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            221 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            222 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            223 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            224 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            225 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            226 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            227 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            228 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            229 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            230 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            231 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            232 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            233 	int NonHandledInterrupt	; irq22
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000064 82 00 00 05            234 	int Timer4Handler	; irq23
      000068 82 00 00 00            235 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            236 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            237 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            238 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            239 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            240 	int NonHandledInterrupt	; irq29
                                    241 
                                    242 ;**********************************************************
                                    243         .area CODE
                                    244 ;**********************************************************
                                    245 
                                    246 ; non handled interrupt reset MCU
      000000                        247 NonHandledInterrupt:
      000000 A6 80            [ 1]  248         ld a, #0x80
      000002 C7 50 D1         [ 1]  249         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    250 	;iret
                                    251 
                                    252 ; used for milliseconds counter 
                                    253 ; MS is 16 bits counter 
      000005                        254 Timer4Handler:
      000005 72 5F 53 42      [ 1]  255 	clr TIM4_SR 
      000009 BE 2E            [ 2]  256         ldw x,MS 
      00000B 5C               [ 1]  257         incw x 
      00000C BF 2E            [ 2]  258         ldw MS,x
      00000E BE 30            [ 2]  259         ldw x,CNTDWN 
      000010 27 03            [ 1]  260         jreq 1$
      000012 5A               [ 2]  261         decw x 
      000013 BF 30            [ 2]  262         ldw CNTDWN,x 
      000015                        263 1$:         
      000015 80               [11]  264         iret 
                                    265 
                                    266 
                                    267 ;; Main entry points and COLD start data
      000016                        268 main:
                                    269 ; clear all RAM
      000016 AE 00 00         [ 2]  270 	ldw X,#RAMBASE
      000019                        271 clear_ram0:
      000019 7F               [ 1]  272 	clr (X)
      00001A 5C               [ 1]  273 	incw X
      00001B A3 07 FF         [ 2]  274 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  275 	jrule clear_ram0
      000020 AE 07 FF         [ 2]  276         ldw x,#RPP
      000023 94               [ 1]  277         ldw sp,x
                                    278 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  279         inc SEEDX+1 
      000026 3C 39            [ 1]  280         inc SEEDY+1          
      000028 CC 00 47         [ 2]  281 	jp ORIG
                                    282 
                                    283 ; COLD initialize these variables.
      00002B                        284 UZERO:
      00002B 00 0A                  285         .word      BASEE   ;BASE
      00002D 00 00                  286         .word      0       ;tmp
      00002F 00 00                  287         .word      0       ;>IN
      000031 00 00                  288         .word      0       ;#TIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000033 07 00                  289         .word      TIBB    ;TIB
      000035 12 DD                  290         .word      INTER   ;'EVAL
      000037 00 00                  291         .word      0       ;HLD
      000039 22 C5                  292         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  293         .word      VAR_BASE   ;variables free space pointer 
      00003D 23 00                  294         .word      app_space ; FLASH free space pointer 
      00003F 22 C5                  295         .word      LASTN   ;LAST
      000041 00 00                  296         .word      0        ; OFFSET 
      000043 00 00                  297         .word      0       ; TFLASH
                                    298 ;       .word      0       ; URLAST   
      000045 00 00                  299 UEND:   .word      0
                                    300 
      000047                        301 ORIG:   
                                    302 ; initialize SP
      000047 AE 07 FF         [ 2]  303         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  304         LDW     SP,X
      00004B BF 2C            [ 2]  305         LDW     RP0,X
      00004D AE 06 80         [ 2]  306         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  307         LDW     SP0,X
                           000000   308 .if NUCLEO        
                                    309 ; initialize PC_5 as output to control LED2
                                    310 ; added by Picatout 
                                    311         bset PC_CR1,#LED2_BIT
                                    312         bset PC_CR2,#LED2_BIT
                                    313         bset PC_DDR,#LED2_BIT
                                    314 .endif 
                           000000   315 .if DISCOVERY
                                    316         bset PD_CR1,#LD1_BIT
                                    317         bset PD_CR2,#LD1_BIT
                                    318         bset PD_DDR,#LD1_BIT 
                                    319 .endif
      000052                        320         _ledoff
                           000000     1         .if NUCLEO 
                                      2         bres PC_ODR,#LED2_BIT
                           000001     3         .else ;DISCOVERY 
                           000000     4         .if DISCOVERY
                                      5         bset PD_ODR,#LD1_BIT 
                                      6         .endif 
                                      7         .endif
                                    321 ; initialize clock to HSI
                                    322 ; no divisor 16Mhz 
                                    323 ; Added by Picatout 
      000052                        324 clock_init:
      000052 72 5F 50 C6      [ 1]  325         clr CLK_CKDIVR
      000056 72 12 50 C5      [ 1]  326 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   327 .if NUCLEO|DOORBELL
      00005A A6 E1            [ 1]  328 	ld a,#CLK_SWR_HSI
                           000000   329 .else ; DISCOVERY as 16Mhz crystal
                                    330 	ld a,#CLK_SWR_HSE
                                    331 .endif 
      00005C C7 50 C4         [ 1]  332 	ld CLK_SWR,a
      00005F C1 50 C3         [ 1]  333 1$:	cp a,CLK_CMSR
      000062 26 FB            [ 1]  334 	jrne 1$
                                    335         
                                    336 ; initialize UART, 115200 8N1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000064                        337 uart_init:
                           000000   338 .if NUCLEO 
                                    339 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    340 	; configure tx pin
                                    341 	bset PA_DDR,#UART1_TX_PIN ; tx pin
                                    342 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
                                    343 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    344 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    345 	mov UART1_BRR2,#0x0b ; must be loaded first
                                    346 	mov UART1_BRR1,#0x8
                                    347 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000001   348 .else ; DISCOVERY use UART2 
      000064 72 16 50 C7      [ 1]  349 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    350 	; configure tx pin
      000068 72 1A 50 11      [ 1]  351 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      00006C 72 1A 50 12      [ 1]  352 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000070 72 1A 50 13      [ 1]  353 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    354 	; baud rate 115200 Fmaster=8Mhz  
      000074 35 0B 52 43      [ 1]  355 	mov UART2_BRR2,#0x0b ; must be loaded first
      000078 35 08 52 42      [ 1]  356 	mov UART2_BRR1,#0x8
      00007C 35 0C 52 45      [ 1]  357 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    358 .endif
                                    359 ; initialize timer4, used for millisecond interrupt  
      000080 35 07 53 45      [ 1]  360 	mov TIM4_PSCR,#7 ; prescale 128  
      000084 35 7D 53 46      [ 1]  361 	mov TIM4_ARR,#125 ; set for 1msec.
      000088 35 05 53 40      [ 1]  362 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00008C 72 10 53 41      [ 1]  363 	bset TIM4_IER,#TIM4_IER_UIE 
                                    364 ; set TIM4 interrupt priority to highest
      000090 A6 3F            [ 1]  365         ld a,#~(IPR_MASK<<6)
      000092 C4 7F 75         [ 1]  366         and a,ITC_SPR6
      000095 AA C0            [ 1]  367         or a,#(IPR3<<6)
      000097 C7 7F 75         [ 1]  368         ld ITC_SPR6,a 
      00009A 9A               [ 1]  369         rim
      00009B CC 19 E2         [ 2]  370         jp  COLD   ;default=MN1
                                    371 
                                    372 
                                    373 ;; place MCU in sleep mode with
                                    374 ;; halt opcode 
                                    375 ;; BYE ( -- )
      00009E 00 00                  376         .word 0
                           0000A0   377         LINK=.
      0000A0 03                     378         .byte 3 
      0000A1 42 59 45               379         .ascii "BYE"
      0000A4                        380 BYE: 
      0000A4 8E               [10]  381         halt 
      0000A5 81               [ 4]  382         ret 
                                    383 
                                    384 ; Enable interrupts 
                                    385 ; EI ( -- )
      0000A6 00 A0                  386         .word LINK 
                           0000A8   387         LINK=.
      0000A8 02                     388         .byte 2
      0000A9 45 49                  389         .ascii "EI"
      0000AB                        390 EI:
      0000AB 9A               [ 1]  391         rim 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000AC 81               [ 4]  392         ret 
                                    393 
                                    394 ; Disable interrupts
                                    395 ; DI ( -- )
      0000AD 00 A8                  396         .word LINK 
                           0000AF   397         LINK=.
      0000AF 02                     398         .byte 2 
      0000B0 44 49                  399         .ascii "DI"
      0000B2                        400 DI:
      0000B2 9B               [ 1]  401         sim 
      0000B3 81               [ 4]  402         ret 
                                    403 
                                    404 ; set interrupt priority level 
                                    405 ; SET-ISP ( n1 n2 -- )
                                    406 ; n1 level {1..3}
                                    407 ; n2 vector {0..29}
      0000B4 00 AF                  408         .word LINK 
                           0000B6   409         LINK=.
      0000B6 07                     410         .byte 7 
      0000B7 53 45 54 2D 49 53 50   411         .ascii "SET-ISP"
      0000BE                        412 SETISP:
      0000BE 90 93            [ 1]  413         ldw y,x 
      0000C0 90 FE            [ 2]  414         ldw y,(y)
      0000C2 A6 04            [ 1]  415         ld a,#4 ; 4 slot per register 
                                    416 ;  quotient select register, remainder select slot in register.        
      0000C4 90 62            [ 2]  417         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000C6 A4 03            [ 1]  418         and a,#3 
      0000C8 48               [ 1]  419         sll a ; 2*SLOT  lshift 
      0000C9 72 A9 7F 70      [ 2]  420         addw y,#ITC_SPR1 
      0000CD FF               [ 2]  421         ldw (x),y  ; ( level reg -- )
      0000CE 90 5F            [ 1]  422         clrw y 
      0000D0 90 97            [ 1]  423         ld yl,a 
      0000D2 1D 00 02         [ 2]  424         subw x,#CELLL 
      0000D5 FF               [ 2]  425         ldw (x),y  ; ( level reg lshift -- )
      0000D6 90 93            [ 1]  426         ldw y,x 
      0000D8 90 EE 02         [ 2]  427         ldw y,(2,y) 
      0000DB 90 F6            [ 1]  428         ld a,(y)   ; reg_value
      0000DD 1D 00 02         [ 2]  429         subw x,#CELLL 
      0000E0 FF               [ 2]  430         ldw (x),y ; ( level reg lshift rval -- )
      0000E1 CD 04 F3         [ 4]  431         call OVER ; ( level reg lshift rval lshift -- )
      0000E4 CD 03 A4         [ 4]  432         call DOLIT 
      0000E7 00 03                  433         .word 3
      0000E9 CD 04 D9         [ 4]  434         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000EC CD 09 DC         [ 4]  435         call LSHIFT ; creat slot mask 
      0000EF CD 06 DE         [ 4]  436         call INVER  ; ( level reg lshift rval mask )
      0000F2 CD 05 15         [ 4]  437         call ANDD ; ( level reg lshift slot_masked )
      0000F5 CD 04 92         [ 4]  438         call TOR  ; ( level reg lshift -- R: slot_masked )
      0000F8 CD 06 84         [ 4]  439         call ROT  ; ( reg lshift level )
      0000FB CD 04 D9         [ 4]  440         call SWAPP ; ( reg level lshift )
      0000FE CD 09 DC         [ 4]  441         call LSHIFT  ; ( reg slot_level -- )
      000101 CD 04 73         [ 4]  442         call RFROM ; ( reg slot_level masked_val )
      000104 CD 05 29         [ 4]  443         call ORR   ; ( reg updated_rval )
      000107 CD 04 D9         [ 4]  444         call SWAPP 
      00010A CD 04 2F         [ 4]  445         call CSTOR
                                    446 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    447 ; sélectionne l'application 
                                    448 ; qui démarre automatique lors 
                                    449 ; d'un COLD start 
      00010D 00 B6                  450         .word LINK 
                           00010F   451         LINK=.
      00010F 07                     452         .byte 7
      000110 41 55 54 4F 52 55 4E   453         .ascii "AUTORUN"
      000117                        454 AUTORUN:
      000117 CD 10 A2         [ 4]  455         call TOKEN 
      00011A CD 04 C9         [ 4]  456         call DUPP 
      00011D CD 03 D7         [ 4]  457         call QBRAN 
      000120 01 FD                  458         .word FORGET2
      000122 CD 11 9F         [ 4]  459         call NAMEQ
      000125 CD 06 73         [ 4]  460         call QDUP 
      000128 CD 03 D7         [ 4]  461         call QBRAN 
      00012B 01 FD                  462         .word FORGET2
      00012D CD 04 BF         [ 4]  463         call DROP 
      000130 1D 00 04         [ 2]  464         subw x,#2*CELLL 
      000133 90 5F            [ 1]  465         clrw y 
      000135 FF               [ 2]  466         ldw (x),y 
      000136 90 AE 40 02      [ 2]  467         ldw y,#APP_RUN 
      00013A EF 02            [ 2]  468         ldw (2,x),y 
      00013C CC 1C B8         [ 2]  469         jp EESTORE 
                                    470 
                                    471 ;; Reset dictionary pointer before 
                                    472 ;; forgotten word. RAM space and 
                                    473 ;; interrupt vector defined after 
                                    474 ;; must be resetted also.
      00013F 01 0F                  475         .word LINK 
                           000141   476         LINK=.
      000141 06                     477         .byte 6
      000142 46 4F 52 47 45 54      478         .ascii "FORGET" 
      000148                        479 FORGET: 
      000148 CD 10 A2         [ 4]  480         call TOKEN
      00014B CD 04 C9         [ 4]  481         call DUPP 
      00014E CD 03 D7         [ 4]  482         call QBRAN 
      000151 01 FD                  483         .word FORGET2
      000153 CD 11 9F         [ 4]  484         call NAMEQ ; ( a -- ca na | a F )
      000156 CD 06 73         [ 4]  485         call QDUP 
      000159 CD 03 D7         [ 4]  486         call QBRAN 
      00015C 01 FD                  487         .word FORGET2
                                    488 ; only forget users words 
      00015E CD 04 C9         [ 4]  489         call DUPP ; ( ca na na )
      000161 CD 03 A4         [ 4]  490         call DOLIT 
      000164 23 00                  491         .word app_space 
      000166 CD 04 D9         [ 4]  492         call SWAPP 
      000169 CD 07 84         [ 4]  493         call  ULESS 
      00016C CD 03 D7         [ 4]  494         call QBRAN 
      00016F 01 BF                  495         .word FORGET6 
                                    496 ; ( ca na -- )        
                                    497 ;reset ivec with address >= ca
      000171 CD 04 D9         [ 4]  498         call SWAPP ; ( na ca -- ) 
      000174 CD 1E A9         [ 4]  499         call CHKIVEC ; ( na -- ) 
                                    500 ; start at LAST and link back to na 
                                    501 ; if variable found reset VP at that point.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000177                        502 FORGET1:
      000177 CD 06 35         [ 4]  503         call LAST 
      00017A CD 04 22         [ 4]  504         call AT 
      00017D CD 04 C9         [ 4]  505         call DUPP  ; ( -- na last last )
      000180 CD 02 13         [ 4]  506         call FREEVAR ; ( -- na last )
      000183 CD 04 C9         [ 4]  507         call DUPP 
      000186 CD 03 A4         [ 4]  508         call DOLIT 
      000189 00 02                  509         .word 2 
      00018B CD 07 3D         [ 4]  510         call SUBB ; ( na last -- na last lfa ) link address 
      00018E CD 04 22         [ 4]  511         call AT 
      000191 CD 04 C9         [ 4]  512         call DUPP ; ( -- na last a a )
      000194 CD 06 09         [ 4]  513         call CNTXT 
      000197 CD 04 0B         [ 4]  514         call STORE
      00019A CD 06 35         [ 4]  515         call LAST  
      00019D CD 04 0B         [ 4]  516         call STORE ; ( --  na last )
      0001A0 CD 04 F3         [ 4]  517         call OVER 
      0001A3 CD 07 65         [ 4]  518         call EQUAL ; ( na last na -- na T|F ) 
      0001A6 CD 03 D7         [ 4]  519         call QBRAN 
      0001A9 01 77                  520         .word FORGET1 
                                    521 ; ( na -- )
      0001AB CD 03 A4         [ 4]  522         call DOLIT 
      0001AE 00 02                  523         .word 2 
      0001B0 CD 07 3D         [ 4]  524         call SUBB 
      0001B3 CD 06 25         [ 4]  525         call CPP 
      0001B6 CD 04 0B         [ 4]  526         call STORE  
      0001B9 CD 1B 0E         [ 4]  527         call UPDATCP 
      0001BC CC 1A E5         [ 2]  528         jp UPDATLAST 
      0001BF                        529 FORGET6: ; tried to forget a RAM or system word 
                                    530 ; ( ca na -- )
      0001BF 1D 00 02         [ 2]  531         subw x,#CELLL 
      0001C2 90 BE 2A         [ 2]  532         ldw y,SP0 
      0001C5 FF               [ 2]  533         ldw (x),y  
      0001C6 CD 07 84         [ 4]  534         call ULESS
      0001C9 CD 03 D7         [ 4]  535         call QBRAN 
      0001CC 01 EF                  536         .word PROTECTED 
      0001CE CD 12 AB         [ 4]  537         call ABORQ 
      0001D1 1D                     538         .byte 29
      0001D2 20 46 6F 72 20 52 41   539         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001EF                        540 PROTECTED:
      0001EF CD 12 AB         [ 4]  541         call ABORQ
      0001F2 0A                     542         .byte 10
      0001F3 20 50 72 6F 74 65 63   543         .ascii " Protected"
             74 65 64
      0001FD                        544 FORGET2: ; no name or not found in dictionary 
      0001FD CD 12 AB         [ 4]  545         call ABORQ
      000200 05                     546         .byte 5
      000201 20 77 68 61 74         547         .ascii " what"
      000206                        548 FORGET4:
      000206 CC 04 BF         [ 2]  549         jp DROP 
                                    550 
                                    551 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    552 ;---------------------------------
                                    553 ; if na is variable 
                                    554 ; free variable data  
                                    555 ; FREEVAR ( na -- )
                                    556 ;---------------------------------
      000209 01 41                  557         .word LINK 
                           00020B   558         LINK=.
      00020B 07                     559         .byte 7 
      00020C 46 52 45 45 56 41 52   560         .ascii "FREEVAR"
      000213                        561 FREEVAR:
      000213 CD 04 C9         [ 4]  562         call DUPP ; ( na na -- )
      000216 CD 04 40         [ 4]  563         CALL CAT  ; ( na c -- )
      000219 CD 09 BE         [ 4]  564         call ONEP ;
      00021C CD 06 C4         [ 4]  565         CALL PLUS ; ( na c+1 -- ca ) 
      00021F CD 09 BE         [ 4]  566         call ONEP ; ( ca+ -- ) to get routne address 
      000222 CD 04 C9         [ 4]  567         call DUPP ; ( ca+ ca+ -- )
      000225 CD 04 22         [ 4]  568         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000228 CD 03 A4         [ 4]  569         call DOLIT 
      00022B 05 76                  570         .word DOVAR ; if routine address is DOVAR then variable 
      00022D CD 07 65         [ 4]  571         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000230 CD 03 D7         [ 4]  572         call QBRAN 
      000233 02 49                  573         .word FREEVAR4 
      000235 CD 03 A4         [ 4]  574         call DOLIT 
      000238 00 02                  575         .word 2 
      00023A CD 06 C4         [ 4]  576         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00023D CD 04 22         [ 4]  577         call AT 
      000240 CD 06 17         [ 4]  578         call VPP   
      000243 CD 04 0B         [ 4]  579         call STORE 
      000246 CC 1B 25         [ 2]  580         jp UPDATVP 
      000249                        581 FREEVAR4: ; not variable
      000249 CC 04 BF         [ 2]  582         jp  DROP 
                                    583 
                                    584 ;    SEED ( n -- )
                                    585 ; Initialize PRNG seed with n 
      00024C 02 0B                  586         .word LINK 
                           00024E   587         LINK=. 
      00024E 04                     588         .byte 4 
      00024F 53 45 45 44            589         .ascii "SEED" 
      000253                        590 SEED:
      000253 90 93            [ 1]  591         ldw y,x 
      000255 1C 00 02         [ 2]  592         addw x,#CELLL
      000258 90 FE            [ 2]  593         ldw y,(y)
      00025A 90 9E            [ 1]  594         ld a,yh 
      00025C B7 36            [ 1]  595         ld SEEDX,a 
      00025E 90 9F            [ 1]  596         ld a,yl 
      000260 B7 38            [ 1]  597         ld SEEDY,a 
      000262 81               [ 4]  598         ret 
                                    599 
                                    600 ;    RANDOM ( u1 -- u2 )
                                    601 ; Pseudo random number betwen 0 and u1-1
      000263 02 4E                  602         .word LINK 
                           000265   603         LINK=.
      000265 06                     604         .byte 6
      000266 52 41 4E 44 4F 4D      605         .ascii "RANDOM" 
      00026C                        606 RANDOM:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    607 ;local variable 
                           000001   608         SPSAVE=1
                           000002   609         VSIZE=2 
      00026C 52 02            [ 2]  610         sub sp,#VSIZE
      00026E 1F 01            [ 2]  611         ldw (SPSAVE,sp),x  
                                    612 ; XTEMP=(SEEDX<<5)^SEEDX 
      000270 90 93            [ 1]  613         ldw y,x 
      000272 90 FE            [ 2]  614         ldw y,(y)
      000274 90 BF 24         [ 2]  615         ldw YTEMP,y 
      000277 BE 36            [ 2]  616 	ldw x,SEEDX 
      000279 58               [ 2]  617 	sllw x 
      00027A 58               [ 2]  618 	sllw x 
      00027B 58               [ 2]  619 	sllw x 
      00027C 58               [ 2]  620 	sllw x 
      00027D 58               [ 2]  621 	sllw x 
      00027E 9E               [ 1]  622 	ld a,xh 
      00027F B8 36            [ 1]  623 	xor a,SEEDX 
      000281 B7 22            [ 1]  624 	ld XTEMP,a 
      000283 9F               [ 1]  625 	ld a,xl 
      000284 B8 37            [ 1]  626 	xor a,SEEDX+1 
      000286 B7 23            [ 1]  627 	ld XTEMP+1,a 
                                    628 ; SEEDX=SEEDY 
      000288 BE 38            [ 2]  629 	ldw x,SEEDY 
      00028A BF 36            [ 2]  630 	ldw SEEDX,x  
                                    631 ; SEEDY=SEEDY^(SEEDY>>1)
      00028C 54               [ 2]  632 	srlw x 
      00028D 9E               [ 1]  633 	ld a,xh 
      00028E B8 38            [ 1]  634 	xor a,SEEDY 
      000290 B7 38            [ 1]  635 	ld SEEDY,a  
      000292 9F               [ 1]  636 	ld a,xl 
      000293 B8 39            [ 1]  637 	xor a,SEEDY+1 
      000295 B7 39            [ 1]  638 	ld SEEDY+1,a 
                                    639 ; XTEMP>>3 
      000297 BE 22            [ 2]  640 	ldw x,XTEMP 
      000299 54               [ 2]  641 	srlw x 
      00029A 54               [ 2]  642 	srlw x 
      00029B 54               [ 2]  643 	srlw x 
                                    644 ; x=XTEMP^x 
      00029C 9E               [ 1]  645 	ld a,xh 
      00029D B8 22            [ 1]  646 	xor a,XTEMP 
      00029F 95               [ 1]  647 	ld xh,a 
      0002A0 9F               [ 1]  648 	ld a,xl 
      0002A1 B8 23            [ 1]  649 	xor a,XTEMP+1  
      0002A3 97               [ 1]  650 	ld xl,a 
                                    651 ; SEEDY=x^SEEDY 
      0002A4 B8 39            [ 1]  652 	xor a,SEEDY+1
      0002A6 97               [ 1]  653 	ld xl,a 
      0002A7 9E               [ 1]  654 	ld a,xh 
      0002A8 B8 38            [ 1]  655 	xor a,SEEDY
      0002AA 95               [ 1]  656 	ld xh,a 
      0002AB BF 38            [ 2]  657 	ldw SEEDY,x 
                                    658 ; return SEEDY modulo YTEMP  
      0002AD 90 BE 24         [ 2]  659 	ldw y,YTEMP  
      0002B0 65               [ 2]  660 	divw x,y 
      0002B1 1E 01            [ 2]  661 	ldw x,(SPSAVE,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002B3 FF               [ 2]  662         ldw (x),y 
      0002B4 5B 02            [ 2]  663         addw sp,#VSIZE 
      0002B6 81               [ 4]  664 	ret 
                                    665 
                                    666 
                                    667 ;;
                                    668 ;; get millisecond counter 
                                    669 ;; msec ( -- u )
                                    670 ;; Added by Picatout 2020-04-26
      0002B7 02 65                  671         .word LINK  
                           0002B9   672         LINK = . 
      0002B9 04                     673         .byte 4
      0002BA 4D 53 45 43            674         .ascii "MSEC"
      0002BE                        675 MSEC: 
      0002BE 1D 00 02         [ 2]  676         subw x,#CELLL 
      0002C1 90 BE 2E         [ 2]  677         ldw y,MS 
      0002C4 FF               [ 2]  678         ldw (x),y 
      0002C5 81               [ 4]  679         ret 
                                    680 
                                    681 ; suspend execution for u msec 
                                    682 ;  pause ( u -- )
      0002C6 02 B9                  683         .word LINK 
                           0002C8   684         LINK=.
      0002C8 05                     685         .byte 5 
      0002C9 50 41 55 53 45         686         .ascii "PAUSE"
      0002CE                        687 PAUSE:
      0002CE 90 93            [ 1]  688         ldw y,x
      0002D0 90 FE            [ 2]  689         ldw y,(y)
      0002D2 72 B9 00 2E      [ 2]  690         addw y,MS 
      0002D6 8F               [10]  691 1$:     wfi  
      0002D7 90 B3 2E         [ 2]  692         cpw y,MS  
      0002DA 26 FA            [ 1]  693         jrne 1$        
      0002DC 1C 00 02         [ 2]  694         addw x,#CELLL 
      0002DF 81               [ 4]  695         ret 
                                    696 
                                    697 ; initialize count down timer 
                                    698 ;  TIMER ( u -- )  milliseconds 
      0002E0 02 C8                  699         .word LINK 
                           0002E2   700         LINK=.
      0002E2 05                     701         .byte 5 
      0002E3 54 49 4D 45 52         702         .ascii "TIMER" 
      0002E8                        703 TIMER:
      0002E8 90 93            [ 1]  704         ldw y,x
      0002EA 90 FE            [ 2]  705         ldw y,(y) 
      0002EC 90 BF 30         [ 2]  706         ldw CNTDWN,y
      0002EF 1C 00 02         [ 2]  707         addw x,#CELLL 
      0002F2 81               [ 4]  708         ret 
                                    709 
                                    710 ; check for TIMER exiparition 
                                    711 ;  TIMEOUT? ( -- 0|-1 )
      0002F3 02 E2                  712         .word LINK 
                           0002F5   713         LINK=. 
      0002F5 08                     714         .byte 8 
      0002F6 54 49 4D 45 4F 55 54   715         .ascii "TIMEOUT?"
             3F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002FE                        716 TIMEOUTQ: 
      0002FE 4F               [ 1]  717         clr a
      0002FF 1D 00 02         [ 2]  718         subw x,#CELLL 
      000302 90 BE 30         [ 2]  719         ldw y,CNTDWN 
      000305 26 01            [ 1]  720         jrne 1$ 
      000307 43               [ 1]  721         cpl a 
      000308 E7 01            [ 1]  722 1$:     ld (1,x),a 
      00030A F7               [ 1]  723         ld (x),a 
      00030B 81               [ 4]  724         ret         
                                    725 
                                    726 ; reboot MCU 
                                    727 ; REBOOT ( -- )
      00030C 02 F5                  728         .word LINK 
                           00030E   729         LINK=. 
      00030E 06                     730         .byte 6 
      00030F 52 45 42 4F 4F 54      731         .ascii "REBOOT"
      000315                        732 reboot:
      000315 CC 00 00         [ 2]  733         jp NonHandledInterrupt
                                    734 
                                    735 ; compile to flash memory 
                                    736 ; TO-FLASH ( -- )
      000318 03 0E                  737         .word LINK 
                           00031A   738         LINK=.
      00031A 08                     739         .byte 8
      00031B 54 4F 2D 46 4C 41 53   740         .ascii "TO-FLASH"
             48
      000323                        741 TOFLASH:
      000323 CD 06 48         [ 4]  742         call RAMLAST 
      000326 CD 04 22         [ 4]  743         call AT 
      000329 CD 06 73         [ 4]  744         call QDUP 
      00032C CD 03 D7         [ 4]  745         call QBRAN
      00032F 03 52                  746         .word 1$
      000331 CD 12 AB         [ 4]  747         call ABORQ 
      000334 1D                     748         .byte 29
      000335 20 4E 6F 74 20 77 68   749         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000352 90 AE FF FF      [ 2]  750 1$:     ldw y,#-1 
      000356 90 BF 1E         [ 2]  751         ldw UTFLASH,y
      000359 81               [ 4]  752         ret 
                                    753 
                                    754 ; compile to RAM 
                                    755 ; TO-RAM ( -- )
      00035A 03 1A                  756         .word LINK 
                           00035C   757         LINK=.
      00035C 06                     758         .byte 6 
      00035D 54 4F 2D 52 41 4D      759         .ascii "TO-RAM"
      000363                        760 TORAM:
      000363 90 5F            [ 1]  761         clrw y 
      000365 90 BF 1E         [ 2]  762         ldw UTFLASH,y 
      000368 81               [ 4]  763         ret 
                                    764         
                                    765 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    766 ;; Device dependent I/O
                                    767 ;       ?RX     ( -- c T | F )
                                    768 ;         Return input byte and true, or false.
      000369 03 5C                  769         .word      LINK 
                           00036B   770 LINK	= .
      00036B 04                     771         .byte      4
      00036C 3F 4B 45 59            772         .ascii     "?KEY"
      000370                        773 QKEY:
      000370 90 5F            [ 1]  774         CLRW Y 
      000372 72 0B 52 40 0B   [ 2]  775         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000377 C6 52 41         [ 1]  776         LD    A,UART_DR   ;get char in A
      00037A 1D 00 02         [ 2]  777 	SUBW	X,#2
      00037D E7 01            [ 1]  778         LD     (1,X),A
      00037F 7F               [ 1]  779 	CLR	(X)
      000380 90 53            [ 2]  780         CPLW     Y
      000382                        781 INCH:
      000382 1D 00 02         [ 2]  782 	SUBW	X,#2
      000385 FF               [ 2]  783         LDW     (X),Y
      000386 81               [ 4]  784         RET
                                    785 
                                    786 ;       TX!     ( c -- )
                                    787 ;       Send character c to  output device.
      000387 03 6B                  788         .word      LINK
                           000389   789 LINK	= .
      000389 04                     790         .byte      4
      00038A 45 4D 49 54            791         .ascii     "EMIT"
      00038E                        792 EMIT:
      00038E E6 01            [ 1]  793         LD     A,(1,X)
      000390 1C 00 02         [ 2]  794 	ADDW	X,#2
      000393 72 0F 52 40 FB   [ 2]  795 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      000398 C7 52 41         [ 1]  796         LD    UART_DR,A   ;send A
      00039B 81               [ 4]  797         RET
                                    798 
                                    799 ;; The kernel
                                    800 
                                    801 ;       doLIT   ( -- w )
                                    802 ;       Push an inline literal.
      00039C 03 89                  803         .word      LINK
                           00039E   804 LINK	= 	.
      00039E 45                     805 	.byte      COMPO+5
      00039F 44 4F 4C 49 54         806         .ascii     "DOLIT"
      0003A4                        807 DOLIT:
      0003A4 1D 00 02         [ 2]  808 	SUBW X,#2
      0003A7 16 01            [ 2]  809         ldw y,(1,sp)
      0003A9 90 FE            [ 2]  810         ldw y,(y)
      0003AB FF               [ 2]  811         ldw (x),y
      0003AC 90 85            [ 2]  812         popw y 
      0003AE 90 EC 02         [ 2]  813         jp (2,y)
                                    814 
                                    815 ;       next    ( -- )
                                    816 ;       Code for  single index loop.
      0003B1 03 9E                  817         .word      LINK
                           0003B3   818 LINK	= 	.
      0003B3 44                     819 	.byte      COMPO+4
      0003B4 6E 65 78 74            820         .ascii     "next"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003B8                        821 DONXT:
      0003B8 16 03            [ 2]  822 	LDW Y,(3,SP)
      0003BA 90 5A            [ 2]  823 	DECW Y
      0003BC 2A 07            [ 1]  824 	JRPL NEX1 ; jump if N=0
      0003BE 90 85            [ 2]  825 	POPW Y
      0003C0 5B 02            [ 2]  826         addw sp,#2
      0003C2 90 EC 02         [ 2]  827         JP (2,Y)
      0003C5                        828 NEX1:
      0003C5 17 03            [ 2]  829         LDW (3,SP),Y
      0003C7 90 85            [ 2]  830         POPW Y
      0003C9 90 FE            [ 2]  831 	LDW Y,(Y)
      0003CB 90 FC            [ 2]  832 	JP (Y)
                                    833 
                                    834 ;       ?branch ( f -- )
                                    835 ;       Branch if flag is zero.
      0003CD 03 B3                  836         .word      LINK
                           0003CF   837 LINK	= 	.
      0003CF 47                     838 	.byte      COMPO+7
      0003D0 3F 42 52 41 4E 43 48   839         .ascii     "?BRANCH"
      0003D7                        840 QBRAN:	
      0003D7 90 93            [ 1]  841         LDW Y,X
      0003D9 1C 00 02         [ 2]  842 	ADDW X,#2
      0003DC 90 FE            [ 2]  843 	LDW Y,(Y)
      0003DE 27 0E            [ 1]  844         JREQ     BRAN
      0003E0 90 85            [ 2]  845 	POPW Y
      0003E2 90 EC 02         [ 2]  846 	JP (2,Y)
                                    847         
                                    848 ;       branch  ( -- )
                                    849 ;       Branch to an inline address.
      0003E5 03 CF                  850         .word      LINK
                           0003E7   851 LINK	= 	.
      0003E7 46                     852 	.byte      COMPO+6
      0003E8 42 52 41 4E 43 48      853         .ascii     "BRANCH"
      0003EE                        854 BRAN:
      0003EE 90 85            [ 2]  855         POPW Y
      0003F0 90 FE            [ 2]  856 	LDW Y,(Y)
      0003F2 90 FC            [ 2]  857         JP     (Y)
                                    858 
                                    859 ;       EXECUTE ( ca -- )
                                    860 ;       Execute  word at ca.
      0003F4 03 E7                  861         .word      LINK
                           0003F6   862 LINK	= 	.
      0003F6 07                     863         .byte       7
      0003F7 45 58 45 43 55 54 45   864         .ascii     "EXECUTE"
      0003FE                        865 EXECU:
      0003FE 90 93            [ 1]  866         LDW Y,X
      000400 1C 00 02         [ 2]  867 	ADDW X,#2
      000403 90 FE            [ 2]  868 	LDW  Y,(Y)
      000405 90 FC            [ 2]  869         JP   (Y)
                                    870 
                           000001   871 OPTIMIZE = 1
                           000001   872 .if OPTIMIZE 
                                    873 ; remplacement de CALL EXIT par 
                                    874 ; le opcode de RET.
                                    875 ; Voir modification au code de ";"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                           000000   876 .else 
                                    877 ;       EXIT    ( -- )
                                    878 ;       Terminate a colon definition.
                                    879         .word      LINK
                                    880 LINK = .
                                    881         .byte      4
                                    882         .ascii     "EXIT"
                                    883 EXIT:
                                    884         POPW Y
                                    885         RET
                                    886 .endif 
                                    887 
                                    888 ;       !       ( w a -- )
                                    889 ;       Pop  data stack to memory.
      000407 03 F6                  890         .word      LINK
                           000409   891 LINK = .
      000409 01                     892         .byte      1
      00040A 21                     893         .ascii     "!"
      00040B                        894 STORE:
      00040B 90 93            [ 1]  895         LDW Y,X
      00040D 90 FE            [ 2]  896         LDW Y,(Y)    ;Y=a
      00040F 90 BF 24         [ 2]  897         LDW YTEMP,Y
      000412 90 93            [ 1]  898         LDW Y,X
      000414 90 EE 02         [ 2]  899         LDW Y,(2,Y)
      000417 91 CF 24         [ 5]  900         LDW [YTEMP],Y ;store w at a
      00041A 1C 00 04         [ 2]  901         ADDW X,#4 ; DDROP 
      00041D 81               [ 4]  902         RET     
                                    903 
                                    904 ;       @       ( a -- w )
                                    905 ;       Push memory location to stack.
      00041E 04 09                  906         .word      LINK
                           000420   907 LINK	= 	.
      000420 01                     908         .byte    1
      000421 40                     909         .ascii	"@"
      000422                        910 AT:
      000422 90 93            [ 1]  911         LDW Y,X     ;Y = a
      000424 90 FE            [ 2]  912         LDW Y,(Y)   ; address 
      000426 90 FE            [ 2]  913         LDW Y,(Y)   ; value 
      000428 FF               [ 2]  914         LDW (X),Y ;w = @Y
      000429 81               [ 4]  915         RET     
                                    916 
                                    917 ;       C!      ( c b -- )
                                    918 ;       Pop  data stack to byte memory.
      00042A 04 20                  919         .word      LINK
                           00042C   920 LINK	= .
      00042C 02                     921         .byte      2
      00042D 43 21                  922         .ascii     "C!"
      00042F                        923 CSTOR:
      00042F 90 93            [ 1]  924         LDW Y,X
      000431 90 FE            [ 2]  925 	LDW Y,(Y)    ;Y=b
      000433 E6 03            [ 1]  926         LD A,(3,X)    ;D = c
      000435 90 F7            [ 1]  927         LD  (Y),A     ;store c at b
      000437 1C 00 04         [ 2]  928 	ADDW X,#4 ; DDROP 
      00043A 81               [ 4]  929         RET     
                                    930 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    931 ;       C@      ( b -- c )
                                    932 ;       Push byte in memory to  stack.
      00043B 04 2C                  933         .word      LINK
                           00043D   934 LINK	= 	.
      00043D 02                     935         .byte      2
      00043E 43 40                  936         .ascii     "C@"
      000440                        937 CAT:
      000440 90 93            [ 1]  938         LDW Y,X     ;Y=b
      000442 90 FE            [ 2]  939         LDW Y,(Y)
      000444 90 F6            [ 1]  940         LD A,(Y)
      000446 E7 01            [ 1]  941         LD (1,X),A
      000448 7F               [ 1]  942         CLR (X)
      000449 81               [ 4]  943         RET     
                                    944 
                                    945 ;       RP@     ( -- a )
                                    946 ;       Push current RP to data stack.
      00044A 04 3D                  947         .word      LINK
                           00044C   948 LINK	= .
      00044C 03                     949         .byte      3
      00044D 52 50 40               950         .ascii     "RP@"
      000450                        951 RPAT:
      000450 90 96            [ 1]  952         LDW Y,SP    ;save return addr
      000452 1D 00 02         [ 2]  953         SUBW X,#2
      000455 FF               [ 2]  954         LDW (X),Y
      000456 81               [ 4]  955         RET     
                                    956 
                                    957 ;       RP!     ( a -- )
                                    958 ;       Set  return stack pointer.
      000457 04 4C                  959         .word      LINK
                           000459   960 LINK	= 	. 
      000459 43                     961 	.byte      COMPO+3
      00045A 52 50 21               962         .ascii     "RP!"
      00045D                        963 RPSTO:
      00045D 90 85            [ 2]  964         POPW Y
      00045F 90 BF 24         [ 2]  965         LDW YTEMP,Y
      000462 90 93            [ 1]  966         LDW Y,X
      000464 90 FE            [ 2]  967         LDW Y,(Y)
      000466 90 94            [ 1]  968         LDW SP,Y
      000468 1C 00 02         [ 2]  969         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00046B 92 CC 24         [ 5]  970         JP [YTEMP]
                                    971 
                                    972 ;       R>      ( -- w )
                                    973 ;       Pop return stack to data stack.
      00046E 04 59                  974         .word      LINK
                           000470   975 LINK	= 	. 
      000470 42                     976 	.byte      COMPO+2
      000471 52 3E                  977         .ascii     "R>"
      000473                        978 RFROM:
      000473 90 85            [ 2]  979         POPW Y    ;save return addr
      000475 90 BF 24         [ 2]  980         LDW YTEMP,Y
      000478 90 85            [ 2]  981         POPW Y
      00047A 1D 00 02         [ 2]  982         SUBW X,#2
      00047D FF               [ 2]  983         LDW (X),Y
      00047E 92 CC 24         [ 5]  984         JP [YTEMP]
                                    985 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                    986 ;       R@      ( -- w )
                                    987 ;       Copy top of return stack to stack.
      000481 04 70                  988         .word      LINK
                           000483   989 LINK	= 	. 
      000483 02                     990         .byte      2
      000484 52 40                  991         .ascii     "R@"
      000486                        992 RAT:
      000486 16 03            [ 2]  993         ldw y,(3,sp)
      000488 1D 00 02         [ 2]  994         subw x,#CELLL 
      00048B FF               [ 2]  995         ldw (x),y 
      00048C 81               [ 4]  996         ret 
                                    997 
                                    998 ;       >R      ( w -- )
                                    999 ;       Push data stack to return stack.
      00048D 04 83                 1000         .word      LINK
                           00048F  1001 LINK	= 	. 
      00048F 42                    1002 	.byte      COMPO+2
      000490 3E 52                 1003         .ascii     ">R"
      000492                       1004 TOR:
      000492 90 85            [ 2] 1005         POPW Y    ;save return addr
      000494 90 BF 24         [ 2] 1006         LDW YTEMP,Y
      000497 90 93            [ 1] 1007         LDW Y,X
      000499 90 FE            [ 2] 1008         LDW Y,(Y)
      00049B 90 89            [ 2] 1009         PUSHW Y    ;restore return addr
      00049D 1C 00 02         [ 2] 1010         ADDW X,#2
      0004A0 92 CC 24         [ 5] 1011         JP [YTEMP]
                                   1012 
                                   1013 ;       SP@     ( -- a )
                                   1014 ;       Push current stack pointer.
      0004A3 04 8F                 1015         .word      LINK
                           0004A5  1016 LINK	= 	. 
      0004A5 03                    1017         .byte      3
      0004A6 53 50 40              1018         .ascii     "SP@"
      0004A9                       1019 SPAT:
      0004A9 90 93            [ 1] 1020 	LDW Y,X
      0004AB 1D 00 02         [ 2] 1021         SUBW X,#2
      0004AE FF               [ 2] 1022 	LDW (X),Y
      0004AF 81               [ 4] 1023         RET     
                                   1024 
                                   1025 ;       SP!     ( a -- )
                                   1026 ;       Set  data stack pointer.
      0004B0 04 A5                 1027         .word      LINK
                           0004B2  1028 LINK	= 	. 
      0004B2 03                    1029         .byte      3
      0004B3 53 50 21              1030         .ascii     "SP!"
      0004B6                       1031 SPSTO:
      0004B6 FE               [ 2] 1032         LDW     X,(X)     ;X = a
      0004B7 81               [ 4] 1033         RET     
                                   1034 
                                   1035 ;       DROP    ( w -- )
                                   1036 ;       Discard top stack item.
      0004B8 04 B2                 1037         .word      LINK
                           0004BA  1038 LINK	= 	. 
      0004BA 04                    1039         .byte      4
      0004BB 44 52 4F 50           1040         .ascii     "DROP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004BF                       1041 DROP:
      0004BF 1C 00 02         [ 2] 1042         ADDW X,#2     
      0004C2 81               [ 4] 1043         RET     
                                   1044 
                                   1045 ;       DUP     ( w -- w w )
                                   1046 ;       Duplicate  top stack item.
      0004C3 04 BA                 1047         .word      LINK
                           0004C5  1048 LINK	= 	. 
      0004C5 03                    1049         .byte      3
      0004C6 44 55 50              1050         .ascii     "DUP"
      0004C9                       1051 DUPP:
      0004C9 90 93            [ 1] 1052 	LDW Y,X
      0004CB 1D 00 02         [ 2] 1053         SUBW X,#2
      0004CE 90 FE            [ 2] 1054 	LDW Y,(Y)
      0004D0 FF               [ 2] 1055 	LDW (X),Y
      0004D1 81               [ 4] 1056         RET     
                                   1057 
                                   1058 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1059 ;       Exchange top two stack items.
      0004D2 04 C5                 1060         .word      LINK
                           0004D4  1061 LINK	= 	. 
      0004D4 04                    1062         .byte      4
      0004D5 53 57 41 50           1063         .ascii     "SWAP"
      0004D9                       1064 SWAPP:
      0004D9 90 93            [ 1] 1065         LDW Y,X
      0004DB 90 FE            [ 2] 1066         LDW Y,(Y)
      0004DD 90 BF 24         [ 2] 1067         LDW YTEMP,Y
      0004E0 90 93            [ 1] 1068         LDW Y,X
      0004E2 90 EE 02         [ 2] 1069         LDW Y,(2,Y)
      0004E5 FF               [ 2] 1070         LDW (X),Y
      0004E6 90 BE 24         [ 2] 1071         LDW Y,YTEMP
      0004E9 EF 02            [ 2] 1072         LDW (2,X),Y
      0004EB 81               [ 4] 1073         RET     
                                   1074 
                                   1075 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1076 ;       Copy second stack item to top.
      0004EC 04 D4                 1077         .word      LINK
                           0004EE  1078 LINK	= . 
      0004EE 04                    1079         .byte      4
      0004EF 4F 56 45 52           1080         .ascii     "OVER"
      0004F3                       1081 OVER:
      0004F3 1D 00 02         [ 2] 1082         SUBW X,#2
      0004F6 90 93            [ 1] 1083         LDW Y,X
      0004F8 90 EE 04         [ 2] 1084         LDW Y,(4,Y)
      0004FB FF               [ 2] 1085         LDW (X),Y
      0004FC 81               [ 4] 1086         RET     
                                   1087 
                                   1088 ;       0<      ( n -- t )
                                   1089 ;       Return true if n is negative.
      0004FD 04 EE                 1090         .word      LINK
                           0004FF  1091 LINK	= . 
      0004FF 02                    1092         .byte      2
      000500 30 3C                 1093         .ascii     "0<"
      000502                       1094 ZLESS:
      000502 A6 FF            [ 1] 1095         LD A,#0xFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000504 90 93            [ 1] 1096         LDW Y,X
      000506 90 FE            [ 2] 1097         LDW Y,(Y)
      000508 2B 01            [ 1] 1098         JRMI     ZL1
      00050A 4F               [ 1] 1099         CLR A   ;false
      00050B F7               [ 1] 1100 ZL1:    LD     (X),A
      00050C E7 01            [ 1] 1101         LD (1,X),A
      00050E 81               [ 4] 1102 	RET     
                                   1103 
                                   1104 ;       AND     ( w w -- w )
                                   1105 ;       Bitwise AND.
      00050F 04 FF                 1106         .word      LINK
                           000511  1107 LINK	= . 
      000511 03                    1108         .byte      3
      000512 41 4E 44              1109         .ascii     "AND"
      000515                       1110 ANDD:
      000515 F6               [ 1] 1111         LD  A,(X)    ;D=w
      000516 E4 02            [ 1] 1112         AND A,(2,X)
      000518 E7 02            [ 1] 1113         LD (2,X),A
      00051A E6 01            [ 1] 1114         LD A,(1,X)
      00051C E4 03            [ 1] 1115         AND A,(3,X)
      00051E E7 03            [ 1] 1116         LD (3,X),A
      000520 1C 00 02         [ 2] 1117         ADDW X,#2
      000523 81               [ 4] 1118         RET
                                   1119 
                                   1120 ;       OR      ( w w -- w )
                                   1121 ;       Bitwise inclusive OR.
      000524 05 11                 1122         .word      LINK
                           000526  1123 LINK = . 
      000526 02                    1124         .byte      2
      000527 4F 52                 1125         .ascii     "OR"
      000529                       1126 ORR:
      000529 F6               [ 1] 1127         LD A,(X)    ;D=w
      00052A EA 02            [ 1] 1128         OR A,(2,X)
      00052C E7 02            [ 1] 1129         LD (2,X),A
      00052E E6 01            [ 1] 1130         LD A,(1,X)
      000530 EA 03            [ 1] 1131         OR A,(3,X)
      000532 E7 03            [ 1] 1132         LD (3,X),A
      000534 1C 00 02         [ 2] 1133         ADDW X,#2
      000537 81               [ 4] 1134         RET
                                   1135 
                                   1136 ;       XOR     ( w w -- w )
                                   1137 ;       Bitwise exclusive OR.
      000538 05 26                 1138         .word      LINK
                           00053A  1139 LINK	= . 
      00053A 03                    1140         .byte      3
      00053B 58 4F 52              1141         .ascii     "XOR"
      00053E                       1142 XORR:
      00053E F6               [ 1] 1143         LD A,(X)    ;D=w
      00053F E8 02            [ 1] 1144         XOR A,(2,X)
      000541 E7 02            [ 1] 1145         LD (2,X),A
      000543 E6 01            [ 1] 1146         LD A,(1,X)
      000545 E8 03            [ 1] 1147         XOR A,(3,X)
      000547 E7 03            [ 1] 1148         LD (3,X),A
      000549 1C 00 02         [ 2] 1149         ADDW X,#2
      00054C 81               [ 4] 1150         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1151 
                                   1152 ;       UM+     ( u u -- udsum )
                                   1153 ;       Add two unsigned single
                                   1154 ;       and return a double sum.
      00054D 05 3A                 1155         .word      LINK
                           00054F  1156 LINK	= . 
      00054F 03                    1157         .byte      3
      000550 55 4D 2B              1158         .ascii     "UM+"
      000553                       1159 UPLUS:
      000553 A6 01            [ 1] 1160         LD A,#1
      000555 90 93            [ 1] 1161         LDW Y,X
      000557 90 EE 02         [ 2] 1162         LDW Y,(2,Y)
      00055A 90 BF 24         [ 2] 1163         LDW YTEMP,Y
      00055D 90 93            [ 1] 1164         LDW Y,X
      00055F 90 FE            [ 2] 1165         LDW Y,(Y)
      000561 72 B9 00 24      [ 2] 1166         ADDW Y,YTEMP
      000565 EF 02            [ 2] 1167         LDW (2,X),Y
      000567 25 01            [ 1] 1168         JRC     UPL1
      000569 4F               [ 1] 1169         CLR A
      00056A E7 01            [ 1] 1170 UPL1:   LD     (1,X),A
      00056C 7F               [ 1] 1171         CLR (X)
      00056D 81               [ 4] 1172         RET
                                   1173 
                                   1174 ;; System and user variables
                                   1175 
                                   1176 ;       doVAR   ( -- a )
                                   1177 ;       Code for VARIABLE and CREATE.
      00056E 05 4F                 1178         .word      LINK
                           000570  1179 LINK	= . 
      000570 45                    1180 	.byte      COMPO+5
      000571 44 4F 56 41 52        1181         .ascii     "DOVAR"
      000576                       1182 DOVAR:
      000576 1D 00 02         [ 2] 1183 	SUBW X,#2
      000579 90 85            [ 2] 1184         POPW Y    ;get return addr (pfa)
      00057B 90 FE            [ 2] 1185         LDW Y,(Y) ; indirect address 
      00057D FF               [ 2] 1186         LDW (X),Y    ;push on stack
      00057E 81               [ 4] 1187         RET     ;go to RET of EXEC
                                   1188 
                                   1189 ;       BASE    ( -- a )
                                   1190 ;       Radix base for numeric I/O.
      00057F 05 70                 1191         .word      LINK        
                           000581  1192 LINK = . 
      000581 04                    1193         .byte      4
      000582 42 41 53 45           1194         .ascii     "BASE"
      000586                       1195 BASE:
      000586 90 AE 00 06      [ 2] 1196 	LDW Y,#UBASE 
      00058A 1D 00 02         [ 2] 1197 	SUBW X,#2
      00058D FF               [ 2] 1198         LDW (X),Y
      00058E 81               [ 4] 1199         RET
                                   1200 
                                   1201 ;       tmp     ( -- a )
                                   1202 ;       A temporary storage.
      00058F 05 81                 1203         .word      LINK
                                   1204         
                           000591  1205 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000591 03                    1206 	.byte      3
      000592 54 4D 50              1207         .ascii     "TMP"
      000595                       1208 TEMP:
      000595 90 AE 00 08      [ 2] 1209 	LDW Y,#UTMP
      000599 1D 00 02         [ 2] 1210 	SUBW X,#2
      00059C FF               [ 2] 1211         LDW (X),Y
      00059D 81               [ 4] 1212         RET
                                   1213 
                                   1214 ;       >IN     ( -- a )
                                   1215 ;        Hold parsing pointer.
      00059E 05 91                 1216         .word      LINK
                           0005A0  1217 LINK = . 
      0005A0 03                    1218         .byte      3
      0005A1 3E 49 4E              1219         .ascii    ">IN"
      0005A4                       1220 INN:
      0005A4 90 AE 00 0A      [ 2] 1221 	LDW Y,#UINN 
      0005A8 1D 00 02         [ 2] 1222 	SUBW X,#2
      0005AB FF               [ 2] 1223         LDW (X),Y
      0005AC 81               [ 4] 1224         RET
                                   1225 
                                   1226 ;       #TIB    ( -- a )
                                   1227 ;       Count in terminal input buffer.
      0005AD 05 A0                 1228         .word      LINK
                           0005AF  1229 LINK = . 
      0005AF 04                    1230         .byte      4
      0005B0 23 54 49 42           1231         .ascii     "#TIB"
      0005B4                       1232 NTIB:
      0005B4 90 AE 00 0C      [ 2] 1233 	LDW Y,#UCTIB 
      0005B8 1D 00 02         [ 2] 1234 	SUBW X,#2
      0005BB FF               [ 2] 1235         LDW (X),Y
      0005BC 81               [ 4] 1236         RET
                                   1237 
                                   1238 ;       TBUF ( -- a )
                                   1239 ;       address of 128 bytes transaction buffer 
      0005BD 05 AF                 1240         .word LINK 
                           0005BF  1241         LINK=.
      0005BF 04                    1242         .byte 4 
      0005C0 54 42 55 46           1243         .ascii "TBUF"
      0005C4                       1244 TBUF:
      0005C4 90 AE 06 80      [ 2] 1245         ldw y,#ROWBUFF
      0005C8 1D 00 02         [ 2] 1246         subw x,#CELLL
      0005CB FF               [ 2] 1247         ldw (x),y 
      0005CC 81               [ 4] 1248         ret 
                                   1249 
                                   1250 ; systeme variable 
                                   1251 ; compilation destination 
                                   1252 ; TFLASH ( -- A )
      0005CD 05 BF                 1253         .word LINK 
                           0005CF  1254         LINK=.
      0005CF 06                    1255         .byte 6 
      0005D0 54 46 4C 41 53 48     1256         .ascii "TFLASH"         
      0005D6                       1257 TFLASH:
      0005D6 1D 00 02         [ 2] 1258         subw x,#CELLL 
      0005D9 90 AE 00 1E      [ 2] 1259         ldw y,#UTFLASH
      0005DD FF               [ 2] 1260         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005DE 81               [ 4] 1261         ret 
                                   1262 
                                   1263 ;       "EVAL   ( -- a )
                                   1264 ;       Execution vector of EVAL.
      0005DF 05 CF                 1265         .word      LINK
                           0005E1  1266 LINK = . 
      0005E1 05                    1267         .byte      5
      0005E2 27 45 56 41 4C        1268         .ascii     "'EVAL"
      0005E7                       1269 TEVAL:
      0005E7 90 AE 00 10      [ 2] 1270 	LDW Y,#UINTER 
      0005EB 1D 00 02         [ 2] 1271 	SUBW X,#2
      0005EE FF               [ 2] 1272         LDW (X),Y
      0005EF 81               [ 4] 1273         RET
                                   1274 
                                   1275 ;       HLD     ( -- a )
                                   1276 ;       Hold a pointer of output string.
      0005F0 05 E1                 1277         .word      LINK
                           0005F2  1278 LINK = . 
      0005F2 03                    1279         .byte      3
      0005F3 48 4C 44              1280         .ascii     "HLD"
      0005F6                       1281 HLD:
      0005F6 90 AE 00 12      [ 2] 1282 	LDW Y,#UHLD 
      0005FA 1D 00 02         [ 2] 1283 	SUBW X,#2
      0005FD FF               [ 2] 1284         LDW (X),Y
      0005FE 81               [ 4] 1285         RET
                                   1286 
                                   1287 ;       CONTEXT ( -- a )
                                   1288 ;       Start vocabulary search.
      0005FF 05 F2                 1289         .word      LINK
                           000601  1290 LINK = . 
      000601 07                    1291         .byte      7
      000602 43 4F 4E 54 45 58 54  1292         .ascii     "CONTEXT"
      000609                       1293 CNTXT:
      000609 90 AE 00 14      [ 2] 1294 	LDW Y,#UCNTXT
      00060D 1D 00 02         [ 2] 1295 	SUBW X,#2
      000610 FF               [ 2] 1296         LDW (X),Y
      000611 81               [ 4] 1297         RET
                                   1298 
                                   1299 ;       VP      ( -- a )
                                   1300 ;       Point to top of variables
      000612 06 01                 1301         .word      LINK
                           000614  1302 LINK = . 
      000614 02                    1303         .byte      2
      000615 56 50                 1304         .ascii     "VP"
      000617                       1305 VPP:
      000617 90 AE 00 16      [ 2] 1306 	LDW Y,#UVP 
      00061B 1D 00 02         [ 2] 1307 	SUBW X,#2
      00061E FF               [ 2] 1308         LDW (X),Y
      00061F 81               [ 4] 1309         RET
                                   1310 
                                   1311 ;       CP    ( -- a )
                                   1312 ;       Pointer to top of FLASH 
      000620 06 14                 1313         .word LINK 
                           000622  1314         LINK=.
      000622 02                    1315         .byte 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000623 43 50                 1316         .ascii "CP"
      000625                       1317 CPP: 
      000625 90 AE 00 18      [ 2] 1318         ldw y,#UCP 
      000629 1D 00 02         [ 2] 1319         subw x,#CELLL 
      00062C FF               [ 2] 1320         ldw (x),y 
      00062D 81               [ 4] 1321         ret                
                                   1322 
                                   1323 ;       LAST    ( -- a )
                                   1324 ;       Point to last name in dictionary.
      00062E 06 22                 1325         .word      LINK
                           000630  1326 LINK = . 
      000630 04                    1327         .byte      4
      000631 4C 41 53 54           1328         .ascii     "LAST"
      000635                       1329 LAST:
      000635 90 AE 00 1A      [ 2] 1330 	LDW Y,#ULAST 
      000639 1D 00 02         [ 2] 1331 	SUBW X,#2
      00063C FF               [ 2] 1332         LDW (X),Y
      00063D 81               [ 4] 1333         RET
                                   1334 
                                   1335 ; address of system variable URLAST 
                                   1336 ;       RAMLAST ( -- a )
                                   1337 ; RAM dictionary context 
      00063E 06 30                 1338         .word LINK 
                           000640  1339         LINK=. 
      000640 07                    1340         .byte 7  
      000641 52 41 4D 4C 41 53 54  1341         .ascii "RAMLAST" 
      000648                       1342 RAMLAST: 
      000648 90 AE 00 20      [ 2] 1343         ldw y,#URLAST 
      00064C 1D 00 02         [ 2] 1344         subw x,#CELLL 
      00064F FF               [ 2] 1345         ldw (x),y 
      000650 81               [ 4] 1346         ret 
                                   1347 
                                   1348 ; OFFSET ( -- a )
                                   1349 ; address of system variable OFFSET 
      000651 06 40                 1350         .word LINK 
                           000653  1351         LINK=.
      000653 06                    1352         .byte 6
      000654 4F 46 46 53 45 54     1353         .ascii "OFFSET" 
      00065A                       1354 OFFSET: 
      00065A 1D 00 02         [ 2] 1355         subw x,#CELLL
      00065D 90 AE 00 1C      [ 2] 1356         ldw y,#UOFFSET 
      000661 FF               [ 2] 1357         ldw (x),y 
      000662 81               [ 4] 1358         ret 
                                   1359 
                                   1360 ; adjust jump address adding OFFSET
                                   1361 ; ADR-ADJ ( a -- a+offset )
      000663                       1362 ADRADJ: 
      000663 CD 06 5A         [ 4] 1363         call OFFSET 
      000666 CD 04 22         [ 4] 1364         call AT 
      000669 CC 06 C4         [ 2] 1365         jp PLUS 
                                   1366 
                                   1367 
                                   1368 ;; Common functions
                                   1369 
                                   1370 ;       ?DUP    ( w -- w w | 0 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1371 ;       Dup tos if its is not zero.
      00066C 06 53                 1372         .word      LINK
                           00066E  1373 LINK = . 
      00066E 04                    1374         .byte      4
      00066F 3F 44 55 50           1375         .ascii     "?DUP"
      000673                       1376 QDUP:
      000673 90 93            [ 1] 1377         LDW Y,X
      000675 90 FE            [ 2] 1378 	LDW Y,(Y)
      000677 27 04            [ 1] 1379         JREQ     QDUP1
      000679 1D 00 02         [ 2] 1380 	SUBW X,#2
      00067C FF               [ 2] 1381         LDW (X),Y
      00067D 81               [ 4] 1382 QDUP1:  RET
                                   1383 
                                   1384 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1385 ;       Rot 3rd item to top.
      00067E 06 6E                 1386         .word      LINK
                           000680  1387 LINK = . 
      000680 03                    1388         .byte      3
      000681 52 4F 54              1389         .ascii     "ROT"
      000684                       1390 ROT:
      000684 90 93            [ 1] 1391         ldw y,x 
      000686 90 FE            [ 2] 1392         ldw y,(y)
      000688 90 89            [ 2] 1393         pushw y 
      00068A 90 93            [ 1] 1394         ldw y,x 
      00068C 90 EE 04         [ 2] 1395         ldw y,(4,y)
      00068F FF               [ 2] 1396         ldw (x),y 
      000690 90 93            [ 1] 1397         ldw y,x 
      000692 90 EE 02         [ 2] 1398         ldw y,(2,y)
      000695 EF 04            [ 2] 1399         ldw (4,x),y 
      000697 90 85            [ 2] 1400         popw y 
      000699 EF 02            [ 2] 1401         ldw (2,x),y
      00069B 81               [ 4] 1402         ret 
                                   1403 
                                   1404 ;       2DROP   ( w w -- )
                                   1405 ;       Discard two items on stack.
      00069C 06 80                 1406         .word      LINK
                           00069E  1407 LINK = . 
      00069E 05                    1408         .byte      5
      00069F 32 44 52 4F 50        1409         .ascii     "2DROP"
      0006A4                       1410 DDROP:
      0006A4 1C 00 04         [ 2] 1411         ADDW X,#4
      0006A7 81               [ 4] 1412         RET
                                   1413 
                                   1414 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1415 ;       Duplicate top two items.
      0006A8 06 9E                 1416         .word      LINK
                           0006AA  1417 LINK = . 
      0006AA 04                    1418         .byte      4
      0006AB 32 44 55 50           1419         .ascii     "2DUP"
      0006AF                       1420 DDUP:
      0006AF 1D 00 04         [ 2] 1421         SUBW X,#4
      0006B2 90 93            [ 1] 1422         LDW Y,X
      0006B4 90 EE 06         [ 2] 1423         LDW Y,(6,Y)
      0006B7 EF 02            [ 2] 1424         LDW (2,X),Y
      0006B9 90 93            [ 1] 1425         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006BB 90 EE 04         [ 2] 1426         LDW Y,(4,Y)
      0006BE FF               [ 2] 1427         LDW (X),Y
      0006BF 81               [ 4] 1428         RET
                                   1429 
                                   1430 ;       +       ( w w -- sum )
                                   1431 ;       Add top two items.
      0006C0 06 AA                 1432         .word      LINK
                           0006C2  1433 LINK = . 
      0006C2 01                    1434         .byte      1
      0006C3 2B                    1435         .ascii     "+"
      0006C4                       1436 PLUS:
      0006C4 90 93            [ 1] 1437         LDW Y,X
      0006C6 90 FE            [ 2] 1438         LDW Y,(Y)
      0006C8 90 BF 24         [ 2] 1439         LDW YTEMP,Y
      0006CB 1C 00 02         [ 2] 1440         ADDW X,#2
      0006CE 90 93            [ 1] 1441         LDW Y,X
      0006D0 90 FE            [ 2] 1442         LDW Y,(Y)
      0006D2 72 B9 00 24      [ 2] 1443         ADDW Y,YTEMP
      0006D6 FF               [ 2] 1444         LDW (X),Y
      0006D7 81               [ 4] 1445         RET
                                   1446 
                                   1447 ;       NOT     ( w -- w )
                                   1448 ;       One's complement of tos.
      0006D8 06 C2                 1449         .word      LINK
                           0006DA  1450 LINK = . 
      0006DA 03                    1451         .byte      3
      0006DB 4E 4F 54              1452         .ascii     "NOT"
      0006DE                       1453 INVER:
      0006DE 90 93            [ 1] 1454         LDW Y,X
      0006E0 90 FE            [ 2] 1455         LDW Y,(Y)
      0006E2 90 53            [ 2] 1456         CPLW Y
      0006E4 FF               [ 2] 1457         LDW (X),Y
      0006E5 81               [ 4] 1458         RET
                                   1459 
                                   1460 ;       NEGATE  ( n -- -n )
                                   1461 ;       Two's complement of tos.
      0006E6 06 DA                 1462         .word      LINK
                           0006E8  1463 LINK = . 
      0006E8 06                    1464         .byte      6
      0006E9 4E 45 47 41 54 45     1465         .ascii     "NEGATE"
      0006EF                       1466 NEGAT:
      0006EF 90 93            [ 1] 1467         LDW Y,X
      0006F1 90 FE            [ 2] 1468         LDW Y,(Y)
      0006F3 90 50            [ 2] 1469         NEGW Y
      0006F5 FF               [ 2] 1470         LDW (X),Y
      0006F6 81               [ 4] 1471         RET
                                   1472 
                                   1473 ;       DNEGATE ( d -- -d )
                                   1474 ;       Two's complement of top double.
      0006F7 06 E8                 1475         .word      LINK
                           0006F9  1476 LINK = . 
      0006F9 07                    1477         .byte      7
      0006FA 44 4E 45 47 41 54 45  1478         .ascii     "DNEGATE"
      000701                       1479 DNEGA:
      000701 90 93            [ 1] 1480         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000703 90 FE            [ 2] 1481 	LDW Y,(Y)
      000705 90 53            [ 2] 1482         CPLW Y     
      000707 90 BF 24         [ 2] 1483 	LDW YTEMP,Y
      00070A 90 93            [ 1] 1484         LDW Y,X
      00070C 90 EE 02         [ 2] 1485         LDW Y,(2,Y)
      00070F 90 53            [ 2] 1486         CPLW Y
      000711 72 A9 00 01      [ 2] 1487         addw y,#1
      000715 EF 02            [ 2] 1488         LDW (2,X),Y
      000717 90 BE 24         [ 2] 1489         LDW Y,YTEMP
      00071A 24 02            [ 1] 1490         JRNC DN1 
      00071C 90 5C            [ 1] 1491         INCW Y
      00071E FF               [ 2] 1492 DN1:    LDW (X),Y
      00071F 81               [ 4] 1493         RET
                                   1494 
                                   1495 
                                   1496 ;       S>D ( n -- d )
                                   1497 ; convert single integer to double 
      000720 06 F9                 1498         .word LINK 
                           000722  1499         LINK=. 
      000722 03                    1500         .byte 3 
      000723 53 3E 44              1501         .ascii "S>D"
      000726                       1502 STOD: 
      000726 1D 00 02         [ 2] 1503         subw x,#CELLL 
      000729 90 5F            [ 1] 1504         clrw y 
      00072B FF               [ 2] 1505         ldw (x),y 
      00072C 90 93            [ 1] 1506         ldw y,x 
      00072E 90 EE 02         [ 2] 1507         ldw y,(2,y)
      000731 2A 05            [ 1] 1508         jrpl 1$ 
      000733 90 AE FF FF      [ 2] 1509         ldw y,#-1
      000737 FF               [ 2] 1510         ldw (x),y 
      000738 81               [ 4] 1511 1$:     ret 
                                   1512 
                                   1513 
                                   1514 
                                   1515 
                                   1516 ;       -       ( n1 n2 -- n1-n2 )
                                   1517 ;       Subtraction.
      000739 07 22                 1518         .word      LINK
                           00073B  1519 LINK = . 
      00073B 01                    1520         .byte      1
      00073C 2D                    1521         .ascii     "-"
      00073D                       1522 SUBB:
      00073D 90 93            [ 1] 1523         LDW Y,X
      00073F 90 FE            [ 2] 1524         LDW Y,(Y)
      000741 90 BF 24         [ 2] 1525         LDW YTEMP,Y
      000744 1C 00 02         [ 2] 1526         ADDW X,#2
      000747 90 93            [ 1] 1527         LDW Y,X
      000749 90 FE            [ 2] 1528         LDW Y,(Y)
      00074B 72 B2 00 24      [ 2] 1529         SUBW Y,YTEMP
      00074F FF               [ 2] 1530         LDW (X),Y
      000750 81               [ 4] 1531         RET
                                   1532 
                                   1533 ;       ABS     ( n -- n )
                                   1534 ;       Return  absolute value of n.
      000751 07 3B                 1535         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                           000753  1536 LINK = . 
      000753 03                    1537         .byte      3
      000754 41 42 53              1538         .ascii     "ABS"
      000757                       1539 ABSS:
      000757 90 93            [ 1] 1540         LDW Y,X
      000759 90 FE            [ 2] 1541 	LDW Y,(Y)
      00075B 2A 03            [ 1] 1542         JRPL     AB1     ;negate:
      00075D 90 50            [ 2] 1543         NEGW     Y     ;else negate hi byte
      00075F FF               [ 2] 1544         LDW (X),Y
      000760 81               [ 4] 1545 AB1:    RET
                                   1546 
                                   1547 ;       =       ( w w -- t )
                                   1548 ;       Return true if top two are =al.
      000761 07 53                 1549         .word      LINK
                           000763  1550 LINK = . 
      000763 01                    1551         .byte      1
      000764 3D                    1552         .ascii     "="
      000765                       1553 EQUAL:
      000765 A6 FF            [ 1] 1554         LD A,#0xFF  ;true
      000767 90 93            [ 1] 1555         LDW Y,X    ;D = n2
      000769 90 FE            [ 2] 1556         LDW Y,(Y)
      00076B 90 BF 24         [ 2] 1557         LDW YTEMP,Y
      00076E 1C 00 02         [ 2] 1558         ADDW X,#2
      000771 90 93            [ 1] 1559         LDW Y,X
      000773 90 FE            [ 2] 1560         LDW Y,(Y)
      000775 90 B3 24         [ 2] 1561         CPW Y,YTEMP     ;if n2 <> n1
      000778 27 01            [ 1] 1562         JREQ     EQ1
      00077A 4F               [ 1] 1563         CLR A
      00077B F7               [ 1] 1564 EQ1:    LD (X),A
      00077C E7 01            [ 1] 1565         LD (1,X),A
      00077E 81               [ 4] 1566 	RET     
                                   1567 
                                   1568 ;       U<      ( u u -- t )
                                   1569 ;       Unsigned compare of top two items.
      00077F 07 63                 1570         .word      LINK
                           000781  1571 LINK = . 
      000781 02                    1572         .byte      2
      000782 55 3C                 1573         .ascii     "U<"
      000784                       1574 ULESS:
      000784 A6 FF            [ 1] 1575         LD A,#0xFF  ;true
      000786 90 93            [ 1] 1576         LDW Y,X    ;D = n2
      000788 90 FE            [ 2] 1577         LDW Y,(Y)
      00078A 90 BF 24         [ 2] 1578         LDW YTEMP,Y
      00078D 1C 00 02         [ 2] 1579         ADDW X,#2
      000790 90 93            [ 1] 1580         LDW Y,X
      000792 90 FE            [ 2] 1581         LDW Y,(Y)
      000794 90 B3 24         [ 2] 1582         CPW Y,YTEMP     ;if n2 <> n1
      000797 25 01            [ 1] 1583         JRULT     ULES1
      000799 4F               [ 1] 1584         CLR A
      00079A F7               [ 1] 1585 ULES1:  LD (X),A
      00079B E7 01            [ 1] 1586         LD (1,X),A
      00079D 81               [ 4] 1587 	RET     
                                   1588 
                                   1589 ;       <       ( n1 n2 -- t )
                                   1590 ;       Signed compare of top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00079E 07 81                 1591         .word      LINK
                           0007A0  1592 LINK = . 
      0007A0 01                    1593         .byte      1
      0007A1 3C                    1594         .ascii     "<"
      0007A2                       1595 LESS:
      0007A2 A6 FF            [ 1] 1596         LD A,#0xFF  ;true
      0007A4 90 93            [ 1] 1597         LDW Y,X    ;D = n2
      0007A6 90 FE            [ 2] 1598         LDW Y,(Y)
      0007A8 90 BF 24         [ 2] 1599         LDW YTEMP,Y
      0007AB 1C 00 02         [ 2] 1600         ADDW X,#2
      0007AE 90 93            [ 1] 1601         LDW Y,X
      0007B0 90 FE            [ 2] 1602         LDW Y,(Y)
      0007B2 90 B3 24         [ 2] 1603         CPW Y,YTEMP     ;if n2 <> n1
      0007B5 2F 01            [ 1] 1604         JRSLT     LT1
      0007B7 4F               [ 1] 1605         CLR A
      0007B8 F7               [ 1] 1606 LT1:    LD (X),A
      0007B9 E7 01            [ 1] 1607         LD (1,X),A
      0007BB 81               [ 4] 1608 	RET     
                                   1609 
                                   1610 ;       MAX     ( n n -- n )
                                   1611 ;       Return greater of two top items.
      0007BC 07 A0                 1612         .word      LINK
                           0007BE  1613 LINK = . 
      0007BE 03                    1614         .byte      3
      0007BF 4D 41 58              1615         .ascii     "MAX"
      0007C2                       1616 MAX:
      0007C2 90 93            [ 1] 1617         LDW Y,X    ;D = n2
      0007C4 90 EE 02         [ 2] 1618         LDW Y,(2,Y)
      0007C7 90 BF 24         [ 2] 1619         LDW YTEMP,Y
      0007CA 90 93            [ 1] 1620         LDW Y,X
      0007CC 90 FE            [ 2] 1621         LDW Y,(Y)
      0007CE 90 B3 24         [ 2] 1622         CPW Y,YTEMP     ;if n2 <> n1
      0007D1 2F 02            [ 1] 1623         JRSLT     MAX1
      0007D3 EF 02            [ 2] 1624         LDW (2,X),Y
      0007D5 1C 00 02         [ 2] 1625 MAX1:   ADDW X,#2
      0007D8 81               [ 4] 1626 	RET     
                                   1627 
                                   1628 ;       MIN     ( n n -- n )
                                   1629 ;       Return smaller of top two items.
      0007D9 07 BE                 1630         .word      LINK
                           0007DB  1631 LINK = . 
      0007DB 03                    1632         .byte      3
      0007DC 4D 49 4E              1633         .ascii     "MIN"
      0007DF                       1634 MIN:
      0007DF 90 93            [ 1] 1635         LDW Y,X    ;D = n2
      0007E1 90 EE 02         [ 2] 1636         LDW Y,(2,Y)
      0007E4 90 BF 24         [ 2] 1637         LDW YTEMP,Y
      0007E7 90 93            [ 1] 1638         LDW Y,X
      0007E9 90 FE            [ 2] 1639         LDW Y,(Y)
      0007EB 90 B3 24         [ 2] 1640         CPW Y,YTEMP     ;if n2 <> n1
      0007EE 2C 02            [ 1] 1641         JRSGT     MIN1
      0007F0 EF 02            [ 2] 1642         LDW (2,X),Y
      0007F2 1C 00 02         [ 2] 1643 MIN1:	ADDW X,#2
      0007F5 81               [ 4] 1644 	RET     
                                   1645 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1646 ;       WITHIN  ( u ul uh -- t )
                                   1647 ;       Return true if u is within
                                   1648 ;       range of ul and uh. ( ul <= u < uh )
      0007F6 07 DB                 1649         .word      LINK
                           0007F8  1650 LINK = . 
      0007F8 06                    1651         .byte      6
      0007F9 57 49 54 48 49 4E     1652         .ascii     "WITHIN"
      0007FF                       1653 WITHI:
      0007FF CD 04 F3         [ 4] 1654         CALL     OVER
      000802 CD 07 3D         [ 4] 1655         CALL     SUBB
      000805 CD 04 92         [ 4] 1656         CALL     TOR
      000808 CD 07 3D         [ 4] 1657         CALL     SUBB
      00080B CD 04 73         [ 4] 1658         CALL     RFROM
      00080E CC 07 84         [ 2] 1659         JP     ULESS
                                   1660 
                                   1661 ;; Divide
                                   1662 
                                   1663 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1664 ;       Unsigned divide of a double by a
                                   1665 ;       single. Return mod and quotient.
      000811 07 F8                 1666         .word      LINK
                           000813  1667 LINK = . 
      000813 06                    1668         .byte      6
      000814 55 4D 2F 4D 4F 44     1669         .ascii     "UM/MOD"
      00081A                       1670 UMMOD:
      00081A BF 22            [ 2] 1671 	LDW XTEMP,X	; save stack pointer
      00081C FE               [ 2] 1672 	LDW X,(X)	; un
      00081D BF 24            [ 2] 1673 	LDW YTEMP,X     ; save un
      00081F 90 BE 22         [ 2] 1674 	LDW Y,XTEMP	; stack pointer
      000822 90 EE 04         [ 2] 1675 	LDW Y,(4,Y)     ; Y=udl
      000825 BE 22            [ 2] 1676 	LDW X,XTEMP
      000827 EE 02            [ 2] 1677 	LDW X,(2,X)	; X=udh
      000829 B3 24            [ 2] 1678 	CPW X,YTEMP
      00082B 23 0F            [ 2] 1679 	JRULE MMSM1
      00082D BE 22            [ 2] 1680 	LDW X,XTEMP
      00082F 1C 00 02         [ 2] 1681 	ADDW X,#2	; pop off 1 level
      000832 90 AE FF FF      [ 2] 1682 	LDW Y,#0xFFFF
      000836 FF               [ 2] 1683 	LDW (X),Y
      000837 90 5F            [ 1] 1684 	CLRW Y
      000839 EF 02            [ 2] 1685 	LDW (2,X),Y
      00083B 81               [ 4] 1686 	RET
      00083C                       1687 MMSM1:
                                   1688 ; take advantage of divw x,y when udh==0
      00083C 5D               [ 2] 1689         tnzw x  ; is udh==0?
      00083D 26 11            [ 1] 1690         jrne MMSM2 
      00083F 93               [ 1] 1691         ldw x,y    ;udl 
      000840 90 BE 24         [ 2] 1692         ldw y,YTEMP ; divisor 
      000843 65               [ 2] 1693         divw x,y 
      000844 89               [ 2] 1694         pushw x     ; quotient 
      000845 BE 22            [ 2] 1695         ldw x,XTEMP 
      000847 1C 00 02         [ 2] 1696         addw x,#CELLL 
      00084A EF 02            [ 2] 1697         ldw (2,x),y  ; ur
      00084C 90 85            [ 2] 1698         popw y 
      00084E FF               [ 2] 1699         ldw (x),y ; uq 
      00084F 81               [ 4] 1700         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000850                       1701 MMSM2:        
      000850 A6 11            [ 1] 1702 	LD A,#17	; loop count
      000852                       1703 MMSM3:
      000852 B3 24            [ 2] 1704 	CPW X,YTEMP	; compare udh to un
      000854 25 04            [ 1] 1705 	JRULT MMSM4	; can't subtract
      000856 72 B0 00 24      [ 2] 1706 	SUBW X,YTEMP	; can subtract
      00085A                       1707 MMSM4:
      00085A 8C               [ 1] 1708 	CCF	; quotient bit
      00085B 90 59            [ 2] 1709 	RLCW Y	; rotate into quotient
      00085D 59               [ 2] 1710 	RLCW X	; rotate into remainder
      00085E 4A               [ 1] 1711 	DEC A	; repeat
      00085F 22 F1            [ 1] 1712 	JRUGT MMSM3
      000861 56               [ 2] 1713         RRCW X 
      000862 BF 24            [ 2] 1714 	LDW YTEMP,X	; done, save remainder
      000864 BE 22            [ 2] 1715 	LDW X,XTEMP
      000866 1C 00 02         [ 2] 1716 	ADDW X,#2	; drop
      000869 FF               [ 2] 1717 	LDW (X),Y
      00086A 90 BE 24         [ 2] 1718 	LDW Y,YTEMP	; save quotient
      00086D EF 02            [ 2] 1719 	LDW (2,X),Y
      00086F 81               [ 4] 1720 	RET
                                   1721 	
                                   1722 ;       M/MOD   ( d n -- r q )
                                   1723 ;       Signed floored divide of double by
                                   1724 ;       single. Return mod and quotient.
      000870 08 13                 1725         .word      LINK
                           000872  1726 LINK = . 
      000872 05                    1727         .byte      5
      000873 4D 2F 4D 4F 44        1728         .ascii     "M/MOD"
      000878                       1729 MSMOD:  
      000878 CD 04 C9         [ 4] 1730         CALL	DUPP
      00087B CD 05 02         [ 4] 1731         CALL	ZLESS
      00087E CD 04 C9         [ 4] 1732         CALL	DUPP
      000881 CD 04 92         [ 4] 1733         CALL	TOR
      000884 CD 03 D7         [ 4] 1734         CALL	QBRAN
      000887 08 95                 1735         .word	MMOD1
      000889 CD 06 EF         [ 4] 1736         CALL	NEGAT
      00088C CD 04 92         [ 4] 1737         CALL	TOR
      00088F CD 07 01         [ 4] 1738         CALL	DNEGA
      000892 CD 04 73         [ 4] 1739         CALL	RFROM
      000895 CD 04 92         [ 4] 1740 MMOD1:	CALL	TOR
      000898 CD 04 C9         [ 4] 1741         CALL	DUPP
      00089B CD 05 02         [ 4] 1742         CALL	ZLESS
      00089E CD 03 D7         [ 4] 1743         CALL	QBRAN
      0008A1 08 A9                 1744         .word	MMOD2
      0008A3 CD 04 86         [ 4] 1745         CALL	RAT
      0008A6 CD 06 C4         [ 4] 1746         CALL	PLUS
      0008A9 CD 04 73         [ 4] 1747 MMOD2:	CALL	RFROM
      0008AC CD 08 1A         [ 4] 1748         CALL	UMMOD
      0008AF CD 04 73         [ 4] 1749         CALL	RFROM
      0008B2 CD 03 D7         [ 4] 1750         CALL	QBRAN
      0008B5 08 C0                 1751         .word	MMOD3
      0008B7 CD 04 D9         [ 4] 1752         CALL	SWAPP
      0008BA CD 06 EF         [ 4] 1753         CALL	NEGAT
      0008BD CD 04 D9         [ 4] 1754         CALL	SWAPP
      0008C0 81               [ 4] 1755 MMOD3:	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1756 
                                   1757 ;       /MOD    ( n n -- r q )
                                   1758 ;       Signed divide. Return mod and quotient.
      0008C1 08 72                 1759         .word      LINK
                           0008C3  1760 LINK = . 
      0008C3 04                    1761         .byte      4
      0008C4 2F 4D 4F 44           1762         .ascii     "/MOD"
      0008C8                       1763 SLMOD:
      0008C8 CD 04 F3         [ 4] 1764         CALL	OVER
      0008CB CD 05 02         [ 4] 1765         CALL	ZLESS
      0008CE CD 04 D9         [ 4] 1766         CALL	SWAPP
      0008D1 CC 08 78         [ 2] 1767         JP	MSMOD
                                   1768 
                                   1769 ;       MOD     ( n n -- r )
                                   1770 ;       Signed divide. Return mod only.
      0008D4 08 C3                 1771         .word      LINK
                           0008D6  1772 LINK = . 
      0008D6 03                    1773         .byte      3
      0008D7 4D 4F 44              1774         .ascii     "MOD"
      0008DA                       1775 MODD:
      0008DA CD 08 C8         [ 4] 1776 	CALL	SLMOD
      0008DD CC 04 BF         [ 2] 1777 	JP	DROP
                                   1778 
                                   1779 ;       /       ( n n -- q )
                                   1780 ;       Signed divide. Return quotient only.
      0008E0 08 D6                 1781         .word      LINK
                           0008E2  1782 LINK = . 
      0008E2 01                    1783         .byte      1
      0008E3 2F                    1784         .ascii     "/"
      0008E4                       1785 SLASH:
      0008E4 CD 08 C8         [ 4] 1786         CALL	SLMOD
      0008E7 CD 04 D9         [ 4] 1787         CALL	SWAPP
      0008EA CC 04 BF         [ 2] 1788         JP	DROP
                                   1789 
                                   1790 ;; Multiply
                                   1791 
                                   1792 ;       UM*     ( u u -- ud )
                                   1793 ;       Unsigned multiply. Return double product.
      0008ED 08 E2                 1794         .word      LINK
                           0008EF  1795 LINK = . 
      0008EF 03                    1796         .byte      3
      0008F0 55 4D 2A              1797         .ascii     "UM*"
      0008F3                       1798 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1799 ; take advantage of SP addressing modes
                                   1800 ; these PRODx in RAM are not required
                                   1801 ; the product is kept on stack as local variable 
                                   1802         ;; bytes offset on data stack 
                           000002  1803         da=2 
                           000003  1804         db=3 
                           000000  1805         dc=0 
                           000001  1806         dd=1 
                                   1807         ;; product bytes offset on return stack 
                           000001  1808         UD1=1  ; ud bits 31..24
                           000002  1809         UD2=2  ; ud bits 23..16
                           000003  1810         UD3=3  ; ud bits 15..8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                           000004  1811         UD4=4  ; ud bits 7..0 
                                   1812         ;; local variable for product set to zero   
      0008F3 90 5F            [ 1] 1813         clrw y 
      0008F5 90 89            [ 2] 1814         pushw y  ; bits 15..0
      0008F7 90 89            [ 2] 1815         pushw y  ; bits 31..16 
      0008F9 E6 03            [ 1] 1816         ld a,(db,x) ; b 
      0008FB 90 97            [ 1] 1817         ld yl,a 
      0008FD E6 01            [ 1] 1818         ld a,(dd,x)   ; d
      0008FF 90 42            [ 4] 1819         mul y,a    ; b*d  
      000901 17 03            [ 2] 1820         ldw (UD3,sp),y ; lowest weight product 
      000903 E6 03            [ 1] 1821         ld a,(db,x)
      000905 90 97            [ 1] 1822         ld yl,a 
      000907 E6 00            [ 1] 1823         ld a,(dc,x)
      000909 90 42            [ 4] 1824         mul y,a  ; b*c 
                                   1825         ;;; do the partial sum 
      00090B 72 F9 02         [ 2] 1826         addw y,(UD2,sp)
      00090E 4F               [ 1] 1827         clr a 
      00090F 49               [ 1] 1828         rlc a
      000910 6B 01            [ 1] 1829         ld (UD1,sp),a 
      000912 17 02            [ 2] 1830         ldw (UD2,sp),y 
      000914 E6 02            [ 1] 1831         ld a,(da,x)
      000916 90 97            [ 1] 1832         ld yl,a 
      000918 E6 01            [ 1] 1833         ld a,(dd,x)
      00091A 90 42            [ 4] 1834         mul y,a   ; a*d 
                                   1835         ;; do partial sum 
      00091C 72 F9 02         [ 2] 1836         addw y,(UD2,sp)
      00091F 4F               [ 1] 1837         clr a 
      000920 19 01            [ 1] 1838         adc a,(UD1,sp)
      000922 6B 01            [ 1] 1839         ld (UD1,sp),a  
      000924 17 02            [ 2] 1840         ldw (UD2,sp),y 
      000926 E6 02            [ 1] 1841         ld a,(da,x)
      000928 90 97            [ 1] 1842         ld yl,a 
      00092A E6 00            [ 1] 1843         ld a,(dc,x)
      00092C 90 42            [ 4] 1844         mul y,a  ;  a*c highest weight product 
                                   1845         ;;; do partial sum 
      00092E 72 F9 01         [ 2] 1846         addw y,(UD1,sp)
      000931 FF               [ 2] 1847         ldw (x),y  ; udh 
      000932 16 03            [ 2] 1848         ldw y,(UD3,sp)
      000934 EF 02            [ 2] 1849         ldw (2,x),y  ; udl  
      000936 5B 04            [ 2] 1850         addw sp,#4 ; drop local variable 
      000938 81               [ 4] 1851         ret  
                                   1852 
                                   1853 
                                   1854 ;       *       ( n n -- n )
                                   1855 ;       Signed multiply. Return single product.
      000939 08 EF                 1856         .word      LINK
                           00093B  1857 LINK = . 
      00093B 01                    1858         .byte      1
      00093C 2A                    1859         .ascii     "*"
      00093D                       1860 STAR:
      00093D CD 08 F3         [ 4] 1861 	CALL	UMSTA
      000940 CC 04 BF         [ 2] 1862 	JP	DROP
                                   1863 
                                   1864 ;       M*      ( n n -- d )
                                   1865 ;       Signed multiply. Return double product.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000943 09 3B                 1866         .word      LINK
                           000945  1867 LINK = . 
      000945 02                    1868         .byte      2
      000946 4D 2A                 1869         .ascii     "M*"
      000948                       1870 MSTAR:      
      000948 CD 06 AF         [ 4] 1871         CALL	DDUP
      00094B CD 05 3E         [ 4] 1872         CALL	XORR
      00094E CD 05 02         [ 4] 1873         CALL	ZLESS
      000951 CD 04 92         [ 4] 1874         CALL	TOR
      000954 CD 07 57         [ 4] 1875         CALL	ABSS
      000957 CD 04 D9         [ 4] 1876         CALL	SWAPP
      00095A CD 07 57         [ 4] 1877         CALL	ABSS
      00095D CD 08 F3         [ 4] 1878         CALL	UMSTA
      000960 CD 04 73         [ 4] 1879         CALL	RFROM
      000963 CD 03 D7         [ 4] 1880         CALL	QBRAN
      000966 09 6B                 1881         .word	MSTA1
      000968 CD 07 01         [ 4] 1882         CALL	DNEGA
      00096B 81               [ 4] 1883 MSTA1:	RET
                                   1884 
                                   1885 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1886 ;       Multiply n1 and n2, then divide
                                   1887 ;       by n3. Return mod and quotient.
      00096C 09 45                 1888         .word      LINK
                           00096E  1889 LINK = . 
      00096E 05                    1890         .byte      5
      00096F 2A 2F 4D 4F 44        1891         .ascii     "*/MOD"
      000974                       1892 SSMOD:
      000974 CD 04 92         [ 4] 1893         CALL     TOR
      000977 CD 09 48         [ 4] 1894         CALL     MSTAR
      00097A CD 04 73         [ 4] 1895         CALL     RFROM
      00097D CC 08 78         [ 2] 1896         JP     MSMOD
                                   1897 
                                   1898 ;       */      ( n1 n2 n3 -- q )
                                   1899 ;       Multiply n1 by n2, then divide
                                   1900 ;       by n3. Return quotient only.
      000980 09 6E                 1901         .word      LINK
                           000982  1902 LINK = . 
      000982 02                    1903         .byte      2
      000983 2A 2F                 1904         .ascii     "*/"
      000985                       1905 STASL:
      000985 CD 09 74         [ 4] 1906         CALL	SSMOD
      000988 CD 04 D9         [ 4] 1907         CALL	SWAPP
      00098B CC 04 BF         [ 2] 1908         JP	DROP
                                   1909 
                                   1910 ;; Miscellaneous
                                   1911 
                                   1912 ;       CELL+   ( a -- a )
                                   1913 ;       Add cell size in byte to address.
      00098E 09 82                 1914         .word      LINK
                           000990  1915 LINK = . 
      000990 02                    1916         .byte       2
      000991 32 2B                 1917         .ascii     "2+"
      000993                       1918 CELLP:
      000993 90 93            [ 1] 1919         LDW Y,X
      000995 90 FE            [ 2] 1920 	LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000997 72 A9 00 02      [ 2] 1921         ADDW Y,#CELLL 
      00099B FF               [ 2] 1922         LDW (X),Y
      00099C 81               [ 4] 1923         RET
                                   1924 
                                   1925 ;       CELL-   ( a -- a )
                                   1926 ;       Subtract 2 from address.
      00099D 09 90                 1927         .word      LINK
                           00099F  1928 LINK = . 
      00099F 02                    1929         .byte       2
      0009A0 32 2D                 1930         .ascii     "2-"
      0009A2                       1931 CELLM:
      0009A2 90 93            [ 1] 1932         LDW Y,X
      0009A4 90 FE            [ 2] 1933 	LDW Y,(Y)
      0009A6 72 A2 00 02      [ 2] 1934         SUBW Y,#CELLL
      0009AA FF               [ 2] 1935         LDW (X),Y
      0009AB 81               [ 4] 1936         RET
                                   1937 
                                   1938 ;       CELLS   ( n -- n )
                                   1939 ;       Multiply tos by 2.
      0009AC 09 9F                 1940         .word      LINK
                           0009AE  1941 LINK = . 
      0009AE 02                    1942         .byte       2
      0009AF 32 2A                 1943         .ascii     "2*"
      0009B1                       1944 CELLS:
      0009B1 90 93            [ 1] 1945         LDW Y,X
      0009B3 90 FE            [ 2] 1946 	LDW Y,(Y)
      0009B5 90 58            [ 2] 1947         SLAW Y
      0009B7 FF               [ 2] 1948         LDW (X),Y
      0009B8 81               [ 4] 1949         RET
                                   1950 
                                   1951 ;       1+      ( a -- a )
                                   1952 ;       Add cell size in byte to address.
      0009B9 09 AE                 1953         .word      LINK
                           0009BB  1954 LINK = . 
      0009BB 02                    1955         .byte      2
      0009BC 31 2B                 1956         .ascii     "1+"
      0009BE                       1957 ONEP:
      0009BE 90 93            [ 1] 1958         LDW Y,X
      0009C0 90 FE            [ 2] 1959 	LDW Y,(Y)
      0009C2 90 5C            [ 1] 1960         INCW Y
      0009C4 FF               [ 2] 1961         LDW (X),Y
      0009C5 81               [ 4] 1962         RET
                                   1963 
                                   1964 ;       1-      ( a -- a )
                                   1965 ;       Subtract 2 from address.
      0009C6 09 BB                 1966         .word      LINK
                           0009C8  1967 LINK = . 
      0009C8 02                    1968         .byte      2
      0009C9 31 2D                 1969         .ascii     "1-"
      0009CB                       1970 ONEM:
      0009CB 90 93            [ 1] 1971         LDW Y,X
      0009CD 90 FE            [ 2] 1972 	LDW Y,(Y)
      0009CF 90 5A            [ 2] 1973         DECW Y
      0009D1 FF               [ 2] 1974         LDW (X),Y
      0009D2 81               [ 4] 1975         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1976 
                                   1977 ;  shift left n times 
                                   1978 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009D3 09 C8                 1979         .word LINK 
                           0009D5  1980         LINK=.
      0009D5 06                    1981         .byte 6 
      0009D6 4C 53 48 49 46 54     1982         .ascii "LSHIFT"
      0009DC                       1983 LSHIFT:
      0009DC E6 01            [ 1] 1984         ld a,(1,x)
      0009DE 1C 00 02         [ 2] 1985         addw x,#CELLL 
      0009E1 90 93            [ 1] 1986         ldw y,x 
      0009E3 90 FE            [ 2] 1987         ldw y,(y)
      0009E5                       1988 LSHIFT1:
      0009E5 4D               [ 1] 1989         tnz a 
      0009E6 27 05            [ 1] 1990         jreq LSHIFT4 
      0009E8 90 58            [ 2] 1991         sllw y 
      0009EA 4A               [ 1] 1992         dec a 
      0009EB 20 F8            [ 2] 1993         jra LSHIFT1 
      0009ED                       1994 LSHIFT4:
      0009ED FF               [ 2] 1995         ldw (x),y 
      0009EE 81               [ 4] 1996         ret 
                                   1997 
                                   1998 ; shift right n times                 
                                   1999 ; RSHIFT (n1 n2 -- n1>>n2 )
      0009EF 09 D5                 2000         .word LINK 
                           0009F1  2001         LINK=.
      0009F1 06                    2002         .byte 6
      0009F2 52 53 48 49 46 54     2003         .ascii "RSHIFT"
      0009F8                       2004 RSHIFT:
      0009F8 E6 01            [ 1] 2005         ld a,(1,x)
      0009FA 1C 00 02         [ 2] 2006         addw x,#CELLL 
      0009FD 90 93            [ 1] 2007         ldw y,x 
      0009FF 90 FE            [ 2] 2008         ldw y,(y)
      000A01                       2009 RSHIFT1:
      000A01 4D               [ 1] 2010         tnz a 
      000A02 27 05            [ 1] 2011         jreq RSHIFT4 
      000A04 90 54            [ 2] 2012         srlw y 
      000A06 4A               [ 1] 2013         dec a 
      000A07 20 F8            [ 2] 2014         jra RSHIFT1 
      000A09                       2015 RSHIFT4:
      000A09 FF               [ 2] 2016         ldw (x),y 
      000A0A 81               [ 4] 2017         ret 
                                   2018 
                                   2019 
                                   2020 ;       2/      ( n -- n )
                                   2021 ;       divide  tos by 2.
      000A0B 09 F1                 2022         .word      LINK
                           000A0D  2023 LINK = . 
      000A0D 02                    2024         .byte      2
      000A0E 32 2F                 2025         .ascii     "2/"
      000A10                       2026 TWOSL:
      000A10 90 93            [ 1] 2027         LDW Y,X
      000A12 90 FE            [ 2] 2028 	LDW Y,(Y)
      000A14 90 57            [ 2] 2029         SRAW Y
      000A16 FF               [ 2] 2030         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A17 81               [ 4] 2031         RET
                                   2032 
                                   2033 ;       BL      ( -- 32 )
                                   2034 ;       Return 32,  blank character.
      000A18 0A 0D                 2035         .word      LINK
                           000A1A  2036 LINK = . 
      000A1A 02                    2037         .byte      2
      000A1B 42 4C                 2038         .ascii     "BL"
      000A1D                       2039 BLANK:
      000A1D 1D 00 02         [ 2] 2040         SUBW X,#2
      000A20 90 AE 00 20      [ 2] 2041 	LDW Y,#32
      000A24 FF               [ 2] 2042         LDW (X),Y
      000A25 81               [ 4] 2043         RET
                                   2044 
                                   2045 ;         0     ( -- 0)
                                   2046 ;         Return 0.
      000A26 0A 1A                 2047         .word      LINK
                           000A28  2048 LINK = . 
      000A28 01                    2049         .byte       1
      000A29 30                    2050         .ascii     "0"
      000A2A                       2051 ZERO:
      000A2A 1D 00 02         [ 2] 2052         SUBW X,#2
      000A2D 90 5F            [ 1] 2053 	CLRW Y
      000A2F FF               [ 2] 2054         LDW (X),Y
      000A30 81               [ 4] 2055         RET
                                   2056 
                                   2057 ;         1     ( -- 1)
                                   2058 ;         Return 1.
      000A31 0A 28                 2059         .word      LINK
                           000A33  2060 LINK = . 
      000A33 01                    2061         .byte       1
      000A34 31                    2062         .ascii     "1"
      000A35                       2063 ONE:
      000A35 1D 00 02         [ 2] 2064         SUBW X,#2
      000A38 90 AE 00 01      [ 2] 2065 	LDW Y,#1
      000A3C FF               [ 2] 2066         LDW (X),Y
      000A3D 81               [ 4] 2067         RET
                                   2068 
                                   2069 ;         -1    ( -- -1)
                                   2070 ;         Return 32,  blank character.
      000A3E 0A 33                 2071         .word      LINK
                           000A40  2072 LINK = . 
      000A40 02                    2073         .byte       2
      000A41 2D 31                 2074         .ascii     "-1"
      000A43                       2075 MONE:
      000A43 1D 00 02         [ 2] 2076         SUBW X,#2
      000A46 90 AE FF FF      [ 2] 2077 	LDW Y,#0xFFFF
      000A4A FF               [ 2] 2078         LDW (X),Y
      000A4B 81               [ 4] 2079         RET
                                   2080 
                                   2081 ;       >CHAR   ( c -- c )
                                   2082 ;       Filter non-printing characters.
      000A4C 0A 40                 2083         .word      LINK
                           000A4E  2084 LINK = . 
      000A4E 05                    2085         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A4F 3E 43 48 41 52        2086         .ascii     ">CHAR"
      000A54                       2087 TCHAR:
      000A54 E6 01            [ 1] 2088         ld a,(1,x)
      000A56 A1 20            [ 1] 2089         cp a,#32  
      000A58 2B 05            [ 1] 2090         jrmi 1$ 
      000A5A A1 7F            [ 1] 2091         cp a,#127 
      000A5C 2A 01            [ 1] 2092         jrpl 1$ 
      000A5E 81               [ 4] 2093         ret 
      000A5F A6 5F            [ 1] 2094 1$:     ld a,#'_ 
      000A61 E7 01            [ 1] 2095         ld (1,x),a 
      000A63 81               [ 4] 2096         ret 
                                   2097 
                                   2098 ;       DEPTH   ( -- n )
                                   2099 ;       Return  depth of  data stack.
      000A64 0A 4E                 2100         .word      LINK
                           000A66  2101 LINK = . 
      000A66 05                    2102         .byte      5
      000A67 44 45 50 54 48        2103         .ascii     "DEPTH"
      000A6C                       2104 DEPTH: 
      000A6C 90 BE 2A         [ 2] 2105         LDW Y,SP0    ;save data stack ptr
      000A6F BF 22            [ 2] 2106 	LDW XTEMP,X
      000A71 72 B2 00 22      [ 2] 2107         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A75 90 57            [ 2] 2108         SRAW Y    ;Y = #stack items
      000A77 1D 00 02         [ 2] 2109 	SUBW X,#2
      000A7A FF               [ 2] 2110         LDW (X),Y     ; if neg, underflow
      000A7B 81               [ 4] 2111         RET
                                   2112 
                                   2113 ;       PICK    ( ... +n -- ... w )
                                   2114 ;       Copy  nth stack item to tos.
      000A7C 0A 66                 2115         .word      LINK
                           000A7E  2116 LINK = . 
      000A7E 04                    2117         .byte      4
      000A7F 50 49 43 4B           2118         .ascii     "PICK"
      000A83                       2119 PICK:
      000A83 90 93            [ 1] 2120         LDW Y,X   ;D = n1
      000A85 90 FE            [ 2] 2121         LDW Y,(Y)
                                   2122 ; modified for standard compliance          
                                   2123 ; 0 PICK must be equivalent to DUP 
      000A87 90 5C            [ 1] 2124         INCW Y 
      000A89 90 58            [ 2] 2125         SLAW Y
      000A8B BF 22            [ 2] 2126         LDW XTEMP,X
      000A8D 72 B9 00 22      [ 2] 2127         ADDW Y,XTEMP
      000A91 90 FE            [ 2] 2128         LDW Y,(Y)
      000A93 FF               [ 2] 2129         LDW (X),Y
      000A94 81               [ 4] 2130         RET
                                   2131 
                                   2132 ;; Memory access
                                   2133 
                                   2134 ;       +!      ( n a -- )
                                   2135 ;       Add n to  contents at address a.
      000A95 0A 7E                 2136         .word      LINK
                           000A97  2137 LINK = . 
      000A97 02                    2138         .byte      2
      000A98 2B 21                 2139         .ascii     "+!"
      000A9A                       2140 PSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000A9A 90 93            [ 1] 2141         ldw y,x 
      000A9C 90 FE            [ 2] 2142         ldw y,(y)
      000A9E 90 BF 24         [ 2] 2143         ldw YTEMP,y  ; address
      000AA1 90 FE            [ 2] 2144         ldw y,(y)  
      000AA3 90 89            [ 2] 2145         pushw y  ; value at address 
      000AA5 90 93            [ 1] 2146         ldw y,x 
      000AA7 90 EE 02         [ 2] 2147         ldw y,(2,y) ; n 
      000AAA 72 F9 01         [ 2] 2148         addw y,(1,sp) ; n+value
      000AAD 91 CF 24         [ 5] 2149         ldw [YTEMP],y ;  a!
      000AB0 90 85            [ 2] 2150         popw y    ;drop local var
      000AB2 1C 00 04         [ 2] 2151         addw x,#4 ; DDROP 
      000AB5 81               [ 4] 2152         ret 
                                   2153 
                                   2154 ;       2!      ( d a -- )
                                   2155 ;       Store  double integer to address a.
      000AB6 0A 97                 2156         .word      LINK
                           000AB8  2157 LINK = . 
      000AB8 02                    2158         .byte      2
      000AB9 32 21                 2159         .ascii     "2!"
      000ABB                       2160 DSTOR:
      000ABB 90 93            [ 1] 2161         ldw y,x 
      000ABD 90 FE            [ 2] 2162         ldw y,(y)
      000ABF 90 BF 24         [ 2] 2163         ldw YTEMP,y ; address 
      000AC2 1C 00 02         [ 2] 2164         addw x,#CELLL ; drop a 
      000AC5 90 93            [ 1] 2165         ldw y,x 
      000AC7 90 FE            [ 2] 2166         ldw y,(y) ; hi word 
      000AC9 89               [ 2] 2167         pushw x 
      000ACA EE 02            [ 2] 2168         ldw x,(2,x) ; lo word 
      000ACC 91 CF 24         [ 5] 2169         ldw [YTEMP],y
      000ACF 90 93            [ 1] 2170         ldw y,x 
      000AD1 AE 00 02         [ 2] 2171         ldw x,#2 
      000AD4 92 DF 24         [ 5] 2172         ldw ([YTEMP],x),y 
      000AD7 85               [ 2] 2173         popw x 
      000AD8 1C 00 04         [ 2] 2174         addw x,#4 ; DDROP 
      000ADB 81               [ 4] 2175         ret 
                                   2176 
                                   2177 ;       2@      ( a -- d )
                                   2178 ;       Fetch double integer from address a.
      000ADC 0A B8                 2179         .word      LINK
                           000ADE  2180 LINK = . 
      000ADE 02                    2181         .byte      2
      000ADF 32 40                 2182         .ascii     "2@"
      000AE1                       2183 DAT:
      000AE1 90 93            [ 1] 2184         ldw y,x 
      000AE3 90 FE            [ 2] 2185         ldw y,(y) ;address 
      000AE5 90 BF 24         [ 2] 2186         ldw YTEMP,y 
      000AE8 1D 00 02         [ 2] 2187         subw x,#CELLL ; space for udh 
      000AEB 91 CE 24         [ 5] 2188         ldw y,[YTEMP] ; udh 
      000AEE FF               [ 2] 2189         ldw (x),y 
      000AEF 90 AE 00 02      [ 2] 2190         ldw y,#2
      000AF3 91 DE 24         [ 5] 2191         ldw y,([YTEMP],y) ; udl 
      000AF6 EF 02            [ 2] 2192         ldw (2,x),y
      000AF8 81               [ 4] 2193         ret 
                                   2194 
                                   2195 ;       COUNT   ( b -- b +n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2196 ;       Return count byte of a string
                                   2197 ;       and add 1 to byte address.
      000AF9 0A DE                 2198         .word      LINK
                           000AFB  2199 LINK = . 
      000AFB 05                    2200         .byte      5
      000AFC 43 4F 55 4E 54        2201         .ascii     "COUNT"
      000B01                       2202 COUNT:
      000B01 90 93            [ 1] 2203         ldw y,x 
      000B03 90 FE            [ 2] 2204         ldw y,(y) ; address 
      000B05 90 F6            [ 1] 2205         ld a,(y)  ; count 
      000B07 90 5C            [ 1] 2206         incw y 
      000B09 FF               [ 2] 2207         ldw (x),y 
      000B0A 1D 00 02         [ 2] 2208         subw x,#CELLL 
      000B0D E7 01            [ 1] 2209         ld (1,x),a 
      000B0F 7F               [ 1] 2210         clr (x)
      000B10 81               [ 4] 2211         ret 
                                   2212 
                                   2213 ;       HERE    ( -- a )
                                   2214 ;       Return  top of  variables
      000B11 0A FB                 2215         .word      LINK
                           000B13  2216 LINK = . 
      000B13 04                    2217         .byte      4
      000B14 48 45 52 45           2218         .ascii     "HERE"
      000B18                       2219 HERE:
      000B18 90 AE 00 16      [ 2] 2220       	ldw y,#UVP 
      000B1C 90 FE            [ 2] 2221         ldw y,(y)
      000B1E 1D 00 02         [ 2] 2222         subw x,#CELLL 
      000B21 FF               [ 2] 2223         ldw (x),y 
      000B22 81               [ 4] 2224         ret 
                                   2225 
                                   2226 ;       PAD     ( -- a )
                                   2227 ;       Return address of text buffer
                                   2228 ;       above  code dictionary.
      000B23 0B 13                 2229         .word      LINK
                           000B25  2230 LINK = . 
      000B25 03                    2231         .byte      3
      000B26 50 41 44              2232         .ascii     "PAD"
      000B29                       2233 PAD:
      000B29 CD 0B 18         [ 4] 2234         CALL     HERE
      000B2C CD 03 A4         [ 4] 2235         CALL     DOLIT
      000B2F 00 50                 2236         .word      80
      000B31 CC 06 C4         [ 2] 2237         JP     PLUS
                                   2238 
                                   2239 ;       TIB     ( -- a )
                                   2240 ;       Return address of terminal input buffer.
      000B34 0B 25                 2241         .word      LINK
                           000B36  2242 LINK = . 
      000B36 03                    2243         .byte      3
      000B37 54 49 42              2244         .ascii     "TIB"
      000B3A                       2245 TIB:
      000B3A CD 05 B4         [ 4] 2246         CALL     NTIB
      000B3D CD 09 93         [ 4] 2247         CALL     CELLP
      000B40 CC 04 22         [ 2] 2248         JP     AT
                                   2249 
                                   2250 ;       @EXECUTE        ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2251 ;       Execute vector stored in address a.
      000B43 0B 36                 2252         .word      LINK
                           000B45  2253 LINK = . 
      000B45 08                    2254         .byte      8
      000B46 40 45 58 45 43 55 54  2255         .ascii     "@EXECUTE"
             45
      000B4E                       2256 ATEXE:
      000B4E CD 04 22         [ 4] 2257         CALL     AT
      000B51 CD 06 73         [ 4] 2258         CALL     QDUP    ;?address or zero
      000B54 CD 03 D7         [ 4] 2259         CALL     QBRAN
      000B57 0B 5C                 2260         .word      EXE1
      000B59 CD 03 FE         [ 4] 2261         CALL     EXECU   ;execute if non-zero
      000B5C 81               [ 4] 2262 EXE1:   RET     ;do nothing if zero
                                   2263 
                                   2264 ;       CMOVE   ( b1 b2 u -- )
                                   2265 ;       Copy u bytes from b1 to b2.
      000B5D 0B 45                 2266         .word      LINK
                           000B5F  2267 LINK = . 
      000B5F 05                    2268         .byte      5
      000B60 43 4D 4F 56 45        2269         .ascii     "CMOVE"
      000B65                       2270 CMOVE:
      000B65 CD 04 92         [ 4] 2271         CALL	TOR
      000B68 CD 03 EE         [ 4] 2272         CALL	BRAN
      000B6B 0B 85                 2273         .word	CMOV2
      000B6D CD 04 92         [ 4] 2274 CMOV1:	CALL	TOR
      000B70 CD 04 C9         [ 4] 2275         CALL	DUPP
      000B73 CD 04 40         [ 4] 2276         CALL	CAT
      000B76 CD 04 86         [ 4] 2277         CALL	RAT
      000B79 CD 04 2F         [ 4] 2278         CALL	CSTOR
      000B7C CD 09 BE         [ 4] 2279         CALL	ONEP
      000B7F CD 04 73         [ 4] 2280         CALL	RFROM
      000B82 CD 09 BE         [ 4] 2281         CALL	ONEP
      000B85 CD 03 B8         [ 4] 2282 CMOV2:	CALL	DONXT
      000B88 0B 6D                 2283         .word	CMOV1
      000B8A CC 06 A4         [ 2] 2284         JP	DDROP
                                   2285 
                                   2286 ;       FILL    ( b u c -- )
                                   2287 ;       Fill u bytes of character c
                                   2288 ;       to area beginning at b.
      000B8D 0B 5F                 2289         .word       LINK
                           000B8F  2290 LINK = . 
      000B8F 04                    2291         .byte       4
      000B90 46 49 4C 4C           2292         .ascii     "FILL"
      000B94                       2293 FILL:
      000B94 90 93            [ 1] 2294         ldw y,x 
      000B96 90 E6 01         [ 1] 2295         ld a,(1,y) ; c 
      000B99 1C 00 02         [ 2] 2296         addw x,#CELLL ; drop c 
      000B9C 90 93            [ 1] 2297         ldw y,x 
      000B9E 90 FE            [ 2] 2298         ldw y,(y) ; count
      000BA0 90 89            [ 2] 2299         pushw y 
      000BA2 1C 00 02         [ 2] 2300         addw x,#CELLL ; drop u 
      000BA5 90 93            [ 1] 2301         ldw y,x 
      000BA7 1C 00 02         [ 2] 2302         addw x,#CELLL ; drop b 
      000BAA 90 FE            [ 2] 2303         ldw y,(y) ; address
      000BAC 90 BF 24         [ 2] 2304         ldw YTEMP,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BAF 90 85            [ 2] 2305         popw y ; count 
      000BB1                       2306 FILL1:  
      000BB1 92 C7 24         [ 4] 2307         ld [YTEMP],a 
      000BB4 3C 25            [ 1] 2308         inc YTEMP+1
      000BB6 24 02            [ 1] 2309         jrnc FILL2 
      000BB8 3C 24            [ 1] 2310         inc YTEMP
      000BBA                       2311 FILL2: 
      000BBA 90 5A            [ 2] 2312         decw y ; count 
      000BBC 26 F3            [ 1] 2313         jrne FILL1  
      000BBE 81               [ 4] 2314         ret 
                                   2315 
                                   2316 ;       ERASE   ( b u -- )
                                   2317 ;       Erase u bytes beginning at b.
      000BBF 0B 8F                 2318         .word      LINK
                           000BC1  2319 LINK = . 
      000BC1 05                    2320         .byte      5
      000BC2 45 52 41 53 45        2321         .ascii     "ERASE"
      000BC7                       2322 ERASE:
      000BC7 90 5F            [ 1] 2323         clrw y 
      000BC9 1D 00 02         [ 2] 2324         subw x,#CELLL 
      000BCC FF               [ 2] 2325         ldw (x),y 
      000BCD CC 0B 94         [ 2] 2326         jp FILL 
                                   2327 
                                   2328 
                                   2329 ;       PACK0   ( b u a -- a )
                                   2330 ;       Build a counted string with
                                   2331 ;       u characters from b. Null fill.
      000BD0 0B C1                 2332         .word      LINK
                           000BD2  2333 LINK = . 
      000BD2 05                    2334         .byte      5
      000BD3 50 41 43 4B 30        2335         .ascii     "PACK0"
      000BD8                       2336 PACKS:
      000BD8 CD 04 C9         [ 4] 2337         CALL     DUPP
      000BDB CD 04 92         [ 4] 2338         CALL     TOR     ;strings only on cell boundary
      000BDE CD 06 AF         [ 4] 2339         CALL     DDUP
      000BE1 CD 04 2F         [ 4] 2340         CALL     CSTOR
      000BE4 CD 09 BE         [ 4] 2341         CALL     ONEP ;save count
      000BE7 CD 04 D9         [ 4] 2342         CALL     SWAPP
      000BEA CD 0B 65         [ 4] 2343         CALL     CMOVE
      000BED CD 04 73         [ 4] 2344         CALL     RFROM
      000BF0 81               [ 4] 2345         RET
                                   2346 
                                   2347 ;; Numeric output, single precision
                                   2348 
                                   2349 ;       DIGIT   ( u -- c )
                                   2350 ;       Convert digit u to a character.
      000BF1 0B D2                 2351         .word      LINK
                           000BF3  2352 LINK = . 
      000BF3 05                    2353         .byte      5
      000BF4 44 49 47 49 54        2354         .ascii     "DIGIT"
      000BF9                       2355 DIGIT:
      000BF9 CD 03 A4         [ 4] 2356         CALL	DOLIT
      000BFC 00 09                 2357         .word	9
      000BFE CD 04 F3         [ 4] 2358         CALL	OVER
      000C01 CD 07 A2         [ 4] 2359         CALL	LESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000C04 CD 03 A4         [ 4] 2360         CALL	DOLIT
      000C07 00 07                 2361         .word	7
      000C09 CD 05 15         [ 4] 2362         CALL	ANDD
      000C0C CD 06 C4         [ 4] 2363         CALL	PLUS
      000C0F CD 03 A4         [ 4] 2364         CALL	DOLIT
      000C12 00 30                 2365         .word	48	;'0'
      000C14 CC 06 C4         [ 2] 2366         JP	PLUS
                                   2367 
                                   2368 ;       EXTRACT ( n base -- n c )
                                   2369 ;       Extract least significant digit from n.
      000C17 0B F3                 2370         .word      LINK
                           000C19  2371 LINK = . 
      000C19 07                    2372         .byte      7
      000C1A 45 58 54 52 41 43 54  2373         .ascii     "EXTRACT"
      000C21                       2374 EXTRC:
      000C21 CD 0A 2A         [ 4] 2375         CALL     ZERO
      000C24 CD 04 D9         [ 4] 2376         CALL     SWAPP
      000C27 CD 08 1A         [ 4] 2377         CALL     UMMOD
      000C2A CD 04 D9         [ 4] 2378         CALL     SWAPP
      000C2D CC 0B F9         [ 2] 2379         JP     DIGIT
                                   2380 
                                   2381 ;       <#      ( -- )
                                   2382 ;       Initiate  numeric output process.
      000C30 0C 19                 2383         .word      LINK
                           000C32  2384 LINK = . 
      000C32 02                    2385         .byte      2
      000C33 3C 23                 2386         .ascii     "<#"
      000C35                       2387 BDIGS:
      000C35 CD 0B 29         [ 4] 2388         CALL     PAD
      000C38 CD 05 F6         [ 4] 2389         CALL     HLD
      000C3B CC 04 0B         [ 2] 2390         JP     STORE
                                   2391 
                                   2392 ;       HOLD    ( c -- )
                                   2393 ;       Insert a character into output string.
      000C3E 0C 32                 2394         .word      LINK
                           000C40  2395 LINK = . 
      000C40 04                    2396         .byte      4
      000C41 48 4F 4C 44           2397         .ascii     "HOLD"
      000C45                       2398 HOLD:
      000C45 CD 05 F6         [ 4] 2399         CALL     HLD
      000C48 CD 04 22         [ 4] 2400         CALL     AT
      000C4B CD 09 CB         [ 4] 2401         CALL     ONEM
      000C4E CD 04 C9         [ 4] 2402         CALL     DUPP
      000C51 CD 05 F6         [ 4] 2403         CALL     HLD
      000C54 CD 04 0B         [ 4] 2404         CALL     STORE
      000C57 CC 04 2F         [ 2] 2405         JP     CSTOR
                                   2406 
                                   2407 ;       #       ( u -- u )
                                   2408 ;       Extract one digit from u and
                                   2409 ;       append digit to output string.
      000C5A 0C 40                 2410         .word      LINK
                           000C5C  2411 LINK = . 
      000C5C 01                    2412         .byte      1
      000C5D 23                    2413         .ascii     "#"
      000C5E                       2414 DIG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C5E CD 05 86         [ 4] 2415         CALL     BASE
      000C61 CD 04 22         [ 4] 2416         CALL     AT
      000C64 CD 0C 21         [ 4] 2417         CALL     EXTRC
      000C67 CC 0C 45         [ 2] 2418         JP     HOLD
                                   2419 
                                   2420 ;       #S      ( u -- 0 )
                                   2421 ;       Convert u until all digits
                                   2422 ;       are added to output string.
      000C6A 0C 5C                 2423         .word      LINK
                           000C6C  2424 LINK = . 
      000C6C 02                    2425         .byte      2
      000C6D 23 53                 2426         .ascii     "#S"
      000C6F                       2427 DIGS:
      000C6F CD 0C 5E         [ 4] 2428 DIGS1:  CALL     DIG
      000C72 CD 04 C9         [ 4] 2429         CALL     DUPP
      000C75 CD 03 D7         [ 4] 2430         CALL     QBRAN
      000C78 0C 7C                 2431         .word      DIGS2
      000C7A 20 F3            [ 2] 2432         JRA     DIGS1
      000C7C 81               [ 4] 2433 DIGS2:  RET
                                   2434 
                                   2435 ;       SIGN    ( n -- )
                                   2436 ;       Add a minus sign to
                                   2437 ;       numeric output string.
      000C7D 0C 6C                 2438         .word      LINK
                           000C7F  2439 LINK = . 
      000C7F 04                    2440         .byte      4
      000C80 53 49 47 4E           2441         .ascii     "SIGN"
      000C84                       2442 SIGN:
      000C84 CD 05 02         [ 4] 2443         CALL     ZLESS
      000C87 CD 03 D7         [ 4] 2444         CALL     QBRAN
      000C8A 0C 94                 2445         .word      SIGN1
      000C8C CD 03 A4         [ 4] 2446         CALL     DOLIT
      000C8F 00 2D                 2447         .word      45	;"-"
      000C91 CC 0C 45         [ 2] 2448         JP     HOLD
      000C94 81               [ 4] 2449 SIGN1:  RET
                                   2450 
                                   2451 ;       #>      ( w -- b u )
                                   2452 ;       Prepare output string.
      000C95 0C 7F                 2453         .word      LINK
                           000C97  2454 LINK = . 
      000C97 02                    2455         .byte      2
      000C98 23 3E                 2456         .ascii     "#>"
      000C9A                       2457 EDIGS:
      000C9A CD 04 BF         [ 4] 2458         CALL     DROP
      000C9D CD 05 F6         [ 4] 2459         CALL     HLD
      000CA0 CD 04 22         [ 4] 2460         CALL     AT
      000CA3 CD 0B 29         [ 4] 2461         CALL     PAD
      000CA6 CD 04 F3         [ 4] 2462         CALL     OVER
      000CA9 CC 07 3D         [ 2] 2463         JP     SUBB
                                   2464 
                                   2465 ;       str     ( w -- b u )
                                   2466 ;       Convert a signed integer
                                   2467 ;       to a numeric string.
      000CAC 0C 97                 2468         .word      LINK
                           000CAE  2469 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CAE 03                    2470         .byte      3
      000CAF 53 54 52              2471         .ascii     "STR"
      000CB2                       2472 STR:
      000CB2 CD 04 C9         [ 4] 2473         CALL     DUPP
      000CB5 CD 04 92         [ 4] 2474         CALL     TOR
      000CB8 CD 07 57         [ 4] 2475         CALL     ABSS
      000CBB CD 0C 35         [ 4] 2476         CALL     BDIGS
      000CBE CD 0C 6F         [ 4] 2477         CALL     DIGS
      000CC1 CD 04 73         [ 4] 2478         CALL     RFROM
      000CC4 CD 0C 84         [ 4] 2479         CALL     SIGN
      000CC7 CC 0C 9A         [ 2] 2480         JP     EDIGS
                                   2481 
                                   2482 ;       HEX     ( -- )
                                   2483 ;       Use radix 16 as base for
                                   2484 ;       numeric conversions.
      000CCA 0C AE                 2485         .word      LINK
                           000CCC  2486 LINK = . 
      000CCC 03                    2487         .byte      3
      000CCD 48 45 58              2488         .ascii     "HEX"
      000CD0                       2489 HEX:
      000CD0 CD 03 A4         [ 4] 2490         CALL     DOLIT
      000CD3 00 10                 2491         .word      16
      000CD5 CD 05 86         [ 4] 2492         CALL     BASE
      000CD8 CC 04 0B         [ 2] 2493         JP     STORE
                                   2494 
                                   2495 ;       DECIMAL ( -- )
                                   2496 ;       Use radix 10 as base
                                   2497 ;       for numeric conversions.
      000CDB 0C CC                 2498         .word      LINK
                           000CDD  2499 LINK = . 
      000CDD 07                    2500         .byte      7
      000CDE 44 45 43 49 4D 41 4C  2501         .ascii     "DECIMAL"
      000CE5                       2502 DECIM:
      000CE5 CD 03 A4         [ 4] 2503         CALL     DOLIT
      000CE8 00 0A                 2504         .word      10
      000CEA CD 05 86         [ 4] 2505         CALL     BASE
      000CED CC 04 0B         [ 2] 2506         JP     STORE
                                   2507 
                                   2508 ;; Numeric input, single precision
                                   2509 
                                   2510 ;       DIGIT?  ( c base -- u t )
                                   2511 ;       Convert a character to its numeric
                                   2512 ;       value. A flag indicates success.
      000CF0 0C DD                 2513         .word      LINK
                           000CF2  2514 LINK = . 
      000CF2 06                    2515         .byte       6
      000CF3 44 49 47 49 54 3F     2516         .ascii     "DIGIT?"
      000CF9                       2517 DIGTQ:
      000CF9 CD 04 92         [ 4] 2518         CALL     TOR
      000CFC CD 03 A4         [ 4] 2519         CALL     DOLIT
      000CFF 00 30                 2520         .word     48	; "0"
      000D01 CD 07 3D         [ 4] 2521         CALL     SUBB
      000D04 CD 03 A4         [ 4] 2522         CALL     DOLIT
      000D07 00 09                 2523         .word      9
      000D09 CD 04 F3         [ 4] 2524         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D0C CD 07 A2         [ 4] 2525         CALL     LESS
      000D0F CD 03 D7         [ 4] 2526         CALL     QBRAN
      000D12 0D 2A                 2527         .word      DGTQ1
      000D14 CD 03 A4         [ 4] 2528         CALL     DOLIT
      000D17 00 07                 2529         .word      7
      000D19 CD 07 3D         [ 4] 2530         CALL     SUBB
      000D1C CD 04 C9         [ 4] 2531         CALL     DUPP
      000D1F CD 03 A4         [ 4] 2532         CALL     DOLIT
      000D22 00 0A                 2533         .word      10
      000D24 CD 07 A2         [ 4] 2534         CALL     LESS
      000D27 CD 05 29         [ 4] 2535         CALL     ORR
      000D2A CD 04 C9         [ 4] 2536 DGTQ1:  CALL     DUPP
      000D2D CD 04 73         [ 4] 2537         CALL     RFROM
      000D30 CC 07 84         [ 2] 2538         JP     ULESS
                                   2539 
                                   2540 ;       NUMBER? ( a -- n T | a F )
                                   2541 ;       Convert a number string to
                                   2542 ;       integer. Push a flag on tos.
      000D33 0C F2                 2543         .word      LINK
                           000D35  2544 LINK = . 
      000D35 07                    2545         .byte      7
      000D36 4E 55 4D 42 45 52 3F  2546         .ascii     "NUMBER?"
      000D3D                       2547 NUMBQ:
      000D3D CD 05 86         [ 4] 2548         CALL     BASE
      000D40 CD 04 22         [ 4] 2549         CALL     AT
      000D43 CD 04 92         [ 4] 2550         CALL     TOR
      000D46 CD 0A 2A         [ 4] 2551         CALL     ZERO
      000D49 CD 04 F3         [ 4] 2552         CALL     OVER
      000D4C CD 0B 01         [ 4] 2553         CALL     COUNT
      000D4F CD 04 F3         [ 4] 2554         CALL     OVER
      000D52 CD 04 40         [ 4] 2555         CALL     CAT
      000D55 CD 03 A4         [ 4] 2556         CALL     DOLIT
      000D58 00 24                 2557         .word     36	; "0x"
      000D5A CD 07 65         [ 4] 2558         CALL     EQUAL
      000D5D CD 03 D7         [ 4] 2559         CALL     QBRAN
      000D60 0D 71                 2560         .word      NUMQ1
      000D62 CD 0C D0         [ 4] 2561         CALL     HEX
      000D65 CD 04 D9         [ 4] 2562         CALL     SWAPP
      000D68 CD 09 BE         [ 4] 2563         CALL     ONEP
      000D6B CD 04 D9         [ 4] 2564         CALL     SWAPP
      000D6E CD 09 CB         [ 4] 2565         CALL     ONEM
      000D71 CD 04 F3         [ 4] 2566 NUMQ1:  CALL     OVER
      000D74 CD 04 40         [ 4] 2567         CALL     CAT
      000D77 CD 03 A4         [ 4] 2568         CALL     DOLIT
      000D7A 00 2D                 2569         .word     45	; "-"
      000D7C CD 07 65         [ 4] 2570         CALL     EQUAL
      000D7F CD 04 92         [ 4] 2571         CALL     TOR
      000D82 CD 04 D9         [ 4] 2572         CALL     SWAPP
      000D85 CD 04 86         [ 4] 2573         CALL     RAT
      000D88 CD 07 3D         [ 4] 2574         CALL     SUBB
      000D8B CD 04 D9         [ 4] 2575         CALL     SWAPP
      000D8E CD 04 86         [ 4] 2576         CALL     RAT
      000D91 CD 06 C4         [ 4] 2577         CALL     PLUS
      000D94 CD 06 73         [ 4] 2578         CALL     QDUP
      000D97 CD 03 D7         [ 4] 2579         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D9A 0D FB                 2580         .word      NUMQ6
      000D9C CD 09 CB         [ 4] 2581         CALL     ONEM
      000D9F CD 04 92         [ 4] 2582         CALL     TOR
      000DA2 CD 04 C9         [ 4] 2583 NUMQ2:  CALL     DUPP
      000DA5 CD 04 92         [ 4] 2584         CALL     TOR
      000DA8 CD 04 40         [ 4] 2585         CALL     CAT
      000DAB CD 05 86         [ 4] 2586         CALL     BASE
      000DAE CD 04 22         [ 4] 2587         CALL     AT
      000DB1 CD 0C F9         [ 4] 2588         CALL     DIGTQ
      000DB4 CD 03 D7         [ 4] 2589         CALL     QBRAN
      000DB7 0D E9                 2590         .word      NUMQ4
      000DB9 CD 04 D9         [ 4] 2591         CALL     SWAPP
      000DBC CD 05 86         [ 4] 2592         CALL     BASE
      000DBF CD 04 22         [ 4] 2593         CALL     AT
      000DC2 CD 09 3D         [ 4] 2594         CALL     STAR
      000DC5 CD 06 C4         [ 4] 2595         CALL     PLUS
      000DC8 CD 04 73         [ 4] 2596         CALL     RFROM
      000DCB CD 09 BE         [ 4] 2597         CALL     ONEP
      000DCE CD 03 B8         [ 4] 2598         CALL     DONXT
      000DD1 0D A2                 2599         .word      NUMQ2
      000DD3 CD 04 86         [ 4] 2600         CALL     RAT
      000DD6 CD 04 D9         [ 4] 2601         CALL     SWAPP
      000DD9 CD 04 BF         [ 4] 2602         CALL     DROP
      000DDC CD 03 D7         [ 4] 2603         CALL     QBRAN
      000DDF 0D E4                 2604         .word      NUMQ3
      000DE1 CD 06 EF         [ 4] 2605         CALL     NEGAT
      000DE4 CD 04 D9         [ 4] 2606 NUMQ3:  CALL     SWAPP
      000DE7 20 0F            [ 2] 2607         JRA     NUMQ5
      000DE9 CD 04 73         [ 4] 2608 NUMQ4:  CALL     RFROM
      000DEC CD 04 73         [ 4] 2609         CALL     RFROM
      000DEF CD 06 A4         [ 4] 2610         CALL     DDROP
      000DF2 CD 06 A4         [ 4] 2611         CALL     DDROP
      000DF5 CD 0A 2A         [ 4] 2612         CALL     ZERO
      000DF8 CD 04 C9         [ 4] 2613 NUMQ5:  CALL     DUPP
      000DFB CD 04 73         [ 4] 2614 NUMQ6:  CALL     RFROM
      000DFE CD 06 A4         [ 4] 2615         CALL     DDROP
      000E01 CD 04 73         [ 4] 2616         CALL     RFROM
      000E04 CD 05 86         [ 4] 2617         CALL     BASE
      000E07 CC 04 0B         [ 2] 2618         JP     STORE
                                   2619 
                                   2620 ;; Basic I/O
                                   2621 
                                   2622 ;       KEY     ( -- c )
                                   2623 ;       Wait for and return an
                                   2624 ;       input character.
      000E0A 0D 35                 2625         .word      LINK
                           000E0C  2626 LINK = . 
      000E0C 03                    2627         .byte      3
      000E0D 4B 45 59              2628         .ascii     "KEY"
      000E10                       2629 KEY:
      000E10 72 0B 52 40 FB   [ 2] 2630         btjf UART_SR,#UART_SR_RXNE,. 
      000E15 C6 52 41         [ 1] 2631         ld a,UART_DR 
      000E18 1D 00 02         [ 2] 2632         subw x,#CELLL 
      000E1B E7 01            [ 1] 2633         ld (1,x),a 
      000E1D 7F               [ 1] 2634         clr (x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E1E 81               [ 4] 2635         ret 
                                   2636 
                                   2637 ;       NUF?    ( -- t )
                                   2638 ;       Return false if no input,
                                   2639 ;       else pause and if CR return true.
      000E1F 0E 0C                 2640         .word      LINK
                           000E21  2641 LINK = . 
      000E21 04                    2642         .byte      4
      000E22 4E 55 46 3F           2643         .ascii     "NUF?"
      000E26                       2644 NUFQ:
      000E26 CD 03 70         [ 4] 2645         CALL     QKEY
      000E29 CD 04 C9         [ 4] 2646         CALL     DUPP
      000E2C CD 03 D7         [ 4] 2647         CALL     QBRAN
      000E2F 0E 3F                 2648         .word    NUFQ1
      000E31 CD 06 A4         [ 4] 2649         CALL     DDROP
      000E34 CD 0E 10         [ 4] 2650         CALL     KEY
      000E37 CD 03 A4         [ 4] 2651         CALL     DOLIT
      000E3A 00 0D                 2652         .word      CRR
      000E3C CC 07 65         [ 2] 2653         JP     EQUAL
      000E3F 81               [ 4] 2654 NUFQ1:  RET
                                   2655 
                                   2656 ;       SPACE   ( -- )
                                   2657 ;       Send  blank character to
                                   2658 ;       output device.
      000E40 0E 21                 2659         .word      LINK
                           000E42  2660 LINK = . 
      000E42 05                    2661         .byte      5
      000E43 53 50 41 43 45        2662         .ascii     "SPACE"
      000E48                       2663 SPACE:
      000E48 CD 0A 1D         [ 4] 2664         CALL     BLANK
      000E4B CC 03 8E         [ 2] 2665         JP     EMIT
                                   2666 
                                   2667 ;       SPACES  ( +n -- )
                                   2668 ;       Send n spaces to output device.
      000E4E 0E 42                 2669         .word      LINK
                           000E50  2670 LINK = . 
      000E50 06                    2671         .byte      6
      000E51 53 50 41 43 45 53     2672         .ascii     "SPACES"
      000E57                       2673 SPACS:
      000E57 CD 0A 2A         [ 4] 2674         CALL     ZERO
      000E5A CD 07 C2         [ 4] 2675         CALL     MAX
      000E5D CD 04 92         [ 4] 2676         CALL     TOR
      000E60 20 03            [ 2] 2677         JRA      CHAR2
      000E62 CD 0E 48         [ 4] 2678 CHAR1:  CALL     SPACE
      000E65 CD 03 B8         [ 4] 2679 CHAR2:  CALL     DONXT
      000E68 0E 62                 2680         .word    CHAR1
      000E6A 81               [ 4] 2681         RET
                                   2682 
                                   2683 ;       TYPE    ( b u -- )
                                   2684 ;       Output u characters from b.
      000E6B 0E 50                 2685         .word      LINK
                           000E6D  2686 LINK = . 
      000E6D 04                    2687         .byte      4
      000E6E 54 59 50 45           2688         .ascii     "TYPE"
      000E72                       2689 TYPES:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E72 CD 04 92         [ 4] 2690         CALL     TOR
      000E75 20 0C            [ 2] 2691         JRA     TYPE2
      000E77 CD 04 C9         [ 4] 2692 TYPE1:  CALL     DUPP
      000E7A CD 04 40         [ 4] 2693         CALL     CAT
      000E7D CD 03 8E         [ 4] 2694         CALL     EMIT
      000E80 CD 09 BE         [ 4] 2695         CALL     ONEP
      000E83 CD 03 B8         [ 4] 2696 TYPE2:  CALL     DONXT
      000E86 0E 77                 2697         .word      TYPE1
      000E88 CC 04 BF         [ 2] 2698         JP     DROP
                                   2699 
                                   2700 ;       CR      ( -- )
                                   2701 ;       Output a carriage return
                                   2702 ;       and a line feed.
      000E8B 0E 6D                 2703         .word      LINK
                           000E8D  2704 LINK = . 
      000E8D 02                    2705         .byte      2
      000E8E 43 52                 2706         .ascii     "CR"
      000E90                       2707 CR:
      000E90 CD 03 A4         [ 4] 2708         CALL     DOLIT
      000E93 00 0D                 2709         .word      CRR
      000E95 CD 03 8E         [ 4] 2710         CALL     EMIT
      000E98 CD 03 A4         [ 4] 2711         CALL     DOLIT
      000E9B 00 0A                 2712         .word      LF
      000E9D CC 03 8E         [ 2] 2713         JP     EMIT
                                   2714 
                                   2715 ;       do$     ( -- a )
                                   2716 ;       Return  address of a compiled
                                   2717 ;       string.
      000EA0 0E 8D                 2718         .word      LINK
                           000EA2  2719 LINK = . 
      000EA2 43                    2720 	.byte      COMPO+3
      000EA3 44 4F 24              2721         .ascii     "DO$"
      000EA6                       2722 DOSTR:
      000EA6 CD 04 73         [ 4] 2723         CALL     RFROM
      000EA9 CD 04 86         [ 4] 2724         CALL     RAT
      000EAC CD 04 73         [ 4] 2725         CALL     RFROM
      000EAF CD 0B 01         [ 4] 2726         CALL     COUNT
      000EB2 CD 06 C4         [ 4] 2727         CALL     PLUS
      000EB5 CD 04 92         [ 4] 2728         CALL     TOR
      000EB8 CD 04 D9         [ 4] 2729         CALL     SWAPP
      000EBB CD 04 92         [ 4] 2730         CALL     TOR
      000EBE 81               [ 4] 2731         RET
                                   2732 
                                   2733 ;       $"|     ( -- a )
                                   2734 ;       Run time routine compiled by $".
                                   2735 ;       Return address of a compiled string.
      000EBF 0E A2                 2736         .word      LINK
                           000EC1  2737 LINK = . 
      000EC1 43                    2738 	.byte      COMPO+3
      000EC2 24 22 7C              2739         .byte     '$','"','|'
      000EC5                       2740 STRQP:
      000EC5 CD 0E A6         [ 4] 2741         CALL     DOSTR
      000EC8 81               [ 4] 2742         RET
                                   2743 
                                   2744 ;       ."|     ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2745 ;       Run time routine of ." .
                                   2746 ;       Output a compiled string.
      000EC9 0E C1                 2747         .word      LINK
                           000ECB  2748 LINK = . 
      000ECB 43                    2749 	.byte      COMPO+3
      000ECC 2E 22 7C              2750         .byte     '.','"','|'
      000ECF                       2751 DOTQP:
      000ECF CD 0E A6         [ 4] 2752         CALL     DOSTR
      000ED2 CD 0B 01         [ 4] 2753         CALL     COUNT
      000ED5 CC 0E 72         [ 2] 2754         JP     TYPES
                                   2755 
                                   2756 ;       .R      ( n +n -- )
                                   2757 ;       Display an integer in a field
                                   2758 ;       of n columns, right justified.
      000ED8 0E CB                 2759         .word      LINK
                           000EDA  2760 LINK = . 
      000EDA 02                    2761         .byte      2
      000EDB 2E 52                 2762         .ascii     ".R"
      000EDD                       2763 DOTR:
      000EDD CD 04 92         [ 4] 2764         CALL     TOR
      000EE0 CD 0C B2         [ 4] 2765         CALL     STR
      000EE3 CD 04 73         [ 4] 2766         CALL     RFROM
      000EE6 CD 04 F3         [ 4] 2767         CALL     OVER
      000EE9 CD 07 3D         [ 4] 2768         CALL     SUBB
      000EEC CD 0E 57         [ 4] 2769         CALL     SPACS
      000EEF CC 0E 72         [ 2] 2770         JP     TYPES
                                   2771 
                                   2772 ;       U.R     ( u +n -- )
                                   2773 ;       Display an unsigned integer
                                   2774 ;       in n column, right justified.
      000EF2 0E DA                 2775         .word      LINK
                           000EF4  2776 LINK = . 
      000EF4 03                    2777         .byte      3
      000EF5 55 2E 52              2778         .ascii     "U.R"
      000EF8                       2779 UDOTR:
      000EF8 CD 04 92         [ 4] 2780         CALL     TOR
      000EFB CD 0C 35         [ 4] 2781         CALL     BDIGS
      000EFE CD 0C 6F         [ 4] 2782         CALL     DIGS
      000F01 CD 0C 9A         [ 4] 2783         CALL     EDIGS
      000F04 CD 04 73         [ 4] 2784         CALL     RFROM
      000F07 CD 04 F3         [ 4] 2785         CALL     OVER
      000F0A CD 07 3D         [ 4] 2786         CALL     SUBB
      000F0D CD 0E 57         [ 4] 2787         CALL     SPACS
      000F10 CC 0E 72         [ 2] 2788         JP     TYPES
                                   2789 
                                   2790 ;       U.      ( u -- )
                                   2791 ;       Display an unsigned integer
                                   2792 ;       in free format.
      000F13 0E F4                 2793         .word      LINK
                           000F15  2794 LINK = . 
      000F15 02                    2795         .byte      2
      000F16 55 2E                 2796         .ascii     "U."
      000F18                       2797 UDOT:
      000F18 CD 0C 35         [ 4] 2798         CALL     BDIGS
      000F1B CD 0C 6F         [ 4] 2799         CALL     DIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F1E CD 0C 9A         [ 4] 2800         CALL     EDIGS
      000F21 CD 0E 48         [ 4] 2801         CALL     SPACE
      000F24 CC 0E 72         [ 2] 2802         JP     TYPES
                                   2803 
                                   2804 ;       .       ( w -- )
                                   2805 ;       Display an integer in free
                                   2806 ;       format, preceeded by a space.
      000F27 0F 15                 2807         .word      LINK
                           000F29  2808 LINK = . 
      000F29 01                    2809         .byte      1
      000F2A 2E                    2810         .ascii     "."
      000F2B                       2811 DOT:
      000F2B CD 05 86         [ 4] 2812         CALL     BASE
      000F2E CD 04 22         [ 4] 2813         CALL     AT
      000F31 CD 03 A4         [ 4] 2814         CALL     DOLIT
      000F34 00 0A                 2815         .word      10
      000F36 CD 05 3E         [ 4] 2816         CALL     XORR    ;?decimal
      000F39 CD 03 D7         [ 4] 2817         CALL     QBRAN
      000F3C 0F 41                 2818         .word      DOT1
      000F3E CC 0F 18         [ 2] 2819         JP     UDOT
      000F41 CD 0C B2         [ 4] 2820 DOT1:   CALL     STR
      000F44 CD 0E 48         [ 4] 2821         CALL     SPACE
      000F47 CC 0E 72         [ 2] 2822         JP     TYPES
                                   2823 
                                   2824 ;       ?       ( a -- )
                                   2825 ;       Display contents in memory cell.
      000F4A 0F 29                 2826         .word      LINK
                                   2827         
                           000F4C  2828 LINK = . 
      000F4C 01                    2829         .byte      1
      000F4D 3F                    2830         .ascii     "?"
      000F4E                       2831 QUEST:
      000F4E CD 04 22         [ 4] 2832         CALL     AT
      000F51 CC 0F 2B         [ 2] 2833         JP     DOT
                                   2834 
                                   2835 ;; Parsing
                                   2836 
                                   2837 ;       parse   ( b u c -- b u delta ; <string> )
                                   2838 ;       Scan string delimited by c.
                                   2839 ;       Return found string and its offset.
      000F54 0F 4C                 2840         .word      LINK
                           000F56  2841 LINK = . 
      000F56 05                    2842         .byte      5
      000F57 70 61 72 73 65        2843         .ascii     "parse"
      000F5C                       2844 PARS:
      000F5C CD 05 95         [ 4] 2845         CALL     TEMP
      000F5F CD 04 0B         [ 4] 2846         CALL     STORE
      000F62 CD 04 F3         [ 4] 2847         CALL     OVER
      000F65 CD 04 92         [ 4] 2848         CALL     TOR
      000F68 CD 04 C9         [ 4] 2849         CALL     DUPP
      000F6B CD 03 D7         [ 4] 2850         CALL     QBRAN
      000F6E 10 14                 2851         .word    PARS8
      000F70 CD 09 CB         [ 4] 2852         CALL     ONEM
      000F73 CD 05 95         [ 4] 2853         CALL     TEMP
      000F76 CD 04 22         [ 4] 2854         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F79 CD 0A 1D         [ 4] 2855         CALL     BLANK
      000F7C CD 07 65         [ 4] 2856         CALL     EQUAL
      000F7F CD 03 D7         [ 4] 2857         CALL     QBRAN
      000F82 0F B5                 2858         .word      PARS3
      000F84 CD 04 92         [ 4] 2859         CALL     TOR
      000F87 CD 0A 1D         [ 4] 2860 PARS1:  CALL     BLANK
      000F8A CD 04 F3         [ 4] 2861         CALL     OVER
      000F8D CD 04 40         [ 4] 2862         CALL     CAT     ;skip leading blanks ONLY
      000F90 CD 07 3D         [ 4] 2863         CALL     SUBB
      000F93 CD 05 02         [ 4] 2864         CALL     ZLESS
      000F96 CD 06 DE         [ 4] 2865         CALL     INVER
      000F99 CD 03 D7         [ 4] 2866         CALL     QBRAN
      000F9C 0F B2                 2867         .word      PARS2
      000F9E CD 09 BE         [ 4] 2868         CALL     ONEP
      000FA1 CD 03 B8         [ 4] 2869         CALL     DONXT
      000FA4 0F 87                 2870         .word      PARS1
      000FA6 CD 04 73         [ 4] 2871         CALL     RFROM
      000FA9 CD 04 BF         [ 4] 2872         CALL     DROP
      000FAC CD 0A 2A         [ 4] 2873         CALL     ZERO
      000FAF CC 04 C9         [ 2] 2874         JP     DUPP
      000FB2 CD 04 73         [ 4] 2875 PARS2:  CALL     RFROM
      000FB5 CD 04 F3         [ 4] 2876 PARS3:  CALL     OVER
      000FB8 CD 04 D9         [ 4] 2877         CALL     SWAPP
      000FBB CD 04 92         [ 4] 2878         CALL     TOR
      000FBE CD 05 95         [ 4] 2879 PARS4:  CALL     TEMP
      000FC1 CD 04 22         [ 4] 2880         CALL     AT
      000FC4 CD 04 F3         [ 4] 2881         CALL     OVER
      000FC7 CD 04 40         [ 4] 2882         CALL     CAT
      000FCA CD 07 3D         [ 4] 2883         CALL     SUBB    ;scan for delimiter
      000FCD CD 05 95         [ 4] 2884         CALL     TEMP
      000FD0 CD 04 22         [ 4] 2885         CALL     AT
      000FD3 CD 0A 1D         [ 4] 2886         CALL     BLANK
      000FD6 CD 07 65         [ 4] 2887         CALL     EQUAL
      000FD9 CD 03 D7         [ 4] 2888         CALL     QBRAN
      000FDC 0F E1                 2889         .word      PARS5
      000FDE CD 05 02         [ 4] 2890         CALL     ZLESS
      000FE1 CD 03 D7         [ 4] 2891 PARS5:  CALL     QBRAN
      000FE4 0F F6                 2892         .word      PARS6
      000FE6 CD 09 BE         [ 4] 2893         CALL     ONEP
      000FE9 CD 03 B8         [ 4] 2894         CALL     DONXT
      000FEC 0F BE                 2895         .word      PARS4
      000FEE CD 04 C9         [ 4] 2896         CALL     DUPP
      000FF1 CD 04 92         [ 4] 2897         CALL     TOR
      000FF4 20 0F            [ 2] 2898         JRA     PARS7
      000FF6 CD 04 73         [ 4] 2899 PARS6:  CALL     RFROM
      000FF9 CD 04 BF         [ 4] 2900         CALL     DROP
      000FFC CD 04 C9         [ 4] 2901         CALL     DUPP
      000FFF CD 09 BE         [ 4] 2902         CALL     ONEP
      001002 CD 04 92         [ 4] 2903         CALL     TOR
      001005 CD 04 F3         [ 4] 2904 PARS7:  CALL     OVER
      001008 CD 07 3D         [ 4] 2905         CALL     SUBB
      00100B CD 04 73         [ 4] 2906         CALL     RFROM
      00100E CD 04 73         [ 4] 2907         CALL     RFROM
      001011 CC 07 3D         [ 2] 2908         JP     SUBB
      001014 CD 04 F3         [ 4] 2909 PARS8:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001017 CD 04 73         [ 4] 2910         CALL     RFROM
      00101A CC 07 3D         [ 2] 2911         JP     SUBB
                                   2912 
                                   2913 ;       PARSE   ( c -- b u ; <string> )
                                   2914 ;       Scan input stream and return
                                   2915 ;       counted string delimited by c.
      00101D 0F 56                 2916         .word      LINK
                           00101F  2917 LINK = . 
      00101F 05                    2918         .byte      5
      001020 50 41 52 53 45        2919         .ascii     "PARSE"
      001025                       2920 PARSE:
      001025 CD 04 92         [ 4] 2921         CALL     TOR
      001028 CD 0B 3A         [ 4] 2922         CALL     TIB
      00102B CD 05 A4         [ 4] 2923         CALL     INN
      00102E CD 04 22         [ 4] 2924         CALL     AT
      001031 CD 06 C4         [ 4] 2925         CALL     PLUS    ;current input buffer pointer
      001034 CD 05 B4         [ 4] 2926         CALL     NTIB
      001037 CD 04 22         [ 4] 2927         CALL     AT
      00103A CD 05 A4         [ 4] 2928         CALL     INN
      00103D CD 04 22         [ 4] 2929         CALL     AT
      001040 CD 07 3D         [ 4] 2930         CALL     SUBB    ;remaining count
      001043 CD 04 73         [ 4] 2931         CALL     RFROM
      001046 CD 0F 5C         [ 4] 2932         CALL     PARS
      001049 CD 05 A4         [ 4] 2933         CALL     INN
      00104C CC 0A 9A         [ 2] 2934         JP     PSTOR
                                   2935 
                                   2936 ;       .(      ( -- )
                                   2937 ;       Output following string up to next ) .
      00104F 10 1F                 2938         .word      LINK
                           001051  2939 LINK = . 
      001051 82                    2940 	.byte      IMEDD+2
      001052 2E 28                 2941         .ascii     ".("
      001054                       2942 DOTPR:
      001054 CD 03 A4         [ 4] 2943         CALL     DOLIT
      001057 00 29                 2944         .word     41	; ")"
      001059 CD 10 25         [ 4] 2945         CALL     PARSE
      00105C CC 0E 72         [ 2] 2946         JP     TYPES
                                   2947 
                                   2948 ;       (       ( -- )
                                   2949 ;       Ignore following string up to next ).
                                   2950 ;       A comment.
      00105F 10 51                 2951         .word      LINK
                           001061  2952 LINK = . 
      001061 81                    2953 	.byte      IMEDD+1
      001062 28                    2954         .ascii     "("
      001063                       2955 PAREN:
      001063 CD 03 A4         [ 4] 2956         CALL     DOLIT
      001066 00 29                 2957         .word     41	; ")"
      001068 CD 10 25         [ 4] 2958         CALL     PARSE
      00106B CC 06 A4         [ 2] 2959         JP     DDROP
                                   2960 
                                   2961 ;       \       ( -- )
                                   2962 ;       Ignore following text till
                                   2963 ;       end of line.
      00106E 10 61                 2964         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                           001070  2965 LINK = . 
      001070 81                    2966 	.byte      IMEDD+1
      001071 5C                    2967         .ascii     "\"
      001072                       2968 BKSLA:
      001072 90 AE 00 0C      [ 2] 2969         ldw y,#UCTIB ; #TIB  
      001076 90 FE            [ 2] 2970         ldw y,(y)
      001078 90 89            [ 2] 2971         pushw y ; count in TIB 
      00107A 90 AE 00 0A      [ 2] 2972         ldw y,#UINN ; >IN 
      00107E 90 BF 24         [ 2] 2973         ldw YTEMP,y
      001081 90 85            [ 2] 2974         popw y 
      001083 91 CF 24         [ 5] 2975         ldw [YTEMP],y
      001086 81               [ 4] 2976         ret 
                                   2977 
                                   2978 ;       WORD    ( c -- a ; <string> )
                                   2979 ;       Parse a word from input stream
                                   2980 ;       and copy it to code dictionary.
      001087 10 70                 2981         .word      LINK
                           001089  2982 LINK = . 
      001089 04                    2983         .byte      4
      00108A 57 4F 52 44           2984         .ascii     "WORD"
      00108E                       2985 WORDD:
      00108E CD 10 25         [ 4] 2986         CALL     PARSE
      001091 CD 0B 18         [ 4] 2987         CALL     HERE
      001094 CD 09 93         [ 4] 2988         CALL     CELLP
      001097 CC 0B D8         [ 2] 2989         JP     PACKS
                                   2990 
                                   2991 ;       TOKEN   ( -- a ; <string> )
                                   2992 ;       Parse a word from input stream
                                   2993 ;       and copy it to name dictionary.
      00109A 10 89                 2994         .word      LINK
                           00109C  2995 LINK = . 
      00109C 05                    2996         .byte      5
      00109D 54 4F 4B 45 4E        2997         .ascii     "TOKEN"
      0010A2                       2998 TOKEN:
      0010A2 CD 0A 1D         [ 4] 2999         CALL     BLANK
      0010A5 CC 10 8E         [ 2] 3000         JP     WORDD
                                   3001 
                                   3002 ;; Dictionary search
                                   3003 
                                   3004 ;       NAME>   ( na -- ca )
                                   3005 ;       Return a code address given
                                   3006 ;       a name address.
      0010A8 10 9C                 3007         .word      LINK
                           0010AA  3008 LINK = . 
      0010AA 05                    3009         .byte      5
      0010AB 4E 41 4D 45 3E        3010         .ascii     "NAME>"
      0010B0                       3011 NAMET:
      0010B0 CD 0B 01         [ 4] 3012         CALL     COUNT
      0010B3 CD 03 A4         [ 4] 3013         CALL     DOLIT
      0010B6 00 1F                 3014         .word      31
      0010B8 CD 05 15         [ 4] 3015         CALL     ANDD
      0010BB CC 06 C4         [ 2] 3016         JP     PLUS
                                   3017 
                                   3018 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3019 ;       Compare u cells in two
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   3020 ;       strings. Return 0 if identical.
      0010BE 10 AA                 3021         .word      LINK
                           0010C0  3022 LINK = . 
      0010C0 05                    3023         .byte       5
      0010C1 53 41 4D 45 3F        3024         .ascii     "SAME?"
      0010C6                       3025 SAMEQ:
      0010C6 CD 09 CB         [ 4] 3026         CALL     ONEM
      0010C9 CD 04 92         [ 4] 3027         CALL     TOR
      0010CC 20 29            [ 2] 3028         JRA     SAME2
      0010CE CD 04 F3         [ 4] 3029 SAME1:  CALL     OVER
      0010D1 CD 04 86         [ 4] 3030         CALL     RAT
      0010D4 CD 06 C4         [ 4] 3031         CALL     PLUS
      0010D7 CD 04 40         [ 4] 3032         CALL     CAT
      0010DA CD 04 F3         [ 4] 3033         CALL     OVER
      0010DD CD 04 86         [ 4] 3034         CALL     RAT
      0010E0 CD 06 C4         [ 4] 3035         CALL     PLUS
      0010E3 CD 04 40         [ 4] 3036         CALL     CAT
      0010E6 CD 07 3D         [ 4] 3037         CALL     SUBB
      0010E9 CD 06 73         [ 4] 3038         CALL     QDUP
      0010EC CD 03 D7         [ 4] 3039         CALL     QBRAN
      0010EF 10 F7                 3040         .word      SAME2
      0010F1 CD 04 73         [ 4] 3041         CALL     RFROM
      0010F4 CC 04 BF         [ 2] 3042         JP     DROP
      0010F7 CD 03 B8         [ 4] 3043 SAME2:  CALL     DONXT
      0010FA 10 CE                 3044         .word      SAME1
      0010FC CC 0A 2A         [ 2] 3045         JP     ZERO
                                   3046 
                                   3047 ;       find    ( a va -- ca na | a F )
                                   3048 ;       Search vocabulary for string.
                                   3049 ;       Return ca and na if succeeded.
      0010FF 10 C0                 3050         .word      LINK
                           001101  3051 LINK = . 
      001101 04                    3052         .byte      4
      001102 46 49 4E 44           3053         .ascii     "FIND"
      001106                       3054 FIND:
      001106 CD 04 D9         [ 4] 3055         CALL     SWAPP
      001109 CD 04 C9         [ 4] 3056         CALL     DUPP
      00110C CD 04 40         [ 4] 3057         CALL     CAT
      00110F CD 05 95         [ 4] 3058         CALL     TEMP
      001112 CD 04 0B         [ 4] 3059         CALL     STORE
      001115 CD 04 C9         [ 4] 3060         CALL     DUPP
      001118 CD 04 22         [ 4] 3061         CALL     AT
      00111B CD 04 92         [ 4] 3062         CALL     TOR
      00111E CD 09 93         [ 4] 3063         CALL     CELLP
      001121 CD 04 D9         [ 4] 3064         CALL     SWAPP
      001124 CD 04 22         [ 4] 3065 FIND1:  CALL     AT
      001127 CD 04 C9         [ 4] 3066         CALL     DUPP
      00112A CD 03 D7         [ 4] 3067         CALL     QBRAN
      00112D 11 63                 3068         .word      FIND6
      00112F CD 04 C9         [ 4] 3069         CALL     DUPP
      001132 CD 04 22         [ 4] 3070         CALL     AT
      001135 CD 03 A4         [ 4] 3071         CALL     DOLIT
      001138 1F 7F                 3072         .word      MASKK
      00113A CD 05 15         [ 4] 3073         CALL     ANDD
      00113D CD 04 86         [ 4] 3074         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001140 CD 05 3E         [ 4] 3075         CALL     XORR
      001143 CD 03 D7         [ 4] 3076         CALL     QBRAN
      001146 11 52                 3077         .word      FIND2
      001148 CD 09 93         [ 4] 3078         CALL     CELLP
      00114B CD 03 A4         [ 4] 3079         CALL     DOLIT
      00114E FF FF                 3080         .word     0xFFFF
      001150 20 0C            [ 2] 3081         JRA     FIND3
      001152 CD 09 93         [ 4] 3082 FIND2:  CALL     CELLP
      001155 CD 05 95         [ 4] 3083         CALL     TEMP
      001158 CD 04 22         [ 4] 3084         CALL     AT
      00115B CD 10 C6         [ 4] 3085         CALL     SAMEQ
      00115E CD 03 EE         [ 4] 3086 FIND3:  CALL     BRAN
      001161 11 72                 3087         .word      FIND4
      001163 CD 04 73         [ 4] 3088 FIND6:  CALL     RFROM
      001166 CD 04 BF         [ 4] 3089         CALL     DROP
      001169 CD 04 D9         [ 4] 3090         CALL     SWAPP
      00116C CD 09 A2         [ 4] 3091         CALL     CELLM
      00116F CC 04 D9         [ 2] 3092         JP     SWAPP
      001172 CD 03 D7         [ 4] 3093 FIND4:  CALL     QBRAN
      001175 11 7F                 3094         .word      FIND5
      001177 CD 09 A2         [ 4] 3095         CALL     CELLM
      00117A CD 09 A2         [ 4] 3096         CALL     CELLM
      00117D 20 A5            [ 2] 3097         JRA     FIND1
      00117F CD 04 73         [ 4] 3098 FIND5:  CALL     RFROM
      001182 CD 04 BF         [ 4] 3099         CALL     DROP
      001185 CD 04 D9         [ 4] 3100         CALL     SWAPP
      001188 CD 04 BF         [ 4] 3101         CALL     DROP
      00118B CD 09 A2         [ 4] 3102         CALL     CELLM
      00118E CD 04 C9         [ 4] 3103         CALL     DUPP
      001191 CD 10 B0         [ 4] 3104         CALL     NAMET
      001194 CC 04 D9         [ 2] 3105         JP     SWAPP
                                   3106 
                                   3107 ;       NAME?   ( a -- ca na | a F )
                                   3108 ;       Search vocabularies for a string.
      001197 11 01                 3109         .word      LINK
                           001199  3110 LINK = . 
      001199 05                    3111         .byte      5
      00119A 4E 41 4D 45 3F        3112         .ascii     "NAME?"
      00119F                       3113 NAMEQ:
      00119F CD 06 09         [ 4] 3114         CALL   CNTXT
      0011A2 CC 11 06         [ 2] 3115         JP     FIND
                                   3116 
                                   3117 ;; Terminal response
                                   3118 
                                   3119 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3120 ;       Backup cursor by one character.
      0011A5 11 99                 3121         .word      LINK
                           0011A7  3122 LINK = . 
      0011A7 02                    3123         .byte      2
      0011A8 5E 48                 3124         .ascii     "^H"
      0011AA                       3125 BKSP:
      0011AA CD 04 92         [ 4] 3126         CALL     TOR
      0011AD CD 04 F3         [ 4] 3127         CALL     OVER
      0011B0 CD 04 73         [ 4] 3128         CALL     RFROM
      0011B3 CD 04 D9         [ 4] 3129         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0011B6 CD 04 F3         [ 4] 3130         CALL     OVER
      0011B9 CD 05 3E         [ 4] 3131         CALL     XORR
      0011BC CD 03 D7         [ 4] 3132         CALL     QBRAN
      0011BF 11 DA                 3133         .word      BACK1
      0011C1 CD 03 A4         [ 4] 3134         CALL     DOLIT
      0011C4 00 08                 3135         .word      BKSPP
      0011C6 CD 03 8E         [ 4] 3136         CALL     EMIT
      0011C9 CD 09 CB         [ 4] 3137         CALL     ONEM
      0011CC CD 0A 1D         [ 4] 3138         CALL     BLANK
      0011CF CD 03 8E         [ 4] 3139         CALL     EMIT
      0011D2 CD 03 A4         [ 4] 3140         CALL     DOLIT
      0011D5 00 08                 3141         .word      BKSPP
      0011D7 CC 03 8E         [ 2] 3142         JP     EMIT
      0011DA 81               [ 4] 3143 BACK1:  RET
                                   3144 
                                   3145 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3146 ;       Accept and echo key stroke
                                   3147 ;       and bump cursor.
      0011DB 11 A7                 3148         .word      LINK
                           0011DD  3149 LINK = . 
      0011DD 03                    3150         .byte      3
      0011DE 54 41 50              3151         .ascii     "TAP"
      0011E1                       3152 TAP:
      0011E1 CD 04 C9         [ 4] 3153         CALL     DUPP
      0011E4 CD 03 8E         [ 4] 3154         CALL     EMIT
      0011E7 CD 04 F3         [ 4] 3155         CALL     OVER
      0011EA CD 04 2F         [ 4] 3156         CALL     CSTOR
      0011ED CC 09 BE         [ 2] 3157         JP     ONEP
                                   3158 
                                   3159 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3160 ;       Process a key stroke,
                                   3161 ;       CR or backspace.
      0011F0 11 DD                 3162         .word      LINK
                           0011F2  3163 LINK = . 
      0011F2 04                    3164         .byte      4
      0011F3 4B 54 41 50           3165         .ascii     "KTAP"
      0011F7                       3166 KTAP:
      0011F7 CD 04 C9         [ 4] 3167         CALL     DUPP
      0011FA CD 03 A4         [ 4] 3168         CALL     DOLIT
      0011FD 00 0D                 3169         .word      CRR
      0011FF CD 05 3E         [ 4] 3170         CALL     XORR
      001202 CD 03 D7         [ 4] 3171         CALL     QBRAN
      001205 12 1D                 3172         .word      KTAP2
      001207 CD 03 A4         [ 4] 3173         CALL     DOLIT
      00120A 00 08                 3174         .word      BKSPP
      00120C CD 05 3E         [ 4] 3175         CALL     XORR
      00120F CD 03 D7         [ 4] 3176         CALL     QBRAN
      001212 12 1A                 3177         .word      KTAP1
      001214 CD 0A 1D         [ 4] 3178         CALL     BLANK
      001217 CC 11 E1         [ 2] 3179         JP     TAP
      00121A CC 11 AA         [ 2] 3180 KTAP1:  JP     BKSP
      00121D CD 04 BF         [ 4] 3181 KTAP2:  CALL     DROP
      001220 CD 04 D9         [ 4] 3182         CALL     SWAPP
      001223 CD 04 BF         [ 4] 3183         CALL     DROP
      001226 CC 04 C9         [ 2] 3184         JP     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3185 
                                   3186 ;       accept  ( b u -- b u )
                                   3187 ;       Accept characters to input
                                   3188 ;       buffer. Return with actual count.
      001229 11 F2                 3189         .word      LINK
                           00122B  3190 LINK = . 
      00122B 06                    3191         .byte      6
      00122C 41 43 43 45 50 54     3192         .ascii     "ACCEPT"
      001232                       3193 ACCEP:
      001232 CD 04 F3         [ 4] 3194         CALL     OVER
      001235 CD 06 C4         [ 4] 3195         CALL     PLUS
      001238 CD 04 F3         [ 4] 3196         CALL     OVER
      00123B CD 06 AF         [ 4] 3197 ACCP1:  CALL     DDUP
      00123E CD 05 3E         [ 4] 3198         CALL     XORR
      001241 CD 03 D7         [ 4] 3199         CALL     QBRAN
      001244 12 66                 3200         .word      ACCP4
      001246 CD 0E 10         [ 4] 3201         CALL     KEY
      001249 CD 04 C9         [ 4] 3202         CALL     DUPP
      00124C CD 0A 1D         [ 4] 3203         CALL     BLANK
      00124F CD 03 A4         [ 4] 3204         CALL     DOLIT
      001252 00 7F                 3205         .word      127
      001254 CD 07 FF         [ 4] 3206         CALL     WITHI
      001257 CD 03 D7         [ 4] 3207         CALL     QBRAN
      00125A 12 61                 3208         .word      ACCP2
      00125C CD 11 E1         [ 4] 3209         CALL     TAP
      00125F 20 03            [ 2] 3210         JRA     ACCP3
      001261 CD 11 F7         [ 4] 3211 ACCP2:  CALL     KTAP
      001264 20 D5            [ 2] 3212 ACCP3:  JRA     ACCP1
      001266 CD 04 BF         [ 4] 3213 ACCP4:  CALL     DROP
      001269 CD 04 F3         [ 4] 3214         CALL     OVER
      00126C CC 07 3D         [ 2] 3215         JP     SUBB
                                   3216 
                                   3217 ;       QUERY   ( -- )
                                   3218 ;       Accept input stream to
                                   3219 ;       terminal input buffer.
      00126F 12 2B                 3220         .word      LINK
                                   3221         
                           001271  3222 LINK = . 
      001271 05                    3223         .byte      5
      001272 51 55 45 52 59        3224         .ascii     "QUERY"
      001277                       3225 QUERY:
      001277 CD 0B 3A         [ 4] 3226         CALL     TIB
      00127A CD 03 A4         [ 4] 3227         CALL     DOLIT
      00127D 00 50                 3228         .word      80
      00127F CD 12 32         [ 4] 3229         CALL     ACCEP
      001282 CD 05 B4         [ 4] 3230         CALL     NTIB
      001285 CD 04 0B         [ 4] 3231         CALL     STORE
      001288 CD 04 BF         [ 4] 3232         CALL     DROP
      00128B CD 0A 2A         [ 4] 3233         CALL     ZERO
      00128E CD 05 A4         [ 4] 3234         CALL     INN
      001291 CC 04 0B         [ 2] 3235         JP     STORE
                                   3236 
                                   3237 ;       ABORT   ( -- )
                                   3238 ;       Reset data stack and
                                   3239 ;       jump to QUIT.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001294 12 71                 3240         .word      LINK
                           001296  3241 LINK = . 
      001296 05                    3242         .byte      5
      001297 41 42 4F 52 54        3243         .ascii     "ABORT"
      00129C                       3244 ABORT:
      00129C CD 13 93         [ 4] 3245         CALL     PRESE
      00129F CC 13 B0         [ 2] 3246         JP     QUIT
                                   3247 
                                   3248 ;       abort"  ( f -- )
                                   3249 ;       Run time routine of ABORT".
                                   3250 ;       Abort with a message.
      0012A2 12 96                 3251         .word      LINK
                           0012A4  3252 LINK = . 
      0012A4 46                    3253 	.byte      COMPO+6
      0012A5 41 42 4F 52 54        3254         .ascii     "ABORT"
      0012AA 22                    3255         .byte      '"'
      0012AB                       3256 ABORQ:
      0012AB CD 03 D7         [ 4] 3257         CALL     QBRAN
      0012AE 12 CA                 3258         .word      ABOR2   ;text flag
      0012B0 CD 0E A6         [ 4] 3259         CALL     DOSTR
      0012B3 CD 0E 48         [ 4] 3260 ABOR1:  CALL     SPACE
      0012B6 CD 0B 01         [ 4] 3261         CALL     COUNT
      0012B9 CD 0E 72         [ 4] 3262         CALL     TYPES
      0012BC CD 03 A4         [ 4] 3263         CALL     DOLIT
      0012BF 00 3F                 3264         .word     63 ; "?"
      0012C1 CD 03 8E         [ 4] 3265         CALL     EMIT
      0012C4 CD 0E 90         [ 4] 3266         CALL     CR
      0012C7 CC 12 9C         [ 2] 3267         JP     ABORT   ;pass error string
      0012CA CD 0E A6         [ 4] 3268 ABOR2:  CALL     DOSTR
      0012CD CC 04 BF         [ 2] 3269         JP     DROP
                                   3270 
                                   3271 ;; The text interpreter
                                   3272 
                                   3273 ;       $INTERPRET      ( a -- )
                                   3274 ;       Interpret a word. If failed,
                                   3275 ;       try to convert it to an integer.
      0012D0 12 A4                 3276         .word      LINK
                           0012D2  3277 LINK = . 
      0012D2 0A                    3278         .byte      10
      0012D3 24 49 4E 54 45 52 50  3279         .ascii     "$INTERPRET"
             52 45 54
      0012DD                       3280 INTER:
      0012DD CD 11 9F         [ 4] 3281         CALL     NAMEQ
      0012E0 CD 06 73         [ 4] 3282         CALL     QDUP    ;?defined
      0012E3 CD 03 D7         [ 4] 3283         CALL     QBRAN
      0012E6 13 07                 3284         .word      INTE1
      0012E8 CD 04 22         [ 4] 3285         CALL     AT
      0012EB CD 03 A4         [ 4] 3286         CALL     DOLIT
      0012EE 40 00                 3287 	.word       0x4000	; COMPO*256
      0012F0 CD 05 15         [ 4] 3288         CALL     ANDD    ;?compile only lexicon bits
      0012F3 CD 12 AB         [ 4] 3289         CALL     ABORQ
      0012F6 0D                    3290         .byte      13
      0012F7 20 63 6F 6D 70 69 6C  3291         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001304 CC 03 FE         [ 2] 3292         JP     EXECU
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001307 CD 0D 3D         [ 4] 3293 INTE1:  CALL     NUMBQ   ;convert a number
      00130A CD 03 D7         [ 4] 3294         CALL     QBRAN
      00130D 12 B3                 3295         .word    ABOR1
      00130F 81               [ 4] 3296         RET
                                   3297 
                                   3298 ;       [       ( -- )
                                   3299 ;       Start  text interpreter.
      001310 12 D2                 3300         .word      LINK
                           001312  3301 LINK = . 
      001312 81                    3302 	.byte      IMEDD+1
      001313 5B                    3303         .ascii     "["
      001314                       3304 LBRAC:
      001314 CD 03 A4         [ 4] 3305         CALL   DOLIT
      001317 12 DD                 3306         .word  INTER
      001319 CD 05 E7         [ 4] 3307         CALL   TEVAL
      00131C CC 04 0B         [ 2] 3308         JP     STORE
                                   3309 
                                   3310 ;       .OK     ( -- )
                                   3311 ;       Display 'ok' while interpreting.
      00131F 13 12                 3312         .word      LINK
                           001321  3313 LINK = . 
      001321 03                    3314         .byte      3
      001322 2E 4F 4B              3315         .ascii     ".OK"
      001325                       3316 DOTOK:
      001325 CD 03 A4         [ 4] 3317         CALL     DOLIT
      001328 12 DD                 3318         .word      INTER
      00132A CD 05 E7         [ 4] 3319         CALL     TEVAL
      00132D CD 04 22         [ 4] 3320         CALL     AT
      001330 CD 07 65         [ 4] 3321         CALL     EQUAL
      001333 CD 03 D7         [ 4] 3322         CALL     QBRAN
      001336 13 3F                 3323         .word      DOTO1
      001338 CD 0E CF         [ 4] 3324         CALL     DOTQP
      00133B 03                    3325         .byte      3
      00133C 20 6F 6B              3326         .ascii     " ok"
      00133F CC 0E 90         [ 2] 3327 DOTO1:  JP     CR
                                   3328 
                                   3329 ;       ?STACK  ( -- )
                                   3330 ;       Abort if stack underflows.
      001342 13 21                 3331         .word      LINK
                           001344  3332 LINK = . 
      001344 06                    3333         .byte      6
      001345 3F 53 54 41 43 4B     3334         .ascii     "?STACK"
      00134B                       3335 QSTAC: 
      00134B CD 0A 6C         [ 4] 3336         CALL     DEPTH
      00134E CD 05 02         [ 4] 3337         CALL     ZLESS   ;check only for underflow
      001351 CD 12 AB         [ 4] 3338         CALL     ABORQ
      001354 0B                    3339         .byte      11
      001355 20 75 6E 64 65 72 66  3340         .ascii     " underflow "
             6C 6F 77 20
      001360 81               [ 4] 3341         RET
                                   3342 
                                   3343 ;       EVAL    ( -- )
                                   3344 ;       Interpret  input stream.
      001361 13 44                 3345         .word      LINK
                           001363  3346 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001363 04                    3347         .byte      4
      001364 45 56 41 4C           3348         .ascii     "EVAL"
      001368                       3349 EVAL:
      001368 CD 10 A2         [ 4] 3350 EVAL1:  CALL     TOKEN
      00136B CD 04 C9         [ 4] 3351         CALL     DUPP
      00136E CD 04 40         [ 4] 3352         CALL     CAT     ;?input stream empty
      001371 CD 03 D7         [ 4] 3353         CALL     QBRAN
      001374 13 84                 3354         .word    EVAL2
      001376 CD 05 E7         [ 4] 3355         CALL     TEVAL
      001379 CD 0B 4E         [ 4] 3356         CALL     ATEXE
      00137C CD 13 4B         [ 4] 3357         CALL     QSTAC   ;evaluate input, check stack
      00137F CD 03 EE         [ 4] 3358         CALL     BRAN
      001382 13 68                 3359         .word    EVAL1
      001384 CD 04 BF         [ 4] 3360 EVAL2:  CALL     DROP
      001387 CC 13 25         [ 2] 3361         JP       DOTOK
                                   3362 
                                   3363 ;       PRESET  ( -- )
                                   3364 ;       Reset data stack pointer and
                                   3365 ;       terminal input buffer.
      00138A 13 63                 3366         .word      LINK
                           00138C  3367 LINK = . 
      00138C 06                    3368         .byte      6
      00138D 50 52 45 53 45 54     3369         .ascii     "PRESET"
      001393                       3370 PRESE:
      001393 CD 03 A4         [ 4] 3371         CALL     DOLIT
      001396 06 80                 3372         .word      SPP
      001398 CD 04 B6         [ 4] 3373         CALL     SPSTO
      00139B CD 03 A4         [ 4] 3374         CALL     DOLIT
      00139E 07 00                 3375         .word      TIBB
      0013A0 CD 05 B4         [ 4] 3376         CALL     NTIB
      0013A3 CD 09 93         [ 4] 3377         CALL     CELLP
      0013A6 CC 04 0B         [ 2] 3378         JP     STORE
                                   3379 
                                   3380 ;       QUIT    ( -- )
                                   3381 ;       Reset return stack pointer
                                   3382 ;       and start text interpreter.
      0013A9 13 8C                 3383         .word      LINK
                           0013AB  3384 LINK = . 
      0013AB 04                    3385         .byte      4
      0013AC 51 55 49 54           3386         .ascii     "QUIT"
      0013B0                       3387 QUIT:
      0013B0 CD 03 A4         [ 4] 3388         CALL     DOLIT
      0013B3 07 FF                 3389         .word      RPP
      0013B5 CD 04 5D         [ 4] 3390         CALL     RPSTO   ;reset return stack pointer
      0013B8 CD 13 14         [ 4] 3391 QUIT1:  CALL     LBRAC   ;start interpretation
      0013BB CD 12 77         [ 4] 3392 QUIT2:  CALL     QUERY   ;get input
      0013BE CD 13 68         [ 4] 3393         CALL     EVAL
      0013C1 20 F8            [ 2] 3394         JRA     QUIT2   ;continue till error
                                   3395 
                                   3396 ;; The compiler
                                   3397 
                                   3398 ;       '       ( -- ca )
                                   3399 ;       Search vocabularies for
                                   3400 ;       next word in input stream.
      0013C3 13 AB                 3401         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                           0013C5  3402 LINK = . 
      0013C5 01                    3403         .byte      1
      0013C6 27                    3404         .ascii     "'"
      0013C7                       3405 TICK:
      0013C7 CD 10 A2         [ 4] 3406         CALL     TOKEN
      0013CA CD 11 9F         [ 4] 3407         CALL     NAMEQ   ;?defined
      0013CD CD 03 D7         [ 4] 3408         CALL     QBRAN
      0013D0 12 B3                 3409         .word      ABOR1
      0013D2 81               [ 4] 3410         RET     ;yes, push code address
                                   3411 
                                   3412 ;       ALLOT   ( n -- )
                                   3413 ;       Allocate n bytes to RAM 
      0013D3 13 C5                 3414         .word      LINK
                           0013D5  3415         LINK = . 
      0013D5 05                    3416         .byte      5
      0013D6 41 4C 4C 4F 54        3417         .ascii     "ALLOT"
      0013DB                       3418 ALLOT:
      0013DB CD 06 17         [ 4] 3419         CALL     VPP
                                   3420 ; must update APP_VP each time VP is modidied
      0013DE CD 0A 9A         [ 4] 3421         call PSTOR 
      0013E1 CC 1B 25         [ 2] 3422         jp UPDATVP 
                                   3423 
                                   3424 ;       ,       ( w -- )
                                   3425 ;         Compile an integer into
                                   3426 ;         variable space.
      0013E4 13 D5                 3427         .word      LINK
                           0013E6  3428 LINK = . 
      0013E6 01                    3429         .byte      1
      0013E7 2C                    3430         .ascii     ","
      0013E8                       3431 COMMA:
      0013E8 CD 0B 18         [ 4] 3432         CALL     HERE
      0013EB CD 04 C9         [ 4] 3433         CALL     DUPP
      0013EE CD 09 93         [ 4] 3434         CALL     CELLP   ;cell boundary
      0013F1 CD 06 17         [ 4] 3435         CALL     VPP
      0013F4 CD 04 0B         [ 4] 3436         CALL     STORE
      0013F7 CC 04 0B         [ 2] 3437         JP     STORE
                                   3438 
                                   3439 ;       C,      ( c -- )
                                   3440 ;       Compile a byte into
                                   3441 ;       variables space.
      0013FA 13 E6                 3442        .word      LINK
                           0013FC  3443 LINK = . 
      0013FC 02                    3444         .byte      2
      0013FD 43 2C                 3445         .ascii     "C,"
      0013FF                       3446 CCOMMA:
      0013FF CD 0B 18         [ 4] 3447         CALL     HERE
      001402 CD 04 C9         [ 4] 3448         CALL     DUPP
      001405 CD 09 BE         [ 4] 3449         CALL     ONEP
      001408 CD 06 17         [ 4] 3450         CALL     VPP
      00140B CD 04 0B         [ 4] 3451         CALL     STORE
      00140E CC 04 2F         [ 2] 3452         JP     CSTOR
                                   3453 
                                   3454 ;       [COMPILE]       ( -- ; <string> )
                                   3455 ;       Compile next immediate
                                   3456 ;       word into code dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001411 13 FC                 3457         .word      LINK
                           001413  3458 LINK = . 
      001413 89                    3459 	.byte      IMEDD+9
      001414 5B 43 4F 4D 50 49 4C  3460         .ascii     "[COMPILE]"
             45 5D
      00141D                       3461 BCOMP:
      00141D CD 13 C7         [ 4] 3462         CALL     TICK
      001420 CC 16 E3         [ 2] 3463         JP     JSRC
                                   3464 
                                   3465 ;       COMPILE ( -- )
                                   3466 ;       Compile next jsr in
                                   3467 ;       colon list to code dictionary.
      001423 14 13                 3468         .word      LINK
                           001425  3469 LINK = . 
      001425 47                    3470 	.byte      COMPO+7
      001426 43 4F 4D 50 49 4C 45  3471         .ascii     "COMPILE"
      00142D                       3472 COMPI:
      00142D CD 04 73         [ 4] 3473         CALL     RFROM
      001430 CD 04 C9         [ 4] 3474         CALL     DUPP
      001433 CD 04 22         [ 4] 3475         CALL     AT
      001436 CD 16 E3         [ 4] 3476         CALL     JSRC    ;compile subroutine
      001439 CD 09 93         [ 4] 3477         CALL     CELLP
      00143C 90 93            [ 1] 3478         ldw y,x 
      00143E 90 FE            [ 2] 3479         ldw y,(y)
      001440 1C 00 02         [ 2] 3480         addw x,#CELLL 
      001443 90 FC            [ 2] 3481         jp (y)
                                   3482 
                                   3483 ;       LITERAL ( w -- )
                                   3484 ;       Compile tos to dictionary
                                   3485 ;       as an integer literal.
      001445 14 25                 3486         .word      LINK
                           001447  3487 LINK = . 
      001447 87                    3488 	.byte      IMEDD+7
      001448 4C 49 54 45 52 41 4C  3489         .ascii     "LITERAL"
      00144F                       3490 LITER:
      00144F CD 14 2D         [ 4] 3491         CALL     COMPI
      001452 03 A4                 3492         .word DOLIT 
      001454 CC 13 E8         [ 2] 3493         JP     COMMA
                                   3494 
                                   3495 ;       $,"     ( -- )
                                   3496 ;       Compile a literal string
                                   3497 ;       up to next " .
      001457 14 47                 3498         .word      LINK
                           001459  3499 LINK = . 
      001459 03                    3500         .byte      3
      00145A 24 2C 22              3501         .byte     '$',',','"'
      00145D                       3502 STRCQ:
      00145D CD 03 A4         [ 4] 3503         CALL     DOLIT
      001460 00 22                 3504         .word     34	; "
      001462 CD 10 25         [ 4] 3505         CALL     PARSE
      001465 CD 0B 18         [ 4] 3506         CALL     HERE
      001468 CD 0B D8         [ 4] 3507         CALL     PACKS   ;string to code dictionary
      00146B CD 0B 01         [ 4] 3508         CALL     COUNT
      00146E CD 06 C4         [ 4] 3509         CALL     PLUS    ;calculate aligned end of string
      001471 CD 06 17         [ 4] 3510         CALL     VPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001474 CC 04 0B         [ 2] 3511         JP     STORE
                                   3512 
                                   3513 ;; Structures
                                   3514 
                                   3515 ;       FOR     ( -- a )
                                   3516 ;       Start a FOR-NEXT loop
                                   3517 ;       structure in a colon definition.
      001477 14 59                 3518         .word      LINK
                           001479  3519 LINK = . 
      001479 83                    3520 	.byte      IMEDD+3
      00147A 46 4F 52              3521         .ascii     "FOR"
      00147D                       3522 FOR:
      00147D CD 14 2D         [ 4] 3523         CALL     COMPI
      001480 04 92                 3524         .word TOR 
      001482 CC 0B 18         [ 2] 3525         JP     HERE
                                   3526 
                                   3527 ;       NEXT    ( a -- )
                                   3528 ;       Terminate a FOR-NEXT loop.
      001485 14 79                 3529         .word      LINK
                           001487  3530 LINK = . 
      001487 84                    3531 	.byte      IMEDD+4
      001488 4E 45 58 54           3532         .ascii     "NEXT"
      00148C                       3533 NEXT:
      00148C CD 14 2D         [ 4] 3534         CALL     COMPI
      00148F 03 B8                 3535         .word DONXT 
      001491 CD 06 63         [ 4] 3536         call ADRADJ
      001494 CC 13 E8         [ 2] 3537         JP     COMMA
                                   3538 
                                   3539 ;       I ( -- n )
                                   3540 ;       stack FOR-NEXT COUNTER 
      001497 14 87                 3541         .word LINK 
                           001499  3542         LINK=.
      001499 01                    3543         .byte 1 
      00149A 49                    3544         .ascii "I"
      00149B                       3545 IFETCH: 
      00149B 1D 00 02         [ 2] 3546         subw x,#CELLL 
      00149E 16 03            [ 2] 3547         ldw y,(3,sp)
      0014A0 FF               [ 2] 3548         ldw (x),y 
      0014A1 81               [ 4] 3549         ret 
                                   3550 
                                   3551 ;       BEGIN   ( -- a )
                                   3552 ;       Start an infinite or
                                   3553 ;       indefinite loop structure.
      0014A2 14 99                 3554         .word      LINK
                           0014A4  3555 LINK = . 
      0014A4 85                    3556 	.byte      IMEDD+5
      0014A5 42 45 47 49 4E        3557         .ascii     "BEGIN"
      0014AA                       3558 BEGIN:
      0014AA CC 0B 18         [ 2] 3559         JP     HERE
                                   3560 
                                   3561 ;       UNTIL   ( a -- )
                                   3562 ;       Terminate a BEGIN-UNTIL
                                   3563 ;       indefinite loop structure.
      0014AD 14 A4                 3564         .word      LINK
                           0014AF  3565 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014AF 85                    3566 	.byte      IMEDD+5
      0014B0 55 4E 54 49 4C        3567         .ascii     "UNTIL"
      0014B5                       3568 UNTIL:
      0014B5 CD 14 2D         [ 4] 3569         CALL     COMPI
      0014B8 03 D7                 3570         .word    QBRAN 
      0014BA CD 06 63         [ 4] 3571         call ADRADJ
      0014BD CC 13 E8         [ 2] 3572         JP     COMMA
                                   3573 
                                   3574 ;       AGAIN   ( a -- )
                                   3575 ;       Terminate a BEGIN-AGAIN
                                   3576 ;       infinite loop structure.
      0014C0 14 AF                 3577         .word      LINK
                           0014C2  3578 LINK = . 
      0014C2 85                    3579 	.byte      IMEDD+5
      0014C3 41 47 41 49 4E        3580         .ascii     "AGAIN"
      0014C8                       3581 AGAIN:
      0014C8 CD 14 2D         [ 4] 3582         CALL     COMPI
      0014CB 03 EE                 3583         .word BRAN
      0014CD CD 06 63         [ 4] 3584         call ADRADJ 
      0014D0 CC 13 E8         [ 2] 3585         JP     COMMA
                                   3586 
                                   3587 ;       IF      ( -- A )
                                   3588 ;       Begin a conditional branch.
      0014D3 14 C2                 3589         .word      LINK
                           0014D5  3590 LINK = . 
      0014D5 82                    3591 	.byte      IMEDD+2
      0014D6 49 46                 3592         .ascii     "IF"
      0014D8                       3593 IFF:
      0014D8 CD 14 2D         [ 4] 3594         CALL     COMPI
      0014DB 03 D7                 3595         .word QBRAN
      0014DD CD 0B 18         [ 4] 3596         CALL     HERE
      0014E0 CD 0A 2A         [ 4] 3597         CALL     ZERO
      0014E3 CC 13 E8         [ 2] 3598         JP     COMMA
                                   3599 
                                   3600 ;       THEN        ( A -- )
                                   3601 ;       Terminate a conditional branch structure.
      0014E6 14 D5                 3602         .word      LINK
                           0014E8  3603 LINK = . 
      0014E8 84                    3604 	.byte      IMEDD+4
      0014E9 54 48 45 4E           3605         .ascii     "THEN"
      0014ED                       3606 THENN:
      0014ED CD 0B 18         [ 4] 3607         CALL     HERE
      0014F0 CD 06 63         [ 4] 3608         call ADRADJ 
      0014F3 CD 04 D9         [ 4] 3609         CALL     SWAPP
      0014F6 CC 04 0B         [ 2] 3610         JP     STORE
                                   3611 
                                   3612 ;       ELSE        ( A -- A )
                                   3613 ;       Start the false clause in an IF-ELSE-THEN structure.
      0014F9 14 E8                 3614         .word      LINK
                           0014FB  3615 LINK = . 
      0014FB 84                    3616 	.byte      IMEDD+4
      0014FC 45 4C 53 45           3617         .ascii     "ELSE"
      001500                       3618 ELSEE:
      001500 CD 14 2D         [ 4] 3619         CALL     COMPI
      001503 03 EE                 3620         .word BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001505 CD 0B 18         [ 4] 3621         CALL     HERE
      001508 CD 0A 2A         [ 4] 3622         CALL     ZERO
      00150B CD 13 E8         [ 4] 3623         CALL     COMMA
      00150E CD 04 D9         [ 4] 3624         CALL     SWAPP
      001511 CD 0B 18         [ 4] 3625         CALL     HERE
      001514 CD 06 63         [ 4] 3626         call ADRADJ 
      001517 CD 04 D9         [ 4] 3627         CALL     SWAPP
      00151A CC 04 0B         [ 2] 3628         JP     STORE
                                   3629 
                                   3630 ;       AHEAD       ( -- A )
                                   3631 ;       Compile a forward branch instruction.
      00151D 14 FB                 3632         .word      LINK
                           00151F  3633 LINK = . 
      00151F 85                    3634 	.byte      IMEDD+5
      001520 41 48 45 41 44        3635         .ascii     "AHEAD"
      001525                       3636 AHEAD:
      001525 CD 14 2D         [ 4] 3637         CALL     COMPI
      001528 03 EE                 3638         .word BRAN
      00152A CD 0B 18         [ 4] 3639         CALL     HERE
      00152D CD 0A 2A         [ 4] 3640         CALL     ZERO
      001530 CC 13 E8         [ 2] 3641         JP     COMMA
                                   3642 
                                   3643 ;       WHILE       ( a -- A a )
                                   3644 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001533 15 1F                 3645         .word      LINK
                           001535  3646 LINK = . 
      001535 85                    3647 	.byte      IMEDD+5
      001536 57 48 49 4C 45        3648         .ascii     "WHILE"
      00153B                       3649 WHILE:
      00153B CD 14 2D         [ 4] 3650         CALL     COMPI
      00153E 03 D7                 3651         .word QBRAN
      001540 CD 0B 18         [ 4] 3652         CALL     HERE
      001543 CD 0A 2A         [ 4] 3653         CALL     ZERO
      001546 CD 13 E8         [ 4] 3654         CALL     COMMA
      001549 CC 04 D9         [ 2] 3655         JP     SWAPP
                                   3656 
                                   3657 ;       REPEAT      ( A a -- )
                                   3658 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00154C 15 35                 3659         .word      LINK
                           00154E  3660 LINK = . 
      00154E 86                    3661         .byte      IMEDD+6
      00154F 52 45 50 45 41 54     3662         .ascii     "REPEAT"
      001555                       3663 REPEA:
      001555 CD 14 2D         [ 4] 3664         CALL     COMPI
      001558 03 EE                 3665         .word BRAN
      00155A CD 06 63         [ 4] 3666         call ADRADJ 
      00155D CD 13 E8         [ 4] 3667         CALL     COMMA
      001560 CD 0B 18         [ 4] 3668         CALL     HERE
      001563 CD 06 63         [ 4] 3669         call ADRADJ 
      001566 CD 04 D9         [ 4] 3670         CALL     SWAPP
      001569 CC 04 0B         [ 2] 3671         JP     STORE
                                   3672 
                                   3673 ;       AFT         ( a -- a A )
                                   3674 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00156C 15 4E                 3675         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                           00156E  3676 LINK = . 
      00156E 83                    3677 	.byte      IMEDD+3
      00156F 41 46 54              3678         .ascii     "AFT"
      001572                       3679 AFT:
      001572 CD 04 BF         [ 4] 3680         CALL     DROP
      001575 CD 15 25         [ 4] 3681         CALL     AHEAD
      001578 CD 0B 18         [ 4] 3682         CALL     HERE
      00157B CC 04 D9         [ 2] 3683         JP     SWAPP
                                   3684 
                                   3685 ;       ABORT"      ( -- ; <string> )
                                   3686 ;       Conditional abort with an error message.
      00157E 15 6E                 3687         .word      LINK
                           001580  3688 LINK = . 
      001580 86                    3689 	.byte      IMEDD+6
      001581 41 42 4F 52 54        3690         .ascii     "ABORT"
      001586 22                    3691         .byte      '"'
      001587                       3692 ABRTQ:
      001587 CD 14 2D         [ 4] 3693         CALL     COMPI
      00158A 12 AB                 3694         .word ABORQ
      00158C CC 14 5D         [ 2] 3695         JP     STRCQ
                                   3696 
                                   3697 ;       $"     ( -- ; <string> )
                                   3698 ;       Compile an inline string literal.
      00158F 15 80                 3699         .word      LINK
                           001591  3700 LINK = . 
      001591 82                    3701 	.byte      IMEDD+2
      001592 24 22                 3702         .byte     '$','"'
      001594                       3703 STRQ:
      001594 CD 14 2D         [ 4] 3704         CALL     COMPI
      001597 0E C5                 3705         .word STRQP 
      001599 CC 14 5D         [ 2] 3706         JP     STRCQ
                                   3707 
                                   3708 ;       ."          ( -- ; <string> )
                                   3709 ;       Compile an inline string literal to be typed out at run time.
      00159C 15 91                 3710         .word      LINK
                           00159E  3711 LINK = . 
      00159E 82                    3712 	.byte      IMEDD+2
      00159F 2E 22                 3713         .byte     '.','"'
      0015A1                       3714 DOTQ:
      0015A1 CD 14 2D         [ 4] 3715         CALL     COMPI
      0015A4 0E CF                 3716         .word DOTQP 
      0015A6 CC 14 5D         [ 2] 3717         JP     STRCQ
                                   3718 
                                   3719 ;; Name compiler
                                   3720 
                                   3721 ;       ?UNIQUE ( a -- a )
                                   3722 ;       Display a warning message
                                   3723 ;       if word already exists.
      0015A9 15 9E                 3724         .word      LINK
                           0015AB  3725 LINK = . 
      0015AB 07                    3726         .byte      7
      0015AC 3F 55 4E 49 51 55 45  3727         .ascii     "?UNIQUE"
      0015B3                       3728 UNIQU:
      0015B3 CD 04 C9         [ 4] 3729         CALL     DUPP
      0015B6 CD 11 9F         [ 4] 3730         CALL     NAMEQ   ;?name exists
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015B9 CD 03 D7         [ 4] 3731         CALL     QBRAN
      0015BC 15 D2                 3732         .word      UNIQ1
      0015BE CD 0E CF         [ 4] 3733         CALL     DOTQP   ;redef are OK
      0015C1 07                    3734         .byte       7
      0015C2 20 72 65 44 65 66 20  3735         .ascii     " reDef "       
      0015C9 CD 04 F3         [ 4] 3736         CALL     OVER
      0015CC CD 0B 01         [ 4] 3737         CALL     COUNT
      0015CF CD 0E 72         [ 4] 3738         CALL     TYPES   ;just in case
      0015D2 CC 04 BF         [ 2] 3739 UNIQ1:  JP     DROP
                                   3740 
                                   3741 ;       $,n     ( na -- )
                                   3742 ;       Build a new dictionary name
                                   3743 ;       using string at na.
                                   3744 ; compile dans l'espace des variables 
      0015D5 15 AB                 3745         .word      LINK
                           0015D7  3746 LINK = . 
      0015D7 03                    3747         .byte      3
      0015D8 24 2C 6E              3748         .ascii     "$,n"
      0015DB                       3749 SNAME:
      0015DB CD 04 C9         [ 4] 3750         CALL     DUPP
      0015DE CD 04 40         [ 4] 3751         CALL     CAT     ;?null input
      0015E1 CD 03 D7         [ 4] 3752         CALL     QBRAN
      0015E4 16 11                 3753         .word      PNAM1
      0015E6 CD 15 B3         [ 4] 3754         CALL     UNIQU   ;?redefinition
      0015E9 CD 04 C9         [ 4] 3755         CALL     DUPP
      0015EC CD 0B 01         [ 4] 3756         CALL     COUNT
      0015EF CD 06 C4         [ 4] 3757         CALL     PLUS
      0015F2 CD 06 17         [ 4] 3758         CALL     VPP
      0015F5 CD 04 0B         [ 4] 3759         CALL     STORE
      0015F8 CD 04 C9         [ 4] 3760         CALL     DUPP
      0015FB CD 06 35         [ 4] 3761         CALL     LAST
      0015FE CD 04 0B         [ 4] 3762         CALL     STORE   ;save na for vocabulary link
      001601 CD 09 A2         [ 4] 3763         CALL     CELLM   ;link address
      001604 CD 06 09         [ 4] 3764         CALL     CNTXT
      001607 CD 04 22         [ 4] 3765         CALL     AT
      00160A CD 04 D9         [ 4] 3766         CALL     SWAPP
      00160D CD 04 0B         [ 4] 3767         CALL     STORE
      001610 81               [ 4] 3768         RET     ;save code pointer
      001611 CD 0E C5         [ 4] 3769 PNAM1:  CALL     STRQP
      001614 05                    3770         .byte      5
      001615 20 6E 61 6D 65        3771         .ascii     " name" ;null input
      00161A CC 12 B3         [ 2] 3772         JP     ABOR1
                                   3773 
                                   3774 ;; FORTH compiler
                                   3775 
                                   3776 ;       $COMPILE        ( a -- )
                                   3777 ;       Compile next word to
                                   3778 ;       dictionary as a token or literal.
      00161D 15 D7                 3779         .word      LINK
                           00161F  3780 LINK = . 
      00161F 08                    3781         .byte      8
      001620 24 43 4F 4D 50 49 4C  3782         .ascii     "$COMPILE"
             45
      001628                       3783 SCOMP:
      001628 CD 11 9F         [ 4] 3784         CALL     NAMEQ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00162B CD 06 73         [ 4] 3785         CALL     QDUP    ;?defined
      00162E CD 03 D7         [ 4] 3786         CALL     QBRAN
      001631 16 49                 3787         .word      SCOM2
      001633 CD 04 22         [ 4] 3788         CALL     AT
      001636 CD 03 A4         [ 4] 3789         CALL     DOLIT
      001639 80 00                 3790         .word     0x8000	;  IMEDD*256
      00163B CD 05 15         [ 4] 3791         CALL     ANDD    ;?immediate
      00163E CD 03 D7         [ 4] 3792         CALL     QBRAN
      001641 16 46                 3793         .word      SCOM1
      001643 CC 03 FE         [ 2] 3794         JP     EXECU
      001646 CC 16 E3         [ 2] 3795 SCOM1:  JP     JSRC
      001649 CD 0D 3D         [ 4] 3796 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00164C CD 03 D7         [ 4] 3797         CALL     QBRAN
      00164F 12 B3                 3798         .word      ABOR1
      001651 CC 14 4F         [ 2] 3799         JP     LITER
                                   3800 
                                   3801 ;       OVERT   ( -- )
                                   3802 ;       Link a new word into vocabulary.
      001654 16 1F                 3803         .word      LINK
                           001656  3804 LINK = . 
      001656 05                    3805         .byte      5
      001657 4F 56 45 52 54        3806         .ascii     "OVERT"
      00165C                       3807 OVERT:
      00165C CD 06 35         [ 4] 3808         CALL     LAST
      00165F CD 04 22         [ 4] 3809         CALL     AT
      001662 CD 06 09         [ 4] 3810         CALL     CNTXT
      001665 CC 04 0B         [ 2] 3811         JP     STORE
                                   3812 
                                   3813 ;       ;       ( -- )
                                   3814 ;       Terminate a colon definition.
      001668 16 56                 3815         .word      LINK
                           00166A  3816 LINK = . 
      00166A C1                    3817 	.byte      IMEDD+COMPO+1
      00166B 3B                    3818         .ascii     ";"
      00166C                       3819 SEMIS:
                           000001  3820 .if OPTIMIZE ; more compact and faster
      00166C CD 03 A4         [ 4] 3821         call DOLIT 
      00166F 00 81                 3822         .word 0x81   ; opcode for RET 
      001671 CD 13 FF         [ 4] 3823         call CCOMMA 
                           000000  3824 .else
                                   3825         CALL     COMPI
                                   3826         .word EXIT 
                                   3827 .endif 
      001674 CD 13 14         [ 4] 3828         CALL     LBRAC
      001677 CD 16 5C         [ 4] 3829         call OVERT 
      00167A CD 20 48         [ 4] 3830         CALL FMOVE
      00167D CD 06 73         [ 4] 3831         call QDUP 
      001680 CD 03 D7         [ 4] 3832         call QBRAN 
      001683 17 B3                 3833         .word SET_RAMLAST 
      001685 CD 20 DC         [ 4] 3834         CALL UPDATPTR
      001688 81               [ 4] 3835         RET 
                                   3836 
                                   3837 
                                   3838 ;       Terminate an ISR definition 
                                   3839 ;       retourn ca of ISR as double
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3840 ;       I; ( -- ud )
      001689 16 6A                 3841         .word LINK 
                           00168B  3842         LINK=.
      00168B C2                    3843         .byte 2+IMEDD+COMPO 
      00168C 49 3B                 3844         .ascii "I;" 
      00168E                       3845 ISEMI:
      00168E 1D 00 02         [ 2] 3846         subw x,#CELLL  
      001691 90 AE 00 80      [ 2] 3847         ldw y,#IRET_CODE 
      001695 FF               [ 2] 3848         ldw (x),y 
      001696 CD 13 FF         [ 4] 3849         call CCOMMA
      001699 CD 13 14         [ 4] 3850         call LBRAC 
      00169C CD 21 21         [ 4] 3851         call IFMOVE
      00169F CD 06 73         [ 4] 3852         call QDUP 
      0016A2 CD 03 D7         [ 4] 3853         CALL QBRAN 
      0016A5 17 B3                 3854         .word SET_RAMLAST
      0016A7 CD 06 25         [ 4] 3855         CALL CPP
      0016AA CD 04 22         [ 4] 3856         call AT 
      0016AD CD 04 D9         [ 4] 3857         call SWAPP 
      0016B0 CD 06 25         [ 4] 3858         CALL CPP 
      0016B3 CD 04 0B         [ 4] 3859         call STORE 
      0016B6 CD 1B 0E         [ 4] 3860         call UPDATCP 
      0016B9 CD 1A CB         [ 4] 3861         call EEPVP 
      0016BC CD 04 BF         [ 4] 3862         call DROP 
      0016BF CD 04 22         [ 4] 3863         call AT 
      0016C2 CD 06 17         [ 4] 3864         call VPP 
      0016C5 CD 04 0B         [ 4] 3865         call STORE 
      0016C8 CC 0A 2A         [ 2] 3866         jp ZERO
      0016CB 81               [ 4] 3867         ret           
                                   3868         
                                   3869 
                                   3870 ;       ]       ( -- )
                                   3871 ;       Start compiling words in
                                   3872 ;       input stream.
      0016CC 16 8B                 3873         .word      LINK
                           0016CE  3874 LINK = . 
      0016CE 01                    3875         .byte      1
      0016CF 5D                    3876         .ascii     "]"
      0016D0                       3877 RBRAC:
      0016D0 CD 03 A4         [ 4] 3878         CALL   DOLIT
      0016D3 16 28                 3879         .word  SCOMP
      0016D5 CD 05 E7         [ 4] 3880         CALL   TEVAL
      0016D8 CC 04 0B         [ 2] 3881         JP     STORE
                                   3882 
                                   3883 ;       CALL,    ( ca -- )
                                   3884 ;       Compile a subroutine call.
      0016DB 16 CE                 3885         .word      LINK
                           0016DD  3886 LINK = . 
      0016DD 05                    3887         .byte      5
      0016DE 43 41 4C 4C 2C        3888         .ascii     "CALL,"
      0016E3                       3889 JSRC:
      0016E3 CD 03 A4         [ 4] 3890         CALL     DOLIT
      0016E6 00 CD                 3891         .word     CALLL     ;CALL
      0016E8 CD 13 FF         [ 4] 3892         CALL     CCOMMA
      0016EB CC 13 E8         [ 2] 3893         JP     COMMA
                                   3894 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3895 ;       INIT-OFS ( -- )
                                   3896 ;       compute offset to adjust jump address 
                                   3897 ;       set variable OFFSET 
      0016EE 16 DD                 3898         .word LINK 
                           0016F0  3899         LINK=.
      0016F0 08                    3900         .byte 8 
      0016F1 49 4E 49 54 2D 4F 46  3901         .ascii "INIT-OFS" 
             53
      0016F9                       3902 INITOFS:
      0016F9 CD 05 D6         [ 4] 3903         call TFLASH 
      0016FC CD 04 22         [ 4] 3904         CALL AT 
      0016FF CD 04 C9         [ 4] 3905         CALL DUPP 
      001702 CD 03 D7         [ 4] 3906         call QBRAN
      001705 17 16                 3907         .word 1$
      001707 CD 04 BF         [ 4] 3908         call DROP  
      00170A CD 06 25         [ 4] 3909         call CPP 
      00170D CD 04 22         [ 4] 3910         call AT 
      001710 CD 0B 18         [ 4] 3911         call HERE
      001713 CD 07 3D         [ 4] 3912         call SUBB 
      001716 CD 06 5A         [ 4] 3913 1$:     call OFFSET 
      001719 CC 04 0B         [ 2] 3914         jp STORE  
                                   3915 
                                   3916 ;       :       ( -- ; <string> )
                                   3917 ;       Start a new colon definition
                                   3918 ;       using next word as its name.
      00171C 16 F0                 3919         .word      LINK
                           00171E  3920 LINK = . 
      00171E 01                    3921         .byte      1
      00171F 3A                    3922         .ascii     ":"
      001720                       3923 COLON:
      001720 CD 16 F9         [ 4] 3924         call INITOFS       
      001723 CD 10 A2         [ 4] 3925         CALL   TOKEN
      001726 CD 15 DB         [ 4] 3926         CALL   SNAME
      001729 CC 16 D0         [ 2] 3927         JP     RBRAC
                                   3928 
                                   3929 ;       I:  ( -- )
                                   3930 ;       Start interrupt service routine definition
                                   3931 ;       those definition have no name.
      00172C 17 1E                 3932         .word LINK
                           00172E  3933         LINK=.
      00172E 02                    3934         .byte 2 
      00172F 49 3A                 3935         .ascii "I:" 
      001731                       3936 ICOLON:
      001731 CD 16 F9         [ 4] 3937         call INITOFS 
      001734 CC 16 D0         [ 2] 3938         jp RBRAC  
                                   3939 
                                   3940 ;       IMMEDIATE       ( -- )
                                   3941 ;       Make last compiled word
                                   3942 ;       an immediate word.
      001737 17 2E                 3943         .word      LINK
                           001739  3944 LINK = . 
      001739 09                    3945         .byte      9
      00173A 49 4D 4D 45 44 49 41  3946         .ascii     "IMMEDIATE"
             54 45
      001743                       3947 IMMED:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001743 CD 03 A4         [ 4] 3948         CALL     DOLIT
      001746 80 00                 3949         .word     0x8000	;  IMEDD*256
      001748 CD 06 35         [ 4] 3950         CALL     LAST
      00174B CD 04 22         [ 4] 3951         CALL     AT
      00174E CD 04 22         [ 4] 3952         CALL     AT
      001751 CD 05 29         [ 4] 3953         CALL     ORR
      001754 CD 06 35         [ 4] 3954         CALL     LAST
      001757 CD 04 22         [ 4] 3955         CALL     AT
      00175A CC 04 0B         [ 2] 3956         JP     STORE
                                   3957 
                                   3958 ;; Defining words
                                   3959 
                                   3960 ;       CREATE  ( -- ; <string> )
                                   3961 ;       Compile a new array
                                   3962 ;       without allocating space.
      00175D 17 39                 3963         .word      LINK
                           00175F  3964 LINK = . 
      00175F 06                    3965         .byte      6
      001760 43 52 45 41 54 45     3966         .ascii     "CREATE"
      001766                       3967 CREAT:
      001766 CD 10 A2         [ 4] 3968         CALL     TOKEN
      001769 CD 15 DB         [ 4] 3969         CALL     SNAME
      00176C CD 16 5C         [ 4] 3970         CALL     OVERT        
      00176F CD 14 2D         [ 4] 3971         CALL     COMPI 
      001772 05 76                 3972         .word DOVAR 
      001774 81               [ 4] 3973         RET
                                   3974 
                                   3975 ;       VARIABLE        ( -- ; <string> )
                                   3976 ;       Compile a new variable
                                   3977 ;       initialized to 0.
      001775 17 5F                 3978         .word      LINK
                           001777  3979 LINK = . 
      001777 08                    3980         .byte      8
      001778 56 41 52 49 41 42 4C  3981         .ascii     "VARIABLE"
             45
      001780                       3982 VARIA:
                                   3983 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001780 CD 0B 18         [ 4] 3984         CALL HERE
      001783 CD 04 C9         [ 4] 3985         CALL DUPP 
      001786 CD 09 93         [ 4] 3986         CALL CELLP
      001789 CD 06 17         [ 4] 3987         CALL VPP 
      00178C CD 04 0B         [ 4] 3988         CALL STORE
      00178F CD 17 66         [ 4] 3989         CALL CREAT
      001792 CD 04 C9         [ 4] 3990         CALL DUPP
      001795 CD 13 E8         [ 4] 3991         CALL COMMA
      001798 CD 0A 2A         [ 4] 3992         CALL ZERO
      00179B CD 04 D9         [ 4] 3993         call SWAPP 
      00179E CD 04 0B         [ 4] 3994         CALL STORE
      0017A1 CD 20 48         [ 4] 3995         CALL FMOVE ; move definition to FLASH
      0017A4 CD 06 73         [ 4] 3996         CALL QDUP 
      0017A7 CD 03 D7         [ 4] 3997         CALL QBRAN 
      0017AA 17 B3                 3998         .word SET_RAMLAST   
      0017AC CD 1B 25         [ 4] 3999         call UPDATVP  ; don't update if variable kept in RAM.
      0017AF CD 20 DC         [ 4] 4000         CALL UPDATPTR
      0017B2 81               [ 4] 4001         RET         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0017B3                       4002 SET_RAMLAST: 
      0017B3 CD 06 35         [ 4] 4003         CALL LAST 
      0017B6 CD 04 22         [ 4] 4004         CALL AT 
      0017B9 CD 06 48         [ 4] 4005         CALL RAMLAST 
      0017BC CC 04 0B         [ 2] 4006         jp STORE  
                                   4007 
                                   4008 
                                   4009 ;       CONSTANT  ( n -- ; <string> )
                                   4010 ;       Compile a new constant 
                                   4011 ;       n CONSTANT name 
      0017BF 17 77                 4012         .word LINK 
                           0017C1  4013         LINK=. 
      0017C1 08                    4014         .byte 8 
      0017C2 43 4F 4E 53 54 41 4E  4015         .ascii "CONSTANT" 
             54
      0017CA                       4016 CONSTANT:          
      0017CA CD 10 A2         [ 4] 4017         CALL TOKEN
      0017CD CD 15 DB         [ 4] 4018         CALL SNAME 
      0017D0 CD 16 5C         [ 4] 4019         CALL OVERT 
      0017D3 CD 14 2D         [ 4] 4020         CALL COMPI 
      0017D6 17 F4                 4021         .word DOCONST
      0017D8 CD 13 E8         [ 4] 4022         CALL COMMA 
      0017DB CD 20 48         [ 4] 4023         CALL FMOVE
      0017DE CD 06 73         [ 4] 4024         CALL QDUP 
      0017E1 CD 03 D7         [ 4] 4025         CALL QBRAN 
      0017E4 17 B3                 4026         .word SET_RAMLAST  
      0017E6 CD 20 DC         [ 4] 4027         CALL UPDATPTR  
      0017E9 81               [ 4] 4028 1$:     RET          
                                   4029 
                                   4030 ; CONSTANT runtime semantic 
                                   4031 ; doCONST  ( -- n )
      0017EA 17 C1                 4032         .word LINK 
                           0017EC  4033         LINK=.
      0017EC 07                    4034         .byte 7
      0017ED 44 4F 43 4F 4E 53 54  4035         .ascii "DOCONST"
      0017F4                       4036 DOCONST:
      0017F4 1D 00 02         [ 2] 4037         subw x,#CELLL
      0017F7 90 85            [ 2] 4038         popw y 
      0017F9 90 FE            [ 2] 4039         ldw y,(y) 
      0017FB FF               [ 2] 4040         ldw (x),y 
      0017FC 81               [ 4] 4041         ret 
                                   4042 
                                   4043 ;----------------------------------
                                   4044 ; create double constant 
                                   4045 ; DCONST ( d -- ; <string> )
                                   4046 ;----------------------------------
      0017FD 17 EC                 4047     .word LINK 
                           0017FF  4048     LINK=.
      0017FF 06                    4049     .byte 6 
      001800 44 43 4F 4E 53 54     4050     .ascii "DCONST"
      001806                       4051 DCONST:
      001806 CD 10 A2         [ 4] 4052         CALL TOKEN
      001809 CD 15 DB         [ 4] 4053         CALL SNAME 
      00180C CD 16 5C         [ 4] 4054         CALL OVERT 
      00180F CD 14 2D         [ 4] 4055         CALL COMPI 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001812 18 35                 4056         .word DO_DCONST
      001814 CD 13 E8         [ 4] 4057         CALL COMMA
      001817 CD 13 E8         [ 4] 4058         CALL COMMA  
      00181A CD 20 48         [ 4] 4059         CALL FMOVE
      00181D CD 06 73         [ 4] 4060         CALL QDUP 
      001820 CD 03 D7         [ 4] 4061         CALL QBRAN 
      001823 17 B3                 4062         .word SET_RAMLAST  
      001825 CD 20 DC         [ 4] 4063         CALL UPDATPTR  
      001828 81               [ 4] 4064 1$:     RET          
                                   4065     
                                   4066 ;----------------------------------
                                   4067 ; runtime for DCONST 
                                   4068 ; stack double constant 
                                   4069 ; DO-DCONST ( -- d )
                                   4070 ;-----------------------------------
      001829 17 FF                 4071         .word LINK 
                           00182B  4072         LINK=.
      00182B 09                    4073         .byte 9 
      00182C 44 4F 2D 44 43 4F 4E  4074         .ascii "DO-DCONST"
             53 54
      001835                       4075 DO_DCONST:
      001835 90 85            [ 2] 4076     popw y 
      001837 90 BF 24         [ 2] 4077     ldw YTEMP,y 
      00183A 1D 00 04         [ 2] 4078     subw x,#2*CELLL 
      00183D 90 FE            [ 2] 4079     ldw y,(y)
      00183F FF               [ 2] 4080     ldw (x),y 
      001840 90 BE 24         [ 2] 4081     ldw y,YTEMP 
      001843 90 EE 02         [ 2] 4082     ldw y,(2,y)
      001846 EF 02            [ 2] 4083     ldw (2,x),y 
      001848 81               [ 4] 4084     ret 
                                   4085 
                                   4086 ;; Tools
                                   4087 
                                   4088 ;       _TYPE   ( b u -- )
                                   4089 ;       Display a string. Filter
                                   4090 ;       non-printing characters.
      001849 18 2B                 4091         .word      LINK
                           00184B  4092 LINK = . 
      00184B 05                    4093         .byte      5
      00184C 5F 54 59 50 45        4094         .ascii     "_TYPE"
      001851                       4095 UTYPE:
      001851 CD 04 92         [ 4] 4096         CALL     TOR     ;start count down loop
      001854 20 0F            [ 2] 4097         JRA     UTYP2   ;skip first pass
      001856 CD 04 C9         [ 4] 4098 UTYP1:  CALL     DUPP
      001859 CD 04 40         [ 4] 4099         CALL     CAT
      00185C CD 0A 54         [ 4] 4100         CALL     TCHAR
      00185F CD 03 8E         [ 4] 4101         CALL     EMIT    ;display only printable
      001862 CD 09 BE         [ 4] 4102         CALL     ONEP    ;increment address
      001865 CD 03 B8         [ 4] 4103 UTYP2:  CALL     DONXT
      001868 18 56                 4104         .word      UTYP1   ;loop till done
      00186A CC 04 BF         [ 2] 4105         JP     DROP
                                   4106 
                                   4107 ;       dm+     ( a u -- a )
                                   4108 ;       Dump u bytes from ,
                                   4109 ;       leaving a+u on  stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00186D 18 4B                 4110         .word      LINK
                           00186F  4111 LINK = . 
      00186F 03                    4112         .byte      3
      001870 64 6D 2B              4113         .ascii     "dm+"
      001873                       4114 DUMPP:
      001873 CD 04 F3         [ 4] 4115         CALL     OVER
      001876 CD 03 A4         [ 4] 4116         CALL     DOLIT
      001879 00 04                 4117         .word      4
      00187B CD 0E F8         [ 4] 4118         CALL     UDOTR   ;display address
      00187E CD 0E 48         [ 4] 4119         CALL     SPACE
      001881 CD 04 92         [ 4] 4120         CALL     TOR     ;start count down loop
      001884 20 11            [ 2] 4121         JRA     PDUM2   ;skip first pass
      001886 CD 04 C9         [ 4] 4122 PDUM1:  CALL     DUPP
      001889 CD 04 40         [ 4] 4123         CALL     CAT
      00188C CD 03 A4         [ 4] 4124         CALL     DOLIT
      00188F 00 03                 4125         .word      3
      001891 CD 0E F8         [ 4] 4126         CALL     UDOTR   ;display numeric data
      001894 CD 09 BE         [ 4] 4127         CALL     ONEP    ;increment address
      001897 CD 03 B8         [ 4] 4128 PDUM2:  CALL     DONXT
      00189A 18 86                 4129         .word      PDUM1   ;loop till done
      00189C 81               [ 4] 4130         RET
                                   4131 
                                   4132 ;       DUMP    ( a u -- )
                                   4133 ;       Dump u bytes from a,
                                   4134 ;       in a formatted manner.
      00189D 18 6F                 4135         .word      LINK
                           00189F  4136 LINK = . 
      00189F 04                    4137         .byte      4
      0018A0 44 55 4D 50           4138         .ascii     "DUMP"
      0018A4                       4139 DUMP:
      0018A4 CD 05 86         [ 4] 4140         CALL     BASE
      0018A7 CD 04 22         [ 4] 4141         CALL     AT
      0018AA CD 04 92         [ 4] 4142         CALL     TOR
      0018AD CD 0C D0         [ 4] 4143         CALL     HEX     ;save radix, set hex
      0018B0 CD 03 A4         [ 4] 4144         CALL     DOLIT
      0018B3 00 10                 4145         .word      16
      0018B5 CD 08 E4         [ 4] 4146         CALL     SLASH   ;change count to lines
      0018B8 CD 04 92         [ 4] 4147         CALL     TOR     ;start count down loop
      0018BB CD 0E 90         [ 4] 4148 DUMP1:  CALL     CR
      0018BE CD 03 A4         [ 4] 4149         CALL     DOLIT
      0018C1 00 10                 4150         .word      16
      0018C3 CD 06 AF         [ 4] 4151         CALL     DDUP
      0018C6 CD 18 73         [ 4] 4152         CALL     DUMPP   ;display numeric
      0018C9 CD 06 84         [ 4] 4153         CALL     ROT
      0018CC CD 06 84         [ 4] 4154         CALL     ROT
      0018CF CD 0E 48         [ 4] 4155         CALL     SPACE
      0018D2 CD 0E 48         [ 4] 4156         CALL     SPACE
      0018D5 CD 18 51         [ 4] 4157         CALL     UTYPE   ;display printable characters
      0018D8 CD 03 B8         [ 4] 4158         CALL     DONXT
      0018DB 18 BB                 4159         .word      DUMP1   ;loop till done
      0018DD CD 04 BF         [ 4] 4160 DUMP3:  CALL     DROP
      0018E0 CD 04 73         [ 4] 4161         CALL     RFROM
      0018E3 CD 05 86         [ 4] 4162         CALL     BASE
      0018E6 CC 04 0B         [ 2] 4163         JP     STORE   ;restore radix
                                   4164 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4165 ;       .S      ( ... -- ... )
                                   4166 ;        Display  contents of stack.
      0018E9 18 9F                 4167         .word      LINK
                           0018EB  4168 LINK = . 
      0018EB 02                    4169         .byte      2
      0018EC 2E 53                 4170         .ascii     ".S"
      0018EE                       4171 DOTS:
      0018EE CD 0E 90         [ 4] 4172         CALL     CR
      0018F1 CD 0A 6C         [ 4] 4173         CALL     DEPTH   ;stack depth
      0018F4 CD 04 92         [ 4] 4174         CALL     TOR     ;start count down loop
      0018F7 20 09            [ 2] 4175         JRA     DOTS2   ;skip first pass
      0018F9 CD 04 86         [ 4] 4176 DOTS1:  CALL     RAT
      0018FC CD 0A 83         [ 4] 4177 	CALL     PICK
      0018FF CD 0F 2B         [ 4] 4178         CALL     DOT     ;index stack, display contents
      001902 CD 03 B8         [ 4] 4179 DOTS2:  CALL     DONXT
      001905 18 F9                 4180         .word      DOTS1   ;loop till done
      001907 CD 0E CF         [ 4] 4181         CALL     DOTQP
      00190A 05                    4182         .byte      5
      00190B 20 3C 73 70 20        4183         .ascii     " <sp "
      001910 81               [ 4] 4184         RET
                                   4185 
                                   4186 ;       >NAME   ( ca -- na | F )
                                   4187 ;       Convert code address
                                   4188 ;       to a name address.
      001911 18 EB                 4189         .word      LINK
                           001913  4190 LINK = . 
      001913 05                    4191         .byte      5
      001914 3E 4E 41 4D 45        4192         .ascii     ">NAME"
      001919                       4193 TNAME:
      001919 CD 06 09         [ 4] 4194         CALL     CNTXT   ;vocabulary link
      00191C CD 04 22         [ 4] 4195 TNAM2:  CALL     AT
      00191F CD 04 C9         [ 4] 4196         CALL     DUPP    ;?last word in a vocabulary
      001922 CD 03 D7         [ 4] 4197         CALL     QBRAN
      001925 19 40                 4198         .word      TNAM4
      001927 CD 06 AF         [ 4] 4199         CALL     DDUP
      00192A CD 10 B0         [ 4] 4200         CALL     NAMET
      00192D CD 05 3E         [ 4] 4201         CALL     XORR    ;compare
      001930 CD 03 D7         [ 4] 4202         CALL     QBRAN
      001933 19 3A                 4203         .word      TNAM3
      001935 CD 09 A2         [ 4] 4204         CALL     CELLM   ;continue with next word
      001938 20 E2            [ 2] 4205         JRA     TNAM2
      00193A CD 04 D9         [ 4] 4206 TNAM3:  CALL     SWAPP
      00193D CC 04 BF         [ 2] 4207         JP     DROP
      001940 CD 06 A4         [ 4] 4208 TNAM4:  CALL     DDROP
      001943 CC 0A 2A         [ 2] 4209         JP     ZERO
                                   4210 
                                   4211 ;       .ID     ( na -- )
                                   4212 ;        Display  name at address.
      001946 19 13                 4213         .word      LINK
                           001948  4214 LINK = . 
      001948 03                    4215         .byte      3
      001949 2E 49 44              4216         .ascii     ".ID"
      00194C                       4217 DOTID:
      00194C CD 06 73         [ 4] 4218         CALL     QDUP    ;if zero no name
      00194F CD 03 D7         [ 4] 4219         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001952 19 62                 4220         .word      DOTI1
      001954 CD 0B 01         [ 4] 4221         CALL     COUNT
      001957 CD 03 A4         [ 4] 4222         CALL     DOLIT
      00195A 00 1F                 4223         .word      0x1F
      00195C CD 05 15         [ 4] 4224         CALL     ANDD    ;mask lexicon bits
      00195F CC 18 51         [ 2] 4225         JP     UTYPE
      001962 CD 0E CF         [ 4] 4226 DOTI1:  CALL     DOTQP
      001965 09                    4227         .byte      9
      001966 20 6E 6F 4E 61 6D 65  4228         .ascii     " noName"
      00196D 81               [ 4] 4229         RET
                                   4230 
                           000000  4231 WANT_SEE=0
                           000000  4232 .if WANT_SEE 
                                   4233 ;       SEE     ( -- ; <string> )
                                   4234 ;       A simple decompiler.
                                   4235 ;       Updated for byte machines.
                                   4236         .word      LINK
                                   4237 LINK = . 
                                   4238         .byte      3
                                   4239         .ascii     "SEE"
                                   4240 SEE:
                                   4241         CALL     TICK    ;starting address
                                   4242         CALL     CR
                                   4243         CALL     ONEM
                                   4244 SEE1:   CALL     ONEP
                                   4245         CALL     DUPP
                                   4246         CALL     AT
                                   4247         CALL     DUPP
                                   4248         CALL     QBRAN
                                   4249         .word    SEE2
                                   4250         CALL     TNAME   ;?is it a name
                                   4251 SEE2:   CALL     QDUP    ;name address or zero
                                   4252         CALL     QBRAN
                                   4253         .word    SEE3
                                   4254         CALL     SPACE
                                   4255         CALL     DOTID   ;display name
                                   4256         CALL     ONEP
                                   4257         JRA      SEE4
                                   4258 SEE3:   CALL     DUPP
                                   4259         CALL     CAT
                                   4260         CALL     UDOT    ;display number
                                   4261 SEE4:   CALL     NUFQ    ;user control
                                   4262         CALL     QBRAN
                                   4263         .word    SEE1
                                   4264         JP     DROP
                                   4265 .endif ; WANT_SEE 
                                   4266 
                                   4267 ;       WORDS   ( -- )
                                   4268 ;       Display names in vocabulary.
      00196E 19 48                 4269         .word      LINK
                           001970  4270 LINK = . 
      001970 05                    4271         .byte      5
      001971 57 4F 52 44 53        4272         .ascii     "WORDS"
      001976                       4273 WORDS:
      001976 CD 0E 90         [ 4] 4274         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001979 CD 06 09         [ 4] 4275         CALL     CNTXT   ;only in context
      00197C CD 04 22         [ 4] 4276 WORS1:  CALL     AT
      00197F CD 06 73         [ 4] 4277         CALL     QDUP    ;?at end of list
      001982 CD 03 D7         [ 4] 4278         CALL     QBRAN
      001985 19 98                 4279         .word      WORS2
      001987 CD 04 C9         [ 4] 4280         CALL     DUPP
      00198A CD 0E 48         [ 4] 4281         CALL     SPACE
      00198D CD 19 4C         [ 4] 4282         CALL     DOTID   ;display a name
      001990 CD 09 A2         [ 4] 4283         CALL     CELLM
      001993 CD 03 EE         [ 4] 4284         CALL     BRAN
      001996 19 7C                 4285         .word      WORS1
      001998 81               [ 4] 4286 WORS2:  RET
                                   4287 
                                   4288         
                                   4289 ;; Hardware reset
                                   4290 
                                   4291 ;       hi      ( -- )
                                   4292 ;       Display sign-on message.
      001999 19 70                 4293         .word      LINK
                           00199B  4294 LINK = . 
      00199B 02                    4295         .byte      2
      00199C 68 69                 4296         .ascii     "hi"
      00199E                       4297 HI:
      00199E CD 0E 90         [ 4] 4298         CALL     CR
      0019A1 CD 0E CF         [ 4] 4299         CALL     DOTQP   ;initialize I/O
      0019A4 0F                    4300         .byte      15
      0019A5 73 74 6D 38 65 46 6F  4301         .ascii     "stm8eForth v"
             72 74 68 20 76
      0019B1 33                    4302 	.byte      VER+'0'
      0019B2 2E                    4303         .byte      '.' 
      0019B3 30                    4304 	.byte      EXT+'0' ;version
      0019B4 CD 0E CF         [ 4] 4305         CALL    DOTQP
                           000000  4306 .if NUCLEO          
                                   4307         .byte 18
                                   4308         .ascii  " on NUCLEO-8S208RB"
                           000001  4309 .else ; DISCOVERY 
      0019B7 13                    4310         .byte 19
      0019B8 20 6F 6E 20 53 54 4D  4311         .ascii  " on STM8S-DISCOVERY"
             38 53 2D 44 49 53 43
             4F 56 45 52 59
                                   4312 .endif
      0019CB CC 0E 90         [ 2] 4313         JP     CR
                                   4314 
                           000000  4315 WANT_DEBUG=0
                           000000  4316 .if WANT_DEBUG 
                                   4317 ;       DEBUG      ( -- )
                                   4318 ;       Display sign-on message.
                                   4319 ;        .word      LINK
                                   4320 LINK = . 
                                   4321         .byte      5
                                   4322         .ascii     "DEBUG"
                                   4323 DEBUG:
                                   4324 	CALL DOLIT
                                   4325 	.word 0x65
                                   4326 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4327 	CALL DOLIT
                                   4328 	.word 0
                                   4329  	CALL ZLESS 
                                   4330 	CALL DOLIT
                                   4331 	.word 0xFFFE
                                   4332 	CALL ZLESS 
                                   4333 	CALL UPLUS 
                                   4334  	CALL DROP 
                                   4335 	CALL DOLIT
                                   4336 	.word 3
                                   4337 	CALL UPLUS 
                                   4338 	CALL UPLUS 
                                   4339  	CALL DROP
                                   4340 	CALL DOLIT
                                   4341 	.word 0x43
                                   4342 	CALL UPLUS 
                                   4343  	CALL DROP
                                   4344 	CALL EMIT
                                   4345 	CALL DOLIT
                                   4346 	.word 0x4F
                                   4347 	CALL DOLIT
                                   4348 	.word 0x6F
                                   4349  	CALL XORR
                                   4350 	CALL DOLIT
                                   4351 	.word 0xF0
                                   4352  	CALL ANDD
                                   4353 	CALL DOLIT
                                   4354 	.word 0x4F
                                   4355  	CALL ORR
                                   4356 	CALL EMIT
                                   4357 	CALL DOLIT
                                   4358 	.word 8
                                   4359 	CALL DOLIT
                                   4360 	.word 6
                                   4361  	CALL SWAPP
                                   4362 	CALL OVER
                                   4363 	CALL XORR
                                   4364 	CALL DOLIT
                                   4365 	.word 3
                                   4366 	CALL ANDD 
                                   4367 	CALL ANDD
                                   4368 	CALL DOLIT
                                   4369 	.word 0x70
                                   4370 	CALL UPLUS 
                                   4371 	CALL DROP
                                   4372 	CALL EMIT
                                   4373 	CALL DOLIT
                                   4374 	.word 0
                                   4375 	CALL QBRAN
                                   4376 	.word DEBUG1
                                   4377 	CALL DOLIT
                                   4378 	.word 0x3F
                                   4379 DEBUG1:
                                   4380 	CALL DOLIT
                                   4381 	.word 0xFFFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4382 	CALL QBRAN
                                   4383 	.word DEBUG2
                                   4384 	CALL DOLIT
                                   4385 	.word 0x74
                                   4386 	CALL BRAN
                                   4387 	.word DEBUG3
                                   4388 DEBUG2:
                                   4389 	CALL DOLIT
                                   4390 	.word 0x21
                                   4391 DEBUG3:
                                   4392 	CALL EMIT
                                   4393 	CALL DOLIT
                                   4394 	.word 0x68
                                   4395 	CALL DOLIT
                                   4396 	.word 0x80
                                   4397 	CALL STORE
                                   4398 	CALL DOLIT
                                   4399 	.word 0x80
                                   4400 	CALL AT
                                   4401 	CALL EMIT
                                   4402 	CALL DOLIT
                                   4403 	.word 0x4D
                                   4404 	CALL TOR
                                   4405 	CALL RAT
                                   4406 	CALL RFROM
                                   4407 	CALL ANDD
                                   4408 	CALL EMIT
                                   4409 	CALL DOLIT
                                   4410 	.word 0x61
                                   4411 	CALL DOLIT
                                   4412 	.word 0xA
                                   4413 	CALL TOR
                                   4414 DEBUG4:
                                   4415 	CALL DOLIT
                                   4416 	.word 1
                                   4417 	CALL UPLUS 
                                   4418 	CALL DROP
                                   4419 	CALL DONXT
                                   4420 	.word DEBUG4
                                   4421 	CALL EMIT
                                   4422 	CALL DOLIT
                                   4423 	.word 0x656D
                                   4424 	CALL DOLIT
                                   4425 	.word 0x100
                                   4426 	CALL UMSTA
                                   4427 	CALL SWAPP
                                   4428 	CALL DOLIT
                                   4429 	.word 0x100
                                   4430 	CALL UMSTA
                                   4431 	CALL SWAPP 
                                   4432 	CALL DROP
                                   4433 	CALL EMIT
                                   4434 	CALL EMIT
                                   4435 	CALL DOLIT
                                   4436 	.word 0x2043
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437 	CALL DOLIT
                                   4438 	.word 0
                                   4439 	CALL DOLIT
                                   4440 	.word 0x100
                                   4441 	CALL UMMOD
                                   4442 	CALL EMIT
                                   4443 	CALL EMIT
                                   4444 	;JP ORIG
                                   4445 	RET
                                   4446 .endif ; WANT_DEBUG 
                                   4447 
                                   4448 
                                   4449 ;       'BOOT   ( -- a )
                                   4450 ;       The application startup vector.
      0019CE 19 9B                 4451         .word      LINK
                           0019D0  4452 LINK = . 
      0019D0 05                    4453         .byte      5
      0019D1 27 42 4F 4F 54        4454         .ascii     "'BOOT"
      0019D6                       4455 TBOOT:
      0019D6 CD 05 76         [ 4] 4456         CALL     DOVAR
      0019D9 40 02                 4457         .word    APP_RUN      ;application to boot
                                   4458 
                                   4459 ;       COLD    ( -- )
                                   4460 ;       The hilevel cold start s=ence.
      0019DB 19 D0                 4461         .word      LINK
                           0019DD  4462         LINK = . 
      0019DD 04                    4463         .byte      4
      0019DE 43 4F 4C 44           4464         .ascii     "COLD"
      0019E2                       4465 COLD:
                           000000  4466 .if WANT_DEBUG
                                   4467         CALL DEBUG
                                   4468 .endif ; WANT_DEBUG
      0019E2 CD 03 A4         [ 4] 4469 COLD1:  CALL     DOLIT
      0019E5 00 2B                 4470         .word      UZERO
      0019E7 CD 03 A4         [ 4] 4471 	CALL     DOLIT
      0019EA 00 06                 4472         .word      UPP
      0019EC CD 03 A4         [ 4] 4473         CALL     DOLIT
      0019EF 00 1A                 4474 	.word      UEND-UZERO
      0019F1 CD 0B 65         [ 4] 4475         CALL     CMOVE   ;initialize user area
                                   4476 
                                   4477 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019F4 90 CE 40 02      [ 2] 4478         ldw y,APP_RUN 
      0019F8 26 0B            [ 1] 4479         jrne 0$
      0019FA 1D 00 02         [ 2] 4480         subw x,#CELLL 
      0019FD 90 AE 19 9E      [ 2] 4481         ldw y,#HI  
      001A01 FF               [ 2] 4482         ldw (x),y
      001A02 CD 1A FD         [ 4] 4483         call UPDATRUN 
      001A05                       4484 0$:        
                                   4485 ; update LAST with APP_LAST 
                                   4486 ; if APP_LAST > LAST else do the opposite
      001A05 90 CE 40 00      [ 2] 4487         ldw y,APP_LAST 
      001A09 90 B3 1A         [ 2] 4488         cpw y,ULAST 
      001A0C 22 05            [ 1] 4489         jrugt 1$ 
                                   4490 ; save LAST at APP_LAST  
      001A0E CD 1A E5         [ 4] 4491         call UPDATLAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A11 20 06            [ 2] 4492         jra 2$
      001A13                       4493 1$: ; update LAST with APP_LAST 
      001A13 90 BF 1A         [ 2] 4494         ldw ULAST,y
      001A16 90 BF 14         [ 2] 4495         ldw UCNTXT,y
      001A19                       4496 2$:  
                                   4497 ; update APP_CP if < app_space 
      001A19 90 CE 40 04      [ 2] 4498         ldw y,APP_CP  
      001A1D 90 B3 18         [ 2] 4499         cpw y,UCP   
      001A20 24 06            [ 1] 4500         jruge 3$ 
      001A22 CD 1B 0E         [ 4] 4501         call UPDATCP
      001A25 90 BE 18         [ 2] 4502         ldw y,UCP   
      001A28                       4503 3$:
      001A28 90 BF 18         [ 2] 4504         ldw UCP,y                 
                                   4505 ; update UVP with APP_VP  
                                   4506 ; if APP_VP>UVP else do the opposite 
      001A2B 90 CE 40 06      [ 2] 4507         ldw y,APP_VP 
      001A2F 90 B3 16         [ 2] 4508         cpw y,UVP 
      001A32 22 05            [ 1] 4509         jrugt 4$
      001A34 CD 1B 25         [ 4] 4510         call UPDATVP 
      001A37 20 03            [ 2] 4511         jra 6$
      001A39                       4512 4$: ; update UVP with APP_VP 
      001A39 90 BF 16         [ 2] 4513         ldw UVP,y 
      001A3C                       4514 6$:      
      001A3C CD 13 93         [ 4] 4515         CALL     PRESE   ;initialize data stack and TIB
      001A3F CD 19 D6         [ 4] 4516         CALL     TBOOT
      001A42 CD 0B 4E         [ 4] 4517         CALL     ATEXE   ;application boot
      001A45 CD 16 5C         [ 4] 4518         CALL     OVERT
      001A48 CC 13 B0         [ 2] 4519         JP     QUIT    ;start interpretation
                                   4520 
                                   4521 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4522         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001A4B 19 DD                   30     .word LINK 
                           001A4D    31     LINK=.
      001A4D 03                      32     .byte 3 
      001A4E 46 50 21                33     .ascii "FP!"
      001A51                         34 FPSTOR:
      001A51 90 93            [ 1]   35     ldw y,x
      001A53 90 FE            [ 2]   36     ldw y,(y)
      001A55 90 9F            [ 1]   37     ld a,yl 
      001A57 B7 32            [ 1]   38     ld FPTR,a 
      001A59 1C 00 02         [ 2]   39     addw x,#CELLL 
      001A5C 90 93            [ 1]   40     ldw y,x 
      001A5E 90 FE            [ 2]   41     ldw y,(y)
      001A60 90 BF 33         [ 2]   42     ldw PTR16,y
      001A63 1C 00 02         [ 2]   43     addw x,#CELLL 
      001A66 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001A67 1A 4D                   51     .word LINK 
                           001A69    52 LINK=.
      001A69 06                      53     .byte 6 
      001A6A 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001A70                         55 EEPROM: 
      001A70 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001A74 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001A77 EF 02            [ 2]   58     ldw (2,x),y 
      001A79 90 5F            [ 1]   59     clrw y 
      001A7B FF               [ 2]   60     ldw (x),y 
      001A7C 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001A7D 1A 69                   67 	.word LINK 
                           001A7F    68 	LINK=.
      001A7F 08                      69 	.byte 8 
      001A80 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001A88                         71 EEPLAST:
      001A88 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001A8B 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001A8F EF 02            [ 2]   74 	ldw (2,x),y 
      001A91 90 5F            [ 1]   75 	clrw y 
      001A93 FF               [ 2]   76 	ldw (x),y 
      001A94 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001A95 1A 7F                   83 	.word LINK 
                           001A97    84 	LINK=.
      001A97 07                      85 	.byte 7
      001A98 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001A9F                         87 EEPRUN:
      001A9F 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001AA2 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001AA6 EF 02            [ 2]   90 	ldw (2,x),y 
      001AA8 90 5F            [ 1]   91 	clrw y 
      001AAA FF               [ 2]   92 	ldw (x),y 
      001AAB 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001AAC 1A 97                   99 	.word LINK
                           001AAE   100 	LINK=.
      001AAE 06                     101 	.byte 6 
      001AAF 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001AB5                        103 EEPCP:
      001AB5 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001AB8 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001ABC EF 02            [ 2]  106 	ldw (2,x),y 
      001ABE 90 5F            [ 1]  107 	clrw y 
      001AC0 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001AC1 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001AC2 1A AE                  115 	.word LINK
                           001AC4   116 	LINK=.
      001AC4 06                     117 	.byte 6
      001AC5 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001ACB                        119 EEPVP:
      001ACB 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001ACE 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001AD2 EF 02            [ 2]  122 	ldw (2,x),y 
      001AD4 90 5F            [ 1]  123 	clrw y 
      001AD6 FF               [ 2]  124 	ldw (x),y 
      001AD7 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001AD8 1A C4                  131 	.word LINK 
                           001ADA   132 	LINK=.
      001ADA 0A                     133 	.byte 10
      001ADB 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001AE5                        135 UPDATLAST:
      001AE5 CD 06 35         [ 4]  136 	call LAST
      001AE8 CD 04 22         [ 4]  137 	call AT  
      001AEB CD 1A 88         [ 4]  138 	call EEPLAST
      001AEE CC 1C B8         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001AF1 1A DA                  145 	.word LINK
                           001AF3   146 	LINK=.
      001AF3 09                     147 	.byte 9
      001AF4 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001AFD                        149 UPDATRUN:
      001AFD CD 1A 9F         [ 4]  150 	call EEPRUN
      001B00 CC 1C B8         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B03 1A F3                  157 	.word LINK 
                           001B05   158 	LINK=.
      001B05 08                     159 	.byte 8 
      001B06 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B0E                        161 UPDATCP:
      001B0E CD 06 25         [ 4]  162 	call CPP 
      001B11 CD 04 22         [ 4]  163 	call AT 
      001B14 CD 1A B5         [ 4]  164 	call EEPCP 
      001B17 CC 1C B8         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B1A 1B 05                  171 	.word LINK
                           001B1C   172 	LINK=.
      001B1C 08                     173 	.byte 8 
      001B1D 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B25                        175 UPDATVP:
      001B25 CD 06 17         [ 4]  176 	call VPP 
      001B28 CD 04 22         [ 4]  177 	call AT
      001B2B CD 1A CB         [ 4]  178 	call EEPVP 
      001B2E CC 1C B8         [ 2]  179 	jp EESTORE
                                    180 	
                           000000   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
                                    186     .word LINK 
                                    187 LINK=.
                                    188     .byte 2
                                    189     .ascii "F@"
                                    190 FARAT:
                                    191     call FPSTOR
                                    192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
                                    199     .word LINK
                                    200     LINK=.
                                    201     .byte 3 
                                    202     .ascii "FC@" 
                                    203 FARCAT:
                                    204     call FPSTOR
                                    205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001B31 1B 1C                  213     .word LINK 
                           001B33   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B33 06                     215     .byte 6 
      001B34 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001B3A                        217 UNLKEE:
      001B3A 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001B3E 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001B42 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B46 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B4A 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B4F 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001B50 1B 33                  230     .word LINK 
                           001B52   231 LINK=. 
      001B52 06                     232     .byte 6 
      001B53 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001B59                        234 UNLKFL:
      001B59 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001B5D 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001B61 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001B65 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001B69 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001B6E 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001B6F 1B 52                  247 	.word LINK 
                           001B71   248 	LINK=.
      001B71 06                     249 	.byte 6
      001B72 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001B78                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001B78 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001B7B 3D 32            [ 1]  255 	tnz FPTR 
      001B7D 26 16            [ 1]  256 	jrne 4$
      001B7F 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001B83 24 10            [ 1]  258     jruge 4$
      001B85 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001B89 25 0D            [ 1]  260     jrult 9$
      001B8B 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001B8F 22 07            [ 1]  262 	jrugt 9$
      001B91 CD 1B 3A         [ 4]  263 	call UNLKEE
      001B94 81               [ 4]  264 	ret 
      001B95 CD 1B 59         [ 4]  265 4$: call UNLKFL
      001B98 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001B99 1B 71                  273 	.word LINK 
                           001B9B   274 	LINK=.
      001B9B 04                     275 	.byte 4 
      001B9C 4C 4F 43 4B            276 	.ascii "LOCK" 
      001BA0                        277 LOCK: 
      001BA0 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BA4 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BA8 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001BA9 1B 9B                  286 	.word LINK 
                           001BAB   287 	LINK=. 
      001BAB 08                     288 	.byte 8 
      001BAC 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001BB4                        290 INC_FPTR:
      001BB4 3C 34            [ 1]  291 	inc PTR8 
      001BB6 26 0C            [ 1]  292 	jrne 1$
      001BB8 90 89            [ 2]  293 	pushw y 
      001BBA 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001BBD 90 5C            [ 1]  295 	incw y 
      001BBF 90 BF 32         [ 2]  296 	ldw FPTR,y
      001BC2 90 85            [ 2]  297 	popw y  
      001BC4 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001BC5 1B AB                  304 	.word LINK 
                           001BC7   305 	LINK=.
      001BC7 04                     306 	.byte 4 
      001BC8 50 54 52 2B            307 	.ascii "PTR+"
      001BCC                        308 PTRPLUS:
      001BCC 90 93            [ 1]  309 	ldw y,x 
      001BCE 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001BD1 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001BD5 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001BD8 24 02            [ 1]  313 	jrnc 1$
      001BDA 3C 32            [ 1]  314 	inc FPTR 
      001BDC 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001BDD 1B C7                  322 	.word LINK 
                           001BDF   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BDF 07                     324 	.byte 7 
      001BE0 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001BE7                        326 EE_READ:
      001BE7 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001BEA 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001BEE 90 95            [ 1]  329 	ld yh,a 
      001BF0 CD 1B B4         [ 4]  330 	call INC_FPTR 
      001BF3 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001BF7 CD 1B B4         [ 4]  332 	call INC_FPTR 
      001BFA 90 97            [ 1]  333 	ld yl,a 
      001BFC FF               [ 2]  334 	ldw (x),y 
      001BFD 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001BFE 1B DF                  341 	.word LINK 
                           001C00   342 	LINK=.
      001C00 08                     343 	.byte 8
      001C01 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001C09                        345 EE_CREAD:
      001C09 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001C0C 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001C10 CD 1B B4         [ 4]  348 	call INC_FPTR
      001C13 90 5F            [ 1]  349 	clrw y 
      001C15 90 97            [ 1]  350 	ld yl,a 
      001C17 FF               [ 2]  351 	ldw (x),y 
      001C18 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001C19 1C 00                  361 	.word LINK 
                           001C1B   362 	LINK=. 
      001C1B 07                     363 	.byte 7 
      001C1C 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001C23                        366 WR_BYTE:
      001C23 90 93            [ 1]  367 	ldw y,x 
      001C25 90 FE            [ 2]  368 	ldw y,(y)
      001C27 1C 00 02         [ 2]  369 	addw x,#CELLL 
      001C2A 90 9F            [ 1]  370 	ld a,yl
      001C2C 92 BD 00 32      [ 4]  371 	ldf [FPTR],a
      001C30 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C35 CC 1B B4         [ 2]  373 	jp INC_FPTR 
                                    374 
                                    375 ;---------------------------------------
                                    376 ; write a word at address pointed 
                                    377 ; by FPTR and increment FPTR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    378 ; Expect pointer already initialzed 
                                    379 ; and memory unlocked 
                                    380 ; WR-WORD ( w -- )
                                    381 ;---------------------------------------
      001C38 1C 1B                  382 	.word LINK 
                           001C3A   383 	LINK=.
      001C3A 07                     384 	.byte 7 
      001C3B 57 52 2D 57 4F 52 44   385 	.ascii "WR-WORD" 
      001C42                        386 WR_WORD:
      001C42 90 93            [ 1]  387 	ldw y,x
      001C44 90 FE            [ 2]  388 	ldw y,(y)
      001C46 1C 00 02         [ 2]  389 	addw x,#CELLL 
      001C49 90 9E            [ 1]  390 	ld a,yh 
      001C4B 92 BD 00 32      [ 4]  391 	ldf [FPTR],a
      001C4F 72 05 50 5F FB   [ 2]  392 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C54 CD 1B B4         [ 4]  393 	call INC_FPTR 
      001C57 90 9F            [ 1]  394 	ld a,yl 
      001C59 92 BD 00 32      [ 4]  395 	ldf [FPTR],a
      001C5D 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C62 CC 1B B4         [ 2]  397 	jp INC_FPTR 
                                    398 
                                    399 
                                    400 ;---------------------------------------
                                    401 ; write a byte to FLASH or EEPROM/OPTION  
                                    402 ; EEC!  (c ud -- )
                                    403 ;---------------------------------------
      001C65 1C 3A                  404     .word LINK 
                           001C67   405 	LINK=.
      001C67 04                     406     .byte 4 
      001C68 45 45 43 21            407     .ascii "EEC!"
                                    408 	; local variables 
                           000001   409 	BTW = 1   ; byte to write offset on stack
                           000002   410     OPT = 2 
                           000002   411 	VSIZE = 2
      001C6C                        412 EECSTORE:
      001C6C 52 02            [ 2]  413 	sub sp,#VSIZE
      001C6E CD 1A 51         [ 4]  414     call FPSTOR
      001C71 E6 01            [ 1]  415 	ld a,(1,x)
      001C73 43               [ 1]  416 	cpl a 
      001C74 6B 01            [ 1]  417 	ld (BTW,sp),a ; byte to write 
      001C76 0F 02            [ 1]  418 	clr (OPT,sp)  ; OPTION flag
      001C78 CD 1B 78         [ 4]  419 	call UNLOCK 
                                    420 	; check if option
      001C7B 3D 32            [ 1]  421 	tnz FPTR 
      001C7D 26 19            [ 1]  422 	jrne 2$
      001C7F 90 BE 33         [ 2]  423 	ldw y,PTR16 
      001C82 90 A3 48 00      [ 2]  424 	cpw y,#OPTION_BASE
      001C86 2B 10            [ 1]  425 	jrmi 2$
      001C88 90 A3 48 80      [ 2]  426 	cpw y,#OPTION_END+1
      001C8C 2A 0A            [ 1]  427 	jrpl 2$
      001C8E 03 02            [ 1]  428 	cpl (OPT,sp)
                                    429 	; OPTION WRITE require this UNLOCK 
      001C90 72 1E 50 5B      [ 1]  430     bset FLASH_CR2,#FLASH_CR2_OPT
      001C94 72 1F 50 5C      [ 1]  431     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001C98                        432 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C98 CD 1C 23         [ 4]  433 	call WR_BYTE 	
      001C9B 0D 02            [ 1]  434 	tnz (OPT,sp)
      001C9D 27 0D            [ 1]  435 	jreq 3$ 
      001C9F 7B 01            [ 1]  436     ld a,(BTW,sp)
      001CA1 90 5F            [ 1]  437     clrw y
      001CA3 90 97            [ 1]  438 	ld yl,a 
      001CA5 1D 00 02         [ 2]  439 	subw x,#CELLL 
      001CA8 FF               [ 2]  440 	ldw (x),y 
      001CA9 CD 1C 23         [ 4]  441 	call WR_BYTE
      001CAC                        442 3$: 
      001CAC CD 1B A0         [ 4]  443 	call LOCK 
      001CAF 5B 02            [ 2]  444 	addw sp,#VSIZE 
      001CB1 81               [ 4]  445     ret
                                    446 
                                    447 ;------------------------------
                                    448 ; write integer in FLASH|EEPROM
                                    449 ; EE! ( n ud -- )
                                    450 ;------------------------------
      001CB2 1C 67                  451 	.word LINK 
                           001CB4   452 	LINK=.
      001CB4 03                     453 	.byte 3 
      001CB5 45 45 21               454 	.ascii "EE!"
      001CB8                        455 EESTORE:
      001CB8 CD 1A 51         [ 4]  456 	call FPSTOR 
      001CBB CD 1B 78         [ 4]  457 	call UNLOCK 
      001CBE 90 93            [ 1]  458 	ldw y,x 
      001CC0 90 FE            [ 2]  459 	ldw y,(y)
      001CC2 90 89            [ 2]  460 	pushw y 
      001CC4 90 5E            [ 1]  461 	swapw y 
      001CC6 FF               [ 2]  462 	ldw (x),y 
      001CC7 CD 1C 23         [ 4]  463 	call WR_BYTE 
      001CCA 90 85            [ 2]  464 	popw y 
      001CCC 1D 00 02         [ 2]  465 	subw x,#CELLL
      001CCF FF               [ 2]  466 	ldw (x),y 
      001CD0 CD 1C 23         [ 4]  467 	call WR_BYTE
      001CD3 CC 1B A0         [ 2]  468 	jp LOCK 
                                    469 
                                    470 
                                    471 ;----------------------------
                                    472 ; Erase flash memory row 
                                    473 ; stm8s208 as 128 bytes rows
                                    474 ; ROW-ERASE ( ud -- )
                                    475 ;----------------------------
      001CD6 1C B4                  476 	.word LINK 
                           001CD8   477 	LINK=. 
      001CD8 09                     478 	.byte 9 
      001CD9 52 4F 57 2D 45 52 41   479 	.ascii "ROW-ERASE" 
             53 45
      001CE2                        480 row_erase:
      001CE2 CD 1A 51         [ 4]  481 	call FPSTOR
                                    482 ;code must be execute from RAM 
                                    483 ;copy routine to PAD 
      001CE5 1D 00 02         [ 2]  484 	subw x,#CELLL 
      001CE8 90 AE 1D 2F      [ 2]  485 	ldw y,#row_erase_proc
      001CEC FF               [ 2]  486 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001CED CD 0B 29         [ 4]  487 	call PAD 
      001CF0 90 AE 1D 56      [ 2]  488 	ldw y,#row_erase_proc_end 
      001CF4 72 A2 1D 2F      [ 2]  489 	subw y,#row_erase_proc
      001CF8 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001CFB FF               [ 2]  491 	ldw (x),y 
      001CFC CD 0B 65         [ 4]  492 	call CMOVE 
      001CFF                        493 block_erase:
      001CFF 90 BE 33         [ 2]  494 	ldw y,FPTR+1
      001D02 90 A3 23 00      [ 2]  495 	cpw y,#app_space 
      001D06 2A 13            [ 1]  496 	jrpl erase_flash 
                                    497 ; erase EEPROM block
      001D08 90 A3 40 00      [ 2]  498 	cpw y,#EEPROM_BASE 
      001D0C 24 01            [ 1]  499 	jruge 1$
      001D0E 81               [ 4]  500 	ret ; bad address 
      001D0F 90 A3 43 FF      [ 2]  501 1$: cpw y,#EEPROM_END 
      001D13 23 01            [ 2]  502 	jrule 2$ 
      001D15 81               [ 4]  503 	ret ; bad address 
      001D16                        504 2$:	
      001D16 CD 1B 3A         [ 4]  505 	call UNLKEE 
      001D19 20 03            [ 2]  506 	jra proceed_erase
                                    507 ; erase flash block:
      001D1B                        508 erase_flash:
      001D1B CD 1B 59         [ 4]  509 	call UNLKFL 
      001D1E                        510 proceed_erase:
      001D1E CD 0B 29         [ 4]  511 	call PAD 
      001D21 90 93            [ 1]  512 	ldw y,x
      001D23 90 FE            [ 2]  513 	ldw y,(y)
      001D25 1C 00 02         [ 2]  514 	addw x,#CELLL  
      001D28 90 FD            [ 4]  515 	call (y) 
      001D2A 72 17 50 5F      [ 1]  516 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D2E 81               [ 4]  517 	ret 
                                    518 
                                    519 ; this routine is to be copied to PAD 
      001D2F                        520 row_erase_proc:
      001D2F 35 20 50 5B      [ 1]  521 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D33 35 DF 50 5C      [ 1]  522 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D37 4F               [ 1]  523 	clr a 
      001D38 90 5F            [ 1]  524 	clrw y 
      001D3A 91 A7 00 32      [ 1]  525 	ldf ([FPTR],y),a
      001D3E 90 5C            [ 1]  526     incw y
      001D40 91 A7 00 32      [ 1]  527 	ldf ([FPTR],y),a
      001D44 90 5C            [ 1]  528     incw y
      001D46 91 A7 00 32      [ 1]  529 	ldf ([FPTR],y),a
      001D4A 90 5C            [ 1]  530     incw y
      001D4C 91 A7 00 32      [ 1]  531 	ldf ([FPTR],y),a
      001D50 72 05 50 5F FB   [ 2]  532 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D55 81               [ 4]  533 	ret
      001D56                        534 row_erase_proc_end:
                                    535 
                                    536 
                                    537 ;-----------------------------------
                                    538 ; block programming must be 
                                    539 ; executed from RAM 
                                    540 ; initial contidions: 
                                    541 ; 		memory unlocked
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    542 ;       FPTR initialized 
                                    543 ; input: 
                                    544 ;    x   buffer address 
                                    545 ;-----------------------------------
                           000001   546 	BCNT=1 
      001D56                        547 copy_buffer:
      001D56 4B 80            [ 1]  548 	push #BLOCK_SIZE  
                                    549 ;enable block programming 
      001D58 72 10 50 5B      [ 1]  550 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D5C 72 11 50 5C      [ 1]  551 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D60 90 5F            [ 1]  552 	clrw y
      001D62 F6               [ 1]  553 1$:	ld a,(x)
      001D63 91 A7 00 32      [ 1]  554 	ldf ([FPTR],y),a
      001D67 5C               [ 1]  555 	incw x 
      001D68 90 5C            [ 1]  556 	incw y 
      001D6A 0A 01            [ 1]  557 	dec (BCNT,sp)
      001D6C 26 F4            [ 1]  558 	jrne 1$
                                    559 ; wait EOP bit 
      001D6E 72 05 50 5F FB   [ 2]  560 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D73 84               [ 1]  561 	pop a ; remove BCNT from stack 
      001D74 81               [ 4]  562 	ret 
      001D75                        563 copy_buffer_end:
                                    564 
                                    565 ;-------------------------
                                    566 ; move program_row to RAM 
                                    567 ; in TIB 
                                    568 ;------------------------
      001D75                        569 copy_prog_to_ram:
      001D75 1D 00 06         [ 2]  570 	subw x,#6
      001D78 90 AE 1D 56      [ 2]  571 	ldw y,#copy_buffer 
      001D7C EF 04            [ 2]  572 	ldw (4,x),y 
      001D7E 90 AE 07 00      [ 2]  573 	ldw y,#TIBBASE
      001D82 EF 02            [ 2]  574 	ldw (2,x),y 
      001D84 90 AE 1D 75      [ 2]  575 	ldw y,#copy_buffer_end 
      001D88 72 A2 1D 56      [ 2]  576 	subw y,#copy_buffer  
      001D8C FF               [ 2]  577 	ldw (x),y 
      001D8D CD 0B 65         [ 4]  578 	call CMOVE 
      001D90 81               [ 4]  579 	ret 
                                    580 
                                    581 
                                    582 ;-----------------------------
                                    583 ; write a row in FLASH/EEPROM 
                                    584 ; WR-ROW ( a ud -- )
                                    585 ; a -> address 128 byte buffer to write 
                                    586 ; ud ->  row address in FLASH|EEPROM 
                                    587 ;-----------------------------
      001D91 1C D8                  588 	.word LINK 
                           001D93   589 	LINK=.
      001D93 06                     590 	.byte 6 
      001D94 57 52 2D 52 4F 57      591 	.ascii "WR-ROW"
      001D9A                        592 write_row:
      001D9A CD 1A 51         [ 4]  593 	call FPSTOR
                                    594 ; align to FLASH block 
      001D9D A6 80            [ 1]  595 	ld a,#0x80 
      001D9F B4 34            [ 1]  596 	and a,PTR8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001DA1 B7 34            [ 1]  597 	ld PTR8,a  
      001DA3 CD 1D 75         [ 4]  598 	call copy_prog_to_ram
      001DA6 CD 1B 78         [ 4]  599 	call UNLOCK
      001DA9 90 93            [ 1]  600 	ldw y,x 
      001DAB 90 FE            [ 2]  601 	ldw y,(y)
      001DAD 1C 00 02         [ 2]  602 	addw x,#CELLL 
      001DB0 89               [ 2]  603 	pushw x 
      001DB1 93               [ 1]  604 	ldw x,y ; buffer address in x 
      001DB2 CD 07 00         [ 4]  605 	call TIBBASE
      001DB5 CD 1B A0         [ 4]  606 	call LOCK
      001DB8 85               [ 2]  607 	popw x 
      001DB9 81               [ 4]  608 	ret 
                                    609 
                                    610 ;-------------------------------------
                                    611 ; change value of OPTION register 
                                    612 ; SET-OPT (c n -- ) 
                                    613 ; c new value.
                                    614 ; n OPT  number {1..7}
                                    615 ;--------------------------------------
      001DBA 1D 93                  616 		.word LINK 
                           001DBC   617 		LINK=.
      001DBC 07                     618 		.byte 7 
      001DBD 53 45 54 2D 4F 50 54   619 		.ascii "SET-OPT" 
      001DC4                        620 set_option: 
      001DC4 90 93            [ 1]  621 		ldw y,x 
      001DC6 90 FE            [ 2]  622 		ldw y,(y)
      001DC8 27 06            [ 1]  623 		jreq 1$
      001DCA 90 A3 00 07      [ 2]  624 		cpw y,#7 
      001DCE 23 04            [ 2]  625 		jrule 2$ 
                                    626 ; invalid OPTION number 		
      001DD0 1C 00 04         [ 2]  627 1$:		addw x,#2*CELLL
      001DD3 81               [ 4]  628 		ret
      001DD4 90 58            [ 2]  629 2$:		sllw y 
      001DD6 72 A9 47 FF      [ 2]  630 		addw y,#OPTION_BASE-1
      001DDA FF               [ 2]  631 		ldw (x),y 
      001DDB 1D 00 02         [ 2]  632 		subw x,#CELLL 
      001DDE 90 5F            [ 1]  633 		clrw y 
      001DE0 FF               [ 2]  634 		ldw (x),y 
      001DE1 CD 1C 6C         [ 4]  635 		call EECSTORE
      001DE4 81               [ 4]  636 		ret 
                                    637 
                                    638 
                                    639 
                                    640 ;--------------------------------------
                                    641 ; reset system to its original state 
                                    642 ; before any user modification
                                    643 ; PRISTINE ( -- )
                                    644 ;-------------------------------------
      001DE5 1D BC                  645 	.word LINK  
                           001DE7   646 	LINK=.
      001DE7 08                     647 	.byte 8 
      001DE8 50 52 49 53 54 49 4E   648 	.ascii "PRISTINE"
             45
      001DF0                        649 pristine:
                                    650 ;;; erase EEPROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001DF0 CD 1A 70         [ 4]  651 	call EEPROM 
      001DF3 CD 06 AF         [ 4]  652 1$:	call DDUP 
      001DF6 CD 1C E2         [ 4]  653 	call row_erase
      001DF9 90 93            [ 1]  654 	ldw y,x 
      001DFB 90 EE 02         [ 2]  655 	ldw y,(2,y)
      001DFE 72 A9 00 80      [ 2]  656 	addw y,#BLOCK_SIZE
      001E02 EF 02            [ 2]  657 	ldw (2,x),y
      001E04 90 A3 48 00      [ 2]  658 	cpw y,#OPTION_BASE 
      001E08 25 E9            [ 1]  659 	jrult 1$
                                    660 ;;; reset OPTION to default values
      001E0A 90 AE 00 01      [ 2]  661 	ldw y,#1 ; OPT1 
      001E0E FF               [ 2]  662 2$:	ldw (x),y   
      001E0F 90 5F            [ 1]  663 	clrw y 
      001E11 EF 02            [ 2]  664 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E13 CD 06 AF         [ 4]  665 	call DDUP    ; ( 0 1 0 1 -- )  
      001E16 CD 1D C4         [ 4]  666 	call set_option
      001E19 90 93            [ 1]  667 	ldw y,x 
      001E1B 90 FE            [ 2]  668 	ldw y,(y)
      001E1D 90 5C            [ 1]  669 	incw y  ; next OPTION 
      001E1F 90 A3 00 08      [ 2]  670 	cpw y,#8 
      001E23 25 E9            [ 1]  671 	jrult 2$
                                    672 ;;; erase first row of app_space 	
      001E25 90 AE 23 00      [ 2]  673 	ldw y,#app_space
      001E29 EF 02            [ 2]  674 	ldw (2,x),y  
      001E2B 90 5F            [ 1]  675 	clrw y 
      001E2D FF               [ 2]  676 	ldw (x),y ; ( app_space 0 -- )
      001E2E CD 1C E2         [ 4]  677 	call row_erase 
                                    678 ; reset interrupt vectors 
      001E31 1D 00 02         [ 2]  679 	subw x,#CELLL 
      001E34 90 5F            [ 1]  680 	clrw y  
      001E36 FF               [ 2]  681 4$:	ldw (x),y  ; ( n -- ) int# 
      001E37 CD 04 C9         [ 4]  682 	call DUPP  
      001E3A CD 1E 57         [ 4]  683 	call reset_vector
      001E3D 90 93            [ 1]  684 	ldw y,x 
      001E3F 90 FE            [ 2]  685 	ldw y,(y)
      001E41 90 5C            [ 1]  686 	incw y   ; next vector 
      001E43 90 A3 00 19      [ 2]  687 	cpw y,#25 
      001E47 25 ED            [ 1]  688 	jrult 4$
      001E49 CC 00 00         [ 2]  689 	jp NonHandledInterrupt ; reset MCU
                                    690 
                                    691 ;------------------------------
                                    692 ; reset an interrupt vector 
                                    693 ; to its initial value 
                                    694 ; i.e. NonHandledInterrupt
                                    695 ; RST-IVEC ( n -- )
                                    696 ;-----------------------------
      001E4C 1D E7                  697 	.word LINK 
                           001E4E   698 	LINK=. 
      001E4E 08                     699 	.byte 8 
      001E4F 52 53 54 2D 49 56 45   700 	.ascii "RST-IVEC"
             43
      001E57                        701 reset_vector:
      001E57 90 93            [ 1]  702 	ldw y,x
      001E59 1C 00 02         [ 2]  703 	addw x,#CELLL 
      001E5C 90 FE            [ 2]  704 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E5E 90 A3 00 17      [ 2]  705 	cpw y,#23 
      001E62 27 3A            [ 1]  706 	jreq 9$
      001E64 90 A3 00 1D      [ 2]  707 	cpw y,#29 ; last vector
      001E68 22 34            [ 1]  708 	jrugt 9$  
      001E6A 90 58            [ 2]  709 	sllw y 
      001E6C 90 58            [ 2]  710 	sllw y 
      001E6E 72 A9 80 08      [ 2]  711 	addw y,#0x8008 ; irq0 address 
      001E72 90 BF 24         [ 2]  712 	ldw YTEMP,y
      001E75 1D 00 06         [ 2]  713 	subw x,#3*CELLL 
      001E78 EF 02            [ 2]  714 	ldw (2,x),y 
      001E7A 90 5F            [ 1]  715 	clrw y
      001E7C FF               [ 2]  716 	ldw (x),y 
      001E7D A6 82            [ 1]  717 	ld a,#0x82 
      001E7F 90 95            [ 1]  718 	ld yh,a
      001E81 EF 04            [ 2]  719 	ldw (4,x),y
      001E83 CD 1C B8         [ 4]  720 	call EESTORE
      001E86 1D 00 06         [ 2]  721 	subw x,#3*CELLL
      001E89 90 5F            [ 1]  722 	clrw y 
      001E8B FF               [ 2]  723 	ldw (x),y 
      001E8C 90 AE 00 00      [ 2]  724 	ldw y,#NonHandledInterrupt
      001E90 EF 04            [ 2]  725 	ldw (4,x),y 
      001E92 90 BE 24         [ 2]  726 	ldw y,YTEMP  
      001E95 72 A9 00 02      [ 2]  727 	addw y,#2
      001E99 EF 02            [ 2]  728 	ldw (2,x),y 
      001E9B CD 1C B8         [ 4]  729 	call EESTORE
      001E9E 81               [ 4]  730 9$:	ret 
                                    731 
                                    732 
                                    733 ;------------------------------
                                    734 ; all interrupt vector with 
                                    735 ; an address >= a are resetted 
                                    736 ; to default
                                    737 ; CHKIVEC ( a -- )
                                    738 ;------------------------------
      001E9F 1E 4E                  739 	.word LINK 
                           001EA1   740 	LINK=.
      001EA1 07                     741 	.byte 7
      001EA2 43 48 4B 49 56 45 43   742 	.ascii "CHKIVEC"
                                    743 ;local variables 
                           000001   744 	SSP=1
                           000003   745 	CADR=3
                           000005   746 	OFS=5
                           000006   747 	VSIZE=6  
      001EA9                        748 CHKIVEC:
      001EA9 52 06            [ 2]  749 	sub sp,#VSIZE ;alloc local variables 
      001EAB 90 93            [ 1]  750 	ldw y,x 
      001EAD 90 FE            [ 2]  751 	ldw y,(y)
      001EAF 17 03            [ 2]  752 	ldw (CADR,sp),y ; ca 
      001EB1 1F 01            [ 2]  753 	ldw (SSP,sp),x 
      001EB3 AE 80 0A         [ 2]  754 	ldw x,#0x800a ; irq0 address 
      001EB6 BF 33            [ 2]  755 	ldw PTR16,X
      001EB8 AE FF FC         [ 2]  756 	ldw x,#-4 
      001EBB 1C 00 04         [ 2]  757 1$:	addw x,#4
      001EBE A3 00 78         [ 2]  758 	cpw x,#30*4 ; irq0-29 
      001EC1 27 22            [ 1]  759 	jreq 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001EC3 90 93            [ 1]  760 	ldw y,x  
      001EC5 91 D6 33         [ 4]  761 	ld a,([PTR16],y)
      001EC8 11 03            [ 1]  762 	cp a,(CADR,sp)
      001ECA 25 EF            [ 1]  763 	jrult 1$
      001ECC 90 5C            [ 1]  764 	incw y 
      001ECE 91 D6 33         [ 4]  765 	ld a,([PTR16],y)
      001ED1 11 04            [ 1]  766 	cp a,(CADR+1,sp) 
      001ED3 25 E6            [ 1]  767 	jrult 1$ 
      001ED5 1F 05            [ 2]  768 	ldw (OFS,sp),x 
      001ED7 54               [ 2]  769 	srlw x
      001ED8 54               [ 2]  770 	srlw x 
      001ED9 90 93            [ 1]  771 	ldw y,x 
      001EDB 1E 01            [ 2]  772 	ldw x,(SSP,sp)
      001EDD FF               [ 2]  773 	ldw (x),y
      001EDE CD 1E 57         [ 4]  774 	call reset_vector
      001EE1 1E 05            [ 2]  775 	ldw x,(OFS,sp) 
      001EE3 20 D6            [ 2]  776 	jra 1$
      001EE5 1E 01            [ 2]  777 9$:	ldw x,(SSP,sp) 
      001EE7 1C 00 02         [ 2]  778 	addw x,#CELLL 
      001EEA 5B 06            [ 2]  779 	addw sp,#VSIZE ; drop local variables  
      001EEC 81               [ 4]  780 	ret 
                                    781 
                                    782 ;------------------------------
                                    783 ; set interrupt vector 
                                    784 ; SET-IVEC ( ud n -- )
                                    785 ;  ud Handler address
                                    786 ;  n  vector # 0 .. 29 
                                    787 ;-----------------------------
      001EED 1E A1                  788 	.word LINK
                           001EEF   789 	LINK=.
      001EEF 08                     790 	.byte 8 
      001EF0 53 45 54 2D 49 56 45   791 	.ascii "SET-IVEC" 
             43
      001EF8                        792 set_vector:
      001EF8 90 93            [ 1]  793     ldw y,x 
      001EFA 1C 00 02         [ 2]  794 	addw x,#CELLL 
      001EFD 90 FE            [ 2]  795 	ldw y,(y) ; vector #
      001EFF 90 A3 00 1D      [ 2]  796 	cpw y,#29 ; last vector
      001F03 23 04            [ 2]  797 	jrule 2$
      001F05 1C 00 04         [ 2]  798 	addw x,#2*CELLL 
      001F08 81               [ 4]  799 	ret
      001F09 90 58            [ 2]  800 2$:	sllw y 
      001F0B 90 58            [ 2]  801 	sllw y 
      001F0D 72 A9 80 08      [ 2]  802 	addw y,#0X8008 ; IRQ0 vector address 
      001F11 90 BF 24         [ 2]  803 	ldw YTEMP,y ; vector address 
      001F14 A6 82            [ 1]  804 	ld a,#0x82 
      001F16 90 95            [ 1]  805 	ld yh,a 
      001F18 E6 01            [ 1]  806 	ld a,(1,x) ; isr address bits 23..16 
      001F1A 90 97            [ 1]  807 	ld yl,a 
                                    808 ;  write 0x82 + most significant byte of int address	
      001F1C 1D 00 06         [ 2]  809 	subw x,#3*CELLL 
      001F1F EF 04            [ 2]  810 	ldw (4,x),y 
      001F21 90 BE 24         [ 2]  811 	ldw y,YTEMP
      001F24 EF 02            [ 2]  812 	ldw (2,x),y ; vector address 
      001F26 90 5F            [ 1]  813 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001F28 FF               [ 2]  814 	ldw (x),y   ; as a double 
      001F29 CD 1C B8         [ 4]  815 	call EESTORE 
      001F2C 90 93            [ 1]  816 	ldw y,x 
      001F2E 90 EE 02         [ 2]  817 	ldw y,(2,y) ; bits 15..0 int vector 
      001F31 1D 00 06         [ 2]  818 	subw x,#3*CELLL 
      001F34 EF 04            [ 2]  819 	ldw (4,x),y 
      001F36 90 BE 24         [ 2]  820 	ldw y,YTEMP 
      001F39 72 A9 00 02      [ 2]  821 	addw y,#2 
      001F3D EF 02            [ 2]  822 	ldw (2,x),y 
      001F3F 90 5F            [ 1]  823 	clrw y 
      001F41 FF               [ 2]  824 	ldw (x),y 
      001F42 CD 1C B8         [ 4]  825 	call EESTORE
      001F45 1C 00 04         [ 2]  826 	addw x,#2*CELLL  
      001F48 81               [ 4]  827 9$: ret 
                                    828 
                                    829 
                                    830 ;------------------------
                                    831 ; Compile word to flash
                                    832 ; EE, (w -- )
                                    833 ;-----------------------
      001F49 1E EF                  834 	.word LINK
                           001F4B   835 	LINK=.
      001F4B 03                     836 	.byte 3
      001F4C 45 45 2C               837 	.ascii "EE,"
      001F4F                        838 EE_COMMA:
      001F4F 1D 00 04         [ 2]  839 	subw x,#2*CELLL 
      001F52 90 BE 18         [ 2]  840 	ldw y,UCP
      001F55 90 89            [ 2]  841 	pushw y 
      001F57 EF 02            [ 2]  842 	ldw (2,x),y 
      001F59 90 5F            [ 1]  843 	clrw y 
      001F5B FF               [ 2]  844 	ldw (x),y
      001F5C CD 1C B8         [ 4]  845 	call EESTORE
      001F5F 90 85            [ 2]  846 	popw y 
      001F61 72 A9 00 02      [ 2]  847 	addw y,#2
      001F65 90 BF 18         [ 2]  848 	ldw UCP,y
      001F68 81               [ 4]  849 	ret 
                                    850 
                                    851 
                                    852 ;-------------------------
                                    853 ; Compile byte to flash 
                                    854 ; EEC, ( c -- )	
                                    855 ;-------------------------
      001F69 1F 4B                  856 	.word LINK 
                           001F6B   857 	LINK=.
      001F6B 04                     858 	.byte 4 
      001F6C 45 45 43 2C            859 	.ascii "EEC,"
      001F70                        860 EE_CCOMMA:
      001F70 1D 00 04         [ 2]  861 	subw x,#2*CELLL 
      001F73 90 BE 18         [ 2]  862 	ldw y,UCP
      001F76 90 89            [ 2]  863 	pushw y 
      001F78 EF 02            [ 2]  864 	ldw (2,x),y 
      001F7A 90 5F            [ 1]  865 	clrw y 
      001F7C FF               [ 2]  866 	ldw (x),y
      001F7D CD 1C 6C         [ 4]  867 	call EECSTORE
      001F80 90 85            [ 2]  868 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F82 90 5C            [ 1]  869 	incw y 
      001F84 90 BF 18         [ 2]  870 	ldw UCP,y
      001F87 81               [ 4]  871 	ret 
                                    872 
                                    873 
                                    874 ;--------------------------
                                    875 ; copy FLASH block to ROWBUF
                                    876 ; ROW>BUF ( ud -- )
                                    877 ;--------------------------
      001F88 1F 6B                  878 	.word LINK 
                           001F8A   879 	LINK=.
      001F8A 07                     880 	.byte 7 
      001F8B 52 4F 57 3E 42 55 46   881 	.ascii "ROW>BUF"
      001F92                        882 ROW2BUF: 
      001F92 CD 1A 51         [ 4]  883 	call FPSTOR 
      001F95 A6 80            [ 1]  884 	ld a,#BLOCK_SIZE
      001F97 88               [ 1]  885 	push a 
      001F98 B4 34            [ 1]  886 	and a,PTR8 ; block align 
      001F9A B7 34            [ 1]  887 	ld PTR8,a
      001F9C 90 AE 06 80      [ 2]  888 	ldw y,#ROWBUFF 
      001FA0 92 BC 00 32      [ 5]  889 1$: ldf a,[FPTR]
      001FA4 90 F7            [ 1]  890 	ld (y),a
      001FA6 CD 1B B4         [ 4]  891 	call INC_FPTR
      001FA9 90 5C            [ 1]  892 	incw y 
      001FAB 0A 01            [ 1]  893 	dec (1,sp)
      001FAD 26 F1            [ 1]  894 	jrne 1$ 
      001FAF 84               [ 1]  895 	pop a 
      001FB0 81               [ 4]  896 	ret 
                                    897 
                                    898 
                                    899 ;---------------------------
                                    900 ; copy ROWBUFF to flash 
                                    901 ; BUF>ROW ( ud -- )
                                    902 ; ud is row address as double 
                                    903 ;---------------------------
      001FB1 1F 8A                  904 	.word LINK 
                           001FB3   905 	LINK=.
      001FB3 07                     906 	.byte 7 
      001FB4 42 55 46 3E 52 4F 57   907 	.ascii "BUF>ROW" 
      001FBB                        908 BUF2ROW:
      001FBB CD 05 C4         [ 4]  909 	call TBUF ; ( ud rb -- )
      001FBE CD 06 84         [ 4]  910 	call ROT 
      001FC1 CD 06 84         [ 4]  911 	call ROT  ; ( rb ud -- )
      001FC4 CD 1D 9A         [ 4]  912 	call write_row 
      001FC7 81               [ 4]  913 	ret 
                                    914 
                                    915 ;---------------------------------
                                    916 ; how many byte free in that row 
                                    917 ; RFREE ( a -- n )
                                    918 ; a is least byte of target address
                                    919 ;----------------------------------
      001FC8 1F B3                  920 	.word LINK 
                           001FCA   921 	LINK=.
      001FCA 05                     922 	.byte 5 
      001FCB 52 46 52 45 45         923 	.ascii "RFREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FD0                        924 RFREE:
      001FD0 E6 01            [ 1]  925 	ld a,(1,x)
      001FD2 A4 7F            [ 1]  926 	and a,#BLOCK_SIZE-1 
      001FD4 B7 24            [ 1]  927 	ld YTEMP,a 
      001FD6 A6 80            [ 1]  928 	ld a,#BLOCK_SIZE 
      001FD8 B0 24            [ 1]  929 	sub a,YTEMP 
      001FDA 90 5F            [ 1]  930 	clrw y 
      001FDC 90 97            [ 1]  931 	ld yl,a
      001FDE FF               [ 2]  932 	ldw (x),y 
      001FDF 81               [ 4]  933 	ret 
                                    934 
                                    935 ;---------------------------------
                                    936 ; write u bytes to flash/EEPROM 
                                    937 ; constraint to row limit 
                                    938 ; RAM>EE ( ud a u -- u2 )
                                    939 ; ud flash address 
                                    940 ; a ram address 
                                    941 ; u bytes count
                                    942 ; return u2 bytes written  
                                    943 ;-------------------------------
      001FE0 1F CA                  944 	.word LINK 
                           001FE2   945 	LINK=. 
      001FE2 06                     946 	.byte 6
      001FE3 52 41 4D 3E 45 45      947 	.ascii "RAM>EE"
                                    948 	
      001FE9                        949 RAM2EE:
                                    950 ; copy ud on top 
      001FE9 90 93            [ 1]  951 	ldw y,x 
      001FEB 90 EE 06         [ 2]  952 	ldw y,(6,y) ; LSW of ud  
      001FEE 90 BF 24         [ 2]  953 	ldw YTEMP,y 
      001FF1 90 93            [ 1]  954 	ldw y,x 
      001FF3 90 EE 04         [ 2]  955 	ldw y,(4,y)  ; MSW of ud 
      001FF6 1D 00 04         [ 2]  956 	subw x,#2*CELLL 
      001FF9 FF               [ 2]  957 	ldw (x),y 
      001FFA 90 BE 24         [ 2]  958 	ldw y,YTEMP 
      001FFD EF 02            [ 2]  959 	ldw (2,x),y 
      001FFF CD 1F 92         [ 4]  960 	call ROW2BUF 
      002002 90 93            [ 1]  961 	ldw y,x 
      002004 90 EE 06         [ 2]  962 	ldw y,(6,y)
      002007 90 89            [ 2]  963 	pushw y ; udl 
      002009 90 9F            [ 1]  964 	ld a,yl
      00200B A4 7F            [ 1]  965 	and a,#BLOCK_SIZE-1 
      00200D 90 5F            [ 1]  966 	clrw y 
      00200F 90 97            [ 1]  967 	ld yl,a 
      002011 72 A9 06 80      [ 2]  968 	addw y,#ROWBUFF 
      002015 1D 00 02         [ 2]  969 	subw x,#CELLL 
      002018 FF               [ 2]  970 	ldw (x),y  
      002019 CD 04 D9         [ 4]  971 	call SWAPP ;  ( ud a ra u -- )
      00201C CD 04 73         [ 4]  972 	call RFROM  
      00201F CD 1F D0         [ 4]  973 	call RFREE 
      002022 CD 07 DF         [ 4]  974 	call MIN
      002025 CD 04 C9         [ 4]  975 	call DUPP 
      002028 CD 04 92         [ 4]  976 	call TOR  
      00202B CD 0B 65         [ 4]  977 	call CMOVE
      00202E CD 1F BB         [ 4]  978 	call BUF2ROW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      002031 CD 04 73         [ 4]  979 	call RFROM 
      002034 81               [ 4]  980 	ret 
                                    981 
                                    982 
                                    983 ;--------------------------
                                    984 ; expand 16 bit address 
                                    985 ; to 32 bit address 
                                    986 ; FADDR ( a -- ud )
                                    987 ;--------------------------
      002035 1F E2                  988 	.word LINK 
                           002037   989 	LINK=. 
      002037 05                     990 	.byte 5 
      002038 46 41 44 44 52         991 	.ascii "FADDR"
      00203D                        992 FADDR:
      00203D CC 0A 2A         [ 2]  993 	jp ZERO 
                                    994 
                                    995 
                                    996 ;--------------------------
                                    997 ; move new colon definition to FLASH 
                                    998 ; using WR-ROW for efficiency 
                                    999 ; preserving bytes already used 
                                   1000 ; in the current block. 
                                   1001 ; At this point the compiler as completed
                                   1002 ; in RAM and pointers CP and CNTXT updated.
                                   1003 ; CNTXT point to nfa of new word and  
                                   1004 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1005 ; 
                                   1006 ; FMOVE ( -- cp+ )
                                   1007 ; 
                                   1008 ;--------------------------
      002040 20 37                 1009 	.word LINK 
                           002042  1010 	LINK=.
      002042 05                    1011 	.byte 5 
      002043 46 4D 4F 56 45        1012 	.ascii "FMOVE" 
      002048                       1013 FMOVE:
      002048 CD 05 D6         [ 4] 1014 	call TFLASH 
      00204B CD 04 22         [ 4] 1015 	CALL AT 
      00204E CD 03 D7         [ 4] 1016 	CALL QBRAN 
      002051 20 CC                 1017 	.word no_move  
      002053 CD 06 25         [ 4] 1018 	call CPP
      002056 CD 04 22         [ 4] 1019 	call AT  
      002059 CD 04 C9         [ 4] 1020 	call DUPP ; ( udl udl -- )
      00205C CD 06 09         [ 4] 1021 	call CNTXT 
      00205F CD 04 22         [ 4] 1022 	call AT 
      002062 CD 03 A4         [ 4] 1023 	call DOLIT 
      002065 00 02                 1024 	.word 2 
      002067 CD 07 3D         [ 4] 1025 	call SUBB ; ( udl udl a -- )
      00206A CD 04 D9         [ 4] 1026 	call SWAPP 
      00206D CD 20 3D         [ 4] 1027 	call FADDR 
      002070 CD 06 84         [ 4] 1028 	call ROT  ; ( udl ud a -- )
      002073 CD 04 C9         [ 4] 1029 	call DUPP 
      002076 CD 04 92         [ 4] 1030 	call TOR    ; R: a 
      002079                       1031 FMOVE2: 
      002079 CD 0B 18         [ 4] 1032 	call HERE 
      00207C CD 04 86         [ 4] 1033 	call RAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      00207F CD 07 3D         [ 4] 1034 	call SUBB ; (udl ud a wl -- )
      002082                       1035 next_row:
      002082 CD 04 C9         [ 4] 1036 	call DUPP 
      002085 CD 04 92         [ 4] 1037 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002088 CD 1F E9         [ 4] 1038 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00208B CD 04 C9         [ 4] 1039 	call DUPP 
      00208E CD 04 92         [ 4] 1040 	call TOR
      002091 CD 06 C4         [ 4] 1041 	call PLUS  ; ( udl+ ) 
      002094 CD 04 C9         [ 4] 1042 	call DUPP 
      002097 CD 0A 2A         [ 4] 1043 	call ZERO   ; ( udl+ ud -- )
      00209A CD 04 73         [ 4] 1044 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00209D CD 04 73         [ 4] 1045 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020A0 CD 04 F3         [ 4] 1046 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020A3 CD 07 3D         [ 4] 1047 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020A6 CD 04 C9         [ 4] 1048 	call DUPP 
      0020A9 CD 03 D7         [ 4] 1049 	call QBRAN
      0020AC 20 C5                 1050 	.word fmove_done 
      0020AE CD 04 D9         [ 4] 1051 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020B1 CD 04 73         [ 4] 1052 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020B4 CD 06 C4         [ 4] 1053 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020B7 CD 04 C9         [ 4] 1054 	call DUPP 
      0020BA CD 04 92         [ 4] 1055 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020BD CD 04 D9         [ 4] 1056 	call SWAPP 
      0020C0 CD 03 EE         [ 4] 1057 	call BRAN
      0020C3 20 82                 1058 	.word next_row  
      0020C5                       1059 fmove_done:	
      0020C5 CD 04 73         [ 4] 1060 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020C8 1C 00 0A         [ 2] 1061 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020CB 81               [ 4] 1062  	ret  
      0020CC                       1063 no_move:
      0020CC CD 0A 2A         [ 4] 1064 	call ZERO
      0020CF 81               [ 4] 1065 	ret 
                                   1066 
                                   1067 ;------------------------------------------
                                   1068 ; adjust pointers after **FMOVE** operetion.
                                   1069 ; UPDAT-PTR ( cp+ -- )
                                   1070 ; cp+ is new CP position after FMOVE 
                                   1071 ;-------------------------------------------
      0020D0 20 42                 1072 	.word LINK 
                           0020D2  1073 	LINK=.
      0020D2 09                    1074 	.byte 9
      0020D3 55 50 44 41 54 2D 50  1075 	.ascii "UPDAT-PTR" 
             54 52
      0020DC                       1076 UPDATPTR:
                                   1077 ;reset VP to previous position  
      0020DC CD 1A CB         [ 4] 1078 	call EEPVP 
      0020DF CD 04 BF         [ 4] 1079 	call DROP 
      0020E2 CD 04 22         [ 4] 1080 	call AT
      0020E5 CD 06 17         [ 4] 1081 	call VPP 
      0020E8 CD 04 0B         [ 4] 1082 	call STORE
                                   1083 ;update CONTEXT and LAST 
      0020EB CD 1A B5         [ 4] 1084 	call EEPCP 
      0020EE CD 04 BF         [ 4] 1085 	call DROP
      0020F1 CD 04 22         [ 4] 1086 	call AT
      0020F4 CD 03 A4         [ 4] 1087 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020F7 00 02                 1088 	.word 2 
      0020F9 CD 06 C4         [ 4] 1089 	call PLUS 
      0020FC CD 04 C9         [ 4] 1090 	call DUPP 
      0020FF CD 06 09         [ 4] 1091 	call CNTXT 
      002102 CD 04 0B         [ 4] 1092 	call STORE
      002105 CD 06 35         [ 4] 1093 	call LAST
      002108 CD 04 0B         [ 4] 1094 	call STORE 
      00210B CD 1A E5         [ 4] 1095 	call UPDATLAST 
                                   1096 ;update CP 
      00210E CD 06 25         [ 4] 1097 	call CPP 
      002111 CD 04 0B         [ 4] 1098 	call STORE
      002114 CD 1B 0E         [ 4] 1099 	call UPDATCP 
      002117 81               [ 4] 1100 	ret 
                                   1101 
                                   1102 ;-----------------------------
                                   1103 ; move interrupt sub-routine
                                   1104 ; in flash memory
                                   1105 ;----------------------------- 
      002118 20 D2                 1106 	.word LINK 
                           00211A  1107 	LINK=. 
      00211A 06                    1108 	.byte 6
      00211B 49 46 4D 4F 56 45     1109 	.ascii "IFMOVE" 
      002121                       1110 IFMOVE:
      002121 CD 05 D6         [ 4] 1111 	call TFLASH 
      002124 CD 04 22         [ 4] 1112 	CALL AT 
      002127 CD 03 D7         [ 4] 1113 	CALL QBRAN 
      00212A 20 CC                 1114 	.word no_move 
      00212C CD 06 25         [ 4] 1115 	call CPP 
      00212F CD 04 22         [ 4] 1116 	call AT 
      002132 CD 04 C9         [ 4] 1117 	call DUPP ; ( udl udl -- )
      002135 CD 1A CB         [ 4] 1118 	call EEPVP 
      002138 CD 04 BF         [ 4] 1119 	call DROP
      00213B CD 04 22         [ 4] 1120 	call AT  ; ( udl udl a )
      00213E CD 04 92         [ 4] 1121 	call TOR 
      002141 CD 20 3D         [ 4] 1122 	call FADDR
      002144 CD 04 86         [ 4] 1123 	call RAT ; ( udl ud a -- ) R: a 
      002147 CC 20 79         [ 2] 1124 	jp FMOVE2 
                                   1125 
                                   1126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           000001  4523 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4524         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      00214A 21 1A                   31         .word LINK 
                           00214C    32         LINK=.
      00214C 02                      33         .byte 2
      00214D 50 49                   34         .ascii "PI" 
      00214F                         35 PII:
      00214F 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002152 90 AE 01 63      [ 2]   37         ldw y,#355 
      002156 EF 02            [ 2]   38         ldw (2,x),y 
      002158 90 AE 00 71      [ 2]   39         ldw y,#113 
      00215C FF               [ 2]   40         ldw (x),y 
      00215D 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      00215E 21 4C                   48         .word LINK 
                           002160    49         LINK=.
      002160 05                      50         .byte 5 
      002161 53 51 52 54 32          51         .ascii "SQRT2" 
      002166                         52 SQRT2:
      002166 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      002169 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00216D EF 02            [ 2]   55         ldw (2,x),y 
      00216F 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002173 FF               [ 2]   57         ldw (x),y 
      002174 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002175 21 60                   63         .word LINK 
                           002177    64         LINK=.
      002177 05                      65         .byte 5
      002178 53 51 52 54 33          66         .ascii "SQRT3" 
      00217D                         67 SQRT3: 
      00217D 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002180 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002184 EF 02            [ 2]   70     ldw (2,x),y 
      002186 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00218A FF               [ 2]   72     ldw (x),y 
      00218B 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00218C 21 77                   78         .word LINK 
                           00218E    79         LINK=.
      00218E 01                      80         .byte 1
      00218F 45                      81         .ascii "E" 
      002190                         82 ENEPER:
      002190 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      002193 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      002197 EF 02            [ 2]   85     ldw (2,x),y 
      002199 90 AE 29 32      [ 2]   86     ldw y,#10546 
      00219D FF               [ 2]   87     ldw (x),y 
      00219E 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      00219F 21 8E                   92         .word LINK 
                           0021A1    93         LINK=.
      0021A1 06                      94         .byte 6 
      0021A2 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0021A8                         96 SQRT10:
      0021A8 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0021AB 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0021AF EF 02            [ 2]   99     ldw (2,x),y 
      0021B1 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0021B5 FF               [ 2]  101     ldw (x),y 
      0021B6 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0021B7 21 A1                  107         .word LINK 
                           0021B9   108         LINK=. 
      0021B9 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0021BA 31 32 52 54 32         110         .ascii "12RT2"
      0021BF                        111 RT12_2:
      0021BF 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0021C2 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0021C6 EF 02            [ 2]  114     ldw (2,x),y 
      0021C8 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0021CC FF               [ 2]  116     ldw (x),y 
      0021CD 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0021CE 21 B9                  122         .word LINK 
                           0021D0   123         LINK=.
      0021D0 05                     124         .byte 5 
      0021D1 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0021D6                        126 LOG2S:
      0021D6 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0021D9 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      0021DD EF 02            [ 2]  129     ldw (2,x),y 
      0021DF 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      0021E3 FF               [ 2]  131     ldw (x),y 
      0021E4 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      0021E5 21 D0                  137         .word LINK 
                           0021E7   138         LINK=.
      0021E7 04                     139         .byte 4 
      0021E8 4C 4E 32 53            140         .ascii "LN2S" 
      0021EC                        141 LN2S: 
      0021EC 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0021EF 90 AE 01 E5      [ 2]  143     ldw y,#485
      0021F3 EF 02            [ 2]  144     ldw (2,x),y 
      0021F5 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      0021F9 FF               [ 2]  146     ldw (x),y 
      0021FA 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4525 .endif
                           000001  4526 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4527         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      0021FB 21 E7                   32     .word LINK 
                           0021FD    33     LINK=.
      0021FD 06                      34     .byte 6
      0021FE 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      002204                         36 CALLOT:
      002204 CD 06 25         [ 4]   37     CALL CPP
      002207 CD 04 C9         [ 4]   38     CALL DUPP 
      00220A CD 04 22         [ 4]   39     CALL AT 
      00220D CD 04 92         [ 4]   40     CALL TOR 
      002210 CD 0A 9A         [ 4]   41     CALL PSTOR 
      002213 CD 1B 0E         [ 4]   42     CALL UPDATCP 
      002216 CD 04 73         [ 4]   43     CALL RFROM
      002219 CC 0A 2A         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      00221C 21 FD                   52     .word LINK 
                           00221E    53     LINK=.
      00221E 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00221F 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002225                         56 CTABLE:
      002225 CD 22 04         [ 4]   57     CALL CALLOT     
      002228 CC 18 06         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      00222B 22 1E                   67     .word LINK 
                           00222D    68     LINK=.
      00222D 06                      69     .byte 6
      00222E 57 54 41 42 4C 45       70     .ascii "WTABLE"
      002234                         71 WTABLE:
      002234 CD 09 B1         [ 4]   72     CALL CELLS  
      002237 CD 22 04         [ 4]   73     CALL CALLOT 
      00223A CC 18 06         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      00223D 22 2D                   82     .word LINK 
                           00223F    83     LINK=.
      00223F 06                      84     .byte 6
      002240 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002246                         86 CTAT:
      002246 CD 1A 51         [ 4]   87     call FPSTOR 
      002249 CD 1B CC         [ 4]   88     call PTRPLUS 
      00224C CC 1C 09         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00224F 22 3F                   97     .word LINK 
                           002251    98     LINK=.
      002251 06                      99     .byte 6
      002252 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002258                        101 WTAT:
      002258 CD 1A 51         [ 4]  102     call FPSTOR 
      00225B CD 09 B1         [ 4]  103     call CELLS 
      00225E CD 1B CC         [ 4]  104     call PTRPLUS 
      002261 CD 1B E7         [ 4]  105     call EE_READ 
      002264 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002265 22 51                  113     .word LINK 
                           002267   114     LINK=.
      002267 06                     115     .byte 6 
      002268 43 54 49 4E 49 54      116     .ascii "CTINIT"
      00226E                        117 CTINIT:
      00226E CD 1A 51         [ 4]  118     CALL FPSTOR
      002271 CD 1B 78         [ 4]  119     CALL UNLOCK
      002274 CD 0A 2A         [ 4]  120     CALL ZERO 
      002277 CD 09 BE         [ 4]  121 1$: CALL ONEP 
      00227A CD 04 C9         [ 4]  122     CALL DUPP 
      00227D CD 22 CA         [ 4]  123     CALL INTQ 
      002280 CD 03 D7         [ 4]  124     CALL QBRAN 
      002283 22 8D                  125     .word 2$
      002285 CD 1C 23         [ 4]  126     call WR_BYTE 
      002288 CD 03 EE         [ 4]  127     CALL BRAN 
      00228B 22 77                  128     .word 1$ 
      00228D CD 06 A4         [ 4]  129 2$: CALL DDROP 
      002290 CD 1B A0         [ 4]  130     CALL LOCK 
      002293 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      002294 22 67                  138     .word LINK 
                           002296   139     LINK=.
      002296 06                     140     .byte 6 
      002297 57 54 49 4E 49 54      141     .ascii "WTINIT"
      00229D                        142 WTINIT:
      00229D CD 1A 51         [ 4]  143     CALL FPSTOR
      0022A0 CD 1B 78         [ 4]  144     CALL UNLOCK
      0022A3 CD 0A 2A         [ 4]  145     CALL ZERO 
      0022A6 CD 09 BE         [ 4]  146 1$: CALL ONEP 
      0022A9 CD 04 C9         [ 4]  147     CALL DUPP
      0022AC CD 22 CA         [ 4]  148     CALL INTQ
      0022AF CD 03 D7         [ 4]  149     CALL QBRAN 
      0022B2 22 BC                  150     .word 2$
      0022B4 CD 1C 42         [ 4]  151     call WR_WORD 
      0022B7 CD 03 EE         [ 4]  152     CALL BRAN 
      0022BA 22 A6                  153     .word 1$ 
      0022BC CD 06 A4         [ 4]  154 2$: CALL DDROP 
      0022BF CD 1B A0         [ 4]  155     CALL LOCK 
      0022C2 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0022C3 22 96                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           0022C5   165     LINK=.
      0022C5 04                     166     .byte 4
      0022C6 5B 4E 5D 3F            167     .ascii "[N]?" 
      0022CA                        168 INTQ:
      0022CA CD 0E 90         [ 4]  169     CALL CR 
      0022CD CD 03 A4         [ 4]  170     call DOLIT 
      0022D0 00 5B                  171     .word '[
      0022D2 CD 03 8E         [ 4]  172     CALL EMIT 
      0022D5 CD 0F 2B         [ 4]  173     CALL DOT 
      0022D8 CD 0E CF         [ 4]  174     CALL  DOTQP
      0022DB 03                     175     .byte 3
      0022DC 5D 3F 20               176     .ascii "]? " 
      0022DF CD 12 77         [ 4]  177     CALL QUERY 
      0022E2 CD 10 A2         [ 4]  178     call TOKEN 
      0022E5 CC 0D 3D         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4528 .endif
                                   4529 
                                   4530 ;===============================================================
                                   4531 
                           0022C5  4532 LASTN =	LINK   ;last name defined
                                   4533 
                                   4534 ; application code begin here
      002300                       4535 	.bndry 128 ; align on flash block  
      002300                       4536 app_space: 
                                   4537 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000760 R   |   6 ABOR1      0012B3 R
  6 ABOR2      0012CA R   |   6 ABORQ      0012AB R   |   6 ABORT      00129C R
  6 ABRTQ      001587 R   |   6 ABSS       000757 R   |   6 ACCEP      001232 R
  6 ACCP1      00123B R   |   6 ACCP2      001261 R   |   6 ACCP3      001264 R
  6 ACCP4      001266 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     000663 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001572 R   |   6 AGAIN      0014C8 R
  6 AHEAD      001525 R   |   6 ALLOT      0013DB R   |   6 ANDD       000515 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         000422 R   |   6 ATEXE      000B4E R
  6 AUTORUN    000117 R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |     B19200  =  000003 
    B230400 =  000007     |     B2400   =  000000     |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |     B57600  =  000005 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      0011DA R
  6 BASE       000586 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      00141D R   |   6 BDIGS      000C35 R   |     BEEP_CSR=  0050F3 
  6 BEGIN      0014AA R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001072 R   |   6 BKSP       0011AA R   |     BKSPP   =  000008 
  6 BLANK      000A1D R   |     BLOCK_SI=  000080     |   6 BRAN       0003EE R
    BTW     =  000001     |   6 BUF2ROW    001FBB R   |   6 BYE        0000A4 R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CALLOT     002204 R
    CARRY   =  000028     |   6 CAT        000440 R   |   6 CCOMMA     0013FF R
    CELLL   =  000002     |   6 CELLM      0009A2 R   |   6 CELLP      000993 R
  6 CELLS      0009B1 R   |     CFG_GCR =  007F60     |   6 CHAR1      000E62 R
  6 CHAR2      000E65 R   |   6 CHKIVEC    001EA9 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000B6D R   |   6 CMOV2      000B85 R   |   6 CMOVE      000B65 R
    CNTDWN  =  000030     |   6 CNTXT      000609 R   |   6 COLD       0019E2 R
  6 COLD1      0019E2 R   |   6 COLON      001720 R   |   6 COMMA      0013E8 R
  6 COMPI      00142D R   |     COMPO   =  000040     |   6 CONSTANT   0017CA R
  6 COUNT      000B01 R   |   6 CPP        000625 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000E90 R   |   6 CREAT      001766 R
    CRR     =  00000D     |   6 CSTOR      00042F R   |   6 CTABLE     002225 R
  6 CTAT       002246 R   |   6 CTINIT     00226E R   |   6 DAT        000AE1 R
    DATSTK  =  000680     |   6 DCONST     001806 R   |   6 DDROP      0006A4 R
  6 DDUP       0006AF R   |   6 DECIM      000CE5 R   |   6 DEPTH      000A6C R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000D2A R
  6 DI         0000B2 R   |   6 DIG        000C5E R   |   6 DIGIT      000BF9 R
  6 DIGS       000C6F R   |   6 DIGS1      000C6F R   |   6 DIGS2      000C7C R
  6 DIGTQ      000CF9 R   |     DISCOVER=  000000     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00071E R   |   6 DNEGA      000701 R
  6 DOCONST    0017F4 R   |   6 DOLIT      0003A4 R   |   6 DONXT      0003B8 R
    DOORBELL=  000001     |   6 DOSTR      000EA6 R   |   6 DOT        000F2B R
  6 DOT1       000F41 R   |   6 DOTI1      001962 R   |   6 DOTID      00194C R
  6 DOTO1      00133F R   |   6 DOTOK      001325 R   |   6 DOTPR      001054 R
  6 DOTQ       0015A1 R   |   6 DOTQP      000ECF R   |   6 DOTR       000EDD R
  6 DOTS       0018EE R   |   6 DOTS1      0018F9 R   |   6 DOTS2      001902 R
  6 DOVAR      000576 R   |   6 DO_DCONS   001835 R   |   6 DROP       0004BF R
  6 DSTOR      000ABB R   |   6 DUMP       0018A4 R   |   6 DUMP1      0018BB R
  6 DUMP3      0018DD R   |   6 DUMPP      001873 R   |   6 DUPP       0004C9 R
  6 EDIGS      000C9A R   |   6 EECSTORE   001C6C R   |   6 EEPCP      001AB5 R
  6 EEPLAST    001A88 R   |   6 EEPROM     001A70 R   |     EEPROM_B=  004000 
    EEPROM_E=  0043FF     |     EEPROM_R=  000010     |     EEPROM_S=  000400 
  6 EEPRUN     001A9F R   |   6 EEPVP      001ACB R   |   6 EESTORE    001CB8 R
  6 EE_CCOMM   001F70 R   |   6 EE_COMMA   001F4F R   |   6 EE_CREAD   001C09 R
  6 EE_READ    001BE7 R   |   6 EI         0000AB R   |   6 ELSEE      001500 R
  6 EMIT       00038E R   |   6 ENEPER     002190 R   |   6 EQ1        00077B R
  6 EQUAL      000765 R   |   6 ERASE      000BC7 R   |     ERR     =  00001B 
  6 EVAL       001368 R   |   6 EVAL1      001368 R   |   6 EVAL2      001384 R
  6 EXE1       000B5C R   |   6 EXECU      0003FE R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000C21 R
  6 FADDR      00203D R   |   6 FILL       000B94 R   |   6 FILL1      000BB1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

  6 FILL2      000BBA R   |   6 FIND       001106 R   |   6 FIND1      001124 R
  6 FIND2      001152 R   |   6 FIND3      00115E R   |   6 FIND4      001172 R
  6 FIND5      00117F R   |   6 FIND6      001163 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |   6 FMOVE      002048 R
  6 FMOVE2     002079 R   |   6 FOR        00147D R   |   6 FORGET     000148 R
  6 FORGET1    000177 R   |   6 FORGET2    0001FD R   |   6 FORGET4    000206 R
  6 FORGET6    0001BF R   |   6 FPSTOR     001A51 R   |     FPTR    =  000032 
  6 FREEVAR    000213 R   |   6 FREEVAR4   000249 R   |     GPIO_BAS=  005000 
    GPIO_SIZ=  000005     |   6 HERE       000B18 R   |   6 HEX        000CD0 R
  6 HI         00199E R   |   6 HLD        0005F6 R   |   6 HOLD       000C45 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     001731 R   |   6 IFETCH     00149B R
  6 IFF        0014D8 R   |   6 IFMOVE     002121 R   |     IMEDD   =  000080 
  6 IMMED      001743 R   |   6 INCH       000382 R   |   6 INC_FPTR   001BB4 R
  6 INITOFS    0016F9 R   |   6 INN        0005A4 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001307 R   |   6 INTER      0012DD R   |   6 INTQ       0022CA R
    INT_ADC1=  000016     |     INT_AWU =  000001     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_RES1=  000008     |     INT_RES2=  000009 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    INT_RES3=  000011     |     INT_RES4=  000012     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0006DE R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      00168E R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       0016E3 R   |   6 KEY        000E10 R
  6 KTAP       0011F7 R   |   6 KTAP1      00121A R   |   6 KTAP2      00121D R
  6 LAST       000635 R   |   6 LASTN   =  0022C5 R   |   6 LBRAC      001314 R
  6 LESS       0007A2 R   |     LF      =  00000A     |   6 LINK    =  0022C5 R
  6 LITER      00144F R   |   6 LN2S       0021EC R   |   6 LOCK       001BA0 R
  6 LOG2S      0021D6 R   |   6 LSHIFT     0009DC R   |   6 LSHIFT1    0009E5 R
  6 LSHIFT4    0009ED R   |   6 LT1        0007B8 R   |     MASKK   =  001F7F 
  6 MAX        0007C2 R   |   6 MAX1       0007D5 R   |   6 MIN        0007DF R
  6 MIN1       0007F2 R   |     MISCOPT =  004805     |     MISCOPT_=  000004 
    MISCOPT_=  000002     |     MISCOPT_=  000003     |     MISCOPT_=  000000 
    MISCOPT_=  000001     |   6 MMOD1      000895 R   |   6 MMOD2      0008A9 R
  6 MMOD3      0008C0 R   |   6 MMSM1      00083C R   |   6 MMSM2      000850 R
  6 MMSM3      000852 R   |   6 MMSM4      00085A R   |   6 MODD       0008DA R
  6 MONE       000A43 R   |     MS      =  00002E     |   6 MSEC       0002BE R
  6 MSMOD      000878 R   |   6 MSTA1      00096B R   |   6 MSTAR      000948 R
    NAFR    =  004804     |   6 NAMEQ      00119F R   |   6 NAMET      0010B0 R
    NCLKOPT =  004808     |   6 NEGAT      0006EF R   |   6 NEX1       0003C5 R
  6 NEXT       00148C R   |     NHSECNT =  00480A     |     NMISCOPT=  004806 
    NMISCOPT=  FFFFFFFB     |     NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC 
    NMISCOPT=  FFFFFFFF     |     NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPTBL  =  00487F     |   6 NTIB       0005B4 R
    NUBC    =  004802     |     NUCLEO  =  000000     |   6 NUFQ       000E26 R
  6 NUFQ1      000E3F R   |   6 NUMBQ      000D3D R   |   6 NUMQ1      000D71 R
  6 NUMQ2      000DA2 R   |   6 NUMQ3      000DE4 R   |   6 NUMQ4      000DE9 R
  6 NUMQ5      000DF8 R   |   6 NUMQ6      000DFB R   |   6 NonHandl   000000 R
  6 OFFSET     00065A R   |     OFS     =  000005     |   6 ONE        000A35 R
  6 ONEM       0009CB R   |   6 ONEP       0009BE R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
    OPTION_B=  004800     |     OPTION_E=  00487F     |   6 ORIG       000047 R
  6 ORR        000529 R   |   6 OUTPUT     000393 R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       0004F3 R   |   6 OVERT      00165C R   |     PA      =  000000 
  6 PACKS      000BD8 R   |   6 PAD        000B29 R   |   6 PAREN      001063 R
  6 PARS       000F5C R   |   6 PARS1      000F87 R   |   6 PARS2      000FB2 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  6 PARS3      000FB5 R   |   6 PARS4      000FBE R   |   6 PARS5      000FE1 R
  6 PARS6      000FF6 R   |   6 PARS7      001005 R   |   6 PARS8      001014 R
  6 PARSE      001025 R   |   6 PAUSE      0002CE R   |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      001886 R
  6 PDUM2      001897 R   |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
  6 PICK       000A83 R   |   6 PII        00214F R   |     PIN0    =  000000 
    PIN1    =  000001     |     PIN2    =  000002     |     PIN3    =  000003 
    PIN4    =  000004     |     PIN5    =  000005     |     PIN6    =  000006 
    PIN7    =  000007     |   6 PLUS       0006C4 R   |   6 PNAM1      001611 R
  6 PRESE      001393 R   |     PROD1   =  000022     |     PROD2   =  000024 
    PROD3   =  000026     |   6 PROTECTE   0001EF R   |   6 PSTOR      000A9A R
    PTR16   =  000033     |     PTR8    =  000034     |   6 PTRPLUS    001BCC R
  6 QBRAN      0003D7 R   |   6 QDUP       000673 R   |   6 QDUP1      00067D R
  6 QKEY       000370 R   |   6 QSTAC      00134B R   |   6 QUERY      001277 R
  6 QUEST      000F4E R   |   6 QUIT       0013B0 R   |   6 QUIT1      0013B8 R
  6 QUIT2      0013BB R   |   6 RAM2EE     001FE9 R   |     RAMBASE =  000000 
  6 RAMLAST    000648 R   |     RAM_BASE=  000000     |     RAM_END =  0007FF 
    RAM_SIZE=  000800     |   6 RANDOM     00026C R   |   6 RAT        000486 R
  6 RBRAC      0016D0 R   |   6 REPEA      001555 R   |   6 RFREE      001FD0 R
  6 RFROM      000473 R   |     ROP     =  004800     |   6 ROT        000684 R
  6 ROW2BUF    001F92 R   |     ROWBUFF =  000680     |     RP0     =  00002C 
  6 RPAT       000450 R   |     RPP     =  0007FF     |   6 RPSTO      00045D R
  6 RSHIFT     0009F8 R   |   6 RSHIFT1    000A01 R   |   6 RSHIFT4    000A09 R
    RST_SR  =  0050B3     |   6 RT12_2     0021BF R   |   6 SAME1      0010CE R
  6 SAME2      0010F7 R   |   6 SAMEQ      0010C6 R   |   6 SCOM1      001646 R
  6 SCOM2      001649 R   |   6 SCOMP      001628 R   |   6 SEED       000253 R
    SEEDX   =  000036     |     SEEDY   =  000038     |   6 SEMIS      00166C R
  6 SETISP     0000BE R   |   6 SET_RAML   0017B3 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000C84 R   |   6 SIGN1      000C94 R
  6 SLASH      0008E4 R   |   6 SLMOD      0008C8 R   |   6 SNAME      0015DB R
    SP0     =  00002A     |   6 SPACE      000E48 R   |   6 SPACS      000E57 R
  6 SPAT       0004A9 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  000680     |     SPSAVE  =  000001     |   6 SPSTO      0004B6 R
  6 SQRT10     0021A8 R   |   6 SQRT2      002166 R   |   6 SQRT3      00217D R
  6 SSMOD      000974 R   |     SSP     =  000001     |     STACK   =  0007FF 
  6 STAR       00093D R   |   6 STASL      000985 R   |   6 STOD       000726 R
  6 STORE      00040B R   |   6 STR        000CB2 R   |   6 STRCQ      00145D R
  6 STRQ       001594 R   |   6 STRQP      000EC5 R   |   6 SUBB       00073D R
  6 SWAPP      0004D9 R   |     SWIM_CSR=  007F80     |   6 TAP        0011E1 R
  6 TBOOT      0019D6 R   |   6 TBUF       0005C4 R   |     TBUFFBAS=  000680 
  6 TCHAR      000A54 R   |   6 TEMP       000595 R   |   6 TEVAL      0005E7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  6 TFLASH     0005D6 R   |   6 THENN      0014ED R   |   6 TIB        000B3A R
    TIBB    =  000700     |     TIBBASE =  000700     |     TIC     =  000027 
  6 TICK       0013C7 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   0002FE R
  6 TIMER      0002E8 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      00191C R   |   6 TNAM3      00193A R   |   6 TNAM4      001940 R
  6 TNAME      001919 R   |   6 TOFLASH    000323 R   |   6 TOKEN      0010A2 R
  6 TOR        000492 R   |   6 TORAM      000363 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000A10 R   |   6 TYPE1      000E77 R   |   6 TYPE2      000E83 R
  6 TYPES      000E72 R   |   6 Timer4Ha   000005 R   |     UART2_BR=  005242 
    UART2_BR=  005243     |     UART2_CR=  005244     |     UART2_CR=  005245 
    UART2_CR=  005246     |     UART2_CR=  005247     |     UART2_CR=  005248 
    UART2_CR=  004249     |     UART2_DR=  005241     |     UART2_GT=  00524A 
    UART2_PO=  00500F     |     UART2_PS=  00524B     |     UART2_RX=  000006 
    UART2_SR=  005240     |     UART2_TX=  000005     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_DR =  005241     |     UART_SR =  005240 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000F18 R
  6 UDOTR      000EF8 R   |   6 UEND       000045 R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      00079A R   |   6 ULESS      000784 R   |   6 UMMOD      00081A R
  6 UMSTA      0008F3 R   |   6 UNIQ1      0015D2 R   |   6 UNIQU      0015B3 R
  6 UNLKEE     001B3A R   |   6 UNLKFL     001B59 R   |   6 UNLOCK     001B78 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

  6 UNTIL      0014B5 R   |     UOFFSET =  00001C     |   6 UPDATCP    001B0E R
  6 UPDATLAS   001AE5 R   |   6 UPDATPTR   0020DC R   |   6 UPDATRUN   001AFD R
  6 UPDATVP    001B25 R   |   6 UPL1       00056A R   |   6 UPLUS      000553 R
    UPP     =  000006     |     URLAST  =  000020     |     UTFLASH =  00001E 
    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      001856 R
  6 UTYP2      001865 R   |   6 UTYPE      001851 R   |     UVP     =  000016 
  6 UZERO      00002B R   |   6 VARIA      001780 R   |     VAR_BASE=  000080 
    VAR_TOP =  0007BF     |     VER     =  000003     |   6 VPP        000617 R
    VSIZE   =  000006     |     WANT_CON=  000001     |     WANT_DEB=  000000 
    WANT_SCA=  000001     |     WANT_SEE=  000000     |   6 WHILE      00153B R
  6 WITHI      0007FF R   |   6 WORDD      00108E R   |   6 WORDS      001976 R
  6 WORS1      00197C R   |   6 WORS2      001998 R   |   6 WR_BYTE    001C23 R
  6 WR_WORD    001C42 R   |   6 WTABLE     002234 R   |   6 WTAT       002258 R
  6 WTINIT     00229D R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    X4_FLASH=  00BFFF     |     X4_FLASH=  004000     |     X6_FLASH=  00FFFF 
    X6_FLASH=  008000     |     XMEM_SIZ=  000000     |   6 XORR       00053E R
    XTEMP   =  000022     |     YTEMP   =  000024     |   6 ZERO       000A2A R
  6 ZL1        00050B R   |   6 ZLESS      000502 R   |   6 app_spac   002300 R
  6 block_er   001CFF R   |   6 clear_ra   000019 R   |   6 clock_in   000052 R
  6 copy_buf   001D56 R   |   6 copy_buf   001D75 R   |   6 copy_pro   001D75 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 erase_fl   001D1B R   |   6 fmove_do   0020C5 R
  6 main       000016 R   |   6 next_row   002082 R   |   6 no_move    0020CC R
  6 pristine   001DF0 R   |   6 proceed_   001D1E R   |   6 reboot     000315 R
  6 reset_ve   001E57 R   |   6 row_eras   001CE2 R   |   6 row_eras   001D2F R
  6 row_eras   001D56 R   |   6 set_opti   001DC4 R   |   6 set_vect   001EF8 R
  6 uart_ini   000064 R   |   6 write_ro   001D9A R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2300   flags    0

