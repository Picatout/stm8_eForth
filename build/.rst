ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        	.include "inc/stm8s208.inc"
                                        
                                        XMEM_SIZE=96304 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART1_SR
                                        UART_DR=UART1_DR
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 µC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                        	.include "inc/stm8s_disco.inc"
                                        ;-------------------------------------
                                        ; STM8S-Discovery card 
                                        ;-------------------------------------
                                        
                                        
                                 
                                 
                                 
                                        
                                        
                                        ; LD1 LED 
                                 
                                 
                                 
                                        
                                        ; BEEP
                                 
                                 
                                 
                                        
                                        ; TS1 
                                        ; use TIMER 1 3 channels 
                                        
                                        
                                        
                                 
                                 
                                 
                                        
                                        .endif 
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000000    89 .if NUCLEO 
                                     90 STACK   =	0x17FF 	;system (return) stack empty 
                                     91 DATSTK  =	0x1680	;data stack  empty
                                     92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                                     93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000001    94 .else ; DISCOVERY
                           0007FF    95 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    96 DATSTK  =	0x680	;data stack  empty
                           000680    97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           00001B   169 ERR     =     27      ;error escape
                           000027   170 TIC     =     39      ;tick
                           0000CD   171 CALLL   =     0xCD     ;CALL opcodes
                           000080   172 IRET_CODE =   0x80    ; IRET opcode 
                                    173 
                                    174         .macro _ledon
                                    175         .if NUCLEO
                                    176         bset PC_ODR,#LED2_BIT
                                    177         .else ;DISCOVERY 
                                    178         bres PD_ODR,#LD1_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .endif
                                    180         .endm
                                    181 
                                    182         .macro _ledoff
                                    183         .if NUCLEO 
                                    184         bres PC_ODR,#LED2_BIT
                                    185         .else ;DISCOVERY 
                                    186         bset PD_ODR,#LD1_BIT 
                                    187         .endif
                                    188         .endm
                                    189 
                                    190 ;**********************************************************
                                    191         .area DATA (ABS)
      000000                        192         .org RAMBASE 
                                    193 ;**********************************************************
                                    194 
                                    195 ;**********************************************************
                                    196         .area SSEG (ABS) ; STACK
      001700                        197         .org 0x1700
      001700                        198         .ds 256 
                                    199 ; space for DATSTK,TIB and STACK         
                                    200 ;**********************************************************
                                    201 
                                    202 ;**********************************************************
                                    203         .area HOME ; vectors table
                                    204 ;**********************************************************
      008000 82 00 80 96            205 	int main	        ; reset
      008004 82 00 80 80            206 	int NonHandledInterrupt	; trap
      008008 82 00 80 80            207 	int NonHandledInterrupt	; irq0
      00800C 82 00 80 80            208 	int NonHandledInterrupt	; irq1
      008010 82 00 80 80            209 	int NonHandledInterrupt	; irq2
      008014 82 00 80 80            210 	int NonHandledInterrupt	; irq3
      008018 82 00 80 80            211 	int NonHandledInterrupt	; irq4
      00801C 82 00 80 80            212 	int NonHandledInterrupt	; irq5
      008020 82 00 80 80            213 	int NonHandledInterrupt	; irq6
      008024 82 00 80 80            214 	int NonHandledInterrupt	; irq7
      008028 82 00 80 80            215 	int NonHandledInterrupt	; irq8
      00802C 82 00 80 80            216 	int NonHandledInterrupt	; irq9
      008030 82 00 80 80            217 	int NonHandledInterrupt	; irq10
      008034 82 00 80 80            218 	int NonHandledInterrupt	; irq11
      008038 82 00 80 80            219 	int NonHandledInterrupt	; irq12
      00803C 82 00 80 80            220 	int NonHandledInterrupt	; irq13
      008040 82 00 80 80            221 	int NonHandledInterrupt	; irq14
      008044 82 00 80 80            222 	int NonHandledInterrupt	; irq15
      008048 82 00 80 80            223 	int NonHandledInterrupt	; irq16
      00804C 82 00 80 80            224 	int NonHandledInterrupt	; irq17
      008050 82 00 80 80            225 	int NonHandledInterrupt	; irq18
      008054 82 00 80 80            226 	int NonHandledInterrupt	; irq19
      008058 82 00 80 80            227 	int NonHandledInterrupt	; irq20
      00805C 82 00 80 80            228 	int NonHandledInterrupt	; irq21
      008060 82 00 80 80            229 	int NonHandledInterrupt	; irq22
      008064 82 00 80 85            230 	int Timer4Handler	; irq23
      008068 82 00 80 80            231 	int NonHandledInterrupt	; irq24
      00806C 82 00 80 80            232 	int NonHandledInterrupt	; irq25
      008070 82 00 80 80            233 	int NonHandledInterrupt	; irq26
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      008074 82 00 80 80            234 	int NonHandledInterrupt	; irq27
      008078 82 00 80 80            235 	int NonHandledInterrupt	; irq28
      00807C 82 00 80 80            236 	int NonHandledInterrupt	; irq29
                                    237 
                                    238 ;**********************************************************
                                    239         .area CODE
                                    240 ;**********************************************************
                                    241 
                                    242 ; non handled interrupt reset MCU
      008080                        243 NonHandledInterrupt:
      008080 A6 80            [ 1]  244         ld a, #0x80
      008082 C7 50 D1         [ 1]  245         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    246 	;iret
                                    247 
                                    248 ; used for milliseconds counter 
                                    249 ; MS is 16 bits counter 
      008085                        250 Timer4Handler:
      008085 72 5F 53 42      [ 1]  251 	clr TIM4_SR 
      008089 BE 2E            [ 2]  252         ldw x,MS 
      00808B 5C               [ 1]  253         incw x 
      00808C BF 2E            [ 2]  254         ldw MS,x
      00808E BE 30            [ 2]  255         ldw x,CNTDWN 
      008090 27 03            [ 1]  256         jreq 1$
      008092 5A               [ 2]  257         decw x 
      008093 BF 30            [ 2]  258         ldw CNTDWN,x 
      008095                        259 1$:         
      008095 80               [11]  260         iret 
                                    261 
                                    262 
                                    263 ;; Main entry points and COLD start data
      008096                        264 main:
                                    265 ; clear all RAM
      008096 AE 00 00         [ 2]  266 	ldw X,#RAMBASE
      008099                        267 clear_ram0:
      008099 7F               [ 1]  268 	clr (X)
      00809A 5C               [ 1]  269 	incw X
      00809B A3 07 FF         [ 2]  270 	cpw X,#RAM_END
      00809E 23 F9            [ 2]  271 	jrule clear_ram0
      0080A0 AE 07 FF         [ 2]  272         ldw x,#RPP
      0080A3 94               [ 1]  273         ldw sp,x
                                    274 ; set SEEDX and SEEDY to 1 
      0080A4 3C 37            [ 1]  275         inc SEEDX+1 
      0080A6 3C 39            [ 1]  276         inc SEEDY+1          
      0080A8 CC 80 C7         [ 2]  277 	jp ORIG
                                    278 
                                    279 ; COLD initialize these variables.
      0080AB                        280 UZERO:
      0080AB 00 0A                  281         .word      BASEE   ;BASE
      0080AD 00 00                  282         .word      0       ;tmp
      0080AF 00 00                  283         .word      0       ;>IN
      0080B1 00 00                  284         .word      0       ;#TIB
      0080B3 07 00                  285         .word      TIBB    ;TIB
      0080B5 93 6D                  286         .word      INTER   ;'EVAL
      0080B7 00 00                  287         .word      0       ;HLD
      0080B9 A3 55                  288         .word      LASTN  ;CNTXT pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0080BB 00 80                  289         .word      VAR_BASE   ;variables free space pointer 
      0080BD A3 80                  290         .word      app_space ; FLASH free space pointer 
      0080BF A3 55                  291         .word      LASTN   ;LAST
      0080C1 00 00                  292         .word      0        ; OFFSET 
      0080C3 00 00                  293         .word      0       ; TFLASH
                                    294 ;       .word      0       ; URLAST   
      0080C5 00 00                  295 UEND:   .word      0
                                    296 
      0080C7                        297 ORIG:   
                                    298 ; initialize SP
      0080C7 AE 07 FF         [ 2]  299         LDW     X,#STACK  ;initialize return stack
      0080CA 94               [ 1]  300         LDW     SP,X
      0080CB BF 2C            [ 2]  301         LDW     RP0,X
      0080CD AE 06 80         [ 2]  302         LDW     X,#DATSTK ;initialize data stack
      0080D0 BF 2A            [ 2]  303         LDW     SP0,X
                           000000   304 .if NUCLEO        
                                    305 ; initialize PC_5 as output to control LED2
                                    306 ; added by Picatout 
                                    307         bset PC_CR1,#LED2_BIT
                                    308         bset PC_CR2,#LED2_BIT
                                    309         bset PC_DDR,#LED2_BIT
                           000001   310 .else ;discovery 
      0080D2 72 10 50 12      [ 1]  311         bset PD_CR1,#LD1_BIT
      0080D6 72 10 50 13      [ 1]  312         bset PD_CR2,#LD1_BIT
      0080DA 72 10 50 11      [ 1]  313         bset PD_DDR,#LD1_BIT 
                                    314 .endif
      00005E                        315         _ledoff
                           000000     1         .if NUCLEO 
                                      2         bres PC_ODR,#LED2_BIT
                           000001     3         .else ;DISCOVERY 
      0080DE 72 10 50 0F      [ 1]    4         bset PD_ODR,#LD1_BIT 
                                      5         .endif
                                    316 ; initialize clock to HSI
                                    317 ; no divisor 16Mhz 
                                    318 ; Added by Picatout 
      0080E2                        319 clock_init:
      0080E2 72 5F 50 C6      [ 1]  320         clr CLK_CKDIVR
      0080E6 72 12 50 C5      [ 1]  321 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000000   322 .if NUCLEO
                                    323 	ld a,#CLK_SWR_HSI
                           000001   324 .else ; DISCOVERY as 16Mhz crystal
      0080EA A6 B4            [ 1]  325 	ld a,#CLK_SWR_HSE
                                    326 .endif 
      0080EC C7 50 C4         [ 1]  327 	ld CLK_SWR,a
      0080EF C1 50 C3         [ 1]  328 1$:	cp a,CLK_CMSR
      0080F2 26 FB            [ 1]  329 	jrne 1$
                                    330         
                                    331 ; initialize UART, 115200 8N1
      0080F4                        332 uart_init:
                           000000   333 .if NUCLEO 
                                    334 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    335 	; configure tx pin
                                    336 	bset PA_DDR,#UART1_TX_PIN ; tx pin
                                    337 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
                                    338 	bset PA_CR2,#UART1_TX_PIN ; fast output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    339 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    340 	mov UART1_BRR2,#0x0b ; must be loaded first
                                    341 	mov UART1_BRR1,#0x8
                                    342 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000001   343 .else ; DISCOVERY use UART2 
      0080F4 72 16 50 C7      [ 1]  344 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    345 	; configure tx pin
      0080F8 72 1A 50 11      [ 1]  346 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      0080FC 72 1A 50 12      [ 1]  347 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      008100 72 1A 50 13      [ 1]  348 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    349 	; baud rate 115200 Fmaster=8Mhz  
      008104 35 0B 52 43      [ 1]  350 	mov UART2_BRR2,#0x0b ; must be loaded first
      008108 35 08 52 42      [ 1]  351 	mov UART2_BRR1,#0x8
      00810C 35 0C 52 45      [ 1]  352 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    353 .endif
                                    354 ; initialize timer4, used for millisecond interrupt  
      008110 35 07 53 45      [ 1]  355 	mov TIM4_PSCR,#7 ; prescale 128  
      008114 35 7D 53 46      [ 1]  356 	mov TIM4_ARR,#125 ; set for 1msec.
      008118 35 05 53 40      [ 1]  357 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00811C 72 10 53 41      [ 1]  358 	bset TIM4_IER,#TIM4_IER_UIE 
                                    359 ; set TIM4 interrupt priority to highest
      008120 A6 3F            [ 1]  360         ld a,#~(IPR_MASK<<6)
      008122 C4 7F 75         [ 1]  361         and a,ITC_SPR6
      008125 AA C0            [ 1]  362         or a,#(IPR3<<6)
      008127 C7 7F 75         [ 1]  363         ld ITC_SPR6,a 
      00812A 9A               [ 1]  364         rim
      00812B CC 9A 72         [ 2]  365         jp  COLD   ;default=MN1
                                    366 
                                    367 
                                    368 ;; place MCU in sleep mode with
                                    369 ;; halt opcode 
                                    370 ;; BYE ( -- )
      00812E 00 00                  371         .word 0
                           0000B0   372         LINK=.
      008130 03                     373         .byte 3 
      008131 42 59 45               374         .ascii "BYE"
      008134                        375 BYE: 
      008134 8E               [10]  376         halt 
      008135 81               [ 4]  377         ret 
                                    378 
                                    379 ; Enable interrupts 
                                    380 ; EI ( -- )
      008136 81 30                  381         .word LINK 
                           0000B8   382         LINK=.
      008138 02                     383         .byte 2
      008139 45 49                  384         .ascii "EI"
      00813B                        385 EI:
      00813B 9A               [ 1]  386         rim 
      00813C 81               [ 4]  387         ret 
                                    388 
                                    389 ; Disable interrupts
                                    390 ; DI ( -- )
      00813D 81 38                  391         .word LINK 
                           0000BF   392         LINK=.
      00813F 02                     393         .byte 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      008140 44 49                  394         .ascii "DI"
      008142                        395 DI:
      008142 9B               [ 1]  396         sim 
      008143 81               [ 4]  397         ret 
                                    398 
                                    399 ; set interrupt priority level 
                                    400 ; SET-ISP ( n1 n2 -- )
                                    401 ; n1 level {1..3}
                                    402 ; n2 vector {0..29}
      008144 81 3F                  403         .word LINK 
                           0000C6   404         LINK=.
      008146 07                     405         .byte 7 
      008147 53 45 54 2D 49 53 50   406         .ascii "SET-ISP"
      00814E                        407 SETISP:
      00814E 90 93            [ 1]  408         ldw y,x 
      008150 90 FE            [ 2]  409         ldw y,(y)
      008152 A6 04            [ 1]  410         ld a,#4 ; 4 slot per register 
                                    411 ;  quotient select register, remainder select slot in register.        
      008154 90 62            [ 2]  412         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      008156 A4 03            [ 1]  413         and a,#3 
      008158 48               [ 1]  414         sll a ; 2*SLOT  lshift 
      008159 72 A9 7F 70      [ 2]  415         addw y,#ITC_SPR1 
      00815D FF               [ 2]  416         ldw (x),y  ; ( level reg -- )
      00815E 90 5F            [ 1]  417         clrw y 
      008160 90 97            [ 1]  418         ld yl,a 
      008162 1D 00 02         [ 2]  419         subw x,#CELLL 
      008165 FF               [ 2]  420         ldw (x),y  ; ( level reg lshift -- )
      008166 90 93            [ 1]  421         ldw y,x 
      008168 90 EE 02         [ 2]  422         ldw y,(2,y) 
      00816B 90 F6            [ 1]  423         ld a,(y)   ; reg_value
      00816D 1D 00 02         [ 2]  424         subw x,#CELLL 
      008170 FF               [ 2]  425         ldw (x),y ; ( level reg lshift rval -- )
      008171 CD 85 83         [ 4]  426         call OVER ; ( level reg lshift rval lshift -- )
      008174 CD 84 34         [ 4]  427         call DOLIT 
      008177 00 03                  428         .word 3
      008179 CD 85 69         [ 4]  429         call SWAPP  ; ( level reg lshift rval 3 lshift )
      00817C CD 8A 6C         [ 4]  430         call LSHIFT ; creat slot mask 
      00817F CD 87 6E         [ 4]  431         call INVER  ; ( level reg lshift rval mask )
      008182 CD 85 A5         [ 4]  432         call ANDD ; ( level reg lshift slot_masked )
      008185 CD 85 22         [ 4]  433         call TOR  ; ( level reg lshift -- R: slot_masked )
      008188 CD 87 14         [ 4]  434         call ROT  ; ( reg lshift level )
      00818B CD 85 69         [ 4]  435         call SWAPP ; ( reg level lshift )
      00818E CD 8A 6C         [ 4]  436         call LSHIFT  ; ( reg slot_level -- )
      008191 CD 85 03         [ 4]  437         call RFROM ; ( reg slot_level masked_val )
      008194 CD 85 B9         [ 4]  438         call ORR   ; ( reg updated_rval )
      008197 CD 85 69         [ 4]  439         call SWAPP 
      00819A CD 84 BF         [ 4]  440         call CSTOR
                                    441 
                                    442 ; sélectionne l'application 
                                    443 ; qui démarre automatique lors 
                                    444 ; d'un COLD start 
      00819D 81 46                  445         .word LINK 
                           00011F   446         LINK=.
      00819F 07                     447         .byte 7
      0081A0 41 55 54 4F 52 55 4E   448         .ascii "AUTORUN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      0081A7                        449 AUTORUN:
      0081A7 CD 91 32         [ 4]  450         call TOKEN 
      0081AA CD 85 59         [ 4]  451         call DUPP 
      0081AD CD 84 67         [ 4]  452         call QBRAN 
      0081B0 82 8D                  453         .word FORGET2
      0081B2 CD 92 2F         [ 4]  454         call NAMEQ
      0081B5 CD 87 03         [ 4]  455         call QDUP 
      0081B8 CD 84 67         [ 4]  456         call QBRAN 
      0081BB 82 8D                  457         .word FORGET2
      0081BD CD 85 4F         [ 4]  458         call DROP 
      0081C0 1D 00 04         [ 2]  459         subw x,#2*CELLL 
      0081C3 90 5F            [ 1]  460         clrw y 
      0081C5 FF               [ 2]  461         ldw (x),y 
      0081C6 90 AE 40 02      [ 2]  462         ldw y,#APP_RUN 
      0081CA EF 02            [ 2]  463         ldw (2,x),y 
      0081CC CC 9D 48         [ 2]  464         jp EESTORE 
                                    465 
                                    466 ;; Reset dictionary pointer before 
                                    467 ;; forgotten word. RAM space and 
                                    468 ;; interrupt vector defined after 
                                    469 ;; must be resetted also.
      0081CF 81 9F                  470         .word LINK 
                           000151   471         LINK=.
      0081D1 06                     472         .byte 6
      0081D2 46 4F 52 47 45 54      473         .ascii "FORGET" 
      0081D8                        474 FORGET: 
      0081D8 CD 91 32         [ 4]  475         call TOKEN
      0081DB CD 85 59         [ 4]  476         call DUPP 
      0081DE CD 84 67         [ 4]  477         call QBRAN 
      0081E1 82 8D                  478         .word FORGET2
      0081E3 CD 92 2F         [ 4]  479         call NAMEQ ; ( a -- ca na | a F )
      0081E6 CD 87 03         [ 4]  480         call QDUP 
      0081E9 CD 84 67         [ 4]  481         call QBRAN 
      0081EC 82 8D                  482         .word FORGET2
                                    483 ; only forget users words 
      0081EE CD 85 59         [ 4]  484         call DUPP ; ( ca na na )
      0081F1 CD 84 34         [ 4]  485         call DOLIT 
      0081F4 A3 80                  486         .word app_space 
      0081F6 CD 85 69         [ 4]  487         call SWAPP 
      0081F9 CD 88 14         [ 4]  488         call  ULESS 
      0081FC CD 84 67         [ 4]  489         call QBRAN 
      0081FF 82 4F                  490         .word FORGET6 
                                    491 ; ( ca na -- )        
                                    492 ;reset ivec with address >= ca
      008201 CD 85 69         [ 4]  493         call SWAPP ; ( na ca -- ) 
      008204 CD 9F 39         [ 4]  494         call CHKIVEC ; ( na -- ) 
                                    495 ; start at LAST and link back to na 
                                    496 ; if variable found reset VP at that point.
      008207                        497 FORGET1:
      008207 CD 86 C5         [ 4]  498         call LAST 
      00820A CD 84 B2         [ 4]  499         call AT 
      00820D CD 85 59         [ 4]  500         call DUPP  ; ( -- na last last )
      008210 CD 82 A3         [ 4]  501         call FREEVAR ; ( -- na last )
      008213 CD 85 59         [ 4]  502         call DUPP 
      008216 CD 84 34         [ 4]  503         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      008219 00 02                  504         .word 2 
      00821B CD 87 CD         [ 4]  505         call SUBB ; ( na last -- na last lfa ) link address 
      00821E CD 84 B2         [ 4]  506         call AT 
      008221 CD 85 59         [ 4]  507         call DUPP ; ( -- na last a a )
      008224 CD 86 99         [ 4]  508         call CNTXT 
      008227 CD 84 9B         [ 4]  509         call STORE
      00822A CD 86 C5         [ 4]  510         call LAST  
      00822D CD 84 9B         [ 4]  511         call STORE ; ( --  na last )
      008230 CD 85 83         [ 4]  512         call OVER 
      008233 CD 87 F5         [ 4]  513         call EQUAL ; ( na last na -- na T|F ) 
      008236 CD 84 67         [ 4]  514         call QBRAN 
      008239 82 07                  515         .word FORGET1 
                                    516 ; ( na -- )
      00823B CD 84 34         [ 4]  517         call DOLIT 
      00823E 00 02                  518         .word 2 
      008240 CD 87 CD         [ 4]  519         call SUBB 
      008243 CD 86 B5         [ 4]  520         call CPP 
      008246 CD 84 9B         [ 4]  521         call STORE  
      008249 CD 9B 9E         [ 4]  522         call UPDATCP 
      00824C CC 9B 75         [ 2]  523         jp UPDATLAST 
      00824F                        524 FORGET6: ; tried to forget a RAM or system word 
                                    525 ; ( ca na -- )
      00824F 1D 00 02         [ 2]  526         subw x,#CELLL 
      008252 90 BE 2A         [ 2]  527         ldw y,SP0 
      008255 FF               [ 2]  528         ldw (x),y  
      008256 CD 88 14         [ 4]  529         call ULESS
      008259 CD 84 67         [ 4]  530         call QBRAN 
      00825C 82 7F                  531         .word PROTECTED 
      00825E CD 93 3B         [ 4]  532         call ABORQ 
      008261 1D                     533         .byte 29
      008262 20 46 6F 72 20 52 41   534         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      00827F                        535 PROTECTED:
      00827F CD 93 3B         [ 4]  536         call ABORQ
      008282 0A                     537         .byte 10
      008283 20 50 72 6F 74 65 63   538         .ascii " Protected"
             74 65 64
      00828D                        539 FORGET2: ; no name or not found in dictionary 
      00828D CD 93 3B         [ 4]  540         call ABORQ
      008290 05                     541         .byte 5
      008291 20 77 68 61 74         542         .ascii " what"
      008296                        543 FORGET4:
      008296 CC 85 4F         [ 2]  544         jp DROP 
                                    545 
                                    546 
                                    547 ;---------------------------------
                                    548 ; if na is variable 
                                    549 ; free variable data  
                                    550 ; FREEVAR ( na -- )
                                    551 ;---------------------------------
      008299 81 D1                  552         .word LINK 
                           00021B   553         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00829B 07                     554         .byte 7 
      00829C 46 52 45 45 56 41 52   555         .ascii "FREEVAR"
      0082A3                        556 FREEVAR:
      0082A3 CD 85 59         [ 4]  557         call DUPP ; ( na na -- )
      0082A6 CD 84 D0         [ 4]  558         CALL CAT  ; ( na c -- )
      0082A9 CD 8A 4E         [ 4]  559         call ONEP ;
      0082AC CD 87 54         [ 4]  560         CALL PLUS ; ( na c+1 -- ca ) 
      0082AF CD 8A 4E         [ 4]  561         call ONEP ; ( ca+ -- ) to get routne address 
      0082B2 CD 85 59         [ 4]  562         call DUPP ; ( ca+ ca+ -- )
      0082B5 CD 84 B2         [ 4]  563         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      0082B8 CD 84 34         [ 4]  564         call DOLIT 
      0082BB 86 06                  565         .word DOVAR ; if routine address is DOVAR then variable 
      0082BD CD 87 F5         [ 4]  566         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      0082C0 CD 84 67         [ 4]  567         call QBRAN 
      0082C3 82 D9                  568         .word FREEVAR4 
      0082C5 CD 84 34         [ 4]  569         call DOLIT 
      0082C8 00 02                  570         .word 2 
      0082CA CD 87 54         [ 4]  571         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      0082CD CD 84 B2         [ 4]  572         call AT 
      0082D0 CD 86 A7         [ 4]  573         call VPP   
      0082D3 CD 84 9B         [ 4]  574         call STORE 
      0082D6 CC 9B B5         [ 2]  575         jp UPDATVP 
      0082D9                        576 FREEVAR4: ; not variable
      0082D9 CC 85 4F         [ 2]  577         jp  DROP 
                                    578 
                                    579 ;    SEED ( n -- )
                                    580 ; Initialize PRNG seed with n 
      0082DC 82 9B                  581         .word LINK 
                           00025E   582         LINK=. 
      0082DE 04                     583         .byte 4 
      0082DF 53 45 45 44            584         .ascii "SEED" 
      0082E3                        585 SEED:
      0082E3 90 93            [ 1]  586         ldw y,x 
      0082E5 1C 00 02         [ 2]  587         addw x,#CELLL
      0082E8 90 FE            [ 2]  588         ldw y,(y)
      0082EA 90 9E            [ 1]  589         ld a,yh 
      0082EC B7 36            [ 1]  590         ld SEEDX,a 
      0082EE 90 9F            [ 1]  591         ld a,yl 
      0082F0 B7 38            [ 1]  592         ld SEEDY,a 
      0082F2 81               [ 4]  593         ret 
                                    594 
                                    595 ;    RANDOM ( u1 -- u2 )
                                    596 ; Pseudo random number betwen 0 and u1-1
      0082F3 82 DE                  597         .word LINK 
                           000275   598         LINK=.
      0082F5 06                     599         .byte 6
      0082F6 52 41 4E 44 4F 4D      600         .ascii "RANDOM" 
      0082FC                        601 RANDOM:
                                    602 ;local variable 
                           000001   603         SPSAVE=1
                           000002   604         VSIZE=2 
      0082FC 52 02            [ 2]  605         sub sp,#VSIZE
      0082FE 1F 01            [ 2]  606         ldw (SPSAVE,sp),x  
                                    607 ; XTEMP=(SEEDX<<5)^SEEDX 
      008300 90 93            [ 1]  608         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      008302 90 FE            [ 2]  609         ldw y,(y)
      008304 90 BF 24         [ 2]  610         ldw YTEMP,y 
      008307 BE 36            [ 2]  611 	ldw x,SEEDX 
      008309 58               [ 2]  612 	sllw x 
      00830A 58               [ 2]  613 	sllw x 
      00830B 58               [ 2]  614 	sllw x 
      00830C 58               [ 2]  615 	sllw x 
      00830D 58               [ 2]  616 	sllw x 
      00830E 9E               [ 1]  617 	ld a,xh 
      00830F B8 36            [ 1]  618 	xor a,SEEDX 
      008311 B7 22            [ 1]  619 	ld XTEMP,a 
      008313 9F               [ 1]  620 	ld a,xl 
      008314 B8 37            [ 1]  621 	xor a,SEEDX+1 
      008316 B7 23            [ 1]  622 	ld XTEMP+1,a 
                                    623 ; SEEDX=SEEDY 
      008318 BE 38            [ 2]  624 	ldw x,SEEDY 
      00831A BF 36            [ 2]  625 	ldw SEEDX,x  
                                    626 ; SEEDY=SEEDY^(SEEDY>>1)
      00831C 54               [ 2]  627 	srlw x 
      00831D 9E               [ 1]  628 	ld a,xh 
      00831E B8 38            [ 1]  629 	xor a,SEEDY 
      008320 B7 38            [ 1]  630 	ld SEEDY,a  
      008322 9F               [ 1]  631 	ld a,xl 
      008323 B8 39            [ 1]  632 	xor a,SEEDY+1 
      008325 B7 39            [ 1]  633 	ld SEEDY+1,a 
                                    634 ; XTEMP>>3 
      008327 BE 22            [ 2]  635 	ldw x,XTEMP 
      008329 54               [ 2]  636 	srlw x 
      00832A 54               [ 2]  637 	srlw x 
      00832B 54               [ 2]  638 	srlw x 
                                    639 ; x=XTEMP^x 
      00832C 9E               [ 1]  640 	ld a,xh 
      00832D B8 22            [ 1]  641 	xor a,XTEMP 
      00832F 95               [ 1]  642 	ld xh,a 
      008330 9F               [ 1]  643 	ld a,xl 
      008331 B8 23            [ 1]  644 	xor a,XTEMP+1  
      008333 97               [ 1]  645 	ld xl,a 
                                    646 ; SEEDY=x^SEEDY 
      008334 B8 39            [ 1]  647 	xor a,SEEDY+1
      008336 97               [ 1]  648 	ld xl,a 
      008337 9E               [ 1]  649 	ld a,xh 
      008338 B8 38            [ 1]  650 	xor a,SEEDY
      00833A 95               [ 1]  651 	ld xh,a 
      00833B BF 38            [ 2]  652 	ldw SEEDY,x 
                                    653 ; return SEEDY modulo YTEMP  
      00833D 90 BE 24         [ 2]  654 	ldw y,YTEMP  
      008340 65               [ 2]  655 	divw x,y 
      008341 1E 01            [ 2]  656 	ldw x,(SPSAVE,sp)
      008343 FF               [ 2]  657         ldw (x),y 
      008344 5B 02            [ 2]  658         addw sp,#VSIZE 
      008346 81               [ 4]  659 	ret 
                                    660 
                                    661 
                                    662 ;;
                                    663 ;; get millisecond counter 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    664 ;; msec ( -- u )
                                    665 ;; Added by Picatout 2020-04-26
      008347 82 F5                  666         .word LINK  
                           0002C9   667         LINK = . 
      008349 04                     668         .byte 4
      00834A 4D 53 45 43            669         .ascii "MSEC"
      00834E                        670 MSEC: 
      00834E 1D 00 02         [ 2]  671         subw x,#CELLL 
      008351 90 BE 2E         [ 2]  672         ldw y,MS 
      008354 FF               [ 2]  673         ldw (x),y 
      008355 81               [ 4]  674         ret 
                                    675 
                                    676 ; suspend execution for u msec 
                                    677 ;  pause ( u -- )
      008356 83 49                  678         .word LINK 
                           0002D8   679         LINK=.
      008358 05                     680         .byte 5 
      008359 50 41 55 53 45         681         .ascii "PAUSE"
      00835E                        682 PAUSE:
      00835E 90 93            [ 1]  683         ldw y,x
      008360 90 FE            [ 2]  684         ldw y,(y)
      008362 72 B9 00 2E      [ 2]  685         addw y,MS 
      008366 8F               [10]  686 1$:     wfi  
      008367 90 B3 2E         [ 2]  687         cpw y,MS  
      00836A 26 FA            [ 1]  688         jrne 1$        
      00836C 1C 00 02         [ 2]  689         addw x,#CELLL 
      00836F 81               [ 4]  690         ret 
                                    691 
                                    692 ; initialize count down timer 
                                    693 ;  TIMER ( u -- )  milliseconds 
      008370 83 58                  694         .word LINK 
                           0002F2   695         LINK=.
      008372 05                     696         .byte 5 
      008373 54 49 4D 45 52         697         .ascii "TIMER" 
      008378                        698 TIMER:
      008378 90 93            [ 1]  699         ldw y,x
      00837A 90 FE            [ 2]  700         ldw y,(y) 
      00837C 90 BF 30         [ 2]  701         ldw CNTDWN,y
      00837F 1C 00 02         [ 2]  702         addw x,#CELLL 
      008382 81               [ 4]  703         ret 
                                    704 
                                    705 ; check for TIMER exiparition 
                                    706 ;  TIMEOUT? ( -- 0|-1 )
      008383 83 72                  707         .word LINK 
                           000305   708         LINK=. 
      008385 08                     709         .byte 8 
      008386 54 49 4D 45 4F 55 54   710         .ascii "TIMEOUT?"
             3F
      00838E                        711 TIMEOUTQ: 
      00838E 4F               [ 1]  712         clr a
      00838F 1D 00 02         [ 2]  713         subw x,#CELLL 
      008392 90 BE 30         [ 2]  714         ldw y,CNTDWN 
      008395 26 01            [ 1]  715         jrne 1$ 
      008397 43               [ 1]  716         cpl a 
      008398 E7 01            [ 1]  717 1$:     ld (1,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00839A F7               [ 1]  718         ld (x),a 
      00839B 81               [ 4]  719         ret         
                                    720 
                                    721 ; reboot MCU 
                                    722 ; REBOOT ( -- )
      00839C 83 85                  723         .word LINK 
                           00031E   724         LINK=. 
      00839E 06                     725         .byte 6 
      00839F 52 45 42 4F 4F 54      726         .ascii "REBOOT"
      0083A5                        727 reboot:
      0083A5 CC 80 80         [ 2]  728         jp NonHandledInterrupt
                                    729 
                                    730 ; compile to flash memory 
                                    731 ; TO-FLASH ( -- )
      0083A8 83 9E                  732         .word LINK 
                           00032A   733         LINK=.
      0083AA 08                     734         .byte 8
      0083AB 54 4F 2D 46 4C 41 53   735         .ascii "TO-FLASH"
             48
      0083B3                        736 TOFLASH:
      0083B3 CD 86 D8         [ 4]  737         call RAMLAST 
      0083B6 CD 84 B2         [ 4]  738         call AT 
      0083B9 CD 87 03         [ 4]  739         call QDUP 
      0083BC CD 84 67         [ 4]  740         call QBRAN
      0083BF 83 E2                  741         .word 1$
      0083C1 CD 93 3B         [ 4]  742         call ABORQ 
      0083C4 1D                     743         .byte 29
      0083C5 20 4E 6F 74 20 77 68   744         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      0083E2 90 AE FF FF      [ 2]  745 1$:     ldw y,#-1 
      0083E6 90 BF 1E         [ 2]  746         ldw UTFLASH,y
      0083E9 81               [ 4]  747         ret 
                                    748 
                                    749 ; compile to RAM 
                                    750 ; TO-RAM ( -- )
      0083EA 83 AA                  751         .word LINK 
                           00036C   752         LINK=.
      0083EC 06                     753         .byte 6 
      0083ED 54 4F 2D 52 41 4D      754         .ascii "TO-RAM"
      0083F3                        755 TORAM:
      0083F3 90 5F            [ 1]  756         clrw y 
      0083F5 90 BF 1E         [ 2]  757         ldw UTFLASH,y 
      0083F8 81               [ 4]  758         ret 
                                    759         
                                    760 
                                    761 ;; Device dependent I/O
                                    762 ;       ?RX     ( -- c T | F )
                                    763 ;         Return input byte and true, or false.
      0083F9 83 EC                  764         .word      LINK 
                           00037B   765 LINK	= .
      0083FB 04                     766         .byte      4
      0083FC 3F 4B 45 59            767         .ascii     "?KEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      008400                        768 QKEY:
      008400 90 5F            [ 1]  769         CLRW Y 
      008402 72 0B 52 40 0B   [ 2]  770         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      008407 C6 52 41         [ 1]  771         LD    A,UART_DR   ;get char in A
      00840A 1D 00 02         [ 2]  772 	SUBW	X,#2
      00840D E7 01            [ 1]  773         LD     (1,X),A
      00840F 7F               [ 1]  774 	CLR	(X)
      008410 90 53            [ 2]  775         CPLW     Y
      008412                        776 INCH:
      008412 1D 00 02         [ 2]  777 	SUBW	X,#2
      008415 FF               [ 2]  778         LDW     (X),Y
      008416 81               [ 4]  779         RET
                                    780 
                                    781 ;       TX!     ( c -- )
                                    782 ;       Send character c to  output device.
      008417 83 FB                  783         .word      LINK
                           000399   784 LINK	= .
      008419 04                     785         .byte      4
      00841A 45 4D 49 54            786         .ascii     "EMIT"
      00841E                        787 EMIT:
      00841E E6 01            [ 1]  788         LD     A,(1,X)
      008420 1C 00 02         [ 2]  789 	ADDW	X,#2
      008423 72 0F 52 40 FB   [ 2]  790 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      008428 C7 52 41         [ 1]  791         LD    UART_DR,A   ;send A
      00842B 81               [ 4]  792         RET
                                    793 
                                    794 ;; The kernel
                                    795 
                                    796 ;       doLIT   ( -- w )
                                    797 ;       Push an inline literal.
      00842C 84 19                  798         .word      LINK
                           0003AE   799 LINK	= 	.
      00842E 45                     800 	.byte      COMPO+5
      00842F 44 4F 4C 49 54         801         .ascii     "DOLIT"
      008434                        802 DOLIT:
      008434 1D 00 02         [ 2]  803 	SUBW X,#2
      008437 16 01            [ 2]  804         ldw y,(1,sp)
      008439 90 FE            [ 2]  805         ldw y,(y)
      00843B FF               [ 2]  806         ldw (x),y
      00843C 90 85            [ 2]  807         popw y 
      00843E 90 EC 02         [ 2]  808         jp (2,y)
                                    809 
                                    810 ;       next    ( -- )
                                    811 ;       Code for  single index loop.
      008441 84 2E                  812         .word      LINK
                           0003C3   813 LINK	= 	.
      008443 44                     814 	.byte      COMPO+4
      008444 6E 65 78 74            815         .ascii     "next"
      008448                        816 DONXT:
      008448 16 03            [ 2]  817 	LDW Y,(3,SP)
      00844A 90 5A            [ 2]  818 	DECW Y
      00844C 2A 07            [ 1]  819 	JRPL NEX1 ; jump if N=0
      00844E 90 85            [ 2]  820 	POPW Y
      008450 5B 02            [ 2]  821         addw sp,#2
      008452 90 EC 02         [ 2]  822         JP (2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      008455                        823 NEX1:
      008455 17 03            [ 2]  824         LDW (3,SP),Y
      008457 90 85            [ 2]  825         POPW Y
      008459 90 FE            [ 2]  826 	LDW Y,(Y)
      00845B 90 FC            [ 2]  827 	JP (Y)
                                    828 
                                    829 ;       ?branch ( f -- )
                                    830 ;       Branch if flag is zero.
      00845D 84 43                  831         .word      LINK
                           0003DF   832 LINK	= 	.
      00845F 47                     833 	.byte      COMPO+7
      008460 3F 42 52 41 4E 43 48   834         .ascii     "?BRANCH"
      008467                        835 QBRAN:	
      008467 90 93            [ 1]  836         LDW Y,X
      008469 1C 00 02         [ 2]  837 	ADDW X,#2
      00846C 90 FE            [ 2]  838 	LDW Y,(Y)
      00846E 27 0E            [ 1]  839         JREQ     BRAN
      008470 90 85            [ 2]  840 	POPW Y
      008472 90 EC 02         [ 2]  841 	JP (2,Y)
                                    842         
                                    843 ;       branch  ( -- )
                                    844 ;       Branch to an inline address.
      008475 84 5F                  845         .word      LINK
                           0003F7   846 LINK	= 	.
      008477 46                     847 	.byte      COMPO+6
      008478 42 52 41 4E 43 48      848         .ascii     "BRANCH"
      00847E                        849 BRAN:
      00847E 90 85            [ 2]  850         POPW Y
      008480 90 FE            [ 2]  851 	LDW Y,(Y)
      008482 90 FC            [ 2]  852         JP     (Y)
                                    853 
                                    854 ;       EXECUTE ( ca -- )
                                    855 ;       Execute  word at ca.
      008484 84 77                  856         .word      LINK
                           000406   857 LINK	= 	.
      008486 07                     858         .byte       7
      008487 45 58 45 43 55 54 45   859         .ascii     "EXECUTE"
      00848E                        860 EXECU:
      00848E 90 93            [ 1]  861         LDW Y,X
      008490 1C 00 02         [ 2]  862 	ADDW X,#2
      008493 90 FE            [ 2]  863 	LDW  Y,(Y)
      008495 90 FC            [ 2]  864         JP   (Y)
                                    865 
                           000001   866 OPTIMIZE = 1
                           000001   867 .if OPTIMIZE 
                                    868 ; remplacement de CALL EXIT par 
                                    869 ; le opcode de RET.
                                    870 ; Voir modification au code de ";"
                           000000   871 .else 
                                    872 ;       EXIT    ( -- )
                                    873 ;       Terminate a colon definition.
                                    874         .word      LINK
                                    875 LINK = .
                                    876         .byte      4
                                    877         .ascii     "EXIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    878 EXIT:
                                    879         POPW Y
                                    880         RET
                                    881 .endif 
                                    882 
                                    883 ;       !       ( w a -- )
                                    884 ;       Pop  data stack to memory.
      008497 84 86                  885         .word      LINK
                           000419   886 LINK = .
      008499 01                     887         .byte      1
      00849A 21                     888         .ascii     "!"
      00849B                        889 STORE:
      00849B 90 93            [ 1]  890         LDW Y,X
      00849D 90 FE            [ 2]  891         LDW Y,(Y)    ;Y=a
      00849F 90 BF 24         [ 2]  892         LDW YTEMP,Y
      0084A2 90 93            [ 1]  893         LDW Y,X
      0084A4 90 EE 02         [ 2]  894         LDW Y,(2,Y)
      0084A7 91 CF 24         [ 5]  895         LDW [YTEMP],Y ;store w at a
      0084AA 1C 00 04         [ 2]  896         ADDW X,#4 ; DDROP 
      0084AD 81               [ 4]  897         RET     
                                    898 
                                    899 ;       @       ( a -- w )
                                    900 ;       Push memory location to stack.
      0084AE 84 99                  901         .word      LINK
                           000430   902 LINK	= 	.
      0084B0 01                     903         .byte    1
      0084B1 40                     904         .ascii	"@"
      0084B2                        905 AT:
      0084B2 90 93            [ 1]  906         LDW Y,X     ;Y = a
      0084B4 90 FE            [ 2]  907         LDW Y,(Y)   ; address 
      0084B6 90 FE            [ 2]  908         LDW Y,(Y)   ; value 
      0084B8 FF               [ 2]  909         LDW (X),Y ;w = @Y
      0084B9 81               [ 4]  910         RET     
                                    911 
                                    912 ;       C!      ( c b -- )
                                    913 ;       Pop  data stack to byte memory.
      0084BA 84 B0                  914         .word      LINK
                           00043C   915 LINK	= .
      0084BC 02                     916         .byte      2
      0084BD 43 21                  917         .ascii     "C!"
      0084BF                        918 CSTOR:
      0084BF 90 93            [ 1]  919         LDW Y,X
      0084C1 90 FE            [ 2]  920 	LDW Y,(Y)    ;Y=b
      0084C3 E6 03            [ 1]  921         LD A,(3,X)    ;D = c
      0084C5 90 F7            [ 1]  922         LD  (Y),A     ;store c at b
      0084C7 1C 00 04         [ 2]  923 	ADDW X,#4 ; DDROP 
      0084CA 81               [ 4]  924         RET     
                                    925 
                                    926 ;       C@      ( b -- c )
                                    927 ;       Push byte in memory to  stack.
      0084CB 84 BC                  928         .word      LINK
                           00044D   929 LINK	= 	.
      0084CD 02                     930         .byte      2
      0084CE 43 40                  931         .ascii     "C@"
      0084D0                        932 CAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0084D0 90 93            [ 1]  933         LDW Y,X     ;Y=b
      0084D2 90 FE            [ 2]  934         LDW Y,(Y)
      0084D4 90 F6            [ 1]  935         LD A,(Y)
      0084D6 E7 01            [ 1]  936         LD (1,X),A
      0084D8 7F               [ 1]  937         CLR (X)
      0084D9 81               [ 4]  938         RET     
                                    939 
                                    940 ;       RP@     ( -- a )
                                    941 ;       Push current RP to data stack.
      0084DA 84 CD                  942         .word      LINK
                           00045C   943 LINK	= .
      0084DC 03                     944         .byte      3
      0084DD 52 50 40               945         .ascii     "RP@"
      0084E0                        946 RPAT:
      0084E0 90 96            [ 1]  947         LDW Y,SP    ;save return addr
      0084E2 1D 00 02         [ 2]  948         SUBW X,#2
      0084E5 FF               [ 2]  949         LDW (X),Y
      0084E6 81               [ 4]  950         RET     
                                    951 
                                    952 ;       RP!     ( a -- )
                                    953 ;       Set  return stack pointer.
      0084E7 84 DC                  954         .word      LINK
                           000469   955 LINK	= 	. 
      0084E9 43                     956 	.byte      COMPO+3
      0084EA 52 50 21               957         .ascii     "RP!"
      0084ED                        958 RPSTO:
      0084ED 90 85            [ 2]  959         POPW Y
      0084EF 90 BF 24         [ 2]  960         LDW YTEMP,Y
      0084F2 90 93            [ 1]  961         LDW Y,X
      0084F4 90 FE            [ 2]  962         LDW Y,(Y)
      0084F6 90 94            [ 1]  963         LDW SP,Y
      0084F8 1C 00 02         [ 2]  964         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      0084FB 92 CC 24         [ 5]  965         JP [YTEMP]
                                    966 
                                    967 ;       R>      ( -- w )
                                    968 ;       Pop return stack to data stack.
      0084FE 84 E9                  969         .word      LINK
                           000480   970 LINK	= 	. 
      008500 42                     971 	.byte      COMPO+2
      008501 52 3E                  972         .ascii     "R>"
      008503                        973 RFROM:
      008503 90 85            [ 2]  974         POPW Y    ;save return addr
      008505 90 BF 24         [ 2]  975         LDW YTEMP,Y
      008508 90 85            [ 2]  976         POPW Y
      00850A 1D 00 02         [ 2]  977         SUBW X,#2
      00850D FF               [ 2]  978         LDW (X),Y
      00850E 92 CC 24         [ 5]  979         JP [YTEMP]
                                    980 
                                    981 ;       R@      ( -- w )
                                    982 ;       Copy top of return stack to stack.
      008511 85 00                  983         .word      LINK
                           000493   984 LINK	= 	. 
      008513 02                     985         .byte      2
      008514 52 40                  986         .ascii     "R@"
      008516                        987 RAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      008516 16 03            [ 2]  988         ldw y,(3,sp)
      008518 1D 00 02         [ 2]  989         subw x,#CELLL 
      00851B FF               [ 2]  990         ldw (x),y 
      00851C 81               [ 4]  991         ret 
                                    992 
                                    993 ;       >R      ( w -- )
                                    994 ;       Push data stack to return stack.
      00851D 85 13                  995         .word      LINK
                           00049F   996 LINK	= 	. 
      00851F 42                     997 	.byte      COMPO+2
      008520 3E 52                  998         .ascii     ">R"
      008522                        999 TOR:
      008522 90 85            [ 2] 1000         POPW Y    ;save return addr
      008524 90 BF 24         [ 2] 1001         LDW YTEMP,Y
      008527 90 93            [ 1] 1002         LDW Y,X
      008529 90 FE            [ 2] 1003         LDW Y,(Y)
      00852B 90 89            [ 2] 1004         PUSHW Y    ;restore return addr
      00852D 1C 00 02         [ 2] 1005         ADDW X,#2
      008530 92 CC 24         [ 5] 1006         JP [YTEMP]
                                   1007 
                                   1008 ;       SP@     ( -- a )
                                   1009 ;       Push current stack pointer.
      008533 85 1F                 1010         .word      LINK
                           0004B5  1011 LINK	= 	. 
      008535 03                    1012         .byte      3
      008536 53 50 40              1013         .ascii     "SP@"
      008539                       1014 SPAT:
      008539 90 93            [ 1] 1015 	LDW Y,X
      00853B 1D 00 02         [ 2] 1016         SUBW X,#2
      00853E FF               [ 2] 1017 	LDW (X),Y
      00853F 81               [ 4] 1018         RET     
                                   1019 
                                   1020 ;       SP!     ( a -- )
                                   1021 ;       Set  data stack pointer.
      008540 85 35                 1022         .word      LINK
                           0004C2  1023 LINK	= 	. 
      008542 03                    1024         .byte      3
      008543 53 50 21              1025         .ascii     "SP!"
      008546                       1026 SPSTO:
      008546 FE               [ 2] 1027         LDW     X,(X)     ;X = a
      008547 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;       DROP    ( w -- )
                                   1031 ;       Discard top stack item.
      008548 85 42                 1032         .word      LINK
                           0004CA  1033 LINK	= 	. 
      00854A 04                    1034         .byte      4
      00854B 44 52 4F 50           1035         .ascii     "DROP"
      00854F                       1036 DROP:
      00854F 1C 00 02         [ 2] 1037         ADDW X,#2     
      008552 81               [ 4] 1038         RET     
                                   1039 
                                   1040 ;       DUP     ( w -- w w )
                                   1041 ;       Duplicate  top stack item.
      008553 85 4A                 1042         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           0004D5  1043 LINK	= 	. 
      008555 03                    1044         .byte      3
      008556 44 55 50              1045         .ascii     "DUP"
      008559                       1046 DUPP:
      008559 90 93            [ 1] 1047 	LDW Y,X
      00855B 1D 00 02         [ 2] 1048         SUBW X,#2
      00855E 90 FE            [ 2] 1049 	LDW Y,(Y)
      008560 FF               [ 2] 1050 	LDW (X),Y
      008561 81               [ 4] 1051         RET     
                                   1052 
                                   1053 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1054 ;       Exchange top two stack items.
      008562 85 55                 1055         .word      LINK
                           0004E4  1056 LINK	= 	. 
      008564 04                    1057         .byte      4
      008565 53 57 41 50           1058         .ascii     "SWAP"
      008569                       1059 SWAPP:
      008569 90 93            [ 1] 1060         LDW Y,X
      00856B 90 FE            [ 2] 1061         LDW Y,(Y)
      00856D 90 BF 24         [ 2] 1062         LDW YTEMP,Y
      008570 90 93            [ 1] 1063         LDW Y,X
      008572 90 EE 02         [ 2] 1064         LDW Y,(2,Y)
      008575 FF               [ 2] 1065         LDW (X),Y
      008576 90 BE 24         [ 2] 1066         LDW Y,YTEMP
      008579 EF 02            [ 2] 1067         LDW (2,X),Y
      00857B 81               [ 4] 1068         RET     
                                   1069 
                                   1070 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1071 ;       Copy second stack item to top.
      00857C 85 64                 1072         .word      LINK
                           0004FE  1073 LINK	= . 
      00857E 04                    1074         .byte      4
      00857F 4F 56 45 52           1075         .ascii     "OVER"
      008583                       1076 OVER:
      008583 1D 00 02         [ 2] 1077         SUBW X,#2
      008586 90 93            [ 1] 1078         LDW Y,X
      008588 90 EE 04         [ 2] 1079         LDW Y,(4,Y)
      00858B FF               [ 2] 1080         LDW (X),Y
      00858C 81               [ 4] 1081         RET     
                                   1082 
                                   1083 ;       0<      ( n -- t )
                                   1084 ;       Return true if n is negative.
      00858D 85 7E                 1085         .word      LINK
                           00050F  1086 LINK	= . 
      00858F 02                    1087         .byte      2
      008590 30 3C                 1088         .ascii     "0<"
      008592                       1089 ZLESS:
      008592 A6 FF            [ 1] 1090         LD A,#0xFF
      008594 90 93            [ 1] 1091         LDW Y,X
      008596 90 FE            [ 2] 1092         LDW Y,(Y)
      008598 2B 01            [ 1] 1093         JRMI     ZL1
      00859A 4F               [ 1] 1094         CLR A   ;false
      00859B F7               [ 1] 1095 ZL1:    LD     (X),A
      00859C E7 01            [ 1] 1096         LD (1,X),A
      00859E 81               [ 4] 1097 	RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1098 
                                   1099 ;       AND     ( w w -- w )
                                   1100 ;       Bitwise AND.
      00859F 85 8F                 1101         .word      LINK
                           000521  1102 LINK	= . 
      0085A1 03                    1103         .byte      3
      0085A2 41 4E 44              1104         .ascii     "AND"
      0085A5                       1105 ANDD:
      0085A5 F6               [ 1] 1106         LD  A,(X)    ;D=w
      0085A6 E4 02            [ 1] 1107         AND A,(2,X)
      0085A8 E7 02            [ 1] 1108         LD (2,X),A
      0085AA E6 01            [ 1] 1109         LD A,(1,X)
      0085AC E4 03            [ 1] 1110         AND A,(3,X)
      0085AE E7 03            [ 1] 1111         LD (3,X),A
      0085B0 1C 00 02         [ 2] 1112         ADDW X,#2
      0085B3 81               [ 4] 1113         RET
                                   1114 
                                   1115 ;       OR      ( w w -- w )
                                   1116 ;       Bitwise inclusive OR.
      0085B4 85 A1                 1117         .word      LINK
                           000536  1118 LINK = . 
      0085B6 02                    1119         .byte      2
      0085B7 4F 52                 1120         .ascii     "OR"
      0085B9                       1121 ORR:
      0085B9 F6               [ 1] 1122         LD A,(X)    ;D=w
      0085BA EA 02            [ 1] 1123         OR A,(2,X)
      0085BC E7 02            [ 1] 1124         LD (2,X),A
      0085BE E6 01            [ 1] 1125         LD A,(1,X)
      0085C0 EA 03            [ 1] 1126         OR A,(3,X)
      0085C2 E7 03            [ 1] 1127         LD (3,X),A
      0085C4 1C 00 02         [ 2] 1128         ADDW X,#2
      0085C7 81               [ 4] 1129         RET
                                   1130 
                                   1131 ;       XOR     ( w w -- w )
                                   1132 ;       Bitwise exclusive OR.
      0085C8 85 B6                 1133         .word      LINK
                           00054A  1134 LINK	= . 
      0085CA 03                    1135         .byte      3
      0085CB 58 4F 52              1136         .ascii     "XOR"
      0085CE                       1137 XORR:
      0085CE F6               [ 1] 1138         LD A,(X)    ;D=w
      0085CF E8 02            [ 1] 1139         XOR A,(2,X)
      0085D1 E7 02            [ 1] 1140         LD (2,X),A
      0085D3 E6 01            [ 1] 1141         LD A,(1,X)
      0085D5 E8 03            [ 1] 1142         XOR A,(3,X)
      0085D7 E7 03            [ 1] 1143         LD (3,X),A
      0085D9 1C 00 02         [ 2] 1144         ADDW X,#2
      0085DC 81               [ 4] 1145         RET
                                   1146 
                                   1147 ;       UM+     ( u u -- udsum )
                                   1148 ;       Add two unsigned single
                                   1149 ;       and return a double sum.
      0085DD 85 CA                 1150         .word      LINK
                           00055F  1151 LINK	= . 
      0085DF 03                    1152         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0085E0 55 4D 2B              1153         .ascii     "UM+"
      0085E3                       1154 UPLUS:
      0085E3 A6 01            [ 1] 1155         LD A,#1
      0085E5 90 93            [ 1] 1156         LDW Y,X
      0085E7 90 EE 02         [ 2] 1157         LDW Y,(2,Y)
      0085EA 90 BF 24         [ 2] 1158         LDW YTEMP,Y
      0085ED 90 93            [ 1] 1159         LDW Y,X
      0085EF 90 FE            [ 2] 1160         LDW Y,(Y)
      0085F1 72 B9 00 24      [ 2] 1161         ADDW Y,YTEMP
      0085F5 EF 02            [ 2] 1162         LDW (2,X),Y
      0085F7 25 01            [ 1] 1163         JRC     UPL1
      0085F9 4F               [ 1] 1164         CLR A
      0085FA E7 01            [ 1] 1165 UPL1:   LD     (1,X),A
      0085FC 7F               [ 1] 1166         CLR (X)
      0085FD 81               [ 4] 1167         RET
                                   1168 
                                   1169 ;; System and user variables
                                   1170 
                                   1171 ;       doVAR   ( -- a )
                                   1172 ;       Code for VARIABLE and CREATE.
      0085FE 85 DF                 1173         .word      LINK
                           000580  1174 LINK	= . 
      008600 45                    1175 	.byte      COMPO+5
      008601 44 4F 56 41 52        1176         .ascii     "DOVAR"
      008606                       1177 DOVAR:
      008606 1D 00 02         [ 2] 1178 	SUBW X,#2
      008609 90 85            [ 2] 1179         POPW Y    ;get return addr (pfa)
      00860B 90 FE            [ 2] 1180         LDW Y,(Y) ; indirect address 
      00860D FF               [ 2] 1181         LDW (X),Y    ;push on stack
      00860E 81               [ 4] 1182         RET     ;go to RET of EXEC
                                   1183 
                                   1184 ;       BASE    ( -- a )
                                   1185 ;       Radix base for numeric I/O.
      00860F 86 00                 1186         .word      LINK        
                           000591  1187 LINK = . 
      008611 04                    1188         .byte      4
      008612 42 41 53 45           1189         .ascii     "BASE"
      008616                       1190 BASE:
      008616 90 AE 00 06      [ 2] 1191 	LDW Y,#UBASE 
      00861A 1D 00 02         [ 2] 1192 	SUBW X,#2
      00861D FF               [ 2] 1193         LDW (X),Y
      00861E 81               [ 4] 1194         RET
                                   1195 
                                   1196 ;       tmp     ( -- a )
                                   1197 ;       A temporary storage.
      00861F 86 11                 1198         .word      LINK
                                   1199         
                           0005A1  1200 LINK = . 
      008621 03                    1201 	.byte      3
      008622 54 4D 50              1202         .ascii     "TMP"
      008625                       1203 TEMP:
      008625 90 AE 00 08      [ 2] 1204 	LDW Y,#UTMP
      008629 1D 00 02         [ 2] 1205 	SUBW X,#2
      00862C FF               [ 2] 1206         LDW (X),Y
      00862D 81               [ 4] 1207         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1208 
                                   1209 ;       >IN     ( -- a )
                                   1210 ;        Hold parsing pointer.
      00862E 86 21                 1211         .word      LINK
                           0005B0  1212 LINK = . 
      008630 03                    1213         .byte      3
      008631 3E 49 4E              1214         .ascii    ">IN"
      008634                       1215 INN:
      008634 90 AE 00 0A      [ 2] 1216 	LDW Y,#UINN 
      008638 1D 00 02         [ 2] 1217 	SUBW X,#2
      00863B FF               [ 2] 1218         LDW (X),Y
      00863C 81               [ 4] 1219         RET
                                   1220 
                                   1221 ;       #TIB    ( -- a )
                                   1222 ;       Count in terminal input buffer.
      00863D 86 30                 1223         .word      LINK
                           0005BF  1224 LINK = . 
      00863F 04                    1225         .byte      4
      008640 23 54 49 42           1226         .ascii     "#TIB"
      008644                       1227 NTIB:
      008644 90 AE 00 0C      [ 2] 1228 	LDW Y,#UCTIB 
      008648 1D 00 02         [ 2] 1229 	SUBW X,#2
      00864B FF               [ 2] 1230         LDW (X),Y
      00864C 81               [ 4] 1231         RET
                                   1232 
                                   1233 ;       TBUF ( -- a )
                                   1234 ;       address of 128 bytes transaction buffer 
      00864D 86 3F                 1235         .word LINK 
                           0005CF  1236         LINK=.
      00864F 04                    1237         .byte 4 
      008650 54 42 55 46           1238         .ascii "TBUF"
      008654                       1239 TBUF:
      008654 90 AE 06 80      [ 2] 1240         ldw y,#ROWBUFF
      008658 1D 00 02         [ 2] 1241         subw x,#CELLL
      00865B FF               [ 2] 1242         ldw (x),y 
      00865C 81               [ 4] 1243         ret 
                                   1244 
                                   1245 ; systeme variable 
                                   1246 ; compilation destination 
                                   1247 ; TFLASH ( -- A )
      00865D 86 4F                 1248         .word LINK 
                           0005DF  1249         LINK=.
      00865F 06                    1250         .byte 6 
      008660 54 46 4C 41 53 48     1251         .ascii "TFLASH"         
      008666                       1252 TFLASH:
      008666 1D 00 02         [ 2] 1253         subw x,#CELLL 
      008669 90 AE 00 1E      [ 2] 1254         ldw y,#UTFLASH
      00866D FF               [ 2] 1255         ldw (x),y 
      00866E 81               [ 4] 1256         ret 
                                   1257 
                                   1258 ;       "EVAL   ( -- a )
                                   1259 ;       Execution vector of EVAL.
      00866F 86 5F                 1260         .word      LINK
                           0005F1  1261 LINK = . 
      008671 05                    1262         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      008672 27 45 56 41 4C        1263         .ascii     "'EVAL"
      008677                       1264 TEVAL:
      008677 90 AE 00 10      [ 2] 1265 	LDW Y,#UINTER 
      00867B 1D 00 02         [ 2] 1266 	SUBW X,#2
      00867E FF               [ 2] 1267         LDW (X),Y
      00867F 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;       HLD     ( -- a )
                                   1271 ;       Hold a pointer of output string.
      008680 86 71                 1272         .word      LINK
                           000602  1273 LINK = . 
      008682 03                    1274         .byte      3
      008683 48 4C 44              1275         .ascii     "HLD"
      008686                       1276 HLD:
      008686 90 AE 00 12      [ 2] 1277 	LDW Y,#UHLD 
      00868A 1D 00 02         [ 2] 1278 	SUBW X,#2
      00868D FF               [ 2] 1279         LDW (X),Y
      00868E 81               [ 4] 1280         RET
                                   1281 
                                   1282 ;       CONTEXT ( -- a )
                                   1283 ;       Start vocabulary search.
      00868F 86 82                 1284         .word      LINK
                           000611  1285 LINK = . 
      008691 07                    1286         .byte      7
      008692 43 4F 4E 54 45 58 54  1287         .ascii     "CONTEXT"
      008699                       1288 CNTXT:
      008699 90 AE 00 14      [ 2] 1289 	LDW Y,#UCNTXT
      00869D 1D 00 02         [ 2] 1290 	SUBW X,#2
      0086A0 FF               [ 2] 1291         LDW (X),Y
      0086A1 81               [ 4] 1292         RET
                                   1293 
                                   1294 ;       VP      ( -- a )
                                   1295 ;       Point to top of variables
      0086A2 86 91                 1296         .word      LINK
                           000624  1297 LINK = . 
      0086A4 02                    1298         .byte      2
      0086A5 56 50                 1299         .ascii     "VP"
      0086A7                       1300 VPP:
      0086A7 90 AE 00 16      [ 2] 1301 	LDW Y,#UVP 
      0086AB 1D 00 02         [ 2] 1302 	SUBW X,#2
      0086AE FF               [ 2] 1303         LDW (X),Y
      0086AF 81               [ 4] 1304         RET
                                   1305 
                                   1306 ;       CP    ( -- a )
                                   1307 ;       Pointer to top of FLASH 
      0086B0 86 A4                 1308         .word LINK 
                           000632  1309         LINK=.
      0086B2 02                    1310         .byte 2 
      0086B3 43 50                 1311         .ascii "CP"
      0086B5                       1312 CPP: 
      0086B5 90 AE 00 18      [ 2] 1313         ldw y,#UCP 
      0086B9 1D 00 02         [ 2] 1314         subw x,#CELLL 
      0086BC FF               [ 2] 1315         ldw (x),y 
      0086BD 81               [ 4] 1316         ret                
                                   1317 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1318 ;       LAST    ( -- a )
                                   1319 ;       Point to last name in dictionary.
      0086BE 86 B2                 1320         .word      LINK
                           000640  1321 LINK = . 
      0086C0 04                    1322         .byte      4
      0086C1 4C 41 53 54           1323         .ascii     "LAST"
      0086C5                       1324 LAST:
      0086C5 90 AE 00 1A      [ 2] 1325 	LDW Y,#ULAST 
      0086C9 1D 00 02         [ 2] 1326 	SUBW X,#2
      0086CC FF               [ 2] 1327         LDW (X),Y
      0086CD 81               [ 4] 1328         RET
                                   1329 
                                   1330 ; address of system variable URLAST 
                                   1331 ;       RAMLAST ( -- a )
                                   1332 ; RAM dictionary context 
      0086CE 86 C0                 1333         .word LINK 
                           000650  1334         LINK=. 
      0086D0 07                    1335         .byte 7  
      0086D1 52 41 4D 4C 41 53 54  1336         .ascii "RAMLAST" 
      0086D8                       1337 RAMLAST: 
      0086D8 90 AE 00 20      [ 2] 1338         ldw y,#URLAST 
      0086DC 1D 00 02         [ 2] 1339         subw x,#CELLL 
      0086DF FF               [ 2] 1340         ldw (x),y 
      0086E0 81               [ 4] 1341         ret 
                                   1342 
                                   1343 ; OFFSET ( -- a )
                                   1344 ; address of system variable OFFSET 
      0086E1 86 D0                 1345         .word LINK 
                           000663  1346         LINK=.
      0086E3 06                    1347         .byte 6
      0086E4 4F 46 46 53 45 54     1348         .ascii "OFFSET" 
      0086EA                       1349 OFFSET: 
      0086EA 1D 00 02         [ 2] 1350         subw x,#CELLL
      0086ED 90 AE 00 1C      [ 2] 1351         ldw y,#UOFFSET 
      0086F1 FF               [ 2] 1352         ldw (x),y 
      0086F2 81               [ 4] 1353         ret 
                                   1354 
                                   1355 ; adjust jump address adding OFFSET
                                   1356 ; ADR-ADJ ( a -- a+offset )
      0086F3                       1357 ADRADJ: 
      0086F3 CD 86 EA         [ 4] 1358         call OFFSET 
      0086F6 CD 84 B2         [ 4] 1359         call AT 
      0086F9 CC 87 54         [ 2] 1360         jp PLUS 
                                   1361 
                                   1362 
                                   1363 ;; Common functions
                                   1364 
                                   1365 ;       ?DUP    ( w -- w w | 0 )
                                   1366 ;       Dup tos if its is not zero.
      0086FC 86 E3                 1367         .word      LINK
                           00067E  1368 LINK = . 
      0086FE 04                    1369         .byte      4
      0086FF 3F 44 55 50           1370         .ascii     "?DUP"
      008703                       1371 QDUP:
      008703 90 93            [ 1] 1372         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      008705 90 FE            [ 2] 1373 	LDW Y,(Y)
      008707 27 04            [ 1] 1374         JREQ     QDUP1
      008709 1D 00 02         [ 2] 1375 	SUBW X,#2
      00870C FF               [ 2] 1376         LDW (X),Y
      00870D 81               [ 4] 1377 QDUP1:  RET
                                   1378 
                                   1379 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1380 ;       Rot 3rd item to top.
      00870E 86 FE                 1381         .word      LINK
                           000690  1382 LINK = . 
      008710 03                    1383         .byte      3
      008711 52 4F 54              1384         .ascii     "ROT"
      008714                       1385 ROT:
      008714 90 93            [ 1] 1386         ldw y,x 
      008716 90 FE            [ 2] 1387         ldw y,(y)
      008718 90 89            [ 2] 1388         pushw y 
      00871A 90 93            [ 1] 1389         ldw y,x 
      00871C 90 EE 04         [ 2] 1390         ldw y,(4,y)
      00871F FF               [ 2] 1391         ldw (x),y 
      008720 90 93            [ 1] 1392         ldw y,x 
      008722 90 EE 02         [ 2] 1393         ldw y,(2,y)
      008725 EF 04            [ 2] 1394         ldw (4,x),y 
      008727 90 85            [ 2] 1395         popw y 
      008729 EF 02            [ 2] 1396         ldw (2,x),y
      00872B 81               [ 4] 1397         ret 
                                   1398 
                                   1399 ;       2DROP   ( w w -- )
                                   1400 ;       Discard two items on stack.
      00872C 87 10                 1401         .word      LINK
                           0006AE  1402 LINK = . 
      00872E 05                    1403         .byte      5
      00872F 32 44 52 4F 50        1404         .ascii     "2DROP"
      008734                       1405 DDROP:
      008734 1C 00 04         [ 2] 1406         ADDW X,#4
      008737 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1410 ;       Duplicate top two items.
      008738 87 2E                 1411         .word      LINK
                           0006BA  1412 LINK = . 
      00873A 04                    1413         .byte      4
      00873B 32 44 55 50           1414         .ascii     "2DUP"
      00873F                       1415 DDUP:
      00873F 1D 00 04         [ 2] 1416         SUBW X,#4
      008742 90 93            [ 1] 1417         LDW Y,X
      008744 90 EE 06         [ 2] 1418         LDW Y,(6,Y)
      008747 EF 02            [ 2] 1419         LDW (2,X),Y
      008749 90 93            [ 1] 1420         LDW Y,X
      00874B 90 EE 04         [ 2] 1421         LDW Y,(4,Y)
      00874E FF               [ 2] 1422         LDW (X),Y
      00874F 81               [ 4] 1423         RET
                                   1424 
                                   1425 ;       +       ( w w -- sum )
                                   1426 ;       Add top two items.
      008750 87 3A                 1427         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           0006D2  1428 LINK = . 
      008752 01                    1429         .byte      1
      008753 2B                    1430         .ascii     "+"
      008754                       1431 PLUS:
      008754 90 93            [ 1] 1432         LDW Y,X
      008756 90 FE            [ 2] 1433         LDW Y,(Y)
      008758 90 BF 24         [ 2] 1434         LDW YTEMP,Y
      00875B 1C 00 02         [ 2] 1435         ADDW X,#2
      00875E 90 93            [ 1] 1436         LDW Y,X
      008760 90 FE            [ 2] 1437         LDW Y,(Y)
      008762 72 B9 00 24      [ 2] 1438         ADDW Y,YTEMP
      008766 FF               [ 2] 1439         LDW (X),Y
      008767 81               [ 4] 1440         RET
                                   1441 
                                   1442 ;       NOT     ( w -- w )
                                   1443 ;       One's complement of tos.
      008768 87 52                 1444         .word      LINK
                           0006EA  1445 LINK = . 
      00876A 03                    1446         .byte      3
      00876B 4E 4F 54              1447         .ascii     "NOT"
      00876E                       1448 INVER:
      00876E 90 93            [ 1] 1449         LDW Y,X
      008770 90 FE            [ 2] 1450         LDW Y,(Y)
      008772 90 53            [ 2] 1451         CPLW Y
      008774 FF               [ 2] 1452         LDW (X),Y
      008775 81               [ 4] 1453         RET
                                   1454 
                                   1455 ;       NEGATE  ( n -- -n )
                                   1456 ;       Two's complement of tos.
      008776 87 6A                 1457         .word      LINK
                           0006F8  1458 LINK = . 
      008778 06                    1459         .byte      6
      008779 4E 45 47 41 54 45     1460         .ascii     "NEGATE"
      00877F                       1461 NEGAT:
      00877F 90 93            [ 1] 1462         LDW Y,X
      008781 90 FE            [ 2] 1463         LDW Y,(Y)
      008783 90 50            [ 2] 1464         NEGW Y
      008785 FF               [ 2] 1465         LDW (X),Y
      008786 81               [ 4] 1466         RET
                                   1467 
                                   1468 ;       DNEGATE ( d -- -d )
                                   1469 ;       Two's complement of top double.
      008787 87 78                 1470         .word      LINK
                           000709  1471 LINK = . 
      008789 07                    1472         .byte      7
      00878A 44 4E 45 47 41 54 45  1473         .ascii     "DNEGATE"
      008791                       1474 DNEGA:
      008791 90 93            [ 1] 1475         LDW Y,X
      008793 90 FE            [ 2] 1476 	LDW Y,(Y)
      008795 90 53            [ 2] 1477         CPLW Y     
      008797 90 BF 24         [ 2] 1478 	LDW YTEMP,Y
      00879A 90 93            [ 1] 1479         LDW Y,X
      00879C 90 EE 02         [ 2] 1480         LDW Y,(2,Y)
      00879F 90 53            [ 2] 1481         CPLW Y
      0087A1 72 A9 00 01      [ 2] 1482         addw y,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0087A5 EF 02            [ 2] 1483         LDW (2,X),Y
      0087A7 90 BE 24         [ 2] 1484         LDW Y,YTEMP
      0087AA 24 02            [ 1] 1485         JRNC DN1 
      0087AC 90 5C            [ 1] 1486         INCW Y
      0087AE FF               [ 2] 1487 DN1:    LDW (X),Y
      0087AF 81               [ 4] 1488         RET
                                   1489 
                                   1490 
                                   1491 ;       S>D ( n -- d )
                                   1492 ; convert single integer to double 
      0087B0 87 89                 1493         .word LINK 
                           000732  1494         LINK=. 
      0087B2 03                    1495         .byte 3 
      0087B3 53 3E 44              1496         .ascii "S>D"
      0087B6                       1497 STOD: 
      0087B6 1D 00 02         [ 2] 1498         subw x,#CELLL 
      0087B9 90 5F            [ 1] 1499         clrw y 
      0087BB FF               [ 2] 1500         ldw (x),y 
      0087BC 90 93            [ 1] 1501         ldw y,x 
      0087BE 90 EE 02         [ 2] 1502         ldw y,(2,y)
      0087C1 2A 05            [ 1] 1503         jrpl 1$ 
      0087C3 90 AE FF FF      [ 2] 1504         ldw y,#-1
      0087C7 FF               [ 2] 1505         ldw (x),y 
      0087C8 81               [ 4] 1506 1$:     ret 
                                   1507 
                                   1508 
                                   1509 
                                   1510 
                                   1511 ;       -       ( n1 n2 -- n1-n2 )
                                   1512 ;       Subtraction.
      0087C9 87 B2                 1513         .word      LINK
                           00074B  1514 LINK = . 
      0087CB 01                    1515         .byte      1
      0087CC 2D                    1516         .ascii     "-"
      0087CD                       1517 SUBB:
      0087CD 90 93            [ 1] 1518         LDW Y,X
      0087CF 90 FE            [ 2] 1519         LDW Y,(Y)
      0087D1 90 BF 24         [ 2] 1520         LDW YTEMP,Y
      0087D4 1C 00 02         [ 2] 1521         ADDW X,#2
      0087D7 90 93            [ 1] 1522         LDW Y,X
      0087D9 90 FE            [ 2] 1523         LDW Y,(Y)
      0087DB 72 B2 00 24      [ 2] 1524         SUBW Y,YTEMP
      0087DF FF               [ 2] 1525         LDW (X),Y
      0087E0 81               [ 4] 1526         RET
                                   1527 
                                   1528 ;       ABS     ( n -- n )
                                   1529 ;       Return  absolute value of n.
      0087E1 87 CB                 1530         .word      LINK
                           000763  1531 LINK = . 
      0087E3 03                    1532         .byte      3
      0087E4 41 42 53              1533         .ascii     "ABS"
      0087E7                       1534 ABSS:
      0087E7 90 93            [ 1] 1535         LDW Y,X
      0087E9 90 FE            [ 2] 1536 	LDW Y,(Y)
      0087EB 2A 03            [ 1] 1537         JRPL     AB1     ;negate:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0087ED 90 50            [ 2] 1538         NEGW     Y     ;else negate hi byte
      0087EF FF               [ 2] 1539         LDW (X),Y
      0087F0 81               [ 4] 1540 AB1:    RET
                                   1541 
                                   1542 ;       =       ( w w -- t )
                                   1543 ;       Return true if top two are =al.
      0087F1 87 E3                 1544         .word      LINK
                           000773  1545 LINK = . 
      0087F3 01                    1546         .byte      1
      0087F4 3D                    1547         .ascii     "="
      0087F5                       1548 EQUAL:
      0087F5 A6 FF            [ 1] 1549         LD A,#0xFF  ;true
      0087F7 90 93            [ 1] 1550         LDW Y,X    ;D = n2
      0087F9 90 FE            [ 2] 1551         LDW Y,(Y)
      0087FB 90 BF 24         [ 2] 1552         LDW YTEMP,Y
      0087FE 1C 00 02         [ 2] 1553         ADDW X,#2
      008801 90 93            [ 1] 1554         LDW Y,X
      008803 90 FE            [ 2] 1555         LDW Y,(Y)
      008805 90 B3 24         [ 2] 1556         CPW Y,YTEMP     ;if n2 <> n1
      008808 27 01            [ 1] 1557         JREQ     EQ1
      00880A 4F               [ 1] 1558         CLR A
      00880B F7               [ 1] 1559 EQ1:    LD (X),A
      00880C E7 01            [ 1] 1560         LD (1,X),A
      00880E 81               [ 4] 1561 	RET     
                                   1562 
                                   1563 ;       U<      ( u u -- t )
                                   1564 ;       Unsigned compare of top two items.
      00880F 87 F3                 1565         .word      LINK
                           000791  1566 LINK = . 
      008811 02                    1567         .byte      2
      008812 55 3C                 1568         .ascii     "U<"
      008814                       1569 ULESS:
      008814 A6 FF            [ 1] 1570         LD A,#0xFF  ;true
      008816 90 93            [ 1] 1571         LDW Y,X    ;D = n2
      008818 90 FE            [ 2] 1572         LDW Y,(Y)
      00881A 90 BF 24         [ 2] 1573         LDW YTEMP,Y
      00881D 1C 00 02         [ 2] 1574         ADDW X,#2
      008820 90 93            [ 1] 1575         LDW Y,X
      008822 90 FE            [ 2] 1576         LDW Y,(Y)
      008824 90 B3 24         [ 2] 1577         CPW Y,YTEMP     ;if n2 <> n1
      008827 25 01            [ 1] 1578         JRULT     ULES1
      008829 4F               [ 1] 1579         CLR A
      00882A F7               [ 1] 1580 ULES1:  LD (X),A
      00882B E7 01            [ 1] 1581         LD (1,X),A
      00882D 81               [ 4] 1582 	RET     
                                   1583 
                                   1584 ;       <       ( n1 n2 -- t )
                                   1585 ;       Signed compare of top two items.
      00882E 88 11                 1586         .word      LINK
                           0007B0  1587 LINK = . 
      008830 01                    1588         .byte      1
      008831 3C                    1589         .ascii     "<"
      008832                       1590 LESS:
      008832 A6 FF            [ 1] 1591         LD A,#0xFF  ;true
      008834 90 93            [ 1] 1592         LDW Y,X    ;D = n2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      008836 90 FE            [ 2] 1593         LDW Y,(Y)
      008838 90 BF 24         [ 2] 1594         LDW YTEMP,Y
      00883B 1C 00 02         [ 2] 1595         ADDW X,#2
      00883E 90 93            [ 1] 1596         LDW Y,X
      008840 90 FE            [ 2] 1597         LDW Y,(Y)
      008842 90 B3 24         [ 2] 1598         CPW Y,YTEMP     ;if n2 <> n1
      008845 2F 01            [ 1] 1599         JRSLT     LT1
      008847 4F               [ 1] 1600         CLR A
      008848 F7               [ 1] 1601 LT1:    LD (X),A
      008849 E7 01            [ 1] 1602         LD (1,X),A
      00884B 81               [ 4] 1603 	RET     
                                   1604 
                                   1605 ;       MAX     ( n n -- n )
                                   1606 ;       Return greater of two top items.
      00884C 88 30                 1607         .word      LINK
                           0007CE  1608 LINK = . 
      00884E 03                    1609         .byte      3
      00884F 4D 41 58              1610         .ascii     "MAX"
      008852                       1611 MAX:
      008852 90 93            [ 1] 1612         LDW Y,X    ;D = n2
      008854 90 EE 02         [ 2] 1613         LDW Y,(2,Y)
      008857 90 BF 24         [ 2] 1614         LDW YTEMP,Y
      00885A 90 93            [ 1] 1615         LDW Y,X
      00885C 90 FE            [ 2] 1616         LDW Y,(Y)
      00885E 90 B3 24         [ 2] 1617         CPW Y,YTEMP     ;if n2 <> n1
      008861 2F 02            [ 1] 1618         JRSLT     MAX1
      008863 EF 02            [ 2] 1619         LDW (2,X),Y
      008865 1C 00 02         [ 2] 1620 MAX1:   ADDW X,#2
      008868 81               [ 4] 1621 	RET     
                                   1622 
                                   1623 ;       MIN     ( n n -- n )
                                   1624 ;       Return smaller of top two items.
      008869 88 4E                 1625         .word      LINK
                           0007EB  1626 LINK = . 
      00886B 03                    1627         .byte      3
      00886C 4D 49 4E              1628         .ascii     "MIN"
      00886F                       1629 MIN:
      00886F 90 93            [ 1] 1630         LDW Y,X    ;D = n2
      008871 90 EE 02         [ 2] 1631         LDW Y,(2,Y)
      008874 90 BF 24         [ 2] 1632         LDW YTEMP,Y
      008877 90 93            [ 1] 1633         LDW Y,X
      008879 90 FE            [ 2] 1634         LDW Y,(Y)
      00887B 90 B3 24         [ 2] 1635         CPW Y,YTEMP     ;if n2 <> n1
      00887E 2C 02            [ 1] 1636         JRSGT     MIN1
      008880 EF 02            [ 2] 1637         LDW (2,X),Y
      008882 1C 00 02         [ 2] 1638 MIN1:	ADDW X,#2
      008885 81               [ 4] 1639 	RET     
                                   1640 
                                   1641 ;       WITHIN  ( u ul uh -- t )
                                   1642 ;       Return true if u is within
                                   1643 ;       range of ul and uh. ( ul <= u < uh )
      008886 88 6B                 1644         .word      LINK
                           000808  1645 LINK = . 
      008888 06                    1646         .byte      6
      008889 57 49 54 48 49 4E     1647         .ascii     "WITHIN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00888F                       1648 WITHI:
      00888F CD 85 83         [ 4] 1649         CALL     OVER
      008892 CD 87 CD         [ 4] 1650         CALL     SUBB
      008895 CD 85 22         [ 4] 1651         CALL     TOR
      008898 CD 87 CD         [ 4] 1652         CALL     SUBB
      00889B CD 85 03         [ 4] 1653         CALL     RFROM
      00889E CC 88 14         [ 2] 1654         JP     ULESS
                                   1655 
                                   1656 ;; Divide
                                   1657 
                                   1658 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1659 ;       Unsigned divide of a double by a
                                   1660 ;       single. Return mod and quotient.
      0088A1 88 88                 1661         .word      LINK
                           000823  1662 LINK = . 
      0088A3 06                    1663         .byte      6
      0088A4 55 4D 2F 4D 4F 44     1664         .ascii     "UM/MOD"
      0088AA                       1665 UMMOD:
      0088AA BF 22            [ 2] 1666 	LDW XTEMP,X	; save stack pointer
      0088AC FE               [ 2] 1667 	LDW X,(X)	; un
      0088AD BF 24            [ 2] 1668 	LDW YTEMP,X     ; save un
      0088AF 90 BE 22         [ 2] 1669 	LDW Y,XTEMP	; stack pointer
      0088B2 90 EE 04         [ 2] 1670 	LDW Y,(4,Y)     ; Y=udl
      0088B5 BE 22            [ 2] 1671 	LDW X,XTEMP
      0088B7 EE 02            [ 2] 1672 	LDW X,(2,X)	; X=udh
      0088B9 B3 24            [ 2] 1673 	CPW X,YTEMP
      0088BB 23 0F            [ 2] 1674 	JRULE MMSM1
      0088BD BE 22            [ 2] 1675 	LDW X,XTEMP
      0088BF 1C 00 02         [ 2] 1676 	ADDW X,#2	; pop off 1 level
      0088C2 90 AE FF FF      [ 2] 1677 	LDW Y,#0xFFFF
      0088C6 FF               [ 2] 1678 	LDW (X),Y
      0088C7 90 5F            [ 1] 1679 	CLRW Y
      0088C9 EF 02            [ 2] 1680 	LDW (2,X),Y
      0088CB 81               [ 4] 1681 	RET
      0088CC                       1682 MMSM1:
                                   1683 ; take advantage of divw x,y when udh==0
      0088CC 5D               [ 2] 1684         tnzw x  ; is udh==0?
      0088CD 26 11            [ 1] 1685         jrne MMSM2 
      0088CF 93               [ 1] 1686         ldw x,y    ;udl 
      0088D0 90 BE 24         [ 2] 1687         ldw y,YTEMP ; divisor 
      0088D3 65               [ 2] 1688         divw x,y 
      0088D4 89               [ 2] 1689         pushw x     ; quotient 
      0088D5 BE 22            [ 2] 1690         ldw x,XTEMP 
      0088D7 1C 00 02         [ 2] 1691         addw x,#CELLL 
      0088DA EF 02            [ 2] 1692         ldw (2,x),y  ; ur
      0088DC 90 85            [ 2] 1693         popw y 
      0088DE FF               [ 2] 1694         ldw (x),y ; uq 
      0088DF 81               [ 4] 1695         ret 
      0088E0                       1696 MMSM2:        
      0088E0 A6 11            [ 1] 1697 	LD A,#17	; loop count
      0088E2                       1698 MMSM3:
      0088E2 B3 24            [ 2] 1699 	CPW X,YTEMP	; compare udh to un
      0088E4 25 04            [ 1] 1700 	JRULT MMSM4	; can't subtract
      0088E6 72 B0 00 24      [ 2] 1701 	SUBW X,YTEMP	; can subtract
      0088EA                       1702 MMSM4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0088EA 8C               [ 1] 1703 	CCF	; quotient bit
      0088EB 90 59            [ 2] 1704 	RLCW Y	; rotate into quotient
      0088ED 59               [ 2] 1705 	RLCW X	; rotate into remainder
      0088EE 4A               [ 1] 1706 	DEC A	; repeat
      0088EF 22 F1            [ 1] 1707 	JRUGT MMSM3
      0088F1 56               [ 2] 1708         RRCW X 
      0088F2 BF 24            [ 2] 1709 	LDW YTEMP,X	; done, save remainder
      0088F4 BE 22            [ 2] 1710 	LDW X,XTEMP
      0088F6 1C 00 02         [ 2] 1711 	ADDW X,#2	; drop
      0088F9 FF               [ 2] 1712 	LDW (X),Y
      0088FA 90 BE 24         [ 2] 1713 	LDW Y,YTEMP	; save quotient
      0088FD EF 02            [ 2] 1714 	LDW (2,X),Y
      0088FF 81               [ 4] 1715 	RET
                                   1716 	
                                   1717 ;       M/MOD   ( d n -- r q )
                                   1718 ;       Signed floored divide of double by
                                   1719 ;       single. Return mod and quotient.
      008900 88 A3                 1720         .word      LINK
                           000882  1721 LINK = . 
      008902 05                    1722         .byte      5
      008903 4D 2F 4D 4F 44        1723         .ascii     "M/MOD"
      008908                       1724 MSMOD:  
      008908 CD 85 59         [ 4] 1725         CALL	DUPP
      00890B CD 85 92         [ 4] 1726         CALL	ZLESS
      00890E CD 85 59         [ 4] 1727         CALL	DUPP
      008911 CD 85 22         [ 4] 1728         CALL	TOR
      008914 CD 84 67         [ 4] 1729         CALL	QBRAN
      008917 89 25                 1730         .word	MMOD1
      008919 CD 87 7F         [ 4] 1731         CALL	NEGAT
      00891C CD 85 22         [ 4] 1732         CALL	TOR
      00891F CD 87 91         [ 4] 1733         CALL	DNEGA
      008922 CD 85 03         [ 4] 1734         CALL	RFROM
      008925 CD 85 22         [ 4] 1735 MMOD1:	CALL	TOR
      008928 CD 85 59         [ 4] 1736         CALL	DUPP
      00892B CD 85 92         [ 4] 1737         CALL	ZLESS
      00892E CD 84 67         [ 4] 1738         CALL	QBRAN
      008931 89 39                 1739         .word	MMOD2
      008933 CD 85 16         [ 4] 1740         CALL	RAT
      008936 CD 87 54         [ 4] 1741         CALL	PLUS
      008939 CD 85 03         [ 4] 1742 MMOD2:	CALL	RFROM
      00893C CD 88 AA         [ 4] 1743         CALL	UMMOD
      00893F CD 85 03         [ 4] 1744         CALL	RFROM
      008942 CD 84 67         [ 4] 1745         CALL	QBRAN
      008945 89 50                 1746         .word	MMOD3
      008947 CD 85 69         [ 4] 1747         CALL	SWAPP
      00894A CD 87 7F         [ 4] 1748         CALL	NEGAT
      00894D CD 85 69         [ 4] 1749         CALL	SWAPP
      008950 81               [ 4] 1750 MMOD3:	RET
                                   1751 
                                   1752 ;       /MOD    ( n n -- r q )
                                   1753 ;       Signed divide. Return mod and quotient.
      008951 89 02                 1754         .word      LINK
                           0008D3  1755 LINK = . 
      008953 04                    1756         .byte      4
      008954 2F 4D 4F 44           1757         .ascii     "/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      008958                       1758 SLMOD:
      008958 CD 85 83         [ 4] 1759         CALL	OVER
      00895B CD 85 92         [ 4] 1760         CALL	ZLESS
      00895E CD 85 69         [ 4] 1761         CALL	SWAPP
      008961 CC 89 08         [ 2] 1762         JP	MSMOD
                                   1763 
                                   1764 ;       MOD     ( n n -- r )
                                   1765 ;       Signed divide. Return mod only.
      008964 89 53                 1766         .word      LINK
                           0008E6  1767 LINK = . 
      008966 03                    1768         .byte      3
      008967 4D 4F 44              1769         .ascii     "MOD"
      00896A                       1770 MODD:
      00896A CD 89 58         [ 4] 1771 	CALL	SLMOD
      00896D CC 85 4F         [ 2] 1772 	JP	DROP
                                   1773 
                                   1774 ;       /       ( n n -- q )
                                   1775 ;       Signed divide. Return quotient only.
      008970 89 66                 1776         .word      LINK
                           0008F2  1777 LINK = . 
      008972 01                    1778         .byte      1
      008973 2F                    1779         .ascii     "/"
      008974                       1780 SLASH:
      008974 CD 89 58         [ 4] 1781         CALL	SLMOD
      008977 CD 85 69         [ 4] 1782         CALL	SWAPP
      00897A CC 85 4F         [ 2] 1783         JP	DROP
                                   1784 
                                   1785 ;; Multiply
                                   1786 
                                   1787 ;       UM*     ( u u -- ud )
                                   1788 ;       Unsigned multiply. Return double product.
      00897D 89 72                 1789         .word      LINK
                           0008FF  1790 LINK = . 
      00897F 03                    1791         .byte      3
      008980 55 4D 2A              1792         .ascii     "UM*"
      008983                       1793 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1794 ; take advantage of SP addressing modes
                                   1795 ; these PRODx in RAM are not required
                                   1796 ; the product is kept on stack as local variable 
                                   1797         ;; bytes offset on data stack 
                           000002  1798         da=2 
                           000003  1799         db=3 
                           000000  1800         dc=0 
                           000001  1801         dd=1 
                                   1802         ;; product bytes offset on return stack 
                           000001  1803         UD1=1  ; ud bits 31..24
                           000002  1804         UD2=2  ; ud bits 23..16
                           000003  1805         UD3=3  ; ud bits 15..8 
                           000004  1806         UD4=4  ; ud bits 7..0 
                                   1807         ;; local variable for product set to zero   
      008983 90 5F            [ 1] 1808         clrw y 
      008985 90 89            [ 2] 1809         pushw y  ; bits 15..0
      008987 90 89            [ 2] 1810         pushw y  ; bits 31..16 
      008989 E6 03            [ 1] 1811         ld a,(db,x) ; b 
      00898B 90 97            [ 1] 1812         ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00898D E6 01            [ 1] 1813         ld a,(dd,x)   ; d
      00898F 90 42            [ 4] 1814         mul y,a    ; b*d  
      008991 17 03            [ 2] 1815         ldw (UD3,sp),y ; lowest weight product 
      008993 E6 03            [ 1] 1816         ld a,(db,x)
      008995 90 97            [ 1] 1817         ld yl,a 
      008997 E6 00            [ 1] 1818         ld a,(dc,x)
      008999 90 42            [ 4] 1819         mul y,a  ; b*c 
                                   1820         ;;; do the partial sum 
      00899B 72 F9 02         [ 2] 1821         addw y,(UD2,sp)
      00899E 4F               [ 1] 1822         clr a 
      00899F 49               [ 1] 1823         rlc a
      0089A0 6B 01            [ 1] 1824         ld (UD1,sp),a 
      0089A2 17 02            [ 2] 1825         ldw (UD2,sp),y 
      0089A4 E6 02            [ 1] 1826         ld a,(da,x)
      0089A6 90 97            [ 1] 1827         ld yl,a 
      0089A8 E6 01            [ 1] 1828         ld a,(dd,x)
      0089AA 90 42            [ 4] 1829         mul y,a   ; a*d 
                                   1830         ;; do partial sum 
      0089AC 72 F9 02         [ 2] 1831         addw y,(UD2,sp)
      0089AF 4F               [ 1] 1832         clr a 
      0089B0 19 01            [ 1] 1833         adc a,(UD1,sp)
      0089B2 6B 01            [ 1] 1834         ld (UD1,sp),a  
      0089B4 17 02            [ 2] 1835         ldw (UD2,sp),y 
      0089B6 E6 02            [ 1] 1836         ld a,(da,x)
      0089B8 90 97            [ 1] 1837         ld yl,a 
      0089BA E6 00            [ 1] 1838         ld a,(dc,x)
      0089BC 90 42            [ 4] 1839         mul y,a  ;  a*c highest weight product 
                                   1840         ;;; do partial sum 
      0089BE 72 F9 01         [ 2] 1841         addw y,(UD1,sp)
      0089C1 FF               [ 2] 1842         ldw (x),y  ; udh 
      0089C2 16 03            [ 2] 1843         ldw y,(UD3,sp)
      0089C4 EF 02            [ 2] 1844         ldw (2,x),y  ; udl  
      0089C6 5B 04            [ 2] 1845         addw sp,#4 ; drop local variable 
      0089C8 81               [ 4] 1846         ret  
                                   1847 
                                   1848 
                                   1849 ;       *       ( n n -- n )
                                   1850 ;       Signed multiply. Return single product.
      0089C9 89 7F                 1851         .word      LINK
                           00094B  1852 LINK = . 
      0089CB 01                    1853         .byte      1
      0089CC 2A                    1854         .ascii     "*"
      0089CD                       1855 STAR:
      0089CD CD 89 83         [ 4] 1856 	CALL	UMSTA
      0089D0 CC 85 4F         [ 2] 1857 	JP	DROP
                                   1858 
                                   1859 ;       M*      ( n n -- d )
                                   1860 ;       Signed multiply. Return double product.
      0089D3 89 CB                 1861         .word      LINK
                           000955  1862 LINK = . 
      0089D5 02                    1863         .byte      2
      0089D6 4D 2A                 1864         .ascii     "M*"
      0089D8                       1865 MSTAR:      
      0089D8 CD 87 3F         [ 4] 1866         CALL	DDUP
      0089DB CD 85 CE         [ 4] 1867         CALL	XORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0089DE CD 85 92         [ 4] 1868         CALL	ZLESS
      0089E1 CD 85 22         [ 4] 1869         CALL	TOR
      0089E4 CD 87 E7         [ 4] 1870         CALL	ABSS
      0089E7 CD 85 69         [ 4] 1871         CALL	SWAPP
      0089EA CD 87 E7         [ 4] 1872         CALL	ABSS
      0089ED CD 89 83         [ 4] 1873         CALL	UMSTA
      0089F0 CD 85 03         [ 4] 1874         CALL	RFROM
      0089F3 CD 84 67         [ 4] 1875         CALL	QBRAN
      0089F6 89 FB                 1876         .word	MSTA1
      0089F8 CD 87 91         [ 4] 1877         CALL	DNEGA
      0089FB 81               [ 4] 1878 MSTA1:	RET
                                   1879 
                                   1880 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1881 ;       Multiply n1 and n2, then divide
                                   1882 ;       by n3. Return mod and quotient.
      0089FC 89 D5                 1883         .word      LINK
                           00097E  1884 LINK = . 
      0089FE 05                    1885         .byte      5
      0089FF 2A 2F 4D 4F 44        1886         .ascii     "*/MOD"
      008A04                       1887 SSMOD:
      008A04 CD 85 22         [ 4] 1888         CALL     TOR
      008A07 CD 89 D8         [ 4] 1889         CALL     MSTAR
      008A0A CD 85 03         [ 4] 1890         CALL     RFROM
      008A0D CC 89 08         [ 2] 1891         JP     MSMOD
                                   1892 
                                   1893 ;       */      ( n1 n2 n3 -- q )
                                   1894 ;       Multiply n1 by n2, then divide
                                   1895 ;       by n3. Return quotient only.
      008A10 89 FE                 1896         .word      LINK
                           000992  1897 LINK = . 
      008A12 02                    1898         .byte      2
      008A13 2A 2F                 1899         .ascii     "*/"
      008A15                       1900 STASL:
      008A15 CD 8A 04         [ 4] 1901         CALL	SSMOD
      008A18 CD 85 69         [ 4] 1902         CALL	SWAPP
      008A1B CC 85 4F         [ 2] 1903         JP	DROP
                                   1904 
                                   1905 ;; Miscellaneous
                                   1906 
                                   1907 ;       CELL+   ( a -- a )
                                   1908 ;       Add cell size in byte to address.
      008A1E 8A 12                 1909         .word      LINK
                           0009A0  1910 LINK = . 
      008A20 02                    1911         .byte       2
      008A21 32 2B                 1912         .ascii     "2+"
      008A23                       1913 CELLP:
      008A23 90 93            [ 1] 1914         LDW Y,X
      008A25 90 FE            [ 2] 1915 	LDW Y,(Y)
      008A27 72 A9 00 02      [ 2] 1916         ADDW Y,#CELLL 
      008A2B FF               [ 2] 1917         LDW (X),Y
      008A2C 81               [ 4] 1918         RET
                                   1919 
                                   1920 ;       CELL-   ( a -- a )
                                   1921 ;       Subtract 2 from address.
      008A2D 8A 20                 1922         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           0009AF  1923 LINK = . 
      008A2F 02                    1924         .byte       2
      008A30 32 2D                 1925         .ascii     "2-"
      008A32                       1926 CELLM:
      008A32 90 93            [ 1] 1927         LDW Y,X
      008A34 90 FE            [ 2] 1928 	LDW Y,(Y)
      008A36 72 A2 00 02      [ 2] 1929         SUBW Y,#CELLL
      008A3A FF               [ 2] 1930         LDW (X),Y
      008A3B 81               [ 4] 1931         RET
                                   1932 
                                   1933 ;       CELLS   ( n -- n )
                                   1934 ;       Multiply tos by 2.
      008A3C 8A 2F                 1935         .word      LINK
                           0009BE  1936 LINK = . 
      008A3E 02                    1937         .byte       2
      008A3F 32 2A                 1938         .ascii     "2*"
      008A41                       1939 CELLS:
      008A41 90 93            [ 1] 1940         LDW Y,X
      008A43 90 FE            [ 2] 1941 	LDW Y,(Y)
      008A45 90 58            [ 2] 1942         SLAW Y
      008A47 FF               [ 2] 1943         LDW (X),Y
      008A48 81               [ 4] 1944         RET
                                   1945 
                                   1946 ;       1+      ( a -- a )
                                   1947 ;       Add cell size in byte to address.
      008A49 8A 3E                 1948         .word      LINK
                           0009CB  1949 LINK = . 
      008A4B 02                    1950         .byte      2
      008A4C 31 2B                 1951         .ascii     "1+"
      008A4E                       1952 ONEP:
      008A4E 90 93            [ 1] 1953         LDW Y,X
      008A50 90 FE            [ 2] 1954 	LDW Y,(Y)
      008A52 90 5C            [ 1] 1955         INCW Y
      008A54 FF               [ 2] 1956         LDW (X),Y
      008A55 81               [ 4] 1957         RET
                                   1958 
                                   1959 ;       1-      ( a -- a )
                                   1960 ;       Subtract 2 from address.
      008A56 8A 4B                 1961         .word      LINK
                           0009D8  1962 LINK = . 
      008A58 02                    1963         .byte      2
      008A59 31 2D                 1964         .ascii     "1-"
      008A5B                       1965 ONEM:
      008A5B 90 93            [ 1] 1966         LDW Y,X
      008A5D 90 FE            [ 2] 1967 	LDW Y,(Y)
      008A5F 90 5A            [ 2] 1968         DECW Y
      008A61 FF               [ 2] 1969         LDW (X),Y
      008A62 81               [ 4] 1970         RET
                                   1971 
                                   1972 ;  shift left n times 
                                   1973 ; LSHIFT ( n1 n2 -- n1<<n2 )
      008A63 8A 58                 1974         .word LINK 
                           0009E5  1975         LINK=.
      008A65 06                    1976         .byte 6 
      008A66 4C 53 48 49 46 54     1977         .ascii "LSHIFT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      008A6C                       1978 LSHIFT:
      008A6C E6 01            [ 1] 1979         ld a,(1,x)
      008A6E 1C 00 02         [ 2] 1980         addw x,#CELLL 
      008A71 90 93            [ 1] 1981         ldw y,x 
      008A73 90 FE            [ 2] 1982         ldw y,(y)
      008A75                       1983 LSHIFT1:
      008A75 4D               [ 1] 1984         tnz a 
      008A76 27 05            [ 1] 1985         jreq LSHIFT4 
      008A78 90 58            [ 2] 1986         sllw y 
      008A7A 4A               [ 1] 1987         dec a 
      008A7B 20 F8            [ 2] 1988         jra LSHIFT1 
      008A7D                       1989 LSHIFT4:
      008A7D FF               [ 2] 1990         ldw (x),y 
      008A7E 81               [ 4] 1991         ret 
                                   1992 
                                   1993 ; shift right n times                 
                                   1994 ; RSHIFT (n1 n2 -- n1>>n2 )
      008A7F 8A 65                 1995         .word LINK 
                           000A01  1996         LINK=.
      008A81 06                    1997         .byte 6
      008A82 52 53 48 49 46 54     1998         .ascii "RSHIFT"
      008A88                       1999 RSHIFT:
      008A88 E6 01            [ 1] 2000         ld a,(1,x)
      008A8A 1C 00 02         [ 2] 2001         addw x,#CELLL 
      008A8D 90 93            [ 1] 2002         ldw y,x 
      008A8F 90 FE            [ 2] 2003         ldw y,(y)
      008A91                       2004 RSHIFT1:
      008A91 4D               [ 1] 2005         tnz a 
      008A92 27 05            [ 1] 2006         jreq RSHIFT4 
      008A94 90 54            [ 2] 2007         srlw y 
      008A96 4A               [ 1] 2008         dec a 
      008A97 20 F8            [ 2] 2009         jra RSHIFT1 
      008A99                       2010 RSHIFT4:
      008A99 FF               [ 2] 2011         ldw (x),y 
      008A9A 81               [ 4] 2012         ret 
                                   2013 
                                   2014 
                                   2015 ;       2/      ( n -- n )
                                   2016 ;       divide  tos by 2.
      008A9B 8A 81                 2017         .word      LINK
                           000A1D  2018 LINK = . 
      008A9D 02                    2019         .byte      2
      008A9E 32 2F                 2020         .ascii     "2/"
      008AA0                       2021 TWOSL:
      008AA0 90 93            [ 1] 2022         LDW Y,X
      008AA2 90 FE            [ 2] 2023 	LDW Y,(Y)
      008AA4 90 57            [ 2] 2024         SRAW Y
      008AA6 FF               [ 2] 2025         LDW (X),Y
      008AA7 81               [ 4] 2026         RET
                                   2027 
                                   2028 ;       BL      ( -- 32 )
                                   2029 ;       Return 32,  blank character.
      008AA8 8A 9D                 2030         .word      LINK
                           000A2A  2031 LINK = . 
      008AAA 02                    2032         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      008AAB 42 4C                 2033         .ascii     "BL"
      008AAD                       2034 BLANK:
      008AAD 1D 00 02         [ 2] 2035         SUBW X,#2
      008AB0 90 AE 00 20      [ 2] 2036 	LDW Y,#32
      008AB4 FF               [ 2] 2037         LDW (X),Y
      008AB5 81               [ 4] 2038         RET
                                   2039 
                                   2040 ;         0     ( -- 0)
                                   2041 ;         Return 0.
      008AB6 8A AA                 2042         .word      LINK
                           000A38  2043 LINK = . 
      008AB8 01                    2044         .byte       1
      008AB9 30                    2045         .ascii     "0"
      008ABA                       2046 ZERO:
      008ABA 1D 00 02         [ 2] 2047         SUBW X,#2
      008ABD 90 5F            [ 1] 2048 	CLRW Y
      008ABF FF               [ 2] 2049         LDW (X),Y
      008AC0 81               [ 4] 2050         RET
                                   2051 
                                   2052 ;         1     ( -- 1)
                                   2053 ;         Return 1.
      008AC1 8A B8                 2054         .word      LINK
                           000A43  2055 LINK = . 
      008AC3 01                    2056         .byte       1
      008AC4 31                    2057         .ascii     "1"
      008AC5                       2058 ONE:
      008AC5 1D 00 02         [ 2] 2059         SUBW X,#2
      008AC8 90 AE 00 01      [ 2] 2060 	LDW Y,#1
      008ACC FF               [ 2] 2061         LDW (X),Y
      008ACD 81               [ 4] 2062         RET
                                   2063 
                                   2064 ;         -1    ( -- -1)
                                   2065 ;         Return 32,  blank character.
      008ACE 8A C3                 2066         .word      LINK
                           000A50  2067 LINK = . 
      008AD0 02                    2068         .byte       2
      008AD1 2D 31                 2069         .ascii     "-1"
      008AD3                       2070 MONE:
      008AD3 1D 00 02         [ 2] 2071         SUBW X,#2
      008AD6 90 AE FF FF      [ 2] 2072 	LDW Y,#0xFFFF
      008ADA FF               [ 2] 2073         LDW (X),Y
      008ADB 81               [ 4] 2074         RET
                                   2075 
                                   2076 ;       >CHAR   ( c -- c )
                                   2077 ;       Filter non-printing characters.
      008ADC 8A D0                 2078         .word      LINK
                           000A5E  2079 LINK = . 
      008ADE 05                    2080         .byte      5
      008ADF 3E 43 48 41 52        2081         .ascii     ">CHAR"
      008AE4                       2082 TCHAR:
      008AE4 E6 01            [ 1] 2083         ld a,(1,x)
      008AE6 A1 20            [ 1] 2084         cp a,#32  
      008AE8 2B 05            [ 1] 2085         jrmi 1$ 
      008AEA A1 7F            [ 1] 2086         cp a,#127 
      008AEC 2A 01            [ 1] 2087         jrpl 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      008AEE 81               [ 4] 2088         ret 
      008AEF A6 5F            [ 1] 2089 1$:     ld a,#'_ 
      008AF1 E7 01            [ 1] 2090         ld (1,x),a 
      008AF3 81               [ 4] 2091         ret 
                                   2092 
                                   2093 ;       DEPTH   ( -- n )
                                   2094 ;       Return  depth of  data stack.
      008AF4 8A DE                 2095         .word      LINK
                           000A76  2096 LINK = . 
      008AF6 05                    2097         .byte      5
      008AF7 44 45 50 54 48        2098         .ascii     "DEPTH"
      008AFC                       2099 DEPTH: 
      008AFC 90 BE 2A         [ 2] 2100         LDW Y,SP0    ;save data stack ptr
      008AFF BF 22            [ 2] 2101 	LDW XTEMP,X
      008B01 72 B2 00 22      [ 2] 2102         SUBW Y,XTEMP     ;#bytes = SP0 - X
      008B05 90 57            [ 2] 2103         SRAW Y    ;Y = #stack items
      008B07 1D 00 02         [ 2] 2104 	SUBW X,#2
      008B0A FF               [ 2] 2105         LDW (X),Y     ; if neg, underflow
      008B0B 81               [ 4] 2106         RET
                                   2107 
                                   2108 ;       PICK    ( ... +n -- ... w )
                                   2109 ;       Copy  nth stack item to tos.
      008B0C 8A F6                 2110         .word      LINK
                           000A8E  2111 LINK = . 
      008B0E 04                    2112         .byte      4
      008B0F 50 49 43 4B           2113         .ascii     "PICK"
      008B13                       2114 PICK:
      008B13 90 93            [ 1] 2115         LDW Y,X   ;D = n1
      008B15 90 FE            [ 2] 2116         LDW Y,(Y)
                                   2117 ; modified for standard compliance          
                                   2118 ; 0 PICK must be equivalent to DUP 
      008B17 90 5C            [ 1] 2119         INCW Y 
      008B19 90 58            [ 2] 2120         SLAW Y
      008B1B BF 22            [ 2] 2121         LDW XTEMP,X
      008B1D 72 B9 00 22      [ 2] 2122         ADDW Y,XTEMP
      008B21 90 FE            [ 2] 2123         LDW Y,(Y)
      008B23 FF               [ 2] 2124         LDW (X),Y
      008B24 81               [ 4] 2125         RET
                                   2126 
                                   2127 ;; Memory access
                                   2128 
                                   2129 ;       +!      ( n a -- )
                                   2130 ;       Add n to  contents at address a.
      008B25 8B 0E                 2131         .word      LINK
                           000AA7  2132 LINK = . 
      008B27 02                    2133         .byte      2
      008B28 2B 21                 2134         .ascii     "+!"
      008B2A                       2135 PSTOR:
      008B2A 90 93            [ 1] 2136         ldw y,x 
      008B2C 90 FE            [ 2] 2137         ldw y,(y)
      008B2E 90 BF 24         [ 2] 2138         ldw YTEMP,y  ; address
      008B31 90 FE            [ 2] 2139         ldw y,(y)  
      008B33 90 89            [ 2] 2140         pushw y  ; value at address 
      008B35 90 93            [ 1] 2141         ldw y,x 
      008B37 90 EE 02         [ 2] 2142         ldw y,(2,y) ; n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      008B3A 72 F9 01         [ 2] 2143         addw y,(1,sp) ; n+value
      008B3D 91 CF 24         [ 5] 2144         ldw [YTEMP],y ;  a!
      008B40 90 85            [ 2] 2145         popw y    ;drop local var
      008B42 1C 00 04         [ 2] 2146         addw x,#4 ; DDROP 
      008B45 81               [ 4] 2147         ret 
                                   2148 
                                   2149 ;       2!      ( d a -- )
                                   2150 ;       Store  double integer to address a.
      008B46 8B 27                 2151         .word      LINK
                           000AC8  2152 LINK = . 
      008B48 02                    2153         .byte      2
      008B49 32 21                 2154         .ascii     "2!"
      008B4B                       2155 DSTOR:
      008B4B 90 93            [ 1] 2156         ldw y,x 
      008B4D 90 FE            [ 2] 2157         ldw y,(y)
      008B4F 90 BF 24         [ 2] 2158         ldw YTEMP,y ; address 
      008B52 1C 00 02         [ 2] 2159         addw x,#CELLL ; drop a 
      008B55 90 93            [ 1] 2160         ldw y,x 
      008B57 90 FE            [ 2] 2161         ldw y,(y) ; hi word 
      008B59 89               [ 2] 2162         pushw x 
      008B5A EE 02            [ 2] 2163         ldw x,(2,x) ; lo word 
      008B5C 91 CF 24         [ 5] 2164         ldw [YTEMP],y
      008B5F 90 93            [ 1] 2165         ldw y,x 
      008B61 AE 00 02         [ 2] 2166         ldw x,#2 
      008B64 92 DF 24         [ 5] 2167         ldw ([YTEMP],x),y 
      008B67 85               [ 2] 2168         popw x 
      008B68 1C 00 04         [ 2] 2169         addw x,#4 ; DDROP 
      008B6B 81               [ 4] 2170         ret 
                                   2171 
                                   2172 ;       2@      ( a -- d )
                                   2173 ;       Fetch double integer from address a.
      008B6C 8B 48                 2174         .word      LINK
                           000AEE  2175 LINK = . 
      008B6E 02                    2176         .byte      2
      008B6F 32 40                 2177         .ascii     "2@"
      008B71                       2178 DAT:
      008B71 90 93            [ 1] 2179         ldw y,x 
      008B73 90 FE            [ 2] 2180         ldw y,(y) ;address 
      008B75 90 BF 24         [ 2] 2181         ldw YTEMP,y 
      008B78 1D 00 02         [ 2] 2182         subw x,#CELLL ; space for udh 
      008B7B 91 CE 24         [ 5] 2183         ldw y,[YTEMP] ; udh 
      008B7E FF               [ 2] 2184         ldw (x),y 
      008B7F 90 AE 00 02      [ 2] 2185         ldw y,#2
      008B83 91 DE 24         [ 5] 2186         ldw y,([YTEMP],y) ; udl 
      008B86 EF 02            [ 2] 2187         ldw (2,x),y
      008B88 81               [ 4] 2188         ret 
                                   2189 
                                   2190 ;       COUNT   ( b -- b +n )
                                   2191 ;       Return count byte of a string
                                   2192 ;       and add 1 to byte address.
      008B89 8B 6E                 2193         .word      LINK
                           000B0B  2194 LINK = . 
      008B8B 05                    2195         .byte      5
      008B8C 43 4F 55 4E 54        2196         .ascii     "COUNT"
      008B91                       2197 COUNT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      008B91 90 93            [ 1] 2198         ldw y,x 
      008B93 90 FE            [ 2] 2199         ldw y,(y) ; address 
      008B95 90 F6            [ 1] 2200         ld a,(y)  ; count 
      008B97 90 5C            [ 1] 2201         incw y 
      008B99 FF               [ 2] 2202         ldw (x),y 
      008B9A 1D 00 02         [ 2] 2203         subw x,#CELLL 
      008B9D E7 01            [ 1] 2204         ld (1,x),a 
      008B9F 7F               [ 1] 2205         clr (x)
      008BA0 81               [ 4] 2206         ret 
                                   2207 
                                   2208 ;       HERE    ( -- a )
                                   2209 ;       Return  top of  variables
      008BA1 8B 8B                 2210         .word      LINK
                           000B23  2211 LINK = . 
      008BA3 04                    2212         .byte      4
      008BA4 48 45 52 45           2213         .ascii     "HERE"
      008BA8                       2214 HERE:
      008BA8 90 AE 00 16      [ 2] 2215       	ldw y,#UVP 
      008BAC 90 FE            [ 2] 2216         ldw y,(y)
      008BAE 1D 00 02         [ 2] 2217         subw x,#CELLL 
      008BB1 FF               [ 2] 2218         ldw (x),y 
      008BB2 81               [ 4] 2219         ret 
                                   2220 
                                   2221 ;       PAD     ( -- a )
                                   2222 ;       Return address of text buffer
                                   2223 ;       above  code dictionary.
      008BB3 8B A3                 2224         .word      LINK
                           000B35  2225 LINK = . 
      008BB5 03                    2226         .byte      3
      008BB6 50 41 44              2227         .ascii     "PAD"
      008BB9                       2228 PAD:
      008BB9 CD 8B A8         [ 4] 2229         CALL     HERE
      008BBC CD 84 34         [ 4] 2230         CALL     DOLIT
      008BBF 00 50                 2231         .word      80
      008BC1 CC 87 54         [ 2] 2232         JP     PLUS
                                   2233 
                                   2234 ;       TIB     ( -- a )
                                   2235 ;       Return address of terminal input buffer.
      008BC4 8B B5                 2236         .word      LINK
                           000B46  2237 LINK = . 
      008BC6 03                    2238         .byte      3
      008BC7 54 49 42              2239         .ascii     "TIB"
      008BCA                       2240 TIB:
      008BCA CD 86 44         [ 4] 2241         CALL     NTIB
      008BCD CD 8A 23         [ 4] 2242         CALL     CELLP
      008BD0 CC 84 B2         [ 2] 2243         JP     AT
                                   2244 
                                   2245 ;       @EXECUTE        ( a -- )
                                   2246 ;       Execute vector stored in address a.
      008BD3 8B C6                 2247         .word      LINK
                           000B55  2248 LINK = . 
      008BD5 08                    2249         .byte      8
      008BD6 40 45 58 45 43 55 54  2250         .ascii     "@EXECUTE"
             45
      008BDE                       2251 ATEXE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      008BDE CD 84 B2         [ 4] 2252         CALL     AT
      008BE1 CD 87 03         [ 4] 2253         CALL     QDUP    ;?address or zero
      008BE4 CD 84 67         [ 4] 2254         CALL     QBRAN
      008BE7 8B EC                 2255         .word      EXE1
      008BE9 CD 84 8E         [ 4] 2256         CALL     EXECU   ;execute if non-zero
      008BEC 81               [ 4] 2257 EXE1:   RET     ;do nothing if zero
                                   2258 
                                   2259 ;       CMOVE   ( b1 b2 u -- )
                                   2260 ;       Copy u bytes from b1 to b2.
      008BED 8B D5                 2261         .word      LINK
                           000B6F  2262 LINK = . 
      008BEF 05                    2263         .byte      5
      008BF0 43 4D 4F 56 45        2264         .ascii     "CMOVE"
      008BF5                       2265 CMOVE:
      008BF5 CD 85 22         [ 4] 2266         CALL	TOR
      008BF8 CD 84 7E         [ 4] 2267         CALL	BRAN
      008BFB 8C 15                 2268         .word	CMOV2
      008BFD CD 85 22         [ 4] 2269 CMOV1:	CALL	TOR
      008C00 CD 85 59         [ 4] 2270         CALL	DUPP
      008C03 CD 84 D0         [ 4] 2271         CALL	CAT
      008C06 CD 85 16         [ 4] 2272         CALL	RAT
      008C09 CD 84 BF         [ 4] 2273         CALL	CSTOR
      008C0C CD 8A 4E         [ 4] 2274         CALL	ONEP
      008C0F CD 85 03         [ 4] 2275         CALL	RFROM
      008C12 CD 8A 4E         [ 4] 2276         CALL	ONEP
      008C15 CD 84 48         [ 4] 2277 CMOV2:	CALL	DONXT
      008C18 8B FD                 2278         .word	CMOV1
      008C1A CC 87 34         [ 2] 2279         JP	DDROP
                                   2280 
                                   2281 ;       FILL    ( b u c -- )
                                   2282 ;       Fill u bytes of character c
                                   2283 ;       to area beginning at b.
      008C1D 8B EF                 2284         .word       LINK
                           000B9F  2285 LINK = . 
      008C1F 04                    2286         .byte       4
      008C20 46 49 4C 4C           2287         .ascii     "FILL"
      008C24                       2288 FILL:
      008C24 90 93            [ 1] 2289         ldw y,x 
      008C26 90 E6 01         [ 1] 2290         ld a,(1,y) ; c 
      008C29 1C 00 02         [ 2] 2291         addw x,#CELLL ; drop c 
      008C2C 90 93            [ 1] 2292         ldw y,x 
      008C2E 90 FE            [ 2] 2293         ldw y,(y) ; count
      008C30 90 89            [ 2] 2294         pushw y 
      008C32 1C 00 02         [ 2] 2295         addw x,#CELLL ; drop u 
      008C35 90 93            [ 1] 2296         ldw y,x 
      008C37 1C 00 02         [ 2] 2297         addw x,#CELLL ; drop b 
      008C3A 90 FE            [ 2] 2298         ldw y,(y) ; address
      008C3C 90 BF 24         [ 2] 2299         ldw YTEMP,y
      008C3F 90 85            [ 2] 2300         popw y ; count 
      008C41                       2301 FILL1:  
      008C41 92 C7 24         [ 4] 2302         ld [YTEMP],a 
      008C44 3C 25            [ 1] 2303         inc YTEMP+1
      008C46 24 02            [ 1] 2304         jrnc FILL2 
      008C48 3C 24            [ 1] 2305         inc YTEMP
      008C4A                       2306 FILL2: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      008C4A 90 5A            [ 2] 2307         decw y ; count 
      008C4C 26 F3            [ 1] 2308         jrne FILL1  
      008C4E 81               [ 4] 2309         ret 
                                   2310 
                                   2311 ;       ERASE   ( b u -- )
                                   2312 ;       Erase u bytes beginning at b.
      008C4F 8C 1F                 2313         .word      LINK
                           000BD1  2314 LINK = . 
      008C51 05                    2315         .byte      5
      008C52 45 52 41 53 45        2316         .ascii     "ERASE"
      008C57                       2317 ERASE:
      008C57 90 5F            [ 1] 2318         clrw y 
      008C59 1D 00 02         [ 2] 2319         subw x,#CELLL 
      008C5C FF               [ 2] 2320         ldw (x),y 
      008C5D CC 8C 24         [ 2] 2321         jp FILL 
                                   2322 
                                   2323 
                                   2324 ;       PACK0   ( b u a -- a )
                                   2325 ;       Build a counted string with
                                   2326 ;       u characters from b. Null fill.
      008C60 8C 51                 2327         .word      LINK
                           000BE2  2328 LINK = . 
      008C62 05                    2329         .byte      5
      008C63 50 41 43 4B 30        2330         .ascii     "PACK0"
      008C68                       2331 PACKS:
      008C68 CD 85 59         [ 4] 2332         CALL     DUPP
      008C6B CD 85 22         [ 4] 2333         CALL     TOR     ;strings only on cell boundary
      008C6E CD 87 3F         [ 4] 2334         CALL     DDUP
      008C71 CD 84 BF         [ 4] 2335         CALL     CSTOR
      008C74 CD 8A 4E         [ 4] 2336         CALL     ONEP ;save count
      008C77 CD 85 69         [ 4] 2337         CALL     SWAPP
      008C7A CD 8B F5         [ 4] 2338         CALL     CMOVE
      008C7D CD 85 03         [ 4] 2339         CALL     RFROM
      008C80 81               [ 4] 2340         RET
                                   2341 
                                   2342 ;; Numeric output, single precision
                                   2343 
                                   2344 ;       DIGIT   ( u -- c )
                                   2345 ;       Convert digit u to a character.
      008C81 8C 62                 2346         .word      LINK
                           000C03  2347 LINK = . 
      008C83 05                    2348         .byte      5
      008C84 44 49 47 49 54        2349         .ascii     "DIGIT"
      008C89                       2350 DIGIT:
      008C89 CD 84 34         [ 4] 2351         CALL	DOLIT
      008C8C 00 09                 2352         .word	9
      008C8E CD 85 83         [ 4] 2353         CALL	OVER
      008C91 CD 88 32         [ 4] 2354         CALL	LESS
      008C94 CD 84 34         [ 4] 2355         CALL	DOLIT
      008C97 00 07                 2356         .word	7
      008C99 CD 85 A5         [ 4] 2357         CALL	ANDD
      008C9C CD 87 54         [ 4] 2358         CALL	PLUS
      008C9F CD 84 34         [ 4] 2359         CALL	DOLIT
      008CA2 00 30                 2360         .word	48	;'0'
      008CA4 CC 87 54         [ 2] 2361         JP	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2362 
                                   2363 ;       EXTRACT ( n base -- n c )
                                   2364 ;       Extract least significant digit from n.
      008CA7 8C 83                 2365         .word      LINK
                           000C29  2366 LINK = . 
      008CA9 07                    2367         .byte      7
      008CAA 45 58 54 52 41 43 54  2368         .ascii     "EXTRACT"
      008CB1                       2369 EXTRC:
      008CB1 CD 8A BA         [ 4] 2370         CALL     ZERO
      008CB4 CD 85 69         [ 4] 2371         CALL     SWAPP
      008CB7 CD 88 AA         [ 4] 2372         CALL     UMMOD
      008CBA CD 85 69         [ 4] 2373         CALL     SWAPP
      008CBD CC 8C 89         [ 2] 2374         JP     DIGIT
                                   2375 
                                   2376 ;       <#      ( -- )
                                   2377 ;       Initiate  numeric output process.
      008CC0 8C A9                 2378         .word      LINK
                           000C42  2379 LINK = . 
      008CC2 02                    2380         .byte      2
      008CC3 3C 23                 2381         .ascii     "<#"
      008CC5                       2382 BDIGS:
      008CC5 CD 8B B9         [ 4] 2383         CALL     PAD
      008CC8 CD 86 86         [ 4] 2384         CALL     HLD
      008CCB CC 84 9B         [ 2] 2385         JP     STORE
                                   2386 
                                   2387 ;       HOLD    ( c -- )
                                   2388 ;       Insert a character into output string.
      008CCE 8C C2                 2389         .word      LINK
                           000C50  2390 LINK = . 
      008CD0 04                    2391         .byte      4
      008CD1 48 4F 4C 44           2392         .ascii     "HOLD"
      008CD5                       2393 HOLD:
      008CD5 CD 86 86         [ 4] 2394         CALL     HLD
      008CD8 CD 84 B2         [ 4] 2395         CALL     AT
      008CDB CD 8A 5B         [ 4] 2396         CALL     ONEM
      008CDE CD 85 59         [ 4] 2397         CALL     DUPP
      008CE1 CD 86 86         [ 4] 2398         CALL     HLD
      008CE4 CD 84 9B         [ 4] 2399         CALL     STORE
      008CE7 CC 84 BF         [ 2] 2400         JP     CSTOR
                                   2401 
                                   2402 ;       #       ( u -- u )
                                   2403 ;       Extract one digit from u and
                                   2404 ;       append digit to output string.
      008CEA 8C D0                 2405         .word      LINK
                           000C6C  2406 LINK = . 
      008CEC 01                    2407         .byte      1
      008CED 23                    2408         .ascii     "#"
      008CEE                       2409 DIG:
      008CEE CD 86 16         [ 4] 2410         CALL     BASE
      008CF1 CD 84 B2         [ 4] 2411         CALL     AT
      008CF4 CD 8C B1         [ 4] 2412         CALL     EXTRC
      008CF7 CC 8C D5         [ 2] 2413         JP     HOLD
                                   2414 
                                   2415 ;       #S      ( u -- 0 )
                                   2416 ;       Convert u until all digits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2417 ;       are added to output string.
      008CFA 8C EC                 2418         .word      LINK
                           000C7C  2419 LINK = . 
      008CFC 02                    2420         .byte      2
      008CFD 23 53                 2421         .ascii     "#S"
      008CFF                       2422 DIGS:
      008CFF CD 8C EE         [ 4] 2423 DIGS1:  CALL     DIG
      008D02 CD 85 59         [ 4] 2424         CALL     DUPP
      008D05 CD 84 67         [ 4] 2425         CALL     QBRAN
      008D08 8D 0C                 2426         .word      DIGS2
      008D0A 20 F3            [ 2] 2427         JRA     DIGS1
      008D0C 81               [ 4] 2428 DIGS2:  RET
                                   2429 
                                   2430 ;       SIGN    ( n -- )
                                   2431 ;       Add a minus sign to
                                   2432 ;       numeric output string.
      008D0D 8C FC                 2433         .word      LINK
                           000C8F  2434 LINK = . 
      008D0F 04                    2435         .byte      4
      008D10 53 49 47 4E           2436         .ascii     "SIGN"
      008D14                       2437 SIGN:
      008D14 CD 85 92         [ 4] 2438         CALL     ZLESS
      008D17 CD 84 67         [ 4] 2439         CALL     QBRAN
      008D1A 8D 24                 2440         .word      SIGN1
      008D1C CD 84 34         [ 4] 2441         CALL     DOLIT
      008D1F 00 2D                 2442         .word      45	;"-"
      008D21 CC 8C D5         [ 2] 2443         JP     HOLD
      008D24 81               [ 4] 2444 SIGN1:  RET
                                   2445 
                                   2446 ;       #>      ( w -- b u )
                                   2447 ;       Prepare output string.
      008D25 8D 0F                 2448         .word      LINK
                           000CA7  2449 LINK = . 
      008D27 02                    2450         .byte      2
      008D28 23 3E                 2451         .ascii     "#>"
      008D2A                       2452 EDIGS:
      008D2A CD 85 4F         [ 4] 2453         CALL     DROP
      008D2D CD 86 86         [ 4] 2454         CALL     HLD
      008D30 CD 84 B2         [ 4] 2455         CALL     AT
      008D33 CD 8B B9         [ 4] 2456         CALL     PAD
      008D36 CD 85 83         [ 4] 2457         CALL     OVER
      008D39 CC 87 CD         [ 2] 2458         JP     SUBB
                                   2459 
                                   2460 ;       str     ( w -- b u )
                                   2461 ;       Convert a signed integer
                                   2462 ;       to a numeric string.
      008D3C 8D 27                 2463         .word      LINK
                           000CBE  2464 LINK = . 
      008D3E 03                    2465         .byte      3
      008D3F 53 54 52              2466         .ascii     "STR"
      008D42                       2467 STR:
      008D42 CD 85 59         [ 4] 2468         CALL     DUPP
      008D45 CD 85 22         [ 4] 2469         CALL     TOR
      008D48 CD 87 E7         [ 4] 2470         CALL     ABSS
      008D4B CD 8C C5         [ 4] 2471         CALL     BDIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      008D4E CD 8C FF         [ 4] 2472         CALL     DIGS
      008D51 CD 85 03         [ 4] 2473         CALL     RFROM
      008D54 CD 8D 14         [ 4] 2474         CALL     SIGN
      008D57 CC 8D 2A         [ 2] 2475         JP     EDIGS
                                   2476 
                                   2477 ;       HEX     ( -- )
                                   2478 ;       Use radix 16 as base for
                                   2479 ;       numeric conversions.
      008D5A 8D 3E                 2480         .word      LINK
                           000CDC  2481 LINK = . 
      008D5C 03                    2482         .byte      3
      008D5D 48 45 58              2483         .ascii     "HEX"
      008D60                       2484 HEX:
      008D60 CD 84 34         [ 4] 2485         CALL     DOLIT
      008D63 00 10                 2486         .word      16
      008D65 CD 86 16         [ 4] 2487         CALL     BASE
      008D68 CC 84 9B         [ 2] 2488         JP     STORE
                                   2489 
                                   2490 ;       DECIMAL ( -- )
                                   2491 ;       Use radix 10 as base
                                   2492 ;       for numeric conversions.
      008D6B 8D 5C                 2493         .word      LINK
                           000CED  2494 LINK = . 
      008D6D 07                    2495         .byte      7
      008D6E 44 45 43 49 4D 41 4C  2496         .ascii     "DECIMAL"
      008D75                       2497 DECIM:
      008D75 CD 84 34         [ 4] 2498         CALL     DOLIT
      008D78 00 0A                 2499         .word      10
      008D7A CD 86 16         [ 4] 2500         CALL     BASE
      008D7D CC 84 9B         [ 2] 2501         JP     STORE
                                   2502 
                                   2503 ;; Numeric input, single precision
                                   2504 
                                   2505 ;       DIGIT?  ( c base -- u t )
                                   2506 ;       Convert a character to its numeric
                                   2507 ;       value. A flag indicates success.
      008D80 8D 6D                 2508         .word      LINK
                           000D02  2509 LINK = . 
      008D82 06                    2510         .byte       6
      008D83 44 49 47 49 54 3F     2511         .ascii     "DIGIT?"
      008D89                       2512 DIGTQ:
      008D89 CD 85 22         [ 4] 2513         CALL     TOR
      008D8C CD 84 34         [ 4] 2514         CALL     DOLIT
      008D8F 00 30                 2515         .word     48	; "0"
      008D91 CD 87 CD         [ 4] 2516         CALL     SUBB
      008D94 CD 84 34         [ 4] 2517         CALL     DOLIT
      008D97 00 09                 2518         .word      9
      008D99 CD 85 83         [ 4] 2519         CALL     OVER
      008D9C CD 88 32         [ 4] 2520         CALL     LESS
      008D9F CD 84 67         [ 4] 2521         CALL     QBRAN
      008DA2 8D BA                 2522         .word      DGTQ1
      008DA4 CD 84 34         [ 4] 2523         CALL     DOLIT
      008DA7 00 07                 2524         .word      7
      008DA9 CD 87 CD         [ 4] 2525         CALL     SUBB
      008DAC CD 85 59         [ 4] 2526         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      008DAF CD 84 34         [ 4] 2527         CALL     DOLIT
      008DB2 00 0A                 2528         .word      10
      008DB4 CD 88 32         [ 4] 2529         CALL     LESS
      008DB7 CD 85 B9         [ 4] 2530         CALL     ORR
      008DBA CD 85 59         [ 4] 2531 DGTQ1:  CALL     DUPP
      008DBD CD 85 03         [ 4] 2532         CALL     RFROM
      008DC0 CC 88 14         [ 2] 2533         JP     ULESS
                                   2534 
                                   2535 ;       NUMBER? ( a -- n T | a F )
                                   2536 ;       Convert a number string to
                                   2537 ;       integer. Push a flag on tos.
      008DC3 8D 82                 2538         .word      LINK
                           000D45  2539 LINK = . 
      008DC5 07                    2540         .byte      7
      008DC6 4E 55 4D 42 45 52 3F  2541         .ascii     "NUMBER?"
      008DCD                       2542 NUMBQ:
      008DCD CD 86 16         [ 4] 2543         CALL     BASE
      008DD0 CD 84 B2         [ 4] 2544         CALL     AT
      008DD3 CD 85 22         [ 4] 2545         CALL     TOR
      008DD6 CD 8A BA         [ 4] 2546         CALL     ZERO
      008DD9 CD 85 83         [ 4] 2547         CALL     OVER
      008DDC CD 8B 91         [ 4] 2548         CALL     COUNT
      008DDF CD 85 83         [ 4] 2549         CALL     OVER
      008DE2 CD 84 D0         [ 4] 2550         CALL     CAT
      008DE5 CD 84 34         [ 4] 2551         CALL     DOLIT
      008DE8 00 24                 2552         .word     36	; "0x"
      008DEA CD 87 F5         [ 4] 2553         CALL     EQUAL
      008DED CD 84 67         [ 4] 2554         CALL     QBRAN
      008DF0 8E 01                 2555         .word      NUMQ1
      008DF2 CD 8D 60         [ 4] 2556         CALL     HEX
      008DF5 CD 85 69         [ 4] 2557         CALL     SWAPP
      008DF8 CD 8A 4E         [ 4] 2558         CALL     ONEP
      008DFB CD 85 69         [ 4] 2559         CALL     SWAPP
      008DFE CD 8A 5B         [ 4] 2560         CALL     ONEM
      008E01 CD 85 83         [ 4] 2561 NUMQ1:  CALL     OVER
      008E04 CD 84 D0         [ 4] 2562         CALL     CAT
      008E07 CD 84 34         [ 4] 2563         CALL     DOLIT
      008E0A 00 2D                 2564         .word     45	; "-"
      008E0C CD 87 F5         [ 4] 2565         CALL     EQUAL
      008E0F CD 85 22         [ 4] 2566         CALL     TOR
      008E12 CD 85 69         [ 4] 2567         CALL     SWAPP
      008E15 CD 85 16         [ 4] 2568         CALL     RAT
      008E18 CD 87 CD         [ 4] 2569         CALL     SUBB
      008E1B CD 85 69         [ 4] 2570         CALL     SWAPP
      008E1E CD 85 16         [ 4] 2571         CALL     RAT
      008E21 CD 87 54         [ 4] 2572         CALL     PLUS
      008E24 CD 87 03         [ 4] 2573         CALL     QDUP
      008E27 CD 84 67         [ 4] 2574         CALL     QBRAN
      008E2A 8E 8B                 2575         .word      NUMQ6
      008E2C CD 8A 5B         [ 4] 2576         CALL     ONEM
      008E2F CD 85 22         [ 4] 2577         CALL     TOR
      008E32 CD 85 59         [ 4] 2578 NUMQ2:  CALL     DUPP
      008E35 CD 85 22         [ 4] 2579         CALL     TOR
      008E38 CD 84 D0         [ 4] 2580         CALL     CAT
      008E3B CD 86 16         [ 4] 2581         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      008E3E CD 84 B2         [ 4] 2582         CALL     AT
      008E41 CD 8D 89         [ 4] 2583         CALL     DIGTQ
      008E44 CD 84 67         [ 4] 2584         CALL     QBRAN
      008E47 8E 79                 2585         .word      NUMQ4
      008E49 CD 85 69         [ 4] 2586         CALL     SWAPP
      008E4C CD 86 16         [ 4] 2587         CALL     BASE
      008E4F CD 84 B2         [ 4] 2588         CALL     AT
      008E52 CD 89 CD         [ 4] 2589         CALL     STAR
      008E55 CD 87 54         [ 4] 2590         CALL     PLUS
      008E58 CD 85 03         [ 4] 2591         CALL     RFROM
      008E5B CD 8A 4E         [ 4] 2592         CALL     ONEP
      008E5E CD 84 48         [ 4] 2593         CALL     DONXT
      008E61 8E 32                 2594         .word      NUMQ2
      008E63 CD 85 16         [ 4] 2595         CALL     RAT
      008E66 CD 85 69         [ 4] 2596         CALL     SWAPP
      008E69 CD 85 4F         [ 4] 2597         CALL     DROP
      008E6C CD 84 67         [ 4] 2598         CALL     QBRAN
      008E6F 8E 74                 2599         .word      NUMQ3
      008E71 CD 87 7F         [ 4] 2600         CALL     NEGAT
      008E74 CD 85 69         [ 4] 2601 NUMQ3:  CALL     SWAPP
      008E77 20 0F            [ 2] 2602         JRA     NUMQ5
      008E79 CD 85 03         [ 4] 2603 NUMQ4:  CALL     RFROM
      008E7C CD 85 03         [ 4] 2604         CALL     RFROM
      008E7F CD 87 34         [ 4] 2605         CALL     DDROP
      008E82 CD 87 34         [ 4] 2606         CALL     DDROP
      008E85 CD 8A BA         [ 4] 2607         CALL     ZERO
      008E88 CD 85 59         [ 4] 2608 NUMQ5:  CALL     DUPP
      008E8B CD 85 03         [ 4] 2609 NUMQ6:  CALL     RFROM
      008E8E CD 87 34         [ 4] 2610         CALL     DDROP
      008E91 CD 85 03         [ 4] 2611         CALL     RFROM
      008E94 CD 86 16         [ 4] 2612         CALL     BASE
      008E97 CC 84 9B         [ 2] 2613         JP     STORE
                                   2614 
                                   2615 ;; Basic I/O
                                   2616 
                                   2617 ;       KEY     ( -- c )
                                   2618 ;       Wait for and return an
                                   2619 ;       input character.
      008E9A 8D C5                 2620         .word      LINK
                           000E1C  2621 LINK = . 
      008E9C 03                    2622         .byte      3
      008E9D 4B 45 59              2623         .ascii     "KEY"
      008EA0                       2624 KEY:
      008EA0 72 0B 52 40 FB   [ 2] 2625         btjf UART_SR,#UART_SR_RXNE,. 
      008EA5 C6 52 41         [ 1] 2626         ld a,UART_DR 
      008EA8 1D 00 02         [ 2] 2627         subw x,#CELLL 
      008EAB E7 01            [ 1] 2628         ld (1,x),a 
      008EAD 7F               [ 1] 2629         clr (x)
      008EAE 81               [ 4] 2630         ret 
                                   2631 
                                   2632 ;       NUF?    ( -- t )
                                   2633 ;       Return false if no input,
                                   2634 ;       else pause and if CR return true.
      008EAF 8E 9C                 2635         .word      LINK
                           000E31  2636 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      008EB1 04                    2637         .byte      4
      008EB2 4E 55 46 3F           2638         .ascii     "NUF?"
      008EB6                       2639 NUFQ:
      008EB6 CD 84 00         [ 4] 2640         CALL     QKEY
      008EB9 CD 85 59         [ 4] 2641         CALL     DUPP
      008EBC CD 84 67         [ 4] 2642         CALL     QBRAN
      008EBF 8E CF                 2643         .word    NUFQ1
      008EC1 CD 87 34         [ 4] 2644         CALL     DDROP
      008EC4 CD 8E A0         [ 4] 2645         CALL     KEY
      008EC7 CD 84 34         [ 4] 2646         CALL     DOLIT
      008ECA 00 0D                 2647         .word      CRR
      008ECC CC 87 F5         [ 2] 2648         JP     EQUAL
      008ECF 81               [ 4] 2649 NUFQ1:  RET
                                   2650 
                                   2651 ;       SPACE   ( -- )
                                   2652 ;       Send  blank character to
                                   2653 ;       output device.
      008ED0 8E B1                 2654         .word      LINK
                           000E52  2655 LINK = . 
      008ED2 05                    2656         .byte      5
      008ED3 53 50 41 43 45        2657         .ascii     "SPACE"
      008ED8                       2658 SPACE:
      008ED8 CD 8A AD         [ 4] 2659         CALL     BLANK
      008EDB CC 84 1E         [ 2] 2660         JP     EMIT
                                   2661 
                                   2662 ;       SPACES  ( +n -- )
                                   2663 ;       Send n spaces to output device.
      008EDE 8E D2                 2664         .word      LINK
                           000E60  2665 LINK = . 
      008EE0 06                    2666         .byte      6
      008EE1 53 50 41 43 45 53     2667         .ascii     "SPACES"
      008EE7                       2668 SPACS:
      008EE7 CD 8A BA         [ 4] 2669         CALL     ZERO
      008EEA CD 88 52         [ 4] 2670         CALL     MAX
      008EED CD 85 22         [ 4] 2671         CALL     TOR
      008EF0 20 03            [ 2] 2672         JRA      CHAR2
      008EF2 CD 8E D8         [ 4] 2673 CHAR1:  CALL     SPACE
      008EF5 CD 84 48         [ 4] 2674 CHAR2:  CALL     DONXT
      008EF8 8E F2                 2675         .word    CHAR1
      008EFA 81               [ 4] 2676         RET
                                   2677 
                                   2678 ;       TYPE    ( b u -- )
                                   2679 ;       Output u characters from b.
      008EFB 8E E0                 2680         .word      LINK
                           000E7D  2681 LINK = . 
      008EFD 04                    2682         .byte      4
      008EFE 54 59 50 45           2683         .ascii     "TYPE"
      008F02                       2684 TYPES:
      008F02 CD 85 22         [ 4] 2685         CALL     TOR
      008F05 20 0C            [ 2] 2686         JRA     TYPE2
      008F07 CD 85 59         [ 4] 2687 TYPE1:  CALL     DUPP
      008F0A CD 84 D0         [ 4] 2688         CALL     CAT
      008F0D CD 84 1E         [ 4] 2689         CALL     EMIT
      008F10 CD 8A 4E         [ 4] 2690         CALL     ONEP
      008F13 CD 84 48         [ 4] 2691 TYPE2:  CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      008F16 8F 07                 2692         .word      TYPE1
      008F18 CC 85 4F         [ 2] 2693         JP     DROP
                                   2694 
                                   2695 ;       CR      ( -- )
                                   2696 ;       Output a carriage return
                                   2697 ;       and a line feed.
      008F1B 8E FD                 2698         .word      LINK
                           000E9D  2699 LINK = . 
      008F1D 02                    2700         .byte      2
      008F1E 43 52                 2701         .ascii     "CR"
      008F20                       2702 CR:
      008F20 CD 84 34         [ 4] 2703         CALL     DOLIT
      008F23 00 0D                 2704         .word      CRR
      008F25 CD 84 1E         [ 4] 2705         CALL     EMIT
      008F28 CD 84 34         [ 4] 2706         CALL     DOLIT
      008F2B 00 0A                 2707         .word      LF
      008F2D CC 84 1E         [ 2] 2708         JP     EMIT
                                   2709 
                                   2710 ;       do$     ( -- a )
                                   2711 ;       Return  address of a compiled
                                   2712 ;       string.
      008F30 8F 1D                 2713         .word      LINK
                           000EB2  2714 LINK = . 
      008F32 43                    2715 	.byte      COMPO+3
      008F33 44 4F 24              2716         .ascii     "DO$"
      008F36                       2717 DOSTR:
      008F36 CD 85 03         [ 4] 2718         CALL     RFROM
      008F39 CD 85 16         [ 4] 2719         CALL     RAT
      008F3C CD 85 03         [ 4] 2720         CALL     RFROM
      008F3F CD 8B 91         [ 4] 2721         CALL     COUNT
      008F42 CD 87 54         [ 4] 2722         CALL     PLUS
      008F45 CD 85 22         [ 4] 2723         CALL     TOR
      008F48 CD 85 69         [ 4] 2724         CALL     SWAPP
      008F4B CD 85 22         [ 4] 2725         CALL     TOR
      008F4E 81               [ 4] 2726         RET
                                   2727 
                                   2728 ;       $"|     ( -- a )
                                   2729 ;       Run time routine compiled by $".
                                   2730 ;       Return address of a compiled string.
      008F4F 8F 32                 2731         .word      LINK
                           000ED1  2732 LINK = . 
      008F51 43                    2733 	.byte      COMPO+3
      008F52 24 22 7C              2734         .byte     '$','"','|'
      008F55                       2735 STRQP:
      008F55 CD 8F 36         [ 4] 2736         CALL     DOSTR
      008F58 81               [ 4] 2737         RET
                                   2738 
                                   2739 ;       ."|     ( -- )
                                   2740 ;       Run time routine of ." .
                                   2741 ;       Output a compiled string.
      008F59 8F 51                 2742         .word      LINK
                           000EDB  2743 LINK = . 
      008F5B 43                    2744 	.byte      COMPO+3
      008F5C 2E 22 7C              2745         .byte     '.','"','|'
      008F5F                       2746 DOTQP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      008F5F CD 8F 36         [ 4] 2747         CALL     DOSTR
      008F62 CD 8B 91         [ 4] 2748         CALL     COUNT
      008F65 CC 8F 02         [ 2] 2749         JP     TYPES
                                   2750 
                                   2751 ;       .R      ( n +n -- )
                                   2752 ;       Display an integer in a field
                                   2753 ;       of n columns, right justified.
      008F68 8F 5B                 2754         .word      LINK
                           000EEA  2755 LINK = . 
      008F6A 02                    2756         .byte      2
      008F6B 2E 52                 2757         .ascii     ".R"
      008F6D                       2758 DOTR:
      008F6D CD 85 22         [ 4] 2759         CALL     TOR
      008F70 CD 8D 42         [ 4] 2760         CALL     STR
      008F73 CD 85 03         [ 4] 2761         CALL     RFROM
      008F76 CD 85 83         [ 4] 2762         CALL     OVER
      008F79 CD 87 CD         [ 4] 2763         CALL     SUBB
      008F7C CD 8E E7         [ 4] 2764         CALL     SPACS
      008F7F CC 8F 02         [ 2] 2765         JP     TYPES
                                   2766 
                                   2767 ;       U.R     ( u +n -- )
                                   2768 ;       Display an unsigned integer
                                   2769 ;       in n column, right justified.
      008F82 8F 6A                 2770         .word      LINK
                           000F04  2771 LINK = . 
      008F84 03                    2772         .byte      3
      008F85 55 2E 52              2773         .ascii     "U.R"
      008F88                       2774 UDOTR:
      008F88 CD 85 22         [ 4] 2775         CALL     TOR
      008F8B CD 8C C5         [ 4] 2776         CALL     BDIGS
      008F8E CD 8C FF         [ 4] 2777         CALL     DIGS
      008F91 CD 8D 2A         [ 4] 2778         CALL     EDIGS
      008F94 CD 85 03         [ 4] 2779         CALL     RFROM
      008F97 CD 85 83         [ 4] 2780         CALL     OVER
      008F9A CD 87 CD         [ 4] 2781         CALL     SUBB
      008F9D CD 8E E7         [ 4] 2782         CALL     SPACS
      008FA0 CC 8F 02         [ 2] 2783         JP     TYPES
                                   2784 
                                   2785 ;       U.      ( u -- )
                                   2786 ;       Display an unsigned integer
                                   2787 ;       in free format.
      008FA3 8F 84                 2788         .word      LINK
                           000F25  2789 LINK = . 
      008FA5 02                    2790         .byte      2
      008FA6 55 2E                 2791         .ascii     "U."
      008FA8                       2792 UDOT:
      008FA8 CD 8C C5         [ 4] 2793         CALL     BDIGS
      008FAB CD 8C FF         [ 4] 2794         CALL     DIGS
      008FAE CD 8D 2A         [ 4] 2795         CALL     EDIGS
      008FB1 CD 8E D8         [ 4] 2796         CALL     SPACE
      008FB4 CC 8F 02         [ 2] 2797         JP     TYPES
                                   2798 
                                   2799 ;       .       ( w -- )
                                   2800 ;       Display an integer in free
                                   2801 ;       format, preceeded by a space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      008FB7 8F A5                 2802         .word      LINK
                           000F39  2803 LINK = . 
      008FB9 01                    2804         .byte      1
      008FBA 2E                    2805         .ascii     "."
      008FBB                       2806 DOT:
      008FBB CD 86 16         [ 4] 2807         CALL     BASE
      008FBE CD 84 B2         [ 4] 2808         CALL     AT
      008FC1 CD 84 34         [ 4] 2809         CALL     DOLIT
      008FC4 00 0A                 2810         .word      10
      008FC6 CD 85 CE         [ 4] 2811         CALL     XORR    ;?decimal
      008FC9 CD 84 67         [ 4] 2812         CALL     QBRAN
      008FCC 8F D1                 2813         .word      DOT1
      008FCE CC 8F A8         [ 2] 2814         JP     UDOT
      008FD1 CD 8D 42         [ 4] 2815 DOT1:   CALL     STR
      008FD4 CD 8E D8         [ 4] 2816         CALL     SPACE
      008FD7 CC 8F 02         [ 2] 2817         JP     TYPES
                                   2818 
                                   2819 ;       ?       ( a -- )
                                   2820 ;       Display contents in memory cell.
      008FDA 8F B9                 2821         .word      LINK
                                   2822         
                           000F5C  2823 LINK = . 
      008FDC 01                    2824         .byte      1
      008FDD 3F                    2825         .ascii     "?"
      008FDE                       2826 QUEST:
      008FDE CD 84 B2         [ 4] 2827         CALL     AT
      008FE1 CC 8F BB         [ 2] 2828         JP     DOT
                                   2829 
                                   2830 ;; Parsing
                                   2831 
                                   2832 ;       parse   ( b u c -- b u delta ; <string> )
                                   2833 ;       Scan string delimited by c.
                                   2834 ;       Return found string and its offset.
      008FE4 8F DC                 2835         .word      LINK
                           000F66  2836 LINK = . 
      008FE6 05                    2837         .byte      5
      008FE7 70 61 72 73 65        2838         .ascii     "parse"
      008FEC                       2839 PARS:
      008FEC CD 86 25         [ 4] 2840         CALL     TEMP
      008FEF CD 84 9B         [ 4] 2841         CALL     STORE
      008FF2 CD 85 83         [ 4] 2842         CALL     OVER
      008FF5 CD 85 22         [ 4] 2843         CALL     TOR
      008FF8 CD 85 59         [ 4] 2844         CALL     DUPP
      008FFB CD 84 67         [ 4] 2845         CALL     QBRAN
      008FFE 90 A4                 2846         .word    PARS8
      009000 CD 8A 5B         [ 4] 2847         CALL     ONEM
      009003 CD 86 25         [ 4] 2848         CALL     TEMP
      009006 CD 84 B2         [ 4] 2849         CALL     AT
      009009 CD 8A AD         [ 4] 2850         CALL     BLANK
      00900C CD 87 F5         [ 4] 2851         CALL     EQUAL
      00900F CD 84 67         [ 4] 2852         CALL     QBRAN
      009012 90 45                 2853         .word      PARS3
      009014 CD 85 22         [ 4] 2854         CALL     TOR
      009017 CD 8A AD         [ 4] 2855 PARS1:  CALL     BLANK
      00901A CD 85 83         [ 4] 2856         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00901D CD 84 D0         [ 4] 2857         CALL     CAT     ;skip leading blanks ONLY
      009020 CD 87 CD         [ 4] 2858         CALL     SUBB
      009023 CD 85 92         [ 4] 2859         CALL     ZLESS
      009026 CD 87 6E         [ 4] 2860         CALL     INVER
      009029 CD 84 67         [ 4] 2861         CALL     QBRAN
      00902C 90 42                 2862         .word      PARS2
      00902E CD 8A 4E         [ 4] 2863         CALL     ONEP
      009031 CD 84 48         [ 4] 2864         CALL     DONXT
      009034 90 17                 2865         .word      PARS1
      009036 CD 85 03         [ 4] 2866         CALL     RFROM
      009039 CD 85 4F         [ 4] 2867         CALL     DROP
      00903C CD 8A BA         [ 4] 2868         CALL     ZERO
      00903F CC 85 59         [ 2] 2869         JP     DUPP
      009042 CD 85 03         [ 4] 2870 PARS2:  CALL     RFROM
      009045 CD 85 83         [ 4] 2871 PARS3:  CALL     OVER
      009048 CD 85 69         [ 4] 2872         CALL     SWAPP
      00904B CD 85 22         [ 4] 2873         CALL     TOR
      00904E CD 86 25         [ 4] 2874 PARS4:  CALL     TEMP
      009051 CD 84 B2         [ 4] 2875         CALL     AT
      009054 CD 85 83         [ 4] 2876         CALL     OVER
      009057 CD 84 D0         [ 4] 2877         CALL     CAT
      00905A CD 87 CD         [ 4] 2878         CALL     SUBB    ;scan for delimiter
      00905D CD 86 25         [ 4] 2879         CALL     TEMP
      009060 CD 84 B2         [ 4] 2880         CALL     AT
      009063 CD 8A AD         [ 4] 2881         CALL     BLANK
      009066 CD 87 F5         [ 4] 2882         CALL     EQUAL
      009069 CD 84 67         [ 4] 2883         CALL     QBRAN
      00906C 90 71                 2884         .word      PARS5
      00906E CD 85 92         [ 4] 2885         CALL     ZLESS
      009071 CD 84 67         [ 4] 2886 PARS5:  CALL     QBRAN
      009074 90 86                 2887         .word      PARS6
      009076 CD 8A 4E         [ 4] 2888         CALL     ONEP
      009079 CD 84 48         [ 4] 2889         CALL     DONXT
      00907C 90 4E                 2890         .word      PARS4
      00907E CD 85 59         [ 4] 2891         CALL     DUPP
      009081 CD 85 22         [ 4] 2892         CALL     TOR
      009084 20 0F            [ 2] 2893         JRA     PARS7
      009086 CD 85 03         [ 4] 2894 PARS6:  CALL     RFROM
      009089 CD 85 4F         [ 4] 2895         CALL     DROP
      00908C CD 85 59         [ 4] 2896         CALL     DUPP
      00908F CD 8A 4E         [ 4] 2897         CALL     ONEP
      009092 CD 85 22         [ 4] 2898         CALL     TOR
      009095 CD 85 83         [ 4] 2899 PARS7:  CALL     OVER
      009098 CD 87 CD         [ 4] 2900         CALL     SUBB
      00909B CD 85 03         [ 4] 2901         CALL     RFROM
      00909E CD 85 03         [ 4] 2902         CALL     RFROM
      0090A1 CC 87 CD         [ 2] 2903         JP     SUBB
      0090A4 CD 85 83         [ 4] 2904 PARS8:  CALL     OVER
      0090A7 CD 85 03         [ 4] 2905         CALL     RFROM
      0090AA CC 87 CD         [ 2] 2906         JP     SUBB
                                   2907 
                                   2908 ;       PARSE   ( c -- b u ; <string> )
                                   2909 ;       Scan input stream and return
                                   2910 ;       counted string delimited by c.
      0090AD 8F E6                 2911         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           00102F  2912 LINK = . 
      0090AF 05                    2913         .byte      5
      0090B0 50 41 52 53 45        2914         .ascii     "PARSE"
      0090B5                       2915 PARSE:
      0090B5 CD 85 22         [ 4] 2916         CALL     TOR
      0090B8 CD 8B CA         [ 4] 2917         CALL     TIB
      0090BB CD 86 34         [ 4] 2918         CALL     INN
      0090BE CD 84 B2         [ 4] 2919         CALL     AT
      0090C1 CD 87 54         [ 4] 2920         CALL     PLUS    ;current input buffer pointer
      0090C4 CD 86 44         [ 4] 2921         CALL     NTIB
      0090C7 CD 84 B2         [ 4] 2922         CALL     AT
      0090CA CD 86 34         [ 4] 2923         CALL     INN
      0090CD CD 84 B2         [ 4] 2924         CALL     AT
      0090D0 CD 87 CD         [ 4] 2925         CALL     SUBB    ;remaining count
      0090D3 CD 85 03         [ 4] 2926         CALL     RFROM
      0090D6 CD 8F EC         [ 4] 2927         CALL     PARS
      0090D9 CD 86 34         [ 4] 2928         CALL     INN
      0090DC CC 8B 2A         [ 2] 2929         JP     PSTOR
                                   2930 
                                   2931 ;       .(      ( -- )
                                   2932 ;       Output following string up to next ) .
      0090DF 90 AF                 2933         .word      LINK
                           001061  2934 LINK = . 
      0090E1 82                    2935 	.byte      IMEDD+2
      0090E2 2E 28                 2936         .ascii     ".("
      0090E4                       2937 DOTPR:
      0090E4 CD 84 34         [ 4] 2938         CALL     DOLIT
      0090E7 00 29                 2939         .word     41	; ")"
      0090E9 CD 90 B5         [ 4] 2940         CALL     PARSE
      0090EC CC 8F 02         [ 2] 2941         JP     TYPES
                                   2942 
                                   2943 ;       (       ( -- )
                                   2944 ;       Ignore following string up to next ).
                                   2945 ;       A comment.
      0090EF 90 E1                 2946         .word      LINK
                           001071  2947 LINK = . 
      0090F1 81                    2948 	.byte      IMEDD+1
      0090F2 28                    2949         .ascii     "("
      0090F3                       2950 PAREN:
      0090F3 CD 84 34         [ 4] 2951         CALL     DOLIT
      0090F6 00 29                 2952         .word     41	; ")"
      0090F8 CD 90 B5         [ 4] 2953         CALL     PARSE
      0090FB CC 87 34         [ 2] 2954         JP     DDROP
                                   2955 
                                   2956 ;       \       ( -- )
                                   2957 ;       Ignore following text till
                                   2958 ;       end of line.
      0090FE 90 F1                 2959         .word      LINK
                           001080  2960 LINK = . 
      009100 81                    2961 	.byte      IMEDD+1
      009101 5C                    2962         .ascii     "\"
      009102                       2963 BKSLA:
      009102 90 AE 00 0C      [ 2] 2964         ldw y,#UCTIB ; #TIB  
      009106 90 FE            [ 2] 2965         ldw y,(y)
      009108 90 89            [ 2] 2966         pushw y ; count in TIB 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00910A 90 AE 00 0A      [ 2] 2967         ldw y,#UINN ; >IN 
      00910E 90 BF 24         [ 2] 2968         ldw YTEMP,y
      009111 90 85            [ 2] 2969         popw y 
      009113 91 CF 24         [ 5] 2970         ldw [YTEMP],y
      009116 81               [ 4] 2971         ret 
                                   2972 
                                   2973 ;       WORD    ( c -- a ; <string> )
                                   2974 ;       Parse a word from input stream
                                   2975 ;       and copy it to code dictionary.
      009117 91 00                 2976         .word      LINK
                           001099  2977 LINK = . 
      009119 04                    2978         .byte      4
      00911A 57 4F 52 44           2979         .ascii     "WORD"
      00911E                       2980 WORDD:
      00911E CD 90 B5         [ 4] 2981         CALL     PARSE
      009121 CD 8B A8         [ 4] 2982         CALL     HERE
      009124 CD 8A 23         [ 4] 2983         CALL     CELLP
      009127 CC 8C 68         [ 2] 2984         JP     PACKS
                                   2985 
                                   2986 ;       TOKEN   ( -- a ; <string> )
                                   2987 ;       Parse a word from input stream
                                   2988 ;       and copy it to name dictionary.
      00912A 91 19                 2989         .word      LINK
                           0010AC  2990 LINK = . 
      00912C 05                    2991         .byte      5
      00912D 54 4F 4B 45 4E        2992         .ascii     "TOKEN"
      009132                       2993 TOKEN:
      009132 CD 8A AD         [ 4] 2994         CALL     BLANK
      009135 CC 91 1E         [ 2] 2995         JP     WORDD
                                   2996 
                                   2997 ;; Dictionary search
                                   2998 
                                   2999 ;       NAME>   ( na -- ca )
                                   3000 ;       Return a code address given
                                   3001 ;       a name address.
      009138 91 2C                 3002         .word      LINK
                           0010BA  3003 LINK = . 
      00913A 05                    3004         .byte      5
      00913B 4E 41 4D 45 3E        3005         .ascii     "NAME>"
      009140                       3006 NAMET:
      009140 CD 8B 91         [ 4] 3007         CALL     COUNT
      009143 CD 84 34         [ 4] 3008         CALL     DOLIT
      009146 00 1F                 3009         .word      31
      009148 CD 85 A5         [ 4] 3010         CALL     ANDD
      00914B CC 87 54         [ 2] 3011         JP     PLUS
                                   3012 
                                   3013 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3014 ;       Compare u cells in two
                                   3015 ;       strings. Return 0 if identical.
      00914E 91 3A                 3016         .word      LINK
                           0010D0  3017 LINK = . 
      009150 05                    3018         .byte       5
      009151 53 41 4D 45 3F        3019         .ascii     "SAME?"
      009156                       3020 SAMEQ:
      009156 CD 8A 5B         [ 4] 3021         CALL     ONEM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      009159 CD 85 22         [ 4] 3022         CALL     TOR
      00915C 20 29            [ 2] 3023         JRA     SAME2
      00915E CD 85 83         [ 4] 3024 SAME1:  CALL     OVER
      009161 CD 85 16         [ 4] 3025         CALL     RAT
      009164 CD 87 54         [ 4] 3026         CALL     PLUS
      009167 CD 84 D0         [ 4] 3027         CALL     CAT
      00916A CD 85 83         [ 4] 3028         CALL     OVER
      00916D CD 85 16         [ 4] 3029         CALL     RAT
      009170 CD 87 54         [ 4] 3030         CALL     PLUS
      009173 CD 84 D0         [ 4] 3031         CALL     CAT
      009176 CD 87 CD         [ 4] 3032         CALL     SUBB
      009179 CD 87 03         [ 4] 3033         CALL     QDUP
      00917C CD 84 67         [ 4] 3034         CALL     QBRAN
      00917F 91 87                 3035         .word      SAME2
      009181 CD 85 03         [ 4] 3036         CALL     RFROM
      009184 CC 85 4F         [ 2] 3037         JP     DROP
      009187 CD 84 48         [ 4] 3038 SAME2:  CALL     DONXT
      00918A 91 5E                 3039         .word      SAME1
      00918C CC 8A BA         [ 2] 3040         JP     ZERO
                                   3041 
                                   3042 ;       find    ( a va -- ca na | a F )
                                   3043 ;       Search vocabulary for string.
                                   3044 ;       Return ca and na if succeeded.
      00918F 91 50                 3045         .word      LINK
                           001111  3046 LINK = . 
      009191 04                    3047         .byte      4
      009192 46 49 4E 44           3048         .ascii     "FIND"
      009196                       3049 FIND:
      009196 CD 85 69         [ 4] 3050         CALL     SWAPP
      009199 CD 85 59         [ 4] 3051         CALL     DUPP
      00919C CD 84 D0         [ 4] 3052         CALL     CAT
      00919F CD 86 25         [ 4] 3053         CALL     TEMP
      0091A2 CD 84 9B         [ 4] 3054         CALL     STORE
      0091A5 CD 85 59         [ 4] 3055         CALL     DUPP
      0091A8 CD 84 B2         [ 4] 3056         CALL     AT
      0091AB CD 85 22         [ 4] 3057         CALL     TOR
      0091AE CD 8A 23         [ 4] 3058         CALL     CELLP
      0091B1 CD 85 69         [ 4] 3059         CALL     SWAPP
      0091B4 CD 84 B2         [ 4] 3060 FIND1:  CALL     AT
      0091B7 CD 85 59         [ 4] 3061         CALL     DUPP
      0091BA CD 84 67         [ 4] 3062         CALL     QBRAN
      0091BD 91 F3                 3063         .word      FIND6
      0091BF CD 85 59         [ 4] 3064         CALL     DUPP
      0091C2 CD 84 B2         [ 4] 3065         CALL     AT
      0091C5 CD 84 34         [ 4] 3066         CALL     DOLIT
      0091C8 1F 7F                 3067         .word      MASKK
      0091CA CD 85 A5         [ 4] 3068         CALL     ANDD
      0091CD CD 85 16         [ 4] 3069         CALL     RAT
      0091D0 CD 85 CE         [ 4] 3070         CALL     XORR
      0091D3 CD 84 67         [ 4] 3071         CALL     QBRAN
      0091D6 91 E2                 3072         .word      FIND2
      0091D8 CD 8A 23         [ 4] 3073         CALL     CELLP
      0091DB CD 84 34         [ 4] 3074         CALL     DOLIT
      0091DE FF FF                 3075         .word     0xFFFF
      0091E0 20 0C            [ 2] 3076         JRA     FIND3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0091E2 CD 8A 23         [ 4] 3077 FIND2:  CALL     CELLP
      0091E5 CD 86 25         [ 4] 3078         CALL     TEMP
      0091E8 CD 84 B2         [ 4] 3079         CALL     AT
      0091EB CD 91 56         [ 4] 3080         CALL     SAMEQ
      0091EE CD 84 7E         [ 4] 3081 FIND3:  CALL     BRAN
      0091F1 92 02                 3082         .word      FIND4
      0091F3 CD 85 03         [ 4] 3083 FIND6:  CALL     RFROM
      0091F6 CD 85 4F         [ 4] 3084         CALL     DROP
      0091F9 CD 85 69         [ 4] 3085         CALL     SWAPP
      0091FC CD 8A 32         [ 4] 3086         CALL     CELLM
      0091FF CC 85 69         [ 2] 3087         JP     SWAPP
      009202 CD 84 67         [ 4] 3088 FIND4:  CALL     QBRAN
      009205 92 0F                 3089         .word      FIND5
      009207 CD 8A 32         [ 4] 3090         CALL     CELLM
      00920A CD 8A 32         [ 4] 3091         CALL     CELLM
      00920D 20 A5            [ 2] 3092         JRA     FIND1
      00920F CD 85 03         [ 4] 3093 FIND5:  CALL     RFROM
      009212 CD 85 4F         [ 4] 3094         CALL     DROP
      009215 CD 85 69         [ 4] 3095         CALL     SWAPP
      009218 CD 85 4F         [ 4] 3096         CALL     DROP
      00921B CD 8A 32         [ 4] 3097         CALL     CELLM
      00921E CD 85 59         [ 4] 3098         CALL     DUPP
      009221 CD 91 40         [ 4] 3099         CALL     NAMET
      009224 CC 85 69         [ 2] 3100         JP     SWAPP
                                   3101 
                                   3102 ;       NAME?   ( a -- ca na | a F )
                                   3103 ;       Search vocabularies for a string.
      009227 91 91                 3104         .word      LINK
                           0011A9  3105 LINK = . 
      009229 05                    3106         .byte      5
      00922A 4E 41 4D 45 3F        3107         .ascii     "NAME?"
      00922F                       3108 NAMEQ:
      00922F CD 86 99         [ 4] 3109         CALL   CNTXT
      009232 CC 91 96         [ 2] 3110         JP     FIND
                                   3111 
                                   3112 ;; Terminal response
                                   3113 
                                   3114 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3115 ;       Backup cursor by one character.
      009235 92 29                 3116         .word      LINK
                           0011B7  3117 LINK = . 
      009237 02                    3118         .byte      2
      009238 5E 48                 3119         .ascii     "^H"
      00923A                       3120 BKSP:
      00923A CD 85 22         [ 4] 3121         CALL     TOR
      00923D CD 85 83         [ 4] 3122         CALL     OVER
      009240 CD 85 03         [ 4] 3123         CALL     RFROM
      009243 CD 85 69         [ 4] 3124         CALL     SWAPP
      009246 CD 85 83         [ 4] 3125         CALL     OVER
      009249 CD 85 CE         [ 4] 3126         CALL     XORR
      00924C CD 84 67         [ 4] 3127         CALL     QBRAN
      00924F 92 6A                 3128         .word      BACK1
      009251 CD 84 34         [ 4] 3129         CALL     DOLIT
      009254 00 08                 3130         .word      BKSPP
      009256 CD 84 1E         [ 4] 3131         CALL     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      009259 CD 8A 5B         [ 4] 3132         CALL     ONEM
      00925C CD 8A AD         [ 4] 3133         CALL     BLANK
      00925F CD 84 1E         [ 4] 3134         CALL     EMIT
      009262 CD 84 34         [ 4] 3135         CALL     DOLIT
      009265 00 08                 3136         .word      BKSPP
      009267 CC 84 1E         [ 2] 3137         JP     EMIT
      00926A 81               [ 4] 3138 BACK1:  RET
                                   3139 
                                   3140 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3141 ;       Accept and echo key stroke
                                   3142 ;       and bump cursor.
      00926B 92 37                 3143         .word      LINK
                           0011ED  3144 LINK = . 
      00926D 03                    3145         .byte      3
      00926E 54 41 50              3146         .ascii     "TAP"
      009271                       3147 TAP:
      009271 CD 85 59         [ 4] 3148         CALL     DUPP
      009274 CD 84 1E         [ 4] 3149         CALL     EMIT
      009277 CD 85 83         [ 4] 3150         CALL     OVER
      00927A CD 84 BF         [ 4] 3151         CALL     CSTOR
      00927D CC 8A 4E         [ 2] 3152         JP     ONEP
                                   3153 
                                   3154 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3155 ;       Process a key stroke,
                                   3156 ;       CR or backspace.
      009280 92 6D                 3157         .word      LINK
                           001202  3158 LINK = . 
      009282 04                    3159         .byte      4
      009283 4B 54 41 50           3160         .ascii     "KTAP"
      009287                       3161 KTAP:
      009287 CD 85 59         [ 4] 3162         CALL     DUPP
      00928A CD 84 34         [ 4] 3163         CALL     DOLIT
      00928D 00 0D                 3164         .word      CRR
      00928F CD 85 CE         [ 4] 3165         CALL     XORR
      009292 CD 84 67         [ 4] 3166         CALL     QBRAN
      009295 92 AD                 3167         .word      KTAP2
      009297 CD 84 34         [ 4] 3168         CALL     DOLIT
      00929A 00 08                 3169         .word      BKSPP
      00929C CD 85 CE         [ 4] 3170         CALL     XORR
      00929F CD 84 67         [ 4] 3171         CALL     QBRAN
      0092A2 92 AA                 3172         .word      KTAP1
      0092A4 CD 8A AD         [ 4] 3173         CALL     BLANK
      0092A7 CC 92 71         [ 2] 3174         JP     TAP
      0092AA CC 92 3A         [ 2] 3175 KTAP1:  JP     BKSP
      0092AD CD 85 4F         [ 4] 3176 KTAP2:  CALL     DROP
      0092B0 CD 85 69         [ 4] 3177         CALL     SWAPP
      0092B3 CD 85 4F         [ 4] 3178         CALL     DROP
      0092B6 CC 85 59         [ 2] 3179         JP     DUPP
                                   3180 
                                   3181 ;       accept  ( b u -- b u )
                                   3182 ;       Accept characters to input
                                   3183 ;       buffer. Return with actual count.
      0092B9 92 82                 3184         .word      LINK
                           00123B  3185 LINK = . 
      0092BB 06                    3186         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0092BC 41 43 43 45 50 54     3187         .ascii     "ACCEPT"
      0092C2                       3188 ACCEP:
      0092C2 CD 85 83         [ 4] 3189         CALL     OVER
      0092C5 CD 87 54         [ 4] 3190         CALL     PLUS
      0092C8 CD 85 83         [ 4] 3191         CALL     OVER
      0092CB CD 87 3F         [ 4] 3192 ACCP1:  CALL     DDUP
      0092CE CD 85 CE         [ 4] 3193         CALL     XORR
      0092D1 CD 84 67         [ 4] 3194         CALL     QBRAN
      0092D4 92 F6                 3195         .word      ACCP4
      0092D6 CD 8E A0         [ 4] 3196         CALL     KEY
      0092D9 CD 85 59         [ 4] 3197         CALL     DUPP
      0092DC CD 8A AD         [ 4] 3198         CALL     BLANK
      0092DF CD 84 34         [ 4] 3199         CALL     DOLIT
      0092E2 00 7F                 3200         .word      127
      0092E4 CD 88 8F         [ 4] 3201         CALL     WITHI
      0092E7 CD 84 67         [ 4] 3202         CALL     QBRAN
      0092EA 92 F1                 3203         .word      ACCP2
      0092EC CD 92 71         [ 4] 3204         CALL     TAP
      0092EF 20 03            [ 2] 3205         JRA     ACCP3
      0092F1 CD 92 87         [ 4] 3206 ACCP2:  CALL     KTAP
      0092F4 20 D5            [ 2] 3207 ACCP3:  JRA     ACCP1
      0092F6 CD 85 4F         [ 4] 3208 ACCP4:  CALL     DROP
      0092F9 CD 85 83         [ 4] 3209         CALL     OVER
      0092FC CC 87 CD         [ 2] 3210         JP     SUBB
                                   3211 
                                   3212 ;       QUERY   ( -- )
                                   3213 ;       Accept input stream to
                                   3214 ;       terminal input buffer.
      0092FF 92 BB                 3215         .word      LINK
                                   3216         
                           001281  3217 LINK = . 
      009301 05                    3218         .byte      5
      009302 51 55 45 52 59        3219         .ascii     "QUERY"
      009307                       3220 QUERY:
      009307 CD 8B CA         [ 4] 3221         CALL     TIB
      00930A CD 84 34         [ 4] 3222         CALL     DOLIT
      00930D 00 50                 3223         .word      80
      00930F CD 92 C2         [ 4] 3224         CALL     ACCEP
      009312 CD 86 44         [ 4] 3225         CALL     NTIB
      009315 CD 84 9B         [ 4] 3226         CALL     STORE
      009318 CD 85 4F         [ 4] 3227         CALL     DROP
      00931B CD 8A BA         [ 4] 3228         CALL     ZERO
      00931E CD 86 34         [ 4] 3229         CALL     INN
      009321 CC 84 9B         [ 2] 3230         JP     STORE
                                   3231 
                                   3232 ;       ABORT   ( -- )
                                   3233 ;       Reset data stack and
                                   3234 ;       jump to QUIT.
      009324 93 01                 3235         .word      LINK
                           0012A6  3236 LINK = . 
      009326 05                    3237         .byte      5
      009327 41 42 4F 52 54        3238         .ascii     "ABORT"
      00932C                       3239 ABORT:
      00932C CD 94 23         [ 4] 3240         CALL     PRESE
      00932F CC 94 40         [ 2] 3241         JP     QUIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3242 
                                   3243 ;       abort"  ( f -- )
                                   3244 ;       Run time routine of ABORT".
                                   3245 ;       Abort with a message.
      009332 93 26                 3246         .word      LINK
                           0012B4  3247 LINK = . 
      009334 46                    3248 	.byte      COMPO+6
      009335 41 42 4F 52 54        3249         .ascii     "ABORT"
      00933A 22                    3250         .byte      '"'
      00933B                       3251 ABORQ:
      00933B CD 84 67         [ 4] 3252         CALL     QBRAN
      00933E 93 5A                 3253         .word      ABOR2   ;text flag
      009340 CD 8F 36         [ 4] 3254         CALL     DOSTR
      009343 CD 8E D8         [ 4] 3255 ABOR1:  CALL     SPACE
      009346 CD 8B 91         [ 4] 3256         CALL     COUNT
      009349 CD 8F 02         [ 4] 3257         CALL     TYPES
      00934C CD 84 34         [ 4] 3258         CALL     DOLIT
      00934F 00 3F                 3259         .word     63 ; "?"
      009351 CD 84 1E         [ 4] 3260         CALL     EMIT
      009354 CD 8F 20         [ 4] 3261         CALL     CR
      009357 CC 93 2C         [ 2] 3262         JP     ABORT   ;pass error string
      00935A CD 8F 36         [ 4] 3263 ABOR2:  CALL     DOSTR
      00935D CC 85 4F         [ 2] 3264         JP     DROP
                                   3265 
                                   3266 ;; The text interpreter
                                   3267 
                                   3268 ;       $INTERPRET      ( a -- )
                                   3269 ;       Interpret a word. If failed,
                                   3270 ;       try to convert it to an integer.
      009360 93 34                 3271         .word      LINK
                           0012E2  3272 LINK = . 
      009362 0A                    3273         .byte      10
      009363 24 49 4E 54 45 52 50  3274         .ascii     "$INTERPRET"
             52 45 54
      00936D                       3275 INTER:
      00936D CD 92 2F         [ 4] 3276         CALL     NAMEQ
      009370 CD 87 03         [ 4] 3277         CALL     QDUP    ;?defined
      009373 CD 84 67         [ 4] 3278         CALL     QBRAN
      009376 93 97                 3279         .word      INTE1
      009378 CD 84 B2         [ 4] 3280         CALL     AT
      00937B CD 84 34         [ 4] 3281         CALL     DOLIT
      00937E 40 00                 3282 	.word       0x4000	; COMPO*256
      009380 CD 85 A5         [ 4] 3283         CALL     ANDD    ;?compile only lexicon bits
      009383 CD 93 3B         [ 4] 3284         CALL     ABORQ
      009386 0D                    3285         .byte      13
      009387 20 63 6F 6D 70 69 6C  3286         .ascii     " compile only"
             65 20 6F 6E 6C 79
      009394 CC 84 8E         [ 2] 3287         JP     EXECU
      009397 CD 8D CD         [ 4] 3288 INTE1:  CALL     NUMBQ   ;convert a number
      00939A CD 84 67         [ 4] 3289         CALL     QBRAN
      00939D 93 43                 3290         .word    ABOR1
      00939F 81               [ 4] 3291         RET
                                   3292 
                                   3293 ;       [       ( -- )
                                   3294 ;       Start  text interpreter.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0093A0 93 62                 3295         .word      LINK
                           001322  3296 LINK = . 
      0093A2 81                    3297 	.byte      IMEDD+1
      0093A3 5B                    3298         .ascii     "["
      0093A4                       3299 LBRAC:
      0093A4 CD 84 34         [ 4] 3300         CALL   DOLIT
      0093A7 93 6D                 3301         .word  INTER
      0093A9 CD 86 77         [ 4] 3302         CALL   TEVAL
      0093AC CC 84 9B         [ 2] 3303         JP     STORE
                                   3304 
                                   3305 ;       .OK     ( -- )
                                   3306 ;       Display 'ok' while interpreting.
      0093AF 93 A2                 3307         .word      LINK
                           001331  3308 LINK = . 
      0093B1 03                    3309         .byte      3
      0093B2 2E 4F 4B              3310         .ascii     ".OK"
      0093B5                       3311 DOTOK:
      0093B5 CD 84 34         [ 4] 3312         CALL     DOLIT
      0093B8 93 6D                 3313         .word      INTER
      0093BA CD 86 77         [ 4] 3314         CALL     TEVAL
      0093BD CD 84 B2         [ 4] 3315         CALL     AT
      0093C0 CD 87 F5         [ 4] 3316         CALL     EQUAL
      0093C3 CD 84 67         [ 4] 3317         CALL     QBRAN
      0093C6 93 CF                 3318         .word      DOTO1
      0093C8 CD 8F 5F         [ 4] 3319         CALL     DOTQP
      0093CB 03                    3320         .byte      3
      0093CC 20 6F 6B              3321         .ascii     " ok"
      0093CF CC 8F 20         [ 2] 3322 DOTO1:  JP     CR
                                   3323 
                                   3324 ;       ?STACK  ( -- )
                                   3325 ;       Abort if stack underflows.
      0093D2 93 B1                 3326         .word      LINK
                           001354  3327 LINK = . 
      0093D4 06                    3328         .byte      6
      0093D5 3F 53 54 41 43 4B     3329         .ascii     "?STACK"
      0093DB                       3330 QSTAC: 
      0093DB CD 8A FC         [ 4] 3331         CALL     DEPTH
      0093DE CD 85 92         [ 4] 3332         CALL     ZLESS   ;check only for underflow
      0093E1 CD 93 3B         [ 4] 3333         CALL     ABORQ
      0093E4 0B                    3334         .byte      11
      0093E5 20 75 6E 64 65 72 66  3335         .ascii     " underflow "
             6C 6F 77 20
      0093F0 81               [ 4] 3336         RET
                                   3337 
                                   3338 ;       EVAL    ( -- )
                                   3339 ;       Interpret  input stream.
      0093F1 93 D4                 3340         .word      LINK
                           001373  3341 LINK = . 
      0093F3 04                    3342         .byte      4
      0093F4 45 56 41 4C           3343         .ascii     "EVAL"
      0093F8                       3344 EVAL:
      0093F8 CD 91 32         [ 4] 3345 EVAL1:  CALL     TOKEN
      0093FB CD 85 59         [ 4] 3346         CALL     DUPP
      0093FE CD 84 D0         [ 4] 3347         CALL     CAT     ;?input stream empty
      009401 CD 84 67         [ 4] 3348         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      009404 94 14                 3349         .word    EVAL2
      009406 CD 86 77         [ 4] 3350         CALL     TEVAL
      009409 CD 8B DE         [ 4] 3351         CALL     ATEXE
      00940C CD 93 DB         [ 4] 3352         CALL     QSTAC   ;evaluate input, check stack
      00940F CD 84 7E         [ 4] 3353         CALL     BRAN
      009412 93 F8                 3354         .word    EVAL1
      009414 CD 85 4F         [ 4] 3355 EVAL2:  CALL     DROP
      009417 CC 93 B5         [ 2] 3356         JP       DOTOK
                                   3357 
                                   3358 ;       PRESET  ( -- )
                                   3359 ;       Reset data stack pointer and
                                   3360 ;       terminal input buffer.
      00941A 93 F3                 3361         .word      LINK
                           00139C  3362 LINK = . 
      00941C 06                    3363         .byte      6
      00941D 50 52 45 53 45 54     3364         .ascii     "PRESET"
      009423                       3365 PRESE:
      009423 CD 84 34         [ 4] 3366         CALL     DOLIT
      009426 06 80                 3367         .word      SPP
      009428 CD 85 46         [ 4] 3368         CALL     SPSTO
      00942B CD 84 34         [ 4] 3369         CALL     DOLIT
      00942E 07 00                 3370         .word      TIBB
      009430 CD 86 44         [ 4] 3371         CALL     NTIB
      009433 CD 8A 23         [ 4] 3372         CALL     CELLP
      009436 CC 84 9B         [ 2] 3373         JP     STORE
                                   3374 
                                   3375 ;       QUIT    ( -- )
                                   3376 ;       Reset return stack pointer
                                   3377 ;       and start text interpreter.
      009439 94 1C                 3378         .word      LINK
                           0013BB  3379 LINK = . 
      00943B 04                    3380         .byte      4
      00943C 51 55 49 54           3381         .ascii     "QUIT"
      009440                       3382 QUIT:
      009440 CD 84 34         [ 4] 3383         CALL     DOLIT
      009443 07 FF                 3384         .word      RPP
      009445 CD 84 ED         [ 4] 3385         CALL     RPSTO   ;reset return stack pointer
      009448 CD 93 A4         [ 4] 3386 QUIT1:  CALL     LBRAC   ;start interpretation
      00944B CD 93 07         [ 4] 3387 QUIT2:  CALL     QUERY   ;get input
      00944E CD 93 F8         [ 4] 3388         CALL     EVAL
      009451 20 F8            [ 2] 3389         JRA     QUIT2   ;continue till error
                                   3390 
                                   3391 ;; The compiler
                                   3392 
                                   3393 ;       '       ( -- ca )
                                   3394 ;       Search vocabularies for
                                   3395 ;       next word in input stream.
      009453 94 3B                 3396         .word      LINK
                           0013D5  3397 LINK = . 
      009455 01                    3398         .byte      1
      009456 27                    3399         .ascii     "'"
      009457                       3400 TICK:
      009457 CD 91 32         [ 4] 3401         CALL     TOKEN
      00945A CD 92 2F         [ 4] 3402         CALL     NAMEQ   ;?defined
      00945D CD 84 67         [ 4] 3403         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      009460 93 43                 3404         .word      ABOR1
      009462 81               [ 4] 3405         RET     ;yes, push code address
                                   3406 
                                   3407 ;       ALLOT   ( n -- )
                                   3408 ;       Allocate n bytes to RAM 
      009463 94 55                 3409         .word      LINK
                           0013E5  3410         LINK = . 
      009465 05                    3411         .byte      5
      009466 41 4C 4C 4F 54        3412         .ascii     "ALLOT"
      00946B                       3413 ALLOT:
      00946B CD 86 A7         [ 4] 3414         CALL     VPP
                                   3415 ; must update APP_VP each time VP is modidied
      00946E CD 8B 2A         [ 4] 3416         call PSTOR 
      009471 CC 9B B5         [ 2] 3417         jp UPDATVP 
                                   3418 
                                   3419 ;       ,       ( w -- )
                                   3420 ;         Compile an integer into
                                   3421 ;         variable space.
      009474 94 65                 3422         .word      LINK
                           0013F6  3423 LINK = . 
      009476 01                    3424         .byte      1
      009477 2C                    3425         .ascii     ","
      009478                       3426 COMMA:
      009478 CD 8B A8         [ 4] 3427         CALL     HERE
      00947B CD 85 59         [ 4] 3428         CALL     DUPP
      00947E CD 8A 23         [ 4] 3429         CALL     CELLP   ;cell boundary
      009481 CD 86 A7         [ 4] 3430         CALL     VPP
      009484 CD 84 9B         [ 4] 3431         CALL     STORE
      009487 CC 84 9B         [ 2] 3432         JP     STORE
                                   3433 
                                   3434 ;       C,      ( c -- )
                                   3435 ;       Compile a byte into
                                   3436 ;       variables space.
      00948A 94 76                 3437        .word      LINK
                           00140C  3438 LINK = . 
      00948C 02                    3439         .byte      2
      00948D 43 2C                 3440         .ascii     "C,"
      00948F                       3441 CCOMMA:
      00948F CD 8B A8         [ 4] 3442         CALL     HERE
      009492 CD 85 59         [ 4] 3443         CALL     DUPP
      009495 CD 8A 4E         [ 4] 3444         CALL     ONEP
      009498 CD 86 A7         [ 4] 3445         CALL     VPP
      00949B CD 84 9B         [ 4] 3446         CALL     STORE
      00949E CC 84 BF         [ 2] 3447         JP     CSTOR
                                   3448 
                                   3449 ;       [COMPILE]       ( -- ; <string> )
                                   3450 ;       Compile next immediate
                                   3451 ;       word into code dictionary.
      0094A1 94 8C                 3452         .word      LINK
                           001423  3453 LINK = . 
      0094A3 89                    3454 	.byte      IMEDD+9
      0094A4 5B 43 4F 4D 50 49 4C  3455         .ascii     "[COMPILE]"
             45 5D
      0094AD                       3456 BCOMP:
      0094AD CD 94 57         [ 4] 3457         CALL     TICK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0094B0 CC 97 73         [ 2] 3458         JP     JSRC
                                   3459 
                                   3460 ;       COMPILE ( -- )
                                   3461 ;       Compile next jsr in
                                   3462 ;       colon list to code dictionary.
      0094B3 94 A3                 3463         .word      LINK
                           001435  3464 LINK = . 
      0094B5 47                    3465 	.byte      COMPO+7
      0094B6 43 4F 4D 50 49 4C 45  3466         .ascii     "COMPILE"
      0094BD                       3467 COMPI:
      0094BD CD 85 03         [ 4] 3468         CALL     RFROM
      0094C0 CD 85 59         [ 4] 3469         CALL     DUPP
      0094C3 CD 84 B2         [ 4] 3470         CALL     AT
      0094C6 CD 97 73         [ 4] 3471         CALL     JSRC    ;compile subroutine
      0094C9 CD 8A 23         [ 4] 3472         CALL     CELLP
      0094CC 90 93            [ 1] 3473         ldw y,x 
      0094CE 90 FE            [ 2] 3474         ldw y,(y)
      0094D0 1C 00 02         [ 2] 3475         addw x,#CELLL 
      0094D3 90 FC            [ 2] 3476         jp (y)
                                   3477 
                                   3478 ;       LITERAL ( w -- )
                                   3479 ;       Compile tos to dictionary
                                   3480 ;       as an integer literal.
      0094D5 94 B5                 3481         .word      LINK
                           001457  3482 LINK = . 
      0094D7 87                    3483 	.byte      IMEDD+7
      0094D8 4C 49 54 45 52 41 4C  3484         .ascii     "LITERAL"
      0094DF                       3485 LITER:
      0094DF CD 94 BD         [ 4] 3486         CALL     COMPI
      0094E2 84 34                 3487         .word DOLIT 
      0094E4 CC 94 78         [ 2] 3488         JP     COMMA
                                   3489 
                                   3490 ;       $,"     ( -- )
                                   3491 ;       Compile a literal string
                                   3492 ;       up to next " .
      0094E7 94 D7                 3493         .word      LINK
                           001469  3494 LINK = . 
      0094E9 03                    3495         .byte      3
      0094EA 24 2C 22              3496         .byte     '$',',','"'
      0094ED                       3497 STRCQ:
      0094ED CD 84 34         [ 4] 3498         CALL     DOLIT
      0094F0 00 22                 3499         .word     34	; "
      0094F2 CD 90 B5         [ 4] 3500         CALL     PARSE
      0094F5 CD 8B A8         [ 4] 3501         CALL     HERE
      0094F8 CD 8C 68         [ 4] 3502         CALL     PACKS   ;string to code dictionary
      0094FB CD 8B 91         [ 4] 3503         CALL     COUNT
      0094FE CD 87 54         [ 4] 3504         CALL     PLUS    ;calculate aligned end of string
      009501 CD 86 A7         [ 4] 3505         CALL     VPP
      009504 CC 84 9B         [ 2] 3506         JP     STORE
                                   3507 
                                   3508 ;; Structures
                                   3509 
                                   3510 ;       FOR     ( -- a )
                                   3511 ;       Start a FOR-NEXT loop
                                   3512 ;       structure in a colon definition.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      009507 94 E9                 3513         .word      LINK
                           001489  3514 LINK = . 
      009509 83                    3515 	.byte      IMEDD+3
      00950A 46 4F 52              3516         .ascii     "FOR"
      00950D                       3517 FOR:
      00950D CD 94 BD         [ 4] 3518         CALL     COMPI
      009510 85 22                 3519         .word TOR 
      009512 CC 8B A8         [ 2] 3520         JP     HERE
                                   3521 
                                   3522 ;       NEXT    ( a -- )
                                   3523 ;       Terminate a FOR-NEXT loop.
      009515 95 09                 3524         .word      LINK
                           001497  3525 LINK = . 
      009517 84                    3526 	.byte      IMEDD+4
      009518 4E 45 58 54           3527         .ascii     "NEXT"
      00951C                       3528 NEXT:
      00951C CD 94 BD         [ 4] 3529         CALL     COMPI
      00951F 84 48                 3530         .word DONXT 
      009521 CD 86 F3         [ 4] 3531         call ADRADJ
      009524 CC 94 78         [ 2] 3532         JP     COMMA
                                   3533 
                                   3534 ;       I ( -- n )
                                   3535 ;       stack FOR-NEXT COUNTER 
      009527 95 17                 3536         .word LINK 
                           0014A9  3537         LINK=.
      009529 01                    3538         .byte 1 
      00952A 49                    3539         .ascii "I"
      00952B                       3540 IFETCH: 
      00952B 1D 00 02         [ 2] 3541         subw x,#CELLL 
      00952E 16 03            [ 2] 3542         ldw y,(3,sp)
      009530 FF               [ 2] 3543         ldw (x),y 
      009531 81               [ 4] 3544         ret 
                                   3545 
                                   3546 ;       BEGIN   ( -- a )
                                   3547 ;       Start an infinite or
                                   3548 ;       indefinite loop structure.
      009532 95 29                 3549         .word      LINK
                           0014B4  3550 LINK = . 
      009534 85                    3551 	.byte      IMEDD+5
      009535 42 45 47 49 4E        3552         .ascii     "BEGIN"
      00953A                       3553 BEGIN:
      00953A CC 8B A8         [ 2] 3554         JP     HERE
                                   3555 
                                   3556 ;       UNTIL   ( a -- )
                                   3557 ;       Terminate a BEGIN-UNTIL
                                   3558 ;       indefinite loop structure.
      00953D 95 34                 3559         .word      LINK
                           0014BF  3560 LINK = . 
      00953F 85                    3561 	.byte      IMEDD+5
      009540 55 4E 54 49 4C        3562         .ascii     "UNTIL"
      009545                       3563 UNTIL:
      009545 CD 94 BD         [ 4] 3564         CALL     COMPI
      009548 84 67                 3565         .word    QBRAN 
      00954A CD 86 F3         [ 4] 3566         call ADRADJ
      00954D CC 94 78         [ 2] 3567         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3568 
                                   3569 ;       AGAIN   ( a -- )
                                   3570 ;       Terminate a BEGIN-AGAIN
                                   3571 ;       infinite loop structure.
      009550 95 3F                 3572         .word      LINK
                           0014D2  3573 LINK = . 
      009552 85                    3574 	.byte      IMEDD+5
      009553 41 47 41 49 4E        3575         .ascii     "AGAIN"
      009558                       3576 AGAIN:
      009558 CD 94 BD         [ 4] 3577         CALL     COMPI
      00955B 84 7E                 3578         .word BRAN
      00955D CD 86 F3         [ 4] 3579         call ADRADJ 
      009560 CC 94 78         [ 2] 3580         JP     COMMA
                                   3581 
                                   3582 ;       IF      ( -- A )
                                   3583 ;       Begin a conditional branch.
      009563 95 52                 3584         .word      LINK
                           0014E5  3585 LINK = . 
      009565 82                    3586 	.byte      IMEDD+2
      009566 49 46                 3587         .ascii     "IF"
      009568                       3588 IFF:
      009568 CD 94 BD         [ 4] 3589         CALL     COMPI
      00956B 84 67                 3590         .word QBRAN
      00956D CD 8B A8         [ 4] 3591         CALL     HERE
      009570 CD 8A BA         [ 4] 3592         CALL     ZERO
      009573 CC 94 78         [ 2] 3593         JP     COMMA
                                   3594 
                                   3595 ;       THEN        ( A -- )
                                   3596 ;       Terminate a conditional branch structure.
      009576 95 65                 3597         .word      LINK
                           0014F8  3598 LINK = . 
      009578 84                    3599 	.byte      IMEDD+4
      009579 54 48 45 4E           3600         .ascii     "THEN"
      00957D                       3601 THENN:
      00957D CD 8B A8         [ 4] 3602         CALL     HERE
      009580 CD 86 F3         [ 4] 3603         call ADRADJ 
      009583 CD 85 69         [ 4] 3604         CALL     SWAPP
      009586 CC 84 9B         [ 2] 3605         JP     STORE
                                   3606 
                                   3607 ;       ELSE        ( A -- A )
                                   3608 ;       Start the false clause in an IF-ELSE-THEN structure.
      009589 95 78                 3609         .word      LINK
                           00150B  3610 LINK = . 
      00958B 84                    3611 	.byte      IMEDD+4
      00958C 45 4C 53 45           3612         .ascii     "ELSE"
      009590                       3613 ELSEE:
      009590 CD 94 BD         [ 4] 3614         CALL     COMPI
      009593 84 7E                 3615         .word BRAN
      009595 CD 8B A8         [ 4] 3616         CALL     HERE
      009598 CD 8A BA         [ 4] 3617         CALL     ZERO
      00959B CD 94 78         [ 4] 3618         CALL     COMMA
      00959E CD 85 69         [ 4] 3619         CALL     SWAPP
      0095A1 CD 8B A8         [ 4] 3620         CALL     HERE
      0095A4 CD 86 F3         [ 4] 3621         call ADRADJ 
      0095A7 CD 85 69         [ 4] 3622         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0095AA CC 84 9B         [ 2] 3623         JP     STORE
                                   3624 
                                   3625 ;       AHEAD       ( -- A )
                                   3626 ;       Compile a forward branch instruction.
      0095AD 95 8B                 3627         .word      LINK
                           00152F  3628 LINK = . 
      0095AF 85                    3629 	.byte      IMEDD+5
      0095B0 41 48 45 41 44        3630         .ascii     "AHEAD"
      0095B5                       3631 AHEAD:
      0095B5 CD 94 BD         [ 4] 3632         CALL     COMPI
      0095B8 84 7E                 3633         .word BRAN
      0095BA CD 8B A8         [ 4] 3634         CALL     HERE
      0095BD CD 8A BA         [ 4] 3635         CALL     ZERO
      0095C0 CC 94 78         [ 2] 3636         JP     COMMA
                                   3637 
                                   3638 ;       WHILE       ( a -- A a )
                                   3639 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0095C3 95 AF                 3640         .word      LINK
                           001545  3641 LINK = . 
      0095C5 85                    3642 	.byte      IMEDD+5
      0095C6 57 48 49 4C 45        3643         .ascii     "WHILE"
      0095CB                       3644 WHILE:
      0095CB CD 94 BD         [ 4] 3645         CALL     COMPI
      0095CE 84 67                 3646         .word QBRAN
      0095D0 CD 8B A8         [ 4] 3647         CALL     HERE
      0095D3 CD 8A BA         [ 4] 3648         CALL     ZERO
      0095D6 CD 94 78         [ 4] 3649         CALL     COMMA
      0095D9 CC 85 69         [ 2] 3650         JP     SWAPP
                                   3651 
                                   3652 ;       REPEAT      ( A a -- )
                                   3653 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0095DC 95 C5                 3654         .word      LINK
                           00155E  3655 LINK = . 
      0095DE 86                    3656         .byte      IMEDD+6
      0095DF 52 45 50 45 41 54     3657         .ascii     "REPEAT"
      0095E5                       3658 REPEA:
      0095E5 CD 94 BD         [ 4] 3659         CALL     COMPI
      0095E8 84 7E                 3660         .word BRAN
      0095EA CD 86 F3         [ 4] 3661         call ADRADJ 
      0095ED CD 94 78         [ 4] 3662         CALL     COMMA
      0095F0 CD 8B A8         [ 4] 3663         CALL     HERE
      0095F3 CD 86 F3         [ 4] 3664         call ADRADJ 
      0095F6 CD 85 69         [ 4] 3665         CALL     SWAPP
      0095F9 CC 84 9B         [ 2] 3666         JP     STORE
                                   3667 
                                   3668 ;       AFT         ( a -- a A )
                                   3669 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0095FC 95 DE                 3670         .word      LINK
                           00157E  3671 LINK = . 
      0095FE 83                    3672 	.byte      IMEDD+3
      0095FF 41 46 54              3673         .ascii     "AFT"
      009602                       3674 AFT:
      009602 CD 85 4F         [ 4] 3675         CALL     DROP
      009605 CD 95 B5         [ 4] 3676         CALL     AHEAD
      009608 CD 8B A8         [ 4] 3677         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00960B CC 85 69         [ 2] 3678         JP     SWAPP
                                   3679 
                                   3680 ;       ABORT"      ( -- ; <string> )
                                   3681 ;       Conditional abort with an error message.
      00960E 95 FE                 3682         .word      LINK
                           001590  3683 LINK = . 
      009610 86                    3684 	.byte      IMEDD+6
      009611 41 42 4F 52 54        3685         .ascii     "ABORT"
      009616 22                    3686         .byte      '"'
      009617                       3687 ABRTQ:
      009617 CD 94 BD         [ 4] 3688         CALL     COMPI
      00961A 93 3B                 3689         .word ABORQ
      00961C CC 94 ED         [ 2] 3690         JP     STRCQ
                                   3691 
                                   3692 ;       $"     ( -- ; <string> )
                                   3693 ;       Compile an inline string literal.
      00961F 96 10                 3694         .word      LINK
                           0015A1  3695 LINK = . 
      009621 82                    3696 	.byte      IMEDD+2
      009622 24 22                 3697         .byte     '$','"'
      009624                       3698 STRQ:
      009624 CD 94 BD         [ 4] 3699         CALL     COMPI
      009627 8F 55                 3700         .word STRQP 
      009629 CC 94 ED         [ 2] 3701         JP     STRCQ
                                   3702 
                                   3703 ;       ."          ( -- ; <string> )
                                   3704 ;       Compile an inline string literal to be typed out at run time.
      00962C 96 21                 3705         .word      LINK
                           0015AE  3706 LINK = . 
      00962E 82                    3707 	.byte      IMEDD+2
      00962F 2E 22                 3708         .byte     '.','"'
      009631                       3709 DOTQ:
      009631 CD 94 BD         [ 4] 3710         CALL     COMPI
      009634 8F 5F                 3711         .word DOTQP 
      009636 CC 94 ED         [ 2] 3712         JP     STRCQ
                                   3713 
                                   3714 ;; Name compiler
                                   3715 
                                   3716 ;       ?UNIQUE ( a -- a )
                                   3717 ;       Display a warning message
                                   3718 ;       if word already exists.
      009639 96 2E                 3719         .word      LINK
                           0015BB  3720 LINK = . 
      00963B 07                    3721         .byte      7
      00963C 3F 55 4E 49 51 55 45  3722         .ascii     "?UNIQUE"
      009643                       3723 UNIQU:
      009643 CD 85 59         [ 4] 3724         CALL     DUPP
      009646 CD 92 2F         [ 4] 3725         CALL     NAMEQ   ;?name exists
      009649 CD 84 67         [ 4] 3726         CALL     QBRAN
      00964C 96 62                 3727         .word      UNIQ1
      00964E CD 8F 5F         [ 4] 3728         CALL     DOTQP   ;redef are OK
      009651 07                    3729         .byte       7
      009652 20 72 65 44 65 66 20  3730         .ascii     " reDef "       
      009659 CD 85 83         [ 4] 3731         CALL     OVER
      00965C CD 8B 91         [ 4] 3732         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00965F CD 8F 02         [ 4] 3733         CALL     TYPES   ;just in case
      009662 CC 85 4F         [ 2] 3734 UNIQ1:  JP     DROP
                                   3735 
                                   3736 ;       $,n     ( na -- )
                                   3737 ;       Build a new dictionary name
                                   3738 ;       using string at na.
                                   3739 ; compile dans l'espace des variables 
      009665 96 3B                 3740         .word      LINK
                           0015E7  3741 LINK = . 
      009667 03                    3742         .byte      3
      009668 24 2C 6E              3743         .ascii     "$,n"
      00966B                       3744 SNAME:
      00966B CD 85 59         [ 4] 3745         CALL     DUPP
      00966E CD 84 D0         [ 4] 3746         CALL     CAT     ;?null input
      009671 CD 84 67         [ 4] 3747         CALL     QBRAN
      009674 96 A1                 3748         .word      PNAM1
      009676 CD 96 43         [ 4] 3749         CALL     UNIQU   ;?redefinition
      009679 CD 85 59         [ 4] 3750         CALL     DUPP
      00967C CD 8B 91         [ 4] 3751         CALL     COUNT
      00967F CD 87 54         [ 4] 3752         CALL     PLUS
      009682 CD 86 A7         [ 4] 3753         CALL     VPP
      009685 CD 84 9B         [ 4] 3754         CALL     STORE
      009688 CD 85 59         [ 4] 3755         CALL     DUPP
      00968B CD 86 C5         [ 4] 3756         CALL     LAST
      00968E CD 84 9B         [ 4] 3757         CALL     STORE   ;save na for vocabulary link
      009691 CD 8A 32         [ 4] 3758         CALL     CELLM   ;link address
      009694 CD 86 99         [ 4] 3759         CALL     CNTXT
      009697 CD 84 B2         [ 4] 3760         CALL     AT
      00969A CD 85 69         [ 4] 3761         CALL     SWAPP
      00969D CD 84 9B         [ 4] 3762         CALL     STORE
      0096A0 81               [ 4] 3763         RET     ;save code pointer
      0096A1 CD 8F 55         [ 4] 3764 PNAM1:  CALL     STRQP
      0096A4 05                    3765         .byte      5
      0096A5 20 6E 61 6D 65        3766         .ascii     " name" ;null input
      0096AA CC 93 43         [ 2] 3767         JP     ABOR1
                                   3768 
                                   3769 ;; FORTH compiler
                                   3770 
                                   3771 ;       $COMPILE        ( a -- )
                                   3772 ;       Compile next word to
                                   3773 ;       dictionary as a token or literal.
      0096AD 96 67                 3774         .word      LINK
                           00162F  3775 LINK = . 
      0096AF 08                    3776         .byte      8
      0096B0 24 43 4F 4D 50 49 4C  3777         .ascii     "$COMPILE"
             45
      0096B8                       3778 SCOMP:
      0096B8 CD 92 2F         [ 4] 3779         CALL     NAMEQ
      0096BB CD 87 03         [ 4] 3780         CALL     QDUP    ;?defined
      0096BE CD 84 67         [ 4] 3781         CALL     QBRAN
      0096C1 96 D9                 3782         .word      SCOM2
      0096C3 CD 84 B2         [ 4] 3783         CALL     AT
      0096C6 CD 84 34         [ 4] 3784         CALL     DOLIT
      0096C9 80 00                 3785         .word     0x8000	;  IMEDD*256
      0096CB CD 85 A5         [ 4] 3786         CALL     ANDD    ;?immediate
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0096CE CD 84 67         [ 4] 3787         CALL     QBRAN
      0096D1 96 D6                 3788         .word      SCOM1
      0096D3 CC 84 8E         [ 2] 3789         JP     EXECU
      0096D6 CC 97 73         [ 2] 3790 SCOM1:  JP     JSRC
      0096D9 CD 8D CD         [ 4] 3791 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0096DC CD 84 67         [ 4] 3792         CALL     QBRAN
      0096DF 93 43                 3793         .word      ABOR1
      0096E1 CC 94 DF         [ 2] 3794         JP     LITER
                                   3795 
                                   3796 ;       OVERT   ( -- )
                                   3797 ;       Link a new word into vocabulary.
      0096E4 96 AF                 3798         .word      LINK
                           001666  3799 LINK = . 
      0096E6 05                    3800         .byte      5
      0096E7 4F 56 45 52 54        3801         .ascii     "OVERT"
      0096EC                       3802 OVERT:
      0096EC CD 86 C5         [ 4] 3803         CALL     LAST
      0096EF CD 84 B2         [ 4] 3804         CALL     AT
      0096F2 CD 86 99         [ 4] 3805         CALL     CNTXT
      0096F5 CC 84 9B         [ 2] 3806         JP     STORE
                                   3807 
                                   3808 ;       ;       ( -- )
                                   3809 ;       Terminate a colon definition.
      0096F8 96 E6                 3810         .word      LINK
                           00167A  3811 LINK = . 
      0096FA C1                    3812 	.byte      IMEDD+COMPO+1
      0096FB 3B                    3813         .ascii     ";"
      0096FC                       3814 SEMIS:
                           000001  3815 .if OPTIMIZE ; more compact and faster
      0096FC CD 84 34         [ 4] 3816         call DOLIT 
      0096FF 00 81                 3817         .word 0x81   ; opcode for RET 
      009701 CD 94 8F         [ 4] 3818         call CCOMMA 
                           000000  3819 .else
                                   3820         CALL     COMPI
                                   3821         .word EXIT 
                                   3822 .endif 
      009704 CD 93 A4         [ 4] 3823         CALL     LBRAC
      009707 CD 96 EC         [ 4] 3824         call OVERT 
      00970A CD A0 D8         [ 4] 3825         CALL FMOVE
      00970D CD 87 03         [ 4] 3826         call QDUP 
      009710 CD 84 67         [ 4] 3827         call QBRAN 
      009713 98 43                 3828         .word SET_RAMLAST 
      009715 CD A1 6C         [ 4] 3829         CALL UPDATPTR
      009718 81               [ 4] 3830         RET 
                                   3831 
                                   3832 
                                   3833 ;       Terminate an ISR definition 
                                   3834 ;       retourn ca of ISR as double
                                   3835 ;       I; ( -- ud )
      009719 96 FA                 3836         .word LINK 
                           00169B  3837         LINK=.
      00971B C2                    3838         .byte 2+IMEDD+COMPO 
      00971C 49 3B                 3839         .ascii "I;" 
      00971E                       3840 ISEMI:
      00971E 1D 00 02         [ 2] 3841         subw x,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      009721 90 AE 00 80      [ 2] 3842         ldw y,#IRET_CODE 
      009725 FF               [ 2] 3843         ldw (x),y 
      009726 CD 94 8F         [ 4] 3844         call CCOMMA
      009729 CD 93 A4         [ 4] 3845         call LBRAC 
      00972C CD A1 B1         [ 4] 3846         call IFMOVE
      00972F CD 87 03         [ 4] 3847         call QDUP 
      009732 CD 84 67         [ 4] 3848         CALL QBRAN 
      009735 98 43                 3849         .word SET_RAMLAST
      009737 CD 86 B5         [ 4] 3850         CALL CPP
      00973A CD 84 B2         [ 4] 3851         call AT 
      00973D CD 85 69         [ 4] 3852         call SWAPP 
      009740 CD 86 B5         [ 4] 3853         CALL CPP 
      009743 CD 84 9B         [ 4] 3854         call STORE 
      009746 CD 9B 9E         [ 4] 3855         call UPDATCP 
      009749 CD 9B 5B         [ 4] 3856         call EEPVP 
      00974C CD 85 4F         [ 4] 3857         call DROP 
      00974F CD 84 B2         [ 4] 3858         call AT 
      009752 CD 86 A7         [ 4] 3859         call VPP 
      009755 CD 84 9B         [ 4] 3860         call STORE 
      009758 CC 8A BA         [ 2] 3861         jp ZERO
      00975B 81               [ 4] 3862         ret           
                                   3863         
                                   3864 
                                   3865 ;       ]       ( -- )
                                   3866 ;       Start compiling words in
                                   3867 ;       input stream.
      00975C 97 1B                 3868         .word      LINK
                           0016DE  3869 LINK = . 
      00975E 01                    3870         .byte      1
      00975F 5D                    3871         .ascii     "]"
      009760                       3872 RBRAC:
      009760 CD 84 34         [ 4] 3873         CALL   DOLIT
      009763 96 B8                 3874         .word  SCOMP
      009765 CD 86 77         [ 4] 3875         CALL   TEVAL
      009768 CC 84 9B         [ 2] 3876         JP     STORE
                                   3877 
                                   3878 ;       CALL,    ( ca -- )
                                   3879 ;       Compile a subroutine call.
      00976B 97 5E                 3880         .word      LINK
                           0016ED  3881 LINK = . 
      00976D 05                    3882         .byte      5
      00976E 43 41 4C 4C 2C        3883         .ascii     "CALL,"
      009773                       3884 JSRC:
      009773 CD 84 34         [ 4] 3885         CALL     DOLIT
      009776 00 CD                 3886         .word     CALLL     ;CALL
      009778 CD 94 8F         [ 4] 3887         CALL     CCOMMA
      00977B CC 94 78         [ 2] 3888         JP     COMMA
                                   3889 
                                   3890 ;       INIT-OFS ( -- )
                                   3891 ;       compute offset to adjust jump address 
                                   3892 ;       set variable OFFSET 
      00977E 97 6D                 3893         .word LINK 
                           001700  3894         LINK=.
      009780 08                    3895         .byte 8 
      009781 49 4E 49 54 2D 4F 46  3896         .ascii "INIT-OFS" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal  53-Bits]



             53
      009789                       3897 INITOFS:
      009789 CD 86 66         [ 4] 3898         call TFLASH 
      00978C CD 84 B2         [ 4] 3899         CALL AT 
      00978F CD 85 59         [ 4] 3900         CALL DUPP 
      009792 CD 84 67         [ 4] 3901         call QBRAN
      009795 97 A6                 3902         .word 1$
      009797 CD 85 4F         [ 4] 3903         call DROP  
      00979A CD 86 B5         [ 4] 3904         call CPP 
      00979D CD 84 B2         [ 4] 3905         call AT 
      0097A0 CD 8B A8         [ 4] 3906         call HERE
      0097A3 CD 87 CD         [ 4] 3907         call SUBB 
      0097A6 CD 86 EA         [ 4] 3908 1$:     call OFFSET 
      0097A9 CC 84 9B         [ 2] 3909         jp STORE  
                                   3910 
                                   3911 ;       :       ( -- ; <string> )
                                   3912 ;       Start a new colon definition
                                   3913 ;       using next word as its name.
      0097AC 97 80                 3914         .word      LINK
                           00172E  3915 LINK = . 
      0097AE 01                    3916         .byte      1
      0097AF 3A                    3917         .ascii     ":"
      0097B0                       3918 COLON:
      0097B0 CD 97 89         [ 4] 3919         call INITOFS       
      0097B3 CD 91 32         [ 4] 3920         CALL   TOKEN
      0097B6 CD 96 6B         [ 4] 3921         CALL   SNAME
      0097B9 CC 97 60         [ 2] 3922         JP     RBRAC
                                   3923 
                                   3924 ;       I:  ( -- )
                                   3925 ;       Start interrupt service routine definition
                                   3926 ;       those definition have no name.
      0097BC 97 AE                 3927         .word LINK
                           00173E  3928         LINK=.
      0097BE 02                    3929         .byte 2 
      0097BF 49 3A                 3930         .ascii "I:" 
      0097C1                       3931 ICOLON:
      0097C1 CD 97 89         [ 4] 3932         call INITOFS 
      0097C4 CC 97 60         [ 2] 3933         jp RBRAC  
                                   3934 
                                   3935 ;       IMMEDIATE       ( -- )
                                   3936 ;       Make last compiled word
                                   3937 ;       an immediate word.
      0097C7 97 BE                 3938         .word      LINK
                           001749  3939 LINK = . 
      0097C9 09                    3940         .byte      9
      0097CA 49 4D 4D 45 44 49 41  3941         .ascii     "IMMEDIATE"
             54 45
      0097D3                       3942 IMMED:
      0097D3 CD 84 34         [ 4] 3943         CALL     DOLIT
      0097D6 80 00                 3944         .word     0x8000	;  IMEDD*256
      0097D8 CD 86 C5         [ 4] 3945         CALL     LAST
      0097DB CD 84 B2         [ 4] 3946         CALL     AT
      0097DE CD 84 B2         [ 4] 3947         CALL     AT
      0097E1 CD 85 B9         [ 4] 3948         CALL     ORR
      0097E4 CD 86 C5         [ 4] 3949         CALL     LAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0097E7 CD 84 B2         [ 4] 3950         CALL     AT
      0097EA CC 84 9B         [ 2] 3951         JP     STORE
                                   3952 
                                   3953 ;; Defining words
                                   3954 
                                   3955 ;       CREATE  ( -- ; <string> )
                                   3956 ;       Compile a new array
                                   3957 ;       without allocating space.
      0097ED 97 C9                 3958         .word      LINK
                           00176F  3959 LINK = . 
      0097EF 06                    3960         .byte      6
      0097F0 43 52 45 41 54 45     3961         .ascii     "CREATE"
      0097F6                       3962 CREAT:
      0097F6 CD 91 32         [ 4] 3963         CALL     TOKEN
      0097F9 CD 96 6B         [ 4] 3964         CALL     SNAME
      0097FC CD 96 EC         [ 4] 3965         CALL     OVERT        
      0097FF CD 94 BD         [ 4] 3966         CALL     COMPI 
      009802 86 06                 3967         .word DOVAR 
      009804 81               [ 4] 3968         RET
                                   3969 
                                   3970 ;       VARIABLE        ( -- ; <string> )
                                   3971 ;       Compile a new variable
                                   3972 ;       initialized to 0.
      009805 97 EF                 3973         .word      LINK
                           001787  3974 LINK = . 
      009807 08                    3975         .byte      8
      009808 56 41 52 49 41 42 4C  3976         .ascii     "VARIABLE"
             45
      009810                       3977 VARIA:
                                   3978 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      009810 CD 8B A8         [ 4] 3979         CALL HERE
      009813 CD 85 59         [ 4] 3980         CALL DUPP 
      009816 CD 8A 23         [ 4] 3981         CALL CELLP
      009819 CD 86 A7         [ 4] 3982         CALL VPP 
      00981C CD 84 9B         [ 4] 3983         CALL STORE
      00981F CD 97 F6         [ 4] 3984         CALL CREAT
      009822 CD 85 59         [ 4] 3985         CALL DUPP
      009825 CD 94 78         [ 4] 3986         CALL COMMA
      009828 CD 8A BA         [ 4] 3987         CALL ZERO
      00982B CD 85 69         [ 4] 3988         call SWAPP 
      00982E CD 84 9B         [ 4] 3989         CALL STORE
      009831 CD A0 D8         [ 4] 3990         CALL FMOVE ; move definition to FLASH
      009834 CD 87 03         [ 4] 3991         CALL QDUP 
      009837 CD 84 67         [ 4] 3992         CALL QBRAN 
      00983A 98 43                 3993         .word SET_RAMLAST   
      00983C CD 9B B5         [ 4] 3994         call UPDATVP  ; don't update if variable kept in RAM.
      00983F CD A1 6C         [ 4] 3995         CALL UPDATPTR
      009842 81               [ 4] 3996         RET         
      009843                       3997 SET_RAMLAST: 
      009843 CD 86 C5         [ 4] 3998         CALL LAST 
      009846 CD 84 B2         [ 4] 3999         CALL AT 
      009849 CD 86 D8         [ 4] 4000         CALL RAMLAST 
      00984C CC 84 9B         [ 2] 4001         jp STORE  
                                   4002 
                                   4003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4004 ;       CONSTANT  ( n -- ; <string> )
                                   4005 ;       Compile a new constant 
                                   4006 ;       n CONSTANT name 
      00984F 98 07                 4007         .word LINK 
                           0017D1  4008         LINK=. 
      009851 08                    4009         .byte 8 
      009852 43 4F 4E 53 54 41 4E  4010         .ascii "CONSTANT" 
             54
      00985A                       4011 CONSTANT:          
      00985A CD 91 32         [ 4] 4012         CALL TOKEN
      00985D CD 96 6B         [ 4] 4013         CALL SNAME 
      009860 CD 96 EC         [ 4] 4014         CALL OVERT 
      009863 CD 94 BD         [ 4] 4015         CALL COMPI 
      009866 98 84                 4016         .word DOCONST
      009868 CD 94 78         [ 4] 4017         CALL COMMA 
      00986B CD A0 D8         [ 4] 4018         CALL FMOVE
      00986E CD 87 03         [ 4] 4019         CALL QDUP 
      009871 CD 84 67         [ 4] 4020         CALL QBRAN 
      009874 98 43                 4021         .word SET_RAMLAST  
      009876 CD A1 6C         [ 4] 4022         CALL UPDATPTR  
      009879 81               [ 4] 4023 1$:     RET          
                                   4024 
                                   4025 ; CONSTANT runtime semantic 
                                   4026 ; doCONST  ( -- n )
      00987A 98 51                 4027         .word LINK 
                           0017FC  4028         LINK=.
      00987C 07                    4029         .byte 7
      00987D 44 4F 43 4F 4E 53 54  4030         .ascii "DOCONST"
      009884                       4031 DOCONST:
      009884 1D 00 02         [ 2] 4032         subw x,#CELLL
      009887 90 85            [ 2] 4033         popw y 
      009889 90 FE            [ 2] 4034         ldw y,(y) 
      00988B FF               [ 2] 4035         ldw (x),y 
      00988C 81               [ 4] 4036         ret 
                                   4037 
                                   4038 ;----------------------------------
                                   4039 ; create double constant 
                                   4040 ; DCONST ( d -- ; <string> )
                                   4041 ;----------------------------------
      00988D 98 7C                 4042     .word LINK 
                           00180F  4043     LINK=.
      00988F 06                    4044     .byte 6 
      009890 44 43 4F 4E 53 54     4045     .ascii "DCONST"
      009896                       4046 DCONST:
      009896 CD 91 32         [ 4] 4047         CALL TOKEN
      009899 CD 96 6B         [ 4] 4048         CALL SNAME 
      00989C CD 96 EC         [ 4] 4049         CALL OVERT 
      00989F CD 94 BD         [ 4] 4050         CALL COMPI 
      0098A2 98 C5                 4051         .word DO_DCONST
      0098A4 CD 94 78         [ 4] 4052         CALL COMMA
      0098A7 CD 94 78         [ 4] 4053         CALL COMMA  
      0098AA CD A0 D8         [ 4] 4054         CALL FMOVE
      0098AD CD 87 03         [ 4] 4055         CALL QDUP 
      0098B0 CD 84 67         [ 4] 4056         CALL QBRAN 
      0098B3 98 43                 4057         .word SET_RAMLAST  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0098B5 CD A1 6C         [ 4] 4058         CALL UPDATPTR  
      0098B8 81               [ 4] 4059 1$:     RET          
                                   4060     
                                   4061 ;----------------------------------
                                   4062 ; runtime for DCONST 
                                   4063 ; stack double constant 
                                   4064 ; DO-DCONST ( -- d )
                                   4065 ;-----------------------------------
      0098B9 98 8F                 4066         .word LINK 
                           00183B  4067         LINK=.
      0098BB 09                    4068         .byte 9 
      0098BC 44 4F 2D 44 43 4F 4E  4069         .ascii "DO-DCONST"
             53 54
      0098C5                       4070 DO_DCONST:
      0098C5 90 85            [ 2] 4071     popw y 
      0098C7 90 BF 24         [ 2] 4072     ldw YTEMP,y 
      0098CA 1D 00 04         [ 2] 4073     subw x,#2*CELLL 
      0098CD 90 FE            [ 2] 4074     ldw y,(y)
      0098CF FF               [ 2] 4075     ldw (x),y 
      0098D0 90 BE 24         [ 2] 4076     ldw y,YTEMP 
      0098D3 90 EE 02         [ 2] 4077     ldw y,(2,y)
      0098D6 EF 02            [ 2] 4078     ldw (2,x),y 
      0098D8 81               [ 4] 4079     ret 
                                   4080 
                                   4081 ;; Tools
                                   4082 
                                   4083 ;       _TYPE   ( b u -- )
                                   4084 ;       Display a string. Filter
                                   4085 ;       non-printing characters.
      0098D9 98 BB                 4086         .word      LINK
                           00185B  4087 LINK = . 
      0098DB 05                    4088         .byte      5
      0098DC 5F 54 59 50 45        4089         .ascii     "_TYPE"
      0098E1                       4090 UTYPE:
      0098E1 CD 85 22         [ 4] 4091         CALL     TOR     ;start count down loop
      0098E4 20 0F            [ 2] 4092         JRA     UTYP2   ;skip first pass
      0098E6 CD 85 59         [ 4] 4093 UTYP1:  CALL     DUPP
      0098E9 CD 84 D0         [ 4] 4094         CALL     CAT
      0098EC CD 8A E4         [ 4] 4095         CALL     TCHAR
      0098EF CD 84 1E         [ 4] 4096         CALL     EMIT    ;display only printable
      0098F2 CD 8A 4E         [ 4] 4097         CALL     ONEP    ;increment address
      0098F5 CD 84 48         [ 4] 4098 UTYP2:  CALL     DONXT
      0098F8 98 E6                 4099         .word      UTYP1   ;loop till done
      0098FA CC 85 4F         [ 2] 4100         JP     DROP
                                   4101 
                                   4102 ;       dm+     ( a u -- a )
                                   4103 ;       Dump u bytes from ,
                                   4104 ;       leaving a+u on  stack.
      0098FD 98 DB                 4105         .word      LINK
                           00187F  4106 LINK = . 
      0098FF 03                    4107         .byte      3
      009900 64 6D 2B              4108         .ascii     "dm+"
      009903                       4109 DUMPP:
      009903 CD 85 83         [ 4] 4110         CALL     OVER
      009906 CD 84 34         [ 4] 4111         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      009909 00 04                 4112         .word      4
      00990B CD 8F 88         [ 4] 4113         CALL     UDOTR   ;display address
      00990E CD 8E D8         [ 4] 4114         CALL     SPACE
      009911 CD 85 22         [ 4] 4115         CALL     TOR     ;start count down loop
      009914 20 11            [ 2] 4116         JRA     PDUM2   ;skip first pass
      009916 CD 85 59         [ 4] 4117 PDUM1:  CALL     DUPP
      009919 CD 84 D0         [ 4] 4118         CALL     CAT
      00991C CD 84 34         [ 4] 4119         CALL     DOLIT
      00991F 00 03                 4120         .word      3
      009921 CD 8F 88         [ 4] 4121         CALL     UDOTR   ;display numeric data
      009924 CD 8A 4E         [ 4] 4122         CALL     ONEP    ;increment address
      009927 CD 84 48         [ 4] 4123 PDUM2:  CALL     DONXT
      00992A 99 16                 4124         .word      PDUM1   ;loop till done
      00992C 81               [ 4] 4125         RET
                                   4126 
                                   4127 ;       DUMP    ( a u -- )
                                   4128 ;       Dump u bytes from a,
                                   4129 ;       in a formatted manner.
      00992D 98 FF                 4130         .word      LINK
                           0018AF  4131 LINK = . 
      00992F 04                    4132         .byte      4
      009930 44 55 4D 50           4133         .ascii     "DUMP"
      009934                       4134 DUMP:
      009934 CD 86 16         [ 4] 4135         CALL     BASE
      009937 CD 84 B2         [ 4] 4136         CALL     AT
      00993A CD 85 22         [ 4] 4137         CALL     TOR
      00993D CD 8D 60         [ 4] 4138         CALL     HEX     ;save radix, set hex
      009940 CD 84 34         [ 4] 4139         CALL     DOLIT
      009943 00 10                 4140         .word      16
      009945 CD 89 74         [ 4] 4141         CALL     SLASH   ;change count to lines
      009948 CD 85 22         [ 4] 4142         CALL     TOR     ;start count down loop
      00994B CD 8F 20         [ 4] 4143 DUMP1:  CALL     CR
      00994E CD 84 34         [ 4] 4144         CALL     DOLIT
      009951 00 10                 4145         .word      16
      009953 CD 87 3F         [ 4] 4146         CALL     DDUP
      009956 CD 99 03         [ 4] 4147         CALL     DUMPP   ;display numeric
      009959 CD 87 14         [ 4] 4148         CALL     ROT
      00995C CD 87 14         [ 4] 4149         CALL     ROT
      00995F CD 8E D8         [ 4] 4150         CALL     SPACE
      009962 CD 8E D8         [ 4] 4151         CALL     SPACE
      009965 CD 98 E1         [ 4] 4152         CALL     UTYPE   ;display printable characters
      009968 CD 84 48         [ 4] 4153         CALL     DONXT
      00996B 99 4B                 4154         .word      DUMP1   ;loop till done
      00996D CD 85 4F         [ 4] 4155 DUMP3:  CALL     DROP
      009970 CD 85 03         [ 4] 4156         CALL     RFROM
      009973 CD 86 16         [ 4] 4157         CALL     BASE
      009976 CC 84 9B         [ 2] 4158         JP     STORE   ;restore radix
                                   4159 
                                   4160 ;       .S      ( ... -- ... )
                                   4161 ;        Display  contents of stack.
      009979 99 2F                 4162         .word      LINK
                           0018FB  4163 LINK = . 
      00997B 02                    4164         .byte      2
      00997C 2E 53                 4165         .ascii     ".S"
      00997E                       4166 DOTS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      00997E CD 8F 20         [ 4] 4167         CALL     CR
      009981 CD 8A FC         [ 4] 4168         CALL     DEPTH   ;stack depth
      009984 CD 85 22         [ 4] 4169         CALL     TOR     ;start count down loop
      009987 20 09            [ 2] 4170         JRA     DOTS2   ;skip first pass
      009989 CD 85 16         [ 4] 4171 DOTS1:  CALL     RAT
      00998C CD 8B 13         [ 4] 4172 	CALL     PICK
      00998F CD 8F BB         [ 4] 4173         CALL     DOT     ;index stack, display contents
      009992 CD 84 48         [ 4] 4174 DOTS2:  CALL     DONXT
      009995 99 89                 4175         .word      DOTS1   ;loop till done
      009997 CD 8F 5F         [ 4] 4176         CALL     DOTQP
      00999A 05                    4177         .byte      5
      00999B 20 3C 73 70 20        4178         .ascii     " <sp "
      0099A0 81               [ 4] 4179         RET
                                   4180 
                                   4181 ;       >NAME   ( ca -- na | F )
                                   4182 ;       Convert code address
                                   4183 ;       to a name address.
      0099A1 99 7B                 4184         .word      LINK
                           001923  4185 LINK = . 
      0099A3 05                    4186         .byte      5
      0099A4 3E 4E 41 4D 45        4187         .ascii     ">NAME"
      0099A9                       4188 TNAME:
      0099A9 CD 86 99         [ 4] 4189         CALL     CNTXT   ;vocabulary link
      0099AC CD 84 B2         [ 4] 4190 TNAM2:  CALL     AT
      0099AF CD 85 59         [ 4] 4191         CALL     DUPP    ;?last word in a vocabulary
      0099B2 CD 84 67         [ 4] 4192         CALL     QBRAN
      0099B5 99 D0                 4193         .word      TNAM4
      0099B7 CD 87 3F         [ 4] 4194         CALL     DDUP
      0099BA CD 91 40         [ 4] 4195         CALL     NAMET
      0099BD CD 85 CE         [ 4] 4196         CALL     XORR    ;compare
      0099C0 CD 84 67         [ 4] 4197         CALL     QBRAN
      0099C3 99 CA                 4198         .word      TNAM3
      0099C5 CD 8A 32         [ 4] 4199         CALL     CELLM   ;continue with next word
      0099C8 20 E2            [ 2] 4200         JRA     TNAM2
      0099CA CD 85 69         [ 4] 4201 TNAM3:  CALL     SWAPP
      0099CD CC 85 4F         [ 2] 4202         JP     DROP
      0099D0 CD 87 34         [ 4] 4203 TNAM4:  CALL     DDROP
      0099D3 CC 8A BA         [ 2] 4204         JP     ZERO
                                   4205 
                                   4206 ;       .ID     ( na -- )
                                   4207 ;        Display  name at address.
      0099D6 99 A3                 4208         .word      LINK
                           001958  4209 LINK = . 
      0099D8 03                    4210         .byte      3
      0099D9 2E 49 44              4211         .ascii     ".ID"
      0099DC                       4212 DOTID:
      0099DC CD 87 03         [ 4] 4213         CALL     QDUP    ;if zero no name
      0099DF CD 84 67         [ 4] 4214         CALL     QBRAN
      0099E2 99 F2                 4215         .word      DOTI1
      0099E4 CD 8B 91         [ 4] 4216         CALL     COUNT
      0099E7 CD 84 34         [ 4] 4217         CALL     DOLIT
      0099EA 00 1F                 4218         .word      0x1F
      0099EC CD 85 A5         [ 4] 4219         CALL     ANDD    ;mask lexicon bits
      0099EF CC 98 E1         [ 2] 4220         JP     UTYPE
      0099F2 CD 8F 5F         [ 4] 4221 DOTI1:  CALL     DOTQP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0099F5 09                    4222         .byte      9
      0099F6 20 6E 6F 4E 61 6D 65  4223         .ascii     " noName"
      0099FD 81               [ 4] 4224         RET
                                   4225 
                           000000  4226 WANT_SEE=0
                           000000  4227 .if WANT_SEE 
                                   4228 ;       SEE     ( -- ; <string> )
                                   4229 ;       A simple decompiler.
                                   4230 ;       Updated for byte machines.
                                   4231         .word      LINK
                                   4232 LINK = . 
                                   4233         .byte      3
                                   4234         .ascii     "SEE"
                                   4235 SEE:
                                   4236         CALL     TICK    ;starting address
                                   4237         CALL     CR
                                   4238         CALL     ONEM
                                   4239 SEE1:   CALL     ONEP
                                   4240         CALL     DUPP
                                   4241         CALL     AT
                                   4242         CALL     DUPP
                                   4243         CALL     QBRAN
                                   4244         .word    SEE2
                                   4245         CALL     TNAME   ;?is it a name
                                   4246 SEE2:   CALL     QDUP    ;name address or zero
                                   4247         CALL     QBRAN
                                   4248         .word    SEE3
                                   4249         CALL     SPACE
                                   4250         CALL     DOTID   ;display name
                                   4251         CALL     ONEP
                                   4252         JRA      SEE4
                                   4253 SEE3:   CALL     DUPP
                                   4254         CALL     CAT
                                   4255         CALL     UDOT    ;display number
                                   4256 SEE4:   CALL     NUFQ    ;user control
                                   4257         CALL     QBRAN
                                   4258         .word    SEE1
                                   4259         JP     DROP
                                   4260 .endif ; WANT_SEE 
                                   4261 
                                   4262 ;       WORDS   ( -- )
                                   4263 ;       Display names in vocabulary.
      0099FE 99 D8                 4264         .word      LINK
                           001980  4265 LINK = . 
      009A00 05                    4266         .byte      5
      009A01 57 4F 52 44 53        4267         .ascii     "WORDS"
      009A06                       4268 WORDS:
      009A06 CD 8F 20         [ 4] 4269         CALL     CR
      009A09 CD 86 99         [ 4] 4270         CALL     CNTXT   ;only in context
      009A0C CD 84 B2         [ 4] 4271 WORS1:  CALL     AT
      009A0F CD 87 03         [ 4] 4272         CALL     QDUP    ;?at end of list
      009A12 CD 84 67         [ 4] 4273         CALL     QBRAN
      009A15 9A 28                 4274         .word      WORS2
      009A17 CD 85 59         [ 4] 4275         CALL     DUPP
      009A1A CD 8E D8         [ 4] 4276         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      009A1D CD 99 DC         [ 4] 4277         CALL     DOTID   ;display a name
      009A20 CD 8A 32         [ 4] 4278         CALL     CELLM
      009A23 CD 84 7E         [ 4] 4279         CALL     BRAN
      009A26 9A 0C                 4280         .word      WORS1
      009A28 81               [ 4] 4281 WORS2:  RET
                                   4282 
                                   4283         
                                   4284 ;; Hardware reset
                                   4285 
                                   4286 ;       hi      ( -- )
                                   4287 ;       Display sign-on message.
      009A29 9A 00                 4288         .word      LINK
                           0019AB  4289 LINK = . 
      009A2B 02                    4290         .byte      2
      009A2C 68 69                 4291         .ascii     "hi"
      009A2E                       4292 HI:
      009A2E CD 8F 20         [ 4] 4293         CALL     CR
      009A31 CD 8F 5F         [ 4] 4294         CALL     DOTQP   ;initialize I/O
      009A34 0F                    4295         .byte      15
      009A35 73 74 6D 38 65 46 6F  4296         .ascii     "stm8eForth v"
             72 74 68 20 76
      009A41 33                    4297 	.byte      VER+'0'
      009A42 2E                    4298         .byte      '.' 
      009A43 30                    4299 	.byte      EXT+'0' ;version
      009A44 CD 8F 5F         [ 4] 4300         CALL    DOTQP
                           000000  4301 .if NUCLEO          
                                   4302         .byte 18
                                   4303         .ascii  " on NUCLEO-8S208RB"
                           000001  4304 .else ; DISCOVERY 
      009A47 13                    4305         .byte 19
      009A48 20 6F 6E 20 53 54 4D  4306         .ascii  " on STM8S-DISCOVERY"
             38 53 2D 44 49 53 43
             4F 56 45 52 59
                                   4307 .endif
      009A5B CC 8F 20         [ 2] 4308         JP     CR
                                   4309 
                           000000  4310 WANT_DEBUG=0
                           000000  4311 .if WANT_DEBUG 
                                   4312 ;       DEBUG      ( -- )
                                   4313 ;       Display sign-on message.
                                   4314 ;        .word      LINK
                                   4315 LINK = . 
                                   4316         .byte      5
                                   4317         .ascii     "DEBUG"
                                   4318 DEBUG:
                                   4319 	CALL DOLIT
                                   4320 	.word 0x65
                                   4321 	CALL EMIT
                                   4322 	CALL DOLIT
                                   4323 	.word 0
                                   4324  	CALL ZLESS 
                                   4325 	CALL DOLIT
                                   4326 	.word 0xFFFE
                                   4327 	CALL ZLESS 
                                   4328 	CALL UPLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4329  	CALL DROP 
                                   4330 	CALL DOLIT
                                   4331 	.word 3
                                   4332 	CALL UPLUS 
                                   4333 	CALL UPLUS 
                                   4334  	CALL DROP
                                   4335 	CALL DOLIT
                                   4336 	.word 0x43
                                   4337 	CALL UPLUS 
                                   4338  	CALL DROP
                                   4339 	CALL EMIT
                                   4340 	CALL DOLIT
                                   4341 	.word 0x4F
                                   4342 	CALL DOLIT
                                   4343 	.word 0x6F
                                   4344  	CALL XORR
                                   4345 	CALL DOLIT
                                   4346 	.word 0xF0
                                   4347  	CALL ANDD
                                   4348 	CALL DOLIT
                                   4349 	.word 0x4F
                                   4350  	CALL ORR
                                   4351 	CALL EMIT
                                   4352 	CALL DOLIT
                                   4353 	.word 8
                                   4354 	CALL DOLIT
                                   4355 	.word 6
                                   4356  	CALL SWAPP
                                   4357 	CALL OVER
                                   4358 	CALL XORR
                                   4359 	CALL DOLIT
                                   4360 	.word 3
                                   4361 	CALL ANDD 
                                   4362 	CALL ANDD
                                   4363 	CALL DOLIT
                                   4364 	.word 0x70
                                   4365 	CALL UPLUS 
                                   4366 	CALL DROP
                                   4367 	CALL EMIT
                                   4368 	CALL DOLIT
                                   4369 	.word 0
                                   4370 	CALL QBRAN
                                   4371 	.word DEBUG1
                                   4372 	CALL DOLIT
                                   4373 	.word 0x3F
                                   4374 DEBUG1:
                                   4375 	CALL DOLIT
                                   4376 	.word 0xFFFF
                                   4377 	CALL QBRAN
                                   4378 	.word DEBUG2
                                   4379 	CALL DOLIT
                                   4380 	.word 0x74
                                   4381 	CALL BRAN
                                   4382 	.word DEBUG3
                                   4383 DEBUG2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4384 	CALL DOLIT
                                   4385 	.word 0x21
                                   4386 DEBUG3:
                                   4387 	CALL EMIT
                                   4388 	CALL DOLIT
                                   4389 	.word 0x68
                                   4390 	CALL DOLIT
                                   4391 	.word 0x80
                                   4392 	CALL STORE
                                   4393 	CALL DOLIT
                                   4394 	.word 0x80
                                   4395 	CALL AT
                                   4396 	CALL EMIT
                                   4397 	CALL DOLIT
                                   4398 	.word 0x4D
                                   4399 	CALL TOR
                                   4400 	CALL RAT
                                   4401 	CALL RFROM
                                   4402 	CALL ANDD
                                   4403 	CALL EMIT
                                   4404 	CALL DOLIT
                                   4405 	.word 0x61
                                   4406 	CALL DOLIT
                                   4407 	.word 0xA
                                   4408 	CALL TOR
                                   4409 DEBUG4:
                                   4410 	CALL DOLIT
                                   4411 	.word 1
                                   4412 	CALL UPLUS 
                                   4413 	CALL DROP
                                   4414 	CALL DONXT
                                   4415 	.word DEBUG4
                                   4416 	CALL EMIT
                                   4417 	CALL DOLIT
                                   4418 	.word 0x656D
                                   4419 	CALL DOLIT
                                   4420 	.word 0x100
                                   4421 	CALL UMSTA
                                   4422 	CALL SWAPP
                                   4423 	CALL DOLIT
                                   4424 	.word 0x100
                                   4425 	CALL UMSTA
                                   4426 	CALL SWAPP 
                                   4427 	CALL DROP
                                   4428 	CALL EMIT
                                   4429 	CALL EMIT
                                   4430 	CALL DOLIT
                                   4431 	.word 0x2043
                                   4432 	CALL DOLIT
                                   4433 	.word 0
                                   4434 	CALL DOLIT
                                   4435 	.word 0x100
                                   4436 	CALL UMMOD
                                   4437 	CALL EMIT
                                   4438 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4439 	;JP ORIG
                                   4440 	RET
                                   4441 .endif ; WANT_DEBUG 
                                   4442 
                                   4443 
                                   4444 ;       'BOOT   ( -- a )
                                   4445 ;       The application startup vector.
      009A5E 9A 2B                 4446         .word      LINK
                           0019E0  4447 LINK = . 
      009A60 05                    4448         .byte      5
      009A61 27 42 4F 4F 54        4449         .ascii     "'BOOT"
      009A66                       4450 TBOOT:
      009A66 CD 86 06         [ 4] 4451         CALL     DOVAR
      009A69 40 02                 4452         .word    APP_RUN      ;application to boot
                                   4453 
                                   4454 ;       COLD    ( -- )
                                   4455 ;       The hilevel cold start s=ence.
      009A6B 9A 60                 4456         .word      LINK
                           0019ED  4457         LINK = . 
      009A6D 04                    4458         .byte      4
      009A6E 43 4F 4C 44           4459         .ascii     "COLD"
      009A72                       4460 COLD:
                           000000  4461 .if WANT_DEBUG
                                   4462         CALL DEBUG
                                   4463 .endif ; WANT_DEBUG
      009A72 CD 84 34         [ 4] 4464 COLD1:  CALL     DOLIT
      009A75 80 AB                 4465         .word      UZERO
      009A77 CD 84 34         [ 4] 4466 	CALL     DOLIT
      009A7A 00 06                 4467         .word      UPP
      009A7C CD 84 34         [ 4] 4468         CALL     DOLIT
      009A7F 00 1A                 4469 	.word      UEND-UZERO
      009A81 CD 8B F5         [ 4] 4470         CALL     CMOVE   ;initialize user area
                                   4471 
                                   4472 ; if APP_RUN==0 initialize with ca de 'hi'  
      009A84 90 CE 40 02      [ 2] 4473         ldw y,APP_RUN 
      009A88 26 0B            [ 1] 4474         jrne 0$
      009A8A 1D 00 02         [ 2] 4475         subw x,#CELLL 
      009A8D 90 AE 9A 2E      [ 2] 4476         ldw y,#HI  
      009A91 FF               [ 2] 4477         ldw (x),y
      009A92 CD 9B 8D         [ 4] 4478         call UPDATRUN 
      009A95                       4479 0$:        
                                   4480 ; update LAST with APP_LAST 
                                   4481 ; if APP_LAST > LAST else do the opposite
      009A95 90 CE 40 00      [ 2] 4482         ldw y,APP_LAST 
      009A99 90 B3 1A         [ 2] 4483         cpw y,ULAST 
      009A9C 22 05            [ 1] 4484         jrugt 1$ 
                                   4485 ; save LAST at APP_LAST  
      009A9E CD 9B 75         [ 4] 4486         call UPDATLAST 
      009AA1 20 06            [ 2] 4487         jra 2$
      009AA3                       4488 1$: ; update LAST with APP_LAST 
      009AA3 90 BF 1A         [ 2] 4489         ldw ULAST,y
      009AA6 90 BF 14         [ 2] 4490         ldw UCNTXT,y
      009AA9                       4491 2$:  
                                   4492 ; update APP_CP if < app_space 
      009AA9 90 CE 40 04      [ 2] 4493         ldw y,APP_CP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      009AAD 90 B3 18         [ 2] 4494         cpw y,UCP   
      009AB0 24 06            [ 1] 4495         jruge 3$ 
      009AB2 CD 9B 9E         [ 4] 4496         call UPDATCP
      009AB5 90 BE 18         [ 2] 4497         ldw y,UCP   
      009AB8                       4498 3$:
      009AB8 90 BF 18         [ 2] 4499         ldw UCP,y                 
                                   4500 ; update UVP with APP_VP  
                                   4501 ; if APP_VP>UVP else do the opposite 
      009ABB 90 CE 40 06      [ 2] 4502         ldw y,APP_VP 
      009ABF 90 B3 16         [ 2] 4503         cpw y,UVP 
      009AC2 22 05            [ 1] 4504         jrugt 4$
      009AC4 CD 9B B5         [ 4] 4505         call UPDATVP 
      009AC7 20 03            [ 2] 4506         jra 6$
      009AC9                       4507 4$: ; update UVP with APP_VP 
      009AC9 90 BF 16         [ 2] 4508         ldw UVP,y 
      009ACC                       4509 6$:      
      009ACC CD 94 23         [ 4] 4510         CALL     PRESE   ;initialize data stack and TIB
      009ACF CD 9A 66         [ 4] 4511         CALL     TBOOT
      009AD2 CD 8B DE         [ 4] 4512         CALL     ATEXE   ;application boot
      009AD5 CD 96 EC         [ 4] 4513         CALL     OVERT
      009AD8 CC 94 40         [ 2] 4514         JP     QUIT    ;start interpretation
                                   4515 
                                   4516 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4517         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      009ADB 9A 6D                   30     .word LINK 
                           001A5D    31     LINK=.
      009ADD 03                      32     .byte 3 
      009ADE 46 50 21                33     .ascii "FP!"
      009AE1                         34 FPSTOR:
      009AE1 90 93            [ 1]   35     ldw y,x
      009AE3 90 FE            [ 2]   36     ldw y,(y)
      009AE5 90 9F            [ 1]   37     ld a,yl 
      009AE7 B7 32            [ 1]   38     ld FPTR,a 
      009AE9 1C 00 02         [ 2]   39     addw x,#CELLL 
      009AEC 90 93            [ 1]   40     ldw y,x 
      009AEE 90 FE            [ 2]   41     ldw y,(y)
      009AF0 90 BF 33         [ 2]   42     ldw PTR16,y
      009AF3 1C 00 02         [ 2]   43     addw x,#CELLL 
      009AF6 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      009AF7 9A DD                   51     .word LINK 
                           001A79    52 LINK=.
      009AF9 06                      53     .byte 6 
      009AFA 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      009B00                         55 EEPROM: 
      009B00 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      009B04 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      009B07 EF 02            [ 2]   58     ldw (2,x),y 
      009B09 90 5F            [ 1]   59     clrw y 
      009B0B FF               [ 2]   60     ldw (x),y 
      009B0C 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      009B0D 9A F9                   67 	.word LINK 
                           001A8F    68 	LINK=.
      009B0F 08                      69 	.byte 8 
      009B10 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      009B18                         71 EEPLAST:
      009B18 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      009B1B 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      009B1F EF 02            [ 2]   74 	ldw (2,x),y 
      009B21 90 5F            [ 1]   75 	clrw y 
      009B23 FF               [ 2]   76 	ldw (x),y 
      009B24 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      009B25 9B 0F                   83 	.word LINK 
                           001AA7    84 	LINK=.
      009B27 07                      85 	.byte 7
      009B28 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      009B2F                         87 EEPRUN:
      009B2F 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      009B32 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      009B36 EF 02            [ 2]   90 	ldw (2,x),y 
      009B38 90 5F            [ 1]   91 	clrw y 
      009B3A FF               [ 2]   92 	ldw (x),y 
      009B3B 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      009B3C 9B 27                   99 	.word LINK
                           001ABE   100 	LINK=.
      009B3E 06                     101 	.byte 6 
      009B3F 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      009B45                        103 EEPCP:
      009B45 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      009B48 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      009B4C EF 02            [ 2]  106 	ldw (2,x),y 
      009B4E 90 5F            [ 1]  107 	clrw y 
      009B50 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      009B51 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      009B52 9B 3E                  115 	.word LINK
                           001AD4   116 	LINK=.
      009B54 06                     117 	.byte 6
      009B55 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      009B5B                        119 EEPVP:
      009B5B 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      009B5E 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      009B62 EF 02            [ 2]  122 	ldw (2,x),y 
      009B64 90 5F            [ 1]  123 	clrw y 
      009B66 FF               [ 2]  124 	ldw (x),y 
      009B67 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      009B68 9B 54                  131 	.word LINK 
                           001AEA   132 	LINK=.
      009B6A 0A                     133 	.byte 10
      009B6B 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      009B75                        135 UPDATLAST:
      009B75 CD 86 C5         [ 4]  136 	call LAST
      009B78 CD 84 B2         [ 4]  137 	call AT  
      009B7B CD 9B 18         [ 4]  138 	call EEPLAST
      009B7E CC 9D 48         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      009B81 9B 6A                  145 	.word LINK
                           001B03   146 	LINK=.
      009B83 09                     147 	.byte 9
      009B84 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      009B8D                        149 UPDATRUN:
      009B8D CD 9B 2F         [ 4]  150 	call EEPRUN
      009B90 CC 9D 48         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      009B93 9B 83                  157 	.word LINK 
                           001B15   158 	LINK=.
      009B95 08                     159 	.byte 8 
      009B96 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      009B9E                        161 UPDATCP:
      009B9E CD 86 B5         [ 4]  162 	call CPP 
      009BA1 CD 84 B2         [ 4]  163 	call AT 
      009BA4 CD 9B 45         [ 4]  164 	call EEPCP 
      009BA7 CC 9D 48         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      009BAA 9B 95                  171 	.word LINK
                           001B2C   172 	LINK=.
      009BAC 08                     173 	.byte 8 
      009BAD 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      009BB5                        175 UPDATVP:
      009BB5 CD 86 A7         [ 4]  176 	call VPP 
      009BB8 CD 84 B2         [ 4]  177 	call AT
      009BBB CD 9B 5B         [ 4]  178 	call EEPVP 
      009BBE CC 9D 48         [ 2]  179 	jp EESTORE
                                    180 	
                           000000   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
                                    186     .word LINK 
                                    187 LINK=.
                                    188     .byte 2
                                    189     .ascii "F@"
                                    190 FARAT:
                                    191     call FPSTOR
                                    192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
                                    199     .word LINK
                                    200     LINK=.
                                    201     .byte 3 
                                    202     .ascii "FC@" 
                                    203 FARCAT:
                                    204     call FPSTOR
                                    205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      009BC1 9B AC                  213     .word LINK 
                           001B43   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      009BC3 06                     215     .byte 6 
      009BC4 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      009BCA                        217 UNLKEE:
      009BCA 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      009BCE 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      009BD2 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      009BD6 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      009BDA 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      009BDF 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      009BE0 9B C3                  230     .word LINK 
                           001B62   231 LINK=. 
      009BE2 06                     232     .byte 6 
      009BE3 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      009BE9                        234 UNLKFL:
      009BE9 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      009BED 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      009BF1 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      009BF5 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      009BF9 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      009BFE 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      009BFF 9B E2                  247 	.word LINK 
                           001B81   248 	LINK=.
      009C01 06                     249 	.byte 6
      009C02 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      009C08                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      009C08 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      009C0B 3D 32            [ 1]  255 	tnz FPTR 
      009C0D 26 16            [ 1]  256 	jrne 4$
      009C0F 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      009C13 24 10            [ 1]  258     jruge 4$
      009C15 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      009C19 25 0D            [ 1]  260     jrult 9$
      009C1B 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      009C1F 22 07            [ 1]  262 	jrugt 9$
      009C21 CD 9B CA         [ 4]  263 	call UNLKEE
      009C24 81               [ 4]  264 	ret 
      009C25 CD 9B E9         [ 4]  265 4$: call UNLKFL
      009C28 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      009C29 9C 01                  273 	.word LINK 
                           001BAB   274 	LINK=.
      009C2B 04                     275 	.byte 4 
      009C2C 4C 4F 43 4B            276 	.ascii "LOCK" 
      009C30                        277 LOCK: 
      009C30 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      009C34 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      009C38 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      009C39 9C 2B                  286 	.word LINK 
                           001BBB   287 	LINK=. 
      009C3B 08                     288 	.byte 8 
      009C3C 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      009C44                        290 INC_FPTR:
      009C44 3C 34            [ 1]  291 	inc PTR8 
      009C46 26 0C            [ 1]  292 	jrne 1$
      009C48 90 89            [ 2]  293 	pushw y 
      009C4A 90 BE 32         [ 2]  294 	ldw y,FPTR 
      009C4D 90 5C            [ 1]  295 	incw y 
      009C4F 90 BF 32         [ 2]  296 	ldw FPTR,y
      009C52 90 85            [ 2]  297 	popw y  
      009C54 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      009C55 9C 3B                  304 	.word LINK 
                           001BD7   305 	LINK=.
      009C57 04                     306 	.byte 4 
      009C58 50 54 52 2B            307 	.ascii "PTR+"
      009C5C                        308 PTRPLUS:
      009C5C 90 93            [ 1]  309 	ldw y,x 
      009C5E 1C 00 02         [ 2]  310 	addw x,#CELLL 
      009C61 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      009C65 90 BF 33         [ 2]  312 	ldw PTR16,y  
      009C68 24 02            [ 1]  313 	jrnc 1$
      009C6A 3C 32            [ 1]  314 	inc FPTR 
      009C6C 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      009C6D 9C 57                  322 	.word LINK 
                           001BEF   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      009C6F 07                     324 	.byte 7 
      009C70 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      009C77                        326 EE_READ:
      009C77 1D 00 02         [ 2]  327 	subw x,#CELLL 
      009C7A 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      009C7E 90 95            [ 1]  329 	ld yh,a 
      009C80 CD 9C 44         [ 4]  330 	call INC_FPTR 
      009C83 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      009C87 CD 9C 44         [ 4]  332 	call INC_FPTR 
      009C8A 90 97            [ 1]  333 	ld yl,a 
      009C8C FF               [ 2]  334 	ldw (x),y 
      009C8D 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      009C8E 9C 6F                  341 	.word LINK 
                           001C10   342 	LINK=.
      009C90 08                     343 	.byte 8
      009C91 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      009C99                        345 EE_CREAD:
      009C99 1D 00 02         [ 2]  346 	subw x,#CELLL 
      009C9C 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      009CA0 CD 9C 44         [ 4]  348 	call INC_FPTR
      009CA3 90 5F            [ 1]  349 	clrw y 
      009CA5 90 97            [ 1]  350 	ld yl,a 
      009CA7 FF               [ 2]  351 	ldw (x),y 
      009CA8 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      009CA9 9C 90                  361 	.word LINK 
                           001C2B   362 	LINK=. 
      009CAB 07                     363 	.byte 7 
      009CAC 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      009CB3                        366 WR_BYTE:
      009CB3 90 93            [ 1]  367 	ldw y,x 
      009CB5 90 FE            [ 2]  368 	ldw y,(y)
      009CB7 1C 00 02         [ 2]  369 	addw x,#CELLL 
      009CBA 90 9F            [ 1]  370 	ld a,yl
      009CBC 92 BD 00 32      [ 4]  371 	ldf [FPTR],a
      009CC0 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      009CC5 CC 9C 44         [ 2]  373 	jp INC_FPTR 
                                    374 
                                    375 ;---------------------------------------
                                    376 ; write a word at address pointed 
                                    377 ; by FPTR and increment FPTR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    378 ; Expect pointer already initialzed 
                                    379 ; and memory unlocked 
                                    380 ; WR-WORD ( w -- )
                                    381 ;---------------------------------------
      009CC8 9C AB                  382 	.word LINK 
                           001C4A   383 	LINK=.
      009CCA 07                     384 	.byte 7 
      009CCB 57 52 2D 57 4F 52 44   385 	.ascii "WR-WORD" 
      009CD2                        386 WR_WORD:
      009CD2 90 93            [ 1]  387 	ldw y,x
      009CD4 90 FE            [ 2]  388 	ldw y,(y)
      009CD6 1C 00 02         [ 2]  389 	addw x,#CELLL 
      009CD9 90 9E            [ 1]  390 	ld a,yh 
      009CDB 92 BD 00 32      [ 4]  391 	ldf [FPTR],a
      009CDF 72 05 50 5F FB   [ 2]  392 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      009CE4 CD 9C 44         [ 4]  393 	call INC_FPTR 
      009CE7 90 9F            [ 1]  394 	ld a,yl 
      009CE9 92 BD 00 32      [ 4]  395 	ldf [FPTR],a
      009CED 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      009CF2 CC 9C 44         [ 2]  397 	jp INC_FPTR 
                                    398 
                                    399 
                                    400 ;---------------------------------------
                                    401 ; write a byte to FLASH or EEPROM/OPTION  
                                    402 ; EEC!  (c ud -- )
                                    403 ;---------------------------------------
      009CF5 9C CA                  404     .word LINK 
                           001C77   405 	LINK=.
      009CF7 04                     406     .byte 4 
      009CF8 45 45 43 21            407     .ascii "EEC!"
                                    408 	; local variables 
                           000001   409 	BTW = 1   ; byte to write offset on stack
                           000002   410     OPT = 2 
                           000002   411 	VSIZE = 2
      009CFC                        412 EECSTORE:
      009CFC 52 02            [ 2]  413 	sub sp,#VSIZE
      009CFE CD 9A E1         [ 4]  414     call FPSTOR
      009D01 E6 01            [ 1]  415 	ld a,(1,x)
      009D03 43               [ 1]  416 	cpl a 
      009D04 6B 01            [ 1]  417 	ld (BTW,sp),a ; byte to write 
      009D06 0F 02            [ 1]  418 	clr (OPT,sp)  ; OPTION flag
      009D08 CD 9C 08         [ 4]  419 	call UNLOCK 
                                    420 	; check if option
      009D0B 3D 32            [ 1]  421 	tnz FPTR 
      009D0D 26 19            [ 1]  422 	jrne 2$
      009D0F 90 BE 33         [ 2]  423 	ldw y,PTR16 
      009D12 90 A3 48 00      [ 2]  424 	cpw y,#OPTION_BASE
      009D16 2B 10            [ 1]  425 	jrmi 2$
      009D18 90 A3 48 80      [ 2]  426 	cpw y,#OPTION_END+1
      009D1C 2A 0A            [ 1]  427 	jrpl 2$
      009D1E 03 02            [ 1]  428 	cpl (OPT,sp)
                                    429 	; OPTION WRITE require this UNLOCK 
      009D20 72 1E 50 5B      [ 1]  430     bset FLASH_CR2,#FLASH_CR2_OPT
      009D24 72 1F 50 5C      [ 1]  431     bres FLASH_NCR2,#FLASH_CR2_OPT 
      009D28                        432 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      009D28 CD 9C B3         [ 4]  433 	call WR_BYTE 	
      009D2B 0D 02            [ 1]  434 	tnz (OPT,sp)
      009D2D 27 0D            [ 1]  435 	jreq 3$ 
      009D2F 7B 01            [ 1]  436     ld a,(BTW,sp)
      009D31 90 5F            [ 1]  437     clrw y
      009D33 90 97            [ 1]  438 	ld yl,a 
      009D35 1D 00 02         [ 2]  439 	subw x,#CELLL 
      009D38 FF               [ 2]  440 	ldw (x),y 
      009D39 CD 9C B3         [ 4]  441 	call WR_BYTE
      009D3C                        442 3$: 
      009D3C CD 9C 30         [ 4]  443 	call LOCK 
      009D3F 5B 02            [ 2]  444 	addw sp,#VSIZE 
      009D41 81               [ 4]  445     ret
                                    446 
                                    447 ;------------------------------
                                    448 ; write integer in FLASH|EEPROM
                                    449 ; EE! ( n ud -- )
                                    450 ;------------------------------
      009D42 9C F7                  451 	.word LINK 
                           001CC4   452 	LINK=.
      009D44 03                     453 	.byte 3 
      009D45 45 45 21               454 	.ascii "EE!"
      009D48                        455 EESTORE:
      009D48 CD 9A E1         [ 4]  456 	call FPSTOR 
      009D4B CD 9C 08         [ 4]  457 	call UNLOCK 
      009D4E 90 93            [ 1]  458 	ldw y,x 
      009D50 90 FE            [ 2]  459 	ldw y,(y)
      009D52 90 89            [ 2]  460 	pushw y 
      009D54 90 5E            [ 1]  461 	swapw y 
      009D56 FF               [ 2]  462 	ldw (x),y 
      009D57 CD 9C B3         [ 4]  463 	call WR_BYTE 
      009D5A 90 85            [ 2]  464 	popw y 
      009D5C 1D 00 02         [ 2]  465 	subw x,#CELLL
      009D5F FF               [ 2]  466 	ldw (x),y 
      009D60 CD 9C B3         [ 4]  467 	call WR_BYTE
      009D63 CC 9C 30         [ 2]  468 	jp LOCK 
                                    469 
                                    470 
                                    471 ;----------------------------
                                    472 ; Erase flash memory row 
                                    473 ; stm8s208 as 128 bytes rows
                                    474 ; ROW-ERASE ( ud -- )
                                    475 ;----------------------------
      009D66 9D 44                  476 	.word LINK 
                           001CE8   477 	LINK=. 
      009D68 09                     478 	.byte 9 
      009D69 52 4F 57 2D 45 52 41   479 	.ascii "ROW-ERASE" 
             53 45
      009D72                        480 row_erase:
      009D72 CD 9A E1         [ 4]  481 	call FPSTOR
                                    482 ;code must be execute from RAM 
                                    483 ;copy routine to PAD 
      009D75 1D 00 02         [ 2]  484 	subw x,#CELLL 
      009D78 90 AE 9D BF      [ 2]  485 	ldw y,#row_erase_proc
      009D7C FF               [ 2]  486 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      009D7D CD 8B B9         [ 4]  487 	call PAD 
      009D80 90 AE 9D E6      [ 2]  488 	ldw y,#row_erase_proc_end 
      009D84 72 A2 9D BF      [ 2]  489 	subw y,#row_erase_proc
      009D88 1D 00 02         [ 2]  490 	subw x,#CELLL 
      009D8B FF               [ 2]  491 	ldw (x),y 
      009D8C CD 8B F5         [ 4]  492 	call CMOVE 
      009D8F                        493 block_erase:
      009D8F 90 BE 33         [ 2]  494 	ldw y,FPTR+1
      009D92 90 A3 A3 80      [ 2]  495 	cpw y,#app_space 
      009D96 2A 13            [ 1]  496 	jrpl erase_flash 
                                    497 ; erase EEPROM block
      009D98 90 A3 40 00      [ 2]  498 	cpw y,#EEPROM_BASE 
      009D9C 24 01            [ 1]  499 	jruge 1$
      009D9E 81               [ 4]  500 	ret ; bad address 
      009D9F 90 A3 43 FF      [ 2]  501 1$: cpw y,#EEPROM_END 
      009DA3 23 01            [ 2]  502 	jrule 2$ 
      009DA5 81               [ 4]  503 	ret ; bad address 
      009DA6                        504 2$:	
      009DA6 CD 9B CA         [ 4]  505 	call UNLKEE 
      009DA9 20 03            [ 2]  506 	jra proceed_erase
                                    507 ; erase flash block:
      009DAB                        508 erase_flash:
      009DAB CD 9B E9         [ 4]  509 	call UNLKFL 
      009DAE                        510 proceed_erase:
      009DAE CD 8B B9         [ 4]  511 	call PAD 
      009DB1 90 93            [ 1]  512 	ldw y,x
      009DB3 90 FE            [ 2]  513 	ldw y,(y)
      009DB5 1C 00 02         [ 2]  514 	addw x,#CELLL  
      009DB8 90 FD            [ 4]  515 	call (y) 
      009DBA 72 17 50 5F      [ 1]  516 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      009DBE 81               [ 4]  517 	ret 
                                    518 
                                    519 ; this routine is to be copied to PAD 
      009DBF                        520 row_erase_proc:
      009DBF 35 20 50 5B      [ 1]  521 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      009DC3 35 DF 50 5C      [ 1]  522 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      009DC7 4F               [ 1]  523 	clr a 
      009DC8 90 5F            [ 1]  524 	clrw y 
      009DCA 91 A7 00 32      [ 1]  525 	ldf ([FPTR],y),a
      009DCE 90 5C            [ 1]  526     incw y
      009DD0 91 A7 00 32      [ 1]  527 	ldf ([FPTR],y),a
      009DD4 90 5C            [ 1]  528     incw y
      009DD6 91 A7 00 32      [ 1]  529 	ldf ([FPTR],y),a
      009DDA 90 5C            [ 1]  530     incw y
      009DDC 91 A7 00 32      [ 1]  531 	ldf ([FPTR],y),a
      009DE0 72 05 50 5F FB   [ 2]  532 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      009DE5 81               [ 4]  533 	ret
      009DE6                        534 row_erase_proc_end:
                                    535 
                                    536 
                                    537 ;-----------------------------------
                                    538 ; block programming must be 
                                    539 ; executed from RAM 
                                    540 ; initial contidions: 
                                    541 ; 		memory unlocked
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    542 ;       FPTR initialized 
                                    543 ; input: 
                                    544 ;    x   buffer address 
                                    545 ;-----------------------------------
                           000001   546 	BCNT=1 
      009DE6                        547 copy_buffer:
      009DE6 4B 80            [ 1]  548 	push #BLOCK_SIZE  
                                    549 ;enable block programming 
      009DE8 72 10 50 5B      [ 1]  550 	bset FLASH_CR2,#FLASH_CR2_PRG 
      009DEC 72 11 50 5C      [ 1]  551 	bres FLASH_NCR2,#FLASH_CR2_PRG
      009DF0 90 5F            [ 1]  552 	clrw y
      009DF2 F6               [ 1]  553 1$:	ld a,(x)
      009DF3 91 A7 00 32      [ 1]  554 	ldf ([FPTR],y),a
      009DF7 5C               [ 1]  555 	incw x 
      009DF8 90 5C            [ 1]  556 	incw y 
      009DFA 0A 01            [ 1]  557 	dec (BCNT,sp)
      009DFC 26 F4            [ 1]  558 	jrne 1$
                                    559 ; wait EOP bit 
      009DFE 72 05 50 5F FB   [ 2]  560 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      009E03 84               [ 1]  561 	pop a ; remove BCNT from stack 
      009E04 81               [ 4]  562 	ret 
      009E05                        563 copy_buffer_end:
                                    564 
                                    565 ;-------------------------
                                    566 ; move program_row to RAM 
                                    567 ; in TIB 
                                    568 ;------------------------
      009E05                        569 copy_prog_to_ram:
      009E05 1D 00 06         [ 2]  570 	subw x,#6
      009E08 90 AE 9D E6      [ 2]  571 	ldw y,#copy_buffer 
      009E0C EF 04            [ 2]  572 	ldw (4,x),y 
      009E0E 90 AE 07 00      [ 2]  573 	ldw y,#TIBBASE
      009E12 EF 02            [ 2]  574 	ldw (2,x),y 
      009E14 90 AE 9E 05      [ 2]  575 	ldw y,#copy_buffer_end 
      009E18 72 A2 9D E6      [ 2]  576 	subw y,#copy_buffer  
      009E1C FF               [ 2]  577 	ldw (x),y 
      009E1D CD 8B F5         [ 4]  578 	call CMOVE 
      009E20 81               [ 4]  579 	ret 
                                    580 
                                    581 
                                    582 ;-----------------------------
                                    583 ; write a row in FLASH/EEPROM 
                                    584 ; WR-ROW ( a ud -- )
                                    585 ; a -> address 128 byte buffer to write 
                                    586 ; ud ->  row address in FLASH|EEPROM 
                                    587 ;-----------------------------
      009E21 9D 68                  588 	.word LINK 
                           001DA3   589 	LINK=.
      009E23 06                     590 	.byte 6 
      009E24 57 52 2D 52 4F 57      591 	.ascii "WR-ROW"
      009E2A                        592 write_row:
      009E2A CD 9A E1         [ 4]  593 	call FPSTOR
                                    594 ; align to FLASH block 
      009E2D A6 80            [ 1]  595 	ld a,#0x80 
      009E2F B4 34            [ 1]  596 	and a,PTR8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      009E31 B7 34            [ 1]  597 	ld PTR8,a  
      009E33 CD 9E 05         [ 4]  598 	call copy_prog_to_ram
      009E36 CD 9C 08         [ 4]  599 	call UNLOCK
      009E39 90 93            [ 1]  600 	ldw y,x 
      009E3B 90 FE            [ 2]  601 	ldw y,(y)
      009E3D 1C 00 02         [ 2]  602 	addw x,#CELLL 
      009E40 89               [ 2]  603 	pushw x 
      009E41 93               [ 1]  604 	ldw x,y ; buffer address in x 
      009E42 CD 07 00         [ 4]  605 	call TIBBASE
      009E45 CD 9C 30         [ 4]  606 	call LOCK
      009E48 85               [ 2]  607 	popw x 
      009E49 81               [ 4]  608 	ret 
                                    609 
                                    610 ;-------------------------------------
                                    611 ; change value of OPTION register 
                                    612 ; SET-OPT (c n -- ) 
                                    613 ; c new value.
                                    614 ; n OPT  number {1..7}
                                    615 ;--------------------------------------
      009E4A 9E 23                  616 		.word LINK 
                           001DCC   617 		LINK=.
      009E4C 07                     618 		.byte 7 
      009E4D 53 45 54 2D 4F 50 54   619 		.ascii "SET-OPT" 
      009E54                        620 set_option: 
      009E54 90 93            [ 1]  621 		ldw y,x 
      009E56 90 FE            [ 2]  622 		ldw y,(y)
      009E58 27 06            [ 1]  623 		jreq 1$
      009E5A 90 A3 00 07      [ 2]  624 		cpw y,#7 
      009E5E 23 04            [ 2]  625 		jrule 2$ 
                                    626 ; invalid OPTION number 		
      009E60 1C 00 04         [ 2]  627 1$:		addw x,#2*CELLL
      009E63 81               [ 4]  628 		ret
      009E64 90 58            [ 2]  629 2$:		sllw y 
      009E66 72 A9 47 FF      [ 2]  630 		addw y,#OPTION_BASE-1
      009E6A FF               [ 2]  631 		ldw (x),y 
      009E6B 1D 00 02         [ 2]  632 		subw x,#CELLL 
      009E6E 90 5F            [ 1]  633 		clrw y 
      009E70 FF               [ 2]  634 		ldw (x),y 
      009E71 CD 9C FC         [ 4]  635 		call EECSTORE
      009E74 81               [ 4]  636 		ret 
                                    637 
                                    638 
                                    639 
                                    640 ;--------------------------------------
                                    641 ; reset system to its original state 
                                    642 ; before any user modification
                                    643 ; PRISTINE ( -- )
                                    644 ;-------------------------------------
      009E75 9E 4C                  645 	.word LINK  
                           001DF7   646 	LINK=.
      009E77 08                     647 	.byte 8 
      009E78 50 52 49 53 54 49 4E   648 	.ascii "PRISTINE"
             45
      009E80                        649 pristine:
                                    650 ;;; erase EEPROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      009E80 CD 9B 00         [ 4]  651 	call EEPROM 
      009E83 CD 87 3F         [ 4]  652 1$:	call DDUP 
      009E86 CD 9D 72         [ 4]  653 	call row_erase
      009E89 90 93            [ 1]  654 	ldw y,x 
      009E8B 90 EE 02         [ 2]  655 	ldw y,(2,y)
      009E8E 72 A9 00 80      [ 2]  656 	addw y,#BLOCK_SIZE
      009E92 EF 02            [ 2]  657 	ldw (2,x),y
      009E94 90 A3 48 00      [ 2]  658 	cpw y,#OPTION_BASE 
      009E98 25 E9            [ 1]  659 	jrult 1$
                                    660 ;;; reset OPTION to default values
      009E9A 90 AE 00 01      [ 2]  661 	ldw y,#1 ; OPT1 
      009E9E FF               [ 2]  662 2$:	ldw (x),y   
      009E9F 90 5F            [ 1]  663 	clrw y 
      009EA1 EF 02            [ 2]  664 	ldw (2,x),y  ; ( 0 1 -- ) 
      009EA3 CD 87 3F         [ 4]  665 	call DDUP    ; ( 0 1 0 1 -- )  
      009EA6 CD 9E 54         [ 4]  666 	call set_option
      009EA9 90 93            [ 1]  667 	ldw y,x 
      009EAB 90 FE            [ 2]  668 	ldw y,(y)
      009EAD 90 5C            [ 1]  669 	incw y  ; next OPTION 
      009EAF 90 A3 00 08      [ 2]  670 	cpw y,#8 
      009EB3 25 E9            [ 1]  671 	jrult 2$
                                    672 ;;; erase first row of app_space 	
      009EB5 90 AE A3 80      [ 2]  673 	ldw y,#app_space
      009EB9 EF 02            [ 2]  674 	ldw (2,x),y  
      009EBB 90 5F            [ 1]  675 	clrw y 
      009EBD FF               [ 2]  676 	ldw (x),y ; ( app_space 0 -- )
      009EBE CD 9D 72         [ 4]  677 	call row_erase 
                                    678 ; reset interrupt vectors 
      009EC1 1D 00 02         [ 2]  679 	subw x,#CELLL 
      009EC4 90 5F            [ 1]  680 	clrw y  
      009EC6 FF               [ 2]  681 4$:	ldw (x),y  ; ( n -- ) int# 
      009EC7 CD 85 59         [ 4]  682 	call DUPP  
      009ECA CD 9E E7         [ 4]  683 	call reset_vector
      009ECD 90 93            [ 1]  684 	ldw y,x 
      009ECF 90 FE            [ 2]  685 	ldw y,(y)
      009ED1 90 5C            [ 1]  686 	incw y   ; next vector 
      009ED3 90 A3 00 19      [ 2]  687 	cpw y,#25 
      009ED7 25 ED            [ 1]  688 	jrult 4$
      009ED9 CC 80 80         [ 2]  689 	jp NonHandledInterrupt ; reset MCU
                                    690 
                                    691 ;------------------------------
                                    692 ; reset an interrupt vector 
                                    693 ; to its initial value 
                                    694 ; i.e. NonHandledInterrupt
                                    695 ; RST-IVEC ( n -- )
                                    696 ;-----------------------------
      009EDC 9E 77                  697 	.word LINK 
                           001E5E   698 	LINK=. 
      009EDE 08                     699 	.byte 8 
      009EDF 52 53 54 2D 49 56 45   700 	.ascii "RST-IVEC"
             43
      009EE7                        701 reset_vector:
      009EE7 90 93            [ 1]  702 	ldw y,x
      009EE9 1C 00 02         [ 2]  703 	addw x,#CELLL 
      009EEC 90 FE            [ 2]  704 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      009EEE 90 A3 00 17      [ 2]  705 	cpw y,#23 
      009EF2 27 3A            [ 1]  706 	jreq 9$
      009EF4 90 A3 00 1D      [ 2]  707 	cpw y,#29 ; last vector
      009EF8 22 34            [ 1]  708 	jrugt 9$  
      009EFA 90 58            [ 2]  709 	sllw y 
      009EFC 90 58            [ 2]  710 	sllw y 
      009EFE 72 A9 80 08      [ 2]  711 	addw y,#0x8008 ; irq0 address 
      009F02 90 BF 24         [ 2]  712 	ldw YTEMP,y
      009F05 1D 00 06         [ 2]  713 	subw x,#3*CELLL 
      009F08 EF 02            [ 2]  714 	ldw (2,x),y 
      009F0A 90 5F            [ 1]  715 	clrw y
      009F0C FF               [ 2]  716 	ldw (x),y 
      009F0D A6 82            [ 1]  717 	ld a,#0x82 
      009F0F 90 95            [ 1]  718 	ld yh,a
      009F11 EF 04            [ 2]  719 	ldw (4,x),y
      009F13 CD 9D 48         [ 4]  720 	call EESTORE
      009F16 1D 00 06         [ 2]  721 	subw x,#3*CELLL
      009F19 90 5F            [ 1]  722 	clrw y 
      009F1B FF               [ 2]  723 	ldw (x),y 
      009F1C 90 AE 80 80      [ 2]  724 	ldw y,#NonHandledInterrupt
      009F20 EF 04            [ 2]  725 	ldw (4,x),y 
      009F22 90 BE 24         [ 2]  726 	ldw y,YTEMP  
      009F25 72 A9 00 02      [ 2]  727 	addw y,#2
      009F29 EF 02            [ 2]  728 	ldw (2,x),y 
      009F2B CD 9D 48         [ 4]  729 	call EESTORE
      009F2E 81               [ 4]  730 9$:	ret 
                                    731 
                                    732 
                                    733 ;------------------------------
                                    734 ; all interrupt vector with 
                                    735 ; an address >= a are resetted 
                                    736 ; to default
                                    737 ; CHKIVEC ( a -- )
                                    738 ;------------------------------
      009F2F 9E DE                  739 	.word LINK 
                           001EB1   740 	LINK=.
      009F31 07                     741 	.byte 7
      009F32 43 48 4B 49 56 45 43   742 	.ascii "CHKIVEC"
                                    743 ;local variables 
                           000001   744 	SSP=1
                           000003   745 	CADR=3
                           000005   746 	OFS=5
                           000006   747 	VSIZE=6  
      009F39                        748 CHKIVEC:
      009F39 52 06            [ 2]  749 	sub sp,#VSIZE ;alloc local variables 
      009F3B 90 93            [ 1]  750 	ldw y,x 
      009F3D 90 FE            [ 2]  751 	ldw y,(y)
      009F3F 17 03            [ 2]  752 	ldw (CADR,sp),y ; ca 
      009F41 1F 01            [ 2]  753 	ldw (SSP,sp),x 
      009F43 AE 80 0A         [ 2]  754 	ldw x,#0x800a ; irq0 address 
      009F46 BF 33            [ 2]  755 	ldw PTR16,X
      009F48 AE FF FC         [ 2]  756 	ldw x,#-4 
      009F4B 1C 00 04         [ 2]  757 1$:	addw x,#4
      009F4E A3 00 78         [ 2]  758 	cpw x,#30*4 ; irq0-29 
      009F51 27 22            [ 1]  759 	jreq 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      009F53 90 93            [ 1]  760 	ldw y,x  
      009F55 91 D6 33         [ 4]  761 	ld a,([PTR16],y)
      009F58 11 03            [ 1]  762 	cp a,(CADR,sp)
      009F5A 25 EF            [ 1]  763 	jrult 1$
      009F5C 90 5C            [ 1]  764 	incw y 
      009F5E 91 D6 33         [ 4]  765 	ld a,([PTR16],y)
      009F61 11 04            [ 1]  766 	cp a,(CADR+1,sp) 
      009F63 25 E6            [ 1]  767 	jrult 1$ 
      009F65 1F 05            [ 2]  768 	ldw (OFS,sp),x 
      009F67 54               [ 2]  769 	srlw x
      009F68 54               [ 2]  770 	srlw x 
      009F69 90 93            [ 1]  771 	ldw y,x 
      009F6B 1E 01            [ 2]  772 	ldw x,(SSP,sp)
      009F6D FF               [ 2]  773 	ldw (x),y
      009F6E CD 9E E7         [ 4]  774 	call reset_vector
      009F71 1E 05            [ 2]  775 	ldw x,(OFS,sp) 
      009F73 20 D6            [ 2]  776 	jra 1$
      009F75 1E 01            [ 2]  777 9$:	ldw x,(SSP,sp) 
      009F77 1C 00 02         [ 2]  778 	addw x,#CELLL 
      009F7A 5B 06            [ 2]  779 	addw sp,#VSIZE ; drop local variables  
      009F7C 81               [ 4]  780 	ret 
                                    781 
                                    782 ;------------------------------
                                    783 ; set interrupt vector 
                                    784 ; SET-IVEC ( ud n -- )
                                    785 ;  ud Handler address
                                    786 ;  n  vector # 0 .. 29 
                                    787 ;-----------------------------
      009F7D 9F 31                  788 	.word LINK
                           001EFF   789 	LINK=.
      009F7F 08                     790 	.byte 8 
      009F80 53 45 54 2D 49 56 45   791 	.ascii "SET-IVEC" 
             43
      009F88                        792 set_vector:
      009F88 90 93            [ 1]  793     ldw y,x 
      009F8A 1C 00 02         [ 2]  794 	addw x,#CELLL 
      009F8D 90 FE            [ 2]  795 	ldw y,(y) ; vector #
      009F8F 90 A3 00 1D      [ 2]  796 	cpw y,#29 ; last vector
      009F93 23 04            [ 2]  797 	jrule 2$
      009F95 1C 00 04         [ 2]  798 	addw x,#2*CELLL 
      009F98 81               [ 4]  799 	ret
      009F99 90 58            [ 2]  800 2$:	sllw y 
      009F9B 90 58            [ 2]  801 	sllw y 
      009F9D 72 A9 80 08      [ 2]  802 	addw y,#0X8008 ; IRQ0 vector address 
      009FA1 90 BF 24         [ 2]  803 	ldw YTEMP,y ; vector address 
      009FA4 A6 82            [ 1]  804 	ld a,#0x82 
      009FA6 90 95            [ 1]  805 	ld yh,a 
      009FA8 E6 01            [ 1]  806 	ld a,(1,x) ; isr address bits 23..16 
      009FAA 90 97            [ 1]  807 	ld yl,a 
                                    808 ;  write 0x82 + most significant byte of int address	
      009FAC 1D 00 06         [ 2]  809 	subw x,#3*CELLL 
      009FAF EF 04            [ 2]  810 	ldw (4,x),y 
      009FB1 90 BE 24         [ 2]  811 	ldw y,YTEMP
      009FB4 EF 02            [ 2]  812 	ldw (2,x),y ; vector address 
      009FB6 90 5F            [ 1]  813 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      009FB8 FF               [ 2]  814 	ldw (x),y   ; as a double 
      009FB9 CD 9D 48         [ 4]  815 	call EESTORE 
      009FBC 90 93            [ 1]  816 	ldw y,x 
      009FBE 90 EE 02         [ 2]  817 	ldw y,(2,y) ; bits 15..0 int vector 
      009FC1 1D 00 06         [ 2]  818 	subw x,#3*CELLL 
      009FC4 EF 04            [ 2]  819 	ldw (4,x),y 
      009FC6 90 BE 24         [ 2]  820 	ldw y,YTEMP 
      009FC9 72 A9 00 02      [ 2]  821 	addw y,#2 
      009FCD EF 02            [ 2]  822 	ldw (2,x),y 
      009FCF 90 5F            [ 1]  823 	clrw y 
      009FD1 FF               [ 2]  824 	ldw (x),y 
      009FD2 CD 9D 48         [ 4]  825 	call EESTORE
      009FD5 1C 00 04         [ 2]  826 	addw x,#2*CELLL  
      009FD8 81               [ 4]  827 9$: ret 
                                    828 
                                    829 
                                    830 ;------------------------
                                    831 ; Compile word to flash
                                    832 ; EE, (w -- )
                                    833 ;-----------------------
      009FD9 9F 7F                  834 	.word LINK
                           001F5B   835 	LINK=.
      009FDB 03                     836 	.byte 3
      009FDC 45 45 2C               837 	.ascii "EE,"
      009FDF                        838 EE_COMMA:
      009FDF 1D 00 04         [ 2]  839 	subw x,#2*CELLL 
      009FE2 90 BE 18         [ 2]  840 	ldw y,UCP
      009FE5 90 89            [ 2]  841 	pushw y 
      009FE7 EF 02            [ 2]  842 	ldw (2,x),y 
      009FE9 90 5F            [ 1]  843 	clrw y 
      009FEB FF               [ 2]  844 	ldw (x),y
      009FEC CD 9D 48         [ 4]  845 	call EESTORE
      009FEF 90 85            [ 2]  846 	popw y 
      009FF1 72 A9 00 02      [ 2]  847 	addw y,#2
      009FF5 90 BF 18         [ 2]  848 	ldw UCP,y
      009FF8 81               [ 4]  849 	ret 
                                    850 
                                    851 
                                    852 ;-------------------------
                                    853 ; Compile byte to flash 
                                    854 ; EEC, ( c -- )	
                                    855 ;-------------------------
      009FF9 9F DB                  856 	.word LINK 
                           001F7B   857 	LINK=.
      009FFB 04                     858 	.byte 4 
      009FFC 45 45 43 2C            859 	.ascii "EEC,"
      00A000                        860 EE_CCOMMA:
      00A000 1D 00 04         [ 2]  861 	subw x,#2*CELLL 
      00A003 90 BE 18         [ 2]  862 	ldw y,UCP
      00A006 90 89            [ 2]  863 	pushw y 
      00A008 EF 02            [ 2]  864 	ldw (2,x),y 
      00A00A 90 5F            [ 1]  865 	clrw y 
      00A00C FF               [ 2]  866 	ldw (x),y
      00A00D CD 9C FC         [ 4]  867 	call EECSTORE
      00A010 90 85            [ 2]  868 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      00A012 90 5C            [ 1]  869 	incw y 
      00A014 90 BF 18         [ 2]  870 	ldw UCP,y
      00A017 81               [ 4]  871 	ret 
                                    872 
                                    873 
                                    874 ;--------------------------
                                    875 ; copy FLASH block to ROWBUF
                                    876 ; ROW>BUF ( ud -- )
                                    877 ;--------------------------
      00A018 9F FB                  878 	.word LINK 
                           001F9A   879 	LINK=.
      00A01A 07                     880 	.byte 7 
      00A01B 52 4F 57 3E 42 55 46   881 	.ascii "ROW>BUF"
      00A022                        882 ROW2BUF: 
      00A022 CD 9A E1         [ 4]  883 	call FPSTOR 
      00A025 A6 80            [ 1]  884 	ld a,#BLOCK_SIZE
      00A027 88               [ 1]  885 	push a 
      00A028 B4 34            [ 1]  886 	and a,PTR8 ; block align 
      00A02A B7 34            [ 1]  887 	ld PTR8,a
      00A02C 90 AE 06 80      [ 2]  888 	ldw y,#ROWBUFF 
      00A030 92 BC 00 32      [ 5]  889 1$: ldf a,[FPTR]
      00A034 90 F7            [ 1]  890 	ld (y),a
      00A036 CD 9C 44         [ 4]  891 	call INC_FPTR
      00A039 90 5C            [ 1]  892 	incw y 
      00A03B 0A 01            [ 1]  893 	dec (1,sp)
      00A03D 26 F1            [ 1]  894 	jrne 1$ 
      00A03F 84               [ 1]  895 	pop a 
      00A040 81               [ 4]  896 	ret 
                                    897 
                                    898 
                                    899 ;---------------------------
                                    900 ; copy ROWBUFF to flash 
                                    901 ; BUF>ROW ( ud -- )
                                    902 ; ud is row address as double 
                                    903 ;---------------------------
      00A041 A0 1A                  904 	.word LINK 
                           001FC3   905 	LINK=.
      00A043 07                     906 	.byte 7 
      00A044 42 55 46 3E 52 4F 57   907 	.ascii "BUF>ROW" 
      00A04B                        908 BUF2ROW:
      00A04B CD 86 54         [ 4]  909 	call TBUF ; ( ud rb -- )
      00A04E CD 87 14         [ 4]  910 	call ROT 
      00A051 CD 87 14         [ 4]  911 	call ROT  ; ( rb ud -- )
      00A054 CD 9E 2A         [ 4]  912 	call write_row 
      00A057 81               [ 4]  913 	ret 
                                    914 
                                    915 ;---------------------------------
                                    916 ; how many byte free in that row 
                                    917 ; RFREE ( a -- n )
                                    918 ; a is least byte of target address
                                    919 ;----------------------------------
      00A058 A0 43                  920 	.word LINK 
                           001FDA   921 	LINK=.
      00A05A 05                     922 	.byte 5 
      00A05B 52 46 52 45 45         923 	.ascii "RFREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      00A060                        924 RFREE:
      00A060 E6 01            [ 1]  925 	ld a,(1,x)
      00A062 A4 7F            [ 1]  926 	and a,#BLOCK_SIZE-1 
      00A064 B7 24            [ 1]  927 	ld YTEMP,a 
      00A066 A6 80            [ 1]  928 	ld a,#BLOCK_SIZE 
      00A068 B0 24            [ 1]  929 	sub a,YTEMP 
      00A06A 90 5F            [ 1]  930 	clrw y 
      00A06C 90 97            [ 1]  931 	ld yl,a
      00A06E FF               [ 2]  932 	ldw (x),y 
      00A06F 81               [ 4]  933 	ret 
                                    934 
                                    935 ;---------------------------------
                                    936 ; write u bytes to flash/EEPROM 
                                    937 ; constraint to row limit 
                                    938 ; RAM>EE ( ud a u -- u2 )
                                    939 ; ud flash address 
                                    940 ; a ram address 
                                    941 ; u bytes count
                                    942 ; return u2 bytes written  
                                    943 ;-------------------------------
      00A070 A0 5A                  944 	.word LINK 
                           001FF2   945 	LINK=. 
      00A072 06                     946 	.byte 6
      00A073 52 41 4D 3E 45 45      947 	.ascii "RAM>EE"
                                    948 	
      00A079                        949 RAM2EE:
                                    950 ; copy ud on top 
      00A079 90 93            [ 1]  951 	ldw y,x 
      00A07B 90 EE 06         [ 2]  952 	ldw y,(6,y) ; LSW of ud  
      00A07E 90 BF 24         [ 2]  953 	ldw YTEMP,y 
      00A081 90 93            [ 1]  954 	ldw y,x 
      00A083 90 EE 04         [ 2]  955 	ldw y,(4,y)  ; MSW of ud 
      00A086 1D 00 04         [ 2]  956 	subw x,#2*CELLL 
      00A089 FF               [ 2]  957 	ldw (x),y 
      00A08A 90 BE 24         [ 2]  958 	ldw y,YTEMP 
      00A08D EF 02            [ 2]  959 	ldw (2,x),y 
      00A08F CD A0 22         [ 4]  960 	call ROW2BUF 
      00A092 90 93            [ 1]  961 	ldw y,x 
      00A094 90 EE 06         [ 2]  962 	ldw y,(6,y)
      00A097 90 89            [ 2]  963 	pushw y ; udl 
      00A099 90 9F            [ 1]  964 	ld a,yl
      00A09B A4 7F            [ 1]  965 	and a,#BLOCK_SIZE-1 
      00A09D 90 5F            [ 1]  966 	clrw y 
      00A09F 90 97            [ 1]  967 	ld yl,a 
      00A0A1 72 A9 06 80      [ 2]  968 	addw y,#ROWBUFF 
      00A0A5 1D 00 02         [ 2]  969 	subw x,#CELLL 
      00A0A8 FF               [ 2]  970 	ldw (x),y  
      00A0A9 CD 85 69         [ 4]  971 	call SWAPP ;  ( ud a ra u -- )
      00A0AC CD 85 03         [ 4]  972 	call RFROM  
      00A0AF CD A0 60         [ 4]  973 	call RFREE 
      00A0B2 CD 88 6F         [ 4]  974 	call MIN
      00A0B5 CD 85 59         [ 4]  975 	call DUPP 
      00A0B8 CD 85 22         [ 4]  976 	call TOR  
      00A0BB CD 8B F5         [ 4]  977 	call CMOVE
      00A0BE CD A0 4B         [ 4]  978 	call BUF2ROW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      00A0C1 CD 85 03         [ 4]  979 	call RFROM 
      00A0C4 81               [ 4]  980 	ret 
                                    981 
                                    982 
                                    983 ;--------------------------
                                    984 ; expand 16 bit address 
                                    985 ; to 32 bit address 
                                    986 ; FADDR ( a -- ud )
                                    987 ;--------------------------
      00A0C5 A0 72                  988 	.word LINK 
                           002047   989 	LINK=. 
      00A0C7 05                     990 	.byte 5 
      00A0C8 46 41 44 44 52         991 	.ascii "FADDR"
      00A0CD                        992 FADDR:
      00A0CD CC 8A BA         [ 2]  993 	jp ZERO 
                                    994 
                                    995 
                                    996 ;--------------------------
                                    997 ; move new colon definition to FLASH 
                                    998 ; using WR-ROW for efficiency 
                                    999 ; preserving bytes already used 
                                   1000 ; in the current block. 
                                   1001 ; At this point the compiler as completed
                                   1002 ; in RAM and pointers CP and CNTXT updated.
                                   1003 ; CNTXT point to nfa of new word and  
                                   1004 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1005 ; 
                                   1006 ; FMOVE ( -- cp+ )
                                   1007 ; 
                                   1008 ;--------------------------
      00A0D0 A0 C7                 1009 	.word LINK 
                           002052  1010 	LINK=.
      00A0D2 05                    1011 	.byte 5 
      00A0D3 46 4D 4F 56 45        1012 	.ascii "FMOVE" 
      00A0D8                       1013 FMOVE:
      00A0D8 CD 86 66         [ 4] 1014 	call TFLASH 
      00A0DB CD 84 B2         [ 4] 1015 	CALL AT 
      00A0DE CD 84 67         [ 4] 1016 	CALL QBRAN 
      00A0E1 A1 5C                 1017 	.word no_move  
      00A0E3 CD 86 B5         [ 4] 1018 	call CPP
      00A0E6 CD 84 B2         [ 4] 1019 	call AT  
      00A0E9 CD 85 59         [ 4] 1020 	call DUPP ; ( udl udl -- )
      00A0EC CD 86 99         [ 4] 1021 	call CNTXT 
      00A0EF CD 84 B2         [ 4] 1022 	call AT 
      00A0F2 CD 84 34         [ 4] 1023 	call DOLIT 
      00A0F5 00 02                 1024 	.word 2 
      00A0F7 CD 87 CD         [ 4] 1025 	call SUBB ; ( udl udl a -- )
      00A0FA CD 85 69         [ 4] 1026 	call SWAPP 
      00A0FD CD A0 CD         [ 4] 1027 	call FADDR 
      00A100 CD 87 14         [ 4] 1028 	call ROT  ; ( udl ud a -- )
      00A103 CD 85 59         [ 4] 1029 	call DUPP 
      00A106 CD 85 22         [ 4] 1030 	call TOR    ; R: a 
      00A109                       1031 FMOVE2: 
      00A109 CD 8B A8         [ 4] 1032 	call HERE 
      00A10C CD 85 16         [ 4] 1033 	call RAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      00A10F CD 87 CD         [ 4] 1034 	call SUBB ; (udl ud a wl -- )
      00A112                       1035 next_row:
      00A112 CD 85 59         [ 4] 1036 	call DUPP 
      00A115 CD 85 22         [ 4] 1037 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00A118 CD A0 79         [ 4] 1038 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00A11B CD 85 59         [ 4] 1039 	call DUPP 
      00A11E CD 85 22         [ 4] 1040 	call TOR
      00A121 CD 87 54         [ 4] 1041 	call PLUS  ; ( udl+ ) 
      00A124 CD 85 59         [ 4] 1042 	call DUPP 
      00A127 CD 8A BA         [ 4] 1043 	call ZERO   ; ( udl+ ud -- )
      00A12A CD 85 03         [ 4] 1044 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00A12D CD 85 03         [ 4] 1045 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00A130 CD 85 83         [ 4] 1046 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      00A133 CD 87 CD         [ 4] 1047 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      00A136 CD 85 59         [ 4] 1048 	call DUPP 
      00A139 CD 84 67         [ 4] 1049 	call QBRAN
      00A13C A1 55                 1050 	.word fmove_done 
      00A13E CD 85 69         [ 4] 1051 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      00A141 CD 85 03         [ 4] 1052 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      00A144 CD 87 54         [ 4] 1053 	call PLUS  ; ( udl+2 ud wl- a+ )
      00A147 CD 85 59         [ 4] 1054 	call DUPP 
      00A14A CD 85 22         [ 4] 1055 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      00A14D CD 85 69         [ 4] 1056 	call SWAPP 
      00A150 CD 84 7E         [ 4] 1057 	call BRAN
      00A153 A1 12                 1058 	.word next_row  
      00A155                       1059 fmove_done:	
      00A155 CD 85 03         [ 4] 1060 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      00A158 1C 00 0A         [ 2] 1061 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00A15B 81               [ 4] 1062  	ret  
      00A15C                       1063 no_move:
      00A15C CD 8A BA         [ 4] 1064 	call ZERO
      00A15F 81               [ 4] 1065 	ret 
                                   1066 
                                   1067 ;------------------------------------------
                                   1068 ; adjust pointers after **FMOVE** operetion.
                                   1069 ; UPDAT-PTR ( cp+ -- )
                                   1070 ; cp+ is new CP position after FMOVE 
                                   1071 ;-------------------------------------------
      00A160 A0 D2                 1072 	.word LINK 
                           0020E2  1073 	LINK=.
      00A162 09                    1074 	.byte 9
      00A163 55 50 44 41 54 2D 50  1075 	.ascii "UPDAT-PTR" 
             54 52
      00A16C                       1076 UPDATPTR:
                                   1077 ;reset VP to previous position  
      00A16C CD 9B 5B         [ 4] 1078 	call EEPVP 
      00A16F CD 85 4F         [ 4] 1079 	call DROP 
      00A172 CD 84 B2         [ 4] 1080 	call AT
      00A175 CD 86 A7         [ 4] 1081 	call VPP 
      00A178 CD 84 9B         [ 4] 1082 	call STORE
                                   1083 ;update CONTEXT and LAST 
      00A17B CD 9B 45         [ 4] 1084 	call EEPCP 
      00A17E CD 85 4F         [ 4] 1085 	call DROP
      00A181 CD 84 B2         [ 4] 1086 	call AT
      00A184 CD 84 34         [ 4] 1087 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      00A187 00 02                 1088 	.word 2 
      00A189 CD 87 54         [ 4] 1089 	call PLUS 
      00A18C CD 85 59         [ 4] 1090 	call DUPP 
      00A18F CD 86 99         [ 4] 1091 	call CNTXT 
      00A192 CD 84 9B         [ 4] 1092 	call STORE
      00A195 CD 86 C5         [ 4] 1093 	call LAST
      00A198 CD 84 9B         [ 4] 1094 	call STORE 
      00A19B CD 9B 75         [ 4] 1095 	call UPDATLAST 
                                   1096 ;update CP 
      00A19E CD 86 B5         [ 4] 1097 	call CPP 
      00A1A1 CD 84 9B         [ 4] 1098 	call STORE
      00A1A4 CD 9B 9E         [ 4] 1099 	call UPDATCP 
      00A1A7 81               [ 4] 1100 	ret 
                                   1101 
                                   1102 ;-----------------------------
                                   1103 ; move interrupt sub-routine
                                   1104 ; in flash memory
                                   1105 ;----------------------------- 
      00A1A8 A1 62                 1106 	.word LINK 
                           00212A  1107 	LINK=. 
      00A1AA 06                    1108 	.byte 6
      00A1AB 49 46 4D 4F 56 45     1109 	.ascii "IFMOVE" 
      00A1B1                       1110 IFMOVE:
      00A1B1 CD 86 66         [ 4] 1111 	call TFLASH 
      00A1B4 CD 84 B2         [ 4] 1112 	CALL AT 
      00A1B7 CD 84 67         [ 4] 1113 	CALL QBRAN 
      00A1BA A1 5C                 1114 	.word no_move 
      00A1BC CD 86 B5         [ 4] 1115 	call CPP 
      00A1BF CD 84 B2         [ 4] 1116 	call AT 
      00A1C2 CD 85 59         [ 4] 1117 	call DUPP ; ( udl udl -- )
      00A1C5 CD 9B 5B         [ 4] 1118 	call EEPVP 
      00A1C8 CD 85 4F         [ 4] 1119 	call DROP
      00A1CB CD 84 B2         [ 4] 1120 	call AT  ; ( udl udl a )
      00A1CE CD 85 22         [ 4] 1121 	call TOR 
      00A1D1 CD A0 CD         [ 4] 1122 	call FADDR
      00A1D4 CD 85 16         [ 4] 1123 	call RAT ; ( udl ud a -- ) R: a 
      00A1D7 CC A1 09         [ 2] 1124 	jp FMOVE2 
                                   1125 
                                   1126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           000001  4518 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4519         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      00A1DA A1 AA                   31         .word LINK 
                           00215C    32         LINK=.
      00A1DC 02                      33         .byte 2
      00A1DD 50 49                   34         .ascii "PI" 
      00A1DF                         35 PII:
      00A1DF 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      00A1E2 90 AE 01 63      [ 2]   37         ldw y,#355 
      00A1E6 EF 02            [ 2]   38         ldw (2,x),y 
      00A1E8 90 AE 00 71      [ 2]   39         ldw y,#113 
      00A1EC FF               [ 2]   40         ldw (x),y 
      00A1ED 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      00A1EE A1 DC                   48         .word LINK 
                           002170    49         LINK=.
      00A1F0 05                      50         .byte 5 
      00A1F1 53 51 52 54 32          51         .ascii "SQRT2" 
      00A1F6                         52 SQRT2:
      00A1F6 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      00A1F9 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00A1FD EF 02            [ 2]   55         ldw (2,x),y 
      00A1FF 90 AE 36 24      [ 2]   56         ldw y,#13860 
      00A203 FF               [ 2]   57         ldw (x),y 
      00A204 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      00A205 A1 F0                   63         .word LINK 
                           002187    64         LINK=.
      00A207 05                      65         .byte 5
      00A208 53 51 52 54 33          66         .ascii "SQRT3" 
      00A20D                         67 SQRT3: 
      00A20D 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      00A210 90 AE 49 81      [ 2]   69     ldw y,#18817 
      00A214 EF 02            [ 2]   70     ldw (2,x),y 
      00A216 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00A21A FF               [ 2]   72     ldw (x),y 
      00A21B 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00A21C A2 07                   78         .word LINK 
                           00219E    79         LINK=.
      00A21E 01                      80         .byte 1
      00A21F 45                      81         .ascii "E" 
      00A220                         82 ENEPER:
      00A220 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      00A223 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      00A227 EF 02            [ 2]   85     ldw (2,x),y 
      00A229 90 AE 29 32      [ 2]   86     ldw y,#10546 
      00A22D FF               [ 2]   87     ldw (x),y 
      00A22E 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      00A22F A2 1E                   92         .word LINK 
                           0021B1    93         LINK=.
      00A231 06                      94         .byte 6 
      00A232 53 51 52 54 31 30       95         .ascii "SQRT10" 
      00A238                         96 SQRT10:
      00A238 1D 00 04         [ 2]   97     subw x,#2*CELLL
      00A23B 90 AE 59 98      [ 2]   98     ldw y,#22936 
      00A23F EF 02            [ 2]   99     ldw (2,x),y 
      00A241 90 AE 1C 55      [ 2]  100     ldw y,#7253
      00A245 FF               [ 2]  101     ldw (x),y 
      00A246 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      00A247 A2 31                  107         .word LINK 
                           0021C9   108         LINK=. 
      00A249 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00A24A 31 32 52 54 32         110         .ascii "12RT2"
      00A24F                        111 RT12_2:
      00A24F 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      00A252 90 AE 68 AD      [ 2]  113     ldw y,#26797
      00A256 EF 02            [ 2]  114     ldw (2,x),y 
      00A258 90 AE 62 CD      [ 2]  115     ldw y,#25293
      00A25C FF               [ 2]  116     ldw (x),y 
      00A25D 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      00A25E A2 49                  122         .word LINK 
                           0021E0   123         LINK=.
      00A260 05                     124         .byte 5 
      00A261 4C 4F 47 32 53         125         .ascii "LOG2S" 
      00A266                        126 LOG2S:
      00A266 1D 00 04         [ 2]  127     subw x,#2*CELLL
      00A269 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      00A26D EF 02            [ 2]  129     ldw (2,x),y 
      00A26F 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      00A273 FF               [ 2]  131     ldw (x),y 
      00A274 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      00A275 A2 60                  137         .word LINK 
                           0021F7   138         LINK=.
      00A277 04                     139         .byte 4 
      00A278 4C 4E 32 53            140         .ascii "LN2S" 
      00A27C                        141 LN2S: 
      00A27C 1D 00 04         [ 2]  142     subw x,#2*CELLL
      00A27F 90 AE 01 E5      [ 2]  143     ldw y,#485
      00A283 EF 02            [ 2]  144     ldw (2,x),y 
      00A285 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      00A289 FF               [ 2]  146     ldw (x),y 
      00A28A 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4520 .endif
                           000001  4521 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4522         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      00A28B A2 77                   32     .word LINK 
                           00220D    33     LINK=.
      00A28D 06                      34     .byte 6
      00A28E 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      00A294                         36 CALLOT:
      00A294 CD 86 B5         [ 4]   37     CALL CPP
      00A297 CD 85 59         [ 4]   38     CALL DUPP 
      00A29A CD 84 B2         [ 4]   39     CALL AT 
      00A29D CD 85 22         [ 4]   40     CALL TOR 
      00A2A0 CD 8B 2A         [ 4]   41     CALL PSTOR 
      00A2A3 CD 9B 9E         [ 4]   42     CALL UPDATCP 
      00A2A6 CD 85 03         [ 4]   43     CALL RFROM
      00A2A9 CC 8A BA         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      00A2AC A2 8D                   52     .word LINK 
                           00222E    53     LINK=.
      00A2AE 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00A2AF 43 54 41 42 4C 45       55     .ascii "CTABLE"
      00A2B5                         56 CTABLE:
      00A2B5 CD A2 94         [ 4]   57     CALL CALLOT     
      00A2B8 CC 98 96         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      00A2BB A2 AE                   67     .word LINK 
                           00223D    68     LINK=.
      00A2BD 06                      69     .byte 6
      00A2BE 57 54 41 42 4C 45       70     .ascii "WTABLE"
      00A2C4                         71 WTABLE:
      00A2C4 CD 8A 41         [ 4]   72     CALL CELLS  
      00A2C7 CD A2 94         [ 4]   73     CALL CALLOT 
      00A2CA CC 98 96         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      00A2CD A2 BD                   82     .word LINK 
                           00224F    83     LINK=.
      00A2CF 06                      84     .byte 6
      00A2D0 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      00A2D6                         86 CTAT:
      00A2D6 CD 9A E1         [ 4]   87     call FPSTOR 
      00A2D9 CD 9C 5C         [ 4]   88     call PTRPLUS 
      00A2DC CC 9C 99         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00A2DF A2 CF                   97     .word LINK 
                           002261    98     LINK=.
      00A2E1 06                      99     .byte 6
      00A2E2 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      00A2E8                        101 WTAT:
      00A2E8 CD 9A E1         [ 4]  102     call FPSTOR 
      00A2EB CD 8A 41         [ 4]  103     call CELLS 
      00A2EE CD 9C 5C         [ 4]  104     call PTRPLUS 
      00A2F1 CD 9C 77         [ 4]  105     call EE_READ 
      00A2F4 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      00A2F5 A2 E1                  113     .word LINK 
                           002277   114     LINK=.
      00A2F7 06                     115     .byte 6 
      00A2F8 43 54 49 4E 49 54      116     .ascii "CTINIT"
      00A2FE                        117 CTINIT:
      00A2FE CD 9A E1         [ 4]  118     CALL FPSTOR
      00A301 CD 9C 08         [ 4]  119     CALL UNLOCK
      00A304 CD 8A BA         [ 4]  120     CALL ZERO 
      00A307 CD 8A 4E         [ 4]  121 1$: CALL ONEP 
      00A30A CD 85 59         [ 4]  122     CALL DUPP 
      00A30D CD A3 5A         [ 4]  123     CALL INTQ 
      00A310 CD 84 67         [ 4]  124     CALL QBRAN 
      00A313 A3 1D                  125     .word 2$
      00A315 CD 9C B3         [ 4]  126     call WR_BYTE 
      00A318 CD 84 7E         [ 4]  127     CALL BRAN 
      00A31B A3 07                  128     .word 1$ 
      00A31D CD 87 34         [ 4]  129 2$: CALL DDROP 
      00A320 CD 9C 30         [ 4]  130     CALL LOCK 
      00A323 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      00A324 A2 F7                  138     .word LINK 
                           0022A6   139     LINK=.
      00A326 06                     140     .byte 6 
      00A327 57 54 49 4E 49 54      141     .ascii "WTINIT"
      00A32D                        142 WTINIT:
      00A32D CD 9A E1         [ 4]  143     CALL FPSTOR
      00A330 CD 9C 08         [ 4]  144     CALL UNLOCK
      00A333 CD 8A BA         [ 4]  145     CALL ZERO 
      00A336 CD 8A 4E         [ 4]  146 1$: CALL ONEP 
      00A339 CD 85 59         [ 4]  147     CALL DUPP
      00A33C CD A3 5A         [ 4]  148     CALL INTQ
      00A33F CD 84 67         [ 4]  149     CALL QBRAN 
      00A342 A3 4C                  150     .word 2$
      00A344 CD 9C D2         [ 4]  151     call WR_WORD 
      00A347 CD 84 7E         [ 4]  152     CALL BRAN 
      00A34A A3 36                  153     .word 1$ 
      00A34C CD 87 34         [ 4]  154 2$: CALL DDROP 
      00A34F CD 9C 30         [ 4]  155     CALL LOCK 
      00A352 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      00A353 A3 26                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           0022D5   165     LINK=.
      00A355 04                     166     .byte 4
      00A356 5B 4E 5D 3F            167     .ascii "[N]?" 
      00A35A                        168 INTQ:
      00A35A CD 8F 20         [ 4]  169     CALL CR 
      00A35D CD 84 34         [ 4]  170     call DOLIT 
      00A360 00 5B                  171     .word '[
      00A362 CD 84 1E         [ 4]  172     CALL EMIT 
      00A365 CD 8F BB         [ 4]  173     CALL DOT 
      00A368 CD 8F 5F         [ 4]  174     CALL  DOTQP
      00A36B 03                     175     .byte 3
      00A36C 5D 3F 20               176     .ascii "]? " 
      00A36F CD 93 07         [ 4]  177     CALL QUERY 
      00A372 CD 91 32         [ 4]  178     call TOKEN 
      00A375 CC 8D CD         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4523 .endif
                                   4524 
                                   4525 ;===============================================================
                                   4526 
                           0022D5  4527 LASTN =	LINK   ;last name defined
                                   4528 
                                   4529 ; application code begin here
      00A380                       4530 	.bndry 128 ; align on flash block  
      00A380                       4531 app_space: 
                                   4532 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000770 R   |   6 ABOR1      0012C3 R
  6 ABOR2      0012DA R   |   6 ABORQ      0012BB R   |   6 ABORT      0012AC R
  6 ABRTQ      001597 R   |   6 ABSS       000767 R   |   6 ACCEP      001242 R
  6 ACCP1      00124B R   |   6 ACCP2      001271 R   |   6 ACCP3      001274 R
  6 ACCP4      001276 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     000673 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001582 R   |   6 AGAIN      0014D8 R
  6 AHEAD      001535 R   |   6 ALLOT      0013EB R   |   6 ANDD       000525 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         000432 R   |   6 ATEXE      000B5E R
  6 AUTORUN    000127 R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |     B19200  =  000003 
    B230400 =  000007     |     B2400   =  000000     |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |     B57600  =  000005 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      0011EA R
  6 BASE       000596 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      00142D R   |   6 BDIGS      000C45 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00500F 
  6 BEGIN      0014BA R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001082 R   |   6 BKSP       0011BA R   |     BKSPP   =  000008 
  6 BLANK      000A2D R   |     BLOCK_SI=  000080     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FCB R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CALLOT     002214 R
    CARRY   =  000028     |   6 CAT        000450 R   |   6 CCOMMA     00140F R
    CELLL   =  000002     |   6 CELLM      0009B2 R   |   6 CELLP      0009A3 R
  6 CELLS      0009C1 R   |     CFG_GCR =  007F60     |   6 CHAR1      000E72 R
  6 CHAR2      000E75 R   |   6 CHKIVEC    001EB9 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000B7D R   |   6 CMOV2      000B95 R   |   6 CMOVE      000B75 R
    CNTDWN  =  000030     |   6 CNTXT      000619 R   |   6 COLD       0019F2 R
  6 COLD1      0019F2 R   |   6 COLON      001730 R   |   6 COMMA      0013F8 R
  6 COMPI      00143D R   |     COMPO   =  000040     |   6 CONSTANT   0017DA R
  6 COUNT      000B11 R   |   6 CPP        000635 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000EA0 R   |   6 CREAT      001776 R
    CRR     =  00000D     |   6 CSTOR      00043F R   |   6 CTABLE     002235 R
  6 CTAT       002256 R   |   6 CTINIT     00227E R   |   6 DAT        000AF1 R
    DATSTK  =  000680     |   6 DCONST     001816 R   |   6 DDROP      0006B4 R
  6 DDUP       0006BF R   |   6 DECIM      000CF5 R   |   6 DEPTH      000A7C R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000D3A R
  6 DI         0000C2 R   |   6 DIG        000C6E R   |   6 DIGIT      000C09 R
  6 DIGS       000C7F R   |   6 DIGS1      000C7F R   |   6 DIGS2      000C8C R
  6 DIGTQ      000D09 R   |     DISCOVER=  000001     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00072E R   |   6 DNEGA      000711 R
  6 DOCONST    001804 R   |   6 DOLIT      0003B4 R   |   6 DONXT      0003C8 R
  6 DOSTR      000EB6 R   |   6 DOT        000F3B R   |   6 DOT1       000F51 R
  6 DOTI1      001972 R   |   6 DOTID      00195C R   |   6 DOTO1      00134F R
  6 DOTOK      001335 R   |   6 DOTPR      001064 R   |   6 DOTQ       0015B1 R
  6 DOTQP      000EDF R   |   6 DOTR       000EED R   |   6 DOTS       0018FE R
  6 DOTS1      001909 R   |   6 DOTS2      001912 R   |   6 DOVAR      000586 R
  6 DO_DCONS   001845 R   |   6 DROP       0004CF R   |   6 DSTOR      000ACB R
  6 DUMP       0018B4 R   |   6 DUMP1      0018CB R   |   6 DUMP3      0018ED R
  6 DUMPP      001883 R   |   6 DUPP       0004D9 R   |   6 EDIGS      000CAA R
  6 EECSTORE   001C7C R   |   6 EEPCP      001AC5 R   |   6 EEPLAST    001A98 R
  6 EEPROM     001A80 R   |     EEPROM_B=  004000     |     EEPROM_E=  0043FF 
    EEPROM_R=  000010     |     EEPROM_S=  000400     |   6 EEPRUN     001AAF R
  6 EEPVP      001ADB R   |   6 EESTORE    001CC8 R   |   6 EE_CCOMM   001F80 R
  6 EE_COMMA   001F5F R   |   6 EE_CREAD   001C19 R   |   6 EE_READ    001BF7 R
  6 EI         0000BB R   |   6 ELSEE      001510 R   |   6 EMIT       00039E R
  6 ENEPER     0021A0 R   |   6 EQ1        00078B R   |   6 EQUAL      000775 R
  6 ERASE      000BD7 R   |     ERR     =  00001B     |   6 EVAL       001378 R
  6 EVAL1      001378 R   |   6 EVAL2      001394 R   |   6 EXE1       000B6C R
  6 EXECU      00040E R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C31 R   |   6 FADDR      00204D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    FHSE    =  F42400     |     FHSE_K  =  003E80     |     FHSE_M  =  000010 
  6 FILL       000BA4 R   |   6 FILL1      000BC1 R   |   6 FILL2      000BCA R
  6 FIND       001116 R   |   6 FIND1      001134 R   |   6 FIND2      001162 R
  6 FIND3      00116E R   |   6 FIND4      001182 R   |   6 FIND5      00118F R
  6 FIND6      001173 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |   6 FMOVE      002058 R   |   6 FMOVE2     002089 R
  6 FOR        00148D R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
  6 FPSTOR     001A61 R   |     FPTR    =  000032     |   6 FREEVAR    000223 R
  6 FREEVAR4   000259 R   |     GPIO_BAS=  005000     |     GPIO_SIZ=  000005 
  6 HERE       000B28 R   |   6 HEX        000CE0 R   |   6 HI         0019AE R
  6 HLD        000606 R   |   6 HOLD       000C55 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001741 R   |   6 IFETCH     0014AB R   |   6 IFF        0014E8 R
  6 IFMOVE     002131 R   |     IMEDD   =  000080     |   6 IMMED      001753 R
  6 INCH       000392 R   |   6 INC_FPTR   001BC4 R   |   6 INITOFS    001709 R
  6 INN        0005B4 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001317 R
  6 INTER      0012ED R   |   6 INTQ       0022DA R   |     INT_ADC1=  000016 
    INT_AWU =  000001     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_RES1=  000008     |     INT_RES2=  000009     |     INT_RES3=  000011 
    INT_RES4=  000012     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0006EE R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      00169E R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0016F3 R   |   6 KEY        000E20 R   |   6 KTAP       001207 R
  6 KTAP1      00122A R   |   6 KTAP2      00122D R   |   6 LAST       000645 R
  6 LASTN   =  0022D5 R   |   6 LBRAC      001324 R   |     LD1_BIT =  000000 
    LD1_MASK=  000001     |     LD1_PORT=  00500F     |   6 LESS       0007B2 R
    LF      =  00000A     |   6 LINK    =  0022D5 R   |   6 LITER      00145F R
  6 LN2S       0021FC R   |   6 LOCK       001BB0 R   |   6 LOG2S      0021E6 R
  6 LSHIFT     0009EC R   |   6 LSHIFT1    0009F5 R   |   6 LSHIFT4    0009FD R
  6 LT1        0007C8 R   |     MASKK   =  001F7F     |   6 MAX        0007D2 R
  6 MAX1       0007E5 R   |   6 MIN        0007EF R   |   6 MIN1       000802 R
    MISCOPT =  004805     |     MISCOPT_=  000004     |     MISCOPT_=  000002 
    MISCOPT_=  000003     |     MISCOPT_=  000000     |     MISCOPT_=  000001 
  6 MMOD1      0008A5 R   |   6 MMOD2      0008B9 R   |   6 MMOD3      0008D0 R
  6 MMSM1      00084C R   |   6 MMSM2      000860 R   |   6 MMSM3      000862 R
  6 MMSM4      00086A R   |   6 MODD       0008EA R   |   6 MONE       000A53 R
    MS      =  00002E     |   6 MSEC       0002CE R   |   6 MSMOD      000888 R
  6 MSTA1      00097B R   |   6 MSTAR      000958 R   |     NAFR    =  004804 
  6 NAMEQ      0011AF R   |   6 NAMET      0010C0 R   |     NCLKOPT =  004808 
  6 NEGAT      0006FF R   |   6 NEX1       0003D5 R   |   6 NEXT       00149C R
    NHSECNT =  00480A     |     NMISCOPT=  004806     |     NMISCOPT=  FFFFFFFB 
    NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC     |     NMISCOPT=  FFFFFFFF 
    NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPTBL  =  00487F     |   6 NTIB       0005C4 R   |     NUBC    =  004802 
    NUCLEO  =  000000     |   6 NUFQ       000E36 R   |   6 NUFQ1      000E4F R
  6 NUMBQ      000D4D R   |   6 NUMQ1      000D81 R   |   6 NUMQ2      000DB2 R
  6 NUMQ3      000DF4 R   |   6 NUMQ4      000DF9 R   |   6 NUMQ5      000E08 R
  6 NUMQ6      000E0B R   |   6 NonHandl   000000 R   |   6 OFFSET     00066A R
    OFS     =  000005     |   6 ONE        000A45 R   |   6 ONEM       0009DB R
  6 ONEP       0009CE R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |   6 ORIG       000047 R   |   6 ORR        000539 R
  6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000503 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  6 OVERT      00166C R   |     PA      =  000000     |   6 PACKS      000BE8 R
  6 PAD        000B39 R   |   6 PAREN      001073 R   |   6 PARS       000F6C R
  6 PARS1      000F97 R   |   6 PARS2      000FC2 R   |   6 PARS3      000FC5 R
  6 PARS4      000FCE R   |   6 PARS5      000FF1 R   |   6 PARS6      001006 R
  6 PARS7      001015 R   |   6 PARS8      001024 R   |   6 PARSE      001035 R
  6 PAUSE      0002DE R   |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001896 R   |   6 PDUM2      0018A7 R
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |   6 PICK       000A93 R
  6 PII        00215F R   |     PIN0    =  000000     |     PIN1    =  000001 
    PIN2    =  000002     |     PIN3    =  000003     |     PIN4    =  000004 
    PIN5    =  000005     |     PIN6    =  000006     |     PIN7    =  000007 
  6 PLUS       0006D4 R   |   6 PNAM1      001621 R   |   6 PRESE      0013A3 R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FF R   |   6 PSTOR      000AAA R   |     PTR16   =  000033 
    PTR8    =  000034     |   6 PTRPLUS    001BDC R   |   6 QBRAN      0003E7 R
  6 QDUP       000683 R   |   6 QDUP1      00068D R   |   6 QKEY       000380 R
  6 QSTAC      00135B R   |   6 QUERY      001287 R   |   6 QUEST      000F5E R
  6 QUIT       0013C0 R   |   6 QUIT1      0013C8 R   |   6 QUIT2      0013CB R
  6 RAM2EE     001FF9 R   |     RAMBASE =  000000     |   6 RAMLAST    000658 R
    RAM_BASE=  000000     |     RAM_END =  0007FF     |     RAM_SIZE=  000800 
  6 RANDOM     00027C R   |   6 RAT        000496 R   |   6 RBRAC      0016E0 R
  6 REPEA      001565 R   |   6 RFREE      001FE0 R   |   6 RFROM      000483 R
    ROP     =  004800     |   6 ROT        000694 R   |   6 ROW2BUF    001FA2 R
    ROWBUFF =  000680     |     RP0     =  00002C     |   6 RPAT       000460 R
    RPP     =  0007FF     |   6 RPSTO      00046D R   |   6 RSHIFT     000A08 R
  6 RSHIFT1    000A11 R   |   6 RSHIFT4    000A19 R   |     RST_SR  =  0050B3 
  6 RT12_2     0021CF R   |   6 SAME1      0010DE R   |   6 SAME2      001107 R
  6 SAMEQ      0010D6 R   |   6 SCOM1      001656 R   |   6 SCOM2      001659 R
  6 SCOMP      001638 R   |   6 SEED       000263 R   |     SEEDX   =  000036 
    SEEDY   =  000038     |   6 SEMIS      00167C R   |   6 SETISP     0000CE R
  6 SET_RAML   0017C3 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000C94 R   |   6 SIGN1      000CA4 R   |   6 SLASH      0008F4 R
  6 SLMOD      0008D8 R   |   6 SNAME      0015EB R   |     SP0     =  00002A 
  6 SPACE      000E58 R   |   6 SPACS      000E67 R   |   6 SPAT       0004B9 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  000680 
    SPSAVE  =  000001     |   6 SPSTO      0004C6 R   |   6 SQRT10     0021B8 R
  6 SQRT2      002176 R   |   6 SQRT3      00218D R   |   6 SSMOD      000984 R
    SSP     =  000001     |     STACK   =  0007FF     |   6 STAR       00094D R
  6 STASL      000995 R   |   6 STOD       000736 R   |   6 STORE      00041B R
  6 STR        000CC2 R   |   6 STRCQ      00146D R   |   6 STRQ       0015A4 R
  6 STRQP      000ED5 R   |   6 SUBB       00074D R   |   6 SWAPP      0004E9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    SWIM_CSR=  007F80     |   6 TAP        0011F1 R   |   6 TBOOT      0019E6 R
  6 TBUF       0005D4 R   |     TBUFFBAS=  000680     |   6 TCHAR      000A64 R
  6 TEMP       0005A5 R   |   6 TEVAL      0005F7 R   |   6 TFLASH     0005E6 R
  6 THENN      0014FD R   |   6 TIB        000B4A R   |     TIBB    =  000700 
    TIBBASE =  000700     |     TIC     =  000027     |   6 TICK       0013D7 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R   |   6 TIMER      0002F8 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      00192C R
  6 TNAM3      00194A R   |   6 TNAM4      001950 R   |   6 TNAME      001929 R
  6 TOFLASH    000333 R   |   6 TOKEN      0010B2 R   |   6 TOR        0004A2 R
  6 TORAM      000373 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000A20 R
  6 TYPE1      000E87 R   |   6 TYPE2      000E93 R   |   6 TYPES      000E82 R
  6 Timer4Ha   000005 R   |     UART2_BR=  005242     |     UART2_BR=  005243 
    UART2_CR=  005244     |     UART2_CR=  005245     |     UART2_CR=  005246 
    UART2_CR=  005247     |     UART2_CR=  005248     |     UART2_CR=  004249 
    UART2_DR=  005241     |     UART2_GT=  00524A     |     UART2_PO=  00500F 
    UART2_PS=  00524B     |     UART2_RX=  000006     |     UART2_SR=  005240 
    UART2_TX=  000005     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_DR =  005241     |     UART_SR =  005240     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000F28 R   |   6 UDOTR      000F08 R
  6 UEND       000045 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      0007AA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

  6 ULESS      000794 R   |   6 UMMOD      00082A R   |   6 UMSTA      000903 R
  6 UNIQ1      0015E2 R   |   6 UNIQU      0015C3 R   |   6 UNLKEE     001B4A R
  6 UNLKFL     001B69 R   |   6 UNLOCK     001B88 R   |   6 UNTIL      0014C5 R
    UOFFSET =  00001C     |   6 UPDATCP    001B1E R   |   6 UPDATLAS   001AF5 R
  6 UPDATPTR   0020EC R   |   6 UPDATRUN   001B0D R   |   6 UPDATVP    001B35 R
  6 UPL1       00057A R   |   6 UPLUS      000563 R   |     UPP     =  000006 
    URLAST  =  000020     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001866 R   |   6 UTYP2      001875 R
  6 UTYPE      001861 R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      001790 R   |     VAR_BASE=  000080     |     VAR_TOP =  0007BF 
    VER     =  000003     |   6 VPP        000627 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |   6 WHILE      00154B R   |   6 WITHI      00080F R
  6 WORDD      00109E R   |   6 WORDS      001986 R   |   6 WORS1      00198C R
  6 WORS2      0019A8 R   |   6 WR_BYTE    001C33 R   |   6 WR_WORD    001C52 R
  6 WTABLE     002244 R   |   6 WTAT       002268 R   |   6 WTINIT     0022AD R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     X4_FLASH=  00BFFF 
    X4_FLASH=  004000     |     X6_FLASH=  00FFFF     |     X6_FLASH=  008000 
    XMEM_SIZ=  000000     |   6 XORR       00054E R   |     XTEMP   =  000022 
    YTEMP   =  000024     |   6 ZERO       000A3A R   |   6 ZL1        00051B R
  6 ZLESS      000512 R   |   6 app_spac   002300 R   |   6 block_er   001D0F R
  6 clear_ra   000019 R   |   6 clock_in   000062 R   |   6 copy_buf   001D66 R
  6 copy_buf   001D85 R   |   6 copy_pro   001D85 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001D2B R   |   6 fmove_do   0020D5 R   |   6 main       000016 R
  6 next_row   002092 R   |   6 no_move    0020DC R   |   6 pristine   001E00 R
  6 proceed_   001D2E R   |   6 reboot     000325 R   |   6 reset_ve   001E67 R
  6 row_eras   001CF2 R   |   6 row_eras   001D3F R   |   6 row_eras   001D66 R
  6 set_opti   001DD4 R   |   6 set_vect   001F08 R   |   6 uart_ini   000074 R
  6 write_ro   001DAA R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2300   flags    0

