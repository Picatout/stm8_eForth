ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        	.include "inc/stm8s_disco.inc"
                                        
                                        XMEM_SIZE=0 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART2_SR
                                        UART_DR=UART2_DR
                                        
                                        .endif 
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
q                                    84         .setdp 0,DIRECT
                                     85         
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           000001    90 .if NUCLEO 
                           0017FF    91 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    92 DATSTK  =	0x1680	;data stack  empty
                           001680    93 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    94 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000000    95 .else ; DISCOVERY
                                     96 STACK   =	0x7FF 	;system (return) stack empty 
                                     97 DATSTK  =	0x680	;data stack  empty
                                     98 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                                     99 TIBBASE =       0X700  ; transaction input buffer addr.
                                    100 .endif
                                    101 
                                    102 ;; Memory allocation
                           000006   103 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   104 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   105 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   106 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   107 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   108 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   109 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    110 
                                    111 ; user variables constants 
                           000006   112 UBASE = UPP       ; numeric base 
                           000008   113 UTMP = UBASE+2    ; temporary storage
                           00000A   114 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   115 UCTIB = UINN+2    ; tib count 
                           00000E   116 UTIB = UCTIB+2    ; tib address 
                           000010   117 UINTER = UTIB+2   ; interpreter vector 
                           000012   118 UHLD = UINTER+2   ; hold 
                           000014   119 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   120 UVP = UCNTXT+2    ; variable pointer 
                           000018   121 UCP = UVP+2      ; code pointer
                           00001A   122 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   123 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           00001E   124 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   125 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    126 
                                    127 ;******  System Variables  ******
                           000022   128 XTEMP	=	URLAST +2;address called by CREATE
                           000024   129 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   130 PROD1 = XTEMP	;space for UM*
                           000024   131 PROD2 = PROD1+2
                           000026   132 PROD3 = PROD2+2
                           000028   133 CARRY = PROD3+2
                           00002A   134 SP0	= CARRY+2	;initial data stack pointer
                           00002C   135 RP0	= SP0+2		;initial return stack pointer
                           00002E   136 MS    =   RP0+2         ; millisecond counter 
                           000030   137 CNTDWN =  MS+2          ; count down timer 
                           000032   138 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   139 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   140 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   141 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   142 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    143 
                                    144 ; EEPROM persistant data  
                           004000   145 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   146 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   147 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   148 APP_VP = APP_CP+2  ; free data space pointer 
                                    149 
                                    150 
                                    151 ;***********************************************
                                    152 ;; Version control
                                    153 
                           000003   154 VER     =     3         ;major release version
                           000000   155 EXT     =     0         ;minor extension
                                    156 
                                    157 ;; Constants
                                    158 
                           00FFFF   159 TRUEE   =     0xFFFF      ;true flag
                                    160 
                           000040   161 COMPO   =     0x40     ;lexicon compile only bit
                           000080   162 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   163 MASKK   =     0x1F7F  ;lexicon bit mask
                                    164 
                           000002   165 CELLL   =     2       ;size of a cell
                           00000A   166 BASEE   =     10      ;default radix
                           000008   167 BKSPP   =     8       ;back space
                           00000A   168 LF      =     10      ;line feed
                           00000D   169 CRR     =     13      ;carriage return
                           00001B   170 ERR     =     27      ;error escape
                           000027   171 TIC     =     39      ;tick
                           0000CD   172 CALLL   =     0xCD     ;CALL opcodes
                           000080   173 IRET_CODE =   0x80    ; IRET opcode 
                                    174 
                                    175         .macro _ledon
                                    176         .if NUCLEO
                                    177         bset PC_ODR,#LED2_BIT
                                    178         .else ;DISCOVERY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         bres PD_ODR,#LD1_BIT 
                                    180         .endif
                                    181         .endm
                                    182 
                                    183         .macro _ledoff
                                    184         .if NUCLEO 
                                    185         bres PC_ODR,#LED2_BIT
                                    186         .else ;DISCOVERY 
                                    187         bset PD_ODR,#LD1_BIT 
                                    188         .endif
                                    189         .endm
                                    190 
                                    191 ;**********************************************************
                                    192         .area DATA (ABS)
      000000                        193         .org RAMBASE 
                                    194 ;**********************************************************
                                    195 
                                    196 ;**********************************************************
                                    197         .area SSEG (ABS) ; STACK
      001700                        198         .org 0x1700
      001700                        199         .ds 256 
                                    200 ; space for DATSTK,TIB and STACK         
                                    201 ;**********************************************************
                                    202 
                                    203 ;**********************************************************
                                    204         .area HOME ; vectors table
                                    205 ;**********************************************************
      000000 82 00 00 16            206 	int main	        ; reset
      000004 82 00 00 00            207 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            208 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            209 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            210 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            211 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            212 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            213 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            214 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            215 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            216 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            217 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            218 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            219 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            220 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            221 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            222 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            223 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            224 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            225 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            226 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            227 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            228 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            229 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            230 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            231 	int Timer4Handler	; irq23
      000068 82 00 00 00            232 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            233 	int NonHandledInterrupt	; irq25
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000070 82 00 00 00            234 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            235 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            236 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            237 	int NonHandledInterrupt	; irq29
                                    238 
                                    239 ;**********************************************************
                                    240         .area CODE
                                    241 ;**********************************************************
                                    242 
                                    243 ; non handled interrupt reset MCU
      000000                        244 NonHandledInterrupt:
      000000 A6 80            [ 1]  245         ld a, #0x80
      000002 C7 50 D1         [ 1]  246         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    247 	;iret
                                    248 
                                    249 ; used for milliseconds counter 
                                    250 ; MS is 16 bits counter 
      000005                        251 Timer4Handler:
      000005 72 5F 53 42      [ 1]  252 	clr TIM4_SR 
      000009 BE 2E            [ 2]  253         ldw x,MS 
      00000B 5C               [ 2]  254         incw x 
      00000C BF 2E            [ 2]  255         ldw MS,x
      00000E BE 30            [ 2]  256         ldw x,CNTDWN 
      000010 27 03            [ 1]  257         jreq 1$
      000012 5A               [ 2]  258         decw x 
      000013 BF 30            [ 2]  259         ldw CNTDWN,x 
      000015                        260 1$:         
      000015 80               [11]  261         iret 
                                    262 
                                    263 
                                    264 ;; Main entry points and COLD start data
      000016                        265 main:
                                    266 ; clear all RAM
      000016 AE 00 00         [ 2]  267 	ldw X,#RAMBASE
      000019                        268 clear_ram0:
      000019 7F               [ 1]  269 	clr (X)
      00001A 5C               [ 2]  270 	incw X
      00001B A3 17 FF         [ 2]  271 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  272 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  273         ldw x,#RPP
      000023 94               [ 1]  274         ldw sp,x
                                    275 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  276         inc SEEDX+1 
      000026 3C 39            [ 1]  277         inc SEEDY+1          
      000028 CC 00 47         [ 2]  278 	jp ORIG
                                    279 
                                    280 ; COLD initialize these variables.
      00002B                        281 UZERO:
      00002B 00 0A                  282         .word      BASEE   ;BASE
      00002D 00 00                  283         .word      0       ;tmp
      00002F 00 00                  284         .word      0       ;>IN
      000031 00 00                  285         .word      0       ;#TIB
      000033 17 00                  286         .word      TIBB    ;TIB
      000035 12 ED                  287         .word      INTER   ;'EVAL
      000037 00 00                  288         .word      0       ;HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000039 22 EB                  289         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  290         .word      VAR_BASE   ;variables free space pointer 
      00003D 23 80                  291         .word      app_space ; FLASH free space pointer 
      00003F 22 EB                  292         .word      LASTN   ;LAST
      000041 00 00                  293         .word      0        ; OFFSET 
      000043 00 00                  294         .word      0       ; TFLASH
                                    295 ;       .word      0       ; URLAST   
      000045 00 00                  296 UEND:   .word      0
                                    297 
      000047                        298 ORIG:   
                                    299 ; initialize SP
      000047 AE 17 FF         [ 2]  300         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  301         LDW     SP,X
      00004B BF 2C            [ 2]  302         LDW     RP0,X
      00004D AE 16 80         [ 2]  303         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  304         LDW     SP0,X
                           000001   305 .if NUCLEO        
                                    306 ; initialize PC_5 as output to control LED2
                                    307 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  308         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  309         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  310         bset PC_DDR,#LED2_BIT
                           000000   311 .else ;discovery 
                                    312         bset PD_CR1,#LD1_BIT
                                    313         bset PD_CR2,#LD1_BIT
                                    314         bset PD_DDR,#LD1_BIT 
                                    315 .endif
      00005E                        316         _ledoff
                           000001     1         .if NUCLEO 
      00005E 72 1B 50 0A      [ 1]    2         bres PC_ODR,#LED2_BIT
                           000000     3         .else ;DISCOVERY 
                                      4         bset PD_ODR,#LD1_BIT 
                                      5         .endif
                                    317 ; initialize clock to HSI
                                    318 ; no divisor 16Mhz 
                                    319 ; Added by Picatout 
      000062                        320 clock_init:
      000062 72 5F 50 C6      [ 1]  321         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  322 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000001   323 .if NUCLEO
      00006A A6 E1            [ 1]  324 	ld a,#CLK_SWR_HSI
                           000000   325 .else ; DISCOVERY as 16Mhz crystal
                                    326 	ld a,#CLK_SWR_HSE
                                    327 .endif 
      00006C C7 50 C4         [ 1]  328 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  329 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  330 	jrne 1$
                                    331         
                                    332 ; initialize UART, 115200 8N1
      000074                        333 uart_init:
                           000001   334 .if NUCLEO 
      000074 72 14 50 C7      [ 1]  335 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    336 	; configure tx pin
      000078 72 1A 50 02      [ 1]  337 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  338 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000080 72 1A 50 04      [ 1]  339 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    340 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000084 35 0B 52 33      [ 1]  341 	mov UART1_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  342 	mov UART1_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  343 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000000   344 .else ; DISCOVERY use UART2 
                                    345 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    346 	; configure tx pin
                                    347 	bset PD_DDR,#UART2_TX_PIN ; tx pin
                                    348 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
                                    349 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    350 	; baud rate 115200 Fmaster=8Mhz  
                                    351 	mov UART2_BRR2,#0x0b ; must be loaded first
                                    352 	mov UART2_BRR1,#0x8
                                    353 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    354 .endif
                                    355 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  356 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  357 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  358 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  359 	bset TIM4_IER,#TIM4_IER_UIE 
                                    360 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  361         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  362         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  363         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  364         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  365         rim
      0000AB CC 19 F1         [ 2]  366         jp  COLD   ;default=MN1
                                    367 
                                    368 
                                    369 ;; place MCU in sleep mode with
                                    370 ;; halt opcode 
                                    371 ;; BYE ( -- )
      0000AE 00 00                  372         .word 0
                           0000B0   373         LINK=.
      0000B0 03                     374         .byte 3 
      0000B1 42 59 45               375         .ascii "BYE"
      0000B4                        376 BYE: 
      0000B4 8E               [10]  377         halt 
      0000B5 81               [ 4]  378         ret 
                                    379 
                                    380 ; Enable interrupts 
                                    381 ; EI ( -- )
      0000B6 00 B0                  382         .word LINK 
                           0000B8   383         LINK=.
      0000B8 02                     384         .byte 2
      0000B9 45 49                  385         .ascii "EI"
      0000BB                        386 EI:
      0000BB 9A               [ 1]  387         rim 
      0000BC 81               [ 4]  388         ret 
                                    389 
                                    390 ; Disable interrupts
                                    391 ; DI ( -- )
      0000BD 00 B8                  392         .word LINK 
                           0000BF   393         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000BF 02                     394         .byte 2 
      0000C0 44 49                  395         .ascii "DI"
      0000C2                        396 DI:
      0000C2 9B               [ 1]  397         sim 
      0000C3 81               [ 4]  398         ret 
                                    399 
                                    400 ; set interrupt priority level 
                                    401 ; SET-ISP ( n1 n2 -- )
                                    402 ; n1 level {1..3}
                                    403 ; n2 vector {0..29}
      0000C4 00 BF                  404         .word LINK 
                           0000C6   405         LINK=.
      0000C6 07                     406         .byte 7 
      0000C7 53 45 54 2D 49 53 50   407         .ascii "SET-ISP"
      0000CE                        408 SETISP:
      0000CE 90 93            [ 1]  409         ldw y,x 
      0000D0 90 FE            [ 2]  410         ldw y,(y)
      0000D2 A6 04            [ 1]  411         ld a,#4 ; 4 slot per register 
                                    412 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  413         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  414         and a,#3 
      0000D8 48               [ 1]  415         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  416         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  417         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  418         clrw y 
      0000E0 90 97            [ 1]  419         ld yl,a 
      0000E2 1D 00 02         [ 2]  420         subw x,#CELLL 
      0000E5 FF               [ 2]  421         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  422         ldw y,x 
      0000E8 90 EE 02         [ 2]  423         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  424         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  425         subw x,#CELLL 
      0000F0 FF               [ 2]  426         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 03         [ 4]  427         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B4         [ 4]  428         call DOLIT 
      0000F7 00 03                  429         .word 3
      0000F9 CD 04 E9         [ 4]  430         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 EC         [ 4]  431         call LSHIFT ; creat slot mask 
      0000FF CD 06 EE         [ 4]  432         call INVER  ; ( level reg lshift rval mask )
      000102 CD 05 25         [ 4]  433         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 04 A2         [ 4]  434         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 94         [ 4]  435         call ROT  ; ( reg lshift level )
      00010B CD 04 E9         [ 4]  436         call SWAPP ; ( reg level lshift )
      00010E CD 09 EC         [ 4]  437         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 83         [ 4]  438         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 39         [ 4]  439         call ORR   ; ( reg updated_rval )
      000117 CD 04 E9         [ 4]  440         call SWAPP 
      00011A CD 04 3F         [ 4]  441         call CSTOR
                                    442 
                                    443 ; sélectionne l'application 
                                    444 ; qui démarre automatique lors 
                                    445 ; d'un COLD start 
      00011D 00 C6                  446         .word LINK 
                           00011F   447         LINK=.
      00011F 07                     448         .byte 7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000120 41 55 54 4F 52 55 4E   449         .ascii "AUTORUN"
      000127                        450 AUTORUN:
      000127 CD 10 B2         [ 4]  451         call TOKEN 
      00012A CD 04 D9         [ 4]  452         call DUPP 
      00012D CD 03 E7         [ 4]  453         call QBRAN 
      000130 02 0D                  454         .word FORGET2
      000132 CD 11 AF         [ 4]  455         call NAMEQ
      000135 CD 06 83         [ 4]  456         call QDUP 
      000138 CD 03 E7         [ 4]  457         call QBRAN 
      00013B 02 0D                  458         .word FORGET2
      00013D CD 04 CF         [ 4]  459         call DROP 
      000140 1D 00 04         [ 2]  460         subw x,#2*CELLL 
      000143 90 5F            [ 1]  461         clrw y 
      000145 FF               [ 2]  462         ldw (x),y 
      000146 90 AE 40 02      [ 2]  463         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  464         ldw (2,x),y 
      00014C CC 1C DE         [ 2]  465         jp EESTORE 
                                    466 
                                    467 ;; Reset dictionary pointer before 
                                    468 ;; forgotten word. RAM space and 
                                    469 ;; interrupt vector defined after 
                                    470 ;; must be resetted also.
      00014F 01 1F                  471         .word LINK 
                           000151   472         LINK=.
      000151 06                     473         .byte 6
      000152 46 4F 52 47 45 54      474         .ascii "FORGET" 
      000158                        475 FORGET: 
      000158 CD 10 B2         [ 4]  476         call TOKEN
      00015B CD 04 D9         [ 4]  477         call DUPP 
      00015E CD 03 E7         [ 4]  478         call QBRAN 
      000161 02 0D                  479         .word FORGET2
      000163 CD 11 AF         [ 4]  480         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 83         [ 4]  481         call QDUP 
      000169 CD 03 E7         [ 4]  482         call QBRAN 
      00016C 02 0D                  483         .word FORGET2
                                    484 ; only forget users words 
      00016E CD 04 D9         [ 4]  485         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  486         call DOLIT 
      000174 23 80                  487         .word app_space 
      000176 CD 04 E9         [ 4]  488         call SWAPP 
      000179 CD 07 94         [ 4]  489         call  ULESS 
      00017C CD 03 E7         [ 4]  490         call QBRAN 
      00017F 01 CF                  491         .word FORGET6 
                                    492 ; ( ca na -- )        
                                    493 ;reset ivec with address >= ca
      000181 CD 04 E9         [ 4]  494         call SWAPP ; ( na ca -- ) 
      000184 CD 1E CF         [ 4]  495         call CHKIVEC ; ( na -- ) 
                                    496 ; start at LAST and link back to na 
                                    497 ; if variable found reset VP at that point.
      000187                        498 FORGET1:
      000187 CD 06 45         [ 4]  499         call LAST 
      00018A CD 04 32         [ 4]  500         call AT 
      00018D CD 04 D9         [ 4]  501         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  502         call FREEVAR ; ( -- na last )
      000193 CD 04 D9         [ 4]  503         call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000196 CD 03 B4         [ 4]  504         call DOLIT 
      000199 00 02                  505         .word 2 
      00019B CD 07 4D         [ 4]  506         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 32         [ 4]  507         call AT 
      0001A1 CD 04 D9         [ 4]  508         call DUPP ; ( -- na last a a )
      0001A4 CD 06 19         [ 4]  509         call CNTXT 
      0001A7 CD 04 1B         [ 4]  510         call STORE
      0001AA CD 06 45         [ 4]  511         call LAST  
      0001AD CD 04 1B         [ 4]  512         call STORE ; ( --  na last )
      0001B0 CD 05 03         [ 4]  513         call OVER 
      0001B3 CD 07 75         [ 4]  514         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  515         call QBRAN 
      0001B9 01 87                  516         .word FORGET1 
                                    517 ; ( na -- )
      0001BB CD 03 B4         [ 4]  518         call DOLIT 
      0001BE 00 02                  519         .word 2 
      0001C0 CD 07 4D         [ 4]  520         call SUBB 
      0001C3 CD 06 35         [ 4]  521         call CPP 
      0001C6 CD 04 1B         [ 4]  522         call STORE  
      0001C9 CD 1B 1D         [ 4]  523         call UPDATCP 
      0001CC CC 1A F4         [ 2]  524         jp UPDATLAST 
      0001CF                        525 FORGET6: ; tried to forget a RAM or system word 
                                    526 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  527         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  528         ldw y,SP0 
      0001D5 FF               [ 2]  529         ldw (x),y  
      0001D6 CD 07 94         [ 4]  530         call ULESS
      0001D9 CD 03 E7         [ 4]  531         call QBRAN 
      0001DC 01 FF                  532         .word PROTECTED 
      0001DE CD 12 BB         [ 4]  533         call ABORQ 
      0001E1 1D                     534         .byte 29
      0001E2 20 46 6F 72 20 52 41   535         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        536 PROTECTED:
      0001FF CD 12 BB         [ 4]  537         call ABORQ
      000202 0A                     538         .byte 10
      000203 20 50 72 6F 74 65 63   539         .ascii " Protected"
             74 65 64
      00020D                        540 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 BB         [ 4]  541         call ABORQ
      000210 05                     542         .byte 5
      000211 20 77 68 61 74         543         .ascii " what"
      000216                        544 FORGET4:
      000216 CC 04 CF         [ 2]  545         jp DROP 
                                    546 
                                    547 
                                    548 ;---------------------------------
                                    549 ; if na is variable 
                                    550 ; free variable data  
                                    551 ; FREEVAR ( na -- )
                                    552 ;---------------------------------
      000219 01 51                  553         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                           00021B   554         LINK=.
      00021B 07                     555         .byte 7 
      00021C 46 52 45 45 56 41 52   556         .ascii "FREEVAR"
      000223                        557 FREEVAR:
      000223 CD 04 D9         [ 4]  558         call DUPP ; ( na na -- )
      000226 CD 04 50         [ 4]  559         CALL CAT  ; ( na c -- )
      000229 CD 09 CE         [ 4]  560         call ONEP ;
      00022C CD 06 D4         [ 4]  561         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 CE         [ 4]  562         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 D9         [ 4]  563         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 32         [ 4]  564         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  565         call DOLIT 
      00023B 05 86                  566         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 75         [ 4]  567         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  568         call QBRAN 
      000243 02 59                  569         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  570         call DOLIT 
      000248 00 02                  571         .word 2 
      00024A CD 06 D4         [ 4]  572         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 32         [ 4]  573         call AT 
      000250 CD 06 27         [ 4]  574         call VPP   
      000253 CD 04 1B         [ 4]  575         call STORE 
      000256 CC 1B 34         [ 2]  576         jp UPDATVP 
      000259                        577 FREEVAR4: ; not variable
      000259 CC 04 CF         [ 2]  578         jp  DROP 
                                    579 
                                    580 ;    SEED ( n -- )
                                    581 ; Initialize PRNG seed with n 
      00025C 02 1B                  582         .word LINK 
                           00025E   583         LINK=. 
      00025E 04                     584         .byte 4 
      00025F 53 45 45 44            585         .ascii "SEED" 
      000263                        586 SEED:
      000263 90 93            [ 1]  587         ldw y,x 
      000265 1C 00 02         [ 2]  588         addw x,#CELLL
      000268 90 FE            [ 2]  589         ldw y,(y)
      00026A 90 9E            [ 1]  590         ld a,yh 
      00026C B7 36            [ 1]  591         ld SEEDX,a 
      00026E 90 9F            [ 1]  592         ld a,yl 
      000270 B7 38            [ 1]  593         ld SEEDY,a 
      000272 81               [ 4]  594         ret 
                                    595 
                                    596 ;    RANDOM ( u1 -- u2 )
                                    597 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  598         .word LINK 
                           000275   599         LINK=.
      000275 06                     600         .byte 6
      000276 52 41 4E 44 4F 4D      601         .ascii "RANDOM" 
      00027C                        602 RANDOM:
                                    603 ;local variable 
                           000001   604         SPSAVE=1
                           000002   605         VSIZE=2 
      00027C 52 02            [ 2]  606         sub sp,#VSIZE
      00027E 1F 01            [ 2]  607         ldw (SPSAVE,sp),x  
                                    608 ; XTEMP=(SEEDX<<5)^SEEDX 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000280 90 93            [ 1]  609         ldw y,x 
      000282 90 FE            [ 2]  610         ldw y,(y)
      000284 90 BF 24         [ 2]  611         ldw YTEMP,y 
      000287 BE 36            [ 2]  612 	ldw x,SEEDX 
      000289 58               [ 2]  613 	sllw x 
      00028A 58               [ 2]  614 	sllw x 
      00028B 58               [ 2]  615 	sllw x 
      00028C 58               [ 2]  616 	sllw x 
      00028D 58               [ 2]  617 	sllw x 
      00028E 9E               [ 1]  618 	ld a,xh 
      00028F B8 36            [ 1]  619 	xor a,SEEDX 
      000291 B7 22            [ 1]  620 	ld XTEMP,a 
      000293 9F               [ 1]  621 	ld a,xl 
      000294 B8 37            [ 1]  622 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  623 	ld XTEMP+1,a 
                                    624 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  625 	ldw x,SEEDY 
      00029A BF 36            [ 2]  626 	ldw SEEDX,x  
                                    627 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  628 	srlw x 
      00029D 9E               [ 1]  629 	ld a,xh 
      00029E B8 38            [ 1]  630 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  631 	ld SEEDY,a  
      0002A2 9F               [ 1]  632 	ld a,xl 
      0002A3 B8 39            [ 1]  633 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  634 	ld SEEDY+1,a 
                                    635 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  636 	ldw x,XTEMP 
      0002A9 54               [ 2]  637 	srlw x 
      0002AA 54               [ 2]  638 	srlw x 
      0002AB 54               [ 2]  639 	srlw x 
                                    640 ; x=XTEMP^x 
      0002AC 9E               [ 1]  641 	ld a,xh 
      0002AD B8 22            [ 1]  642 	xor a,XTEMP 
      0002AF 95               [ 1]  643 	ld xh,a 
      0002B0 9F               [ 1]  644 	ld a,xl 
      0002B1 B8 23            [ 1]  645 	xor a,XTEMP+1  
      0002B3 97               [ 1]  646 	ld xl,a 
                                    647 ; SEEDY=x^SEEDY 
      0002B4 B8 39            [ 1]  648 	xor a,SEEDY+1
      0002B6 97               [ 1]  649 	ld xl,a 
      0002B7 9E               [ 1]  650 	ld a,xh 
      0002B8 B8 38            [ 1]  651 	xor a,SEEDY
      0002BA 95               [ 1]  652 	ld xh,a 
      0002BB BF 38            [ 2]  653 	ldw SEEDY,x 
                                    654 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  655 	ldw y,YTEMP  
      0002C0 65               [ 2]  656 	divw x,y 
      0002C1 1E 01            [ 2]  657 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  658         ldw (x),y 
      0002C4 5B 02            [ 2]  659         addw sp,#VSIZE 
      0002C6 81               [ 4]  660 	ret 
                                    661 
                                    662 
                                    663 ;;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    664 ;; get millisecond counter 
                                    665 ;; msec ( -- u )
                                    666 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  667         .word LINK  
                           0002C9   668         LINK = . 
      0002C9 04                     669         .byte 4
      0002CA 4D 53 45 43            670         .ascii "MSEC"
      0002CE                        671 MSEC: 
      0002CE 1D 00 02         [ 2]  672         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  673         ldw y,MS 
      0002D4 FF               [ 2]  674         ldw (x),y 
      0002D5 81               [ 4]  675         ret 
                                    676 
                                    677 ; suspend execution for u msec 
                                    678 ;  pause ( u -- )
      0002D6 02 C9                  679         .word LINK 
                           0002D8   680         LINK=.
      0002D8 05                     681         .byte 5 
      0002D9 50 41 55 53 45         682         .ascii "PAUSE"
      0002DE                        683 PAUSE:
      0002DE 90 93            [ 1]  684         ldw y,x
      0002E0 90 FE            [ 2]  685         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  686         addw y,MS 
      0002E6 8F               [10]  687 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  688         cpw y,MS  
      0002EA 26 FA            [ 1]  689         jrne 1$        
      0002EC 1C 00 02         [ 2]  690         addw x,#CELLL 
      0002EF 81               [ 4]  691         ret 
                                    692 
                                    693 ; initialize count down timer 
                                    694 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  695         .word LINK 
                           0002F2   696         LINK=.
      0002F2 05                     697         .byte 5 
      0002F3 54 49 4D 45 52         698         .ascii "TIMER" 
      0002F8                        699 TIMER:
      0002F8 90 93            [ 1]  700         ldw y,x
      0002FA 90 FE            [ 2]  701         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  702         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  703         addw x,#CELLL 
      000302 81               [ 4]  704         ret 
                                    705 
                                    706 ; check for TIMER exiparition 
                                    707 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  708         .word LINK 
                           000305   709         LINK=. 
      000305 08                     710         .byte 8 
      000306 54 49 4D 45 4F 55 54   711         .ascii "TIMEOUT?"
             3F
      00030E                        712 TIMEOUTQ: 
      00030E 4F               [ 1]  713         clr a
      00030F 1D 00 02         [ 2]  714         subw x,#CELLL 
      000312 90 BE 30         [ 2]  715         ldw y,CNTDWN 
      000315 26 01            [ 1]  716         jrne 1$ 
      000317 43               [ 1]  717         cpl a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000318 E7 01            [ 1]  718 1$:     ld (1,x),a 
      00031A F7               [ 1]  719         ld (x),a 
      00031B 81               [ 4]  720         ret         
                                    721 
                                    722 ; reboot MCU 
                                    723 ; REBOOT ( -- )
      00031C 03 05                  724         .word LINK 
                           00031E   725         LINK=. 
      00031E 06                     726         .byte 6 
      00031F 52 45 42 4F 4F 54      727         .ascii "REBOOT"
      000325                        728 reboot:
      000325 CC 00 00         [ 2]  729         jp NonHandledInterrupt
                                    730 
                                    731 ; compile to flash memory 
                                    732 ; TO-FLASH ( -- )
      000328 03 1E                  733         .word LINK 
                           00032A   734         LINK=.
      00032A 08                     735         .byte 8
      00032B 54 4F 2D 46 4C 41 53   736         .ascii "TO-FLASH"
             48
      000333                        737 TOFLASH:
      000333 CD 06 58         [ 4]  738         call RAMLAST 
      000336 CD 04 32         [ 4]  739         call AT 
      000339 CD 06 83         [ 4]  740         call QDUP 
      00033C CD 03 E7         [ 4]  741         call QBRAN
      00033F 03 62                  742         .word 1$
      000341 CD 12 BB         [ 4]  743         call ABORQ 
      000344 1D                     744         .byte 29
      000345 20 4E 6F 74 20 77 68   745         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  746 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  747         ldw UTFLASH,y
      000369 81               [ 4]  748         ret 
                                    749 
                                    750 ; compile to RAM 
                                    751 ; TO-RAM ( -- )
      00036A 03 2A                  752         .word LINK 
                           00036C   753         LINK=.
      00036C 06                     754         .byte 6 
      00036D 54 4F 2D 52 41 4D      755         .ascii "TO-RAM"
      000373                        756 TORAM:
      000373 90 5F            [ 1]  757         clrw y 
      000375 90 BF 1E         [ 2]  758         ldw UTFLASH,y 
      000378 81               [ 4]  759         ret 
                                    760         
                                    761 
                                    762 ;; Device dependent I/O
                                    763 ;       ?RX     ( -- c T | F )
                                    764 ;         Return input byte and true, or false.
      000379 03 6C                  765         .word      LINK 
                           00037B   766 LINK	= .
      00037B 04                     767         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      00037C 3F 4B 45 59            768         .ascii     "?KEY"
      000380                        769 QKEY:
      000380 90 5F            [ 1]  770         CLRW Y 
      000382 72 0B 52 30 0B   [ 2]  771         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 31         [ 1]  772         LD    A,UART_DR   ;get char in A
      00038A 1D 00 02         [ 2]  773 	SUBW	X,#2
      00038D E7 01            [ 1]  774         LD     (1,X),A
      00038F 7F               [ 1]  775 	CLR	(X)
      000390 90 53            [ 2]  776         CPLW     Y
      000392                        777 INCH:
      000392 1D 00 02         [ 2]  778 	SUBW	X,#2
      000395 FF               [ 2]  779         LDW     (X),Y
      000396 81               [ 4]  780         RET
                                    781 
                                    782 ;       TX!     ( c -- )
                                    783 ;       Send character c to  output device.
      000397 03 7B                  784         .word      LINK
                           000399   785 LINK	= .
      000399 04                     786         .byte      4
      00039A 45 4D 49 54            787         .ascii     "EMIT"
      00039E                        788 EMIT:
      00039E E6 01            [ 1]  789         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  790 	ADDW	X,#2
      0003A3 72 0F 52 30 FB   [ 2]  791 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      0003A8 C7 52 31         [ 1]  792         LD    UART_DR,A   ;send A
      0003AB 81               [ 4]  793         RET
                                    794 
                                    795 ;; The kernel
                                    796 
                                    797 ;       doLIT   ( -- w )
                                    798 ;       Push an inline literal.
      0003AC 03 99                  799         .word      LINK
                           0003AE   800 LINK	= 	.
      0003AE 45                     801 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         802         .ascii     "DOLIT"
      0003B4                        803 DOLIT:
      0003B4 1D 00 02         [ 2]  804 	SUBW X,#2
      0003B7 16 01            [ 2]  805         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  806         ldw y,(y)
      0003BB FF               [ 2]  807         ldw (x),y
      0003BC 90 85            [ 2]  808         popw y 
      0003BE 90 EC 02         [ 2]  809         jp (2,y)
                                    810 
                                    811 ;       next    ( -- )
                                    812 ;       Code for  single index loop.
      0003C1 03 AE                  813         .word      LINK
                           0003C3   814 LINK	= 	.
      0003C3 44                     815 	.byte      COMPO+4
      0003C4 6E 65 78 74            816         .ascii     "next"
      0003C8                        817 DONXT:
      0003C8 16 03            [ 2]  818 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  819 	DECW Y
      0003CC 2A 07            [ 1]  820 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  821 	POPW Y
      0003D0 5B 02            [ 2]  822         addw sp,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003D2 90 EC 02         [ 2]  823         JP (2,Y)
      0003D5                        824 NEX1:
      0003D5 17 03            [ 2]  825         LDW (3,SP),Y
      0003D7 90 85            [ 2]  826         POPW Y
      0003D9 90 FE            [ 2]  827 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  828 	JP (Y)
                                    829 
                                    830 ;       ?branch ( f -- )
                                    831 ;       Branch if flag is zero.
      0003DD 03 C3                  832         .word      LINK
                           0003DF   833 LINK	= 	.
      0003DF 47                     834 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   835         .ascii     "?BRANCH"
      0003E7                        836 QBRAN:	
      0003E7 90 93            [ 1]  837         LDW Y,X
      0003E9 1C 00 02         [ 2]  838 	ADDW X,#2
      0003EC 90 FE            [ 2]  839 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  840         JREQ     BRAN
      0003F0 90 85            [ 2]  841 	POPW Y
      0003F2 90 EC 02         [ 2]  842 	JP (2,Y)
                                    843         
                                    844 ;       branch  ( -- )
                                    845 ;       Branch to an inline address.
      0003F5 03 DF                  846         .word      LINK
                           0003F7   847 LINK	= 	.
      0003F7 46                     848 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      849         .ascii     "BRANCH"
      0003FE                        850 BRAN:
      0003FE 90 85            [ 2]  851         POPW Y
      000400 90 FE            [ 2]  852 	LDW Y,(Y)
      000402 90 FC            [ 2]  853         JP     (Y)
                                    854 
                                    855 ;       EXECUTE ( ca -- )
                                    856 ;       Execute  word at ca.
      000404 03 F7                  857         .word      LINK
                           000406   858 LINK	= 	.
      000406 07                     859         .byte       7
      000407 45 58 45 43 55 54 45   860         .ascii     "EXECUTE"
      00040E                        861 EXECU:
      00040E 90 93            [ 1]  862         LDW Y,X
      000410 1C 00 02         [ 2]  863 	ADDW X,#2
      000413 90 FE            [ 2]  864 	LDW  Y,(Y)
      000415 90 FC            [ 2]  865         JP   (Y)
                                    866 
                           000001   867 OPTIMIZE = 1
                           000001   868 .if OPTIMIZE 
                                    869 ; remplacement de CALL EXIT par 
                                    870 ; le opcode de RET.
                                    871 ; Voir modification au code de ";"
                           000000   872 .else 
                                    873 ;       EXIT    ( -- )
                                    874 ;       Terminate a colon definition.
                                    875         .word      LINK
                                    876 LINK = .
                                    877         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    878         .ascii     "EXIT"
                                    879 EXIT:
                                    880         POPW Y
                                    881         RET
                                    882 .endif 
                                    883 
                                    884 ;       !       ( w a -- )
                                    885 ;       Pop  data stack to memory.
      000417 04 06                  886         .word      LINK
                           000419   887 LINK = .
      000419 01                     888         .byte      1
      00041A 21                     889         .ascii     "!"
      00041B                        890 STORE:
      00041B 90 93            [ 1]  891         LDW Y,X
      00041D 90 FE            [ 2]  892         LDW Y,(Y)    ;Y=a
      00041F 90 BF 24         [ 2]  893         LDW YTEMP,Y
      000422 90 93            [ 1]  894         LDW Y,X
      000424 90 EE 02         [ 2]  895         LDW Y,(2,Y)
      000427 91 CF 24         [ 5]  896         LDW [YTEMP],Y ;store w at a
      00042A 1C 00 04         [ 2]  897         ADDW X,#4 ; DDROP 
      00042D 81               [ 4]  898         RET     
                                    899 
                                    900 ;       @       ( a -- w )
                                    901 ;       Push memory location to stack.
      00042E 04 19                  902         .word      LINK
                           000430   903 LINK	= 	.
      000430 01                     904         .byte    1
      000431 40                     905         .ascii	"@"
      000432                        906 AT:
      000432 90 93            [ 1]  907         LDW Y,X     ;Y = a
      000434 90 FE            [ 2]  908         LDW Y,(Y)   ; address 
      000436 90 FE            [ 2]  909         LDW Y,(Y)   ; value 
      000438 FF               [ 2]  910         LDW (X),Y ;w = @Y
      000439 81               [ 4]  911         RET     
                                    912 
                                    913 ;       C!      ( c b -- )
                                    914 ;       Pop  data stack to byte memory.
      00043A 04 30                  915         .word      LINK
                           00043C   916 LINK	= .
      00043C 02                     917         .byte      2
      00043D 43 21                  918         .ascii     "C!"
      00043F                        919 CSTOR:
      00043F 90 93            [ 1]  920         LDW Y,X
      000441 90 FE            [ 2]  921 	LDW Y,(Y)    ;Y=b
      000443 E6 03            [ 1]  922         LD A,(3,X)    ;D = c
      000445 90 F7            [ 1]  923         LD  (Y),A     ;store c at b
      000447 1C 00 04         [ 2]  924 	ADDW X,#4 ; DDROP 
      00044A 81               [ 4]  925         RET     
                                    926 
                                    927 ;       C@      ( b -- c )
                                    928 ;       Push byte in memory to  stack.
      00044B 04 3C                  929         .word      LINK
                           00044D   930 LINK	= 	.
      00044D 02                     931         .byte      2
      00044E 43 40                  932         .ascii     "C@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000450                        933 CAT:
      000450 90 93            [ 1]  934         LDW Y,X     ;Y=b
      000452 90 FE            [ 2]  935         LDW Y,(Y)
      000454 90 F6            [ 1]  936         LD A,(Y)
      000456 E7 01            [ 1]  937         LD (1,X),A
      000458 7F               [ 1]  938         CLR (X)
      000459 81               [ 4]  939         RET     
                                    940 
                                    941 ;       RP@     ( -- a )
                                    942 ;       Push current RP to data stack.
      00045A 04 4D                  943         .word      LINK
                           00045C   944 LINK	= .
      00045C 03                     945         .byte      3
      00045D 52 50 40               946         .ascii     "RP@"
      000460                        947 RPAT:
      000460 90 96            [ 1]  948         LDW Y,SP    ;save return addr
      000462 1D 00 02         [ 2]  949         SUBW X,#2
      000465 FF               [ 2]  950         LDW (X),Y
      000466 81               [ 4]  951         RET     
                                    952 
                                    953 ;       RP!     ( a -- )
                                    954 ;       Set  return stack pointer.
      000467 04 5C                  955         .word      LINK
                           000469   956 LINK	= 	. 
      000469 43                     957 	.byte      COMPO+3
      00046A 52 50 21               958         .ascii     "RP!"
      00046D                        959 RPSTO:
      00046D 90 85            [ 2]  960         POPW Y
      00046F 90 BF 24         [ 2]  961         LDW YTEMP,Y
      000472 90 93            [ 1]  962         LDW Y,X
      000474 90 FE            [ 2]  963         LDW Y,(Y)
      000476 90 94            [ 1]  964         LDW SP,Y
      000478 1C 00 02         [ 2]  965         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00047B 92 CC 24         [ 5]  966         JP [YTEMP]
                                    967 
                                    968 ;       R>      ( -- w )
                                    969 ;       Pop return stack to data stack.
      00047E 04 69                  970         .word      LINK
                           000480   971 LINK	= 	. 
      000480 42                     972 	.byte      COMPO+2
      000481 52 3E                  973         .ascii     "R>"
      000483                        974 RFROM:
      000483 90 85            [ 2]  975         POPW Y    ;save return addr
      000485 90 BF 24         [ 2]  976         LDW YTEMP,Y
      000488 90 85            [ 2]  977         POPW Y
      00048A 1D 00 02         [ 2]  978         SUBW X,#2
      00048D FF               [ 2]  979         LDW (X),Y
      00048E 92 CC 24         [ 5]  980         JP [YTEMP]
                                    981 
                                    982 ;       R@      ( -- w )
                                    983 ;       Copy top of return stack to stack.
      000491 04 80                  984         .word      LINK
                           000493   985 LINK	= 	. 
      000493 02                     986         .byte      2
      000494 52 40                  987         .ascii     "R@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000496                        988 RAT:
      000496 16 03            [ 2]  989         ldw y,(3,sp)
      000498 1D 00 02         [ 2]  990         subw x,#CELLL 
      00049B FF               [ 2]  991         ldw (x),y 
      00049C 81               [ 4]  992         ret 
                                    993 
                                    994 ;       >R      ( w -- )
                                    995 ;       Push data stack to return stack.
      00049D 04 93                  996         .word      LINK
                           00049F   997 LINK	= 	. 
      00049F 42                     998 	.byte      COMPO+2
      0004A0 3E 52                  999         .ascii     ">R"
      0004A2                       1000 TOR:
      0004A2 90 85            [ 2] 1001         POPW Y    ;save return addr
      0004A4 90 BF 24         [ 2] 1002         LDW YTEMP,Y
      0004A7 90 93            [ 1] 1003         LDW Y,X
      0004A9 90 FE            [ 2] 1004         LDW Y,(Y)
      0004AB 90 89            [ 2] 1005         PUSHW Y    ;restore return addr
      0004AD 1C 00 02         [ 2] 1006         ADDW X,#2
      0004B0 92 CC 24         [ 5] 1007         JP [YTEMP]
                                   1008 
                                   1009 ;       SP@     ( -- a )
                                   1010 ;       Push current stack pointer.
      0004B3 04 9F                 1011         .word      LINK
                           0004B5  1012 LINK	= 	. 
      0004B5 03                    1013         .byte      3
      0004B6 53 50 40              1014         .ascii     "SP@"
      0004B9                       1015 SPAT:
      0004B9 90 93            [ 1] 1016 	LDW Y,X
      0004BB 1D 00 02         [ 2] 1017         SUBW X,#2
      0004BE FF               [ 2] 1018 	LDW (X),Y
      0004BF 81               [ 4] 1019         RET     
                                   1020 
                                   1021 ;       SP!     ( a -- )
                                   1022 ;       Set  data stack pointer.
      0004C0 04 B5                 1023         .word      LINK
                           0004C2  1024 LINK	= 	. 
      0004C2 03                    1025         .byte      3
      0004C3 53 50 21              1026         .ascii     "SP!"
      0004C6                       1027 SPSTO:
      0004C6 FE               [ 2] 1028         LDW     X,(X)     ;X = a
      0004C7 81               [ 4] 1029         RET     
                                   1030 
                                   1031 ;       DROP    ( w -- )
                                   1032 ;       Discard top stack item.
      0004C8 04 C2                 1033         .word      LINK
                           0004CA  1034 LINK	= 	. 
      0004CA 04                    1035         .byte      4
      0004CB 44 52 4F 50           1036         .ascii     "DROP"
      0004CF                       1037 DROP:
      0004CF 1C 00 02         [ 2] 1038         ADDW X,#2     
      0004D2 81               [ 4] 1039         RET     
                                   1040 
                                   1041 ;       DUP     ( w -- w w )
                                   1042 ;       Duplicate  top stack item.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004D3 04 CA                 1043         .word      LINK
                           0004D5  1044 LINK	= 	. 
      0004D5 03                    1045         .byte      3
      0004D6 44 55 50              1046         .ascii     "DUP"
      0004D9                       1047 DUPP:
      0004D9 90 93            [ 1] 1048 	LDW Y,X
      0004DB 1D 00 02         [ 2] 1049         SUBW X,#2
      0004DE 90 FE            [ 2] 1050 	LDW Y,(Y)
      0004E0 FF               [ 2] 1051 	LDW (X),Y
      0004E1 81               [ 4] 1052         RET     
                                   1053 
                                   1054 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1055 ;       Exchange top two stack items.
      0004E2 04 D5                 1056         .word      LINK
                           0004E4  1057 LINK	= 	. 
      0004E4 04                    1058         .byte      4
      0004E5 53 57 41 50           1059         .ascii     "SWAP"
      0004E9                       1060 SWAPP:
      0004E9 90 93            [ 1] 1061         LDW Y,X
      0004EB 90 FE            [ 2] 1062         LDW Y,(Y)
      0004ED 90 BF 24         [ 2] 1063         LDW YTEMP,Y
      0004F0 90 93            [ 1] 1064         LDW Y,X
      0004F2 90 EE 02         [ 2] 1065         LDW Y,(2,Y)
      0004F5 FF               [ 2] 1066         LDW (X),Y
      0004F6 90 BE 24         [ 2] 1067         LDW Y,YTEMP
      0004F9 EF 02            [ 2] 1068         LDW (2,X),Y
      0004FB 81               [ 4] 1069         RET     
                                   1070 
                                   1071 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1072 ;       Copy second stack item to top.
      0004FC 04 E4                 1073         .word      LINK
                           0004FE  1074 LINK	= . 
      0004FE 04                    1075         .byte      4
      0004FF 4F 56 45 52           1076         .ascii     "OVER"
      000503                       1077 OVER:
      000503 1D 00 02         [ 2] 1078         SUBW X,#2
      000506 90 93            [ 1] 1079         LDW Y,X
      000508 90 EE 04         [ 2] 1080         LDW Y,(4,Y)
      00050B FF               [ 2] 1081         LDW (X),Y
      00050C 81               [ 4] 1082         RET     
                                   1083 
                                   1084 ;       0<      ( n -- t )
                                   1085 ;       Return true if n is negative.
      00050D 04 FE                 1086         .word      LINK
                           00050F  1087 LINK	= . 
      00050F 02                    1088         .byte      2
      000510 30 3C                 1089         .ascii     "0<"
      000512                       1090 ZLESS:
      000512 A6 FF            [ 1] 1091         LD A,#0xFF
      000514 90 93            [ 1] 1092         LDW Y,X
      000516 90 FE            [ 2] 1093         LDW Y,(Y)
      000518 2B 01            [ 1] 1094         JRMI     ZL1
      00051A 4F               [ 1] 1095         CLR A   ;false
      00051B F7               [ 1] 1096 ZL1:    LD     (X),A
      00051C E7 01            [ 1] 1097         LD (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00051E 81               [ 4] 1098 	RET     
                                   1099 
                                   1100 ;       AND     ( w w -- w )
                                   1101 ;       Bitwise AND.
      00051F 05 0F                 1102         .word      LINK
                           000521  1103 LINK	= . 
      000521 03                    1104         .byte      3
      000522 41 4E 44              1105         .ascii     "AND"
      000525                       1106 ANDD:
      000525 F6               [ 1] 1107         LD  A,(X)    ;D=w
      000526 E4 02            [ 1] 1108         AND A,(2,X)
      000528 E7 02            [ 1] 1109         LD (2,X),A
      00052A E6 01            [ 1] 1110         LD A,(1,X)
      00052C E4 03            [ 1] 1111         AND A,(3,X)
      00052E E7 03            [ 1] 1112         LD (3,X),A
      000530 1C 00 02         [ 2] 1113         ADDW X,#2
      000533 81               [ 4] 1114         RET
                                   1115 
                                   1116 ;       OR      ( w w -- w )
                                   1117 ;       Bitwise inclusive OR.
      000534 05 21                 1118         .word      LINK
                           000536  1119 LINK = . 
      000536 02                    1120         .byte      2
      000537 4F 52                 1121         .ascii     "OR"
      000539                       1122 ORR:
      000539 F6               [ 1] 1123         LD A,(X)    ;D=w
      00053A EA 02            [ 1] 1124         OR A,(2,X)
      00053C E7 02            [ 1] 1125         LD (2,X),A
      00053E E6 01            [ 1] 1126         LD A,(1,X)
      000540 EA 03            [ 1] 1127         OR A,(3,X)
      000542 E7 03            [ 1] 1128         LD (3,X),A
      000544 1C 00 02         [ 2] 1129         ADDW X,#2
      000547 81               [ 4] 1130         RET
                                   1131 
                                   1132 ;       XOR     ( w w -- w )
                                   1133 ;       Bitwise exclusive OR.
      000548 05 36                 1134         .word      LINK
                           00054A  1135 LINK	= . 
      00054A 03                    1136         .byte      3
      00054B 58 4F 52              1137         .ascii     "XOR"
      00054E                       1138 XORR:
      00054E F6               [ 1] 1139         LD A,(X)    ;D=w
      00054F E8 02            [ 1] 1140         XOR A,(2,X)
      000551 E7 02            [ 1] 1141         LD (2,X),A
      000553 E6 01            [ 1] 1142         LD A,(1,X)
      000555 E8 03            [ 1] 1143         XOR A,(3,X)
      000557 E7 03            [ 1] 1144         LD (3,X),A
      000559 1C 00 02         [ 2] 1145         ADDW X,#2
      00055C 81               [ 4] 1146         RET
                                   1147 
                                   1148 ;       UM+     ( u u -- udsum )
                                   1149 ;       Add two unsigned single
                                   1150 ;       and return a double sum.
      00055D 05 4A                 1151         .word      LINK
                           00055F  1152 LINK	= . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00055F 03                    1153         .byte      3
      000560 55 4D 2B              1154         .ascii     "UM+"
      000563                       1155 UPLUS:
      000563 A6 01            [ 1] 1156         LD A,#1
      000565 90 93            [ 1] 1157         LDW Y,X
      000567 90 EE 02         [ 2] 1158         LDW Y,(2,Y)
      00056A 90 BF 24         [ 2] 1159         LDW YTEMP,Y
      00056D 90 93            [ 1] 1160         LDW Y,X
      00056F 90 FE            [ 2] 1161         LDW Y,(Y)
      000571 72 B9 00 24      [ 2] 1162         ADDW Y,YTEMP
      000575 EF 02            [ 2] 1163         LDW (2,X),Y
      000577 25 01            [ 1] 1164         JRC     UPL1
      000579 4F               [ 1] 1165         CLR A
      00057A E7 01            [ 1] 1166 UPL1:   LD     (1,X),A
      00057C 7F               [ 1] 1167         CLR (X)
      00057D 81               [ 4] 1168         RET
                                   1169 
                                   1170 ;; System and user variables
                                   1171 
                                   1172 ;       doVAR   ( -- a )
                                   1173 ;       Code for VARIABLE and CREATE.
      00057E 05 5F                 1174         .word      LINK
                           000580  1175 LINK	= . 
      000580 45                    1176 	.byte      COMPO+5
      000581 44 4F 56 41 52        1177         .ascii     "DOVAR"
      000586                       1178 DOVAR:
      000586 1D 00 02         [ 2] 1179 	SUBW X,#2
      000589 90 85            [ 2] 1180         POPW Y    ;get return addr (pfa)
      00058B 90 FE            [ 2] 1181         LDW Y,(Y) ; indirect address 
      00058D FF               [ 2] 1182         LDW (X),Y    ;push on stack
      00058E 81               [ 4] 1183         RET     ;go to RET of EXEC
                                   1184 
                                   1185 ;       BASE    ( -- a )
                                   1186 ;       Radix base for numeric I/O.
      00058F 05 80                 1187         .word      LINK        
                           000591  1188 LINK = . 
      000591 04                    1189         .byte      4
      000592 42 41 53 45           1190         .ascii     "BASE"
      000596                       1191 BASE:
      000596 90 AE 00 06      [ 2] 1192 	LDW Y,#UBASE 
      00059A 1D 00 02         [ 2] 1193 	SUBW X,#2
      00059D FF               [ 2] 1194         LDW (X),Y
      00059E 81               [ 4] 1195         RET
                                   1196 
                                   1197 ;       tmp     ( -- a )
                                   1198 ;       A temporary storage.
      00059F 05 91                 1199         .word      LINK
                                   1200         
                           0005A1  1201 LINK = . 
      0005A1 03                    1202 	.byte      3
      0005A2 54 4D 50              1203         .ascii     "TMP"
      0005A5                       1204 TEMP:
      0005A5 90 AE 00 08      [ 2] 1205 	LDW Y,#UTMP
      0005A9 1D 00 02         [ 2] 1206 	SUBW X,#2
      0005AC FF               [ 2] 1207         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005AD 81               [ 4] 1208         RET
                                   1209 
                                   1210 ;       >IN     ( -- a )
                                   1211 ;        Hold parsing pointer.
      0005AE 05 A1                 1212         .word      LINK
                           0005B0  1213 LINK = . 
      0005B0 03                    1214         .byte      3
      0005B1 3E 49 4E              1215         .ascii    ">IN"
      0005B4                       1216 INN:
      0005B4 90 AE 00 0A      [ 2] 1217 	LDW Y,#UINN 
      0005B8 1D 00 02         [ 2] 1218 	SUBW X,#2
      0005BB FF               [ 2] 1219         LDW (X),Y
      0005BC 81               [ 4] 1220         RET
                                   1221 
                                   1222 ;       #TIB    ( -- a )
                                   1223 ;       Count in terminal input buffer.
      0005BD 05 B0                 1224         .word      LINK
                           0005BF  1225 LINK = . 
      0005BF 04                    1226         .byte      4
      0005C0 23 54 49 42           1227         .ascii     "#TIB"
      0005C4                       1228 NTIB:
      0005C4 90 AE 00 0C      [ 2] 1229 	LDW Y,#UCTIB 
      0005C8 1D 00 02         [ 2] 1230 	SUBW X,#2
      0005CB FF               [ 2] 1231         LDW (X),Y
      0005CC 81               [ 4] 1232         RET
                                   1233 
                                   1234 ;       TBUF ( -- a )
                                   1235 ;       address of 128 bytes transaction buffer 
      0005CD 05 BF                 1236         .word LINK 
                           0005CF  1237         LINK=.
      0005CF 04                    1238         .byte 4 
      0005D0 54 42 55 46           1239         .ascii "TBUF"
      0005D4                       1240 TBUF:
      0005D4 90 AE 16 80      [ 2] 1241         ldw y,#ROWBUFF
      0005D8 1D 00 02         [ 2] 1242         subw x,#CELLL
      0005DB FF               [ 2] 1243         ldw (x),y 
      0005DC 81               [ 4] 1244         ret 
                                   1245 
                                   1246 ; systeme variable 
                                   1247 ; compilation destination 
                                   1248 ; TFLASH ( -- A )
      0005DD 05 CF                 1249         .word LINK 
                           0005DF  1250         LINK=.
      0005DF 06                    1251         .byte 6 
      0005E0 54 46 4C 41 53 48     1252         .ascii "TFLASH"         
      0005E6                       1253 TFLASH:
      0005E6 1D 00 02         [ 2] 1254         subw x,#CELLL 
      0005E9 90 AE 00 1E      [ 2] 1255         ldw y,#UTFLASH
      0005ED FF               [ 2] 1256         ldw (x),y 
      0005EE 81               [ 4] 1257         ret 
                                   1258 
                                   1259 ;       "EVAL   ( -- a )
                                   1260 ;       Execution vector of EVAL.
      0005EF 05 DF                 1261         .word      LINK
                           0005F1  1262 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005F1 05                    1263         .byte      5
      0005F2 27 45 56 41 4C        1264         .ascii     "'EVAL"
      0005F7                       1265 TEVAL:
      0005F7 90 AE 00 10      [ 2] 1266 	LDW Y,#UINTER 
      0005FB 1D 00 02         [ 2] 1267 	SUBW X,#2
      0005FE FF               [ 2] 1268         LDW (X),Y
      0005FF 81               [ 4] 1269         RET
                                   1270 
                                   1271 ;       HLD     ( -- a )
                                   1272 ;       Hold a pointer of output string.
      000600 05 F1                 1273         .word      LINK
                           000602  1274 LINK = . 
      000602 03                    1275         .byte      3
      000603 48 4C 44              1276         .ascii     "HLD"
      000606                       1277 HLD:
      000606 90 AE 00 12      [ 2] 1278 	LDW Y,#UHLD 
      00060A 1D 00 02         [ 2] 1279 	SUBW X,#2
      00060D FF               [ 2] 1280         LDW (X),Y
      00060E 81               [ 4] 1281         RET
                                   1282 
                                   1283 ;       CONTEXT ( -- a )
                                   1284 ;       Start vocabulary search.
      00060F 06 02                 1285         .word      LINK
                           000611  1286 LINK = . 
      000611 07                    1287         .byte      7
      000612 43 4F 4E 54 45 58 54  1288         .ascii     "CONTEXT"
      000619                       1289 CNTXT:
      000619 90 AE 00 14      [ 2] 1290 	LDW Y,#UCNTXT
      00061D 1D 00 02         [ 2] 1291 	SUBW X,#2
      000620 FF               [ 2] 1292         LDW (X),Y
      000621 81               [ 4] 1293         RET
                                   1294 
                                   1295 ;       VP      ( -- a )
                                   1296 ;       Point to top of variables
      000622 06 11                 1297         .word      LINK
                           000624  1298 LINK = . 
      000624 02                    1299         .byte      2
      000625 56 50                 1300         .ascii     "VP"
      000627                       1301 VPP:
      000627 90 AE 00 16      [ 2] 1302 	LDW Y,#UVP 
      00062B 1D 00 02         [ 2] 1303 	SUBW X,#2
      00062E FF               [ 2] 1304         LDW (X),Y
      00062F 81               [ 4] 1305         RET
                                   1306 
                                   1307 ;       CP    ( -- a )
                                   1308 ;       Pointer to top of FLASH 
      000630 06 24                 1309         .word LINK 
                           000632  1310         LINK=.
      000632 02                    1311         .byte 2 
      000633 43 50                 1312         .ascii "CP"
      000635                       1313 CPP: 
      000635 90 AE 00 18      [ 2] 1314         ldw y,#UCP 
      000639 1D 00 02         [ 2] 1315         subw x,#CELLL 
      00063C FF               [ 2] 1316         ldw (x),y 
      00063D 81               [ 4] 1317         ret                
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1318 
                                   1319 ;       LAST    ( -- a )
                                   1320 ;       Point to last name in dictionary.
      00063E 06 32                 1321         .word      LINK
                           000640  1322 LINK = . 
      000640 04                    1323         .byte      4
      000641 4C 41 53 54           1324         .ascii     "LAST"
      000645                       1325 LAST:
      000645 90 AE 00 1A      [ 2] 1326 	LDW Y,#ULAST 
      000649 1D 00 02         [ 2] 1327 	SUBW X,#2
      00064C FF               [ 2] 1328         LDW (X),Y
      00064D 81               [ 4] 1329         RET
                                   1330 
                                   1331 ; address of system variable URLAST 
                                   1332 ;       RAMLAST ( -- a )
                                   1333 ; RAM dictionary context 
      00064E 06 40                 1334         .word LINK 
                           000650  1335         LINK=. 
      000650 07                    1336         .byte 7  
      000651 52 41 4D 4C 41 53 54  1337         .ascii "RAMLAST" 
      000658                       1338 RAMLAST: 
      000658 90 AE 00 20      [ 2] 1339         ldw y,#URLAST 
      00065C 1D 00 02         [ 2] 1340         subw x,#CELLL 
      00065F FF               [ 2] 1341         ldw (x),y 
      000660 81               [ 4] 1342         ret 
                                   1343 
                                   1344 ; OFFSET ( -- a )
                                   1345 ; address of system variable OFFSET 
      000661 06 50                 1346         .word LINK 
                           000663  1347         LINK=.
      000663 06                    1348         .byte 6
      000664 4F 46 46 53 45 54     1349         .ascii "OFFSET" 
      00066A                       1350 OFFSET: 
      00066A 1D 00 02         [ 2] 1351         subw x,#CELLL
      00066D 90 AE 00 1C      [ 2] 1352         ldw y,#UOFFSET 
      000671 FF               [ 2] 1353         ldw (x),y 
      000672 81               [ 4] 1354         ret 
                                   1355 
                                   1356 ; adjust jump address adding OFFSET
                                   1357 ; ADR-ADJ ( a -- a+offset )
      000673                       1358 ADRADJ: 
      000673 CD 06 6A         [ 4] 1359         call OFFSET 
      000676 CD 04 32         [ 4] 1360         call AT 
      000679 CC 06 D4         [ 2] 1361         jp PLUS 
                                   1362 
                                   1363 
                                   1364 ;; Common functions
                                   1365 
                                   1366 ;       ?DUP    ( w -- w w | 0 )
                                   1367 ;       Dup tos if its is not zero.
      00067C 06 63                 1368         .word      LINK
                           00067E  1369 LINK = . 
      00067E 04                    1370         .byte      4
      00067F 3F 44 55 50           1371         .ascii     "?DUP"
      000683                       1372 QDUP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000683 90 93            [ 1] 1373         LDW Y,X
      000685 90 FE            [ 2] 1374 	LDW Y,(Y)
      000687 27 04            [ 1] 1375         JREQ     QDUP1
      000689 1D 00 02         [ 2] 1376 	SUBW X,#2
      00068C FF               [ 2] 1377         LDW (X),Y
      00068D 81               [ 4] 1378 QDUP1:  RET
                                   1379 
                                   1380 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1381 ;       Rot 3rd item to top.
      00068E 06 7E                 1382         .word      LINK
                           000690  1383 LINK = . 
      000690 03                    1384         .byte      3
      000691 52 4F 54              1385         .ascii     "ROT"
      000694                       1386 ROT:
      000694 90 93            [ 1] 1387         ldw y,x 
      000696 90 FE            [ 2] 1388         ldw y,(y)
      000698 90 89            [ 2] 1389         pushw y 
      00069A 90 93            [ 1] 1390         ldw y,x 
      00069C 90 EE 04         [ 2] 1391         ldw y,(4,y)
      00069F FF               [ 2] 1392         ldw (x),y 
      0006A0 90 93            [ 1] 1393         ldw y,x 
      0006A2 90 EE 02         [ 2] 1394         ldw y,(2,y)
      0006A5 EF 04            [ 2] 1395         ldw (4,x),y 
      0006A7 90 85            [ 2] 1396         popw y 
      0006A9 EF 02            [ 2] 1397         ldw (2,x),y
      0006AB 81               [ 4] 1398         ret 
                                   1399 
                                   1400 ;       2DROP   ( w w -- )
                                   1401 ;       Discard two items on stack.
      0006AC 06 90                 1402         .word      LINK
                           0006AE  1403 LINK = . 
      0006AE 05                    1404         .byte      5
      0006AF 32 44 52 4F 50        1405         .ascii     "2DROP"
      0006B4                       1406 DDROP:
      0006B4 1C 00 04         [ 2] 1407         ADDW X,#4
      0006B7 81               [ 4] 1408         RET
                                   1409 
                                   1410 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1411 ;       Duplicate top two items.
      0006B8 06 AE                 1412         .word      LINK
                           0006BA  1413 LINK = . 
      0006BA 04                    1414         .byte      4
      0006BB 32 44 55 50           1415         .ascii     "2DUP"
      0006BF                       1416 DDUP:
      0006BF 1D 00 04         [ 2] 1417         SUBW X,#4
      0006C2 90 93            [ 1] 1418         LDW Y,X
      0006C4 90 EE 06         [ 2] 1419         LDW Y,(6,Y)
      0006C7 EF 02            [ 2] 1420         LDW (2,X),Y
      0006C9 90 93            [ 1] 1421         LDW Y,X
      0006CB 90 EE 04         [ 2] 1422         LDW Y,(4,Y)
      0006CE FF               [ 2] 1423         LDW (X),Y
      0006CF 81               [ 4] 1424         RET
                                   1425 
                                   1426 ;       +       ( w w -- sum )
                                   1427 ;       Add top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006D0 06 BA                 1428         .word      LINK
                           0006D2  1429 LINK = . 
      0006D2 01                    1430         .byte      1
      0006D3 2B                    1431         .ascii     "+"
      0006D4                       1432 PLUS:
      0006D4 90 93            [ 1] 1433         LDW Y,X
      0006D6 90 FE            [ 2] 1434         LDW Y,(Y)
      0006D8 90 BF 24         [ 2] 1435         LDW YTEMP,Y
      0006DB 1C 00 02         [ 2] 1436         ADDW X,#2
      0006DE 90 93            [ 1] 1437         LDW Y,X
      0006E0 90 FE            [ 2] 1438         LDW Y,(Y)
      0006E2 72 B9 00 24      [ 2] 1439         ADDW Y,YTEMP
      0006E6 FF               [ 2] 1440         LDW (X),Y
      0006E7 81               [ 4] 1441         RET
                                   1442 
                                   1443 ;       NOT     ( w -- w )
                                   1444 ;       One's complement of tos.
      0006E8 06 D2                 1445         .word      LINK
                           0006EA  1446 LINK = . 
      0006EA 03                    1447         .byte      3
      0006EB 4E 4F 54              1448         .ascii     "NOT"
      0006EE                       1449 INVER:
      0006EE 90 93            [ 1] 1450         LDW Y,X
      0006F0 90 FE            [ 2] 1451         LDW Y,(Y)
      0006F2 90 53            [ 2] 1452         CPLW Y
      0006F4 FF               [ 2] 1453         LDW (X),Y
      0006F5 81               [ 4] 1454         RET
                                   1455 
                                   1456 ;       NEGATE  ( n -- -n )
                                   1457 ;       Two's complement of tos.
      0006F6 06 EA                 1458         .word      LINK
                           0006F8  1459 LINK = . 
      0006F8 06                    1460         .byte      6
      0006F9 4E 45 47 41 54 45     1461         .ascii     "NEGATE"
      0006FF                       1462 NEGAT:
      0006FF 90 93            [ 1] 1463         LDW Y,X
      000701 90 FE            [ 2] 1464         LDW Y,(Y)
      000703 90 50            [ 2] 1465         NEGW Y
      000705 FF               [ 2] 1466         LDW (X),Y
      000706 81               [ 4] 1467         RET
                                   1468 
                                   1469 ;       DNEGATE ( d -- -d )
                                   1470 ;       Two's complement of top double.
      000707 06 F8                 1471         .word      LINK
                           000709  1472 LINK = . 
      000709 07                    1473         .byte      7
      00070A 44 4E 45 47 41 54 45  1474         .ascii     "DNEGATE"
      000711                       1475 DNEGA:
      000711 90 93            [ 1] 1476         LDW Y,X
      000713 90 FE            [ 2] 1477 	LDW Y,(Y)
      000715 90 53            [ 2] 1478         CPLW Y     
      000717 90 BF 24         [ 2] 1479 	LDW YTEMP,Y
      00071A 90 93            [ 1] 1480         LDW Y,X
      00071C 90 EE 02         [ 2] 1481         LDW Y,(2,Y)
      00071F 90 53            [ 2] 1482         CPLW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000721 72 A9 00 01      [ 2] 1483         addw y,#1
      000725 EF 02            [ 2] 1484         LDW (2,X),Y
      000727 90 BE 24         [ 2] 1485         LDW Y,YTEMP
      00072A 24 02            [ 1] 1486         JRNC DN1 
      00072C 90 5C            [ 2] 1487         INCW Y
      00072E FF               [ 2] 1488 DN1:    LDW (X),Y
      00072F 81               [ 4] 1489         RET
                                   1490 
                                   1491 
                                   1492 ;       S>D ( n -- d )
                                   1493 ; convert single integer to double 
      000730 07 09                 1494         .word LINK 
                           000732  1495         LINK=. 
      000732 03                    1496         .byte 3 
      000733 53 3E 44              1497         .ascii "S>D"
      000736                       1498 STOD: 
      000736 1D 00 02         [ 2] 1499         subw x,#CELLL 
      000739 90 5F            [ 1] 1500         clrw y 
      00073B FF               [ 2] 1501         ldw (x),y 
      00073C 90 93            [ 1] 1502         ldw y,x 
      00073E 90 EE 02         [ 2] 1503         ldw y,(2,y)
      000741 2A 05            [ 1] 1504         jrpl 1$ 
      000743 90 AE FF FF      [ 2] 1505         ldw y,#-1
      000747 FF               [ 2] 1506         ldw (x),y 
      000748 81               [ 4] 1507 1$:     ret 
                                   1508 
                                   1509 
                                   1510 
                                   1511 
                                   1512 ;       -       ( n1 n2 -- n1-n2 )
                                   1513 ;       Subtraction.
      000749 07 32                 1514         .word      LINK
                           00074B  1515 LINK = . 
      00074B 01                    1516         .byte      1
      00074C 2D                    1517         .ascii     "-"
      00074D                       1518 SUBB:
      00074D 90 93            [ 1] 1519         LDW Y,X
      00074F 90 FE            [ 2] 1520         LDW Y,(Y)
      000751 90 BF 24         [ 2] 1521         LDW YTEMP,Y
      000754 1C 00 02         [ 2] 1522         ADDW X,#2
      000757 90 93            [ 1] 1523         LDW Y,X
      000759 90 FE            [ 2] 1524         LDW Y,(Y)
      00075B 72 B2 00 24      [ 2] 1525         SUBW Y,YTEMP
      00075F FF               [ 2] 1526         LDW (X),Y
      000760 81               [ 4] 1527         RET
                                   1528 
                                   1529 ;       ABS     ( n -- n )
                                   1530 ;       Return  absolute value of n.
      000761 07 4B                 1531         .word      LINK
                           000763  1532 LINK = . 
      000763 03                    1533         .byte      3
      000764 41 42 53              1534         .ascii     "ABS"
      000767                       1535 ABSS:
      000767 90 93            [ 1] 1536         LDW Y,X
      000769 90 FE            [ 2] 1537 	LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00076B 2A 03            [ 1] 1538         JRPL     AB1     ;negate:
      00076D 90 50            [ 2] 1539         NEGW     Y     ;else negate hi byte
      00076F FF               [ 2] 1540         LDW (X),Y
      000770 81               [ 4] 1541 AB1:    RET
                                   1542 
                                   1543 ;       =       ( w w -- t )
                                   1544 ;       Return true if top two are =al.
      000771 07 63                 1545         .word      LINK
                           000773  1546 LINK = . 
      000773 01                    1547         .byte      1
      000774 3D                    1548         .ascii     "="
      000775                       1549 EQUAL:
      000775 A6 FF            [ 1] 1550         LD A,#0xFF  ;true
      000777 90 93            [ 1] 1551         LDW Y,X    ;D = n2
      000779 90 FE            [ 2] 1552         LDW Y,(Y)
      00077B 90 BF 24         [ 2] 1553         LDW YTEMP,Y
      00077E 1C 00 02         [ 2] 1554         ADDW X,#2
      000781 90 93            [ 1] 1555         LDW Y,X
      000783 90 FE            [ 2] 1556         LDW Y,(Y)
      000785 90 B3 24         [ 2] 1557         CPW Y,YTEMP     ;if n2 <> n1
      000788 27 01            [ 1] 1558         JREQ     EQ1
      00078A 4F               [ 1] 1559         CLR A
      00078B F7               [ 1] 1560 EQ1:    LD (X),A
      00078C E7 01            [ 1] 1561         LD (1,X),A
      00078E 81               [ 4] 1562 	RET     
                                   1563 
                                   1564 ;       U<      ( u u -- t )
                                   1565 ;       Unsigned compare of top two items.
      00078F 07 73                 1566         .word      LINK
                           000791  1567 LINK = . 
      000791 02                    1568         .byte      2
      000792 55 3C                 1569         .ascii     "U<"
      000794                       1570 ULESS:
      000794 A6 FF            [ 1] 1571         LD A,#0xFF  ;true
      000796 90 93            [ 1] 1572         LDW Y,X    ;D = n2
      000798 90 FE            [ 2] 1573         LDW Y,(Y)
      00079A 90 BF 24         [ 2] 1574         LDW YTEMP,Y
      00079D 1C 00 02         [ 2] 1575         ADDW X,#2
      0007A0 90 93            [ 1] 1576         LDW Y,X
      0007A2 90 FE            [ 2] 1577         LDW Y,(Y)
      0007A4 90 B3 24         [ 2] 1578         CPW Y,YTEMP     ;if n2 <> n1
      0007A7 25 01            [ 1] 1579         JRULT     ULES1
      0007A9 4F               [ 1] 1580         CLR A
      0007AA F7               [ 1] 1581 ULES1:  LD (X),A
      0007AB E7 01            [ 1] 1582         LD (1,X),A
      0007AD 81               [ 4] 1583 	RET     
                                   1584 
                                   1585 ;       <       ( n1 n2 -- t )
                                   1586 ;       Signed compare of top two items.
      0007AE 07 91                 1587         .word      LINK
                           0007B0  1588 LINK = . 
      0007B0 01                    1589         .byte      1
      0007B1 3C                    1590         .ascii     "<"
      0007B2                       1591 LESS:
      0007B2 A6 FF            [ 1] 1592         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007B4 90 93            [ 1] 1593         LDW Y,X    ;D = n2
      0007B6 90 FE            [ 2] 1594         LDW Y,(Y)
      0007B8 90 BF 24         [ 2] 1595         LDW YTEMP,Y
      0007BB 1C 00 02         [ 2] 1596         ADDW X,#2
      0007BE 90 93            [ 1] 1597         LDW Y,X
      0007C0 90 FE            [ 2] 1598         LDW Y,(Y)
      0007C2 90 B3 24         [ 2] 1599         CPW Y,YTEMP     ;if n2 <> n1
      0007C5 2F 01            [ 1] 1600         JRSLT     LT1
      0007C7 4F               [ 1] 1601         CLR A
      0007C8 F7               [ 1] 1602 LT1:    LD (X),A
      0007C9 E7 01            [ 1] 1603         LD (1,X),A
      0007CB 81               [ 4] 1604 	RET     
                                   1605 
                                   1606 ;       MAX     ( n n -- n )
                                   1607 ;       Return greater of two top items.
      0007CC 07 B0                 1608         .word      LINK
                           0007CE  1609 LINK = . 
      0007CE 03                    1610         .byte      3
      0007CF 4D 41 58              1611         .ascii     "MAX"
      0007D2                       1612 MAX:
      0007D2 90 93            [ 1] 1613         LDW Y,X    ;D = n2
      0007D4 90 EE 02         [ 2] 1614         LDW Y,(2,Y)
      0007D7 90 BF 24         [ 2] 1615         LDW YTEMP,Y
      0007DA 90 93            [ 1] 1616         LDW Y,X
      0007DC 90 FE            [ 2] 1617         LDW Y,(Y)
      0007DE 90 B3 24         [ 2] 1618         CPW Y,YTEMP     ;if n2 <> n1
      0007E1 2F 02            [ 1] 1619         JRSLT     MAX1
      0007E3 EF 02            [ 2] 1620         LDW (2,X),Y
      0007E5 1C 00 02         [ 2] 1621 MAX1:   ADDW X,#2
      0007E8 81               [ 4] 1622 	RET     
                                   1623 
                                   1624 ;       MIN     ( n n -- n )
                                   1625 ;       Return smaller of top two items.
      0007E9 07 CE                 1626         .word      LINK
                           0007EB  1627 LINK = . 
      0007EB 03                    1628         .byte      3
      0007EC 4D 49 4E              1629         .ascii     "MIN"
      0007EF                       1630 MIN:
      0007EF 90 93            [ 1] 1631         LDW Y,X    ;D = n2
      0007F1 90 EE 02         [ 2] 1632         LDW Y,(2,Y)
      0007F4 90 BF 24         [ 2] 1633         LDW YTEMP,Y
      0007F7 90 93            [ 1] 1634         LDW Y,X
      0007F9 90 FE            [ 2] 1635         LDW Y,(Y)
      0007FB 90 B3 24         [ 2] 1636         CPW Y,YTEMP     ;if n2 <> n1
      0007FE 2C 02            [ 1] 1637         JRSGT     MIN1
      000800 EF 02            [ 2] 1638         LDW (2,X),Y
      000802 1C 00 02         [ 2] 1639 MIN1:	ADDW X,#2
      000805 81               [ 4] 1640 	RET     
                                   1641 
                                   1642 ;       WITHIN  ( u ul uh -- t )
                                   1643 ;       Return true if u is within
                                   1644 ;       range of ul and uh. ( ul <= u < uh )
      000806 07 EB                 1645         .word      LINK
                           000808  1646 LINK = . 
      000808 06                    1647         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000809 57 49 54 48 49 4E     1648         .ascii     "WITHIN"
      00080F                       1649 WITHI:
      00080F CD 05 03         [ 4] 1650         CALL     OVER
      000812 CD 07 4D         [ 4] 1651         CALL     SUBB
      000815 CD 04 A2         [ 4] 1652         CALL     TOR
      000818 CD 07 4D         [ 4] 1653         CALL     SUBB
      00081B CD 04 83         [ 4] 1654         CALL     RFROM
      00081E CC 07 94         [ 2] 1655         JP     ULESS
                                   1656 
                                   1657 ;; Divide
                                   1658 
                                   1659 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1660 ;       Unsigned divide of a double by a
                                   1661 ;       single. Return mod and quotient.
      000821 08 08                 1662         .word      LINK
                           000823  1663 LINK = . 
      000823 06                    1664         .byte      6
      000824 55 4D 2F 4D 4F 44     1665         .ascii     "UM/MOD"
      00082A                       1666 UMMOD:
      00082A BF 22            [ 2] 1667 	LDW XTEMP,X	; save stack pointer
      00082C FE               [ 2] 1668 	LDW X,(X)	; un
      00082D BF 24            [ 2] 1669 	LDW YTEMP,X     ; save un
      00082F 90 BE 22         [ 2] 1670 	LDW Y,XTEMP	; stack pointer
      000832 90 EE 04         [ 2] 1671 	LDW Y,(4,Y)     ; Y=udl
      000835 BE 22            [ 2] 1672 	LDW X,XTEMP
      000837 EE 02            [ 2] 1673 	LDW X,(2,X)	; X=udh
      000839 B3 24            [ 2] 1674 	CPW X,YTEMP
      00083B 23 0F            [ 2] 1675 	JRULE MMSM1
      00083D BE 22            [ 2] 1676 	LDW X,XTEMP
      00083F 1C 00 02         [ 2] 1677 	ADDW X,#2	; pop off 1 level
      000842 90 AE FF FF      [ 2] 1678 	LDW Y,#0xFFFF
      000846 FF               [ 2] 1679 	LDW (X),Y
      000847 90 5F            [ 1] 1680 	CLRW Y
      000849 EF 02            [ 2] 1681 	LDW (2,X),Y
      00084B 81               [ 4] 1682 	RET
      00084C                       1683 MMSM1:
                                   1684 ; take advantage of divw x,y when udh==0
      00084C 5D               [ 2] 1685         tnzw x  ; is udh==0?
      00084D 26 11            [ 1] 1686         jrne MMSM2 
      00084F 93               [ 1] 1687         ldw x,y    ;udl 
      000850 90 BE 24         [ 2] 1688         ldw y,YTEMP ; divisor 
      000853 65               [ 2] 1689         divw x,y 
      000854 89               [ 2] 1690         pushw x     ; quotient 
      000855 BE 22            [ 2] 1691         ldw x,XTEMP 
      000857 1C 00 02         [ 2] 1692         addw x,#CELLL 
      00085A EF 02            [ 2] 1693         ldw (2,x),y  ; ur
      00085C 90 85            [ 2] 1694         popw y 
      00085E FF               [ 2] 1695         ldw (x),y ; uq 
      00085F 81               [ 4] 1696         ret 
      000860                       1697 MMSM2:        
      000860 A6 11            [ 1] 1698 	LD A,#17	; loop count
      000862                       1699 MMSM3:
      000862 B3 24            [ 2] 1700 	CPW X,YTEMP	; compare udh to un
      000864 25 04            [ 1] 1701 	JRULT MMSM4	; can't subtract
      000866 72 B0 00 24      [ 2] 1702 	SUBW X,YTEMP	; can subtract
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00086A                       1703 MMSM4:
      00086A 8C               [ 1] 1704 	CCF	; quotient bit
      00086B 90 59            [ 2] 1705 	RLCW Y	; rotate into quotient
      00086D 59               [ 2] 1706 	RLCW X	; rotate into remainder
      00086E 4A               [ 1] 1707 	DEC A	; repeat
      00086F 22 F1            [ 1] 1708 	JRUGT MMSM3
      000871 56               [ 2] 1709         RRCW X 
      000872 BF 24            [ 2] 1710 	LDW YTEMP,X	; done, save remainder
      000874 BE 22            [ 2] 1711 	LDW X,XTEMP
      000876 1C 00 02         [ 2] 1712 	ADDW X,#2	; drop
      000879 FF               [ 2] 1713 	LDW (X),Y
      00087A 90 BE 24         [ 2] 1714 	LDW Y,YTEMP	; save quotient
      00087D EF 02            [ 2] 1715 	LDW (2,X),Y
      00087F 81               [ 4] 1716 	RET
                                   1717 	
                                   1718 ;       M/MOD   ( d n -- r q )
                                   1719 ;       Signed floored divide of double by
                                   1720 ;       single. Return mod and quotient.
      000880 08 23                 1721         .word      LINK
                           000882  1722 LINK = . 
      000882 05                    1723         .byte      5
      000883 4D 2F 4D 4F 44        1724         .ascii     "M/MOD"
      000888                       1725 MSMOD:  
      000888 CD 04 D9         [ 4] 1726         CALL	DUPP
      00088B CD 05 12         [ 4] 1727         CALL	ZLESS
      00088E CD 04 D9         [ 4] 1728         CALL	DUPP
      000891 CD 04 A2         [ 4] 1729         CALL	TOR
      000894 CD 03 E7         [ 4] 1730         CALL	QBRAN
      000897 08 A5                 1731         .word	MMOD1
      000899 CD 06 FF         [ 4] 1732         CALL	NEGAT
      00089C CD 04 A2         [ 4] 1733         CALL	TOR
      00089F CD 07 11         [ 4] 1734         CALL	DNEGA
      0008A2 CD 04 83         [ 4] 1735         CALL	RFROM
      0008A5 CD 04 A2         [ 4] 1736 MMOD1:	CALL	TOR
      0008A8 CD 04 D9         [ 4] 1737         CALL	DUPP
      0008AB CD 05 12         [ 4] 1738         CALL	ZLESS
      0008AE CD 03 E7         [ 4] 1739         CALL	QBRAN
      0008B1 08 B9                 1740         .word	MMOD2
      0008B3 CD 04 96         [ 4] 1741         CALL	RAT
      0008B6 CD 06 D4         [ 4] 1742         CALL	PLUS
      0008B9 CD 04 83         [ 4] 1743 MMOD2:	CALL	RFROM
      0008BC CD 08 2A         [ 4] 1744         CALL	UMMOD
      0008BF CD 04 83         [ 4] 1745         CALL	RFROM
      0008C2 CD 03 E7         [ 4] 1746         CALL	QBRAN
      0008C5 08 D0                 1747         .word	MMOD3
      0008C7 CD 04 E9         [ 4] 1748         CALL	SWAPP
      0008CA CD 06 FF         [ 4] 1749         CALL	NEGAT
      0008CD CD 04 E9         [ 4] 1750         CALL	SWAPP
      0008D0 81               [ 4] 1751 MMOD3:	RET
                                   1752 
                                   1753 ;       /MOD    ( n n -- r q )
                                   1754 ;       Signed divide. Return mod and quotient.
      0008D1 08 82                 1755         .word      LINK
                           0008D3  1756 LINK = . 
      0008D3 04                    1757         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008D4 2F 4D 4F 44           1758         .ascii     "/MOD"
      0008D8                       1759 SLMOD:
      0008D8 CD 05 03         [ 4] 1760         CALL	OVER
      0008DB CD 05 12         [ 4] 1761         CALL	ZLESS
      0008DE CD 04 E9         [ 4] 1762         CALL	SWAPP
      0008E1 CC 08 88         [ 2] 1763         JP	MSMOD
                                   1764 
                                   1765 ;       MOD     ( n n -- r )
                                   1766 ;       Signed divide. Return mod only.
      0008E4 08 D3                 1767         .word      LINK
                           0008E6  1768 LINK = . 
      0008E6 03                    1769         .byte      3
      0008E7 4D 4F 44              1770         .ascii     "MOD"
      0008EA                       1771 MODD:
      0008EA CD 08 D8         [ 4] 1772 	CALL	SLMOD
      0008ED CC 04 CF         [ 2] 1773 	JP	DROP
                                   1774 
                                   1775 ;       /       ( n n -- q )
                                   1776 ;       Signed divide. Return quotient only.
      0008F0 08 E6                 1777         .word      LINK
                           0008F2  1778 LINK = . 
      0008F2 01                    1779         .byte      1
      0008F3 2F                    1780         .ascii     "/"
      0008F4                       1781 SLASH:
      0008F4 CD 08 D8         [ 4] 1782         CALL	SLMOD
      0008F7 CD 04 E9         [ 4] 1783         CALL	SWAPP
      0008FA CC 04 CF         [ 2] 1784         JP	DROP
                                   1785 
                                   1786 ;; Multiply
                                   1787 
                                   1788 ;       UM*     ( u u -- ud )
                                   1789 ;       Unsigned multiply. Return double product.
      0008FD 08 F2                 1790         .word      LINK
                           0008FF  1791 LINK = . 
      0008FF 03                    1792         .byte      3
      000900 55 4D 2A              1793         .ascii     "UM*"
      000903                       1794 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1795 ; take advantage of SP addressing modes
                                   1796 ; these PRODx in RAM are not required
                                   1797 ; the product is kept on stack as local variable 
                                   1798         ;; bytes offset on data stack 
                           000002  1799         da=2 
                           000003  1800         db=3 
                           000000  1801         dc=0 
                           000001  1802         dd=1 
                                   1803         ;; product bytes offset on return stack 
                           000001  1804         UD1=1  ; ud bits 31..24
                           000002  1805         UD2=2  ; ud bits 23..16
                           000003  1806         UD3=3  ; ud bits 15..8 
                           000004  1807         UD4=4  ; ud bits 7..0 
                                   1808         ;; local variable for product set to zero   
      000903 90 5F            [ 1] 1809         clrw y 
      000905 90 89            [ 2] 1810         pushw y  ; bits 15..0
      000907 90 89            [ 2] 1811         pushw y  ; bits 31..16 
      000909 E6 03            [ 1] 1812         ld a,(db,x) ; b 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00090B 90 97            [ 1] 1813         ld yl,a 
      00090D E6 01            [ 1] 1814         ld a,(dd,x)   ; d
      00090F 90 42            [ 4] 1815         mul y,a    ; b*d  
      000911 17 03            [ 2] 1816         ldw (UD3,sp),y ; lowest weight product 
      000913 E6 03            [ 1] 1817         ld a,(db,x)
      000915 90 97            [ 1] 1818         ld yl,a 
      000917 E6 00            [ 1] 1819         ld a,(dc,x)
      000919 90 42            [ 4] 1820         mul y,a  ; b*c 
                                   1821         ;;; do the partial sum 
      00091B 72 F9 02         [ 2] 1822         addw y,(UD2,sp)
      00091E 4F               [ 1] 1823         clr a 
      00091F 49               [ 1] 1824         rlc a
      000920 6B 01            [ 1] 1825         ld (UD1,sp),a 
      000922 17 02            [ 2] 1826         ldw (UD2,sp),y 
      000924 E6 02            [ 1] 1827         ld a,(da,x)
      000926 90 97            [ 1] 1828         ld yl,a 
      000928 E6 01            [ 1] 1829         ld a,(dd,x)
      00092A 90 42            [ 4] 1830         mul y,a   ; a*d 
                                   1831         ;; do partial sum 
      00092C 72 F9 02         [ 2] 1832         addw y,(UD2,sp)
      00092F 4F               [ 1] 1833         clr a 
      000930 19 01            [ 1] 1834         adc a,(UD1,sp)
      000932 6B 01            [ 1] 1835         ld (UD1,sp),a  
      000934 17 02            [ 2] 1836         ldw (UD2,sp),y 
      000936 E6 02            [ 1] 1837         ld a,(da,x)
      000938 90 97            [ 1] 1838         ld yl,a 
      00093A E6 00            [ 1] 1839         ld a,(dc,x)
      00093C 90 42            [ 4] 1840         mul y,a  ;  a*c highest weight product 
                                   1841         ;;; do partial sum 
      00093E 72 F9 01         [ 2] 1842         addw y,(UD1,sp)
      000941 FF               [ 2] 1843         ldw (x),y  ; udh 
      000942 16 03            [ 2] 1844         ldw y,(UD3,sp)
      000944 EF 02            [ 2] 1845         ldw (2,x),y  ; udl  
      000946 5B 04            [ 2] 1846         addw sp,#4 ; drop local variable 
      000948 81               [ 4] 1847         ret  
                                   1848 
                                   1849 
                                   1850 ;       *       ( n n -- n )
                                   1851 ;       Signed multiply. Return single product.
      000949 08 FF                 1852         .word      LINK
                           00094B  1853 LINK = . 
      00094B 01                    1854         .byte      1
      00094C 2A                    1855         .ascii     "*"
      00094D                       1856 STAR:
      00094D CD 09 03         [ 4] 1857 	CALL	UMSTA
      000950 CC 04 CF         [ 2] 1858 	JP	DROP
                                   1859 
                                   1860 ;       M*      ( n n -- d )
                                   1861 ;       Signed multiply. Return double product.
      000953 09 4B                 1862         .word      LINK
                           000955  1863 LINK = . 
      000955 02                    1864         .byte      2
      000956 4D 2A                 1865         .ascii     "M*"
      000958                       1866 MSTAR:      
      000958 CD 06 BF         [ 4] 1867         CALL	DDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00095B CD 05 4E         [ 4] 1868         CALL	XORR
      00095E CD 05 12         [ 4] 1869         CALL	ZLESS
      000961 CD 04 A2         [ 4] 1870         CALL	TOR
      000964 CD 07 67         [ 4] 1871         CALL	ABSS
      000967 CD 04 E9         [ 4] 1872         CALL	SWAPP
      00096A CD 07 67         [ 4] 1873         CALL	ABSS
      00096D CD 09 03         [ 4] 1874         CALL	UMSTA
      000970 CD 04 83         [ 4] 1875         CALL	RFROM
      000973 CD 03 E7         [ 4] 1876         CALL	QBRAN
      000976 09 7B                 1877         .word	MSTA1
      000978 CD 07 11         [ 4] 1878         CALL	DNEGA
      00097B 81               [ 4] 1879 MSTA1:	RET
                                   1880 
                                   1881 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1882 ;       Multiply n1 and n2, then divide
                                   1883 ;       by n3. Return mod and quotient.
      00097C 09 55                 1884         .word      LINK
                           00097E  1885 LINK = . 
      00097E 05                    1886         .byte      5
      00097F 2A 2F 4D 4F 44        1887         .ascii     "*/MOD"
      000984                       1888 SSMOD:
      000984 CD 04 A2         [ 4] 1889         CALL     TOR
      000987 CD 09 58         [ 4] 1890         CALL     MSTAR
      00098A CD 04 83         [ 4] 1891         CALL     RFROM
      00098D CC 08 88         [ 2] 1892         JP     MSMOD
                                   1893 
                                   1894 ;       */      ( n1 n2 n3 -- q )
                                   1895 ;       Multiply n1 by n2, then divide
                                   1896 ;       by n3. Return quotient only.
      000990 09 7E                 1897         .word      LINK
                           000992  1898 LINK = . 
      000992 02                    1899         .byte      2
      000993 2A 2F                 1900         .ascii     "*/"
      000995                       1901 STASL:
      000995 CD 09 84         [ 4] 1902         CALL	SSMOD
      000998 CD 04 E9         [ 4] 1903         CALL	SWAPP
      00099B CC 04 CF         [ 2] 1904         JP	DROP
                                   1905 
                                   1906 ;; Miscellaneous
                                   1907 
                                   1908 ;       CELL+   ( a -- a )
                                   1909 ;       Add cell size in byte to address.
      00099E 09 92                 1910         .word      LINK
                           0009A0  1911 LINK = . 
      0009A0 02                    1912         .byte       2
      0009A1 32 2B                 1913         .ascii     "2+"
      0009A3                       1914 CELLP:
      0009A3 90 93            [ 1] 1915         LDW Y,X
      0009A5 90 FE            [ 2] 1916 	LDW Y,(Y)
      0009A7 72 A9 00 02      [ 2] 1917         ADDW Y,#CELLL 
      0009AB FF               [ 2] 1918         LDW (X),Y
      0009AC 81               [ 4] 1919         RET
                                   1920 
                                   1921 ;       CELL-   ( a -- a )
                                   1922 ;       Subtract 2 from address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009AD 09 A0                 1923         .word      LINK
                           0009AF  1924 LINK = . 
      0009AF 02                    1925         .byte       2
      0009B0 32 2D                 1926         .ascii     "2-"
      0009B2                       1927 CELLM:
      0009B2 90 93            [ 1] 1928         LDW Y,X
      0009B4 90 FE            [ 2] 1929 	LDW Y,(Y)
      0009B6 72 A2 00 02      [ 2] 1930         SUBW Y,#CELLL
      0009BA FF               [ 2] 1931         LDW (X),Y
      0009BB 81               [ 4] 1932         RET
                                   1933 
                                   1934 ;       CELLS   ( n -- n )
                                   1935 ;       Multiply tos by 2.
      0009BC 09 AF                 1936         .word      LINK
                           0009BE  1937 LINK = . 
      0009BE 02                    1938         .byte       2
      0009BF 32 2A                 1939         .ascii     "2*"
      0009C1                       1940 CELLS:
      0009C1 90 93            [ 1] 1941         LDW Y,X
      0009C3 90 FE            [ 2] 1942 	LDW Y,(Y)
      0009C5 90 58            [ 2] 1943         SLAW Y
      0009C7 FF               [ 2] 1944         LDW (X),Y
      0009C8 81               [ 4] 1945         RET
                                   1946 
                                   1947 ;       1+      ( a -- a )
                                   1948 ;       Add cell size in byte to address.
      0009C9 09 BE                 1949         .word      LINK
                           0009CB  1950 LINK = . 
      0009CB 02                    1951         .byte      2
      0009CC 31 2B                 1952         .ascii     "1+"
      0009CE                       1953 ONEP:
      0009CE 90 93            [ 1] 1954         LDW Y,X
      0009D0 90 FE            [ 2] 1955 	LDW Y,(Y)
      0009D2 90 5C            [ 2] 1956         INCW Y
      0009D4 FF               [ 2] 1957         LDW (X),Y
      0009D5 81               [ 4] 1958         RET
                                   1959 
                                   1960 ;       1-      ( a -- a )
                                   1961 ;       Subtract 2 from address.
      0009D6 09 CB                 1962         .word      LINK
                           0009D8  1963 LINK = . 
      0009D8 02                    1964         .byte      2
      0009D9 31 2D                 1965         .ascii     "1-"
      0009DB                       1966 ONEM:
      0009DB 90 93            [ 1] 1967         LDW Y,X
      0009DD 90 FE            [ 2] 1968 	LDW Y,(Y)
      0009DF 90 5A            [ 2] 1969         DECW Y
      0009E1 FF               [ 2] 1970         LDW (X),Y
      0009E2 81               [ 4] 1971         RET
                                   1972 
                                   1973 ;  shift left n times 
                                   1974 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009E3 09 D8                 1975         .word LINK 
                           0009E5  1976         LINK=.
      0009E5 06                    1977         .byte 6 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009E6 4C 53 48 49 46 54     1978         .ascii "LSHIFT"
      0009EC                       1979 LSHIFT:
      0009EC E6 01            [ 1] 1980         ld a,(1,x)
      0009EE 1C 00 02         [ 2] 1981         addw x,#CELLL 
      0009F1 90 93            [ 1] 1982         ldw y,x 
      0009F3 90 FE            [ 2] 1983         ldw y,(y)
      0009F5                       1984 LSHIFT1:
      0009F5 4D               [ 1] 1985         tnz a 
      0009F6 27 05            [ 1] 1986         jreq LSHIFT4 
      0009F8 90 58            [ 2] 1987         sllw y 
      0009FA 4A               [ 1] 1988         dec a 
      0009FB 20 F8            [ 2] 1989         jra LSHIFT1 
      0009FD                       1990 LSHIFT4:
      0009FD FF               [ 2] 1991         ldw (x),y 
      0009FE 81               [ 4] 1992         ret 
                                   1993 
                                   1994 ; shift right n times                 
                                   1995 ; RSHIFT (n1 n2 -- n1>>n2 )
      0009FF 09 E5                 1996         .word LINK 
                           000A01  1997         LINK=.
      000A01 06                    1998         .byte 6
      000A02 52 53 48 49 46 54     1999         .ascii "RSHIFT"
      000A08                       2000 RSHIFT:
      000A08 E6 01            [ 1] 2001         ld a,(1,x)
      000A0A 1C 00 02         [ 2] 2002         addw x,#CELLL 
      000A0D 90 93            [ 1] 2003         ldw y,x 
      000A0F 90 FE            [ 2] 2004         ldw y,(y)
      000A11                       2005 RSHIFT1:
      000A11 4D               [ 1] 2006         tnz a 
      000A12 27 05            [ 1] 2007         jreq RSHIFT4 
      000A14 90 54            [ 2] 2008         srlw y 
      000A16 4A               [ 1] 2009         dec a 
      000A17 20 F8            [ 2] 2010         jra RSHIFT1 
      000A19                       2011 RSHIFT4:
      000A19 FF               [ 2] 2012         ldw (x),y 
      000A1A 81               [ 4] 2013         ret 
                                   2014 
                                   2015 
                                   2016 ;       2/      ( n -- n )
                                   2017 ;       divide  tos by 2.
      000A1B 0A 01                 2018         .word      LINK
                           000A1D  2019 LINK = . 
      000A1D 02                    2020         .byte      2
      000A1E 32 2F                 2021         .ascii     "2/"
      000A20                       2022 TWOSL:
      000A20 90 93            [ 1] 2023         LDW Y,X
      000A22 90 FE            [ 2] 2024 	LDW Y,(Y)
      000A24 90 57            [ 2] 2025         SRAW Y
      000A26 FF               [ 2] 2026         LDW (X),Y
      000A27 81               [ 4] 2027         RET
                                   2028 
                                   2029 ;       BL      ( -- 32 )
                                   2030 ;       Return 32,  blank character.
      000A28 0A 1D                 2031         .word      LINK
                           000A2A  2032 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A2A 02                    2033         .byte      2
      000A2B 42 4C                 2034         .ascii     "BL"
      000A2D                       2035 BLANK:
      000A2D 1D 00 02         [ 2] 2036         SUBW X,#2
      000A30 90 AE 00 20      [ 2] 2037 	LDW Y,#32
      000A34 FF               [ 2] 2038         LDW (X),Y
      000A35 81               [ 4] 2039         RET
                                   2040 
                                   2041 ;         0     ( -- 0)
                                   2042 ;         Return 0.
      000A36 0A 2A                 2043         .word      LINK
                           000A38  2044 LINK = . 
      000A38 01                    2045         .byte       1
      000A39 30                    2046         .ascii     "0"
      000A3A                       2047 ZERO:
      000A3A 1D 00 02         [ 2] 2048         SUBW X,#2
      000A3D 90 5F            [ 1] 2049 	CLRW Y
      000A3F FF               [ 2] 2050         LDW (X),Y
      000A40 81               [ 4] 2051         RET
                                   2052 
                                   2053 ;         1     ( -- 1)
                                   2054 ;         Return 1.
      000A41 0A 38                 2055         .word      LINK
                           000A43  2056 LINK = . 
      000A43 01                    2057         .byte       1
      000A44 31                    2058         .ascii     "1"
      000A45                       2059 ONE:
      000A45 1D 00 02         [ 2] 2060         SUBW X,#2
      000A48 90 AE 00 01      [ 2] 2061 	LDW Y,#1
      000A4C FF               [ 2] 2062         LDW (X),Y
      000A4D 81               [ 4] 2063         RET
                                   2064 
                                   2065 ;         -1    ( -- -1)
                                   2066 ;         Return 32,  blank character.
      000A4E 0A 43                 2067         .word      LINK
                           000A50  2068 LINK = . 
      000A50 02                    2069         .byte       2
      000A51 2D 31                 2070         .ascii     "-1"
      000A53                       2071 MONE:
      000A53 1D 00 02         [ 2] 2072         SUBW X,#2
      000A56 90 AE FF FF      [ 2] 2073 	LDW Y,#0xFFFF
      000A5A FF               [ 2] 2074         LDW (X),Y
      000A5B 81               [ 4] 2075         RET
                                   2076 
                                   2077 ;       >CHAR   ( c -- c )
                                   2078 ;       Filter non-printing characters.
      000A5C 0A 50                 2079         .word      LINK
                           000A5E  2080 LINK = . 
      000A5E 05                    2081         .byte      5
      000A5F 3E 43 48 41 52        2082         .ascii     ">CHAR"
      000A64                       2083 TCHAR:
      000A64 E6 01            [ 1] 2084         ld a,(1,x)
      000A66 A1 20            [ 1] 2085         cp a,#32  
      000A68 2B 05            [ 1] 2086         jrmi 1$ 
      000A6A A1 7F            [ 1] 2087         cp a,#127 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A6C 2A 01            [ 1] 2088         jrpl 1$ 
      000A6E 81               [ 4] 2089         ret 
      000A6F A6 5F            [ 1] 2090 1$:     ld a,#'_ 
      000A71 E7 01            [ 1] 2091         ld (1,x),a 
      000A73 81               [ 4] 2092         ret 
                                   2093 
                                   2094 ;       DEPTH   ( -- n )
                                   2095 ;       Return  depth of  data stack.
      000A74 0A 5E                 2096         .word      LINK
                           000A76  2097 LINK = . 
      000A76 05                    2098         .byte      5
      000A77 44 45 50 54 48        2099         .ascii     "DEPTH"
      000A7C                       2100 DEPTH: 
      000A7C 90 BE 2A         [ 2] 2101         LDW Y,SP0    ;save data stack ptr
      000A7F BF 22            [ 2] 2102 	LDW XTEMP,X
      000A81 72 B2 00 22      [ 2] 2103         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A85 90 57            [ 2] 2104         SRAW Y    ;Y = #stack items
      000A87 1D 00 02         [ 2] 2105 	SUBW X,#2
      000A8A FF               [ 2] 2106         LDW (X),Y     ; if neg, underflow
      000A8B 81               [ 4] 2107         RET
                                   2108 
                                   2109 ;       PICK    ( ... +n -- ... w )
                                   2110 ;       Copy  nth stack item to tos.
      000A8C 0A 76                 2111         .word      LINK
                           000A8E  2112 LINK = . 
      000A8E 04                    2113         .byte      4
      000A8F 50 49 43 4B           2114         .ascii     "PICK"
      000A93                       2115 PICK:
      000A93 90 93            [ 1] 2116         LDW Y,X   ;D = n1
      000A95 90 FE            [ 2] 2117         LDW Y,(Y)
                                   2118 ; modified for standard compliance          
                                   2119 ; 0 PICK must be equivalent to DUP 
      000A97 90 5C            [ 2] 2120         INCW Y 
      000A99 90 58            [ 2] 2121         SLAW Y
      000A9B BF 22            [ 2] 2122         LDW XTEMP,X
      000A9D 72 B9 00 22      [ 2] 2123         ADDW Y,XTEMP
      000AA1 90 FE            [ 2] 2124         LDW Y,(Y)
      000AA3 FF               [ 2] 2125         LDW (X),Y
      000AA4 81               [ 4] 2126         RET
                                   2127 
                                   2128 ;; Memory access
                                   2129 
                                   2130 ;       +!      ( n a -- )
                                   2131 ;       Add n to  contents at address a.
      000AA5 0A 8E                 2132         .word      LINK
                           000AA7  2133 LINK = . 
      000AA7 02                    2134         .byte      2
      000AA8 2B 21                 2135         .ascii     "+!"
      000AAA                       2136 PSTOR:
      000AAA 90 93            [ 1] 2137         ldw y,x 
      000AAC 90 FE            [ 2] 2138         ldw y,(y)
      000AAE 90 BF 24         [ 2] 2139         ldw YTEMP,y  ; address
      000AB1 90 FE            [ 2] 2140         ldw y,(y)  
      000AB3 90 89            [ 2] 2141         pushw y  ; value at address 
      000AB5 90 93            [ 1] 2142         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AB7 90 EE 02         [ 2] 2143         ldw y,(2,y) ; n 
      000ABA 72 F9 01         [ 2] 2144         addw y,(1,sp) ; n+value
      000ABD 91 CF 24         [ 5] 2145         ldw [YTEMP],y ;  a!
      000AC0 90 85            [ 2] 2146         popw y    ;drop local var
      000AC2 1C 00 04         [ 2] 2147         addw x,#4 ; DDROP 
      000AC5 81               [ 4] 2148         ret 
                                   2149 
                                   2150 ;       2!      ( d a -- )
                                   2151 ;       Store  double integer to address a.
      000AC6 0A A7                 2152         .word      LINK
                           000AC8  2153 LINK = . 
      000AC8 02                    2154         .byte      2
      000AC9 32 21                 2155         .ascii     "2!"
      000ACB                       2156 DSTOR:
      000ACB 90 93            [ 1] 2157         ldw y,x 
      000ACD 90 FE            [ 2] 2158         ldw y,(y)
      000ACF 90 BF 24         [ 2] 2159         ldw YTEMP,y ; address 
      000AD2 1C 00 02         [ 2] 2160         addw x,#CELLL ; drop a 
      000AD5 90 93            [ 1] 2161         ldw y,x 
      000AD7 90 FE            [ 2] 2162         ldw y,(y) ; hi word 
      000AD9 89               [ 2] 2163         pushw x 
      000ADA EE 02            [ 2] 2164         ldw x,(2,x) ; lo word 
      000ADC 91 CF 24         [ 5] 2165         ldw [YTEMP],y
      000ADF 90 93            [ 1] 2166         ldw y,x 
      000AE1 AE 00 02         [ 2] 2167         ldw x,#2 
      000AE4 92 DF 24         [ 5] 2168         ldw ([YTEMP],x),y 
      000AE7 85               [ 2] 2169         popw x 
      000AE8 1C 00 04         [ 2] 2170         addw x,#4 ; DDROP 
      000AEB 81               [ 4] 2171         ret 
                                   2172 
                                   2173 ;       2@      ( a -- d )
                                   2174 ;       Fetch double integer from address a.
      000AEC 0A C8                 2175         .word      LINK
                           000AEE  2176 LINK = . 
      000AEE 02                    2177         .byte      2
      000AEF 32 40                 2178         .ascii     "2@"
      000AF1                       2179 DAT:
      000AF1 90 93            [ 1] 2180         ldw y,x 
      000AF3 90 FE            [ 2] 2181         ldw y,(y) ;address 
      000AF5 90 BF 24         [ 2] 2182         ldw YTEMP,y 
      000AF8 1D 00 02         [ 2] 2183         subw x,#CELLL ; space for udh 
      000AFB 91 CE 24         [ 5] 2184         ldw y,[YTEMP] ; udh 
      000AFE FF               [ 2] 2185         ldw (x),y 
      000AFF 90 AE 00 02      [ 2] 2186         ldw y,#2
      000B03 91 DE 24         [ 5] 2187         ldw y,([YTEMP],y) ; udl 
      000B06 EF 02            [ 2] 2188         ldw (2,x),y
      000B08 81               [ 4] 2189         ret 
                                   2190 
                                   2191 ;       COUNT   ( b -- b +n )
                                   2192 ;       Return count byte of a string
                                   2193 ;       and add 1 to byte address.
      000B09 0A EE                 2194         .word      LINK
                           000B0B  2195 LINK = . 
      000B0B 05                    2196         .byte      5
      000B0C 43 4F 55 4E 54        2197         .ascii     "COUNT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B11                       2198 COUNT:
      000B11 90 93            [ 1] 2199         ldw y,x 
      000B13 90 FE            [ 2] 2200         ldw y,(y) ; address 
      000B15 90 F6            [ 1] 2201         ld a,(y)  ; count 
      000B17 90 5C            [ 2] 2202         incw y 
      000B19 FF               [ 2] 2203         ldw (x),y 
      000B1A 1D 00 02         [ 2] 2204         subw x,#CELLL 
      000B1D E7 01            [ 1] 2205         ld (1,x),a 
      000B1F 7F               [ 1] 2206         clr (x)
      000B20 81               [ 4] 2207         ret 
                                   2208 
                                   2209 ;       HERE    ( -- a )
                                   2210 ;       Return  top of  variables
      000B21 0B 0B                 2211         .word      LINK
                           000B23  2212 LINK = . 
      000B23 04                    2213         .byte      4
      000B24 48 45 52 45           2214         .ascii     "HERE"
      000B28                       2215 HERE:
      000B28 90 AE 00 16      [ 2] 2216       	ldw y,#UVP 
      000B2C 90 FE            [ 2] 2217         ldw y,(y)
      000B2E 1D 00 02         [ 2] 2218         subw x,#CELLL 
      000B31 FF               [ 2] 2219         ldw (x),y 
      000B32 81               [ 4] 2220         ret 
                                   2221 
                                   2222 ;       PAD     ( -- a )
                                   2223 ;       Return address of text buffer
                                   2224 ;       above  code dictionary.
      000B33 0B 23                 2225         .word      LINK
                           000B35  2226 LINK = . 
      000B35 03                    2227         .byte      3
      000B36 50 41 44              2228         .ascii     "PAD"
      000B39                       2229 PAD:
      000B39 CD 0B 28         [ 4] 2230         CALL     HERE
      000B3C CD 03 B4         [ 4] 2231         CALL     DOLIT
      000B3F 00 50                 2232         .word      80
      000B41 CC 06 D4         [ 2] 2233         JP     PLUS
                                   2234 
                                   2235 ;       TIB     ( -- a )
                                   2236 ;       Return address of terminal input buffer.
      000B44 0B 35                 2237         .word      LINK
                           000B46  2238 LINK = . 
      000B46 03                    2239         .byte      3
      000B47 54 49 42              2240         .ascii     "TIB"
      000B4A                       2241 TIB:
      000B4A CD 05 C4         [ 4] 2242         CALL     NTIB
      000B4D CD 09 A3         [ 4] 2243         CALL     CELLP
      000B50 CC 04 32         [ 2] 2244         JP     AT
                                   2245 
                                   2246 ;       @EXECUTE        ( a -- )
                                   2247 ;       Execute vector stored in address a.
      000B53 0B 46                 2248         .word      LINK
                           000B55  2249 LINK = . 
      000B55 08                    2250         .byte      8
      000B56 40 45 58 45 43 55 54  2251         .ascii     "@EXECUTE"
             45
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B5E                       2252 ATEXE:
      000B5E CD 04 32         [ 4] 2253         CALL     AT
      000B61 CD 06 83         [ 4] 2254         CALL     QDUP    ;?address or zero
      000B64 CD 03 E7         [ 4] 2255         CALL     QBRAN
      000B67 0B 6C                 2256         .word      EXE1
      000B69 CD 04 0E         [ 4] 2257         CALL     EXECU   ;execute if non-zero
      000B6C 81               [ 4] 2258 EXE1:   RET     ;do nothing if zero
                                   2259 
                                   2260 ;       CMOVE   ( b1 b2 u -- )
                                   2261 ;       Copy u bytes from b1 to b2.
      000B6D 0B 55                 2262         .word      LINK
                           000B6F  2263 LINK = . 
      000B6F 05                    2264         .byte      5
      000B70 43 4D 4F 56 45        2265         .ascii     "CMOVE"
      000B75                       2266 CMOVE:
      000B75 CD 04 A2         [ 4] 2267         CALL	TOR
      000B78 CD 03 FE         [ 4] 2268         CALL	BRAN
      000B7B 0B 95                 2269         .word	CMOV2
      000B7D CD 04 A2         [ 4] 2270 CMOV1:	CALL	TOR
      000B80 CD 04 D9         [ 4] 2271         CALL	DUPP
      000B83 CD 04 50         [ 4] 2272         CALL	CAT
      000B86 CD 04 96         [ 4] 2273         CALL	RAT
      000B89 CD 04 3F         [ 4] 2274         CALL	CSTOR
      000B8C CD 09 CE         [ 4] 2275         CALL	ONEP
      000B8F CD 04 83         [ 4] 2276         CALL	RFROM
      000B92 CD 09 CE         [ 4] 2277         CALL	ONEP
      000B95 CD 03 C8         [ 4] 2278 CMOV2:	CALL	DONXT
      000B98 0B 7D                 2279         .word	CMOV1
      000B9A CC 06 B4         [ 2] 2280         JP	DDROP
                                   2281 
                                   2282 ;       FILL    ( b u c -- )
                                   2283 ;       Fill u bytes of character c
                                   2284 ;       to area beginning at b.
      000B9D 0B 6F                 2285         .word       LINK
                           000B9F  2286 LINK = . 
      000B9F 04                    2287         .byte       4
      000BA0 46 49 4C 4C           2288         .ascii     "FILL"
      000BA4                       2289 FILL:
      000BA4 90 93            [ 1] 2290         ldw y,x 
      000BA6 90 E6 01         [ 1] 2291         ld a,(1,y) ; c 
      000BA9 1C 00 02         [ 2] 2292         addw x,#CELLL ; drop c 
      000BAC 90 93            [ 1] 2293         ldw y,x 
      000BAE 90 FE            [ 2] 2294         ldw y,(y) ; count
      000BB0 90 89            [ 2] 2295         pushw y 
      000BB2 1C 00 02         [ 2] 2296         addw x,#CELLL ; drop u 
      000BB5 90 93            [ 1] 2297         ldw y,x 
      000BB7 1C 00 02         [ 2] 2298         addw x,#CELLL ; drop b 
      000BBA 90 FE            [ 2] 2299         ldw y,(y) ; address
      000BBC 90 BF 24         [ 2] 2300         ldw YTEMP,y
      000BBF 90 85            [ 2] 2301         popw y ; count 
      000BC1                       2302 FILL1:  
      000BC1 92 C7 24         [ 4] 2303         ld [YTEMP],a 
      000BC4 3C 25            [ 1] 2304         inc YTEMP+1
      000BC6 24 02            [ 1] 2305         jrnc FILL2 
      000BC8 3C 24            [ 1] 2306         inc YTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BCA                       2307 FILL2: 
      000BCA 90 5A            [ 2] 2308         decw y ; count 
      000BCC 26 F3            [ 1] 2309         jrne FILL1  
      000BCE 81               [ 4] 2310         ret 
                                   2311 
                                   2312 ;       ERASE   ( b u -- )
                                   2313 ;       Erase u bytes beginning at b.
      000BCF 0B 9F                 2314         .word      LINK
                           000BD1  2315 LINK = . 
      000BD1 05                    2316         .byte      5
      000BD2 45 52 41 53 45        2317         .ascii     "ERASE"
      000BD7                       2318 ERASE:
      000BD7 90 5F            [ 1] 2319         clrw y 
      000BD9 1D 00 02         [ 2] 2320         subw x,#CELLL 
      000BDC FF               [ 2] 2321         ldw (x),y 
      000BDD CC 0B A4         [ 2] 2322         jp FILL 
                                   2323 
                                   2324 
                                   2325 ;       PACK0   ( b u a -- a )
                                   2326 ;       Build a counted string with
                                   2327 ;       u characters from b. Null fill.
      000BE0 0B D1                 2328         .word      LINK
                           000BE2  2329 LINK = . 
      000BE2 05                    2330         .byte      5
      000BE3 50 41 43 4B 30        2331         .ascii     "PACK0"
      000BE8                       2332 PACKS:
      000BE8 CD 04 D9         [ 4] 2333         CALL     DUPP
      000BEB CD 04 A2         [ 4] 2334         CALL     TOR     ;strings only on cell boundary
      000BEE CD 06 BF         [ 4] 2335         CALL     DDUP
      000BF1 CD 04 3F         [ 4] 2336         CALL     CSTOR
      000BF4 CD 09 CE         [ 4] 2337         CALL     ONEP ;save count
      000BF7 CD 04 E9         [ 4] 2338         CALL     SWAPP
      000BFA CD 0B 75         [ 4] 2339         CALL     CMOVE
      000BFD CD 04 83         [ 4] 2340         CALL     RFROM
      000C00 81               [ 4] 2341         RET
                                   2342 
                                   2343 ;; Numeric output, single precision
                                   2344 
                                   2345 ;       DIGIT   ( u -- c )
                                   2346 ;       Convert digit u to a character.
      000C01 0B E2                 2347         .word      LINK
                           000C03  2348 LINK = . 
      000C03 05                    2349         .byte      5
      000C04 44 49 47 49 54        2350         .ascii     "DIGIT"
      000C09                       2351 DIGIT:
      000C09 CD 03 B4         [ 4] 2352         CALL	DOLIT
      000C0C 00 09                 2353         .word	9
      000C0E CD 05 03         [ 4] 2354         CALL	OVER
      000C11 CD 07 B2         [ 4] 2355         CALL	LESS
      000C14 CD 03 B4         [ 4] 2356         CALL	DOLIT
      000C17 00 07                 2357         .word	7
      000C19 CD 05 25         [ 4] 2358         CALL	ANDD
      000C1C CD 06 D4         [ 4] 2359         CALL	PLUS
      000C1F CD 03 B4         [ 4] 2360         CALL	DOLIT
      000C22 00 30                 2361         .word	48	;'0'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000C24 CC 06 D4         [ 2] 2362         JP	PLUS
                                   2363 
                                   2364 ;       EXTRACT ( n base -- n c )
                                   2365 ;       Extract least significant digit from n.
      000C27 0C 03                 2366         .word      LINK
                           000C29  2367 LINK = . 
      000C29 07                    2368         .byte      7
      000C2A 45 58 54 52 41 43 54  2369         .ascii     "EXTRACT"
      000C31                       2370 EXTRC:
      000C31 CD 0A 3A         [ 4] 2371         CALL     ZERO
      000C34 CD 04 E9         [ 4] 2372         CALL     SWAPP
      000C37 CD 08 2A         [ 4] 2373         CALL     UMMOD
      000C3A CD 04 E9         [ 4] 2374         CALL     SWAPP
      000C3D CC 0C 09         [ 2] 2375         JP     DIGIT
                                   2376 
                                   2377 ;       <#      ( -- )
                                   2378 ;       Initiate  numeric output process.
      000C40 0C 29                 2379         .word      LINK
                           000C42  2380 LINK = . 
      000C42 02                    2381         .byte      2
      000C43 3C 23                 2382         .ascii     "<#"
      000C45                       2383 BDIGS:
      000C45 CD 0B 39         [ 4] 2384         CALL     PAD
      000C48 CD 06 06         [ 4] 2385         CALL     HLD
      000C4B CC 04 1B         [ 2] 2386         JP     STORE
                                   2387 
                                   2388 ;       HOLD    ( c -- )
                                   2389 ;       Insert a character into output string.
      000C4E 0C 42                 2390         .word      LINK
                           000C50  2391 LINK = . 
      000C50 04                    2392         .byte      4
      000C51 48 4F 4C 44           2393         .ascii     "HOLD"
      000C55                       2394 HOLD:
      000C55 CD 06 06         [ 4] 2395         CALL     HLD
      000C58 CD 04 32         [ 4] 2396         CALL     AT
      000C5B CD 09 DB         [ 4] 2397         CALL     ONEM
      000C5E CD 04 D9         [ 4] 2398         CALL     DUPP
      000C61 CD 06 06         [ 4] 2399         CALL     HLD
      000C64 CD 04 1B         [ 4] 2400         CALL     STORE
      000C67 CC 04 3F         [ 2] 2401         JP     CSTOR
                                   2402 
                                   2403 ;       #       ( u -- u )
                                   2404 ;       Extract one digit from u and
                                   2405 ;       append digit to output string.
      000C6A 0C 50                 2406         .word      LINK
                           000C6C  2407 LINK = . 
      000C6C 01                    2408         .byte      1
      000C6D 23                    2409         .ascii     "#"
      000C6E                       2410 DIG:
      000C6E CD 05 96         [ 4] 2411         CALL     BASE
      000C71 CD 04 32         [ 4] 2412         CALL     AT
      000C74 CD 0C 31         [ 4] 2413         CALL     EXTRC
      000C77 CC 0C 55         [ 2] 2414         JP     HOLD
                                   2415 
                                   2416 ;       #S      ( u -- 0 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2417 ;       Convert u until all digits
                                   2418 ;       are added to output string.
      000C7A 0C 6C                 2419         .word      LINK
                           000C7C  2420 LINK = . 
      000C7C 02                    2421         .byte      2
      000C7D 23 53                 2422         .ascii     "#S"
      000C7F                       2423 DIGS:
      000C7F CD 0C 6E         [ 4] 2424 DIGS1:  CALL     DIG
      000C82 CD 04 D9         [ 4] 2425         CALL     DUPP
      000C85 CD 03 E7         [ 4] 2426         CALL     QBRAN
      000C88 0C 8C                 2427         .word      DIGS2
      000C8A 20 F3            [ 2] 2428         JRA     DIGS1
      000C8C 81               [ 4] 2429 DIGS2:  RET
                                   2430 
                                   2431 ;       SIGN    ( n -- )
                                   2432 ;       Add a minus sign to
                                   2433 ;       numeric output string.
      000C8D 0C 7C                 2434         .word      LINK
                           000C8F  2435 LINK = . 
      000C8F 04                    2436         .byte      4
      000C90 53 49 47 4E           2437         .ascii     "SIGN"
      000C94                       2438 SIGN:
      000C94 CD 05 12         [ 4] 2439         CALL     ZLESS
      000C97 CD 03 E7         [ 4] 2440         CALL     QBRAN
      000C9A 0C A4                 2441         .word      SIGN1
      000C9C CD 03 B4         [ 4] 2442         CALL     DOLIT
      000C9F 00 2D                 2443         .word      45	;"-"
      000CA1 CC 0C 55         [ 2] 2444         JP     HOLD
      000CA4 81               [ 4] 2445 SIGN1:  RET
                                   2446 
                                   2447 ;       #>      ( w -- b u )
                                   2448 ;       Prepare output string.
      000CA5 0C 8F                 2449         .word      LINK
                           000CA7  2450 LINK = . 
      000CA7 02                    2451         .byte      2
      000CA8 23 3E                 2452         .ascii     "#>"
      000CAA                       2453 EDIGS:
      000CAA CD 04 CF         [ 4] 2454         CALL     DROP
      000CAD CD 06 06         [ 4] 2455         CALL     HLD
      000CB0 CD 04 32         [ 4] 2456         CALL     AT
      000CB3 CD 0B 39         [ 4] 2457         CALL     PAD
      000CB6 CD 05 03         [ 4] 2458         CALL     OVER
      000CB9 CC 07 4D         [ 2] 2459         JP     SUBB
                                   2460 
                                   2461 ;       str     ( w -- b u )
                                   2462 ;       Convert a signed integer
                                   2463 ;       to a numeric string.
      000CBC 0C A7                 2464         .word      LINK
                           000CBE  2465 LINK = . 
      000CBE 03                    2466         .byte      3
      000CBF 53 54 52              2467         .ascii     "STR"
      000CC2                       2468 STR:
      000CC2 CD 04 D9         [ 4] 2469         CALL     DUPP
      000CC5 CD 04 A2         [ 4] 2470         CALL     TOR
      000CC8 CD 07 67         [ 4] 2471         CALL     ABSS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CCB CD 0C 45         [ 4] 2472         CALL     BDIGS
      000CCE CD 0C 7F         [ 4] 2473         CALL     DIGS
      000CD1 CD 04 83         [ 4] 2474         CALL     RFROM
      000CD4 CD 0C 94         [ 4] 2475         CALL     SIGN
      000CD7 CC 0C AA         [ 2] 2476         JP     EDIGS
                                   2477 
                                   2478 ;       HEX     ( -- )
                                   2479 ;       Use radix 16 as base for
                                   2480 ;       numeric conversions.
      000CDA 0C BE                 2481         .word      LINK
                           000CDC  2482 LINK = . 
      000CDC 03                    2483         .byte      3
      000CDD 48 45 58              2484         .ascii     "HEX"
      000CE0                       2485 HEX:
      000CE0 CD 03 B4         [ 4] 2486         CALL     DOLIT
      000CE3 00 10                 2487         .word      16
      000CE5 CD 05 96         [ 4] 2488         CALL     BASE
      000CE8 CC 04 1B         [ 2] 2489         JP     STORE
                                   2490 
                                   2491 ;       DECIMAL ( -- )
                                   2492 ;       Use radix 10 as base
                                   2493 ;       for numeric conversions.
      000CEB 0C DC                 2494         .word      LINK
                           000CED  2495 LINK = . 
      000CED 07                    2496         .byte      7
      000CEE 44 45 43 49 4D 41 4C  2497         .ascii     "DECIMAL"
      000CF5                       2498 DECIM:
      000CF5 CD 03 B4         [ 4] 2499         CALL     DOLIT
      000CF8 00 0A                 2500         .word      10
      000CFA CD 05 96         [ 4] 2501         CALL     BASE
      000CFD CC 04 1B         [ 2] 2502         JP     STORE
                                   2503 
                                   2504 ;; Numeric input, single precision
                                   2505 
                                   2506 ;       DIGIT?  ( c base -- u t )
                                   2507 ;       Convert a character to its numeric
                                   2508 ;       value. A flag indicates success.
      000D00 0C ED                 2509         .word      LINK
                           000D02  2510 LINK = . 
      000D02 06                    2511         .byte       6
      000D03 44 49 47 49 54 3F     2512         .ascii     "DIGIT?"
      000D09                       2513 DIGTQ:
      000D09 CD 04 A2         [ 4] 2514         CALL     TOR
      000D0C CD 03 B4         [ 4] 2515         CALL     DOLIT
      000D0F 00 30                 2516         .word     48	; "0"
      000D11 CD 07 4D         [ 4] 2517         CALL     SUBB
      000D14 CD 03 B4         [ 4] 2518         CALL     DOLIT
      000D17 00 09                 2519         .word      9
      000D19 CD 05 03         [ 4] 2520         CALL     OVER
      000D1C CD 07 B2         [ 4] 2521         CALL     LESS
      000D1F CD 03 E7         [ 4] 2522         CALL     QBRAN
      000D22 0D 3A                 2523         .word      DGTQ1
      000D24 CD 03 B4         [ 4] 2524         CALL     DOLIT
      000D27 00 07                 2525         .word      7
      000D29 CD 07 4D         [ 4] 2526         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D2C CD 04 D9         [ 4] 2527         CALL     DUPP
      000D2F CD 03 B4         [ 4] 2528         CALL     DOLIT
      000D32 00 0A                 2529         .word      10
      000D34 CD 07 B2         [ 4] 2530         CALL     LESS
      000D37 CD 05 39         [ 4] 2531         CALL     ORR
      000D3A CD 04 D9         [ 4] 2532 DGTQ1:  CALL     DUPP
      000D3D CD 04 83         [ 4] 2533         CALL     RFROM
      000D40 CC 07 94         [ 2] 2534         JP     ULESS
                                   2535 
                                   2536 ;       NUMBER? ( a -- n T | a F )
                                   2537 ;       Convert a number string to
                                   2538 ;       integer. Push a flag on tos.
      000D43 0D 02                 2539         .word      LINK
                           000D45  2540 LINK = . 
      000D45 07                    2541         .byte      7
      000D46 4E 55 4D 42 45 52 3F  2542         .ascii     "NUMBER?"
      000D4D                       2543 NUMBQ:
      000D4D CD 05 96         [ 4] 2544         CALL     BASE
      000D50 CD 04 32         [ 4] 2545         CALL     AT
      000D53 CD 04 A2         [ 4] 2546         CALL     TOR
      000D56 CD 0A 3A         [ 4] 2547         CALL     ZERO
      000D59 CD 05 03         [ 4] 2548         CALL     OVER
      000D5C CD 0B 11         [ 4] 2549         CALL     COUNT
      000D5F CD 05 03         [ 4] 2550         CALL     OVER
      000D62 CD 04 50         [ 4] 2551         CALL     CAT
      000D65 CD 03 B4         [ 4] 2552         CALL     DOLIT
      000D68 00 24                 2553         .word     36	; "0x"
      000D6A CD 07 75         [ 4] 2554         CALL     EQUAL
      000D6D CD 03 E7         [ 4] 2555         CALL     QBRAN
      000D70 0D 81                 2556         .word      NUMQ1
      000D72 CD 0C E0         [ 4] 2557         CALL     HEX
      000D75 CD 04 E9         [ 4] 2558         CALL     SWAPP
      000D78 CD 09 CE         [ 4] 2559         CALL     ONEP
      000D7B CD 04 E9         [ 4] 2560         CALL     SWAPP
      000D7E CD 09 DB         [ 4] 2561         CALL     ONEM
      000D81 CD 05 03         [ 4] 2562 NUMQ1:  CALL     OVER
      000D84 CD 04 50         [ 4] 2563         CALL     CAT
      000D87 CD 03 B4         [ 4] 2564         CALL     DOLIT
      000D8A 00 2D                 2565         .word     45	; "-"
      000D8C CD 07 75         [ 4] 2566         CALL     EQUAL
      000D8F CD 04 A2         [ 4] 2567         CALL     TOR
      000D92 CD 04 E9         [ 4] 2568         CALL     SWAPP
      000D95 CD 04 96         [ 4] 2569         CALL     RAT
      000D98 CD 07 4D         [ 4] 2570         CALL     SUBB
      000D9B CD 04 E9         [ 4] 2571         CALL     SWAPP
      000D9E CD 04 96         [ 4] 2572         CALL     RAT
      000DA1 CD 06 D4         [ 4] 2573         CALL     PLUS
      000DA4 CD 06 83         [ 4] 2574         CALL     QDUP
      000DA7 CD 03 E7         [ 4] 2575         CALL     QBRAN
      000DAA 0E 0B                 2576         .word      NUMQ6
      000DAC CD 09 DB         [ 4] 2577         CALL     ONEM
      000DAF CD 04 A2         [ 4] 2578         CALL     TOR
      000DB2 CD 04 D9         [ 4] 2579 NUMQ2:  CALL     DUPP
      000DB5 CD 04 A2         [ 4] 2580         CALL     TOR
      000DB8 CD 04 50         [ 4] 2581         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000DBB CD 05 96         [ 4] 2582         CALL     BASE
      000DBE CD 04 32         [ 4] 2583         CALL     AT
      000DC1 CD 0D 09         [ 4] 2584         CALL     DIGTQ
      000DC4 CD 03 E7         [ 4] 2585         CALL     QBRAN
      000DC7 0D F9                 2586         .word      NUMQ4
      000DC9 CD 04 E9         [ 4] 2587         CALL     SWAPP
      000DCC CD 05 96         [ 4] 2588         CALL     BASE
      000DCF CD 04 32         [ 4] 2589         CALL     AT
      000DD2 CD 09 4D         [ 4] 2590         CALL     STAR
      000DD5 CD 06 D4         [ 4] 2591         CALL     PLUS
      000DD8 CD 04 83         [ 4] 2592         CALL     RFROM
      000DDB CD 09 CE         [ 4] 2593         CALL     ONEP
      000DDE CD 03 C8         [ 4] 2594         CALL     DONXT
      000DE1 0D B2                 2595         .word      NUMQ2
      000DE3 CD 04 96         [ 4] 2596         CALL     RAT
      000DE6 CD 04 E9         [ 4] 2597         CALL     SWAPP
      000DE9 CD 04 CF         [ 4] 2598         CALL     DROP
      000DEC CD 03 E7         [ 4] 2599         CALL     QBRAN
      000DEF 0D F4                 2600         .word      NUMQ3
      000DF1 CD 06 FF         [ 4] 2601         CALL     NEGAT
      000DF4 CD 04 E9         [ 4] 2602 NUMQ3:  CALL     SWAPP
      000DF7 20 0F            [ 2] 2603         JRA     NUMQ5
      000DF9 CD 04 83         [ 4] 2604 NUMQ4:  CALL     RFROM
      000DFC CD 04 83         [ 4] 2605         CALL     RFROM
      000DFF CD 06 B4         [ 4] 2606         CALL     DDROP
      000E02 CD 06 B4         [ 4] 2607         CALL     DDROP
      000E05 CD 0A 3A         [ 4] 2608         CALL     ZERO
      000E08 CD 04 D9         [ 4] 2609 NUMQ5:  CALL     DUPP
      000E0B CD 04 83         [ 4] 2610 NUMQ6:  CALL     RFROM
      000E0E CD 06 B4         [ 4] 2611         CALL     DDROP
      000E11 CD 04 83         [ 4] 2612         CALL     RFROM
      000E14 CD 05 96         [ 4] 2613         CALL     BASE
      000E17 CC 04 1B         [ 2] 2614         JP     STORE
                                   2615 
                                   2616 ;; Basic I/O
                                   2617 
                                   2618 ;       KEY     ( -- c )
                                   2619 ;       Wait for and return an
                                   2620 ;       input character.
      000E1A 0D 45                 2621         .word      LINK
                           000E1C  2622 LINK = . 
      000E1C 03                    2623         .byte      3
      000E1D 4B 45 59              2624         .ascii     "KEY"
      000E20                       2625 KEY:
      000E20 72 0B 52 30 FB   [ 2] 2626         btjf UART_SR,#UART_SR_RXNE,. 
      000E25 C6 52 31         [ 1] 2627         ld a,UART_DR 
      000E28 1D 00 02         [ 2] 2628         subw x,#CELLL 
      000E2B E7 01            [ 1] 2629         ld (1,x),a 
      000E2D 7F               [ 1] 2630         clr (x)
      000E2E 81               [ 4] 2631         ret 
                                   2632 
                                   2633 ;       NUF?    ( -- t )
                                   2634 ;       Return false if no input,
                                   2635 ;       else pause and if CR return true.
      000E2F 0E 1C                 2636         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000E31  2637 LINK = . 
      000E31 04                    2638         .byte      4
      000E32 4E 55 46 3F           2639         .ascii     "NUF?"
      000E36                       2640 NUFQ:
      000E36 CD 03 80         [ 4] 2641         CALL     QKEY
      000E39 CD 04 D9         [ 4] 2642         CALL     DUPP
      000E3C CD 03 E7         [ 4] 2643         CALL     QBRAN
      000E3F 0E 4F                 2644         .word    NUFQ1
      000E41 CD 06 B4         [ 4] 2645         CALL     DDROP
      000E44 CD 0E 20         [ 4] 2646         CALL     KEY
      000E47 CD 03 B4         [ 4] 2647         CALL     DOLIT
      000E4A 00 0D                 2648         .word      CRR
      000E4C CC 07 75         [ 2] 2649         JP     EQUAL
      000E4F 81               [ 4] 2650 NUFQ1:  RET
                                   2651 
                                   2652 ;       SPACE   ( -- )
                                   2653 ;       Send  blank character to
                                   2654 ;       output device.
      000E50 0E 31                 2655         .word      LINK
                           000E52  2656 LINK = . 
      000E52 05                    2657         .byte      5
      000E53 53 50 41 43 45        2658         .ascii     "SPACE"
      000E58                       2659 SPACE:
      000E58 CD 0A 2D         [ 4] 2660         CALL     BLANK
      000E5B CC 03 9E         [ 2] 2661         JP     EMIT
                                   2662 
                                   2663 ;       SPACES  ( +n -- )
                                   2664 ;       Send n spaces to output device.
      000E5E 0E 52                 2665         .word      LINK
                           000E60  2666 LINK = . 
      000E60 06                    2667         .byte      6
      000E61 53 50 41 43 45 53     2668         .ascii     "SPACES"
      000E67                       2669 SPACS:
      000E67 CD 0A 3A         [ 4] 2670         CALL     ZERO
      000E6A CD 07 D2         [ 4] 2671         CALL     MAX
      000E6D CD 04 A2         [ 4] 2672         CALL     TOR
      000E70 20 03            [ 2] 2673         JRA      CHAR2
      000E72 CD 0E 58         [ 4] 2674 CHAR1:  CALL     SPACE
      000E75 CD 03 C8         [ 4] 2675 CHAR2:  CALL     DONXT
      000E78 0E 72                 2676         .word    CHAR1
      000E7A 81               [ 4] 2677         RET
                                   2678 
                                   2679 ;       TYPE    ( b u -- )
                                   2680 ;       Output u characters from b.
      000E7B 0E 60                 2681         .word      LINK
                           000E7D  2682 LINK = . 
      000E7D 04                    2683         .byte      4
      000E7E 54 59 50 45           2684         .ascii     "TYPE"
      000E82                       2685 TYPES:
      000E82 CD 04 A2         [ 4] 2686         CALL     TOR
      000E85 20 0C            [ 2] 2687         JRA     TYPE2
      000E87 CD 04 D9         [ 4] 2688 TYPE1:  CALL     DUPP
      000E8A CD 04 50         [ 4] 2689         CALL     CAT
      000E8D CD 03 9E         [ 4] 2690         CALL     EMIT
      000E90 CD 09 CE         [ 4] 2691         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E93 CD 03 C8         [ 4] 2692 TYPE2:  CALL     DONXT
      000E96 0E 87                 2693         .word      TYPE1
      000E98 CC 04 CF         [ 2] 2694         JP     DROP
                                   2695 
                                   2696 ;       CR      ( -- )
                                   2697 ;       Output a carriage return
                                   2698 ;       and a line feed.
      000E9B 0E 7D                 2699         .word      LINK
                           000E9D  2700 LINK = . 
      000E9D 02                    2701         .byte      2
      000E9E 43 52                 2702         .ascii     "CR"
      000EA0                       2703 CR:
      000EA0 CD 03 B4         [ 4] 2704         CALL     DOLIT
      000EA3 00 0D                 2705         .word      CRR
      000EA5 CD 03 9E         [ 4] 2706         CALL     EMIT
      000EA8 CD 03 B4         [ 4] 2707         CALL     DOLIT
      000EAB 00 0A                 2708         .word      LF
      000EAD CC 03 9E         [ 2] 2709         JP     EMIT
                                   2710 
                                   2711 ;       do$     ( -- a )
                                   2712 ;       Return  address of a compiled
                                   2713 ;       string.
      000EB0 0E 9D                 2714         .word      LINK
                           000EB2  2715 LINK = . 
      000EB2 43                    2716 	.byte      COMPO+3
      000EB3 44 4F 24              2717         .ascii     "DO$"
      000EB6                       2718 DOSTR:
      000EB6 CD 04 83         [ 4] 2719         CALL     RFROM
      000EB9 CD 04 96         [ 4] 2720         CALL     RAT
      000EBC CD 04 83         [ 4] 2721         CALL     RFROM
      000EBF CD 0B 11         [ 4] 2722         CALL     COUNT
      000EC2 CD 06 D4         [ 4] 2723         CALL     PLUS
      000EC5 CD 04 A2         [ 4] 2724         CALL     TOR
      000EC8 CD 04 E9         [ 4] 2725         CALL     SWAPP
      000ECB CD 04 A2         [ 4] 2726         CALL     TOR
      000ECE 81               [ 4] 2727         RET
                                   2728 
                                   2729 ;       $"|     ( -- a )
                                   2730 ;       Run time routine compiled by $".
                                   2731 ;       Return address of a compiled string.
      000ECF 0E B2                 2732         .word      LINK
                           000ED1  2733 LINK = . 
      000ED1 43                    2734 	.byte      COMPO+3
      000ED2 24 22 7C              2735         .byte     '$','"','|'
      000ED5                       2736 STRQP:
      000ED5 CD 0E B6         [ 4] 2737         CALL     DOSTR
      000ED8 81               [ 4] 2738         RET
                                   2739 
                                   2740 ;       ."|     ( -- )
                                   2741 ;       Run time routine of ." .
                                   2742 ;       Output a compiled string.
      000ED9 0E D1                 2743         .word      LINK
                           000EDB  2744 LINK = . 
      000EDB 43                    2745 	.byte      COMPO+3
      000EDC 2E 22 7C              2746         .byte     '.','"','|'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EDF                       2747 DOTQP:
      000EDF CD 0E B6         [ 4] 2748         CALL     DOSTR
      000EE2 CD 0B 11         [ 4] 2749         CALL     COUNT
      000EE5 CC 0E 82         [ 2] 2750         JP     TYPES
                                   2751 
                                   2752 ;       .R      ( n +n -- )
                                   2753 ;       Display an integer in a field
                                   2754 ;       of n columns, right justified.
      000EE8 0E DB                 2755         .word      LINK
                           000EEA  2756 LINK = . 
      000EEA 02                    2757         .byte      2
      000EEB 2E 52                 2758         .ascii     ".R"
      000EED                       2759 DOTR:
      000EED CD 04 A2         [ 4] 2760         CALL     TOR
      000EF0 CD 0C C2         [ 4] 2761         CALL     STR
      000EF3 CD 04 83         [ 4] 2762         CALL     RFROM
      000EF6 CD 05 03         [ 4] 2763         CALL     OVER
      000EF9 CD 07 4D         [ 4] 2764         CALL     SUBB
      000EFC CD 0E 67         [ 4] 2765         CALL     SPACS
      000EFF CC 0E 82         [ 2] 2766         JP     TYPES
                                   2767 
                                   2768 ;       U.R     ( u +n -- )
                                   2769 ;       Display an unsigned integer
                                   2770 ;       in n column, right justified.
      000F02 0E EA                 2771         .word      LINK
                           000F04  2772 LINK = . 
      000F04 03                    2773         .byte      3
      000F05 55 2E 52              2774         .ascii     "U.R"
      000F08                       2775 UDOTR:
      000F08 CD 04 A2         [ 4] 2776         CALL     TOR
      000F0B CD 0C 45         [ 4] 2777         CALL     BDIGS
      000F0E CD 0C 7F         [ 4] 2778         CALL     DIGS
      000F11 CD 0C AA         [ 4] 2779         CALL     EDIGS
      000F14 CD 04 83         [ 4] 2780         CALL     RFROM
      000F17 CD 05 03         [ 4] 2781         CALL     OVER
      000F1A CD 07 4D         [ 4] 2782         CALL     SUBB
      000F1D CD 0E 67         [ 4] 2783         CALL     SPACS
      000F20 CC 0E 82         [ 2] 2784         JP     TYPES
                                   2785 
                                   2786 ;       U.      ( u -- )
                                   2787 ;       Display an unsigned integer
                                   2788 ;       in free format.
      000F23 0F 04                 2789         .word      LINK
                           000F25  2790 LINK = . 
      000F25 02                    2791         .byte      2
      000F26 55 2E                 2792         .ascii     "U."
      000F28                       2793 UDOT:
      000F28 CD 0C 45         [ 4] 2794         CALL     BDIGS
      000F2B CD 0C 7F         [ 4] 2795         CALL     DIGS
      000F2E CD 0C AA         [ 4] 2796         CALL     EDIGS
      000F31 CD 0E 58         [ 4] 2797         CALL     SPACE
      000F34 CC 0E 82         [ 2] 2798         JP     TYPES
                                   2799 
                                   2800 ;       .       ( w -- )
                                   2801 ;       Display an integer in free
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2802 ;       format, preceeded by a space.
      000F37 0F 25                 2803         .word      LINK
                           000F39  2804 LINK = . 
      000F39 01                    2805         .byte      1
      000F3A 2E                    2806         .ascii     "."
      000F3B                       2807 DOT:
      000F3B CD 05 96         [ 4] 2808         CALL     BASE
      000F3E CD 04 32         [ 4] 2809         CALL     AT
      000F41 CD 03 B4         [ 4] 2810         CALL     DOLIT
      000F44 00 0A                 2811         .word      10
      000F46 CD 05 4E         [ 4] 2812         CALL     XORR    ;?decimal
      000F49 CD 03 E7         [ 4] 2813         CALL     QBRAN
      000F4C 0F 51                 2814         .word      DOT1
      000F4E CC 0F 28         [ 2] 2815         JP     UDOT
      000F51 CD 0C C2         [ 4] 2816 DOT1:   CALL     STR
      000F54 CD 0E 58         [ 4] 2817         CALL     SPACE
      000F57 CC 0E 82         [ 2] 2818         JP     TYPES
                                   2819 
                                   2820 ;       ?       ( a -- )
                                   2821 ;       Display contents in memory cell.
      000F5A 0F 39                 2822         .word      LINK
                                   2823         
                           000F5C  2824 LINK = . 
      000F5C 01                    2825         .byte      1
      000F5D 3F                    2826         .ascii     "?"
      000F5E                       2827 QUEST:
      000F5E CD 04 32         [ 4] 2828         CALL     AT
      000F61 CC 0F 3B         [ 2] 2829         JP     DOT
                                   2830 
                                   2831 ;; Parsing
                                   2832 
                                   2833 ;       parse   ( b u c -- b u delta ; <string> )
                                   2834 ;       Scan string delimited by c.
                                   2835 ;       Return found string and its offset.
      000F64 0F 5C                 2836         .word      LINK
                           000F66  2837 LINK = . 
      000F66 05                    2838         .byte      5
      000F67 70 61 72 73 65        2839         .ascii     "parse"
      000F6C                       2840 PARS:
      000F6C CD 05 A5         [ 4] 2841         CALL     TEMP
      000F6F CD 04 1B         [ 4] 2842         CALL     STORE
      000F72 CD 05 03         [ 4] 2843         CALL     OVER
      000F75 CD 04 A2         [ 4] 2844         CALL     TOR
      000F78 CD 04 D9         [ 4] 2845         CALL     DUPP
      000F7B CD 03 E7         [ 4] 2846         CALL     QBRAN
      000F7E 10 24                 2847         .word    PARS8
      000F80 CD 09 DB         [ 4] 2848         CALL     ONEM
      000F83 CD 05 A5         [ 4] 2849         CALL     TEMP
      000F86 CD 04 32         [ 4] 2850         CALL     AT
      000F89 CD 0A 2D         [ 4] 2851         CALL     BLANK
      000F8C CD 07 75         [ 4] 2852         CALL     EQUAL
      000F8F CD 03 E7         [ 4] 2853         CALL     QBRAN
      000F92 0F C5                 2854         .word      PARS3
      000F94 CD 04 A2         [ 4] 2855         CALL     TOR
      000F97 CD 0A 2D         [ 4] 2856 PARS1:  CALL     BLANK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F9A CD 05 03         [ 4] 2857         CALL     OVER
      000F9D CD 04 50         [ 4] 2858         CALL     CAT     ;skip leading blanks ONLY
      000FA0 CD 07 4D         [ 4] 2859         CALL     SUBB
      000FA3 CD 05 12         [ 4] 2860         CALL     ZLESS
      000FA6 CD 06 EE         [ 4] 2861         CALL     INVER
      000FA9 CD 03 E7         [ 4] 2862         CALL     QBRAN
      000FAC 0F C2                 2863         .word      PARS2
      000FAE CD 09 CE         [ 4] 2864         CALL     ONEP
      000FB1 CD 03 C8         [ 4] 2865         CALL     DONXT
      000FB4 0F 97                 2866         .word      PARS1
      000FB6 CD 04 83         [ 4] 2867         CALL     RFROM
      000FB9 CD 04 CF         [ 4] 2868         CALL     DROP
      000FBC CD 0A 3A         [ 4] 2869         CALL     ZERO
      000FBF CC 04 D9         [ 2] 2870         JP     DUPP
      000FC2 CD 04 83         [ 4] 2871 PARS2:  CALL     RFROM
      000FC5 CD 05 03         [ 4] 2872 PARS3:  CALL     OVER
      000FC8 CD 04 E9         [ 4] 2873         CALL     SWAPP
      000FCB CD 04 A2         [ 4] 2874         CALL     TOR
      000FCE CD 05 A5         [ 4] 2875 PARS4:  CALL     TEMP
      000FD1 CD 04 32         [ 4] 2876         CALL     AT
      000FD4 CD 05 03         [ 4] 2877         CALL     OVER
      000FD7 CD 04 50         [ 4] 2878         CALL     CAT
      000FDA CD 07 4D         [ 4] 2879         CALL     SUBB    ;scan for delimiter
      000FDD CD 05 A5         [ 4] 2880         CALL     TEMP
      000FE0 CD 04 32         [ 4] 2881         CALL     AT
      000FE3 CD 0A 2D         [ 4] 2882         CALL     BLANK
      000FE6 CD 07 75         [ 4] 2883         CALL     EQUAL
      000FE9 CD 03 E7         [ 4] 2884         CALL     QBRAN
      000FEC 0F F1                 2885         .word      PARS5
      000FEE CD 05 12         [ 4] 2886         CALL     ZLESS
      000FF1 CD 03 E7         [ 4] 2887 PARS5:  CALL     QBRAN
      000FF4 10 06                 2888         .word      PARS6
      000FF6 CD 09 CE         [ 4] 2889         CALL     ONEP
      000FF9 CD 03 C8         [ 4] 2890         CALL     DONXT
      000FFC 0F CE                 2891         .word      PARS4
      000FFE CD 04 D9         [ 4] 2892         CALL     DUPP
      001001 CD 04 A2         [ 4] 2893         CALL     TOR
      001004 20 0F            [ 2] 2894         JRA     PARS7
      001006 CD 04 83         [ 4] 2895 PARS6:  CALL     RFROM
      001009 CD 04 CF         [ 4] 2896         CALL     DROP
      00100C CD 04 D9         [ 4] 2897         CALL     DUPP
      00100F CD 09 CE         [ 4] 2898         CALL     ONEP
      001012 CD 04 A2         [ 4] 2899         CALL     TOR
      001015 CD 05 03         [ 4] 2900 PARS7:  CALL     OVER
      001018 CD 07 4D         [ 4] 2901         CALL     SUBB
      00101B CD 04 83         [ 4] 2902         CALL     RFROM
      00101E CD 04 83         [ 4] 2903         CALL     RFROM
      001021 CC 07 4D         [ 2] 2904         JP     SUBB
      001024 CD 05 03         [ 4] 2905 PARS8:  CALL     OVER
      001027 CD 04 83         [ 4] 2906         CALL     RFROM
      00102A CC 07 4D         [ 2] 2907         JP     SUBB
                                   2908 
                                   2909 ;       PARSE   ( c -- b u ; <string> )
                                   2910 ;       Scan input stream and return
                                   2911 ;       counted string delimited by c.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00102D 0F 66                 2912         .word      LINK
                           00102F  2913 LINK = . 
      00102F 05                    2914         .byte      5
      001030 50 41 52 53 45        2915         .ascii     "PARSE"
      001035                       2916 PARSE:
      001035 CD 04 A2         [ 4] 2917         CALL     TOR
      001038 CD 0B 4A         [ 4] 2918         CALL     TIB
      00103B CD 05 B4         [ 4] 2919         CALL     INN
      00103E CD 04 32         [ 4] 2920         CALL     AT
      001041 CD 06 D4         [ 4] 2921         CALL     PLUS    ;current input buffer pointer
      001044 CD 05 C4         [ 4] 2922         CALL     NTIB
      001047 CD 04 32         [ 4] 2923         CALL     AT
      00104A CD 05 B4         [ 4] 2924         CALL     INN
      00104D CD 04 32         [ 4] 2925         CALL     AT
      001050 CD 07 4D         [ 4] 2926         CALL     SUBB    ;remaining count
      001053 CD 04 83         [ 4] 2927         CALL     RFROM
      001056 CD 0F 6C         [ 4] 2928         CALL     PARS
      001059 CD 05 B4         [ 4] 2929         CALL     INN
      00105C CC 0A AA         [ 2] 2930         JP     PSTOR
                                   2931 
                                   2932 ;       .(      ( -- )
                                   2933 ;       Output following string up to next ) .
      00105F 10 2F                 2934         .word      LINK
                           001061  2935 LINK = . 
      001061 82                    2936 	.byte      IMEDD+2
      001062 2E 28                 2937         .ascii     ".("
      001064                       2938 DOTPR:
      001064 CD 03 B4         [ 4] 2939         CALL     DOLIT
      001067 00 29                 2940         .word     41	; ")"
      001069 CD 10 35         [ 4] 2941         CALL     PARSE
      00106C CC 0E 82         [ 2] 2942         JP     TYPES
                                   2943 
                                   2944 ;       (       ( -- )
                                   2945 ;       Ignore following string up to next ).
                                   2946 ;       A comment.
      00106F 10 61                 2947         .word      LINK
                           001071  2948 LINK = . 
      001071 81                    2949 	.byte      IMEDD+1
      001072 28                    2950         .ascii     "("
      001073                       2951 PAREN:
      001073 CD 03 B4         [ 4] 2952         CALL     DOLIT
      001076 00 29                 2953         .word     41	; ")"
      001078 CD 10 35         [ 4] 2954         CALL     PARSE
      00107B CC 06 B4         [ 2] 2955         JP     DDROP
                                   2956 
                                   2957 ;       \       ( -- )
                                   2958 ;       Ignore following text till
                                   2959 ;       end of line.
      00107E 10 71                 2960         .word      LINK
                           001080  2961 LINK = . 
      001080 81                    2962 	.byte      IMEDD+1
      001081 5C                    2963         .ascii     "\"
      001082                       2964 BKSLA:
      001082 90 AE 00 0C      [ 2] 2965         ldw y,#UCTIB ; #TIB  
      001086 90 FE            [ 2] 2966         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001088 90 89            [ 2] 2967         pushw y ; count in TIB 
      00108A 90 AE 00 0A      [ 2] 2968         ldw y,#UINN ; >IN 
      00108E 90 BF 24         [ 2] 2969         ldw YTEMP,y
      001091 90 85            [ 2] 2970         popw y 
      001093 91 CF 24         [ 5] 2971         ldw [YTEMP],y
      001096 81               [ 4] 2972         ret 
                                   2973 
                                   2974 ;       WORD    ( c -- a ; <string> )
                                   2975 ;       Parse a word from input stream
                                   2976 ;       and copy it to code dictionary.
      001097 10 80                 2977         .word      LINK
                           001099  2978 LINK = . 
      001099 04                    2979         .byte      4
      00109A 57 4F 52 44           2980         .ascii     "WORD"
      00109E                       2981 WORDD:
      00109E CD 10 35         [ 4] 2982         CALL     PARSE
      0010A1 CD 0B 28         [ 4] 2983         CALL     HERE
      0010A4 CD 09 A3         [ 4] 2984         CALL     CELLP
      0010A7 CC 0B E8         [ 2] 2985         JP     PACKS
                                   2986 
                                   2987 ;       TOKEN   ( -- a ; <string> )
                                   2988 ;       Parse a word from input stream
                                   2989 ;       and copy it to name dictionary.
      0010AA 10 99                 2990         .word      LINK
                           0010AC  2991 LINK = . 
      0010AC 05                    2992         .byte      5
      0010AD 54 4F 4B 45 4E        2993         .ascii     "TOKEN"
      0010B2                       2994 TOKEN:
      0010B2 CD 0A 2D         [ 4] 2995         CALL     BLANK
      0010B5 CC 10 9E         [ 2] 2996         JP     WORDD
                                   2997 
                                   2998 ;; Dictionary search
                                   2999 
                                   3000 ;       NAME>   ( na -- ca )
                                   3001 ;       Return a code address given
                                   3002 ;       a name address.
      0010B8 10 AC                 3003         .word      LINK
                           0010BA  3004 LINK = . 
      0010BA 05                    3005         .byte      5
      0010BB 4E 41 4D 45 3E        3006         .ascii     "NAME>"
      0010C0                       3007 NAMET:
      0010C0 CD 0B 11         [ 4] 3008         CALL     COUNT
      0010C3 CD 03 B4         [ 4] 3009         CALL     DOLIT
      0010C6 00 1F                 3010         .word      31
      0010C8 CD 05 25         [ 4] 3011         CALL     ANDD
      0010CB CC 06 D4         [ 2] 3012         JP     PLUS
                                   3013 
                                   3014 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3015 ;       Compare u cells in two
                                   3016 ;       strings. Return 0 if identical.
      0010CE 10 BA                 3017         .word      LINK
                           0010D0  3018 LINK = . 
      0010D0 05                    3019         .byte       5
      0010D1 53 41 4D 45 3F        3020         .ascii     "SAME?"
      0010D6                       3021 SAMEQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010D6 CD 09 DB         [ 4] 3022         CALL     ONEM
      0010D9 CD 04 A2         [ 4] 3023         CALL     TOR
      0010DC 20 29            [ 2] 3024         JRA     SAME2
      0010DE CD 05 03         [ 4] 3025 SAME1:  CALL     OVER
      0010E1 CD 04 96         [ 4] 3026         CALL     RAT
      0010E4 CD 06 D4         [ 4] 3027         CALL     PLUS
      0010E7 CD 04 50         [ 4] 3028         CALL     CAT
      0010EA CD 05 03         [ 4] 3029         CALL     OVER
      0010ED CD 04 96         [ 4] 3030         CALL     RAT
      0010F0 CD 06 D4         [ 4] 3031         CALL     PLUS
      0010F3 CD 04 50         [ 4] 3032         CALL     CAT
      0010F6 CD 07 4D         [ 4] 3033         CALL     SUBB
      0010F9 CD 06 83         [ 4] 3034         CALL     QDUP
      0010FC CD 03 E7         [ 4] 3035         CALL     QBRAN
      0010FF 11 07                 3036         .word      SAME2
      001101 CD 04 83         [ 4] 3037         CALL     RFROM
      001104 CC 04 CF         [ 2] 3038         JP     DROP
      001107 CD 03 C8         [ 4] 3039 SAME2:  CALL     DONXT
      00110A 10 DE                 3040         .word      SAME1
      00110C CC 0A 3A         [ 2] 3041         JP     ZERO
                                   3042 
                                   3043 ;       find    ( a va -- ca na | a F )
                                   3044 ;       Search vocabulary for string.
                                   3045 ;       Return ca and na if succeeded.
      00110F 10 D0                 3046         .word      LINK
                           001111  3047 LINK = . 
      001111 04                    3048         .byte      4
      001112 46 49 4E 44           3049         .ascii     "FIND"
      001116                       3050 FIND:
      001116 CD 04 E9         [ 4] 3051         CALL     SWAPP
      001119 CD 04 D9         [ 4] 3052         CALL     DUPP
      00111C CD 04 50         [ 4] 3053         CALL     CAT
      00111F CD 05 A5         [ 4] 3054         CALL     TEMP
      001122 CD 04 1B         [ 4] 3055         CALL     STORE
      001125 CD 04 D9         [ 4] 3056         CALL     DUPP
      001128 CD 04 32         [ 4] 3057         CALL     AT
      00112B CD 04 A2         [ 4] 3058         CALL     TOR
      00112E CD 09 A3         [ 4] 3059         CALL     CELLP
      001131 CD 04 E9         [ 4] 3060         CALL     SWAPP
      001134 CD 04 32         [ 4] 3061 FIND1:  CALL     AT
      001137 CD 04 D9         [ 4] 3062         CALL     DUPP
      00113A CD 03 E7         [ 4] 3063         CALL     QBRAN
      00113D 11 73                 3064         .word      FIND6
      00113F CD 04 D9         [ 4] 3065         CALL     DUPP
      001142 CD 04 32         [ 4] 3066         CALL     AT
      001145 CD 03 B4         [ 4] 3067         CALL     DOLIT
      001148 1F 7F                 3068         .word      MASKK
      00114A CD 05 25         [ 4] 3069         CALL     ANDD
      00114D CD 04 96         [ 4] 3070         CALL     RAT
      001150 CD 05 4E         [ 4] 3071         CALL     XORR
      001153 CD 03 E7         [ 4] 3072         CALL     QBRAN
      001156 11 62                 3073         .word      FIND2
      001158 CD 09 A3         [ 4] 3074         CALL     CELLP
      00115B CD 03 B4         [ 4] 3075         CALL     DOLIT
      00115E FF FF                 3076         .word     0xFFFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001160 20 0C            [ 2] 3077         JRA     FIND3
      001162 CD 09 A3         [ 4] 3078 FIND2:  CALL     CELLP
      001165 CD 05 A5         [ 4] 3079         CALL     TEMP
      001168 CD 04 32         [ 4] 3080         CALL     AT
      00116B CD 10 D6         [ 4] 3081         CALL     SAMEQ
      00116E CD 03 FE         [ 4] 3082 FIND3:  CALL     BRAN
      001171 11 82                 3083         .word      FIND4
      001173 CD 04 83         [ 4] 3084 FIND6:  CALL     RFROM
      001176 CD 04 CF         [ 4] 3085         CALL     DROP
      001179 CD 04 E9         [ 4] 3086         CALL     SWAPP
      00117C CD 09 B2         [ 4] 3087         CALL     CELLM
      00117F CC 04 E9         [ 2] 3088         JP     SWAPP
      001182 CD 03 E7         [ 4] 3089 FIND4:  CALL     QBRAN
      001185 11 8F                 3090         .word      FIND5
      001187 CD 09 B2         [ 4] 3091         CALL     CELLM
      00118A CD 09 B2         [ 4] 3092         CALL     CELLM
      00118D 20 A5            [ 2] 3093         JRA     FIND1
      00118F CD 04 83         [ 4] 3094 FIND5:  CALL     RFROM
      001192 CD 04 CF         [ 4] 3095         CALL     DROP
      001195 CD 04 E9         [ 4] 3096         CALL     SWAPP
      001198 CD 04 CF         [ 4] 3097         CALL     DROP
      00119B CD 09 B2         [ 4] 3098         CALL     CELLM
      00119E CD 04 D9         [ 4] 3099         CALL     DUPP
      0011A1 CD 10 C0         [ 4] 3100         CALL     NAMET
      0011A4 CC 04 E9         [ 2] 3101         JP     SWAPP
                                   3102 
                                   3103 ;       NAME?   ( a -- ca na | a F )
                                   3104 ;       Search vocabularies for a string.
      0011A7 11 11                 3105         .word      LINK
                           0011A9  3106 LINK = . 
      0011A9 05                    3107         .byte      5
      0011AA 4E 41 4D 45 3F        3108         .ascii     "NAME?"
      0011AF                       3109 NAMEQ:
      0011AF CD 06 19         [ 4] 3110         CALL   CNTXT
      0011B2 CC 11 16         [ 2] 3111         JP     FIND
                                   3112 
                                   3113 ;; Terminal response
                                   3114 
                                   3115 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3116 ;       Backup cursor by one character.
      0011B5 11 A9                 3117         .word      LINK
                           0011B7  3118 LINK = . 
      0011B7 02                    3119         .byte      2
      0011B8 5E 48                 3120         .ascii     "^H"
      0011BA                       3121 BKSP:
      0011BA CD 04 A2         [ 4] 3122         CALL     TOR
      0011BD CD 05 03         [ 4] 3123         CALL     OVER
      0011C0 CD 04 83         [ 4] 3124         CALL     RFROM
      0011C3 CD 04 E9         [ 4] 3125         CALL     SWAPP
      0011C6 CD 05 03         [ 4] 3126         CALL     OVER
      0011C9 CD 05 4E         [ 4] 3127         CALL     XORR
      0011CC CD 03 E7         [ 4] 3128         CALL     QBRAN
      0011CF 11 EA                 3129         .word      BACK1
      0011D1 CD 03 B4         [ 4] 3130         CALL     DOLIT
      0011D4 00 08                 3131         .word      BKSPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0011D6 CD 03 9E         [ 4] 3132         CALL     EMIT
      0011D9 CD 09 DB         [ 4] 3133         CALL     ONEM
      0011DC CD 0A 2D         [ 4] 3134         CALL     BLANK
      0011DF CD 03 9E         [ 4] 3135         CALL     EMIT
      0011E2 CD 03 B4         [ 4] 3136         CALL     DOLIT
      0011E5 00 08                 3137         .word      BKSPP
      0011E7 CC 03 9E         [ 2] 3138         JP     EMIT
      0011EA 81               [ 4] 3139 BACK1:  RET
                                   3140 
                                   3141 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3142 ;       Accept and echo key stroke
                                   3143 ;       and bump cursor.
      0011EB 11 B7                 3144         .word      LINK
                           0011ED  3145 LINK = . 
      0011ED 03                    3146         .byte      3
      0011EE 54 41 50              3147         .ascii     "TAP"
      0011F1                       3148 TAP:
      0011F1 CD 04 D9         [ 4] 3149         CALL     DUPP
      0011F4 CD 03 9E         [ 4] 3150         CALL     EMIT
      0011F7 CD 05 03         [ 4] 3151         CALL     OVER
      0011FA CD 04 3F         [ 4] 3152         CALL     CSTOR
      0011FD CC 09 CE         [ 2] 3153         JP     ONEP
                                   3154 
                                   3155 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3156 ;       Process a key stroke,
                                   3157 ;       CR or backspace.
      001200 11 ED                 3158         .word      LINK
                           001202  3159 LINK = . 
      001202 04                    3160         .byte      4
      001203 4B 54 41 50           3161         .ascii     "KTAP"
      001207                       3162 KTAP:
      001207 CD 04 D9         [ 4] 3163         CALL     DUPP
      00120A CD 03 B4         [ 4] 3164         CALL     DOLIT
      00120D 00 0D                 3165         .word      CRR
      00120F CD 05 4E         [ 4] 3166         CALL     XORR
      001212 CD 03 E7         [ 4] 3167         CALL     QBRAN
      001215 12 2D                 3168         .word      KTAP2
      001217 CD 03 B4         [ 4] 3169         CALL     DOLIT
      00121A 00 08                 3170         .word      BKSPP
      00121C CD 05 4E         [ 4] 3171         CALL     XORR
      00121F CD 03 E7         [ 4] 3172         CALL     QBRAN
      001222 12 2A                 3173         .word      KTAP1
      001224 CD 0A 2D         [ 4] 3174         CALL     BLANK
      001227 CC 11 F1         [ 2] 3175         JP     TAP
      00122A CC 11 BA         [ 2] 3176 KTAP1:  JP     BKSP
      00122D CD 04 CF         [ 4] 3177 KTAP2:  CALL     DROP
      001230 CD 04 E9         [ 4] 3178         CALL     SWAPP
      001233 CD 04 CF         [ 4] 3179         CALL     DROP
      001236 CC 04 D9         [ 2] 3180         JP     DUPP
                                   3181 
                                   3182 ;       accept  ( b u -- b u )
                                   3183 ;       Accept characters to input
                                   3184 ;       buffer. Return with actual count.
      001239 12 02                 3185         .word      LINK
                           00123B  3186 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00123B 06                    3187         .byte      6
      00123C 41 43 43 45 50 54     3188         .ascii     "ACCEPT"
      001242                       3189 ACCEP:
      001242 CD 05 03         [ 4] 3190         CALL     OVER
      001245 CD 06 D4         [ 4] 3191         CALL     PLUS
      001248 CD 05 03         [ 4] 3192         CALL     OVER
      00124B CD 06 BF         [ 4] 3193 ACCP1:  CALL     DDUP
      00124E CD 05 4E         [ 4] 3194         CALL     XORR
      001251 CD 03 E7         [ 4] 3195         CALL     QBRAN
      001254 12 76                 3196         .word      ACCP4
      001256 CD 0E 20         [ 4] 3197         CALL     KEY
      001259 CD 04 D9         [ 4] 3198         CALL     DUPP
      00125C CD 0A 2D         [ 4] 3199         CALL     BLANK
      00125F CD 03 B4         [ 4] 3200         CALL     DOLIT
      001262 00 7F                 3201         .word      127
      001264 CD 08 0F         [ 4] 3202         CALL     WITHI
      001267 CD 03 E7         [ 4] 3203         CALL     QBRAN
      00126A 12 71                 3204         .word      ACCP2
      00126C CD 11 F1         [ 4] 3205         CALL     TAP
      00126F 20 03            [ 2] 3206         JRA     ACCP3
      001271 CD 12 07         [ 4] 3207 ACCP2:  CALL     KTAP
      001274 20 D5            [ 2] 3208 ACCP3:  JRA     ACCP1
      001276 CD 04 CF         [ 4] 3209 ACCP4:  CALL     DROP
      001279 CD 05 03         [ 4] 3210         CALL     OVER
      00127C CC 07 4D         [ 2] 3211         JP     SUBB
                                   3212 
                                   3213 ;       QUERY   ( -- )
                                   3214 ;       Accept input stream to
                                   3215 ;       terminal input buffer.
      00127F 12 3B                 3216         .word      LINK
                                   3217         
                           001281  3218 LINK = . 
      001281 05                    3219         .byte      5
      001282 51 55 45 52 59        3220         .ascii     "QUERY"
      001287                       3221 QUERY:
      001287 CD 0B 4A         [ 4] 3222         CALL     TIB
      00128A CD 03 B4         [ 4] 3223         CALL     DOLIT
      00128D 00 50                 3224         .word      80
      00128F CD 12 42         [ 4] 3225         CALL     ACCEP
      001292 CD 05 C4         [ 4] 3226         CALL     NTIB
      001295 CD 04 1B         [ 4] 3227         CALL     STORE
      001298 CD 04 CF         [ 4] 3228         CALL     DROP
      00129B CD 0A 3A         [ 4] 3229         CALL     ZERO
      00129E CD 05 B4         [ 4] 3230         CALL     INN
      0012A1 CC 04 1B         [ 2] 3231         JP     STORE
                                   3232 
                                   3233 ;       ABORT   ( -- )
                                   3234 ;       Reset data stack and
                                   3235 ;       jump to QUIT.
      0012A4 12 81                 3236         .word      LINK
                           0012A6  3237 LINK = . 
      0012A6 05                    3238         .byte      5
      0012A7 41 42 4F 52 54        3239         .ascii     "ABORT"
      0012AC                       3240 ABORT:
      0012AC CD 13 A3         [ 4] 3241         CALL     PRESE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0012AF CC 13 C0         [ 2] 3242         JP     QUIT
                                   3243 
                                   3244 ;       abort"  ( f -- )
                                   3245 ;       Run time routine of ABORT".
                                   3246 ;       Abort with a message.
      0012B2 12 A6                 3247         .word      LINK
                           0012B4  3248 LINK = . 
      0012B4 46                    3249 	.byte      COMPO+6
      0012B5 41 42 4F 52 54        3250         .ascii     "ABORT"
      0012BA 22                    3251         .byte      '"'
      0012BB                       3252 ABORQ:
      0012BB CD 03 E7         [ 4] 3253         CALL     QBRAN
      0012BE 12 DA                 3254         .word      ABOR2   ;text flag
      0012C0 CD 0E B6         [ 4] 3255         CALL     DOSTR
      0012C3 CD 0E 58         [ 4] 3256 ABOR1:  CALL     SPACE
      0012C6 CD 0B 11         [ 4] 3257         CALL     COUNT
      0012C9 CD 0E 82         [ 4] 3258         CALL     TYPES
      0012CC CD 03 B4         [ 4] 3259         CALL     DOLIT
      0012CF 00 3F                 3260         .word     63 ; "?"
      0012D1 CD 03 9E         [ 4] 3261         CALL     EMIT
      0012D4 CD 0E A0         [ 4] 3262         CALL     CR
      0012D7 CC 12 AC         [ 2] 3263         JP     ABORT   ;pass error string
      0012DA CD 0E B6         [ 4] 3264 ABOR2:  CALL     DOSTR
      0012DD CC 04 CF         [ 2] 3265         JP     DROP
                                   3266 
                                   3267 ;; The text interpreter
                                   3268 
                                   3269 ;       $INTERPRET      ( a -- )
                                   3270 ;       Interpret a word. If failed,
                                   3271 ;       try to convert it to an integer.
      0012E0 12 B4                 3272         .word      LINK
                           0012E2  3273 LINK = . 
      0012E2 0A                    3274         .byte      10
      0012E3 24 49 4E 54 45 52 50  3275         .ascii     "$INTERPRET"
             52 45 54
      0012ED                       3276 INTER:
      0012ED CD 11 AF         [ 4] 3277         CALL     NAMEQ
      0012F0 CD 06 83         [ 4] 3278         CALL     QDUP    ;?defined
      0012F3 CD 03 E7         [ 4] 3279         CALL     QBRAN
      0012F6 13 17                 3280         .word      INTE1
      0012F8 CD 04 32         [ 4] 3281         CALL     AT
      0012FB CD 03 B4         [ 4] 3282         CALL     DOLIT
      0012FE 40 00                 3283 	.word       0x4000	; COMPO*256
      001300 CD 05 25         [ 4] 3284         CALL     ANDD    ;?compile only lexicon bits
      001303 CD 12 BB         [ 4] 3285         CALL     ABORQ
      001306 0D                    3286         .byte      13
      001307 20 63 6F 6D 70 69 6C  3287         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001314 CC 04 0E         [ 2] 3288         JP     EXECU
      001317 CD 0D 4D         [ 4] 3289 INTE1:  CALL     NUMBQ   ;convert a number
      00131A CD 03 E7         [ 4] 3290         CALL     QBRAN
      00131D 12 C3                 3291         .word    ABOR1
      00131F 81               [ 4] 3292         RET
                                   3293 
                                   3294 ;       [       ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3295 ;       Start  text interpreter.
      001320 12 E2                 3296         .word      LINK
                           001322  3297 LINK = . 
      001322 81                    3298 	.byte      IMEDD+1
      001323 5B                    3299         .ascii     "["
      001324                       3300 LBRAC:
      001324 CD 03 B4         [ 4] 3301         CALL   DOLIT
      001327 12 ED                 3302         .word  INTER
      001329 CD 05 F7         [ 4] 3303         CALL   TEVAL
      00132C CC 04 1B         [ 2] 3304         JP     STORE
                                   3305 
                                   3306 ;       .OK     ( -- )
                                   3307 ;       Display 'ok' while interpreting.
      00132F 13 22                 3308         .word      LINK
                           001331  3309 LINK = . 
      001331 03                    3310         .byte      3
      001332 2E 4F 4B              3311         .ascii     ".OK"
      001335                       3312 DOTOK:
      001335 CD 03 B4         [ 4] 3313         CALL     DOLIT
      001338 12 ED                 3314         .word      INTER
      00133A CD 05 F7         [ 4] 3315         CALL     TEVAL
      00133D CD 04 32         [ 4] 3316         CALL     AT
      001340 CD 07 75         [ 4] 3317         CALL     EQUAL
      001343 CD 03 E7         [ 4] 3318         CALL     QBRAN
      001346 13 4F                 3319         .word      DOTO1
      001348 CD 0E DF         [ 4] 3320         CALL     DOTQP
      00134B 03                    3321         .byte      3
      00134C 20 6F 6B              3322         .ascii     " ok"
      00134F CC 0E A0         [ 2] 3323 DOTO1:  JP     CR
                                   3324 
                                   3325 ;       ?STACK  ( -- )
                                   3326 ;       Abort if stack underflows.
      001352 13 31                 3327         .word      LINK
                           001354  3328 LINK = . 
      001354 06                    3329         .byte      6
      001355 3F 53 54 41 43 4B     3330         .ascii     "?STACK"
      00135B                       3331 QSTAC: 
      00135B CD 0A 7C         [ 4] 3332         CALL     DEPTH
      00135E CD 05 12         [ 4] 3333         CALL     ZLESS   ;check only for underflow
      001361 CD 12 BB         [ 4] 3334         CALL     ABORQ
      001364 0B                    3335         .byte      11
      001365 20 75 6E 64 65 72 66  3336         .ascii     " underflow "
             6C 6F 77 20
      001370 81               [ 4] 3337         RET
                                   3338 
                                   3339 ;       EVAL    ( -- )
                                   3340 ;       Interpret  input stream.
      001371 13 54                 3341         .word      LINK
                           001373  3342 LINK = . 
      001373 04                    3343         .byte      4
      001374 45 56 41 4C           3344         .ascii     "EVAL"
      001378                       3345 EVAL:
      001378 CD 10 B2         [ 4] 3346 EVAL1:  CALL     TOKEN
      00137B CD 04 D9         [ 4] 3347         CALL     DUPP
      00137E CD 04 50         [ 4] 3348         CALL     CAT     ;?input stream empty
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001381 CD 03 E7         [ 4] 3349         CALL     QBRAN
      001384 13 94                 3350         .word    EVAL2
      001386 CD 05 F7         [ 4] 3351         CALL     TEVAL
      001389 CD 0B 5E         [ 4] 3352         CALL     ATEXE
      00138C CD 13 5B         [ 4] 3353         CALL     QSTAC   ;evaluate input, check stack
      00138F CD 03 FE         [ 4] 3354         CALL     BRAN
      001392 13 78                 3355         .word    EVAL1
      001394 CD 04 CF         [ 4] 3356 EVAL2:  CALL     DROP
      001397 CC 13 35         [ 2] 3357         JP       DOTOK
                                   3358 
                                   3359 ;       PRESET  ( -- )
                                   3360 ;       Reset data stack pointer and
                                   3361 ;       terminal input buffer.
      00139A 13 73                 3362         .word      LINK
                           00139C  3363 LINK = . 
      00139C 06                    3364         .byte      6
      00139D 50 52 45 53 45 54     3365         .ascii     "PRESET"
      0013A3                       3366 PRESE:
      0013A3 CD 03 B4         [ 4] 3367         CALL     DOLIT
      0013A6 16 80                 3368         .word      SPP
      0013A8 CD 04 C6         [ 4] 3369         CALL     SPSTO
      0013AB CD 03 B4         [ 4] 3370         CALL     DOLIT
      0013AE 17 00                 3371         .word      TIBB
      0013B0 CD 05 C4         [ 4] 3372         CALL     NTIB
      0013B3 CD 09 A3         [ 4] 3373         CALL     CELLP
      0013B6 CC 04 1B         [ 2] 3374         JP     STORE
                                   3375 
                                   3376 ;       QUIT    ( -- )
                                   3377 ;       Reset return stack pointer
                                   3378 ;       and start text interpreter.
      0013B9 13 9C                 3379         .word      LINK
                           0013BB  3380 LINK = . 
      0013BB 04                    3381         .byte      4
      0013BC 51 55 49 54           3382         .ascii     "QUIT"
      0013C0                       3383 QUIT:
      0013C0 CD 03 B4         [ 4] 3384         CALL     DOLIT
      0013C3 17 FF                 3385         .word      RPP
      0013C5 CD 04 6D         [ 4] 3386         CALL     RPSTO   ;reset return stack pointer
      0013C8 CD 13 24         [ 4] 3387 QUIT1:  CALL     LBRAC   ;start interpretation
      0013CB CD 12 87         [ 4] 3388 QUIT2:  CALL     QUERY   ;get input
      0013CE CD 13 78         [ 4] 3389         CALL     EVAL
      0013D1 20 F8            [ 2] 3390         JRA     QUIT2   ;continue till error
                                   3391 
                                   3392 ;; The compiler
                                   3393 
                                   3394 ;       '       ( -- ca )
                                   3395 ;       Search vocabularies for
                                   3396 ;       next word in input stream.
      0013D3 13 BB                 3397         .word      LINK
                           0013D5  3398 LINK = . 
      0013D5 01                    3399         .byte      1
      0013D6 27                    3400         .ascii     "'"
      0013D7                       3401 TICK:
      0013D7 CD 10 B2         [ 4] 3402         CALL     TOKEN
      0013DA CD 11 AF         [ 4] 3403         CALL     NAMEQ   ;?defined
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0013DD CD 03 E7         [ 4] 3404         CALL     QBRAN
      0013E0 12 C3                 3405         .word      ABOR1
      0013E2 81               [ 4] 3406         RET     ;yes, push code address
                                   3407 
                                   3408 ;       ALLOT   ( n -- )
                                   3409 ;       Allocate n bytes to RAM 
      0013E3 13 D5                 3410         .word      LINK
                           0013E5  3411         LINK = . 
      0013E5 05                    3412         .byte      5
      0013E6 41 4C 4C 4F 54        3413         .ascii     "ALLOT"
      0013EB                       3414 ALLOT:
      0013EB CD 06 27         [ 4] 3415         CALL     VPP
                                   3416 ; must update APP_VP each time VP is modidied
      0013EE CD 0A AA         [ 4] 3417         call PSTOR 
      0013F1 CC 1B 34         [ 2] 3418         jp UPDATVP 
                                   3419 
                                   3420 ;       ,       ( w -- )
                                   3421 ;         Compile an integer into
                                   3422 ;         variable space.
      0013F4 13 E5                 3423         .word      LINK
                           0013F6  3424 LINK = . 
      0013F6 01                    3425         .byte      1
      0013F7 2C                    3426         .ascii     ","
      0013F8                       3427 COMMA:
      0013F8 CD 0B 28         [ 4] 3428         CALL     HERE
      0013FB CD 04 D9         [ 4] 3429         CALL     DUPP
      0013FE CD 09 A3         [ 4] 3430         CALL     CELLP   ;cell boundary
      001401 CD 06 27         [ 4] 3431         CALL     VPP
      001404 CD 04 1B         [ 4] 3432         CALL     STORE
      001407 CC 04 1B         [ 2] 3433         JP     STORE
                                   3434 
                                   3435 ;       C,      ( c -- )
                                   3436 ;       Compile a byte into
                                   3437 ;       variables space.
      00140A 13 F6                 3438        .word      LINK
                           00140C  3439 LINK = . 
      00140C 02                    3440         .byte      2
      00140D 43 2C                 3441         .ascii     "C,"
      00140F                       3442 CCOMMA:
      00140F CD 0B 28         [ 4] 3443         CALL     HERE
      001412 CD 04 D9         [ 4] 3444         CALL     DUPP
      001415 CD 09 CE         [ 4] 3445         CALL     ONEP
      001418 CD 06 27         [ 4] 3446         CALL     VPP
      00141B CD 04 1B         [ 4] 3447         CALL     STORE
      00141E CC 04 3F         [ 2] 3448         JP     CSTOR
                                   3449 
                                   3450 ;       [COMPILE]       ( -- ; <string> )
                                   3451 ;       Compile next immediate
                                   3452 ;       word into code dictionary.
      001421 14 0C                 3453         .word      LINK
                           001423  3454 LINK = . 
      001423 89                    3455 	.byte      IMEDD+9
      001424 5B 43 4F 4D 50 49 4C  3456         .ascii     "[COMPILE]"
             45 5D
      00142D                       3457 BCOMP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00142D CD 13 D7         [ 4] 3458         CALL     TICK
      001430 CC 16 F3         [ 2] 3459         JP     JSRC
                                   3460 
                                   3461 ;       COMPILE ( -- )
                                   3462 ;       Compile next jsr in
                                   3463 ;       colon list to code dictionary.
      001433 14 23                 3464         .word      LINK
                           001435  3465 LINK = . 
      001435 47                    3466 	.byte      COMPO+7
      001436 43 4F 4D 50 49 4C 45  3467         .ascii     "COMPILE"
      00143D                       3468 COMPI:
      00143D CD 04 83         [ 4] 3469         CALL     RFROM
      001440 CD 04 D9         [ 4] 3470         CALL     DUPP
      001443 CD 04 32         [ 4] 3471         CALL     AT
      001446 CD 16 F3         [ 4] 3472         CALL     JSRC    ;compile subroutine
      001449 CD 09 A3         [ 4] 3473         CALL     CELLP
      00144C 90 93            [ 1] 3474         ldw y,x 
      00144E 90 FE            [ 2] 3475         ldw y,(y)
      001450 1C 00 02         [ 2] 3476         addw x,#CELLL 
      001453 90 FC            [ 2] 3477         jp (y)
                                   3478 
                                   3479 ;       LITERAL ( w -- )
                                   3480 ;       Compile tos to dictionary
                                   3481 ;       as an integer literal.
      001455 14 35                 3482         .word      LINK
                           001457  3483 LINK = . 
      001457 87                    3484 	.byte      IMEDD+7
      001458 4C 49 54 45 52 41 4C  3485         .ascii     "LITERAL"
      00145F                       3486 LITER:
      00145F CD 14 3D         [ 4] 3487         CALL     COMPI
      001462 03 B4                 3488         .word DOLIT 
      001464 CC 13 F8         [ 2] 3489         JP     COMMA
                                   3490 
                                   3491 ;       $,"     ( -- )
                                   3492 ;       Compile a literal string
                                   3493 ;       up to next " .
      001467 14 57                 3494         .word      LINK
                           001469  3495 LINK = . 
      001469 03                    3496         .byte      3
      00146A 24 2C 22              3497         .byte     '$',',','"'
      00146D                       3498 STRCQ:
      00146D CD 03 B4         [ 4] 3499         CALL     DOLIT
      001470 00 22                 3500         .word     34	; "
      001472 CD 10 35         [ 4] 3501         CALL     PARSE
      001475 CD 0B 28         [ 4] 3502         CALL     HERE
      001478 CD 0B E8         [ 4] 3503         CALL     PACKS   ;string to code dictionary
      00147B CD 0B 11         [ 4] 3504         CALL     COUNT
      00147E CD 06 D4         [ 4] 3505         CALL     PLUS    ;calculate aligned end of string
      001481 CD 06 27         [ 4] 3506         CALL     VPP
      001484 CC 04 1B         [ 2] 3507         JP     STORE
                                   3508 
                                   3509 ;; Structures
                                   3510 
                                   3511 ;       FOR     ( -- a )
                                   3512 ;       Start a FOR-NEXT loop
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3513 ;       structure in a colon definition.
      001487 14 69                 3514         .word      LINK
                           001489  3515 LINK = . 
      001489 83                    3516 	.byte      IMEDD+3
      00148A 46 4F 52              3517         .ascii     "FOR"
      00148D                       3518 FOR:
      00148D CD 14 3D         [ 4] 3519         CALL     COMPI
      001490 04 A2                 3520         .word TOR 
      001492 CC 0B 28         [ 2] 3521         JP     HERE
                                   3522 
                                   3523 ;       NEXT    ( a -- )
                                   3524 ;       Terminate a FOR-NEXT loop.
      001495 14 89                 3525         .word      LINK
                           001497  3526 LINK = . 
      001497 84                    3527 	.byte      IMEDD+4
      001498 4E 45 58 54           3528         .ascii     "NEXT"
      00149C                       3529 NEXT:
      00149C CD 14 3D         [ 4] 3530         CALL     COMPI
      00149F 03 C8                 3531         .word DONXT 
      0014A1 CD 06 73         [ 4] 3532         call ADRADJ
      0014A4 CC 13 F8         [ 2] 3533         JP     COMMA
                                   3534 
                                   3535 ;       I ( -- n )
                                   3536 ;       stack FOR-NEXT COUNTER 
      0014A7 14 97                 3537         .word LINK 
                           0014A9  3538         LINK=.
      0014A9 01                    3539         .byte 1 
      0014AA 49                    3540         .ascii "I"
      0014AB                       3541 IFETCH: 
      0014AB 1D 00 02         [ 2] 3542         subw x,#CELLL 
      0014AE 16 03            [ 2] 3543         ldw y,(3,sp)
      0014B0 FF               [ 2] 3544         ldw (x),y 
      0014B1 81               [ 4] 3545         ret 
                                   3546 
                                   3547 ;       BEGIN   ( -- a )
                                   3548 ;       Start an infinite or
                                   3549 ;       indefinite loop structure.
      0014B2 14 A9                 3550         .word      LINK
                           0014B4  3551 LINK = . 
      0014B4 85                    3552 	.byte      IMEDD+5
      0014B5 42 45 47 49 4E        3553         .ascii     "BEGIN"
      0014BA                       3554 BEGIN:
      0014BA CC 0B 28         [ 2] 3555         JP     HERE
                                   3556 
                                   3557 ;       UNTIL   ( a -- )
                                   3558 ;       Terminate a BEGIN-UNTIL
                                   3559 ;       indefinite loop structure.
      0014BD 14 B4                 3560         .word      LINK
                           0014BF  3561 LINK = . 
      0014BF 85                    3562 	.byte      IMEDD+5
      0014C0 55 4E 54 49 4C        3563         .ascii     "UNTIL"
      0014C5                       3564 UNTIL:
      0014C5 CD 14 3D         [ 4] 3565         CALL     COMPI
      0014C8 03 E7                 3566         .word    QBRAN 
      0014CA CD 06 73         [ 4] 3567         call ADRADJ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0014CD CC 13 F8         [ 2] 3568         JP     COMMA
                                   3569 
                                   3570 ;       AGAIN   ( a -- )
                                   3571 ;       Terminate a BEGIN-AGAIN
                                   3572 ;       infinite loop structure.
      0014D0 14 BF                 3573         .word      LINK
                           0014D2  3574 LINK = . 
      0014D2 85                    3575 	.byte      IMEDD+5
      0014D3 41 47 41 49 4E        3576         .ascii     "AGAIN"
      0014D8                       3577 AGAIN:
      0014D8 CD 14 3D         [ 4] 3578         CALL     COMPI
      0014DB 03 FE                 3579         .word BRAN
      0014DD CD 06 73         [ 4] 3580         call ADRADJ 
      0014E0 CC 13 F8         [ 2] 3581         JP     COMMA
                                   3582 
                                   3583 ;       IF      ( -- A )
                                   3584 ;       Begin a conditional branch.
      0014E3 14 D2                 3585         .word      LINK
                           0014E5  3586 LINK = . 
      0014E5 82                    3587 	.byte      IMEDD+2
      0014E6 49 46                 3588         .ascii     "IF"
      0014E8                       3589 IFF:
      0014E8 CD 14 3D         [ 4] 3590         CALL     COMPI
      0014EB 03 E7                 3591         .word QBRAN
      0014ED CD 0B 28         [ 4] 3592         CALL     HERE
      0014F0 CD 0A 3A         [ 4] 3593         CALL     ZERO
      0014F3 CC 13 F8         [ 2] 3594         JP     COMMA
                                   3595 
                                   3596 ;       THEN        ( A -- )
                                   3597 ;       Terminate a conditional branch structure.
      0014F6 14 E5                 3598         .word      LINK
                           0014F8  3599 LINK = . 
      0014F8 84                    3600 	.byte      IMEDD+4
      0014F9 54 48 45 4E           3601         .ascii     "THEN"
      0014FD                       3602 THENN:
      0014FD CD 0B 28         [ 4] 3603         CALL     HERE
      001500 CD 06 73         [ 4] 3604         call ADRADJ 
      001503 CD 04 E9         [ 4] 3605         CALL     SWAPP
      001506 CC 04 1B         [ 2] 3606         JP     STORE
                                   3607 
                                   3608 ;       ELSE        ( A -- A )
                                   3609 ;       Start the false clause in an IF-ELSE-THEN structure.
      001509 14 F8                 3610         .word      LINK
                           00150B  3611 LINK = . 
      00150B 84                    3612 	.byte      IMEDD+4
      00150C 45 4C 53 45           3613         .ascii     "ELSE"
      001510                       3614 ELSEE:
      001510 CD 14 3D         [ 4] 3615         CALL     COMPI
      001513 03 FE                 3616         .word BRAN
      001515 CD 0B 28         [ 4] 3617         CALL     HERE
      001518 CD 0A 3A         [ 4] 3618         CALL     ZERO
      00151B CD 13 F8         [ 4] 3619         CALL     COMMA
      00151E CD 04 E9         [ 4] 3620         CALL     SWAPP
      001521 CD 0B 28         [ 4] 3621         CALL     HERE
      001524 CD 06 73         [ 4] 3622         call ADRADJ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001527 CD 04 E9         [ 4] 3623         CALL     SWAPP
      00152A CC 04 1B         [ 2] 3624         JP     STORE
                                   3625 
                                   3626 ;       AHEAD       ( -- A )
                                   3627 ;       Compile a forward branch instruction.
      00152D 15 0B                 3628         .word      LINK
                           00152F  3629 LINK = . 
      00152F 85                    3630 	.byte      IMEDD+5
      001530 41 48 45 41 44        3631         .ascii     "AHEAD"
      001535                       3632 AHEAD:
      001535 CD 14 3D         [ 4] 3633         CALL     COMPI
      001538 03 FE                 3634         .word BRAN
      00153A CD 0B 28         [ 4] 3635         CALL     HERE
      00153D CD 0A 3A         [ 4] 3636         CALL     ZERO
      001540 CC 13 F8         [ 2] 3637         JP     COMMA
                                   3638 
                                   3639 ;       WHILE       ( a -- A a )
                                   3640 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001543 15 2F                 3641         .word      LINK
                           001545  3642 LINK = . 
      001545 85                    3643 	.byte      IMEDD+5
      001546 57 48 49 4C 45        3644         .ascii     "WHILE"
      00154B                       3645 WHILE:
      00154B CD 14 3D         [ 4] 3646         CALL     COMPI
      00154E 03 E7                 3647         .word QBRAN
      001550 CD 0B 28         [ 4] 3648         CALL     HERE
      001553 CD 0A 3A         [ 4] 3649         CALL     ZERO
      001556 CD 13 F8         [ 4] 3650         CALL     COMMA
      001559 CC 04 E9         [ 2] 3651         JP     SWAPP
                                   3652 
                                   3653 ;       REPEAT      ( A a -- )
                                   3654 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00155C 15 45                 3655         .word      LINK
                           00155E  3656 LINK = . 
      00155E 86                    3657         .byte      IMEDD+6
      00155F 52 45 50 45 41 54     3658         .ascii     "REPEAT"
      001565                       3659 REPEA:
      001565 CD 14 3D         [ 4] 3660         CALL     COMPI
      001568 03 FE                 3661         .word BRAN
      00156A CD 06 73         [ 4] 3662         call ADRADJ 
      00156D CD 13 F8         [ 4] 3663         CALL     COMMA
      001570 CD 0B 28         [ 4] 3664         CALL     HERE
      001573 CD 06 73         [ 4] 3665         call ADRADJ 
      001576 CD 04 E9         [ 4] 3666         CALL     SWAPP
      001579 CC 04 1B         [ 2] 3667         JP     STORE
                                   3668 
                                   3669 ;       AFT         ( a -- a A )
                                   3670 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00157C 15 5E                 3671         .word      LINK
                           00157E  3672 LINK = . 
      00157E 83                    3673 	.byte      IMEDD+3
      00157F 41 46 54              3674         .ascii     "AFT"
      001582                       3675 AFT:
      001582 CD 04 CF         [ 4] 3676         CALL     DROP
      001585 CD 15 35         [ 4] 3677         CALL     AHEAD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001588 CD 0B 28         [ 4] 3678         CALL     HERE
      00158B CC 04 E9         [ 2] 3679         JP     SWAPP
                                   3680 
                                   3681 ;       ABORT"      ( -- ; <string> )
                                   3682 ;       Conditional abort with an error message.
      00158E 15 7E                 3683         .word      LINK
                           001590  3684 LINK = . 
      001590 86                    3685 	.byte      IMEDD+6
      001591 41 42 4F 52 54        3686         .ascii     "ABORT"
      001596 22                    3687         .byte      '"'
      001597                       3688 ABRTQ:
      001597 CD 14 3D         [ 4] 3689         CALL     COMPI
      00159A 12 BB                 3690         .word ABORQ
      00159C CC 14 6D         [ 2] 3691         JP     STRCQ
                                   3692 
                                   3693 ;       $"     ( -- ; <string> )
                                   3694 ;       Compile an inline string literal.
      00159F 15 90                 3695         .word      LINK
                           0015A1  3696 LINK = . 
      0015A1 82                    3697 	.byte      IMEDD+2
      0015A2 24 22                 3698         .byte     '$','"'
      0015A4                       3699 STRQ:
      0015A4 CD 14 3D         [ 4] 3700         CALL     COMPI
      0015A7 0E D5                 3701         .word STRQP 
      0015A9 CC 14 6D         [ 2] 3702         JP     STRCQ
                                   3703 
                                   3704 ;       ."          ( -- ; <string> )
                                   3705 ;       Compile an inline string literal to be typed out at run time.
      0015AC 15 A1                 3706         .word      LINK
                           0015AE  3707 LINK = . 
      0015AE 82                    3708 	.byte      IMEDD+2
      0015AF 2E 22                 3709         .byte     '.','"'
      0015B1                       3710 DOTQ:
      0015B1 CD 14 3D         [ 4] 3711         CALL     COMPI
      0015B4 0E DF                 3712         .word DOTQP 
      0015B6 CC 14 6D         [ 2] 3713         JP     STRCQ
                                   3714 
                                   3715 ;; Name compiler
                                   3716 
                                   3717 ;       ?UNIQUE ( a -- a )
                                   3718 ;       Display a warning message
                                   3719 ;       if word already exists.
      0015B9 15 AE                 3720         .word      LINK
                           0015BB  3721 LINK = . 
      0015BB 07                    3722         .byte      7
      0015BC 3F 55 4E 49 51 55 45  3723         .ascii     "?UNIQUE"
      0015C3                       3724 UNIQU:
      0015C3 CD 04 D9         [ 4] 3725         CALL     DUPP
      0015C6 CD 11 AF         [ 4] 3726         CALL     NAMEQ   ;?name exists
      0015C9 CD 03 E7         [ 4] 3727         CALL     QBRAN
      0015CC 15 E2                 3728         .word      UNIQ1
      0015CE CD 0E DF         [ 4] 3729         CALL     DOTQP   ;redef are OK
      0015D1 07                    3730         .byte       7
      0015D2 20 72 65 44 65 66 20  3731         .ascii     " reDef "       
      0015D9 CD 05 03         [ 4] 3732         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015DC CD 0B 11         [ 4] 3733         CALL     COUNT
      0015DF CD 0E 82         [ 4] 3734         CALL     TYPES   ;just in case
      0015E2 CC 04 CF         [ 2] 3735 UNIQ1:  JP     DROP
                                   3736 
                                   3737 ;       $,n     ( na -- )
                                   3738 ;       Build a new dictionary name
                                   3739 ;       using string at na.
                                   3740 ; compile dans l'espace des variables 
      0015E5 15 BB                 3741         .word      LINK
                           0015E7  3742 LINK = . 
      0015E7 03                    3743         .byte      3
      0015E8 24 2C 6E              3744         .ascii     "$,n"
      0015EB                       3745 SNAME:
      0015EB CD 04 D9         [ 4] 3746         CALL     DUPP
      0015EE CD 04 50         [ 4] 3747         CALL     CAT     ;?null input
      0015F1 CD 03 E7         [ 4] 3748         CALL     QBRAN
      0015F4 16 21                 3749         .word      PNAM1
      0015F6 CD 15 C3         [ 4] 3750         CALL     UNIQU   ;?redefinition
      0015F9 CD 04 D9         [ 4] 3751         CALL     DUPP
      0015FC CD 0B 11         [ 4] 3752         CALL     COUNT
      0015FF CD 06 D4         [ 4] 3753         CALL     PLUS
      001602 CD 06 27         [ 4] 3754         CALL     VPP
      001605 CD 04 1B         [ 4] 3755         CALL     STORE
      001608 CD 04 D9         [ 4] 3756         CALL     DUPP
      00160B CD 06 45         [ 4] 3757         CALL     LAST
      00160E CD 04 1B         [ 4] 3758         CALL     STORE   ;save na for vocabulary link
      001611 CD 09 B2         [ 4] 3759         CALL     CELLM   ;link address
      001614 CD 06 19         [ 4] 3760         CALL     CNTXT
      001617 CD 04 32         [ 4] 3761         CALL     AT
      00161A CD 04 E9         [ 4] 3762         CALL     SWAPP
      00161D CD 04 1B         [ 4] 3763         CALL     STORE
      001620 81               [ 4] 3764         RET     ;save code pointer
      001621 CD 0E D5         [ 4] 3765 PNAM1:  CALL     STRQP
      001624 05                    3766         .byte      5
      001625 20 6E 61 6D 65        3767         .ascii     " name" ;null input
      00162A CC 12 C3         [ 2] 3768         JP     ABOR1
                                   3769 
                                   3770 ;; FORTH compiler
                                   3771 
                                   3772 ;       $COMPILE        ( a -- )
                                   3773 ;       Compile next word to
                                   3774 ;       dictionary as a token or literal.
      00162D 15 E7                 3775         .word      LINK
                           00162F  3776 LINK = . 
      00162F 08                    3777         .byte      8
      001630 24 43 4F 4D 50 49 4C  3778         .ascii     "$COMPILE"
             45
      001638                       3779 SCOMP:
      001638 CD 11 AF         [ 4] 3780         CALL     NAMEQ
      00163B CD 06 83         [ 4] 3781         CALL     QDUP    ;?defined
      00163E CD 03 E7         [ 4] 3782         CALL     QBRAN
      001641 16 59                 3783         .word      SCOM2
      001643 CD 04 32         [ 4] 3784         CALL     AT
      001646 CD 03 B4         [ 4] 3785         CALL     DOLIT
      001649 80 00                 3786         .word     0x8000	;  IMEDD*256
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00164B CD 05 25         [ 4] 3787         CALL     ANDD    ;?immediate
      00164E CD 03 E7         [ 4] 3788         CALL     QBRAN
      001651 16 56                 3789         .word      SCOM1
      001653 CC 04 0E         [ 2] 3790         JP     EXECU
      001656 CC 16 F3         [ 2] 3791 SCOM1:  JP     JSRC
      001659 CD 0D 4D         [ 4] 3792 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00165C CD 03 E7         [ 4] 3793         CALL     QBRAN
      00165F 12 C3                 3794         .word      ABOR1
      001661 CC 14 5F         [ 2] 3795         JP     LITER
                                   3796 
                                   3797 ;       OVERT   ( -- )
                                   3798 ;       Link a new word into vocabulary.
      001664 16 2F                 3799         .word      LINK
                           001666  3800 LINK = . 
      001666 05                    3801         .byte      5
      001667 4F 56 45 52 54        3802         .ascii     "OVERT"
      00166C                       3803 OVERT:
      00166C CD 06 45         [ 4] 3804         CALL     LAST
      00166F CD 04 32         [ 4] 3805         CALL     AT
      001672 CD 06 19         [ 4] 3806         CALL     CNTXT
      001675 CC 04 1B         [ 2] 3807         JP     STORE
                                   3808 
                                   3809 ;       ;       ( -- )
                                   3810 ;       Terminate a colon definition.
      001678 16 66                 3811         .word      LINK
                           00167A  3812 LINK = . 
      00167A C1                    3813 	.byte      IMEDD+COMPO+1
      00167B 3B                    3814         .ascii     ";"
      00167C                       3815 SEMIS:
                           000001  3816 .if OPTIMIZE ; more compact and faster
      00167C CD 03 B4         [ 4] 3817         call DOLIT 
      00167F 00 81                 3818         .word 0x81   ; opcode for RET 
      001681 CD 14 0F         [ 4] 3819         call CCOMMA 
                           000000  3820 .else
                                   3821         CALL     COMPI
                                   3822         .word EXIT 
                                   3823 .endif 
      001684 CD 13 24         [ 4] 3824         CALL     LBRAC
      001687 CD 16 6C         [ 4] 3825         call OVERT 
      00168A CD 20 6E         [ 4] 3826         CALL FMOVE
      00168D CD 06 83         [ 4] 3827         call QDUP 
      001690 CD 03 E7         [ 4] 3828         call QBRAN 
      001693 17 C3                 3829         .word SET_RAMLAST 
      001695 CD 21 02         [ 4] 3830         CALL UPDATPTR
      001698 81               [ 4] 3831         RET 
                                   3832 
                                   3833 
                                   3834 ;       Terminate an ISR definition 
                                   3835 ;       retourn ca of ISR as double
                                   3836 ;       I; ( -- ud )
      001699 16 7A                 3837         .word LINK 
                           00169B  3838         LINK=.
      00169B C2                    3839         .byte 2+IMEDD+COMPO 
      00169C 49 3B                 3840         .ascii "I;" 
      00169E                       3841 ISEMI:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00169E 1D 00 02         [ 2] 3842         subw x,#CELLL  
      0016A1 90 AE 00 80      [ 2] 3843         ldw y,#IRET_CODE 
      0016A5 FF               [ 2] 3844         ldw (x),y 
      0016A6 CD 14 0F         [ 4] 3845         call CCOMMA
      0016A9 CD 13 24         [ 4] 3846         call LBRAC 
      0016AC CD 21 47         [ 4] 3847         call IFMOVE
      0016AF CD 06 83         [ 4] 3848         call QDUP 
      0016B2 CD 03 E7         [ 4] 3849         CALL QBRAN 
      0016B5 17 C3                 3850         .word SET_RAMLAST
      0016B7 CD 06 35         [ 4] 3851         CALL CPP
      0016BA CD 04 32         [ 4] 3852         call AT 
      0016BD CD 04 E9         [ 4] 3853         call SWAPP 
      0016C0 CD 06 35         [ 4] 3854         CALL CPP 
      0016C3 CD 04 1B         [ 4] 3855         call STORE 
      0016C6 CD 1B 1D         [ 4] 3856         call UPDATCP 
      0016C9 CD 1A DA         [ 4] 3857         call EEPVP 
      0016CC CD 04 CF         [ 4] 3858         call DROP 
      0016CF CD 04 32         [ 4] 3859         call AT 
      0016D2 CD 06 27         [ 4] 3860         call VPP 
      0016D5 CD 04 1B         [ 4] 3861         call STORE 
      0016D8 CC 0A 3A         [ 2] 3862         jp ZERO
      0016DB 81               [ 4] 3863         ret           
                                   3864         
                                   3865 
                                   3866 ;       ]       ( -- )
                                   3867 ;       Start compiling words in
                                   3868 ;       input stream.
      0016DC 16 9B                 3869         .word      LINK
                           0016DE  3870 LINK = . 
      0016DE 01                    3871         .byte      1
      0016DF 5D                    3872         .ascii     "]"
      0016E0                       3873 RBRAC:
      0016E0 CD 03 B4         [ 4] 3874         CALL   DOLIT
      0016E3 16 38                 3875         .word  SCOMP
      0016E5 CD 05 F7         [ 4] 3876         CALL   TEVAL
      0016E8 CC 04 1B         [ 2] 3877         JP     STORE
                                   3878 
                                   3879 ;       CALL,    ( ca -- )
                                   3880 ;       Compile a subroutine call.
      0016EB 16 DE                 3881         .word      LINK
                           0016ED  3882 LINK = . 
      0016ED 05                    3883         .byte      5
      0016EE 43 41 4C 4C 2C        3884         .ascii     "CALL,"
      0016F3                       3885 JSRC:
      0016F3 CD 03 B4         [ 4] 3886         CALL     DOLIT
      0016F6 00 CD                 3887         .word     CALLL     ;CALL
      0016F8 CD 14 0F         [ 4] 3888         CALL     CCOMMA
      0016FB CC 13 F8         [ 2] 3889         JP     COMMA
                                   3890 
                                   3891 ;       INIT-OFS ( -- )
                                   3892 ;       compute offset to adjust jump address 
                                   3893 ;       set variable OFFSET 
      0016FE 16 ED                 3894         .word LINK 
                           001700  3895         LINK=.
      001700 08                    3896         .byte 8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001701 49 4E 49 54 2D 4F 46  3897         .ascii "INIT-OFS" 
             53
      001709                       3898 INITOFS:
      001709 CD 05 E6         [ 4] 3899         call TFLASH 
      00170C CD 04 32         [ 4] 3900         CALL AT 
      00170F CD 04 D9         [ 4] 3901         CALL DUPP 
      001712 CD 03 E7         [ 4] 3902         call QBRAN
      001715 17 26                 3903         .word 1$
      001717 CD 04 CF         [ 4] 3904         call DROP  
      00171A CD 06 35         [ 4] 3905         call CPP 
      00171D CD 04 32         [ 4] 3906         call AT 
      001720 CD 0B 28         [ 4] 3907         call HERE
      001723 CD 07 4D         [ 4] 3908         call SUBB 
      001726 CD 06 6A         [ 4] 3909 1$:     call OFFSET 
      001729 CC 04 1B         [ 2] 3910         jp STORE  
                                   3911 
                                   3912 ;       :       ( -- ; <string> )
                                   3913 ;       Start a new colon definition
                                   3914 ;       using next word as its name.
      00172C 17 00                 3915         .word      LINK
                           00172E  3916 LINK = . 
      00172E 01                    3917         .byte      1
      00172F 3A                    3918         .ascii     ":"
      001730                       3919 COLON:
      001730 CD 17 09         [ 4] 3920         call INITOFS       
      001733 CD 10 B2         [ 4] 3921         CALL   TOKEN
      001736 CD 15 EB         [ 4] 3922         CALL   SNAME
      001739 CC 16 E0         [ 2] 3923         JP     RBRAC
                                   3924 
                                   3925 ;       I:  ( -- )
                                   3926 ;       Start interrupt service routine definition
                                   3927 ;       those definition have no name.
      00173C 17 2E                 3928         .word LINK
                           00173E  3929         LINK=.
      00173E 02                    3930         .byte 2 
      00173F 49 3A                 3931         .ascii "I:" 
      001741                       3932 ICOLON:
      001741 CD 17 09         [ 4] 3933         call INITOFS 
      001744 CC 16 E0         [ 2] 3934         jp RBRAC  
                                   3935 
                                   3936 ;       IMMEDIATE       ( -- )
                                   3937 ;       Make last compiled word
                                   3938 ;       an immediate word.
      001747 17 3E                 3939         .word      LINK
                           001749  3940 LINK = . 
      001749 09                    3941         .byte      9
      00174A 49 4D 4D 45 44 49 41  3942         .ascii     "IMMEDIATE"
             54 45
      001753                       3943 IMMED:
      001753 CD 03 B4         [ 4] 3944         CALL     DOLIT
      001756 80 00                 3945         .word     0x8000	;  IMEDD*256
      001758 CD 06 45         [ 4] 3946         CALL     LAST
      00175B CD 04 32         [ 4] 3947         CALL     AT
      00175E CD 04 32         [ 4] 3948         CALL     AT
      001761 CD 05 39         [ 4] 3949         CALL     ORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001764 CD 06 45         [ 4] 3950         CALL     LAST
      001767 CD 04 32         [ 4] 3951         CALL     AT
      00176A CC 04 1B         [ 2] 3952         JP     STORE
                                   3953 
                                   3954 ;; Defining words
                                   3955 
                                   3956 ;       CREATE  ( -- ; <string> )
                                   3957 ;       Compile a new array
                                   3958 ;       without allocating space.
      00176D 17 49                 3959         .word      LINK
                           00176F  3960 LINK = . 
      00176F 06                    3961         .byte      6
      001770 43 52 45 41 54 45     3962         .ascii     "CREATE"
      001776                       3963 CREAT:
      001776 CD 10 B2         [ 4] 3964         CALL     TOKEN
      001779 CD 15 EB         [ 4] 3965         CALL     SNAME
      00177C CD 16 6C         [ 4] 3966         CALL     OVERT        
      00177F CD 14 3D         [ 4] 3967         CALL     COMPI 
      001782 05 86                 3968         .word DOVAR 
      001784 81               [ 4] 3969         RET
                                   3970 
                                   3971 ;       VARIABLE        ( -- ; <string> )
                                   3972 ;       Compile a new variable
                                   3973 ;       initialized to 0.
      001785 17 6F                 3974         .word      LINK
                           001787  3975 LINK = . 
      001787 08                    3976         .byte      8
      001788 56 41 52 49 41 42 4C  3977         .ascii     "VARIABLE"
             45
      001790                       3978 VARIA:
                                   3979 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001790 CD 0B 28         [ 4] 3980         CALL HERE
      001793 CD 04 D9         [ 4] 3981         CALL DUPP 
      001796 CD 09 A3         [ 4] 3982         CALL CELLP
      001799 CD 06 27         [ 4] 3983         CALL VPP 
      00179C CD 04 1B         [ 4] 3984         CALL STORE
      00179F CD 17 76         [ 4] 3985         CALL CREAT
      0017A2 CD 04 D9         [ 4] 3986         CALL DUPP
      0017A5 CD 13 F8         [ 4] 3987         CALL COMMA
      0017A8 CD 0A 3A         [ 4] 3988         CALL ZERO
      0017AB CD 04 E9         [ 4] 3989         call SWAPP 
      0017AE CD 04 1B         [ 4] 3990         CALL STORE
      0017B1 CD 20 6E         [ 4] 3991         CALL FMOVE ; move definition to FLASH
      0017B4 CD 06 83         [ 4] 3992         CALL QDUP 
      0017B7 CD 03 E7         [ 4] 3993         CALL QBRAN 
      0017BA 17 C3                 3994         .word SET_RAMLAST   
      0017BC CD 1B 34         [ 4] 3995         call UPDATVP  ; don't update if variable kept in RAM.
      0017BF CD 21 02         [ 4] 3996         CALL UPDATPTR
      0017C2 81               [ 4] 3997         RET         
      0017C3                       3998 SET_RAMLAST: 
      0017C3 CD 06 45         [ 4] 3999         CALL LAST 
      0017C6 CD 04 32         [ 4] 4000         CALL AT 
      0017C9 CD 06 58         [ 4] 4001         CALL RAMLAST 
      0017CC CC 04 1B         [ 2] 4002         jp STORE  
                                   4003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4004 
                                   4005 ;       CONSTANT  ( n -- ; <string> )
                                   4006 ;       Compile a new constant 
                                   4007 ;       n CONSTANT name 
      0017CF 17 87                 4008         .word LINK 
                           0017D1  4009         LINK=. 
      0017D1 08                    4010         .byte 8 
      0017D2 43 4F 4E 53 54 41 4E  4011         .ascii "CONSTANT" 
             54
      0017DA                       4012 CONSTANT:          
      0017DA CD 10 B2         [ 4] 4013         CALL TOKEN
      0017DD CD 15 EB         [ 4] 4014         CALL SNAME 
      0017E0 CD 16 6C         [ 4] 4015         CALL OVERT 
      0017E3 CD 14 3D         [ 4] 4016         CALL COMPI 
      0017E6 18 04                 4017         .word DOCONST
      0017E8 CD 13 F8         [ 4] 4018         CALL COMMA 
      0017EB CD 20 6E         [ 4] 4019         CALL FMOVE
      0017EE CD 06 83         [ 4] 4020         CALL QDUP 
      0017F1 CD 03 E7         [ 4] 4021         CALL QBRAN 
      0017F4 17 C3                 4022         .word SET_RAMLAST  
      0017F6 CD 21 02         [ 4] 4023         CALL UPDATPTR  
      0017F9 81               [ 4] 4024 1$:     RET          
                                   4025 
                                   4026 ; CONSTANT runtime semantic 
                                   4027 ; doCONST  ( -- n )
      0017FA 17 D1                 4028         .word LINK 
                           0017FC  4029         LINK=.
      0017FC 07                    4030         .byte 7
      0017FD 44 4F 43 4F 4E 53 54  4031         .ascii "DOCONST"
      001804                       4032 DOCONST:
      001804 1D 00 02         [ 2] 4033         subw x,#CELLL
      001807 90 85            [ 2] 4034         popw y 
      001809 90 FE            [ 2] 4035         ldw y,(y) 
      00180B FF               [ 2] 4036         ldw (x),y 
      00180C 81               [ 4] 4037         ret 
                                   4038 
                                   4039 ;----------------------------------
                                   4040 ; create double constant 
                                   4041 ; DCONST ( d -- ; <string> )
                                   4042 ;----------------------------------
      00180D 17 FC                 4043     .word LINK 
                           00180F  4044     LINK=.
      00180F 06                    4045     .byte 6 
      001810 44 43 4F 4E 53 54     4046     .ascii "DCONST"
      001816                       4047 DCONST:
      001816 CD 10 B2         [ 4] 4048         CALL TOKEN
      001819 CD 15 EB         [ 4] 4049         CALL SNAME 
      00181C CD 16 6C         [ 4] 4050         CALL OVERT 
      00181F CD 14 3D         [ 4] 4051         CALL COMPI 
      001822 18 45                 4052         .word DO_DCONST
      001824 CD 13 F8         [ 4] 4053         CALL COMMA
      001827 CD 13 F8         [ 4] 4054         CALL COMMA  
      00182A CD 20 6E         [ 4] 4055         CALL FMOVE
      00182D CD 06 83         [ 4] 4056         CALL QDUP 
      001830 CD 03 E7         [ 4] 4057         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001833 17 C3                 4058         .word SET_RAMLAST  
      001835 CD 21 02         [ 4] 4059         CALL UPDATPTR  
      001838 81               [ 4] 4060 1$:     RET          
                                   4061     
                                   4062 ;----------------------------------
                                   4063 ; runtime for DCONST 
                                   4064 ; stack double constant 
                                   4065 ; DO-DCONST ( -- d )
                                   4066 ;-----------------------------------
      001839 18 0F                 4067         .word LINK 
                           00183B  4068         LINK=.
      00183B 09                    4069         .byte 9 
      00183C 44 4F 2D 44 43 4F 4E  4070         .ascii "DO-DCONST"
             53 54
      001845                       4071 DO_DCONST:
      001845 90 85            [ 2] 4072     popw y 
      001847 90 BF 24         [ 2] 4073     ldw YTEMP,y 
      00184A 1D 00 04         [ 2] 4074     subw x,#2*CELLL 
      00184D 90 FE            [ 2] 4075     ldw y,(y)
      00184F FF               [ 2] 4076     ldw (x),y 
      001850 90 BE 24         [ 2] 4077     ldw y,YTEMP 
      001853 90 EE 02         [ 2] 4078     ldw y,(2,y)
      001856 EF 02            [ 2] 4079     ldw (2,x),y 
      001858 81               [ 4] 4080     ret 
                                   4081 
                                   4082 ;; Tools
                                   4083 
                                   4084 ;       _TYPE   ( b u -- )
                                   4085 ;       Display a string. Filter
                                   4086 ;       non-printing characters.
      001859 18 3B                 4087         .word      LINK
                           00185B  4088 LINK = . 
      00185B 05                    4089         .byte      5
      00185C 5F 54 59 50 45        4090         .ascii     "_TYPE"
      001861                       4091 UTYPE:
      001861 CD 04 A2         [ 4] 4092         CALL     TOR     ;start count down loop
      001864 20 0F            [ 2] 4093         JRA     UTYP2   ;skip first pass
      001866 CD 04 D9         [ 4] 4094 UTYP1:  CALL     DUPP
      001869 CD 04 50         [ 4] 4095         CALL     CAT
      00186C CD 0A 64         [ 4] 4096         CALL     TCHAR
      00186F CD 03 9E         [ 4] 4097         CALL     EMIT    ;display only printable
      001872 CD 09 CE         [ 4] 4098         CALL     ONEP    ;increment address
      001875 CD 03 C8         [ 4] 4099 UTYP2:  CALL     DONXT
      001878 18 66                 4100         .word      UTYP1   ;loop till done
      00187A CC 04 CF         [ 2] 4101         JP     DROP
                                   4102 
                                   4103 ;       dm+     ( a u -- a )
                                   4104 ;       Dump u bytes from ,
                                   4105 ;       leaving a+u on  stack.
      00187D 18 5B                 4106         .word      LINK
                           00187F  4107 LINK = . 
      00187F 03                    4108         .byte      3
      001880 64 6D 2B              4109         .ascii     "dm+"
      001883                       4110 DUMPP:
      001883 CD 05 03         [ 4] 4111         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001886 CD 03 B4         [ 4] 4112         CALL     DOLIT
      001889 00 04                 4113         .word      4
      00188B CD 0F 08         [ 4] 4114         CALL     UDOTR   ;display address
      00188E CD 0E 58         [ 4] 4115         CALL     SPACE
      001891 CD 04 A2         [ 4] 4116         CALL     TOR     ;start count down loop
      001894 20 11            [ 2] 4117         JRA     PDUM2   ;skip first pass
      001896 CD 04 D9         [ 4] 4118 PDUM1:  CALL     DUPP
      001899 CD 04 50         [ 4] 4119         CALL     CAT
      00189C CD 03 B4         [ 4] 4120         CALL     DOLIT
      00189F 00 03                 4121         .word      3
      0018A1 CD 0F 08         [ 4] 4122         CALL     UDOTR   ;display numeric data
      0018A4 CD 09 CE         [ 4] 4123         CALL     ONEP    ;increment address
      0018A7 CD 03 C8         [ 4] 4124 PDUM2:  CALL     DONXT
      0018AA 18 96                 4125         .word      PDUM1   ;loop till done
      0018AC 81               [ 4] 4126         RET
                                   4127 
                                   4128 ;       DUMP    ( a u -- )
                                   4129 ;       Dump u bytes from a,
                                   4130 ;       in a formatted manner.
      0018AD 18 7F                 4131         .word      LINK
                           0018AF  4132 LINK = . 
      0018AF 04                    4133         .byte      4
      0018B0 44 55 4D 50           4134         .ascii     "DUMP"
      0018B4                       4135 DUMP:
      0018B4 CD 05 96         [ 4] 4136         CALL     BASE
      0018B7 CD 04 32         [ 4] 4137         CALL     AT
      0018BA CD 04 A2         [ 4] 4138         CALL     TOR
      0018BD CD 0C E0         [ 4] 4139         CALL     HEX     ;save radix, set hex
      0018C0 CD 03 B4         [ 4] 4140         CALL     DOLIT
      0018C3 00 10                 4141         .word      16
      0018C5 CD 08 F4         [ 4] 4142         CALL     SLASH   ;change count to lines
      0018C8 CD 04 A2         [ 4] 4143         CALL     TOR     ;start count down loop
      0018CB CD 0E A0         [ 4] 4144 DUMP1:  CALL     CR
      0018CE CD 03 B4         [ 4] 4145         CALL     DOLIT
      0018D1 00 10                 4146         .word      16
      0018D3 CD 06 BF         [ 4] 4147         CALL     DDUP
      0018D6 CD 18 83         [ 4] 4148         CALL     DUMPP   ;display numeric
      0018D9 CD 06 94         [ 4] 4149         CALL     ROT
      0018DC CD 06 94         [ 4] 4150         CALL     ROT
      0018DF CD 0E 58         [ 4] 4151         CALL     SPACE
      0018E2 CD 0E 58         [ 4] 4152         CALL     SPACE
      0018E5 CD 18 61         [ 4] 4153         CALL     UTYPE   ;display printable characters
      0018E8 CD 03 C8         [ 4] 4154         CALL     DONXT
      0018EB 18 CB                 4155         .word      DUMP1   ;loop till done
      0018ED CD 04 CF         [ 4] 4156 DUMP3:  CALL     DROP
      0018F0 CD 04 83         [ 4] 4157         CALL     RFROM
      0018F3 CD 05 96         [ 4] 4158         CALL     BASE
      0018F6 CC 04 1B         [ 2] 4159         JP     STORE   ;restore radix
                                   4160 
                                   4161 ;       .S      ( ... -- ... )
                                   4162 ;        Display  contents of stack.
      0018F9 18 AF                 4163         .word      LINK
                           0018FB  4164 LINK = . 
      0018FB 02                    4165         .byte      2
      0018FC 2E 53                 4166         .ascii     ".S"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0018FE                       4167 DOTS:
      0018FE CD 0E A0         [ 4] 4168         CALL     CR
      001901 CD 0A 7C         [ 4] 4169         CALL     DEPTH   ;stack depth
      001904 CD 04 A2         [ 4] 4170         CALL     TOR     ;start count down loop
      001907 20 09            [ 2] 4171         JRA     DOTS2   ;skip first pass
      001909 CD 04 96         [ 4] 4172 DOTS1:  CALL     RAT
      00190C CD 0A 93         [ 4] 4173 	CALL     PICK
      00190F CD 0F 3B         [ 4] 4174         CALL     DOT     ;index stack, display contents
      001912 CD 03 C8         [ 4] 4175 DOTS2:  CALL     DONXT
      001915 19 09                 4176         .word      DOTS1   ;loop till done
      001917 CD 0E DF         [ 4] 4177         CALL     DOTQP
      00191A 05                    4178         .byte      5
      00191B 20 3C 73 70 20        4179         .ascii     " <sp "
      001920 81               [ 4] 4180         RET
                                   4181 
                                   4182 ;       >NAME   ( ca -- na | F )
                                   4183 ;       Convert code address
                                   4184 ;       to a name address.
      001921 18 FB                 4185         .word      LINK
                           001923  4186 LINK = . 
      001923 05                    4187         .byte      5
      001924 3E 4E 41 4D 45        4188         .ascii     ">NAME"
      001929                       4189 TNAME:
      001929 CD 06 19         [ 4] 4190         CALL     CNTXT   ;vocabulary link
      00192C CD 04 32         [ 4] 4191 TNAM2:  CALL     AT
      00192F CD 04 D9         [ 4] 4192         CALL     DUPP    ;?last word in a vocabulary
      001932 CD 03 E7         [ 4] 4193         CALL     QBRAN
      001935 19 50                 4194         .word      TNAM4
      001937 CD 06 BF         [ 4] 4195         CALL     DDUP
      00193A CD 10 C0         [ 4] 4196         CALL     NAMET
      00193D CD 05 4E         [ 4] 4197         CALL     XORR    ;compare
      001940 CD 03 E7         [ 4] 4198         CALL     QBRAN
      001943 19 4A                 4199         .word      TNAM3
      001945 CD 09 B2         [ 4] 4200         CALL     CELLM   ;continue with next word
      001948 20 E2            [ 2] 4201         JRA     TNAM2
      00194A CD 04 E9         [ 4] 4202 TNAM3:  CALL     SWAPP
      00194D CC 04 CF         [ 2] 4203         JP     DROP
      001950 CD 06 B4         [ 4] 4204 TNAM4:  CALL     DDROP
      001953 CC 0A 3A         [ 2] 4205         JP     ZERO
                                   4206 
                                   4207 ;       .ID     ( na -- )
                                   4208 ;        Display  name at address.
      001956 19 23                 4209         .word      LINK
                           001958  4210 LINK = . 
      001958 03                    4211         .byte      3
      001959 2E 49 44              4212         .ascii     ".ID"
      00195C                       4213 DOTID:
      00195C CD 06 83         [ 4] 4214         CALL     QDUP    ;if zero no name
      00195F CD 03 E7         [ 4] 4215         CALL     QBRAN
      001962 19 72                 4216         .word      DOTI1
      001964 CD 0B 11         [ 4] 4217         CALL     COUNT
      001967 CD 03 B4         [ 4] 4218         CALL     DOLIT
      00196A 00 1F                 4219         .word      0x1F
      00196C CD 05 25         [ 4] 4220         CALL     ANDD    ;mask lexicon bits
      00196F CC 18 61         [ 2] 4221         JP     UTYPE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001972 CD 0E DF         [ 4] 4222 DOTI1:  CALL     DOTQP
      001975 09                    4223         .byte      9
      001976 20 6E 6F 4E 61 6D 65  4224         .ascii     " noName"
      00197D 81               [ 4] 4225         RET
                                   4226 
                           000000  4227 WANT_SEE=0
                           000000  4228 .if WANT_SEE 
                                   4229 ;       SEE     ( -- ; <string> )
                                   4230 ;       A simple decompiler.
                                   4231 ;       Updated for byte machines.
                                   4232         .word      LINK
                                   4233 LINK = . 
                                   4234         .byte      3
                                   4235         .ascii     "SEE"
                                   4236 SEE:
                                   4237         CALL     TICK    ;starting address
                                   4238         CALL     CR
                                   4239         CALL     ONEM
                                   4240 SEE1:   CALL     ONEP
                                   4241         CALL     DUPP
                                   4242         CALL     AT
                                   4243         CALL     DUPP
                                   4244         CALL     QBRAN
                                   4245         .word    SEE2
                                   4246         CALL     TNAME   ;?is it a name
                                   4247 SEE2:   CALL     QDUP    ;name address or zero
                                   4248         CALL     QBRAN
                                   4249         .word    SEE3
                                   4250         CALL     SPACE
                                   4251         CALL     DOTID   ;display name
                                   4252         CALL     ONEP
                                   4253         JRA      SEE4
                                   4254 SEE3:   CALL     DUPP
                                   4255         CALL     CAT
                                   4256         CALL     UDOT    ;display number
                                   4257 SEE4:   CALL     NUFQ    ;user control
                                   4258         CALL     QBRAN
                                   4259         .word    SEE1
                                   4260         JP     DROP
                                   4261 .endif ; WANT_SEE 
                                   4262 
                                   4263 ;       WORDS   ( -- )
                                   4264 ;       Display names in vocabulary.
      00197E 19 58                 4265         .word      LINK
                           001980  4266 LINK = . 
      001980 05                    4267         .byte      5
      001981 57 4F 52 44 53        4268         .ascii     "WORDS"
      001986                       4269 WORDS:
      001986 CD 0E A0         [ 4] 4270         CALL     CR
      001989 CD 06 19         [ 4] 4271         CALL     CNTXT   ;only in context
      00198C CD 04 32         [ 4] 4272 WORS1:  CALL     AT
      00198F CD 06 83         [ 4] 4273         CALL     QDUP    ;?at end of list
      001992 CD 03 E7         [ 4] 4274         CALL     QBRAN
      001995 19 A8                 4275         .word      WORS2
      001997 CD 04 D9         [ 4] 4276         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00199A CD 0E 58         [ 4] 4277         CALL     SPACE
      00199D CD 19 5C         [ 4] 4278         CALL     DOTID   ;display a name
      0019A0 CD 09 B2         [ 4] 4279         CALL     CELLM
      0019A3 CD 03 FE         [ 4] 4280         CALL     BRAN
      0019A6 19 8C                 4281         .word      WORS1
      0019A8 81               [ 4] 4282 WORS2:  RET
                                   4283 
                                   4284         
                                   4285 ;; Hardware reset
                                   4286 
                                   4287 ;       hi      ( -- )
                                   4288 ;       Display sign-on message.
      0019A9 19 80                 4289         .word      LINK
                           0019AB  4290 LINK = . 
      0019AB 02                    4291         .byte      2
      0019AC 68 69                 4292         .ascii     "hi"
      0019AE                       4293 HI:
      0019AE CD 0E A0         [ 4] 4294         CALL     CR
      0019B1 CD 0E DF         [ 4] 4295         CALL     DOTQP   ;initialize I/O
      0019B4 0F                    4296         .byte      15
      0019B5 73 74 6D 38 65 46 6F  4297         .ascii     "stm8eForth v"
             72 74 68 20 76
      0019C1 33                    4298 	.byte      VER+'0'
      0019C2 2E                    4299         .byte      '.' 
      0019C3 30                    4300 	.byte      EXT+'0' ;version
      0019C4 CD 0E DF         [ 4] 4301         CALL    DOTQP
                           000001  4302 .if NUCLEO          
      0019C7 12                    4303         .byte 18
      0019C8 20 6F 6E 20 4E 55 43  4304         .ascii  " on NUCLEO-8S208RB"
             4C 45 4F 2D 38 53 32
             30 38 52 42
                           000000  4305 .else ; DISCOVERY 
                                   4306         .byte 19
                                   4307         .ascii  " on STM8S-DISCOVERY"
                                   4308 .endif
      0019DA CC 0E A0         [ 2] 4309         JP     CR
                                   4310 
                           000000  4311 WANT_DEBUG=0
                           000000  4312 .if WANT_DEBUG 
                                   4313 ;       DEBUG      ( -- )
                                   4314 ;       Display sign-on message.
                                   4315 ;        .word      LINK
                                   4316 LINK = . 
                                   4317         .byte      5
                                   4318         .ascii     "DEBUG"
                                   4319 DEBUG:
                                   4320 	CALL DOLIT
                                   4321 	.word 0x65
                                   4322 	CALL EMIT
                                   4323 	CALL DOLIT
                                   4324 	.word 0
                                   4325  	CALL ZLESS 
                                   4326 	CALL DOLIT
                                   4327 	.word 0xFFFE
                                   4328 	CALL ZLESS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4329 	CALL UPLUS 
                                   4330  	CALL DROP 
                                   4331 	CALL DOLIT
                                   4332 	.word 3
                                   4333 	CALL UPLUS 
                                   4334 	CALL UPLUS 
                                   4335  	CALL DROP
                                   4336 	CALL DOLIT
                                   4337 	.word 0x43
                                   4338 	CALL UPLUS 
                                   4339  	CALL DROP
                                   4340 	CALL EMIT
                                   4341 	CALL DOLIT
                                   4342 	.word 0x4F
                                   4343 	CALL DOLIT
                                   4344 	.word 0x6F
                                   4345  	CALL XORR
                                   4346 	CALL DOLIT
                                   4347 	.word 0xF0
                                   4348  	CALL ANDD
                                   4349 	CALL DOLIT
                                   4350 	.word 0x4F
                                   4351  	CALL ORR
                                   4352 	CALL EMIT
                                   4353 	CALL DOLIT
                                   4354 	.word 8
                                   4355 	CALL DOLIT
                                   4356 	.word 6
                                   4357  	CALL SWAPP
                                   4358 	CALL OVER
                                   4359 	CALL XORR
                                   4360 	CALL DOLIT
                                   4361 	.word 3
                                   4362 	CALL ANDD 
                                   4363 	CALL ANDD
                                   4364 	CALL DOLIT
                                   4365 	.word 0x70
                                   4366 	CALL UPLUS 
                                   4367 	CALL DROP
                                   4368 	CALL EMIT
                                   4369 	CALL DOLIT
                                   4370 	.word 0
                                   4371 	CALL QBRAN
                                   4372 	.word DEBUG1
                                   4373 	CALL DOLIT
                                   4374 	.word 0x3F
                                   4375 DEBUG1:
                                   4376 	CALL DOLIT
                                   4377 	.word 0xFFFF
                                   4378 	CALL QBRAN
                                   4379 	.word DEBUG2
                                   4380 	CALL DOLIT
                                   4381 	.word 0x74
                                   4382 	CALL BRAN
                                   4383 	.word DEBUG3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4384 DEBUG2:
                                   4385 	CALL DOLIT
                                   4386 	.word 0x21
                                   4387 DEBUG3:
                                   4388 	CALL EMIT
                                   4389 	CALL DOLIT
                                   4390 	.word 0x68
                                   4391 	CALL DOLIT
                                   4392 	.word 0x80
                                   4393 	CALL STORE
                                   4394 	CALL DOLIT
                                   4395 	.word 0x80
                                   4396 	CALL AT
                                   4397 	CALL EMIT
                                   4398 	CALL DOLIT
                                   4399 	.word 0x4D
                                   4400 	CALL TOR
                                   4401 	CALL RAT
                                   4402 	CALL RFROM
                                   4403 	CALL ANDD
                                   4404 	CALL EMIT
                                   4405 	CALL DOLIT
                                   4406 	.word 0x61
                                   4407 	CALL DOLIT
                                   4408 	.word 0xA
                                   4409 	CALL TOR
                                   4410 DEBUG4:
                                   4411 	CALL DOLIT
                                   4412 	.word 1
                                   4413 	CALL UPLUS 
                                   4414 	CALL DROP
                                   4415 	CALL DONXT
                                   4416 	.word DEBUG4
                                   4417 	CALL EMIT
                                   4418 	CALL DOLIT
                                   4419 	.word 0x656D
                                   4420 	CALL DOLIT
                                   4421 	.word 0x100
                                   4422 	CALL UMSTA
                                   4423 	CALL SWAPP
                                   4424 	CALL DOLIT
                                   4425 	.word 0x100
                                   4426 	CALL UMSTA
                                   4427 	CALL SWAPP 
                                   4428 	CALL DROP
                                   4429 	CALL EMIT
                                   4430 	CALL EMIT
                                   4431 	CALL DOLIT
                                   4432 	.word 0x2043
                                   4433 	CALL DOLIT
                                   4434 	.word 0
                                   4435 	CALL DOLIT
                                   4436 	.word 0x100
                                   4437 	CALL UMMOD
                                   4438 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4439 	CALL EMIT
                                   4440 	;JP ORIG
                                   4441 	RET
                                   4442 .endif ; WANT_DEBUG 
                                   4443 
                                   4444 
                                   4445 ;       'BOOT   ( -- a )
                                   4446 ;       The application startup vector.
      0019DD 19 AB                 4447         .word      LINK
                           0019DF  4448 LINK = . 
      0019DF 05                    4449         .byte      5
      0019E0 27 42 4F 4F 54        4450         .ascii     "'BOOT"
      0019E5                       4451 TBOOT:
      0019E5 CD 05 86         [ 4] 4452         CALL     DOVAR
      0019E8 40 02                 4453         .word    APP_RUN      ;application to boot
                                   4454 
                                   4455 ;       COLD    ( -- )
                                   4456 ;       The hilevel cold start s=ence.
      0019EA 19 DF                 4457         .word      LINK
                           0019EC  4458         LINK = . 
      0019EC 04                    4459         .byte      4
      0019ED 43 4F 4C 44           4460         .ascii     "COLD"
      0019F1                       4461 COLD:
                           000000  4462 .if WANT_DEBUG
                                   4463         CALL DEBUG
                                   4464 .endif ; WANT_DEBUG
      0019F1 CD 03 B4         [ 4] 4465 COLD1:  CALL     DOLIT
      0019F4 00 2B                 4466         .word      UZERO
      0019F6 CD 03 B4         [ 4] 4467 	CALL     DOLIT
      0019F9 00 06                 4468         .word      UPP
      0019FB CD 03 B4         [ 4] 4469         CALL     DOLIT
      0019FE 00 1A                 4470 	.word      UEND-UZERO
      001A00 CD 0B 75         [ 4] 4471         CALL     CMOVE   ;initialize user area
                                   4472 
                                   4473 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A03 90 CE 40 02      [ 2] 4474         ldw y,APP_RUN 
      001A07 26 0B            [ 1] 4475         jrne 0$
      001A09 1D 00 02         [ 2] 4476         subw x,#CELLL 
      001A0C 90 AE 19 AE      [ 2] 4477         ldw y,#HI  
      001A10 FF               [ 2] 4478         ldw (x),y
      001A11 CD 1B 0C         [ 4] 4479         call UPDATRUN 
      001A14                       4480 0$:        
                                   4481 ; update LAST with APP_LAST 
                                   4482 ; if APP_LAST > LAST else do the opposite
      001A14 90 CE 40 00      [ 2] 4483         ldw y,APP_LAST 
      001A18 90 B3 1A         [ 2] 4484         cpw y,ULAST 
      001A1B 22 05            [ 1] 4485         jrugt 1$ 
                                   4486 ; save LAST at APP_LAST  
      001A1D CD 1A F4         [ 4] 4487         call UPDATLAST 
      001A20 20 06            [ 2] 4488         jra 2$
      001A22                       4489 1$: ; update LAST with APP_LAST 
      001A22 90 BF 1A         [ 2] 4490         ldw ULAST,y
      001A25 90 BF 14         [ 2] 4491         ldw UCNTXT,y
      001A28                       4492 2$:  
                                   4493 ; update APP_CP if < app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A28 90 CE 40 04      [ 2] 4494         ldw y,APP_CP  
      001A2C 90 B3 18         [ 2] 4495         cpw y,UCP   
      001A2F 24 06            [ 1] 4496         jruge 3$ 
      001A31 CD 1B 1D         [ 4] 4497         call UPDATCP
      001A34 90 BE 18         [ 2] 4498         ldw y,UCP   
      001A37                       4499 3$:
      001A37 90 BF 18         [ 2] 4500         ldw UCP,y                 
                                   4501 ; update UVP with APP_VP  
                                   4502 ; if APP_VP>UVP else do the opposite 
      001A3A 90 CE 40 06      [ 2] 4503         ldw y,APP_VP 
      001A3E 90 B3 16         [ 2] 4504         cpw y,UVP 
      001A41 22 05            [ 1] 4505         jrugt 4$
      001A43 CD 1B 34         [ 4] 4506         call UPDATVP 
      001A46 20 03            [ 2] 4507         jra 6$
      001A48                       4508 4$: ; update UVP with APP_VP 
      001A48 90 BF 16         [ 2] 4509         ldw UVP,y 
      001A4B                       4510 6$:      
      001A4B CD 13 A3         [ 4] 4511         CALL     PRESE   ;initialize data stack and TIB
      001A4E CD 19 E5         [ 4] 4512         CALL     TBOOT
      001A51 CD 0B 5E         [ 4] 4513         CALL     ATEXE   ;application boot
      001A54 CD 16 6C         [ 4] 4514         CALL     OVERT
      001A57 CC 13 C0         [ 2] 4515         JP     QUIT    ;start interpretation
                                   4516 
                                   4517 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4518         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001A5A 19 EC                   30     .word LINK 
                           001A5C    31     LINK=.
      001A5C 03                      32     .byte 3 
      001A5D 46 50 21                33     .ascii "FP!"
      001A60                         34 FPSTOR:
      001A60 90 93            [ 1]   35     ldw y,x
      001A62 90 FE            [ 2]   36     ldw y,(y)
      001A64 90 9F            [ 1]   37     ld a,yl 
      001A66 B7 32            [ 1]   38     ld FPTR,a 
      001A68 1C 00 02         [ 2]   39     addw x,#CELLL 
      001A6B 90 93            [ 1]   40     ldw y,x 
      001A6D 90 FE            [ 2]   41     ldw y,(y)
      001A6F 90 BF 33         [ 2]   42     ldw PTR16,y
      001A72 1C 00 02         [ 2]   43     addw x,#CELLL 
      001A75 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001A76 1A 5C                   51     .word LINK 
                           001A78    52 LINK=.
      001A78 06                      53     .byte 6 
      001A79 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001A7F                         55 EEPROM: 
      001A7F 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001A83 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001A86 EF 02            [ 2]   58     ldw (2,x),y 
      001A88 90 5F            [ 1]   59     clrw y 
      001A8A FF               [ 2]   60     ldw (x),y 
      001A8B 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001A8C 1A 78                   67 	.word LINK 
                           001A8E    68 	LINK=.
      001A8E 08                      69 	.byte 8 
      001A8F 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001A97                         71 EEPLAST:
      001A97 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001A9A 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001A9E EF 02            [ 2]   74 	ldw (2,x),y 
      001AA0 90 5F            [ 1]   75 	clrw y 
      001AA2 FF               [ 2]   76 	ldw (x),y 
      001AA3 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001AA4 1A 8E                   83 	.word LINK 
                           001AA6    84 	LINK=.
      001AA6 07                      85 	.byte 7
      001AA7 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001AAE                         87 EEPRUN:
      001AAE 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001AB1 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001AB5 EF 02            [ 2]   90 	ldw (2,x),y 
      001AB7 90 5F            [ 1]   91 	clrw y 
      001AB9 FF               [ 2]   92 	ldw (x),y 
      001ABA 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001ABB 1A A6                   99 	.word LINK
                           001ABD   100 	LINK=.
      001ABD 06                     101 	.byte 6 
      001ABE 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001AC4                        103 EEPCP:
      001AC4 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001AC7 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001ACB EF 02            [ 2]  106 	ldw (2,x),y 
      001ACD 90 5F            [ 1]  107 	clrw y 
      001ACF FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001AD0 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001AD1 1A BD                  115 	.word LINK
                           001AD3   116 	LINK=.
      001AD3 06                     117 	.byte 6
      001AD4 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001ADA                        119 EEPVP:
      001ADA 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001ADD 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001AE1 EF 02            [ 2]  122 	ldw (2,x),y 
      001AE3 90 5F            [ 1]  123 	clrw y 
      001AE5 FF               [ 2]  124 	ldw (x),y 
      001AE6 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001AE7 1A D3                  131 	.word LINK 
                           001AE9   132 	LINK=.
      001AE9 0A                     133 	.byte 10
      001AEA 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001AF4                        135 UPDATLAST:
      001AF4 CD 06 45         [ 4]  136 	call LAST
      001AF7 CD 04 32         [ 4]  137 	call AT  
      001AFA CD 1A 97         [ 4]  138 	call EEPLAST
      001AFD CC 1C DE         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B00 1A E9                  145 	.word LINK
                           001B02   146 	LINK=.
      001B02 09                     147 	.byte 9
      001B03 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B0C                        149 UPDATRUN:
      001B0C CD 1A AE         [ 4]  150 	call EEPRUN
      001B0F CC 1C DE         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B12 1B 02                  157 	.word LINK 
                           001B14   158 	LINK=.
      001B14 08                     159 	.byte 8 
      001B15 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B1D                        161 UPDATCP:
      001B1D CD 06 35         [ 4]  162 	call CPP 
      001B20 CD 04 32         [ 4]  163 	call AT 
      001B23 CD 1A C4         [ 4]  164 	call EEPCP 
      001B26 CC 1C DE         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B29 1B 14                  171 	.word LINK
                           001B2B   172 	LINK=.
      001B2B 08                     173 	.byte 8 
      001B2C 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B34                        175 UPDATVP:
      001B34 CD 06 27         [ 4]  176 	call VPP 
      001B37 CD 04 32         [ 4]  177 	call AT
      001B3A CD 1A DA         [ 4]  178 	call EEPVP 
      001B3D CC 1C DE         [ 2]  179 	jp EESTORE
                                    180 	
                           000001   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001B40 1B 2B                  186     .word LINK 
                           001B42   187 LINK=.
      001B42 02                     188     .byte 2
      001B43 46 40                  189     .ascii "F@"
      001B45                        190 FARAT:
      001B45 CD 1A 60         [ 4]  191     call FPSTOR
      001B48 CC 1C 0D         [ 2]  192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
      001B4B 1B 42                  199     .word LINK
                           001B4D   200     LINK=.
      001B4D 03                     201     .byte 3 
      001B4E 46 43 40               202     .ascii "FC@" 
      001B51                        203 FARCAT:
      001B51 CD 1A 60         [ 4]  204     call FPSTOR
      001B54 CC 1C 2F         [ 2]  205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001B57 1B 4D                  213     .word LINK 
                           001B59   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B59 06                     215     .byte 6 
      001B5A 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001B60                        217 UNLKEE:
      001B60 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001B64 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001B68 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B6C 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B70 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B75 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001B76 1B 59                  230     .word LINK 
                           001B78   231 LINK=. 
      001B78 06                     232     .byte 6 
      001B79 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001B7F                        234 UNLKFL:
      001B7F 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001B83 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001B87 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001B8B 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001B8F 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001B94 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001B95 1B 78                  247 	.word LINK 
                           001B97   248 	LINK=.
      001B97 06                     249 	.byte 6
      001B98 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001B9E                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001B9E 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001BA1 3D 32            [ 1]  255 	tnz FPTR 
      001BA3 26 16            [ 1]  256 	jrne 4$
      001BA5 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001BA9 24 10            [ 1]  258     jruge 4$
      001BAB 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001BAF 25 0D            [ 1]  260     jrult 9$
      001BB1 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001BB5 22 07            [ 1]  262 	jrugt 9$
      001BB7 CD 1B 60         [ 4]  263 	call UNLKEE
      001BBA 81               [ 4]  264 	ret 
      001BBB CD 1B 7F         [ 4]  265 4$: call UNLKFL
      001BBE 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001BBF 1B 97                  273 	.word LINK 
                           001BC1   274 	LINK=.
      001BC1 04                     275 	.byte 4 
      001BC2 4C 4F 43 4B            276 	.ascii "LOCK" 
      001BC6                        277 LOCK: 
      001BC6 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BCA 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BCE 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001BCF 1B C1                  286 	.word LINK 
                           001BD1   287 	LINK=. 
      001BD1 08                     288 	.byte 8 
      001BD2 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001BDA                        290 INC_FPTR:
      001BDA 3C 34            [ 1]  291 	inc PTR8 
      001BDC 26 0C            [ 1]  292 	jrne 1$
      001BDE 90 89            [ 2]  293 	pushw y 
      001BE0 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001BE3 90 5C            [ 2]  295 	incw y 
      001BE5 90 BF 32         [ 2]  296 	ldw FPTR,y
      001BE8 90 85            [ 2]  297 	popw y  
      001BEA 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001BEB 1B D1                  304 	.word LINK 
                           001BED   305 	LINK=.
      001BED 04                     306 	.byte 4 
      001BEE 50 54 52 2B            307 	.ascii "PTR+"
      001BF2                        308 PTRPLUS:
      001BF2 90 93            [ 1]  309 	ldw y,x 
      001BF4 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001BF7 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001BFB 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001BFE 24 02            [ 1]  313 	jrnc 1$
      001C00 3C 32            [ 1]  314 	inc FPTR 
      001C02 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001C03 1B ED                  322 	.word LINK 
                           001C05   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001C05 07                     324 	.byte 7 
      001C06 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001C0D                        326 EE_READ:
      001C0D 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001C10 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001C14 90 95            [ 1]  329 	ld yh,a 
      001C16 CD 1B DA         [ 4]  330 	call INC_FPTR 
      001C19 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001C1D CD 1B DA         [ 4]  332 	call INC_FPTR 
      001C20 90 97            [ 1]  333 	ld yl,a 
      001C22 FF               [ 2]  334 	ldw (x),y 
      001C23 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001C24 1C 05                  341 	.word LINK 
                           001C26   342 	LINK=.
      001C26 08                     343 	.byte 8
      001C27 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001C2F                        345 EE_CREAD:
      001C2F 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001C32 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001C36 CD 1B DA         [ 4]  348 	call INC_FPTR
      001C39 90 5F            [ 1]  349 	clrw y 
      001C3B 90 97            [ 1]  350 	ld yl,a 
      001C3D FF               [ 2]  351 	ldw (x),y 
      001C3E 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001C3F 1C 26                  361 	.word LINK 
                           001C41   362 	LINK=. 
      001C41 07                     363 	.byte 7 
      001C42 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001C49                        366 WR_BYTE:
      001C49 90 93            [ 1]  367 	ldw y,x 
      001C4B 90 FE            [ 2]  368 	ldw y,(y)
      001C4D 1C 00 02         [ 2]  369 	addw x,#CELLL 
      001C50 90 9F            [ 1]  370 	ld a,yl
      001C52 92 BD 00 32      [ 4]  371 	ldf [FPTR],a
      001C56 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C5B CC 1B DA         [ 2]  373 	jp INC_FPTR 
                                    374 
                                    375 ;---------------------------------------
                                    376 ; write a word at address pointed 
                                    377 ; by FPTR and increment FPTR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    378 ; Expect pointer already initialzed 
                                    379 ; and memory unlocked 
                                    380 ; WR-WORD ( w -- )
                                    381 ;---------------------------------------
      001C5E 1C 41                  382 	.word LINK 
                           001C60   383 	LINK=.
      001C60 07                     384 	.byte 7 
      001C61 57 52 2D 57 4F 52 44   385 	.ascii "WR-WORD" 
      001C68                        386 WR_WORD:
      001C68 90 93            [ 1]  387 	ldw y,x
      001C6A 90 FE            [ 2]  388 	ldw y,(y)
      001C6C 1C 00 02         [ 2]  389 	addw x,#CELLL 
      001C6F 90 9E            [ 1]  390 	ld a,yh 
      001C71 92 BD 00 32      [ 4]  391 	ldf [FPTR],a
      001C75 72 05 50 5F FB   [ 2]  392 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C7A CD 1B DA         [ 4]  393 	call INC_FPTR 
      001C7D 90 9F            [ 1]  394 	ld a,yl 
      001C7F 92 BD 00 32      [ 4]  395 	ldf [FPTR],a
      001C83 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C88 CC 1B DA         [ 2]  397 	jp INC_FPTR 
                                    398 
                                    399 
                                    400 ;---------------------------------------
                                    401 ; write a byte to FLASH or EEPROM/OPTION  
                                    402 ; EEC!  (c ud -- )
                                    403 ;---------------------------------------
      001C8B 1C 60                  404     .word LINK 
                           001C8D   405 	LINK=.
      001C8D 04                     406     .byte 4 
      001C8E 45 45 43 21            407     .ascii "EEC!"
                                    408 	; local variables 
                           000001   409 	BTW = 1   ; byte to write offset on stack
                           000002   410     OPT = 2 
                           000002   411 	VSIZE = 2
      001C92                        412 EECSTORE:
      001C92 52 02            [ 2]  413 	sub sp,#VSIZE
      001C94 CD 1A 60         [ 4]  414     call FPSTOR
      001C97 E6 01            [ 1]  415 	ld a,(1,x)
      001C99 43               [ 1]  416 	cpl a 
      001C9A 6B 01            [ 1]  417 	ld (BTW,sp),a ; byte to write 
      001C9C 0F 02            [ 1]  418 	clr (OPT,sp)  ; OPTION flag
      001C9E CD 1B 9E         [ 4]  419 	call UNLOCK 
                                    420 	; check if option
      001CA1 3D 32            [ 1]  421 	tnz FPTR 
      001CA3 26 19            [ 1]  422 	jrne 2$
      001CA5 90 BE 33         [ 2]  423 	ldw y,PTR16 
      001CA8 90 A3 48 00      [ 2]  424 	cpw y,#OPTION_BASE
      001CAC 2B 10            [ 1]  425 	jrmi 2$
      001CAE 90 A3 48 80      [ 2]  426 	cpw y,#OPTION_END+1
      001CB2 2A 0A            [ 1]  427 	jrpl 2$
      001CB4 03 02            [ 1]  428 	cpl (OPT,sp)
                                    429 	; OPTION WRITE require this UNLOCK 
      001CB6 72 1E 50 5B      [ 1]  430     bset FLASH_CR2,#FLASH_CR2_OPT
      001CBA 72 1F 50 5C      [ 1]  431     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001CBE                        432 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001CBE CD 1C 49         [ 4]  433 	call WR_BYTE 	
      001CC1 0D 02            [ 1]  434 	tnz (OPT,sp)
      001CC3 27 0D            [ 1]  435 	jreq 3$ 
      001CC5 7B 01            [ 1]  436     ld a,(BTW,sp)
      001CC7 90 5F            [ 1]  437     clrw y
      001CC9 90 97            [ 1]  438 	ld yl,a 
      001CCB 1D 00 02         [ 2]  439 	subw x,#CELLL 
      001CCE FF               [ 2]  440 	ldw (x),y 
      001CCF CD 1C 49         [ 4]  441 	call WR_BYTE
      001CD2                        442 3$: 
      001CD2 CD 1B C6         [ 4]  443 	call LOCK 
      001CD5 5B 02            [ 2]  444 	addw sp,#VSIZE 
      001CD7 81               [ 4]  445     ret
                                    446 
                                    447 ;------------------------------
                                    448 ; write integer in FLASH|EEPROM
                                    449 ; EE! ( n ud -- )
                                    450 ;------------------------------
      001CD8 1C 8D                  451 	.word LINK 
                           001CDA   452 	LINK=.
      001CDA 03                     453 	.byte 3 
      001CDB 45 45 21               454 	.ascii "EE!"
      001CDE                        455 EESTORE:
      001CDE CD 1A 60         [ 4]  456 	call FPSTOR 
      001CE1 CD 1B 9E         [ 4]  457 	call UNLOCK 
      001CE4 90 93            [ 1]  458 	ldw y,x 
      001CE6 90 FE            [ 2]  459 	ldw y,(y)
      001CE8 90 89            [ 2]  460 	pushw y 
      001CEA 90 5E            [ 1]  461 	swapw y 
      001CEC FF               [ 2]  462 	ldw (x),y 
      001CED CD 1C 49         [ 4]  463 	call WR_BYTE 
      001CF0 90 85            [ 2]  464 	popw y 
      001CF2 1D 00 02         [ 2]  465 	subw x,#CELLL
      001CF5 FF               [ 2]  466 	ldw (x),y 
      001CF6 CD 1C 49         [ 4]  467 	call WR_BYTE
      001CF9 CC 1B C6         [ 2]  468 	jp LOCK 
                                    469 
                                    470 
                                    471 ;----------------------------
                                    472 ; Erase flash memory row 
                                    473 ; stm8s208 as 128 bytes rows
                                    474 ; ROW-ERASE ( ud -- )
                                    475 ;----------------------------
      001CFC 1C DA                  476 	.word LINK 
                           001CFE   477 	LINK=. 
      001CFE 09                     478 	.byte 9 
      001CFF 52 4F 57 2D 45 52 41   479 	.ascii "ROW-ERASE" 
             53 45
      001D08                        480 row_erase:
      001D08 CD 1A 60         [ 4]  481 	call FPSTOR
                                    482 ;code must be execute from RAM 
                                    483 ;copy routine to PAD 
      001D0B 1D 00 02         [ 2]  484 	subw x,#CELLL 
      001D0E 90 AE 1D 55      [ 2]  485 	ldw y,#row_erase_proc
      001D12 FF               [ 2]  486 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001D13 CD 0B 39         [ 4]  487 	call PAD 
      001D16 90 AE 1D 7C      [ 2]  488 	ldw y,#row_erase_proc_end 
      001D1A 72 A2 1D 55      [ 2]  489 	subw y,#row_erase_proc
      001D1E 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001D21 FF               [ 2]  491 	ldw (x),y 
      001D22 CD 0B 75         [ 4]  492 	call CMOVE 
      001D25                        493 block_erase:
      001D25 90 BE 33         [ 2]  494 	ldw y,FPTR+1
      001D28 90 A3 23 80      [ 2]  495 	cpw y,#app_space 
      001D2C 2A 13            [ 1]  496 	jrpl erase_flash 
                                    497 ; erase EEPROM block
      001D2E 90 A3 40 00      [ 2]  498 	cpw y,#EEPROM_BASE 
      001D32 24 01            [ 1]  499 	jruge 1$
      001D34 81               [ 4]  500 	ret ; bad address 
      001D35 90 A3 47 FF      [ 2]  501 1$: cpw y,#EEPROM_END 
      001D39 23 01            [ 2]  502 	jrule 2$ 
      001D3B 81               [ 4]  503 	ret ; bad address 
      001D3C                        504 2$:	
      001D3C CD 1B 60         [ 4]  505 	call UNLKEE 
      001D3F 20 03            [ 2]  506 	jra proceed_erase
                                    507 ; erase flash block:
      001D41                        508 erase_flash:
      001D41 CD 1B 7F         [ 4]  509 	call UNLKFL 
      001D44                        510 proceed_erase:
      001D44 CD 0B 39         [ 4]  511 	call PAD 
      001D47 90 93            [ 1]  512 	ldw y,x
      001D49 90 FE            [ 2]  513 	ldw y,(y)
      001D4B 1C 00 02         [ 2]  514 	addw x,#CELLL  
      001D4E 90 FD            [ 4]  515 	call (y) 
      001D50 72 17 50 5F      [ 1]  516 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D54 81               [ 4]  517 	ret 
                                    518 
                                    519 ; this routine is to be copied to PAD 
      001D55                        520 row_erase_proc:
      001D55 35 20 50 5B      [ 1]  521 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D59 35 DF 50 5C      [ 1]  522 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D5D 4F               [ 1]  523 	clr a 
      001D5E 90 5F            [ 1]  524 	clrw y 
      001D60 91 A7 00 32      [ 1]  525 	ldf ([FPTR],y),a
      001D64 90 5C            [ 2]  526     incw y
      001D66 91 A7 00 32      [ 1]  527 	ldf ([FPTR],y),a
      001D6A 90 5C            [ 2]  528     incw y
      001D6C 91 A7 00 32      [ 1]  529 	ldf ([FPTR],y),a
      001D70 90 5C            [ 2]  530     incw y
      001D72 91 A7 00 32      [ 1]  531 	ldf ([FPTR],y),a
      001D76 72 05 50 5F FB   [ 2]  532 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D7B 81               [ 4]  533 	ret
      001D7C                        534 row_erase_proc_end:
                                    535 
                                    536 
                                    537 ;-----------------------------------
                                    538 ; block programming must be 
                                    539 ; executed from RAM 
                                    540 ; initial contidions: 
                                    541 ; 		memory unlocked
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    542 ;       FPTR initialized 
                                    543 ; input: 
                                    544 ;    x   buffer address 
                                    545 ;-----------------------------------
                           000001   546 	BCNT=1 
      001D7C                        547 copy_buffer:
      001D7C 4B 80            [ 1]  548 	push #BLOCK_SIZE  
                                    549 ;enable block programming 
      001D7E 72 10 50 5B      [ 1]  550 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D82 72 11 50 5C      [ 1]  551 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D86 90 5F            [ 1]  552 	clrw y
      001D88 F6               [ 1]  553 1$:	ld a,(x)
      001D89 91 A7 00 32      [ 1]  554 	ldf ([FPTR],y),a
      001D8D 5C               [ 2]  555 	incw x 
      001D8E 90 5C            [ 2]  556 	incw y 
      001D90 0A 01            [ 1]  557 	dec (BCNT,sp)
      001D92 26 F4            [ 1]  558 	jrne 1$
                                    559 ; wait EOP bit 
      001D94 72 05 50 5F FB   [ 2]  560 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D99 84               [ 1]  561 	pop a ; remove BCNT from stack 
      001D9A 81               [ 4]  562 	ret 
      001D9B                        563 copy_buffer_end:
                                    564 
                                    565 ;-------------------------
                                    566 ; move program_row to RAM 
                                    567 ; in TIB 
                                    568 ;------------------------
      001D9B                        569 copy_prog_to_ram:
      001D9B 1D 00 06         [ 2]  570 	subw x,#6
      001D9E 90 AE 1D 7C      [ 2]  571 	ldw y,#copy_buffer 
      001DA2 EF 04            [ 2]  572 	ldw (4,x),y 
      001DA4 90 AE 17 00      [ 2]  573 	ldw y,#TIBBASE
      001DA8 EF 02            [ 2]  574 	ldw (2,x),y 
      001DAA 90 AE 1D 9B      [ 2]  575 	ldw y,#copy_buffer_end 
      001DAE 72 A2 1D 7C      [ 2]  576 	subw y,#copy_buffer  
      001DB2 FF               [ 2]  577 	ldw (x),y 
      001DB3 CD 0B 75         [ 4]  578 	call CMOVE 
      001DB6 81               [ 4]  579 	ret 
                                    580 
                                    581 
                                    582 ;-----------------------------
                                    583 ; write a row in FLASH/EEPROM 
                                    584 ; WR-ROW ( a ud -- )
                                    585 ; a -> address 128 byte buffer to write 
                                    586 ; ud ->  row address in FLASH|EEPROM 
                                    587 ;-----------------------------
      001DB7 1C FE                  588 	.word LINK 
                           001DB9   589 	LINK=.
      001DB9 06                     590 	.byte 6 
      001DBA 57 52 2D 52 4F 57      591 	.ascii "WR-ROW"
      001DC0                        592 write_row:
      001DC0 CD 1A 60         [ 4]  593 	call FPSTOR
                                    594 ; align to FLASH block 
      001DC3 A6 80            [ 1]  595 	ld a,#0x80 
      001DC5 B4 34            [ 1]  596 	and a,PTR8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001DC7 B7 34            [ 1]  597 	ld PTR8,a  
      001DC9 CD 1D 9B         [ 4]  598 	call copy_prog_to_ram
      001DCC CD 1B 9E         [ 4]  599 	call UNLOCK
      001DCF 90 93            [ 1]  600 	ldw y,x 
      001DD1 90 FE            [ 2]  601 	ldw y,(y)
      001DD3 1C 00 02         [ 2]  602 	addw x,#CELLL 
      001DD6 89               [ 2]  603 	pushw x 
      001DD7 93               [ 1]  604 	ldw x,y ; buffer address in x 
      001DD8 CD 17 00         [ 4]  605 	call TIBBASE
      001DDB CD 1B C6         [ 4]  606 	call LOCK
      001DDE 85               [ 2]  607 	popw x 
      001DDF 81               [ 4]  608 	ret 
                                    609 
                                    610 ;-------------------------------------
                                    611 ; change value of OPTION register 
                                    612 ; SET-OPT (c n -- ) 
                                    613 ; c new value.
                                    614 ; n OPT  number {1..7}
                                    615 ;--------------------------------------
      001DE0 1D B9                  616 		.word LINK 
                           001DE2   617 		LINK=.
      001DE2 07                     618 		.byte 7 
      001DE3 53 45 54 2D 4F 50 54   619 		.ascii "SET-OPT" 
      001DEA                        620 set_option: 
      001DEA 90 93            [ 1]  621 		ldw y,x 
      001DEC 90 FE            [ 2]  622 		ldw y,(y)
      001DEE 27 06            [ 1]  623 		jreq 1$
      001DF0 90 A3 00 07      [ 2]  624 		cpw y,#7 
      001DF4 23 04            [ 2]  625 		jrule 2$ 
                                    626 ; invalid OPTION number 		
      001DF6 1C 00 04         [ 2]  627 1$:		addw x,#2*CELLL
      001DF9 81               [ 4]  628 		ret
      001DFA 90 58            [ 2]  629 2$:		sllw y 
      001DFC 72 A9 47 FF      [ 2]  630 		addw y,#OPTION_BASE-1
      001E00 FF               [ 2]  631 		ldw (x),y 
      001E01 1D 00 02         [ 2]  632 		subw x,#CELLL 
      001E04 90 5F            [ 1]  633 		clrw y 
      001E06 FF               [ 2]  634 		ldw (x),y 
      001E07 CD 1C 92         [ 4]  635 		call EECSTORE
      001E0A 81               [ 4]  636 		ret 
                                    637 
                                    638 
                                    639 
                                    640 ;--------------------------------------
                                    641 ; reset system to its original state 
                                    642 ; before any user modification
                                    643 ; PRISTINE ( -- )
                                    644 ;-------------------------------------
      001E0B 1D E2                  645 	.word LINK  
                           001E0D   646 	LINK=.
      001E0D 08                     647 	.byte 8 
      001E0E 50 52 49 53 54 49 4E   648 	.ascii "PRISTINE"
             45
      001E16                        649 pristine:
                                    650 ;;; erase EEPROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E16 CD 1A 7F         [ 4]  651 	call EEPROM 
      001E19 CD 06 BF         [ 4]  652 1$:	call DDUP 
      001E1C CD 1D 08         [ 4]  653 	call row_erase
      001E1F 90 93            [ 1]  654 	ldw y,x 
      001E21 90 EE 02         [ 2]  655 	ldw y,(2,y)
      001E24 72 A9 00 80      [ 2]  656 	addw y,#BLOCK_SIZE
      001E28 EF 02            [ 2]  657 	ldw (2,x),y
      001E2A 90 A3 48 00      [ 2]  658 	cpw y,#OPTION_BASE 
      001E2E 25 E9            [ 1]  659 	jrult 1$
                                    660 ;;; reset OPTION to default values
      001E30 90 AE 00 01      [ 2]  661 	ldw y,#1 ; OPT1 
      001E34 FF               [ 2]  662 2$:	ldw (x),y   
      001E35 90 5F            [ 1]  663 	clrw y 
      001E37 EF 02            [ 2]  664 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E39 CD 06 BF         [ 4]  665 	call DDUP    ; ( 0 1 0 1 -- )  
      001E3C CD 1D EA         [ 4]  666 	call set_option
      001E3F 90 93            [ 1]  667 	ldw y,x 
      001E41 90 FE            [ 2]  668 	ldw y,(y)
      001E43 90 5C            [ 2]  669 	incw y  ; next OPTION 
      001E45 90 A3 00 08      [ 2]  670 	cpw y,#8 
      001E49 25 E9            [ 1]  671 	jrult 2$
                                    672 ;;; erase first row of app_space 	
      001E4B 90 AE 23 80      [ 2]  673 	ldw y,#app_space
      001E4F EF 02            [ 2]  674 	ldw (2,x),y  
      001E51 90 5F            [ 1]  675 	clrw y 
      001E53 FF               [ 2]  676 	ldw (x),y ; ( app_space 0 -- )
      001E54 CD 1D 08         [ 4]  677 	call row_erase 
                                    678 ; reset interrupt vectors 
      001E57 1D 00 02         [ 2]  679 	subw x,#CELLL 
      001E5A 90 5F            [ 1]  680 	clrw y  
      001E5C FF               [ 2]  681 4$:	ldw (x),y  ; ( n -- ) int# 
      001E5D CD 04 D9         [ 4]  682 	call DUPP  
      001E60 CD 1E 7D         [ 4]  683 	call reset_vector
      001E63 90 93            [ 1]  684 	ldw y,x 
      001E65 90 FE            [ 2]  685 	ldw y,(y)
      001E67 90 5C            [ 2]  686 	incw y   ; next vector 
      001E69 90 A3 00 19      [ 2]  687 	cpw y,#25 
      001E6D 25 ED            [ 1]  688 	jrult 4$
      001E6F CC 00 00         [ 2]  689 	jp NonHandledInterrupt ; reset MCU
                                    690 
                                    691 ;------------------------------
                                    692 ; reset an interrupt vector 
                                    693 ; to its initial value 
                                    694 ; i.e. NonHandledInterrupt
                                    695 ; RST-IVEC ( n -- )
                                    696 ;-----------------------------
      001E72 1E 0D                  697 	.word LINK 
                           001E74   698 	LINK=. 
      001E74 08                     699 	.byte 8 
      001E75 52 53 54 2D 49 56 45   700 	.ascii "RST-IVEC"
             43
      001E7D                        701 reset_vector:
      001E7D 90 93            [ 1]  702 	ldw y,x
      001E7F 1C 00 02         [ 2]  703 	addw x,#CELLL 
      001E82 90 FE            [ 2]  704 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E84 90 A3 00 17      [ 2]  705 	cpw y,#23 
      001E88 27 3A            [ 1]  706 	jreq 9$
      001E8A 90 A3 00 1D      [ 2]  707 	cpw y,#29 ; last vector
      001E8E 22 34            [ 1]  708 	jrugt 9$  
      001E90 90 58            [ 2]  709 	sllw y 
      001E92 90 58            [ 2]  710 	sllw y 
      001E94 72 A9 80 08      [ 2]  711 	addw y,#0x8008 ; irq0 address 
      001E98 90 BF 24         [ 2]  712 	ldw YTEMP,y
      001E9B 1D 00 06         [ 2]  713 	subw x,#3*CELLL 
      001E9E EF 02            [ 2]  714 	ldw (2,x),y 
      001EA0 90 5F            [ 1]  715 	clrw y
      001EA2 FF               [ 2]  716 	ldw (x),y 
      001EA3 A6 82            [ 1]  717 	ld a,#0x82 
      001EA5 90 95            [ 1]  718 	ld yh,a
      001EA7 EF 04            [ 2]  719 	ldw (4,x),y
      001EA9 CD 1C DE         [ 4]  720 	call EESTORE
      001EAC 1D 00 06         [ 2]  721 	subw x,#3*CELLL
      001EAF 90 5F            [ 1]  722 	clrw y 
      001EB1 FF               [ 2]  723 	ldw (x),y 
      001EB2 90 AE 00 00      [ 2]  724 	ldw y,#NonHandledInterrupt
      001EB6 EF 04            [ 2]  725 	ldw (4,x),y 
      001EB8 90 BE 24         [ 2]  726 	ldw y,YTEMP  
      001EBB 72 A9 00 02      [ 2]  727 	addw y,#2
      001EBF EF 02            [ 2]  728 	ldw (2,x),y 
      001EC1 CD 1C DE         [ 4]  729 	call EESTORE
      001EC4 81               [ 4]  730 9$:	ret 
                                    731 
                                    732 
                                    733 ;------------------------------
                                    734 ; all interrupt vector with 
                                    735 ; an address >= a are resetted 
                                    736 ; to default
                                    737 ; CHKIVEC ( a -- )
                                    738 ;------------------------------
      001EC5 1E 74                  739 	.word LINK 
                           001EC7   740 	LINK=.
      001EC7 07                     741 	.byte 7
      001EC8 43 48 4B 49 56 45 43   742 	.ascii "CHKIVEC"
                                    743 ;local variables 
                           000001   744 	SSP=1
                           000003   745 	CADR=3
                           000005   746 	OFS=5
                           000006   747 	VSIZE=6  
      001ECF                        748 CHKIVEC:
      001ECF 52 06            [ 2]  749 	sub sp,#VSIZE ;alloc local variables 
      001ED1 90 93            [ 1]  750 	ldw y,x 
      001ED3 90 FE            [ 2]  751 	ldw y,(y)
      001ED5 17 03            [ 2]  752 	ldw (CADR,sp),y ; ca 
      001ED7 1F 01            [ 2]  753 	ldw (SSP,sp),x 
      001ED9 AE 80 0A         [ 2]  754 	ldw x,#0x800a ; irq0 address 
      001EDC BF 33            [ 2]  755 	ldw PTR16,X
      001EDE AE FF FC         [ 2]  756 	ldw x,#-4 
      001EE1 1C 00 04         [ 2]  757 1$:	addw x,#4
      001EE4 A3 00 78         [ 2]  758 	cpw x,#30*4 ; irq0-29 
      001EE7 27 22            [ 1]  759 	jreq 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001EE9 90 93            [ 1]  760 	ldw y,x  
      001EEB 91 D6 33         [ 4]  761 	ld a,([PTR16],y)
      001EEE 11 03            [ 1]  762 	cp a,(CADR,sp)
      001EF0 25 EF            [ 1]  763 	jrult 1$
      001EF2 90 5C            [ 2]  764 	incw y 
      001EF4 91 D6 33         [ 4]  765 	ld a,([PTR16],y)
      001EF7 11 04            [ 1]  766 	cp a,(CADR+1,sp) 
      001EF9 25 E6            [ 1]  767 	jrult 1$ 
      001EFB 1F 05            [ 2]  768 	ldw (OFS,sp),x 
      001EFD 54               [ 2]  769 	srlw x
      001EFE 54               [ 2]  770 	srlw x 
      001EFF 90 93            [ 1]  771 	ldw y,x 
      001F01 1E 01            [ 2]  772 	ldw x,(SSP,sp)
      001F03 FF               [ 2]  773 	ldw (x),y
      001F04 CD 1E 7D         [ 4]  774 	call reset_vector
      001F07 1E 05            [ 2]  775 	ldw x,(OFS,sp) 
      001F09 20 D6            [ 2]  776 	jra 1$
      001F0B 1E 01            [ 2]  777 9$:	ldw x,(SSP,sp) 
      001F0D 1C 00 02         [ 2]  778 	addw x,#CELLL 
      001F10 5B 06            [ 2]  779 	addw sp,#VSIZE ; drop local variables  
      001F12 81               [ 4]  780 	ret 
                                    781 
                                    782 ;------------------------------
                                    783 ; set interrupt vector 
                                    784 ; SET-IVEC ( ud n -- )
                                    785 ;  ud Handler address
                                    786 ;  n  vector # 0 .. 29 
                                    787 ;-----------------------------
      001F13 1E C7                  788 	.word LINK
                           001F15   789 	LINK=.
      001F15 08                     790 	.byte 8 
      001F16 53 45 54 2D 49 56 45   791 	.ascii "SET-IVEC" 
             43
      001F1E                        792 set_vector:
      001F1E 90 93            [ 1]  793     ldw y,x 
      001F20 1C 00 02         [ 2]  794 	addw x,#CELLL 
      001F23 90 FE            [ 2]  795 	ldw y,(y) ; vector #
      001F25 90 A3 00 1D      [ 2]  796 	cpw y,#29 ; last vector
      001F29 23 04            [ 2]  797 	jrule 2$
      001F2B 1C 00 04         [ 2]  798 	addw x,#2*CELLL 
      001F2E 81               [ 4]  799 	ret
      001F2F 90 58            [ 2]  800 2$:	sllw y 
      001F31 90 58            [ 2]  801 	sllw y 
      001F33 72 A9 80 08      [ 2]  802 	addw y,#0X8008 ; IRQ0 vector address 
      001F37 90 BF 24         [ 2]  803 	ldw YTEMP,y ; vector address 
      001F3A A6 82            [ 1]  804 	ld a,#0x82 
      001F3C 90 95            [ 1]  805 	ld yh,a 
      001F3E E6 01            [ 1]  806 	ld a,(1,x) ; isr address bits 23..16 
      001F40 90 97            [ 1]  807 	ld yl,a 
                                    808 ;  write 0x82 + most significant byte of int address	
      001F42 1D 00 06         [ 2]  809 	subw x,#3*CELLL 
      001F45 EF 04            [ 2]  810 	ldw (4,x),y 
      001F47 90 BE 24         [ 2]  811 	ldw y,YTEMP
      001F4A EF 02            [ 2]  812 	ldw (2,x),y ; vector address 
      001F4C 90 5F            [ 1]  813 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001F4E FF               [ 2]  814 	ldw (x),y   ; as a double 
      001F4F CD 1C DE         [ 4]  815 	call EESTORE 
      001F52 90 93            [ 1]  816 	ldw y,x 
      001F54 90 EE 02         [ 2]  817 	ldw y,(2,y) ; bits 15..0 int vector 
      001F57 1D 00 06         [ 2]  818 	subw x,#3*CELLL 
      001F5A EF 04            [ 2]  819 	ldw (4,x),y 
      001F5C 90 BE 24         [ 2]  820 	ldw y,YTEMP 
      001F5F 72 A9 00 02      [ 2]  821 	addw y,#2 
      001F63 EF 02            [ 2]  822 	ldw (2,x),y 
      001F65 90 5F            [ 1]  823 	clrw y 
      001F67 FF               [ 2]  824 	ldw (x),y 
      001F68 CD 1C DE         [ 4]  825 	call EESTORE
      001F6B 1C 00 04         [ 2]  826 	addw x,#2*CELLL  
      001F6E 81               [ 4]  827 9$: ret 
                                    828 
                                    829 
                                    830 ;------------------------
                                    831 ; Compile word to flash
                                    832 ; EE, (w -- )
                                    833 ;-----------------------
      001F6F 1F 15                  834 	.word LINK
                           001F71   835 	LINK=.
      001F71 03                     836 	.byte 3
      001F72 45 45 2C               837 	.ascii "EE,"
      001F75                        838 EE_COMMA:
      001F75 1D 00 04         [ 2]  839 	subw x,#2*CELLL 
      001F78 90 BE 18         [ 2]  840 	ldw y,UCP
      001F7B 90 89            [ 2]  841 	pushw y 
      001F7D EF 02            [ 2]  842 	ldw (2,x),y 
      001F7F 90 5F            [ 1]  843 	clrw y 
      001F81 FF               [ 2]  844 	ldw (x),y
      001F82 CD 1C DE         [ 4]  845 	call EESTORE
      001F85 90 85            [ 2]  846 	popw y 
      001F87 72 A9 00 02      [ 2]  847 	addw y,#2
      001F8B 90 BF 18         [ 2]  848 	ldw UCP,y
      001F8E 81               [ 4]  849 	ret 
                                    850 
                                    851 
                                    852 ;-------------------------
                                    853 ; Compile byte to flash 
                                    854 ; EEC, ( c -- )	
                                    855 ;-------------------------
      001F8F 1F 71                  856 	.word LINK 
                           001F91   857 	LINK=.
      001F91 04                     858 	.byte 4 
      001F92 45 45 43 2C            859 	.ascii "EEC,"
      001F96                        860 EE_CCOMMA:
      001F96 1D 00 04         [ 2]  861 	subw x,#2*CELLL 
      001F99 90 BE 18         [ 2]  862 	ldw y,UCP
      001F9C 90 89            [ 2]  863 	pushw y 
      001F9E EF 02            [ 2]  864 	ldw (2,x),y 
      001FA0 90 5F            [ 1]  865 	clrw y 
      001FA2 FF               [ 2]  866 	ldw (x),y
      001FA3 CD 1C 92         [ 4]  867 	call EECSTORE
      001FA6 90 85            [ 2]  868 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001FA8 90 5C            [ 2]  869 	incw y 
      001FAA 90 BF 18         [ 2]  870 	ldw UCP,y
      001FAD 81               [ 4]  871 	ret 
                                    872 
                                    873 
                                    874 ;--------------------------
                                    875 ; copy FLASH block to ROWBUF
                                    876 ; ROW>BUF ( ud -- )
                                    877 ;--------------------------
      001FAE 1F 91                  878 	.word LINK 
                           001FB0   879 	LINK=.
      001FB0 07                     880 	.byte 7 
      001FB1 52 4F 57 3E 42 55 46   881 	.ascii "ROW>BUF"
      001FB8                        882 ROW2BUF: 
      001FB8 CD 1A 60         [ 4]  883 	call FPSTOR 
      001FBB A6 80            [ 1]  884 	ld a,#BLOCK_SIZE
      001FBD 88               [ 1]  885 	push a 
      001FBE B4 34            [ 1]  886 	and a,PTR8 ; block align 
      001FC0 B7 34            [ 1]  887 	ld PTR8,a
      001FC2 90 AE 16 80      [ 2]  888 	ldw y,#ROWBUFF 
      001FC6 92 BC 00 32      [ 5]  889 1$: ldf a,[FPTR]
      001FCA 90 F7            [ 1]  890 	ld (y),a
      001FCC CD 1B DA         [ 4]  891 	call INC_FPTR
      001FCF 90 5C            [ 2]  892 	incw y 
      001FD1 0A 01            [ 1]  893 	dec (1,sp)
      001FD3 26 F1            [ 1]  894 	jrne 1$ 
      001FD5 84               [ 1]  895 	pop a 
      001FD6 81               [ 4]  896 	ret 
                                    897 
                                    898 
                                    899 ;---------------------------
                                    900 ; copy ROWBUFF to flash 
                                    901 ; BUF>ROW ( ud -- )
                                    902 ; ud is row address as double 
                                    903 ;---------------------------
      001FD7 1F B0                  904 	.word LINK 
                           001FD9   905 	LINK=.
      001FD9 07                     906 	.byte 7 
      001FDA 42 55 46 3E 52 4F 57   907 	.ascii "BUF>ROW" 
      001FE1                        908 BUF2ROW:
      001FE1 CD 05 D4         [ 4]  909 	call TBUF ; ( ud rb -- )
      001FE4 CD 06 94         [ 4]  910 	call ROT 
      001FE7 CD 06 94         [ 4]  911 	call ROT  ; ( rb ud -- )
      001FEA CD 1D C0         [ 4]  912 	call write_row 
      001FED 81               [ 4]  913 	ret 
                                    914 
                                    915 ;---------------------------------
                                    916 ; how many byte free in that row 
                                    917 ; RFREE ( a -- n )
                                    918 ; a is least byte of target address
                                    919 ;----------------------------------
      001FEE 1F D9                  920 	.word LINK 
                           001FF0   921 	LINK=.
      001FF0 05                     922 	.byte 5 
      001FF1 52 46 52 45 45         923 	.ascii "RFREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FF6                        924 RFREE:
      001FF6 E6 01            [ 1]  925 	ld a,(1,x)
      001FF8 A4 7F            [ 1]  926 	and a,#BLOCK_SIZE-1 
      001FFA B7 24            [ 1]  927 	ld YTEMP,a 
      001FFC A6 80            [ 1]  928 	ld a,#BLOCK_SIZE 
      001FFE B0 24            [ 1]  929 	sub a,YTEMP 
      002000 90 5F            [ 1]  930 	clrw y 
      002002 90 97            [ 1]  931 	ld yl,a
      002004 FF               [ 2]  932 	ldw (x),y 
      002005 81               [ 4]  933 	ret 
                                    934 
                                    935 ;---------------------------------
                                    936 ; write u bytes to flash/EEPROM 
                                    937 ; constraint to row limit 
                                    938 ; RAM>EE ( ud a u -- u2 )
                                    939 ; ud flash address 
                                    940 ; a ram address 
                                    941 ; u bytes count
                                    942 ; return u2 bytes written  
                                    943 ;-------------------------------
      002006 1F F0                  944 	.word LINK 
                           002008   945 	LINK=. 
      002008 06                     946 	.byte 6
      002009 52 41 4D 3E 45 45      947 	.ascii "RAM>EE"
                                    948 	
      00200F                        949 RAM2EE:
                                    950 ; copy ud on top 
      00200F 90 93            [ 1]  951 	ldw y,x 
      002011 90 EE 06         [ 2]  952 	ldw y,(6,y) ; LSW of ud  
      002014 90 BF 24         [ 2]  953 	ldw YTEMP,y 
      002017 90 93            [ 1]  954 	ldw y,x 
      002019 90 EE 04         [ 2]  955 	ldw y,(4,y)  ; MSW of ud 
      00201C 1D 00 04         [ 2]  956 	subw x,#2*CELLL 
      00201F FF               [ 2]  957 	ldw (x),y 
      002020 90 BE 24         [ 2]  958 	ldw y,YTEMP 
      002023 EF 02            [ 2]  959 	ldw (2,x),y 
      002025 CD 1F B8         [ 4]  960 	call ROW2BUF 
      002028 90 93            [ 1]  961 	ldw y,x 
      00202A 90 EE 06         [ 2]  962 	ldw y,(6,y)
      00202D 90 89            [ 2]  963 	pushw y ; udl 
      00202F 90 9F            [ 1]  964 	ld a,yl
      002031 A4 7F            [ 1]  965 	and a,#BLOCK_SIZE-1 
      002033 90 5F            [ 1]  966 	clrw y 
      002035 90 97            [ 1]  967 	ld yl,a 
      002037 72 A9 16 80      [ 2]  968 	addw y,#ROWBUFF 
      00203B 1D 00 02         [ 2]  969 	subw x,#CELLL 
      00203E FF               [ 2]  970 	ldw (x),y  
      00203F CD 04 E9         [ 4]  971 	call SWAPP ;  ( ud a ra u -- )
      002042 CD 04 83         [ 4]  972 	call RFROM  
      002045 CD 1F F6         [ 4]  973 	call RFREE 
      002048 CD 07 EF         [ 4]  974 	call MIN
      00204B CD 04 D9         [ 4]  975 	call DUPP 
      00204E CD 04 A2         [ 4]  976 	call TOR  
      002051 CD 0B 75         [ 4]  977 	call CMOVE
      002054 CD 1F E1         [ 4]  978 	call BUF2ROW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      002057 CD 04 83         [ 4]  979 	call RFROM 
      00205A 81               [ 4]  980 	ret 
                                    981 
                                    982 
                                    983 ;--------------------------
                                    984 ; expand 16 bit address 
                                    985 ; to 32 bit address 
                                    986 ; FADDR ( a -- ud )
                                    987 ;--------------------------
      00205B 20 08                  988 	.word LINK 
                           00205D   989 	LINK=. 
      00205D 05                     990 	.byte 5 
      00205E 46 41 44 44 52         991 	.ascii "FADDR"
      002063                        992 FADDR:
      002063 CC 0A 3A         [ 2]  993 	jp ZERO 
                                    994 
                                    995 
                                    996 ;--------------------------
                                    997 ; move new colon definition to FLASH 
                                    998 ; using WR-ROW for efficiency 
                                    999 ; preserving bytes already used 
                                   1000 ; in the current block. 
                                   1001 ; At this point the compiler as completed
                                   1002 ; in RAM and pointers CP and CNTXT updated.
                                   1003 ; CNTXT point to nfa of new word and  
                                   1004 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1005 ; 
                                   1006 ; FMOVE ( -- cp+ )
                                   1007 ; 
                                   1008 ;--------------------------
      002066 20 5D                 1009 	.word LINK 
                           002068  1010 	LINK=.
      002068 05                    1011 	.byte 5 
      002069 46 4D 4F 56 45        1012 	.ascii "FMOVE" 
      00206E                       1013 FMOVE:
      00206E CD 05 E6         [ 4] 1014 	call TFLASH 
      002071 CD 04 32         [ 4] 1015 	CALL AT 
      002074 CD 03 E7         [ 4] 1016 	CALL QBRAN 
      002077 20 F2                 1017 	.word no_move  
      002079 CD 06 35         [ 4] 1018 	call CPP
      00207C CD 04 32         [ 4] 1019 	call AT  
      00207F CD 04 D9         [ 4] 1020 	call DUPP ; ( udl udl -- )
      002082 CD 06 19         [ 4] 1021 	call CNTXT 
      002085 CD 04 32         [ 4] 1022 	call AT 
      002088 CD 03 B4         [ 4] 1023 	call DOLIT 
      00208B 00 02                 1024 	.word 2 
      00208D CD 07 4D         [ 4] 1025 	call SUBB ; ( udl udl a -- )
      002090 CD 04 E9         [ 4] 1026 	call SWAPP 
      002093 CD 20 63         [ 4] 1027 	call FADDR 
      002096 CD 06 94         [ 4] 1028 	call ROT  ; ( udl ud a -- )
      002099 CD 04 D9         [ 4] 1029 	call DUPP 
      00209C CD 04 A2         [ 4] 1030 	call TOR    ; R: a 
      00209F                       1031 FMOVE2: 
      00209F CD 0B 28         [ 4] 1032 	call HERE 
      0020A2 CD 04 96         [ 4] 1033 	call RAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      0020A5 CD 07 4D         [ 4] 1034 	call SUBB ; (udl ud a wl -- )
      0020A8                       1035 next_row:
      0020A8 CD 04 D9         [ 4] 1036 	call DUPP 
      0020AB CD 04 A2         [ 4] 1037 	call TOR  ; ( udl ud a wl -- ) R: a wl
      0020AE CD 20 0F         [ 4] 1038 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      0020B1 CD 04 D9         [ 4] 1039 	call DUPP 
      0020B4 CD 04 A2         [ 4] 1040 	call TOR
      0020B7 CD 06 D4         [ 4] 1041 	call PLUS  ; ( udl+ ) 
      0020BA CD 04 D9         [ 4] 1042 	call DUPP 
      0020BD CD 0A 3A         [ 4] 1043 	call ZERO   ; ( udl+ ud -- )
      0020C0 CD 04 83         [ 4] 1044 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0020C3 CD 04 83         [ 4] 1045 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020C6 CD 05 03         [ 4] 1046 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020C9 CD 07 4D         [ 4] 1047 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020CC CD 04 D9         [ 4] 1048 	call DUPP 
      0020CF CD 03 E7         [ 4] 1049 	call QBRAN
      0020D2 20 EB                 1050 	.word fmove_done 
      0020D4 CD 04 E9         [ 4] 1051 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020D7 CD 04 83         [ 4] 1052 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020DA CD 06 D4         [ 4] 1053 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020DD CD 04 D9         [ 4] 1054 	call DUPP 
      0020E0 CD 04 A2         [ 4] 1055 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020E3 CD 04 E9         [ 4] 1056 	call SWAPP 
      0020E6 CD 03 FE         [ 4] 1057 	call BRAN
      0020E9 20 A8                 1058 	.word next_row  
      0020EB                       1059 fmove_done:	
      0020EB CD 04 83         [ 4] 1060 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020EE 1C 00 0A         [ 2] 1061 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020F1 81               [ 4] 1062  	ret  
      0020F2                       1063 no_move:
      0020F2 CD 0A 3A         [ 4] 1064 	call ZERO
      0020F5 81               [ 4] 1065 	ret 
                                   1066 
                                   1067 ;------------------------------------------
                                   1068 ; adjust pointers after **FMOVE** operetion.
                                   1069 ; UPDAT-PTR ( cp+ -- )
                                   1070 ; cp+ is new CP position after FMOVE 
                                   1071 ;-------------------------------------------
      0020F6 20 68                 1072 	.word LINK 
                           0020F8  1073 	LINK=.
      0020F8 09                    1074 	.byte 9
      0020F9 55 50 44 41 54 2D 50  1075 	.ascii "UPDAT-PTR" 
             54 52
      002102                       1076 UPDATPTR:
                                   1077 ;reset VP to previous position  
      002102 CD 1A DA         [ 4] 1078 	call EEPVP 
      002105 CD 04 CF         [ 4] 1079 	call DROP 
      002108 CD 04 32         [ 4] 1080 	call AT
      00210B CD 06 27         [ 4] 1081 	call VPP 
      00210E CD 04 1B         [ 4] 1082 	call STORE
                                   1083 ;update CONTEXT and LAST 
      002111 CD 1A C4         [ 4] 1084 	call EEPCP 
      002114 CD 04 CF         [ 4] 1085 	call DROP
      002117 CD 04 32         [ 4] 1086 	call AT
      00211A CD 03 B4         [ 4] 1087 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      00211D 00 02                 1088 	.word 2 
      00211F CD 06 D4         [ 4] 1089 	call PLUS 
      002122 CD 04 D9         [ 4] 1090 	call DUPP 
      002125 CD 06 19         [ 4] 1091 	call CNTXT 
      002128 CD 04 1B         [ 4] 1092 	call STORE
      00212B CD 06 45         [ 4] 1093 	call LAST
      00212E CD 04 1B         [ 4] 1094 	call STORE 
      002131 CD 1A F4         [ 4] 1095 	call UPDATLAST 
                                   1096 ;update CP 
      002134 CD 06 35         [ 4] 1097 	call CPP 
      002137 CD 04 1B         [ 4] 1098 	call STORE
      00213A CD 1B 1D         [ 4] 1099 	call UPDATCP 
      00213D 81               [ 4] 1100 	ret 
                                   1101 
                                   1102 ;-----------------------------
                                   1103 ; move interrupt sub-routine
                                   1104 ; in flash memory
                                   1105 ;----------------------------- 
      00213E 20 F8                 1106 	.word LINK 
                           002140  1107 	LINK=. 
      002140 06                    1108 	.byte 6
      002141 49 46 4D 4F 56 45     1109 	.ascii "IFMOVE" 
      002147                       1110 IFMOVE:
      002147 CD 05 E6         [ 4] 1111 	call TFLASH 
      00214A CD 04 32         [ 4] 1112 	CALL AT 
      00214D CD 03 E7         [ 4] 1113 	CALL QBRAN 
      002150 20 F2                 1114 	.word no_move 
      002152 CD 06 35         [ 4] 1115 	call CPP 
      002155 CD 04 32         [ 4] 1116 	call AT 
      002158 CD 04 D9         [ 4] 1117 	call DUPP ; ( udl udl -- )
      00215B CD 1A DA         [ 4] 1118 	call EEPVP 
      00215E CD 04 CF         [ 4] 1119 	call DROP
      002161 CD 04 32         [ 4] 1120 	call AT  ; ( udl udl a )
      002164 CD 04 A2         [ 4] 1121 	call TOR 
      002167 CD 20 63         [ 4] 1122 	call FADDR
      00216A CD 04 96         [ 4] 1123 	call RAT ; ( udl ud a -- ) R: a 
      00216D CC 20 9F         [ 2] 1124 	jp FMOVE2 
                                   1125 
                                   1126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           000001  4519 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4520         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      002170 21 40                   31         .word LINK 
                           002172    32         LINK=.
      002172 02                      33         .byte 2
      002173 50 49                   34         .ascii "PI" 
      002175                         35 PII:
      002175 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002178 90 AE 01 63      [ 2]   37         ldw y,#355 
      00217C EF 02            [ 2]   38         ldw (2,x),y 
      00217E 90 AE 00 71      [ 2]   39         ldw y,#113 
      002182 FF               [ 2]   40         ldw (x),y 
      002183 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      002184 21 72                   48         .word LINK 
                           002186    49         LINK=.
      002186 05                      50         .byte 5 
      002187 53 51 52 54 32          51         .ascii "SQRT2" 
      00218C                         52 SQRT2:
      00218C 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      00218F 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      002193 EF 02            [ 2]   55         ldw (2,x),y 
      002195 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002199 FF               [ 2]   57         ldw (x),y 
      00219A 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      00219B 21 86                   63         .word LINK 
                           00219D    64         LINK=.
      00219D 05                      65         .byte 5
      00219E 53 51 52 54 33          66         .ascii "SQRT3" 
      0021A3                         67 SQRT3: 
      0021A3 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      0021A6 90 AE 49 81      [ 2]   69     ldw y,#18817 
      0021AA EF 02            [ 2]   70     ldw (2,x),y 
      0021AC 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      0021B0 FF               [ 2]   72     ldw (x),y 
      0021B1 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      0021B2 21 9D                   78         .word LINK 
                           0021B4    79         LINK=.
      0021B4 01                      80         .byte 1
      0021B5 45                      81         .ascii "E" 
      0021B6                         82 ENEPER:
      0021B6 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      0021B9 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      0021BD EF 02            [ 2]   85     ldw (2,x),y 
      0021BF 90 AE 29 32      [ 2]   86     ldw y,#10546 
      0021C3 FF               [ 2]   87     ldw (x),y 
      0021C4 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      0021C5 21 B4                   92         .word LINK 
                           0021C7    93         LINK=.
      0021C7 06                      94         .byte 6 
      0021C8 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0021CE                         96 SQRT10:
      0021CE 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0021D1 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0021D5 EF 02            [ 2]   99     ldw (2,x),y 
      0021D7 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0021DB FF               [ 2]  101     ldw (x),y 
      0021DC 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0021DD 21 C7                  107         .word LINK 
                           0021DF   108         LINK=. 
      0021DF 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0021E0 31 32 52 54 32         110         .ascii "12RT2"
      0021E5                        111 RT12_2:
      0021E5 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0021E8 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0021EC EF 02            [ 2]  114     ldw (2,x),y 
      0021EE 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0021F2 FF               [ 2]  116     ldw (x),y 
      0021F3 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0021F4 21 DF                  122         .word LINK 
                           0021F6   123         LINK=.
      0021F6 05                     124         .byte 5 
      0021F7 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0021FC                        126 LOG2S:
      0021FC 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0021FF 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      002203 EF 02            [ 2]  129     ldw (2,x),y 
      002205 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      002209 FF               [ 2]  131     ldw (x),y 
      00220A 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      00220B 21 F6                  137         .word LINK 
                           00220D   138         LINK=.
      00220D 04                     139         .byte 4 
      00220E 4C 4E 32 53            140         .ascii "LN2S" 
      002212                        141 LN2S: 
      002212 1D 00 04         [ 2]  142     subw x,#2*CELLL
      002215 90 AE 01 E5      [ 2]  143     ldw y,#485
      002219 EF 02            [ 2]  144     ldw (2,x),y 
      00221B 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      00221F FF               [ 2]  146     ldw (x),y 
      002220 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4521 .endif
                           000001  4522 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4523         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      002221 22 0D                   32     .word LINK 
                           002223    33     LINK=.
      002223 06                      34     .byte 6
      002224 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      00222A                         36 CALLOT:
      00222A CD 06 35         [ 4]   37     CALL CPP
      00222D CD 04 D9         [ 4]   38     CALL DUPP 
      002230 CD 04 32         [ 4]   39     CALL AT 
      002233 CD 04 A2         [ 4]   40     CALL TOR 
      002236 CD 0A AA         [ 4]   41     CALL PSTOR 
      002239 CD 1B 1D         [ 4]   42     CALL UPDATCP 
      00223C CD 04 83         [ 4]   43     CALL RFROM
      00223F CC 0A 3A         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      002242 22 23                   52     .word LINK 
                           002244    53     LINK=.
      002244 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      002245 43 54 41 42 4C 45       55     .ascii "CTABLE"
      00224B                         56 CTABLE:
      00224B CD 22 2A         [ 4]   57     CALL CALLOT     
      00224E CC 18 16         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      002251 22 44                   67     .word LINK 
                           002253    68     LINK=.
      002253 06                      69     .byte 6
      002254 57 54 41 42 4C 45       70     .ascii "WTABLE"
      00225A                         71 WTABLE:
      00225A CD 09 C1         [ 4]   72     CALL CELLS  
      00225D CD 22 2A         [ 4]   73     CALL CALLOT 
      002260 CC 18 16         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      002263 22 53                   82     .word LINK 
                           002265    83     LINK=.
      002265 06                      84     .byte 6
      002266 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      00226C                         86 CTAT:
      00226C CD 1A 60         [ 4]   87     call FPSTOR 
      00226F CD 1B F2         [ 4]   88     call PTRPLUS 
      002272 CC 1C 2F         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      002275 22 65                   97     .word LINK 
                           002277    98     LINK=.
      002277 06                      99     .byte 6
      002278 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      00227E                        101 WTAT:
      00227E CD 1A 60         [ 4]  102     call FPSTOR 
      002281 CD 09 C1         [ 4]  103     call CELLS 
      002284 CD 1B F2         [ 4]  104     call PTRPLUS 
      002287 CD 1C 0D         [ 4]  105     call EE_READ 
      00228A 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      00228B 22 77                  113     .word LINK 
                           00228D   114     LINK=.
      00228D 06                     115     .byte 6 
      00228E 43 54 49 4E 49 54      116     .ascii "CTINIT"
      002294                        117 CTINIT:
      002294 CD 1A 60         [ 4]  118     CALL FPSTOR
      002297 CD 1B 9E         [ 4]  119     CALL UNLOCK
      00229A CD 0A 3A         [ 4]  120     CALL ZERO 
      00229D CD 09 CE         [ 4]  121 1$: CALL ONEP 
      0022A0 CD 04 D9         [ 4]  122     CALL DUPP 
      0022A3 CD 22 F0         [ 4]  123     CALL INTQ 
      0022A6 CD 03 E7         [ 4]  124     CALL QBRAN 
      0022A9 22 B3                  125     .word 2$
      0022AB CD 1C 49         [ 4]  126     call WR_BYTE 
      0022AE CD 03 FE         [ 4]  127     CALL BRAN 
      0022B1 22 9D                  128     .word 1$ 
      0022B3 CD 06 B4         [ 4]  129 2$: CALL DDROP 
      0022B6 CD 1B C6         [ 4]  130     CALL LOCK 
      0022B9 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      0022BA 22 8D                  138     .word LINK 
                           0022BC   139     LINK=.
      0022BC 06                     140     .byte 6 
      0022BD 57 54 49 4E 49 54      141     .ascii "WTINIT"
      0022C3                        142 WTINIT:
      0022C3 CD 1A 60         [ 4]  143     CALL FPSTOR
      0022C6 CD 1B 9E         [ 4]  144     CALL UNLOCK
      0022C9 CD 0A 3A         [ 4]  145     CALL ZERO 
      0022CC CD 09 CE         [ 4]  146 1$: CALL ONEP 
      0022CF CD 04 D9         [ 4]  147     CALL DUPP
      0022D2 CD 22 F0         [ 4]  148     CALL INTQ
      0022D5 CD 03 E7         [ 4]  149     CALL QBRAN 
      0022D8 22 E2                  150     .word 2$
      0022DA CD 1C 68         [ 4]  151     call WR_WORD 
      0022DD CD 03 FE         [ 4]  152     CALL BRAN 
      0022E0 22 CC                  153     .word 1$ 
      0022E2 CD 06 B4         [ 4]  154 2$: CALL DDROP 
      0022E5 CD 1B C6         [ 4]  155     CALL LOCK 
      0022E8 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0022E9 22 BC                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           0022EB   165     LINK=.
      0022EB 04                     166     .byte 4
      0022EC 5B 4E 5D 3F            167     .ascii "[N]?" 
      0022F0                        168 INTQ:
      0022F0 CD 0E A0         [ 4]  169     CALL CR 
      0022F3 CD 03 B4         [ 4]  170     call DOLIT 
      0022F6 00 5B                  171     .word '[
      0022F8 CD 03 9E         [ 4]  172     CALL EMIT 
      0022FB CD 0F 3B         [ 4]  173     CALL DOT 
      0022FE CD 0E DF         [ 4]  174     CALL  DOTQP
      002301 03                     175     .byte 3
      002302 5D 3F 20               176     .ascii "]? " 
      002305 CD 12 87         [ 4]  177     CALL QUERY 
      002308 CD 10 B2         [ 4]  178     call TOKEN 
      00230B CC 0D 4D         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4524 .endif
                                   4525 
                                   4526 ;===============================================================
                                   4527 
                           0022EB  4528 LASTN =	LINK   ;last name defined
                                   4529 
                                   4530 ; application code begin here
      002380                       4531 	.bndry 128 ; align on flash block  
      002380                       4532 app_space: 
                                   4533 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000770 R   |   6 ABOR1      0012C3 R
  6 ABOR2      0012DA R   |   6 ABORQ      0012BB R   |   6 ABORT      0012AC R
  6 ABRTQ      001597 R   |   6 ABSS       000767 R   |   6 ACCEP      001242 R
  6 ACCP1      00124B R   |   6 ACCP2      001271 R   |   6 ACCP3      001274 R
  6 ACCP4      001276 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000673 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001582 R   |   6 AGAIN      0014D8 R   |   6 AHEAD      001535 R
  6 ALLOT      0013EB R   |   6 ANDD       000525 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000432 R   |   6 ATEXE      000B5E R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0011EA R   |   6 BASE       000596 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      00142D R   |   6 BDIGS      000C45 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0014BA R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001082 R   |   6 BKSP       0011BA R
    BKSPP   =  000008     |   6 BLANK      000A2D R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FE1 R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CALLOT     00222A R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CARRY   =  000028     |   6 CAT        000450 R   |   6 CCOMMA     00140F R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      0009B2 R
  6 CELLP      0009A3 R   |   6 CELLS      0009C1 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000E72 R
  6 CHAR2      000E75 R   |   6 CHKIVEC    001ECF R   |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000B7D R
  6 CMOV2      000B95 R   |   6 CMOVE      000B75 R   |     CNTDWN  =  000030 
  6 CNTXT      000619 R   |   6 COLD       0019F1 R   |   6 COLD1      0019F1 R
  6 COLON      001730 R   |   6 COMMA      0013F8 R   |   6 COMPI      00143D R
    COMPO   =  000040     |   6 CONSTANT   0017DA R   |   6 COUNT      000B11 R
  6 CPP        000635 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000EA0 R   |   6 CREAT      001776 R   |     CRR     =  00000D 
  6 CSTOR      00043F R   |   6 CTABLE     00224B R   |   6 CTAT       00226C R
  6 CTINIT     002294 R   |   6 DAT        000AF1 R   |     DATSTK  =  001680 
  6 DCONST     001816 R   |   6 DDROP      0006B4 R   |   6 DDUP       0006BF R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000CF5 R
  6 DEPTH      000A7C R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000D3A R   |   6 DI         0000C2 R   |   6 DIG        000C6E R
  6 DIGIT      000C09 R   |   6 DIGS       000C7F R   |   6 DIGS1      000C7F R
  6 DIGS2      000C8C R   |   6 DIGTQ      000D09 R   |     DISCOVER=  000000 
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        00072E R
  6 DNEGA      000711 R   |   6 DOCONST    001804 R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EB6 R   |   6 DOT        000F3B R
  6 DOT1       000F51 R   |   6 DOTI1      001972 R   |   6 DOTID      00195C R
  6 DOTO1      00134F R   |   6 DOTOK      001335 R   |   6 DOTPR      001064 R
  6 DOTQ       0015B1 R   |   6 DOTQP      000EDF R   |   6 DOTR       000EED R
  6 DOTS       0018FE R   |   6 DOTS1      001909 R   |   6 DOTS2      001912 R
  6 DOVAR      000586 R   |   6 DO_DCONS   001845 R   |   6 DROP       0004CF R
  6 DSTOR      000ACB R   |   6 DUMP       0018B4 R   |   6 DUMP1      0018CB R
  6 DUMP3      0018ED R   |   6 DUMPP      001883 R   |   6 DUPP       0004D9 R
  6 EDIGS      000CAA R   |   6 EECSTORE   001C92 R   |   6 EEPCP      001AC4 R
  6 EEPLAST    001A97 R   |   6 EEPROM     001A7F R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_R=  000010     |     EEPROM_S=  000800 
  6 EEPRUN     001AAE R   |   6 EEPVP      001ADA R   |   6 EESTORE    001CDE R
  6 EE_CCOMM   001F96 R   |   6 EE_COMMA   001F75 R   |   6 EE_CREAD   001C2F R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

  6 EE_READ    001C0D R   |   6 EI         0000BB R   |   6 ELSEE      001510 R
  6 EMIT       00039E R   |   6 ENEPER     0021B6 R   |   6 EQ1        00078B R
  6 EQUAL      000775 R   |   6 ERASE      000BD7 R   |     ERR     =  00001B 
  6 EVAL       001378 R   |   6 EVAL1      001378 R   |   6 EVAL2      001394 R
  6 EXE1       000B6C R   |   6 EXECU      00040E R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000C31 R
  6 FADDR      002063 R   |   6 FARAT      001B45 R   |   6 FARCAT     001B51 R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000BA4 R
  6 FILL1      000BC1 R   |   6 FILL2      000BCA R   |   6 FIND       001116 R
  6 FIND1      001134 R   |   6 FIND2      001162 R   |   6 FIND3      00116E R
  6 FIND4      001182 R   |   6 FIND5      00118F R   |   6 FIND6      001173 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      00206E R   |   6 FMOVE2     00209F R
  6 FOR        00148D R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
  6 FPSTOR     001A60 R   |     FPTR    =  000032     |   6 FREEVAR    000223 R
  6 FREEVAR4   000259 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000B28 R
  6 HEX        000CE0 R   |   6 HI         0019AE R   |   6 HLD        000606 R
  6 HOLD       000C55 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     001741 R
  6 IFETCH     0014AB R   |   6 IFF        0014E8 R   |   6 IFMOVE     002147 R
    IMEDD   =  000080     |   6 IMMED      001753 R   |   6 INCH       000392 R
  6 INC_FPTR   001BDA R   |   6 INITOFS    001709 R   |   6 INN        0005B4 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      001317 R   |   6 INTER      0012ED R
  6 INTQ       0022F0 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0006EE R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      00169E R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0016F3 R   |   6 KEY        000E20 R   |   6 KTAP       001207 R
  6 KTAP1      00122A R   |   6 KTAP2      00122D R   |   6 LAST       000645 R
  6 LASTN   =  0022EB R   |   6 LBRAC      001324 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       0007B2 R
    LF      =  00000A     |   6 LINK    =  0022EB R   |   6 LITER      00145F R
  6 LN2S       002212 R   |   6 LOCK       001BC6 R   |   6 LOG2S      0021FC R
  6 LSHIFT     0009EC R   |   6 LSHIFT1    0009F5 R   |   6 LSHIFT4    0009FD R
  6 LT1        0007C8 R   |     MASKK   =  001F7F     |   6 MAX        0007D2 R
  6 MAX1       0007E5 R   |   6 MIN        0007EF R   |   6 MIN1       000802 R
  6 MMOD1      0008A5 R   |   6 MMOD2      0008B9 R   |   6 MMOD3      0008D0 R
  6 MMSM1      00084C R   |   6 MMSM2      000860 R   |   6 MMSM3      000862 R
  6 MMSM4      00086A R   |   6 MODD       0008EA R   |   6 MONE       000A53 R
    MS      =  00002E     |   6 MSEC       0002CE R   |   6 MSMOD      000888 R
  6 MSTA1      00097B R   |   6 MSTAR      000958 R   |     NAFR    =  004804 
  6 NAMEQ      0011AF R   |   6 NAMET      0010C0 R   |     NCLKOPT =  004808 
  6 NEGAT      0006FF R   |   6 NEX1       0003D5 R   |   6 NEXT       00149C R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       0005C4 R   |     NUBC    =  004802 
    NUCLEO  =  000001     |   6 NUFQ       000E36 R   |   6 NUFQ1      000E4F R
  6 NUMBQ      000D4D R   |   6 NUMQ1      000D81 R   |   6 NUMQ2      000DB2 R
  6 NUMQ3      000DF4 R   |   6 NUMQ4      000DF9 R   |   6 NUMQ5      000E08 R
  6 NUMQ6      000E0B R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     00066A R   |     OFS     =  000005 
  6 ONE        000A45 R   |   6 ONEM       0009DB R   |   6 ONEP       0009CE R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       000047 R
  6 ORR        000539 R   |   6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       000503 R   |   6 OVERT      00166C R   |     PA      =  000000 
  6 PACKS      000BE8 R   |   6 PAD        000B39 R   |   6 PAREN      001073 R
  6 PARS       000F6C R   |   6 PARS1      000F97 R   |   6 PARS2      000FC2 R
  6 PARS3      000FC5 R   |   6 PARS4      000FCE R   |   6 PARS5      000FF1 R
  6 PARS6      001006 R   |   6 PARS7      001015 R   |   6 PARS8      001024 R
  6 PARSE      001035 R   |   6 PAUSE      0002DE R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      001896 R
  6 PDUM2      0018A7 R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000A93 R   |   6 PII        002175 R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       0006D4 R
  6 PNAM1      001621 R   |   6 PRESE      0013A3 R   |     PROD1   =  000022 
    PROD2   =  000024     |     PROD3   =  000026     |   6 PROTECTE   0001FF R
  6 PSTOR      000AAA R   |     PTR16   =  000033     |     PTR8    =  000034 
  6 PTRPLUS    001BF2 R   |   6 QBRAN      0003E7 R   |   6 QDUP       000683 R
  6 QDUP1      00068D R   |   6 QKEY       000380 R   |   6 QSTAC      00135B R
  6 QUERY      001287 R   |   6 QUEST      000F5E R   |   6 QUIT       0013C0 R
  6 QUIT1      0013C8 R   |   6 QUIT2      0013CB R   |   6 RAM2EE     00200F R
    RAMBASE =  000000     |   6 RAMLAST    000658 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027C R
  6 RAT        000496 R   |   6 RBRAC      0016E0 R   |   6 REPEA      001565 R
  6 RFREE      001FF6 R   |   6 RFROM      000483 R   |     ROP     =  004800 
  6 ROT        000694 R   |   6 ROW2BUF    001FB8 R   |     ROWBUFF =  001680 
    RP0     =  00002C     |   6 RPAT       000460 R   |     RPP     =  0017FF 
  6 RPSTO      00046D R   |   6 RSHIFT     000A08 R   |   6 RSHIFT1    000A11 R
  6 RSHIFT4    000A19 R   |     RST_SR  =  0050B3     |   6 RT12_2     0021E5 R
  6 SAME1      0010DE R   |   6 SAME2      001107 R   |   6 SAMEQ      0010D6 R
  6 SCOM1      001656 R   |   6 SCOM2      001659 R   |   6 SCOMP      001638 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

  6 SEED       000263 R   |     SEEDX   =  000036     |     SEEDY   =  000038 
  6 SEMIS      00167C R   |   6 SETISP     0000CE R   |   6 SET_RAML   0017C3 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000C94 R
  6 SIGN1      000CA4 R   |   6 SLASH      0008F4 R   |   6 SLMOD      0008D8 R
  6 SNAME      0015EB R   |     SP0     =  00002A     |   6 SPACE      000E58 R
  6 SPACS      000E67 R   |   6 SPAT       0004B9 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      0004C6 R   |   6 SQRT10     0021CE R   |   6 SQRT2      00218C R
  6 SQRT3      0021A3 R   |   6 SSMOD      000984 R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       00094D R   |   6 STASL      000995 R
  6 STOD       000736 R   |   6 STORE      00041B R   |   6 STR        000CC2 R
  6 STRCQ      00146D R   |   6 STRQ       0015A4 R   |   6 STRQP      000ED5 R
  6 SUBB       00074D R   |   6 SWAPP      0004E9 R   |     SWIM_CSR=  007F80 
  6 TAP        0011F1 R   |   6 TBOOT      0019E5 R   |   6 TBUF       0005D4 R
    TBUFFBAS=  001680     |   6 TCHAR      000A64 R   |   6 TEMP       0005A5 R
  6 TEVAL      0005F7 R   |   6 TFLASH     0005E6 R   |   6 THENN      0014FD R
  6 TIB        000B4A R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0013D7 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R
  6 TIMER      0002F8 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      00192C R   |   6 TNAM3      00194A R   |   6 TNAM4      001950 R
  6 TNAME      001929 R   |   6 TOFLASH    000333 R   |   6 TOKEN      0010B2 R
  6 TOR        0004A2 R   |   6 TORAM      000373 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000A20 R   |   6 TYPE1      000E87 R   |   6 TYPE2      000E93 R
  6 TYPES      000E82 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  005231     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  005230     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000F28 R   |   6 UDOTR      000F08 R   |   6 UEND       000045 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0007AA R   |   6 ULESS      000794 R
  6 UMMOD      00082A R   |   6 UMSTA      000903 R   |   6 UNIQ1      0015E2 R
  6 UNIQU      0015C3 R   |   6 UNLKEE     001B60 R   |   6 UNLKFL     001B7F R
  6 UNLOCK     001B9E R   |   6 UNTIL      0014C5 R   |     UOFFSET =  00001C 
  6 UPDATCP    001B1D R   |   6 UPDATLAS   001AF4 R   |   6 UPDATPTR   002102 R
  6 UPDATRUN   001B0C R   |   6 UPDATVP    001B34 R   |   6 UPL1       00057A R
  6 UPLUS      000563 R   |     UPP     =  000006     |     URLAST  =  000020 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  00001E     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      001866 R   |   6 UTYP2      001875 R   |   6 UTYPE      001861 R
    UVP     =  000016     |   6 UZERO      00002B R   |   6 VARIA      001790 R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000003 
  6 VPP        000627 R   |     VSIZE   =  000006     |     WANT_CON=  000001 
    WANT_DEB=  000000     |     WANT_SCA=  000001     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00154B R
  6 WITHI      00080F R   |   6 WORDD      00109E R   |   6 WORDS      001986 R
  6 WORS1      00198C R   |   6 WORS2      0019A8 R   |   6 WR_BYTE    001C49 R
  6 WR_WORD    001C68 R   |   6 WTABLE     00225A R   |   6 WTAT       00227E R
  6 WTINIT     0022C3 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
    XMEM_SIZ=  017830     |   6 XORR       00054E R   |     XTEMP   =  000022 
    YTEMP   =  000024     |   6 ZERO       000A3A R   |   6 ZL1        00051B R
  6 ZLESS      000512 R   |   6 app_spac   002380 R   |   6 block_er   001D25 R
  6 clear_ra   000019 R   |   6 clock_in   000062 R   |   6 copy_buf   001D7C R
  6 copy_buf   001D9B R   |   6 copy_pro   001D9B R   |     da      =  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Symbol Table

    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001D41 R   |   6 fmove_do   0020EB R   |   6 main       000016 R
  6 next_row   0020A8 R   |   6 no_move    0020F2 R   |   6 pristine   001E16 R
  6 proceed_   001D44 R   |   6 reboot     000325 R   |   6 reset_ve   001E7D R
  6 row_eras   001D08 R   |   6 row_eras   001D55 R   |   6 row_eras   001D7C R
  6 set_opti   001DEA R   |   6 set_vect   001F1E R   |   6 uart_ini   000074 R
  6 write_ro   001DC0 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 125.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2380   flags    0

