ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                                .include "inc/config.inc" 
                                        ;;
                                        ; Copyright Jacques Deschênes 2019,2020 
                                        ; This file is part of stm8_eForth  
                                        ;
                                        ;     stm8_eForth is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     stm8_eForth is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        
                                        
                                        ; constants to select board
                                        ; to assemble for a specific 
                                        ; board set it to 1 and the other
                                        ; to 0. 
                                 
                                 
                                        
                                        ; set to 1 to include 
                                        ; scaling constants vocabulary
                                        ; see: const_ratio.asm 
                                 
                                        
                                        ; set to 1 to include 
                                        ; constants tables vocabulary 
                                        ; see: ctable.asm 
                                 
                                        
                                        ; how many bytes are reserved 
                                        ; by system at EEPROM base.
                                 
                                        
                                        
                                 
                                        	.include "inc/nucleo_8s208.inc"
                                        	.include "inc/stm8s208.inc"
                                        
                                        XMEM_SIZE=96304 ; size in bytes of EXTENDED MEMORY 
                                        UART_SR=UART1_SR
                                        UART_DR=UART1_DR
                                        
                                 
                                        	.include "inc/stm8s105.inc"
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/04/26
                                        ; STM8S105x4/6 µC registers map
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s105c6
                                        	
                                        ;;;;;;;;;;
                                        ; bit mask
                                        ;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; controller memory regions
                                        ; C4/C6,S4/S6 and K4/K6 all have 2K RAM and 1K EEPROM
                                 
                                 
                                        ; STM8S105x4 have 16K flash
                                 
                                        ; STM8S105x6 have 32K flash
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        
                                        ; MISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; NMISCOPT bits
                                 
                                 
                                 
                                 
                                 
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; port bit
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beep
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC individual element access
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                         
                                        	.include "inc/stm8s_disco.inc"
                                        ;-------------------------------------
                                        ; STM8S-Discovery card 
                                        ;-------------------------------------
                                        
                                        
                                 
                                 
                                 
                                        
                                        
                                        ; LD1 LED 
                                 
                                 
                                 
                                        
                                        ; BEEP
                                 
                                 
                                 
                                        
                                        ; TS1 
                                        ; use TIMER 1 3 channels 
                                        
                                        
                                        
                                 
                                 
                                 
                                        
                                        .endif 
                                        
                                        
                                     12 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     14 
                                     15 ;===============================================================
                                     16 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     17 ;  Date: 2020-06-07 
                                     18 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     19 ;  Date: 2019-10-26
                                     20 ;  Changes to memory map:
                                     21 ;       0x16f0  Data Stack, growing downward
                                     22 ;       0x1700  Terminal input buffer TIB
                                     23 ;       0x17ff  Return Stack, growing downard
                                     24 ;================================================================
                                     25 ;       STM8EF, Version 2.1, 13 July
                                     26 ;               Implemented on STM8S-Discovery Board.
                                     27 ;               Assembled by ST VisualDevelop STVD 
                                     28 ;               Bootup on internal 2 MHz clock
                                     29 ;               Switch to external 16 MHz crystal clock
                                     30 ;
                                     31 ; FORTH Virtual Machine:
                                     32 ; Subroutine threaded model
                                     33 ; SP Return stack pointer
                                     34 ; X Data stack pointer
                                     35 ; A,Y Scratch pad registers
                                     36 ;
                                     37 ; Memory Map:
                                     38 ; 0x0 RAM memory, system variables
                                     39 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     40 ; 0x780 Data stack, growing downward
                                     41 ; 0x790 Terminal input buffer TIB
                                     42 ; 0x7FF Return stack, growing downward
                                     43 ; 0x8000 Interrupt vector table
                                     44 ; 0x8080 FORTH startup code
                                     45 ; 0x80E7 Start of FORTH dictionary in ROM
                                     46 ; 0x9584 End of FORTH dictionary
                                     47 ;
                                     48 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     49 ;                  use UART1 instead of UART2 for communication with user.
                                     50 ;                  UART1 is available as ttyACM* device via USB connection.
                                     51 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     52 ;                  and MSEC word that return MS value.
                                     53 ;
                                     54 ;       EF12, Version 2.1, 18apr00cht
                                     55 ;               move to 8000H replacing WHYP.
                                     56 ;               copy interrupt vectors from WHYPFLSH.S19
                                     57 ;               to EF12.S19 before flashing
                                     58 ;               add TICKS1 and DELAY1 for motor stepping
                                     59 ;
                                     60 ;       EF12, 02/18/00, C. H. Ting
                                     61 ;       Adapt 86eForth v2.02 to 68HC12.
                                     62 ;               Use WHYP to seed EF12.ASM
                                     63 ;               Use AS12 native 68HC12 assembler:
                                     64 ;               as12 ef12.asm >ef12.lst
                                     65 ;       EF12A, add ADC code, 02mar00cht
                                     66 ;       EF12B, 01mar00cht
                                     67 ;               stack to 0x78, return stack to 0xf8.
                                     68 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     69 ;               add PWM registers
                                     70 ;               add SPI registers and code
                                     71 ;       EF12C, 12mar00cht
                                     72 ;               add MAX5250 D/A converter
                                     73 ;       EF12D, 15mar00cht
                                     74 ;               add all the Lexel interface words
                                     75 ;       EF12E, 18apr00cht, save for reference
                                     76 ;
                                     77 ;       Copyright (c) 2000
                                     78 ;       Dr. C. H. Ting
                                     79 ;       156 14th Avenue
                                     80 ;       San Mateo, CA 94402
                                     81 ;       (650) 571-7639
                                     82 ;
                                     83 
                                     84       
                                     85 ;*********************************************************
                                     86 ;	Assembler constants
                                     87 ;*********************************************************
                           000000    88 RAMBASE =	0x0000	   ;ram base
                           000000    89 .if NUCLEO 
                                     90 STACK   =	0x17FF 	;system (return) stack empty 
                                     91 DATSTK  =	0x1680	;data stack  empty
                                     92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                                     93 TIBBASE =       0X1700  ; transaction input buffer addr.
                           000001    94 .else ; DISCOVERY
                           0007FF    95 STACK   =	0x7FF 	;system (return) stack empty 
                           000680    96 DATSTK  =	0x680	;data stack  empty
                           000680    97 TBUFFBASE =     0x680  ; flash read/write transaction buffer address  
                           000700    98 TIBBASE =       0X700  ; transaction input buffer addr.
                                     99 .endif
                                    100 
                                    101 ;; Memory allocation
                           000006   102 UPP     =     RAMBASE+6          ; systeme variables base address 
                           000680   103 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0007FF   104 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           000680   105 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           000700   106 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   107 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0007BF   108 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    109 
                                    110 ; user variables constants 
                           000006   111 UBASE = UPP       ; numeric base 
                           000008   112 UTMP = UBASE+2    ; temporary storage
                           00000A   113 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   114 UCTIB = UINN+2    ; tib count 
                           00000E   115 UTIB = UCTIB+2    ; tib address 
                           000010   116 UINTER = UTIB+2   ; interpreter vector 
                           000012   117 UHLD = UINTER+2   ; hold 
                           000014   118 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   119 UVP = UCNTXT+2    ; variable pointer 
                           000018   120 UCP = UVP+2      ; code pointer
                           00001A   121 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   122 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   123 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000020   124 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    125 
                                    126 ;******  System Variables  ******
                           000022   127 XTEMP	=	URLAST +2;address called by CREATE
                           000024   128 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   129 PROD1 = XTEMP	;space for UM*
                           000024   130 PROD2 = PROD1+2
                           000026   131 PROD3 = PROD2+2
                           000028   132 CARRY = PROD3+2
                           00002A   133 SP0	= CARRY+2	;initial data stack pointer
                           00002C   134 RP0	= SP0+2		;initial return stack pointer
                           00002E   135 MS    =   RP0+2         ; millisecond counter 
                           000030   136 CNTDWN =  MS+2          ; count down timer 
                           000032   137 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   138 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   139 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   140 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   141 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    142 
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   147 APP_VP = APP_CP+2  ; free data space pointer 
                                    148 
                                    149 
                                    150 ;***********************************************
                                    151 ;; Version control
                                    152 
                           000003   153 VER     =     3         ;major release version
                           000000   154 EXT     =     0         ;minor extension
                                    155 
                                    156 ;; Constants
                                    157 
                           00FFFF   158 TRUEE   =     0xFFFF      ;true flag
                                    159 
                           000040   160 COMPO   =     0x40     ;lexicon compile only bit
                           000080   161 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   162 MASKK   =     0x1F7F  ;lexicon bit mask
                                    163 
                           000002   164 CELLL   =     2       ;size of a cell
                           00000A   165 BASEE   =     10      ;default radix
                           000008   166 BKSPP   =     8       ;back space
                           00000A   167 LF      =     10      ;line feed
                           00000D   168 CRR     =     13      ;carriage return
                           00001B   169 ERR     =     27      ;error escape
                           000027   170 TIC     =     39      ;tick
                           0000CD   171 CALLL   =     0xCD     ;CALL opcodes
                           000080   172 IRET_CODE =   0x80    ; IRET opcode 
                                    173 
                                    174         .macro _ledon
                                    175         .if NUCLEO
                                    176         bset PC_ODR,#LED2_BIT
                                    177         .else ;DISCOVERY 
                                    178         bres PD_ODR,#LD1_BIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    179         .endif
                                    180         .endm
                                    181 
                                    182         .macro _ledoff
                                    183         .if NUCLEO 
                                    184         bres PC_ODR,#LED2_BIT
                                    185         .else ;DISCOVERY 
                                    186         bset PD_ODR,#LD1_BIT 
                                    187         .endif
                                    188         .endm
                                    189 
                                    190 ;**********************************************************
                                    191         .area DATA (ABS)
      000000                        192         .org RAMBASE 
                                    193 ;**********************************************************
                                    194 
                                    195 ;**********************************************************
                                    196         .area SSEG (ABS) ; STACK
      001700                        197         .org 0x1700
      001700                        198         .ds 256 
                                    199 ; space for DATSTK,TIB and STACK         
                                    200 ;**********************************************************
                                    201 
                                    202 ;**********************************************************
                                    203         .area HOME ; vectors table
                                    204 ;**********************************************************
      000000 82 00 00 16            205 	int main	        ; reset
      000004 82 00 00 00            206 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            207 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            208 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            209 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            210 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            211 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            212 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            213 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            214 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            215 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            216 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            217 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            218 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            219 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            220 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            221 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            222 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            223 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            224 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            225 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            226 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            227 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            228 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            229 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            230 	int Timer4Handler	; irq23
      000068 82 00 00 00            231 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            232 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            233 	int NonHandledInterrupt	; irq26
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000074 82 00 00 00            234 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            235 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            236 	int NonHandledInterrupt	; irq29
                                    237 
                                    238 ;**********************************************************
                                    239         .area CODE
                                    240 ;**********************************************************
                                    241 
                                    242 ; non handled interrupt reset MCU
      000000                        243 NonHandledInterrupt:
      000000 A6 80            [ 1]  244         ld a, #0x80
      000002 C7 50 D1         [ 1]  245         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    246 	;iret
                                    247 
                                    248 ; used for milliseconds counter 
                                    249 ; MS is 16 bits counter 
      000005                        250 Timer4Handler:
      000005 72 5F 53 42      [ 1]  251 	clr TIM4_SR 
      000009 BE 2E            [ 2]  252         ldw x,MS 
      00000B 5C               [ 1]  253         incw x 
      00000C BF 2E            [ 2]  254         ldw MS,x
      00000E BE 30            [ 2]  255         ldw x,CNTDWN 
      000010 27 03            [ 1]  256         jreq 1$
      000012 5A               [ 2]  257         decw x 
      000013 BF 30            [ 2]  258         ldw CNTDWN,x 
      000015                        259 1$:         
      000015 80               [11]  260         iret 
                                    261 
                                    262 
                                    263 ;; Main entry points and COLD start data
      000016                        264 main:
                                    265 ; clear all RAM
      000016 AE 00 00         [ 2]  266 	ldw X,#RAMBASE
      000019                        267 clear_ram0:
      000019 7F               [ 1]  268 	clr (X)
      00001A 5C               [ 1]  269 	incw X
      00001B A3 07 FF         [ 2]  270 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  271 	jrule clear_ram0
      000020 AE 07 FF         [ 2]  272         ldw x,#RPP
      000023 94               [ 1]  273         ldw sp,x
                                    274 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  275         inc SEEDX+1 
      000026 3C 39            [ 1]  276         inc SEEDY+1          
      000028 CC 00 47         [ 2]  277 	jp ORIG
                                    278 
                                    279 ; COLD initialize these variables.
      00002B                        280 UZERO:
      00002B 00 0A                  281         .word      BASEE   ;BASE
      00002D 00 00                  282         .word      0       ;tmp
      00002F 00 00                  283         .word      0       ;>IN
      000031 00 00                  284         .word      0       ;#TIB
      000033 07 00                  285         .word      TIBB    ;TIB
      000035 12 ED                  286         .word      INTER   ;'EVAL
      000037 00 00                  287         .word      0       ;HLD
      000039 22 D5                  288         .word      LASTN  ;CNTXT pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00003B 00 80                  289         .word      VAR_BASE   ;variables free space pointer 
      00003D 23 00                  290         .word      app_space ; FLASH free space pointer 
      00003F 22 D5                  291         .word      LASTN   ;LAST
      000041 00 00                  292         .word      0        ; OFFSET 
      000043 00 00                  293         .word      0       ; TFLASH
                                    294 ;       .word      0       ; URLAST   
      000045 00 00                  295 UEND:   .word      0
                                    296 
      000047                        297 ORIG:   
                                    298 ; initialize SP
      000047 AE 07 FF         [ 2]  299         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  300         LDW     SP,X
      00004B BF 2C            [ 2]  301         LDW     RP0,X
      00004D AE 06 80         [ 2]  302         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  303         LDW     SP0,X
                           000000   304 .if NUCLEO        
                                    305 ; initialize PC_5 as output to control LED2
                                    306 ; added by Picatout 
                                    307         bset PC_CR1,#LED2_BIT
                                    308         bset PC_CR2,#LED2_BIT
                                    309         bset PC_DDR,#LED2_BIT
                           000001   310 .else ;discovery 
      000052 72 10 50 12      [ 1]  311         bset PD_CR1,#LD1_BIT
      000056 72 10 50 13      [ 1]  312         bset PD_CR2,#LD1_BIT
      00005A 72 10 50 11      [ 1]  313         bset PD_DDR,#LD1_BIT 
                                    314 .endif
      00005E                        315         _ledoff
                           000000     1         .if NUCLEO 
                                      2         bres PC_ODR,#LED2_BIT
                           000001     3         .else ;DISCOVERY 
      00005E 72 10 50 0F      [ 1]    4         bset PD_ODR,#LD1_BIT 
                                      5         .endif
                                    316 ; initialize clock to HSI
                                    317 ; no divisor 16Mhz 
                                    318 ; Added by Picatout 
      000062                        319 clock_init:
      000062 72 5F 50 C6      [ 1]  320         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  321 	bset CLK_SWCR,#CLK_SWCR_SWEN
                           000000   322 .if NUCLEO
                                    323 	ld a,#CLK_SWR_HSI
                           000001   324 .else ; DISCOVERY as 16Mhz crystal
      00006A A6 B4            [ 1]  325 	ld a,#CLK_SWR_HSE
                                    326 .endif 
      00006C C7 50 C4         [ 1]  327 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  328 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  329 	jrne 1$
                                    330         
                                    331 ; initialize UART, 115200 8N1
      000074                        332 uart_init:
                           000000   333 .if NUCLEO 
                                    334 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    335 	; configure tx pin
                                    336 	bset PA_DDR,#UART1_TX_PIN ; tx pin
                                    337 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
                                    338 	bset PA_CR2,#UART1_TX_PIN ; fast output
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    339 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
                                    340 	mov UART1_BRR2,#0x0b ; must be loaded first
                                    341 	mov UART1_BRR1,#0x8
                                    342 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                           000001   343 .else ; DISCOVERY use UART2 
      000074 72 16 50 C7      [ 1]  344 	bset CLK_PCKENR1,#CLK_PCKENR1_UART2
                                    345 	; configure tx pin
      000078 72 1A 50 11      [ 1]  346 	bset PD_DDR,#UART2_TX_PIN ; tx pin
      00007C 72 1A 50 12      [ 1]  347 	bset PD_CR1,#UART2_TX_PIN ; push-pull output
      000080 72 1A 50 13      [ 1]  348 	bset PD_CR2,#UART2_TX_PIN ; fast output
                                    349 	; baud rate 115200 Fmaster=8Mhz  
      000084 35 0B 52 43      [ 1]  350 	mov UART2_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 42      [ 1]  351 	mov UART2_BRR1,#0x8
      00008C 35 0C 52 45      [ 1]  352 	mov UART2_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    353 .endif
                                    354 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  355 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  356 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  357 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  358 	bset TIM4_IER,#TIM4_IER_UIE 
                                    359 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  360         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  361         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  362         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  363         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  364         rim
      0000AB CC 19 F2         [ 2]  365         jp  COLD   ;default=MN1
                                    366 
                                    367 
                                    368 ;; place MCU in sleep mode with
                                    369 ;; halt opcode 
                                    370 ;; BYE ( -- )
      0000AE 00 00                  371         .word 0
                           0000B0   372         LINK=.
      0000B0 03                     373         .byte 3 
      0000B1 42 59 45               374         .ascii "BYE"
      0000B4                        375 BYE: 
      0000B4 8E               [10]  376         halt 
      0000B5 81               [ 4]  377         ret 
                                    378 
                                    379 ; Enable interrupts 
                                    380 ; EI ( -- )
      0000B6 00 B0                  381         .word LINK 
                           0000B8   382         LINK=.
      0000B8 02                     383         .byte 2
      0000B9 45 49                  384         .ascii "EI"
      0000BB                        385 EI:
      0000BB 9A               [ 1]  386         rim 
      0000BC 81               [ 4]  387         ret 
                                    388 
                                    389 ; Disable interrupts
                                    390 ; DI ( -- )
      0000BD 00 B8                  391         .word LINK 
                           0000BF   392         LINK=.
      0000BF 02                     393         .byte 2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000C0 44 49                  394         .ascii "DI"
      0000C2                        395 DI:
      0000C2 9B               [ 1]  396         sim 
      0000C3 81               [ 4]  397         ret 
                                    398 
                                    399 ; set interrupt priority level 
                                    400 ; SET-ISP ( n1 n2 -- )
                                    401 ; n1 level {1..3}
                                    402 ; n2 vector {0..29}
      0000C4 00 BF                  403         .word LINK 
                           0000C6   404         LINK=.
      0000C6 07                     405         .byte 7 
      0000C7 53 45 54 2D 49 53 50   406         .ascii "SET-ISP"
      0000CE                        407 SETISP:
      0000CE 90 93            [ 1]  408         ldw y,x 
      0000D0 90 FE            [ 2]  409         ldw y,(y)
      0000D2 A6 04            [ 1]  410         ld a,#4 ; 4 slot per register 
                                    411 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  412         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  413         and a,#3 
      0000D8 48               [ 1]  414         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  415         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  416         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  417         clrw y 
      0000E0 90 97            [ 1]  418         ld yl,a 
      0000E2 1D 00 02         [ 2]  419         subw x,#CELLL 
      0000E5 FF               [ 2]  420         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  421         ldw y,x 
      0000E8 90 EE 02         [ 2]  422         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  423         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  424         subw x,#CELLL 
      0000F0 FF               [ 2]  425         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 03         [ 4]  426         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B4         [ 4]  427         call DOLIT 
      0000F7 00 03                  428         .word 3
      0000F9 CD 04 E9         [ 4]  429         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 EC         [ 4]  430         call LSHIFT ; creat slot mask 
      0000FF CD 06 EE         [ 4]  431         call INVER  ; ( level reg lshift rval mask )
      000102 CD 05 25         [ 4]  432         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 04 A2         [ 4]  433         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 94         [ 4]  434         call ROT  ; ( reg lshift level )
      00010B CD 04 E9         [ 4]  435         call SWAPP ; ( reg level lshift )
      00010E CD 09 EC         [ 4]  436         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 83         [ 4]  437         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 39         [ 4]  438         call ORR   ; ( reg updated_rval )
      000117 CD 04 E9         [ 4]  439         call SWAPP 
      00011A CD 04 3F         [ 4]  440         call CSTOR
                                    441 
                                    442 ; sélectionne l'application 
                                    443 ; qui démarre automatique lors 
                                    444 ; d'un COLD start 
      00011D 00 C6                  445         .word LINK 
                           00011F   446         LINK=.
      00011F 07                     447         .byte 7
      000120 41 55 54 4F 52 55 4E   448         .ascii "AUTORUN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000127                        449 AUTORUN:
      000127 CD 10 B2         [ 4]  450         call TOKEN 
      00012A CD 04 D9         [ 4]  451         call DUPP 
      00012D CD 03 E7         [ 4]  452         call QBRAN 
      000130 02 0D                  453         .word FORGET2
      000132 CD 11 AF         [ 4]  454         call NAMEQ
      000135 CD 06 83         [ 4]  455         call QDUP 
      000138 CD 03 E7         [ 4]  456         call QBRAN 
      00013B 02 0D                  457         .word FORGET2
      00013D CD 04 CF         [ 4]  458         call DROP 
      000140 1D 00 04         [ 2]  459         subw x,#2*CELLL 
      000143 90 5F            [ 1]  460         clrw y 
      000145 FF               [ 2]  461         ldw (x),y 
      000146 90 AE 40 02      [ 2]  462         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  463         ldw (2,x),y 
      00014C CC 1C C8         [ 2]  464         jp EESTORE 
                                    465 
                                    466 ;; Reset dictionary pointer before 
                                    467 ;; forgotten word. RAM space and 
                                    468 ;; interrupt vector defined after 
                                    469 ;; must be resetted also.
      00014F 01 1F                  470         .word LINK 
                           000151   471         LINK=.
      000151 06                     472         .byte 6
      000152 46 4F 52 47 45 54      473         .ascii "FORGET" 
      000158                        474 FORGET: 
      000158 CD 10 B2         [ 4]  475         call TOKEN
      00015B CD 04 D9         [ 4]  476         call DUPP 
      00015E CD 03 E7         [ 4]  477         call QBRAN 
      000161 02 0D                  478         .word FORGET2
      000163 CD 11 AF         [ 4]  479         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 83         [ 4]  480         call QDUP 
      000169 CD 03 E7         [ 4]  481         call QBRAN 
      00016C 02 0D                  482         .word FORGET2
                                    483 ; only forget users words 
      00016E CD 04 D9         [ 4]  484         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  485         call DOLIT 
      000174 23 00                  486         .word app_space 
      000176 CD 04 E9         [ 4]  487         call SWAPP 
      000179 CD 07 94         [ 4]  488         call  ULESS 
      00017C CD 03 E7         [ 4]  489         call QBRAN 
      00017F 01 CF                  490         .word FORGET6 
                                    491 ; ( ca na -- )        
                                    492 ;reset ivec with address >= ca
      000181 CD 04 E9         [ 4]  493         call SWAPP ; ( na ca -- ) 
      000184 CD 1E B9         [ 4]  494         call CHKIVEC ; ( na -- ) 
                                    495 ; start at LAST and link back to na 
                                    496 ; if variable found reset VP at that point.
      000187                        497 FORGET1:
      000187 CD 06 45         [ 4]  498         call LAST 
      00018A CD 04 32         [ 4]  499         call AT 
      00018D CD 04 D9         [ 4]  500         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  501         call FREEVAR ; ( -- na last )
      000193 CD 04 D9         [ 4]  502         call DUPP 
      000196 CD 03 B4         [ 4]  503         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000199 00 02                  504         .word 2 
      00019B CD 07 4D         [ 4]  505         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 32         [ 4]  506         call AT 
      0001A1 CD 04 D9         [ 4]  507         call DUPP ; ( -- na last a a )
      0001A4 CD 06 19         [ 4]  508         call CNTXT 
      0001A7 CD 04 1B         [ 4]  509         call STORE
      0001AA CD 06 45         [ 4]  510         call LAST  
      0001AD CD 04 1B         [ 4]  511         call STORE ; ( --  na last )
      0001B0 CD 05 03         [ 4]  512         call OVER 
      0001B3 CD 07 75         [ 4]  513         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  514         call QBRAN 
      0001B9 01 87                  515         .word FORGET1 
                                    516 ; ( na -- )
      0001BB CD 03 B4         [ 4]  517         call DOLIT 
      0001BE 00 02                  518         .word 2 
      0001C0 CD 07 4D         [ 4]  519         call SUBB 
      0001C3 CD 06 35         [ 4]  520         call CPP 
      0001C6 CD 04 1B         [ 4]  521         call STORE  
      0001C9 CD 1B 1E         [ 4]  522         call UPDATCP 
      0001CC CC 1A F5         [ 2]  523         jp UPDATLAST 
      0001CF                        524 FORGET6: ; tried to forget a RAM or system word 
                                    525 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  526         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  527         ldw y,SP0 
      0001D5 FF               [ 2]  528         ldw (x),y  
      0001D6 CD 07 94         [ 4]  529         call ULESS
      0001D9 CD 03 E7         [ 4]  530         call QBRAN 
      0001DC 01 FF                  531         .word PROTECTED 
      0001DE CD 12 BB         [ 4]  532         call ABORQ 
      0001E1 1D                     533         .byte 29
      0001E2 20 46 6F 72 20 52 41   534         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        535 PROTECTED:
      0001FF CD 12 BB         [ 4]  536         call ABORQ
      000202 0A                     537         .byte 10
      000203 20 50 72 6F 74 65 63   538         .ascii " Protected"
             74 65 64
      00020D                        539 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 BB         [ 4]  540         call ABORQ
      000210 05                     541         .byte 5
      000211 20 77 68 61 74         542         .ascii " what"
      000216                        543 FORGET4:
      000216 CC 04 CF         [ 2]  544         jp DROP 
                                    545 
                                    546 
                                    547 ;---------------------------------
                                    548 ; if na is variable 
                                    549 ; free variable data  
                                    550 ; FREEVAR ( na -- )
                                    551 ;---------------------------------
      000219 01 51                  552         .word LINK 
                           00021B   553         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00021B 07                     554         .byte 7 
      00021C 46 52 45 45 56 41 52   555         .ascii "FREEVAR"
      000223                        556 FREEVAR:
      000223 CD 04 D9         [ 4]  557         call DUPP ; ( na na -- )
      000226 CD 04 50         [ 4]  558         CALL CAT  ; ( na c -- )
      000229 CD 09 CE         [ 4]  559         call ONEP ;
      00022C CD 06 D4         [ 4]  560         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 CE         [ 4]  561         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 D9         [ 4]  562         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 32         [ 4]  563         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  564         call DOLIT 
      00023B 05 86                  565         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 75         [ 4]  566         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  567         call QBRAN 
      000243 02 59                  568         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  569         call DOLIT 
      000248 00 02                  570         .word 2 
      00024A CD 06 D4         [ 4]  571         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 32         [ 4]  572         call AT 
      000250 CD 06 27         [ 4]  573         call VPP   
      000253 CD 04 1B         [ 4]  574         call STORE 
      000256 CC 1B 35         [ 2]  575         jp UPDATVP 
      000259                        576 FREEVAR4: ; not variable
      000259 CC 04 CF         [ 2]  577         jp  DROP 
                                    578 
                                    579 ;    SEED ( n -- )
                                    580 ; Initialize PRNG seed with n 
      00025C 02 1B                  581         .word LINK 
                           00025E   582         LINK=. 
      00025E 04                     583         .byte 4 
      00025F 53 45 45 44            584         .ascii "SEED" 
      000263                        585 SEED:
      000263 90 93            [ 1]  586         ldw y,x 
      000265 1C 00 02         [ 2]  587         addw x,#CELLL
      000268 90 FE            [ 2]  588         ldw y,(y)
      00026A 90 9E            [ 1]  589         ld a,yh 
      00026C B7 36            [ 1]  590         ld SEEDX,a 
      00026E 90 9F            [ 1]  591         ld a,yl 
      000270 B7 38            [ 1]  592         ld SEEDY,a 
      000272 81               [ 4]  593         ret 
                                    594 
                                    595 ;    RANDOM ( u1 -- u2 )
                                    596 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  597         .word LINK 
                           000275   598         LINK=.
      000275 06                     599         .byte 6
      000276 52 41 4E 44 4F 4D      600         .ascii "RANDOM" 
      00027C                        601 RANDOM:
                                    602 ;local variable 
                           000001   603         SPSAVE=1
                           000002   604         VSIZE=2 
      00027C 52 02            [ 2]  605         sub sp,#VSIZE
      00027E 1F 01            [ 2]  606         ldw (SPSAVE,sp),x  
                                    607 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  608         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000282 90 FE            [ 2]  609         ldw y,(y)
      000284 90 BF 24         [ 2]  610         ldw YTEMP,y 
      000287 BE 36            [ 2]  611 	ldw x,SEEDX 
      000289 58               [ 2]  612 	sllw x 
      00028A 58               [ 2]  613 	sllw x 
      00028B 58               [ 2]  614 	sllw x 
      00028C 58               [ 2]  615 	sllw x 
      00028D 58               [ 2]  616 	sllw x 
      00028E 9E               [ 1]  617 	ld a,xh 
      00028F B8 36            [ 1]  618 	xor a,SEEDX 
      000291 B7 22            [ 1]  619 	ld XTEMP,a 
      000293 9F               [ 1]  620 	ld a,xl 
      000294 B8 37            [ 1]  621 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  622 	ld XTEMP+1,a 
                                    623 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  624 	ldw x,SEEDY 
      00029A BF 36            [ 2]  625 	ldw SEEDX,x  
                                    626 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  627 	srlw x 
      00029D 9E               [ 1]  628 	ld a,xh 
      00029E B8 38            [ 1]  629 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  630 	ld SEEDY,a  
      0002A2 9F               [ 1]  631 	ld a,xl 
      0002A3 B8 39            [ 1]  632 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  633 	ld SEEDY+1,a 
                                    634 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  635 	ldw x,XTEMP 
      0002A9 54               [ 2]  636 	srlw x 
      0002AA 54               [ 2]  637 	srlw x 
      0002AB 54               [ 2]  638 	srlw x 
                                    639 ; x=XTEMP^x 
      0002AC 9E               [ 1]  640 	ld a,xh 
      0002AD B8 22            [ 1]  641 	xor a,XTEMP 
      0002AF 95               [ 1]  642 	ld xh,a 
      0002B0 9F               [ 1]  643 	ld a,xl 
      0002B1 B8 23            [ 1]  644 	xor a,XTEMP+1  
      0002B3 97               [ 1]  645 	ld xl,a 
                                    646 ; SEEDY=x^SEEDY 
      0002B4 B8 39            [ 1]  647 	xor a,SEEDY+1
      0002B6 97               [ 1]  648 	ld xl,a 
      0002B7 9E               [ 1]  649 	ld a,xh 
      0002B8 B8 38            [ 1]  650 	xor a,SEEDY
      0002BA 95               [ 1]  651 	ld xh,a 
      0002BB BF 38            [ 2]  652 	ldw SEEDY,x 
                                    653 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  654 	ldw y,YTEMP  
      0002C0 65               [ 2]  655 	divw x,y 
      0002C1 1E 01            [ 2]  656 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  657         ldw (x),y 
      0002C4 5B 02            [ 2]  658         addw sp,#VSIZE 
      0002C6 81               [ 4]  659 	ret 
                                    660 
                                    661 
                                    662 ;;
                                    663 ;; get millisecond counter 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    664 ;; msec ( -- u )
                                    665 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  666         .word LINK  
                           0002C9   667         LINK = . 
      0002C9 04                     668         .byte 4
      0002CA 4D 53 45 43            669         .ascii "MSEC"
      0002CE                        670 MSEC: 
      0002CE 1D 00 02         [ 2]  671         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  672         ldw y,MS 
      0002D4 FF               [ 2]  673         ldw (x),y 
      0002D5 81               [ 4]  674         ret 
                                    675 
                                    676 ; suspend execution for u msec 
                                    677 ;  pause ( u -- )
      0002D6 02 C9                  678         .word LINK 
                           0002D8   679         LINK=.
      0002D8 05                     680         .byte 5 
      0002D9 50 41 55 53 45         681         .ascii "PAUSE"
      0002DE                        682 PAUSE:
      0002DE 90 93            [ 1]  683         ldw y,x
      0002E0 90 FE            [ 2]  684         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  685         addw y,MS 
      0002E6 8F               [10]  686 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  687         cpw y,MS  
      0002EA 26 FA            [ 1]  688         jrne 1$        
      0002EC 1C 00 02         [ 2]  689         addw x,#CELLL 
      0002EF 81               [ 4]  690         ret 
                                    691 
                                    692 ; initialize count down timer 
                                    693 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  694         .word LINK 
                           0002F2   695         LINK=.
      0002F2 05                     696         .byte 5 
      0002F3 54 49 4D 45 52         697         .ascii "TIMER" 
      0002F8                        698 TIMER:
      0002F8 90 93            [ 1]  699         ldw y,x
      0002FA 90 FE            [ 2]  700         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  701         ldw CNTDWN,y
      0002FF 1C 00 02         [ 2]  702         addw x,#CELLL 
      000302 81               [ 4]  703         ret 
                                    704 
                                    705 ; check for TIMER exiparition 
                                    706 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  707         .word LINK 
                           000305   708         LINK=. 
      000305 08                     709         .byte 8 
      000306 54 49 4D 45 4F 55 54   710         .ascii "TIMEOUT?"
             3F
      00030E                        711 TIMEOUTQ: 
      00030E 4F               [ 1]  712         clr a
      00030F 1D 00 02         [ 2]  713         subw x,#CELLL 
      000312 90 BE 30         [ 2]  714         ldw y,CNTDWN 
      000315 26 01            [ 1]  715         jrne 1$ 
      000317 43               [ 1]  716         cpl a 
      000318 E7 01            [ 1]  717 1$:     ld (1,x),a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00031A F7               [ 1]  718         ld (x),a 
      00031B 81               [ 4]  719         ret         
                                    720 
                                    721 ; reboot MCU 
                                    722 ; REBOOT ( -- )
      00031C 03 05                  723         .word LINK 
                           00031E   724         LINK=. 
      00031E 06                     725         .byte 6 
      00031F 52 45 42 4F 4F 54      726         .ascii "REBOOT"
      000325                        727 reboot:
      000325 CC 00 00         [ 2]  728         jp NonHandledInterrupt
                                    729 
                                    730 ; compile to flash memory 
                                    731 ; TO-FLASH ( -- )
      000328 03 1E                  732         .word LINK 
                           00032A   733         LINK=.
      00032A 08                     734         .byte 8
      00032B 54 4F 2D 46 4C 41 53   735         .ascii "TO-FLASH"
             48
      000333                        736 TOFLASH:
      000333 CD 06 58         [ 4]  737         call RAMLAST 
      000336 CD 04 32         [ 4]  738         call AT 
      000339 CD 06 83         [ 4]  739         call QDUP 
      00033C CD 03 E7         [ 4]  740         call QBRAN
      00033F 03 62                  741         .word 1$
      000341 CD 12 BB         [ 4]  742         call ABORQ 
      000344 1D                     743         .byte 29
      000345 20 4E 6F 74 20 77 68   744         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  745 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  746         ldw UTFLASH,y
      000369 81               [ 4]  747         ret 
                                    748 
                                    749 ; compile to RAM 
                                    750 ; TO-RAM ( -- )
      00036A 03 2A                  751         .word LINK 
                           00036C   752         LINK=.
      00036C 06                     753         .byte 6 
      00036D 54 4F 2D 52 41 4D      754         .ascii "TO-RAM"
      000373                        755 TORAM:
      000373 90 5F            [ 1]  756         clrw y 
      000375 90 BF 1E         [ 2]  757         ldw UTFLASH,y 
      000378 81               [ 4]  758         ret 
                                    759         
                                    760 
                                    761 ;; Device dependent I/O
                                    762 ;       ?RX     ( -- c T | F )
                                    763 ;         Return input byte and true, or false.
      000379 03 6C                  764         .word      LINK 
                           00037B   765 LINK	= .
      00037B 04                     766         .byte      4
      00037C 3F 4B 45 59            767         .ascii     "?KEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000380                        768 QKEY:
      000380 90 5F            [ 1]  769         CLRW Y 
      000382 72 0B 52 40 0B   [ 2]  770         BTJF UART_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 41         [ 1]  771         LD    A,UART_DR   ;get char in A
      00038A 1D 00 02         [ 2]  772 	SUBW	X,#2
      00038D E7 01            [ 1]  773         LD     (1,X),A
      00038F 7F               [ 1]  774 	CLR	(X)
      000390 90 53            [ 2]  775         CPLW     Y
      000392                        776 INCH:
      000392 1D 00 02         [ 2]  777 	SUBW	X,#2
      000395 FF               [ 2]  778         LDW     (X),Y
      000396 81               [ 4]  779         RET
                                    780 
                                    781 ;       TX!     ( c -- )
                                    782 ;       Send character c to  output device.
      000397 03 7B                  783         .word      LINK
                           000399   784 LINK	= .
      000399 04                     785         .byte      4
      00039A 45 4D 49 54            786         .ascii     "EMIT"
      00039E                        787 EMIT:
      00039E E6 01            [ 1]  788         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  789 	ADDW	X,#2
      0003A3 72 0F 52 40 FB   [ 2]  790 OUTPUT: BTJF UART_SR,#UART_SR_TXE,OUTPUT  ;loop until tx empty 
      0003A8 C7 52 41         [ 1]  791         LD    UART_DR,A   ;send A
      0003AB 81               [ 4]  792         RET
                                    793 
                                    794 ;; The kernel
                                    795 
                                    796 ;       doLIT   ( -- w )
                                    797 ;       Push an inline literal.
      0003AC 03 99                  798         .word      LINK
                           0003AE   799 LINK	= 	.
      0003AE 45                     800 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         801         .ascii     "DOLIT"
      0003B4                        802 DOLIT:
      0003B4 1D 00 02         [ 2]  803 	SUBW X,#2
      0003B7 16 01            [ 2]  804         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  805         ldw y,(y)
      0003BB FF               [ 2]  806         ldw (x),y
      0003BC 90 85            [ 2]  807         popw y 
      0003BE 90 EC 02         [ 2]  808         jp (2,y)
                                    809 
                                    810 ;       next    ( -- )
                                    811 ;       Code for  single index loop.
      0003C1 03 AE                  812         .word      LINK
                           0003C3   813 LINK	= 	.
      0003C3 44                     814 	.byte      COMPO+4
      0003C4 6E 65 78 74            815         .ascii     "next"
      0003C8                        816 DONXT:
      0003C8 16 03            [ 2]  817 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  818 	DECW Y
      0003CC 2A 07            [ 1]  819 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  820 	POPW Y
      0003D0 5B 02            [ 2]  821         addw sp,#2
      0003D2 90 EC 02         [ 2]  822         JP (2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003D5                        823 NEX1:
      0003D5 17 03            [ 2]  824         LDW (3,SP),Y
      0003D7 90 85            [ 2]  825         POPW Y
      0003D9 90 FE            [ 2]  826 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  827 	JP (Y)
                                    828 
                                    829 ;       ?branch ( f -- )
                                    830 ;       Branch if flag is zero.
      0003DD 03 C3                  831         .word      LINK
                           0003DF   832 LINK	= 	.
      0003DF 47                     833 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   834         .ascii     "?BRANCH"
      0003E7                        835 QBRAN:	
      0003E7 90 93            [ 1]  836         LDW Y,X
      0003E9 1C 00 02         [ 2]  837 	ADDW X,#2
      0003EC 90 FE            [ 2]  838 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  839         JREQ     BRAN
      0003F0 90 85            [ 2]  840 	POPW Y
      0003F2 90 EC 02         [ 2]  841 	JP (2,Y)
                                    842         
                                    843 ;       branch  ( -- )
                                    844 ;       Branch to an inline address.
      0003F5 03 DF                  845         .word      LINK
                           0003F7   846 LINK	= 	.
      0003F7 46                     847 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      848         .ascii     "BRANCH"
      0003FE                        849 BRAN:
      0003FE 90 85            [ 2]  850         POPW Y
      000400 90 FE            [ 2]  851 	LDW Y,(Y)
      000402 90 FC            [ 2]  852         JP     (Y)
                                    853 
                                    854 ;       EXECUTE ( ca -- )
                                    855 ;       Execute  word at ca.
      000404 03 F7                  856         .word      LINK
                           000406   857 LINK	= 	.
      000406 07                     858         .byte       7
      000407 45 58 45 43 55 54 45   859         .ascii     "EXECUTE"
      00040E                        860 EXECU:
      00040E 90 93            [ 1]  861         LDW Y,X
      000410 1C 00 02         [ 2]  862 	ADDW X,#2
      000413 90 FE            [ 2]  863 	LDW  Y,(Y)
      000415 90 FC            [ 2]  864         JP   (Y)
                                    865 
                           000001   866 OPTIMIZE = 1
                           000001   867 .if OPTIMIZE 
                                    868 ; remplacement de CALL EXIT par 
                                    869 ; le opcode de RET.
                                    870 ; Voir modification au code de ";"
                           000000   871 .else 
                                    872 ;       EXIT    ( -- )
                                    873 ;       Terminate a colon definition.
                                    874         .word      LINK
                                    875 LINK = .
                                    876         .byte      4
                                    877         .ascii     "EXIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    878 EXIT:
                                    879         POPW Y
                                    880         RET
                                    881 .endif 
                                    882 
                                    883 ;       !       ( w a -- )
                                    884 ;       Pop  data stack to memory.
      000417 04 06                  885         .word      LINK
                           000419   886 LINK = .
      000419 01                     887         .byte      1
      00041A 21                     888         .ascii     "!"
      00041B                        889 STORE:
      00041B 90 93            [ 1]  890         LDW Y,X
      00041D 90 FE            [ 2]  891         LDW Y,(Y)    ;Y=a
      00041F 90 BF 24         [ 2]  892         LDW YTEMP,Y
      000422 90 93            [ 1]  893         LDW Y,X
      000424 90 EE 02         [ 2]  894         LDW Y,(2,Y)
      000427 91 CF 24         [ 5]  895         LDW [YTEMP],Y ;store w at a
      00042A 1C 00 04         [ 2]  896         ADDW X,#4 ; DDROP 
      00042D 81               [ 4]  897         RET     
                                    898 
                                    899 ;       @       ( a -- w )
                                    900 ;       Push memory location to stack.
      00042E 04 19                  901         .word      LINK
                           000430   902 LINK	= 	.
      000430 01                     903         .byte    1
      000431 40                     904         .ascii	"@"
      000432                        905 AT:
      000432 90 93            [ 1]  906         LDW Y,X     ;Y = a
      000434 90 FE            [ 2]  907         LDW Y,(Y)   ; address 
      000436 90 FE            [ 2]  908         LDW Y,(Y)   ; value 
      000438 FF               [ 2]  909         LDW (X),Y ;w = @Y
      000439 81               [ 4]  910         RET     
                                    911 
                                    912 ;       C!      ( c b -- )
                                    913 ;       Pop  data stack to byte memory.
      00043A 04 30                  914         .word      LINK
                           00043C   915 LINK	= .
      00043C 02                     916         .byte      2
      00043D 43 21                  917         .ascii     "C!"
      00043F                        918 CSTOR:
      00043F 90 93            [ 1]  919         LDW Y,X
      000441 90 FE            [ 2]  920 	LDW Y,(Y)    ;Y=b
      000443 E6 03            [ 1]  921         LD A,(3,X)    ;D = c
      000445 90 F7            [ 1]  922         LD  (Y),A     ;store c at b
      000447 1C 00 04         [ 2]  923 	ADDW X,#4 ; DDROP 
      00044A 81               [ 4]  924         RET     
                                    925 
                                    926 ;       C@      ( b -- c )
                                    927 ;       Push byte in memory to  stack.
      00044B 04 3C                  928         .word      LINK
                           00044D   929 LINK	= 	.
      00044D 02                     930         .byte      2
      00044E 43 40                  931         .ascii     "C@"
      000450                        932 CAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000450 90 93            [ 1]  933         LDW Y,X     ;Y=b
      000452 90 FE            [ 2]  934         LDW Y,(Y)
      000454 90 F6            [ 1]  935         LD A,(Y)
      000456 E7 01            [ 1]  936         LD (1,X),A
      000458 7F               [ 1]  937         CLR (X)
      000459 81               [ 4]  938         RET     
                                    939 
                                    940 ;       RP@     ( -- a )
                                    941 ;       Push current RP to data stack.
      00045A 04 4D                  942         .word      LINK
                           00045C   943 LINK	= .
      00045C 03                     944         .byte      3
      00045D 52 50 40               945         .ascii     "RP@"
      000460                        946 RPAT:
      000460 90 96            [ 1]  947         LDW Y,SP    ;save return addr
      000462 1D 00 02         [ 2]  948         SUBW X,#2
      000465 FF               [ 2]  949         LDW (X),Y
      000466 81               [ 4]  950         RET     
                                    951 
                                    952 ;       RP!     ( a -- )
                                    953 ;       Set  return stack pointer.
      000467 04 5C                  954         .word      LINK
                           000469   955 LINK	= 	. 
      000469 43                     956 	.byte      COMPO+3
      00046A 52 50 21               957         .ascii     "RP!"
      00046D                        958 RPSTO:
      00046D 90 85            [ 2]  959         POPW Y
      00046F 90 BF 24         [ 2]  960         LDW YTEMP,Y
      000472 90 93            [ 1]  961         LDW Y,X
      000474 90 FE            [ 2]  962         LDW Y,(Y)
      000476 90 94            [ 1]  963         LDW SP,Y
      000478 1C 00 02         [ 2]  964         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00047B 92 CC 24         [ 5]  965         JP [YTEMP]
                                    966 
                                    967 ;       R>      ( -- w )
                                    968 ;       Pop return stack to data stack.
      00047E 04 69                  969         .word      LINK
                           000480   970 LINK	= 	. 
      000480 42                     971 	.byte      COMPO+2
      000481 52 3E                  972         .ascii     "R>"
      000483                        973 RFROM:
      000483 90 85            [ 2]  974         POPW Y    ;save return addr
      000485 90 BF 24         [ 2]  975         LDW YTEMP,Y
      000488 90 85            [ 2]  976         POPW Y
      00048A 1D 00 02         [ 2]  977         SUBW X,#2
      00048D FF               [ 2]  978         LDW (X),Y
      00048E 92 CC 24         [ 5]  979         JP [YTEMP]
                                    980 
                                    981 ;       R@      ( -- w )
                                    982 ;       Copy top of return stack to stack.
      000491 04 80                  983         .word      LINK
                           000493   984 LINK	= 	. 
      000493 02                     985         .byte      2
      000494 52 40                  986         .ascii     "R@"
      000496                        987 RAT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000496 16 03            [ 2]  988         ldw y,(3,sp)
      000498 1D 00 02         [ 2]  989         subw x,#CELLL 
      00049B FF               [ 2]  990         ldw (x),y 
      00049C 81               [ 4]  991         ret 
                                    992 
                                    993 ;       >R      ( w -- )
                                    994 ;       Push data stack to return stack.
      00049D 04 93                  995         .word      LINK
                           00049F   996 LINK	= 	. 
      00049F 42                     997 	.byte      COMPO+2
      0004A0 3E 52                  998         .ascii     ">R"
      0004A2                        999 TOR:
      0004A2 90 85            [ 2] 1000         POPW Y    ;save return addr
      0004A4 90 BF 24         [ 2] 1001         LDW YTEMP,Y
      0004A7 90 93            [ 1] 1002         LDW Y,X
      0004A9 90 FE            [ 2] 1003         LDW Y,(Y)
      0004AB 90 89            [ 2] 1004         PUSHW Y    ;restore return addr
      0004AD 1C 00 02         [ 2] 1005         ADDW X,#2
      0004B0 92 CC 24         [ 5] 1006         JP [YTEMP]
                                   1007 
                                   1008 ;       SP@     ( -- a )
                                   1009 ;       Push current stack pointer.
      0004B3 04 9F                 1010         .word      LINK
                           0004B5  1011 LINK	= 	. 
      0004B5 03                    1012         .byte      3
      0004B6 53 50 40              1013         .ascii     "SP@"
      0004B9                       1014 SPAT:
      0004B9 90 93            [ 1] 1015 	LDW Y,X
      0004BB 1D 00 02         [ 2] 1016         SUBW X,#2
      0004BE FF               [ 2] 1017 	LDW (X),Y
      0004BF 81               [ 4] 1018         RET     
                                   1019 
                                   1020 ;       SP!     ( a -- )
                                   1021 ;       Set  data stack pointer.
      0004C0 04 B5                 1022         .word      LINK
                           0004C2  1023 LINK	= 	. 
      0004C2 03                    1024         .byte      3
      0004C3 53 50 21              1025         .ascii     "SP!"
      0004C6                       1026 SPSTO:
      0004C6 FE               [ 2] 1027         LDW     X,(X)     ;X = a
      0004C7 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;       DROP    ( w -- )
                                   1031 ;       Discard top stack item.
      0004C8 04 C2                 1032         .word      LINK
                           0004CA  1033 LINK	= 	. 
      0004CA 04                    1034         .byte      4
      0004CB 44 52 4F 50           1035         .ascii     "DROP"
      0004CF                       1036 DROP:
      0004CF 1C 00 02         [ 2] 1037         ADDW X,#2     
      0004D2 81               [ 4] 1038         RET     
                                   1039 
                                   1040 ;       DUP     ( w -- w w )
                                   1041 ;       Duplicate  top stack item.
      0004D3 04 CA                 1042         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                           0004D5  1043 LINK	= 	. 
      0004D5 03                    1044         .byte      3
      0004D6 44 55 50              1045         .ascii     "DUP"
      0004D9                       1046 DUPP:
      0004D9 90 93            [ 1] 1047 	LDW Y,X
      0004DB 1D 00 02         [ 2] 1048         SUBW X,#2
      0004DE 90 FE            [ 2] 1049 	LDW Y,(Y)
      0004E0 FF               [ 2] 1050 	LDW (X),Y
      0004E1 81               [ 4] 1051         RET     
                                   1052 
                                   1053 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1054 ;       Exchange top two stack items.
      0004E2 04 D5                 1055         .word      LINK
                           0004E4  1056 LINK	= 	. 
      0004E4 04                    1057         .byte      4
      0004E5 53 57 41 50           1058         .ascii     "SWAP"
      0004E9                       1059 SWAPP:
      0004E9 90 93            [ 1] 1060         LDW Y,X
      0004EB 90 FE            [ 2] 1061         LDW Y,(Y)
      0004ED 90 BF 24         [ 2] 1062         LDW YTEMP,Y
      0004F0 90 93            [ 1] 1063         LDW Y,X
      0004F2 90 EE 02         [ 2] 1064         LDW Y,(2,Y)
      0004F5 FF               [ 2] 1065         LDW (X),Y
      0004F6 90 BE 24         [ 2] 1066         LDW Y,YTEMP
      0004F9 EF 02            [ 2] 1067         LDW (2,X),Y
      0004FB 81               [ 4] 1068         RET     
                                   1069 
                                   1070 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1071 ;       Copy second stack item to top.
      0004FC 04 E4                 1072         .word      LINK
                           0004FE  1073 LINK	= . 
      0004FE 04                    1074         .byte      4
      0004FF 4F 56 45 52           1075         .ascii     "OVER"
      000503                       1076 OVER:
      000503 1D 00 02         [ 2] 1077         SUBW X,#2
      000506 90 93            [ 1] 1078         LDW Y,X
      000508 90 EE 04         [ 2] 1079         LDW Y,(4,Y)
      00050B FF               [ 2] 1080         LDW (X),Y
      00050C 81               [ 4] 1081         RET     
                                   1082 
                                   1083 ;       0<      ( n -- t )
                                   1084 ;       Return true if n is negative.
      00050D 04 FE                 1085         .word      LINK
                           00050F  1086 LINK	= . 
      00050F 02                    1087         .byte      2
      000510 30 3C                 1088         .ascii     "0<"
      000512                       1089 ZLESS:
      000512 A6 FF            [ 1] 1090         LD A,#0xFF
      000514 90 93            [ 1] 1091         LDW Y,X
      000516 90 FE            [ 2] 1092         LDW Y,(Y)
      000518 2B 01            [ 1] 1093         JRMI     ZL1
      00051A 4F               [ 1] 1094         CLR A   ;false
      00051B F7               [ 1] 1095 ZL1:    LD     (X),A
      00051C E7 01            [ 1] 1096         LD (1,X),A
      00051E 81               [ 4] 1097 	RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1098 
                                   1099 ;       AND     ( w w -- w )
                                   1100 ;       Bitwise AND.
      00051F 05 0F                 1101         .word      LINK
                           000521  1102 LINK	= . 
      000521 03                    1103         .byte      3
      000522 41 4E 44              1104         .ascii     "AND"
      000525                       1105 ANDD:
      000525 F6               [ 1] 1106         LD  A,(X)    ;D=w
      000526 E4 02            [ 1] 1107         AND A,(2,X)
      000528 E7 02            [ 1] 1108         LD (2,X),A
      00052A E6 01            [ 1] 1109         LD A,(1,X)
      00052C E4 03            [ 1] 1110         AND A,(3,X)
      00052E E7 03            [ 1] 1111         LD (3,X),A
      000530 1C 00 02         [ 2] 1112         ADDW X,#2
      000533 81               [ 4] 1113         RET
                                   1114 
                                   1115 ;       OR      ( w w -- w )
                                   1116 ;       Bitwise inclusive OR.
      000534 05 21                 1117         .word      LINK
                           000536  1118 LINK = . 
      000536 02                    1119         .byte      2
      000537 4F 52                 1120         .ascii     "OR"
      000539                       1121 ORR:
      000539 F6               [ 1] 1122         LD A,(X)    ;D=w
      00053A EA 02            [ 1] 1123         OR A,(2,X)
      00053C E7 02            [ 1] 1124         LD (2,X),A
      00053E E6 01            [ 1] 1125         LD A,(1,X)
      000540 EA 03            [ 1] 1126         OR A,(3,X)
      000542 E7 03            [ 1] 1127         LD (3,X),A
      000544 1C 00 02         [ 2] 1128         ADDW X,#2
      000547 81               [ 4] 1129         RET
                                   1130 
                                   1131 ;       XOR     ( w w -- w )
                                   1132 ;       Bitwise exclusive OR.
      000548 05 36                 1133         .word      LINK
                           00054A  1134 LINK	= . 
      00054A 03                    1135         .byte      3
      00054B 58 4F 52              1136         .ascii     "XOR"
      00054E                       1137 XORR:
      00054E F6               [ 1] 1138         LD A,(X)    ;D=w
      00054F E8 02            [ 1] 1139         XOR A,(2,X)
      000551 E7 02            [ 1] 1140         LD (2,X),A
      000553 E6 01            [ 1] 1141         LD A,(1,X)
      000555 E8 03            [ 1] 1142         XOR A,(3,X)
      000557 E7 03            [ 1] 1143         LD (3,X),A
      000559 1C 00 02         [ 2] 1144         ADDW X,#2
      00055C 81               [ 4] 1145         RET
                                   1146 
                                   1147 ;       UM+     ( u u -- udsum )
                                   1148 ;       Add two unsigned single
                                   1149 ;       and return a double sum.
      00055D 05 4A                 1150         .word      LINK
                           00055F  1151 LINK	= . 
      00055F 03                    1152         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000560 55 4D 2B              1153         .ascii     "UM+"
      000563                       1154 UPLUS:
      000563 A6 01            [ 1] 1155         LD A,#1
      000565 90 93            [ 1] 1156         LDW Y,X
      000567 90 EE 02         [ 2] 1157         LDW Y,(2,Y)
      00056A 90 BF 24         [ 2] 1158         LDW YTEMP,Y
      00056D 90 93            [ 1] 1159         LDW Y,X
      00056F 90 FE            [ 2] 1160         LDW Y,(Y)
      000571 72 B9 00 24      [ 2] 1161         ADDW Y,YTEMP
      000575 EF 02            [ 2] 1162         LDW (2,X),Y
      000577 25 01            [ 1] 1163         JRC     UPL1
      000579 4F               [ 1] 1164         CLR A
      00057A E7 01            [ 1] 1165 UPL1:   LD     (1,X),A
      00057C 7F               [ 1] 1166         CLR (X)
      00057D 81               [ 4] 1167         RET
                                   1168 
                                   1169 ;; System and user variables
                                   1170 
                                   1171 ;       doVAR   ( -- a )
                                   1172 ;       Code for VARIABLE and CREATE.
      00057E 05 5F                 1173         .word      LINK
                           000580  1174 LINK	= . 
      000580 45                    1175 	.byte      COMPO+5
      000581 44 4F 56 41 52        1176         .ascii     "DOVAR"
      000586                       1177 DOVAR:
      000586 1D 00 02         [ 2] 1178 	SUBW X,#2
      000589 90 85            [ 2] 1179         POPW Y    ;get return addr (pfa)
      00058B 90 FE            [ 2] 1180         LDW Y,(Y) ; indirect address 
      00058D FF               [ 2] 1181         LDW (X),Y    ;push on stack
      00058E 81               [ 4] 1182         RET     ;go to RET of EXEC
                                   1183 
                                   1184 ;       BASE    ( -- a )
                                   1185 ;       Radix base for numeric I/O.
      00058F 05 80                 1186         .word      LINK        
                           000591  1187 LINK = . 
      000591 04                    1188         .byte      4
      000592 42 41 53 45           1189         .ascii     "BASE"
      000596                       1190 BASE:
      000596 90 AE 00 06      [ 2] 1191 	LDW Y,#UBASE 
      00059A 1D 00 02         [ 2] 1192 	SUBW X,#2
      00059D FF               [ 2] 1193         LDW (X),Y
      00059E 81               [ 4] 1194         RET
                                   1195 
                                   1196 ;       tmp     ( -- a )
                                   1197 ;       A temporary storage.
      00059F 05 91                 1198         .word      LINK
                                   1199         
                           0005A1  1200 LINK = . 
      0005A1 03                    1201 	.byte      3
      0005A2 54 4D 50              1202         .ascii     "TMP"
      0005A5                       1203 TEMP:
      0005A5 90 AE 00 08      [ 2] 1204 	LDW Y,#UTMP
      0005A9 1D 00 02         [ 2] 1205 	SUBW X,#2
      0005AC FF               [ 2] 1206         LDW (X),Y
      0005AD 81               [ 4] 1207         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1208 
                                   1209 ;       >IN     ( -- a )
                                   1210 ;        Hold parsing pointer.
      0005AE 05 A1                 1211         .word      LINK
                           0005B0  1212 LINK = . 
      0005B0 03                    1213         .byte      3
      0005B1 3E 49 4E              1214         .ascii    ">IN"
      0005B4                       1215 INN:
      0005B4 90 AE 00 0A      [ 2] 1216 	LDW Y,#UINN 
      0005B8 1D 00 02         [ 2] 1217 	SUBW X,#2
      0005BB FF               [ 2] 1218         LDW (X),Y
      0005BC 81               [ 4] 1219         RET
                                   1220 
                                   1221 ;       #TIB    ( -- a )
                                   1222 ;       Count in terminal input buffer.
      0005BD 05 B0                 1223         .word      LINK
                           0005BF  1224 LINK = . 
      0005BF 04                    1225         .byte      4
      0005C0 23 54 49 42           1226         .ascii     "#TIB"
      0005C4                       1227 NTIB:
      0005C4 90 AE 00 0C      [ 2] 1228 	LDW Y,#UCTIB 
      0005C8 1D 00 02         [ 2] 1229 	SUBW X,#2
      0005CB FF               [ 2] 1230         LDW (X),Y
      0005CC 81               [ 4] 1231         RET
                                   1232 
                                   1233 ;       TBUF ( -- a )
                                   1234 ;       address of 128 bytes transaction buffer 
      0005CD 05 BF                 1235         .word LINK 
                           0005CF  1236         LINK=.
      0005CF 04                    1237         .byte 4 
      0005D0 54 42 55 46           1238         .ascii "TBUF"
      0005D4                       1239 TBUF:
      0005D4 90 AE 06 80      [ 2] 1240         ldw y,#ROWBUFF
      0005D8 1D 00 02         [ 2] 1241         subw x,#CELLL
      0005DB FF               [ 2] 1242         ldw (x),y 
      0005DC 81               [ 4] 1243         ret 
                                   1244 
                                   1245 ; systeme variable 
                                   1246 ; compilation destination 
                                   1247 ; TFLASH ( -- A )
      0005DD 05 CF                 1248         .word LINK 
                           0005DF  1249         LINK=.
      0005DF 06                    1250         .byte 6 
      0005E0 54 46 4C 41 53 48     1251         .ascii "TFLASH"         
      0005E6                       1252 TFLASH:
      0005E6 1D 00 02         [ 2] 1253         subw x,#CELLL 
      0005E9 90 AE 00 1E      [ 2] 1254         ldw y,#UTFLASH
      0005ED FF               [ 2] 1255         ldw (x),y 
      0005EE 81               [ 4] 1256         ret 
                                   1257 
                                   1258 ;       "EVAL   ( -- a )
                                   1259 ;       Execution vector of EVAL.
      0005EF 05 DF                 1260         .word      LINK
                           0005F1  1261 LINK = . 
      0005F1 05                    1262         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005F2 27 45 56 41 4C        1263         .ascii     "'EVAL"
      0005F7                       1264 TEVAL:
      0005F7 90 AE 00 10      [ 2] 1265 	LDW Y,#UINTER 
      0005FB 1D 00 02         [ 2] 1266 	SUBW X,#2
      0005FE FF               [ 2] 1267         LDW (X),Y
      0005FF 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;       HLD     ( -- a )
                                   1271 ;       Hold a pointer of output string.
      000600 05 F1                 1272         .word      LINK
                           000602  1273 LINK = . 
      000602 03                    1274         .byte      3
      000603 48 4C 44              1275         .ascii     "HLD"
      000606                       1276 HLD:
      000606 90 AE 00 12      [ 2] 1277 	LDW Y,#UHLD 
      00060A 1D 00 02         [ 2] 1278 	SUBW X,#2
      00060D FF               [ 2] 1279         LDW (X),Y
      00060E 81               [ 4] 1280         RET
                                   1281 
                                   1282 ;       CONTEXT ( -- a )
                                   1283 ;       Start vocabulary search.
      00060F 06 02                 1284         .word      LINK
                           000611  1285 LINK = . 
      000611 07                    1286         .byte      7
      000612 43 4F 4E 54 45 58 54  1287         .ascii     "CONTEXT"
      000619                       1288 CNTXT:
      000619 90 AE 00 14      [ 2] 1289 	LDW Y,#UCNTXT
      00061D 1D 00 02         [ 2] 1290 	SUBW X,#2
      000620 FF               [ 2] 1291         LDW (X),Y
      000621 81               [ 4] 1292         RET
                                   1293 
                                   1294 ;       VP      ( -- a )
                                   1295 ;       Point to top of variables
      000622 06 11                 1296         .word      LINK
                           000624  1297 LINK = . 
      000624 02                    1298         .byte      2
      000625 56 50                 1299         .ascii     "VP"
      000627                       1300 VPP:
      000627 90 AE 00 16      [ 2] 1301 	LDW Y,#UVP 
      00062B 1D 00 02         [ 2] 1302 	SUBW X,#2
      00062E FF               [ 2] 1303         LDW (X),Y
      00062F 81               [ 4] 1304         RET
                                   1305 
                                   1306 ;       CP    ( -- a )
                                   1307 ;       Pointer to top of FLASH 
      000630 06 24                 1308         .word LINK 
                           000632  1309         LINK=.
      000632 02                    1310         .byte 2 
      000633 43 50                 1311         .ascii "CP"
      000635                       1312 CPP: 
      000635 90 AE 00 18      [ 2] 1313         ldw y,#UCP 
      000639 1D 00 02         [ 2] 1314         subw x,#CELLL 
      00063C FF               [ 2] 1315         ldw (x),y 
      00063D 81               [ 4] 1316         ret                
                                   1317 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1318 ;       LAST    ( -- a )
                                   1319 ;       Point to last name in dictionary.
      00063E 06 32                 1320         .word      LINK
                           000640  1321 LINK = . 
      000640 04                    1322         .byte      4
      000641 4C 41 53 54           1323         .ascii     "LAST"
      000645                       1324 LAST:
      000645 90 AE 00 1A      [ 2] 1325 	LDW Y,#ULAST 
      000649 1D 00 02         [ 2] 1326 	SUBW X,#2
      00064C FF               [ 2] 1327         LDW (X),Y
      00064D 81               [ 4] 1328         RET
                                   1329 
                                   1330 ; address of system variable URLAST 
                                   1331 ;       RAMLAST ( -- a )
                                   1332 ; RAM dictionary context 
      00064E 06 40                 1333         .word LINK 
                           000650  1334         LINK=. 
      000650 07                    1335         .byte 7  
      000651 52 41 4D 4C 41 53 54  1336         .ascii "RAMLAST" 
      000658                       1337 RAMLAST: 
      000658 90 AE 00 20      [ 2] 1338         ldw y,#URLAST 
      00065C 1D 00 02         [ 2] 1339         subw x,#CELLL 
      00065F FF               [ 2] 1340         ldw (x),y 
      000660 81               [ 4] 1341         ret 
                                   1342 
                                   1343 ; OFFSET ( -- a )
                                   1344 ; address of system variable OFFSET 
      000661 06 50                 1345         .word LINK 
                           000663  1346         LINK=.
      000663 06                    1347         .byte 6
      000664 4F 46 46 53 45 54     1348         .ascii "OFFSET" 
      00066A                       1349 OFFSET: 
      00066A 1D 00 02         [ 2] 1350         subw x,#CELLL
      00066D 90 AE 00 1C      [ 2] 1351         ldw y,#UOFFSET 
      000671 FF               [ 2] 1352         ldw (x),y 
      000672 81               [ 4] 1353         ret 
                                   1354 
                                   1355 ; adjust jump address adding OFFSET
                                   1356 ; ADR-ADJ ( a -- a+offset )
      000673                       1357 ADRADJ: 
      000673 CD 06 6A         [ 4] 1358         call OFFSET 
      000676 CD 04 32         [ 4] 1359         call AT 
      000679 CC 06 D4         [ 2] 1360         jp PLUS 
                                   1361 
                                   1362 
                                   1363 ;; Common functions
                                   1364 
                                   1365 ;       ?DUP    ( w -- w w | 0 )
                                   1366 ;       Dup tos if its is not zero.
      00067C 06 63                 1367         .word      LINK
                           00067E  1368 LINK = . 
      00067E 04                    1369         .byte      4
      00067F 3F 44 55 50           1370         .ascii     "?DUP"
      000683                       1371 QDUP:
      000683 90 93            [ 1] 1372         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000685 90 FE            [ 2] 1373 	LDW Y,(Y)
      000687 27 04            [ 1] 1374         JREQ     QDUP1
      000689 1D 00 02         [ 2] 1375 	SUBW X,#2
      00068C FF               [ 2] 1376         LDW (X),Y
      00068D 81               [ 4] 1377 QDUP1:  RET
                                   1378 
                                   1379 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1380 ;       Rot 3rd item to top.
      00068E 06 7E                 1381         .word      LINK
                           000690  1382 LINK = . 
      000690 03                    1383         .byte      3
      000691 52 4F 54              1384         .ascii     "ROT"
      000694                       1385 ROT:
      000694 90 93            [ 1] 1386         ldw y,x 
      000696 90 FE            [ 2] 1387         ldw y,(y)
      000698 90 89            [ 2] 1388         pushw y 
      00069A 90 93            [ 1] 1389         ldw y,x 
      00069C 90 EE 04         [ 2] 1390         ldw y,(4,y)
      00069F FF               [ 2] 1391         ldw (x),y 
      0006A0 90 93            [ 1] 1392         ldw y,x 
      0006A2 90 EE 02         [ 2] 1393         ldw y,(2,y)
      0006A5 EF 04            [ 2] 1394         ldw (4,x),y 
      0006A7 90 85            [ 2] 1395         popw y 
      0006A9 EF 02            [ 2] 1396         ldw (2,x),y
      0006AB 81               [ 4] 1397         ret 
                                   1398 
                                   1399 ;       2DROP   ( w w -- )
                                   1400 ;       Discard two items on stack.
      0006AC 06 90                 1401         .word      LINK
                           0006AE  1402 LINK = . 
      0006AE 05                    1403         .byte      5
      0006AF 32 44 52 4F 50        1404         .ascii     "2DROP"
      0006B4                       1405 DDROP:
      0006B4 1C 00 04         [ 2] 1406         ADDW X,#4
      0006B7 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1410 ;       Duplicate top two items.
      0006B8 06 AE                 1411         .word      LINK
                           0006BA  1412 LINK = . 
      0006BA 04                    1413         .byte      4
      0006BB 32 44 55 50           1414         .ascii     "2DUP"
      0006BF                       1415 DDUP:
      0006BF 1D 00 04         [ 2] 1416         SUBW X,#4
      0006C2 90 93            [ 1] 1417         LDW Y,X
      0006C4 90 EE 06         [ 2] 1418         LDW Y,(6,Y)
      0006C7 EF 02            [ 2] 1419         LDW (2,X),Y
      0006C9 90 93            [ 1] 1420         LDW Y,X
      0006CB 90 EE 04         [ 2] 1421         LDW Y,(4,Y)
      0006CE FF               [ 2] 1422         LDW (X),Y
      0006CF 81               [ 4] 1423         RET
                                   1424 
                                   1425 ;       +       ( w w -- sum )
                                   1426 ;       Add top two items.
      0006D0 06 BA                 1427         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                           0006D2  1428 LINK = . 
      0006D2 01                    1429         .byte      1
      0006D3 2B                    1430         .ascii     "+"
      0006D4                       1431 PLUS:
      0006D4 90 93            [ 1] 1432         LDW Y,X
      0006D6 90 FE            [ 2] 1433         LDW Y,(Y)
      0006D8 90 BF 24         [ 2] 1434         LDW YTEMP,Y
      0006DB 1C 00 02         [ 2] 1435         ADDW X,#2
      0006DE 90 93            [ 1] 1436         LDW Y,X
      0006E0 90 FE            [ 2] 1437         LDW Y,(Y)
      0006E2 72 B9 00 24      [ 2] 1438         ADDW Y,YTEMP
      0006E6 FF               [ 2] 1439         LDW (X),Y
      0006E7 81               [ 4] 1440         RET
                                   1441 
                                   1442 ;       NOT     ( w -- w )
                                   1443 ;       One's complement of tos.
      0006E8 06 D2                 1444         .word      LINK
                           0006EA  1445 LINK = . 
      0006EA 03                    1446         .byte      3
      0006EB 4E 4F 54              1447         .ascii     "NOT"
      0006EE                       1448 INVER:
      0006EE 90 93            [ 1] 1449         LDW Y,X
      0006F0 90 FE            [ 2] 1450         LDW Y,(Y)
      0006F2 90 53            [ 2] 1451         CPLW Y
      0006F4 FF               [ 2] 1452         LDW (X),Y
      0006F5 81               [ 4] 1453         RET
                                   1454 
                                   1455 ;       NEGATE  ( n -- -n )
                                   1456 ;       Two's complement of tos.
      0006F6 06 EA                 1457         .word      LINK
                           0006F8  1458 LINK = . 
      0006F8 06                    1459         .byte      6
      0006F9 4E 45 47 41 54 45     1460         .ascii     "NEGATE"
      0006FF                       1461 NEGAT:
      0006FF 90 93            [ 1] 1462         LDW Y,X
      000701 90 FE            [ 2] 1463         LDW Y,(Y)
      000703 90 50            [ 2] 1464         NEGW Y
      000705 FF               [ 2] 1465         LDW (X),Y
      000706 81               [ 4] 1466         RET
                                   1467 
                                   1468 ;       DNEGATE ( d -- -d )
                                   1469 ;       Two's complement of top double.
      000707 06 F8                 1470         .word      LINK
                           000709  1471 LINK = . 
      000709 07                    1472         .byte      7
      00070A 44 4E 45 47 41 54 45  1473         .ascii     "DNEGATE"
      000711                       1474 DNEGA:
      000711 90 93            [ 1] 1475         LDW Y,X
      000713 90 FE            [ 2] 1476 	LDW Y,(Y)
      000715 90 53            [ 2] 1477         CPLW Y     
      000717 90 BF 24         [ 2] 1478 	LDW YTEMP,Y
      00071A 90 93            [ 1] 1479         LDW Y,X
      00071C 90 EE 02         [ 2] 1480         LDW Y,(2,Y)
      00071F 90 53            [ 2] 1481         CPLW Y
      000721 72 A9 00 01      [ 2] 1482         addw y,#1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000725 EF 02            [ 2] 1483         LDW (2,X),Y
      000727 90 BE 24         [ 2] 1484         LDW Y,YTEMP
      00072A 24 02            [ 1] 1485         JRNC DN1 
      00072C 90 5C            [ 1] 1486         INCW Y
      00072E FF               [ 2] 1487 DN1:    LDW (X),Y
      00072F 81               [ 4] 1488         RET
                                   1489 
                                   1490 
                                   1491 ;       S>D ( n -- d )
                                   1492 ; convert single integer to double 
      000730 07 09                 1493         .word LINK 
                           000732  1494         LINK=. 
      000732 03                    1495         .byte 3 
      000733 53 3E 44              1496         .ascii "S>D"
      000736                       1497 STOD: 
      000736 1D 00 02         [ 2] 1498         subw x,#CELLL 
      000739 90 5F            [ 1] 1499         clrw y 
      00073B FF               [ 2] 1500         ldw (x),y 
      00073C 90 93            [ 1] 1501         ldw y,x 
      00073E 90 EE 02         [ 2] 1502         ldw y,(2,y)
      000741 2A 05            [ 1] 1503         jrpl 1$ 
      000743 90 AE FF FF      [ 2] 1504         ldw y,#-1
      000747 FF               [ 2] 1505         ldw (x),y 
      000748 81               [ 4] 1506 1$:     ret 
                                   1507 
                                   1508 
                                   1509 
                                   1510 
                                   1511 ;       -       ( n1 n2 -- n1-n2 )
                                   1512 ;       Subtraction.
      000749 07 32                 1513         .word      LINK
                           00074B  1514 LINK = . 
      00074B 01                    1515         .byte      1
      00074C 2D                    1516         .ascii     "-"
      00074D                       1517 SUBB:
      00074D 90 93            [ 1] 1518         LDW Y,X
      00074F 90 FE            [ 2] 1519         LDW Y,(Y)
      000751 90 BF 24         [ 2] 1520         LDW YTEMP,Y
      000754 1C 00 02         [ 2] 1521         ADDW X,#2
      000757 90 93            [ 1] 1522         LDW Y,X
      000759 90 FE            [ 2] 1523         LDW Y,(Y)
      00075B 72 B2 00 24      [ 2] 1524         SUBW Y,YTEMP
      00075F FF               [ 2] 1525         LDW (X),Y
      000760 81               [ 4] 1526         RET
                                   1527 
                                   1528 ;       ABS     ( n -- n )
                                   1529 ;       Return  absolute value of n.
      000761 07 4B                 1530         .word      LINK
                           000763  1531 LINK = . 
      000763 03                    1532         .byte      3
      000764 41 42 53              1533         .ascii     "ABS"
      000767                       1534 ABSS:
      000767 90 93            [ 1] 1535         LDW Y,X
      000769 90 FE            [ 2] 1536 	LDW Y,(Y)
      00076B 2A 03            [ 1] 1537         JRPL     AB1     ;negate:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00076D 90 50            [ 2] 1538         NEGW     Y     ;else negate hi byte
      00076F FF               [ 2] 1539         LDW (X),Y
      000770 81               [ 4] 1540 AB1:    RET
                                   1541 
                                   1542 ;       =       ( w w -- t )
                                   1543 ;       Return true if top two are =al.
      000771 07 63                 1544         .word      LINK
                           000773  1545 LINK = . 
      000773 01                    1546         .byte      1
      000774 3D                    1547         .ascii     "="
      000775                       1548 EQUAL:
      000775 A6 FF            [ 1] 1549         LD A,#0xFF  ;true
      000777 90 93            [ 1] 1550         LDW Y,X    ;D = n2
      000779 90 FE            [ 2] 1551         LDW Y,(Y)
      00077B 90 BF 24         [ 2] 1552         LDW YTEMP,Y
      00077E 1C 00 02         [ 2] 1553         ADDW X,#2
      000781 90 93            [ 1] 1554         LDW Y,X
      000783 90 FE            [ 2] 1555         LDW Y,(Y)
      000785 90 B3 24         [ 2] 1556         CPW Y,YTEMP     ;if n2 <> n1
      000788 27 01            [ 1] 1557         JREQ     EQ1
      00078A 4F               [ 1] 1558         CLR A
      00078B F7               [ 1] 1559 EQ1:    LD (X),A
      00078C E7 01            [ 1] 1560         LD (1,X),A
      00078E 81               [ 4] 1561 	RET     
                                   1562 
                                   1563 ;       U<      ( u u -- t )
                                   1564 ;       Unsigned compare of top two items.
      00078F 07 73                 1565         .word      LINK
                           000791  1566 LINK = . 
      000791 02                    1567         .byte      2
      000792 55 3C                 1568         .ascii     "U<"
      000794                       1569 ULESS:
      000794 A6 FF            [ 1] 1570         LD A,#0xFF  ;true
      000796 90 93            [ 1] 1571         LDW Y,X    ;D = n2
      000798 90 FE            [ 2] 1572         LDW Y,(Y)
      00079A 90 BF 24         [ 2] 1573         LDW YTEMP,Y
      00079D 1C 00 02         [ 2] 1574         ADDW X,#2
      0007A0 90 93            [ 1] 1575         LDW Y,X
      0007A2 90 FE            [ 2] 1576         LDW Y,(Y)
      0007A4 90 B3 24         [ 2] 1577         CPW Y,YTEMP     ;if n2 <> n1
      0007A7 25 01            [ 1] 1578         JRULT     ULES1
      0007A9 4F               [ 1] 1579         CLR A
      0007AA F7               [ 1] 1580 ULES1:  LD (X),A
      0007AB E7 01            [ 1] 1581         LD (1,X),A
      0007AD 81               [ 4] 1582 	RET     
                                   1583 
                                   1584 ;       <       ( n1 n2 -- t )
                                   1585 ;       Signed compare of top two items.
      0007AE 07 91                 1586         .word      LINK
                           0007B0  1587 LINK = . 
      0007B0 01                    1588         .byte      1
      0007B1 3C                    1589         .ascii     "<"
      0007B2                       1590 LESS:
      0007B2 A6 FF            [ 1] 1591         LD A,#0xFF  ;true
      0007B4 90 93            [ 1] 1592         LDW Y,X    ;D = n2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007B6 90 FE            [ 2] 1593         LDW Y,(Y)
      0007B8 90 BF 24         [ 2] 1594         LDW YTEMP,Y
      0007BB 1C 00 02         [ 2] 1595         ADDW X,#2
      0007BE 90 93            [ 1] 1596         LDW Y,X
      0007C0 90 FE            [ 2] 1597         LDW Y,(Y)
      0007C2 90 B3 24         [ 2] 1598         CPW Y,YTEMP     ;if n2 <> n1
      0007C5 2F 01            [ 1] 1599         JRSLT     LT1
      0007C7 4F               [ 1] 1600         CLR A
      0007C8 F7               [ 1] 1601 LT1:    LD (X),A
      0007C9 E7 01            [ 1] 1602         LD (1,X),A
      0007CB 81               [ 4] 1603 	RET     
                                   1604 
                                   1605 ;       MAX     ( n n -- n )
                                   1606 ;       Return greater of two top items.
      0007CC 07 B0                 1607         .word      LINK
                           0007CE  1608 LINK = . 
      0007CE 03                    1609         .byte      3
      0007CF 4D 41 58              1610         .ascii     "MAX"
      0007D2                       1611 MAX:
      0007D2 90 93            [ 1] 1612         LDW Y,X    ;D = n2
      0007D4 90 EE 02         [ 2] 1613         LDW Y,(2,Y)
      0007D7 90 BF 24         [ 2] 1614         LDW YTEMP,Y
      0007DA 90 93            [ 1] 1615         LDW Y,X
      0007DC 90 FE            [ 2] 1616         LDW Y,(Y)
      0007DE 90 B3 24         [ 2] 1617         CPW Y,YTEMP     ;if n2 <> n1
      0007E1 2F 02            [ 1] 1618         JRSLT     MAX1
      0007E3 EF 02            [ 2] 1619         LDW (2,X),Y
      0007E5 1C 00 02         [ 2] 1620 MAX1:   ADDW X,#2
      0007E8 81               [ 4] 1621 	RET     
                                   1622 
                                   1623 ;       MIN     ( n n -- n )
                                   1624 ;       Return smaller of top two items.
      0007E9 07 CE                 1625         .word      LINK
                           0007EB  1626 LINK = . 
      0007EB 03                    1627         .byte      3
      0007EC 4D 49 4E              1628         .ascii     "MIN"
      0007EF                       1629 MIN:
      0007EF 90 93            [ 1] 1630         LDW Y,X    ;D = n2
      0007F1 90 EE 02         [ 2] 1631         LDW Y,(2,Y)
      0007F4 90 BF 24         [ 2] 1632         LDW YTEMP,Y
      0007F7 90 93            [ 1] 1633         LDW Y,X
      0007F9 90 FE            [ 2] 1634         LDW Y,(Y)
      0007FB 90 B3 24         [ 2] 1635         CPW Y,YTEMP     ;if n2 <> n1
      0007FE 2C 02            [ 1] 1636         JRSGT     MIN1
      000800 EF 02            [ 2] 1637         LDW (2,X),Y
      000802 1C 00 02         [ 2] 1638 MIN1:	ADDW X,#2
      000805 81               [ 4] 1639 	RET     
                                   1640 
                                   1641 ;       WITHIN  ( u ul uh -- t )
                                   1642 ;       Return true if u is within
                                   1643 ;       range of ul and uh. ( ul <= u < uh )
      000806 07 EB                 1644         .word      LINK
                           000808  1645 LINK = . 
      000808 06                    1646         .byte      6
      000809 57 49 54 48 49 4E     1647         .ascii     "WITHIN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00080F                       1648 WITHI:
      00080F CD 05 03         [ 4] 1649         CALL     OVER
      000812 CD 07 4D         [ 4] 1650         CALL     SUBB
      000815 CD 04 A2         [ 4] 1651         CALL     TOR
      000818 CD 07 4D         [ 4] 1652         CALL     SUBB
      00081B CD 04 83         [ 4] 1653         CALL     RFROM
      00081E CC 07 94         [ 2] 1654         JP     ULESS
                                   1655 
                                   1656 ;; Divide
                                   1657 
                                   1658 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1659 ;       Unsigned divide of a double by a
                                   1660 ;       single. Return mod and quotient.
      000821 08 08                 1661         .word      LINK
                           000823  1662 LINK = . 
      000823 06                    1663         .byte      6
      000824 55 4D 2F 4D 4F 44     1664         .ascii     "UM/MOD"
      00082A                       1665 UMMOD:
      00082A BF 22            [ 2] 1666 	LDW XTEMP,X	; save stack pointer
      00082C FE               [ 2] 1667 	LDW X,(X)	; un
      00082D BF 24            [ 2] 1668 	LDW YTEMP,X     ; save un
      00082F 90 BE 22         [ 2] 1669 	LDW Y,XTEMP	; stack pointer
      000832 90 EE 04         [ 2] 1670 	LDW Y,(4,Y)     ; Y=udl
      000835 BE 22            [ 2] 1671 	LDW X,XTEMP
      000837 EE 02            [ 2] 1672 	LDW X,(2,X)	; X=udh
      000839 B3 24            [ 2] 1673 	CPW X,YTEMP
      00083B 23 0F            [ 2] 1674 	JRULE MMSM1
      00083D BE 22            [ 2] 1675 	LDW X,XTEMP
      00083F 1C 00 02         [ 2] 1676 	ADDW X,#2	; pop off 1 level
      000842 90 AE FF FF      [ 2] 1677 	LDW Y,#0xFFFF
      000846 FF               [ 2] 1678 	LDW (X),Y
      000847 90 5F            [ 1] 1679 	CLRW Y
      000849 EF 02            [ 2] 1680 	LDW (2,X),Y
      00084B 81               [ 4] 1681 	RET
      00084C                       1682 MMSM1:
                                   1683 ; take advantage of divw x,y when udh==0
      00084C 5D               [ 2] 1684         tnzw x  ; is udh==0?
      00084D 26 11            [ 1] 1685         jrne MMSM2 
      00084F 93               [ 1] 1686         ldw x,y    ;udl 
      000850 90 BE 24         [ 2] 1687         ldw y,YTEMP ; divisor 
      000853 65               [ 2] 1688         divw x,y 
      000854 89               [ 2] 1689         pushw x     ; quotient 
      000855 BE 22            [ 2] 1690         ldw x,XTEMP 
      000857 1C 00 02         [ 2] 1691         addw x,#CELLL 
      00085A EF 02            [ 2] 1692         ldw (2,x),y  ; ur
      00085C 90 85            [ 2] 1693         popw y 
      00085E FF               [ 2] 1694         ldw (x),y ; uq 
      00085F 81               [ 4] 1695         ret 
      000860                       1696 MMSM2:        
      000860 A6 11            [ 1] 1697 	LD A,#17	; loop count
      000862                       1698 MMSM3:
      000862 B3 24            [ 2] 1699 	CPW X,YTEMP	; compare udh to un
      000864 25 04            [ 1] 1700 	JRULT MMSM4	; can't subtract
      000866 72 B0 00 24      [ 2] 1701 	SUBW X,YTEMP	; can subtract
      00086A                       1702 MMSM4:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00086A 8C               [ 1] 1703 	CCF	; quotient bit
      00086B 90 59            [ 2] 1704 	RLCW Y	; rotate into quotient
      00086D 59               [ 2] 1705 	RLCW X	; rotate into remainder
      00086E 4A               [ 1] 1706 	DEC A	; repeat
      00086F 22 F1            [ 1] 1707 	JRUGT MMSM3
      000871 56               [ 2] 1708         RRCW X 
      000872 BF 24            [ 2] 1709 	LDW YTEMP,X	; done, save remainder
      000874 BE 22            [ 2] 1710 	LDW X,XTEMP
      000876 1C 00 02         [ 2] 1711 	ADDW X,#2	; drop
      000879 FF               [ 2] 1712 	LDW (X),Y
      00087A 90 BE 24         [ 2] 1713 	LDW Y,YTEMP	; save quotient
      00087D EF 02            [ 2] 1714 	LDW (2,X),Y
      00087F 81               [ 4] 1715 	RET
                                   1716 	
                                   1717 ;       M/MOD   ( d n -- r q )
                                   1718 ;       Signed floored divide of double by
                                   1719 ;       single. Return mod and quotient.
      000880 08 23                 1720         .word      LINK
                           000882  1721 LINK = . 
      000882 05                    1722         .byte      5
      000883 4D 2F 4D 4F 44        1723         .ascii     "M/MOD"
      000888                       1724 MSMOD:  
      000888 CD 04 D9         [ 4] 1725         CALL	DUPP
      00088B CD 05 12         [ 4] 1726         CALL	ZLESS
      00088E CD 04 D9         [ 4] 1727         CALL	DUPP
      000891 CD 04 A2         [ 4] 1728         CALL	TOR
      000894 CD 03 E7         [ 4] 1729         CALL	QBRAN
      000897 08 A5                 1730         .word	MMOD1
      000899 CD 06 FF         [ 4] 1731         CALL	NEGAT
      00089C CD 04 A2         [ 4] 1732         CALL	TOR
      00089F CD 07 11         [ 4] 1733         CALL	DNEGA
      0008A2 CD 04 83         [ 4] 1734         CALL	RFROM
      0008A5 CD 04 A2         [ 4] 1735 MMOD1:	CALL	TOR
      0008A8 CD 04 D9         [ 4] 1736         CALL	DUPP
      0008AB CD 05 12         [ 4] 1737         CALL	ZLESS
      0008AE CD 03 E7         [ 4] 1738         CALL	QBRAN
      0008B1 08 B9                 1739         .word	MMOD2
      0008B3 CD 04 96         [ 4] 1740         CALL	RAT
      0008B6 CD 06 D4         [ 4] 1741         CALL	PLUS
      0008B9 CD 04 83         [ 4] 1742 MMOD2:	CALL	RFROM
      0008BC CD 08 2A         [ 4] 1743         CALL	UMMOD
      0008BF CD 04 83         [ 4] 1744         CALL	RFROM
      0008C2 CD 03 E7         [ 4] 1745         CALL	QBRAN
      0008C5 08 D0                 1746         .word	MMOD3
      0008C7 CD 04 E9         [ 4] 1747         CALL	SWAPP
      0008CA CD 06 FF         [ 4] 1748         CALL	NEGAT
      0008CD CD 04 E9         [ 4] 1749         CALL	SWAPP
      0008D0 81               [ 4] 1750 MMOD3:	RET
                                   1751 
                                   1752 ;       /MOD    ( n n -- r q )
                                   1753 ;       Signed divide. Return mod and quotient.
      0008D1 08 82                 1754         .word      LINK
                           0008D3  1755 LINK = . 
      0008D3 04                    1756         .byte      4
      0008D4 2F 4D 4F 44           1757         .ascii     "/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008D8                       1758 SLMOD:
      0008D8 CD 05 03         [ 4] 1759         CALL	OVER
      0008DB CD 05 12         [ 4] 1760         CALL	ZLESS
      0008DE CD 04 E9         [ 4] 1761         CALL	SWAPP
      0008E1 CC 08 88         [ 2] 1762         JP	MSMOD
                                   1763 
                                   1764 ;       MOD     ( n n -- r )
                                   1765 ;       Signed divide. Return mod only.
      0008E4 08 D3                 1766         .word      LINK
                           0008E6  1767 LINK = . 
      0008E6 03                    1768         .byte      3
      0008E7 4D 4F 44              1769         .ascii     "MOD"
      0008EA                       1770 MODD:
      0008EA CD 08 D8         [ 4] 1771 	CALL	SLMOD
      0008ED CC 04 CF         [ 2] 1772 	JP	DROP
                                   1773 
                                   1774 ;       /       ( n n -- q )
                                   1775 ;       Signed divide. Return quotient only.
      0008F0 08 E6                 1776         .word      LINK
                           0008F2  1777 LINK = . 
      0008F2 01                    1778         .byte      1
      0008F3 2F                    1779         .ascii     "/"
      0008F4                       1780 SLASH:
      0008F4 CD 08 D8         [ 4] 1781         CALL	SLMOD
      0008F7 CD 04 E9         [ 4] 1782         CALL	SWAPP
      0008FA CC 04 CF         [ 2] 1783         JP	DROP
                                   1784 
                                   1785 ;; Multiply
                                   1786 
                                   1787 ;       UM*     ( u u -- ud )
                                   1788 ;       Unsigned multiply. Return double product.
      0008FD 08 F2                 1789         .word      LINK
                           0008FF  1790 LINK = . 
      0008FF 03                    1791         .byte      3
      000900 55 4D 2A              1792         .ascii     "UM*"
      000903                       1793 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1794 ; take advantage of SP addressing modes
                                   1795 ; these PRODx in RAM are not required
                                   1796 ; the product is kept on stack as local variable 
                                   1797         ;; bytes offset on data stack 
                           000002  1798         da=2 
                           000003  1799         db=3 
                           000000  1800         dc=0 
                           000001  1801         dd=1 
                                   1802         ;; product bytes offset on return stack 
                           000001  1803         UD1=1  ; ud bits 31..24
                           000002  1804         UD2=2  ; ud bits 23..16
                           000003  1805         UD3=3  ; ud bits 15..8 
                           000004  1806         UD4=4  ; ud bits 7..0 
                                   1807         ;; local variable for product set to zero   
      000903 90 5F            [ 1] 1808         clrw y 
      000905 90 89            [ 2] 1809         pushw y  ; bits 15..0
      000907 90 89            [ 2] 1810         pushw y  ; bits 31..16 
      000909 E6 03            [ 1] 1811         ld a,(db,x) ; b 
      00090B 90 97            [ 1] 1812         ld yl,a 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00090D E6 01            [ 1] 1813         ld a,(dd,x)   ; d
      00090F 90 42            [ 4] 1814         mul y,a    ; b*d  
      000911 17 03            [ 2] 1815         ldw (UD3,sp),y ; lowest weight product 
      000913 E6 03            [ 1] 1816         ld a,(db,x)
      000915 90 97            [ 1] 1817         ld yl,a 
      000917 E6 00            [ 1] 1818         ld a,(dc,x)
      000919 90 42            [ 4] 1819         mul y,a  ; b*c 
                                   1820         ;;; do the partial sum 
      00091B 72 F9 02         [ 2] 1821         addw y,(UD2,sp)
      00091E 4F               [ 1] 1822         clr a 
      00091F 49               [ 1] 1823         rlc a
      000920 6B 01            [ 1] 1824         ld (UD1,sp),a 
      000922 17 02            [ 2] 1825         ldw (UD2,sp),y 
      000924 E6 02            [ 1] 1826         ld a,(da,x)
      000926 90 97            [ 1] 1827         ld yl,a 
      000928 E6 01            [ 1] 1828         ld a,(dd,x)
      00092A 90 42            [ 4] 1829         mul y,a   ; a*d 
                                   1830         ;; do partial sum 
      00092C 72 F9 02         [ 2] 1831         addw y,(UD2,sp)
      00092F 4F               [ 1] 1832         clr a 
      000930 19 01            [ 1] 1833         adc a,(UD1,sp)
      000932 6B 01            [ 1] 1834         ld (UD1,sp),a  
      000934 17 02            [ 2] 1835         ldw (UD2,sp),y 
      000936 E6 02            [ 1] 1836         ld a,(da,x)
      000938 90 97            [ 1] 1837         ld yl,a 
      00093A E6 00            [ 1] 1838         ld a,(dc,x)
      00093C 90 42            [ 4] 1839         mul y,a  ;  a*c highest weight product 
                                   1840         ;;; do partial sum 
      00093E 72 F9 01         [ 2] 1841         addw y,(UD1,sp)
      000941 FF               [ 2] 1842         ldw (x),y  ; udh 
      000942 16 03            [ 2] 1843         ldw y,(UD3,sp)
      000944 EF 02            [ 2] 1844         ldw (2,x),y  ; udl  
      000946 5B 04            [ 2] 1845         addw sp,#4 ; drop local variable 
      000948 81               [ 4] 1846         ret  
                                   1847 
                                   1848 
                                   1849 ;       *       ( n n -- n )
                                   1850 ;       Signed multiply. Return single product.
      000949 08 FF                 1851         .word      LINK
                           00094B  1852 LINK = . 
      00094B 01                    1853         .byte      1
      00094C 2A                    1854         .ascii     "*"
      00094D                       1855 STAR:
      00094D CD 09 03         [ 4] 1856 	CALL	UMSTA
      000950 CC 04 CF         [ 2] 1857 	JP	DROP
                                   1858 
                                   1859 ;       M*      ( n n -- d )
                                   1860 ;       Signed multiply. Return double product.
      000953 09 4B                 1861         .word      LINK
                           000955  1862 LINK = . 
      000955 02                    1863         .byte      2
      000956 4D 2A                 1864         .ascii     "M*"
      000958                       1865 MSTAR:      
      000958 CD 06 BF         [ 4] 1866         CALL	DDUP
      00095B CD 05 4E         [ 4] 1867         CALL	XORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00095E CD 05 12         [ 4] 1868         CALL	ZLESS
      000961 CD 04 A2         [ 4] 1869         CALL	TOR
      000964 CD 07 67         [ 4] 1870         CALL	ABSS
      000967 CD 04 E9         [ 4] 1871         CALL	SWAPP
      00096A CD 07 67         [ 4] 1872         CALL	ABSS
      00096D CD 09 03         [ 4] 1873         CALL	UMSTA
      000970 CD 04 83         [ 4] 1874         CALL	RFROM
      000973 CD 03 E7         [ 4] 1875         CALL	QBRAN
      000976 09 7B                 1876         .word	MSTA1
      000978 CD 07 11         [ 4] 1877         CALL	DNEGA
      00097B 81               [ 4] 1878 MSTA1:	RET
                                   1879 
                                   1880 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1881 ;       Multiply n1 and n2, then divide
                                   1882 ;       by n3. Return mod and quotient.
      00097C 09 55                 1883         .word      LINK
                           00097E  1884 LINK = . 
      00097E 05                    1885         .byte      5
      00097F 2A 2F 4D 4F 44        1886         .ascii     "*/MOD"
      000984                       1887 SSMOD:
      000984 CD 04 A2         [ 4] 1888         CALL     TOR
      000987 CD 09 58         [ 4] 1889         CALL     MSTAR
      00098A CD 04 83         [ 4] 1890         CALL     RFROM
      00098D CC 08 88         [ 2] 1891         JP     MSMOD
                                   1892 
                                   1893 ;       */      ( n1 n2 n3 -- q )
                                   1894 ;       Multiply n1 by n2, then divide
                                   1895 ;       by n3. Return quotient only.
      000990 09 7E                 1896         .word      LINK
                           000992  1897 LINK = . 
      000992 02                    1898         .byte      2
      000993 2A 2F                 1899         .ascii     "*/"
      000995                       1900 STASL:
      000995 CD 09 84         [ 4] 1901         CALL	SSMOD
      000998 CD 04 E9         [ 4] 1902         CALL	SWAPP
      00099B CC 04 CF         [ 2] 1903         JP	DROP
                                   1904 
                                   1905 ;; Miscellaneous
                                   1906 
                                   1907 ;       CELL+   ( a -- a )
                                   1908 ;       Add cell size in byte to address.
      00099E 09 92                 1909         .word      LINK
                           0009A0  1910 LINK = . 
      0009A0 02                    1911         .byte       2
      0009A1 32 2B                 1912         .ascii     "2+"
      0009A3                       1913 CELLP:
      0009A3 90 93            [ 1] 1914         LDW Y,X
      0009A5 90 FE            [ 2] 1915 	LDW Y,(Y)
      0009A7 72 A9 00 02      [ 2] 1916         ADDW Y,#CELLL 
      0009AB FF               [ 2] 1917         LDW (X),Y
      0009AC 81               [ 4] 1918         RET
                                   1919 
                                   1920 ;       CELL-   ( a -- a )
                                   1921 ;       Subtract 2 from address.
      0009AD 09 A0                 1922         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           0009AF  1923 LINK = . 
      0009AF 02                    1924         .byte       2
      0009B0 32 2D                 1925         .ascii     "2-"
      0009B2                       1926 CELLM:
      0009B2 90 93            [ 1] 1927         LDW Y,X
      0009B4 90 FE            [ 2] 1928 	LDW Y,(Y)
      0009B6 72 A2 00 02      [ 2] 1929         SUBW Y,#CELLL
      0009BA FF               [ 2] 1930         LDW (X),Y
      0009BB 81               [ 4] 1931         RET
                                   1932 
                                   1933 ;       CELLS   ( n -- n )
                                   1934 ;       Multiply tos by 2.
      0009BC 09 AF                 1935         .word      LINK
                           0009BE  1936 LINK = . 
      0009BE 02                    1937         .byte       2
      0009BF 32 2A                 1938         .ascii     "2*"
      0009C1                       1939 CELLS:
      0009C1 90 93            [ 1] 1940         LDW Y,X
      0009C3 90 FE            [ 2] 1941 	LDW Y,(Y)
      0009C5 90 58            [ 2] 1942         SLAW Y
      0009C7 FF               [ 2] 1943         LDW (X),Y
      0009C8 81               [ 4] 1944         RET
                                   1945 
                                   1946 ;       1+      ( a -- a )
                                   1947 ;       Add cell size in byte to address.
      0009C9 09 BE                 1948         .word      LINK
                           0009CB  1949 LINK = . 
      0009CB 02                    1950         .byte      2
      0009CC 31 2B                 1951         .ascii     "1+"
      0009CE                       1952 ONEP:
      0009CE 90 93            [ 1] 1953         LDW Y,X
      0009D0 90 FE            [ 2] 1954 	LDW Y,(Y)
      0009D2 90 5C            [ 1] 1955         INCW Y
      0009D4 FF               [ 2] 1956         LDW (X),Y
      0009D5 81               [ 4] 1957         RET
                                   1958 
                                   1959 ;       1-      ( a -- a )
                                   1960 ;       Subtract 2 from address.
      0009D6 09 CB                 1961         .word      LINK
                           0009D8  1962 LINK = . 
      0009D8 02                    1963         .byte      2
      0009D9 31 2D                 1964         .ascii     "1-"
      0009DB                       1965 ONEM:
      0009DB 90 93            [ 1] 1966         LDW Y,X
      0009DD 90 FE            [ 2] 1967 	LDW Y,(Y)
      0009DF 90 5A            [ 2] 1968         DECW Y
      0009E1 FF               [ 2] 1969         LDW (X),Y
      0009E2 81               [ 4] 1970         RET
                                   1971 
                                   1972 ;  shift left n times 
                                   1973 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009E3 09 D8                 1974         .word LINK 
                           0009E5  1975         LINK=.
      0009E5 06                    1976         .byte 6 
      0009E6 4C 53 48 49 46 54     1977         .ascii "LSHIFT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0009EC                       1978 LSHIFT:
      0009EC E6 01            [ 1] 1979         ld a,(1,x)
      0009EE 1C 00 02         [ 2] 1980         addw x,#CELLL 
      0009F1 90 93            [ 1] 1981         ldw y,x 
      0009F3 90 FE            [ 2] 1982         ldw y,(y)
      0009F5                       1983 LSHIFT1:
      0009F5 4D               [ 1] 1984         tnz a 
      0009F6 27 05            [ 1] 1985         jreq LSHIFT4 
      0009F8 90 58            [ 2] 1986         sllw y 
      0009FA 4A               [ 1] 1987         dec a 
      0009FB 20 F8            [ 2] 1988         jra LSHIFT1 
      0009FD                       1989 LSHIFT4:
      0009FD FF               [ 2] 1990         ldw (x),y 
      0009FE 81               [ 4] 1991         ret 
                                   1992 
                                   1993 ; shift right n times                 
                                   1994 ; RSHIFT (n1 n2 -- n1>>n2 )
      0009FF 09 E5                 1995         .word LINK 
                           000A01  1996         LINK=.
      000A01 06                    1997         .byte 6
      000A02 52 53 48 49 46 54     1998         .ascii "RSHIFT"
      000A08                       1999 RSHIFT:
      000A08 E6 01            [ 1] 2000         ld a,(1,x)
      000A0A 1C 00 02         [ 2] 2001         addw x,#CELLL 
      000A0D 90 93            [ 1] 2002         ldw y,x 
      000A0F 90 FE            [ 2] 2003         ldw y,(y)
      000A11                       2004 RSHIFT1:
      000A11 4D               [ 1] 2005         tnz a 
      000A12 27 05            [ 1] 2006         jreq RSHIFT4 
      000A14 90 54            [ 2] 2007         srlw y 
      000A16 4A               [ 1] 2008         dec a 
      000A17 20 F8            [ 2] 2009         jra RSHIFT1 
      000A19                       2010 RSHIFT4:
      000A19 FF               [ 2] 2011         ldw (x),y 
      000A1A 81               [ 4] 2012         ret 
                                   2013 
                                   2014 
                                   2015 ;       2/      ( n -- n )
                                   2016 ;       divide  tos by 2.
      000A1B 0A 01                 2017         .word      LINK
                           000A1D  2018 LINK = . 
      000A1D 02                    2019         .byte      2
      000A1E 32 2F                 2020         .ascii     "2/"
      000A20                       2021 TWOSL:
      000A20 90 93            [ 1] 2022         LDW Y,X
      000A22 90 FE            [ 2] 2023 	LDW Y,(Y)
      000A24 90 57            [ 2] 2024         SRAW Y
      000A26 FF               [ 2] 2025         LDW (X),Y
      000A27 81               [ 4] 2026         RET
                                   2027 
                                   2028 ;       BL      ( -- 32 )
                                   2029 ;       Return 32,  blank character.
      000A28 0A 1D                 2030         .word      LINK
                           000A2A  2031 LINK = . 
      000A2A 02                    2032         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A2B 42 4C                 2033         .ascii     "BL"
      000A2D                       2034 BLANK:
      000A2D 1D 00 02         [ 2] 2035         SUBW X,#2
      000A30 90 AE 00 20      [ 2] 2036 	LDW Y,#32
      000A34 FF               [ 2] 2037         LDW (X),Y
      000A35 81               [ 4] 2038         RET
                                   2039 
                                   2040 ;         0     ( -- 0)
                                   2041 ;         Return 0.
      000A36 0A 2A                 2042         .word      LINK
                           000A38  2043 LINK = . 
      000A38 01                    2044         .byte       1
      000A39 30                    2045         .ascii     "0"
      000A3A                       2046 ZERO:
      000A3A 1D 00 02         [ 2] 2047         SUBW X,#2
      000A3D 90 5F            [ 1] 2048 	CLRW Y
      000A3F FF               [ 2] 2049         LDW (X),Y
      000A40 81               [ 4] 2050         RET
                                   2051 
                                   2052 ;         1     ( -- 1)
                                   2053 ;         Return 1.
      000A41 0A 38                 2054         .word      LINK
                           000A43  2055 LINK = . 
      000A43 01                    2056         .byte       1
      000A44 31                    2057         .ascii     "1"
      000A45                       2058 ONE:
      000A45 1D 00 02         [ 2] 2059         SUBW X,#2
      000A48 90 AE 00 01      [ 2] 2060 	LDW Y,#1
      000A4C FF               [ 2] 2061         LDW (X),Y
      000A4D 81               [ 4] 2062         RET
                                   2063 
                                   2064 ;         -1    ( -- -1)
                                   2065 ;         Return 32,  blank character.
      000A4E 0A 43                 2066         .word      LINK
                           000A50  2067 LINK = . 
      000A50 02                    2068         .byte       2
      000A51 2D 31                 2069         .ascii     "-1"
      000A53                       2070 MONE:
      000A53 1D 00 02         [ 2] 2071         SUBW X,#2
      000A56 90 AE FF FF      [ 2] 2072 	LDW Y,#0xFFFF
      000A5A FF               [ 2] 2073         LDW (X),Y
      000A5B 81               [ 4] 2074         RET
                                   2075 
                                   2076 ;       >CHAR   ( c -- c )
                                   2077 ;       Filter non-printing characters.
      000A5C 0A 50                 2078         .word      LINK
                           000A5E  2079 LINK = . 
      000A5E 05                    2080         .byte      5
      000A5F 3E 43 48 41 52        2081         .ascii     ">CHAR"
      000A64                       2082 TCHAR:
      000A64 E6 01            [ 1] 2083         ld a,(1,x)
      000A66 A1 20            [ 1] 2084         cp a,#32  
      000A68 2B 05            [ 1] 2085         jrmi 1$ 
      000A6A A1 7F            [ 1] 2086         cp a,#127 
      000A6C 2A 01            [ 1] 2087         jrpl 1$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000A6E 81               [ 4] 2088         ret 
      000A6F A6 5F            [ 1] 2089 1$:     ld a,#'_ 
      000A71 E7 01            [ 1] 2090         ld (1,x),a 
      000A73 81               [ 4] 2091         ret 
                                   2092 
                                   2093 ;       DEPTH   ( -- n )
                                   2094 ;       Return  depth of  data stack.
      000A74 0A 5E                 2095         .word      LINK
                           000A76  2096 LINK = . 
      000A76 05                    2097         .byte      5
      000A77 44 45 50 54 48        2098         .ascii     "DEPTH"
      000A7C                       2099 DEPTH: 
      000A7C 90 BE 2A         [ 2] 2100         LDW Y,SP0    ;save data stack ptr
      000A7F BF 22            [ 2] 2101 	LDW XTEMP,X
      000A81 72 B2 00 22      [ 2] 2102         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A85 90 57            [ 2] 2103         SRAW Y    ;Y = #stack items
      000A87 1D 00 02         [ 2] 2104 	SUBW X,#2
      000A8A FF               [ 2] 2105         LDW (X),Y     ; if neg, underflow
      000A8B 81               [ 4] 2106         RET
                                   2107 
                                   2108 ;       PICK    ( ... +n -- ... w )
                                   2109 ;       Copy  nth stack item to tos.
      000A8C 0A 76                 2110         .word      LINK
                           000A8E  2111 LINK = . 
      000A8E 04                    2112         .byte      4
      000A8F 50 49 43 4B           2113         .ascii     "PICK"
      000A93                       2114 PICK:
      000A93 90 93            [ 1] 2115         LDW Y,X   ;D = n1
      000A95 90 FE            [ 2] 2116         LDW Y,(Y)
                                   2117 ; modified for standard compliance          
                                   2118 ; 0 PICK must be equivalent to DUP 
      000A97 90 5C            [ 1] 2119         INCW Y 
      000A99 90 58            [ 2] 2120         SLAW Y
      000A9B BF 22            [ 2] 2121         LDW XTEMP,X
      000A9D 72 B9 00 22      [ 2] 2122         ADDW Y,XTEMP
      000AA1 90 FE            [ 2] 2123         LDW Y,(Y)
      000AA3 FF               [ 2] 2124         LDW (X),Y
      000AA4 81               [ 4] 2125         RET
                                   2126 
                                   2127 ;; Memory access
                                   2128 
                                   2129 ;       +!      ( n a -- )
                                   2130 ;       Add n to  contents at address a.
      000AA5 0A 8E                 2131         .word      LINK
                           000AA7  2132 LINK = . 
      000AA7 02                    2133         .byte      2
      000AA8 2B 21                 2134         .ascii     "+!"
      000AAA                       2135 PSTOR:
      000AAA 90 93            [ 1] 2136         ldw y,x 
      000AAC 90 FE            [ 2] 2137         ldw y,(y)
      000AAE 90 BF 24         [ 2] 2138         ldw YTEMP,y  ; address
      000AB1 90 FE            [ 2] 2139         ldw y,(y)  
      000AB3 90 89            [ 2] 2140         pushw y  ; value at address 
      000AB5 90 93            [ 1] 2141         ldw y,x 
      000AB7 90 EE 02         [ 2] 2142         ldw y,(2,y) ; n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000ABA 72 F9 01         [ 2] 2143         addw y,(1,sp) ; n+value
      000ABD 91 CF 24         [ 5] 2144         ldw [YTEMP],y ;  a!
      000AC0 90 85            [ 2] 2145         popw y    ;drop local var
      000AC2 1C 00 04         [ 2] 2146         addw x,#4 ; DDROP 
      000AC5 81               [ 4] 2147         ret 
                                   2148 
                                   2149 ;       2!      ( d a -- )
                                   2150 ;       Store  double integer to address a.
      000AC6 0A A7                 2151         .word      LINK
                           000AC8  2152 LINK = . 
      000AC8 02                    2153         .byte      2
      000AC9 32 21                 2154         .ascii     "2!"
      000ACB                       2155 DSTOR:
      000ACB 90 93            [ 1] 2156         ldw y,x 
      000ACD 90 FE            [ 2] 2157         ldw y,(y)
      000ACF 90 BF 24         [ 2] 2158         ldw YTEMP,y ; address 
      000AD2 1C 00 02         [ 2] 2159         addw x,#CELLL ; drop a 
      000AD5 90 93            [ 1] 2160         ldw y,x 
      000AD7 90 FE            [ 2] 2161         ldw y,(y) ; hi word 
      000AD9 89               [ 2] 2162         pushw x 
      000ADA EE 02            [ 2] 2163         ldw x,(2,x) ; lo word 
      000ADC 91 CF 24         [ 5] 2164         ldw [YTEMP],y
      000ADF 90 93            [ 1] 2165         ldw y,x 
      000AE1 AE 00 02         [ 2] 2166         ldw x,#2 
      000AE4 92 DF 24         [ 5] 2167         ldw ([YTEMP],x),y 
      000AE7 85               [ 2] 2168         popw x 
      000AE8 1C 00 04         [ 2] 2169         addw x,#4 ; DDROP 
      000AEB 81               [ 4] 2170         ret 
                                   2171 
                                   2172 ;       2@      ( a -- d )
                                   2173 ;       Fetch double integer from address a.
      000AEC 0A C8                 2174         .word      LINK
                           000AEE  2175 LINK = . 
      000AEE 02                    2176         .byte      2
      000AEF 32 40                 2177         .ascii     "2@"
      000AF1                       2178 DAT:
      000AF1 90 93            [ 1] 2179         ldw y,x 
      000AF3 90 FE            [ 2] 2180         ldw y,(y) ;address 
      000AF5 90 BF 24         [ 2] 2181         ldw YTEMP,y 
      000AF8 1D 00 02         [ 2] 2182         subw x,#CELLL ; space for udh 
      000AFB 91 CE 24         [ 5] 2183         ldw y,[YTEMP] ; udh 
      000AFE FF               [ 2] 2184         ldw (x),y 
      000AFF 90 AE 00 02      [ 2] 2185         ldw y,#2
      000B03 91 DE 24         [ 5] 2186         ldw y,([YTEMP],y) ; udl 
      000B06 EF 02            [ 2] 2187         ldw (2,x),y
      000B08 81               [ 4] 2188         ret 
                                   2189 
                                   2190 ;       COUNT   ( b -- b +n )
                                   2191 ;       Return count byte of a string
                                   2192 ;       and add 1 to byte address.
      000B09 0A EE                 2193         .word      LINK
                           000B0B  2194 LINK = . 
      000B0B 05                    2195         .byte      5
      000B0C 43 4F 55 4E 54        2196         .ascii     "COUNT"
      000B11                       2197 COUNT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B11 90 93            [ 1] 2198         ldw y,x 
      000B13 90 FE            [ 2] 2199         ldw y,(y) ; address 
      000B15 90 F6            [ 1] 2200         ld a,(y)  ; count 
      000B17 90 5C            [ 1] 2201         incw y 
      000B19 FF               [ 2] 2202         ldw (x),y 
      000B1A 1D 00 02         [ 2] 2203         subw x,#CELLL 
      000B1D E7 01            [ 1] 2204         ld (1,x),a 
      000B1F 7F               [ 1] 2205         clr (x)
      000B20 81               [ 4] 2206         ret 
                                   2207 
                                   2208 ;       HERE    ( -- a )
                                   2209 ;       Return  top of  variables
      000B21 0B 0B                 2210         .word      LINK
                           000B23  2211 LINK = . 
      000B23 04                    2212         .byte      4
      000B24 48 45 52 45           2213         .ascii     "HERE"
      000B28                       2214 HERE:
      000B28 90 AE 00 16      [ 2] 2215       	ldw y,#UVP 
      000B2C 90 FE            [ 2] 2216         ldw y,(y)
      000B2E 1D 00 02         [ 2] 2217         subw x,#CELLL 
      000B31 FF               [ 2] 2218         ldw (x),y 
      000B32 81               [ 4] 2219         ret 
                                   2220 
                                   2221 ;       PAD     ( -- a )
                                   2222 ;       Return address of text buffer
                                   2223 ;       above  code dictionary.
      000B33 0B 23                 2224         .word      LINK
                           000B35  2225 LINK = . 
      000B35 03                    2226         .byte      3
      000B36 50 41 44              2227         .ascii     "PAD"
      000B39                       2228 PAD:
      000B39 CD 0B 28         [ 4] 2229         CALL     HERE
      000B3C CD 03 B4         [ 4] 2230         CALL     DOLIT
      000B3F 00 50                 2231         .word      80
      000B41 CC 06 D4         [ 2] 2232         JP     PLUS
                                   2233 
                                   2234 ;       TIB     ( -- a )
                                   2235 ;       Return address of terminal input buffer.
      000B44 0B 35                 2236         .word      LINK
                           000B46  2237 LINK = . 
      000B46 03                    2238         .byte      3
      000B47 54 49 42              2239         .ascii     "TIB"
      000B4A                       2240 TIB:
      000B4A CD 05 C4         [ 4] 2241         CALL     NTIB
      000B4D CD 09 A3         [ 4] 2242         CALL     CELLP
      000B50 CC 04 32         [ 2] 2243         JP     AT
                                   2244 
                                   2245 ;       @EXECUTE        ( a -- )
                                   2246 ;       Execute vector stored in address a.
      000B53 0B 46                 2247         .word      LINK
                           000B55  2248 LINK = . 
      000B55 08                    2249         .byte      8
      000B56 40 45 58 45 43 55 54  2250         .ascii     "@EXECUTE"
             45
      000B5E                       2251 ATEXE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000B5E CD 04 32         [ 4] 2252         CALL     AT
      000B61 CD 06 83         [ 4] 2253         CALL     QDUP    ;?address or zero
      000B64 CD 03 E7         [ 4] 2254         CALL     QBRAN
      000B67 0B 6C                 2255         .word      EXE1
      000B69 CD 04 0E         [ 4] 2256         CALL     EXECU   ;execute if non-zero
      000B6C 81               [ 4] 2257 EXE1:   RET     ;do nothing if zero
                                   2258 
                                   2259 ;       CMOVE   ( b1 b2 u -- )
                                   2260 ;       Copy u bytes from b1 to b2.
      000B6D 0B 55                 2261         .word      LINK
                           000B6F  2262 LINK = . 
      000B6F 05                    2263         .byte      5
      000B70 43 4D 4F 56 45        2264         .ascii     "CMOVE"
      000B75                       2265 CMOVE:
      000B75 CD 04 A2         [ 4] 2266         CALL	TOR
      000B78 CD 03 FE         [ 4] 2267         CALL	BRAN
      000B7B 0B 95                 2268         .word	CMOV2
      000B7D CD 04 A2         [ 4] 2269 CMOV1:	CALL	TOR
      000B80 CD 04 D9         [ 4] 2270         CALL	DUPP
      000B83 CD 04 50         [ 4] 2271         CALL	CAT
      000B86 CD 04 96         [ 4] 2272         CALL	RAT
      000B89 CD 04 3F         [ 4] 2273         CALL	CSTOR
      000B8C CD 09 CE         [ 4] 2274         CALL	ONEP
      000B8F CD 04 83         [ 4] 2275         CALL	RFROM
      000B92 CD 09 CE         [ 4] 2276         CALL	ONEP
      000B95 CD 03 C8         [ 4] 2277 CMOV2:	CALL	DONXT
      000B98 0B 7D                 2278         .word	CMOV1
      000B9A CC 06 B4         [ 2] 2279         JP	DDROP
                                   2280 
                                   2281 ;       FILL    ( b u c -- )
                                   2282 ;       Fill u bytes of character c
                                   2283 ;       to area beginning at b.
      000B9D 0B 6F                 2284         .word       LINK
                           000B9F  2285 LINK = . 
      000B9F 04                    2286         .byte       4
      000BA0 46 49 4C 4C           2287         .ascii     "FILL"
      000BA4                       2288 FILL:
      000BA4 90 93            [ 1] 2289         ldw y,x 
      000BA6 90 E6 01         [ 1] 2290         ld a,(1,y) ; c 
      000BA9 1C 00 02         [ 2] 2291         addw x,#CELLL ; drop c 
      000BAC 90 93            [ 1] 2292         ldw y,x 
      000BAE 90 FE            [ 2] 2293         ldw y,(y) ; count
      000BB0 90 89            [ 2] 2294         pushw y 
      000BB2 1C 00 02         [ 2] 2295         addw x,#CELLL ; drop u 
      000BB5 90 93            [ 1] 2296         ldw y,x 
      000BB7 1C 00 02         [ 2] 2297         addw x,#CELLL ; drop b 
      000BBA 90 FE            [ 2] 2298         ldw y,(y) ; address
      000BBC 90 BF 24         [ 2] 2299         ldw YTEMP,y
      000BBF 90 85            [ 2] 2300         popw y ; count 
      000BC1                       2301 FILL1:  
      000BC1 92 C7 24         [ 4] 2302         ld [YTEMP],a 
      000BC4 3C 25            [ 1] 2303         inc YTEMP+1
      000BC6 24 02            [ 1] 2304         jrnc FILL2 
      000BC8 3C 24            [ 1] 2305         inc YTEMP
      000BCA                       2306 FILL2: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000BCA 90 5A            [ 2] 2307         decw y ; count 
      000BCC 26 F3            [ 1] 2308         jrne FILL1  
      000BCE 81               [ 4] 2309         ret 
                                   2310 
                                   2311 ;       ERASE   ( b u -- )
                                   2312 ;       Erase u bytes beginning at b.
      000BCF 0B 9F                 2313         .word      LINK
                           000BD1  2314 LINK = . 
      000BD1 05                    2315         .byte      5
      000BD2 45 52 41 53 45        2316         .ascii     "ERASE"
      000BD7                       2317 ERASE:
      000BD7 90 5F            [ 1] 2318         clrw y 
      000BD9 1D 00 02         [ 2] 2319         subw x,#CELLL 
      000BDC FF               [ 2] 2320         ldw (x),y 
      000BDD CC 0B A4         [ 2] 2321         jp FILL 
                                   2322 
                                   2323 
                                   2324 ;       PACK0   ( b u a -- a )
                                   2325 ;       Build a counted string with
                                   2326 ;       u characters from b. Null fill.
      000BE0 0B D1                 2327         .word      LINK
                           000BE2  2328 LINK = . 
      000BE2 05                    2329         .byte      5
      000BE3 50 41 43 4B 30        2330         .ascii     "PACK0"
      000BE8                       2331 PACKS:
      000BE8 CD 04 D9         [ 4] 2332         CALL     DUPP
      000BEB CD 04 A2         [ 4] 2333         CALL     TOR     ;strings only on cell boundary
      000BEE CD 06 BF         [ 4] 2334         CALL     DDUP
      000BF1 CD 04 3F         [ 4] 2335         CALL     CSTOR
      000BF4 CD 09 CE         [ 4] 2336         CALL     ONEP ;save count
      000BF7 CD 04 E9         [ 4] 2337         CALL     SWAPP
      000BFA CD 0B 75         [ 4] 2338         CALL     CMOVE
      000BFD CD 04 83         [ 4] 2339         CALL     RFROM
      000C00 81               [ 4] 2340         RET
                                   2341 
                                   2342 ;; Numeric output, single precision
                                   2343 
                                   2344 ;       DIGIT   ( u -- c )
                                   2345 ;       Convert digit u to a character.
      000C01 0B E2                 2346         .word      LINK
                           000C03  2347 LINK = . 
      000C03 05                    2348         .byte      5
      000C04 44 49 47 49 54        2349         .ascii     "DIGIT"
      000C09                       2350 DIGIT:
      000C09 CD 03 B4         [ 4] 2351         CALL	DOLIT
      000C0C 00 09                 2352         .word	9
      000C0E CD 05 03         [ 4] 2353         CALL	OVER
      000C11 CD 07 B2         [ 4] 2354         CALL	LESS
      000C14 CD 03 B4         [ 4] 2355         CALL	DOLIT
      000C17 00 07                 2356         .word	7
      000C19 CD 05 25         [ 4] 2357         CALL	ANDD
      000C1C CD 06 D4         [ 4] 2358         CALL	PLUS
      000C1F CD 03 B4         [ 4] 2359         CALL	DOLIT
      000C22 00 30                 2360         .word	48	;'0'
      000C24 CC 06 D4         [ 2] 2361         JP	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2362 
                                   2363 ;       EXTRACT ( n base -- n c )
                                   2364 ;       Extract least significant digit from n.
      000C27 0C 03                 2365         .word      LINK
                           000C29  2366 LINK = . 
      000C29 07                    2367         .byte      7
      000C2A 45 58 54 52 41 43 54  2368         .ascii     "EXTRACT"
      000C31                       2369 EXTRC:
      000C31 CD 0A 3A         [ 4] 2370         CALL     ZERO
      000C34 CD 04 E9         [ 4] 2371         CALL     SWAPP
      000C37 CD 08 2A         [ 4] 2372         CALL     UMMOD
      000C3A CD 04 E9         [ 4] 2373         CALL     SWAPP
      000C3D CC 0C 09         [ 2] 2374         JP     DIGIT
                                   2375 
                                   2376 ;       <#      ( -- )
                                   2377 ;       Initiate  numeric output process.
      000C40 0C 29                 2378         .word      LINK
                           000C42  2379 LINK = . 
      000C42 02                    2380         .byte      2
      000C43 3C 23                 2381         .ascii     "<#"
      000C45                       2382 BDIGS:
      000C45 CD 0B 39         [ 4] 2383         CALL     PAD
      000C48 CD 06 06         [ 4] 2384         CALL     HLD
      000C4B CC 04 1B         [ 2] 2385         JP     STORE
                                   2386 
                                   2387 ;       HOLD    ( c -- )
                                   2388 ;       Insert a character into output string.
      000C4E 0C 42                 2389         .word      LINK
                           000C50  2390 LINK = . 
      000C50 04                    2391         .byte      4
      000C51 48 4F 4C 44           2392         .ascii     "HOLD"
      000C55                       2393 HOLD:
      000C55 CD 06 06         [ 4] 2394         CALL     HLD
      000C58 CD 04 32         [ 4] 2395         CALL     AT
      000C5B CD 09 DB         [ 4] 2396         CALL     ONEM
      000C5E CD 04 D9         [ 4] 2397         CALL     DUPP
      000C61 CD 06 06         [ 4] 2398         CALL     HLD
      000C64 CD 04 1B         [ 4] 2399         CALL     STORE
      000C67 CC 04 3F         [ 2] 2400         JP     CSTOR
                                   2401 
                                   2402 ;       #       ( u -- u )
                                   2403 ;       Extract one digit from u and
                                   2404 ;       append digit to output string.
      000C6A 0C 50                 2405         .word      LINK
                           000C6C  2406 LINK = . 
      000C6C 01                    2407         .byte      1
      000C6D 23                    2408         .ascii     "#"
      000C6E                       2409 DIG:
      000C6E CD 05 96         [ 4] 2410         CALL     BASE
      000C71 CD 04 32         [ 4] 2411         CALL     AT
      000C74 CD 0C 31         [ 4] 2412         CALL     EXTRC
      000C77 CC 0C 55         [ 2] 2413         JP     HOLD
                                   2414 
                                   2415 ;       #S      ( u -- 0 )
                                   2416 ;       Convert u until all digits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2417 ;       are added to output string.
      000C7A 0C 6C                 2418         .word      LINK
                           000C7C  2419 LINK = . 
      000C7C 02                    2420         .byte      2
      000C7D 23 53                 2421         .ascii     "#S"
      000C7F                       2422 DIGS:
      000C7F CD 0C 6E         [ 4] 2423 DIGS1:  CALL     DIG
      000C82 CD 04 D9         [ 4] 2424         CALL     DUPP
      000C85 CD 03 E7         [ 4] 2425         CALL     QBRAN
      000C88 0C 8C                 2426         .word      DIGS2
      000C8A 20 F3            [ 2] 2427         JRA     DIGS1
      000C8C 81               [ 4] 2428 DIGS2:  RET
                                   2429 
                                   2430 ;       SIGN    ( n -- )
                                   2431 ;       Add a minus sign to
                                   2432 ;       numeric output string.
      000C8D 0C 7C                 2433         .word      LINK
                           000C8F  2434 LINK = . 
      000C8F 04                    2435         .byte      4
      000C90 53 49 47 4E           2436         .ascii     "SIGN"
      000C94                       2437 SIGN:
      000C94 CD 05 12         [ 4] 2438         CALL     ZLESS
      000C97 CD 03 E7         [ 4] 2439         CALL     QBRAN
      000C9A 0C A4                 2440         .word      SIGN1
      000C9C CD 03 B4         [ 4] 2441         CALL     DOLIT
      000C9F 00 2D                 2442         .word      45	;"-"
      000CA1 CC 0C 55         [ 2] 2443         JP     HOLD
      000CA4 81               [ 4] 2444 SIGN1:  RET
                                   2445 
                                   2446 ;       #>      ( w -- b u )
                                   2447 ;       Prepare output string.
      000CA5 0C 8F                 2448         .word      LINK
                           000CA7  2449 LINK = . 
      000CA7 02                    2450         .byte      2
      000CA8 23 3E                 2451         .ascii     "#>"
      000CAA                       2452 EDIGS:
      000CAA CD 04 CF         [ 4] 2453         CALL     DROP
      000CAD CD 06 06         [ 4] 2454         CALL     HLD
      000CB0 CD 04 32         [ 4] 2455         CALL     AT
      000CB3 CD 0B 39         [ 4] 2456         CALL     PAD
      000CB6 CD 05 03         [ 4] 2457         CALL     OVER
      000CB9 CC 07 4D         [ 2] 2458         JP     SUBB
                                   2459 
                                   2460 ;       str     ( w -- b u )
                                   2461 ;       Convert a signed integer
                                   2462 ;       to a numeric string.
      000CBC 0C A7                 2463         .word      LINK
                           000CBE  2464 LINK = . 
      000CBE 03                    2465         .byte      3
      000CBF 53 54 52              2466         .ascii     "STR"
      000CC2                       2467 STR:
      000CC2 CD 04 D9         [ 4] 2468         CALL     DUPP
      000CC5 CD 04 A2         [ 4] 2469         CALL     TOR
      000CC8 CD 07 67         [ 4] 2470         CALL     ABSS
      000CCB CD 0C 45         [ 4] 2471         CALL     BDIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CCE CD 0C 7F         [ 4] 2472         CALL     DIGS
      000CD1 CD 04 83         [ 4] 2473         CALL     RFROM
      000CD4 CD 0C 94         [ 4] 2474         CALL     SIGN
      000CD7 CC 0C AA         [ 2] 2475         JP     EDIGS
                                   2476 
                                   2477 ;       HEX     ( -- )
                                   2478 ;       Use radix 16 as base for
                                   2479 ;       numeric conversions.
      000CDA 0C BE                 2480         .word      LINK
                           000CDC  2481 LINK = . 
      000CDC 03                    2482         .byte      3
      000CDD 48 45 58              2483         .ascii     "HEX"
      000CE0                       2484 HEX:
      000CE0 CD 03 B4         [ 4] 2485         CALL     DOLIT
      000CE3 00 10                 2486         .word      16
      000CE5 CD 05 96         [ 4] 2487         CALL     BASE
      000CE8 CC 04 1B         [ 2] 2488         JP     STORE
                                   2489 
                                   2490 ;       DECIMAL ( -- )
                                   2491 ;       Use radix 10 as base
                                   2492 ;       for numeric conversions.
      000CEB 0C DC                 2493         .word      LINK
                           000CED  2494 LINK = . 
      000CED 07                    2495         .byte      7
      000CEE 44 45 43 49 4D 41 4C  2496         .ascii     "DECIMAL"
      000CF5                       2497 DECIM:
      000CF5 CD 03 B4         [ 4] 2498         CALL     DOLIT
      000CF8 00 0A                 2499         .word      10
      000CFA CD 05 96         [ 4] 2500         CALL     BASE
      000CFD CC 04 1B         [ 2] 2501         JP     STORE
                                   2502 
                                   2503 ;; Numeric input, single precision
                                   2504 
                                   2505 ;       DIGIT?  ( c base -- u t )
                                   2506 ;       Convert a character to its numeric
                                   2507 ;       value. A flag indicates success.
      000D00 0C ED                 2508         .word      LINK
                           000D02  2509 LINK = . 
      000D02 06                    2510         .byte       6
      000D03 44 49 47 49 54 3F     2511         .ascii     "DIGIT?"
      000D09                       2512 DIGTQ:
      000D09 CD 04 A2         [ 4] 2513         CALL     TOR
      000D0C CD 03 B4         [ 4] 2514         CALL     DOLIT
      000D0F 00 30                 2515         .word     48	; "0"
      000D11 CD 07 4D         [ 4] 2516         CALL     SUBB
      000D14 CD 03 B4         [ 4] 2517         CALL     DOLIT
      000D17 00 09                 2518         .word      9
      000D19 CD 05 03         [ 4] 2519         CALL     OVER
      000D1C CD 07 B2         [ 4] 2520         CALL     LESS
      000D1F CD 03 E7         [ 4] 2521         CALL     QBRAN
      000D22 0D 3A                 2522         .word      DGTQ1
      000D24 CD 03 B4         [ 4] 2523         CALL     DOLIT
      000D27 00 07                 2524         .word      7
      000D29 CD 07 4D         [ 4] 2525         CALL     SUBB
      000D2C CD 04 D9         [ 4] 2526         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D2F CD 03 B4         [ 4] 2527         CALL     DOLIT
      000D32 00 0A                 2528         .word      10
      000D34 CD 07 B2         [ 4] 2529         CALL     LESS
      000D37 CD 05 39         [ 4] 2530         CALL     ORR
      000D3A CD 04 D9         [ 4] 2531 DGTQ1:  CALL     DUPP
      000D3D CD 04 83         [ 4] 2532         CALL     RFROM
      000D40 CC 07 94         [ 2] 2533         JP     ULESS
                                   2534 
                                   2535 ;       NUMBER? ( a -- n T | a F )
                                   2536 ;       Convert a number string to
                                   2537 ;       integer. Push a flag on tos.
      000D43 0D 02                 2538         .word      LINK
                           000D45  2539 LINK = . 
      000D45 07                    2540         .byte      7
      000D46 4E 55 4D 42 45 52 3F  2541         .ascii     "NUMBER?"
      000D4D                       2542 NUMBQ:
      000D4D CD 05 96         [ 4] 2543         CALL     BASE
      000D50 CD 04 32         [ 4] 2544         CALL     AT
      000D53 CD 04 A2         [ 4] 2545         CALL     TOR
      000D56 CD 0A 3A         [ 4] 2546         CALL     ZERO
      000D59 CD 05 03         [ 4] 2547         CALL     OVER
      000D5C CD 0B 11         [ 4] 2548         CALL     COUNT
      000D5F CD 05 03         [ 4] 2549         CALL     OVER
      000D62 CD 04 50         [ 4] 2550         CALL     CAT
      000D65 CD 03 B4         [ 4] 2551         CALL     DOLIT
      000D68 00 24                 2552         .word     36	; "0x"
      000D6A CD 07 75         [ 4] 2553         CALL     EQUAL
      000D6D CD 03 E7         [ 4] 2554         CALL     QBRAN
      000D70 0D 81                 2555         .word      NUMQ1
      000D72 CD 0C E0         [ 4] 2556         CALL     HEX
      000D75 CD 04 E9         [ 4] 2557         CALL     SWAPP
      000D78 CD 09 CE         [ 4] 2558         CALL     ONEP
      000D7B CD 04 E9         [ 4] 2559         CALL     SWAPP
      000D7E CD 09 DB         [ 4] 2560         CALL     ONEM
      000D81 CD 05 03         [ 4] 2561 NUMQ1:  CALL     OVER
      000D84 CD 04 50         [ 4] 2562         CALL     CAT
      000D87 CD 03 B4         [ 4] 2563         CALL     DOLIT
      000D8A 00 2D                 2564         .word     45	; "-"
      000D8C CD 07 75         [ 4] 2565         CALL     EQUAL
      000D8F CD 04 A2         [ 4] 2566         CALL     TOR
      000D92 CD 04 E9         [ 4] 2567         CALL     SWAPP
      000D95 CD 04 96         [ 4] 2568         CALL     RAT
      000D98 CD 07 4D         [ 4] 2569         CALL     SUBB
      000D9B CD 04 E9         [ 4] 2570         CALL     SWAPP
      000D9E CD 04 96         [ 4] 2571         CALL     RAT
      000DA1 CD 06 D4         [ 4] 2572         CALL     PLUS
      000DA4 CD 06 83         [ 4] 2573         CALL     QDUP
      000DA7 CD 03 E7         [ 4] 2574         CALL     QBRAN
      000DAA 0E 0B                 2575         .word      NUMQ6
      000DAC CD 09 DB         [ 4] 2576         CALL     ONEM
      000DAF CD 04 A2         [ 4] 2577         CALL     TOR
      000DB2 CD 04 D9         [ 4] 2578 NUMQ2:  CALL     DUPP
      000DB5 CD 04 A2         [ 4] 2579         CALL     TOR
      000DB8 CD 04 50         [ 4] 2580         CALL     CAT
      000DBB CD 05 96         [ 4] 2581         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000DBE CD 04 32         [ 4] 2582         CALL     AT
      000DC1 CD 0D 09         [ 4] 2583         CALL     DIGTQ
      000DC4 CD 03 E7         [ 4] 2584         CALL     QBRAN
      000DC7 0D F9                 2585         .word      NUMQ4
      000DC9 CD 04 E9         [ 4] 2586         CALL     SWAPP
      000DCC CD 05 96         [ 4] 2587         CALL     BASE
      000DCF CD 04 32         [ 4] 2588         CALL     AT
      000DD2 CD 09 4D         [ 4] 2589         CALL     STAR
      000DD5 CD 06 D4         [ 4] 2590         CALL     PLUS
      000DD8 CD 04 83         [ 4] 2591         CALL     RFROM
      000DDB CD 09 CE         [ 4] 2592         CALL     ONEP
      000DDE CD 03 C8         [ 4] 2593         CALL     DONXT
      000DE1 0D B2                 2594         .word      NUMQ2
      000DE3 CD 04 96         [ 4] 2595         CALL     RAT
      000DE6 CD 04 E9         [ 4] 2596         CALL     SWAPP
      000DE9 CD 04 CF         [ 4] 2597         CALL     DROP
      000DEC CD 03 E7         [ 4] 2598         CALL     QBRAN
      000DEF 0D F4                 2599         .word      NUMQ3
      000DF1 CD 06 FF         [ 4] 2600         CALL     NEGAT
      000DF4 CD 04 E9         [ 4] 2601 NUMQ3:  CALL     SWAPP
      000DF7 20 0F            [ 2] 2602         JRA     NUMQ5
      000DF9 CD 04 83         [ 4] 2603 NUMQ4:  CALL     RFROM
      000DFC CD 04 83         [ 4] 2604         CALL     RFROM
      000DFF CD 06 B4         [ 4] 2605         CALL     DDROP
      000E02 CD 06 B4         [ 4] 2606         CALL     DDROP
      000E05 CD 0A 3A         [ 4] 2607         CALL     ZERO
      000E08 CD 04 D9         [ 4] 2608 NUMQ5:  CALL     DUPP
      000E0B CD 04 83         [ 4] 2609 NUMQ6:  CALL     RFROM
      000E0E CD 06 B4         [ 4] 2610         CALL     DDROP
      000E11 CD 04 83         [ 4] 2611         CALL     RFROM
      000E14 CD 05 96         [ 4] 2612         CALL     BASE
      000E17 CC 04 1B         [ 2] 2613         JP     STORE
                                   2614 
                                   2615 ;; Basic I/O
                                   2616 
                                   2617 ;       KEY     ( -- c )
                                   2618 ;       Wait for and return an
                                   2619 ;       input character.
      000E1A 0D 45                 2620         .word      LINK
                           000E1C  2621 LINK = . 
      000E1C 03                    2622         .byte      3
      000E1D 4B 45 59              2623         .ascii     "KEY"
      000E20                       2624 KEY:
      000E20 72 0B 52 40 FB   [ 2] 2625         btjf UART_SR,#UART_SR_RXNE,. 
      000E25 C6 52 41         [ 1] 2626         ld a,UART_DR 
      000E28 1D 00 02         [ 2] 2627         subw x,#CELLL 
      000E2B E7 01            [ 1] 2628         ld (1,x),a 
      000E2D 7F               [ 1] 2629         clr (x)
      000E2E 81               [ 4] 2630         ret 
                                   2631 
                                   2632 ;       NUF?    ( -- t )
                                   2633 ;       Return false if no input,
                                   2634 ;       else pause and if CR return true.
      000E2F 0E 1C                 2635         .word      LINK
                           000E31  2636 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E31 04                    2637         .byte      4
      000E32 4E 55 46 3F           2638         .ascii     "NUF?"
      000E36                       2639 NUFQ:
      000E36 CD 03 80         [ 4] 2640         CALL     QKEY
      000E39 CD 04 D9         [ 4] 2641         CALL     DUPP
      000E3C CD 03 E7         [ 4] 2642         CALL     QBRAN
      000E3F 0E 4F                 2643         .word    NUFQ1
      000E41 CD 06 B4         [ 4] 2644         CALL     DDROP
      000E44 CD 0E 20         [ 4] 2645         CALL     KEY
      000E47 CD 03 B4         [ 4] 2646         CALL     DOLIT
      000E4A 00 0D                 2647         .word      CRR
      000E4C CC 07 75         [ 2] 2648         JP     EQUAL
      000E4F 81               [ 4] 2649 NUFQ1:  RET
                                   2650 
                                   2651 ;       SPACE   ( -- )
                                   2652 ;       Send  blank character to
                                   2653 ;       output device.
      000E50 0E 31                 2654         .word      LINK
                           000E52  2655 LINK = . 
      000E52 05                    2656         .byte      5
      000E53 53 50 41 43 45        2657         .ascii     "SPACE"
      000E58                       2658 SPACE:
      000E58 CD 0A 2D         [ 4] 2659         CALL     BLANK
      000E5B CC 03 9E         [ 2] 2660         JP     EMIT
                                   2661 
                                   2662 ;       SPACES  ( +n -- )
                                   2663 ;       Send n spaces to output device.
      000E5E 0E 52                 2664         .word      LINK
                           000E60  2665 LINK = . 
      000E60 06                    2666         .byte      6
      000E61 53 50 41 43 45 53     2667         .ascii     "SPACES"
      000E67                       2668 SPACS:
      000E67 CD 0A 3A         [ 4] 2669         CALL     ZERO
      000E6A CD 07 D2         [ 4] 2670         CALL     MAX
      000E6D CD 04 A2         [ 4] 2671         CALL     TOR
      000E70 20 03            [ 2] 2672         JRA      CHAR2
      000E72 CD 0E 58         [ 4] 2673 CHAR1:  CALL     SPACE
      000E75 CD 03 C8         [ 4] 2674 CHAR2:  CALL     DONXT
      000E78 0E 72                 2675         .word    CHAR1
      000E7A 81               [ 4] 2676         RET
                                   2677 
                                   2678 ;       TYPE    ( b u -- )
                                   2679 ;       Output u characters from b.
      000E7B 0E 60                 2680         .word      LINK
                           000E7D  2681 LINK = . 
      000E7D 04                    2682         .byte      4
      000E7E 54 59 50 45           2683         .ascii     "TYPE"
      000E82                       2684 TYPES:
      000E82 CD 04 A2         [ 4] 2685         CALL     TOR
      000E85 20 0C            [ 2] 2686         JRA     TYPE2
      000E87 CD 04 D9         [ 4] 2687 TYPE1:  CALL     DUPP
      000E8A CD 04 50         [ 4] 2688         CALL     CAT
      000E8D CD 03 9E         [ 4] 2689         CALL     EMIT
      000E90 CD 09 CE         [ 4] 2690         CALL     ONEP
      000E93 CD 03 C8         [ 4] 2691 TYPE2:  CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E96 0E 87                 2692         .word      TYPE1
      000E98 CC 04 CF         [ 2] 2693         JP     DROP
                                   2694 
                                   2695 ;       CR      ( -- )
                                   2696 ;       Output a carriage return
                                   2697 ;       and a line feed.
      000E9B 0E 7D                 2698         .word      LINK
                           000E9D  2699 LINK = . 
      000E9D 02                    2700         .byte      2
      000E9E 43 52                 2701         .ascii     "CR"
      000EA0                       2702 CR:
      000EA0 CD 03 B4         [ 4] 2703         CALL     DOLIT
      000EA3 00 0D                 2704         .word      CRR
      000EA5 CD 03 9E         [ 4] 2705         CALL     EMIT
      000EA8 CD 03 B4         [ 4] 2706         CALL     DOLIT
      000EAB 00 0A                 2707         .word      LF
      000EAD CC 03 9E         [ 2] 2708         JP     EMIT
                                   2709 
                                   2710 ;       do$     ( -- a )
                                   2711 ;       Return  address of a compiled
                                   2712 ;       string.
      000EB0 0E 9D                 2713         .word      LINK
                           000EB2  2714 LINK = . 
      000EB2 43                    2715 	.byte      COMPO+3
      000EB3 44 4F 24              2716         .ascii     "DO$"
      000EB6                       2717 DOSTR:
      000EB6 CD 04 83         [ 4] 2718         CALL     RFROM
      000EB9 CD 04 96         [ 4] 2719         CALL     RAT
      000EBC CD 04 83         [ 4] 2720         CALL     RFROM
      000EBF CD 0B 11         [ 4] 2721         CALL     COUNT
      000EC2 CD 06 D4         [ 4] 2722         CALL     PLUS
      000EC5 CD 04 A2         [ 4] 2723         CALL     TOR
      000EC8 CD 04 E9         [ 4] 2724         CALL     SWAPP
      000ECB CD 04 A2         [ 4] 2725         CALL     TOR
      000ECE 81               [ 4] 2726         RET
                                   2727 
                                   2728 ;       $"|     ( -- a )
                                   2729 ;       Run time routine compiled by $".
                                   2730 ;       Return address of a compiled string.
      000ECF 0E B2                 2731         .word      LINK
                           000ED1  2732 LINK = . 
      000ED1 43                    2733 	.byte      COMPO+3
      000ED2 24 22 7C              2734         .byte     '$','"','|'
      000ED5                       2735 STRQP:
      000ED5 CD 0E B6         [ 4] 2736         CALL     DOSTR
      000ED8 81               [ 4] 2737         RET
                                   2738 
                                   2739 ;       ."|     ( -- )
                                   2740 ;       Run time routine of ." .
                                   2741 ;       Output a compiled string.
      000ED9 0E D1                 2742         .word      LINK
                           000EDB  2743 LINK = . 
      000EDB 43                    2744 	.byte      COMPO+3
      000EDC 2E 22 7C              2745         .byte     '.','"','|'
      000EDF                       2746 DOTQP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000EDF CD 0E B6         [ 4] 2747         CALL     DOSTR
      000EE2 CD 0B 11         [ 4] 2748         CALL     COUNT
      000EE5 CC 0E 82         [ 2] 2749         JP     TYPES
                                   2750 
                                   2751 ;       .R      ( n +n -- )
                                   2752 ;       Display an integer in a field
                                   2753 ;       of n columns, right justified.
      000EE8 0E DB                 2754         .word      LINK
                           000EEA  2755 LINK = . 
      000EEA 02                    2756         .byte      2
      000EEB 2E 52                 2757         .ascii     ".R"
      000EED                       2758 DOTR:
      000EED CD 04 A2         [ 4] 2759         CALL     TOR
      000EF0 CD 0C C2         [ 4] 2760         CALL     STR
      000EF3 CD 04 83         [ 4] 2761         CALL     RFROM
      000EF6 CD 05 03         [ 4] 2762         CALL     OVER
      000EF9 CD 07 4D         [ 4] 2763         CALL     SUBB
      000EFC CD 0E 67         [ 4] 2764         CALL     SPACS
      000EFF CC 0E 82         [ 2] 2765         JP     TYPES
                                   2766 
                                   2767 ;       U.R     ( u +n -- )
                                   2768 ;       Display an unsigned integer
                                   2769 ;       in n column, right justified.
      000F02 0E EA                 2770         .word      LINK
                           000F04  2771 LINK = . 
      000F04 03                    2772         .byte      3
      000F05 55 2E 52              2773         .ascii     "U.R"
      000F08                       2774 UDOTR:
      000F08 CD 04 A2         [ 4] 2775         CALL     TOR
      000F0B CD 0C 45         [ 4] 2776         CALL     BDIGS
      000F0E CD 0C 7F         [ 4] 2777         CALL     DIGS
      000F11 CD 0C AA         [ 4] 2778         CALL     EDIGS
      000F14 CD 04 83         [ 4] 2779         CALL     RFROM
      000F17 CD 05 03         [ 4] 2780         CALL     OVER
      000F1A CD 07 4D         [ 4] 2781         CALL     SUBB
      000F1D CD 0E 67         [ 4] 2782         CALL     SPACS
      000F20 CC 0E 82         [ 2] 2783         JP     TYPES
                                   2784 
                                   2785 ;       U.      ( u -- )
                                   2786 ;       Display an unsigned integer
                                   2787 ;       in free format.
      000F23 0F 04                 2788         .word      LINK
                           000F25  2789 LINK = . 
      000F25 02                    2790         .byte      2
      000F26 55 2E                 2791         .ascii     "U."
      000F28                       2792 UDOT:
      000F28 CD 0C 45         [ 4] 2793         CALL     BDIGS
      000F2B CD 0C 7F         [ 4] 2794         CALL     DIGS
      000F2E CD 0C AA         [ 4] 2795         CALL     EDIGS
      000F31 CD 0E 58         [ 4] 2796         CALL     SPACE
      000F34 CC 0E 82         [ 2] 2797         JP     TYPES
                                   2798 
                                   2799 ;       .       ( w -- )
                                   2800 ;       Display an integer in free
                                   2801 ;       format, preceeded by a space.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F37 0F 25                 2802         .word      LINK
                           000F39  2803 LINK = . 
      000F39 01                    2804         .byte      1
      000F3A 2E                    2805         .ascii     "."
      000F3B                       2806 DOT:
      000F3B CD 05 96         [ 4] 2807         CALL     BASE
      000F3E CD 04 32         [ 4] 2808         CALL     AT
      000F41 CD 03 B4         [ 4] 2809         CALL     DOLIT
      000F44 00 0A                 2810         .word      10
      000F46 CD 05 4E         [ 4] 2811         CALL     XORR    ;?decimal
      000F49 CD 03 E7         [ 4] 2812         CALL     QBRAN
      000F4C 0F 51                 2813         .word      DOT1
      000F4E CC 0F 28         [ 2] 2814         JP     UDOT
      000F51 CD 0C C2         [ 4] 2815 DOT1:   CALL     STR
      000F54 CD 0E 58         [ 4] 2816         CALL     SPACE
      000F57 CC 0E 82         [ 2] 2817         JP     TYPES
                                   2818 
                                   2819 ;       ?       ( a -- )
                                   2820 ;       Display contents in memory cell.
      000F5A 0F 39                 2821         .word      LINK
                                   2822         
                           000F5C  2823 LINK = . 
      000F5C 01                    2824         .byte      1
      000F5D 3F                    2825         .ascii     "?"
      000F5E                       2826 QUEST:
      000F5E CD 04 32         [ 4] 2827         CALL     AT
      000F61 CC 0F 3B         [ 2] 2828         JP     DOT
                                   2829 
                                   2830 ;; Parsing
                                   2831 
                                   2832 ;       parse   ( b u c -- b u delta ; <string> )
                                   2833 ;       Scan string delimited by c.
                                   2834 ;       Return found string and its offset.
      000F64 0F 5C                 2835         .word      LINK
                           000F66  2836 LINK = . 
      000F66 05                    2837         .byte      5
      000F67 70 61 72 73 65        2838         .ascii     "parse"
      000F6C                       2839 PARS:
      000F6C CD 05 A5         [ 4] 2840         CALL     TEMP
      000F6F CD 04 1B         [ 4] 2841         CALL     STORE
      000F72 CD 05 03         [ 4] 2842         CALL     OVER
      000F75 CD 04 A2         [ 4] 2843         CALL     TOR
      000F78 CD 04 D9         [ 4] 2844         CALL     DUPP
      000F7B CD 03 E7         [ 4] 2845         CALL     QBRAN
      000F7E 10 24                 2846         .word    PARS8
      000F80 CD 09 DB         [ 4] 2847         CALL     ONEM
      000F83 CD 05 A5         [ 4] 2848         CALL     TEMP
      000F86 CD 04 32         [ 4] 2849         CALL     AT
      000F89 CD 0A 2D         [ 4] 2850         CALL     BLANK
      000F8C CD 07 75         [ 4] 2851         CALL     EQUAL
      000F8F CD 03 E7         [ 4] 2852         CALL     QBRAN
      000F92 0F C5                 2853         .word      PARS3
      000F94 CD 04 A2         [ 4] 2854         CALL     TOR
      000F97 CD 0A 2D         [ 4] 2855 PARS1:  CALL     BLANK
      000F9A CD 05 03         [ 4] 2856         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F9D CD 04 50         [ 4] 2857         CALL     CAT     ;skip leading blanks ONLY
      000FA0 CD 07 4D         [ 4] 2858         CALL     SUBB
      000FA3 CD 05 12         [ 4] 2859         CALL     ZLESS
      000FA6 CD 06 EE         [ 4] 2860         CALL     INVER
      000FA9 CD 03 E7         [ 4] 2861         CALL     QBRAN
      000FAC 0F C2                 2862         .word      PARS2
      000FAE CD 09 CE         [ 4] 2863         CALL     ONEP
      000FB1 CD 03 C8         [ 4] 2864         CALL     DONXT
      000FB4 0F 97                 2865         .word      PARS1
      000FB6 CD 04 83         [ 4] 2866         CALL     RFROM
      000FB9 CD 04 CF         [ 4] 2867         CALL     DROP
      000FBC CD 0A 3A         [ 4] 2868         CALL     ZERO
      000FBF CC 04 D9         [ 2] 2869         JP     DUPP
      000FC2 CD 04 83         [ 4] 2870 PARS2:  CALL     RFROM
      000FC5 CD 05 03         [ 4] 2871 PARS3:  CALL     OVER
      000FC8 CD 04 E9         [ 4] 2872         CALL     SWAPP
      000FCB CD 04 A2         [ 4] 2873         CALL     TOR
      000FCE CD 05 A5         [ 4] 2874 PARS4:  CALL     TEMP
      000FD1 CD 04 32         [ 4] 2875         CALL     AT
      000FD4 CD 05 03         [ 4] 2876         CALL     OVER
      000FD7 CD 04 50         [ 4] 2877         CALL     CAT
      000FDA CD 07 4D         [ 4] 2878         CALL     SUBB    ;scan for delimiter
      000FDD CD 05 A5         [ 4] 2879         CALL     TEMP
      000FE0 CD 04 32         [ 4] 2880         CALL     AT
      000FE3 CD 0A 2D         [ 4] 2881         CALL     BLANK
      000FE6 CD 07 75         [ 4] 2882         CALL     EQUAL
      000FE9 CD 03 E7         [ 4] 2883         CALL     QBRAN
      000FEC 0F F1                 2884         .word      PARS5
      000FEE CD 05 12         [ 4] 2885         CALL     ZLESS
      000FF1 CD 03 E7         [ 4] 2886 PARS5:  CALL     QBRAN
      000FF4 10 06                 2887         .word      PARS6
      000FF6 CD 09 CE         [ 4] 2888         CALL     ONEP
      000FF9 CD 03 C8         [ 4] 2889         CALL     DONXT
      000FFC 0F CE                 2890         .word      PARS4
      000FFE CD 04 D9         [ 4] 2891         CALL     DUPP
      001001 CD 04 A2         [ 4] 2892         CALL     TOR
      001004 20 0F            [ 2] 2893         JRA     PARS7
      001006 CD 04 83         [ 4] 2894 PARS6:  CALL     RFROM
      001009 CD 04 CF         [ 4] 2895         CALL     DROP
      00100C CD 04 D9         [ 4] 2896         CALL     DUPP
      00100F CD 09 CE         [ 4] 2897         CALL     ONEP
      001012 CD 04 A2         [ 4] 2898         CALL     TOR
      001015 CD 05 03         [ 4] 2899 PARS7:  CALL     OVER
      001018 CD 07 4D         [ 4] 2900         CALL     SUBB
      00101B CD 04 83         [ 4] 2901         CALL     RFROM
      00101E CD 04 83         [ 4] 2902         CALL     RFROM
      001021 CC 07 4D         [ 2] 2903         JP     SUBB
      001024 CD 05 03         [ 4] 2904 PARS8:  CALL     OVER
      001027 CD 04 83         [ 4] 2905         CALL     RFROM
      00102A CC 07 4D         [ 2] 2906         JP     SUBB
                                   2907 
                                   2908 ;       PARSE   ( c -- b u ; <string> )
                                   2909 ;       Scan input stream and return
                                   2910 ;       counted string delimited by c.
      00102D 0F 66                 2911         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                           00102F  2912 LINK = . 
      00102F 05                    2913         .byte      5
      001030 50 41 52 53 45        2914         .ascii     "PARSE"
      001035                       2915 PARSE:
      001035 CD 04 A2         [ 4] 2916         CALL     TOR
      001038 CD 0B 4A         [ 4] 2917         CALL     TIB
      00103B CD 05 B4         [ 4] 2918         CALL     INN
      00103E CD 04 32         [ 4] 2919         CALL     AT
      001041 CD 06 D4         [ 4] 2920         CALL     PLUS    ;current input buffer pointer
      001044 CD 05 C4         [ 4] 2921         CALL     NTIB
      001047 CD 04 32         [ 4] 2922         CALL     AT
      00104A CD 05 B4         [ 4] 2923         CALL     INN
      00104D CD 04 32         [ 4] 2924         CALL     AT
      001050 CD 07 4D         [ 4] 2925         CALL     SUBB    ;remaining count
      001053 CD 04 83         [ 4] 2926         CALL     RFROM
      001056 CD 0F 6C         [ 4] 2927         CALL     PARS
      001059 CD 05 B4         [ 4] 2928         CALL     INN
      00105C CC 0A AA         [ 2] 2929         JP     PSTOR
                                   2930 
                                   2931 ;       .(      ( -- )
                                   2932 ;       Output following string up to next ) .
      00105F 10 2F                 2933         .word      LINK
                           001061  2934 LINK = . 
      001061 82                    2935 	.byte      IMEDD+2
      001062 2E 28                 2936         .ascii     ".("
      001064                       2937 DOTPR:
      001064 CD 03 B4         [ 4] 2938         CALL     DOLIT
      001067 00 29                 2939         .word     41	; ")"
      001069 CD 10 35         [ 4] 2940         CALL     PARSE
      00106C CC 0E 82         [ 2] 2941         JP     TYPES
                                   2942 
                                   2943 ;       (       ( -- )
                                   2944 ;       Ignore following string up to next ).
                                   2945 ;       A comment.
      00106F 10 61                 2946         .word      LINK
                           001071  2947 LINK = . 
      001071 81                    2948 	.byte      IMEDD+1
      001072 28                    2949         .ascii     "("
      001073                       2950 PAREN:
      001073 CD 03 B4         [ 4] 2951         CALL     DOLIT
      001076 00 29                 2952         .word     41	; ")"
      001078 CD 10 35         [ 4] 2953         CALL     PARSE
      00107B CC 06 B4         [ 2] 2954         JP     DDROP
                                   2955 
                                   2956 ;       \       ( -- )
                                   2957 ;       Ignore following text till
                                   2958 ;       end of line.
      00107E 10 71                 2959         .word      LINK
                           001080  2960 LINK = . 
      001080 81                    2961 	.byte      IMEDD+1
      001081 5C                    2962         .ascii     "\"
      001082                       2963 BKSLA:
      001082 90 AE 00 0C      [ 2] 2964         ldw y,#UCTIB ; #TIB  
      001086 90 FE            [ 2] 2965         ldw y,(y)
      001088 90 89            [ 2] 2966         pushw y ; count in TIB 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00108A 90 AE 00 0A      [ 2] 2967         ldw y,#UINN ; >IN 
      00108E 90 BF 24         [ 2] 2968         ldw YTEMP,y
      001091 90 85            [ 2] 2969         popw y 
      001093 91 CF 24         [ 5] 2970         ldw [YTEMP],y
      001096 81               [ 4] 2971         ret 
                                   2972 
                                   2973 ;       WORD    ( c -- a ; <string> )
                                   2974 ;       Parse a word from input stream
                                   2975 ;       and copy it to code dictionary.
      001097 10 80                 2976         .word      LINK
                           001099  2977 LINK = . 
      001099 04                    2978         .byte      4
      00109A 57 4F 52 44           2979         .ascii     "WORD"
      00109E                       2980 WORDD:
      00109E CD 10 35         [ 4] 2981         CALL     PARSE
      0010A1 CD 0B 28         [ 4] 2982         CALL     HERE
      0010A4 CD 09 A3         [ 4] 2983         CALL     CELLP
      0010A7 CC 0B E8         [ 2] 2984         JP     PACKS
                                   2985 
                                   2986 ;       TOKEN   ( -- a ; <string> )
                                   2987 ;       Parse a word from input stream
                                   2988 ;       and copy it to name dictionary.
      0010AA 10 99                 2989         .word      LINK
                           0010AC  2990 LINK = . 
      0010AC 05                    2991         .byte      5
      0010AD 54 4F 4B 45 4E        2992         .ascii     "TOKEN"
      0010B2                       2993 TOKEN:
      0010B2 CD 0A 2D         [ 4] 2994         CALL     BLANK
      0010B5 CC 10 9E         [ 2] 2995         JP     WORDD
                                   2996 
                                   2997 ;; Dictionary search
                                   2998 
                                   2999 ;       NAME>   ( na -- ca )
                                   3000 ;       Return a code address given
                                   3001 ;       a name address.
      0010B8 10 AC                 3002         .word      LINK
                           0010BA  3003 LINK = . 
      0010BA 05                    3004         .byte      5
      0010BB 4E 41 4D 45 3E        3005         .ascii     "NAME>"
      0010C0                       3006 NAMET:
      0010C0 CD 0B 11         [ 4] 3007         CALL     COUNT
      0010C3 CD 03 B4         [ 4] 3008         CALL     DOLIT
      0010C6 00 1F                 3009         .word      31
      0010C8 CD 05 25         [ 4] 3010         CALL     ANDD
      0010CB CC 06 D4         [ 2] 3011         JP     PLUS
                                   3012 
                                   3013 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3014 ;       Compare u cells in two
                                   3015 ;       strings. Return 0 if identical.
      0010CE 10 BA                 3016         .word      LINK
                           0010D0  3017 LINK = . 
      0010D0 05                    3018         .byte       5
      0010D1 53 41 4D 45 3F        3019         .ascii     "SAME?"
      0010D6                       3020 SAMEQ:
      0010D6 CD 09 DB         [ 4] 3021         CALL     ONEM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010D9 CD 04 A2         [ 4] 3022         CALL     TOR
      0010DC 20 29            [ 2] 3023         JRA     SAME2
      0010DE CD 05 03         [ 4] 3024 SAME1:  CALL     OVER
      0010E1 CD 04 96         [ 4] 3025         CALL     RAT
      0010E4 CD 06 D4         [ 4] 3026         CALL     PLUS
      0010E7 CD 04 50         [ 4] 3027         CALL     CAT
      0010EA CD 05 03         [ 4] 3028         CALL     OVER
      0010ED CD 04 96         [ 4] 3029         CALL     RAT
      0010F0 CD 06 D4         [ 4] 3030         CALL     PLUS
      0010F3 CD 04 50         [ 4] 3031         CALL     CAT
      0010F6 CD 07 4D         [ 4] 3032         CALL     SUBB
      0010F9 CD 06 83         [ 4] 3033         CALL     QDUP
      0010FC CD 03 E7         [ 4] 3034         CALL     QBRAN
      0010FF 11 07                 3035         .word      SAME2
      001101 CD 04 83         [ 4] 3036         CALL     RFROM
      001104 CC 04 CF         [ 2] 3037         JP     DROP
      001107 CD 03 C8         [ 4] 3038 SAME2:  CALL     DONXT
      00110A 10 DE                 3039         .word      SAME1
      00110C CC 0A 3A         [ 2] 3040         JP     ZERO
                                   3041 
                                   3042 ;       find    ( a va -- ca na | a F )
                                   3043 ;       Search vocabulary for string.
                                   3044 ;       Return ca and na if succeeded.
      00110F 10 D0                 3045         .word      LINK
                           001111  3046 LINK = . 
      001111 04                    3047         .byte      4
      001112 46 49 4E 44           3048         .ascii     "FIND"
      001116                       3049 FIND:
      001116 CD 04 E9         [ 4] 3050         CALL     SWAPP
      001119 CD 04 D9         [ 4] 3051         CALL     DUPP
      00111C CD 04 50         [ 4] 3052         CALL     CAT
      00111F CD 05 A5         [ 4] 3053         CALL     TEMP
      001122 CD 04 1B         [ 4] 3054         CALL     STORE
      001125 CD 04 D9         [ 4] 3055         CALL     DUPP
      001128 CD 04 32         [ 4] 3056         CALL     AT
      00112B CD 04 A2         [ 4] 3057         CALL     TOR
      00112E CD 09 A3         [ 4] 3058         CALL     CELLP
      001131 CD 04 E9         [ 4] 3059         CALL     SWAPP
      001134 CD 04 32         [ 4] 3060 FIND1:  CALL     AT
      001137 CD 04 D9         [ 4] 3061         CALL     DUPP
      00113A CD 03 E7         [ 4] 3062         CALL     QBRAN
      00113D 11 73                 3063         .word      FIND6
      00113F CD 04 D9         [ 4] 3064         CALL     DUPP
      001142 CD 04 32         [ 4] 3065         CALL     AT
      001145 CD 03 B4         [ 4] 3066         CALL     DOLIT
      001148 1F 7F                 3067         .word      MASKK
      00114A CD 05 25         [ 4] 3068         CALL     ANDD
      00114D CD 04 96         [ 4] 3069         CALL     RAT
      001150 CD 05 4E         [ 4] 3070         CALL     XORR
      001153 CD 03 E7         [ 4] 3071         CALL     QBRAN
      001156 11 62                 3072         .word      FIND2
      001158 CD 09 A3         [ 4] 3073         CALL     CELLP
      00115B CD 03 B4         [ 4] 3074         CALL     DOLIT
      00115E FF FF                 3075         .word     0xFFFF
      001160 20 0C            [ 2] 3076         JRA     FIND3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001162 CD 09 A3         [ 4] 3077 FIND2:  CALL     CELLP
      001165 CD 05 A5         [ 4] 3078         CALL     TEMP
      001168 CD 04 32         [ 4] 3079         CALL     AT
      00116B CD 10 D6         [ 4] 3080         CALL     SAMEQ
      00116E CD 03 FE         [ 4] 3081 FIND3:  CALL     BRAN
      001171 11 82                 3082         .word      FIND4
      001173 CD 04 83         [ 4] 3083 FIND6:  CALL     RFROM
      001176 CD 04 CF         [ 4] 3084         CALL     DROP
      001179 CD 04 E9         [ 4] 3085         CALL     SWAPP
      00117C CD 09 B2         [ 4] 3086         CALL     CELLM
      00117F CC 04 E9         [ 2] 3087         JP     SWAPP
      001182 CD 03 E7         [ 4] 3088 FIND4:  CALL     QBRAN
      001185 11 8F                 3089         .word      FIND5
      001187 CD 09 B2         [ 4] 3090         CALL     CELLM
      00118A CD 09 B2         [ 4] 3091         CALL     CELLM
      00118D 20 A5            [ 2] 3092         JRA     FIND1
      00118F CD 04 83         [ 4] 3093 FIND5:  CALL     RFROM
      001192 CD 04 CF         [ 4] 3094         CALL     DROP
      001195 CD 04 E9         [ 4] 3095         CALL     SWAPP
      001198 CD 04 CF         [ 4] 3096         CALL     DROP
      00119B CD 09 B2         [ 4] 3097         CALL     CELLM
      00119E CD 04 D9         [ 4] 3098         CALL     DUPP
      0011A1 CD 10 C0         [ 4] 3099         CALL     NAMET
      0011A4 CC 04 E9         [ 2] 3100         JP     SWAPP
                                   3101 
                                   3102 ;       NAME?   ( a -- ca na | a F )
                                   3103 ;       Search vocabularies for a string.
      0011A7 11 11                 3104         .word      LINK
                           0011A9  3105 LINK = . 
      0011A9 05                    3106         .byte      5
      0011AA 4E 41 4D 45 3F        3107         .ascii     "NAME?"
      0011AF                       3108 NAMEQ:
      0011AF CD 06 19         [ 4] 3109         CALL   CNTXT
      0011B2 CC 11 16         [ 2] 3110         JP     FIND
                                   3111 
                                   3112 ;; Terminal response
                                   3113 
                                   3114 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3115 ;       Backup cursor by one character.
      0011B5 11 A9                 3116         .word      LINK
                           0011B7  3117 LINK = . 
      0011B7 02                    3118         .byte      2
      0011B8 5E 48                 3119         .ascii     "^H"
      0011BA                       3120 BKSP:
      0011BA CD 04 A2         [ 4] 3121         CALL     TOR
      0011BD CD 05 03         [ 4] 3122         CALL     OVER
      0011C0 CD 04 83         [ 4] 3123         CALL     RFROM
      0011C3 CD 04 E9         [ 4] 3124         CALL     SWAPP
      0011C6 CD 05 03         [ 4] 3125         CALL     OVER
      0011C9 CD 05 4E         [ 4] 3126         CALL     XORR
      0011CC CD 03 E7         [ 4] 3127         CALL     QBRAN
      0011CF 11 EA                 3128         .word      BACK1
      0011D1 CD 03 B4         [ 4] 3129         CALL     DOLIT
      0011D4 00 08                 3130         .word      BKSPP
      0011D6 CD 03 9E         [ 4] 3131         CALL     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0011D9 CD 09 DB         [ 4] 3132         CALL     ONEM
      0011DC CD 0A 2D         [ 4] 3133         CALL     BLANK
      0011DF CD 03 9E         [ 4] 3134         CALL     EMIT
      0011E2 CD 03 B4         [ 4] 3135         CALL     DOLIT
      0011E5 00 08                 3136         .word      BKSPP
      0011E7 CC 03 9E         [ 2] 3137         JP     EMIT
      0011EA 81               [ 4] 3138 BACK1:  RET
                                   3139 
                                   3140 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3141 ;       Accept and echo key stroke
                                   3142 ;       and bump cursor.
      0011EB 11 B7                 3143         .word      LINK
                           0011ED  3144 LINK = . 
      0011ED 03                    3145         .byte      3
      0011EE 54 41 50              3146         .ascii     "TAP"
      0011F1                       3147 TAP:
      0011F1 CD 04 D9         [ 4] 3148         CALL     DUPP
      0011F4 CD 03 9E         [ 4] 3149         CALL     EMIT
      0011F7 CD 05 03         [ 4] 3150         CALL     OVER
      0011FA CD 04 3F         [ 4] 3151         CALL     CSTOR
      0011FD CC 09 CE         [ 2] 3152         JP     ONEP
                                   3153 
                                   3154 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3155 ;       Process a key stroke,
                                   3156 ;       CR or backspace.
      001200 11 ED                 3157         .word      LINK
                           001202  3158 LINK = . 
      001202 04                    3159         .byte      4
      001203 4B 54 41 50           3160         .ascii     "KTAP"
      001207                       3161 KTAP:
      001207 CD 04 D9         [ 4] 3162         CALL     DUPP
      00120A CD 03 B4         [ 4] 3163         CALL     DOLIT
      00120D 00 0D                 3164         .word      CRR
      00120F CD 05 4E         [ 4] 3165         CALL     XORR
      001212 CD 03 E7         [ 4] 3166         CALL     QBRAN
      001215 12 2D                 3167         .word      KTAP2
      001217 CD 03 B4         [ 4] 3168         CALL     DOLIT
      00121A 00 08                 3169         .word      BKSPP
      00121C CD 05 4E         [ 4] 3170         CALL     XORR
      00121F CD 03 E7         [ 4] 3171         CALL     QBRAN
      001222 12 2A                 3172         .word      KTAP1
      001224 CD 0A 2D         [ 4] 3173         CALL     BLANK
      001227 CC 11 F1         [ 2] 3174         JP     TAP
      00122A CC 11 BA         [ 2] 3175 KTAP1:  JP     BKSP
      00122D CD 04 CF         [ 4] 3176 KTAP2:  CALL     DROP
      001230 CD 04 E9         [ 4] 3177         CALL     SWAPP
      001233 CD 04 CF         [ 4] 3178         CALL     DROP
      001236 CC 04 D9         [ 2] 3179         JP     DUPP
                                   3180 
                                   3181 ;       accept  ( b u -- b u )
                                   3182 ;       Accept characters to input
                                   3183 ;       buffer. Return with actual count.
      001239 12 02                 3184         .word      LINK
                           00123B  3185 LINK = . 
      00123B 06                    3186         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00123C 41 43 43 45 50 54     3187         .ascii     "ACCEPT"
      001242                       3188 ACCEP:
      001242 CD 05 03         [ 4] 3189         CALL     OVER
      001245 CD 06 D4         [ 4] 3190         CALL     PLUS
      001248 CD 05 03         [ 4] 3191         CALL     OVER
      00124B CD 06 BF         [ 4] 3192 ACCP1:  CALL     DDUP
      00124E CD 05 4E         [ 4] 3193         CALL     XORR
      001251 CD 03 E7         [ 4] 3194         CALL     QBRAN
      001254 12 76                 3195         .word      ACCP4
      001256 CD 0E 20         [ 4] 3196         CALL     KEY
      001259 CD 04 D9         [ 4] 3197         CALL     DUPP
      00125C CD 0A 2D         [ 4] 3198         CALL     BLANK
      00125F CD 03 B4         [ 4] 3199         CALL     DOLIT
      001262 00 7F                 3200         .word      127
      001264 CD 08 0F         [ 4] 3201         CALL     WITHI
      001267 CD 03 E7         [ 4] 3202         CALL     QBRAN
      00126A 12 71                 3203         .word      ACCP2
      00126C CD 11 F1         [ 4] 3204         CALL     TAP
      00126F 20 03            [ 2] 3205         JRA     ACCP3
      001271 CD 12 07         [ 4] 3206 ACCP2:  CALL     KTAP
      001274 20 D5            [ 2] 3207 ACCP3:  JRA     ACCP1
      001276 CD 04 CF         [ 4] 3208 ACCP4:  CALL     DROP
      001279 CD 05 03         [ 4] 3209         CALL     OVER
      00127C CC 07 4D         [ 2] 3210         JP     SUBB
                                   3211 
                                   3212 ;       QUERY   ( -- )
                                   3213 ;       Accept input stream to
                                   3214 ;       terminal input buffer.
      00127F 12 3B                 3215         .word      LINK
                                   3216         
                           001281  3217 LINK = . 
      001281 05                    3218         .byte      5
      001282 51 55 45 52 59        3219         .ascii     "QUERY"
      001287                       3220 QUERY:
      001287 CD 0B 4A         [ 4] 3221         CALL     TIB
      00128A CD 03 B4         [ 4] 3222         CALL     DOLIT
      00128D 00 50                 3223         .word      80
      00128F CD 12 42         [ 4] 3224         CALL     ACCEP
      001292 CD 05 C4         [ 4] 3225         CALL     NTIB
      001295 CD 04 1B         [ 4] 3226         CALL     STORE
      001298 CD 04 CF         [ 4] 3227         CALL     DROP
      00129B CD 0A 3A         [ 4] 3228         CALL     ZERO
      00129E CD 05 B4         [ 4] 3229         CALL     INN
      0012A1 CC 04 1B         [ 2] 3230         JP     STORE
                                   3231 
                                   3232 ;       ABORT   ( -- )
                                   3233 ;       Reset data stack and
                                   3234 ;       jump to QUIT.
      0012A4 12 81                 3235         .word      LINK
                           0012A6  3236 LINK = . 
      0012A6 05                    3237         .byte      5
      0012A7 41 42 4F 52 54        3238         .ascii     "ABORT"
      0012AC                       3239 ABORT:
      0012AC CD 13 A3         [ 4] 3240         CALL     PRESE
      0012AF CC 13 C0         [ 2] 3241         JP     QUIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3242 
                                   3243 ;       abort"  ( f -- )
                                   3244 ;       Run time routine of ABORT".
                                   3245 ;       Abort with a message.
      0012B2 12 A6                 3246         .word      LINK
                           0012B4  3247 LINK = . 
      0012B4 46                    3248 	.byte      COMPO+6
      0012B5 41 42 4F 52 54        3249         .ascii     "ABORT"
      0012BA 22                    3250         .byte      '"'
      0012BB                       3251 ABORQ:
      0012BB CD 03 E7         [ 4] 3252         CALL     QBRAN
      0012BE 12 DA                 3253         .word      ABOR2   ;text flag
      0012C0 CD 0E B6         [ 4] 3254         CALL     DOSTR
      0012C3 CD 0E 58         [ 4] 3255 ABOR1:  CALL     SPACE
      0012C6 CD 0B 11         [ 4] 3256         CALL     COUNT
      0012C9 CD 0E 82         [ 4] 3257         CALL     TYPES
      0012CC CD 03 B4         [ 4] 3258         CALL     DOLIT
      0012CF 00 3F                 3259         .word     63 ; "?"
      0012D1 CD 03 9E         [ 4] 3260         CALL     EMIT
      0012D4 CD 0E A0         [ 4] 3261         CALL     CR
      0012D7 CC 12 AC         [ 2] 3262         JP     ABORT   ;pass error string
      0012DA CD 0E B6         [ 4] 3263 ABOR2:  CALL     DOSTR
      0012DD CC 04 CF         [ 2] 3264         JP     DROP
                                   3265 
                                   3266 ;; The text interpreter
                                   3267 
                                   3268 ;       $INTERPRET      ( a -- )
                                   3269 ;       Interpret a word. If failed,
                                   3270 ;       try to convert it to an integer.
      0012E0 12 B4                 3271         .word      LINK
                           0012E2  3272 LINK = . 
      0012E2 0A                    3273         .byte      10
      0012E3 24 49 4E 54 45 52 50  3274         .ascii     "$INTERPRET"
             52 45 54
      0012ED                       3275 INTER:
      0012ED CD 11 AF         [ 4] 3276         CALL     NAMEQ
      0012F0 CD 06 83         [ 4] 3277         CALL     QDUP    ;?defined
      0012F3 CD 03 E7         [ 4] 3278         CALL     QBRAN
      0012F6 13 17                 3279         .word      INTE1
      0012F8 CD 04 32         [ 4] 3280         CALL     AT
      0012FB CD 03 B4         [ 4] 3281         CALL     DOLIT
      0012FE 40 00                 3282 	.word       0x4000	; COMPO*256
      001300 CD 05 25         [ 4] 3283         CALL     ANDD    ;?compile only lexicon bits
      001303 CD 12 BB         [ 4] 3284         CALL     ABORQ
      001306 0D                    3285         .byte      13
      001307 20 63 6F 6D 70 69 6C  3286         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001314 CC 04 0E         [ 2] 3287         JP     EXECU
      001317 CD 0D 4D         [ 4] 3288 INTE1:  CALL     NUMBQ   ;convert a number
      00131A CD 03 E7         [ 4] 3289         CALL     QBRAN
      00131D 12 C3                 3290         .word    ABOR1
      00131F 81               [ 4] 3291         RET
                                   3292 
                                   3293 ;       [       ( -- )
                                   3294 ;       Start  text interpreter.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001320 12 E2                 3295         .word      LINK
                           001322  3296 LINK = . 
      001322 81                    3297 	.byte      IMEDD+1
      001323 5B                    3298         .ascii     "["
      001324                       3299 LBRAC:
      001324 CD 03 B4         [ 4] 3300         CALL   DOLIT
      001327 12 ED                 3301         .word  INTER
      001329 CD 05 F7         [ 4] 3302         CALL   TEVAL
      00132C CC 04 1B         [ 2] 3303         JP     STORE
                                   3304 
                                   3305 ;       .OK     ( -- )
                                   3306 ;       Display 'ok' while interpreting.
      00132F 13 22                 3307         .word      LINK
                           001331  3308 LINK = . 
      001331 03                    3309         .byte      3
      001332 2E 4F 4B              3310         .ascii     ".OK"
      001335                       3311 DOTOK:
      001335 CD 03 B4         [ 4] 3312         CALL     DOLIT
      001338 12 ED                 3313         .word      INTER
      00133A CD 05 F7         [ 4] 3314         CALL     TEVAL
      00133D CD 04 32         [ 4] 3315         CALL     AT
      001340 CD 07 75         [ 4] 3316         CALL     EQUAL
      001343 CD 03 E7         [ 4] 3317         CALL     QBRAN
      001346 13 4F                 3318         .word      DOTO1
      001348 CD 0E DF         [ 4] 3319         CALL     DOTQP
      00134B 03                    3320         .byte      3
      00134C 20 6F 6B              3321         .ascii     " ok"
      00134F CC 0E A0         [ 2] 3322 DOTO1:  JP     CR
                                   3323 
                                   3324 ;       ?STACK  ( -- )
                                   3325 ;       Abort if stack underflows.
      001352 13 31                 3326         .word      LINK
                           001354  3327 LINK = . 
      001354 06                    3328         .byte      6
      001355 3F 53 54 41 43 4B     3329         .ascii     "?STACK"
      00135B                       3330 QSTAC: 
      00135B CD 0A 7C         [ 4] 3331         CALL     DEPTH
      00135E CD 05 12         [ 4] 3332         CALL     ZLESS   ;check only for underflow
      001361 CD 12 BB         [ 4] 3333         CALL     ABORQ
      001364 0B                    3334         .byte      11
      001365 20 75 6E 64 65 72 66  3335         .ascii     " underflow "
             6C 6F 77 20
      001370 81               [ 4] 3336         RET
                                   3337 
                                   3338 ;       EVAL    ( -- )
                                   3339 ;       Interpret  input stream.
      001371 13 54                 3340         .word      LINK
                           001373  3341 LINK = . 
      001373 04                    3342         .byte      4
      001374 45 56 41 4C           3343         .ascii     "EVAL"
      001378                       3344 EVAL:
      001378 CD 10 B2         [ 4] 3345 EVAL1:  CALL     TOKEN
      00137B CD 04 D9         [ 4] 3346         CALL     DUPP
      00137E CD 04 50         [ 4] 3347         CALL     CAT     ;?input stream empty
      001381 CD 03 E7         [ 4] 3348         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001384 13 94                 3349         .word    EVAL2
      001386 CD 05 F7         [ 4] 3350         CALL     TEVAL
      001389 CD 0B 5E         [ 4] 3351         CALL     ATEXE
      00138C CD 13 5B         [ 4] 3352         CALL     QSTAC   ;evaluate input, check stack
      00138F CD 03 FE         [ 4] 3353         CALL     BRAN
      001392 13 78                 3354         .word    EVAL1
      001394 CD 04 CF         [ 4] 3355 EVAL2:  CALL     DROP
      001397 CC 13 35         [ 2] 3356         JP       DOTOK
                                   3357 
                                   3358 ;       PRESET  ( -- )
                                   3359 ;       Reset data stack pointer and
                                   3360 ;       terminal input buffer.
      00139A 13 73                 3361         .word      LINK
                           00139C  3362 LINK = . 
      00139C 06                    3363         .byte      6
      00139D 50 52 45 53 45 54     3364         .ascii     "PRESET"
      0013A3                       3365 PRESE:
      0013A3 CD 03 B4         [ 4] 3366         CALL     DOLIT
      0013A6 06 80                 3367         .word      SPP
      0013A8 CD 04 C6         [ 4] 3368         CALL     SPSTO
      0013AB CD 03 B4         [ 4] 3369         CALL     DOLIT
      0013AE 07 00                 3370         .word      TIBB
      0013B0 CD 05 C4         [ 4] 3371         CALL     NTIB
      0013B3 CD 09 A3         [ 4] 3372         CALL     CELLP
      0013B6 CC 04 1B         [ 2] 3373         JP     STORE
                                   3374 
                                   3375 ;       QUIT    ( -- )
                                   3376 ;       Reset return stack pointer
                                   3377 ;       and start text interpreter.
      0013B9 13 9C                 3378         .word      LINK
                           0013BB  3379 LINK = . 
      0013BB 04                    3380         .byte      4
      0013BC 51 55 49 54           3381         .ascii     "QUIT"
      0013C0                       3382 QUIT:
      0013C0 CD 03 B4         [ 4] 3383         CALL     DOLIT
      0013C3 07 FF                 3384         .word      RPP
      0013C5 CD 04 6D         [ 4] 3385         CALL     RPSTO   ;reset return stack pointer
      0013C8 CD 13 24         [ 4] 3386 QUIT1:  CALL     LBRAC   ;start interpretation
      0013CB CD 12 87         [ 4] 3387 QUIT2:  CALL     QUERY   ;get input
      0013CE CD 13 78         [ 4] 3388         CALL     EVAL
      0013D1 20 F8            [ 2] 3389         JRA     QUIT2   ;continue till error
                                   3390 
                                   3391 ;; The compiler
                                   3392 
                                   3393 ;       '       ( -- ca )
                                   3394 ;       Search vocabularies for
                                   3395 ;       next word in input stream.
      0013D3 13 BB                 3396         .word      LINK
                           0013D5  3397 LINK = . 
      0013D5 01                    3398         .byte      1
      0013D6 27                    3399         .ascii     "'"
      0013D7                       3400 TICK:
      0013D7 CD 10 B2         [ 4] 3401         CALL     TOKEN
      0013DA CD 11 AF         [ 4] 3402         CALL     NAMEQ   ;?defined
      0013DD CD 03 E7         [ 4] 3403         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0013E0 12 C3                 3404         .word      ABOR1
      0013E2 81               [ 4] 3405         RET     ;yes, push code address
                                   3406 
                                   3407 ;       ALLOT   ( n -- )
                                   3408 ;       Allocate n bytes to RAM 
      0013E3 13 D5                 3409         .word      LINK
                           0013E5  3410         LINK = . 
      0013E5 05                    3411         .byte      5
      0013E6 41 4C 4C 4F 54        3412         .ascii     "ALLOT"
      0013EB                       3413 ALLOT:
      0013EB CD 06 27         [ 4] 3414         CALL     VPP
                                   3415 ; must update APP_VP each time VP is modidied
      0013EE CD 0A AA         [ 4] 3416         call PSTOR 
      0013F1 CC 1B 35         [ 2] 3417         jp UPDATVP 
                                   3418 
                                   3419 ;       ,       ( w -- )
                                   3420 ;         Compile an integer into
                                   3421 ;         variable space.
      0013F4 13 E5                 3422         .word      LINK
                           0013F6  3423 LINK = . 
      0013F6 01                    3424         .byte      1
      0013F7 2C                    3425         .ascii     ","
      0013F8                       3426 COMMA:
      0013F8 CD 0B 28         [ 4] 3427         CALL     HERE
      0013FB CD 04 D9         [ 4] 3428         CALL     DUPP
      0013FE CD 09 A3         [ 4] 3429         CALL     CELLP   ;cell boundary
      001401 CD 06 27         [ 4] 3430         CALL     VPP
      001404 CD 04 1B         [ 4] 3431         CALL     STORE
      001407 CC 04 1B         [ 2] 3432         JP     STORE
                                   3433 
                                   3434 ;       C,      ( c -- )
                                   3435 ;       Compile a byte into
                                   3436 ;       variables space.
      00140A 13 F6                 3437        .word      LINK
                           00140C  3438 LINK = . 
      00140C 02                    3439         .byte      2
      00140D 43 2C                 3440         .ascii     "C,"
      00140F                       3441 CCOMMA:
      00140F CD 0B 28         [ 4] 3442         CALL     HERE
      001412 CD 04 D9         [ 4] 3443         CALL     DUPP
      001415 CD 09 CE         [ 4] 3444         CALL     ONEP
      001418 CD 06 27         [ 4] 3445         CALL     VPP
      00141B CD 04 1B         [ 4] 3446         CALL     STORE
      00141E CC 04 3F         [ 2] 3447         JP     CSTOR
                                   3448 
                                   3449 ;       [COMPILE]       ( -- ; <string> )
                                   3450 ;       Compile next immediate
                                   3451 ;       word into code dictionary.
      001421 14 0C                 3452         .word      LINK
                           001423  3453 LINK = . 
      001423 89                    3454 	.byte      IMEDD+9
      001424 5B 43 4F 4D 50 49 4C  3455         .ascii     "[COMPILE]"
             45 5D
      00142D                       3456 BCOMP:
      00142D CD 13 D7         [ 4] 3457         CALL     TICK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001430 CC 16 F3         [ 2] 3458         JP     JSRC
                                   3459 
                                   3460 ;       COMPILE ( -- )
                                   3461 ;       Compile next jsr in
                                   3462 ;       colon list to code dictionary.
      001433 14 23                 3463         .word      LINK
                           001435  3464 LINK = . 
      001435 47                    3465 	.byte      COMPO+7
      001436 43 4F 4D 50 49 4C 45  3466         .ascii     "COMPILE"
      00143D                       3467 COMPI:
      00143D CD 04 83         [ 4] 3468         CALL     RFROM
      001440 CD 04 D9         [ 4] 3469         CALL     DUPP
      001443 CD 04 32         [ 4] 3470         CALL     AT
      001446 CD 16 F3         [ 4] 3471         CALL     JSRC    ;compile subroutine
      001449 CD 09 A3         [ 4] 3472         CALL     CELLP
      00144C 90 93            [ 1] 3473         ldw y,x 
      00144E 90 FE            [ 2] 3474         ldw y,(y)
      001450 1C 00 02         [ 2] 3475         addw x,#CELLL 
      001453 90 FC            [ 2] 3476         jp (y)
                                   3477 
                                   3478 ;       LITERAL ( w -- )
                                   3479 ;       Compile tos to dictionary
                                   3480 ;       as an integer literal.
      001455 14 35                 3481         .word      LINK
                           001457  3482 LINK = . 
      001457 87                    3483 	.byte      IMEDD+7
      001458 4C 49 54 45 52 41 4C  3484         .ascii     "LITERAL"
      00145F                       3485 LITER:
      00145F CD 14 3D         [ 4] 3486         CALL     COMPI
      001462 03 B4                 3487         .word DOLIT 
      001464 CC 13 F8         [ 2] 3488         JP     COMMA
                                   3489 
                                   3490 ;       $,"     ( -- )
                                   3491 ;       Compile a literal string
                                   3492 ;       up to next " .
      001467 14 57                 3493         .word      LINK
                           001469  3494 LINK = . 
      001469 03                    3495         .byte      3
      00146A 24 2C 22              3496         .byte     '$',',','"'
      00146D                       3497 STRCQ:
      00146D CD 03 B4         [ 4] 3498         CALL     DOLIT
      001470 00 22                 3499         .word     34	; "
      001472 CD 10 35         [ 4] 3500         CALL     PARSE
      001475 CD 0B 28         [ 4] 3501         CALL     HERE
      001478 CD 0B E8         [ 4] 3502         CALL     PACKS   ;string to code dictionary
      00147B CD 0B 11         [ 4] 3503         CALL     COUNT
      00147E CD 06 D4         [ 4] 3504         CALL     PLUS    ;calculate aligned end of string
      001481 CD 06 27         [ 4] 3505         CALL     VPP
      001484 CC 04 1B         [ 2] 3506         JP     STORE
                                   3507 
                                   3508 ;; Structures
                                   3509 
                                   3510 ;       FOR     ( -- a )
                                   3511 ;       Start a FOR-NEXT loop
                                   3512 ;       structure in a colon definition.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001487 14 69                 3513         .word      LINK
                           001489  3514 LINK = . 
      001489 83                    3515 	.byte      IMEDD+3
      00148A 46 4F 52              3516         .ascii     "FOR"
      00148D                       3517 FOR:
      00148D CD 14 3D         [ 4] 3518         CALL     COMPI
      001490 04 A2                 3519         .word TOR 
      001492 CC 0B 28         [ 2] 3520         JP     HERE
                                   3521 
                                   3522 ;       NEXT    ( a -- )
                                   3523 ;       Terminate a FOR-NEXT loop.
      001495 14 89                 3524         .word      LINK
                           001497  3525 LINK = . 
      001497 84                    3526 	.byte      IMEDD+4
      001498 4E 45 58 54           3527         .ascii     "NEXT"
      00149C                       3528 NEXT:
      00149C CD 14 3D         [ 4] 3529         CALL     COMPI
      00149F 03 C8                 3530         .word DONXT 
      0014A1 CD 06 73         [ 4] 3531         call ADRADJ
      0014A4 CC 13 F8         [ 2] 3532         JP     COMMA
                                   3533 
                                   3534 ;       I ( -- n )
                                   3535 ;       stack FOR-NEXT COUNTER 
      0014A7 14 97                 3536         .word LINK 
                           0014A9  3537         LINK=.
      0014A9 01                    3538         .byte 1 
      0014AA 49                    3539         .ascii "I"
      0014AB                       3540 IFETCH: 
      0014AB 1D 00 02         [ 2] 3541         subw x,#CELLL 
      0014AE 16 03            [ 2] 3542         ldw y,(3,sp)
      0014B0 FF               [ 2] 3543         ldw (x),y 
      0014B1 81               [ 4] 3544         ret 
                                   3545 
                                   3546 ;       BEGIN   ( -- a )
                                   3547 ;       Start an infinite or
                                   3548 ;       indefinite loop structure.
      0014B2 14 A9                 3549         .word      LINK
                           0014B4  3550 LINK = . 
      0014B4 85                    3551 	.byte      IMEDD+5
      0014B5 42 45 47 49 4E        3552         .ascii     "BEGIN"
      0014BA                       3553 BEGIN:
      0014BA CC 0B 28         [ 2] 3554         JP     HERE
                                   3555 
                                   3556 ;       UNTIL   ( a -- )
                                   3557 ;       Terminate a BEGIN-UNTIL
                                   3558 ;       indefinite loop structure.
      0014BD 14 B4                 3559         .word      LINK
                           0014BF  3560 LINK = . 
      0014BF 85                    3561 	.byte      IMEDD+5
      0014C0 55 4E 54 49 4C        3562         .ascii     "UNTIL"
      0014C5                       3563 UNTIL:
      0014C5 CD 14 3D         [ 4] 3564         CALL     COMPI
      0014C8 03 E7                 3565         .word    QBRAN 
      0014CA CD 06 73         [ 4] 3566         call ADRADJ
      0014CD CC 13 F8         [ 2] 3567         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3568 
                                   3569 ;       AGAIN   ( a -- )
                                   3570 ;       Terminate a BEGIN-AGAIN
                                   3571 ;       infinite loop structure.
      0014D0 14 BF                 3572         .word      LINK
                           0014D2  3573 LINK = . 
      0014D2 85                    3574 	.byte      IMEDD+5
      0014D3 41 47 41 49 4E        3575         .ascii     "AGAIN"
      0014D8                       3576 AGAIN:
      0014D8 CD 14 3D         [ 4] 3577         CALL     COMPI
      0014DB 03 FE                 3578         .word BRAN
      0014DD CD 06 73         [ 4] 3579         call ADRADJ 
      0014E0 CC 13 F8         [ 2] 3580         JP     COMMA
                                   3581 
                                   3582 ;       IF      ( -- A )
                                   3583 ;       Begin a conditional branch.
      0014E3 14 D2                 3584         .word      LINK
                           0014E5  3585 LINK = . 
      0014E5 82                    3586 	.byte      IMEDD+2
      0014E6 49 46                 3587         .ascii     "IF"
      0014E8                       3588 IFF:
      0014E8 CD 14 3D         [ 4] 3589         CALL     COMPI
      0014EB 03 E7                 3590         .word QBRAN
      0014ED CD 0B 28         [ 4] 3591         CALL     HERE
      0014F0 CD 0A 3A         [ 4] 3592         CALL     ZERO
      0014F3 CC 13 F8         [ 2] 3593         JP     COMMA
                                   3594 
                                   3595 ;       THEN        ( A -- )
                                   3596 ;       Terminate a conditional branch structure.
      0014F6 14 E5                 3597         .word      LINK
                           0014F8  3598 LINK = . 
      0014F8 84                    3599 	.byte      IMEDD+4
      0014F9 54 48 45 4E           3600         .ascii     "THEN"
      0014FD                       3601 THENN:
      0014FD CD 0B 28         [ 4] 3602         CALL     HERE
      001500 CD 06 73         [ 4] 3603         call ADRADJ 
      001503 CD 04 E9         [ 4] 3604         CALL     SWAPP
      001506 CC 04 1B         [ 2] 3605         JP     STORE
                                   3606 
                                   3607 ;       ELSE        ( A -- A )
                                   3608 ;       Start the false clause in an IF-ELSE-THEN structure.
      001509 14 F8                 3609         .word      LINK
                           00150B  3610 LINK = . 
      00150B 84                    3611 	.byte      IMEDD+4
      00150C 45 4C 53 45           3612         .ascii     "ELSE"
      001510                       3613 ELSEE:
      001510 CD 14 3D         [ 4] 3614         CALL     COMPI
      001513 03 FE                 3615         .word BRAN
      001515 CD 0B 28         [ 4] 3616         CALL     HERE
      001518 CD 0A 3A         [ 4] 3617         CALL     ZERO
      00151B CD 13 F8         [ 4] 3618         CALL     COMMA
      00151E CD 04 E9         [ 4] 3619         CALL     SWAPP
      001521 CD 0B 28         [ 4] 3620         CALL     HERE
      001524 CD 06 73         [ 4] 3621         call ADRADJ 
      001527 CD 04 E9         [ 4] 3622         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00152A CC 04 1B         [ 2] 3623         JP     STORE
                                   3624 
                                   3625 ;       AHEAD       ( -- A )
                                   3626 ;       Compile a forward branch instruction.
      00152D 15 0B                 3627         .word      LINK
                           00152F  3628 LINK = . 
      00152F 85                    3629 	.byte      IMEDD+5
      001530 41 48 45 41 44        3630         .ascii     "AHEAD"
      001535                       3631 AHEAD:
      001535 CD 14 3D         [ 4] 3632         CALL     COMPI
      001538 03 FE                 3633         .word BRAN
      00153A CD 0B 28         [ 4] 3634         CALL     HERE
      00153D CD 0A 3A         [ 4] 3635         CALL     ZERO
      001540 CC 13 F8         [ 2] 3636         JP     COMMA
                                   3637 
                                   3638 ;       WHILE       ( a -- A a )
                                   3639 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001543 15 2F                 3640         .word      LINK
                           001545  3641 LINK = . 
      001545 85                    3642 	.byte      IMEDD+5
      001546 57 48 49 4C 45        3643         .ascii     "WHILE"
      00154B                       3644 WHILE:
      00154B CD 14 3D         [ 4] 3645         CALL     COMPI
      00154E 03 E7                 3646         .word QBRAN
      001550 CD 0B 28         [ 4] 3647         CALL     HERE
      001553 CD 0A 3A         [ 4] 3648         CALL     ZERO
      001556 CD 13 F8         [ 4] 3649         CALL     COMMA
      001559 CC 04 E9         [ 2] 3650         JP     SWAPP
                                   3651 
                                   3652 ;       REPEAT      ( A a -- )
                                   3653 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00155C 15 45                 3654         .word      LINK
                           00155E  3655 LINK = . 
      00155E 86                    3656         .byte      IMEDD+6
      00155F 52 45 50 45 41 54     3657         .ascii     "REPEAT"
      001565                       3658 REPEA:
      001565 CD 14 3D         [ 4] 3659         CALL     COMPI
      001568 03 FE                 3660         .word BRAN
      00156A CD 06 73         [ 4] 3661         call ADRADJ 
      00156D CD 13 F8         [ 4] 3662         CALL     COMMA
      001570 CD 0B 28         [ 4] 3663         CALL     HERE
      001573 CD 06 73         [ 4] 3664         call ADRADJ 
      001576 CD 04 E9         [ 4] 3665         CALL     SWAPP
      001579 CC 04 1B         [ 2] 3666         JP     STORE
                                   3667 
                                   3668 ;       AFT         ( a -- a A )
                                   3669 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00157C 15 5E                 3670         .word      LINK
                           00157E  3671 LINK = . 
      00157E 83                    3672 	.byte      IMEDD+3
      00157F 41 46 54              3673         .ascii     "AFT"
      001582                       3674 AFT:
      001582 CD 04 CF         [ 4] 3675         CALL     DROP
      001585 CD 15 35         [ 4] 3676         CALL     AHEAD
      001588 CD 0B 28         [ 4] 3677         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00158B CC 04 E9         [ 2] 3678         JP     SWAPP
                                   3679 
                                   3680 ;       ABORT"      ( -- ; <string> )
                                   3681 ;       Conditional abort with an error message.
      00158E 15 7E                 3682         .word      LINK
                           001590  3683 LINK = . 
      001590 86                    3684 	.byte      IMEDD+6
      001591 41 42 4F 52 54        3685         .ascii     "ABORT"
      001596 22                    3686         .byte      '"'
      001597                       3687 ABRTQ:
      001597 CD 14 3D         [ 4] 3688         CALL     COMPI
      00159A 12 BB                 3689         .word ABORQ
      00159C CC 14 6D         [ 2] 3690         JP     STRCQ
                                   3691 
                                   3692 ;       $"     ( -- ; <string> )
                                   3693 ;       Compile an inline string literal.
      00159F 15 90                 3694         .word      LINK
                           0015A1  3695 LINK = . 
      0015A1 82                    3696 	.byte      IMEDD+2
      0015A2 24 22                 3697         .byte     '$','"'
      0015A4                       3698 STRQ:
      0015A4 CD 14 3D         [ 4] 3699         CALL     COMPI
      0015A7 0E D5                 3700         .word STRQP 
      0015A9 CC 14 6D         [ 2] 3701         JP     STRCQ
                                   3702 
                                   3703 ;       ."          ( -- ; <string> )
                                   3704 ;       Compile an inline string literal to be typed out at run time.
      0015AC 15 A1                 3705         .word      LINK
                           0015AE  3706 LINK = . 
      0015AE 82                    3707 	.byte      IMEDD+2
      0015AF 2E 22                 3708         .byte     '.','"'
      0015B1                       3709 DOTQ:
      0015B1 CD 14 3D         [ 4] 3710         CALL     COMPI
      0015B4 0E DF                 3711         .word DOTQP 
      0015B6 CC 14 6D         [ 2] 3712         JP     STRCQ
                                   3713 
                                   3714 ;; Name compiler
                                   3715 
                                   3716 ;       ?UNIQUE ( a -- a )
                                   3717 ;       Display a warning message
                                   3718 ;       if word already exists.
      0015B9 15 AE                 3719         .word      LINK
                           0015BB  3720 LINK = . 
      0015BB 07                    3721         .byte      7
      0015BC 3F 55 4E 49 51 55 45  3722         .ascii     "?UNIQUE"
      0015C3                       3723 UNIQU:
      0015C3 CD 04 D9         [ 4] 3724         CALL     DUPP
      0015C6 CD 11 AF         [ 4] 3725         CALL     NAMEQ   ;?name exists
      0015C9 CD 03 E7         [ 4] 3726         CALL     QBRAN
      0015CC 15 E2                 3727         .word      UNIQ1
      0015CE CD 0E DF         [ 4] 3728         CALL     DOTQP   ;redef are OK
      0015D1 07                    3729         .byte       7
      0015D2 20 72 65 44 65 66 20  3730         .ascii     " reDef "       
      0015D9 CD 05 03         [ 4] 3731         CALL     OVER
      0015DC CD 0B 11         [ 4] 3732         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      0015DF CD 0E 82         [ 4] 3733         CALL     TYPES   ;just in case
      0015E2 CC 04 CF         [ 2] 3734 UNIQ1:  JP     DROP
                                   3735 
                                   3736 ;       $,n     ( na -- )
                                   3737 ;       Build a new dictionary name
                                   3738 ;       using string at na.
                                   3739 ; compile dans l'espace des variables 
      0015E5 15 BB                 3740         .word      LINK
                           0015E7  3741 LINK = . 
      0015E7 03                    3742         .byte      3
      0015E8 24 2C 6E              3743         .ascii     "$,n"
      0015EB                       3744 SNAME:
      0015EB CD 04 D9         [ 4] 3745         CALL     DUPP
      0015EE CD 04 50         [ 4] 3746         CALL     CAT     ;?null input
      0015F1 CD 03 E7         [ 4] 3747         CALL     QBRAN
      0015F4 16 21                 3748         .word      PNAM1
      0015F6 CD 15 C3         [ 4] 3749         CALL     UNIQU   ;?redefinition
      0015F9 CD 04 D9         [ 4] 3750         CALL     DUPP
      0015FC CD 0B 11         [ 4] 3751         CALL     COUNT
      0015FF CD 06 D4         [ 4] 3752         CALL     PLUS
      001602 CD 06 27         [ 4] 3753         CALL     VPP
      001605 CD 04 1B         [ 4] 3754         CALL     STORE
      001608 CD 04 D9         [ 4] 3755         CALL     DUPP
      00160B CD 06 45         [ 4] 3756         CALL     LAST
      00160E CD 04 1B         [ 4] 3757         CALL     STORE   ;save na for vocabulary link
      001611 CD 09 B2         [ 4] 3758         CALL     CELLM   ;link address
      001614 CD 06 19         [ 4] 3759         CALL     CNTXT
      001617 CD 04 32         [ 4] 3760         CALL     AT
      00161A CD 04 E9         [ 4] 3761         CALL     SWAPP
      00161D CD 04 1B         [ 4] 3762         CALL     STORE
      001620 81               [ 4] 3763         RET     ;save code pointer
      001621 CD 0E D5         [ 4] 3764 PNAM1:  CALL     STRQP
      001624 05                    3765         .byte      5
      001625 20 6E 61 6D 65        3766         .ascii     " name" ;null input
      00162A CC 12 C3         [ 2] 3767         JP     ABOR1
                                   3768 
                                   3769 ;; FORTH compiler
                                   3770 
                                   3771 ;       $COMPILE        ( a -- )
                                   3772 ;       Compile next word to
                                   3773 ;       dictionary as a token or literal.
      00162D 15 E7                 3774         .word      LINK
                           00162F  3775 LINK = . 
      00162F 08                    3776         .byte      8
      001630 24 43 4F 4D 50 49 4C  3777         .ascii     "$COMPILE"
             45
      001638                       3778 SCOMP:
      001638 CD 11 AF         [ 4] 3779         CALL     NAMEQ
      00163B CD 06 83         [ 4] 3780         CALL     QDUP    ;?defined
      00163E CD 03 E7         [ 4] 3781         CALL     QBRAN
      001641 16 59                 3782         .word      SCOM2
      001643 CD 04 32         [ 4] 3783         CALL     AT
      001646 CD 03 B4         [ 4] 3784         CALL     DOLIT
      001649 80 00                 3785         .word     0x8000	;  IMEDD*256
      00164B CD 05 25         [ 4] 3786         CALL     ANDD    ;?immediate
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00164E CD 03 E7         [ 4] 3787         CALL     QBRAN
      001651 16 56                 3788         .word      SCOM1
      001653 CC 04 0E         [ 2] 3789         JP     EXECU
      001656 CC 16 F3         [ 2] 3790 SCOM1:  JP     JSRC
      001659 CD 0D 4D         [ 4] 3791 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00165C CD 03 E7         [ 4] 3792         CALL     QBRAN
      00165F 12 C3                 3793         .word      ABOR1
      001661 CC 14 5F         [ 2] 3794         JP     LITER
                                   3795 
                                   3796 ;       OVERT   ( -- )
                                   3797 ;       Link a new word into vocabulary.
      001664 16 2F                 3798         .word      LINK
                           001666  3799 LINK = . 
      001666 05                    3800         .byte      5
      001667 4F 56 45 52 54        3801         .ascii     "OVERT"
      00166C                       3802 OVERT:
      00166C CD 06 45         [ 4] 3803         CALL     LAST
      00166F CD 04 32         [ 4] 3804         CALL     AT
      001672 CD 06 19         [ 4] 3805         CALL     CNTXT
      001675 CC 04 1B         [ 2] 3806         JP     STORE
                                   3807 
                                   3808 ;       ;       ( -- )
                                   3809 ;       Terminate a colon definition.
      001678 16 66                 3810         .word      LINK
                           00167A  3811 LINK = . 
      00167A C1                    3812 	.byte      IMEDD+COMPO+1
      00167B 3B                    3813         .ascii     ";"
      00167C                       3814 SEMIS:
                           000001  3815 .if OPTIMIZE ; more compact and faster
      00167C CD 03 B4         [ 4] 3816         call DOLIT 
      00167F 00 81                 3817         .word 0x81   ; opcode for RET 
      001681 CD 14 0F         [ 4] 3818         call CCOMMA 
                           000000  3819 .else
                                   3820         CALL     COMPI
                                   3821         .word EXIT 
                                   3822 .endif 
      001684 CD 13 24         [ 4] 3823         CALL     LBRAC
      001687 CD 16 6C         [ 4] 3824         call OVERT 
      00168A CD 20 58         [ 4] 3825         CALL FMOVE
      00168D CD 06 83         [ 4] 3826         call QDUP 
      001690 CD 03 E7         [ 4] 3827         call QBRAN 
      001693 17 C3                 3828         .word SET_RAMLAST 
      001695 CD 20 EC         [ 4] 3829         CALL UPDATPTR
      001698 81               [ 4] 3830         RET 
                                   3831 
                                   3832 
                                   3833 ;       Terminate an ISR definition 
                                   3834 ;       retourn ca of ISR as double
                                   3835 ;       I; ( -- ud )
      001699 16 7A                 3836         .word LINK 
                           00169B  3837         LINK=.
      00169B C2                    3838         .byte 2+IMEDD+COMPO 
      00169C 49 3B                 3839         .ascii "I;" 
      00169E                       3840 ISEMI:
      00169E 1D 00 02         [ 2] 3841         subw x,#CELLL  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0016A1 90 AE 00 80      [ 2] 3842         ldw y,#IRET_CODE 
      0016A5 FF               [ 2] 3843         ldw (x),y 
      0016A6 CD 14 0F         [ 4] 3844         call CCOMMA
      0016A9 CD 13 24         [ 4] 3845         call LBRAC 
      0016AC CD 21 31         [ 4] 3846         call IFMOVE
      0016AF CD 06 83         [ 4] 3847         call QDUP 
      0016B2 CD 03 E7         [ 4] 3848         CALL QBRAN 
      0016B5 17 C3                 3849         .word SET_RAMLAST
      0016B7 CD 06 35         [ 4] 3850         CALL CPP
      0016BA CD 04 32         [ 4] 3851         call AT 
      0016BD CD 04 E9         [ 4] 3852         call SWAPP 
      0016C0 CD 06 35         [ 4] 3853         CALL CPP 
      0016C3 CD 04 1B         [ 4] 3854         call STORE 
      0016C6 CD 1B 1E         [ 4] 3855         call UPDATCP 
      0016C9 CD 1A DB         [ 4] 3856         call EEPVP 
      0016CC CD 04 CF         [ 4] 3857         call DROP 
      0016CF CD 04 32         [ 4] 3858         call AT 
      0016D2 CD 06 27         [ 4] 3859         call VPP 
      0016D5 CD 04 1B         [ 4] 3860         call STORE 
      0016D8 CC 0A 3A         [ 2] 3861         jp ZERO
      0016DB 81               [ 4] 3862         ret           
                                   3863         
                                   3864 
                                   3865 ;       ]       ( -- )
                                   3866 ;       Start compiling words in
                                   3867 ;       input stream.
      0016DC 16 9B                 3868         .word      LINK
                           0016DE  3869 LINK = . 
      0016DE 01                    3870         .byte      1
      0016DF 5D                    3871         .ascii     "]"
      0016E0                       3872 RBRAC:
      0016E0 CD 03 B4         [ 4] 3873         CALL   DOLIT
      0016E3 16 38                 3874         .word  SCOMP
      0016E5 CD 05 F7         [ 4] 3875         CALL   TEVAL
      0016E8 CC 04 1B         [ 2] 3876         JP     STORE
                                   3877 
                                   3878 ;       CALL,    ( ca -- )
                                   3879 ;       Compile a subroutine call.
      0016EB 16 DE                 3880         .word      LINK
                           0016ED  3881 LINK = . 
      0016ED 05                    3882         .byte      5
      0016EE 43 41 4C 4C 2C        3883         .ascii     "CALL,"
      0016F3                       3884 JSRC:
      0016F3 CD 03 B4         [ 4] 3885         CALL     DOLIT
      0016F6 00 CD                 3886         .word     CALLL     ;CALL
      0016F8 CD 14 0F         [ 4] 3887         CALL     CCOMMA
      0016FB CC 13 F8         [ 2] 3888         JP     COMMA
                                   3889 
                                   3890 ;       INIT-OFS ( -- )
                                   3891 ;       compute offset to adjust jump address 
                                   3892 ;       set variable OFFSET 
      0016FE 16 ED                 3893         .word LINK 
                           001700  3894         LINK=.
      001700 08                    3895         .byte 8 
      001701 49 4E 49 54 2D 4F 46  3896         .ascii "INIT-OFS" 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



             53
      001709                       3897 INITOFS:
      001709 CD 05 E6         [ 4] 3898         call TFLASH 
      00170C CD 04 32         [ 4] 3899         CALL AT 
      00170F CD 04 D9         [ 4] 3900         CALL DUPP 
      001712 CD 03 E7         [ 4] 3901         call QBRAN
      001715 17 26                 3902         .word 1$
      001717 CD 04 CF         [ 4] 3903         call DROP  
      00171A CD 06 35         [ 4] 3904         call CPP 
      00171D CD 04 32         [ 4] 3905         call AT 
      001720 CD 0B 28         [ 4] 3906         call HERE
      001723 CD 07 4D         [ 4] 3907         call SUBB 
      001726 CD 06 6A         [ 4] 3908 1$:     call OFFSET 
      001729 CC 04 1B         [ 2] 3909         jp STORE  
                                   3910 
                                   3911 ;       :       ( -- ; <string> )
                                   3912 ;       Start a new colon definition
                                   3913 ;       using next word as its name.
      00172C 17 00                 3914         .word      LINK
                           00172E  3915 LINK = . 
      00172E 01                    3916         .byte      1
      00172F 3A                    3917         .ascii     ":"
      001730                       3918 COLON:
      001730 CD 17 09         [ 4] 3919         call INITOFS       
      001733 CD 10 B2         [ 4] 3920         CALL   TOKEN
      001736 CD 15 EB         [ 4] 3921         CALL   SNAME
      001739 CC 16 E0         [ 2] 3922         JP     RBRAC
                                   3923 
                                   3924 ;       I:  ( -- )
                                   3925 ;       Start interrupt service routine definition
                                   3926 ;       those definition have no name.
      00173C 17 2E                 3927         .word LINK
                           00173E  3928         LINK=.
      00173E 02                    3929         .byte 2 
      00173F 49 3A                 3930         .ascii "I:" 
      001741                       3931 ICOLON:
      001741 CD 17 09         [ 4] 3932         call INITOFS 
      001744 CC 16 E0         [ 2] 3933         jp RBRAC  
                                   3934 
                                   3935 ;       IMMEDIATE       ( -- )
                                   3936 ;       Make last compiled word
                                   3937 ;       an immediate word.
      001747 17 3E                 3938         .word      LINK
                           001749  3939 LINK = . 
      001749 09                    3940         .byte      9
      00174A 49 4D 4D 45 44 49 41  3941         .ascii     "IMMEDIATE"
             54 45
      001753                       3942 IMMED:
      001753 CD 03 B4         [ 4] 3943         CALL     DOLIT
      001756 80 00                 3944         .word     0x8000	;  IMEDD*256
      001758 CD 06 45         [ 4] 3945         CALL     LAST
      00175B CD 04 32         [ 4] 3946         CALL     AT
      00175E CD 04 32         [ 4] 3947         CALL     AT
      001761 CD 05 39         [ 4] 3948         CALL     ORR
      001764 CD 06 45         [ 4] 3949         CALL     LAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001767 CD 04 32         [ 4] 3950         CALL     AT
      00176A CC 04 1B         [ 2] 3951         JP     STORE
                                   3952 
                                   3953 ;; Defining words
                                   3954 
                                   3955 ;       CREATE  ( -- ; <string> )
                                   3956 ;       Compile a new array
                                   3957 ;       without allocating space.
      00176D 17 49                 3958         .word      LINK
                           00176F  3959 LINK = . 
      00176F 06                    3960         .byte      6
      001770 43 52 45 41 54 45     3961         .ascii     "CREATE"
      001776                       3962 CREAT:
      001776 CD 10 B2         [ 4] 3963         CALL     TOKEN
      001779 CD 15 EB         [ 4] 3964         CALL     SNAME
      00177C CD 16 6C         [ 4] 3965         CALL     OVERT        
      00177F CD 14 3D         [ 4] 3966         CALL     COMPI 
      001782 05 86                 3967         .word DOVAR 
      001784 81               [ 4] 3968         RET
                                   3969 
                                   3970 ;       VARIABLE        ( -- ; <string> )
                                   3971 ;       Compile a new variable
                                   3972 ;       initialized to 0.
      001785 17 6F                 3973         .word      LINK
                           001787  3974 LINK = . 
      001787 08                    3975         .byte      8
      001788 56 41 52 49 41 42 4C  3976         .ascii     "VARIABLE"
             45
      001790                       3977 VARIA:
                                   3978 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001790 CD 0B 28         [ 4] 3979         CALL HERE
      001793 CD 04 D9         [ 4] 3980         CALL DUPP 
      001796 CD 09 A3         [ 4] 3981         CALL CELLP
      001799 CD 06 27         [ 4] 3982         CALL VPP 
      00179C CD 04 1B         [ 4] 3983         CALL STORE
      00179F CD 17 76         [ 4] 3984         CALL CREAT
      0017A2 CD 04 D9         [ 4] 3985         CALL DUPP
      0017A5 CD 13 F8         [ 4] 3986         CALL COMMA
      0017A8 CD 0A 3A         [ 4] 3987         CALL ZERO
      0017AB CD 04 E9         [ 4] 3988         call SWAPP 
      0017AE CD 04 1B         [ 4] 3989         CALL STORE
      0017B1 CD 20 58         [ 4] 3990         CALL FMOVE ; move definition to FLASH
      0017B4 CD 06 83         [ 4] 3991         CALL QDUP 
      0017B7 CD 03 E7         [ 4] 3992         CALL QBRAN 
      0017BA 17 C3                 3993         .word SET_RAMLAST   
      0017BC CD 1B 35         [ 4] 3994         call UPDATVP  ; don't update if variable kept in RAM.
      0017BF CD 20 EC         [ 4] 3995         CALL UPDATPTR
      0017C2 81               [ 4] 3996         RET         
      0017C3                       3997 SET_RAMLAST: 
      0017C3 CD 06 45         [ 4] 3998         CALL LAST 
      0017C6 CD 04 32         [ 4] 3999         CALL AT 
      0017C9 CD 06 58         [ 4] 4000         CALL RAMLAST 
      0017CC CC 04 1B         [ 2] 4001         jp STORE  
                                   4002 
                                   4003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4004 ;       CONSTANT  ( n -- ; <string> )
                                   4005 ;       Compile a new constant 
                                   4006 ;       n CONSTANT name 
      0017CF 17 87                 4007         .word LINK 
                           0017D1  4008         LINK=. 
      0017D1 08                    4009         .byte 8 
      0017D2 43 4F 4E 53 54 41 4E  4010         .ascii "CONSTANT" 
             54
      0017DA                       4011 CONSTANT:          
      0017DA CD 10 B2         [ 4] 4012         CALL TOKEN
      0017DD CD 15 EB         [ 4] 4013         CALL SNAME 
      0017E0 CD 16 6C         [ 4] 4014         CALL OVERT 
      0017E3 CD 14 3D         [ 4] 4015         CALL COMPI 
      0017E6 18 04                 4016         .word DOCONST
      0017E8 CD 13 F8         [ 4] 4017         CALL COMMA 
      0017EB CD 20 58         [ 4] 4018         CALL FMOVE
      0017EE CD 06 83         [ 4] 4019         CALL QDUP 
      0017F1 CD 03 E7         [ 4] 4020         CALL QBRAN 
      0017F4 17 C3                 4021         .word SET_RAMLAST  
      0017F6 CD 20 EC         [ 4] 4022         CALL UPDATPTR  
      0017F9 81               [ 4] 4023 1$:     RET          
                                   4024 
                                   4025 ; CONSTANT runtime semantic 
                                   4026 ; doCONST  ( -- n )
      0017FA 17 D1                 4027         .word LINK 
                           0017FC  4028         LINK=.
      0017FC 07                    4029         .byte 7
      0017FD 44 4F 43 4F 4E 53 54  4030         .ascii "DOCONST"
      001804                       4031 DOCONST:
      001804 1D 00 02         [ 2] 4032         subw x,#CELLL
      001807 90 85            [ 2] 4033         popw y 
      001809 90 FE            [ 2] 4034         ldw y,(y) 
      00180B FF               [ 2] 4035         ldw (x),y 
      00180C 81               [ 4] 4036         ret 
                                   4037 
                                   4038 ;----------------------------------
                                   4039 ; create double constant 
                                   4040 ; DCONST ( d -- ; <string> )
                                   4041 ;----------------------------------
      00180D 17 FC                 4042     .word LINK 
                           00180F  4043     LINK=.
      00180F 06                    4044     .byte 6 
      001810 44 43 4F 4E 53 54     4045     .ascii "DCONST"
      001816                       4046 DCONST:
      001816 CD 10 B2         [ 4] 4047         CALL TOKEN
      001819 CD 15 EB         [ 4] 4048         CALL SNAME 
      00181C CD 16 6C         [ 4] 4049         CALL OVERT 
      00181F CD 14 3D         [ 4] 4050         CALL COMPI 
      001822 18 45                 4051         .word DO_DCONST
      001824 CD 13 F8         [ 4] 4052         CALL COMMA
      001827 CD 13 F8         [ 4] 4053         CALL COMMA  
      00182A CD 20 58         [ 4] 4054         CALL FMOVE
      00182D CD 06 83         [ 4] 4055         CALL QDUP 
      001830 CD 03 E7         [ 4] 4056         CALL QBRAN 
      001833 17 C3                 4057         .word SET_RAMLAST  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001835 CD 20 EC         [ 4] 4058         CALL UPDATPTR  
      001838 81               [ 4] 4059 1$:     RET          
                                   4060     
                                   4061 ;----------------------------------
                                   4062 ; runtime for DCONST 
                                   4063 ; stack double constant 
                                   4064 ; DO-DCONST ( -- d )
                                   4065 ;-----------------------------------
      001839 18 0F                 4066         .word LINK 
                           00183B  4067         LINK=.
      00183B 09                    4068         .byte 9 
      00183C 44 4F 2D 44 43 4F 4E  4069         .ascii "DO-DCONST"
             53 54
      001845                       4070 DO_DCONST:
      001845 90 85            [ 2] 4071     popw y 
      001847 90 BF 24         [ 2] 4072     ldw YTEMP,y 
      00184A 1D 00 04         [ 2] 4073     subw x,#2*CELLL 
      00184D 90 FE            [ 2] 4074     ldw y,(y)
      00184F FF               [ 2] 4075     ldw (x),y 
      001850 90 BE 24         [ 2] 4076     ldw y,YTEMP 
      001853 90 EE 02         [ 2] 4077     ldw y,(2,y)
      001856 EF 02            [ 2] 4078     ldw (2,x),y 
      001858 81               [ 4] 4079     ret 
                                   4080 
                                   4081 ;; Tools
                                   4082 
                                   4083 ;       _TYPE   ( b u -- )
                                   4084 ;       Display a string. Filter
                                   4085 ;       non-printing characters.
      001859 18 3B                 4086         .word      LINK
                           00185B  4087 LINK = . 
      00185B 05                    4088         .byte      5
      00185C 5F 54 59 50 45        4089         .ascii     "_TYPE"
      001861                       4090 UTYPE:
      001861 CD 04 A2         [ 4] 4091         CALL     TOR     ;start count down loop
      001864 20 0F            [ 2] 4092         JRA     UTYP2   ;skip first pass
      001866 CD 04 D9         [ 4] 4093 UTYP1:  CALL     DUPP
      001869 CD 04 50         [ 4] 4094         CALL     CAT
      00186C CD 0A 64         [ 4] 4095         CALL     TCHAR
      00186F CD 03 9E         [ 4] 4096         CALL     EMIT    ;display only printable
      001872 CD 09 CE         [ 4] 4097         CALL     ONEP    ;increment address
      001875 CD 03 C8         [ 4] 4098 UTYP2:  CALL     DONXT
      001878 18 66                 4099         .word      UTYP1   ;loop till done
      00187A CC 04 CF         [ 2] 4100         JP     DROP
                                   4101 
                                   4102 ;       dm+     ( a u -- a )
                                   4103 ;       Dump u bytes from ,
                                   4104 ;       leaving a+u on  stack.
      00187D 18 5B                 4105         .word      LINK
                           00187F  4106 LINK = . 
      00187F 03                    4107         .byte      3
      001880 64 6D 2B              4108         .ascii     "dm+"
      001883                       4109 DUMPP:
      001883 CD 05 03         [ 4] 4110         CALL     OVER
      001886 CD 03 B4         [ 4] 4111         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001889 00 04                 4112         .word      4
      00188B CD 0F 08         [ 4] 4113         CALL     UDOTR   ;display address
      00188E CD 0E 58         [ 4] 4114         CALL     SPACE
      001891 CD 04 A2         [ 4] 4115         CALL     TOR     ;start count down loop
      001894 20 11            [ 2] 4116         JRA     PDUM2   ;skip first pass
      001896 CD 04 D9         [ 4] 4117 PDUM1:  CALL     DUPP
      001899 CD 04 50         [ 4] 4118         CALL     CAT
      00189C CD 03 B4         [ 4] 4119         CALL     DOLIT
      00189F 00 03                 4120         .word      3
      0018A1 CD 0F 08         [ 4] 4121         CALL     UDOTR   ;display numeric data
      0018A4 CD 09 CE         [ 4] 4122         CALL     ONEP    ;increment address
      0018A7 CD 03 C8         [ 4] 4123 PDUM2:  CALL     DONXT
      0018AA 18 96                 4124         .word      PDUM1   ;loop till done
      0018AC 81               [ 4] 4125         RET
                                   4126 
                                   4127 ;       DUMP    ( a u -- )
                                   4128 ;       Dump u bytes from a,
                                   4129 ;       in a formatted manner.
      0018AD 18 7F                 4130         .word      LINK
                           0018AF  4131 LINK = . 
      0018AF 04                    4132         .byte      4
      0018B0 44 55 4D 50           4133         .ascii     "DUMP"
      0018B4                       4134 DUMP:
      0018B4 CD 05 96         [ 4] 4135         CALL     BASE
      0018B7 CD 04 32         [ 4] 4136         CALL     AT
      0018BA CD 04 A2         [ 4] 4137         CALL     TOR
      0018BD CD 0C E0         [ 4] 4138         CALL     HEX     ;save radix, set hex
      0018C0 CD 03 B4         [ 4] 4139         CALL     DOLIT
      0018C3 00 10                 4140         .word      16
      0018C5 CD 08 F4         [ 4] 4141         CALL     SLASH   ;change count to lines
      0018C8 CD 04 A2         [ 4] 4142         CALL     TOR     ;start count down loop
      0018CB CD 0E A0         [ 4] 4143 DUMP1:  CALL     CR
      0018CE CD 03 B4         [ 4] 4144         CALL     DOLIT
      0018D1 00 10                 4145         .word      16
      0018D3 CD 06 BF         [ 4] 4146         CALL     DDUP
      0018D6 CD 18 83         [ 4] 4147         CALL     DUMPP   ;display numeric
      0018D9 CD 06 94         [ 4] 4148         CALL     ROT
      0018DC CD 06 94         [ 4] 4149         CALL     ROT
      0018DF CD 0E 58         [ 4] 4150         CALL     SPACE
      0018E2 CD 0E 58         [ 4] 4151         CALL     SPACE
      0018E5 CD 18 61         [ 4] 4152         CALL     UTYPE   ;display printable characters
      0018E8 CD 03 C8         [ 4] 4153         CALL     DONXT
      0018EB 18 CB                 4154         .word      DUMP1   ;loop till done
      0018ED CD 04 CF         [ 4] 4155 DUMP3:  CALL     DROP
      0018F0 CD 04 83         [ 4] 4156         CALL     RFROM
      0018F3 CD 05 96         [ 4] 4157         CALL     BASE
      0018F6 CC 04 1B         [ 2] 4158         JP     STORE   ;restore radix
                                   4159 
                                   4160 ;       .S      ( ... -- ... )
                                   4161 ;        Display  contents of stack.
      0018F9 18 AF                 4162         .word      LINK
                           0018FB  4163 LINK = . 
      0018FB 02                    4164         .byte      2
      0018FC 2E 53                 4165         .ascii     ".S"
      0018FE                       4166 DOTS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0018FE CD 0E A0         [ 4] 4167         CALL     CR
      001901 CD 0A 7C         [ 4] 4168         CALL     DEPTH   ;stack depth
      001904 CD 04 A2         [ 4] 4169         CALL     TOR     ;start count down loop
      001907 20 09            [ 2] 4170         JRA     DOTS2   ;skip first pass
      001909 CD 04 96         [ 4] 4171 DOTS1:  CALL     RAT
      00190C CD 0A 93         [ 4] 4172 	CALL     PICK
      00190F CD 0F 3B         [ 4] 4173         CALL     DOT     ;index stack, display contents
      001912 CD 03 C8         [ 4] 4174 DOTS2:  CALL     DONXT
      001915 19 09                 4175         .word      DOTS1   ;loop till done
      001917 CD 0E DF         [ 4] 4176         CALL     DOTQP
      00191A 05                    4177         .byte      5
      00191B 20 3C 73 70 20        4178         .ascii     " <sp "
      001920 81               [ 4] 4179         RET
                                   4180 
                                   4181 ;       >NAME   ( ca -- na | F )
                                   4182 ;       Convert code address
                                   4183 ;       to a name address.
      001921 18 FB                 4184         .word      LINK
                           001923  4185 LINK = . 
      001923 05                    4186         .byte      5
      001924 3E 4E 41 4D 45        4187         .ascii     ">NAME"
      001929                       4188 TNAME:
      001929 CD 06 19         [ 4] 4189         CALL     CNTXT   ;vocabulary link
      00192C CD 04 32         [ 4] 4190 TNAM2:  CALL     AT
      00192F CD 04 D9         [ 4] 4191         CALL     DUPP    ;?last word in a vocabulary
      001932 CD 03 E7         [ 4] 4192         CALL     QBRAN
      001935 19 50                 4193         .word      TNAM4
      001937 CD 06 BF         [ 4] 4194         CALL     DDUP
      00193A CD 10 C0         [ 4] 4195         CALL     NAMET
      00193D CD 05 4E         [ 4] 4196         CALL     XORR    ;compare
      001940 CD 03 E7         [ 4] 4197         CALL     QBRAN
      001943 19 4A                 4198         .word      TNAM3
      001945 CD 09 B2         [ 4] 4199         CALL     CELLM   ;continue with next word
      001948 20 E2            [ 2] 4200         JRA     TNAM2
      00194A CD 04 E9         [ 4] 4201 TNAM3:  CALL     SWAPP
      00194D CC 04 CF         [ 2] 4202         JP     DROP
      001950 CD 06 B4         [ 4] 4203 TNAM4:  CALL     DDROP
      001953 CC 0A 3A         [ 2] 4204         JP     ZERO
                                   4205 
                                   4206 ;       .ID     ( na -- )
                                   4207 ;        Display  name at address.
      001956 19 23                 4208         .word      LINK
                           001958  4209 LINK = . 
      001958 03                    4210         .byte      3
      001959 2E 49 44              4211         .ascii     ".ID"
      00195C                       4212 DOTID:
      00195C CD 06 83         [ 4] 4213         CALL     QDUP    ;if zero no name
      00195F CD 03 E7         [ 4] 4214         CALL     QBRAN
      001962 19 72                 4215         .word      DOTI1
      001964 CD 0B 11         [ 4] 4216         CALL     COUNT
      001967 CD 03 B4         [ 4] 4217         CALL     DOLIT
      00196A 00 1F                 4218         .word      0x1F
      00196C CD 05 25         [ 4] 4219         CALL     ANDD    ;mask lexicon bits
      00196F CC 18 61         [ 2] 4220         JP     UTYPE
      001972 CD 0E DF         [ 4] 4221 DOTI1:  CALL     DOTQP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      001975 09                    4222         .byte      9
      001976 20 6E 6F 4E 61 6D 65  4223         .ascii     " noName"
      00197D 81               [ 4] 4224         RET
                                   4225 
                           000000  4226 WANT_SEE=0
                           000000  4227 .if WANT_SEE 
                                   4228 ;       SEE     ( -- ; <string> )
                                   4229 ;       A simple decompiler.
                                   4230 ;       Updated for byte machines.
                                   4231         .word      LINK
                                   4232 LINK = . 
                                   4233         .byte      3
                                   4234         .ascii     "SEE"
                                   4235 SEE:
                                   4236         CALL     TICK    ;starting address
                                   4237         CALL     CR
                                   4238         CALL     ONEM
                                   4239 SEE1:   CALL     ONEP
                                   4240         CALL     DUPP
                                   4241         CALL     AT
                                   4242         CALL     DUPP
                                   4243         CALL     QBRAN
                                   4244         .word    SEE2
                                   4245         CALL     TNAME   ;?is it a name
                                   4246 SEE2:   CALL     QDUP    ;name address or zero
                                   4247         CALL     QBRAN
                                   4248         .word    SEE3
                                   4249         CALL     SPACE
                                   4250         CALL     DOTID   ;display name
                                   4251         CALL     ONEP
                                   4252         JRA      SEE4
                                   4253 SEE3:   CALL     DUPP
                                   4254         CALL     CAT
                                   4255         CALL     UDOT    ;display number
                                   4256 SEE4:   CALL     NUFQ    ;user control
                                   4257         CALL     QBRAN
                                   4258         .word    SEE1
                                   4259         JP     DROP
                                   4260 .endif ; WANT_SEE 
                                   4261 
                                   4262 ;       WORDS   ( -- )
                                   4263 ;       Display names in vocabulary.
      00197E 19 58                 4264         .word      LINK
                           001980  4265 LINK = . 
      001980 05                    4266         .byte      5
      001981 57 4F 52 44 53        4267         .ascii     "WORDS"
      001986                       4268 WORDS:
      001986 CD 0E A0         [ 4] 4269         CALL     CR
      001989 CD 06 19         [ 4] 4270         CALL     CNTXT   ;only in context
      00198C CD 04 32         [ 4] 4271 WORS1:  CALL     AT
      00198F CD 06 83         [ 4] 4272         CALL     QDUP    ;?at end of list
      001992 CD 03 E7         [ 4] 4273         CALL     QBRAN
      001995 19 A8                 4274         .word      WORS2
      001997 CD 04 D9         [ 4] 4275         CALL     DUPP
      00199A CD 0E 58         [ 4] 4276         CALL     SPACE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00199D CD 19 5C         [ 4] 4277         CALL     DOTID   ;display a name
      0019A0 CD 09 B2         [ 4] 4278         CALL     CELLM
      0019A3 CD 03 FE         [ 4] 4279         CALL     BRAN
      0019A6 19 8C                 4280         .word      WORS1
      0019A8 81               [ 4] 4281 WORS2:  RET
                                   4282 
                                   4283         
                                   4284 ;; Hardware reset
                                   4285 
                                   4286 ;       hi      ( -- )
                                   4287 ;       Display sign-on message.
      0019A9 19 80                 4288         .word      LINK
                           0019AB  4289 LINK = . 
      0019AB 02                    4290         .byte      2
      0019AC 68 69                 4291         .ascii     "hi"
      0019AE                       4292 HI:
      0019AE CD 0E A0         [ 4] 4293         CALL     CR
      0019B1 CD 0E DF         [ 4] 4294         CALL     DOTQP   ;initialize I/O
      0019B4 0F                    4295         .byte      15
      0019B5 73 74 6D 38 65 46 6F  4296         .ascii     "stm8eForth v"
             72 74 68 20 76
      0019C1 33                    4297 	.byte      VER+'0'
      0019C2 2E                    4298         .byte      '.' 
      0019C3 30                    4299 	.byte      EXT+'0' ;version
      0019C4 CD 0E DF         [ 4] 4300         CALL    DOTQP
                           000000  4301 .if NUCLEO          
                                   4302         .byte 18
                                   4303         .ascii  " on NUCLEO-8S208RB"
                           000001  4304 .else ; DISCOVERY 
      0019C7 13                    4305         .byte 19
      0019C8 20 6F 6E 20 53 54 4D  4306         .ascii  " on STM8S-DISCOVERY"
             38 53 2D 44 49 53 43
             4F 56 45 52 59
                                   4307 .endif
      0019DB CC 0E A0         [ 2] 4308         JP     CR
                                   4309 
                           000000  4310 WANT_DEBUG=0
                           000000  4311 .if WANT_DEBUG 
                                   4312 ;       DEBUG      ( -- )
                                   4313 ;       Display sign-on message.
                                   4314 ;        .word      LINK
                                   4315 LINK = . 
                                   4316         .byte      5
                                   4317         .ascii     "DEBUG"
                                   4318 DEBUG:
                                   4319 	CALL DOLIT
                                   4320 	.word 0x65
                                   4321 	CALL EMIT
                                   4322 	CALL DOLIT
                                   4323 	.word 0
                                   4324  	CALL ZLESS 
                                   4325 	CALL DOLIT
                                   4326 	.word 0xFFFE
                                   4327 	CALL ZLESS 
                                   4328 	CALL UPLUS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4329  	CALL DROP 
                                   4330 	CALL DOLIT
                                   4331 	.word 3
                                   4332 	CALL UPLUS 
                                   4333 	CALL UPLUS 
                                   4334  	CALL DROP
                                   4335 	CALL DOLIT
                                   4336 	.word 0x43
                                   4337 	CALL UPLUS 
                                   4338  	CALL DROP
                                   4339 	CALL EMIT
                                   4340 	CALL DOLIT
                                   4341 	.word 0x4F
                                   4342 	CALL DOLIT
                                   4343 	.word 0x6F
                                   4344  	CALL XORR
                                   4345 	CALL DOLIT
                                   4346 	.word 0xF0
                                   4347  	CALL ANDD
                                   4348 	CALL DOLIT
                                   4349 	.word 0x4F
                                   4350  	CALL ORR
                                   4351 	CALL EMIT
                                   4352 	CALL DOLIT
                                   4353 	.word 8
                                   4354 	CALL DOLIT
                                   4355 	.word 6
                                   4356  	CALL SWAPP
                                   4357 	CALL OVER
                                   4358 	CALL XORR
                                   4359 	CALL DOLIT
                                   4360 	.word 3
                                   4361 	CALL ANDD 
                                   4362 	CALL ANDD
                                   4363 	CALL DOLIT
                                   4364 	.word 0x70
                                   4365 	CALL UPLUS 
                                   4366 	CALL DROP
                                   4367 	CALL EMIT
                                   4368 	CALL DOLIT
                                   4369 	.word 0
                                   4370 	CALL QBRAN
                                   4371 	.word DEBUG1
                                   4372 	CALL DOLIT
                                   4373 	.word 0x3F
                                   4374 DEBUG1:
                                   4375 	CALL DOLIT
                                   4376 	.word 0xFFFF
                                   4377 	CALL QBRAN
                                   4378 	.word DEBUG2
                                   4379 	CALL DOLIT
                                   4380 	.word 0x74
                                   4381 	CALL BRAN
                                   4382 	.word DEBUG3
                                   4383 DEBUG2:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4384 	CALL DOLIT
                                   4385 	.word 0x21
                                   4386 DEBUG3:
                                   4387 	CALL EMIT
                                   4388 	CALL DOLIT
                                   4389 	.word 0x68
                                   4390 	CALL DOLIT
                                   4391 	.word 0x80
                                   4392 	CALL STORE
                                   4393 	CALL DOLIT
                                   4394 	.word 0x80
                                   4395 	CALL AT
                                   4396 	CALL EMIT
                                   4397 	CALL DOLIT
                                   4398 	.word 0x4D
                                   4399 	CALL TOR
                                   4400 	CALL RAT
                                   4401 	CALL RFROM
                                   4402 	CALL ANDD
                                   4403 	CALL EMIT
                                   4404 	CALL DOLIT
                                   4405 	.word 0x61
                                   4406 	CALL DOLIT
                                   4407 	.word 0xA
                                   4408 	CALL TOR
                                   4409 DEBUG4:
                                   4410 	CALL DOLIT
                                   4411 	.word 1
                                   4412 	CALL UPLUS 
                                   4413 	CALL DROP
                                   4414 	CALL DONXT
                                   4415 	.word DEBUG4
                                   4416 	CALL EMIT
                                   4417 	CALL DOLIT
                                   4418 	.word 0x656D
                                   4419 	CALL DOLIT
                                   4420 	.word 0x100
                                   4421 	CALL UMSTA
                                   4422 	CALL SWAPP
                                   4423 	CALL DOLIT
                                   4424 	.word 0x100
                                   4425 	CALL UMSTA
                                   4426 	CALL SWAPP 
                                   4427 	CALL DROP
                                   4428 	CALL EMIT
                                   4429 	CALL EMIT
                                   4430 	CALL DOLIT
                                   4431 	.word 0x2043
                                   4432 	CALL DOLIT
                                   4433 	.word 0
                                   4434 	CALL DOLIT
                                   4435 	.word 0x100
                                   4436 	CALL UMMOD
                                   4437 	CALL EMIT
                                   4438 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4439 	;JP ORIG
                                   4440 	RET
                                   4441 .endif ; WANT_DEBUG 
                                   4442 
                                   4443 
                                   4444 ;       'BOOT   ( -- a )
                                   4445 ;       The application startup vector.
      0019DE 19 AB                 4446         .word      LINK
                           0019E0  4447 LINK = . 
      0019E0 05                    4448         .byte      5
      0019E1 27 42 4F 4F 54        4449         .ascii     "'BOOT"
      0019E6                       4450 TBOOT:
      0019E6 CD 05 86         [ 4] 4451         CALL     DOVAR
      0019E9 40 02                 4452         .word    APP_RUN      ;application to boot
                                   4453 
                                   4454 ;       COLD    ( -- )
                                   4455 ;       The hilevel cold start s=ence.
      0019EB 19 E0                 4456         .word      LINK
                           0019ED  4457         LINK = . 
      0019ED 04                    4458         .byte      4
      0019EE 43 4F 4C 44           4459         .ascii     "COLD"
      0019F2                       4460 COLD:
                           000000  4461 .if WANT_DEBUG
                                   4462         CALL DEBUG
                                   4463 .endif ; WANT_DEBUG
      0019F2 CD 03 B4         [ 4] 4464 COLD1:  CALL     DOLIT
      0019F5 00 2B                 4465         .word      UZERO
      0019F7 CD 03 B4         [ 4] 4466 	CALL     DOLIT
      0019FA 00 06                 4467         .word      UPP
      0019FC CD 03 B4         [ 4] 4468         CALL     DOLIT
      0019FF 00 1A                 4469 	.word      UEND-UZERO
      001A01 CD 0B 75         [ 4] 4470         CALL     CMOVE   ;initialize user area
                                   4471 
                                   4472 ; if APP_RUN==0 initialize with ca de 'hi'  
      001A04 90 CE 40 02      [ 2] 4473         ldw y,APP_RUN 
      001A08 26 0B            [ 1] 4474         jrne 0$
      001A0A 1D 00 02         [ 2] 4475         subw x,#CELLL 
      001A0D 90 AE 19 AE      [ 2] 4476         ldw y,#HI  
      001A11 FF               [ 2] 4477         ldw (x),y
      001A12 CD 1B 0D         [ 4] 4478         call UPDATRUN 
      001A15                       4479 0$:        
                                   4480 ; update LAST with APP_LAST 
                                   4481 ; if APP_LAST > LAST else do the opposite
      001A15 90 CE 40 00      [ 2] 4482         ldw y,APP_LAST 
      001A19 90 B3 1A         [ 2] 4483         cpw y,ULAST 
      001A1C 22 05            [ 1] 4484         jrugt 1$ 
                                   4485 ; save LAST at APP_LAST  
      001A1E CD 1A F5         [ 4] 4486         call UPDATLAST 
      001A21 20 06            [ 2] 4487         jra 2$
      001A23                       4488 1$: ; update LAST with APP_LAST 
      001A23 90 BF 1A         [ 2] 4489         ldw ULAST,y
      001A26 90 BF 14         [ 2] 4490         ldw UCNTXT,y
      001A29                       4491 2$:  
                                   4492 ; update APP_CP if < app_space 
      001A29 90 CE 40 04      [ 2] 4493         ldw y,APP_CP  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A2D 90 B3 18         [ 2] 4494         cpw y,UCP   
      001A30 24 06            [ 1] 4495         jruge 3$ 
      001A32 CD 1B 1E         [ 4] 4496         call UPDATCP
      001A35 90 BE 18         [ 2] 4497         ldw y,UCP   
      001A38                       4498 3$:
      001A38 90 BF 18         [ 2] 4499         ldw UCP,y                 
                                   4500 ; update UVP with APP_VP  
                                   4501 ; if APP_VP>UVP else do the opposite 
      001A3B 90 CE 40 06      [ 2] 4502         ldw y,APP_VP 
      001A3F 90 B3 16         [ 2] 4503         cpw y,UVP 
      001A42 22 05            [ 1] 4504         jrugt 4$
      001A44 CD 1B 35         [ 4] 4505         call UPDATVP 
      001A47 20 03            [ 2] 4506         jra 6$
      001A49                       4507 4$: ; update UVP with APP_VP 
      001A49 90 BF 16         [ 2] 4508         ldw UVP,y 
      001A4C                       4509 6$:      
      001A4C CD 13 A3         [ 4] 4510         CALL     PRESE   ;initialize data stack and TIB
      001A4F CD 19 E6         [ 4] 4511         CALL     TBOOT
      001A52 CD 0B 5E         [ 4] 4512         CALL     ATEXE   ;application boot
      001A55 CD 16 6C         [ 4] 4513         CALL     OVERT
      001A58 CC 13 C0         [ 2] 4514         JP     QUIT    ;start interpretation
                                   4515 
                                   4516 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4517         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001A5B 19 ED                   30     .word LINK 
                           001A5D    31     LINK=.
      001A5D 03                      32     .byte 3 
      001A5E 46 50 21                33     .ascii "FP!"
      001A61                         34 FPSTOR:
      001A61 90 93            [ 1]   35     ldw y,x
      001A63 90 FE            [ 2]   36     ldw y,(y)
      001A65 90 9F            [ 1]   37     ld a,yl 
      001A67 B7 32            [ 1]   38     ld FPTR,a 
      001A69 1C 00 02         [ 2]   39     addw x,#CELLL 
      001A6C 90 93            [ 1]   40     ldw y,x 
      001A6E 90 FE            [ 2]   41     ldw y,(y)
      001A70 90 BF 33         [ 2]   42     ldw PTR16,y
      001A73 1C 00 02         [ 2]   43     addw x,#CELLL 
      001A76 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001A77 1A 5D                   51     .word LINK 
                           001A79    52 LINK=.
      001A79 06                      53     .byte 6 
      001A7A 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001A80                         55 EEPROM: 
      001A80 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001A84 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001A87 EF 02            [ 2]   58     ldw (2,x),y 
      001A89 90 5F            [ 1]   59     clrw y 
      001A8B FF               [ 2]   60     ldw (x),y 
      001A8C 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001A8D 1A 79                   67 	.word LINK 
                           001A8F    68 	LINK=.
      001A8F 08                      69 	.byte 8 
      001A90 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001A98                         71 EEPLAST:
      001A98 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001A9B 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001A9F EF 02            [ 2]   74 	ldw (2,x),y 
      001AA1 90 5F            [ 1]   75 	clrw y 
      001AA3 FF               [ 2]   76 	ldw (x),y 
      001AA4 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001AA5 1A 8F                   83 	.word LINK 
                           001AA7    84 	LINK=.
      001AA7 07                      85 	.byte 7
      001AA8 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001AAF                         87 EEPRUN:
      001AAF 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001AB2 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001AB6 EF 02            [ 2]   90 	ldw (2,x),y 
      001AB8 90 5F            [ 1]   91 	clrw y 
      001ABA FF               [ 2]   92 	ldw (x),y 
      001ABB 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001ABC 1A A7                   99 	.word LINK
                           001ABE   100 	LINK=.
      001ABE 06                     101 	.byte 6 
      001ABF 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001AC5                        103 EEPCP:
      001AC5 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001AC8 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001ACC EF 02            [ 2]  106 	ldw (2,x),y 
      001ACE 90 5F            [ 1]  107 	clrw y 
      001AD0 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001AD1 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001AD2 1A BE                  115 	.word LINK
                           001AD4   116 	LINK=.
      001AD4 06                     117 	.byte 6
      001AD5 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001ADB                        119 EEPVP:
      001ADB 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001ADE 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001AE2 EF 02            [ 2]  122 	ldw (2,x),y 
      001AE4 90 5F            [ 1]  123 	clrw y 
      001AE6 FF               [ 2]  124 	ldw (x),y 
      001AE7 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001AE8 1A D4                  131 	.word LINK 
                           001AEA   132 	LINK=.
      001AEA 0A                     133 	.byte 10
      001AEB 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001AF5                        135 UPDATLAST:
      001AF5 CD 06 45         [ 4]  136 	call LAST
      001AF8 CD 04 32         [ 4]  137 	call AT  
      001AFB CD 1A 98         [ 4]  138 	call EEPLAST
      001AFE CC 1C C8         [ 2]  139 	jp EESTORE 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B01 1A EA                  145 	.word LINK
                           001B03   146 	LINK=.
      001B03 09                     147 	.byte 9
      001B04 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B0D                        149 UPDATRUN:
      001B0D CD 1A AF         [ 4]  150 	call EEPRUN
      001B10 CC 1C C8         [ 2]  151 	jp EESTORE 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B13 1B 03                  157 	.word LINK 
                           001B15   158 	LINK=.
      001B15 08                     159 	.byte 8 
      001B16 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001B1E                        161 UPDATCP:
      001B1E CD 06 35         [ 4]  162 	call CPP 
      001B21 CD 04 32         [ 4]  163 	call AT 
      001B24 CD 1A C5         [ 4]  164 	call EEPCP 
      001B27 CC 1C C8         [ 2]  165 	jp EESTORE 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B2A 1B 15                  171 	.word LINK
                           001B2C   172 	LINK=.
      001B2C 08                     173 	.byte 8 
      001B2D 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B35                        175 UPDATVP:
      001B35 CD 06 27         [ 4]  176 	call VPP 
      001B38 CD 04 32         [ 4]  177 	call AT
      001B3B CD 1A DB         [ 4]  178 	call EEPVP 
      001B3E CC 1C C8         [ 2]  179 	jp EESTORE
                                    180 	
                           000000   181 .if NUCLEO
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
                                    186     .word LINK 
                                    187 LINK=.
                                    188     .byte 2
                                    189     .ascii "F@"
                                    190 FARAT:
                                    191     call FPSTOR
                                    192 	jp EE_READ 
                                    193 
                                    194 
                                    195 ;-------------------------------------
                                    196 ; fetch C at address over 65535 
                                    197 ; FC@ ( ud -- c)
                                    198 ;-------------------------------------
                                    199     .word LINK
                                    200     LINK=.
                                    201     .byte 3 
                                    202     .ascii "FC@" 
                                    203 FARCAT:
                                    204     call FPSTOR
                                    205 	jp EE_CREAD  
                                    206 .endif ; NUCLEO 
                                    207 
                                    208 ;----------------------------------
                                    209 ; UNLOCK EEPROM/OPT for writing/erasing
                                    210 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    211 ;  UNLKEE   ( -- )
                                    212 ;----------------------------------
      001B41 1B 2C                  213     .word LINK 
                           001B43   214 LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B43 06                     215     .byte 6 
      001B44 55 4E 4C 4B 45 45      216     .ascii "UNLKEE"
      001B4A                        217 UNLKEE:
      001B4A 35 00 50 5B      [ 1]  218 	mov FLASH_CR2,#0 
      001B4E 35 FF 50 5C      [ 1]  219 	mov FLASH_NCR2,#0xFF 
      001B52 35 AE 50 64      [ 1]  220 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B56 35 56 50 64      [ 1]  221     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B5A 72 07 50 5F FB   [ 2]  222 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B5F 81               [ 4]  223 	ret
                                    224 
                                    225 ;----------------------------------
                                    226 ; UNLOCK FLASH for writing/erasing
                                    227 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    228 ; UNLKFL  ( -- )
                                    229 ;----------------------------------
      001B60 1B 43                  230     .word LINK 
                           001B62   231 LINK=. 
      001B62 06                     232     .byte 6 
      001B63 55 4E 4C 4B 46 4C      233     .ascii "UNLKFL"    
      001B69                        234 UNLKFL:
      001B69 35 00 50 5B      [ 1]  235 	mov FLASH_CR2,#0 
      001B6D 35 FF 50 5C      [ 1]  236 	mov FLASH_NCR2,#0xFF 
      001B71 35 56 50 62      [ 1]  237 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001B75 35 AE 50 62      [ 1]  238 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001B79 72 03 50 5F FB   [ 2]  239 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001B7E 81               [ 4]  240 	ret
                                    241 
                                    242 ;-----------------------------
                                    243 ; UNLOCK FLASH or EEPROM 
                                    244 ; according to FPTR address 
                                    245 ;  UNLOCK ( -- )
                                    246 ;-----------------------------
      001B7F 1B 62                  247 	.word LINK 
                           001B81   248 	LINK=.
      001B81 06                     249 	.byte 6
      001B82 55 4E 4C 4F 43 4B      250 	.ascii "UNLOCK"
      001B88                        251 UNLOCK:
                                    252 ; put addr[15:0] in Y, for bounds check.
      001B88 90 BE 33         [ 2]  253 	ldw y,PTR16   ; Y=addr15:0
                                    254 ; check addr[23:16], if <> 0 then it is extened flash memory
      001B8B 3D 32            [ 1]  255 	tnz FPTR 
      001B8D 26 16            [ 1]  256 	jrne 4$
      001B8F 90 A3 80 00      [ 2]  257     cpw y,#FLASH_BASE
      001B93 24 10            [ 1]  258     jruge 4$
      001B95 90 A3 40 00      [ 2]  259 	cpw y,#EEPROM_BASE  
      001B99 25 0D            [ 1]  260     jrult 9$
      001B9B 90 A3 48 7F      [ 2]  261 	cpw y,#OPTION_END 
      001B9F 22 07            [ 1]  262 	jrugt 9$
      001BA1 CD 1B 4A         [ 4]  263 	call UNLKEE
      001BA4 81               [ 4]  264 	ret 
      001BA5 CD 1B 69         [ 4]  265 4$: call UNLKFL
      001BA8 81               [ 4]  266 9$: ret 
                                    267 
                                    268 ;-------------------------
                                    269 ; LOCK write access to 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    270 ; FLASH and EEPROM 
                                    271 ; LOCK ( -- )
                                    272 ;-------------------------
      001BA9 1B 81                  273 	.word LINK 
                           001BAB   274 	LINK=.
      001BAB 04                     275 	.byte 4 
      001BAC 4C 4F 43 4B            276 	.ascii "LOCK" 
      001BB0                        277 LOCK: 
      001BB0 72 13 50 5F      [ 1]  278 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BB4 72 17 50 5F      [ 1]  279 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BB8 81               [ 4]  280 	ret 
                                    281 
                                    282 ;-------------------------
                                    283 ; increment FPTR 
                                    284 ; INC-FPTR ( -- )
                                    285 ;-------------------------
      001BB9 1B AB                  286 	.word LINK 
                           001BBB   287 	LINK=. 
      001BBB 08                     288 	.byte 8 
      001BBC 49 4E 43 2D 46 50 54   289 	.ascii "INC-FPTR" 
             52
      001BC4                        290 INC_FPTR:
      001BC4 3C 34            [ 1]  291 	inc PTR8 
      001BC6 26 0C            [ 1]  292 	jrne 1$
      001BC8 90 89            [ 2]  293 	pushw y 
      001BCA 90 BE 32         [ 2]  294 	ldw y,FPTR 
      001BCD 90 5C            [ 1]  295 	incw y 
      001BCF 90 BF 32         [ 2]  296 	ldw FPTR,y
      001BD2 90 85            [ 2]  297 	popw y  
      001BD4 81               [ 4]  298 1$: ret 
                                    299 
                                    300 ;------------------------------
                                    301 ; add u to FPTR 
                                    302 ; PTR+ ( u -- )
                                    303 ;------------------------------
      001BD5 1B BB                  304 	.word LINK 
                           001BD7   305 	LINK=.
      001BD7 04                     306 	.byte 4 
      001BD8 50 54 52 2B            307 	.ascii "PTR+"
      001BDC                        308 PTRPLUS:
      001BDC 90 93            [ 1]  309 	ldw y,x 
      001BDE 1C 00 02         [ 2]  310 	addw x,#CELLL 
      001BE1 72 B9 00 33      [ 2]  311 	addw y,PTR16 
      001BE5 90 BF 33         [ 2]  312 	ldw PTR16,y  
      001BE8 24 02            [ 1]  313 	jrnc 1$
      001BEA 3C 32            [ 1]  314 	inc FPTR 
      001BEC 81               [ 4]  315 1$: ret 
                                    316 
                                    317 ;---------------------------------
                                    318 ; read word at address pointed FPTR
                                    319 ; increment FPTR 
                                    320 ; EE-READ ( -- w )
                                    321 ;------------------------------------
      001BED 1B D7                  322 	.word LINK 
                           001BEF   323 	LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001BEF 07                     324 	.byte 7 
      001BF0 45 45 2D 52 45 41 44   325 	.ascii "EE-READ"
      001BF7                        326 EE_READ:
      001BF7 1D 00 02         [ 2]  327 	subw x,#CELLL 
      001BFA 92 BC 00 32      [ 5]  328 	ldf a,[FPTR]
      001BFE 90 95            [ 1]  329 	ld yh,a 
      001C00 CD 1B C4         [ 4]  330 	call INC_FPTR 
      001C03 92 BC 00 32      [ 5]  331 	ldf a,[FPTR]
      001C07 CD 1B C4         [ 4]  332 	call INC_FPTR 
      001C0A 90 97            [ 1]  333 	ld yl,a 
      001C0C FF               [ 2]  334 	ldw (x),y 
      001C0D 81               [ 4]  335 	ret 
                                    336 
                                    337 ;---------------------------------------
                                    338 ; Read byte at address pointed by FPTR 
                                    339 ; EE-CREAD ( -- c )
                                    340 ;---------------------------------------
      001C0E 1B EF                  341 	.word LINK 
                           001C10   342 	LINK=.
      001C10 08                     343 	.byte 8
      001C11 45 45 2D 43 52 45 41   344 	.ascii "EE-CREAD" 
             44
      001C19                        345 EE_CREAD:
      001C19 1D 00 02         [ 2]  346 	subw x,#CELLL 
      001C1C 92 BC 00 32      [ 5]  347 	ldf a,[FPTR]	
      001C20 CD 1B C4         [ 4]  348 	call INC_FPTR
      001C23 90 5F            [ 1]  349 	clrw y 
      001C25 90 97            [ 1]  350 	ld yl,a 
      001C27 FF               [ 2]  351 	ldw (x),y 
      001C28 81               [ 4]  352 	ret 
                                    353 
                                    354 ;----------------------------
                                    355 ; write a byte at address pointed 
                                    356 ; by FPTR and increment FPTR.
                                    357 ; Expect pointer already initialized 
                                    358 ; and memory unlocked 
                                    359 ; WR-BYTE ( c -- )
                                    360 ;----------------------------
      001C29 1C 10                  361 	.word LINK 
                           001C2B   362 	LINK=. 
      001C2B 07                     363 	.byte 7 
      001C2C 57 52 2D 42 59 54 45   364 	.ascii "WR-BYTE" 
                                    365 
      001C33                        366 WR_BYTE:
      001C33 90 93            [ 1]  367 	ldw y,x 
      001C35 90 FE            [ 2]  368 	ldw y,(y)
      001C37 1C 00 02         [ 2]  369 	addw x,#CELLL 
      001C3A 90 9F            [ 1]  370 	ld a,yl
      001C3C 92 BD 00 32      [ 4]  371 	ldf [FPTR],a
      001C40 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C45 CC 1B C4         [ 2]  373 	jp INC_FPTR 
                                    374 
                                    375 ;---------------------------------------
                                    376 ; write a word at address pointed 
                                    377 ; by FPTR and increment FPTR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    378 ; Expect pointer already initialzed 
                                    379 ; and memory unlocked 
                                    380 ; WR-WORD ( w -- )
                                    381 ;---------------------------------------
      001C48 1C 2B                  382 	.word LINK 
                           001C4A   383 	LINK=.
      001C4A 07                     384 	.byte 7 
      001C4B 57 52 2D 57 4F 52 44   385 	.ascii "WR-WORD" 
      001C52                        386 WR_WORD:
      001C52 90 93            [ 1]  387 	ldw y,x
      001C54 90 FE            [ 2]  388 	ldw y,(y)
      001C56 1C 00 02         [ 2]  389 	addw x,#CELLL 
      001C59 90 9E            [ 1]  390 	ld a,yh 
      001C5B 92 BD 00 32      [ 4]  391 	ldf [FPTR],a
      001C5F 72 05 50 5F FB   [ 2]  392 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C64 CD 1B C4         [ 4]  393 	call INC_FPTR 
      001C67 90 9F            [ 1]  394 	ld a,yl 
      001C69 92 BD 00 32      [ 4]  395 	ldf [FPTR],a
      001C6D 72 05 50 5F FB   [ 2]  396 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C72 CC 1B C4         [ 2]  397 	jp INC_FPTR 
                                    398 
                                    399 
                                    400 ;---------------------------------------
                                    401 ; write a byte to FLASH or EEPROM/OPTION  
                                    402 ; EEC!  (c ud -- )
                                    403 ;---------------------------------------
      001C75 1C 4A                  404     .word LINK 
                           001C77   405 	LINK=.
      001C77 04                     406     .byte 4 
      001C78 45 45 43 21            407     .ascii "EEC!"
                                    408 	; local variables 
                           000001   409 	BTW = 1   ; byte to write offset on stack
                           000002   410     OPT = 2 
                           000002   411 	VSIZE = 2
      001C7C                        412 EECSTORE:
      001C7C 52 02            [ 2]  413 	sub sp,#VSIZE
      001C7E CD 1A 61         [ 4]  414     call FPSTOR
      001C81 E6 01            [ 1]  415 	ld a,(1,x)
      001C83 43               [ 1]  416 	cpl a 
      001C84 6B 01            [ 1]  417 	ld (BTW,sp),a ; byte to write 
      001C86 0F 02            [ 1]  418 	clr (OPT,sp)  ; OPTION flag
      001C88 CD 1B 88         [ 4]  419 	call UNLOCK 
                                    420 	; check if option
      001C8B 3D 32            [ 1]  421 	tnz FPTR 
      001C8D 26 19            [ 1]  422 	jrne 2$
      001C8F 90 BE 33         [ 2]  423 	ldw y,PTR16 
      001C92 90 A3 48 00      [ 2]  424 	cpw y,#OPTION_BASE
      001C96 2B 10            [ 1]  425 	jrmi 2$
      001C98 90 A3 48 80      [ 2]  426 	cpw y,#OPTION_END+1
      001C9C 2A 0A            [ 1]  427 	jrpl 2$
      001C9E 03 02            [ 1]  428 	cpl (OPT,sp)
                                    429 	; OPTION WRITE require this UNLOCK 
      001CA0 72 1E 50 5B      [ 1]  430     bset FLASH_CR2,#FLASH_CR2_OPT
      001CA4 72 1F 50 5C      [ 1]  431     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001CA8                        432 2$: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001CA8 CD 1C 33         [ 4]  433 	call WR_BYTE 	
      001CAB 0D 02            [ 1]  434 	tnz (OPT,sp)
      001CAD 27 0D            [ 1]  435 	jreq 3$ 
      001CAF 7B 01            [ 1]  436     ld a,(BTW,sp)
      001CB1 90 5F            [ 1]  437     clrw y
      001CB3 90 97            [ 1]  438 	ld yl,a 
      001CB5 1D 00 02         [ 2]  439 	subw x,#CELLL 
      001CB8 FF               [ 2]  440 	ldw (x),y 
      001CB9 CD 1C 33         [ 4]  441 	call WR_BYTE
      001CBC                        442 3$: 
      001CBC CD 1B B0         [ 4]  443 	call LOCK 
      001CBF 5B 02            [ 2]  444 	addw sp,#VSIZE 
      001CC1 81               [ 4]  445     ret
                                    446 
                                    447 ;------------------------------
                                    448 ; write integer in FLASH|EEPROM
                                    449 ; EE! ( n ud -- )
                                    450 ;------------------------------
      001CC2 1C 77                  451 	.word LINK 
                           001CC4   452 	LINK=.
      001CC4 03                     453 	.byte 3 
      001CC5 45 45 21               454 	.ascii "EE!"
      001CC8                        455 EESTORE:
      001CC8 CD 1A 61         [ 4]  456 	call FPSTOR 
      001CCB CD 1B 88         [ 4]  457 	call UNLOCK 
      001CCE 90 93            [ 1]  458 	ldw y,x 
      001CD0 90 FE            [ 2]  459 	ldw y,(y)
      001CD2 90 89            [ 2]  460 	pushw y 
      001CD4 90 5E            [ 1]  461 	swapw y 
      001CD6 FF               [ 2]  462 	ldw (x),y 
      001CD7 CD 1C 33         [ 4]  463 	call WR_BYTE 
      001CDA 90 85            [ 2]  464 	popw y 
      001CDC 1D 00 02         [ 2]  465 	subw x,#CELLL
      001CDF FF               [ 2]  466 	ldw (x),y 
      001CE0 CD 1C 33         [ 4]  467 	call WR_BYTE
      001CE3 CC 1B B0         [ 2]  468 	jp LOCK 
                                    469 
                                    470 
                                    471 ;----------------------------
                                    472 ; Erase flash memory row 
                                    473 ; stm8s208 as 128 bytes rows
                                    474 ; ROW-ERASE ( ud -- )
                                    475 ;----------------------------
      001CE6 1C C4                  476 	.word LINK 
                           001CE8   477 	LINK=. 
      001CE8 09                     478 	.byte 9 
      001CE9 52 4F 57 2D 45 52 41   479 	.ascii "ROW-ERASE" 
             53 45
      001CF2                        480 row_erase:
      001CF2 CD 1A 61         [ 4]  481 	call FPSTOR
                                    482 ;code must be execute from RAM 
                                    483 ;copy routine to PAD 
      001CF5 1D 00 02         [ 2]  484 	subw x,#CELLL 
      001CF8 90 AE 1D 3F      [ 2]  485 	ldw y,#row_erase_proc
      001CFC FF               [ 2]  486 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001CFD CD 0B 39         [ 4]  487 	call PAD 
      001D00 90 AE 1D 66      [ 2]  488 	ldw y,#row_erase_proc_end 
      001D04 72 A2 1D 3F      [ 2]  489 	subw y,#row_erase_proc
      001D08 1D 00 02         [ 2]  490 	subw x,#CELLL 
      001D0B FF               [ 2]  491 	ldw (x),y 
      001D0C CD 0B 75         [ 4]  492 	call CMOVE 
      001D0F                        493 block_erase:
      001D0F 90 BE 33         [ 2]  494 	ldw y,FPTR+1
      001D12 90 A3 23 00      [ 2]  495 	cpw y,#app_space 
      001D16 2A 13            [ 1]  496 	jrpl erase_flash 
                                    497 ; erase EEPROM block
      001D18 90 A3 40 00      [ 2]  498 	cpw y,#EEPROM_BASE 
      001D1C 24 01            [ 1]  499 	jruge 1$
      001D1E 81               [ 4]  500 	ret ; bad address 
      001D1F 90 A3 43 FF      [ 2]  501 1$: cpw y,#EEPROM_END 
      001D23 23 01            [ 2]  502 	jrule 2$ 
      001D25 81               [ 4]  503 	ret ; bad address 
      001D26                        504 2$:	
      001D26 CD 1B 4A         [ 4]  505 	call UNLKEE 
      001D29 20 03            [ 2]  506 	jra proceed_erase
                                    507 ; erase flash block:
      001D2B                        508 erase_flash:
      001D2B CD 1B 69         [ 4]  509 	call UNLKFL 
      001D2E                        510 proceed_erase:
      001D2E CD 0B 39         [ 4]  511 	call PAD 
      001D31 90 93            [ 1]  512 	ldw y,x
      001D33 90 FE            [ 2]  513 	ldw y,(y)
      001D35 1C 00 02         [ 2]  514 	addw x,#CELLL  
      001D38 90 FD            [ 4]  515 	call (y) 
      001D3A 72 17 50 5F      [ 1]  516 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D3E 81               [ 4]  517 	ret 
                                    518 
                                    519 ; this routine is to be copied to PAD 
      001D3F                        520 row_erase_proc:
      001D3F 35 20 50 5B      [ 1]  521 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D43 35 DF 50 5C      [ 1]  522 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D47 4F               [ 1]  523 	clr a 
      001D48 90 5F            [ 1]  524 	clrw y 
      001D4A 91 A7 00 32      [ 1]  525 	ldf ([FPTR],y),a
      001D4E 90 5C            [ 1]  526     incw y
      001D50 91 A7 00 32      [ 1]  527 	ldf ([FPTR],y),a
      001D54 90 5C            [ 1]  528     incw y
      001D56 91 A7 00 32      [ 1]  529 	ldf ([FPTR],y),a
      001D5A 90 5C            [ 1]  530     incw y
      001D5C 91 A7 00 32      [ 1]  531 	ldf ([FPTR],y),a
      001D60 72 05 50 5F FB   [ 2]  532 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D65 81               [ 4]  533 	ret
      001D66                        534 row_erase_proc_end:
                                    535 
                                    536 
                                    537 ;-----------------------------------
                                    538 ; block programming must be 
                                    539 ; executed from RAM 
                                    540 ; initial contidions: 
                                    541 ; 		memory unlocked
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    542 ;       FPTR initialized 
                                    543 ; input: 
                                    544 ;    x   buffer address 
                                    545 ;-----------------------------------
                           000001   546 	BCNT=1 
      001D66                        547 copy_buffer:
      001D66 4B 80            [ 1]  548 	push #BLOCK_SIZE  
                                    549 ;enable block programming 
      001D68 72 10 50 5B      [ 1]  550 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D6C 72 11 50 5C      [ 1]  551 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D70 90 5F            [ 1]  552 	clrw y
      001D72 F6               [ 1]  553 1$:	ld a,(x)
      001D73 91 A7 00 32      [ 1]  554 	ldf ([FPTR],y),a
      001D77 5C               [ 1]  555 	incw x 
      001D78 90 5C            [ 1]  556 	incw y 
      001D7A 0A 01            [ 1]  557 	dec (BCNT,sp)
      001D7C 26 F4            [ 1]  558 	jrne 1$
                                    559 ; wait EOP bit 
      001D7E 72 05 50 5F FB   [ 2]  560 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D83 84               [ 1]  561 	pop a ; remove BCNT from stack 
      001D84 81               [ 4]  562 	ret 
      001D85                        563 copy_buffer_end:
                                    564 
                                    565 ;-------------------------
                                    566 ; move program_row to RAM 
                                    567 ; in TIB 
                                    568 ;------------------------
      001D85                        569 copy_prog_to_ram:
      001D85 1D 00 06         [ 2]  570 	subw x,#6
      001D88 90 AE 1D 66      [ 2]  571 	ldw y,#copy_buffer 
      001D8C EF 04            [ 2]  572 	ldw (4,x),y 
      001D8E 90 AE 07 00      [ 2]  573 	ldw y,#TIBBASE
      001D92 EF 02            [ 2]  574 	ldw (2,x),y 
      001D94 90 AE 1D 85      [ 2]  575 	ldw y,#copy_buffer_end 
      001D98 72 A2 1D 66      [ 2]  576 	subw y,#copy_buffer  
      001D9C FF               [ 2]  577 	ldw (x),y 
      001D9D CD 0B 75         [ 4]  578 	call CMOVE 
      001DA0 81               [ 4]  579 	ret 
                                    580 
                                    581 
                                    582 ;-----------------------------
                                    583 ; write a row in FLASH/EEPROM 
                                    584 ; WR-ROW ( a ud -- )
                                    585 ; a -> address 128 byte buffer to write 
                                    586 ; ud ->  row address in FLASH|EEPROM 
                                    587 ;-----------------------------
      001DA1 1C E8                  588 	.word LINK 
                           001DA3   589 	LINK=.
      001DA3 06                     590 	.byte 6 
      001DA4 57 52 2D 52 4F 57      591 	.ascii "WR-ROW"
      001DAA                        592 write_row:
      001DAA CD 1A 61         [ 4]  593 	call FPSTOR
                                    594 ; align to FLASH block 
      001DAD A6 80            [ 1]  595 	ld a,#0x80 
      001DAF B4 34            [ 1]  596 	and a,PTR8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001DB1 B7 34            [ 1]  597 	ld PTR8,a  
      001DB3 CD 1D 85         [ 4]  598 	call copy_prog_to_ram
      001DB6 CD 1B 88         [ 4]  599 	call UNLOCK
      001DB9 90 93            [ 1]  600 	ldw y,x 
      001DBB 90 FE            [ 2]  601 	ldw y,(y)
      001DBD 1C 00 02         [ 2]  602 	addw x,#CELLL 
      001DC0 89               [ 2]  603 	pushw x 
      001DC1 93               [ 1]  604 	ldw x,y ; buffer address in x 
      001DC2 CD 07 00         [ 4]  605 	call TIBBASE
      001DC5 CD 1B B0         [ 4]  606 	call LOCK
      001DC8 85               [ 2]  607 	popw x 
      001DC9 81               [ 4]  608 	ret 
                                    609 
                                    610 ;-------------------------------------
                                    611 ; change value of OPTION register 
                                    612 ; SET-OPT (c n -- ) 
                                    613 ; c new value.
                                    614 ; n OPT  number {1..7}
                                    615 ;--------------------------------------
      001DCA 1D A3                  616 		.word LINK 
                           001DCC   617 		LINK=.
      001DCC 07                     618 		.byte 7 
      001DCD 53 45 54 2D 4F 50 54   619 		.ascii "SET-OPT" 
      001DD4                        620 set_option: 
      001DD4 90 93            [ 1]  621 		ldw y,x 
      001DD6 90 FE            [ 2]  622 		ldw y,(y)
      001DD8 27 06            [ 1]  623 		jreq 1$
      001DDA 90 A3 00 07      [ 2]  624 		cpw y,#7 
      001DDE 23 04            [ 2]  625 		jrule 2$ 
                                    626 ; invalid OPTION number 		
      001DE0 1C 00 04         [ 2]  627 1$:		addw x,#2*CELLL
      001DE3 81               [ 4]  628 		ret
      001DE4 90 58            [ 2]  629 2$:		sllw y 
      001DE6 72 A9 47 FF      [ 2]  630 		addw y,#OPTION_BASE-1
      001DEA FF               [ 2]  631 		ldw (x),y 
      001DEB 1D 00 02         [ 2]  632 		subw x,#CELLL 
      001DEE 90 5F            [ 1]  633 		clrw y 
      001DF0 FF               [ 2]  634 		ldw (x),y 
      001DF1 CD 1C 7C         [ 4]  635 		call EECSTORE
      001DF4 81               [ 4]  636 		ret 
                                    637 
                                    638 
                                    639 
                                    640 ;--------------------------------------
                                    641 ; reset system to its original state 
                                    642 ; before any user modification
                                    643 ; PRISTINE ( -- )
                                    644 ;-------------------------------------
      001DF5 1D CC                  645 	.word LINK  
                           001DF7   646 	LINK=.
      001DF7 08                     647 	.byte 8 
      001DF8 50 52 49 53 54 49 4E   648 	.ascii "PRISTINE"
             45
      001E00                        649 pristine:
                                    650 ;;; erase EEPROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001E00 CD 1A 80         [ 4]  651 	call EEPROM 
      001E03 CD 06 BF         [ 4]  652 1$:	call DDUP 
      001E06 CD 1C F2         [ 4]  653 	call row_erase
      001E09 90 93            [ 1]  654 	ldw y,x 
      001E0B 90 EE 02         [ 2]  655 	ldw y,(2,y)
      001E0E 72 A9 00 80      [ 2]  656 	addw y,#BLOCK_SIZE
      001E12 EF 02            [ 2]  657 	ldw (2,x),y
      001E14 90 A3 48 00      [ 2]  658 	cpw y,#OPTION_BASE 
      001E18 25 E9            [ 1]  659 	jrult 1$
                                    660 ;;; reset OPTION to default values
      001E1A 90 AE 00 01      [ 2]  661 	ldw y,#1 ; OPT1 
      001E1E FF               [ 2]  662 2$:	ldw (x),y   
      001E1F 90 5F            [ 1]  663 	clrw y 
      001E21 EF 02            [ 2]  664 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E23 CD 06 BF         [ 4]  665 	call DDUP    ; ( 0 1 0 1 -- )  
      001E26 CD 1D D4         [ 4]  666 	call set_option
      001E29 90 93            [ 1]  667 	ldw y,x 
      001E2B 90 FE            [ 2]  668 	ldw y,(y)
      001E2D 90 5C            [ 1]  669 	incw y  ; next OPTION 
      001E2F 90 A3 00 08      [ 2]  670 	cpw y,#8 
      001E33 25 E9            [ 1]  671 	jrult 2$
                                    672 ;;; erase first row of app_space 	
      001E35 90 AE 23 00      [ 2]  673 	ldw y,#app_space
      001E39 EF 02            [ 2]  674 	ldw (2,x),y  
      001E3B 90 5F            [ 1]  675 	clrw y 
      001E3D FF               [ 2]  676 	ldw (x),y ; ( app_space 0 -- )
      001E3E CD 1C F2         [ 4]  677 	call row_erase 
                                    678 ; reset interrupt vectors 
      001E41 1D 00 02         [ 2]  679 	subw x,#CELLL 
      001E44 90 5F            [ 1]  680 	clrw y  
      001E46 FF               [ 2]  681 4$:	ldw (x),y  ; ( n -- ) int# 
      001E47 CD 04 D9         [ 4]  682 	call DUPP  
      001E4A CD 1E 67         [ 4]  683 	call reset_vector
      001E4D 90 93            [ 1]  684 	ldw y,x 
      001E4F 90 FE            [ 2]  685 	ldw y,(y)
      001E51 90 5C            [ 1]  686 	incw y   ; next vector 
      001E53 90 A3 00 19      [ 2]  687 	cpw y,#25 
      001E57 25 ED            [ 1]  688 	jrult 4$
      001E59 CC 00 00         [ 2]  689 	jp NonHandledInterrupt ; reset MCU
                                    690 
                                    691 ;------------------------------
                                    692 ; reset an interrupt vector 
                                    693 ; to its initial value 
                                    694 ; i.e. NonHandledInterrupt
                                    695 ; RST-IVEC ( n -- )
                                    696 ;-----------------------------
      001E5C 1D F7                  697 	.word LINK 
                           001E5E   698 	LINK=. 
      001E5E 08                     699 	.byte 8 
      001E5F 52 53 54 2D 49 56 45   700 	.ascii "RST-IVEC"
             43
      001E67                        701 reset_vector:
      001E67 90 93            [ 1]  702 	ldw y,x
      001E69 1C 00 02         [ 2]  703 	addw x,#CELLL 
      001E6C 90 FE            [ 2]  704 	ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E6E 90 A3 00 17      [ 2]  705 	cpw y,#23 
      001E72 27 3A            [ 1]  706 	jreq 9$
      001E74 90 A3 00 1D      [ 2]  707 	cpw y,#29 ; last vector
      001E78 22 34            [ 1]  708 	jrugt 9$  
      001E7A 90 58            [ 2]  709 	sllw y 
      001E7C 90 58            [ 2]  710 	sllw y 
      001E7E 72 A9 80 08      [ 2]  711 	addw y,#0x8008 ; irq0 address 
      001E82 90 BF 24         [ 2]  712 	ldw YTEMP,y
      001E85 1D 00 06         [ 2]  713 	subw x,#3*CELLL 
      001E88 EF 02            [ 2]  714 	ldw (2,x),y 
      001E8A 90 5F            [ 1]  715 	clrw y
      001E8C FF               [ 2]  716 	ldw (x),y 
      001E8D A6 82            [ 1]  717 	ld a,#0x82 
      001E8F 90 95            [ 1]  718 	ld yh,a
      001E91 EF 04            [ 2]  719 	ldw (4,x),y
      001E93 CD 1C C8         [ 4]  720 	call EESTORE
      001E96 1D 00 06         [ 2]  721 	subw x,#3*CELLL
      001E99 90 5F            [ 1]  722 	clrw y 
      001E9B FF               [ 2]  723 	ldw (x),y 
      001E9C 90 AE 00 00      [ 2]  724 	ldw y,#NonHandledInterrupt
      001EA0 EF 04            [ 2]  725 	ldw (4,x),y 
      001EA2 90 BE 24         [ 2]  726 	ldw y,YTEMP  
      001EA5 72 A9 00 02      [ 2]  727 	addw y,#2
      001EA9 EF 02            [ 2]  728 	ldw (2,x),y 
      001EAB CD 1C C8         [ 4]  729 	call EESTORE
      001EAE 81               [ 4]  730 9$:	ret 
                                    731 
                                    732 
                                    733 ;------------------------------
                                    734 ; all interrupt vector with 
                                    735 ; an address >= a are resetted 
                                    736 ; to default
                                    737 ; CHKIVEC ( a -- )
                                    738 ;------------------------------
      001EAF 1E 5E                  739 	.word LINK 
                           001EB1   740 	LINK=.
      001EB1 07                     741 	.byte 7
      001EB2 43 48 4B 49 56 45 43   742 	.ascii "CHKIVEC"
                                    743 ;local variables 
                           000001   744 	SSP=1
                           000003   745 	CADR=3
                           000005   746 	OFS=5
                           000006   747 	VSIZE=6  
      001EB9                        748 CHKIVEC:
      001EB9 52 06            [ 2]  749 	sub sp,#VSIZE ;alloc local variables 
      001EBB 90 93            [ 1]  750 	ldw y,x 
      001EBD 90 FE            [ 2]  751 	ldw y,(y)
      001EBF 17 03            [ 2]  752 	ldw (CADR,sp),y ; ca 
      001EC1 1F 01            [ 2]  753 	ldw (SSP,sp),x 
      001EC3 AE 80 0A         [ 2]  754 	ldw x,#0x800a ; irq0 address 
      001EC6 BF 33            [ 2]  755 	ldw PTR16,X
      001EC8 AE FF FC         [ 2]  756 	ldw x,#-4 
      001ECB 1C 00 04         [ 2]  757 1$:	addw x,#4
      001ECE A3 00 78         [ 2]  758 	cpw x,#30*4 ; irq0-29 
      001ED1 27 22            [ 1]  759 	jreq 9$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001ED3 90 93            [ 1]  760 	ldw y,x  
      001ED5 91 D6 33         [ 4]  761 	ld a,([PTR16],y)
      001ED8 11 03            [ 1]  762 	cp a,(CADR,sp)
      001EDA 25 EF            [ 1]  763 	jrult 1$
      001EDC 90 5C            [ 1]  764 	incw y 
      001EDE 91 D6 33         [ 4]  765 	ld a,([PTR16],y)
      001EE1 11 04            [ 1]  766 	cp a,(CADR+1,sp) 
      001EE3 25 E6            [ 1]  767 	jrult 1$ 
      001EE5 1F 05            [ 2]  768 	ldw (OFS,sp),x 
      001EE7 54               [ 2]  769 	srlw x
      001EE8 54               [ 2]  770 	srlw x 
      001EE9 90 93            [ 1]  771 	ldw y,x 
      001EEB 1E 01            [ 2]  772 	ldw x,(SSP,sp)
      001EED FF               [ 2]  773 	ldw (x),y
      001EEE CD 1E 67         [ 4]  774 	call reset_vector
      001EF1 1E 05            [ 2]  775 	ldw x,(OFS,sp) 
      001EF3 20 D6            [ 2]  776 	jra 1$
      001EF5 1E 01            [ 2]  777 9$:	ldw x,(SSP,sp) 
      001EF7 1C 00 02         [ 2]  778 	addw x,#CELLL 
      001EFA 5B 06            [ 2]  779 	addw sp,#VSIZE ; drop local variables  
      001EFC 81               [ 4]  780 	ret 
                                    781 
                                    782 ;------------------------------
                                    783 ; set interrupt vector 
                                    784 ; SET-IVEC ( ud n -- )
                                    785 ;  ud Handler address
                                    786 ;  n  vector # 0 .. 29 
                                    787 ;-----------------------------
      001EFD 1E B1                  788 	.word LINK
                           001EFF   789 	LINK=.
      001EFF 08                     790 	.byte 8 
      001F00 53 45 54 2D 49 56 45   791 	.ascii "SET-IVEC" 
             43
      001F08                        792 set_vector:
      001F08 90 93            [ 1]  793     ldw y,x 
      001F0A 1C 00 02         [ 2]  794 	addw x,#CELLL 
      001F0D 90 FE            [ 2]  795 	ldw y,(y) ; vector #
      001F0F 90 A3 00 1D      [ 2]  796 	cpw y,#29 ; last vector
      001F13 23 04            [ 2]  797 	jrule 2$
      001F15 1C 00 04         [ 2]  798 	addw x,#2*CELLL 
      001F18 81               [ 4]  799 	ret
      001F19 90 58            [ 2]  800 2$:	sllw y 
      001F1B 90 58            [ 2]  801 	sllw y 
      001F1D 72 A9 80 08      [ 2]  802 	addw y,#0X8008 ; IRQ0 vector address 
      001F21 90 BF 24         [ 2]  803 	ldw YTEMP,y ; vector address 
      001F24 A6 82            [ 1]  804 	ld a,#0x82 
      001F26 90 95            [ 1]  805 	ld yh,a 
      001F28 E6 01            [ 1]  806 	ld a,(1,x) ; isr address bits 23..16 
      001F2A 90 97            [ 1]  807 	ld yl,a 
                                    808 ;  write 0x82 + most significant byte of int address	
      001F2C 1D 00 06         [ 2]  809 	subw x,#3*CELLL 
      001F2F EF 04            [ 2]  810 	ldw (4,x),y 
      001F31 90 BE 24         [ 2]  811 	ldw y,YTEMP
      001F34 EF 02            [ 2]  812 	ldw (2,x),y ; vector address 
      001F36 90 5F            [ 1]  813 	clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001F38 FF               [ 2]  814 	ldw (x),y   ; as a double 
      001F39 CD 1C C8         [ 4]  815 	call EESTORE 
      001F3C 90 93            [ 1]  816 	ldw y,x 
      001F3E 90 EE 02         [ 2]  817 	ldw y,(2,y) ; bits 15..0 int vector 
      001F41 1D 00 06         [ 2]  818 	subw x,#3*CELLL 
      001F44 EF 04            [ 2]  819 	ldw (4,x),y 
      001F46 90 BE 24         [ 2]  820 	ldw y,YTEMP 
      001F49 72 A9 00 02      [ 2]  821 	addw y,#2 
      001F4D EF 02            [ 2]  822 	ldw (2,x),y 
      001F4F 90 5F            [ 1]  823 	clrw y 
      001F51 FF               [ 2]  824 	ldw (x),y 
      001F52 CD 1C C8         [ 4]  825 	call EESTORE
      001F55 1C 00 04         [ 2]  826 	addw x,#2*CELLL  
      001F58 81               [ 4]  827 9$: ret 
                                    828 
                                    829 
                                    830 ;------------------------
                                    831 ; Compile word to flash
                                    832 ; EE, (w -- )
                                    833 ;-----------------------
      001F59 1E FF                  834 	.word LINK
                           001F5B   835 	LINK=.
      001F5B 03                     836 	.byte 3
      001F5C 45 45 2C               837 	.ascii "EE,"
      001F5F                        838 EE_COMMA:
      001F5F 1D 00 04         [ 2]  839 	subw x,#2*CELLL 
      001F62 90 BE 18         [ 2]  840 	ldw y,UCP
      001F65 90 89            [ 2]  841 	pushw y 
      001F67 EF 02            [ 2]  842 	ldw (2,x),y 
      001F69 90 5F            [ 1]  843 	clrw y 
      001F6B FF               [ 2]  844 	ldw (x),y
      001F6C CD 1C C8         [ 4]  845 	call EESTORE
      001F6F 90 85            [ 2]  846 	popw y 
      001F71 72 A9 00 02      [ 2]  847 	addw y,#2
      001F75 90 BF 18         [ 2]  848 	ldw UCP,y
      001F78 81               [ 4]  849 	ret 
                                    850 
                                    851 
                                    852 ;-------------------------
                                    853 ; Compile byte to flash 
                                    854 ; EEC, ( c -- )	
                                    855 ;-------------------------
      001F79 1F 5B                  856 	.word LINK 
                           001F7B   857 	LINK=.
      001F7B 04                     858 	.byte 4 
      001F7C 45 45 43 2C            859 	.ascii "EEC,"
      001F80                        860 EE_CCOMMA:
      001F80 1D 00 04         [ 2]  861 	subw x,#2*CELLL 
      001F83 90 BE 18         [ 2]  862 	ldw y,UCP
      001F86 90 89            [ 2]  863 	pushw y 
      001F88 EF 02            [ 2]  864 	ldw (2,x),y 
      001F8A 90 5F            [ 1]  865 	clrw y 
      001F8C FF               [ 2]  866 	ldw (x),y
      001F8D CD 1C 7C         [ 4]  867 	call EECSTORE
      001F90 90 85            [ 2]  868 	popw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001F92 90 5C            [ 1]  869 	incw y 
      001F94 90 BF 18         [ 2]  870 	ldw UCP,y
      001F97 81               [ 4]  871 	ret 
                                    872 
                                    873 
                                    874 ;--------------------------
                                    875 ; copy FLASH block to ROWBUF
                                    876 ; ROW>BUF ( ud -- )
                                    877 ;--------------------------
      001F98 1F 7B                  878 	.word LINK 
                           001F9A   879 	LINK=.
      001F9A 07                     880 	.byte 7 
      001F9B 52 4F 57 3E 42 55 46   881 	.ascii "ROW>BUF"
      001FA2                        882 ROW2BUF: 
      001FA2 CD 1A 61         [ 4]  883 	call FPSTOR 
      001FA5 A6 80            [ 1]  884 	ld a,#BLOCK_SIZE
      001FA7 88               [ 1]  885 	push a 
      001FA8 B4 34            [ 1]  886 	and a,PTR8 ; block align 
      001FAA B7 34            [ 1]  887 	ld PTR8,a
      001FAC 90 AE 06 80      [ 2]  888 	ldw y,#ROWBUFF 
      001FB0 92 BC 00 32      [ 5]  889 1$: ldf a,[FPTR]
      001FB4 90 F7            [ 1]  890 	ld (y),a
      001FB6 CD 1B C4         [ 4]  891 	call INC_FPTR
      001FB9 90 5C            [ 1]  892 	incw y 
      001FBB 0A 01            [ 1]  893 	dec (1,sp)
      001FBD 26 F1            [ 1]  894 	jrne 1$ 
      001FBF 84               [ 1]  895 	pop a 
      001FC0 81               [ 4]  896 	ret 
                                    897 
                                    898 
                                    899 ;---------------------------
                                    900 ; copy ROWBUFF to flash 
                                    901 ; BUF>ROW ( ud -- )
                                    902 ; ud is row address as double 
                                    903 ;---------------------------
      001FC1 1F 9A                  904 	.word LINK 
                           001FC3   905 	LINK=.
      001FC3 07                     906 	.byte 7 
      001FC4 42 55 46 3E 52 4F 57   907 	.ascii "BUF>ROW" 
      001FCB                        908 BUF2ROW:
      001FCB CD 05 D4         [ 4]  909 	call TBUF ; ( ud rb -- )
      001FCE CD 06 94         [ 4]  910 	call ROT 
      001FD1 CD 06 94         [ 4]  911 	call ROT  ; ( rb ud -- )
      001FD4 CD 1D AA         [ 4]  912 	call write_row 
      001FD7 81               [ 4]  913 	ret 
                                    914 
                                    915 ;---------------------------------
                                    916 ; how many byte free in that row 
                                    917 ; RFREE ( a -- n )
                                    918 ; a is least byte of target address
                                    919 ;----------------------------------
      001FD8 1F C3                  920 	.word LINK 
                           001FDA   921 	LINK=.
      001FDA 05                     922 	.byte 5 
      001FDB 52 46 52 45 45         923 	.ascii "RFREE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FE0                        924 RFREE:
      001FE0 E6 01            [ 1]  925 	ld a,(1,x)
      001FE2 A4 7F            [ 1]  926 	and a,#BLOCK_SIZE-1 
      001FE4 B7 24            [ 1]  927 	ld YTEMP,a 
      001FE6 A6 80            [ 1]  928 	ld a,#BLOCK_SIZE 
      001FE8 B0 24            [ 1]  929 	sub a,YTEMP 
      001FEA 90 5F            [ 1]  930 	clrw y 
      001FEC 90 97            [ 1]  931 	ld yl,a
      001FEE FF               [ 2]  932 	ldw (x),y 
      001FEF 81               [ 4]  933 	ret 
                                    934 
                                    935 ;---------------------------------
                                    936 ; write u bytes to flash/EEPROM 
                                    937 ; constraint to row limit 
                                    938 ; RAM>EE ( ud a u -- u2 )
                                    939 ; ud flash address 
                                    940 ; a ram address 
                                    941 ; u bytes count
                                    942 ; return u2 bytes written  
                                    943 ;-------------------------------
      001FF0 1F DA                  944 	.word LINK 
                           001FF2   945 	LINK=. 
      001FF2 06                     946 	.byte 6
      001FF3 52 41 4D 3E 45 45      947 	.ascii "RAM>EE"
                                    948 	
      001FF9                        949 RAM2EE:
                                    950 ; copy ud on top 
      001FF9 90 93            [ 1]  951 	ldw y,x 
      001FFB 90 EE 06         [ 2]  952 	ldw y,(6,y) ; LSW of ud  
      001FFE 90 BF 24         [ 2]  953 	ldw YTEMP,y 
      002001 90 93            [ 1]  954 	ldw y,x 
      002003 90 EE 04         [ 2]  955 	ldw y,(4,y)  ; MSW of ud 
      002006 1D 00 04         [ 2]  956 	subw x,#2*CELLL 
      002009 FF               [ 2]  957 	ldw (x),y 
      00200A 90 BE 24         [ 2]  958 	ldw y,YTEMP 
      00200D EF 02            [ 2]  959 	ldw (2,x),y 
      00200F CD 1F A2         [ 4]  960 	call ROW2BUF 
      002012 90 93            [ 1]  961 	ldw y,x 
      002014 90 EE 06         [ 2]  962 	ldw y,(6,y)
      002017 90 89            [ 2]  963 	pushw y ; udl 
      002019 90 9F            [ 1]  964 	ld a,yl
      00201B A4 7F            [ 1]  965 	and a,#BLOCK_SIZE-1 
      00201D 90 5F            [ 1]  966 	clrw y 
      00201F 90 97            [ 1]  967 	ld yl,a 
      002021 72 A9 06 80      [ 2]  968 	addw y,#ROWBUFF 
      002025 1D 00 02         [ 2]  969 	subw x,#CELLL 
      002028 FF               [ 2]  970 	ldw (x),y  
      002029 CD 04 E9         [ 4]  971 	call SWAPP ;  ( ud a ra u -- )
      00202C CD 04 83         [ 4]  972 	call RFROM  
      00202F CD 1F E0         [ 4]  973 	call RFREE 
      002032 CD 07 EF         [ 4]  974 	call MIN
      002035 CD 04 D9         [ 4]  975 	call DUPP 
      002038 CD 04 A2         [ 4]  976 	call TOR  
      00203B CD 0B 75         [ 4]  977 	call CMOVE
      00203E CD 1F CB         [ 4]  978 	call BUF2ROW 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      002041 CD 04 83         [ 4]  979 	call RFROM 
      002044 81               [ 4]  980 	ret 
                                    981 
                                    982 
                                    983 ;--------------------------
                                    984 ; expand 16 bit address 
                                    985 ; to 32 bit address 
                                    986 ; FADDR ( a -- ud )
                                    987 ;--------------------------
      002045 1F F2                  988 	.word LINK 
                           002047   989 	LINK=. 
      002047 05                     990 	.byte 5 
      002048 46 41 44 44 52         991 	.ascii "FADDR"
      00204D                        992 FADDR:
      00204D CC 0A 3A         [ 2]  993 	jp ZERO 
                                    994 
                                    995 
                                    996 ;--------------------------
                                    997 ; move new colon definition to FLASH 
                                    998 ; using WR-ROW for efficiency 
                                    999 ; preserving bytes already used 
                                   1000 ; in the current block. 
                                   1001 ; At this point the compiler as completed
                                   1002 ; in RAM and pointers CP and CNTXT updated.
                                   1003 ; CNTXT point to nfa of new word and  
                                   1004 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                   1005 ; 
                                   1006 ; FMOVE ( -- cp+ )
                                   1007 ; 
                                   1008 ;--------------------------
      002050 20 47                 1009 	.word LINK 
                           002052  1010 	LINK=.
      002052 05                    1011 	.byte 5 
      002053 46 4D 4F 56 45        1012 	.ascii "FMOVE" 
      002058                       1013 FMOVE:
      002058 CD 05 E6         [ 4] 1014 	call TFLASH 
      00205B CD 04 32         [ 4] 1015 	CALL AT 
      00205E CD 03 E7         [ 4] 1016 	CALL QBRAN 
      002061 20 DC                 1017 	.word no_move  
      002063 CD 06 35         [ 4] 1018 	call CPP
      002066 CD 04 32         [ 4] 1019 	call AT  
      002069 CD 04 D9         [ 4] 1020 	call DUPP ; ( udl udl -- )
      00206C CD 06 19         [ 4] 1021 	call CNTXT 
      00206F CD 04 32         [ 4] 1022 	call AT 
      002072 CD 03 B4         [ 4] 1023 	call DOLIT 
      002075 00 02                 1024 	.word 2 
      002077 CD 07 4D         [ 4] 1025 	call SUBB ; ( udl udl a -- )
      00207A CD 04 E9         [ 4] 1026 	call SWAPP 
      00207D CD 20 4D         [ 4] 1027 	call FADDR 
      002080 CD 06 94         [ 4] 1028 	call ROT  ; ( udl ud a -- )
      002083 CD 04 D9         [ 4] 1029 	call DUPP 
      002086 CD 04 A2         [ 4] 1030 	call TOR    ; R: a 
      002089                       1031 FMOVE2: 
      002089 CD 0B 28         [ 4] 1032 	call HERE 
      00208C CD 04 96         [ 4] 1033 	call RAT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      00208F CD 07 4D         [ 4] 1034 	call SUBB ; (udl ud a wl -- )
      002092                       1035 next_row:
      002092 CD 04 D9         [ 4] 1036 	call DUPP 
      002095 CD 04 A2         [ 4] 1037 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002098 CD 1F F9         [ 4] 1038 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00209B CD 04 D9         [ 4] 1039 	call DUPP 
      00209E CD 04 A2         [ 4] 1040 	call TOR
      0020A1 CD 06 D4         [ 4] 1041 	call PLUS  ; ( udl+ ) 
      0020A4 CD 04 D9         [ 4] 1042 	call DUPP 
      0020A7 CD 0A 3A         [ 4] 1043 	call ZERO   ; ( udl+ ud -- )
      0020AA CD 04 83         [ 4] 1044 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0020AD CD 04 83         [ 4] 1045 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020B0 CD 05 03         [ 4] 1046 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020B3 CD 07 4D         [ 4] 1047 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020B6 CD 04 D9         [ 4] 1048 	call DUPP 
      0020B9 CD 03 E7         [ 4] 1049 	call QBRAN
      0020BC 20 D5                 1050 	.word fmove_done 
      0020BE CD 04 E9         [ 4] 1051 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020C1 CD 04 83         [ 4] 1052 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020C4 CD 06 D4         [ 4] 1053 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020C7 CD 04 D9         [ 4] 1054 	call DUPP 
      0020CA CD 04 A2         [ 4] 1055 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020CD CD 04 E9         [ 4] 1056 	call SWAPP 
      0020D0 CD 03 FE         [ 4] 1057 	call BRAN
      0020D3 20 92                 1058 	.word next_row  
      0020D5                       1059 fmove_done:	
      0020D5 CD 04 83         [ 4] 1060 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020D8 1C 00 0A         [ 2] 1061 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020DB 81               [ 4] 1062  	ret  
      0020DC                       1063 no_move:
      0020DC CD 0A 3A         [ 4] 1064 	call ZERO
      0020DF 81               [ 4] 1065 	ret 
                                   1066 
                                   1067 ;------------------------------------------
                                   1068 ; adjust pointers after **FMOVE** operetion.
                                   1069 ; UPDAT-PTR ( cp+ -- )
                                   1070 ; cp+ is new CP position after FMOVE 
                                   1071 ;-------------------------------------------
      0020E0 20 52                 1072 	.word LINK 
                           0020E2  1073 	LINK=.
      0020E2 09                    1074 	.byte 9
      0020E3 55 50 44 41 54 2D 50  1075 	.ascii "UPDAT-PTR" 
             54 52
      0020EC                       1076 UPDATPTR:
                                   1077 ;reset VP to previous position  
      0020EC CD 1A DB         [ 4] 1078 	call EEPVP 
      0020EF CD 04 CF         [ 4] 1079 	call DROP 
      0020F2 CD 04 32         [ 4] 1080 	call AT
      0020F5 CD 06 27         [ 4] 1081 	call VPP 
      0020F8 CD 04 1B         [ 4] 1082 	call STORE
                                   1083 ;update CONTEXT and LAST 
      0020FB CD 1A C5         [ 4] 1084 	call EEPCP 
      0020FE CD 04 CF         [ 4] 1085 	call DROP
      002101 CD 04 32         [ 4] 1086 	call AT
      002104 CD 03 B4         [ 4] 1087 	call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      002107 00 02                 1088 	.word 2 
      002109 CD 06 D4         [ 4] 1089 	call PLUS 
      00210C CD 04 D9         [ 4] 1090 	call DUPP 
      00210F CD 06 19         [ 4] 1091 	call CNTXT 
      002112 CD 04 1B         [ 4] 1092 	call STORE
      002115 CD 06 45         [ 4] 1093 	call LAST
      002118 CD 04 1B         [ 4] 1094 	call STORE 
      00211B CD 1A F5         [ 4] 1095 	call UPDATLAST 
                                   1096 ;update CP 
      00211E CD 06 35         [ 4] 1097 	call CPP 
      002121 CD 04 1B         [ 4] 1098 	call STORE
      002124 CD 1B 1E         [ 4] 1099 	call UPDATCP 
      002127 81               [ 4] 1100 	ret 
                                   1101 
                                   1102 ;-----------------------------
                                   1103 ; move interrupt sub-routine
                                   1104 ; in flash memory
                                   1105 ;----------------------------- 
      002128 20 E2                 1106 	.word LINK 
                           00212A  1107 	LINK=. 
      00212A 06                    1108 	.byte 6
      00212B 49 46 4D 4F 56 45     1109 	.ascii "IFMOVE" 
      002131                       1110 IFMOVE:
      002131 CD 05 E6         [ 4] 1111 	call TFLASH 
      002134 CD 04 32         [ 4] 1112 	CALL AT 
      002137 CD 03 E7         [ 4] 1113 	CALL QBRAN 
      00213A 20 DC                 1114 	.word no_move 
      00213C CD 06 35         [ 4] 1115 	call CPP 
      00213F CD 04 32         [ 4] 1116 	call AT 
      002142 CD 04 D9         [ 4] 1117 	call DUPP ; ( udl udl -- )
      002145 CD 1A DB         [ 4] 1118 	call EEPVP 
      002148 CD 04 CF         [ 4] 1119 	call DROP
      00214B CD 04 32         [ 4] 1120 	call AT  ; ( udl udl a )
      00214E CD 04 A2         [ 4] 1121 	call TOR 
      002151 CD 20 4D         [ 4] 1122 	call FADDR
      002154 CD 04 96         [ 4] 1123 	call RAT ; ( udl ud a -- ) R: a 
      002157 CC 20 89         [ 2] 1124 	jp FMOVE2 
                                   1125 
                                   1126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                           000001  4518 .if WANT_SCALING_CONST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4519         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      00215A 21 2A                   31         .word LINK 
                           00215C    32         LINK=.
      00215C 02                      33         .byte 2
      00215D 50 49                   34         .ascii "PI" 
      00215F                         35 PII:
      00215F 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      002162 90 AE 01 63      [ 2]   37         ldw y,#355 
      002166 EF 02            [ 2]   38         ldw (2,x),y 
      002168 90 AE 00 71      [ 2]   39         ldw y,#113 
      00216C FF               [ 2]   40         ldw (x),y 
      00216D 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      00216E 21 5C                   48         .word LINK 
                           002170    49         LINK=.
      002170 05                      50         .byte 5 
      002171 53 51 52 54 32          51         .ascii "SQRT2" 
      002176                         52 SQRT2:
      002176 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      002179 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



      00217D EF 02            [ 2]   55         ldw (2,x),y 
      00217F 90 AE 36 24      [ 2]   56         ldw y,#13860 
      002183 FF               [ 2]   57         ldw (x),y 
      002184 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      002185 21 70                   63         .word LINK 
                           002187    64         LINK=.
      002187 05                      65         .byte 5
      002188 53 51 52 54 33          66         .ascii "SQRT3" 
      00218D                         67 SQRT3: 
      00218D 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      002190 90 AE 49 81      [ 2]   69     ldw y,#18817 
      002194 EF 02            [ 2]   70     ldw (2,x),y 
      002196 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      00219A FF               [ 2]   72     ldw (x),y 
      00219B 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      00219C 21 87                   78         .word LINK 
                           00219E    79         LINK=.
      00219E 01                      80         .byte 1
      00219F 45                      81         .ascii "E" 
      0021A0                         82 ENEPER:
      0021A0 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      0021A3 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      0021A7 EF 02            [ 2]   85     ldw (2,x),y 
      0021A9 90 AE 29 32      [ 2]   86     ldw y,#10546 
      0021AD FF               [ 2]   87     ldw (x),y 
      0021AE 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      0021AF 21 9E                   92         .word LINK 
                           0021B1    93         LINK=.
      0021B1 06                      94         .byte 6 
      0021B2 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0021B8                         96 SQRT10:
      0021B8 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0021BB 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0021BF EF 02            [ 2]   99     ldw (2,x),y 
      0021C1 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0021C5 FF               [ 2]  101     ldw (x),y 
      0021C6 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0021C7 21 B1                  107         .word LINK 
                           0021C9   108         LINK=. 
      0021C9 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      0021CA 31 32 52 54 32         110         .ascii "12RT2"
      0021CF                        111 RT12_2:
      0021CF 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      0021D2 90 AE 68 AD      [ 2]  113     ldw y,#26797
      0021D6 EF 02            [ 2]  114     ldw (2,x),y 
      0021D8 90 AE 62 CD      [ 2]  115     ldw y,#25293
      0021DC FF               [ 2]  116     ldw (x),y 
      0021DD 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      0021DE 21 C9                  122         .word LINK 
                           0021E0   123         LINK=.
      0021E0 05                     124         .byte 5 
      0021E1 4C 4F 47 32 53         125         .ascii "LOG2S" 
      0021E6                        126 LOG2S:
      0021E6 1D 00 04         [ 2]  127     subw x,#2*CELLL
      0021E9 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      0021ED EF 02            [ 2]  129     ldw (2,x),y 
      0021EF 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      0021F3 FF               [ 2]  131     ldw (x),y 
      0021F4 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      0021F5 21 E0                  137         .word LINK 
                           0021F7   138         LINK=.
      0021F7 04                     139         .byte 4 
      0021F8 4C 4E 32 53            140         .ascii "LN2S" 
      0021FC                        141 LN2S: 
      0021FC 1D 00 04         [ 2]  142     subw x,#2*CELLL
      0021FF 90 AE 01 E5      [ 2]  143     ldw y,#485
      002203 EF 02            [ 2]  144     ldw (2,x),y 
      002205 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      002209 FF               [ 2]  146     ldw (x),y 
      00220A 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   4520 .endif
                           000001  4521 .if WANT_CONST_TABLE 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4522         .include "ctable.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;------------------------------
                                     20 ; words to create and read 
                                     21 ; constants tables in FLASH 
                                     22 ; and EEPROM
                                     23 ;------------------------------
                                     24 
                                     25 ;-----------------------------
                                     26 ; allocate space in CODE area 
                                     27 ; for constant table.
                                     28 ; CALLOT ( u -- ad )
                                     29 ; u  bytes to allocates 
                                     30 ; ad data address as double.
                                     31 ;-----------------------------
      00220B 21 F7                   32     .word LINK 
                           00220D    33     LINK=.
      00220D 06                      34     .byte 6
      00220E 43 41 4C 4C 4F 54       35     .ascii "CALLOT"
      002214                         36 CALLOT:
      002214 CD 06 35         [ 4]   37     CALL CPP
      002217 CD 04 D9         [ 4]   38     CALL DUPP 
      00221A CD 04 32         [ 4]   39     CALL AT 
      00221D CD 04 A2         [ 4]   40     CALL TOR 
      002220 CD 0A AA         [ 4]   41     CALL PSTOR 
      002223 CD 1B 1E         [ 4]   42     CALL UPDATCP 
      002226 CD 04 83         [ 4]   43     CALL RFROM
      002229 CC 0A 3A         [ 2]   44     JP ZERO 
                                     45 
                                     46 ;------------------------------
                                     47 ; create constants bytes table 
                                     48 ; in persistant memory
                                     49 ;  CTABLE ( n+ -- ad ; <string> )
                                     50 ; n+ bytes reserved 
                                     51 ;-----------------------------
      00222C 22 0D                   52     .word LINK 
                           00222E    53     LINK=.
      00222E 06                      54     .byte 6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]



      00222F 43 54 41 42 4C 45       55     .ascii "CTABLE"
      002235                         56 CTABLE:
      002235 CD 22 14         [ 4]   57     CALL CALLOT     
      002238 CC 18 16         [ 2]   58     JP DCONST 
                                     59      
                                     60 
                                     61 ;--------------------------------
                                     62 ; create constants words table 
                                     63 ; in persistant memory 
                                     64 ; WTABLE ( n+ -- ad ; <string> )
                                     65 ; n+  words reserved  
                                     66 ;--------------------------------
      00223B 22 2E                   67     .word LINK 
                           00223D    68     LINK=.
      00223D 06                      69     .byte 6
      00223E 57 54 41 42 4C 45       70     .ascii "WTABLE"
      002244                         71 WTABLE:
      002244 CD 09 C1         [ 4]   72     CALL CELLS  
      002247 CD 22 14         [ 4]   73     CALL CALLOT 
      00224A CC 18 16         [ 2]   74     JP DCONST 
                                     75 
                                     76 ;---------------------------------
                                     77 ; stack an element of CTABLE 
                                     78 ; CTABL@ ( u ad -- c )
                                     79 ; u element order {0..size-1}
                                     80 ; a|ad table address 
                                     81 ;--------------------------------
      00224D 22 3D                   82     .word LINK 
                           00224F    83     LINK=.
      00224F 06                      84     .byte 6
      002250 43 54 41 42 4C 40       85     .ascii "CTABL@" 
      002256                         86 CTAT:
      002256 CD 1A 61         [ 4]   87     call FPSTOR 
      002259 CD 1B DC         [ 4]   88     call PTRPLUS 
      00225C CC 1C 19         [ 2]   89     jp EE_CREAD 
                                     90 
                                     91 ;---------------------------------
                                     92 ; stack an element of WTABLE 
                                     93 ; WTABL@ ( u ud -- w )
                                     94 ; u is element order {0..size-1}
                                     95 ; a|ud table address 
                                     96 ;----------------------------------
      00225F 22 4F                   97     .word LINK 
                           002261    98     LINK=.
      002261 06                      99     .byte 6
      002262 57 54 41 42 4C 40      100     .ascii "WTABL@" 
      002268                        101 WTAT:
      002268 CD 1A 61         [ 4]  102     call FPSTOR 
      00226B CD 09 C1         [ 4]  103     call CELLS 
      00226E CD 1B DC         [ 4]  104     call PTRPLUS 
      002271 CD 1B F7         [ 4]  105     call EE_READ 
      002274 81               [ 4]  106     ret 
                                    107 
                                    108 ;--------------------------
                                    109 ; tool to initialize character table 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]



                                    110 ; CTINIT ( ad -- )
                                    111 ; ad is table address 
                                    112 ;--------------------------
      002275 22 61                  113     .word LINK 
                           002277   114     LINK=.
      002277 06                     115     .byte 6 
      002278 43 54 49 4E 49 54      116     .ascii "CTINIT"
      00227E                        117 CTINIT:
      00227E CD 1A 61         [ 4]  118     CALL FPSTOR
      002281 CD 1B 88         [ 4]  119     CALL UNLOCK
      002284 CD 0A 3A         [ 4]  120     CALL ZERO 
      002287 CD 09 CE         [ 4]  121 1$: CALL ONEP 
      00228A CD 04 D9         [ 4]  122     CALL DUPP 
      00228D CD 22 DA         [ 4]  123     CALL INTQ 
      002290 CD 03 E7         [ 4]  124     CALL QBRAN 
      002293 22 9D                  125     .word 2$
      002295 CD 1C 33         [ 4]  126     call WR_BYTE 
      002298 CD 03 FE         [ 4]  127     CALL BRAN 
      00229B 22 87                  128     .word 1$ 
      00229D CD 06 B4         [ 4]  129 2$: CALL DDROP 
      0022A0 CD 1B B0         [ 4]  130     CALL LOCK 
      0022A3 81               [ 4]  131     ret 
                                    132 
                                    133 ;--------------------------
                                    134 ; tool to initialize word table 
                                    135 ; WTINIT ( ad -- )
                                    136 ; ad is table address 
                                    137 ;--------------------------
      0022A4 22 77                  138     .word LINK 
                           0022A6   139     LINK=.
      0022A6 06                     140     .byte 6 
      0022A7 57 54 49 4E 49 54      141     .ascii "WTINIT"
      0022AD                        142 WTINIT:
      0022AD CD 1A 61         [ 4]  143     CALL FPSTOR
      0022B0 CD 1B 88         [ 4]  144     CALL UNLOCK
      0022B3 CD 0A 3A         [ 4]  145     CALL ZERO 
      0022B6 CD 09 CE         [ 4]  146 1$: CALL ONEP 
      0022B9 CD 04 D9         [ 4]  147     CALL DUPP
      0022BC CD 22 DA         [ 4]  148     CALL INTQ
      0022BF CD 03 E7         [ 4]  149     CALL QBRAN 
      0022C2 22 CC                  150     .word 2$
      0022C4 CD 1C 52         [ 4]  151     call WR_WORD 
      0022C7 CD 03 FE         [ 4]  152     CALL BRAN 
      0022CA 22 B6                  153     .word 1$ 
      0022CC CD 06 B4         [ 4]  154 2$: CALL DDROP 
      0022CF CD 1B B0         [ 4]  155     CALL LOCK 
      0022D2 81               [ 4]  156     ret 
                                    157 
                                    158 ;------------------------
                                    159 ; Prompted input for integer 
                                    160 ; display n+ in bracket and
                                    161 ; '?' 
                                    162 ; [N]? ( n+ -- a )
                                    163 ;------------------------
      0022D3 22 A6                  164     .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]



                           0022D5   165     LINK=.
      0022D5 04                     166     .byte 4
      0022D6 5B 4E 5D 3F            167     .ascii "[N]?" 
      0022DA                        168 INTQ:
      0022DA CD 0E A0         [ 4]  169     CALL CR 
      0022DD CD 03 B4         [ 4]  170     call DOLIT 
      0022E0 00 5B                  171     .word '[
      0022E2 CD 03 9E         [ 4]  172     CALL EMIT 
      0022E5 CD 0F 3B         [ 4]  173     CALL DOT 
      0022E8 CD 0E DF         [ 4]  174     CALL  DOTQP
      0022EB 03                     175     .byte 3
      0022EC 5D 3F 20               176     .ascii "]? " 
      0022EF CD 12 87         [ 4]  177     CALL QUERY 
      0022F2 CD 10 B2         [ 4]  178     call TOKEN 
      0022F5 CC 0D 4D         [ 2]  179     jp NUMBQ
                                    180 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]



                                   4523 .endif
                                   4524 
                                   4525 ;===============================================================
                                   4526 
                           0022D5  4527 LASTN =	LINK   ;last name defined
                                   4528 
                                   4529 ; application code begin here
      002300                       4530 	.bndry 128 ; align on flash block  
      002300                       4531 app_space: 
                                   4532 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000770 R   |   6 ABOR1      0012C3 R
  6 ABOR2      0012DA R   |   6 ABORQ      0012BB R   |   6 ABORT      0012AC R
  6 ABRTQ      001597 R   |   6 ABSS       000767 R   |   6 ACCEP      001242 R
  6 ACCP1      00124B R   |   6 ACCP2      001271 R   |   6 ACCP3      001274 R
  6 ACCP4      001276 R   |     ADC_AWCR=  00540E     |     ADC_AWCR=  00540F 
    ADC_AWSR=  00540C     |     ADC_AWSR=  00540D     |     ADC_CR1 =  005401 
    ADC_CR1_=  000000     |     ADC_CR1_=  000001     |     ADC_CR1_=  000004 
    ADC_CR1_=  000005     |     ADC_CR1_=  000006     |     ADC_CR2 =  005402 
    ADC_CR2_=  000003     |     ADC_CR2_=  000004     |     ADC_CR2_=  000005 
    ADC_CR2_=  000006     |     ADC_CR2_=  000001     |     ADC_CR3 =  005403 
    ADC_CR3_=  000007     |     ADC_CR3_=  000006     |     ADC_CSR =  005400 
    ADC_CSR_=  000006     |     ADC_CSR_=  000004     |     ADC_CSR_=  000000 
    ADC_CSR_=  000001     |     ADC_CSR_=  000002     |     ADC_CSR_=  000003 
    ADC_CSR_=  000007     |     ADC_CSR_=  000005     |     ADC_DB0R=  0053E0 
    ADC_DB0R=  0053E1     |     ADC_DB1R=  0053E2     |     ADC_DB1R=  0053E3 
    ADC_DB2R=  0053E4     |     ADC_DB2R=  0053E5     |     ADC_DB3R=  0053E6 
    ADC_DB3R=  0053E7     |     ADC_DB4R=  0053E8     |     ADC_DB4R=  0053E9 
    ADC_DB5R=  0053EA     |     ADC_DB5R=  0053EB     |     ADC_DB6R=  0053EC 
    ADC_DB6R=  0053ED     |     ADC_DB7R=  0053EE     |     ADC_DB7R=  0053EF 
    ADC_DB8R=  0053F0     |     ADC_DB8R=  0053F1     |     ADC_DB9R=  0053F2 
    ADC_DB9R=  0053F3     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_HTRH=  005408     |     ADC_HTRL=  005409     |     ADC_LTRH=  00540A 
    ADC_LTRL=  00540B     |     ADC_TDRH=  005406     |     ADC_TDRL=  005407 
  6 ADRADJ     000673 R   |     AFR     =  004803     |     AFR0_ADC=  000000 
    AFR1_TIM=  000001     |     AFR2_CCO=  000002     |     AFR3_TIM=  000003 
    AFR4_TIM=  000004     |     AFR5_TIM=  000005     |     AFR6_I2C=  000006 
    AFR7_BEE=  000007     |   6 AFT        001582 R   |   6 AGAIN      0014D8 R
  6 AHEAD      001535 R   |   6 ALLOT      0013EB R   |   6 ANDD       000525 R
    APP_CP  =  004004     |     APP_LAST=  004000     |     APP_RUN =  004002 
    APP_VP  =  004006     |   6 AT         000432 R   |   6 ATEXE      000B5E R
  6 AUTORUN    000127 R   |     AWU_APR =  0050F1     |     AWU_CSR1=  0050F0 
    AWU_TBR =  0050F2     |     B115200 =  000006     |     B19200  =  000003 
    B230400 =  000007     |     B2400   =  000000     |     B38400  =  000004 
    B460800 =  000008     |     B4800   =  000001     |     B57600  =  000005 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      0011EA R
  6 BASE       000596 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      00142D R   |   6 BDIGS      000C45 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00500F 
  6 BEGIN      0014BA R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      001082 R   |   6 BKSP       0011BA R   |     BKSPP   =  000008 
  6 BLANK      000A2D R   |     BLOCK_SI=  000080     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FCB R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CALLOT     002214 R
    CARRY   =  000028     |   6 CAT        000450 R   |   6 CCOMMA     00140F R
    CELLL   =  000002     |   6 CELLM      0009B2 R   |   6 CELLP      0009A3 R
  6 CELLS      0009C1 R   |     CFG_GCR =  007F60     |   6 CHAR1      000E72 R
  6 CHAR2      000E75 R   |   6 CHKIVEC    001EB9 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000B7D R   |   6 CMOV2      000B95 R   |   6 CMOVE      000B75 R
    CNTDWN  =  000030     |   6 CNTXT      000619 R   |   6 COLD       0019F2 R
  6 COLD1      0019F2 R   |   6 COLON      001730 R   |   6 COMMA      0013F8 R
  6 COMPI      00143D R   |     COMPO   =  000040     |   6 CONSTANT   0017DA R
  6 COUNT      000B11 R   |   6 CPP        000635 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000EA0 R   |   6 CREAT      001776 R
    CRR     =  00000D     |   6 CSTOR      00043F R   |   6 CTABLE     002235 R
  6 CTAT       002256 R   |   6 CTINIT     00227E R   |   6 DAT        000AF1 R
    DATSTK  =  000680     |   6 DCONST     001816 R   |   6 DDROP      0006B4 R
  6 DDUP       0006BF R   |   6 DECIM      000CF5 R   |   6 DEPTH      000A7C R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000D3A R
  6 DI         0000C2 R   |   6 DIG        000C6E R   |   6 DIGIT      000C09 R
  6 DIGS       000C7F R   |   6 DIGS1      000C7F R   |   6 DIGS2      000C8C R
  6 DIGTQ      000D09 R   |     DISCOVER=  000001     |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00072E R   |   6 DNEGA      000711 R
  6 DOCONST    001804 R   |   6 DOLIT      0003B4 R   |   6 DONXT      0003C8 R
  6 DOSTR      000EB6 R   |   6 DOT        000F3B R   |   6 DOT1       000F51 R
  6 DOTI1      001972 R   |   6 DOTID      00195C R   |   6 DOTO1      00134F R
  6 DOTOK      001335 R   |   6 DOTPR      001064 R   |   6 DOTQ       0015B1 R
  6 DOTQP      000EDF R   |   6 DOTR       000EED R   |   6 DOTS       0018FE R
  6 DOTS1      001909 R   |   6 DOTS2      001912 R   |   6 DOVAR      000586 R
  6 DO_DCONS   001845 R   |   6 DROP       0004CF R   |   6 DSTOR      000ACB R
  6 DUMP       0018B4 R   |   6 DUMP1      0018CB R   |   6 DUMP3      0018ED R
  6 DUMPP      001883 R   |   6 DUPP       0004D9 R   |   6 EDIGS      000CAA R
  6 EECSTORE   001C7C R   |   6 EEPCP      001AC5 R   |   6 EEPLAST    001A98 R
  6 EEPROM     001A80 R   |     EEPROM_B=  004000     |     EEPROM_E=  0043FF 
    EEPROM_R=  000010     |     EEPROM_S=  000400     |   6 EEPRUN     001AAF R
  6 EEPVP      001ADB R   |   6 EESTORE    001CC8 R   |   6 EE_CCOMM   001F80 R
  6 EE_COMMA   001F5F R   |   6 EE_CREAD   001C19 R   |   6 EE_READ    001BF7 R
  6 EI         0000BB R   |   6 ELSEE      001510 R   |   6 EMIT       00039E R
  6 ENEPER     0021A0 R   |   6 EQ1        00078B R   |   6 EQUAL      000775 R
  6 ERASE      000BD7 R   |     ERR     =  00001B     |   6 EVAL       001378 R
  6 EVAL1      001378 R   |   6 EVAL2      001394 R   |   6 EXE1       000B6C R
  6 EXECU      00040E R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C31 R   |   6 FADDR      00204D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    FHSE    =  F42400     |     FHSE_K  =  003E80     |     FHSE_M  =  000010 
  6 FILL       000BA4 R   |   6 FILL1      000BC1 R   |   6 FILL2      000BCA R
  6 FIND       001116 R   |   6 FIND1      001134 R   |   6 FIND2      001162 R
  6 FIND3      00116E R   |   6 FIND4      001182 R   |   6 FIND5      00118F R
  6 FIND6      001173 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |   6 FMOVE      002058 R   |   6 FMOVE2     002089 R
  6 FOR        00148D R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
  6 FPSTOR     001A61 R   |     FPTR    =  000032     |   6 FREEVAR    000223 R
  6 FREEVAR4   000259 R   |     GPIO_BAS=  005000     |     GPIO_SIZ=  000005 
  6 HERE       000B28 R   |   6 HEX        000CE0 R   |   6 HI         0019AE R
  6 HLD        000606 R   |   6 HOLD       000C55 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001741 R   |   6 IFETCH     0014AB R   |   6 IFF        0014E8 R
  6 IFMOVE     002131 R   |     IMEDD   =  000080     |   6 IMMED      001753 R
  6 INCH       000392 R   |   6 INC_FPTR   001BC4 R   |   6 INITOFS    001709 R
  6 INN        0005B4 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001317 R
  6 INTER      0012ED R   |   6 INTQ       0022DA R   |     INT_ADC1=  000016 
    INT_AWU =  000001     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_RES1=  000008     |     INT_RES2=  000009     |     INT_RES3=  000011 
    INT_RES4=  000012     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0006EE R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      00169E R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0016F3 R   |   6 KEY        000E20 R   |   6 KTAP       001207 R
  6 KTAP1      00122A R   |   6 KTAP2      00122D R   |   6 LAST       000645 R
  6 LASTN   =  0022D5 R   |   6 LBRAC      001324 R   |     LD1_BIT =  000000 
    LD1_MASK=  000001     |     LD1_PORT=  00500F     |   6 LESS       0007B2 R
    LF      =  00000A     |   6 LINK    =  0022D5 R   |   6 LITER      00145F R
  6 LN2S       0021FC R   |   6 LOCK       001BB0 R   |   6 LOG2S      0021E6 R
  6 LSHIFT     0009EC R   |   6 LSHIFT1    0009F5 R   |   6 LSHIFT4    0009FD R
  6 LT1        0007C8 R   |     MASKK   =  001F7F     |   6 MAX        0007D2 R
  6 MAX1       0007E5 R   |   6 MIN        0007EF R   |   6 MIN1       000802 R
    MISCOPT =  004805     |     MISCOPT_=  000004     |     MISCOPT_=  000002 
    MISCOPT_=  000003     |     MISCOPT_=  000000     |     MISCOPT_=  000001 
  6 MMOD1      0008A5 R   |   6 MMOD2      0008B9 R   |   6 MMOD3      0008D0 R
  6 MMSM1      00084C R   |   6 MMSM2      000860 R   |   6 MMSM3      000862 R
  6 MMSM4      00086A R   |   6 MODD       0008EA R   |   6 MONE       000A53 R
    MS      =  00002E     |   6 MSEC       0002CE R   |   6 MSMOD      000888 R
  6 MSTA1      00097B R   |   6 MSTAR      000958 R   |     NAFR    =  004804 
  6 NAMEQ      0011AF R   |   6 NAMET      0010C0 R   |     NCLKOPT =  004808 
  6 NEGAT      0006FF R   |   6 NEX1       0003D5 R   |   6 NEXT       00149C R
    NHSECNT =  00480A     |     NMISCOPT=  004806     |     NMISCOPT=  FFFFFFFB 
    NMISCOPT=  FFFFFFFD     |     NMISCOPT=  FFFFFFFC     |     NMISCOPT=  FFFFFFFF 
    NMISCOPT=  FFFFFFFE     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPTBL  =  00487F     |   6 NTIB       0005C4 R   |     NUBC    =  004802 
    NUCLEO  =  000000     |   6 NUFQ       000E36 R   |   6 NUFQ1      000E4F R
  6 NUMBQ      000D4D R   |   6 NUMQ1      000D81 R   |   6 NUMQ2      000DB2 R
  6 NUMQ3      000DF4 R   |   6 NUMQ4      000DF9 R   |   6 NUMQ5      000E08 R
  6 NUMQ6      000E0B R   |   6 NonHandl   000000 R   |   6 OFFSET     00066A R
    OFS     =  000005     |   6 ONE        000A45 R   |   6 ONEM       0009DB R
  6 ONEP       0009CE R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
    OPTION_E=  00487F     |   6 ORIG       000047 R   |   6 ORR        000539 R
  6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000503 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Symbol Table

  6 OVERT      00166C R   |     PA      =  000000     |   6 PACKS      000BE8 R
  6 PAD        000B39 R   |   6 PAREN      001073 R   |   6 PARS       000F6C R
  6 PARS1      000F97 R   |   6 PARS2      000FC2 R   |   6 PARS3      000FC5 R
  6 PARS4      000FCE R   |   6 PARS5      000FF1 R   |   6 PARS6      001006 R
  6 PARS7      001015 R   |   6 PARS8      001024 R   |   6 PARSE      001035 R
  6 PAUSE      0002DE R   |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001896 R   |   6 PDUM2      0018A7 R
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |   6 PICK       000A93 R
  6 PII        00215F R   |     PIN0    =  000000     |     PIN1    =  000001 
    PIN2    =  000002     |     PIN3    =  000003     |     PIN4    =  000004 
    PIN5    =  000005     |     PIN6    =  000006     |     PIN7    =  000007 
  6 PLUS       0006D4 R   |   6 PNAM1      001621 R   |   6 PRESE      0013A3 R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FF R   |   6 PSTOR      000AAA R   |     PTR16   =  000033 
    PTR8    =  000034     |   6 PTRPLUS    001BDC R   |   6 QBRAN      0003E7 R
  6 QDUP       000683 R   |   6 QDUP1      00068D R   |   6 QKEY       000380 R
  6 QSTAC      00135B R   |   6 QUERY      001287 R   |   6 QUEST      000F5E R
  6 QUIT       0013C0 R   |   6 QUIT1      0013C8 R   |   6 QUIT2      0013CB R
  6 RAM2EE     001FF9 R   |     RAMBASE =  000000     |   6 RAMLAST    000658 R
    RAM_BASE=  000000     |     RAM_END =  0007FF     |     RAM_SIZE=  000800 
  6 RANDOM     00027C R   |   6 RAT        000496 R   |   6 RBRAC      0016E0 R
  6 REPEA      001565 R   |   6 RFREE      001FE0 R   |   6 RFROM      000483 R
    ROP     =  004800     |   6 ROT        000694 R   |   6 ROW2BUF    001FA2 R
    ROWBUFF =  000680     |     RP0     =  00002C     |   6 RPAT       000460 R
    RPP     =  0007FF     |   6 RPSTO      00046D R   |   6 RSHIFT     000A08 R
  6 RSHIFT1    000A11 R   |   6 RSHIFT4    000A19 R   |     RST_SR  =  0050B3 
  6 RT12_2     0021CF R   |   6 SAME1      0010DE R   |   6 SAME2      001107 R
  6 SAMEQ      0010D6 R   |   6 SCOM1      001656 R   |   6 SCOM2      001659 R
  6 SCOMP      001638 R   |   6 SEED       000263 R   |     SEEDX   =  000036 
    SEEDY   =  000038     |   6 SEMIS      00167C R   |   6 SETISP     0000CE R
  6 SET_RAML   0017C3 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000C94 R   |   6 SIGN1      000CA4 R   |   6 SLASH      0008F4 R
  6 SLMOD      0008D8 R   |   6 SNAME      0015EB R   |     SP0     =  00002A 
  6 SPACE      000E58 R   |   6 SPACS      000E67 R   |   6 SPAT       0004B9 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  000680 
    SPSAVE  =  000001     |   6 SPSTO      0004C6 R   |   6 SQRT10     0021B8 R
  6 SQRT2      002176 R   |   6 SQRT3      00218D R   |   6 SSMOD      000984 R
    SSP     =  000001     |     STACK   =  0007FF     |   6 STAR       00094D R
  6 STASL      000995 R   |   6 STOD       000736 R   |   6 STORE      00041B R
  6 STR        000CC2 R   |   6 STRCQ      00146D R   |   6 STRQ       0015A4 R
  6 STRQP      000ED5 R   |   6 SUBB       00074D R   |   6 SWAPP      0004E9 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 121.
Hexadecimal [24-Bits]

Symbol Table

    SWIM_CSR=  007F80     |   6 TAP        0011F1 R   |   6 TBOOT      0019E6 R
  6 TBUF       0005D4 R   |     TBUFFBAS=  000680     |   6 TCHAR      000A64 R
  6 TEMP       0005A5 R   |   6 TEVAL      0005F7 R   |   6 TFLASH     0005E6 R
  6 THENN      0014FD R   |   6 TIB        000B4A R   |     TIBB    =  000700 
    TIBBASE =  000700     |     TIC     =  000027     |   6 TICK       0013D7 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 122.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R   |   6 TIMER      0002F8 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      00192C R
  6 TNAM3      00194A R   |   6 TNAM4      001950 R   |   6 TNAME      001929 R
  6 TOFLASH    000333 R   |   6 TOKEN      0010B2 R   |   6 TOR        0004A2 R
  6 TORAM      000373 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000A20 R
  6 TYPE1      000E87 R   |   6 TYPE2      000E93 R   |   6 TYPES      000E82 R
  6 Timer4Ha   000005 R   |     UART2_BR=  005242     |     UART2_BR=  005243 
    UART2_CR=  005244     |     UART2_CR=  005245     |     UART2_CR=  005246 
    UART2_CR=  005247     |     UART2_CR=  005248     |     UART2_CR=  004249 
    UART2_DR=  005241     |     UART2_GT=  00524A     |     UART2_PO=  00500F 
    UART2_PS=  00524B     |     UART2_RX=  000006     |     UART2_SR=  005240 
    UART2_TX=  000005     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_DR =  005241     |     UART_SR =  005240     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000F28 R   |   6 UDOTR      000F08 R
  6 UEND       000045 R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      0007AA R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 123.
Hexadecimal [24-Bits]

Symbol Table

  6 ULESS      000794 R   |   6 UMMOD      00082A R   |   6 UMSTA      000903 R
  6 UNIQ1      0015E2 R   |   6 UNIQU      0015C3 R   |   6 UNLKEE     001B4A R
  6 UNLKFL     001B69 R   |   6 UNLOCK     001B88 R   |   6 UNTIL      0014C5 R
    UOFFSET =  00001C     |   6 UPDATCP    001B1E R   |   6 UPDATLAS   001AF5 R
  6 UPDATPTR   0020EC R   |   6 UPDATRUN   001B0D R   |   6 UPDATVP    001B35 R
  6 UPL1       00057A R   |   6 UPLUS      000563 R   |     UPP     =  000006 
    URLAST  =  000020     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001866 R   |   6 UTYP2      001875 R
  6 UTYPE      001861 R   |     UVP     =  000016     |   6 UZERO      00002B R
  6 VARIA      001790 R   |     VAR_BASE=  000080     |     VAR_TOP =  0007BF 
    VER     =  000003     |   6 VPP        000627 R   |     VSIZE   =  000006 
    WANT_CON=  000001     |     WANT_DEB=  000000     |     WANT_SCA=  000001 
    WANT_SEE=  000000     |   6 WHILE      00154B R   |   6 WITHI      00080F R
  6 WORDD      00109E R   |   6 WORDS      001986 R   |   6 WORS1      00198C R
  6 WORS2      0019A8 R   |   6 WR_BYTE    001C33 R   |   6 WR_WORD    001C52 R
  6 WTABLE     002244 R   |   6 WTAT       002268 R   |   6 WTINIT     0022AD R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |     X4_FLASH=  00BFFF 
    X4_FLASH=  004000     |     X6_FLASH=  00FFFF     |     X6_FLASH=  008000 
    XMEM_SIZ=  000000     |   6 XORR       00054E R   |     XTEMP   =  000022 
    YTEMP   =  000024     |   6 ZERO       000A3A R   |   6 ZL1        00051B R
  6 ZLESS      000512 R   |   6 app_spac   002300 R   |   6 block_er   001D0F R
  6 clear_ra   000019 R   |   6 clock_in   000062 R   |   6 copy_buf   001D66 R
  6 copy_buf   001D85 R   |   6 copy_pro   001D85 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 erase_fl   001D2B R   |   6 fmove_do   0020D5 R   |   6 main       000016 R
  6 next_row   002092 R   |   6 no_move    0020DC R   |   6 pristine   001E00 R
  6 proceed_   001D2E R   |   6 reboot     000325 R   |   6 reset_ve   001E67 R
  6 row_eras   001CF2 R   |   6 row_eras   001D3F R   |   6 row_eras   001D66 R
  6 set_opti   001DD4 R   |   6 set_vect   001F08 R   |   6 uart_ini   000074 R
  6 write_ro   001DAA R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 124.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2300   flags    0

