ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           0016F0    97 DATSTK  =	0x16F0	;data stack  empty
                           001700    98 TIBBASE =       0X1700  ; tib addr.
                                     99 ;******  System Variables  ******
                           00001A   100 XTEMP	=	26	;address called by CREATE
                           00001C   101 YTEMP	=	28	;address called by CREATE
                           00001A   102 PROD1 = 26	;space for UM*
                           00001C   103 PROD2 = 28
                           00001E   104 PROD3 = 30
                           000020   105 CARRY = 32
                           000022   106 SP0	=	34	 ;initial data stack pointer
                           000024   107 RP0	=	36	;initial return stack pointer
                           000026   108 MS    =         38      ; millisecond counter 
                           000028   109 CNTDWN =        40      ; count down timer 
                                    110 
                                    111 ;***********************************************
                                    112 ;; Version control
                                    113 
                           000002   114 VER     =     2         ;major release version
                           000001   115 EXT     =     1         ;minor extension
                                    116 
                                    117 ;; Constants
                                    118 
                           00FFFF   119 TRUEE   =     0xFFFF      ;true flag
                                    120 
                           000040   121 COMPO   =     0x40     ;lexicon compile only bit
                           000080   122 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   123 MASKK   =     0x1F7F  ;lexicon bit mask
                                    124 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000002   125 CELLL   =     2       ;size of a cell
                           00000A   126 BASEE   =     10      ;default radix
                           000008   127 BKSPP   =     8       ;back space
                           00000A   128 LF      =     10      ;line feed
                           00000D   129 CRR     =     13      ;carriage return
                           00001B   130 ERR     =     27      ;error escape
                           000027   131 TIC     =     39      ;tick
                           0000CD   132 CALLL   =     0xCD     ;CALL opcodes
                                    133 
                                    134 ;; Memory allocation
                                    135 
                           000006   136 UPP     =     RAMBASE+6
                           0016F0   137 SPP     =     RAMBASE+DATSTK
                           0017FF   138 RPP     =     RAMBASE+STACK
                           001700   139 TIBB    =     RAMBASE+TIBBASE
                           000080   140 CTOP    =     RAMBASE+0x80
                                    141 
                           000001   142 .if PICATOUT_MOD 
                                    143 ; user variables constants 
                           000006   144 UBASE = RAMBASE+6 ; numeric base 
                           000008   145 UTMP = UBASE+2    ; temporary storage
                           00000A   146 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   147 UCTIB = UINN+2    ; tib count 
                           00000E   148 UTIB = UCTIB+2    ; tib address 
                           000010   149 UINTER = UTIB+2   ; interpreter vector 
                           000012   150 UHLD = UINTER+2   ; hold 
                           000014   151 UCNTXT = UHLD+2   ; context 
                           000016   152 UCP = UCNTXT+2    ; ram dictionary pointer 
                           000018   153 ULAST = UCP+2     ; flash dictionary pointer 
                           004000   154 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   155 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   156 APP_HERE = APP_RUN+2   ; free application space 
                                    157 .endif ; PICATOUT_MOD
                                    158 
                                    159 
                                    160         .macro _ledon
                                    161         bset PC_ODR,#LED2_BIT
                                    162         .endm
                                    163 
                                    164         .macro _ledoff
                                    165         bres PC_ODR,#LED2_BIT
                                    166         .endm
                                    167 
                                    168 ;**********************************************************
                                    169         .area DATA (ABS)
      000000                        170         .org RAMBASE 
                                    171 ;**********************************************************
                                    172 
                                    173 ;**********************************************************
                                    174         .area SSEG (ABS) ; STACK
      001700                        175         .org 0x1700
      001700                        176         .ds 256 
                                    177 ; space for DATSTK,TIB and STACK         
                                    178 ;**********************************************************
                                    179 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180 ;**********************************************************
                                    181         .area HOME ; vectors table
                                    182 ;**********************************************************
      000000 82 00 00 16            183 	int main	        ; reset
      000004 82 00 00 00            184 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            185 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            186 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            187 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            188 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            189 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            190 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            191 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            192 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            193 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            194 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            195 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            196 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            197 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            198 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            199 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            200 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            201 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            202 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            203 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            204 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            205 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            206 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            207 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            208 	int Timer4Handler	; irq23
      000068 82 00 00 00            209 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            210 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            211 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            212 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            213 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            214 	int NonHandledInterrupt	; irq29
                                    215 
                                    216 ;**********************************************************
                                    217         .area CODE
                                    218 ;**********************************************************
                                    219 
                                    220 ; non handled interrupt reset MCU
      000000                        221 NonHandledInterrupt:
      000000 A6 80            [ 1]  222         ld a, #0x80
      000002 C7 50 D1         [ 1]  223         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    224 	;iret
                                    225 
                                    226 ; used for milliseconds counter 
                                    227 ; MS is 16 bits counter 
      000005                        228 Timer4Handler:
      000005 72 5F 53 42      [ 1]  229 	clr TIM4_SR 
      000009 BE 26            [ 2]  230         ldw x,MS 
      00000B 5C               [ 2]  231         incw x 
      00000C BF 26            [ 2]  232         ldw MS,x
      00000E BE 28            [ 2]  233         ldw x,CNTDWN 
      000010 27 03            [ 1]  234         jreq 1$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000012 5A               [ 2]  235         decw x 
      000013 BF 28            [ 2]  236         ldw CNTDWN,x 
      000015                        237 1$:         
      000015 80               [11]  238         iret 
                                    239 
                                    240 
                                    241 ;; Main entry points and COLD start data
      000016                        242 main:
                                    243 ; clear all RAM
      000016 AE 00 00         [ 2]  244 	ldw X,#RAMBASE
      000019                        245 clear_ram0:
      000019 7F               [ 1]  246 	clr (X)
      00001A 5C               [ 2]  247 	incw X
      00001B A3 17 FF         [ 2]  248 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  249 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  250         ldw x,#RPP
      000023 94               [ 1]  251         ldw sp,x 
      000024 CC 00 3D         [ 2]  252 	jp ORIG
                                    253 
                                    254 ; COLD initialize these variables.
      000027                        255 UZERO:
      000027 00 0A                  256         .word      BASEE   ;BASE
      000029 00 00                  257         .word      0       ;tmp
      00002B 00 00                  258         .word      0       ;>IN
      00002D 00 00                  259         .word      0       ;#TIB
      00002F 17 00                  260         .word      TIBB    ;TIB
      000031 0F BA                  261         .word      INTER   ;'EVAL
      000033 00 00                  262         .word      0       ;HLD
      000035 18 FE                  263         .word       LASTN  ;CNTXT pointer
      000037 00 80                  264         .word       CTOP   ;CP in RAM
      000039 18 FE                  265         .word      LASTN   ;LAST
      00003B 00 00                  266 UEND:  .word      0
                                    267 
      00003D                        268 ORIG:   
                                    269 ; initialize SP
      00003D AE 17 FF         [ 2]  270         LDW     X,#STACK  ;initialize return stack
      000040 94               [ 1]  271         LDW     SP,X
      000041 BF 24            [ 2]  272         LDW     RP0,X
      000043 AE 16 F0         [ 2]  273         LDW     X,#DATSTK ;initialize data stack
      000046 BF 22            [ 2]  274         LDW     SP0,X
                                    275 ; initialize PC_5 as output to control LED2
                                    276 ; added by Picatout 
      000048 72 1A 50 0D      [ 1]  277         bset PC_CR1,#LED2_BIT
      00004C 72 1A 50 0E      [ 1]  278         bset PC_CR2,#LED2_BIT
      000050 72 1A 50 0C      [ 1]  279         bset PC_DDR,#LED2_BIT
      000054                        280         _ledoff
      000054 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    281 ; initialize clock to HSI
                                    282 ; no divisor 16Mhz 
                                    283 ; Added by Picatout 
      000058                        284 clock_init:
      000058 72 5F 50 C6      [ 1]  285         clr CLK_CKDIVR
      00005C 72 12 50 C5      [ 1]  286 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000060 A6 E1            [ 1]  287 	ld a,#CLK_SWR_HSI
      000062 C7 50 C4         [ 1]  288 	ld CLK_SWR,a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000065 C1 50 C3         [ 1]  289 1$:	cp a,CLK_CMSR
      000068 26 FB            [ 1]  290 	jrne 1$
                                    291         
                                    292 ; initialize UART1, 115200 8N1
      00006A                        293 uart1_init:
      00006A 72 14 50 C7      [ 1]  294 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    295 	; configure tx pin
      00006E 72 1A 50 02      [ 1]  296 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000072 72 1A 50 03      [ 1]  297 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000076 72 1A 50 04      [ 1]  298 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    299 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007A 35 0B 52 33      [ 1]  300 	mov UART1_BRR2,#0x0b ; must be loaded first
      00007E 35 08 52 32      [ 1]  301 	mov UART1_BRR1,#0x8
      000082 35 0C 52 35      [ 1]  302 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    303 ; initialize timer4, used for millisecond interrupt  
      000086 35 07 53 45      [ 1]  304 	mov TIM4_PSCR,#7 ; prescale 128  
      00008A 35 7D 53 46      [ 1]  305 	mov TIM4_ARR,#125 ; set for 1msec.
      00008E 35 05 53 40      [ 1]  306 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000092 72 10 53 41      [ 1]  307 	bset TIM4_IER,#TIM4_IER_UIE 
      000096 9A               [ 1]  308         rim
      000097 CC 15 77         [ 2]  309         jp  COLD   ;default=MN1
                                    310 
                                    311 
                                    312 ;; get millisecond counter 
                                    313 ;; msec ( -- u )
                                    314 ;; Added by Picatout 2020-04-26
      00009A 00 00                  315         .word 0 
                           00009C   316 LINK = . 
      00009C 04                     317         .byte 4
      00009D 4D 53 45 43            318         .ascii "MSEC"
      0000A1                        319 MSEC: 
      0000A1 1D 00 02         [ 2]  320         subw x,#CELLL 
      0000A4 90 BE 26         [ 2]  321         ldw y,MS 
      0000A7 FF               [ 2]  322         ldw (x),y 
      0000A8 81               [ 4]  323         ret 
                                    324 
                                    325 ; suspend execution for u msec 
                                    326 ;  pause ( u -- )
      0000A9 00 9C                  327         .word LINK 
                           0000AB   328         LINK=.
      0000AB 05                     329         .byte 5 
      0000AC 50 41 55 53 45         330         .ascii "PAUSE"
      0000B1                        331 PAUSE:
      0000B1 90 93            [ 1]  332         ldw y,x
      0000B3 90 FE            [ 2]  333         ldw y,(y)
      0000B5 72 B9 00 26      [ 2]  334         addw y,MS 
      0000B9 8F               [10]  335 1$:     wfi  
      0000BA 90 B3 26         [ 2]  336         cpw y,MS  
      0000BD 26 FA            [ 1]  337         jrne 1$        
      0000BF 1C 00 02         [ 2]  338         addw x,#CELLL 
      0000C2 81               [ 4]  339         ret 
                                    340 
                                    341 ; initialize count down timer 
                                    342 ;  TIMER ( u -- )  milliseconds 
      0000C3 00 AB                  343         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           0000C5   344         LINK=.
      0000C5 05                     345         .byte 5 
      0000C6 54 49 4D 45 52         346         .ascii "TIMER" 
      0000CB                        347 TIMER:
      0000CB 90 93            [ 1]  348         ldw y,x
      0000CD 90 FE            [ 2]  349         ldw y,(y) 
      0000CF 90 BF 28         [ 2]  350         ldw CNTDWN,y
      0000D2 1C 00 02         [ 2]  351         addw x,#CELLL 
      0000D5 81               [ 4]  352         ret 
                                    353 
                                    354 ; check for TIMER exiparition 
                                    355 ;  TIMEOUT? ( -- 0|-1 )
      0000D6 00 C5                  356         .word LINK 
                           0000D8   357         LINK=. 
      0000D8 08                     358         .byte 8 
      0000D9 54 49 4D 45 4F 55 54   359         .ascii "TIMEOUT?"
             3F
      0000E1                        360 TIMEOUTQ: 
      0000E1 4F               [ 1]  361         clr a
      0000E2 1D 00 02         [ 2]  362         subw x,#CELLL 
      0000E5 90 BE 28         [ 2]  363         ldw y,CNTDWN 
      0000E8 26 01            [ 1]  364         jrne 1$ 
      0000EA 43               [ 1]  365         cpl a 
      0000EB E7 01            [ 1]  366 1$:     ld (1,x),a 
      0000ED F7               [ 1]  367         ld (x),a 
      0000EE 81               [ 4]  368         ret         
                                    369 
                                    370 ;; Device dependent I/O
                                    371 ;       ?RX     ( -- c T | F )
                                    372 ;         Return input byte and true, or false.
      0000EF 00 D8                  373         .word      LINK 
                           0000F1   374 LINK	= .
      0000F1 04                     375         .byte      4
      0000F2 3F 4B 45 59            376         .ascii     "?KEY"
      0000F6                        377 QKEY:
      0000F6 90 5F            [ 1]  378         CLRW Y 
      0000F8 72 0B 52 30 0B   [ 2]  379         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      0000FD C6 52 31         [ 1]  380         LD    A,UART1_DR   ;get char in A
      000100 1D 00 02         [ 2]  381 	SUBW	X,#2
      000103 E7 01            [ 1]  382         LD     (1,X),A
      000105 7F               [ 1]  383 	CLR	(X)
      000106 90 53            [ 2]  384         CPLW     Y
      000108                        385 INCH:
      000108 1D 00 02         [ 2]  386 	SUBW	X,#2
      00010B FF               [ 2]  387         LDW     (X),Y
      00010C 81               [ 4]  388         RET
                                    389 
                                    390 ;       TX!     ( c -- )
                                    391 ;       Send character c to  output device.
      00010D 00 F1                  392         .word      LINK
                           00010F   393 LINK	= .
      00010F 04                     394         .byte      4
      000110 45 4D 49 54            395         .ascii     "EMIT"
      000114                        396 EMIT:
      000114 E6 01            [ 1]  397         LD     A,(1,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000116 1C 00 02         [ 2]  398 	ADDW	X,#2
      000119 72 0F 52 30 FB   [ 2]  399 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00011E C7 52 31         [ 1]  400         LD    UART1_DR,A   ;send A
      000121 81               [ 4]  401         RET
                                    402 
                                    403 ;; The kernel
                                    404 
                                    405 ;       doLIT   ( -- w )
                                    406 ;       Push an inline literal.
      000122 01 0F                  407         .word      LINK
                           000124   408 LINK	= 	.
      000124 45                     409 	.byte      COMPO+5
      000125 44 4F 4C 49 54         410         .ascii     "DOLIT"
      00012A                        411 DOLIT:
      00012A 1D 00 02         [ 2]  412 	SUBW X,#2
                           000001   413 .if PICATOUT_MOD 
      00012D 16 01            [ 2]  414         ldw y,(1,sp)
      00012F 90 FE            [ 2]  415         ldw y,(y)
      000131 FF               [ 2]  416         ldw (x),y
      000132 90 85            [ 2]  417         popw y 
                           000000   418 .else 
                                    419         POPW Y
                                    420 	LDW YTEMP,Y
                                    421 	LDW Y,(Y)
                                    422         LDW (X),Y
                                    423         LDW Y,YTEMP
                                    424 .endif 
      000134 90 EC 02         [ 2]  425 	JP (2,Y)
                                    426 
                                    427 ;       next    ( -- )
                                    428 ;       Code for  single index loop.
      000137 01 24                  429         .word      LINK
                           000139   430 LINK	= 	.
      000139 44                     431 	.byte      COMPO+4
      00013A 4E 45 58 54            432         .ascii     "NEXT"
      00013E                        433 DONXT:
      00013E 16 03            [ 2]  434 	LDW Y,(3,SP)
      000140 90 5A            [ 2]  435 	DECW Y
      000142 2A 07            [ 1]  436 	JRPL NEX1
      000144 90 85            [ 2]  437 	POPW Y
                           000001   438 .if PICATOUT_MOD
      000146 5B 02            [ 2]  439         addw sp,#2
                           000000   440 .else        
                                    441 	POP A
                                    442 	POP A
                                    443 .endif         
      000148 90 EC 02         [ 2]  444         JP (2,Y)
      00014B                        445 NEX1:
      00014B 17 03            [ 2]  446         LDW (3,SP),Y
      00014D 90 85            [ 2]  447         POPW Y
      00014F 90 FE            [ 2]  448 	LDW Y,(Y)
      000151 90 FC            [ 2]  449 	JP (Y)
                                    450 
                                    451 ;       ?branch ( f -- )
                                    452 ;       Branch if flag is zero.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000153 01 39                  453         .word      LINK
                           000155   454 LINK	= 	.
      000155 47                     455 	.byte      COMPO+7
      000156 3F 42 52 41 4E 43 48   456         .ascii     "?BRANCH"
      00015D                        457 QBRAN:	
      00015D 90 93            [ 1]  458         LDW Y,X
      00015F 1C 00 02         [ 2]  459 	ADDW X,#2
      000162 90 FE            [ 2]  460 	LDW Y,(Y)
      000164 27 0E            [ 1]  461         JREQ     BRAN
      000166 90 85            [ 2]  462 	POPW Y
      000168 90 EC 02         [ 2]  463 	JP (2,Y)
                                    464         
                                    465 ;       branch  ( -- )
                                    466 ;       Branch to an inline address.
      00016B 01 55                  467         .word      LINK
                           00016D   468 LINK	= 	.
      00016D 46                     469 	.byte      COMPO+6
      00016E 42 52 41 4E 43 48      470         .ascii     "BRANCH"
      000174                        471 BRAN:
      000174 90 85            [ 2]  472         POPW Y
      000176 90 FE            [ 2]  473 	LDW Y,(Y)
      000178 90 FC            [ 2]  474         JP     (Y)
                                    475 
                                    476 ;       EXECUTE ( ca -- )
                                    477 ;       Execute  word at ca.
      00017A 01 6D                  478         .word      LINK
                           00017C   479 LINK	= 	.
      00017C 07                     480         .byte       7
      00017D 45 58 45 43 55 54 45   481         .ascii     "EXECUTE"
      000184                        482 EXECU:
      000184 90 93            [ 1]  483         LDW Y,X
      000186 1C 00 02         [ 2]  484 	ADDW X,#2
      000189 90 FE            [ 2]  485 	LDW  Y,(Y)
      00018B 90 FC            [ 2]  486         JP   (Y)
                                    487 
                                    488 ;       EXIT    ( -- )
                                    489 ;       Terminate a colon definition.
      00018D 01 7C                  490         .word      LINK
                           00018F   491 LINK = .
      00018F 04                     492         .byte      4
      000190 45 58 49 54            493         .ascii     "EXIT"
      000194                        494 EXIT:
      000194 90 85            [ 2]  495         POPW Y
      000196 81               [ 4]  496         RET
                                    497 
                                    498 ;       !       ( w a -- )
                                    499 ;       Pop  data stack to memory.
      000197 01 8F                  500         .word      LINK
                           000199   501 LINK = .
      000199 01                     502         .byte      1
      00019A 21                     503         .ascii     "!"
      00019B                        504 STORE:
      00019B 90 93            [ 1]  505         LDW Y,X
      00019D 90 FE            [ 2]  506         LDW Y,(Y)    ;Y=a
      00019F 90 BF 1C         [ 2]  507         LDW YTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001A2 90 93            [ 1]  508         LDW Y,X
      0001A4 90 EE 02         [ 2]  509         LDW Y,(2,Y)
      0001A7 91 CF 1C         [ 5]  510         LDW [YTEMP],Y ;store w at a
      0001AA 1C 00 04         [ 2]  511         ADDW X,#4 ; DDROP 
      0001AD 81               [ 4]  512         RET     
                                    513 
                                    514 ;       @       ( a -- w )
                                    515 ;       Push memory location to stack.
      0001AE 01 99                  516         .word      LINK
                           0001B0   517 LINK	= 	.
      0001B0 01                     518         .byte    1
      0001B1 40                     519         .ascii	"@"
      0001B2                        520 AT:
      0001B2 90 93            [ 1]  521         LDW Y,X     ;Y = a
      0001B4 90 FE            [ 2]  522         LDW Y,(Y)   ; address 
      0001B6 90 FE            [ 2]  523         LDW Y,(Y)   ; value 
      0001B8 FF               [ 2]  524         LDW (X),Y ;w = @Y
      0001B9 81               [ 4]  525         RET     
                                    526 
                                    527 ;       C!      ( c b -- )
                                    528 ;       Pop  data stack to byte memory.
      0001BA 01 B0                  529         .word      LINK
                           0001BC   530 LINK	= .
      0001BC 02                     531         .byte      2
      0001BD 43 21                  532         .ascii     "C!"
      0001BF                        533 CSTOR:
      0001BF 90 93            [ 1]  534         LDW Y,X
      0001C1 90 FE            [ 2]  535 	LDW Y,(Y)    ;Y=b
      0001C3 E6 03            [ 1]  536         LD A,(3,X)    ;D = c
      0001C5 90 F7            [ 1]  537         LD  (Y),A     ;store c at b
      0001C7 1C 00 04         [ 2]  538 	ADDW X,#4 ; DDROP 
      0001CA 81               [ 4]  539         RET     
                                    540 
                                    541 ;       C@      ( b -- c )
                                    542 ;       Push byte in memory to  stack.
      0001CB 01 BC                  543         .word      LINK
                           0001CD   544 LINK	= 	.
      0001CD 02                     545         .byte      2
      0001CE 43 40                  546         .ascii     "C@"
      0001D0                        547 CAT:
      0001D0 90 93            [ 1]  548         LDW Y,X     ;Y=b
      0001D2 90 FE            [ 2]  549         LDW Y,(Y)
      0001D4 90 F6            [ 1]  550         LD A,(Y)
      0001D6 E7 01            [ 1]  551         LD (1,X),A
      0001D8 7F               [ 1]  552         CLR (X)
      0001D9 81               [ 4]  553         RET     
                                    554 
                                    555 ;       RP@     ( -- a )
                                    556 ;       Push current RP to data stack.
      0001DA 01 CD                  557         .word      LINK
                           0001DC   558 LINK	= .
      0001DC 03                     559         .byte      3
      0001DD 52 50 40               560         .ascii     "RP@"
      0001E0                        561 RPAT:
      0001E0 90 96            [ 1]  562         LDW Y,SP    ;save return addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001E2 1D 00 02         [ 2]  563         SUBW X,#2
      0001E5 FF               [ 2]  564         LDW (X),Y
      0001E6 81               [ 4]  565         RET     
                                    566 
                                    567 ;       RP!     ( a -- )
                                    568 ;       Set  return stack pointer.
      0001E7 01 DC                  569         .word      LINK
                           0001E9   570 LINK	= 	. 
      0001E9 43                     571 	.byte      COMPO+3
      0001EA 52 50 21               572         .ascii     "RP!"
      0001ED                        573 RPSTO:
      0001ED 90 85            [ 2]  574         POPW Y
      0001EF 90 BF 1C         [ 2]  575         LDW YTEMP,Y
      0001F2 90 93            [ 1]  576         LDW Y,X
      0001F4 90 FE            [ 2]  577         LDW Y,(Y)
      0001F6 90 94            [ 1]  578         LDW SP,Y
      0001F8 1C 00 02         [ 2]  579         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      0001FB 92 CC 1C         [ 5]  580         JP [YTEMP]
                                    581 
                                    582 ;       R>      ( -- w )
                                    583 ;       Pop return stack to data stack.
      0001FE 01 E9                  584         .word      LINK
                           000200   585 LINK	= 	. 
      000200 42                     586 	.byte      COMPO+2
      000201 52 3E                  587         .ascii     "R>"
      000203                        588 RFROM:
      000203 90 85            [ 2]  589         POPW Y    ;save return addr
      000205 90 BF 1C         [ 2]  590         LDW YTEMP,Y
      000208 90 85            [ 2]  591         POPW Y
      00020A 1D 00 02         [ 2]  592         SUBW X,#2
      00020D FF               [ 2]  593         LDW (X),Y
      00020E 92 CC 1C         [ 5]  594         JP [YTEMP]
                                    595 
                                    596 ;       R@      ( -- w )
                                    597 ;       Copy top of return stack to stack.
      000211 02 00                  598         .word      LINK
                           000213   599 LINK	= 	. 
      000213 02                     600         .byte      2
      000214 52 40                  601         .ascii     "R@"
      000216                        602 RAT:
                           000001   603 .if PICATOUT_MOD
      000216 16 03            [ 2]  604         ldw y,(3,sp)
      000218 1D 00 02         [ 2]  605         subw x,#CELLL 
      00021B FF               [ 2]  606         ldw (x),y 
      00021C 81               [ 4]  607         ret 
                           000000   608 .else 
                                    609         POPW Y
                                    610         LDW YTEMP,Y
                                    611         POPW Y
                                    612         PUSHW Y
                                    613         SUBW X,#2
                                    614         LDW (X),Y
                                    615         JP [YTEMP]
                                    616 .endif         
                                    617 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    618 ;       >R      ( w -- )
                                    619 ;       Push data stack to return stack.
      00021D 02 13                  620         .word      LINK
                           00021F   621 LINK	= 	. 
      00021F 42                     622 	.byte      COMPO+2
      000220 3E 52                  623         .ascii     ">R"
      000222                        624 TOR:
      000222 90 85            [ 2]  625         POPW Y    ;save return addr
      000224 90 BF 1C         [ 2]  626         LDW YTEMP,Y
      000227 90 93            [ 1]  627         LDW Y,X
      000229 90 FE            [ 2]  628         LDW Y,(Y)
      00022B 90 89            [ 2]  629         PUSHW Y    ;restore return addr
      00022D 1C 00 02         [ 2]  630         ADDW X,#2
      000230 92 CC 1C         [ 5]  631         JP [YTEMP]
                                    632 
                                    633 ;       SP@     ( -- a )
                                    634 ;       Push current stack pointer.
      000233 02 1F                  635         .word      LINK
                           000235   636 LINK	= 	. 
      000235 03                     637         .byte      3
      000236 53 50 40               638         .ascii     "SP@"
      000239                        639 SPAT:
      000239 90 93            [ 1]  640 	LDW Y,X
      00023B 1D 00 02         [ 2]  641         SUBW X,#2
      00023E FF               [ 2]  642 	LDW (X),Y
      00023F 81               [ 4]  643         RET     
                                    644 
                                    645 ;       SP!     ( a -- )
                                    646 ;       Set  data stack pointer.
      000240 02 35                  647         .word      LINK
                           000242   648 LINK	= 	. 
      000242 03                     649         .byte      3
      000243 53 50 21               650         .ascii     "SP!"
      000246                        651 SPSTO:
      000246 FE               [ 2]  652         LDW     X,(X)     ;X = a
      000247 81               [ 4]  653         RET     
                                    654 
                                    655 ;       DROP    ( w -- )
                                    656 ;       Discard top stack item.
      000248 02 42                  657         .word      LINK
                           00024A   658 LINK	= 	. 
      00024A 04                     659         .byte      4
      00024B 44 52 4F 50            660         .ascii     "DROP"
      00024F                        661 DROP:
      00024F 1C 00 02         [ 2]  662         ADDW X,#2     
      000252 81               [ 4]  663         RET     
                                    664 
                                    665 ;       DUP     ( w -- w w )
                                    666 ;       Duplicate  top stack item.
      000253 02 4A                  667         .word      LINK
                           000255   668 LINK	= 	. 
      000255 03                     669         .byte      3
      000256 44 55 50               670         .ascii     "DUP"
      000259                        671 DUPP:
      000259 90 93            [ 1]  672 	LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00025B 1D 00 02         [ 2]  673         SUBW X,#2
      00025E 90 FE            [ 2]  674 	LDW Y,(Y)
      000260 FF               [ 2]  675 	LDW (X),Y
      000261 81               [ 4]  676         RET     
                                    677 
                                    678 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    679 ;       Exchange top two stack items.
      000262 02 55                  680         .word      LINK
                           000264   681 LINK	= 	. 
      000264 04                     682         .byte      4
      000265 53 57 41 50            683         .ascii     "SWAP"
      000269                        684 SWAPP:
      000269 90 93            [ 1]  685         LDW Y,X
      00026B 90 FE            [ 2]  686         LDW Y,(Y)
      00026D 90 BF 1C         [ 2]  687         LDW YTEMP,Y
      000270 90 93            [ 1]  688         LDW Y,X
      000272 90 EE 02         [ 2]  689         LDW Y,(2,Y)
      000275 FF               [ 2]  690         LDW (X),Y
      000276 90 BE 1C         [ 2]  691         LDW Y,YTEMP
      000279 EF 02            [ 2]  692         LDW (2,X),Y
      00027B 81               [ 4]  693         RET     
                                    694 
                                    695 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    696 ;       Copy second stack item to top.
      00027C 02 64                  697         .word      LINK
                           00027E   698 LINK	= . 
      00027E 04                     699         .byte      4
      00027F 4F 56 45 52            700         .ascii     "OVER"
      000283                        701 OVER:
      000283 1D 00 02         [ 2]  702         SUBW X,#2
      000286 90 93            [ 1]  703         LDW Y,X
      000288 90 EE 04         [ 2]  704         LDW Y,(4,Y)
      00028B FF               [ 2]  705         LDW (X),Y
      00028C 81               [ 4]  706         RET     
                                    707 
                                    708 ;       0<      ( n -- t )
                                    709 ;       Return true if n is negative.
      00028D 02 7E                  710         .word      LINK
                           00028F   711 LINK	= . 
      00028F 02                     712         .byte      2
      000290 30 3C                  713         .ascii     "0<"
      000292                        714 ZLESS:
      000292 A6 FF            [ 1]  715         LD A,#0xFF
      000294 90 93            [ 1]  716         LDW Y,X
      000296 90 FE            [ 2]  717         LDW Y,(Y)
      000298 2B 01            [ 1]  718         JRMI     ZL1
      00029A 4F               [ 1]  719         CLR A   ;false
      00029B F7               [ 1]  720 ZL1:    LD     (X),A
      00029C E7 01            [ 1]  721         LD (1,X),A
      00029E 81               [ 4]  722 	RET     
                                    723 
                                    724 ;       AND     ( w w -- w )
                                    725 ;       Bitwise AND.
      00029F 02 8F                  726         .word      LINK
                           0002A1   727 LINK	= . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002A1 03                     728         .byte      3
      0002A2 41 4E 44               729         .ascii     "AND"
      0002A5                        730 ANDD:
      0002A5 F6               [ 1]  731         LD  A,(X)    ;D=w
      0002A6 E4 02            [ 1]  732         AND A,(2,X)
      0002A8 E7 02            [ 1]  733         LD (2,X),A
      0002AA E6 01            [ 1]  734         LD A,(1,X)
      0002AC E4 03            [ 1]  735         AND A,(3,X)
      0002AE E7 03            [ 1]  736         LD (3,X),A
      0002B0 1C 00 02         [ 2]  737         ADDW X,#2
      0002B3 81               [ 4]  738         RET
                                    739 
                                    740 ;       OR      ( w w -- w )
                                    741 ;       Bitwise inclusive OR.
      0002B4 02 A1                  742         .word      LINK
                           0002B6   743 LINK = . 
      0002B6 02                     744         .byte      2
      0002B7 4F 52                  745         .ascii     "OR"
      0002B9                        746 ORR:
      0002B9 F6               [ 1]  747         LD A,(X)    ;D=w
      0002BA EA 02            [ 1]  748         OR A,(2,X)
      0002BC E7 02            [ 1]  749         LD (2,X),A
      0002BE E6 01            [ 1]  750         LD A,(1,X)
      0002C0 EA 03            [ 1]  751         OR A,(3,X)
      0002C2 E7 03            [ 1]  752         LD (3,X),A
      0002C4 1C 00 02         [ 2]  753         ADDW X,#2
      0002C7 81               [ 4]  754         RET
                                    755 
                                    756 ;       XOR     ( w w -- w )
                                    757 ;       Bitwise exclusive OR.
      0002C8 02 B6                  758         .word      LINK
                           0002CA   759 LINK	= . 
      0002CA 03                     760         .byte      3
      0002CB 58 4F 52               761         .ascii     "XOR"
      0002CE                        762 XORR:
      0002CE F6               [ 1]  763         LD A,(X)    ;D=w
      0002CF E8 02            [ 1]  764         XOR A,(2,X)
      0002D1 E7 02            [ 1]  765         LD (2,X),A
      0002D3 E6 01            [ 1]  766         LD A,(1,X)
      0002D5 E8 03            [ 1]  767         XOR A,(3,X)
      0002D7 E7 03            [ 1]  768         LD (3,X),A
      0002D9 1C 00 02         [ 2]  769         ADDW X,#2
      0002DC 81               [ 4]  770         RET
                                    771 
                                    772 ;       UM+     ( u u -- udsum )
                                    773 ;       Add two unsigned single
                                    774 ;       and return a double sum.
      0002DD 02 CA                  775         .word      LINK
                           0002DF   776 LINK	= . 
      0002DF 03                     777         .byte      3
      0002E0 55 4D 2B               778         .ascii     "UM+"
      0002E3                        779 UPLUS:
      0002E3 A6 01            [ 1]  780         LD A,#1
      0002E5 90 93            [ 1]  781         LDW Y,X
      0002E7 90 EE 02         [ 2]  782         LDW Y,(2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0002EA 90 BF 1C         [ 2]  783         LDW YTEMP,Y
      0002ED 90 93            [ 1]  784         LDW Y,X
      0002EF 90 FE            [ 2]  785         LDW Y,(Y)
      0002F1 72 B9 00 1C      [ 2]  786         ADDW Y,YTEMP
      0002F5 EF 02            [ 2]  787         LDW (2,X),Y
      0002F7 25 01            [ 1]  788         JRC     UPL1
      0002F9 4F               [ 1]  789         CLR A
      0002FA E7 01            [ 1]  790 UPL1:   LD     (1,X),A
      0002FC 7F               [ 1]  791         CLR (X)
      0002FD 81               [ 4]  792         RET
                                    793 
                                    794 ;; System and user variables
                                    795 
                                    796 ;       doVAR   ( -- a )
                                    797 ;       Code for VARIABLE and CREATE.
      0002FE 02 DF                  798         .word      LINK
                           000300   799 LINK	= . 
      000300 45                     800 	.byte      COMPO+5
      000301 44 4F 56 41 52         801         .ascii     "DOVAR"
      000306                        802 DOVAR:
      000306 1D 00 02         [ 2]  803 	SUBW X,#2
      000309 90 85            [ 2]  804         POPW Y    ;get return addr (pfa)
      00030B FF               [ 2]  805         LDW (X),Y    ;push on stack
      00030C 81               [ 4]  806         RET     ;go to RET of EXEC
                                    807 
                                    808 ;       BASE    ( -- a )
                                    809 ;       Radix base for numeric I/O.
      00030D 03 00                  810         .word      LINK        
                           00030F   811 LINK = . 
      00030F 04                     812         .byte      4
      000310 42 41 53 45            813         .ascii     "BASE"
      000314                        814 BASE:
      000314 90 AE 00 06      [ 2]  815 	LDW Y,#UBASE 
      000318 1D 00 02         [ 2]  816 	SUBW X,#2
      00031B FF               [ 2]  817         LDW (X),Y
      00031C 81               [ 4]  818         RET
                                    819 
                                    820 ;       tmp     ( -- a )
                                    821 ;       A temporary storage.
      00031D 03 0F                  822         .word      LINK
                                    823         
                           00031F   824 LINK = . 
      00031F 03                     825 	.byte      3
      000320 54 4D 50               826         .ascii     "TMP"
      000323                        827 TEMP:
      000323 90 AE 00 08      [ 2]  828 	LDW Y,#UTMP
      000327 1D 00 02         [ 2]  829 	SUBW X,#2
      00032A FF               [ 2]  830         LDW (X),Y
      00032B 81               [ 4]  831         RET
                                    832 
                                    833 ;       >IN     ( -- a )
                                    834 ;        Hold parsing pointer.
      00032C 03 1F                  835         .word      LINK
                           00032E   836 LINK = . 
      00032E 03                     837         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00032F 3E 49 4E               838         .ascii    ">IN"
      000332                        839 INN:
      000332 90 AE 00 0A      [ 2]  840 	LDW Y,#UINN 
      000336 1D 00 02         [ 2]  841 	SUBW X,#2
      000339 FF               [ 2]  842         LDW (X),Y
      00033A 81               [ 4]  843         RET
                                    844 
                                    845 ;       #TIB    ( -- a )
                                    846 ;       Count in terminal input buffer.
      00033B 03 2E                  847         .word      LINK
                           00033D   848 LINK = . 
      00033D 04                     849         .byte      4
      00033E 23 54 49 42            850         .ascii     "#TIB"
      000342                        851 NTIB:
      000342 90 AE 00 0C      [ 2]  852 	LDW Y,#UCTIB 
      000346 1D 00 02         [ 2]  853 	SUBW X,#2
      000349 FF               [ 2]  854         LDW (X),Y
      00034A 81               [ 4]  855         RET
                                    856 
                                    857 ;       "EVAL   ( -- a )
                                    858 ;       Execution vector of EVAL.
      00034B 03 3D                  859         .word      LINK
                           00034D   860 LINK = . 
      00034D 05                     861         .byte      5
      00034E 27 45 56 41 4C         862         .ascii     "'EVAL"
      000353                        863 TEVAL:
      000353 90 AE 00 10      [ 2]  864 	LDW Y,#UINTER 
      000357 1D 00 02         [ 2]  865 	SUBW X,#2
      00035A FF               [ 2]  866         LDW (X),Y
      00035B 81               [ 4]  867         RET
                                    868 
                                    869 ;       HLD     ( -- a )
                                    870 ;       Hold a pointer of output string.
      00035C 03 4D                  871         .word      LINK
                           00035E   872 LINK = . 
      00035E 03                     873         .byte      3
      00035F 48 4C 44               874         .ascii     "HLD"
      000362                        875 HLD:
      000362 90 AE 00 12      [ 2]  876 	LDW Y,#UHLD 
      000366 1D 00 02         [ 2]  877 	SUBW X,#2
      000369 FF               [ 2]  878         LDW (X),Y
      00036A 81               [ 4]  879         RET
                                    880 
                                    881 ;       CONTEXT ( -- a )
                                    882 ;       Start vocabulary search.
      00036B 03 5E                  883         .word      LINK
                           00036D   884 LINK = . 
      00036D 07                     885         .byte      7
      00036E 43 4F 4E 54 45 58 54   886         .ascii     "CONTEXT"
      000375                        887 CNTXT:
      000375 90 AE 00 14      [ 2]  888 	LDW Y,#UCNTXT
      000379 1D 00 02         [ 2]  889 	SUBW X,#2
      00037C FF               [ 2]  890         LDW (X),Y
      00037D 81               [ 4]  891         RET
                                    892 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    893 ;       CP      ( -- a )
                                    894 ;       Point to top of dictionary.
      00037E 03 6D                  895         .word      LINK
                           000380   896 LINK = . 
      000380 02                     897         .byte      2
      000381 43 50                  898         .ascii     "CP"
      000383                        899 CPP:
      000383 90 AE 00 16      [ 2]  900 	LDW Y,#UCP 
      000387 1D 00 02         [ 2]  901 	SUBW X,#2
      00038A FF               [ 2]  902         LDW (X),Y
      00038B 81               [ 4]  903         RET
                                    904 
                                    905 ;       LAST    ( -- a )
                                    906 ;       Point to last name in dictionary.
      00038C 03 80                  907         .word      LINK
                           00038E   908 LINK = . 
      00038E 04                     909         .byte      4
      00038F 4C 41 53 54            910         .ascii     "LAST"
      000393                        911 LAST:
      000393 90 AE 00 18      [ 2]  912 	LDW Y,#ULAST 
      000397 1D 00 02         [ 2]  913 	SUBW X,#2
      00039A FF               [ 2]  914         LDW (X),Y
      00039B 81               [ 4]  915         RET
                                    916 
                                    917 ;; Common functions
                                    918 
                                    919 ;       ?DUP    ( w -- w w | 0 )
                                    920 ;       Dup tos if its is not zero.
      00039C 03 8E                  921         .word      LINK
                           00039E   922 LINK = . 
      00039E 04                     923         .byte      4
      00039F 3F 44 55 50            924         .ascii     "?DUP"
      0003A3                        925 QDUP:
      0003A3 90 93            [ 1]  926         LDW Y,X
      0003A5 90 FE            [ 2]  927 	LDW Y,(Y)
      0003A7 27 04            [ 1]  928         JREQ     QDUP1
      0003A9 1D 00 02         [ 2]  929 	SUBW X,#2
      0003AC FF               [ 2]  930         LDW (X),Y
      0003AD 81               [ 4]  931 QDUP1:  RET
                                    932 
                                    933 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    934 ;       Rot 3rd item to top.
      0003AE 03 9E                  935         .word      LINK
                           0003B0   936 LINK = . 
      0003B0 03                     937         .byte      3
      0003B1 52 4F 54               938         .ascii     "ROT"
      0003B4                        939 ROT:
                           000001   940 .if PICATOUT_MOD
      0003B4 90 93            [ 1]  941         ldw y,x 
      0003B6 90 FE            [ 2]  942         ldw y,(y)
      0003B8 90 89            [ 2]  943         pushw y 
      0003BA 90 93            [ 1]  944         ldw y,x 
      0003BC 90 EE 04         [ 2]  945         ldw y,(4,y)
      0003BF FF               [ 2]  946         ldw (x),y 
      0003C0 90 93            [ 1]  947         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003C2 90 EE 02         [ 2]  948         ldw y,(2,y)
      0003C5 EF 04            [ 2]  949         ldw (4,x),y 
      0003C7 90 85            [ 2]  950         popw y 
      0003C9 EF 02            [ 2]  951         ldw (2,x),y
      0003CB 81               [ 4]  952         ret 
                           000000   953 .else 
                                    954         LDW Y,X
                                    955 	LDW Y,(4,Y)
                                    956 	LDW YTEMP,Y
                                    957         LDW Y,X
                                    958         LDW Y,(2,Y)
                                    959         LDW XTEMP,Y
                                    960         LDW Y,X
                                    961         LDW Y,(Y)
                                    962         LDW (2,X),Y
                                    963         LDW Y,XTEMP
                                    964         LDW (4,X),Y
                                    965         LDW Y,YTEMP
                                    966         LDW (X),Y
                                    967         RET
                                    968 .endif 
                                    969 
                                    970 ;       2DROP   ( w w -- )
                                    971 ;       Discard two items on stack.
      0003CC 03 B0                  972         .word      LINK
                           0003CE   973 LINK = . 
      0003CE 05                     974         .byte      5
      0003CF 32 44 52 4F 50         975         .ascii     "2DROP"
      0003D4                        976 DDROP:
      0003D4 1C 00 04         [ 2]  977         ADDW X,#4
      0003D7 81               [ 4]  978         RET
                                    979 
                                    980 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                    981 ;       Duplicate top two items.
      0003D8 03 CE                  982         .word      LINK
                           0003DA   983 LINK = . 
      0003DA 04                     984         .byte      4
      0003DB 32 44 55 50            985         .ascii     "2DUP"
      0003DF                        986 DDUP:
      0003DF 1D 00 04         [ 2]  987         SUBW X,#4
      0003E2 90 93            [ 1]  988         LDW Y,X
      0003E4 90 EE 06         [ 2]  989         LDW Y,(6,Y)
      0003E7 EF 02            [ 2]  990         LDW (2,X),Y
      0003E9 90 93            [ 1]  991         LDW Y,X
      0003EB 90 EE 04         [ 2]  992         LDW Y,(4,Y)
      0003EE FF               [ 2]  993         LDW (X),Y
      0003EF 81               [ 4]  994         RET
                                    995 
                                    996 ;       +       ( w w -- sum )
                                    997 ;       Add top two items.
      0003F0 03 DA                  998         .word      LINK
                           0003F2   999 LINK = . 
      0003F2 01                    1000         .byte      1
      0003F3 2B                    1001         .ascii     "+"
      0003F4                       1002 PLUS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0003F4 90 93            [ 1] 1003         LDW Y,X
      0003F6 90 FE            [ 2] 1004         LDW Y,(Y)
      0003F8 90 BF 1C         [ 2] 1005         LDW YTEMP,Y
      0003FB 1C 00 02         [ 2] 1006         ADDW X,#2
      0003FE 90 93            [ 1] 1007         LDW Y,X
      000400 90 FE            [ 2] 1008         LDW Y,(Y)
      000402 72 B9 00 1C      [ 2] 1009         ADDW Y,YTEMP
      000406 FF               [ 2] 1010         LDW (X),Y
      000407 81               [ 4] 1011         RET
                                   1012 
                                   1013 ;       NOT     ( w -- w )
                                   1014 ;       One's complement of tos.
      000408 03 F2                 1015         .word      LINK
                           00040A  1016 LINK = . 
      00040A 03                    1017         .byte      3
      00040B 4E 4F 54              1018         .ascii     "NOT"
      00040E                       1019 INVER:
      00040E 90 93            [ 1] 1020         LDW Y,X
      000410 90 FE            [ 2] 1021         LDW Y,(Y)
      000412 90 53            [ 2] 1022         CPLW Y
      000414 FF               [ 2] 1023         LDW (X),Y
      000415 81               [ 4] 1024         RET
                                   1025 
                                   1026 ;       NEGATE  ( n -- -n )
                                   1027 ;       Two's complement of tos.
      000416 04 0A                 1028         .word      LINK
                           000418  1029 LINK = . 
      000418 06                    1030         .byte      6
      000419 4E 45 47 41 54 45     1031         .ascii     "NEGATE"
      00041F                       1032 NEGAT:
      00041F 90 93            [ 1] 1033         LDW Y,X
      000421 90 FE            [ 2] 1034         LDW Y,(Y)
      000423 90 50            [ 2] 1035         NEGW Y
      000425 FF               [ 2] 1036         LDW (X),Y
      000426 81               [ 4] 1037         RET
                                   1038 
                                   1039 ;       DNEGATE ( d -- -d )
                                   1040 ;       Two's complement of top double.
      000427 04 18                 1041         .word      LINK
                           000429  1042 LINK = . 
      000429 07                    1043         .byte      7
      00042A 44 4E 45 47 41 54 45  1044         .ascii     "DNEGATE"
      000431                       1045 DNEGA:
      000431 90 93            [ 1] 1046         LDW Y,X
      000433 90 FE            [ 2] 1047 	LDW Y,(Y)
      000435 90 53            [ 2] 1048         CPLW Y     
      000437 90 BF 1C         [ 2] 1049 	LDW YTEMP,Y
      00043A 90 93            [ 1] 1050         LDW Y,X
      00043C 90 EE 02         [ 2] 1051         LDW Y,(2,Y)
      00043F 90 53            [ 2] 1052         CPLW Y
      000441 90 5C            [ 2] 1053         INCW Y
      000443 EF 02            [ 2] 1054         LDW (2,X),Y
      000445 90 BE 1C         [ 2] 1055         LDW Y,YTEMP
      000448 24 02            [ 1] 1056         JRNC DN1 
      00044A 90 5C            [ 2] 1057         INCW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00044C FF               [ 2] 1058 DN1:    LDW (X),Y
      00044D 81               [ 4] 1059         RET
                                   1060 
                                   1061 ;       -       ( n1 n2 -- n1-n2 )
                                   1062 ;       Subtraction.
      00044E 04 29                 1063         .word      LINK
                           000450  1064 LINK = . 
      000450 01                    1065         .byte      1
      000451 2D                    1066         .ascii     "-"
      000452                       1067 SUBB:
      000452 90 93            [ 1] 1068         LDW Y,X
      000454 90 FE            [ 2] 1069         LDW Y,(Y)
      000456 90 BF 1C         [ 2] 1070         LDW YTEMP,Y
      000459 1C 00 02         [ 2] 1071         ADDW X,#2
      00045C 90 93            [ 1] 1072         LDW Y,X
      00045E 90 FE            [ 2] 1073         LDW Y,(Y)
      000460 72 B2 00 1C      [ 2] 1074         SUBW Y,YTEMP
      000464 FF               [ 2] 1075         LDW (X),Y
      000465 81               [ 4] 1076         RET
                                   1077 
                                   1078 ;       ABS     ( n -- n )
                                   1079 ;       Return  absolute value of n.
      000466 04 50                 1080         .word      LINK
                           000468  1081 LINK = . 
      000468 03                    1082         .byte      3
      000469 41 42 53              1083         .ascii     "ABS"
      00046C                       1084 ABSS:
      00046C 90 93            [ 1] 1085         LDW Y,X
      00046E 90 FE            [ 2] 1086 	LDW Y,(Y)
      000470 2A 03            [ 1] 1087         JRPL     AB1     ;negate:
      000472 90 50            [ 2] 1088         NEGW     Y     ;else negate hi byte
      000474 FF               [ 2] 1089         LDW (X),Y
      000475 81               [ 4] 1090 AB1:    RET
                                   1091 
                                   1092 ;       =       ( w w -- t )
                                   1093 ;       Return true if top two are =al.
      000476 04 68                 1094         .word      LINK
                           000478  1095 LINK = . 
      000478 01                    1096         .byte      1
      000479 3D                    1097         .ascii     "="
      00047A                       1098 EQUAL:
      00047A A6 FF            [ 1] 1099         LD A,#0xFF  ;true
      00047C 90 93            [ 1] 1100         LDW Y,X    ;D = n2
      00047E 90 FE            [ 2] 1101         LDW Y,(Y)
      000480 90 BF 1C         [ 2] 1102         LDW YTEMP,Y
      000483 1C 00 02         [ 2] 1103         ADDW X,#2
      000486 90 93            [ 1] 1104         LDW Y,X
      000488 90 FE            [ 2] 1105         LDW Y,(Y)
      00048A 90 B3 1C         [ 2] 1106         CPW Y,YTEMP     ;if n2 <> n1
      00048D 27 01            [ 1] 1107         JREQ     EQ1
      00048F 4F               [ 1] 1108         CLR A
      000490 F7               [ 1] 1109 EQ1:    LD (X),A
      000491 E7 01            [ 1] 1110         LD (1,X),A
      000493 81               [ 4] 1111 	RET     
                                   1112 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1113 ;       U<      ( u u -- t )
                                   1114 ;       Unsigned compare of top two items.
      000494 04 78                 1115         .word      LINK
                           000496  1116 LINK = . 
      000496 02                    1117         .byte      2
      000497 55 3C                 1118         .ascii     "U<"
      000499                       1119 ULESS:
      000499 A6 FF            [ 1] 1120         LD A,#0xFF  ;true
      00049B 90 93            [ 1] 1121         LDW Y,X    ;D = n2
      00049D 90 FE            [ 2] 1122         LDW Y,(Y)
      00049F 90 BF 1C         [ 2] 1123         LDW YTEMP,Y
      0004A2 1C 00 02         [ 2] 1124         ADDW X,#2
      0004A5 90 93            [ 1] 1125         LDW Y,X
      0004A7 90 FE            [ 2] 1126         LDW Y,(Y)
      0004A9 90 B3 1C         [ 2] 1127         CPW Y,YTEMP     ;if n2 <> n1
      0004AC 25 01            [ 1] 1128         JRULT     ULES1
      0004AE 4F               [ 1] 1129         CLR A
      0004AF F7               [ 1] 1130 ULES1:  LD (X),A
      0004B0 E7 01            [ 1] 1131         LD (1,X),A
      0004B2 81               [ 4] 1132 	RET     
                                   1133 
                                   1134 ;       <       ( n1 n2 -- t )
                                   1135 ;       Signed compare of top two items.
      0004B3 04 96                 1136         .word      LINK
                           0004B5  1137 LINK = . 
      0004B5 01                    1138         .byte      1
      0004B6 3C                    1139         .ascii     "<"
      0004B7                       1140 LESS:
      0004B7 A6 FF            [ 1] 1141         LD A,#0xFF  ;true
      0004B9 90 93            [ 1] 1142         LDW Y,X    ;D = n2
      0004BB 90 FE            [ 2] 1143         LDW Y,(Y)
      0004BD 90 BF 1C         [ 2] 1144         LDW YTEMP,Y
      0004C0 1C 00 02         [ 2] 1145         ADDW X,#2
      0004C3 90 93            [ 1] 1146         LDW Y,X
      0004C5 90 FE            [ 2] 1147         LDW Y,(Y)
      0004C7 90 B3 1C         [ 2] 1148         CPW Y,YTEMP     ;if n2 <> n1
      0004CA 2F 01            [ 1] 1149         JRSLT     LT1
      0004CC 4F               [ 1] 1150         CLR A
      0004CD F7               [ 1] 1151 LT1:    LD (X),A
      0004CE E7 01            [ 1] 1152         LD (1,X),A
      0004D0 81               [ 4] 1153 	RET     
                                   1154 
                                   1155 ;       MAX     ( n n -- n )
                                   1156 ;       Return greater of two top items.
      0004D1 04 B5                 1157         .word      LINK
                           0004D3  1158 LINK = . 
      0004D3 03                    1159         .byte      3
      0004D4 4D 41 58              1160         .ascii     "MAX"
      0004D7                       1161 MAX:
      0004D7 90 93            [ 1] 1162         LDW Y,X    ;D = n2
      0004D9 90 EE 02         [ 2] 1163         LDW Y,(2,Y)
      0004DC 90 BF 1C         [ 2] 1164         LDW YTEMP,Y
      0004DF 90 93            [ 1] 1165         LDW Y,X
      0004E1 90 FE            [ 2] 1166         LDW Y,(Y)
      0004E3 90 B3 1C         [ 2] 1167         CPW Y,YTEMP     ;if n2 <> n1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004E6 2F 02            [ 1] 1168         JRSLT     MAX1
      0004E8 EF 02            [ 2] 1169         LDW (2,X),Y
      0004EA 1C 00 02         [ 2] 1170 MAX1:   ADDW X,#2
      0004ED 81               [ 4] 1171 	RET     
                                   1172 
                                   1173 ;       MIN     ( n n -- n )
                                   1174 ;       Return smaller of top two items.
      0004EE 04 D3                 1175         .word      LINK
                           0004F0  1176 LINK = . 
      0004F0 03                    1177         .byte      3
      0004F1 4D 49 4E              1178         .ascii     "MIN"
      0004F4                       1179 MIN:
      0004F4 90 93            [ 1] 1180         LDW Y,X    ;D = n2
      0004F6 90 EE 02         [ 2] 1181         LDW Y,(2,Y)
      0004F9 90 BF 1C         [ 2] 1182         LDW YTEMP,Y
      0004FC 90 93            [ 1] 1183         LDW Y,X
      0004FE 90 FE            [ 2] 1184         LDW Y,(Y)
      000500 90 B3 1C         [ 2] 1185         CPW Y,YTEMP     ;if n2 <> n1
      000503 2C 02            [ 1] 1186         JRSGT     MIN1
      000505 EF 02            [ 2] 1187         LDW (2,X),Y
      000507 1C 00 02         [ 2] 1188 MIN1:	ADDW X,#2
      00050A 81               [ 4] 1189 	RET     
                                   1190 
                                   1191 ;       WITHIN  ( u ul uh -- t )
                                   1192 ;       Return true if u is within
                                   1193 ;       range of ul and uh. ( ul <= u < uh )
      00050B 04 F0                 1194         .word      LINK
                           00050D  1195 LINK = . 
      00050D 06                    1196         .byte      6
      00050E 57 49 54 48 49 4E     1197         .ascii     "WITHIN"
      000514                       1198 WITHI:
      000514 CD 02 83         [ 4] 1199         CALL     OVER
      000517 CD 04 52         [ 4] 1200         CALL     SUBB
      00051A CD 02 22         [ 4] 1201         CALL     TOR
      00051D CD 04 52         [ 4] 1202         CALL     SUBB
      000520 CD 02 03         [ 4] 1203         CALL     RFROM
      000523 CC 04 99         [ 2] 1204         JP     ULESS
                                   1205 
                                   1206 ;; Divide
                                   1207 
                                   1208 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1209 ;       Unsigned divide of a double by a
                                   1210 ;       single. Return mod and quotient.
      000526 05 0D                 1211         .word      LINK
                           000528  1212 LINK = . 
      000528 06                    1213         .byte      6
      000529 55 4D 2F 4D 4F 44     1214         .ascii     "UM/MOD"
      00052F                       1215 UMMOD:
      00052F BF 1A            [ 2] 1216 	LDW XTEMP,X	; save stack pointer
      000531 FE               [ 2] 1217 	LDW X,(X)	; un
      000532 BF 1C            [ 2] 1218 	LDW YTEMP,X     ; save un
      000534 90 BE 1A         [ 2] 1219 	LDW Y,XTEMP	; stack pointer
      000537 90 EE 04         [ 2] 1220 	LDW Y,(4,Y)     ; Y=udl
      00053A BE 1A            [ 2] 1221 	LDW X,XTEMP
      00053C EE 02            [ 2] 1222 	LDW X,(2,X)	; X=udh
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00053E B3 1C            [ 2] 1223 	CPW X,YTEMP
      000540 23 0F            [ 2] 1224 	JRULE MMSM1
      000542 BE 1A            [ 2] 1225 	LDW X,XTEMP
      000544 1C 00 02         [ 2] 1226 	ADDW X,#2	; pop off 1 level
      000547 90 AE FF FF      [ 2] 1227 	LDW Y,#0xFFFF
      00054B FF               [ 2] 1228 	LDW (X),Y
      00054C 90 5F            [ 1] 1229 	CLRW Y
      00054E EF 02            [ 2] 1230 	LDW (2,X),Y
      000550 81               [ 4] 1231 	RET
      000551                       1232 MMSM1:
                           000001  1233 .if  PICATOUT_MOD 
                                   1234 ; take advantage of divw x,y when udh==0
      000551 5D               [ 2] 1235         tnzw x  ; is udh==0?
      000552 26 11            [ 1] 1236         jrne MMSM2 
      000554 93               [ 1] 1237         ldw x,y    ;udl 
      000555 90 BE 1C         [ 2] 1238         ldw y,YTEMP ; divisor 
      000558 65               [ 2] 1239         divw x,y 
      000559 89               [ 2] 1240         pushw x     ; quotient 
      00055A BE 1A            [ 2] 1241         ldw x,XTEMP 
      00055C 1C 00 02         [ 2] 1242         addw x,#CELLL 
      00055F EF 02            [ 2] 1243         ldw (2,x),y  ; ur
      000561 90 85            [ 2] 1244         popw y 
      000563 FF               [ 2] 1245         ldw (x),y ; uq 
      000564 81               [ 4] 1246         ret 
      000565                       1247 MMSM2:        
                                   1248 .endif 
      000565 A6 11            [ 1] 1249 	LD A,#17	; loop count
      000567                       1250 MMSM3:
      000567 B3 1C            [ 2] 1251 	CPW X,YTEMP	; compare udh to un
      000569 25 04            [ 1] 1252 	JRULT MMSM4	; can't subtract
      00056B 72 B0 00 1C      [ 2] 1253 	SUBW X,YTEMP	; can subtract
      00056F                       1254 MMSM4:
      00056F 8C               [ 1] 1255 	CCF	; quotient bit
      000570 90 59            [ 2] 1256 	RLCW Y	; rotate into quotient
      000572 59               [ 2] 1257 	RLCW X	; rotate into remainder
      000573 4A               [ 1] 1258 	DEC A	; repeat
      000574 22 F1            [ 1] 1259 	JRUGT MMSM3
      000576 57               [ 2] 1260 	SRAW X
      000577 BF 1C            [ 2] 1261 	LDW YTEMP,X	; done, save remainder
      000579 BE 1A            [ 2] 1262 	LDW X,XTEMP
      00057B 1C 00 02         [ 2] 1263 	ADDW X,#2	; drop
      00057E FF               [ 2] 1264 	LDW (X),Y
      00057F 90 BE 1C         [ 2] 1265 	LDW Y,YTEMP	; save quotient
      000582 EF 02            [ 2] 1266 	LDW (2,X),Y
      000584 81               [ 4] 1267 	RET
                                   1268 	
                                   1269 ;       M/MOD   ( d n -- r q )
                                   1270 ;       Signed floored divide of double by
                                   1271 ;       single. Return mod and quotient.
      000585 05 28                 1272         .word      LINK
                           000587  1273 LINK = . 
      000587 05                    1274         .byte      5
      000588 4D 2F 4D 4F 44        1275         .ascii     "M/MOD"
      00058D                       1276 MSMOD:  
      00058D CD 02 59         [ 4] 1277         CALL	DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000590 CD 02 92         [ 4] 1278         CALL	ZLESS
      000593 CD 02 59         [ 4] 1279         CALL	DUPP
      000596 CD 02 22         [ 4] 1280         CALL	TOR
      000599 CD 01 5D         [ 4] 1281         CALL	QBRAN
      00059C 05 AA                 1282         .word	MMOD1
      00059E CD 04 1F         [ 4] 1283         CALL	NEGAT
      0005A1 CD 02 22         [ 4] 1284         CALL	TOR
      0005A4 CD 04 31         [ 4] 1285         CALL	DNEGA
      0005A7 CD 02 03         [ 4] 1286         CALL	RFROM
      0005AA CD 02 22         [ 4] 1287 MMOD1:	CALL	TOR
      0005AD CD 02 59         [ 4] 1288         CALL	DUPP
      0005B0 CD 02 92         [ 4] 1289         CALL	ZLESS
      0005B3 CD 01 5D         [ 4] 1290         CALL	QBRAN
      0005B6 05 BE                 1291         .word	MMOD2
      0005B8 CD 02 16         [ 4] 1292         CALL	RAT
      0005BB CD 03 F4         [ 4] 1293         CALL	PLUS
      0005BE CD 02 03         [ 4] 1294 MMOD2:	CALL	RFROM
      0005C1 CD 05 2F         [ 4] 1295         CALL	UMMOD
      0005C4 CD 02 03         [ 4] 1296         CALL	RFROM
      0005C7 CD 01 5D         [ 4] 1297         CALL	QBRAN
      0005CA 05 D5                 1298         .word	MMOD3
      0005CC CD 02 69         [ 4] 1299         CALL	SWAPP
      0005CF CD 04 1F         [ 4] 1300         CALL	NEGAT
      0005D2 CD 02 69         [ 4] 1301         CALL	SWAPP
      0005D5 81               [ 4] 1302 MMOD3:	RET
                                   1303 
                                   1304 ;       /MOD    ( n n -- r q )
                                   1305 ;       Signed divide. Return mod and quotient.
      0005D6 05 87                 1306         .word      LINK
                           0005D8  1307 LINK = . 
      0005D8 04                    1308         .byte      4
      0005D9 2F 4D 4F 44           1309         .ascii     "/MOD"
      0005DD                       1310 SLMOD:
      0005DD CD 02 83         [ 4] 1311         CALL	OVER
      0005E0 CD 02 92         [ 4] 1312         CALL	ZLESS
      0005E3 CD 02 69         [ 4] 1313         CALL	SWAPP
      0005E6 CC 05 8D         [ 2] 1314         JP	MSMOD
                                   1315 
                                   1316 ;       MOD     ( n n -- r )
                                   1317 ;       Signed divide. Return mod only.
      0005E9 05 D8                 1318         .word      LINK
                           0005EB  1319 LINK = . 
      0005EB 03                    1320         .byte      3
      0005EC 4D 4F 44              1321         .ascii     "MOD"
      0005EF                       1322 MODD:
      0005EF CD 05 DD         [ 4] 1323 	CALL	SLMOD
      0005F2 CC 02 4F         [ 2] 1324 	JP	DROP
                                   1325 
                                   1326 ;       /       ( n n -- q )
                                   1327 ;       Signed divide. Return quotient only.
      0005F5 05 EB                 1328         .word      LINK
                           0005F7  1329 LINK = . 
      0005F7 01                    1330         .byte      1
      0005F8 2F                    1331         .ascii     "/"
      0005F9                       1332 SLASH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005F9 CD 05 DD         [ 4] 1333         CALL	SLMOD
      0005FC CD 02 69         [ 4] 1334         CALL	SWAPP
      0005FF CC 02 4F         [ 2] 1335         JP	DROP
                                   1336 
                                   1337 ;; Multiply
                                   1338 
                                   1339 ;       UM*     ( u u -- ud )
                                   1340 ;       Unsigned multiply. Return double product.
      000602 05 F7                 1341         .word      LINK
                           000604  1342 LINK = . 
      000604 03                    1343         .byte      3
      000605 55 4D 2A              1344         .ascii     "UM*"
      000608                       1345 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1346 .if PICATOUT_MOD 
                                   1347 ; take advantage of SP addressing modes
                                   1348 ; these PRODx in RAM are not required
                                   1349 ; the product is kept on stack as local variable 
                                   1350         ;; bytes offset on data stack 
                           000002  1351         da=2 
                           000003  1352         db=3 
                           000000  1353         dc=0 
                           000001  1354         dd=1 
                                   1355         ;; product bytes offset on return stack 
                           000001  1356         UD1=1  ; ud bits 31..24
                           000002  1357         UD2=2  ; ud bits 23..16
                           000003  1358         UD3=3  ; ud bits 15..8 
                           000004  1359         UD4=4  ; ud bits 7..0 
                                   1360         ;; local variable for product set to zero   
      000608 90 5F            [ 1] 1361         clrw y 
      00060A 90 89            [ 2] 1362         pushw y  ; bits 15..0
      00060C 90 89            [ 2] 1363         pushw y  ; bits 31..16 
      00060E E6 03            [ 1] 1364         ld a,(db,x) ; b 
      000610 90 97            [ 1] 1365         ld yl,a 
      000612 E6 01            [ 1] 1366         ld a,(dd,x)   ; d
      000614 90 42            [ 4] 1367         mul y,a    ; b*d  
      000616 17 03            [ 2] 1368         ldw (UD3,sp),y ; lowest weight product 
      000618 E6 03            [ 1] 1369         ld a,(db,x)
      00061A 90 97            [ 1] 1370         ld yl,a 
      00061C E6 00            [ 1] 1371         ld a,(dc,x)
      00061E 90 42            [ 4] 1372         mul y,a  ; b*c 
                                   1373         ;;; do the partial sum 
      000620 72 F9 02         [ 2] 1374         addw y,(UD2,sp)
      000623 4F               [ 1] 1375         clr a 
      000624 49               [ 1] 1376         rlc a
      000625 6B 01            [ 1] 1377         ld (UD1,sp),a 
      000627 17 02            [ 2] 1378         ldw (UD2,sp),y 
      000629 E6 02            [ 1] 1379         ld a,(da,x)
      00062B 90 97            [ 1] 1380         ld yl,a 
      00062D E6 01            [ 1] 1381         ld a,(dd,x)
      00062F 90 42            [ 4] 1382         mul y,a   ; a*d 
                                   1383         ;; do partial sum 
      000631 72 F9 02         [ 2] 1384         addw y,(UD2,sp)
      000634 4F               [ 1] 1385         clr a 
      000635 19 01            [ 1] 1386         adc a,(UD1,sp)
      000637 6B 01            [ 1] 1387         ld (UD1,sp),a  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      000639 17 02            [ 2] 1388         ldw (UD2,sp),y 
      00063B E6 02            [ 1] 1389         ld a,(da,x)
      00063D 90 97            [ 1] 1390         ld yl,a 
      00063F E6 00            [ 1] 1391         ld a,(dc,x)
      000641 90 42            [ 4] 1392         mul y,a  ;  a*c highest weight product 
                                   1393         ;;; do partial sum 
      000643 72 F9 01         [ 2] 1394         addw y,(UD1,sp)
      000646 FF               [ 2] 1395         ldw (x),y  ; udh 
      000647 16 03            [ 2] 1396         ldw y,(UD3,sp)
      000649 EF 02            [ 2] 1397         ldw (2,x),y  ; udl  
      00064B 5B 04            [ 2] 1398         addw sp,#4 ; drop local variable 
      00064D 81               [ 4] 1399         ret  
                           000000  1400 .else
                                   1401 	LD A,(2,X)	; b
                                   1402 	LD YL,A
                                   1403 	LD A,(X)	; d
                                   1404 	MUL Y,A
                                   1405 	LDW PROD1,Y
                                   1406 	LD A,(3,X)	; a
                                   1407 	LD YL,A
                                   1408 	LD A,(X)	; d
                                   1409 	MUL Y,A
                                   1410 	LDW PROD2,Y
                                   1411 	LD A,(2,X)	; b
                                   1412 	LD YL,A
                                   1413 	LD A,(1,X)	; c
                                   1414 	MUL Y,A
                                   1415 	LDW PROD3,Y
                                   1416 	LD A,(3,X)	; a
                                   1417 	LD YL,A
                                   1418 	LD A,(1,X)	; c
                                   1419 	MUL Y,A	; least signifiant product
                                   1420 	CLR A
                                   1421 	RRWA Y
                                   1422 	LD (3,X),A	; store least significant byte
                                   1423 	ADDW Y,PROD3
                                   1424 	CLR A
                                   1425 	ADC A,#0	; save carry
                                   1426 	LD CARRY,A
                                   1427 	ADDW Y,PROD2
                                   1428 	LD A,CARRY
                                   1429 	ADC A,#0	; add 2nd carry
                                   1430 	LD CARRY,A
                                   1431 	CLR A
                                   1432 	RRWA Y
                                   1433 	LD (2,X),A	; 2nd product byte
                                   1434 	ADDW Y,PROD1
                                   1435 	RRWA Y
                                   1436 	LD (1,X),A	; 3rd product byte
                                   1437 	RRWA Y  	; 4th product byte now in A
                                   1438 	ADC A,CARRY	; fill in carry bits
                                   1439 	LD (X),A
                                   1440 	RET
                                   1441 .endif 
                                   1442 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1443 
                                   1444 ;       *       ( n n -- n )
                                   1445 ;       Signed multiply. Return single product.
      00064E 06 04                 1446         .word      LINK
                           000650  1447 LINK = . 
      000650 01                    1448         .byte      1
      000651 2A                    1449         .ascii     "*"
      000652                       1450 STAR:
      000652 CD 06 08         [ 4] 1451 	CALL	UMSTA
      000655 CC 02 4F         [ 2] 1452 	JP	DROP
                                   1453 
                                   1454 ;       M*      ( n n -- d )
                                   1455 ;       Signed multiply. Return double product.
      000658 06 50                 1456         .word      LINK
                           00065A  1457 LINK = . 
      00065A 02                    1458         .byte      2
      00065B 4D 2A                 1459         .ascii     "M*"
      00065D                       1460 MSTAR:      
      00065D CD 03 DF         [ 4] 1461         CALL	DDUP
      000660 CD 02 CE         [ 4] 1462         CALL	XORR
      000663 CD 02 92         [ 4] 1463         CALL	ZLESS
      000666 CD 02 22         [ 4] 1464         CALL	TOR
      000669 CD 04 6C         [ 4] 1465         CALL	ABSS
      00066C CD 02 69         [ 4] 1466         CALL	SWAPP
      00066F CD 04 6C         [ 4] 1467         CALL	ABSS
      000672 CD 06 08         [ 4] 1468         CALL	UMSTA
      000675 CD 02 03         [ 4] 1469         CALL	RFROM
      000678 CD 01 5D         [ 4] 1470         CALL	QBRAN
      00067B 06 80                 1471         .word	MSTA1
      00067D CD 04 31         [ 4] 1472         CALL	DNEGA
      000680 81               [ 4] 1473 MSTA1:	RET
                                   1474 
                                   1475 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1476 ;       Multiply n1 and n2, then divide
                                   1477 ;       by n3. Return mod and quotient.
      000681 06 5A                 1478         .word      LINK
                           000683  1479 LINK = . 
      000683 05                    1480         .byte      5
      000684 2A 2F 4D 4F 44        1481         .ascii     "*/MOD"
      000689                       1482 SSMOD:
      000689 CD 02 22         [ 4] 1483         CALL     TOR
      00068C CD 06 5D         [ 4] 1484         CALL     MSTAR
      00068F CD 02 03         [ 4] 1485         CALL     RFROM
      000692 CC 05 8D         [ 2] 1486         JP     MSMOD
                                   1487 
                                   1488 ;       */      ( n1 n2 n3 -- q )
                                   1489 ;       Multiply n1 by n2, then divide
                                   1490 ;       by n3. Return quotient only.
      000695 06 83                 1491         .word      LINK
                           000697  1492 LINK = . 
      000697 02                    1493         .byte      2
      000698 2A 2F                 1494         .ascii     "*/"
      00069A                       1495 STASL:
      00069A CD 06 89         [ 4] 1496         CALL	SSMOD
      00069D CD 02 69         [ 4] 1497         CALL	SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0006A0 CC 02 4F         [ 2] 1498         JP	DROP
                                   1499 
                                   1500 ;; Miscellaneous
                                   1501 
                                   1502 ;       CELL+   ( a -- a )
                                   1503 ;       Add cell size in byte to address.
      0006A3 06 97                 1504         .word      LINK
                           0006A5  1505 LINK = . 
      0006A5 02                    1506         .byte       2
      0006A6 32 2B                 1507         .ascii     "2+"
      0006A8                       1508 CELLP:
      0006A8 90 93            [ 1] 1509         LDW Y,X
      0006AA 90 FE            [ 2] 1510 	LDW Y,(Y)
      0006AC 72 A9 00 02      [ 2] 1511         ADDW Y,#CELLL 
      0006B0 FF               [ 2] 1512         LDW (X),Y
      0006B1 81               [ 4] 1513         RET
                                   1514 
                                   1515 ;       CELL-   ( a -- a )
                                   1516 ;       Subtract 2 from address.
      0006B2 06 A5                 1517         .word      LINK
                           0006B4  1518 LINK = . 
      0006B4 02                    1519         .byte       2
      0006B5 32 2D                 1520         .ascii     "2-"
      0006B7                       1521 CELLM:
      0006B7 90 93            [ 1] 1522         LDW Y,X
      0006B9 90 FE            [ 2] 1523 	LDW Y,(Y)
      0006BB 72 A2 00 02      [ 2] 1524         SUBW Y,#CELLL
      0006BF FF               [ 2] 1525         LDW (X),Y
      0006C0 81               [ 4] 1526         RET
                                   1527 
                                   1528 ;       CELLS   ( n -- n )
                                   1529 ;       Multiply tos by 2.
      0006C1 06 B4                 1530         .word      LINK
                           0006C3  1531 LINK = . 
      0006C3 02                    1532         .byte       2
      0006C4 32 2A                 1533         .ascii     "2*"
      0006C6                       1534 CELLS:
      0006C6 90 93            [ 1] 1535         LDW Y,X
      0006C8 90 FE            [ 2] 1536 	LDW Y,(Y)
      0006CA 90 58            [ 2] 1537         SLAW Y
      0006CC FF               [ 2] 1538         LDW (X),Y
      0006CD 81               [ 4] 1539         RET
                                   1540 
                                   1541 ;       1+      ( a -- a )
                                   1542 ;       Add cell size in byte to address.
      0006CE 06 C3                 1543         .word      LINK
                           0006D0  1544 LINK = . 
      0006D0 02                    1545         .byte      2
      0006D1 31 2B                 1546         .ascii     "1+"
      0006D3                       1547 ONEP:
      0006D3 90 93            [ 1] 1548         LDW Y,X
      0006D5 90 FE            [ 2] 1549 	LDW Y,(Y)
      0006D7 90 5C            [ 2] 1550         INCW Y
      0006D9 FF               [ 2] 1551         LDW (X),Y
      0006DA 81               [ 4] 1552         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1553 
                                   1554 ;       1-      ( a -- a )
                                   1555 ;       Subtract 2 from address.
      0006DB 06 D0                 1556         .word      LINK
                           0006DD  1557 LINK = . 
      0006DD 02                    1558         .byte      2
      0006DE 31 2D                 1559         .ascii     "1-"
      0006E0                       1560 ONEM:
      0006E0 90 93            [ 1] 1561         LDW Y,X
      0006E2 90 FE            [ 2] 1562 	LDW Y,(Y)
      0006E4 90 5A            [ 2] 1563         DECW Y
      0006E6 FF               [ 2] 1564         LDW (X),Y
      0006E7 81               [ 4] 1565         RET
                                   1566 
                                   1567 ;       2/      ( n -- n )
                                   1568 ;       Multiply tos by 2.
      0006E8 06 DD                 1569         .word      LINK
                           0006EA  1570 LINK = . 
      0006EA 02                    1571         .byte      2
      0006EB 32 2F                 1572         .ascii     "2/"
      0006ED                       1573 TWOSL:
      0006ED 90 93            [ 1] 1574         LDW Y,X
      0006EF 90 FE            [ 2] 1575 	LDW Y,(Y)
      0006F1 90 57            [ 2] 1576         SRAW Y
      0006F3 FF               [ 2] 1577         LDW (X),Y
      0006F4 81               [ 4] 1578         RET
                                   1579 
                                   1580 ;       BL      ( -- 32 )
                                   1581 ;       Return 32,  blank character.
      0006F5 06 EA                 1582         .word      LINK
                           0006F7  1583 LINK = . 
      0006F7 02                    1584         .byte      2
      0006F8 42 4C                 1585         .ascii     "BL"
      0006FA                       1586 BLANK:
      0006FA 1D 00 02         [ 2] 1587         SUBW X,#2
      0006FD 90 AE 00 20      [ 2] 1588 	LDW Y,#32
      000701 FF               [ 2] 1589         LDW (X),Y
      000702 81               [ 4] 1590         RET
                                   1591 
                                   1592 ;         0     ( -- 0)
                                   1593 ;         Return 0.
      000703 06 F7                 1594         .word      LINK
                           000705  1595 LINK = . 
      000705 01                    1596         .byte       1
      000706 30                    1597         .ascii     "0"
      000707                       1598 ZERO:
      000707 1D 00 02         [ 2] 1599         SUBW X,#2
      00070A 90 5F            [ 1] 1600 	CLRW Y
      00070C FF               [ 2] 1601         LDW (X),Y
      00070D 81               [ 4] 1602         RET
                                   1603 
                                   1604 ;         1     ( -- 1)
                                   1605 ;         Return 1.
      00070E 07 05                 1606         .word      LINK
                           000710  1607 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000710 01                    1608         .byte       1
      000711 31                    1609         .ascii     "1"
      000712                       1610 ONE:
      000712 1D 00 02         [ 2] 1611         SUBW X,#2
      000715 90 AE 00 01      [ 2] 1612 	LDW Y,#1
      000719 FF               [ 2] 1613         LDW (X),Y
      00071A 81               [ 4] 1614         RET
                                   1615 
                                   1616 ;         -1    ( -- -1)
                                   1617 ;         Return 32,  blank character.
      00071B 07 10                 1618         .word      LINK
                           00071D  1619 LINK = . 
      00071D 02                    1620         .byte       2
      00071E 2D 31                 1621         .ascii     "-1"
      000720                       1622 MONE:
      000720 1D 00 02         [ 2] 1623         SUBW X,#2
      000723 90 AE FF FF      [ 2] 1624 	LDW Y,#0xFFFF
      000727 FF               [ 2] 1625         LDW (X),Y
      000728 81               [ 4] 1626         RET
                                   1627 
                                   1628 ;       >CHAR   ( c -- c )
                                   1629 ;       Filter non-printing characters.
      000729 07 1D                 1630         .word      LINK
                           00072B  1631 LINK = . 
      00072B 05                    1632         .byte      5
      00072C 3E 43 48 41 52        1633         .ascii     ">CHAR"
      000731                       1634 TCHAR:
                           000001  1635 .if CONVERT_TO_CODE
      000731 E6 01            [ 1] 1636         ld a,(1,x)
      000733 A1 20            [ 1] 1637         cp a,#32  
      000735 2B 05            [ 1] 1638         jrmi 1$ 
      000737 A1 7F            [ 1] 1639         cp a,#127 
      000739 2A 01            [ 1] 1640         jrpl 1$ 
      00073B 81               [ 4] 1641         ret 
      00073C A6 5F            [ 1] 1642 1$:     ld a,#'_ 
      00073E E7 01            [ 1] 1643         ld (1,x),a 
      000740 81               [ 4] 1644         ret 
                           000000  1645 .else
                                   1646         CALL     DOLIT
                                   1647         .word       0x7F
                                   1648         CALL     ANDD
                                   1649         CALL     DUPP    ;mask msb
                                   1650         CALL     DOLIT
                                   1651         .word      127
                                   1652         CALL     BLANK
                                   1653         CALL     WITHI   ;check for printable
                                   1654         CALL     QBRAN
                                   1655         .word    TCHA1
                                   1656         CALL     DROP
                                   1657         CALL     DOLIT
                                   1658         .word     0x5F		; "_"     ;replace non-printables
                                   1659 .endif 
      000741 81               [ 4] 1660 TCHA1:  RET
                                   1661 
                                   1662 ;       DEPTH   ( -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1663 ;       Return  depth of  data stack.
      000742 07 2B                 1664         .word      LINK
                           000744  1665 LINK = . 
      000744 05                    1666         .byte      5
      000745 44 45 50 54 48        1667         .ascii     "DEPTH"
      00074A                       1668 DEPTH: 
      00074A 90 BE 22         [ 2] 1669         LDW Y,SP0    ;save data stack ptr
      00074D BF 1A            [ 2] 1670 	LDW XTEMP,X
      00074F 72 B2 00 1A      [ 2] 1671         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000753 90 57            [ 2] 1672         SRAW Y    ;Y = #stack items
                           000001  1673 .if PICATOUT_MOD
                                   1674 ; why ? 
                                   1675 ;      	DECW Y
                                   1676 .endif 
      000755 1D 00 02         [ 2] 1677 	SUBW X,#2
      000758 FF               [ 2] 1678         LDW (X),Y     ; if neg, underflow
      000759 81               [ 4] 1679         RET
                                   1680 
                                   1681 ;       PICK    ( ... +n -- ... w )
                                   1682 ;       Copy  nth stack item to tos.
      00075A 07 44                 1683         .word      LINK
                           00075C  1684 LINK = . 
      00075C 04                    1685         .byte      4
      00075D 50 49 43 4B           1686         .ascii     "PICK"
      000761                       1687 PICK:
      000761 90 93            [ 1] 1688         LDW Y,X   ;D = n1
      000763 90 FE            [ 2] 1689         LDW Y,(Y)
      000765 90 58            [ 2] 1690         SLAW Y
      000767 BF 1A            [ 2] 1691         LDW XTEMP,X
      000769 72 B9 00 1A      [ 2] 1692         ADDW Y,XTEMP
      00076D 90 FE            [ 2] 1693         LDW Y,(Y)
      00076F FF               [ 2] 1694         LDW (X),Y
      000770 81               [ 4] 1695         RET
                                   1696 
                                   1697 ;; Memory access
                                   1698 
                                   1699 ;       +!      ( n a -- )
                                   1700 ;       Add n to  contents at address a.
      000771 07 5C                 1701         .word      LINK
                           000773  1702 LINK = . 
      000773 02                    1703         .byte      2
      000774 2B 21                 1704         .ascii     "+!"
      000776                       1705 PSTOR:
                           000001  1706 .if CONVERT_TO_CODE
      000776 90 93            [ 1] 1707         ldw y,x 
      000778 90 FE            [ 2] 1708         ldw y,(y)
      00077A 90 BF 1C         [ 2] 1709         ldw YTEMP,y  ; address
      00077D 90 FE            [ 2] 1710         ldw y,(y)  
      00077F 90 89            [ 2] 1711         pushw y  ; value at address 
      000781 90 93            [ 1] 1712         ldw y,x 
      000783 90 EE 02         [ 2] 1713         ldw y,(2,y) ; n 
      000786 72 F9 01         [ 2] 1714         addw y,(1,sp) ; n+value
      000789 91 CF 1C         [ 5] 1715         ldw [YTEMP],y ;  a!
      00078C 90 85            [ 2] 1716         popw y    ;drop local var
      00078E 1C 00 04         [ 2] 1717         addw x,#4 ; DDROP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000791 81               [ 4] 1718         ret 
                           000000  1719 .else
                                   1720         CALL	SWAPP
                                   1721         CALL	OVER
                                   1722         CALL	AT
                                   1723         CALL	PLUS
                                   1724         CALL	SWAPP
                                   1725         JP	STORE
                                   1726 .endif 
                                   1727 ;       2!      ( d a -- )
                                   1728 ;       Store  double integer to address a.
      000792 07 73                 1729         .word      LINK
                           000794  1730 LINK = . 
      000794 02                    1731         .byte      2
      000795 32 21                 1732         .ascii     "2!"
      000797                       1733 DSTOR:
                           000001  1734 .if CONVERT_TO_CODE
      000797 90 93            [ 1] 1735         ldw y,x 
      000799 90 FE            [ 2] 1736         ldw y,(y)
      00079B 90 BF 1C         [ 2] 1737         ldw YTEMP,y ; address 
      00079E 1C 00 02         [ 2] 1738         addw x,#CELLL ; drop a 
      0007A1 90 93            [ 1] 1739         ldw y,x 
      0007A3 90 FE            [ 2] 1740         ldw y,(y) ; hi word 
      0007A5 89               [ 2] 1741         pushw x 
      0007A6 EE 02            [ 2] 1742         ldw x,(2,x) ; lo word 
      0007A8 91 CF 1C         [ 5] 1743         ldw [YTEMP],y
      0007AB 90 93            [ 1] 1744         ldw y,x 
      0007AD AE 00 02         [ 2] 1745         ldw x,#2 
      0007B0 92 DF 1C         [ 5] 1746         ldw ([YTEMP],x),y 
      0007B3 85               [ 2] 1747         popw x 
      0007B4 1C 00 04         [ 2] 1748         addw x,#4 ; DDROP 
      0007B7 81               [ 4] 1749         ret 
                           000000  1750 .else
                                   1751         CALL	SWAPP
                                   1752         CALL	OVER
                                   1753         CALL	STORE
                                   1754         CALL	CELLP
                                   1755         JP	STORE
                                   1756 .endif 
                                   1757 ;       2@      ( a -- d )
                                   1758 ;       Fetch double integer from address a.
      0007B8 07 94                 1759         .word      LINK
                           0007BA  1760 LINK = . 
      0007BA 02                    1761         .byte      2
      0007BB 32 40                 1762         .ascii     "2@"
      0007BD                       1763 DAT:
                           000001  1764 .if CONVERT_TO_CODE
      0007BD 90 93            [ 1] 1765         ldw y,x 
      0007BF 90 FE            [ 2] 1766         ldw y,(y) ;address 
      0007C1 90 BF 1C         [ 2] 1767         ldw YTEMP,y 
      0007C4 1D 00 02         [ 2] 1768         subw x,#CELLL ; space for udh 
      0007C7 91 CE 1C         [ 5] 1769         ldw y,[YTEMP] ; udh 
      0007CA FF               [ 2] 1770         ldw (x),y 
      0007CB 90 AE 00 02      [ 2] 1771         ldw y,#2
      0007CF 91 DE 1C         [ 5] 1772         ldw y,([YTEMP],y) ; udl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007D2 EF 02            [ 2] 1773         ldw (2,x),y
      0007D4 81               [ 4] 1774         ret 
                           000000  1775 .else 
                                   1776         CALL	DUPP
                                   1777         CALL	CELLP
                                   1778         CALL	AT
                                   1779         CALL	SWAPP
                                   1780         JP	AT
                                   1781 .endif 
                                   1782 
                                   1783 ;       COUNT   ( b -- b +n )
                                   1784 ;       Return count byte of a string
                                   1785 ;       and add 1 to byte address.
      0007D5 07 BA                 1786         .word      LINK
                           0007D7  1787 LINK = . 
      0007D7 05                    1788         .byte      5
      0007D8 43 4F 55 4E 54        1789         .ascii     "COUNT"
      0007DD                       1790 COUNT:
                           000001  1791 .if CONVERT_TO_CODE
      0007DD 90 93            [ 1] 1792         ldw y,x 
      0007DF 90 FE            [ 2] 1793         ldw y,(y) ; address 
      0007E1 90 F6            [ 1] 1794         ld a,(y)  ; count 
      0007E3 90 5C            [ 2] 1795         incw y 
      0007E5 FF               [ 2] 1796         ldw (x),y 
      0007E6 1D 00 02         [ 2] 1797         subw x,#CELLL 
      0007E9 E7 01            [ 1] 1798         ld (1,x),a 
      0007EB 7F               [ 1] 1799         clr (x)
      0007EC 81               [ 4] 1800         ret 
                           000000  1801 .else 
                                   1802         CALL     DUPP
                                   1803         CALL     ONEP
                                   1804         CALL     SWAPP
                                   1805         JP     CAT
                                   1806 .endif 
                                   1807 
                                   1808 ;       HERE    ( -- a )
                                   1809 ;       Return  top of  code dictionary.
      0007ED 07 D7                 1810         .word      LINK
                           0007EF  1811 LINK = . 
      0007EF 04                    1812         .byte      4
      0007F0 48 45 52 45           1813         .ascii     "HERE"
      0007F4                       1814 HERE:
                           000001  1815 .if CONVERT_TO_CODE
      0007F4 90 AE 00 16      [ 2] 1816       	ldw y,#UCP 
      0007F8 90 FE            [ 2] 1817         ldw y,(y)
      0007FA 1D 00 02         [ 2] 1818         subw x,#CELLL 
      0007FD FF               [ 2] 1819         ldw (x),y 
      0007FE 81               [ 4] 1820         ret 
                           000000  1821 .else
                                   1822         CALL     CPP
                                   1823         JP     AT
                                   1824 .endif 
                                   1825 
                                   1826 ;       PAD     ( -- a )
                                   1827 ;       Return address of text buffer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1828 ;       above  code dictionary.
      0007FF 07 EF                 1829         .word      LINK
                           000801  1830 LINK = . 
      000801 03                    1831         .byte      3
      000802 50 41 44              1832         .ascii     "PAD"
      000805                       1833 PAD:
      000805 CD 07 F4         [ 4] 1834         CALL     HERE
      000808 CD 01 2A         [ 4] 1835         CALL     DOLIT
      00080B 00 50                 1836         .word      80
      00080D CC 03 F4         [ 2] 1837         JP     PLUS
                                   1838 
                                   1839 ;       TIB     ( -- a )
                                   1840 ;       Return address of terminal input buffer.
      000810 08 01                 1841         .word      LINK
                           000812  1842 LINK = . 
      000812 03                    1843         .byte      3
      000813 54 49 42              1844         .ascii     "TIB"
      000816                       1845 TIB:
      000816 CD 03 42         [ 4] 1846         CALL     NTIB
      000819 CD 06 A8         [ 4] 1847         CALL     CELLP
      00081C CC 01 B2         [ 2] 1848         JP     AT
                                   1849 
                                   1850 ;       @EXECUTE        ( a -- )
                                   1851 ;       Execute vector stored in address a.
      00081F 08 12                 1852         .word      LINK
                           000821  1853 LINK = . 
      000821 08                    1854         .byte      8
      000822 40 45 58 45 43 55 54  1855         .ascii     "@EXECUTE"
             45
      00082A                       1856 ATEXE:
      00082A CD 01 B2         [ 4] 1857         CALL     AT
      00082D CD 03 A3         [ 4] 1858         CALL     QDUP    ;?address or zero
      000830 CD 01 5D         [ 4] 1859         CALL     QBRAN
      000833 08 38                 1860         .word      EXE1
      000835 CD 01 84         [ 4] 1861         CALL     EXECU   ;execute if non-zero
      000838 81               [ 4] 1862 EXE1:   RET     ;do nothing if zero
                                   1863 
                                   1864 ;       CMOVE   ( b1 b2 u -- )
                                   1865 ;       Copy u bytes from b1 to b2.
      000839 08 21                 1866         .word      LINK
                           00083B  1867 LINK = . 
      00083B 05                    1868         .byte      5
      00083C 43 4D 4F 56 45        1869         .ascii     "CMOVE"
      000841                       1870 CMOVE:
      000841 CD 02 22         [ 4] 1871         CALL	TOR
      000844 CD 01 74         [ 4] 1872         CALL	BRAN
      000847 08 61                 1873         .word	CMOV2
      000849 CD 02 22         [ 4] 1874 CMOV1:	CALL	TOR
      00084C CD 02 59         [ 4] 1875         CALL	DUPP
      00084F CD 01 D0         [ 4] 1876         CALL	CAT
      000852 CD 02 16         [ 4] 1877         CALL	RAT
      000855 CD 01 BF         [ 4] 1878         CALL	CSTOR
      000858 CD 06 D3         [ 4] 1879         CALL	ONEP
      00085B CD 02 03         [ 4] 1880         CALL	RFROM
      00085E CD 06 D3         [ 4] 1881         CALL	ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000861 CD 01 3E         [ 4] 1882 CMOV2:	CALL	DONXT
      000864 08 49                 1883         .word	CMOV1
      000866 CC 03 D4         [ 2] 1884         JP	DDROP
                                   1885 
                                   1886 ;       FILL    ( b u c -- )
                                   1887 ;       Fill u bytes of character c
                                   1888 ;       to area beginning at b.
      000869 08 3B                 1889         .word       LINK
                           00086B  1890 LINK = . 
      00086B 04                    1891         .byte       4
      00086C 46 49 4C 4C           1892         .ascii     "FILL"
      000870                       1893 FILL:
                           000001  1894 .if CONVERT_TO_CODE
      000870 90 93            [ 1] 1895         ldw y,x 
      000872 90 E6 01         [ 1] 1896         ld a,(1,y) ; c 
      000875 1C 00 02         [ 2] 1897         addw x,#CELLL ; drop c 
      000878 90 93            [ 1] 1898         ldw y,x 
      00087A 90 FE            [ 2] 1899         ldw y,(y) ; count
      00087C 90 89            [ 2] 1900         pushw y 
      00087E 1C 00 02         [ 2] 1901         addw x,#CELLL ; drop u 
      000881 90 93            [ 1] 1902         ldw y,x 
      000883 1C 00 02         [ 2] 1903         addw x,#CELLL ; drop b 
      000886 90 FE            [ 2] 1904         ldw y,(y) ; address
      000888 90 BF 1C         [ 2] 1905         ldw YTEMP,y
      00088B 90 85            [ 2] 1906         popw y ; count 
      00088D                       1907 FILL1:  
      00088D 92 C7 1C         [ 4] 1908         ld [YTEMP],a 
      000890 3C 1D            [ 1] 1909         inc YTEMP+1
      000892 24 02            [ 1] 1910         jrnc FILL2 
      000894 3C 1C            [ 1] 1911         inc YTEMP
      000896                       1912 FILL2: 
      000896 90 5A            [ 2] 1913         decw y ; count 
      000898 26 F3            [ 1] 1914         jrne FILL1  
      00089A 81               [ 4] 1915         ret 
                           000000  1916 .else 
                                   1917         CALL	SWAPP
                                   1918         CALL	TOR
                                   1919         CALL	SWAPP
                                   1920         CALL	BRAN
                                   1921         .word	FILL2
                                   1922 FILL1:	CALL	DDUP
                                   1923         CALL	CSTOR
                                   1924         CALL	ONEP
                                   1925 FILL2:	CALL	DONXT
                                   1926         .word	FILL1
                                   1927         JP	DDROP
                                   1928 .endif
                                   1929 
                                   1930 ;       ERASE   ( b u -- )
                                   1931 ;       Erase u bytes beginning at b.
      00089B 08 6B                 1932         .word      LINK
                           00089D  1933 LINK = . 
      00089D 05                    1934         .byte      5
      00089E 45 52 41 53 45        1935         .ascii     "ERASE"
      0008A3                       1936 ERASE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                           000001  1937 .if CONVERT_TO_CODE
      0008A3 90 5F            [ 1] 1938         clrw y 
      0008A5 1D 00 02         [ 2] 1939         subw x,#CELLL 
      0008A8 FF               [ 2] 1940         ldw (x),y 
      0008A9 CC 08 70         [ 2] 1941         jp FILL 
                           000000  1942 .else 
                                   1943         CALL     ZERO
                                   1944         JP     FILL
                                   1945 .endif 
                                   1946 ;       PACK0x   ( b u a -- a )
                                   1947 ;       Build a counted string with
                                   1948 ;       u characters from b. Null fill.
      0008AC 08 9D                 1949         .word      LINK
                           0008AE  1950 LINK = . 
      0008AE 05                    1951         .byte      5
      0008AF 50 41 43 4B 30 58     1952         .ascii     "PACK0X"
      0008B5                       1953 PACKS:
      0008B5 CD 02 59         [ 4] 1954         CALL     DUPP
      0008B8 CD 02 22         [ 4] 1955         CALL     TOR     ;strings only on cell boundary
      0008BB CD 03 DF         [ 4] 1956         CALL     DDUP
      0008BE CD 01 BF         [ 4] 1957         CALL     CSTOR
      0008C1 CD 06 D3         [ 4] 1958         CALL     ONEP ;save count
      0008C4 CD 02 69         [ 4] 1959         CALL     SWAPP
      0008C7 CD 08 41         [ 4] 1960         CALL     CMOVE
      0008CA CD 02 03         [ 4] 1961         CALL     RFROM
      0008CD 81               [ 4] 1962         RET
                                   1963 
                                   1964 ;; Numeric output, single precision
                                   1965 
                                   1966 ;       DIGIT   ( u -- c )
                                   1967 ;       Convert digit u to a character.
      0008CE 08 AE                 1968         .word      LINK
                           0008D0  1969 LINK = . 
      0008D0 05                    1970         .byte      5
      0008D1 44 49 47 49 54        1971         .ascii     "DIGIT"
      0008D6                       1972 DIGIT:
      0008D6 CD 01 2A         [ 4] 1973         CALL	DOLIT
      0008D9 00 09                 1974         .word	9
      0008DB CD 02 83         [ 4] 1975         CALL	OVER
      0008DE CD 04 B7         [ 4] 1976         CALL	LESS
      0008E1 CD 01 2A         [ 4] 1977         CALL	DOLIT
      0008E4 00 07                 1978         .word	7
      0008E6 CD 02 A5         [ 4] 1979         CALL	ANDD
      0008E9 CD 03 F4         [ 4] 1980         CALL	PLUS
      0008EC CD 01 2A         [ 4] 1981         CALL	DOLIT
      0008EF 00 30                 1982         .word	48	;'0'
      0008F1 CC 03 F4         [ 2] 1983         JP	PLUS
                                   1984 
                                   1985 ;       EXTRACT ( n base -- n c )
                                   1986 ;       Extract least significant digit from n.
      0008F4 08 D0                 1987         .word      LINK
                           0008F6  1988 LINK = . 
      0008F6 07                    1989         .byte      7
      0008F7 45 58 54 52 41 43 54  1990         .ascii     "EXTRACT"
      0008FE                       1991 EXTRC:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0008FE CD 07 07         [ 4] 1992         CALL     ZERO
      000901 CD 02 69         [ 4] 1993         CALL     SWAPP
      000904 CD 05 2F         [ 4] 1994         CALL     UMMOD
      000907 CD 02 69         [ 4] 1995         CALL     SWAPP
      00090A CC 08 D6         [ 2] 1996         JP     DIGIT
                                   1997 
                                   1998 ;       <#      ( -- )
                                   1999 ;       Initiate  numeric output process.
      00090D 08 F6                 2000         .word      LINK
                           00090F  2001 LINK = . 
      00090F 02                    2002         .byte      2
      000910 3C 23                 2003         .ascii     "<#"
      000912                       2004 BDIGS:
      000912 CD 08 05         [ 4] 2005         CALL     PAD
      000915 CD 03 62         [ 4] 2006         CALL     HLD
      000918 CC 01 9B         [ 2] 2007         JP     STORE
                                   2008 
                                   2009 ;       HOLD    ( c -- )
                                   2010 ;       Insert a character into output string.
      00091B 09 0F                 2011         .word      LINK
                           00091D  2012 LINK = . 
      00091D 04                    2013         .byte      4
      00091E 48 4F 4C 44           2014         .ascii     "HOLD"
      000922                       2015 HOLD:
      000922 CD 03 62         [ 4] 2016         CALL     HLD
      000925 CD 01 B2         [ 4] 2017         CALL     AT
      000928 CD 06 E0         [ 4] 2018         CALL     ONEM
      00092B CD 02 59         [ 4] 2019         CALL     DUPP
      00092E CD 03 62         [ 4] 2020         CALL     HLD
      000931 CD 01 9B         [ 4] 2021         CALL     STORE
      000934 CC 01 BF         [ 2] 2022         JP     CSTOR
                                   2023 
                                   2024 ;       #       ( u -- u )
                                   2025 ;       Extract one digit from u and
                                   2026 ;       append digit to output string.
      000937 09 1D                 2027         .word      LINK
                           000939  2028 LINK = . 
      000939 01                    2029         .byte      1
      00093A 23                    2030         .ascii     "#"
      00093B                       2031 DIG:
      00093B CD 03 14         [ 4] 2032         CALL     BASE
      00093E CD 01 B2         [ 4] 2033         CALL     AT
      000941 CD 08 FE         [ 4] 2034         CALL     EXTRC
      000944 CC 09 22         [ 2] 2035         JP     HOLD
                                   2036 
                                   2037 ;       #S      ( u -- 0 )
                                   2038 ;       Convert u until all digits
                                   2039 ;       are added to output string.
      000947 09 39                 2040         .word      LINK
                           000949  2041 LINK = . 
      000949 02                    2042         .byte      2
      00094A 23 53                 2043         .ascii     "#S"
      00094C                       2044 DIGS:
      00094C CD 09 3B         [ 4] 2045 DIGS1:  CALL     DIG
      00094F CD 02 59         [ 4] 2046         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000952 CD 01 5D         [ 4] 2047         CALL     QBRAN
      000955 09 59                 2048         .word      DIGS2
      000957 20 F3            [ 2] 2049         JRA     DIGS1
      000959 81               [ 4] 2050 DIGS2:  RET
                                   2051 
                                   2052 ;       SIGN    ( n -- )
                                   2053 ;       Add a minus sign to
                                   2054 ;       numeric output string.
      00095A 09 49                 2055         .word      LINK
                           00095C  2056 LINK = . 
      00095C 04                    2057         .byte      4
      00095D 53 49 47 4E           2058         .ascii     "SIGN"
      000961                       2059 SIGN:
      000961 CD 02 92         [ 4] 2060         CALL     ZLESS
      000964 CD 01 5D         [ 4] 2061         CALL     QBRAN
      000967 09 71                 2062         .word      SIGN1
      000969 CD 01 2A         [ 4] 2063         CALL     DOLIT
      00096C 00 2D                 2064         .word      45	;"-"
      00096E CC 09 22         [ 2] 2065         JP     HOLD
      000971 81               [ 4] 2066 SIGN1:  RET
                                   2067 
                                   2068 ;       #>      ( w -- b u )
                                   2069 ;       Prepare output string.
      000972 09 5C                 2070         .word      LINK
                           000974  2071 LINK = . 
      000974 02                    2072         .byte      2
      000975 23 3E                 2073         .ascii     "#>"
      000977                       2074 EDIGS:
      000977 CD 02 4F         [ 4] 2075         CALL     DROP
      00097A CD 03 62         [ 4] 2076         CALL     HLD
      00097D CD 01 B2         [ 4] 2077         CALL     AT
      000980 CD 08 05         [ 4] 2078         CALL     PAD
      000983 CD 02 83         [ 4] 2079         CALL     OVER
      000986 CC 04 52         [ 2] 2080         JP     SUBB
                                   2081 
                                   2082 ;       str     ( w -- b u )
                                   2083 ;       Convert a signed integer
                                   2084 ;       to a numeric string.
      000989 09 74                 2085         .word      LINK
                           00098B  2086 LINK = . 
      00098B 03                    2087         .byte      3
      00098C 53 54 52              2088         .ascii     "STR"
      00098F                       2089 STR:
      00098F CD 02 59         [ 4] 2090         CALL     DUPP
      000992 CD 02 22         [ 4] 2091         CALL     TOR
      000995 CD 04 6C         [ 4] 2092         CALL     ABSS
      000998 CD 09 12         [ 4] 2093         CALL     BDIGS
      00099B CD 09 4C         [ 4] 2094         CALL     DIGS
      00099E CD 02 03         [ 4] 2095         CALL     RFROM
      0009A1 CD 09 61         [ 4] 2096         CALL     SIGN
      0009A4 CC 09 77         [ 2] 2097         JP     EDIGS
                                   2098 
                                   2099 ;       HEX     ( -- )
                                   2100 ;       Use radix 16 as base for
                                   2101 ;       numeric conversions.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0009A7 09 8B                 2102         .word      LINK
                           0009A9  2103 LINK = . 
      0009A9 03                    2104         .byte      3
      0009AA 48 45 58              2105         .ascii     "HEX"
      0009AD                       2106 HEX:
      0009AD CD 01 2A         [ 4] 2107         CALL     DOLIT
      0009B0 00 10                 2108         .word      16
      0009B2 CD 03 14         [ 4] 2109         CALL     BASE
      0009B5 CC 01 9B         [ 2] 2110         JP     STORE
                                   2111 
                                   2112 ;       DECIMAL ( -- )
                                   2113 ;       Use radix 10 as base
                                   2114 ;       for numeric conversions.
      0009B8 09 A9                 2115         .word      LINK
                           0009BA  2116 LINK = . 
      0009BA 07                    2117         .byte      7
      0009BB 44 45 43 49 4D 41 4C  2118         .ascii     "DECIMAL"
      0009C2                       2119 DECIM:
      0009C2 CD 01 2A         [ 4] 2120         CALL     DOLIT
      0009C5 00 0A                 2121         .word      10
      0009C7 CD 03 14         [ 4] 2122         CALL     BASE
      0009CA CC 01 9B         [ 2] 2123         JP     STORE
                                   2124 
                                   2125 ;; Numeric input, single precision
                                   2126 
                                   2127 ;       DIGIT?  ( c base -- u t )
                                   2128 ;       Convert a character to its numeric
                                   2129 ;       value. A flag indicates success.
      0009CD 09 BA                 2130         .word      LINK
                           0009CF  2131 LINK = . 
      0009CF 06                    2132         .byte       6
      0009D0 44 49 47 49 54 3F     2133         .ascii     "DIGIT?"
      0009D6                       2134 DIGTQ:
      0009D6 CD 02 22         [ 4] 2135         CALL     TOR
      0009D9 CD 01 2A         [ 4] 2136         CALL     DOLIT
      0009DC 00 30                 2137         .word     48	; "0"
      0009DE CD 04 52         [ 4] 2138         CALL     SUBB
      0009E1 CD 01 2A         [ 4] 2139         CALL     DOLIT
      0009E4 00 09                 2140         .word      9
      0009E6 CD 02 83         [ 4] 2141         CALL     OVER
      0009E9 CD 04 B7         [ 4] 2142         CALL     LESS
      0009EC CD 01 5D         [ 4] 2143         CALL     QBRAN
      0009EF 0A 07                 2144         .word      DGTQ1
      0009F1 CD 01 2A         [ 4] 2145         CALL     DOLIT
      0009F4 00 07                 2146         .word      7
      0009F6 CD 04 52         [ 4] 2147         CALL     SUBB
      0009F9 CD 02 59         [ 4] 2148         CALL     DUPP
      0009FC CD 01 2A         [ 4] 2149         CALL     DOLIT
      0009FF 00 0A                 2150         .word      10
      000A01 CD 04 B7         [ 4] 2151         CALL     LESS
      000A04 CD 02 B9         [ 4] 2152         CALL     ORR
      000A07 CD 02 59         [ 4] 2153 DGTQ1:  CALL     DUPP
      000A0A CD 02 03         [ 4] 2154         CALL     RFROM
      000A0D CC 04 99         [ 2] 2155         JP     ULESS
                                   2156 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2157 ;       NUMBER? ( a -- n T | a F )
                                   2158 ;       Convert a number string to
                                   2159 ;       integer. Push a flag on tos.
      000A10 09 CF                 2160         .word      LINK
                           000A12  2161 LINK = . 
      000A12 07                    2162         .byte      7
      000A13 4E 55 4D 42 45 52 3F  2163         .ascii     "NUMBER?"
      000A1A                       2164 NUMBQ:
      000A1A CD 03 14         [ 4] 2165         CALL     BASE
      000A1D CD 01 B2         [ 4] 2166         CALL     AT
      000A20 CD 02 22         [ 4] 2167         CALL     TOR
      000A23 CD 07 07         [ 4] 2168         CALL     ZERO
      000A26 CD 02 83         [ 4] 2169         CALL     OVER
      000A29 CD 07 DD         [ 4] 2170         CALL     COUNT
      000A2C CD 02 83         [ 4] 2171         CALL     OVER
      000A2F CD 01 D0         [ 4] 2172         CALL     CAT
      000A32 CD 01 2A         [ 4] 2173         CALL     DOLIT
      000A35 00 24                 2174         .word     36	; "0x"
      000A37 CD 04 7A         [ 4] 2175         CALL     EQUAL
      000A3A CD 01 5D         [ 4] 2176         CALL     QBRAN
      000A3D 0A 4E                 2177         .word      NUMQ1
      000A3F CD 09 AD         [ 4] 2178         CALL     HEX
      000A42 CD 02 69         [ 4] 2179         CALL     SWAPP
      000A45 CD 06 D3         [ 4] 2180         CALL     ONEP
      000A48 CD 02 69         [ 4] 2181         CALL     SWAPP
      000A4B CD 06 E0         [ 4] 2182         CALL     ONEM
      000A4E CD 02 83         [ 4] 2183 NUMQ1:  CALL     OVER
      000A51 CD 01 D0         [ 4] 2184         CALL     CAT
      000A54 CD 01 2A         [ 4] 2185         CALL     DOLIT
      000A57 00 2D                 2186         .word     45	; "-"
      000A59 CD 04 7A         [ 4] 2187         CALL     EQUAL
      000A5C CD 02 22         [ 4] 2188         CALL     TOR
      000A5F CD 02 69         [ 4] 2189         CALL     SWAPP
      000A62 CD 02 16         [ 4] 2190         CALL     RAT
      000A65 CD 04 52         [ 4] 2191         CALL     SUBB
      000A68 CD 02 69         [ 4] 2192         CALL     SWAPP
      000A6B CD 02 16         [ 4] 2193         CALL     RAT
      000A6E CD 03 F4         [ 4] 2194         CALL     PLUS
      000A71 CD 03 A3         [ 4] 2195         CALL     QDUP
      000A74 CD 01 5D         [ 4] 2196         CALL     QBRAN
      000A77 0A D8                 2197         .word      NUMQ6
      000A79 CD 06 E0         [ 4] 2198         CALL     ONEM
      000A7C CD 02 22         [ 4] 2199         CALL     TOR
      000A7F CD 02 59         [ 4] 2200 NUMQ2:  CALL     DUPP
      000A82 CD 02 22         [ 4] 2201         CALL     TOR
      000A85 CD 01 D0         [ 4] 2202         CALL     CAT
      000A88 CD 03 14         [ 4] 2203         CALL     BASE
      000A8B CD 01 B2         [ 4] 2204         CALL     AT
      000A8E CD 09 D6         [ 4] 2205         CALL     DIGTQ
      000A91 CD 01 5D         [ 4] 2206         CALL     QBRAN
      000A94 0A C6                 2207         .word      NUMQ4
      000A96 CD 02 69         [ 4] 2208         CALL     SWAPP
      000A99 CD 03 14         [ 4] 2209         CALL     BASE
      000A9C CD 01 B2         [ 4] 2210         CALL     AT
      000A9F CD 06 52         [ 4] 2211         CALL     STAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000AA2 CD 03 F4         [ 4] 2212         CALL     PLUS
      000AA5 CD 02 03         [ 4] 2213         CALL     RFROM
      000AA8 CD 06 D3         [ 4] 2214         CALL     ONEP
      000AAB CD 01 3E         [ 4] 2215         CALL     DONXT
      000AAE 0A 7F                 2216         .word      NUMQ2
      000AB0 CD 02 16         [ 4] 2217         CALL     RAT
      000AB3 CD 02 69         [ 4] 2218         CALL     SWAPP
      000AB6 CD 02 4F         [ 4] 2219         CALL     DROP
      000AB9 CD 01 5D         [ 4] 2220         CALL     QBRAN
      000ABC 0A C1                 2221         .word      NUMQ3
      000ABE CD 04 1F         [ 4] 2222         CALL     NEGAT
      000AC1 CD 02 69         [ 4] 2223 NUMQ3:  CALL     SWAPP
      000AC4 20 0F            [ 2] 2224         JRA     NUMQ5
      000AC6 CD 02 03         [ 4] 2225 NUMQ4:  CALL     RFROM
      000AC9 CD 02 03         [ 4] 2226         CALL     RFROM
      000ACC CD 03 D4         [ 4] 2227         CALL     DDROP
      000ACF CD 03 D4         [ 4] 2228         CALL     DDROP
      000AD2 CD 07 07         [ 4] 2229         CALL     ZERO
      000AD5 CD 02 59         [ 4] 2230 NUMQ5:  CALL     DUPP
      000AD8 CD 02 03         [ 4] 2231 NUMQ6:  CALL     RFROM
      000ADB CD 03 D4         [ 4] 2232         CALL     DDROP
      000ADE CD 02 03         [ 4] 2233         CALL     RFROM
      000AE1 CD 03 14         [ 4] 2234         CALL     BASE
      000AE4 CC 01 9B         [ 2] 2235         JP     STORE
                                   2236 
                                   2237 ;; Basic I/O
                                   2238 
                                   2239 ;       KEY     ( -- c )
                                   2240 ;       Wait for and return an
                                   2241 ;       input character.
      000AE7 0A 12                 2242         .word      LINK
                           000AE9  2243 LINK = . 
      000AE9 03                    2244         .byte      3
      000AEA 4B 45 59              2245         .ascii     "KEY"
      000AED                       2246 KEY:
                           000001  2247 .if CONVERT_TO_CODE
      000AED 72 0B 52 30 FB   [ 2] 2248         btjf UART1_SR,#UART_SR_RXNE,. 
      000AF2 C6 52 31         [ 1] 2249         ld a,UART1_DR 
      000AF5 1D 00 02         [ 2] 2250         subw x,#CELLL 
      000AF8 E7 01            [ 1] 2251         ld (1,x),a 
      000AFA 7F               [ 1] 2252         clr (x)
      000AFB 81               [ 4] 2253         ret 
                           000000  2254 .else 
                                   2255 KEY1:   CALL     QKEY
                                   2256         CALL     QBRAN
                                   2257         .word      KEY1
                                   2258         RET
                                   2259 .endif 
                                   2260 
                                   2261 ;       NUF?    ( -- t )
                                   2262 ;       Return false if no input,
                                   2263 ;       else pause and if CR return true.
      000AFC 0A E9                 2264         .word      LINK
                           000AFE  2265 LINK = . 
      000AFE 04                    2266         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000AFF 4E 55 46 3F           2267         .ascii     "NUF?"
      000B03                       2268 NUFQ:
      000B03 CD 00 F6         [ 4] 2269         CALL     QKEY
      000B06 CD 02 59         [ 4] 2270         CALL     DUPP
      000B09 CD 01 5D         [ 4] 2271         CALL     QBRAN
      000B0C 0B 1C                 2272         .word    NUFQ1
      000B0E CD 03 D4         [ 4] 2273         CALL     DDROP
      000B11 CD 0A ED         [ 4] 2274         CALL     KEY
      000B14 CD 01 2A         [ 4] 2275         CALL     DOLIT
      000B17 00 0D                 2276         .word      CRR
      000B19 CC 04 7A         [ 2] 2277         JP     EQUAL
      000B1C 81               [ 4] 2278 NUFQ1:  RET
                                   2279 
                                   2280 ;       SPACE   ( -- )
                                   2281 ;       Send  blank character to
                                   2282 ;       output device.
      000B1D 0A FE                 2283         .word      LINK
                           000B1F  2284 LINK = . 
      000B1F 05                    2285         .byte      5
      000B20 53 50 41 43 45        2286         .ascii     "SPACE"
      000B25                       2287 SPACE:
      000B25 CD 06 FA         [ 4] 2288         CALL     BLANK
      000B28 CC 01 14         [ 2] 2289         JP     EMIT
                                   2290 
                                   2291 ;       SPACES  ( +n -- )
                                   2292 ;       Send n spaces to output device.
      000B2B 0B 1F                 2293         .word      LINK
                           000B2D  2294 LINK = . 
      000B2D 06                    2295         .byte      6
      000B2E 53 50 41 43 45 53     2296         .ascii     "SPACES"
      000B34                       2297 SPACS:
      000B34 CD 07 07         [ 4] 2298         CALL     ZERO
      000B37 CD 04 D7         [ 4] 2299         CALL     MAX
      000B3A CD 02 22         [ 4] 2300         CALL     TOR
      000B3D 20 03            [ 2] 2301         JRA      CHAR2
      000B3F CD 0B 25         [ 4] 2302 CHAR1:  CALL     SPACE
      000B42 CD 01 3E         [ 4] 2303 CHAR2:  CALL     DONXT
      000B45 0B 3F                 2304         .word    CHAR1
      000B47 81               [ 4] 2305         RET
                                   2306 
                                   2307 ;       TYPE    ( b u -- )
                                   2308 ;       Output u characters from b.
      000B48 0B 2D                 2309         .word      LINK
                           000B4A  2310 LINK = . 
      000B4A 04                    2311         .byte      4
      000B4B 54 59 50 45           2312         .ascii     "TYPE"
      000B4F                       2313 TYPES:
      000B4F CD 02 22         [ 4] 2314         CALL     TOR
      000B52 20 0C            [ 2] 2315         JRA     TYPE2
      000B54 CD 02 59         [ 4] 2316 TYPE1:  CALL     DUPP
      000B57 CD 01 D0         [ 4] 2317         CALL     CAT
      000B5A CD 01 14         [ 4] 2318         CALL     EMIT
      000B5D CD 06 D3         [ 4] 2319         CALL     ONEP
      000B60 CD 01 3E         [ 4] 2320 TYPE2:  CALL     DONXT
      000B63 0B 54                 2321         .word      TYPE1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B65 CC 02 4F         [ 2] 2322         JP     DROP
                                   2323 
                                   2324 ;       CR      ( -- )
                                   2325 ;       Output a carriage return
                                   2326 ;       and a line feed.
      000B68 0B 4A                 2327         .word      LINK
                           000B6A  2328 LINK = . 
      000B6A 02                    2329         .byte      2
      000B6B 43 52                 2330         .ascii     "CR"
      000B6D                       2331 CR:
      000B6D CD 01 2A         [ 4] 2332         CALL     DOLIT
      000B70 00 0D                 2333         .word      CRR
      000B72 CD 01 14         [ 4] 2334         CALL     EMIT
      000B75 CD 01 2A         [ 4] 2335         CALL     DOLIT
      000B78 00 0A                 2336         .word      LF
      000B7A CC 01 14         [ 2] 2337         JP     EMIT
                                   2338 
                                   2339 ;       do$     ( -- a )
                                   2340 ;       Return  address of a compiled
                                   2341 ;       string.
      000B7D 0B 6A                 2342         .word      LINK
                           000B7F  2343 LINK = . 
      000B7F 43                    2344 	.byte      COMPO+3
      000B80 44 4F 24              2345         .ascii     "DO$"
      000B83                       2346 DOSTR:
      000B83 CD 02 03         [ 4] 2347         CALL     RFROM
      000B86 CD 02 16         [ 4] 2348         CALL     RAT
      000B89 CD 02 03         [ 4] 2349         CALL     RFROM
      000B8C CD 07 DD         [ 4] 2350         CALL     COUNT
      000B8F CD 03 F4         [ 4] 2351         CALL     PLUS
      000B92 CD 02 22         [ 4] 2352         CALL     TOR
      000B95 CD 02 69         [ 4] 2353         CALL     SWAPP
      000B98 CD 02 22         [ 4] 2354         CALL     TOR
      000B9B 81               [ 4] 2355         RET
                                   2356 
                                   2357 ;       $"|     ( -- a )
                                   2358 ;       Run time routine compiled by $".
                                   2359 ;       Return address of a compiled string.
      000B9C 0B 7F                 2360         .word      LINK
                           000B9E  2361 LINK = . 
      000B9E 43                    2362 	.byte      COMPO+3
      000B9F 24 22 7C              2363         .byte     '$','"','|'
      000BA2                       2364 STRQP:
      000BA2 CD 0B 83         [ 4] 2365         CALL     DOSTR
      000BA5 81               [ 4] 2366         RET
                                   2367 
                                   2368 ;       ."|     ( -- )
                                   2369 ;       Run time routine of ." .
                                   2370 ;       Output a compiled string.
      000BA6 0B 9E                 2371         .word      LINK
                           000BA8  2372 LINK = . 
      000BA8 43                    2373 	.byte      COMPO+3
      000BA9 2E 22 7C              2374         .byte     '.','"','|'
      000BAC                       2375 DOTQP:
      000BAC CD 0B 83         [ 4] 2376         CALL     DOSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000BAF CD 07 DD         [ 4] 2377         CALL     COUNT
      000BB2 CC 0B 4F         [ 2] 2378         JP     TYPES
                                   2379 
                                   2380 ;       .R      ( n +n -- )
                                   2381 ;       Display an integer in a field
                                   2382 ;       of n columns, right justified.
      000BB5 0B A8                 2383         .word      LINK
                           000BB7  2384 LINK = . 
      000BB7 02                    2385         .byte      2
      000BB8 2E 52                 2386         .ascii     ".R"
      000BBA                       2387 DOTR:
      000BBA CD 02 22         [ 4] 2388         CALL     TOR
      000BBD CD 09 8F         [ 4] 2389         CALL     STR
      000BC0 CD 02 03         [ 4] 2390         CALL     RFROM
      000BC3 CD 02 83         [ 4] 2391         CALL     OVER
      000BC6 CD 04 52         [ 4] 2392         CALL     SUBB
      000BC9 CD 0B 34         [ 4] 2393         CALL     SPACS
      000BCC CC 0B 4F         [ 2] 2394         JP     TYPES
                                   2395 
                                   2396 ;       U.R     ( u +n -- )
                                   2397 ;       Display an unsigned integer
                                   2398 ;       in n column, right justified.
      000BCF 0B B7                 2399         .word      LINK
                           000BD1  2400 LINK = . 
      000BD1 03                    2401         .byte      3
      000BD2 55 2E 52              2402         .ascii     "U.R"
      000BD5                       2403 UDOTR:
      000BD5 CD 02 22         [ 4] 2404         CALL     TOR
      000BD8 CD 09 12         [ 4] 2405         CALL     BDIGS
      000BDB CD 09 4C         [ 4] 2406         CALL     DIGS
      000BDE CD 09 77         [ 4] 2407         CALL     EDIGS
      000BE1 CD 02 03         [ 4] 2408         CALL     RFROM
      000BE4 CD 02 83         [ 4] 2409         CALL     OVER
      000BE7 CD 04 52         [ 4] 2410         CALL     SUBB
      000BEA CD 0B 34         [ 4] 2411         CALL     SPACS
      000BED CC 0B 4F         [ 2] 2412         JP     TYPES
                                   2413 
                                   2414 ;       U.      ( u -- )
                                   2415 ;       Display an unsigned integer
                                   2416 ;       in free format.
      000BF0 0B D1                 2417         .word      LINK
                           000BF2  2418 LINK = . 
      000BF2 02                    2419         .byte      2
      000BF3 55 2E                 2420         .ascii     "U."
      000BF5                       2421 UDOT:
      000BF5 CD 09 12         [ 4] 2422         CALL     BDIGS
      000BF8 CD 09 4C         [ 4] 2423         CALL     DIGS
      000BFB CD 09 77         [ 4] 2424         CALL     EDIGS
      000BFE CD 0B 25         [ 4] 2425         CALL     SPACE
      000C01 CC 0B 4F         [ 2] 2426         JP     TYPES
                                   2427 
                                   2428 ;       .       ( w -- )
                                   2429 ;       Display an integer in free
                                   2430 ;       format, preceeded by a space.
      000C04 0B F2                 2431         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                           000C06  2432 LINK = . 
      000C06 01                    2433         .byte      1
      000C07 2E                    2434         .ascii     "."
      000C08                       2435 DOT:
      000C08 CD 03 14         [ 4] 2436         CALL     BASE
      000C0B CD 01 B2         [ 4] 2437         CALL     AT
      000C0E CD 01 2A         [ 4] 2438         CALL     DOLIT
      000C11 00 0A                 2439         .word      10
      000C13 CD 02 CE         [ 4] 2440         CALL     XORR    ;?decimal
      000C16 CD 01 5D         [ 4] 2441         CALL     QBRAN
      000C19 0C 1E                 2442         .word      DOT1
      000C1B CC 0B F5         [ 2] 2443         JP     UDOT
      000C1E CD 09 8F         [ 4] 2444 DOT1:   CALL     STR
      000C21 CD 0B 25         [ 4] 2445         CALL     SPACE
      000C24 CC 0B 4F         [ 2] 2446         JP     TYPES
                                   2447 
                                   2448 ;       ?       ( a -- )
                                   2449 ;       Display contents in memory cell.
      000C27 0C 06                 2450         .word      LINK
                                   2451         
                           000C29  2452 LINK = . 
      000C29 01                    2453         .byte      1
      000C2A 3F                    2454         .ascii     "?"
      000C2B                       2455 QUEST:
      000C2B CD 01 B2         [ 4] 2456         CALL     AT
      000C2E CC 0C 08         [ 2] 2457         JP     DOT
                                   2458 
                                   2459 ;; Parsing
                                   2460 
                                   2461 ;       parse   ( b u c -- b u delta ; <string> )
                                   2462 ;       Scan string delimited by c.
                                   2463 ;       Return found string and its offset.
      000C31 0C 29                 2464         .word      LINK
                           000C33  2465 LINK = . 
      000C33 05                    2466         .byte      5
      000C34 70 61 72 73 65        2467         .ascii     "parse"
      000C39                       2468 PARS:
      000C39 CD 03 23         [ 4] 2469         CALL     TEMP
      000C3C CD 01 9B         [ 4] 2470         CALL     STORE
      000C3F CD 02 83         [ 4] 2471         CALL     OVER
      000C42 CD 02 22         [ 4] 2472         CALL     TOR
      000C45 CD 02 59         [ 4] 2473         CALL     DUPP
      000C48 CD 01 5D         [ 4] 2474         CALL     QBRAN
      000C4B 0C F1                 2475         .word    PARS8
      000C4D CD 06 E0         [ 4] 2476         CALL     ONEM
      000C50 CD 03 23         [ 4] 2477         CALL     TEMP
      000C53 CD 01 B2         [ 4] 2478         CALL     AT
      000C56 CD 06 FA         [ 4] 2479         CALL     BLANK
      000C59 CD 04 7A         [ 4] 2480         CALL     EQUAL
      000C5C CD 01 5D         [ 4] 2481         CALL     QBRAN
      000C5F 0C 92                 2482         .word      PARS3
      000C61 CD 02 22         [ 4] 2483         CALL     TOR
      000C64 CD 06 FA         [ 4] 2484 PARS1:  CALL     BLANK
      000C67 CD 02 83         [ 4] 2485         CALL     OVER
      000C6A CD 01 D0         [ 4] 2486         CALL     CAT     ;skip leading blanks ONLY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C6D CD 04 52         [ 4] 2487         CALL     SUBB
      000C70 CD 02 92         [ 4] 2488         CALL     ZLESS
      000C73 CD 04 0E         [ 4] 2489         CALL     INVER
      000C76 CD 01 5D         [ 4] 2490         CALL     QBRAN
      000C79 0C 8F                 2491         .word      PARS2
      000C7B CD 06 D3         [ 4] 2492         CALL     ONEP
      000C7E CD 01 3E         [ 4] 2493         CALL     DONXT
      000C81 0C 64                 2494         .word      PARS1
      000C83 CD 02 03         [ 4] 2495         CALL     RFROM
      000C86 CD 02 4F         [ 4] 2496         CALL     DROP
      000C89 CD 07 07         [ 4] 2497         CALL     ZERO
      000C8C CC 02 59         [ 2] 2498         JP     DUPP
      000C8F CD 02 03         [ 4] 2499 PARS2:  CALL     RFROM
      000C92 CD 02 83         [ 4] 2500 PARS3:  CALL     OVER
      000C95 CD 02 69         [ 4] 2501         CALL     SWAPP
      000C98 CD 02 22         [ 4] 2502         CALL     TOR
      000C9B CD 03 23         [ 4] 2503 PARS4:  CALL     TEMP
      000C9E CD 01 B2         [ 4] 2504         CALL     AT
      000CA1 CD 02 83         [ 4] 2505         CALL     OVER
      000CA4 CD 01 D0         [ 4] 2506         CALL     CAT
      000CA7 CD 04 52         [ 4] 2507         CALL     SUBB    ;scan for delimiter
      000CAA CD 03 23         [ 4] 2508         CALL     TEMP
      000CAD CD 01 B2         [ 4] 2509         CALL     AT
      000CB0 CD 06 FA         [ 4] 2510         CALL     BLANK
      000CB3 CD 04 7A         [ 4] 2511         CALL     EQUAL
      000CB6 CD 01 5D         [ 4] 2512         CALL     QBRAN
      000CB9 0C BE                 2513         .word      PARS5
      000CBB CD 02 92         [ 4] 2514         CALL     ZLESS
      000CBE CD 01 5D         [ 4] 2515 PARS5:  CALL     QBRAN
      000CC1 0C D3                 2516         .word      PARS6
      000CC3 CD 06 D3         [ 4] 2517         CALL     ONEP
      000CC6 CD 01 3E         [ 4] 2518         CALL     DONXT
      000CC9 0C 9B                 2519         .word      PARS4
      000CCB CD 02 59         [ 4] 2520         CALL     DUPP
      000CCE CD 02 22         [ 4] 2521         CALL     TOR
      000CD1 20 0F            [ 2] 2522         JRA     PARS7
      000CD3 CD 02 03         [ 4] 2523 PARS6:  CALL     RFROM
      000CD6 CD 02 4F         [ 4] 2524         CALL     DROP
      000CD9 CD 02 59         [ 4] 2525         CALL     DUPP
      000CDC CD 06 D3         [ 4] 2526         CALL     ONEP
      000CDF CD 02 22         [ 4] 2527         CALL     TOR
      000CE2 CD 02 83         [ 4] 2528 PARS7:  CALL     OVER
      000CE5 CD 04 52         [ 4] 2529         CALL     SUBB
      000CE8 CD 02 03         [ 4] 2530         CALL     RFROM
      000CEB CD 02 03         [ 4] 2531         CALL     RFROM
      000CEE CC 04 52         [ 2] 2532         JP     SUBB
      000CF1 CD 02 83         [ 4] 2533 PARS8:  CALL     OVER
      000CF4 CD 02 03         [ 4] 2534         CALL     RFROM
      000CF7 CC 04 52         [ 2] 2535         JP     SUBB
                                   2536 
                                   2537 ;       PARSE   ( c -- b u ; <string> )
                                   2538 ;       Scan input stream and return
                                   2539 ;       counted string delimited by c.
      000CFA 0C 33                 2540         .word      LINK
                           000CFC  2541 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CFC 05                    2542         .byte      5
      000CFD 50 41 52 53 45        2543         .ascii     "PARSE"
      000D02                       2544 PARSE:
      000D02 CD 02 22         [ 4] 2545         CALL     TOR
      000D05 CD 08 16         [ 4] 2546         CALL     TIB
      000D08 CD 03 32         [ 4] 2547         CALL     INN
      000D0B CD 01 B2         [ 4] 2548         CALL     AT
      000D0E CD 03 F4         [ 4] 2549         CALL     PLUS    ;current input buffer pointer
      000D11 CD 03 42         [ 4] 2550         CALL     NTIB
      000D14 CD 01 B2         [ 4] 2551         CALL     AT
      000D17 CD 03 32         [ 4] 2552         CALL     INN
      000D1A CD 01 B2         [ 4] 2553         CALL     AT
      000D1D CD 04 52         [ 4] 2554         CALL     SUBB    ;remaining count
      000D20 CD 02 03         [ 4] 2555         CALL     RFROM
      000D23 CD 0C 39         [ 4] 2556         CALL     PARS
      000D26 CD 03 32         [ 4] 2557         CALL     INN
      000D29 CC 07 76         [ 2] 2558         JP     PSTOR
                                   2559 
                                   2560 ;       .(      ( -- )
                                   2561 ;       Output following string up to next ) .
      000D2C 0C FC                 2562         .word      LINK
                           000D2E  2563 LINK = . 
      000D2E 82                    2564 	.byte      IMEDD+2
      000D2F 2E 28                 2565         .ascii     ".("
      000D31                       2566 DOTPR:
      000D31 CD 01 2A         [ 4] 2567         CALL     DOLIT
      000D34 00 29                 2568         .word     41	; ")"
      000D36 CD 0D 02         [ 4] 2569         CALL     PARSE
      000D39 CC 0B 4F         [ 2] 2570         JP     TYPES
                                   2571 
                                   2572 ;       (       ( -- )
                                   2573 ;       Ignore following string up to next ).
                                   2574 ;       A comment.
      000D3C 0D 2E                 2575         .word      LINK
                           000D3E  2576 LINK = . 
      000D3E 81                    2577 	.byte      IMEDD+1
      000D3F 28                    2578         .ascii     "("
      000D40                       2579 PAREN:
      000D40 CD 01 2A         [ 4] 2580         CALL     DOLIT
      000D43 00 29                 2581         .word     41	; ")"
      000D45 CD 0D 02         [ 4] 2582         CALL     PARSE
      000D48 CC 03 D4         [ 2] 2583         JP     DDROP
                                   2584 
                                   2585 ;       \       ( -- )
                                   2586 ;       Ignore following text till
                                   2587 ;       end of line.
      000D4B 0D 3E                 2588         .word      LINK
                           000D4D  2589 LINK = . 
      000D4D 81                    2590 	.byte      IMEDD+1
      000D4E 5C                    2591         .ascii     "\"
      000D4F                       2592 BKSLA:
                           000001  2593 .if CONVERT_TO_CODE
      000D4F 90 AE 00 0C      [ 2] 2594         ldw y,#UCTIB ; #TIB  
      000D53 90 FE            [ 2] 2595         ldw y,(y)
      000D55 90 89            [ 2] 2596         pushw y ; count in TIB 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D57 90 AE 00 0A      [ 2] 2597         ldw y,#UINN ; >IN 
      000D5B 90 BF 1C         [ 2] 2598         ldw YTEMP,y
      000D5E 90 85            [ 2] 2599         popw y 
      000D60 91 CF 1C         [ 5] 2600         ldw [YTEMP],y
      000D63 81               [ 4] 2601         ret 
                           000000  2602 .else
                                   2603         CALL     NTIB
                                   2604         CALL     AT
                                   2605         CALL     INN
                                   2606         JP     STORE
                                   2607 .endif 
                                   2608 
                                   2609 ;       WORD    ( c -- a ; <string> )
                                   2610 ;       Parse a word from input stream
                                   2611 ;       and copy it to code dictionary.
      000D64 0D 4D                 2612         .word      LINK
                           000D66  2613 LINK = . 
      000D66 04                    2614         .byte      4
      000D67 57 4F 52 44           2615         .ascii     "WORD"
      000D6B                       2616 WORDD:
      000D6B CD 0D 02         [ 4] 2617         CALL     PARSE
      000D6E CD 07 F4         [ 4] 2618         CALL     HERE
      000D71 CD 06 A8         [ 4] 2619         CALL     CELLP
      000D74 CC 08 B5         [ 2] 2620         JP     PACKS
                                   2621 
                                   2622 ;       TOKEN   ( -- a ; <string> )
                                   2623 ;       Parse a word from input stream
                                   2624 ;       and copy it to name dictionary.
      000D77 0D 66                 2625         .word      LINK
                           000D79  2626 LINK = . 
      000D79 05                    2627         .byte      5
      000D7A 54 4F 4B 45 4E        2628         .ascii     "TOKEN"
      000D7F                       2629 TOKEN:
      000D7F CD 06 FA         [ 4] 2630         CALL     BLANK
      000D82 CC 0D 6B         [ 2] 2631         JP     WORDD
                                   2632 
                                   2633 ;; Dictionary search
                                   2634 
                                   2635 ;       NAME>   ( na -- ca )
                                   2636 ;       Return a code address given
                                   2637 ;       a name address.
      000D85 0D 79                 2638         .word      LINK
                           000D87  2639 LINK = . 
      000D87 05                    2640         .byte      5
      000D88 4E 41 4D 45 3E        2641         .ascii     "NAME>"
      000D8D                       2642 NAMET:
      000D8D CD 07 DD         [ 4] 2643         CALL     COUNT
      000D90 CD 01 2A         [ 4] 2644         CALL     DOLIT
      000D93 00 1F                 2645         .word      31
      000D95 CD 02 A5         [ 4] 2646         CALL     ANDD
      000D98 CC 03 F4         [ 2] 2647         JP     PLUS
                                   2648 
                                   2649 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2650 ;       Compare u cells in two
                                   2651 ;       strings. Return 0 if identical.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D9B 0D 87                 2652         .word      LINK
                           000D9D  2653 LINK = . 
      000D9D 05                    2654         .byte       5
      000D9E 53 41 4D 45 3F        2655         .ascii     "SAME?"
      000DA3                       2656 SAMEQ:
      000DA3 CD 06 E0         [ 4] 2657         CALL     ONEM
      000DA6 CD 02 22         [ 4] 2658         CALL     TOR
      000DA9 20 29            [ 2] 2659         JRA     SAME2
      000DAB CD 02 83         [ 4] 2660 SAME1:  CALL     OVER
      000DAE CD 02 16         [ 4] 2661         CALL     RAT
      000DB1 CD 03 F4         [ 4] 2662         CALL     PLUS
      000DB4 CD 01 D0         [ 4] 2663         CALL     CAT
      000DB7 CD 02 83         [ 4] 2664         CALL     OVER
      000DBA CD 02 16         [ 4] 2665         CALL     RAT
      000DBD CD 03 F4         [ 4] 2666         CALL     PLUS
      000DC0 CD 01 D0         [ 4] 2667         CALL     CAT
      000DC3 CD 04 52         [ 4] 2668         CALL     SUBB
      000DC6 CD 03 A3         [ 4] 2669         CALL     QDUP
      000DC9 CD 01 5D         [ 4] 2670         CALL     QBRAN
      000DCC 0D D4                 2671         .word      SAME2
      000DCE CD 02 03         [ 4] 2672         CALL     RFROM
      000DD1 CC 02 4F         [ 2] 2673         JP     DROP
      000DD4 CD 01 3E         [ 4] 2674 SAME2:  CALL     DONXT
      000DD7 0D AB                 2675         .word      SAME1
      000DD9 CC 07 07         [ 2] 2676         JP     ZERO
                                   2677 
                                   2678 ;       find    ( a va -- ca na | a F )
                                   2679 ;       Search vocabulary for string.
                                   2680 ;       Return ca and na if succeeded.
      000DDC 0D 9D                 2681         .word      LINK
                           000DDE  2682 LINK = . 
      000DDE 04                    2683         .byte      4
      000DDF 46 49 4E 44           2684         .ascii     "FIND"
      000DE3                       2685 FIND:
      000DE3 CD 02 69         [ 4] 2686         CALL     SWAPP
      000DE6 CD 02 59         [ 4] 2687         CALL     DUPP
      000DE9 CD 01 D0         [ 4] 2688         CALL     CAT
      000DEC CD 03 23         [ 4] 2689         CALL     TEMP
      000DEF CD 01 9B         [ 4] 2690         CALL     STORE
      000DF2 CD 02 59         [ 4] 2691         CALL     DUPP
      000DF5 CD 01 B2         [ 4] 2692         CALL     AT
      000DF8 CD 02 22         [ 4] 2693         CALL     TOR
      000DFB CD 06 A8         [ 4] 2694         CALL     CELLP
      000DFE CD 02 69         [ 4] 2695         CALL     SWAPP
      000E01 CD 01 B2         [ 4] 2696 FIND1:  CALL     AT
      000E04 CD 02 59         [ 4] 2697         CALL     DUPP
      000E07 CD 01 5D         [ 4] 2698         CALL     QBRAN
      000E0A 0E 40                 2699         .word      FIND6
      000E0C CD 02 59         [ 4] 2700         CALL     DUPP
      000E0F CD 01 B2         [ 4] 2701         CALL     AT
      000E12 CD 01 2A         [ 4] 2702         CALL     DOLIT
      000E15 1F 7F                 2703         .word      MASKK
      000E17 CD 02 A5         [ 4] 2704         CALL     ANDD
      000E1A CD 02 16         [ 4] 2705         CALL     RAT
      000E1D CD 02 CE         [ 4] 2706         CALL     XORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000E20 CD 01 5D         [ 4] 2707         CALL     QBRAN
      000E23 0E 2F                 2708         .word      FIND2
      000E25 CD 06 A8         [ 4] 2709         CALL     CELLP
      000E28 CD 01 2A         [ 4] 2710         CALL     DOLIT
      000E2B FF FF                 2711         .word     0xFFFF
      000E2D 20 0C            [ 2] 2712         JRA     FIND3
      000E2F CD 06 A8         [ 4] 2713 FIND2:  CALL     CELLP
      000E32 CD 03 23         [ 4] 2714         CALL     TEMP
      000E35 CD 01 B2         [ 4] 2715         CALL     AT
      000E38 CD 0D A3         [ 4] 2716         CALL     SAMEQ
      000E3B CD 01 74         [ 4] 2717 FIND3:  CALL     BRAN
      000E3E 0E 4F                 2718         .word      FIND4
      000E40 CD 02 03         [ 4] 2719 FIND6:  CALL     RFROM
      000E43 CD 02 4F         [ 4] 2720         CALL     DROP
      000E46 CD 02 69         [ 4] 2721         CALL     SWAPP
      000E49 CD 06 B7         [ 4] 2722         CALL     CELLM
      000E4C CC 02 69         [ 2] 2723         JP     SWAPP
      000E4F CD 01 5D         [ 4] 2724 FIND4:  CALL     QBRAN
      000E52 0E 5C                 2725         .word      FIND5
      000E54 CD 06 B7         [ 4] 2726         CALL     CELLM
      000E57 CD 06 B7         [ 4] 2727         CALL     CELLM
      000E5A 20 A5            [ 2] 2728         JRA     FIND1
      000E5C CD 02 03         [ 4] 2729 FIND5:  CALL     RFROM
      000E5F CD 02 4F         [ 4] 2730         CALL     DROP
      000E62 CD 02 69         [ 4] 2731         CALL     SWAPP
      000E65 CD 02 4F         [ 4] 2732         CALL     DROP
      000E68 CD 06 B7         [ 4] 2733         CALL     CELLM
      000E6B CD 02 59         [ 4] 2734         CALL     DUPP
      000E6E CD 0D 8D         [ 4] 2735         CALL     NAMET
      000E71 CC 02 69         [ 2] 2736         JP     SWAPP
                                   2737 
                                   2738 ;       NAME?   ( a -- ca na | a F )
                                   2739 ;       Search vocabularies for a string.
      000E74 0D DE                 2740         .word      LINK
                           000E76  2741 LINK = . 
      000E76 05                    2742         .byte      5
      000E77 4E 41 4D 45 3F        2743         .ascii     "NAME?"
      000E7C                       2744 NAMEQ:
      000E7C CD 03 75         [ 4] 2745         CALL   CNTXT
      000E7F CC 0D E3         [ 2] 2746         JP     FIND
                                   2747 
                                   2748 ;; Terminal response
                                   2749 
                                   2750 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2751 ;       Backup cursor by one character.
      000E82 0E 76                 2752         .word      LINK
                           000E84  2753 LINK = . 
      000E84 02                    2754         .byte      2
      000E85 5E 48                 2755         .ascii     "^H"
      000E87                       2756 BKSP:
      000E87 CD 02 22         [ 4] 2757         CALL     TOR
      000E8A CD 02 83         [ 4] 2758         CALL     OVER
      000E8D CD 02 03         [ 4] 2759         CALL     RFROM
      000E90 CD 02 69         [ 4] 2760         CALL     SWAPP
      000E93 CD 02 83         [ 4] 2761         CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E96 CD 02 CE         [ 4] 2762         CALL     XORR
      000E99 CD 01 5D         [ 4] 2763         CALL     QBRAN
      000E9C 0E B7                 2764         .word      BACK1
      000E9E CD 01 2A         [ 4] 2765         CALL     DOLIT
      000EA1 00 08                 2766         .word      BKSPP
      000EA3 CD 01 14         [ 4] 2767         CALL     EMIT
      000EA6 CD 06 E0         [ 4] 2768         CALL     ONEM
      000EA9 CD 06 FA         [ 4] 2769         CALL     BLANK
      000EAC CD 01 14         [ 4] 2770         CALL     EMIT
      000EAF CD 01 2A         [ 4] 2771         CALL     DOLIT
      000EB2 00 08                 2772         .word      BKSPP
      000EB4 CC 01 14         [ 2] 2773         JP     EMIT
      000EB7 81               [ 4] 2774 BACK1:  RET
                                   2775 
                                   2776 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2777 ;       Accept and echo key stroke
                                   2778 ;       and bump cursor.
      000EB8 0E 84                 2779         .word      LINK
                           000EBA  2780 LINK = . 
      000EBA 03                    2781         .byte      3
      000EBB 54 41 50              2782         .ascii     "TAP"
      000EBE                       2783 TAP:
      000EBE CD 02 59         [ 4] 2784         CALL     DUPP
      000EC1 CD 01 14         [ 4] 2785         CALL     EMIT
      000EC4 CD 02 83         [ 4] 2786         CALL     OVER
      000EC7 CD 01 BF         [ 4] 2787         CALL     CSTOR
      000ECA CC 06 D3         [ 2] 2788         JP     ONEP
                                   2789 
                                   2790 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2791 ;       Process a key stroke,
                                   2792 ;       CR or backspace.
      000ECD 0E BA                 2793         .word      LINK
                           000ECF  2794 LINK = . 
      000ECF 04                    2795         .byte      4
      000ED0 4B 54 41 50           2796         .ascii     "KTAP"
      000ED4                       2797 KTAP:
      000ED4 CD 02 59         [ 4] 2798         CALL     DUPP
      000ED7 CD 01 2A         [ 4] 2799         CALL     DOLIT
      000EDA 00 0D                 2800         .word      CRR
      000EDC CD 02 CE         [ 4] 2801         CALL     XORR
      000EDF CD 01 5D         [ 4] 2802         CALL     QBRAN
      000EE2 0E FA                 2803         .word      KTAP2
      000EE4 CD 01 2A         [ 4] 2804         CALL     DOLIT
      000EE7 00 08                 2805         .word      BKSPP
      000EE9 CD 02 CE         [ 4] 2806         CALL     XORR
      000EEC CD 01 5D         [ 4] 2807         CALL     QBRAN
      000EEF 0E F7                 2808         .word      KTAP1
      000EF1 CD 06 FA         [ 4] 2809         CALL     BLANK
      000EF4 CC 0E BE         [ 2] 2810         JP     TAP
      000EF7 CC 0E 87         [ 2] 2811 KTAP1:  JP     BKSP
      000EFA CD 02 4F         [ 4] 2812 KTAP2:  CALL     DROP
      000EFD CD 02 69         [ 4] 2813         CALL     SWAPP
      000F00 CD 02 4F         [ 4] 2814         CALL     DROP
      000F03 CC 02 59         [ 2] 2815         JP     DUPP
                                   2816 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2817 ;       accept  ( b u -- b u )
                                   2818 ;       Accept characters to input
                                   2819 ;       buffer. Return with actual count.
      000F06 0E CF                 2820         .word      LINK
                           000F08  2821 LINK = . 
      000F08 06                    2822         .byte      6
      000F09 41 43 43 45 50 54     2823         .ascii     "ACCEPT"
      000F0F                       2824 ACCEP:
      000F0F CD 02 83         [ 4] 2825         CALL     OVER
      000F12 CD 03 F4         [ 4] 2826         CALL     PLUS
      000F15 CD 02 83         [ 4] 2827         CALL     OVER
      000F18 CD 03 DF         [ 4] 2828 ACCP1:  CALL     DDUP
      000F1B CD 02 CE         [ 4] 2829         CALL     XORR
      000F1E CD 01 5D         [ 4] 2830         CALL     QBRAN
      000F21 0F 43                 2831         .word      ACCP4
      000F23 CD 0A ED         [ 4] 2832         CALL     KEY
      000F26 CD 02 59         [ 4] 2833         CALL     DUPP
      000F29 CD 06 FA         [ 4] 2834         CALL     BLANK
      000F2C CD 01 2A         [ 4] 2835         CALL     DOLIT
      000F2F 00 7F                 2836         .word      127
      000F31 CD 05 14         [ 4] 2837         CALL     WITHI
      000F34 CD 01 5D         [ 4] 2838         CALL     QBRAN
      000F37 0F 3E                 2839         .word      ACCP2
      000F39 CD 0E BE         [ 4] 2840         CALL     TAP
      000F3C 20 03            [ 2] 2841         JRA     ACCP3
      000F3E CD 0E D4         [ 4] 2842 ACCP2:  CALL     KTAP
      000F41 20 D5            [ 2] 2843 ACCP3:  JRA     ACCP1
      000F43 CD 02 4F         [ 4] 2844 ACCP4:  CALL     DROP
      000F46 CD 02 83         [ 4] 2845         CALL     OVER
      000F49 CC 04 52         [ 2] 2846         JP     SUBB
                                   2847 
                                   2848 ;       QUERY   ( -- )
                                   2849 ;       Accept input stream to
                                   2850 ;       terminal input buffer.
      000F4C 0F 08                 2851         .word      LINK
                                   2852         
                           000F4E  2853 LINK = . 
      000F4E 05                    2854         .byte      5
      000F4F 51 55 45 52 59        2855         .ascii     "QUERY"
      000F54                       2856 QUERY:
      000F54 CD 08 16         [ 4] 2857         CALL     TIB
      000F57 CD 01 2A         [ 4] 2858         CALL     DOLIT
      000F5A 00 50                 2859         .word      80
      000F5C CD 0F 0F         [ 4] 2860         CALL     ACCEP
      000F5F CD 03 42         [ 4] 2861         CALL     NTIB
      000F62 CD 01 9B         [ 4] 2862         CALL     STORE
      000F65 CD 02 4F         [ 4] 2863         CALL     DROP
      000F68 CD 07 07         [ 4] 2864         CALL     ZERO
      000F6B CD 03 32         [ 4] 2865         CALL     INN
      000F6E CC 01 9B         [ 2] 2866         JP     STORE
                                   2867 
                                   2868 ;       ABORT   ( -- )
                                   2869 ;       Reset data stack and
                                   2870 ;       jump to QUIT.
      000F71 0F 4E                 2871         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                           000F73  2872 LINK = . 
      000F73 05                    2873         .byte      5
      000F74 41 42 4F 52 54        2874         .ascii     "ABORT"
      000F79                       2875 ABORT:
      000F79 CD 10 70         [ 4] 2876         CALL     PRESE
      000F7C CC 10 8D         [ 2] 2877         JP     QUIT
                                   2878 
                                   2879 ;       abort"  ( f -- )
                                   2880 ;       Run time routine of ABORT".
                                   2881 ;       Abort with a message.
      000F7F 0F 73                 2882         .word      LINK
                           000F81  2883 LINK = . 
      000F81 46                    2884 	.byte      COMPO+6
      000F82 41 42 4F 52 54        2885         .ascii     "ABORT"
      000F87 22                    2886         .byte      '"'
      000F88                       2887 ABORQ:
      000F88 CD 01 5D         [ 4] 2888         CALL     QBRAN
      000F8B 0F A7                 2889         .word      ABOR2   ;text flag
      000F8D CD 0B 83         [ 4] 2890         CALL     DOSTR
      000F90 CD 0B 25         [ 4] 2891 ABOR1:  CALL     SPACE
      000F93 CD 07 DD         [ 4] 2892         CALL     COUNT
      000F96 CD 0B 4F         [ 4] 2893         CALL     TYPES
      000F99 CD 01 2A         [ 4] 2894         CALL     DOLIT
      000F9C 00 3F                 2895         .word     63 ; "?"
      000F9E CD 01 14         [ 4] 2896         CALL     EMIT
      000FA1 CD 0B 6D         [ 4] 2897         CALL     CR
      000FA4 CC 0F 79         [ 2] 2898         JP     ABORT   ;pass error string
      000FA7 CD 0B 83         [ 4] 2899 ABOR2:  CALL     DOSTR
      000FAA CC 02 4F         [ 2] 2900         JP     DROP
                                   2901 
                                   2902 ;; The text interpreter
                                   2903 
                                   2904 ;       $INTERPRET      ( a -- )
                                   2905 ;       Interpret a word. If failed,
                                   2906 ;       try to convert it to an integer.
      000FAD 0F 81                 2907         .word      LINK
                           000FAF  2908 LINK = . 
      000FAF 0A                    2909         .byte      10
      000FB0 24 49 4E 54 45 52 50  2910         .ascii     "$INTERPRET"
             52 45 54
      000FBA                       2911 INTER:
      000FBA CD 0E 7C         [ 4] 2912         CALL     NAMEQ
      000FBD CD 03 A3         [ 4] 2913         CALL     QDUP    ;?defined
      000FC0 CD 01 5D         [ 4] 2914         CALL     QBRAN
      000FC3 0F E4                 2915         .word      INTE1
      000FC5 CD 01 B2         [ 4] 2916         CALL     AT
      000FC8 CD 01 2A         [ 4] 2917         CALL     DOLIT
      000FCB 40 00                 2918 	.word       0x4000	; COMPO*256
      000FCD CD 02 A5         [ 4] 2919         CALL     ANDD    ;?compile only lexicon bits
      000FD0 CD 0F 88         [ 4] 2920         CALL     ABORQ
      000FD3 0D                    2921         .byte      13
      000FD4 20 63 6F 6D 70 69 6C  2922         .ascii     " compile only"
             65 20 6F 6E 6C 79
      000FE1 CC 01 84         [ 2] 2923         JP     EXECU
      000FE4 CD 0A 1A         [ 4] 2924 INTE1:  CALL     NUMBQ   ;convert a number
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000FE7 CD 01 5D         [ 4] 2925         CALL     QBRAN
      000FEA 0F 90                 2926         .word    ABOR1
      000FEC 81               [ 4] 2927         RET
                                   2928 
                                   2929 ;       [       ( -- )
                                   2930 ;       Start  text interpreter.
      000FED 0F AF                 2931         .word      LINK
                           000FEF  2932 LINK = . 
      000FEF 81                    2933 	.byte      IMEDD+1
      000FF0 5B                    2934         .ascii     "["
      000FF1                       2935 LBRAC:
      000FF1 CD 01 2A         [ 4] 2936         CALL     DOLIT
      000FF4 0F BA                 2937         .word      INTER
      000FF6 CD 03 53         [ 4] 2938         CALL     TEVAL
      000FF9 CC 01 9B         [ 2] 2939         JP     STORE
                                   2940 
                                   2941 ;       .OK     ( -- )
                                   2942 ;       Display 'ok' while interpreting.
      000FFC 0F EF                 2943         .word      LINK
                           000FFE  2944 LINK = . 
      000FFE 03                    2945         .byte      3
      000FFF 2E 4F 4B              2946         .ascii     ".OK"
      001002                       2947 DOTOK:
      001002 CD 01 2A         [ 4] 2948         CALL     DOLIT
      001005 0F BA                 2949         .word      INTER
      001007 CD 03 53         [ 4] 2950         CALL     TEVAL
      00100A CD 01 B2         [ 4] 2951         CALL     AT
      00100D CD 04 7A         [ 4] 2952         CALL     EQUAL
      001010 CD 01 5D         [ 4] 2953         CALL     QBRAN
      001013 10 1C                 2954         .word      DOTO1
      001015 CD 0B AC         [ 4] 2955         CALL     DOTQP
      001018 03                    2956         .byte      3
      001019 20 6F 6B              2957         .ascii     " ok"
      00101C CC 0B 6D         [ 2] 2958 DOTO1:  JP     CR
                                   2959 
                                   2960 ;       ?STACK  ( -- )
                                   2961 ;       Abort if stack underflows.
      00101F 0F FE                 2962         .word      LINK
                           001021  2963 LINK = . 
      001021 06                    2964         .byte      6
      001022 3F 53 54 41 43 4B     2965         .ascii     "?STACK"
      001028                       2966 QSTAC: 
      001028 CD 07 4A         [ 4] 2967         CALL     DEPTH
      00102B CD 02 92         [ 4] 2968         CALL     ZLESS   ;check only for underflow
      00102E CD 0F 88         [ 4] 2969         CALL     ABORQ
      001031 0B                    2970         .byte      11
      001032 20 75 6E 64 65 72 66  2971         .ascii     " underflow "
             6C 6F 77 20
      00103D 81               [ 4] 2972         RET
                                   2973 
                                   2974 ;       EVAL    ( -- )
                                   2975 ;       Interpret  input stream.
      00103E 10 21                 2976         .word      LINK
                           001040  2977 LINK = . 
      001040 04                    2978         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      001041 45 56 41 4C           2979         .ascii     "EVAL"
      001045                       2980 EVAL:
      001045 CD 0D 7F         [ 4] 2981 EVAL1:  CALL     TOKEN
      001048 CD 02 59         [ 4] 2982         CALL     DUPP
      00104B CD 01 D0         [ 4] 2983         CALL     CAT     ;?input stream empty
      00104E CD 01 5D         [ 4] 2984         CALL     QBRAN
      001051 10 61                 2985         .word    EVAL2
      001053 CD 03 53         [ 4] 2986         CALL     TEVAL
      001056 CD 08 2A         [ 4] 2987         CALL     ATEXE
      001059 CD 10 28         [ 4] 2988         CALL     QSTAC   ;evaluate input, check stack
      00105C CD 01 74         [ 4] 2989         CALL     BRAN
      00105F 10 45                 2990         .word    EVAL1
      001061 CD 02 4F         [ 4] 2991 EVAL2:  CALL     DROP
      001064 CC 10 02         [ 2] 2992         JP       DOTOK
                                   2993 
                                   2994 ;       PRESET  ( -- )
                                   2995 ;       Reset data stack pointer and
                                   2996 ;       terminal input buffer.
      001067 10 40                 2997         .word      LINK
                           001069  2998 LINK = . 
      001069 06                    2999         .byte      6
      00106A 50 52 45 53 45 54     3000         .ascii     "PRESET"
      001070                       3001 PRESE:
      001070 CD 01 2A         [ 4] 3002         CALL     DOLIT
      001073 16 F0                 3003         .word      SPP
      001075 CD 02 46         [ 4] 3004         CALL     SPSTO
      001078 CD 01 2A         [ 4] 3005         CALL     DOLIT
      00107B 17 00                 3006         .word      TIBB
      00107D CD 03 42         [ 4] 3007         CALL     NTIB
      001080 CD 06 A8         [ 4] 3008         CALL     CELLP
      001083 CC 01 9B         [ 2] 3009         JP     STORE
                                   3010 
                                   3011 ;       QUIT    ( -- )
                                   3012 ;       Reset return stack pointer
                                   3013 ;       and start text interpreter.
      001086 10 69                 3014         .word      LINK
                           001088  3015 LINK = . 
      001088 04                    3016         .byte      4
      001089 51 55 49 54           3017         .ascii     "QUIT"
      00108D                       3018 QUIT:
      00108D CD 01 2A         [ 4] 3019         CALL     DOLIT
      001090 17 FF                 3020         .word      RPP
      001092 CD 01 ED         [ 4] 3021         CALL     RPSTO   ;reset return stack pointer
      001095 CD 0F F1         [ 4] 3022 QUIT1:  CALL     LBRAC   ;start interpretation
      001098 CD 0F 54         [ 4] 3023 QUIT2:  CALL     QUERY   ;get input
      00109B CD 10 45         [ 4] 3024         CALL     EVAL
      00109E 20 F8            [ 2] 3025         JRA     QUIT2   ;continue till error
                                   3026 
                                   3027 ;; The compiler
                                   3028 
                                   3029 ;       '       ( -- ca )
                                   3030 ;       Search vocabularies for
                                   3031 ;       next word in input stream.
      0010A0 10 88                 3032         .word      LINK
                           0010A2  3033 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010A2 01                    3034         .byte      1
      0010A3 27                    3035         .ascii     "'"
      0010A4                       3036 TICK:
      0010A4 CD 0D 7F         [ 4] 3037         CALL     TOKEN
      0010A7 CD 0E 7C         [ 4] 3038         CALL     NAMEQ   ;?defined
      0010AA CD 01 5D         [ 4] 3039         CALL     QBRAN
      0010AD 0F 90                 3040         .word      ABOR1
      0010AF 81               [ 4] 3041         RET     ;yes, push code address
                                   3042 
                                   3043 ;       ALLOT   ( n -- )
                                   3044 ;       Allocate n bytes to  code dictionary.
      0010B0 10 A2                 3045         .word      LINK
                           0010B2  3046 LINK = . 
      0010B2 05                    3047         .byte      5
      0010B3 41 4C 4C 4F 54        3048         .ascii     "ALLOT"
      0010B8                       3049 ALLOT:
      0010B8 CD 03 83         [ 4] 3050         CALL     CPP
      0010BB CC 07 76         [ 2] 3051         JP     PSTOR
                                   3052 
                                   3053 ;       ,       ( w -- )
                                   3054 ;         Compile an integer into
                                   3055 ;         code dictionary.
      0010BE 10 B2                 3056         .word      LINK
                           0010C0  3057 LINK = . 
      0010C0 01                    3058         .byte      1
      0010C1 2C                    3059         .ascii     ","
      0010C2                       3060 COMMA:
      0010C2 CD 07 F4         [ 4] 3061         CALL     HERE
      0010C5 CD 02 59         [ 4] 3062         CALL     DUPP
      0010C8 CD 06 A8         [ 4] 3063         CALL     CELLP   ;cell boundary
      0010CB CD 03 83         [ 4] 3064         CALL     CPP
      0010CE CD 01 9B         [ 4] 3065         CALL     STORE
      0010D1 CC 01 9B         [ 2] 3066         JP     STORE
                                   3067 
                                   3068 ;       C,      ( c -- )
                                   3069 ;       Compile a byte into
                                   3070 ;       code dictionary.
      0010D4 10 C0                 3071        .word      LINK
                           0010D6  3072 LINK = . 
      0010D6 02                    3073         .byte      2
      0010D7 43 2C                 3074         .ascii     "C,"
      0010D9                       3075 CCOMMA:
      0010D9 CD 07 F4         [ 4] 3076         CALL     HERE
      0010DC CD 02 59         [ 4] 3077         CALL     DUPP
      0010DF CD 06 D3         [ 4] 3078         CALL     ONEP
      0010E2 CD 03 83         [ 4] 3079         CALL     CPP
      0010E5 CD 01 9B         [ 4] 3080         CALL     STORE
      0010E8 CC 01 BF         [ 2] 3081         JP     CSTOR
                                   3082 
                                   3083 ;       [COMPILE]       ( -- ; <string> )
                                   3084 ;       Compile next immediate
                                   3085 ;       word into code dictionary.
      0010EB 10 D6                 3086         .word      LINK
                           0010ED  3087 LINK = . 
      0010ED 89                    3088 	.byte      IMEDD+9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010EE 5B 43 4F 4D 50 49 4C  3089         .ascii     "[COMPILE]"
             45 5D
      0010F7                       3090 BCOMP:
      0010F7 CD 10 A4         [ 4] 3091         CALL     TICK
      0010FA CC 13 53         [ 2] 3092         JP     JSRC
                                   3093 
                                   3094 ;       COMPILE ( -- )
                                   3095 ;       Compile next jsr in
                                   3096 ;       colon list to code dictionary.
      0010FD 10 ED                 3097         .word      LINK
                           0010FF  3098 LINK = . 
      0010FF 47                    3099 	.byte      COMPO+7
      001100 43 4F 4D 50 49 4C 45  3100         .ascii     "COMPILE"
      001107                       3101 COMPI:
      001107 CD 02 03         [ 4] 3102         CALL     RFROM
      00110A CD 06 D3         [ 4] 3103         CALL     ONEP
      00110D CD 02 59         [ 4] 3104         CALL     DUPP
      001110 CD 01 B2         [ 4] 3105         CALL     AT
      001113 CD 13 53         [ 4] 3106         CALL     JSRC    ;compile subroutine
      001116 CD 06 A8         [ 4] 3107         CALL     CELLP
      001119 CC 02 22         [ 2] 3108         JP     TOR
                                   3109 
                                   3110 ;       LITERAL ( w -- )
                                   3111 ;       Compile tos to dictionary
                                   3112 ;       as an integer literal.
      00111C 10 FF                 3113         .word      LINK
                           00111E  3114 LINK = . 
      00111E 87                    3115 	.byte      IMEDD+7
      00111F 4C 49 54 45 52 41 4C  3116         .ascii     "LITERAL"
      001126                       3117 LITER:
      001126 CD 11 07         [ 4] 3118         CALL     COMPI
      001129 CD 01 2A         [ 4] 3119         CALL     DOLIT
      00112C CC 10 C2         [ 2] 3120         JP     COMMA
                                   3121 
                                   3122 ;       $,"     ( -- )
                                   3123 ;       Compile a literal string
                                   3124 ;       up to next " .
      00112F 11 1E                 3125         .word      LINK
                           001131  3126 LINK = . 
      001131 03                    3127         .byte      3
      001132 24 2C 22              3128         .byte     '$',',','"'
      001135                       3129 STRCQ:
      001135 CD 01 2A         [ 4] 3130         CALL     DOLIT
      001138 00 22                 3131         .word     34	; "
      00113A CD 0D 02         [ 4] 3132         CALL     PARSE
      00113D CD 07 F4         [ 4] 3133         CALL     HERE
      001140 CD 08 B5         [ 4] 3134         CALL     PACKS   ;string to code dictionary
      001143 CD 07 DD         [ 4] 3135         CALL     COUNT
      001146 CD 03 F4         [ 4] 3136         CALL     PLUS    ;calculate aligned end of string
      001149 CD 03 83         [ 4] 3137         CALL     CPP
      00114C CC 01 9B         [ 2] 3138         JP     STORE
                                   3139 
                                   3140 ;; Structures
                                   3141 
                                   3142 ;       FOR     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3143 ;       Start a FOR-NEXT loop
                                   3144 ;       structure in a colon definition.
      00114F 11 31                 3145         .word      LINK
                           001151  3146 LINK = . 
      001151 83                    3147 	.byte      IMEDD+3
      001152 46 4F 52              3148         .ascii     "FOR"
      001155                       3149 FOR:
      001155 CD 11 07         [ 4] 3150         CALL     COMPI
      001158 CD 02 22         [ 4] 3151         CALL     TOR
      00115B CC 07 F4         [ 2] 3152         JP     HERE
                                   3153 
                                   3154 ;       NEXT    ( a -- )
                                   3155 ;       Terminate a FOR-NEXT loop.
      00115E 11 51                 3156         .word      LINK
                           001160  3157 LINK = . 
      001160 84                    3158 	.byte      IMEDD+4
      001161 4E 45 58 54           3159         .ascii     "NEXT"
      001165                       3160 NEXT:
      001165 CD 11 07         [ 4] 3161         CALL     COMPI
      001168 CD 01 3E         [ 4] 3162         CALL     DONXT
      00116B CC 10 C2         [ 2] 3163         JP     COMMA
                                   3164 
                                   3165 ;       BEGIN   ( -- a )
                                   3166 ;       Start an infinite or
                                   3167 ;       indefinite loop structure.
      00116E 11 60                 3168         .word      LINK
                           001170  3169 LINK = . 
      001170 85                    3170 	.byte      IMEDD+5
      001171 42 45 47 49 4E        3171         .ascii     "BEGIN"
      001176                       3172 BEGIN:
      001176 CC 07 F4         [ 2] 3173         JP     HERE
                                   3174 
                                   3175 ;       UNTIL   ( a -- )
                                   3176 ;       Terminate a BEGIN-UNTIL
                                   3177 ;       indefinite loop structure.
      001179 11 70                 3178         .word      LINK
                           00117B  3179 LINK = . 
      00117B 85                    3180 	.byte      IMEDD+5
      00117C 55 4E 54 49 4C        3181         .ascii     "UNTIL"
      001181                       3182 UNTIL:
      001181 CD 11 07         [ 4] 3183         CALL     COMPI
      001184 CD 01 5D         [ 4] 3184         CALL     QBRAN
      001187 CC 10 C2         [ 2] 3185         JP     COMMA
                                   3186 
                                   3187 ;       AGAIN   ( a -- )
                                   3188 ;       Terminate a BEGIN-AGAIN
                                   3189 ;       infinite loop structure.
      00118A 11 7B                 3190         .word      LINK
                           00118C  3191 LINK = . 
      00118C 85                    3192 	.byte      IMEDD+5
      00118D 41 47 41 49 4E        3193         .ascii     "AGAIN"
      001192                       3194 AGAIN:
      001192 CD 11 07         [ 4] 3195         CALL     COMPI
      001195 CD 01 74         [ 4] 3196         CALL     BRAN
      001198 CC 10 C2         [ 2] 3197         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3198 
                                   3199 ;       IF      ( -- A )
                                   3200 ;       Begin a conditional branch.
      00119B 11 8C                 3201         .word      LINK
                           00119D  3202 LINK = . 
      00119D 82                    3203 	.byte      IMEDD+2
      00119E 49 46                 3204         .ascii     "IF"
      0011A0                       3205 IFF:
      0011A0 CD 11 07         [ 4] 3206         CALL     COMPI
      0011A3 CD 01 5D         [ 4] 3207         CALL     QBRAN
      0011A6 CD 07 F4         [ 4] 3208         CALL     HERE
      0011A9 CD 07 07         [ 4] 3209         CALL     ZERO
      0011AC CC 10 C2         [ 2] 3210         JP     COMMA
                                   3211 
                                   3212 ;       THEN        ( A -- )
                                   3213 ;       Terminate a conditional branch structure.
      0011AF 11 9D                 3214         .word      LINK
                           0011B1  3215 LINK = . 
      0011B1 84                    3216 	.byte      IMEDD+4
      0011B2 54 48 45 4E           3217         .ascii     "THEN"
      0011B6                       3218 THENN:
      0011B6 CD 07 F4         [ 4] 3219         CALL     HERE
      0011B9 CD 02 69         [ 4] 3220         CALL     SWAPP
      0011BC CC 01 9B         [ 2] 3221         JP     STORE
                                   3222 
                                   3223 ;       ELSE        ( A -- A )
                                   3224 ;       Start the false clause in an IF-ELSE-THEN structure.
      0011BF 11 B1                 3225         .word      LINK
                           0011C1  3226 LINK = . 
      0011C1 84                    3227 	.byte      IMEDD+4
      0011C2 45 4C 53 45           3228         .ascii     "ELSE"
      0011C6                       3229 ELSEE:
      0011C6 CD 11 07         [ 4] 3230         CALL     COMPI
      0011C9 CD 01 74         [ 4] 3231         CALL     BRAN
      0011CC CD 07 F4         [ 4] 3232         CALL     HERE
      0011CF CD 07 07         [ 4] 3233         CALL     ZERO
      0011D2 CD 10 C2         [ 4] 3234         CALL     COMMA
      0011D5 CD 02 69         [ 4] 3235         CALL     SWAPP
      0011D8 CD 07 F4         [ 4] 3236         CALL     HERE
      0011DB CD 02 69         [ 4] 3237         CALL     SWAPP
      0011DE CC 01 9B         [ 2] 3238         JP     STORE
                                   3239 
                                   3240 ;       AHEAD       ( -- A )
                                   3241 ;       Compile a forward branch instruction.
      0011E1 11 C1                 3242         .word      LINK
                           0011E3  3243 LINK = . 
      0011E3 85                    3244 	.byte      IMEDD+5
      0011E4 41 48 45 41 44        3245         .ascii     "AHEAD"
      0011E9                       3246 AHEAD:
      0011E9 CD 11 07         [ 4] 3247         CALL     COMPI
      0011EC CD 01 74         [ 4] 3248         CALL     BRAN
      0011EF CD 07 F4         [ 4] 3249         CALL     HERE
      0011F2 CD 07 07         [ 4] 3250         CALL     ZERO
      0011F5 CC 10 C2         [ 2] 3251         JP     COMMA
                                   3252 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3253 ;       WHILE       ( a -- A a )
                                   3254 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0011F8 11 E3                 3255         .word      LINK
                           0011FA  3256 LINK = . 
      0011FA 85                    3257 	.byte      IMEDD+5
      0011FB 57 48 49 4C 45        3258         .ascii     "WHILE"
      001200                       3259 WHILE:
      001200 CD 11 07         [ 4] 3260         CALL     COMPI
      001203 CD 01 5D         [ 4] 3261         CALL     QBRAN
      001206 CD 07 F4         [ 4] 3262         CALL     HERE
      001209 CD 07 07         [ 4] 3263         CALL     ZERO
      00120C CD 10 C2         [ 4] 3264         CALL     COMMA
      00120F CC 02 69         [ 2] 3265         JP     SWAPP
                                   3266 
                                   3267 ;       REPEAT      ( A a -- )
                                   3268 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001212 11 FA                 3269         .word      LINK
                           001214  3270 LINK = . 
      001214 86                    3271         .byte      IMEDD+6
      001215 52 45 50 45 41 54     3272         .ascii     "REPEAT"
      00121B                       3273 REPEA:
      00121B CD 11 07         [ 4] 3274         CALL     COMPI
      00121E CD 01 74         [ 4] 3275         CALL     BRAN
      001221 CD 10 C2         [ 4] 3276         CALL     COMMA
      001224 CD 07 F4         [ 4] 3277         CALL     HERE
      001227 CD 02 69         [ 4] 3278         CALL     SWAPP
      00122A CC 01 9B         [ 2] 3279         JP     STORE
                                   3280 
                                   3281 ;       AFT         ( a -- a A )
                                   3282 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00122D 12 14                 3283         .word      LINK
                           00122F  3284 LINK = . 
      00122F 83                    3285 	.byte      IMEDD+3
      001230 41 46 54              3286         .ascii     "AFT"
      001233                       3287 AFT:
      001233 CD 02 4F         [ 4] 3288         CALL     DROP
      001236 CD 11 E9         [ 4] 3289         CALL     AHEAD
      001239 CD 07 F4         [ 4] 3290         CALL     HERE
      00123C CC 02 69         [ 2] 3291         JP     SWAPP
                                   3292 
                                   3293 ;       ABORT"      ( -- ; <string> )
                                   3294 ;       Conditional abort with an error message.
      00123F 12 2F                 3295         .word      LINK
                           001241  3296 LINK = . 
      001241 86                    3297 	.byte      IMEDD+6
      001242 41 42 4F 52 54        3298         .ascii     "ABORT"
      001247 22                    3299         .byte      '"'
      001248                       3300 ABRTQ:
      001248 CD 11 07         [ 4] 3301         CALL     COMPI
      00124B CD 0F 88         [ 4] 3302         CALL     ABORQ
      00124E CC 11 35         [ 2] 3303         JP     STRCQ
                                   3304 
                                   3305 ;       $"     ( -- ; <string> )
                                   3306 ;       Compile an inline string literal.
      001251 12 41                 3307         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                           001253  3308 LINK = . 
      001253 82                    3309 	.byte      IMEDD+2
      001254 24 22                 3310         .byte     '$','"'
      001256                       3311 STRQ:
      001256 CD 11 07         [ 4] 3312         CALL     COMPI
      001259 CD 0B A2         [ 4] 3313         CALL     STRQP
      00125C CC 11 35         [ 2] 3314         JP     STRCQ
                                   3315 
                                   3316 ;       ."          ( -- ; <string> )
                                   3317 ;       Compile an inline string literal to be typed out at run time.
      00125F 12 53                 3318         .word      LINK
                           001261  3319 LINK = . 
      001261 82                    3320 	.byte      IMEDD+2
      001262 2E 22                 3321         .byte     '.','"'
      001264                       3322 DOTQ:
      001264 CD 11 07         [ 4] 3323         CALL     COMPI
      001267 CD 0B AC         [ 4] 3324         CALL     DOTQP
      00126A CC 11 35         [ 2] 3325         JP     STRCQ
                                   3326 
                                   3327 ;; Name compiler
                                   3328 
                                   3329 ;       ?UNIQUE ( a -- a )
                                   3330 ;       Display a warning message
                                   3331 ;       if word already exists.
      00126D 12 61                 3332         .word      LINK
                           00126F  3333 LINK = . 
      00126F 07                    3334         .byte      7
      001270 3F 55 4E 49 51 55 45  3335         .ascii     "?UNIQUE"
      001277                       3336 UNIQU:
      001277 CD 02 59         [ 4] 3337         CALL     DUPP
      00127A CD 0E 7C         [ 4] 3338         CALL     NAMEQ   ;?name exists
      00127D CD 01 5D         [ 4] 3339         CALL     QBRAN
      001280 12 96                 3340         .word      UNIQ1
      001282 CD 0B AC         [ 4] 3341         CALL     DOTQP   ;redef are OK
      001285 07                    3342         .byte       7
      001286 20 72 65 44 65 66 20  3343         .ascii     " reDef "       
      00128D CD 02 83         [ 4] 3344         CALL     OVER
      001290 CD 07 DD         [ 4] 3345         CALL     COUNT
      001293 CD 0B 4F         [ 4] 3346         CALL     TYPES   ;just in case
      001296 CC 02 4F         [ 2] 3347 UNIQ1:  JP     DROP
                                   3348 
                                   3349 ;       $,n     ( na -- )
                                   3350 ;       Build a new dictionary name
                                   3351 ;       using string at na.
      001299 12 6F                 3352         .word      LINK
                           00129B  3353 LINK = . 
      00129B 03                    3354         .byte      3
      00129C 24 2C 6E              3355         .ascii     "$,n"
      00129F                       3356 SNAME:
      00129F CD 02 59         [ 4] 3357         CALL     DUPP
      0012A2 CD 01 D0         [ 4] 3358         CALL     CAT     ;?null input
      0012A5 CD 01 5D         [ 4] 3359         CALL     QBRAN
      0012A8 12 D5                 3360         .word      PNAM1
      0012AA CD 12 77         [ 4] 3361         CALL     UNIQU   ;?redefinition
      0012AD CD 02 59         [ 4] 3362         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0012B0 CD 07 DD         [ 4] 3363         CALL     COUNT
      0012B3 CD 03 F4         [ 4] 3364         CALL     PLUS
      0012B6 CD 03 83         [ 4] 3365         CALL     CPP
      0012B9 CD 01 9B         [ 4] 3366         CALL     STORE
      0012BC CD 02 59         [ 4] 3367         CALL     DUPP
      0012BF CD 03 93         [ 4] 3368         CALL     LAST
      0012C2 CD 01 9B         [ 4] 3369         CALL     STORE   ;save na for vocabulary link
      0012C5 CD 06 B7         [ 4] 3370         CALL     CELLM   ;link address
      0012C8 CD 03 75         [ 4] 3371         CALL     CNTXT
      0012CB CD 01 B2         [ 4] 3372         CALL     AT
      0012CE CD 02 69         [ 4] 3373         CALL     SWAPP
      0012D1 CD 01 9B         [ 4] 3374         CALL     STORE
      0012D4 81               [ 4] 3375         RET     ;save code pointer
      0012D5 CD 0B A2         [ 4] 3376 PNAM1:  CALL     STRQP
      0012D8 05                    3377         .byte      5
      0012D9 20 6E 61 6D 65        3378         .ascii     " name" ;null input
      0012DE CC 0F 90         [ 2] 3379         JP     ABOR1
                                   3380 
                                   3381 ;; FORTH compiler
                                   3382 
                                   3383 ;       $COMPILE        ( a -- )
                                   3384 ;       Compile next word to
                                   3385 ;       dictionary as a token or literal.
      0012E1 12 9B                 3386         .word      LINK
                           0012E3  3387 LINK = . 
      0012E3 08                    3388         .byte      8
      0012E4 24 43 4F 4D 50 49 4C  3389         .ascii     "$COMPILE"
             45
      0012EC                       3390 SCOMP:
      0012EC CD 0E 7C         [ 4] 3391         CALL     NAMEQ
      0012EF CD 03 A3         [ 4] 3392         CALL     QDUP    ;?defined
      0012F2 CD 01 5D         [ 4] 3393         CALL     QBRAN
      0012F5 13 0D                 3394         .word      SCOM2
      0012F7 CD 01 B2         [ 4] 3395         CALL     AT
      0012FA CD 01 2A         [ 4] 3396         CALL     DOLIT
      0012FD 80 00                 3397         .word     0x8000	;  IMEDD*256
      0012FF CD 02 A5         [ 4] 3398         CALL     ANDD    ;?immediate
      001302 CD 01 5D         [ 4] 3399         CALL     QBRAN
      001305 13 0A                 3400         .word      SCOM1
      001307 CC 01 84         [ 2] 3401         JP     EXECU
      00130A CC 13 53         [ 2] 3402 SCOM1:  JP     JSRC
      00130D CD 0A 1A         [ 4] 3403 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001310 CD 01 5D         [ 4] 3404         CALL     QBRAN
      001313 0F 90                 3405         .word      ABOR1
      001315 CC 11 26         [ 2] 3406         JP     LITER
                                   3407 
                                   3408 ;       OVERT   ( -- )
                                   3409 ;       Link a new word into vocabulary.
      001318 12 E3                 3410         .word      LINK
                           00131A  3411 LINK = . 
      00131A 05                    3412         .byte      5
      00131B 4F 56 45 52 54        3413         .ascii     "OVERT"
      001320                       3414 OVERT:
      001320 CD 03 93         [ 4] 3415         CALL     LAST
      001323 CD 01 B2         [ 4] 3416         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001326 CD 03 75         [ 4] 3417         CALL     CNTXT
      001329 CC 01 9B         [ 2] 3418         JP     STORE
                                   3419 
                                   3420 ;       ;       ( -- )
                                   3421 ;       Terminate a colon definition.
      00132C 13 1A                 3422         .word      LINK
                           00132E  3423 LINK = . 
      00132E C1                    3424 	.byte      IMEDD+COMPO+1
      00132F 3B                    3425         .ascii     ";"
      001330                       3426 SEMIS:
      001330 CD 11 07         [ 4] 3427         CALL     COMPI
      001333 CD 01 94         [ 4] 3428         CALL     EXIT
      001336 CD 0F F1         [ 4] 3429         CALL     LBRAC
      001339 CC 13 20         [ 2] 3430         JP     OVERT
                                   3431 
                                   3432 ;       ]       ( -- )
                                   3433 ;       Start compiling words in
                                   3434 ;       input stream.
      00133C 13 2E                 3435         .word      LINK
                           00133E  3436 LINK = . 
      00133E 01                    3437         .byte      1
      00133F 5D                    3438         .ascii     "]"
      001340                       3439 RBRAC:
      001340 CD 01 2A         [ 4] 3440         CALL     DOLIT
      001343 12 EC                 3441         .word      SCOMP
      001345 CD 03 53         [ 4] 3442         CALL     TEVAL
      001348 CC 01 9B         [ 2] 3443         JP     STORE
                                   3444 
                                   3445 ;       CALL,    ( ca -- )
                                   3446 ;       Compile a subroutine call.
      00134B 13 3E                 3447         .word      LINK
                           00134D  3448 LINK = . 
      00134D 04                    3449         .byte      4
      00134E 43 41 4C 4C 2C        3450         .ascii     "CALL,"
      001353                       3451 JSRC:
      001353 CD 01 2A         [ 4] 3452         CALL     DOLIT
      001356 00 CD                 3453         .word     CALLL     ;CALL
      001358 CD 10 D9         [ 4] 3454         CALL     CCOMMA
      00135B CC 10 C2         [ 2] 3455         JP     COMMA
                                   3456 
                                   3457 ;       :       ( -- ; <string> )
                                   3458 ;       Start a new colon definition
                                   3459 ;       using next word as its name.
      00135E 13 4D                 3460         .word      LINK
                           001360  3461 LINK = . 
      001360 01                    3462         .byte      1
      001361 3A                    3463         .ascii     ":"
      001362                       3464 COLON:
      001362 CD 0D 7F         [ 4] 3465         CALL     TOKEN
      001365 CD 12 9F         [ 4] 3466         CALL     SNAME
      001368 CC 13 40         [ 2] 3467         JP     RBRAC
                                   3468 
                                   3469 ;       IMMEDIATE       ( -- )
                                   3470 ;       Make last compiled word
                                   3471 ;       an immediate word.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00136B 13 60                 3472         .word      LINK
                           00136D  3473 LINK = . 
      00136D 09                    3474         .byte      9
      00136E 49 4D 4D 45 44 49 41  3475         .ascii     "IMMEDIATE"
             54 45
      001377                       3476 IMMED:
      001377 CD 01 2A         [ 4] 3477         CALL     DOLIT
      00137A 80 00                 3478         .word     0x8000	;  IMEDD*256
      00137C CD 03 93         [ 4] 3479         CALL     LAST
      00137F CD 01 B2         [ 4] 3480         CALL     AT
      001382 CD 01 B2         [ 4] 3481         CALL     AT
      001385 CD 02 B9         [ 4] 3482         CALL     ORR
      001388 CD 03 93         [ 4] 3483         CALL     LAST
      00138B CD 01 B2         [ 4] 3484         CALL     AT
      00138E CC 01 9B         [ 2] 3485         JP     STORE
                                   3486 
                                   3487 ;; Defining words
                                   3488 
                                   3489 ;       CREATE  ( -- ; <string> )
                                   3490 ;       Compile a new array
                                   3491 ;       without allocating space.
      001391 13 6D                 3492         .word      LINK
                           001393  3493 LINK = . 
      001393 06                    3494         .byte      6
      001394 43 52 45 41 54 45     3495         .ascii     "CREATE"
      00139A                       3496 CREAT:
      00139A CD 0D 7F         [ 4] 3497         CALL     TOKEN
      00139D CD 12 9F         [ 4] 3498         CALL     SNAME
      0013A0 CD 13 20         [ 4] 3499         CALL     OVERT
      0013A3 CD 11 07         [ 4] 3500         CALL     COMPI
      0013A6 CD 03 06         [ 4] 3501         CALL     DOVAR
      0013A9 81               [ 4] 3502         RET
                                   3503 
                                   3504 ;       VARIABLE        ( -- ; <string> )
                                   3505 ;       Compile a new variable
                                   3506 ;       initialized to 0.
      0013AA 13 93                 3507         .word      LINK
                           0013AC  3508 LINK = . 
      0013AC 08                    3509         .byte      8
      0013AD 56 41 52 49 41 42 4C  3510         .ascii     "VARIABLE"
             45
      0013B5                       3511 VARIA:
      0013B5 CD 13 9A         [ 4] 3512         CALL     CREAT
      0013B8 CD 07 07         [ 4] 3513         CALL     ZERO
      0013BB CC 10 C2         [ 2] 3514         JP     COMMA
                                   3515 
                           000001  3516 .if PICATOUT_MOD
                                   3517 ;       CONSTANT  ( n -- ; <string> )
                                   3518 ;       Compile a new constant 
                                   3519 ;       n CONSTANT name 
      0013BE 13 AC                 3520         .word LINK 
                           0013C0  3521         LINK=. 
      0013C0 08                    3522         .byte 8 
      0013C1 43 4F 4E 53 54 41 4E  3523         .ascii "CONSTANT" 
             54
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0013C9                       3524 constant:          
      0013C9 CD 0D 7F         [ 4] 3525         CALL TOKEN
      0013CC CD 12 9F         [ 4] 3526         CALL SNAME 
      0013CF CD 13 20         [ 4] 3527         CALL OVERT 
      0013D2 CD 11 07         [ 4] 3528         CALL COMPI 
      0013D5 CD 13 E6         [ 4] 3529         CALL DOCONST
      0013D8 CD 10 C2         [ 4] 3530         CALL COMMA 
      0013DB 81               [ 4] 3531         RET          
                                   3532 
                                   3533 ; CONSTANT runtime semantic 
                                   3534 ; doCONST  ( -- n )
      0013DC 13 C0                 3535         .word LINK 
                           0013DE  3536         LINK=.
      0013DE 07                    3537         .byte 7
      0013DF 44 4F 43 4F 4E 53 54  3538         .ascii "DOCONST"
      0013E6                       3539 DOCONST:
      0013E6 1D 00 02         [ 2] 3540         subw x,#CELLL
      0013E9 90 85            [ 2] 3541         popw y 
      0013EB 90 FE            [ 2] 3542         ldw y,(y) 
      0013ED FF               [ 2] 3543         ldw (x),y 
      0013EE 81               [ 4] 3544         ret 
                                   3545 .endif ;PICATOUT_MOD
                                   3546 
                                   3547 
                                   3548 ;; Tools
                                   3549 
                                   3550 ;       _TYPE   ( b u -- )
                                   3551 ;       Display a string. Filter
                                   3552 ;       non-printing characters.
      0013EF 13 DE                 3553         .word      LINK
                           0013F1  3554 LINK = . 
      0013F1 05                    3555         .byte      5
      0013F2 5F 54 59 50 45        3556         .ascii     "_TYPE"
      0013F7                       3557 UTYPE:
      0013F7 CD 02 22         [ 4] 3558         CALL     TOR     ;start count down loop
      0013FA 20 0F            [ 2] 3559         JRA     UTYP2   ;skip first pass
      0013FC CD 02 59         [ 4] 3560 UTYP1:  CALL     DUPP
      0013FF CD 01 D0         [ 4] 3561         CALL     CAT
      001402 CD 07 31         [ 4] 3562         CALL     TCHAR
      001405 CD 01 14         [ 4] 3563         CALL     EMIT    ;display only printable
      001408 CD 06 D3         [ 4] 3564         CALL     ONEP    ;increment address
      00140B CD 01 3E         [ 4] 3565 UTYP2:  CALL     DONXT
      00140E 13 FC                 3566         .word      UTYP1   ;loop till done
      001410 CC 02 4F         [ 2] 3567         JP     DROP
                                   3568 
                                   3569 ;       dm+     ( a u -- a )
                                   3570 ;       Dump u bytes from ,
                                   3571 ;       leaving a+u on  stack.
      001413 13 F1                 3572         .word      LINK
                           001415  3573 LINK = . 
      001415 03                    3574         .byte      3
      001416 64 6D 2B              3575         .ascii     "dm+"
      001419                       3576 DUMPP:
      001419 CD 02 83         [ 4] 3577         CALL     OVER
      00141C CD 01 2A         [ 4] 3578         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00141F 00 04                 3579         .word      4
      001421 CD 0B D5         [ 4] 3580         CALL     UDOTR   ;display address
      001424 CD 0B 25         [ 4] 3581         CALL     SPACE
      001427 CD 02 22         [ 4] 3582         CALL     TOR     ;start count down loop
      00142A 20 11            [ 2] 3583         JRA     PDUM2   ;skip first pass
      00142C CD 02 59         [ 4] 3584 PDUM1:  CALL     DUPP
      00142F CD 01 D0         [ 4] 3585         CALL     CAT
      001432 CD 01 2A         [ 4] 3586         CALL     DOLIT
      001435 00 03                 3587         .word      3
      001437 CD 0B D5         [ 4] 3588         CALL     UDOTR   ;display numeric data
      00143A CD 06 D3         [ 4] 3589         CALL     ONEP    ;increment address
      00143D CD 01 3E         [ 4] 3590 PDUM2:  CALL     DONXT
      001440 14 2C                 3591         .word      PDUM1   ;loop till done
      001442 81               [ 4] 3592         RET
                                   3593 
                                   3594 ;       DUMP    ( a u -- )
                                   3595 ;       Dump u bytes from a,
                                   3596 ;       in a formatted manner.
      001443 14 15                 3597         .word      LINK
                           001445  3598 LINK = . 
      001445 04                    3599         .byte      4
      001446 44 55 4D 50           3600         .ascii     "DUMP"
      00144A                       3601 DUMP:
      00144A CD 03 14         [ 4] 3602         CALL     BASE
      00144D CD 01 B2         [ 4] 3603         CALL     AT
      001450 CD 02 22         [ 4] 3604         CALL     TOR
      001453 CD 09 AD         [ 4] 3605         CALL     HEX     ;save radix, set hex
      001456 CD 01 2A         [ 4] 3606         CALL     DOLIT
      001459 00 10                 3607         .word      16
      00145B CD 05 F9         [ 4] 3608         CALL     SLASH   ;change count to lines
      00145E CD 02 22         [ 4] 3609         CALL     TOR     ;start count down loop
      001461 CD 0B 6D         [ 4] 3610 DUMP1:  CALL     CR
      001464 CD 01 2A         [ 4] 3611         CALL     DOLIT
      001467 00 10                 3612         .word      16
      001469 CD 03 DF         [ 4] 3613         CALL     DDUP
      00146C CD 14 19         [ 4] 3614         CALL     DUMPP   ;display numeric
      00146F CD 03 B4         [ 4] 3615         CALL     ROT
      001472 CD 03 B4         [ 4] 3616         CALL     ROT
      001475 CD 0B 25         [ 4] 3617         CALL     SPACE
      001478 CD 0B 25         [ 4] 3618         CALL     SPACE
      00147B CD 13 F7         [ 4] 3619         CALL     UTYPE   ;display printable characters
      00147E CD 01 3E         [ 4] 3620         CALL     DONXT
      001481 14 61                 3621         .word      DUMP1   ;loop till done
      001483 CD 02 4F         [ 4] 3622 DUMP3:  CALL     DROP
      001486 CD 02 03         [ 4] 3623         CALL     RFROM
      001489 CD 03 14         [ 4] 3624         CALL     BASE
      00148C CC 01 9B         [ 2] 3625         JP     STORE   ;restore radix
                                   3626 
                                   3627 ;       .S      ( ... -- ... )
                                   3628 ;        Display  contents of stack.
      00148F 14 45                 3629         .word      LINK
                           001491  3630 LINK = . 
      001491 02                    3631         .byte      2
      001492 2E 53                 3632         .ascii     ".S"
      001494                       3633 DOTS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001494 CD 0B 6D         [ 4] 3634         CALL     CR
      001497 CD 07 4A         [ 4] 3635         CALL     DEPTH   ;stack depth
      00149A CD 02 22         [ 4] 3636         CALL     TOR     ;start count down loop
      00149D 20 0C            [ 2] 3637         JRA     DOTS2   ;skip first pass
      00149F CD 02 16         [ 4] 3638 DOTS1:  CALL     RAT
      0014A2 CD 06 D3         [ 4] 3639         CALL ONEP
      0014A5 CD 07 61         [ 4] 3640 	CALL     PICK
      0014A8 CD 0C 08         [ 4] 3641         CALL     DOT     ;index stack, display contents
      0014AB CD 01 3E         [ 4] 3642 DOTS2:  CALL     DONXT
      0014AE 14 9F                 3643         .word      DOTS1   ;loop till done
      0014B0 CD 0B AC         [ 4] 3644         CALL     DOTQP
      0014B3 05                    3645         .byte      5
      0014B4 20 3C 73 70 20        3646         .ascii     " <sp "
      0014B9 81               [ 4] 3647         RET
                                   3648 
                                   3649 ;       >NAME   ( ca -- na | F )
                                   3650 ;       Convert code address
                                   3651 ;       to a name address.
      0014BA 14 91                 3652         .word      LINK
                           0014BC  3653 LINK = . 
      0014BC 05                    3654         .byte      5
      0014BD 3E 4E 41 4D 45        3655         .ascii     ">NAME"
      0014C2                       3656 TNAME:
      0014C2 CD 03 75         [ 4] 3657         CALL     CNTXT   ;vocabulary link
      0014C5 CD 01 B2         [ 4] 3658 TNAM2:  CALL     AT
      0014C8 CD 02 59         [ 4] 3659         CALL     DUPP    ;?last word in a vocabulary
      0014CB CD 01 5D         [ 4] 3660         CALL     QBRAN
      0014CE 14 E9                 3661         .word      TNAM4
      0014D0 CD 03 DF         [ 4] 3662         CALL     DDUP
      0014D3 CD 0D 8D         [ 4] 3663         CALL     NAMET
      0014D6 CD 02 CE         [ 4] 3664         CALL     XORR    ;compare
      0014D9 CD 01 5D         [ 4] 3665         CALL     QBRAN
      0014DC 14 E3                 3666         .word      TNAM3
      0014DE CD 06 B7         [ 4] 3667         CALL     CELLM   ;continue with next word
      0014E1 20 E2            [ 2] 3668         JRA     TNAM2
      0014E3 CD 02 69         [ 4] 3669 TNAM3:  CALL     SWAPP
      0014E6 CC 02 4F         [ 2] 3670         JP     DROP
      0014E9 CD 03 D4         [ 4] 3671 TNAM4:  CALL     DDROP
      0014EC CC 07 07         [ 2] 3672         JP     ZERO
                                   3673 
                                   3674 ;       .ID     ( na -- )
                                   3675 ;        Display  name at address.
      0014EF 14 BC                 3676         .word      LINK
                           0014F1  3677 LINK = . 
      0014F1 03                    3678         .byte      3
      0014F2 2E 49 44              3679         .ascii     ".ID"
      0014F5                       3680 DOTID:
      0014F5 CD 03 A3         [ 4] 3681         CALL     QDUP    ;if zero no name
      0014F8 CD 01 5D         [ 4] 3682         CALL     QBRAN
      0014FB 15 0B                 3683         .word      DOTI1
      0014FD CD 07 DD         [ 4] 3684         CALL     COUNT
      001500 CD 01 2A         [ 4] 3685         CALL     DOLIT
      001503 00 1F                 3686         .word      0x1F
      001505 CD 02 A5         [ 4] 3687         CALL     ANDD    ;mask lexicon bits
      001508 CC 13 F7         [ 2] 3688         JP     UTYPE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00150B CD 0B AC         [ 4] 3689 DOTI1:  CALL     DOTQP
      00150E 09                    3690         .byte      9
      00150F 20 6E 6F 4E 61 6D 65  3691         .ascii     " noName"
      001516 81               [ 4] 3692         RET
                                   3693 
                           000000  3694 WANT_SEE=0 
                           000000  3695 .if WANT_SEE 
                                   3696 ;       SEE     ( -- ; <string> )
                                   3697 ;       A simple decompiler.
                                   3698 ;       Updated for byte machines.
                                   3699         .word      LINK
                                   3700 LINK = . 
                                   3701         .byte      3
                                   3702         .ascii     "SEE"
                                   3703 SEE:
                                   3704         CALL     TICK    ;starting address
                                   3705         CALL     CR
                                   3706         CALL     ONEM
                                   3707 SEE1:   CALL     ONEP
                                   3708         CALL     DUPP
                                   3709         CALL     AT
                                   3710         CALL     DUPP    ;?does it contain a zero
                                   3711         CALL     QBRAN
                                   3712         .word    SEE2
                                   3713         CALL     TNAME   ;?is it a name
                                   3714 SEE2:   CALL     QDUP    ;name address or zero
                                   3715         CALL     QBRAN
                                   3716         .word    SEE3
                                   3717         CALL     SPACE
                                   3718         CALL     DOTID   ;display name
                                   3719         CALL     ONEP
                                   3720         JRA      SEE4
                                   3721 SEE3:   CALL     DUPP
                                   3722         CALL     CAT
                                   3723         CALL     UDOT    ;display number
                                   3724 SEE4:   CALL     NUFQ    ;user control
                                   3725         CALL     QBRAN
                                   3726         .word    SEE1
                                   3727         JP     DROP
                                   3728 .endif ; WANT_SEE 
                                   3729 
                                   3730 ;       WORDS   ( -- )
                                   3731 ;       Display names in vocabulary.
      001517 14 F1                 3732         .word      LINK
                           001519  3733 LINK = . 
      001519 05                    3734         .byte      5
      00151A 57 4F 52 44 53        3735         .ascii     "WORDS"
      00151F                       3736 WORDS:
      00151F CD 0B 6D         [ 4] 3737         CALL     CR
      001522 CD 03 75         [ 4] 3738         CALL     CNTXT   ;only in context
      001525 CD 01 B2         [ 4] 3739 WORS1:  CALL     AT
      001528 CD 03 A3         [ 4] 3740         CALL     QDUP    ;?at end of list
      00152B CD 01 5D         [ 4] 3741         CALL     QBRAN
      00152E 15 44                 3742         .word      WORS2
      001530 CD 02 59         [ 4] 3743         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001533 CD 0B 25         [ 4] 3744         CALL     SPACE
      001536 CD 14 F5         [ 4] 3745         CALL     DOTID   ;display a name
      001539 CD 06 B7         [ 4] 3746         CALL     CELLM
      00153C CD 01 74         [ 4] 3747         CALL     BRAN
      00153F 15 25                 3748         .word      WORS1
      001541 CD 02 4F         [ 4] 3749         CALL     DROP
      001544 81               [ 4] 3750 WORS2:  RET
                                   3751 
                                   3752         
                                   3753 ;; Hardware reset
                                   3754 
                                   3755 ;       hi      ( -- )
                                   3756 ;       Display sign-on message.
      001545 15 19                 3757         .word      LINK
                           001547  3758 LINK = . 
      001547 02                    3759         .byte      2
      001548 68 69                 3760         .ascii     "hi"
      00154A                       3761 HI:
      00154A CD 0B 6D         [ 4] 3762         CALL     CR
      00154D CD 0B AC         [ 4] 3763         CALL     DOTQP   ;initialize I/O
      001550 0F                    3764         .byte      15
      001551 73 74 6D 38 65 46 6F  3765         .ascii     "stm8eForth v"
             72 74 68 20 76
      00155D 32                    3766 	.byte      VER+'0'
      00155E 2E                    3767         .byte      '.' 
      00155F 31                    3768 	.byte      EXT+'0' ;version
      001560 CC 0B 6D         [ 2] 3769         JP     CR
                                   3770 
                           000000  3771 WANT_DEBUG=0
                           000000  3772 .if WANT_DEBUG 
                                   3773 ;       DEBUG      ( -- )
                                   3774 ;       Display sign-on message.
                                   3775 ;        .word      LINK
                                   3776 LINK = . 
                                   3777         .byte      5
                                   3778         .ascii     "DEBUG"
                                   3779 DEBUG:
                                   3780 	CALL DOLIT
                                   3781 	.word 0x65
                                   3782 	CALL EMIT
                                   3783 	CALL DOLIT
                                   3784 	.word 0
                                   3785  	CALL ZLESS 
                                   3786 	CALL DOLIT
                                   3787 	.word 0xFFFE
                                   3788 	CALL ZLESS 
                                   3789 	CALL UPLUS 
                                   3790  	CALL DROP 
                                   3791 	CALL DOLIT
                                   3792 	.word 3
                                   3793 	CALL UPLUS 
                                   3794 	CALL UPLUS 
                                   3795  	CALL DROP
                                   3796 	CALL DOLIT
                                   3797 	.word 0x43
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3798 	CALL UPLUS 
                                   3799  	CALL DROP
                                   3800 	CALL EMIT
                                   3801 	CALL DOLIT
                                   3802 	.word 0x4F
                                   3803 	CALL DOLIT
                                   3804 	.word 0x6F
                                   3805  	CALL XORR
                                   3806 	CALL DOLIT
                                   3807 	.word 0xF0
                                   3808  	CALL ANDD
                                   3809 	CALL DOLIT
                                   3810 	.word 0x4F
                                   3811  	CALL ORR
                                   3812 	CALL EMIT
                                   3813 	CALL DOLIT
                                   3814 	.word 8
                                   3815 	CALL DOLIT
                                   3816 	.word 6
                                   3817  	CALL SWAPP
                                   3818 	CALL OVER
                                   3819 	CALL XORR
                                   3820 	CALL DOLIT
                                   3821 	.word 3
                                   3822 	CALL ANDD 
                                   3823 	CALL ANDD
                                   3824 	CALL DOLIT
                                   3825 	.word 0x70
                                   3826 	CALL UPLUS 
                                   3827 	CALL DROP
                                   3828 	CALL EMIT
                                   3829 	CALL DOLIT
                                   3830 	.word 0
                                   3831 	CALL QBRAN
                                   3832 	.word DEBUG1
                                   3833 	CALL DOLIT
                                   3834 	.word 0x3F
                                   3835 DEBUG1:
                                   3836 	CALL DOLIT
                                   3837 	.word 0xFFFF
                                   3838 	CALL QBRAN
                                   3839 	.word DEBUG2
                                   3840 	CALL DOLIT
                                   3841 	.word 0x74
                                   3842 	CALL BRAN
                                   3843 	.word DEBUG3
                                   3844 DEBUG2:
                                   3845 	CALL DOLIT
                                   3846 	.word 0x21
                                   3847 DEBUG3:
                                   3848 	CALL EMIT
                                   3849 	CALL DOLIT
                                   3850 	.word 0x68
                                   3851 	CALL DOLIT
                                   3852 	.word 0x80
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3853 	CALL STORE
                                   3854 	CALL DOLIT
                                   3855 	.word 0x80
                                   3856 	CALL AT
                                   3857 	CALL EMIT
                                   3858 	CALL DOLIT
                                   3859 	.word 0x4D
                                   3860 	CALL TOR
                                   3861 	CALL RAT
                                   3862 	CALL RFROM
                                   3863 	CALL ANDD
                                   3864 	CALL EMIT
                                   3865 	CALL DOLIT
                                   3866 	.word 0x61
                                   3867 	CALL DOLIT
                                   3868 	.word 0xA
                                   3869 	CALL TOR
                                   3870 DEBUG4:
                                   3871 	CALL DOLIT
                                   3872 	.word 1
                                   3873 	CALL UPLUS 
                                   3874 	CALL DROP
                                   3875 	CALL DONXT
                                   3876 	.word DEBUG4
                                   3877 	CALL EMIT
                                   3878 	CALL DOLIT
                                   3879 	.word 0x656D
                                   3880 	CALL DOLIT
                                   3881 	.word 0x100
                                   3882 	CALL UMSTA
                                   3883 	CALL SWAPP
                                   3884 	CALL DOLIT
                                   3885 	.word 0x100
                                   3886 	CALL UMSTA
                                   3887 	CALL SWAPP 
                                   3888 	CALL DROP
                                   3889 	CALL EMIT
                                   3890 	CALL EMIT
                                   3891 	CALL DOLIT
                                   3892 	.word 0x2043
                                   3893 	CALL DOLIT
                                   3894 	.word 0
                                   3895 	CALL DOLIT
                                   3896 	.word 0x100
                                   3897 	CALL UMMOD
                                   3898 	CALL EMIT
                                   3899 	CALL EMIT
                                   3900 	;JP ORIG
                                   3901 	RET
                                   3902 .endif ; WANT_DEBUG 
                                   3903 
                                   3904 
                                   3905 ;       'BOOT   ( -- a )
                                   3906 ;       The application startup vector.
      001563 15 47                 3907         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                           001565  3908 LINK = . 
      001565 05                    3909         .byte      5
      001566 27 42 4F 4F 54        3910         .ascii     "'BOOT"
      00156B                       3911 TBOOT:
      00156B CD 03 06         [ 4] 3912         CALL     DOVAR
      00156E 15 4A                 3913         .word      HI       ;application to boot
                                   3914 
                                   3915 ;       COLD    ( -- )
                                   3916 ;       The hilevel cold start s=ence.
      001570 15 65                 3917         .word      LINK
                           001572  3918 LINK = . 
      001572 04                    3919         .byte      4
      001573 43 4F 4C 44           3920         .ascii     "COLD"
      001577                       3921 COLD:
                           000000  3922 .if WANT_DEBUG
                                   3923         CALL DEBUG
                                   3924 .endif 
      001577 CD 01 2A         [ 4] 3925 COLD1:  CALL     DOLIT
      00157A 00 27                 3926         .word      UZERO
      00157C CD 01 2A         [ 4] 3927 	CALL     DOLIT
      00157F 00 06                 3928         .word      UPP
      001581 CD 01 2A         [ 4] 3929         CALL     DOLIT
      001584 00 14                 3930 	.word      UEND-UZERO
      001586 CD 08 41         [ 4] 3931         CALL     CMOVE   ;initialize user area
                                   3932 
                           000001  3933 .if  PICATOUT_MOD
                                   3934 ; update LAST with APP_LAST 
                                   3935 ; if APP_LAST > LAST else do the opposite
      001589 90 CE 40 00      [ 2] 3936         ldw y,APP_LAST 
      00158D 90 B3 18         [ 2] 3937         cpw y,ULAST 
      001590 22 0E            [ 1] 3938         jrugt 1$ 
                                   3939 ; save LAST at APP_LAST  
      001592 CD 03 93         [ 4] 3940         call LAST 
      001595 CD 01 B2         [ 4] 3941         call AT  
      001598 CD 15 F6         [ 4] 3942         call eeprom 
      00159B CD 17 33         [ 4] 3943         call ee_store 
      00159E 20 03            [ 2] 3944         jra 2$
      0015A0                       3945 1$: ; update LAST with APP_LAST 
      0015A0 90 BF 18         [ 2] 3946         ldw ULAST,y
      0015A3                       3947 2$:  
                                   3948 ; update APP_HERE if < app_space 
      0015A3 90 CE 40 04      [ 2] 3949         ldw y,APP_HERE 
      0015A7 90 A3 19 80      [ 2] 3950         cpw y,#app_space 
      0015AB 24 15            [ 1] 3951         jruge 3$ 
      0015AD 1D 00 06         [ 2] 3952         subw x,#6 
      0015B0 90 AE 19 80      [ 2] 3953         ldw y,#app_space 
      0015B4 EF 04            [ 2] 3954         ldw (4,x),y 
      0015B6 90 AE 40 04      [ 2] 3955         ldw y,#APP_HERE 
      0015BA EF 02            [ 2] 3956         ldw (2,x),y
      0015BC 90 5F            [ 1] 3957         clrw y 
      0015BE FF               [ 2] 3958         ldw (x),y
      0015BF CD 17 33         [ 4] 3959         call ee_store 
      0015C2                       3960 3$:
                                   3961 .endif ; PICATOUT_MOD
      0015C2 CD 10 70         [ 4] 3962         CALL     PRESE   ;initialize data stack and TIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015C5 CD 15 6B         [ 4] 3963         CALL     TBOOT
      0015C8 CD 08 2A         [ 4] 3964         CALL     ATEXE   ;application boot
      0015CB CD 13 20         [ 4] 3965         CALL     OVERT
      0015CE CC 10 8D         [ 2] 3966         JP     QUIT    ;start interpretation
                                   3967 
                           000001  3968 .if PICATOUT_MOD
                                   3969         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   3970         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ;pointer to far address 
                           000002    26     farptr=2
                           000003    27     ptr16=3
                           000004    28     ptr8=4
                                     29 
                                     30 ;--------------------------------
                                     31 ; initialize farptr 
                                     32 ; FP!  ( ud -- )
                                     33 ;---------------------------------
      0015D1 15 72                   34     .word LINK 
                           0015D3    35     LINK=.
      0015D3 03                      36     .byte 3 
      0015D4 46 50 21                37     .ascii "FP!"
      0015D7                         38 fptr_store:
      0015D7 90 93            [ 1]   39     ldw y,x
      0015D9 90 FE            [ 2]   40     ldw y,(y)
      0015DB 90 9F            [ 1]   41     ld a,yl 
      0015DD B7 02            [ 1]   42     ld farptr,a 
      0015DF 1C 00 02         [ 2]   43     addw x,#CELLL 
      0015E2 90 93            [ 1]   44     ldw y,x 
      0015E4 90 FE            [ 2]   45     ldw y,(y)
      0015E6 90 BF 03         [ 2]   46     ldw ptr16,y
      0015E9 1C 00 02         [ 2]   47     addw x,#CELLL 
      0015EC 81               [ 4]   48     ret 
                                     49 
                                     50 ;-----------------------------------
                                     51 ; return EEPROM base address 
                                     52 ; as a double 
                                     53 ;  EEPROM  ( -- ud )
                                     54 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0015ED 15 D3                   55     .word LINK 
                           0015EF    56 LINK=.
      0015EF 06                      57     .byte 6 
      0015F0 45 45 50 52 4F 4D       58     .ascii "EEPROM"
      0015F6                         59 eeprom: 
      0015F6 90 AE 40 00      [ 2]   60     ldw y,#EEPROM_BASE
      0015FA 1D 00 04         [ 2]   61     subw x,#2*CELLL 
      0015FD EF 02            [ 2]   62     ldw (2,x),y 
      0015FF 90 5F            [ 1]   63     clrw y 
      001601 FF               [ 2]   64     ldw (x),y 
      001602 81               [ 4]   65     ret
                                     66 
                                     67 ;----------------------------------
                                     68 ; fetch integer at address over 65535
                                     69 ;  F@   ( ud -- n )
                                     70 ;----------------------------------
      001603 15 EF                   71     .word LINK 
                           001605    72 LINK=.
      001605 02                      73     .byte 2
      001606 46 40                   74     .ascii "F@"
      001608                         75 farat:
      001608 CD 15 D7         [ 4]   76     call fptr_store
      00160B 92 BC 00 02      [ 5]   77     ldf a,[farptr]
      00160F 1D 00 02         [ 2]   78     subw x,#CELLL 
      001612 F7               [ 1]   79     ld (x),a 
      001613 90 AE 00 01      [ 2]   80     ldw y,#1
      001617 91 AF 00 02      [ 1]   81     ldf a,([farptr],y)
      00161B E7 01            [ 1]   82     ld (1,x),a
      00161D 81               [ 4]   83     ret 
                                     84 
                                     85 ;-------------------------------------
                                     86 ; fetch C at address over 65535 
                                     87 ; FC@ ( ud -- c)
                                     88 ;-------------------------------------
      00161E 16 05                   89     .word LINK
                           001620    90     LINK=.
      001620 03                      91     .byte 3 
      001621 46 43 40                92     .ascii "FC@" 
      001624                         93 farcat:
      001624 CD 15 D7         [ 4]   94     call fptr_store 
      001627 92 BC 00 02      [ 5]   95     ldf a,[farptr]
      00162B 1D 00 02         [ 2]   96     subw x,#CELLL 
      00162E E7 01            [ 1]   97     ld (1,x),a 
      001630 7F               [ 1]   98     clr (x)
      001631 81               [ 4]   99     ret 
                                    100     
                                    101 ;----------------------------------
                                    102 ; unlock EEPROM/OPT for writing/erasing
                                    103 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    104 ;  UNLKEE   ( -- )
                                    105 ;----------------------------------
      001632 16 20                  106     .word LINK 
                           001634   107 LINK=.
      001634 06                     108     .byte 6 
      001635 55 4E 4C 4B 45 45      109     .ascii "UNLKEE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      00163B                        110 unlock_eeprom:
      00163B 35 00 50 5B      [ 1]  111 	mov FLASH_CR2,#0 
      00163F 35 FF 50 5C      [ 1]  112 	mov FLASH_NCR2,#0xFF 
      001643 35 AE 50 64      [ 1]  113 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001647 35 56 50 64      [ 1]  114     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      00164B 72 07 50 5F FB   [ 2]  115 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001650 81               [ 4]  116 	ret
                                    117 
                                    118 ;----------------------------------
                                    119 ; unlock FLASH for writing/erasing
                                    120 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    121 ; UNLKFL  ( -- )
                                    122 ;----------------------------------
      001651 16 34                  123     .word LINK 
                           001653   124 LINK=. 
      001653 06                     125     .byte 6 
      001654 55 4E 4C 4B 46 4C      126     .ascii "UNLKFL"    
      00165A                        127 unlock_flash:
      00165A 35 00 50 5B      [ 1]  128 	mov FLASH_CR2,#0 
      00165E 35 FF 50 5C      [ 1]  129 	mov FLASH_NCR2,#0xFF 
      001662 35 56 50 62      [ 1]  130 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001666 35 AE 50 62      [ 1]  131 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      00166A 72 03 50 5F FB   [ 2]  132 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      00166F 81               [ 4]  133 	ret
                                    134 
                                    135 ;-----------------------------
                                    136 ; unlock FLASH or EEPROM 
                                    137 ; according to farptr address 
                                    138 ;  UNLOCK ( -- )
                                    139 ;-----------------------------
      001670 16 53                  140 	.word LINK 
                           001672   141 	LINK=.
      001672 06                     142 	.byte 6
      001673 55 4E 4C 4F 43 4B      143 	.ascii "UNLOCK"
      001679                        144 unlock:
                                    145 ; put addr[15:0] in Y, for bounds check.
      001679 90 BE 03         [ 2]  146 	ldw y,ptr16   ; Y=addr15:0
                                    147 ; check addr[23:16], if <> 0 then it is extened flash memory
      00167C 3D 02            [ 1]  148 	tnz farptr 
      00167E 26 16            [ 1]  149 	jrne 4$
      001680 90 A3 80 00      [ 2]  150     cpw y,#FLASH_BASE
      001684 24 10            [ 1]  151     jruge 4$
      001686 90 A3 40 00      [ 2]  152 	cpw y,#EEPROM_BASE  
      00168A 25 0D            [ 1]  153     jrult 9$
      00168C 90 A3 48 7F      [ 2]  154 	cpw y,#OPTION_END 
      001690 22 07            [ 1]  155 	jrugt 9$
      001692 CD 16 3B         [ 4]  156 	call unlock_eeprom
      001695 81               [ 4]  157 	ret 
      001696 CD 16 5A         [ 4]  158 4$: call unlock_flash
      001699 81               [ 4]  159 9$: ret 
                                    160 
                                    161 ;-------------------------
                                    162 ; lock write access to 
                                    163 ; FLASH and EEPROM 
                                    164 ; LOCK ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                    165 ;-------------------------
      00169A 16 72                  166 	.word LINK 
                           00169C   167 	LINK=.
      00169C 04                     168 	.byte 4 
      00169D 4C 4F 43 4B            169 	.ascii "LOCK" 
      0016A1                        170 lock: 
      0016A1 72 13 50 5F      [ 1]  171 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0016A5 72 17 50 5F      [ 1]  172 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0016A9 81               [ 4]  173 	ret 
                                    174 
                                    175 ;-------------------------
                                    176 ; increment farptr 
                                    177 ; INC-FPTR ( -- )
                                    178 ;-------------------------
      0016AA 16 9C                  179 	.word LINK 
                           0016AC   180 	LINK=. 
      0016AC 08                     181 	.byte 8 
      0016AD 49 4E 43 2D 46 50 54   182 	.ascii "INC-FPTR" 
             52
      0016B5                        183 inc_fptr:
      0016B5 3C 04            [ 1]  184 	inc ptr8 
      0016B7 26 08            [ 1]  185 	jrne 1$
      0016B9 90 BE 02         [ 2]  186 	ldw y,farptr 
      0016BC 90 5C            [ 2]  187 	incw y 
      0016BE 90 BF 02         [ 2]  188 	ldw farptr,y 
      0016C1 81               [ 4]  189 1$: ret 
                                    190 
                                    191 
                                    192 ;----------------------------
                                    193 ; write a byte at address pointed 
                                    194 ; by farptr and increment farptr.
                                    195 ; Expect pointer already initialized 
                                    196 ; and memory unlocked 
                                    197 ; WR-BYTE ( c -- )
                                    198 ;----------------------------
                                    199 
      0016C2 16 AC                  200 	.word LINK 
                           0016C4   201 	LINK=. 
      0016C4 07                     202 	.byte 7 
      0016C5 57 52 2D 42 59 54 45   203 	.ascii "WR-BYTE" 
                                    204 
      0016CC                        205 write_byte:
      0016CC 90 93            [ 1]  206 	ldw y,x 
      0016CE 90 FE            [ 2]  207 	ldw y,(y)
      0016D0 1C 00 02         [ 2]  208 	addw x,#CELLL 
      0016D3 90 9F            [ 1]  209 	ld a,yl
      0016D5 92 BD 00 02      [ 4]  210 	ldf [farptr],a
      0016D9 72 05 50 5F FB   [ 2]  211 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0016DE 20 D5            [ 2]  212 	jra inc_fptr 
                                    213 
                                    214 
                                    215 
                                    216 ;---------------------------------------
                                    217 ; write a byte to FLASH or EEPROM/OPTION  
                                    218 ; EEC!  (c ud -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    219 ;---------------------------------------
      0016E0 16 C4                  220     .word LINK 
                           0016E2   221 	LINK=.
      0016E2 04                     222     .byte 4 
      0016E3 45 45 43 21            223     .ascii "EEC!"
                                    224 	; local variables 
                           000001   225 	BTW = 1   ; byte to write offset on stack
                           000002   226     OPT = 2 
                           000002   227 	VSIZE = 2
      0016E7                        228 ee_cstore:
      0016E7 52 02            [ 2]  229 	sub sp,#VSIZE
      0016E9 CD 15 D7         [ 4]  230     call fptr_store
      0016EC E6 01            [ 1]  231 	ld a,(1,x)
      0016EE 43               [ 1]  232 	cpl a 
      0016EF 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      0016F1 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
      0016F3 CD 16 79         [ 4]  235 	call unlock 
                                    236 	; check if option
      0016F6 3D 02            [ 1]  237 	tnz farptr 
      0016F8 26 19            [ 1]  238 	jrne 2$
      0016FA 90 BE 03         [ 2]  239 	ldw y,ptr16 
      0016FD 90 A3 48 00      [ 2]  240 	cpw y,#OPTION_BASE
      001701 2B 10            [ 1]  241 	jrmi 2$
      001703 90 A3 48 80      [ 2]  242 	cpw y,#OPTION_END+1
      001707 2A 0A            [ 1]  243 	jrpl 2$
      001709 03 02            [ 1]  244 	cpl (OPT,sp)
                                    245 	; OPTION WRITE require this unlock 
      00170B 72 1E 50 5B      [ 1]  246     bset FLASH_CR2,#FLASH_CR2_OPT
      00170F 72 1F 50 5C      [ 1]  247     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001713                        248 2$: 
      001713 CD 16 CC         [ 4]  249 	call write_byte 	
      001716 0D 02            [ 1]  250 	tnz (OPT,sp)
      001718 27 0D            [ 1]  251 	jreq 3$ 
      00171A 7B 01            [ 1]  252     ld a,(BTW,sp)
      00171C 90 5F            [ 1]  253     clrw y
      00171E 90 97            [ 1]  254 	ld yl,a 
      001720 1D 00 02         [ 2]  255 	subw x,#CELLL 
      001723 FF               [ 2]  256 	ldw (x),y 
      001724 CD 16 CC         [ 4]  257 	call write_byte
      001727                        258 3$: 
      001727 CD 16 A1         [ 4]  259 	call lock 
      00172A 5B 02            [ 2]  260 	addw sp,#VSIZE 
      00172C 81               [ 4]  261     ret
                                    262 
                                    263 ;------------------------------
                                    264 ; write integer in FLASH|EEPROM
                                    265 ; EE! ( n ud -- )
                                    266 ;------------------------------
      00172D 16 E2                  267 	.word LINK 
                           00172F   268 	LINK=.
      00172F 03                     269 	.byte 3 
      001730 45 45 21               270 	.ascii "EE!"
      001733                        271 ee_store:
      001733 CD 15 D7         [ 4]  272 	call fptr_store 
      001736 CD 16 79         [ 4]  273 	call unlock 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001739 90 93            [ 1]  274 	ldw y,x 
      00173B 90 FE            [ 2]  275 	ldw y,(y)
      00173D 90 89            [ 2]  276 	pushw y 
      00173F 90 5E            [ 1]  277 	swapw y 
      001741 FF               [ 2]  278 	ldw (x),y 
      001742 CD 16 CC         [ 4]  279 	call write_byte 
      001745 90 85            [ 2]  280 	popw y 
      001747 1D 00 02         [ 2]  281 	subw x,#CELLL
      00174A FF               [ 2]  282 	ldw (x),y 
      00174B CD 16 CC         [ 4]  283 	call write_byte
      00174E 72 13 50 5F      [ 1]  284 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001752 81               [ 4]  285 	ret 
                                    286 
                                    287 ;----------------------------
                                    288 ; Erase flash memory row 
                                    289 ; stm8s208 as 128 bytes rows
                                    290 ; ROW-ERASE ( ud -- )
                                    291 ;----------------------------
      001753 17 2F                  292 	.word LINK 
                           001755   293 	LINK=. 
      001755 09                     294 	.byte 9 
      001756 52 4F 57 2D 45 52 41   295 	.ascii "ROW-ERASE" 
             53 45
      00175F                        296 row_erase:
      00175F CD 15 D7         [ 4]  297 	call fptr_store
                                    298 ;code must be execute from RAM 
                                    299 ;copy routine to PAD 
      001762 1D 00 02         [ 2]  300 	subw x,#CELLL 
      001765 90 AE 17 AC      [ 2]  301 	ldw y,#row_erase_proc
      001769 FF               [ 2]  302 	ldw (x),y 
      00176A CD 08 05         [ 4]  303 	call PAD 
      00176D 90 AE 17 D3      [ 2]  304 	ldw y,#row_erase_proc_end 
      001771 72 A2 17 AC      [ 2]  305 	subw y,#row_erase_proc
      001775 1D 00 02         [ 2]  306 	subw x,#CELLL 
      001778 FF               [ 2]  307 	ldw (x),y 
      001779 CD 08 41         [ 4]  308 	call CMOVE 
      00177C                        309 block_erase:
      00177C 90 BE 03         [ 2]  310 	ldw y,farptr+1
      00177F 90 A3 19 80      [ 2]  311 	cpw y,#app_space 
      001783 2A 13            [ 1]  312 	jrpl erase_flash 
                                    313 ; erase eeprom block
      001785 90 A3 40 00      [ 2]  314 	cpw y,#EEPROM_BASE 
      001789 24 01            [ 1]  315 	jruge 1$
      00178B 81               [ 4]  316 	ret ; bad address 
      00178C 90 A3 47 FF      [ 2]  317 1$: cpw y,#EEPROM_END 
      001790 23 01            [ 2]  318 	jrule 2$ 
      001792 81               [ 4]  319 	ret ; bad address 
      001793                        320 2$:	
      001793 CD 16 3B         [ 4]  321 	call unlock_eeprom 
      001796 20 03            [ 2]  322 	jra proceed_erase
                                    323 ; erase flash block:
      001798                        324 erase_flash:
      001798 CD 16 5A         [ 4]  325 	call unlock_flash 
      00179B                        326 proceed_erase:
      00179B CD 08 05         [ 4]  327 	call PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00179E 90 93            [ 1]  328 	ldw y,x
      0017A0 90 FE            [ 2]  329 	ldw y,(y)
      0017A2 1C 00 02         [ 2]  330 	addw x,#CELLL  
      0017A5 90 FD            [ 4]  331 	call (y) 
      0017A7 72 17 50 5F      [ 1]  332 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0017AB 81               [ 4]  333 	ret 
                                    334 
                                    335 ; this routine is to be copied to PAD 
      0017AC                        336 row_erase_proc:
      0017AC 35 20 50 5B      [ 1]  337 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0017B0 35 DF 50 5C      [ 1]  338 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0017B4 4F               [ 1]  339 	clr a 
      0017B5 90 5F            [ 1]  340 	clrw y 
      0017B7 91 A7 00 02      [ 1]  341 	ldf ([farptr],y),a
      0017BB 90 5C            [ 2]  342     incw y
      0017BD 91 A7 00 02      [ 1]  343 	ldf ([farptr],y),a
      0017C1 90 5C            [ 2]  344     incw y
      0017C3 91 A7 00 02      [ 1]  345 	ldf ([farptr],y),a
      0017C7 90 5C            [ 2]  346     incw y
      0017C9 91 A7 00 02      [ 1]  347 	ldf ([farptr],y),a
      0017CD 72 05 50 5F FB   [ 2]  348 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      0017D2 81               [ 4]  349 	ret
      0017D3                        350 row_erase_proc_end:
                                    351 
                                    352 
                                    353 ;-----------------------------------
                                    354 ; block programming must be 
                                    355 ; executed from RAM 
                                    356 ; initial contidions: 
                                    357 ; 		memory unlocked
                                    358 ;       farptr initialized 
                                    359 ; input: 
                                    360 ;    x   buffer address 
                                    361 ;-----------------------------------
                           000001   362 	BCNT=1 
      0017D3                        363 copy_buffer:
      0017D3 4B 80            [ 1]  364 	push #BLOCK_SIZE  
                                    365 ;enable block programming 
      0017D5 72 10 50 5B      [ 1]  366 	bset FLASH_CR2,#FLASH_CR2_PRG 
      0017D9 72 11 50 5C      [ 1]  367 	bres FLASH_NCR2,#FLASH_CR2_PRG
      0017DD 90 5F            [ 1]  368 	clrw y
      0017DF F6               [ 1]  369 1$:	ld a,(x)
      0017E0 91 A7 00 02      [ 1]  370 	ldf ([farptr],y),a
      0017E4 5C               [ 2]  371 	incw x 
      0017E5 90 5C            [ 2]  372 	incw y 
      0017E7 0A 01            [ 1]  373 	dec (BCNT,sp)
      0017E9 26 F4            [ 1]  374 	jrne 1$
                                    375 ; wait EOP bit 
      0017EB 72 05 50 5F FB   [ 2]  376 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      0017F0 84               [ 1]  377 	pop a ; remove BCNT from stack 
      0017F1 81               [ 4]  378 	ret 
      0017F2                        379 copy_buffer_end:
                                    380 
                                    381 ;-------------------------
                                    382 ; move program_row to RAM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    383 ; in TIB 
                                    384 ;------------------------
      0017F2                        385 copy_prog_to_ram:
      0017F2 1D 00 06         [ 2]  386 	subw x,#6
      0017F5 90 AE 17 D3      [ 2]  387 	ldw y,#copy_buffer 
      0017F9 EF 04            [ 2]  388 	ldw (4,x),y 
      0017FB 90 AE 17 00      [ 2]  389 	ldw y,#TIBBASE
      0017FF EF 02            [ 2]  390 	ldw (2,x),y 
      001801 90 AE 17 F2      [ 2]  391 	ldw y,#copy_buffer_end 
      001805 72 A2 17 D3      [ 2]  392 	subw y,#copy_buffer  
      001809 FF               [ 2]  393 	ldw (x),y 
      00180A CD 08 41         [ 4]  394 	call CMOVE 
      00180D 81               [ 4]  395 	ret 
                                    396 
                                    397 
                                    398 ;-----------------------------
                                    399 ; write a row in FLASH/EEPROM 
                                    400 ; WR-ROW ( a ud -- )
                                    401 ; a -> address 128 byte buffer to write 
                                    402 ; ud ->  row address in FLASH|EEPROM 
                                    403 ;-----------------------------
      00180E 17 55                  404 	.word LINK 
                           001810   405 	LINK=.
      001810 06                     406 	.byte 6 
      001811 57 52 2D 52 4F 57      407 	.ascii "WR-ROW"
      001817                        408 write_row:
      001817 CD 15 D7         [ 4]  409 	call fptr_store
                                    410 ; align to FLASH block 
      00181A A6 80            [ 1]  411 	ld a,#0x80 
      00181C B4 04            [ 1]  412 	and a,ptr8 
      00181E B7 04            [ 1]  413 	ld ptr8,a  
      001820 CD 17 F2         [ 4]  414 	call copy_prog_to_ram
      001823 CD 16 79         [ 4]  415 	call unlock
      001826 90 93            [ 1]  416 	ldw y,x 
      001828 90 FE            [ 2]  417 	ldw y,(y)
      00182A 1C 00 02         [ 2]  418 	addw x,#CELLL 
      00182D 89               [ 2]  419 	pushw x 
      00182E 93               [ 1]  420 	ldw x,y ; buffer address in x 
      00182F CD 17 00         [ 4]  421 	call TIBBASE
      001832 CD 16 A1         [ 4]  422 	call lock
      001835 85               [ 2]  423 	popw x 
      001836 81               [ 4]  424 	ret 
                                    425 
                                    426 ;--------------------------------------
                                    427 ; reset system to its original state 
                                    428 ; before any user modification
                                    429 ; PRISTINE ( -- )
                                    430 ;-------------------------------------
      001837 18 10                  431 	.word LINK  
                           001839   432 	LINK=.
      001839 08                     433 	.byte 8 
      00183A 50 52 49 53 54 49 4E   434 	.ascii "PRISTINE"
             45
      001842                        435 pristine:
                                    436 ;;; erase EEPROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001842 CD 15 F6         [ 4]  437 	call eeprom 
      001845 CD 03 DF         [ 4]  438 1$:	call DDUP 
      001848 CD 17 5F         [ 4]  439 	call row_erase
      00184B 90 93            [ 1]  440 	ldw y,x 
      00184D 90 EE 02         [ 2]  441 	ldw y,(2,y)
      001850 72 A9 00 80      [ 2]  442 	addw y,#BLOCK_SIZE
      001854 EF 02            [ 2]  443 	ldw (2,x),y
      001856 90 A3 48 00      [ 2]  444 	cpw y,#OPTION_BASE 
      00185A 25 E9            [ 1]  445 	jrult 1$
                                    446 ;;; reset OPTION to default values
      00185C 90 AE 48 01      [ 2]  447 	ldw y,#0x4801 ; OPT1 
      001860 EF 02            [ 2]  448 2$:	ldw (2,x),y 
      001862 CD 03 DF         [ 4]  449 	call DDUP   ; ( 0x480n 0 0x480n 0 -- )
      001865 90 AE 00 FF      [ 2]  450 	ldw y,#255 
      001869 1D 00 02         [ 2]  451 	subw x,#CELLL 
      00186C FF               [ 2]  452 	ldw (x),y   ; ( 0x480n 0 0x480n 0 0x00ff -- ) 
      00186D CD 03 B4         [ 4]  453 	call ROT 
      001870 CD 03 B4         [ 4]  454 	call ROT 
      001873 CD 17 33         [ 4]  455 	call ee_store ; ( 0x480n 0 0x00ff 0x480n 0 -- 0x480n 0 )
      001876 90 93            [ 1]  456 	ldw y,x 
      001878 90 EE 02         [ 2]  457 	ldw y,(2,y)
      00187B 72 A9 00 02      [ 2]  458 	addw y,#2  ; next OPTION 
      00187F 90 A3 48 0F      [ 2]  459 	cpw y,#0x480F 
      001883 25 DB            [ 1]  460 	jrult 2$
                                    461 ;;; erase first row of app_space 	
                                    462 ; ( 0x480e 0 -- )	
      001885 90 AE 19 80      [ 2]  463 	ldw y,#app_space
      001889 EF 02            [ 2]  464 	ldw (2,x),y  ; ( app_space 0 -- )
      00188B CD 17 5F         [ 4]  465 	call row_erase 
                                    466 ; reset interrupt vectors 
      00188E 1D 00 02         [ 2]  467 	subw x,#CELLL 
      001891 90 5F            [ 1]  468 	clrw y  
      001893 FF               [ 2]  469 4$:	ldw (x),y  ; ( n -- ) int# 
      001894 CD 02 59         [ 4]  470 	call DUPP  
      001897 CD 18 B4         [ 4]  471 	call reset_vector
      00189A 90 93            [ 1]  472 	ldw y,x 
      00189C 90 FE            [ 2]  473 	ldw y,(y)
      00189E 90 5C            [ 2]  474 	incw y   ; next vector 
      0018A0 90 A3 00 19      [ 2]  475 	cpw y,#25 
      0018A4 25 ED            [ 1]  476 	jrult 4$
      0018A6 CC 00 00         [ 2]  477 	jp NonHandledInterrupt ; reset MCU
                                    478 
                                    479 ;------------------------------
                                    480 ; reset an interrupt vector 
                                    481 ; to its initial value 
                                    482 ; i.e. NonHandledInterrupt
                                    483 ; RST-IVEC ( n -- )
                                    484 ;-----------------------------
      0018A9 18 39                  485 	.word LINK 
                           0018AB   486 	LINK=. 
      0018AB 08                     487 	.byte 8 
      0018AC 52 53 54 2D 49 56 45   488 	.ascii "RST-IVEC"
             43
      0018B4                        489 reset_vector:
      0018B4 90 93            [ 1]  490 	ldw y,x
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0018B6 1C 00 02         [ 2]  491 	addw x,#CELLL 
      0018B9 90 FE            [ 2]  492 	ldw y,(y)
      0018BB 90 A3 00 17      [ 2]  493 	cpw y,#23 
      0018BF 27 3A            [ 1]  494 	jreq 9$
      0018C1 90 A3 00 18      [ 2]  495 	cpw y,#24 ; last vector for stm8s208 
      0018C5 22 34            [ 1]  496 	jrugt 9$  
      0018C7 90 58            [ 2]  497 	sllw y 
      0018C9 90 58            [ 2]  498 	sllw y 
      0018CB 72 A9 80 08      [ 2]  499 	addw y,#0x8008 ; irq0 address 
      0018CF 90 BF 1C         [ 2]  500 	ldw YTEMP,y
      0018D2 1D 00 06         [ 2]  501 	subw x,#3*CELLL 
      0018D5 EF 02            [ 2]  502 	ldw (2,x),y 
      0018D7 90 5F            [ 1]  503 	clrw y
      0018D9 FF               [ 2]  504 	ldw (x),y 
      0018DA A6 82            [ 1]  505 	ld a,#0x82 
      0018DC 90 95            [ 1]  506 	ld yh,a
      0018DE EF 04            [ 2]  507 	ldw (4,x),y
      0018E0 CD 17 33         [ 4]  508 	call ee_store
      0018E3 1D 00 06         [ 2]  509 	subw x,#3*CELLL
      0018E6 90 5F            [ 1]  510 	clrw y 
      0018E8 FF               [ 2]  511 	ldw (x),y 
      0018E9 90 AE 00 00      [ 2]  512 	ldw y,#NonHandledInterrupt
      0018ED EF 04            [ 2]  513 	ldw (4,x),y 
      0018EF 90 BE 1C         [ 2]  514 	ldw y,YTEMP  
      0018F2 72 A9 00 02      [ 2]  515 	addw y,#2
      0018F6 EF 02            [ 2]  516 	ldw (2,x),y 
      0018F8 CD 17 33         [ 4]  517 	call ee_store
      0018FB 81               [ 4]  518 9$:	ret 
                                    519 
                                    520 
                                    521 	
                                    522 ;------------------------------
                                    523 ; set interrupt vector 
                                    524 ; SET-IVEC ( ud n -- )
                                    525 ;  ud Handler address
                                    526 ;  n  vector # 0 .. 29 
                                    527 ;-----------------------------
      0018FC 18 AB                  528 	.word LINK
                           0018FE   529 	LINK=.
      0018FE 08                     530 	.byte 8 
      0018FF 53 45 54 2D 49 56 45   531 	.ascii "SET-IVEC" 
             43
      001907                        532 set_vector:
      001907 90 93            [ 1]  533     ldw y,x 
      001909 1C 00 02         [ 2]  534 	addw x,#CELLL 
      00190C 90 FE            [ 2]  535 	ldw y,(y) ; vector #
      00190E 90 A3 00 18      [ 2]  536 	cpw y,#24 ; last vector for stm8s208  
      001912 23 04            [ 2]  537 	jrule 2$
      001914 1C 00 04         [ 2]  538 	addw x,#2*CELLL 
      001917 81               [ 4]  539 	ret
      001918 90 58            [ 2]  540 2$:	sllw y 
      00191A 90 58            [ 2]  541 	sllw y 
      00191C 72 A9 80 08      [ 2]  542 	addw y,#0X8008 ; IRQ0 vector address 
      001920 90 BF 1C         [ 2]  543 	ldw YTEMP,y ; vector address 
      001923 A6 82            [ 1]  544 	ld a,#0x82 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001925 90 95            [ 1]  545 	ld yh,a 
      001927 E6 01            [ 1]  546 	ld a,(1,x) ; isr address bits 23..16 
      001929 90 97            [ 1]  547 	ld yl,a 
                                    548 ;  write 0x82 + most significant byte of int address	
      00192B 1D 00 06         [ 2]  549 	subw x,#3*CELLL 
      00192E EF 04            [ 2]  550 	ldw (4,x),y 
      001930 90 BE 1C         [ 2]  551 	ldw y,YTEMP
      001933 EF 02            [ 2]  552 	ldw (2,x),y ; vector address 
      001935 90 5F            [ 1]  553 	clrw y 
      001937 FF               [ 2]  554 	ldw (x),y   ; as a double 
      001938 CD 17 33         [ 4]  555 	call ee_store 
      00193B 90 93            [ 1]  556 	ldw y,x 
      00193D 90 EE 02         [ 2]  557 	ldw y,(2,y) ; bits 15..0 int vector 
      001940 1D 00 06         [ 2]  558 	subw x,#3*CELLL 
      001943 EF 04            [ 2]  559 	ldw (4,x),y 
      001945 90 BE 1C         [ 2]  560 	ldw y,YTEMP 
      001948 72 A9 00 02      [ 2]  561 	addw y,#2 
      00194C EF 02            [ 2]  562 	ldw (2,x),y 
      00194E 90 5F            [ 1]  563 	clrw y 
      001950 FF               [ 2]  564 	ldw (x),y 
      001951 CD 17 33         [ 4]  565 	call ee_store 
      001954 81               [ 4]  566 9$: ret 
                                    567 
                                    568 
                           000000   569 .if 0
                                    570 ;----------------------------
                                    571 ; transfert one or more définition 
                                    572 ; from RAM to FLASH 
                                    573 ; USAGE: FLASH name 
                                    574 ; 'name' and all following are 
                                    575 ; transfered to FLASH memory 
                                    576 ; FLASH ( -- ; <string> )
                                    577 ;-----------------------------------
                                    578 	.word LINK 
                                    579 	LINK=. 
                                    580 	.byte 5 
                                    581 	.ascii "FLASH"
                                    582 flash_colon: 
                                    583     call TOKEN 
                                    584 	call SNAME 
                                    585 	call DROP	
                                    586 .endif 
                                    587 
                                    588 
                                    589 
                                    590 
                                    591 ; application code begin here
      001980                        592 	.bndry 128 ; align on flash block  
      001980                        593 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   3971 .endif ; PICATOUT_MOD
                                   3972 
                                   3973 ;===============================================================
                                   3974 
                           0018FE  3975 LASTN =	LINK   ;last name defined
                                   3976 
                                   3977 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000475 R   |   6 ABOR1      000F90 R
  6 ABOR2      000FA7 R   |   6 ABORQ      000F88 R   |   6 ABORT      000F79 R
  6 ABRTQ      001248 R   |   6 ABSS       00046C R   |   6 ACCEP      000F0F R
  6 ACCP1      000F18 R   |   6 ACCP2      000F3E R   |   6 ACCP3      000F41 R
  6 ACCP4      000F43 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        001233 R
  6 AGAIN      001192 R   |   6 AHEAD      0011E9 R   |   6 ALLOT      0010B8 R
  6 ANDD       0002A5 R   |     APP_HERE=  004004     |     APP_LAST=  004000 
    APP_RUN =  004002     |   6 AT         0001B2 R   |   6 ATEXE      00082A R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000EB7 R   |   6 BASE       000314 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      0010F7 R   |   6 BDIGS      000912 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      001176 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000D4F R   |   6 BKSP       000E87 R
    BKSPP   =  000008     |   6 BLANK      0006FA R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       000174 R
    BTW     =  000001     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000020 
  6 CAT        0001D0 R   |   6 CCOMMA     0010D9 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0006B7 R   |   6 CELLP      0006A8 R
  6 CELLS      0006C6 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000B3F R   |   6 CHAR2      000B42 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000849 R   |   6 CMOV2      000861 R   |   6 CMOVE      000841 R
    CNTDWN  =  000028     |   6 CNTXT      000375 R   |   6 COLD       001577 R
  6 COLD1      001577 R   |   6 COLON      001362 R   |   6 COMMA      0010C2 R
  6 COMPI      001107 R   |     COMPO   =  000040     |     CONVERT_=  000001 
  6 COUNT      0007DD R   |   6 CPP        000383 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000B6D R   |   6 CREAT      00139A R
    CRR     =  00000D     |   6 CSTOR      0001BF R   |     CTOP    =  000080 
  6 DAT        0007BD R   |     DATSTK  =  0016F0     |   6 DDROP      0003D4 R
  6 DDUP       0003DF R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      0009C2 R   |   6 DEPTH      00074A R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000A07 R   |   6 DIG        00093B R
  6 DIGIT      0008D6 R   |   6 DIGS       00094C R   |   6 DIGS1      00094C R
  6 DIGS2      000959 R   |   6 DIGTQ      0009D6 R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00044C R   |   6 DNEGA      000431 R
  6 DOCONST    0013E6 R   |   6 DOLIT      00012A R   |   6 DONXT      00013E R
  6 DOSTR      000B83 R   |   6 DOT        000C08 R   |   6 DOT1       000C1E R
  6 DOTI1      00150B R   |   6 DOTID      0014F5 R   |   6 DOTO1      00101C R
  6 DOTOK      001002 R   |   6 DOTPR      000D31 R   |   6 DOTQ       001264 R
  6 DOTQP      000BAC R   |   6 DOTR       000BBA R   |   6 DOTS       001494 R
  6 DOTS1      00149F R   |   6 DOTS2      0014AB R   |   6 DOVAR      000306 R
  6 DROP       00024F R   |   6 DSTOR      000797 R   |   6 DUMP       00144A R
  6 DUMP1      001461 R   |   6 DUMP3      001483 R   |   6 DUMPP      001419 R
  6 DUPP       000259 R   |   6 EDIGS      000977 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 ELSEE      0011C6 R
  6 EMIT       000114 R   |   6 EQ1        000490 R   |   6 EQUAL      00047A R
  6 ERASE      0008A3 R   |     ERR     =  00001B     |   6 EVAL       001045 R
  6 EVAL1      001045 R   |   6 EVAL2      001061 R   |   6 EXE1       000838 R
  6 EXECU      000184 R   |   6 EXIT       000194 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      0008FE R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000870 R
  6 FILL1      00088D R   |   6 FILL2      000896 R   |   6 FIND       000DE3 R
  6 FIND1      000E01 R   |   6 FIND2      000E2F R   |   6 FIND3      000E3B R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND4      000E4F R   |   6 FIND5      000E5C R   |   6 FIND6      000E40 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FOR        001155 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       0007F4 R   |   6 HEX        0009AD R   |   6 HI         00154A R
  6 HLD        000362 R   |   6 HOLD       000922 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        0011A0 R   |     IMEDD   =  000080     |   6 IMMED      001377 R
  6 INCH       000108 R   |   6 INN        000332 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      000FE4 R   |   6 INTER      000FBA R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      00040E R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       001353 R   |   6 KEY        000AED R   |   6 KTAP       000ED4 R
  6 KTAP1      000EF7 R   |   6 KTAP2      000EFA R   |   6 LAST       000393 R
  6 LASTN   =  0018FE R   |   6 LBRAC      000FF1 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       0004B7 R
    LF      =  00000A     |   6 LINK    =  0018FE R   |   6 LITER      001126 R
  6 LT1        0004CD R   |     MASKK   =  001F7F     |   6 MAX        0004D7 R
  6 MAX1       0004EA R   |   6 MIN        0004F4 R   |   6 MIN1       000507 R
  6 MMOD1      0005AA R   |   6 MMOD2      0005BE R   |   6 MMOD3      0005D5 R
  6 MMSM1      000551 R   |   6 MMSM2      000565 R   |   6 MMSM3      000567 R
  6 MMSM4      00056F R   |   6 MODD       0005EF R   |   6 MONE       000720 R
    MS      =  000026     |   6 MSEC       0000A1 R   |   6 MSMOD      00058D R
  6 MSTA1      000680 R   |   6 MSTAR      00065D R   |     NAFR    =  004804 
  6 NAMEQ      000E7C R   |   6 NAMET      000D8D R   |     NCLKOPT =  004808 
  6 NEGAT      00041F R   |   6 NEX1       00014B R   |   6 NEXT       001165 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       000342 R   |     NUBC    =  004802 
  6 NUFQ       000B03 R   |   6 NUFQ1      000B1C R   |   6 NUMBQ      000A1A R
  6 NUMQ1      000A4E R   |   6 NUMQ2      000A7F R   |   6 NUMQ3      000AC1 R
  6 NUMQ4      000AC6 R   |   6 NUMQ5      000AD5 R   |   6 NUMQ6      000AD8 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 ONE        000712 R   |   6 ONEM       0006E0 R   |   6 ONEP       0006D3 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       00003D R   |   6 ORR        0002B9 R
  6 OUTPUT     000119 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000283 R
  6 OVERT      001320 R   |     PA      =  000000     |   6 PACKS      0008B5 R
  6 PAD        000805 R   |   6 PAREN      000D40 R   |   6 PARS       000C39 R
  6 PARS1      000C64 R   |   6 PARS2      000C8F R   |   6 PARS3      000C92 R
  6 PARS4      000C9B R   |   6 PARS5      000CBE R   |   6 PARS6      000CD3 R
  6 PARS7      000CE2 R   |   6 PARS8      000CF1 R   |   6 PARSE      000D02 R
  6 PAUSE      0000B1 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]

Symbol Table

    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00142C R   |   6 PDUM2      00143D R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PICATOUT=  000001 
  6 PICK       000761 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0003F4 R   |   6 PNAM1      0012D5 R
  6 PRESE      001070 R   |     PROD1   =  00001A     |     PROD2   =  00001C 
    PROD3   =  00001E     |   6 PSTOR      000776 R   |   6 QBRAN      00015D R
  6 QDUP       0003A3 R   |   6 QDUP1      0003AD R   |   6 QKEY       0000F6 R
  6 QSTAC      001028 R   |   6 QUERY      000F54 R   |   6 QUEST      000C2B R
  6 QUIT       00108D R   |   6 QUIT1      001095 R   |   6 QUIT2      001098 R
    RAMBASE =  000000     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RAT        000216 R   |   6 RBRAC      001340 R
  6 REPEA      00121B R   |   6 RFROM      000203 R   |     ROP     =  004800 
  6 ROT        0003B4 R   |     RP0     =  000024     |   6 RPAT       0001E0 R
    RPP     =  0017FF     |   6 RPSTO      0001ED R   |     RST_SR  =  0050B3 
  6 SAME1      000DAB R   |   6 SAME2      000DD4 R   |   6 SAMEQ      000DA3 R
  6 SCOM1      00130A R   |   6 SCOM2      00130D R   |   6 SCOMP      0012EC R
  6 SEMIS      001330 R   |     SFR_BASE=  005000     |     SFR_END =  0057FF 
  6 SIGN       000961 R   |   6 SIGN1      000971 R   |   6 SLASH      0005F9 R
  6 SLMOD      0005DD R   |   6 SNAME      00129F R   |     SP0     =  000022 
  6 SPACE      000B25 R   |   6 SPACS      000B34 R   |   6 SPAT       000239 R
    SPI_CR1 =  005200     |     SPI_CR2 =  005201     |     SPI_CRCP=  005205 
    SPI_DR  =  005204     |     SPI_ICR =  005202     |     SPI_RXCR=  005206 
    SPI_SR  =  005203     |     SPI_TXCR=  005207     |     SPP     =  0016F0 
  6 SPSTO      000246 R   |   6 SSMOD      000689 R   |     STACK   =  0017FF 
  6 STAR       000652 R   |   6 STASL      00069A R   |   6 STORE      00019B R
  6 STR        00098F R   |   6 STRCQ      001135 R   |   6 STRQ       001256 R
  6 STRQP      000BA2 R   |   6 SUBB       000452 R   |   6 SWAPP      000269 R
    SWIM_CSR=  007F80     |   6 TAP        000EBE R   |   6 TBOOT      00156B R
  6 TCHA1      000741 R   |   6 TCHAR      000731 R   |   6 TEMP       000323 R
  6 TEVAL      000353 R   |   6 THENN      0011B6 R   |   6 TIB        000816 R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0010A4 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   0000E1 R
  6 TIMER      0000CB R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0014C5 R   |   6 TNAM3      0014E3 R   |   6 TNAM4      0014E9 R
  6 TNAME      0014C2 R   |   6 TOKEN      000D7F R   |   6 TOR        000222 R
    TRUEE   =  00FFFF     |   6 TWOSL      0006ED R   |   6 TYPE1      000B54 R
  6 TYPE2      000B60 R   |   6 TYPES      000B4F R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000016     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000BF5 R   |   6 UDOTR      000BD5 R
  6 UEND       00003B R   |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  000018     |   6 ULES1      0004AF R
  6 ULESS      000499 R   |   6 UMMOD      00052F R   |   6 UMSTA      000608 R
  6 UNIQ1      001296 R   |   6 UNIQU      001277 R   |   6 UNTIL      001181 R
  6 UPL1       0002FA R   |   6 UPLUS      0002E3 R   |     UPP     =  000006 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      0013FC R
  6 UTYP2      00140B R   |   6 UTYPE      0013F7 R   |   6 UZERO      000027 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]

Symbol Table

  6 VARIA      0013B5 R   |     VER     =  000002     |     VSIZE   =  000002 
    WANT_DEB=  000000     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001200 R   |   6 WITHI      000514 R
  6 WORDD      000D6B R   |   6 WORDS      00151F R   |   6 WORS1      001525 R
  6 WORS2      001544 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       0002CE R   |     XTEMP   =  00001A     |     YTEMP   =  00001C 
  6 ZERO       000707 R   |   6 ZL1        00029B R   |   6 ZLESS      000292 R
  6 app_spac   001980 R   |   6 block_er   00177C R   |   6 clear_ra   000019 R
  6 clock_in   000058 R   |   6 constant   0013C9 R   |   6 copy_buf   0017D3 R
  6 copy_buf   0017F2 R   |   6 copy_pro   0017F2 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_cstor   0016E7 R   |   6 ee_store   001733 R   |   6 eeprom     0015F6 R
  6 erase_fl   001798 R   |   6 farat      001608 R   |   6 farcat     001624 R
    farptr  =  000002     |   6 fptr_sto   0015D7 R   |   6 inc_fptr   0016B5 R
  6 lock       0016A1 R   |   6 main       000016 R   |   6 pristine   001842 R
  6 proceed_   00179B R   |     ptr16   =  000003     |     ptr8    =  000004 
  6 reset_ve   0018B4 R   |   6 row_eras   00175F R   |   6 row_eras   0017AC R
  6 row_eras   0017D3 R   |   6 set_vect   001907 R   |   6 uart1_in   00006A R
  6 unlock     001679 R   |   6 unlock_e   00163B R   |   6 unlock_f   00165A R
  6 write_by   0016CC R   |   6 write_ro   001817 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1980   flags    0

