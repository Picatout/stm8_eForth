ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 ;*************************************
                                     86 ; constant used for conditationnal 
                                     87 ; assembly for those word I converted 
                                     88 ; to code.
                                     89 ; Added by Picatout 2020-05-24 
                                     90 ;*************************************
                           000001    91 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    92 PICATOUT_MOD=1  ; code modified by Picatout 
                                     93 
                                     94 ;*********************************************************
                                     95 ;	Assembler constants
                                     96 ;*********************************************************
                           000000    97 RAMBASE =	0x0000	   ;ram base
                           0017FF    98 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    99 DATSTK  =	0x1670	;data stack  empty
                           001680   100 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700   101 TIBBASE =       0X1700  ; tib addr.
                                    102 
                                    103 
                                    104 
                                    105 ;; Memory allocation
                                    106 
                           000006   107 UPP     =     RAMBASE+6
                           001670   108 SPP     =     RAMBASE+DATSTK
                           0017FF   109 RPP     =     RAMBASE+STACK
                           001680   110 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   111 TIBB    =     RAMBASE+TIBBASE
                           000080   112 CTOP    =     RAMBASE+0x80
                                    113 
                           000001   114 .if PICATOUT_MOD 
                                    115 ; user variables constants 
                           000006   116 UBASE = UPP       ; numeric base 
                           000008   117 UTMP = UBASE+2    ; temporary storage
                           00000A   118 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   119 UCTIB = UINN+2    ; tib count 
                           00000E   120 UTIB = UCTIB+2    ; tib address 
                           000010   121 UINTER = UTIB+2   ; interpreter vector 
                           000012   122 UHLD = UINTER+2   ; hold 
                           000014   123 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   124 UVP = UCNTXT+2    ; variable pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000018   125 UCP = UVP+2      ; code pointer
                           00001A   126 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   127 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                                    128 .endif ; PICATOUT_MOD
                                    129 
                                    130 ;******  System Variables  ******
                           00001E   131 XTEMP	=	UOFFSET+2;address called by CREATE
                           000020   132 YTEMP	=	XTEMP+2	;address called by CREATE
                           00001E   133 PROD1 = XTEMP	;space for UM*
                           000020   134 PROD2 = PROD1+2
                           000022   135 PROD3 = PROD2+2
                           000024   136 CARRY = PROD3+2
                           000026   137 SP0	= CARRY+2	;initial data stack pointer
                           000028   138 RP0	= SP0+2		;initial return stack pointer
                           00002A   139 MS    =   RP0+2         ; millisecond counter 
                           00002C   140 CNTDWN =  MS+2          ; count down timer 
                           00002E   141 FPTR = CNTDWN+2         ; 24 bits farptr 
                           00002F   142 PTR16 = FPTR+1          ; middle byte of farptr 
                           000030   143 PTR8 = FPTR+2           ; least byte of farptr 
                                    144 
                           000001   145 .if PICATOUT_MOD
                                    146 ; EEPROM persistant data  
                           004000   147 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   148 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   149 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   150 APP_VP = APP_CP+2  ; free data space pointer 
                                    151 .endif ;PICATOUT_MOD
                                    152 
                                    153 
                                    154 ;***********************************************
                                    155 ;; Version control
                                    156 
                           000003   157 VER     =     3         ;major release version
                           000000   158 EXT     =     0         ;minor extension
                                    159 
                                    160 ;; Constants
                                    161 
                           00FFFF   162 TRUEE   =     0xFFFF      ;true flag
                                    163 
                           000040   164 COMPO   =     0x40     ;lexicon compile only bit
                           000080   165 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   166 MASKK   =     0x1F7F  ;lexicon bit mask
                                    167 
                           000002   168 CELLL   =     2       ;size of a cell
                           00000A   169 BASEE   =     10      ;default radix
                           000008   170 BKSPP   =     8       ;back space
                           00000A   171 LF      =     10      ;line feed
                           00000D   172 CRR     =     13      ;carriage return
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
                                    179         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .endm
                                    181 
                                    182         .macro _ledoff
                                    183         bres PC_ODR,#LED2_BIT
                                    184         .endm
                                    185 
                                    186 ;**********************************************************
                                    187         .area DATA (ABS)
      000000                        188         .org RAMBASE 
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area SSEG (ABS) ; STACK
      001700                        193         .org 0x1700
      001700                        194         .ds 256 
                                    195 ; space for DATSTK,TIB and STACK         
                                    196 ;**********************************************************
                                    197 
                                    198 ;**********************************************************
                                    199         .area HOME ; vectors table
                                    200 ;**********************************************************
      000000 82 00 00 16            201 	int main	        ; reset
      000004 82 00 00 00            202 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            203 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            204 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            205 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            206 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            207 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            208 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            209 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            210 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            211 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            212 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            213 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            214 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            215 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            216 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            217 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            218 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            219 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            220 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            221 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            222 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            223 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            224 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            225 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            226 	int Timer4Handler	; irq23
      000068 82 00 00 00            227 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            228 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            229 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            230 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            231 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            232 	int NonHandledInterrupt	; irq29
                                    233 
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235         .area CODE
                                    236 ;**********************************************************
                                    237 
                                    238 ; non handled interrupt reset MCU
      000000                        239 NonHandledInterrupt:
      000000 A6 80            [ 1]  240         ld a, #0x80
      000002 C7 50 D1         [ 1]  241         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    242 	;iret
                                    243 
                                    244 ; used for milliseconds counter 
                                    245 ; MS is 16 bits counter 
      000005                        246 Timer4Handler:
      000005 72 5F 53 42      [ 1]  247 	clr TIM4_SR 
      000009 BE 2A            [ 2]  248         ldw x,MS 
      00000B 5C               [ 2]  249         incw x 
      00000C BF 2A            [ 2]  250         ldw MS,x
      00000E BE 2C            [ 2]  251         ldw x,CNTDWN 
      000010 27 03            [ 1]  252         jreq 1$
      000012 5A               [ 2]  253         decw x 
      000013 BF 2C            [ 2]  254         ldw CNTDWN,x 
      000015                        255 1$:         
      000015 80               [11]  256         iret 
                                    257 
                                    258 
                                    259 ;; Main entry points and COLD start data
      000016                        260 main:
                                    261 ; clear all RAM
      000016 AE 00 00         [ 2]  262 	ldw X,#RAMBASE
      000019                        263 clear_ram0:
      000019 7F               [ 1]  264 	clr (X)
      00001A 5C               [ 2]  265 	incw X
      00001B A3 17 FF         [ 2]  266 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  267 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  268         ldw x,#RPP
      000023 94               [ 1]  269         ldw sp,x 
      000024 CC 00 3F         [ 2]  270 	jp ORIG
                                    271 
                                    272 ; COLD initialize these variables.
      000027                        273 UZERO:
      000027 00 0A                  274         .word      BASEE   ;BASE
      000029 00 00                  275         .word      0       ;tmp
      00002B 00 00                  276         .word      0       ;>IN
      00002D 00 00                  277         .word      0       ;#TIB
      00002F 17 00                  278         .word      TIBB    ;TIB
      000031 11 C6                  279         .word      INTER   ;'EVAL
      000033 00 00                  280         .word      0       ;HLD
      000035 1F 00                  281         .word      LASTN  ;CNTXT pointer
      000037 00 80                  282         .word      CTOP   ;CP in RAM
      000039 1F 80                  283         .word      app_space ; CP in FLASH 
      00003B 1F 00                  284         .word      LASTN   ;LAST
      00003D 00 00                  285 UEND:  .word      0
                                    286 
      00003F                        287 ORIG:   
                                    288 ; initialize SP
      00003F AE 17 FF         [ 2]  289         LDW     X,#STACK  ;initialize return stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000042 94               [ 1]  290         LDW     SP,X
      000043 BF 28            [ 2]  291         LDW     RP0,X
      000045 AE 16 70         [ 2]  292         LDW     X,#DATSTK ;initialize data stack
      000048 BF 26            [ 2]  293         LDW     SP0,X
                                    294 ; initialize PC_5 as output to control LED2
                                    295 ; added by Picatout 
      00004A 72 1A 50 0D      [ 1]  296         bset PC_CR1,#LED2_BIT
      00004E 72 1A 50 0E      [ 1]  297         bset PC_CR2,#LED2_BIT
      000052 72 1A 50 0C      [ 1]  298         bset PC_DDR,#LED2_BIT
      000056                        299         _ledoff
      000056 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    300 ; initialize clock to HSI
                                    301 ; no divisor 16Mhz 
                                    302 ; Added by Picatout 
      00005A                        303 clock_init:
      00005A 72 5F 50 C6      [ 1]  304         clr CLK_CKDIVR
      00005E 72 12 50 C5      [ 1]  305 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000062 A6 E1            [ 1]  306 	ld a,#CLK_SWR_HSI
      000064 C7 50 C4         [ 1]  307 	ld CLK_SWR,a
      000067 C1 50 C3         [ 1]  308 1$:	cp a,CLK_CMSR
      00006A 26 FB            [ 1]  309 	jrne 1$
                                    310         
                                    311 ; initialize UART1, 115200 8N1
      00006C                        312 uart1_init:
      00006C 72 14 50 C7      [ 1]  313 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    314 	; configure tx pin
      000070 72 1A 50 02      [ 1]  315 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000074 72 1A 50 03      [ 1]  316 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000078 72 1A 50 04      [ 1]  317 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    318 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007C 35 0B 52 33      [ 1]  319 	mov UART1_BRR2,#0x0b ; must be loaded first
      000080 35 08 52 32      [ 1]  320 	mov UART1_BRR1,#0x8
      000084 35 0C 52 35      [ 1]  321 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    322 ; initialize timer4, used for millisecond interrupt  
      000088 35 07 53 45      [ 1]  323 	mov TIM4_PSCR,#7 ; prescale 128  
      00008C 35 7D 53 46      [ 1]  324 	mov TIM4_ARR,#125 ; set for 1msec.
      000090 35 05 53 40      [ 1]  325 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000094 72 10 53 41      [ 1]  326 	bset TIM4_IER,#TIM4_IER_UIE 
                                    327 ; set TIM4 interrupt priority to highest
      000098 A6 3F            [ 1]  328         ld a,#~(IPR_MASK<<6)
      00009A C4 7F 75         [ 1]  329         and a,ITC_SPR6
      00009D AA C0            [ 1]  330         or a,#(IPR3<<6)
      00009F C7 7F 75         [ 1]  331         ld ITC_SPR6,a 
      0000A2 9A               [ 1]  332         rim
      0000A3 CC 18 2E         [ 2]  333         jp  COLD   ;default=MN1
                                    334 
                                    335 
                                    336 ;; place MCU in sleep mode with
                                    337 ;; halt opcode 
                                    338 ;; BYE ( -- )
      0000A6 00 00                  339         .word 0
                           0000A8   340         LINK=.
      0000A8 03                     341         .byte 3 
      0000A9 42 59 45               342         .ascii "BYE"
      0000AC                        343 BYE: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000AC 8E               [10]  344         halt 
      0000AD 81               [ 4]  345         ret 
                                    346 
                                    347 ; Enable interrupts 
                                    348 ; EI ( -- )
      0000AE 00 A8                  349         .word LINK 
                           0000B0   350         LINK=.
      0000B0 02                     351         .byte 2
      0000B1 45 49                  352         .ascii "EI"
      0000B3                        353 EI:
      0000B3 9A               [ 1]  354         rim 
      0000B4 81               [ 4]  355         ret 
                                    356 
                                    357 ; Disable interrupts
                                    358 ; DI ( -- )
      0000B5 00 B0                  359         .word LINK 
                           0000B7   360         LINK=.
      0000B7 02                     361         .byte 2 
      0000B8 44 49                  362         .ascii "DI"
      0000BA                        363 DI:
      0000BA 9B               [ 1]  364         sim 
      0000BB 81               [ 4]  365         ret 
                                    366 
                                    367 ; set interrupt priority level 
                                    368 ; SET-ISP ( n1 n2 -- )
                                    369 ; n1 level {1..3}
                                    370 ; n2 vector {0..29}
      0000BC 00 B7                  371         .word LINK 
                           0000BE   372         LINK=.
      0000BE 07                     373         .byte 7 
      0000BF 53 45 54 2D 49 53 50   374         .ascii "SET-ISP"
      0000C6                        375 SETISP:
      0000C6 90 93            [ 1]  376         ldw y,x 
      0000C8 90 FE            [ 2]  377         ldw y,(y)
      0000CA A6 04            [ 1]  378         ld a,#4 ; 4 slot per register 
                                    379 ;  quotient select register, remainder select slot in register.        
      0000CC 90 62            [ 2]  380         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000CE A4 03            [ 1]  381         and a,#3 
      0000D0 48               [ 1]  382         sll a ; 2*SLOT  lshift 
      0000D1 72 A9 7F 70      [ 2]  383         addw y,#ITC_SPR1 
      0000D5 FF               [ 2]  384         ldw (x),y  ; ( level reg -- )
      0000D6 90 5F            [ 1]  385         clrw y 
      0000D8 90 97            [ 1]  386         ld yl,a 
      0000DA 1D 00 02         [ 2]  387         subw x,#CELLL 
      0000DD FF               [ 2]  388         ldw (x),y  ; ( level reg lshift -- )
      0000DE 90 93            [ 1]  389         ldw y,x 
      0000E0 90 EE 02         [ 2]  390         ldw y,(2,y) 
      0000E3 90 F6            [ 1]  391         ld a,(y)   ; reg_value
      0000E5 1D 00 02         [ 2]  392         subw x,#CELLL 
      0000E8 FF               [ 2]  393         ldw (x),y ; ( level reg lshift rval -- )
      0000E9 CD 04 1C         [ 4]  394         call OVER ; ( level reg lshift rval lshift -- )
      0000EC CD 02 C3         [ 4]  395         call DOLIT 
      0000EF 00 03                  396         .word 3
      0000F1 CD 04 02         [ 4]  397         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F4 CD 08 C5         [ 4]  398         call LSHIFT ; creat slot mask 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000F7 CD 05 E2         [ 4]  399         call INVER  ; ( level reg lshift rval mask )
      0000FA CD 04 3E         [ 4]  400         call ANDD ; ( level reg lshift slot_masked )
      0000FD CD 03 BB         [ 4]  401         call TOR  ; ( level reg lshift -- R: slot_masked )
      000100 CD 05 88         [ 4]  402         call ROT  ; ( reg lshift level )
      000103 CD 04 02         [ 4]  403         call SWAPP ; ( reg level lshift )
      000106 CD 08 C5         [ 4]  404         call LSHIFT  ; ( reg slot_level -- )
      000109 CD 03 9C         [ 4]  405         call RFROM ; ( reg slot_level masked_val )
      00010C CD 04 52         [ 4]  406         call ORR   ; ( reg updated_rval )
      00010F CD 04 02         [ 4]  407         call SWAPP 
      000112 CD 03 58         [ 4]  408         call CSTOR
                                    409 
                                    410 ; sélectionne l'application 
                                    411 ; qui démarre automatique lors 
                                    412 ; d'un COLD start 
      000115 00 BE                  413         .word LINK 
                           000117   414         LINK=.
      000117 07                     415         .byte 7
      000118 41 55 54 4F 52 55 4E   416         .ascii "AUTORUN"
      00011F                        417 AUTORUN:
      00011F CD 0F 8B         [ 4]  418         call TOKEN 
      000122 CD 03 F2         [ 4]  419         call DUPP 
      000125 CD 02 F6         [ 4]  420         call QBRAN 
      000128 01 D8                  421         .word FORGET2
      00012A CD 10 88         [ 4]  422         call NAMEQ
      00012D CD 05 77         [ 4]  423         call QDUP 
      000130 CD 02 F6         [ 4]  424         call QBRAN 
      000133 01 D8                  425         .word FORGET2
      000135 CD 03 E8         [ 4]  426         call DROP 
      000138 1D 00 04         [ 2]  427         subw x,#2*CELLL 
      00013B 90 5F            [ 1]  428         clrw y 
      00013D FF               [ 2]  429         ldw (x),y 
      00013E 90 AE 40 02      [ 2]  430         ldw y,#APP_RUN 
      000142 EF 02            [ 2]  431         ldw (2,x),y 
      000144 CC 1A AD         [ 2]  432         jp ee_store 
                                    433 
                                    434 
                                    435 ;; Reset dictionary pointer before 
                                    436 ;; forgotten word. RAM SPACE and 
                                    437 ;; interrupt vector defineD after 
                                    438 ;; must be resetted also.
      000147 01 17                  439         .word LINK 
                           000149   440         LINK=.
      000149 06                     441         .byte 6
      00014A 46 4F 52 47 45 54      442         .ascii "FORGET" 
      000150                        443 FORGET: 
      000150 CD 0F 8B         [ 4]  444         call TOKEN
      000153 CD 03 F2         [ 4]  445         call DUPP 
      000156 CD 02 F6         [ 4]  446         call QBRAN 
      000159 01 D8                  447         .word FORGET2
      00015B CD 10 88         [ 4]  448         call NAMEQ ; ( a -- ca na | a F )
      00015E CD 05 77         [ 4]  449         call QDUP 
      000161 CD 02 F6         [ 4]  450         call QBRAN 
      000164 01 D8                  451         .word FORGET2
                                    452 ; only forget users words 
      000166 CD 03 F2         [ 4]  453         call DUPP ; ( ca na na )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000169 CD 02 C3         [ 4]  454         call DOLIT 
      00016C 1F 80                  455         .word app_space 
      00016E CD 04 02         [ 4]  456         call SWAPP 
      000171 CD 06 26         [ 4]  457         call SUBB 
      000174 CD 04 2B         [ 4]  458         call  ZLESS 
      000177 CD 02 F6         [ 4]  459         call QBRAN 
      00017A 01 CA                  460         .word CANT_FORGET 
                                    461 ; ( ca na -- )        
                                    462 ;reset ivec with address >= ca
      00017C CD 04 02         [ 4]  463         call SWAPP ; ( na ca -- ) 
      00017F CD 1C 9E         [ 4]  464         call CHKIVEC ; ( na -- ) 
                                    465 ; start at LAST and link back to na 
                                    466 ; if variable found reset VP at that point.
      000182                        467 FORGET1:
      000182 CD 05 4C         [ 4]  468         call LAST 
      000185 CD 03 4B         [ 4]  469         call AT 
      000188 CD 03 F2         [ 4]  470         call DUPP  ; ( -- na last last )
      00018B CD 01 EE         [ 4]  471         call FREEVAR ; ( -- na last )
      00018E CD 03 F2         [ 4]  472         call DUPP 
      000191 CD 02 C3         [ 4]  473         call DOLIT 
      000194 00 02                  474         .word 2 
      000196 CD 06 26         [ 4]  475         call SUBB ; ( na last -- na last lfa ) link address 
      000199 CD 03 4B         [ 4]  476         call AT 
      00019C CD 03 F2         [ 4]  477         call DUPP ; ( -- na last a a )
      00019F CD 05 20         [ 4]  478         call CNTXT 
      0001A2 CD 03 34         [ 4]  479         call STORE
      0001A5 CD 05 4C         [ 4]  480         call LAST  
      0001A8 CD 03 34         [ 4]  481         call STORE ; ( --  na last )
      0001AB CD 04 1C         [ 4]  482         call OVER 
      0001AE CD 06 4E         [ 4]  483         call EQUAL ; ( na last na -- na T|F ) 
      0001B1 CD 02 F6         [ 4]  484         call QBRAN 
      0001B4 01 82                  485         .word FORGET1 
                                    486 ; ( na -- )
      0001B6 CD 02 C3         [ 4]  487         call DOLIT 
      0001B9 00 02                  488         .word 2 
      0001BB CD 06 26         [ 4]  489         call SUBB 
      0001BE CD 05 3C         [ 4]  490         call CPP 
      0001C1 CD 03 34         [ 4]  491         call STORE  
      0001C4 CD 19 5A         [ 4]  492         call UPDATCP 
      0001C7 CC 19 31         [ 2]  493         jp UPDATLAST 
      0001CA                        494 CANT_FORGET:
      0001CA CD 11 94         [ 4]  495         call ABORQ
      0001CD 0A                     496         .byte 10
      0001CE 20 50 72 6F 74 65 63   497         .ascii " Protected"
             74 65 64
      0001D8                        498 FORGET2:
      0001D8 CD 11 94         [ 4]  499         call ABORQ
      0001DB 05                     500         .byte 5
      0001DC 20 77 68 61 74         501         .ascii " what"
      0001E1                        502 FORGET4:
      0001E1 CC 03 E8         [ 2]  503         jp DROP 
                                    504 
                                    505 ;---------------------------------
                                    506 ; if na is variable 
                                    507 ; free variable data  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    508 ; FREEVAR ( na -- )
                                    509 ;---------------------------------
      0001E4 01 49                  510         .word LINK 
                           0001E6   511         LINK=.
      0001E6 07                     512         .byte 7 
      0001E7 46 52 45 45 56 41 52   513         .ascii "FREEVAR"
      0001EE                        514 FREEVAR:
      0001EE CD 03 F2         [ 4]  515         call DUPP ; ( na na -- )
      0001F1 CD 03 69         [ 4]  516         CALL CAT  ; ( na c -- )
      0001F4 CD 08 A7         [ 4]  517         call ONEP ;
      0001F7 CD 05 C8         [ 4]  518         CALL PLUS ; ( na c+1 -- ca ) 
      0001FA CD 08 A7         [ 4]  519         call ONEP ; ( ca+ -- ) to get routne address 
      0001FD CD 03 F2         [ 4]  520         call DUPP ; ( ca+ ca+ -- )
      000200 CD 03 4B         [ 4]  521         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000203 CD 02 C3         [ 4]  522         call DOLIT 
      000206 04 9F                  523         .word DOVAR ; if routine address is DOVAR then variable 
      000208 CD 06 4E         [ 4]  524         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00020B CD 02 F6         [ 4]  525         call QBRAN 
      00020E 02 24                  526         .word FREEVAR4 
      000210 CD 02 C3         [ 4]  527         call DOLIT 
      000213 00 02                  528         .word 2 
      000215 CD 05 C8         [ 4]  529         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000218 CD 03 4B         [ 4]  530         call AT 
      00021B CD 05 2E         [ 4]  531         call VPP   
      00021E CD 03 34         [ 4]  532         call STORE 
      000221 CC 19 71         [ 2]  533         jp UPDATVP 
      000224                        534 FREEVAR4: ; not variable
      000224 CC 03 E8         [ 2]  535         jp  DROP 
                                    536 
                                    537 ;;
                                    538 ;; get millisecond counter 
                                    539 ;; msec ( -- u )
                                    540 ;; Added by Picatout 2020-04-26
      000227 01 E6                  541         .word LINK  
                           000229   542         LINK = . 
      000229 04                     543         .byte 4
      00022A 4D 53 45 43            544         .ascii "MSEC"
      00022E                        545 MSEC: 
      00022E 1D 00 02         [ 2]  546         subw x,#CELLL 
      000231 90 BE 2A         [ 2]  547         ldw y,MS 
      000234 FF               [ 2]  548         ldw (x),y 
      000235 81               [ 4]  549         ret 
                                    550 
                                    551 ; suspend execution for u msec 
                                    552 ;  pause ( u -- )
      000236 02 29                  553         .word LINK 
                           000238   554         LINK=.
      000238 05                     555         .byte 5 
      000239 50 41 55 53 45         556         .ascii "PAUSE"
      00023E                        557 PAUSE:
      00023E 90 93            [ 1]  558         ldw y,x
      000240 90 FE            [ 2]  559         ldw y,(y)
      000242 72 B9 00 2A      [ 2]  560         addw y,MS 
      000246 8F               [10]  561 1$:     wfi  
      000247 90 B3 2A         [ 2]  562         cpw y,MS  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00024A 26 FA            [ 1]  563         jrne 1$        
      00024C 1C 00 02         [ 2]  564         addw x,#CELLL 
      00024F 81               [ 4]  565         ret 
                                    566 
                                    567 ; initialize count down timer 
                                    568 ;  TIMER ( u -- )  milliseconds 
      000250 02 38                  569         .word LINK 
                           000252   570         LINK=.
      000252 05                     571         .byte 5 
      000253 54 49 4D 45 52         572         .ascii "TIMER" 
      000258                        573 TIMER:
      000258 90 93            [ 1]  574         ldw y,x
      00025A 90 FE            [ 2]  575         ldw y,(y) 
      00025C 90 BF 2C         [ 2]  576         ldw CNTDWN,y
      00025F 1C 00 02         [ 2]  577         addw x,#CELLL 
      000262 81               [ 4]  578         ret 
                                    579 
                                    580 ; check for TIMER exiparition 
                                    581 ;  TIMEOUT? ( -- 0|-1 )
      000263 02 52                  582         .word LINK 
                           000265   583         LINK=. 
      000265 08                     584         .byte 8 
      000266 54 49 4D 45 4F 55 54   585         .ascii "TIMEOUT?"
             3F
      00026E                        586 TIMEOUTQ: 
      00026E 4F               [ 1]  587         clr a
      00026F 1D 00 02         [ 2]  588         subw x,#CELLL 
      000272 90 BE 2C         [ 2]  589         ldw y,CNTDWN 
      000275 26 01            [ 1]  590         jrne 1$ 
      000277 43               [ 1]  591         cpl a 
      000278 E7 01            [ 1]  592 1$:     ld (1,x),a 
      00027A F7               [ 1]  593         ld (x),a 
      00027B 81               [ 4]  594         ret         
                                    595 
                                    596 ; reboot MCU 
                                    597 ; REBOOT ( -- )
      00027C 02 65                  598         .word LINK 
                           00027E   599         LINK=. 
      00027E 06                     600         .byte 6 
      00027F 52 45 42 4F 4F 54      601         .ascii "REBOOT"
      000285                        602 reboot:
      000285 CC 00 00         [ 2]  603         jp NonHandledInterrupt
                                    604         
                                    605 
                                    606 ;; Device dependent I/O
                                    607 ;       ?RX     ( -- c T | F )
                                    608 ;         Return input byte and true, or false.
      000288 02 7E                  609         .word      LINK 
                           00028A   610 LINK	= .
      00028A 04                     611         .byte      4
      00028B 3F 4B 45 59            612         .ascii     "?KEY"
      00028F                        613 QKEY:
      00028F 90 5F            [ 1]  614         CLRW Y 
      000291 72 0B 52 30 0B   [ 2]  615         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000296 C6 52 31         [ 1]  616         LD    A,UART1_DR   ;get char in A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000299 1D 00 02         [ 2]  617 	SUBW	X,#2
      00029C E7 01            [ 1]  618         LD     (1,X),A
      00029E 7F               [ 1]  619 	CLR	(X)
      00029F 90 53            [ 2]  620         CPLW     Y
      0002A1                        621 INCH:
      0002A1 1D 00 02         [ 2]  622 	SUBW	X,#2
      0002A4 FF               [ 2]  623         LDW     (X),Y
      0002A5 81               [ 4]  624         RET
                                    625 
                                    626 ;       TX!     ( c -- )
                                    627 ;       Send character c to  output device.
      0002A6 02 8A                  628         .word      LINK
                           0002A8   629 LINK	= .
      0002A8 04                     630         .byte      4
      0002A9 45 4D 49 54            631         .ascii     "EMIT"
      0002AD                        632 EMIT:
      0002AD E6 01            [ 1]  633         LD     A,(1,X)
      0002AF 1C 00 02         [ 2]  634 	ADDW	X,#2
      0002B2 72 0F 52 30 FB   [ 2]  635 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0002B7 C7 52 31         [ 1]  636         LD    UART1_DR,A   ;send A
      0002BA 81               [ 4]  637         RET
                                    638 
                                    639 ;; The kernel
                                    640 
                                    641 ;       doLIT   ( -- w )
                                    642 ;       Push an inline literal.
      0002BB 02 A8                  643         .word      LINK
                           0002BD   644 LINK	= 	.
      0002BD 45                     645 	.byte      COMPO+5
      0002BE 44 4F 4C 49 54         646         .ascii     "DOLIT"
      0002C3                        647 DOLIT:
      0002C3 1D 00 02         [ 2]  648 	SUBW X,#2
                           000001   649 .if PICATOUT_MOD 
      0002C6 16 01            [ 2]  650         ldw y,(1,sp)
      0002C8 90 FE            [ 2]  651         ldw y,(y)
      0002CA FF               [ 2]  652         ldw (x),y
      0002CB 90 85            [ 2]  653         popw y 
      0002CD 90 EC 02         [ 2]  654         jp (2,y)
                           000000   655 .else 
                                    656         POPW Y
                                    657 	LDW YTEMP,Y
                                    658 	LDW Y,(Y)
                                    659         LDW (X),Y
                                    660         LDW Y,YTEMP
                                    661 	JP (2,Y)
                                    662 .endif 
                                    663 
                                    664 ;       next    ( -- )
                                    665 ;       Code for  single index loop.
      0002D0 02 BD                  666         .word      LINK
                           0002D2   667 LINK	= 	.
      0002D2 44                     668 	.byte      COMPO+4
      0002D3 4E 45 58 54            669         .ascii     "NEXT"
      0002D7                        670 DONXT:
      0002D7 16 03            [ 2]  671 	LDW Y,(3,SP)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002D9 90 5A            [ 2]  672 	DECW Y
      0002DB 2A 07            [ 1]  673 	JRPL NEX1 ; jump if N=0
      0002DD 90 85            [ 2]  674 	POPW Y
                           000001   675 .if PICATOUT_MOD
      0002DF 5B 02            [ 2]  676         addw sp,#2
                           000000   677 .else        
                                    678 	POP A
                                    679 	POP A
                                    680 .endif         
      0002E1 90 EC 02         [ 2]  681         JP (2,Y)
      0002E4                        682 NEX1:
      0002E4 17 03            [ 2]  683         LDW (3,SP),Y
      0002E6 90 85            [ 2]  684         POPW Y
      0002E8 90 FE            [ 2]  685 	LDW Y,(Y)
      0002EA 90 FC            [ 2]  686 	JP (Y)
                                    687 
                                    688 ;       ?branch ( f -- )
                                    689 ;       Branch if flag is zero.
      0002EC 02 D2                  690         .word      LINK
                           0002EE   691 LINK	= 	.
      0002EE 47                     692 	.byte      COMPO+7
      0002EF 3F 42 52 41 4E 43 48   693         .ascii     "?BRANCH"
      0002F6                        694 QBRAN:	
      0002F6 90 93            [ 1]  695         LDW Y,X
      0002F8 1C 00 02         [ 2]  696 	ADDW X,#2
      0002FB 90 FE            [ 2]  697 	LDW Y,(Y)
      0002FD 27 0E            [ 1]  698         JREQ     BRAN
      0002FF 90 85            [ 2]  699 	POPW Y
      000301 90 EC 02         [ 2]  700 	JP (2,Y)
                                    701         
                                    702 ;       branch  ( -- )
                                    703 ;       Branch to an inline address.
      000304 02 EE                  704         .word      LINK
                           000306   705 LINK	= 	.
      000306 46                     706 	.byte      COMPO+6
      000307 42 52 41 4E 43 48      707         .ascii     "BRANCH"
      00030D                        708 BRAN:
      00030D 90 85            [ 2]  709         POPW Y
      00030F 90 FE            [ 2]  710 	LDW Y,(Y)
      000311 90 FC            [ 2]  711         JP     (Y)
                                    712 
                                    713 ;       EXECUTE ( ca -- )
                                    714 ;       Execute  word at ca.
      000313 03 06                  715         .word      LINK
                           000315   716 LINK	= 	.
      000315 07                     717         .byte       7
      000316 45 58 45 43 55 54 45   718         .ascii     "EXECUTE"
      00031D                        719 EXECU:
      00031D 90 93            [ 1]  720         LDW Y,X
      00031F 1C 00 02         [ 2]  721 	ADDW X,#2
      000322 90 FE            [ 2]  722 	LDW  Y,(Y)
      000324 90 FC            [ 2]  723         JP   (Y)
                                    724 
                                    725 ;       EXIT    ( -- )
                                    726 ;       Terminate a colon definition.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000326 03 15                  727         .word      LINK
                           000328   728 LINK = .
      000328 04                     729         .byte      4
      000329 45 58 49 54            730         .ascii     "EXIT"
      00032D                        731 EXIT:
      00032D 90 85            [ 2]  732         POPW Y
      00032F 81               [ 4]  733         RET
                                    734 
                                    735 ;       !       ( w a -- )
                                    736 ;       Pop  data stack to memory.
      000330 03 28                  737         .word      LINK
                           000332   738 LINK = .
      000332 01                     739         .byte      1
      000333 21                     740         .ascii     "!"
      000334                        741 STORE:
      000334 90 93            [ 1]  742         LDW Y,X
      000336 90 FE            [ 2]  743         LDW Y,(Y)    ;Y=a
      000338 90 BF 20         [ 2]  744         LDW YTEMP,Y
      00033B 90 93            [ 1]  745         LDW Y,X
      00033D 90 EE 02         [ 2]  746         LDW Y,(2,Y)
      000340 91 CF 20         [ 5]  747         LDW [YTEMP],Y ;store w at a
      000343 1C 00 04         [ 2]  748         ADDW X,#4 ; DDROP 
      000346 81               [ 4]  749         RET     
                                    750 
                                    751 ;       @       ( a -- w )
                                    752 ;       Push memory location to stack.
      000347 03 32                  753         .word      LINK
                           000349   754 LINK	= 	.
      000349 01                     755         .byte    1
      00034A 40                     756         .ascii	"@"
      00034B                        757 AT:
      00034B 90 93            [ 1]  758         LDW Y,X     ;Y = a
      00034D 90 FE            [ 2]  759         LDW Y,(Y)   ; address 
      00034F 90 FE            [ 2]  760         LDW Y,(Y)   ; value 
      000351 FF               [ 2]  761         LDW (X),Y ;w = @Y
      000352 81               [ 4]  762         RET     
                                    763 
                                    764 ;       C!      ( c b -- )
                                    765 ;       Pop  data stack to byte memory.
      000353 03 49                  766         .word      LINK
                           000355   767 LINK	= .
      000355 02                     768         .byte      2
      000356 43 21                  769         .ascii     "C!"
      000358                        770 CSTOR:
      000358 90 93            [ 1]  771         LDW Y,X
      00035A 90 FE            [ 2]  772 	LDW Y,(Y)    ;Y=b
      00035C E6 03            [ 1]  773         LD A,(3,X)    ;D = c
      00035E 90 F7            [ 1]  774         LD  (Y),A     ;store c at b
      000360 1C 00 04         [ 2]  775 	ADDW X,#4 ; DDROP 
      000363 81               [ 4]  776         RET     
                                    777 
                                    778 ;       C@      ( b -- c )
                                    779 ;       Push byte in memory to  stack.
      000364 03 55                  780         .word      LINK
                           000366   781 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000366 02                     782         .byte      2
      000367 43 40                  783         .ascii     "C@"
      000369                        784 CAT:
      000369 90 93            [ 1]  785         LDW Y,X     ;Y=b
      00036B 90 FE            [ 2]  786         LDW Y,(Y)
      00036D 90 F6            [ 1]  787         LD A,(Y)
      00036F E7 01            [ 1]  788         LD (1,X),A
      000371 7F               [ 1]  789         CLR (X)
      000372 81               [ 4]  790         RET     
                                    791 
                                    792 ;       RP@     ( -- a )
                                    793 ;       Push current RP to data stack.
      000373 03 66                  794         .word      LINK
                           000375   795 LINK	= .
      000375 03                     796         .byte      3
      000376 52 50 40               797         .ascii     "RP@"
      000379                        798 RPAT:
      000379 90 96            [ 1]  799         LDW Y,SP    ;save return addr
      00037B 1D 00 02         [ 2]  800         SUBW X,#2
      00037E FF               [ 2]  801         LDW (X),Y
      00037F 81               [ 4]  802         RET     
                                    803 
                                    804 ;       RP!     ( a -- )
                                    805 ;       Set  return stack pointer.
      000380 03 75                  806         .word      LINK
                           000382   807 LINK	= 	. 
      000382 43                     808 	.byte      COMPO+3
      000383 52 50 21               809         .ascii     "RP!"
      000386                        810 RPSTO:
      000386 90 85            [ 2]  811         POPW Y
      000388 90 BF 20         [ 2]  812         LDW YTEMP,Y
      00038B 90 93            [ 1]  813         LDW Y,X
      00038D 90 FE            [ 2]  814         LDW Y,(Y)
      00038F 90 94            [ 1]  815         LDW SP,Y
      000391 1C 00 02         [ 2]  816         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000394 92 CC 20         [ 5]  817         JP [YTEMP]
                                    818 
                                    819 ;       R>      ( -- w )
                                    820 ;       Pop return stack to data stack.
      000397 03 82                  821         .word      LINK
                           000399   822 LINK	= 	. 
      000399 42                     823 	.byte      COMPO+2
      00039A 52 3E                  824         .ascii     "R>"
      00039C                        825 RFROM:
      00039C 90 85            [ 2]  826         POPW Y    ;save return addr
      00039E 90 BF 20         [ 2]  827         LDW YTEMP,Y
      0003A1 90 85            [ 2]  828         POPW Y
      0003A3 1D 00 02         [ 2]  829         SUBW X,#2
      0003A6 FF               [ 2]  830         LDW (X),Y
      0003A7 92 CC 20         [ 5]  831         JP [YTEMP]
                                    832 
                                    833 ;       R@      ( -- w )
                                    834 ;       Copy top of return stack to stack.
      0003AA 03 99                  835         .word      LINK
                           0003AC   836 LINK	= 	. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AC 02                     837         .byte      2
      0003AD 52 40                  838         .ascii     "R@"
      0003AF                        839 RAT:
                           000001   840 .if PICATOUT_MOD
      0003AF 16 03            [ 2]  841         ldw y,(3,sp)
      0003B1 1D 00 02         [ 2]  842         subw x,#CELLL 
      0003B4 FF               [ 2]  843         ldw (x),y 
      0003B5 81               [ 4]  844         ret 
                           000000   845 .else 
                                    846         POPW Y
                                    847         LDW YTEMP,Y
                                    848         POPW Y
                                    849         PUSHW Y
                                    850         SUBW X,#2
                                    851         LDW (X),Y
                                    852         JP [YTEMP]
                                    853 .endif         
                                    854 
                                    855 ;       >R      ( w -- )
                                    856 ;       Push data stack to return stack.
      0003B6 03 AC                  857         .word      LINK
                           0003B8   858 LINK	= 	. 
      0003B8 42                     859 	.byte      COMPO+2
      0003B9 3E 52                  860         .ascii     ">R"
      0003BB                        861 TOR:
      0003BB 90 85            [ 2]  862         POPW Y    ;save return addr
      0003BD 90 BF 20         [ 2]  863         LDW YTEMP,Y
      0003C0 90 93            [ 1]  864         LDW Y,X
      0003C2 90 FE            [ 2]  865         LDW Y,(Y)
      0003C4 90 89            [ 2]  866         PUSHW Y    ;restore return addr
      0003C6 1C 00 02         [ 2]  867         ADDW X,#2
      0003C9 92 CC 20         [ 5]  868         JP [YTEMP]
                                    869 
                                    870 ;       SP@     ( -- a )
                                    871 ;       Push current stack pointer.
      0003CC 03 B8                  872         .word      LINK
                           0003CE   873 LINK	= 	. 
      0003CE 03                     874         .byte      3
      0003CF 53 50 40               875         .ascii     "SP@"
      0003D2                        876 SPAT:
      0003D2 90 93            [ 1]  877 	LDW Y,X
      0003D4 1D 00 02         [ 2]  878         SUBW X,#2
      0003D7 FF               [ 2]  879 	LDW (X),Y
      0003D8 81               [ 4]  880         RET     
                                    881 
                                    882 ;       SP!     ( a -- )
                                    883 ;       Set  data stack pointer.
      0003D9 03 CE                  884         .word      LINK
                           0003DB   885 LINK	= 	. 
      0003DB 03                     886         .byte      3
      0003DC 53 50 21               887         .ascii     "SP!"
      0003DF                        888 SPSTO:
      0003DF FE               [ 2]  889         LDW     X,(X)     ;X = a
      0003E0 81               [ 4]  890         RET     
                                    891 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    892 ;       DROP    ( w -- )
                                    893 ;       Discard top stack item.
      0003E1 03 DB                  894         .word      LINK
                           0003E3   895 LINK	= 	. 
      0003E3 04                     896         .byte      4
      0003E4 44 52 4F 50            897         .ascii     "DROP"
      0003E8                        898 DROP:
      0003E8 1C 00 02         [ 2]  899         ADDW X,#2     
      0003EB 81               [ 4]  900         RET     
                                    901 
                                    902 ;       DUP     ( w -- w w )
                                    903 ;       Duplicate  top stack item.
      0003EC 03 E3                  904         .word      LINK
                           0003EE   905 LINK	= 	. 
      0003EE 03                     906         .byte      3
      0003EF 44 55 50               907         .ascii     "DUP"
      0003F2                        908 DUPP:
      0003F2 90 93            [ 1]  909 	LDW Y,X
      0003F4 1D 00 02         [ 2]  910         SUBW X,#2
      0003F7 90 FE            [ 2]  911 	LDW Y,(Y)
      0003F9 FF               [ 2]  912 	LDW (X),Y
      0003FA 81               [ 4]  913         RET     
                                    914 
                                    915 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    916 ;       Exchange top two stack items.
      0003FB 03 EE                  917         .word      LINK
                           0003FD   918 LINK	= 	. 
      0003FD 04                     919         .byte      4
      0003FE 53 57 41 50            920         .ascii     "SWAP"
      000402                        921 SWAPP:
      000402 90 93            [ 1]  922         LDW Y,X
      000404 90 FE            [ 2]  923         LDW Y,(Y)
      000406 90 BF 20         [ 2]  924         LDW YTEMP,Y
      000409 90 93            [ 1]  925         LDW Y,X
      00040B 90 EE 02         [ 2]  926         LDW Y,(2,Y)
      00040E FF               [ 2]  927         LDW (X),Y
      00040F 90 BE 20         [ 2]  928         LDW Y,YTEMP
      000412 EF 02            [ 2]  929         LDW (2,X),Y
      000414 81               [ 4]  930         RET     
                                    931 
                                    932 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    933 ;       Copy second stack item to top.
      000415 03 FD                  934         .word      LINK
                           000417   935 LINK	= . 
      000417 04                     936         .byte      4
      000418 4F 56 45 52            937         .ascii     "OVER"
      00041C                        938 OVER:
      00041C 1D 00 02         [ 2]  939         SUBW X,#2
      00041F 90 93            [ 1]  940         LDW Y,X
      000421 90 EE 04         [ 2]  941         LDW Y,(4,Y)
      000424 FF               [ 2]  942         LDW (X),Y
      000425 81               [ 4]  943         RET     
                                    944 
                                    945 ;       0<      ( n -- t )
                                    946 ;       Return true if n is negative.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000426 04 17                  947         .word      LINK
                           000428   948 LINK	= . 
      000428 02                     949         .byte      2
      000429 30 3C                  950         .ascii     "0<"
      00042B                        951 ZLESS:
      00042B A6 FF            [ 1]  952         LD A,#0xFF
      00042D 90 93            [ 1]  953         LDW Y,X
      00042F 90 FE            [ 2]  954         LDW Y,(Y)
      000431 2B 01            [ 1]  955         JRMI     ZL1
      000433 4F               [ 1]  956         CLR A   ;false
      000434 F7               [ 1]  957 ZL1:    LD     (X),A
      000435 E7 01            [ 1]  958         LD (1,X),A
      000437 81               [ 4]  959 	RET     
                                    960 
                                    961 ;       AND     ( w w -- w )
                                    962 ;       Bitwise AND.
      000438 04 28                  963         .word      LINK
                           00043A   964 LINK	= . 
      00043A 03                     965         .byte      3
      00043B 41 4E 44               966         .ascii     "AND"
      00043E                        967 ANDD:
      00043E F6               [ 1]  968         LD  A,(X)    ;D=w
      00043F E4 02            [ 1]  969         AND A,(2,X)
      000441 E7 02            [ 1]  970         LD (2,X),A
      000443 E6 01            [ 1]  971         LD A,(1,X)
      000445 E4 03            [ 1]  972         AND A,(3,X)
      000447 E7 03            [ 1]  973         LD (3,X),A
      000449 1C 00 02         [ 2]  974         ADDW X,#2
      00044C 81               [ 4]  975         RET
                                    976 
                                    977 ;       OR      ( w w -- w )
                                    978 ;       Bitwise inclusive OR.
      00044D 04 3A                  979         .word      LINK
                           00044F   980 LINK = . 
      00044F 02                     981         .byte      2
      000450 4F 52                  982         .ascii     "OR"
      000452                        983 ORR:
      000452 F6               [ 1]  984         LD A,(X)    ;D=w
      000453 EA 02            [ 1]  985         OR A,(2,X)
      000455 E7 02            [ 1]  986         LD (2,X),A
      000457 E6 01            [ 1]  987         LD A,(1,X)
      000459 EA 03            [ 1]  988         OR A,(3,X)
      00045B E7 03            [ 1]  989         LD (3,X),A
      00045D 1C 00 02         [ 2]  990         ADDW X,#2
      000460 81               [ 4]  991         RET
                                    992 
                                    993 ;       XOR     ( w w -- w )
                                    994 ;       Bitwise exclusive OR.
      000461 04 4F                  995         .word      LINK
                           000463   996 LINK	= . 
      000463 03                     997         .byte      3
      000464 58 4F 52               998         .ascii     "XOR"
      000467                        999 XORR:
      000467 F6               [ 1] 1000         LD A,(X)    ;D=w
      000468 E8 02            [ 1] 1001         XOR A,(2,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      00046A E7 02            [ 1] 1002         LD (2,X),A
      00046C E6 01            [ 1] 1003         LD A,(1,X)
      00046E E8 03            [ 1] 1004         XOR A,(3,X)
      000470 E7 03            [ 1] 1005         LD (3,X),A
      000472 1C 00 02         [ 2] 1006         ADDW X,#2
      000475 81               [ 4] 1007         RET
                                   1008 
                                   1009 ;       UM+     ( u u -- udsum )
                                   1010 ;       Add two unsigned single
                                   1011 ;       and return a double sum.
      000476 04 63                 1012         .word      LINK
                           000478  1013 LINK	= . 
      000478 03                    1014         .byte      3
      000479 55 4D 2B              1015         .ascii     "UM+"
      00047C                       1016 UPLUS:
      00047C A6 01            [ 1] 1017         LD A,#1
      00047E 90 93            [ 1] 1018         LDW Y,X
      000480 90 EE 02         [ 2] 1019         LDW Y,(2,Y)
      000483 90 BF 20         [ 2] 1020         LDW YTEMP,Y
      000486 90 93            [ 1] 1021         LDW Y,X
      000488 90 FE            [ 2] 1022         LDW Y,(Y)
      00048A 72 B9 00 20      [ 2] 1023         ADDW Y,YTEMP
      00048E EF 02            [ 2] 1024         LDW (2,X),Y
      000490 25 01            [ 1] 1025         JRC     UPL1
      000492 4F               [ 1] 1026         CLR A
      000493 E7 01            [ 1] 1027 UPL1:   LD     (1,X),A
      000495 7F               [ 1] 1028         CLR (X)
      000496 81               [ 4] 1029         RET
                                   1030 
                                   1031 ;; System and user variables
                                   1032 
                                   1033 ;       doVAR   ( -- a )
                                   1034 ;       Code for VARIABLE and CREATE.
      000497 04 78                 1035         .word      LINK
                           000499  1036 LINK	= . 
      000499 45                    1037 	.byte      COMPO+5
      00049A 44 4F 56 41 52        1038         .ascii     "DOVAR"
      00049F                       1039 DOVAR:
      00049F 1D 00 02         [ 2] 1040 	SUBW X,#2
      0004A2 90 85            [ 2] 1041         POPW Y    ;get return addr (pfa)
                           000001  1042 .if PICATOUT_MOD
      0004A4 90 FE            [ 2] 1043         LDW Y,(Y) ; indirect address 
                                   1044 .endif ;PICATOUT_MOD        
      0004A6 FF               [ 2] 1045         LDW (X),Y    ;push on stack
      0004A7 81               [ 4] 1046         RET     ;go to RET of EXEC
                                   1047 
                                   1048 ;       BASE    ( -- a )
                                   1049 ;       Radix base for numeric I/O.
      0004A8 04 99                 1050         .word      LINK        
                           0004AA  1051 LINK = . 
      0004AA 04                    1052         .byte      4
      0004AB 42 41 53 45           1053         .ascii     "BASE"
      0004AF                       1054 BASE:
      0004AF 90 AE 00 06      [ 2] 1055 	LDW Y,#UBASE 
      0004B3 1D 00 02         [ 2] 1056 	SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004B6 FF               [ 2] 1057         LDW (X),Y
      0004B7 81               [ 4] 1058         RET
                                   1059 
                                   1060 ;       tmp     ( -- a )
                                   1061 ;       A temporary storage.
      0004B8 04 AA                 1062         .word      LINK
                                   1063         
                           0004BA  1064 LINK = . 
      0004BA 03                    1065 	.byte      3
      0004BB 54 4D 50              1066         .ascii     "TMP"
      0004BE                       1067 TEMP:
      0004BE 90 AE 00 08      [ 2] 1068 	LDW Y,#UTMP
      0004C2 1D 00 02         [ 2] 1069 	SUBW X,#2
      0004C5 FF               [ 2] 1070         LDW (X),Y
      0004C6 81               [ 4] 1071         RET
                                   1072 
                                   1073 ;       >IN     ( -- a )
                                   1074 ;        Hold parsing pointer.
      0004C7 04 BA                 1075         .word      LINK
                           0004C9  1076 LINK = . 
      0004C9 03                    1077         .byte      3
      0004CA 3E 49 4E              1078         .ascii    ">IN"
      0004CD                       1079 INN:
      0004CD 90 AE 00 0A      [ 2] 1080 	LDW Y,#UINN 
      0004D1 1D 00 02         [ 2] 1081 	SUBW X,#2
      0004D4 FF               [ 2] 1082         LDW (X),Y
      0004D5 81               [ 4] 1083         RET
                                   1084 
                                   1085 ;       #TIB    ( -- a )
                                   1086 ;       Count in terminal input buffer.
      0004D6 04 C9                 1087         .word      LINK
                           0004D8  1088 LINK = . 
      0004D8 04                    1089         .byte      4
      0004D9 23 54 49 42           1090         .ascii     "#TIB"
      0004DD                       1091 NTIB:
      0004DD 90 AE 00 0C      [ 2] 1092 	LDW Y,#UCTIB 
      0004E1 1D 00 02         [ 2] 1093 	SUBW X,#2
      0004E4 FF               [ 2] 1094         LDW (X),Y
      0004E5 81               [ 4] 1095         RET
                                   1096 
                           000001  1097 .if PICATOUT_MOD
                                   1098 ;       TBUF ( -- a )
                                   1099 ;       address of 128 bytes transaction buffer 
      0004E6 04 D8                 1100         .word LINK 
                           0004E8  1101         LINK=.
      0004E8 04                    1102         .byte 4 
      0004E9 54 42 55 46           1103         .ascii "TBUF"
      0004ED                       1104 TBUF:
      0004ED 90 AE 16 80      [ 2] 1105         ldw y,#ROWBUFF
      0004F1 1D 00 02         [ 2] 1106         subw x,#CELLL
      0004F4 FF               [ 2] 1107         ldw (x),y 
      0004F5 81               [ 4] 1108         ret 
                                   1109 
                                   1110 
                                   1111 .endif ;PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



                                   1112 
                                   1113 ;       "EVAL   ( -- a )
                                   1114 ;       Execution vector of EVAL.
      0004F6 04 E8                 1115         .word      LINK
                           0004F8  1116 LINK = . 
      0004F8 05                    1117         .byte      5
      0004F9 27 45 56 41 4C        1118         .ascii     "'EVAL"
      0004FE                       1119 TEVAL:
      0004FE 90 AE 00 10      [ 2] 1120 	LDW Y,#UINTER 
      000502 1D 00 02         [ 2] 1121 	SUBW X,#2
      000505 FF               [ 2] 1122         LDW (X),Y
      000506 81               [ 4] 1123         RET
                                   1124 
                                   1125 ;       HLD     ( -- a )
                                   1126 ;       Hold a pointer of output string.
      000507 04 F8                 1127         .word      LINK
                           000509  1128 LINK = . 
      000509 03                    1129         .byte      3
      00050A 48 4C 44              1130         .ascii     "HLD"
      00050D                       1131 HLD:
      00050D 90 AE 00 12      [ 2] 1132 	LDW Y,#UHLD 
      000511 1D 00 02         [ 2] 1133 	SUBW X,#2
      000514 FF               [ 2] 1134         LDW (X),Y
      000515 81               [ 4] 1135         RET
                                   1136 
                                   1137 ;       CONTEXT ( -- a )
                                   1138 ;       Start vocabulary search.
      000516 05 09                 1139         .word      LINK
                           000518  1140 LINK = . 
      000518 07                    1141         .byte      7
      000519 43 4F 4E 54 45 58 54  1142         .ascii     "CONTEXT"
      000520                       1143 CNTXT:
      000520 90 AE 00 14      [ 2] 1144 	LDW Y,#UCNTXT
      000524 1D 00 02         [ 2] 1145 	SUBW X,#2
      000527 FF               [ 2] 1146         LDW (X),Y
      000528 81               [ 4] 1147         RET
                                   1148 
                                   1149 ;       VP      ( -- a )
                                   1150 ;       Point to top of variables
      000529 05 18                 1151         .word      LINK
                           00052B  1152 LINK = . 
      00052B 02                    1153         .byte      2
      00052C 56 50                 1154         .ascii     "VP"
      00052E                       1155 VPP:
      00052E 90 AE 00 16      [ 2] 1156 	LDW Y,#UVP 
      000532 1D 00 02         [ 2] 1157 	SUBW X,#2
      000535 FF               [ 2] 1158         LDW (X),Y
      000536 81               [ 4] 1159         RET
                                   1160 
                           000001  1161 .if PICATOUT_MOD
                                   1162 ;       CP    ( -- a )
                                   1163 ;       Pointer to top of FLASH 
      000537 05 2B                 1164         .word LINK 
                           000539  1165         LINK=.
      000539 03                    1166         .byte 3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00053A 43 50                 1167         .ascii "CP"
      00053C                       1168 CPP: 
      00053C 90 AE 00 18      [ 2] 1169         ldw y,#UCP 
      000540 1D 00 02         [ 2] 1170         subw x,#CELLL 
      000543 FF               [ 2] 1171         ldw (x),y 
      000544 81               [ 4] 1172         ret                
                                   1173 .endif ;PICATOUT_MOD
                                   1174 
                                   1175 ;       LAST    ( -- a )
                                   1176 ;       Point to last name in dictionary.
      000545 05 39                 1177         .word      LINK
                           000547  1178 LINK = . 
      000547 04                    1179         .byte      4
      000548 4C 41 53 54           1180         .ascii     "LAST"
      00054C                       1181 LAST:
      00054C 90 AE 00 1A      [ 2] 1182 	LDW Y,#ULAST 
      000550 1D 00 02         [ 2] 1183 	SUBW X,#2
      000553 FF               [ 2] 1184         LDW (X),Y
      000554 81               [ 4] 1185         RET
                                   1186 
                           000001  1187 .if PICATOUT_MOD
      000555 05 47                 1188         .word LINK 
                           000557  1189         LINK=.
      000557 06                    1190         .byte 6
      000558 4F 46 46 53 45 54     1191         .ascii "OFFSET" 
      00055E                       1192 OFFSET: 
      00055E 1D 00 02         [ 2] 1193         subw x,#CELLL
      000561 90 AE 00 1C      [ 2] 1194         ldw y,#UOFFSET 
      000565 FF               [ 2] 1195         ldw (x),y 
      000566 81               [ 4] 1196         ret 
                                   1197 
                                   1198 ; adjust jump address adding OFFSET
                                   1199 ; ADR-ADJ ( a -- a+offset )
      000567                       1200 ADRADJ: 
      000567 CD 05 5E         [ 4] 1201         call OFFSET 
      00056A CD 03 4B         [ 4] 1202         call AT 
      00056D CC 05 C8         [ 2] 1203         jp PLUS 
                                   1204 
                                   1205 .endif ; PICATOUT_MOD
                                   1206 
                                   1207 ;; Common functions
                                   1208 
                                   1209 ;       ?DUP    ( w -- w w | 0 )
                                   1210 ;       Dup tos if its is not zero.
      000570 05 57                 1211         .word      LINK
                           000572  1212 LINK = . 
      000572 04                    1213         .byte      4
      000573 3F 44 55 50           1214         .ascii     "?DUP"
      000577                       1215 QDUP:
      000577 90 93            [ 1] 1216         LDW Y,X
      000579 90 FE            [ 2] 1217 	LDW Y,(Y)
      00057B 27 04            [ 1] 1218         JREQ     QDUP1
      00057D 1D 00 02         [ 2] 1219 	SUBW X,#2
      000580 FF               [ 2] 1220         LDW (X),Y
      000581 81               [ 4] 1221 QDUP1:  RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1222 
                                   1223 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1224 ;       Rot 3rd item to top.
      000582 05 72                 1225         .word      LINK
                           000584  1226 LINK = . 
      000584 03                    1227         .byte      3
      000585 52 4F 54              1228         .ascii     "ROT"
      000588                       1229 ROT:
                           000001  1230 .if PICATOUT_MOD
      000588 90 93            [ 1] 1231         ldw y,x 
      00058A 90 FE            [ 2] 1232         ldw y,(y)
      00058C 90 89            [ 2] 1233         pushw y 
      00058E 90 93            [ 1] 1234         ldw y,x 
      000590 90 EE 04         [ 2] 1235         ldw y,(4,y)
      000593 FF               [ 2] 1236         ldw (x),y 
      000594 90 93            [ 1] 1237         ldw y,x 
      000596 90 EE 02         [ 2] 1238         ldw y,(2,y)
      000599 EF 04            [ 2] 1239         ldw (4,x),y 
      00059B 90 85            [ 2] 1240         popw y 
      00059D EF 02            [ 2] 1241         ldw (2,x),y
      00059F 81               [ 4] 1242         ret 
                           000000  1243 .else 
                                   1244         LDW Y,X
                                   1245 	LDW Y,(4,Y)
                                   1246 	LDW YTEMP,Y
                                   1247         LDW Y,X
                                   1248         LDW Y,(2,Y)
                                   1249         LDW XTEMP,Y
                                   1250         LDW Y,X
                                   1251         LDW Y,(Y)
                                   1252         LDW (2,X),Y
                                   1253         LDW Y,XTEMP
                                   1254         LDW (4,X),Y
                                   1255         LDW Y,YTEMP
                                   1256         LDW (X),Y
                                   1257         RET
                                   1258 .endif 
                                   1259 
                                   1260 ;       2DROP   ( w w -- )
                                   1261 ;       Discard two items on stack.
      0005A0 05 84                 1262         .word      LINK
                           0005A2  1263 LINK = . 
      0005A2 05                    1264         .byte      5
      0005A3 32 44 52 4F 50        1265         .ascii     "2DROP"
      0005A8                       1266 DDROP:
      0005A8 1C 00 04         [ 2] 1267         ADDW X,#4
      0005AB 81               [ 4] 1268         RET
                                   1269 
                                   1270 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1271 ;       Duplicate top two items.
      0005AC 05 A2                 1272         .word      LINK
                           0005AE  1273 LINK = . 
      0005AE 04                    1274         .byte      4
      0005AF 32 44 55 50           1275         .ascii     "2DUP"
      0005B3                       1276 DDUP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005B3 1D 00 04         [ 2] 1277         SUBW X,#4
      0005B6 90 93            [ 1] 1278         LDW Y,X
      0005B8 90 EE 06         [ 2] 1279         LDW Y,(6,Y)
      0005BB EF 02            [ 2] 1280         LDW (2,X),Y
      0005BD 90 93            [ 1] 1281         LDW Y,X
      0005BF 90 EE 04         [ 2] 1282         LDW Y,(4,Y)
      0005C2 FF               [ 2] 1283         LDW (X),Y
      0005C3 81               [ 4] 1284         RET
                                   1285 
                                   1286 ;       +       ( w w -- sum )
                                   1287 ;       Add top two items.
      0005C4 05 AE                 1288         .word      LINK
                           0005C6  1289 LINK = . 
      0005C6 01                    1290         .byte      1
      0005C7 2B                    1291         .ascii     "+"
      0005C8                       1292 PLUS:
      0005C8 90 93            [ 1] 1293         LDW Y,X
      0005CA 90 FE            [ 2] 1294         LDW Y,(Y)
      0005CC 90 BF 20         [ 2] 1295         LDW YTEMP,Y
      0005CF 1C 00 02         [ 2] 1296         ADDW X,#2
      0005D2 90 93            [ 1] 1297         LDW Y,X
      0005D4 90 FE            [ 2] 1298         LDW Y,(Y)
      0005D6 72 B9 00 20      [ 2] 1299         ADDW Y,YTEMP
      0005DA FF               [ 2] 1300         LDW (X),Y
      0005DB 81               [ 4] 1301         RET
                                   1302 
                                   1303 ;       NOT     ( w -- w )
                                   1304 ;       One's complement of tos.
      0005DC 05 C6                 1305         .word      LINK
                           0005DE  1306 LINK = . 
      0005DE 03                    1307         .byte      3
      0005DF 4E 4F 54              1308         .ascii     "NOT"
      0005E2                       1309 INVER:
      0005E2 90 93            [ 1] 1310         LDW Y,X
      0005E4 90 FE            [ 2] 1311         LDW Y,(Y)
      0005E6 90 53            [ 2] 1312         CPLW Y
      0005E8 FF               [ 2] 1313         LDW (X),Y
      0005E9 81               [ 4] 1314         RET
                                   1315 
                                   1316 ;       NEGATE  ( n -- -n )
                                   1317 ;       Two's complement of tos.
      0005EA 05 DE                 1318         .word      LINK
                           0005EC  1319 LINK = . 
      0005EC 06                    1320         .byte      6
      0005ED 4E 45 47 41 54 45     1321         .ascii     "NEGATE"
      0005F3                       1322 NEGAT:
      0005F3 90 93            [ 1] 1323         LDW Y,X
      0005F5 90 FE            [ 2] 1324         LDW Y,(Y)
      0005F7 90 50            [ 2] 1325         NEGW Y
      0005F9 FF               [ 2] 1326         LDW (X),Y
      0005FA 81               [ 4] 1327         RET
                                   1328 
                                   1329 ;       DNEGATE ( d -- -d )
                                   1330 ;       Two's complement of top double.
      0005FB 05 EC                 1331         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                           0005FD  1332 LINK = . 
      0005FD 07                    1333         .byte      7
      0005FE 44 4E 45 47 41 54 45  1334         .ascii     "DNEGATE"
      000605                       1335 DNEGA:
      000605 90 93            [ 1] 1336         LDW Y,X
      000607 90 FE            [ 2] 1337 	LDW Y,(Y)
      000609 90 53            [ 2] 1338         CPLW Y     
      00060B 90 BF 20         [ 2] 1339 	LDW YTEMP,Y
      00060E 90 93            [ 1] 1340         LDW Y,X
      000610 90 EE 02         [ 2] 1341         LDW Y,(2,Y)
      000613 90 53            [ 2] 1342         CPLW Y
      000615 90 5C            [ 2] 1343         INCW Y
      000617 EF 02            [ 2] 1344         LDW (2,X),Y
      000619 90 BE 20         [ 2] 1345         LDW Y,YTEMP
      00061C 24 02            [ 1] 1346         JRNC DN1 
      00061E 90 5C            [ 2] 1347         INCW Y
      000620 FF               [ 2] 1348 DN1:    LDW (X),Y
      000621 81               [ 4] 1349         RET
                                   1350 
                                   1351 ;       -       ( n1 n2 -- n1-n2 )
                                   1352 ;       Subtraction.
      000622 05 FD                 1353         .word      LINK
                           000624  1354 LINK = . 
      000624 01                    1355         .byte      1
      000625 2D                    1356         .ascii     "-"
      000626                       1357 SUBB:
      000626 90 93            [ 1] 1358         LDW Y,X
      000628 90 FE            [ 2] 1359         LDW Y,(Y)
      00062A 90 BF 20         [ 2] 1360         LDW YTEMP,Y
      00062D 1C 00 02         [ 2] 1361         ADDW X,#2
      000630 90 93            [ 1] 1362         LDW Y,X
      000632 90 FE            [ 2] 1363         LDW Y,(Y)
      000634 72 B2 00 20      [ 2] 1364         SUBW Y,YTEMP
      000638 FF               [ 2] 1365         LDW (X),Y
      000639 81               [ 4] 1366         RET
                                   1367 
                                   1368 ;       ABS     ( n -- n )
                                   1369 ;       Return  absolute value of n.
      00063A 06 24                 1370         .word      LINK
                           00063C  1371 LINK = . 
      00063C 03                    1372         .byte      3
      00063D 41 42 53              1373         .ascii     "ABS"
      000640                       1374 ABSS:
      000640 90 93            [ 1] 1375         LDW Y,X
      000642 90 FE            [ 2] 1376 	LDW Y,(Y)
      000644 2A 03            [ 1] 1377         JRPL     AB1     ;negate:
      000646 90 50            [ 2] 1378         NEGW     Y     ;else negate hi byte
      000648 FF               [ 2] 1379         LDW (X),Y
      000649 81               [ 4] 1380 AB1:    RET
                                   1381 
                                   1382 ;       =       ( w w -- t )
                                   1383 ;       Return true if top two are =al.
      00064A 06 3C                 1384         .word      LINK
                           00064C  1385 LINK = . 
      00064C 01                    1386         .byte      1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00064D 3D                    1387         .ascii     "="
      00064E                       1388 EQUAL:
      00064E A6 FF            [ 1] 1389         LD A,#0xFF  ;true
      000650 90 93            [ 1] 1390         LDW Y,X    ;D = n2
      000652 90 FE            [ 2] 1391         LDW Y,(Y)
      000654 90 BF 20         [ 2] 1392         LDW YTEMP,Y
      000657 1C 00 02         [ 2] 1393         ADDW X,#2
      00065A 90 93            [ 1] 1394         LDW Y,X
      00065C 90 FE            [ 2] 1395         LDW Y,(Y)
      00065E 90 B3 20         [ 2] 1396         CPW Y,YTEMP     ;if n2 <> n1
      000661 27 01            [ 1] 1397         JREQ     EQ1
      000663 4F               [ 1] 1398         CLR A
      000664 F7               [ 1] 1399 EQ1:    LD (X),A
      000665 E7 01            [ 1] 1400         LD (1,X),A
      000667 81               [ 4] 1401 	RET     
                                   1402 
                                   1403 ;       U<      ( u u -- t )
                                   1404 ;       Unsigned compare of top two items.
      000668 06 4C                 1405         .word      LINK
                           00066A  1406 LINK = . 
      00066A 02                    1407         .byte      2
      00066B 55 3C                 1408         .ascii     "U<"
      00066D                       1409 ULESS:
      00066D A6 FF            [ 1] 1410         LD A,#0xFF  ;true
      00066F 90 93            [ 1] 1411         LDW Y,X    ;D = n2
      000671 90 FE            [ 2] 1412         LDW Y,(Y)
      000673 90 BF 20         [ 2] 1413         LDW YTEMP,Y
      000676 1C 00 02         [ 2] 1414         ADDW X,#2
      000679 90 93            [ 1] 1415         LDW Y,X
      00067B 90 FE            [ 2] 1416         LDW Y,(Y)
      00067D 90 B3 20         [ 2] 1417         CPW Y,YTEMP     ;if n2 <> n1
      000680 25 01            [ 1] 1418         JRULT     ULES1
      000682 4F               [ 1] 1419         CLR A
      000683 F7               [ 1] 1420 ULES1:  LD (X),A
      000684 E7 01            [ 1] 1421         LD (1,X),A
      000686 81               [ 4] 1422 	RET     
                                   1423 
                                   1424 ;       <       ( n1 n2 -- t )
                                   1425 ;       Signed compare of top two items.
      000687 06 6A                 1426         .word      LINK
                           000689  1427 LINK = . 
      000689 01                    1428         .byte      1
      00068A 3C                    1429         .ascii     "<"
      00068B                       1430 LESS:
      00068B A6 FF            [ 1] 1431         LD A,#0xFF  ;true
      00068D 90 93            [ 1] 1432         LDW Y,X    ;D = n2
      00068F 90 FE            [ 2] 1433         LDW Y,(Y)
      000691 90 BF 20         [ 2] 1434         LDW YTEMP,Y
      000694 1C 00 02         [ 2] 1435         ADDW X,#2
      000697 90 93            [ 1] 1436         LDW Y,X
      000699 90 FE            [ 2] 1437         LDW Y,(Y)
      00069B 90 B3 20         [ 2] 1438         CPW Y,YTEMP     ;if n2 <> n1
      00069E 2F 01            [ 1] 1439         JRSLT     LT1
      0006A0 4F               [ 1] 1440         CLR A
      0006A1 F7               [ 1] 1441 LT1:    LD (X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006A2 E7 01            [ 1] 1442         LD (1,X),A
      0006A4 81               [ 4] 1443 	RET     
                                   1444 
                                   1445 ;       MAX     ( n n -- n )
                                   1446 ;       Return greater of two top items.
      0006A5 06 89                 1447         .word      LINK
                           0006A7  1448 LINK = . 
      0006A7 03                    1449         .byte      3
      0006A8 4D 41 58              1450         .ascii     "MAX"
      0006AB                       1451 MAX:
      0006AB 90 93            [ 1] 1452         LDW Y,X    ;D = n2
      0006AD 90 EE 02         [ 2] 1453         LDW Y,(2,Y)
      0006B0 90 BF 20         [ 2] 1454         LDW YTEMP,Y
      0006B3 90 93            [ 1] 1455         LDW Y,X
      0006B5 90 FE            [ 2] 1456         LDW Y,(Y)
      0006B7 90 B3 20         [ 2] 1457         CPW Y,YTEMP     ;if n2 <> n1
      0006BA 2F 02            [ 1] 1458         JRSLT     MAX1
      0006BC EF 02            [ 2] 1459         LDW (2,X),Y
      0006BE 1C 00 02         [ 2] 1460 MAX1:   ADDW X,#2
      0006C1 81               [ 4] 1461 	RET     
                                   1462 
                                   1463 ;       MIN     ( n n -- n )
                                   1464 ;       Return smaller of top two items.
      0006C2 06 A7                 1465         .word      LINK
                           0006C4  1466 LINK = . 
      0006C4 03                    1467         .byte      3
      0006C5 4D 49 4E              1468         .ascii     "MIN"
      0006C8                       1469 MIN:
      0006C8 90 93            [ 1] 1470         LDW Y,X    ;D = n2
      0006CA 90 EE 02         [ 2] 1471         LDW Y,(2,Y)
      0006CD 90 BF 20         [ 2] 1472         LDW YTEMP,Y
      0006D0 90 93            [ 1] 1473         LDW Y,X
      0006D2 90 FE            [ 2] 1474         LDW Y,(Y)
      0006D4 90 B3 20         [ 2] 1475         CPW Y,YTEMP     ;if n2 <> n1
      0006D7 2C 02            [ 1] 1476         JRSGT     MIN1
      0006D9 EF 02            [ 2] 1477         LDW (2,X),Y
      0006DB 1C 00 02         [ 2] 1478 MIN1:	ADDW X,#2
      0006DE 81               [ 4] 1479 	RET     
                                   1480 
                                   1481 ;       WITHIN  ( u ul uh -- t )
                                   1482 ;       Return true if u is within
                                   1483 ;       range of ul and uh. ( ul <= u < uh )
      0006DF 06 C4                 1484         .word      LINK
                           0006E1  1485 LINK = . 
      0006E1 06                    1486         .byte      6
      0006E2 57 49 54 48 49 4E     1487         .ascii     "WITHIN"
      0006E8                       1488 WITHI:
      0006E8 CD 04 1C         [ 4] 1489         CALL     OVER
      0006EB CD 06 26         [ 4] 1490         CALL     SUBB
      0006EE CD 03 BB         [ 4] 1491         CALL     TOR
      0006F1 CD 06 26         [ 4] 1492         CALL     SUBB
      0006F4 CD 03 9C         [ 4] 1493         CALL     RFROM
      0006F7 CC 06 6D         [ 2] 1494         JP     ULESS
                                   1495 
                                   1496 ;; Divide
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1497 
                                   1498 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1499 ;       Unsigned divide of a double by a
                                   1500 ;       single. Return mod and quotient.
      0006FA 06 E1                 1501         .word      LINK
                           0006FC  1502 LINK = . 
      0006FC 06                    1503         .byte      6
      0006FD 55 4D 2F 4D 4F 44     1504         .ascii     "UM/MOD"
      000703                       1505 UMMOD:
      000703 BF 1E            [ 2] 1506 	LDW XTEMP,X	; save stack pointer
      000705 FE               [ 2] 1507 	LDW X,(X)	; un
      000706 BF 20            [ 2] 1508 	LDW YTEMP,X     ; save un
      000708 90 BE 1E         [ 2] 1509 	LDW Y,XTEMP	; stack pointer
      00070B 90 EE 04         [ 2] 1510 	LDW Y,(4,Y)     ; Y=udl
      00070E BE 1E            [ 2] 1511 	LDW X,XTEMP
      000710 EE 02            [ 2] 1512 	LDW X,(2,X)	; X=udh
      000712 B3 20            [ 2] 1513 	CPW X,YTEMP
      000714 23 0F            [ 2] 1514 	JRULE MMSM1
      000716 BE 1E            [ 2] 1515 	LDW X,XTEMP
      000718 1C 00 02         [ 2] 1516 	ADDW X,#2	; pop off 1 level
      00071B 90 AE FF FF      [ 2] 1517 	LDW Y,#0xFFFF
      00071F FF               [ 2] 1518 	LDW (X),Y
      000720 90 5F            [ 1] 1519 	CLRW Y
      000722 EF 02            [ 2] 1520 	LDW (2,X),Y
      000724 81               [ 4] 1521 	RET
      000725                       1522 MMSM1:
                           000001  1523 .if  PICATOUT_MOD 
                                   1524 ; take advantage of divw x,y when udh==0
      000725 5D               [ 2] 1525         tnzw x  ; is udh==0?
      000726 26 11            [ 1] 1526         jrne MMSM2 
      000728 93               [ 1] 1527         ldw x,y    ;udl 
      000729 90 BE 20         [ 2] 1528         ldw y,YTEMP ; divisor 
      00072C 65               [ 2] 1529         divw x,y 
      00072D 89               [ 2] 1530         pushw x     ; quotient 
      00072E BE 1E            [ 2] 1531         ldw x,XTEMP 
      000730 1C 00 02         [ 2] 1532         addw x,#CELLL 
      000733 EF 02            [ 2] 1533         ldw (2,x),y  ; ur
      000735 90 85            [ 2] 1534         popw y 
      000737 FF               [ 2] 1535         ldw (x),y ; uq 
      000738 81               [ 4] 1536         ret 
      000739                       1537 MMSM2:        
                                   1538 .endif 
      000739 A6 11            [ 1] 1539 	LD A,#17	; loop count
      00073B                       1540 MMSM3:
      00073B B3 20            [ 2] 1541 	CPW X,YTEMP	; compare udh to un
      00073D 25 04            [ 1] 1542 	JRULT MMSM4	; can't subtract
      00073F 72 B0 00 20      [ 2] 1543 	SUBW X,YTEMP	; can subtract
      000743                       1544 MMSM4:
      000743 8C               [ 1] 1545 	CCF	; quotient bit
      000744 90 59            [ 2] 1546 	RLCW Y	; rotate into quotient
      000746 59               [ 2] 1547 	RLCW X	; rotate into remainder
      000747 4A               [ 1] 1548 	DEC A	; repeat
      000748 22 F1            [ 1] 1549 	JRUGT MMSM3
      00074A 57               [ 2] 1550 	SRAW X
      00074B BF 20            [ 2] 1551 	LDW YTEMP,X	; done, save remainder
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00074D BE 1E            [ 2] 1552 	LDW X,XTEMP
      00074F 1C 00 02         [ 2] 1553 	ADDW X,#2	; drop
      000752 FF               [ 2] 1554 	LDW (X),Y
      000753 90 BE 20         [ 2] 1555 	LDW Y,YTEMP	; save quotient
      000756 EF 02            [ 2] 1556 	LDW (2,X),Y
      000758 81               [ 4] 1557 	RET
                                   1558 	
                                   1559 ;       M/MOD   ( d n -- r q )
                                   1560 ;       Signed floored divide of double by
                                   1561 ;       single. Return mod and quotient.
      000759 06 FC                 1562         .word      LINK
                           00075B  1563 LINK = . 
      00075B 05                    1564         .byte      5
      00075C 4D 2F 4D 4F 44        1565         .ascii     "M/MOD"
      000761                       1566 MSMOD:  
      000761 CD 03 F2         [ 4] 1567         CALL	DUPP
      000764 CD 04 2B         [ 4] 1568         CALL	ZLESS
      000767 CD 03 F2         [ 4] 1569         CALL	DUPP
      00076A CD 03 BB         [ 4] 1570         CALL	TOR
      00076D CD 02 F6         [ 4] 1571         CALL	QBRAN
      000770 07 7E                 1572         .word	MMOD1
      000772 CD 05 F3         [ 4] 1573         CALL	NEGAT
      000775 CD 03 BB         [ 4] 1574         CALL	TOR
      000778 CD 06 05         [ 4] 1575         CALL	DNEGA
      00077B CD 03 9C         [ 4] 1576         CALL	RFROM
      00077E CD 03 BB         [ 4] 1577 MMOD1:	CALL	TOR
      000781 CD 03 F2         [ 4] 1578         CALL	DUPP
      000784 CD 04 2B         [ 4] 1579         CALL	ZLESS
      000787 CD 02 F6         [ 4] 1580         CALL	QBRAN
      00078A 07 92                 1581         .word	MMOD2
      00078C CD 03 AF         [ 4] 1582         CALL	RAT
      00078F CD 05 C8         [ 4] 1583         CALL	PLUS
      000792 CD 03 9C         [ 4] 1584 MMOD2:	CALL	RFROM
      000795 CD 07 03         [ 4] 1585         CALL	UMMOD
      000798 CD 03 9C         [ 4] 1586         CALL	RFROM
      00079B CD 02 F6         [ 4] 1587         CALL	QBRAN
      00079E 07 A9                 1588         .word	MMOD3
      0007A0 CD 04 02         [ 4] 1589         CALL	SWAPP
      0007A3 CD 05 F3         [ 4] 1590         CALL	NEGAT
      0007A6 CD 04 02         [ 4] 1591         CALL	SWAPP
      0007A9 81               [ 4] 1592 MMOD3:	RET
                                   1593 
                                   1594 ;       /MOD    ( n n -- r q )
                                   1595 ;       Signed divide. Return mod and quotient.
      0007AA 07 5B                 1596         .word      LINK
                           0007AC  1597 LINK = . 
      0007AC 04                    1598         .byte      4
      0007AD 2F 4D 4F 44           1599         .ascii     "/MOD"
      0007B1                       1600 SLMOD:
      0007B1 CD 04 1C         [ 4] 1601         CALL	OVER
      0007B4 CD 04 2B         [ 4] 1602         CALL	ZLESS
      0007B7 CD 04 02         [ 4] 1603         CALL	SWAPP
      0007BA CC 07 61         [ 2] 1604         JP	MSMOD
                                   1605 
                                   1606 ;       MOD     ( n n -- r )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1607 ;       Signed divide. Return mod only.
      0007BD 07 AC                 1608         .word      LINK
                           0007BF  1609 LINK = . 
      0007BF 03                    1610         .byte      3
      0007C0 4D 4F 44              1611         .ascii     "MOD"
      0007C3                       1612 MODD:
      0007C3 CD 07 B1         [ 4] 1613 	CALL	SLMOD
      0007C6 CC 03 E8         [ 2] 1614 	JP	DROP
                                   1615 
                                   1616 ;       /       ( n n -- q )
                                   1617 ;       Signed divide. Return quotient only.
      0007C9 07 BF                 1618         .word      LINK
                           0007CB  1619 LINK = . 
      0007CB 01                    1620         .byte      1
      0007CC 2F                    1621         .ascii     "/"
      0007CD                       1622 SLASH:
      0007CD CD 07 B1         [ 4] 1623         CALL	SLMOD
      0007D0 CD 04 02         [ 4] 1624         CALL	SWAPP
      0007D3 CC 03 E8         [ 2] 1625         JP	DROP
                                   1626 
                                   1627 ;; Multiply
                                   1628 
                                   1629 ;       UM*     ( u u -- ud )
                                   1630 ;       Unsigned multiply. Return double product.
      0007D6 07 CB                 1631         .word      LINK
                           0007D8  1632 LINK = . 
      0007D8 03                    1633         .byte      3
      0007D9 55 4D 2A              1634         .ascii     "UM*"
      0007DC                       1635 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1636 .if PICATOUT_MOD 
                                   1637 ; take advantage of SP addressing modes
                                   1638 ; these PRODx in RAM are not required
                                   1639 ; the product is kept on stack as local variable 
                                   1640         ;; bytes offset on data stack 
                           000002  1641         da=2 
                           000003  1642         db=3 
                           000000  1643         dc=0 
                           000001  1644         dd=1 
                                   1645         ;; product bytes offset on return stack 
                           000001  1646         UD1=1  ; ud bits 31..24
                           000002  1647         UD2=2  ; ud bits 23..16
                           000003  1648         UD3=3  ; ud bits 15..8 
                           000004  1649         UD4=4  ; ud bits 7..0 
                                   1650         ;; local variable for product set to zero   
      0007DC 90 5F            [ 1] 1651         clrw y 
      0007DE 90 89            [ 2] 1652         pushw y  ; bits 15..0
      0007E0 90 89            [ 2] 1653         pushw y  ; bits 31..16 
      0007E2 E6 03            [ 1] 1654         ld a,(db,x) ; b 
      0007E4 90 97            [ 1] 1655         ld yl,a 
      0007E6 E6 01            [ 1] 1656         ld a,(dd,x)   ; d
      0007E8 90 42            [ 4] 1657         mul y,a    ; b*d  
      0007EA 17 03            [ 2] 1658         ldw (UD3,sp),y ; lowest weight product 
      0007EC E6 03            [ 1] 1659         ld a,(db,x)
      0007EE 90 97            [ 1] 1660         ld yl,a 
      0007F0 E6 00            [ 1] 1661         ld a,(dc,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      0007F2 90 42            [ 4] 1662         mul y,a  ; b*c 
                                   1663         ;;; do the partial sum 
      0007F4 72 F9 02         [ 2] 1664         addw y,(UD2,sp)
      0007F7 4F               [ 1] 1665         clr a 
      0007F8 49               [ 1] 1666         rlc a
      0007F9 6B 01            [ 1] 1667         ld (UD1,sp),a 
      0007FB 17 02            [ 2] 1668         ldw (UD2,sp),y 
      0007FD E6 02            [ 1] 1669         ld a,(da,x)
      0007FF 90 97            [ 1] 1670         ld yl,a 
      000801 E6 01            [ 1] 1671         ld a,(dd,x)
      000803 90 42            [ 4] 1672         mul y,a   ; a*d 
                                   1673         ;; do partial sum 
      000805 72 F9 02         [ 2] 1674         addw y,(UD2,sp)
      000808 4F               [ 1] 1675         clr a 
      000809 19 01            [ 1] 1676         adc a,(UD1,sp)
      00080B 6B 01            [ 1] 1677         ld (UD1,sp),a  
      00080D 17 02            [ 2] 1678         ldw (UD2,sp),y 
      00080F E6 02            [ 1] 1679         ld a,(da,x)
      000811 90 97            [ 1] 1680         ld yl,a 
      000813 E6 00            [ 1] 1681         ld a,(dc,x)
      000815 90 42            [ 4] 1682         mul y,a  ;  a*c highest weight product 
                                   1683         ;;; do partial sum 
      000817 72 F9 01         [ 2] 1684         addw y,(UD1,sp)
      00081A FF               [ 2] 1685         ldw (x),y  ; udh 
      00081B 16 03            [ 2] 1686         ldw y,(UD3,sp)
      00081D EF 02            [ 2] 1687         ldw (2,x),y  ; udl  
      00081F 5B 04            [ 2] 1688         addw sp,#4 ; drop local variable 
      000821 81               [ 4] 1689         ret  
                           000000  1690 .else
                                   1691 	LD A,(2,X)	; b
                                   1692 	LD YL,A
                                   1693 	LD A,(X)	; d
                                   1694 	MUL Y,A
                                   1695 	LDW PROD1,Y
                                   1696 	LD A,(3,X)	; a
                                   1697 	LD YL,A
                                   1698 	LD A,(X)	; d
                                   1699 	MUL Y,A
                                   1700 	LDW PROD2,Y
                                   1701 	LD A,(2,X)	; b
                                   1702 	LD YL,A
                                   1703 	LD A,(1,X)	; c
                                   1704 	MUL Y,A
                                   1705 	LDW PROD3,Y
                                   1706 	LD A,(3,X)	; a
                                   1707 	LD YL,A
                                   1708 	LD A,(1,X)	; c
                                   1709 	MUL Y,A	; least signifiant product
                                   1710 	CLR A
                                   1711 	RRWA Y
                                   1712 	LD (3,X),A	; store least significant byte
                                   1713 	ADDW Y,PROD3
                                   1714 	CLR A
                                   1715 	ADC A,#0	; save carry
                                   1716 	LD CARRY,A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1717 	ADDW Y,PROD2
                                   1718 	LD A,CARRY
                                   1719 	ADC A,#0	; add 2nd carry
                                   1720 	LD CARRY,A
                                   1721 	CLR A
                                   1722 	RRWA Y
                                   1723 	LD (2,X),A	; 2nd product byte
                                   1724 	ADDW Y,PROD1
                                   1725 	RRWA Y
                                   1726 	LD (1,X),A	; 3rd product byte
                                   1727 	RRWA Y  	; 4th product byte now in A
                                   1728 	ADC A,CARRY	; fill in carry bits
                                   1729 	LD (X),A
                                   1730 	RET
                                   1731 .endif 
                                   1732 
                                   1733 
                                   1734 ;       *       ( n n -- n )
                                   1735 ;       Signed multiply. Return single product.
      000822 07 D8                 1736         .word      LINK
                           000824  1737 LINK = . 
      000824 01                    1738         .byte      1
      000825 2A                    1739         .ascii     "*"
      000826                       1740 STAR:
      000826 CD 07 DC         [ 4] 1741 	CALL	UMSTA
      000829 CC 03 E8         [ 2] 1742 	JP	DROP
                                   1743 
                                   1744 ;       M*      ( n n -- d )
                                   1745 ;       Signed multiply. Return double product.
      00082C 08 24                 1746         .word      LINK
                           00082E  1747 LINK = . 
      00082E 02                    1748         .byte      2
      00082F 4D 2A                 1749         .ascii     "M*"
      000831                       1750 MSTAR:      
      000831 CD 05 B3         [ 4] 1751         CALL	DDUP
      000834 CD 04 67         [ 4] 1752         CALL	XORR
      000837 CD 04 2B         [ 4] 1753         CALL	ZLESS
      00083A CD 03 BB         [ 4] 1754         CALL	TOR
      00083D CD 06 40         [ 4] 1755         CALL	ABSS
      000840 CD 04 02         [ 4] 1756         CALL	SWAPP
      000843 CD 06 40         [ 4] 1757         CALL	ABSS
      000846 CD 07 DC         [ 4] 1758         CALL	UMSTA
      000849 CD 03 9C         [ 4] 1759         CALL	RFROM
      00084C CD 02 F6         [ 4] 1760         CALL	QBRAN
      00084F 08 54                 1761         .word	MSTA1
      000851 CD 06 05         [ 4] 1762         CALL	DNEGA
      000854 81               [ 4] 1763 MSTA1:	RET
                                   1764 
                                   1765 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1766 ;       Multiply n1 and n2, then divide
                                   1767 ;       by n3. Return mod and quotient.
      000855 08 2E                 1768         .word      LINK
                           000857  1769 LINK = . 
      000857 05                    1770         .byte      5
      000858 2A 2F 4D 4F 44        1771         .ascii     "*/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      00085D                       1772 SSMOD:
      00085D CD 03 BB         [ 4] 1773         CALL     TOR
      000860 CD 08 31         [ 4] 1774         CALL     MSTAR
      000863 CD 03 9C         [ 4] 1775         CALL     RFROM
      000866 CC 07 61         [ 2] 1776         JP     MSMOD
                                   1777 
                                   1778 ;       */      ( n1 n2 n3 -- q )
                                   1779 ;       Multiply n1 by n2, then divide
                                   1780 ;       by n3. Return quotient only.
      000869 08 57                 1781         .word      LINK
                           00086B  1782 LINK = . 
      00086B 02                    1783         .byte      2
      00086C 2A 2F                 1784         .ascii     "*/"
      00086E                       1785 STASL:
      00086E CD 08 5D         [ 4] 1786         CALL	SSMOD
      000871 CD 04 02         [ 4] 1787         CALL	SWAPP
      000874 CC 03 E8         [ 2] 1788         JP	DROP
                                   1789 
                                   1790 ;; Miscellaneous
                                   1791 
                                   1792 ;       CELL+   ( a -- a )
                                   1793 ;       Add cell size in byte to address.
      000877 08 6B                 1794         .word      LINK
                           000879  1795 LINK = . 
      000879 02                    1796         .byte       2
      00087A 32 2B                 1797         .ascii     "2+"
      00087C                       1798 CELLP:
      00087C 90 93            [ 1] 1799         LDW Y,X
      00087E 90 FE            [ 2] 1800 	LDW Y,(Y)
      000880 72 A9 00 02      [ 2] 1801         ADDW Y,#CELLL 
      000884 FF               [ 2] 1802         LDW (X),Y
      000885 81               [ 4] 1803         RET
                                   1804 
                                   1805 ;       CELL-   ( a -- a )
                                   1806 ;       Subtract 2 from address.
      000886 08 79                 1807         .word      LINK
                           000888  1808 LINK = . 
      000888 02                    1809         .byte       2
      000889 32 2D                 1810         .ascii     "2-"
      00088B                       1811 CELLM:
      00088B 90 93            [ 1] 1812         LDW Y,X
      00088D 90 FE            [ 2] 1813 	LDW Y,(Y)
      00088F 72 A2 00 02      [ 2] 1814         SUBW Y,#CELLL
      000893 FF               [ 2] 1815         LDW (X),Y
      000894 81               [ 4] 1816         RET
                                   1817 
                                   1818 ;       CELLS   ( n -- n )
                                   1819 ;       Multiply tos by 2.
      000895 08 88                 1820         .word      LINK
                           000897  1821 LINK = . 
      000897 02                    1822         .byte       2
      000898 32 2A                 1823         .ascii     "2*"
      00089A                       1824 CELLS:
      00089A 90 93            [ 1] 1825         LDW Y,X
      00089C 90 FE            [ 2] 1826 	LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00089E 90 58            [ 2] 1827         SLAW Y
      0008A0 FF               [ 2] 1828         LDW (X),Y
      0008A1 81               [ 4] 1829         RET
                                   1830 
                                   1831 ;       1+      ( a -- a )
                                   1832 ;       Add cell size in byte to address.
      0008A2 08 97                 1833         .word      LINK
                           0008A4  1834 LINK = . 
      0008A4 02                    1835         .byte      2
      0008A5 31 2B                 1836         .ascii     "1+"
      0008A7                       1837 ONEP:
      0008A7 90 93            [ 1] 1838         LDW Y,X
      0008A9 90 FE            [ 2] 1839 	LDW Y,(Y)
      0008AB 90 5C            [ 2] 1840         INCW Y
      0008AD FF               [ 2] 1841         LDW (X),Y
      0008AE 81               [ 4] 1842         RET
                                   1843 
                                   1844 ;       1-      ( a -- a )
                                   1845 ;       Subtract 2 from address.
      0008AF 08 A4                 1846         .word      LINK
                           0008B1  1847 LINK = . 
      0008B1 02                    1848         .byte      2
      0008B2 31 2D                 1849         .ascii     "1-"
      0008B4                       1850 ONEM:
      0008B4 90 93            [ 1] 1851         LDW Y,X
      0008B6 90 FE            [ 2] 1852 	LDW Y,(Y)
      0008B8 90 5A            [ 2] 1853         DECW Y
      0008BA FF               [ 2] 1854         LDW (X),Y
      0008BB 81               [ 4] 1855         RET
                                   1856 
                                   1857 ;  shift left n times 
                                   1858 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0008BC 08 B1                 1859         .word LINK 
                           0008BE  1860         LINK=.
      0008BE 06                    1861         .byte 6 
      0008BF 4C 53 48 49 46 54     1862         .ascii "LSHIFT"
      0008C5                       1863 LSHIFT:
      0008C5 E6 01            [ 1] 1864         ld a,(1,x)
      0008C7 1C 00 02         [ 2] 1865         addw x,#CELLL 
      0008CA 90 93            [ 1] 1866         ldw y,x 
      0008CC 90 FE            [ 2] 1867         ldw y,(y)
      0008CE                       1868 LSHIFT1:
      0008CE 4D               [ 1] 1869         tnz a 
      0008CF 27 05            [ 1] 1870         jreq LSHIFT4 
      0008D1 90 58            [ 2] 1871         sllw y 
      0008D3 4A               [ 1] 1872         dec a 
      0008D4 20 F8            [ 2] 1873         jra LSHIFT1 
      0008D6                       1874 LSHIFT4:
      0008D6 FF               [ 2] 1875         ldw (x),y 
      0008D7 81               [ 4] 1876         ret 
                                   1877 
                                   1878 ; shift right n times                 
                                   1879 ; RSHIFT (n1 n2 -- n1>>n2 )
      0008D8 08 BE                 1880         .word LINK 
                           0008DA  1881         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0008DA 06                    1882         .byte 6
      0008DB 52 53 48 49 46 54     1883         .ascii "RSHIFT"
      0008E1                       1884 RSHIFT:
      0008E1 E6 01            [ 1] 1885         ld a,(1,x)
      0008E3 1C 00 02         [ 2] 1886         addw x,#CELLL 
      0008E6 90 93            [ 1] 1887         ldw y,x 
      0008E8 90 FE            [ 2] 1888         ldw y,(y)
      0008EA                       1889 RSHIFT1:
      0008EA 4D               [ 1] 1890         tnz a 
      0008EB 27 05            [ 1] 1891         jreq RSHIFT4 
      0008ED 90 54            [ 2] 1892         srlw y 
      0008EF 4A               [ 1] 1893         dec a 
      0008F0 20 F8            [ 2] 1894         jra RSHIFT1 
      0008F2                       1895 RSHIFT4:
      0008F2 FF               [ 2] 1896         ldw (x),y 
      0008F3 81               [ 4] 1897         ret 
                                   1898 
                                   1899 
                                   1900 ;       2/      ( n -- n )
                                   1901 ;       Multiply tos by 2.
      0008F4 08 DA                 1902         .word      LINK
                           0008F6  1903 LINK = . 
      0008F6 02                    1904         .byte      2
      0008F7 32 2F                 1905         .ascii     "2/"
      0008F9                       1906 TWOSL:
      0008F9 90 93            [ 1] 1907         LDW Y,X
      0008FB 90 FE            [ 2] 1908 	LDW Y,(Y)
      0008FD 90 57            [ 2] 1909         SRAW Y
      0008FF FF               [ 2] 1910         LDW (X),Y
      000900 81               [ 4] 1911         RET
                                   1912 
                                   1913 ;       BL      ( -- 32 )
                                   1914 ;       Return 32,  blank character.
      000901 08 F6                 1915         .word      LINK
                           000903  1916 LINK = . 
      000903 02                    1917         .byte      2
      000904 42 4C                 1918         .ascii     "BL"
      000906                       1919 BLANK:
      000906 1D 00 02         [ 2] 1920         SUBW X,#2
      000909 90 AE 00 20      [ 2] 1921 	LDW Y,#32
      00090D FF               [ 2] 1922         LDW (X),Y
      00090E 81               [ 4] 1923         RET
                                   1924 
                                   1925 ;         0     ( -- 0)
                                   1926 ;         Return 0.
      00090F 09 03                 1927         .word      LINK
                           000911  1928 LINK = . 
      000911 01                    1929         .byte       1
      000912 30                    1930         .ascii     "0"
      000913                       1931 ZERO:
      000913 1D 00 02         [ 2] 1932         SUBW X,#2
      000916 90 5F            [ 1] 1933 	CLRW Y
      000918 FF               [ 2] 1934         LDW (X),Y
      000919 81               [ 4] 1935         RET
                                   1936 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1937 ;         1     ( -- 1)
                                   1938 ;         Return 1.
      00091A 09 11                 1939         .word      LINK
                           00091C  1940 LINK = . 
      00091C 01                    1941         .byte       1
      00091D 31                    1942         .ascii     "1"
      00091E                       1943 ONE:
      00091E 1D 00 02         [ 2] 1944         SUBW X,#2
      000921 90 AE 00 01      [ 2] 1945 	LDW Y,#1
      000925 FF               [ 2] 1946         LDW (X),Y
      000926 81               [ 4] 1947         RET
                                   1948 
                                   1949 ;         -1    ( -- -1)
                                   1950 ;         Return 32,  blank character.
      000927 09 1C                 1951         .word      LINK
                           000929  1952 LINK = . 
      000929 02                    1953         .byte       2
      00092A 2D 31                 1954         .ascii     "-1"
      00092C                       1955 MONE:
      00092C 1D 00 02         [ 2] 1956         SUBW X,#2
      00092F 90 AE FF FF      [ 2] 1957 	LDW Y,#0xFFFF
      000933 FF               [ 2] 1958         LDW (X),Y
      000934 81               [ 4] 1959         RET
                                   1960 
                                   1961 ;       >CHAR   ( c -- c )
                                   1962 ;       Filter non-printing characters.
      000935 09 29                 1963         .word      LINK
                           000937  1964 LINK = . 
      000937 05                    1965         .byte      5
      000938 3E 43 48 41 52        1966         .ascii     ">CHAR"
      00093D                       1967 TCHAR:
                           000001  1968 .if CONVERT_TO_CODE
      00093D E6 01            [ 1] 1969         ld a,(1,x)
      00093F A1 20            [ 1] 1970         cp a,#32  
      000941 2B 05            [ 1] 1971         jrmi 1$ 
      000943 A1 7F            [ 1] 1972         cp a,#127 
      000945 2A 01            [ 1] 1973         jrpl 1$ 
      000947 81               [ 4] 1974         ret 
      000948 A6 5F            [ 1] 1975 1$:     ld a,#'_ 
      00094A E7 01            [ 1] 1976         ld (1,x),a 
      00094C 81               [ 4] 1977         ret 
                           000000  1978 .else
                                   1979         CALL     DOLIT
                                   1980         .word       0x7F
                                   1981         CALL     ANDD
                                   1982         CALL     DUPP    ;mask msb
                                   1983         CALL     DOLIT
                                   1984         .word      127
                                   1985         CALL     BLANK
                                   1986         CALL     WITHI   ;check for printable
                                   1987         CALL     QBRAN
                                   1988         .word    TCHA1
                                   1989         CALL     DROP
                                   1990         CALL     DOLIT
                                   1991         .word     0x5F		; "_"     ;replace non-printables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1992 .endif 
      00094D 81               [ 4] 1993 TCHA1:  RET
                                   1994 
                                   1995 ;       DEPTH   ( -- n )
                                   1996 ;       Return  depth of  data stack.
      00094E 09 37                 1997         .word      LINK
                           000950  1998 LINK = . 
      000950 05                    1999         .byte      5
      000951 44 45 50 54 48        2000         .ascii     "DEPTH"
      000956                       2001 DEPTH: 
      000956 90 BE 26         [ 2] 2002         LDW Y,SP0    ;save data stack ptr
      000959 BF 1E            [ 2] 2003 	LDW XTEMP,X
      00095B 72 B2 00 1E      [ 2] 2004         SUBW Y,XTEMP     ;#bytes = SP0 - X
      00095F 90 57            [ 2] 2005         SRAW Y    ;Y = #stack items
                           000001  2006 .if PICATOUT_MOD
                                   2007 ; why ? 
                                   2008 ;      	DECW Y
                                   2009 .endif 
      000961 1D 00 02         [ 2] 2010 	SUBW X,#2
      000964 FF               [ 2] 2011         LDW (X),Y     ; if neg, underflow
      000965 81               [ 4] 2012         RET
                                   2013 
                                   2014 ;       PICK    ( ... +n -- ... w )
                                   2015 ;       Copy  nth stack item to tos.
      000966 09 50                 2016         .word      LINK
                           000968  2017 LINK = . 
      000968 04                    2018         .byte      4
      000969 50 49 43 4B           2019         .ascii     "PICK"
      00096D                       2020 PICK:
      00096D 90 93            [ 1] 2021         LDW Y,X   ;D = n1
      00096F 90 FE            [ 2] 2022         LDW Y,(Y)
      000971 90 58            [ 2] 2023         SLAW Y
      000973 BF 1E            [ 2] 2024         LDW XTEMP,X
      000975 72 B9 00 1E      [ 2] 2025         ADDW Y,XTEMP
      000979 90 FE            [ 2] 2026         LDW Y,(Y)
      00097B FF               [ 2] 2027         LDW (X),Y
      00097C 81               [ 4] 2028         RET
                                   2029 
                                   2030 ;; Memory access
                                   2031 
                                   2032 ;       +!      ( n a -- )
                                   2033 ;       Add n to  contents at address a.
      00097D 09 68                 2034         .word      LINK
                           00097F  2035 LINK = . 
      00097F 02                    2036         .byte      2
      000980 2B 21                 2037         .ascii     "+!"
      000982                       2038 PSTOR:
                           000001  2039 .if CONVERT_TO_CODE
      000982 90 93            [ 1] 2040         ldw y,x 
      000984 90 FE            [ 2] 2041         ldw y,(y)
      000986 90 BF 20         [ 2] 2042         ldw YTEMP,y  ; address
      000989 90 FE            [ 2] 2043         ldw y,(y)  
      00098B 90 89            [ 2] 2044         pushw y  ; value at address 
      00098D 90 93            [ 1] 2045         ldw y,x 
      00098F 90 EE 02         [ 2] 2046         ldw y,(2,y) ; n 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000992 72 F9 01         [ 2] 2047         addw y,(1,sp) ; n+value
      000995 91 CF 20         [ 5] 2048         ldw [YTEMP],y ;  a!
      000998 90 85            [ 2] 2049         popw y    ;drop local var
      00099A 1C 00 04         [ 2] 2050         addw x,#4 ; DDROP 
      00099D 81               [ 4] 2051         ret 
                           000000  2052 .else
                                   2053         CALL	SWAPP
                                   2054         CALL	OVER
                                   2055         CALL	AT
                                   2056         CALL	PLUS
                                   2057         CALL	SWAPP
                                   2058         JP	STORE
                                   2059 .endif 
                                   2060 
                                   2061 ;       2!      ( d a -- )
                                   2062 ;       Store  double integer to address a.
      00099E 09 7F                 2063         .word      LINK
                           0009A0  2064 LINK = . 
      0009A0 02                    2065         .byte      2
      0009A1 32 21                 2066         .ascii     "2!"
      0009A3                       2067 DSTOR:
                           000001  2068 .if CONVERT_TO_CODE
      0009A3 90 93            [ 1] 2069         ldw y,x 
      0009A5 90 FE            [ 2] 2070         ldw y,(y)
      0009A7 90 BF 20         [ 2] 2071         ldw YTEMP,y ; address 
      0009AA 1C 00 02         [ 2] 2072         addw x,#CELLL ; drop a 
      0009AD 90 93            [ 1] 2073         ldw y,x 
      0009AF 90 FE            [ 2] 2074         ldw y,(y) ; hi word 
      0009B1 89               [ 2] 2075         pushw x 
      0009B2 EE 02            [ 2] 2076         ldw x,(2,x) ; lo word 
      0009B4 91 CF 20         [ 5] 2077         ldw [YTEMP],y
      0009B7 90 93            [ 1] 2078         ldw y,x 
      0009B9 AE 00 02         [ 2] 2079         ldw x,#2 
      0009BC 92 DF 20         [ 5] 2080         ldw ([YTEMP],x),y 
      0009BF 85               [ 2] 2081         popw x 
      0009C0 1C 00 04         [ 2] 2082         addw x,#4 ; DDROP 
      0009C3 81               [ 4] 2083         ret 
                           000000  2084 .else
                                   2085         CALL	SWAPP
                                   2086         CALL	OVER
                                   2087         CALL	STORE
                                   2088         CALL	CELLP
                                   2089         JP	STORE
                                   2090 .endif 
                                   2091 ;       2@      ( a -- d )
                                   2092 ;       Fetch double integer from address a.
      0009C4 09 A0                 2093         .word      LINK
                           0009C6  2094 LINK = . 
      0009C6 02                    2095         .byte      2
      0009C7 32 40                 2096         .ascii     "2@"
      0009C9                       2097 DAT:
                           000001  2098 .if CONVERT_TO_CODE
      0009C9 90 93            [ 1] 2099         ldw y,x 
      0009CB 90 FE            [ 2] 2100         ldw y,(y) ;address 
      0009CD 90 BF 20         [ 2] 2101         ldw YTEMP,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0009D0 1D 00 02         [ 2] 2102         subw x,#CELLL ; space for udh 
      0009D3 91 CE 20         [ 5] 2103         ldw y,[YTEMP] ; udh 
      0009D6 FF               [ 2] 2104         ldw (x),y 
      0009D7 90 AE 00 02      [ 2] 2105         ldw y,#2
      0009DB 91 DE 20         [ 5] 2106         ldw y,([YTEMP],y) ; udl 
      0009DE EF 02            [ 2] 2107         ldw (2,x),y
      0009E0 81               [ 4] 2108         ret 
                           000000  2109 .else 
                                   2110         CALL	DUPP
                                   2111         CALL	CELLP
                                   2112         CALL	AT
                                   2113         CALL	SWAPP
                                   2114         JP	AT
                                   2115 .endif 
                                   2116 
                                   2117 ;       COUNT   ( b -- b +n )
                                   2118 ;       Return count byte of a string
                                   2119 ;       and add 1 to byte address.
      0009E1 09 C6                 2120         .word      LINK
                           0009E3  2121 LINK = . 
      0009E3 05                    2122         .byte      5
      0009E4 43 4F 55 4E 54        2123         .ascii     "COUNT"
      0009E9                       2124 COUNT:
                           000001  2125 .if CONVERT_TO_CODE
      0009E9 90 93            [ 1] 2126         ldw y,x 
      0009EB 90 FE            [ 2] 2127         ldw y,(y) ; address 
      0009ED 90 F6            [ 1] 2128         ld a,(y)  ; count 
      0009EF 90 5C            [ 2] 2129         incw y 
      0009F1 FF               [ 2] 2130         ldw (x),y 
      0009F2 1D 00 02         [ 2] 2131         subw x,#CELLL 
      0009F5 E7 01            [ 1] 2132         ld (1,x),a 
      0009F7 7F               [ 1] 2133         clr (x)
      0009F8 81               [ 4] 2134         ret 
                           000000  2135 .else 
                                   2136         CALL     DUPP
                                   2137         CALL     ONEP
                                   2138         CALL     SWAPP
                                   2139         JP     CAT
                                   2140 .endif 
                                   2141 
                                   2142 ;       HERE    ( -- a )
                                   2143 ;       Return  top of  variables
      0009F9 09 E3                 2144         .word      LINK
                           0009FB  2145 LINK = . 
      0009FB 04                    2146         .byte      4
      0009FC 48 45 52 45           2147         .ascii     "HERE"
      000A00                       2148 HERE:
                           000001  2149 .if CONVERT_TO_CODE
      000A00 90 AE 00 16      [ 2] 2150       	ldw y,#UVP 
      000A04 90 FE            [ 2] 2151         ldw y,(y)
      000A06 1D 00 02         [ 2] 2152         subw x,#CELLL 
      000A09 FF               [ 2] 2153         ldw (x),y 
      000A0A 81               [ 4] 2154         ret 
                           000000  2155 .else
                                   2156         CALL     VPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2157         JP     AT
                                   2158 .endif 
                                   2159 
                                   2160 ;       PAD     ( -- a )
                                   2161 ;       Return address of text buffer
                                   2162 ;       above  code dictionary.
      000A0B 09 FB                 2163         .word      LINK
                           000A0D  2164 LINK = . 
      000A0D 03                    2165         .byte      3
      000A0E 50 41 44              2166         .ascii     "PAD"
      000A11                       2167 PAD:
      000A11 CD 0A 00         [ 4] 2168         CALL     HERE
      000A14 CD 02 C3         [ 4] 2169         CALL     DOLIT
      000A17 00 50                 2170         .word      80
      000A19 CC 05 C8         [ 2] 2171         JP     PLUS
                                   2172 
                                   2173 ;       TIB     ( -- a )
                                   2174 ;       Return address of terminal input buffer.
      000A1C 0A 0D                 2175         .word      LINK
                           000A1E  2176 LINK = . 
      000A1E 03                    2177         .byte      3
      000A1F 54 49 42              2178         .ascii     "TIB"
      000A22                       2179 TIB:
      000A22 CD 04 DD         [ 4] 2180         CALL     NTIB
      000A25 CD 08 7C         [ 4] 2181         CALL     CELLP
      000A28 CC 03 4B         [ 2] 2182         JP     AT
                                   2183 
                                   2184 ;       @EXECUTE        ( a -- )
                                   2185 ;       Execute vector stored in address a.
      000A2B 0A 1E                 2186         .word      LINK
                           000A2D  2187 LINK = . 
      000A2D 08                    2188         .byte      8
      000A2E 40 45 58 45 43 55 54  2189         .ascii     "@EXECUTE"
             45
      000A36                       2190 ATEXE:
      000A36 CD 03 4B         [ 4] 2191         CALL     AT
      000A39 CD 05 77         [ 4] 2192         CALL     QDUP    ;?address or zero
      000A3C CD 02 F6         [ 4] 2193         CALL     QBRAN
      000A3F 0A 44                 2194         .word      EXE1
      000A41 CD 03 1D         [ 4] 2195         CALL     EXECU   ;execute if non-zero
      000A44 81               [ 4] 2196 EXE1:   RET     ;do nothing if zero
                                   2197 
                                   2198 ;       CMOVE   ( b1 b2 u -- )
                                   2199 ;       Copy u bytes from b1 to b2.
      000A45 0A 2D                 2200         .word      LINK
                           000A47  2201 LINK = . 
      000A47 05                    2202         .byte      5
      000A48 43 4D 4F 56 45        2203         .ascii     "CMOVE"
      000A4D                       2204 CMOVE:
      000A4D CD 03 BB         [ 4] 2205         CALL	TOR
      000A50 CD 03 0D         [ 4] 2206         CALL	BRAN
      000A53 0A 6D                 2207         .word	CMOV2
      000A55 CD 03 BB         [ 4] 2208 CMOV1:	CALL	TOR
      000A58 CD 03 F2         [ 4] 2209         CALL	DUPP
      000A5B CD 03 69         [ 4] 2210         CALL	CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A5E CD 03 AF         [ 4] 2211         CALL	RAT
      000A61 CD 03 58         [ 4] 2212         CALL	CSTOR
      000A64 CD 08 A7         [ 4] 2213         CALL	ONEP
      000A67 CD 03 9C         [ 4] 2214         CALL	RFROM
      000A6A CD 08 A7         [ 4] 2215         CALL	ONEP
      000A6D CD 02 D7         [ 4] 2216 CMOV2:	CALL	DONXT
      000A70 0A 55                 2217         .word	CMOV1
      000A72 CC 05 A8         [ 2] 2218         JP	DDROP
                                   2219 
                                   2220 ;       FILL    ( b u c -- )
                                   2221 ;       Fill u bytes of character c
                                   2222 ;       to area beginning at b.
      000A75 0A 47                 2223         .word       LINK
                           000A77  2224 LINK = . 
      000A77 04                    2225         .byte       4
      000A78 46 49 4C 4C           2226         .ascii     "FILL"
      000A7C                       2227 FILL:
                           000001  2228 .if CONVERT_TO_CODE
      000A7C 90 93            [ 1] 2229         ldw y,x 
      000A7E 90 E6 01         [ 1] 2230         ld a,(1,y) ; c 
      000A81 1C 00 02         [ 2] 2231         addw x,#CELLL ; drop c 
      000A84 90 93            [ 1] 2232         ldw y,x 
      000A86 90 FE            [ 2] 2233         ldw y,(y) ; count
      000A88 90 89            [ 2] 2234         pushw y 
      000A8A 1C 00 02         [ 2] 2235         addw x,#CELLL ; drop u 
      000A8D 90 93            [ 1] 2236         ldw y,x 
      000A8F 1C 00 02         [ 2] 2237         addw x,#CELLL ; drop b 
      000A92 90 FE            [ 2] 2238         ldw y,(y) ; address
      000A94 90 BF 20         [ 2] 2239         ldw YTEMP,y
      000A97 90 85            [ 2] 2240         popw y ; count 
      000A99                       2241 FILL1:  
      000A99 92 C7 20         [ 4] 2242         ld [YTEMP],a 
      000A9C 3C 21            [ 1] 2243         inc YTEMP+1
      000A9E 24 02            [ 1] 2244         jrnc FILL2 
      000AA0 3C 20            [ 1] 2245         inc YTEMP
      000AA2                       2246 FILL2: 
      000AA2 90 5A            [ 2] 2247         decw y ; count 
      000AA4 26 F3            [ 1] 2248         jrne FILL1  
      000AA6 81               [ 4] 2249         ret 
                           000000  2250 .else 
                                   2251         CALL	SWAPP
                                   2252         CALL	TOR
                                   2253         CALL	SWAPP
                                   2254         CALL	BRAN
                                   2255         .word	FILL2
                                   2256 FILL1:	CALL	DDUP
                                   2257         CALL	CSTOR
                                   2258         CALL	ONEP
                                   2259 FILL2:	CALL	DONXT
                                   2260         .word	FILL1
                                   2261         JP	DDROP
                                   2262 .endif
                                   2263 
                                   2264 ;       ERASE   ( b u -- )
                                   2265 ;       Erase u bytes beginning at b.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000AA7 0A 77                 2266         .word      LINK
                           000AA9  2267 LINK = . 
      000AA9 05                    2268         .byte      5
      000AAA 45 52 41 53 45        2269         .ascii     "ERASE"
      000AAF                       2270 ERASE:
                           000001  2271 .if CONVERT_TO_CODE
      000AAF 90 5F            [ 1] 2272         clrw y 
      000AB1 1D 00 02         [ 2] 2273         subw x,#CELLL 
      000AB4 FF               [ 2] 2274         ldw (x),y 
      000AB5 CC 0A 7C         [ 2] 2275         jp FILL 
                           000000  2276 .else 
                                   2277         CALL     ZERO
                                   2278         JP     FILL
                                   2279 .endif 
                                   2280 ;       PACK0x   ( b u a -- a )
                                   2281 ;       Build a counted string with
                                   2282 ;       u characters from b. Null fill.
      000AB8 0A A9                 2283         .word      LINK
                           000ABA  2284 LINK = . 
      000ABA 05                    2285         .byte      5
      000ABB 50 41 43 4B 30 58     2286         .ascii     "PACK0X"
      000AC1                       2287 PACKS:
      000AC1 CD 03 F2         [ 4] 2288         CALL     DUPP
      000AC4 CD 03 BB         [ 4] 2289         CALL     TOR     ;strings only on cell boundary
      000AC7 CD 05 B3         [ 4] 2290         CALL     DDUP
      000ACA CD 03 58         [ 4] 2291         CALL     CSTOR
      000ACD CD 08 A7         [ 4] 2292         CALL     ONEP ;save count
      000AD0 CD 04 02         [ 4] 2293         CALL     SWAPP
      000AD3 CD 0A 4D         [ 4] 2294         CALL     CMOVE
      000AD6 CD 03 9C         [ 4] 2295         CALL     RFROM
      000AD9 81               [ 4] 2296         RET
                                   2297 
                                   2298 ;; Numeric output, single precision
                                   2299 
                                   2300 ;       DIGIT   ( u -- c )
                                   2301 ;       Convert digit u to a character.
      000ADA 0A BA                 2302         .word      LINK
                           000ADC  2303 LINK = . 
      000ADC 05                    2304         .byte      5
      000ADD 44 49 47 49 54        2305         .ascii     "DIGIT"
      000AE2                       2306 DIGIT:
      000AE2 CD 02 C3         [ 4] 2307         CALL	DOLIT
      000AE5 00 09                 2308         .word	9
      000AE7 CD 04 1C         [ 4] 2309         CALL	OVER
      000AEA CD 06 8B         [ 4] 2310         CALL	LESS
      000AED CD 02 C3         [ 4] 2311         CALL	DOLIT
      000AF0 00 07                 2312         .word	7
      000AF2 CD 04 3E         [ 4] 2313         CALL	ANDD
      000AF5 CD 05 C8         [ 4] 2314         CALL	PLUS
      000AF8 CD 02 C3         [ 4] 2315         CALL	DOLIT
      000AFB 00 30                 2316         .word	48	;'0'
      000AFD CC 05 C8         [ 2] 2317         JP	PLUS
                                   2318 
                                   2319 ;       EXTRACT ( n base -- n c )
                                   2320 ;       Extract least significant digit from n.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B00 0A DC                 2321         .word      LINK
                           000B02  2322 LINK = . 
      000B02 07                    2323         .byte      7
      000B03 45 58 54 52 41 43 54  2324         .ascii     "EXTRACT"
      000B0A                       2325 EXTRC:
      000B0A CD 09 13         [ 4] 2326         CALL     ZERO
      000B0D CD 04 02         [ 4] 2327         CALL     SWAPP
      000B10 CD 07 03         [ 4] 2328         CALL     UMMOD
      000B13 CD 04 02         [ 4] 2329         CALL     SWAPP
      000B16 CC 0A E2         [ 2] 2330         JP     DIGIT
                                   2331 
                                   2332 ;       <#      ( -- )
                                   2333 ;       Initiate  numeric output process.
      000B19 0B 02                 2334         .word      LINK
                           000B1B  2335 LINK = . 
      000B1B 02                    2336         .byte      2
      000B1C 3C 23                 2337         .ascii     "<#"
      000B1E                       2338 BDIGS:
      000B1E CD 0A 11         [ 4] 2339         CALL     PAD
      000B21 CD 05 0D         [ 4] 2340         CALL     HLD
      000B24 CC 03 34         [ 2] 2341         JP     STORE
                                   2342 
                                   2343 ;       HOLD    ( c -- )
                                   2344 ;       Insert a character into output string.
      000B27 0B 1B                 2345         .word      LINK
                           000B29  2346 LINK = . 
      000B29 04                    2347         .byte      4
      000B2A 48 4F 4C 44           2348         .ascii     "HOLD"
      000B2E                       2349 HOLD:
      000B2E CD 05 0D         [ 4] 2350         CALL     HLD
      000B31 CD 03 4B         [ 4] 2351         CALL     AT
      000B34 CD 08 B4         [ 4] 2352         CALL     ONEM
      000B37 CD 03 F2         [ 4] 2353         CALL     DUPP
      000B3A CD 05 0D         [ 4] 2354         CALL     HLD
      000B3D CD 03 34         [ 4] 2355         CALL     STORE
      000B40 CC 03 58         [ 2] 2356         JP     CSTOR
                                   2357 
                                   2358 ;       #       ( u -- u )
                                   2359 ;       Extract one digit from u and
                                   2360 ;       append digit to output string.
      000B43 0B 29                 2361         .word      LINK
                           000B45  2362 LINK = . 
      000B45 01                    2363         .byte      1
      000B46 23                    2364         .ascii     "#"
      000B47                       2365 DIG:
      000B47 CD 04 AF         [ 4] 2366         CALL     BASE
      000B4A CD 03 4B         [ 4] 2367         CALL     AT
      000B4D CD 0B 0A         [ 4] 2368         CALL     EXTRC
      000B50 CC 0B 2E         [ 2] 2369         JP     HOLD
                                   2370 
                                   2371 ;       #S      ( u -- 0 )
                                   2372 ;       Convert u until all digits
                                   2373 ;       are added to output string.
      000B53 0B 45                 2374         .word      LINK
                           000B55  2375 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B55 02                    2376         .byte      2
      000B56 23 53                 2377         .ascii     "#S"
      000B58                       2378 DIGS:
      000B58 CD 0B 47         [ 4] 2379 DIGS1:  CALL     DIG
      000B5B CD 03 F2         [ 4] 2380         CALL     DUPP
      000B5E CD 02 F6         [ 4] 2381         CALL     QBRAN
      000B61 0B 65                 2382         .word      DIGS2
      000B63 20 F3            [ 2] 2383         JRA     DIGS1
      000B65 81               [ 4] 2384 DIGS2:  RET
                                   2385 
                                   2386 ;       SIGN    ( n -- )
                                   2387 ;       Add a minus sign to
                                   2388 ;       numeric output string.
      000B66 0B 55                 2389         .word      LINK
                           000B68  2390 LINK = . 
      000B68 04                    2391         .byte      4
      000B69 53 49 47 4E           2392         .ascii     "SIGN"
      000B6D                       2393 SIGN:
      000B6D CD 04 2B         [ 4] 2394         CALL     ZLESS
      000B70 CD 02 F6         [ 4] 2395         CALL     QBRAN
      000B73 0B 7D                 2396         .word      SIGN1
      000B75 CD 02 C3         [ 4] 2397         CALL     DOLIT
      000B78 00 2D                 2398         .word      45	;"-"
      000B7A CC 0B 2E         [ 2] 2399         JP     HOLD
      000B7D 81               [ 4] 2400 SIGN1:  RET
                                   2401 
                                   2402 ;       #>      ( w -- b u )
                                   2403 ;       Prepare output string.
      000B7E 0B 68                 2404         .word      LINK
                           000B80  2405 LINK = . 
      000B80 02                    2406         .byte      2
      000B81 23 3E                 2407         .ascii     "#>"
      000B83                       2408 EDIGS:
      000B83 CD 03 E8         [ 4] 2409         CALL     DROP
      000B86 CD 05 0D         [ 4] 2410         CALL     HLD
      000B89 CD 03 4B         [ 4] 2411         CALL     AT
      000B8C CD 0A 11         [ 4] 2412         CALL     PAD
      000B8F CD 04 1C         [ 4] 2413         CALL     OVER
      000B92 CC 06 26         [ 2] 2414         JP     SUBB
                                   2415 
                                   2416 ;       str     ( w -- b u )
                                   2417 ;       Convert a signed integer
                                   2418 ;       to a numeric string.
      000B95 0B 80                 2419         .word      LINK
                           000B97  2420 LINK = . 
      000B97 03                    2421         .byte      3
      000B98 53 54 52              2422         .ascii     "STR"
      000B9B                       2423 STR:
      000B9B CD 03 F2         [ 4] 2424         CALL     DUPP
      000B9E CD 03 BB         [ 4] 2425         CALL     TOR
      000BA1 CD 06 40         [ 4] 2426         CALL     ABSS
      000BA4 CD 0B 1E         [ 4] 2427         CALL     BDIGS
      000BA7 CD 0B 58         [ 4] 2428         CALL     DIGS
      000BAA CD 03 9C         [ 4] 2429         CALL     RFROM
      000BAD CD 0B 6D         [ 4] 2430         CALL     SIGN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BB0 CC 0B 83         [ 2] 2431         JP     EDIGS
                                   2432 
                                   2433 ;       HEX     ( -- )
                                   2434 ;       Use radix 16 as base for
                                   2435 ;       numeric conversions.
      000BB3 0B 97                 2436         .word      LINK
                           000BB5  2437 LINK = . 
      000BB5 03                    2438         .byte      3
      000BB6 48 45 58              2439         .ascii     "HEX"
      000BB9                       2440 HEX:
      000BB9 CD 02 C3         [ 4] 2441         CALL     DOLIT
      000BBC 00 10                 2442         .word      16
      000BBE CD 04 AF         [ 4] 2443         CALL     BASE
      000BC1 CC 03 34         [ 2] 2444         JP     STORE
                                   2445 
                                   2446 ;       DECIMAL ( -- )
                                   2447 ;       Use radix 10 as base
                                   2448 ;       for numeric conversions.
      000BC4 0B B5                 2449         .word      LINK
                           000BC6  2450 LINK = . 
      000BC6 07                    2451         .byte      7
      000BC7 44 45 43 49 4D 41 4C  2452         .ascii     "DECIMAL"
      000BCE                       2453 DECIM:
      000BCE CD 02 C3         [ 4] 2454         CALL     DOLIT
      000BD1 00 0A                 2455         .word      10
      000BD3 CD 04 AF         [ 4] 2456         CALL     BASE
      000BD6 CC 03 34         [ 2] 2457         JP     STORE
                                   2458 
                                   2459 ;; Numeric input, single precision
                                   2460 
                                   2461 ;       DIGIT?  ( c base -- u t )
                                   2462 ;       Convert a character to its numeric
                                   2463 ;       value. A flag indicates success.
      000BD9 0B C6                 2464         .word      LINK
                           000BDB  2465 LINK = . 
      000BDB 06                    2466         .byte       6
      000BDC 44 49 47 49 54 3F     2467         .ascii     "DIGIT?"
      000BE2                       2468 DIGTQ:
      000BE2 CD 03 BB         [ 4] 2469         CALL     TOR
      000BE5 CD 02 C3         [ 4] 2470         CALL     DOLIT
      000BE8 00 30                 2471         .word     48	; "0"
      000BEA CD 06 26         [ 4] 2472         CALL     SUBB
      000BED CD 02 C3         [ 4] 2473         CALL     DOLIT
      000BF0 00 09                 2474         .word      9
      000BF2 CD 04 1C         [ 4] 2475         CALL     OVER
      000BF5 CD 06 8B         [ 4] 2476         CALL     LESS
      000BF8 CD 02 F6         [ 4] 2477         CALL     QBRAN
      000BFB 0C 13                 2478         .word      DGTQ1
      000BFD CD 02 C3         [ 4] 2479         CALL     DOLIT
      000C00 00 07                 2480         .word      7
      000C02 CD 06 26         [ 4] 2481         CALL     SUBB
      000C05 CD 03 F2         [ 4] 2482         CALL     DUPP
      000C08 CD 02 C3         [ 4] 2483         CALL     DOLIT
      000C0B 00 0A                 2484         .word      10
      000C0D CD 06 8B         [ 4] 2485         CALL     LESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C10 CD 04 52         [ 4] 2486         CALL     ORR
      000C13 CD 03 F2         [ 4] 2487 DGTQ1:  CALL     DUPP
      000C16 CD 03 9C         [ 4] 2488         CALL     RFROM
      000C19 CC 06 6D         [ 2] 2489         JP     ULESS
                                   2490 
                                   2491 ;       NUMBER? ( a -- n T | a F )
                                   2492 ;       Convert a number string to
                                   2493 ;       integer. Push a flag on tos.
      000C1C 0B DB                 2494         .word      LINK
                           000C1E  2495 LINK = . 
      000C1E 07                    2496         .byte      7
      000C1F 4E 55 4D 42 45 52 3F  2497         .ascii     "NUMBER?"
      000C26                       2498 NUMBQ:
      000C26 CD 04 AF         [ 4] 2499         CALL     BASE
      000C29 CD 03 4B         [ 4] 2500         CALL     AT
      000C2C CD 03 BB         [ 4] 2501         CALL     TOR
      000C2F CD 09 13         [ 4] 2502         CALL     ZERO
      000C32 CD 04 1C         [ 4] 2503         CALL     OVER
      000C35 CD 09 E9         [ 4] 2504         CALL     COUNT
      000C38 CD 04 1C         [ 4] 2505         CALL     OVER
      000C3B CD 03 69         [ 4] 2506         CALL     CAT
      000C3E CD 02 C3         [ 4] 2507         CALL     DOLIT
      000C41 00 24                 2508         .word     36	; "0x"
      000C43 CD 06 4E         [ 4] 2509         CALL     EQUAL
      000C46 CD 02 F6         [ 4] 2510         CALL     QBRAN
      000C49 0C 5A                 2511         .word      NUMQ1
      000C4B CD 0B B9         [ 4] 2512         CALL     HEX
      000C4E CD 04 02         [ 4] 2513         CALL     SWAPP
      000C51 CD 08 A7         [ 4] 2514         CALL     ONEP
      000C54 CD 04 02         [ 4] 2515         CALL     SWAPP
      000C57 CD 08 B4         [ 4] 2516         CALL     ONEM
      000C5A CD 04 1C         [ 4] 2517 NUMQ1:  CALL     OVER
      000C5D CD 03 69         [ 4] 2518         CALL     CAT
      000C60 CD 02 C3         [ 4] 2519         CALL     DOLIT
      000C63 00 2D                 2520         .word     45	; "-"
      000C65 CD 06 4E         [ 4] 2521         CALL     EQUAL
      000C68 CD 03 BB         [ 4] 2522         CALL     TOR
      000C6B CD 04 02         [ 4] 2523         CALL     SWAPP
      000C6E CD 03 AF         [ 4] 2524         CALL     RAT
      000C71 CD 06 26         [ 4] 2525         CALL     SUBB
      000C74 CD 04 02         [ 4] 2526         CALL     SWAPP
      000C77 CD 03 AF         [ 4] 2527         CALL     RAT
      000C7A CD 05 C8         [ 4] 2528         CALL     PLUS
      000C7D CD 05 77         [ 4] 2529         CALL     QDUP
      000C80 CD 02 F6         [ 4] 2530         CALL     QBRAN
      000C83 0C E4                 2531         .word      NUMQ6
      000C85 CD 08 B4         [ 4] 2532         CALL     ONEM
      000C88 CD 03 BB         [ 4] 2533         CALL     TOR
      000C8B CD 03 F2         [ 4] 2534 NUMQ2:  CALL     DUPP
      000C8E CD 03 BB         [ 4] 2535         CALL     TOR
      000C91 CD 03 69         [ 4] 2536         CALL     CAT
      000C94 CD 04 AF         [ 4] 2537         CALL     BASE
      000C97 CD 03 4B         [ 4] 2538         CALL     AT
      000C9A CD 0B E2         [ 4] 2539         CALL     DIGTQ
      000C9D CD 02 F6         [ 4] 2540         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CA0 0C D2                 2541         .word      NUMQ4
      000CA2 CD 04 02         [ 4] 2542         CALL     SWAPP
      000CA5 CD 04 AF         [ 4] 2543         CALL     BASE
      000CA8 CD 03 4B         [ 4] 2544         CALL     AT
      000CAB CD 08 26         [ 4] 2545         CALL     STAR
      000CAE CD 05 C8         [ 4] 2546         CALL     PLUS
      000CB1 CD 03 9C         [ 4] 2547         CALL     RFROM
      000CB4 CD 08 A7         [ 4] 2548         CALL     ONEP
      000CB7 CD 02 D7         [ 4] 2549         CALL     DONXT
      000CBA 0C 8B                 2550         .word      NUMQ2
      000CBC CD 03 AF         [ 4] 2551         CALL     RAT
      000CBF CD 04 02         [ 4] 2552         CALL     SWAPP
      000CC2 CD 03 E8         [ 4] 2553         CALL     DROP
      000CC5 CD 02 F6         [ 4] 2554         CALL     QBRAN
      000CC8 0C CD                 2555         .word      NUMQ3
      000CCA CD 05 F3         [ 4] 2556         CALL     NEGAT
      000CCD CD 04 02         [ 4] 2557 NUMQ3:  CALL     SWAPP
      000CD0 20 0F            [ 2] 2558         JRA     NUMQ5
      000CD2 CD 03 9C         [ 4] 2559 NUMQ4:  CALL     RFROM
      000CD5 CD 03 9C         [ 4] 2560         CALL     RFROM
      000CD8 CD 05 A8         [ 4] 2561         CALL     DDROP
      000CDB CD 05 A8         [ 4] 2562         CALL     DDROP
      000CDE CD 09 13         [ 4] 2563         CALL     ZERO
      000CE1 CD 03 F2         [ 4] 2564 NUMQ5:  CALL     DUPP
      000CE4 CD 03 9C         [ 4] 2565 NUMQ6:  CALL     RFROM
      000CE7 CD 05 A8         [ 4] 2566         CALL     DDROP
      000CEA CD 03 9C         [ 4] 2567         CALL     RFROM
      000CED CD 04 AF         [ 4] 2568         CALL     BASE
      000CF0 CC 03 34         [ 2] 2569         JP     STORE
                                   2570 
                                   2571 ;; Basic I/O
                                   2572 
                                   2573 ;       KEY     ( -- c )
                                   2574 ;       Wait for and return an
                                   2575 ;       input character.
      000CF3 0C 1E                 2576         .word      LINK
                           000CF5  2577 LINK = . 
      000CF5 03                    2578         .byte      3
      000CF6 4B 45 59              2579         .ascii     "KEY"
      000CF9                       2580 KEY:
                           000001  2581 .if CONVERT_TO_CODE
      000CF9 72 0B 52 30 FB   [ 2] 2582         btjf UART1_SR,#UART_SR_RXNE,. 
      000CFE C6 52 31         [ 1] 2583         ld a,UART1_DR 
      000D01 1D 00 02         [ 2] 2584         subw x,#CELLL 
      000D04 E7 01            [ 1] 2585         ld (1,x),a 
      000D06 7F               [ 1] 2586         clr (x)
      000D07 81               [ 4] 2587         ret 
                           000000  2588 .else 
                                   2589 KEY1:   CALL     QKEY
                                   2590         CALL     QBRAN
                                   2591         .word      KEY1
                                   2592         RET
                                   2593 .endif 
                                   2594 
                                   2595 ;       NUF?    ( -- t )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



                                   2596 ;       Return false if no input,
                                   2597 ;       else pause and if CR return true.
      000D08 0C F5                 2598         .word      LINK
                           000D0A  2599 LINK = . 
      000D0A 04                    2600         .byte      4
      000D0B 4E 55 46 3F           2601         .ascii     "NUF?"
      000D0F                       2602 NUFQ:
      000D0F CD 02 8F         [ 4] 2603         CALL     QKEY
      000D12 CD 03 F2         [ 4] 2604         CALL     DUPP
      000D15 CD 02 F6         [ 4] 2605         CALL     QBRAN
      000D18 0D 28                 2606         .word    NUFQ1
      000D1A CD 05 A8         [ 4] 2607         CALL     DDROP
      000D1D CD 0C F9         [ 4] 2608         CALL     KEY
      000D20 CD 02 C3         [ 4] 2609         CALL     DOLIT
      000D23 00 0D                 2610         .word      CRR
      000D25 CC 06 4E         [ 2] 2611         JP     EQUAL
      000D28 81               [ 4] 2612 NUFQ1:  RET
                                   2613 
                                   2614 ;       SPACE   ( -- )
                                   2615 ;       Send  blank character to
                                   2616 ;       output device.
      000D29 0D 0A                 2617         .word      LINK
                           000D2B  2618 LINK = . 
      000D2B 05                    2619         .byte      5
      000D2C 53 50 41 43 45        2620         .ascii     "SPACE"
      000D31                       2621 SPACE:
      000D31 CD 09 06         [ 4] 2622         CALL     BLANK
      000D34 CC 02 AD         [ 2] 2623         JP     EMIT
                                   2624 
                                   2625 ;       SPACES  ( +n -- )
                                   2626 ;       Send n spaces to output device.
      000D37 0D 2B                 2627         .word      LINK
                           000D39  2628 LINK = . 
      000D39 06                    2629         .byte      6
      000D3A 53 50 41 43 45 53     2630         .ascii     "SPACES"
      000D40                       2631 SPACS:
      000D40 CD 09 13         [ 4] 2632         CALL     ZERO
      000D43 CD 06 AB         [ 4] 2633         CALL     MAX
      000D46 CD 03 BB         [ 4] 2634         CALL     TOR
      000D49 20 03            [ 2] 2635         JRA      CHAR2
      000D4B CD 0D 31         [ 4] 2636 CHAR1:  CALL     SPACE
      000D4E CD 02 D7         [ 4] 2637 CHAR2:  CALL     DONXT
      000D51 0D 4B                 2638         .word    CHAR1
      000D53 81               [ 4] 2639         RET
                                   2640 
                                   2641 ;       TYPE    ( b u -- )
                                   2642 ;       Output u characters from b.
      000D54 0D 39                 2643         .word      LINK
                           000D56  2644 LINK = . 
      000D56 04                    2645         .byte      4
      000D57 54 59 50 45           2646         .ascii     "TYPE"
      000D5B                       2647 TYPES:
      000D5B CD 03 BB         [ 4] 2648         CALL     TOR
      000D5E 20 0C            [ 2] 2649         JRA     TYPE2
      000D60 CD 03 F2         [ 4] 2650 TYPE1:  CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D63 CD 03 69         [ 4] 2651         CALL     CAT
      000D66 CD 02 AD         [ 4] 2652         CALL     EMIT
      000D69 CD 08 A7         [ 4] 2653         CALL     ONEP
      000D6C CD 02 D7         [ 4] 2654 TYPE2:  CALL     DONXT
      000D6F 0D 60                 2655         .word      TYPE1
      000D71 CC 03 E8         [ 2] 2656         JP     DROP
                                   2657 
                                   2658 ;       CR      ( -- )
                                   2659 ;       Output a carriage return
                                   2660 ;       and a line feed.
      000D74 0D 56                 2661         .word      LINK
                           000D76  2662 LINK = . 
      000D76 02                    2663         .byte      2
      000D77 43 52                 2664         .ascii     "CR"
      000D79                       2665 CR:
      000D79 CD 02 C3         [ 4] 2666         CALL     DOLIT
      000D7C 00 0D                 2667         .word      CRR
      000D7E CD 02 AD         [ 4] 2668         CALL     EMIT
      000D81 CD 02 C3         [ 4] 2669         CALL     DOLIT
      000D84 00 0A                 2670         .word      LF
      000D86 CC 02 AD         [ 2] 2671         JP     EMIT
                                   2672 
                                   2673 ;       do$     ( -- a )
                                   2674 ;       Return  address of a compiled
                                   2675 ;       string.
      000D89 0D 76                 2676         .word      LINK
                           000D8B  2677 LINK = . 
      000D8B 43                    2678 	.byte      COMPO+3
      000D8C 44 4F 24              2679         .ascii     "DO$"
      000D8F                       2680 DOSTR:
      000D8F CD 03 9C         [ 4] 2681         CALL     RFROM
      000D92 CD 03 AF         [ 4] 2682         CALL     RAT
      000D95 CD 03 9C         [ 4] 2683         CALL     RFROM
      000D98 CD 09 E9         [ 4] 2684         CALL     COUNT
      000D9B CD 05 C8         [ 4] 2685         CALL     PLUS
      000D9E CD 03 BB         [ 4] 2686         CALL     TOR
      000DA1 CD 04 02         [ 4] 2687         CALL     SWAPP
      000DA4 CD 03 BB         [ 4] 2688         CALL     TOR
      000DA7 81               [ 4] 2689         RET
                                   2690 
                                   2691 ;       $"|     ( -- a )
                                   2692 ;       Run time routine compiled by $".
                                   2693 ;       Return address of a compiled string.
      000DA8 0D 8B                 2694         .word      LINK
                           000DAA  2695 LINK = . 
      000DAA 43                    2696 	.byte      COMPO+3
      000DAB 24 22 7C              2697         .byte     '$','"','|'
      000DAE                       2698 STRQP:
      000DAE CD 0D 8F         [ 4] 2699         CALL     DOSTR
      000DB1 81               [ 4] 2700         RET
                                   2701 
                                   2702 ;       ."|     ( -- )
                                   2703 ;       Run time routine of ." .
                                   2704 ;       Output a compiled string.
      000DB2 0D AA                 2705         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000DB4  2706 LINK = . 
      000DB4 43                    2707 	.byte      COMPO+3
      000DB5 2E 22 7C              2708         .byte     '.','"','|'
      000DB8                       2709 DOTQP:
      000DB8 CD 0D 8F         [ 4] 2710         CALL     DOSTR
      000DBB CD 09 E9         [ 4] 2711         CALL     COUNT
      000DBE CC 0D 5B         [ 2] 2712         JP     TYPES
                                   2713 
                                   2714 ;       .R      ( n +n -- )
                                   2715 ;       Display an integer in a field
                                   2716 ;       of n columns, right justified.
      000DC1 0D B4                 2717         .word      LINK
                           000DC3  2718 LINK = . 
      000DC3 02                    2719         .byte      2
      000DC4 2E 52                 2720         .ascii     ".R"
      000DC6                       2721 DOTR:
      000DC6 CD 03 BB         [ 4] 2722         CALL     TOR
      000DC9 CD 0B 9B         [ 4] 2723         CALL     STR
      000DCC CD 03 9C         [ 4] 2724         CALL     RFROM
      000DCF CD 04 1C         [ 4] 2725         CALL     OVER
      000DD2 CD 06 26         [ 4] 2726         CALL     SUBB
      000DD5 CD 0D 40         [ 4] 2727         CALL     SPACS
      000DD8 CC 0D 5B         [ 2] 2728         JP     TYPES
                                   2729 
                                   2730 ;       U.R     ( u +n -- )
                                   2731 ;       Display an unsigned integer
                                   2732 ;       in n column, right justified.
      000DDB 0D C3                 2733         .word      LINK
                           000DDD  2734 LINK = . 
      000DDD 03                    2735         .byte      3
      000DDE 55 2E 52              2736         .ascii     "U.R"
      000DE1                       2737 UDOTR:
      000DE1 CD 03 BB         [ 4] 2738         CALL     TOR
      000DE4 CD 0B 1E         [ 4] 2739         CALL     BDIGS
      000DE7 CD 0B 58         [ 4] 2740         CALL     DIGS
      000DEA CD 0B 83         [ 4] 2741         CALL     EDIGS
      000DED CD 03 9C         [ 4] 2742         CALL     RFROM
      000DF0 CD 04 1C         [ 4] 2743         CALL     OVER
      000DF3 CD 06 26         [ 4] 2744         CALL     SUBB
      000DF6 CD 0D 40         [ 4] 2745         CALL     SPACS
      000DF9 CC 0D 5B         [ 2] 2746         JP     TYPES
                                   2747 
                                   2748 ;       U.      ( u -- )
                                   2749 ;       Display an unsigned integer
                                   2750 ;       in free format.
      000DFC 0D DD                 2751         .word      LINK
                           000DFE  2752 LINK = . 
      000DFE 02                    2753         .byte      2
      000DFF 55 2E                 2754         .ascii     "U."
      000E01                       2755 UDOT:
      000E01 CD 0B 1E         [ 4] 2756         CALL     BDIGS
      000E04 CD 0B 58         [ 4] 2757         CALL     DIGS
      000E07 CD 0B 83         [ 4] 2758         CALL     EDIGS
      000E0A CD 0D 31         [ 4] 2759         CALL     SPACE
      000E0D CC 0D 5B         [ 2] 2760         JP     TYPES
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2761 
                                   2762 ;       .       ( w -- )
                                   2763 ;       Display an integer in free
                                   2764 ;       format, preceeded by a space.
      000E10 0D FE                 2765         .word      LINK
                           000E12  2766 LINK = . 
      000E12 01                    2767         .byte      1
      000E13 2E                    2768         .ascii     "."
      000E14                       2769 DOT:
      000E14 CD 04 AF         [ 4] 2770         CALL     BASE
      000E17 CD 03 4B         [ 4] 2771         CALL     AT
      000E1A CD 02 C3         [ 4] 2772         CALL     DOLIT
      000E1D 00 0A                 2773         .word      10
      000E1F CD 04 67         [ 4] 2774         CALL     XORR    ;?decimal
      000E22 CD 02 F6         [ 4] 2775         CALL     QBRAN
      000E25 0E 2A                 2776         .word      DOT1
      000E27 CC 0E 01         [ 2] 2777         JP     UDOT
      000E2A CD 0B 9B         [ 4] 2778 DOT1:   CALL     STR
      000E2D CD 0D 31         [ 4] 2779         CALL     SPACE
      000E30 CC 0D 5B         [ 2] 2780         JP     TYPES
                                   2781 
                                   2782 ;       ?       ( a -- )
                                   2783 ;       Display contents in memory cell.
      000E33 0E 12                 2784         .word      LINK
                                   2785         
                           000E35  2786 LINK = . 
      000E35 01                    2787         .byte      1
      000E36 3F                    2788         .ascii     "?"
      000E37                       2789 QUEST:
      000E37 CD 03 4B         [ 4] 2790         CALL     AT
      000E3A CC 0E 14         [ 2] 2791         JP     DOT
                                   2792 
                                   2793 ;; Parsing
                                   2794 
                                   2795 ;       parse   ( b u c -- b u delta ; <string> )
                                   2796 ;       Scan string delimited by c.
                                   2797 ;       Return found string and its offset.
      000E3D 0E 35                 2798         .word      LINK
                           000E3F  2799 LINK = . 
      000E3F 05                    2800         .byte      5
      000E40 70 61 72 73 65        2801         .ascii     "parse"
      000E45                       2802 PARS:
      000E45 CD 04 BE         [ 4] 2803         CALL     TEMP
      000E48 CD 03 34         [ 4] 2804         CALL     STORE
      000E4B CD 04 1C         [ 4] 2805         CALL     OVER
      000E4E CD 03 BB         [ 4] 2806         CALL     TOR
      000E51 CD 03 F2         [ 4] 2807         CALL     DUPP
      000E54 CD 02 F6         [ 4] 2808         CALL     QBRAN
      000E57 0E FD                 2809         .word    PARS8
      000E59 CD 08 B4         [ 4] 2810         CALL     ONEM
      000E5C CD 04 BE         [ 4] 2811         CALL     TEMP
      000E5F CD 03 4B         [ 4] 2812         CALL     AT
      000E62 CD 09 06         [ 4] 2813         CALL     BLANK
      000E65 CD 06 4E         [ 4] 2814         CALL     EQUAL
      000E68 CD 02 F6         [ 4] 2815         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E6B 0E 9E                 2816         .word      PARS3
      000E6D CD 03 BB         [ 4] 2817         CALL     TOR
      000E70 CD 09 06         [ 4] 2818 PARS1:  CALL     BLANK
      000E73 CD 04 1C         [ 4] 2819         CALL     OVER
      000E76 CD 03 69         [ 4] 2820         CALL     CAT     ;skip leading blanks ONLY
      000E79 CD 06 26         [ 4] 2821         CALL     SUBB
      000E7C CD 04 2B         [ 4] 2822         CALL     ZLESS
      000E7F CD 05 E2         [ 4] 2823         CALL     INVER
      000E82 CD 02 F6         [ 4] 2824         CALL     QBRAN
      000E85 0E 9B                 2825         .word      PARS2
      000E87 CD 08 A7         [ 4] 2826         CALL     ONEP
      000E8A CD 02 D7         [ 4] 2827         CALL     DONXT
      000E8D 0E 70                 2828         .word      PARS1
      000E8F CD 03 9C         [ 4] 2829         CALL     RFROM
      000E92 CD 03 E8         [ 4] 2830         CALL     DROP
      000E95 CD 09 13         [ 4] 2831         CALL     ZERO
      000E98 CC 03 F2         [ 2] 2832         JP     DUPP
      000E9B CD 03 9C         [ 4] 2833 PARS2:  CALL     RFROM
      000E9E CD 04 1C         [ 4] 2834 PARS3:  CALL     OVER
      000EA1 CD 04 02         [ 4] 2835         CALL     SWAPP
      000EA4 CD 03 BB         [ 4] 2836         CALL     TOR
      000EA7 CD 04 BE         [ 4] 2837 PARS4:  CALL     TEMP
      000EAA CD 03 4B         [ 4] 2838         CALL     AT
      000EAD CD 04 1C         [ 4] 2839         CALL     OVER
      000EB0 CD 03 69         [ 4] 2840         CALL     CAT
      000EB3 CD 06 26         [ 4] 2841         CALL     SUBB    ;scan for delimiter
      000EB6 CD 04 BE         [ 4] 2842         CALL     TEMP
      000EB9 CD 03 4B         [ 4] 2843         CALL     AT
      000EBC CD 09 06         [ 4] 2844         CALL     BLANK
      000EBF CD 06 4E         [ 4] 2845         CALL     EQUAL
      000EC2 CD 02 F6         [ 4] 2846         CALL     QBRAN
      000EC5 0E CA                 2847         .word      PARS5
      000EC7 CD 04 2B         [ 4] 2848         CALL     ZLESS
      000ECA CD 02 F6         [ 4] 2849 PARS5:  CALL     QBRAN
      000ECD 0E DF                 2850         .word      PARS6
      000ECF CD 08 A7         [ 4] 2851         CALL     ONEP
      000ED2 CD 02 D7         [ 4] 2852         CALL     DONXT
      000ED5 0E A7                 2853         .word      PARS4
      000ED7 CD 03 F2         [ 4] 2854         CALL     DUPP
      000EDA CD 03 BB         [ 4] 2855         CALL     TOR
      000EDD 20 0F            [ 2] 2856         JRA     PARS7
      000EDF CD 03 9C         [ 4] 2857 PARS6:  CALL     RFROM
      000EE2 CD 03 E8         [ 4] 2858         CALL     DROP
      000EE5 CD 03 F2         [ 4] 2859         CALL     DUPP
      000EE8 CD 08 A7         [ 4] 2860         CALL     ONEP
      000EEB CD 03 BB         [ 4] 2861         CALL     TOR
      000EEE CD 04 1C         [ 4] 2862 PARS7:  CALL     OVER
      000EF1 CD 06 26         [ 4] 2863         CALL     SUBB
      000EF4 CD 03 9C         [ 4] 2864         CALL     RFROM
      000EF7 CD 03 9C         [ 4] 2865         CALL     RFROM
      000EFA CC 06 26         [ 2] 2866         JP     SUBB
      000EFD CD 04 1C         [ 4] 2867 PARS8:  CALL     OVER
      000F00 CD 03 9C         [ 4] 2868         CALL     RFROM
      000F03 CC 06 26         [ 2] 2869         JP     SUBB
                                   2870 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2871 ;       PARSE   ( c -- b u ; <string> )
                                   2872 ;       Scan input stream and return
                                   2873 ;       counted string delimited by c.
      000F06 0E 3F                 2874         .word      LINK
                           000F08  2875 LINK = . 
      000F08 05                    2876         .byte      5
      000F09 50 41 52 53 45        2877         .ascii     "PARSE"
      000F0E                       2878 PARSE:
      000F0E CD 03 BB         [ 4] 2879         CALL     TOR
      000F11 CD 0A 22         [ 4] 2880         CALL     TIB
      000F14 CD 04 CD         [ 4] 2881         CALL     INN
      000F17 CD 03 4B         [ 4] 2882         CALL     AT
      000F1A CD 05 C8         [ 4] 2883         CALL     PLUS    ;current input buffer pointer
      000F1D CD 04 DD         [ 4] 2884         CALL     NTIB
      000F20 CD 03 4B         [ 4] 2885         CALL     AT
      000F23 CD 04 CD         [ 4] 2886         CALL     INN
      000F26 CD 03 4B         [ 4] 2887         CALL     AT
      000F29 CD 06 26         [ 4] 2888         CALL     SUBB    ;remaining count
      000F2C CD 03 9C         [ 4] 2889         CALL     RFROM
      000F2F CD 0E 45         [ 4] 2890         CALL     PARS
      000F32 CD 04 CD         [ 4] 2891         CALL     INN
      000F35 CC 09 82         [ 2] 2892         JP     PSTOR
                                   2893 
                                   2894 ;       .(      ( -- )
                                   2895 ;       Output following string up to next ) .
      000F38 0F 08                 2896         .word      LINK
                           000F3A  2897 LINK = . 
      000F3A 82                    2898 	.byte      IMEDD+2
      000F3B 2E 28                 2899         .ascii     ".("
      000F3D                       2900 DOTPR:
      000F3D CD 02 C3         [ 4] 2901         CALL     DOLIT
      000F40 00 29                 2902         .word     41	; ")"
      000F42 CD 0F 0E         [ 4] 2903         CALL     PARSE
      000F45 CC 0D 5B         [ 2] 2904         JP     TYPES
                                   2905 
                                   2906 ;       (       ( -- )
                                   2907 ;       Ignore following string up to next ).
                                   2908 ;       A comment.
      000F48 0F 3A                 2909         .word      LINK
                           000F4A  2910 LINK = . 
      000F4A 81                    2911 	.byte      IMEDD+1
      000F4B 28                    2912         .ascii     "("
      000F4C                       2913 PAREN:
      000F4C CD 02 C3         [ 4] 2914         CALL     DOLIT
      000F4F 00 29                 2915         .word     41	; ")"
      000F51 CD 0F 0E         [ 4] 2916         CALL     PARSE
      000F54 CC 05 A8         [ 2] 2917         JP     DDROP
                                   2918 
                                   2919 ;       \       ( -- )
                                   2920 ;       Ignore following text till
                                   2921 ;       end of line.
      000F57 0F 4A                 2922         .word      LINK
                           000F59  2923 LINK = . 
      000F59 81                    2924 	.byte      IMEDD+1
      000F5A 5C                    2925         .ascii     "\"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F5B                       2926 BKSLA:
                           000001  2927 .if CONVERT_TO_CODE
      000F5B 90 AE 00 0C      [ 2] 2928         ldw y,#UCTIB ; #TIB  
      000F5F 90 FE            [ 2] 2929         ldw y,(y)
      000F61 90 89            [ 2] 2930         pushw y ; count in TIB 
      000F63 90 AE 00 0A      [ 2] 2931         ldw y,#UINN ; >IN 
      000F67 90 BF 20         [ 2] 2932         ldw YTEMP,y
      000F6A 90 85            [ 2] 2933         popw y 
      000F6C 91 CF 20         [ 5] 2934         ldw [YTEMP],y
      000F6F 81               [ 4] 2935         ret 
                           000000  2936 .else
                                   2937         CALL     NTIB
                                   2938         CALL     AT
                                   2939         CALL     INN
                                   2940         JP     STORE
                                   2941 .endif 
                                   2942 
                                   2943 ;       WORD    ( c -- a ; <string> )
                                   2944 ;       Parse a word from input stream
                                   2945 ;       and copy it to code dictionary.
      000F70 0F 59                 2946         .word      LINK
                           000F72  2947 LINK = . 
      000F72 04                    2948         .byte      4
      000F73 57 4F 52 44           2949         .ascii     "WORD"
      000F77                       2950 WORDD:
      000F77 CD 0F 0E         [ 4] 2951         CALL     PARSE
      000F7A CD 0A 00         [ 4] 2952         CALL     HERE
      000F7D CD 08 7C         [ 4] 2953         CALL     CELLP
      000F80 CC 0A C1         [ 2] 2954         JP     PACKS
                                   2955 
                                   2956 ;       TOKEN   ( -- a ; <string> )
                                   2957 ;       Parse a word from input stream
                                   2958 ;       and copy it to name dictionary.
      000F83 0F 72                 2959         .word      LINK
                           000F85  2960 LINK = . 
      000F85 05                    2961         .byte      5
      000F86 54 4F 4B 45 4E        2962         .ascii     "TOKEN"
      000F8B                       2963 TOKEN:
      000F8B CD 09 06         [ 4] 2964         CALL     BLANK
      000F8E CC 0F 77         [ 2] 2965         JP     WORDD
                                   2966 
                                   2967 ;; Dictionary search
                                   2968 
                                   2969 ;       NAME>   ( na -- ca )
                                   2970 ;       Return a code address given
                                   2971 ;       a name address.
      000F91 0F 85                 2972         .word      LINK
                           000F93  2973 LINK = . 
      000F93 05                    2974         .byte      5
      000F94 4E 41 4D 45 3E        2975         .ascii     "NAME>"
      000F99                       2976 NAMET:
      000F99 CD 09 E9         [ 4] 2977         CALL     COUNT
      000F9C CD 02 C3         [ 4] 2978         CALL     DOLIT
      000F9F 00 1F                 2979         .word      31
      000FA1 CD 04 3E         [ 4] 2980         CALL     ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FA4 CC 05 C8         [ 2] 2981         JP     PLUS
                                   2982 
                                   2983 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2984 ;       Compare u cells in two
                                   2985 ;       strings. Return 0 if identical.
      000FA7 0F 93                 2986         .word      LINK
                           000FA9  2987 LINK = . 
      000FA9 05                    2988         .byte       5
      000FAA 53 41 4D 45 3F        2989         .ascii     "SAME?"
      000FAF                       2990 SAMEQ:
      000FAF CD 08 B4         [ 4] 2991         CALL     ONEM
      000FB2 CD 03 BB         [ 4] 2992         CALL     TOR
      000FB5 20 29            [ 2] 2993         JRA     SAME2
      000FB7 CD 04 1C         [ 4] 2994 SAME1:  CALL     OVER
      000FBA CD 03 AF         [ 4] 2995         CALL     RAT
      000FBD CD 05 C8         [ 4] 2996         CALL     PLUS
      000FC0 CD 03 69         [ 4] 2997         CALL     CAT
      000FC3 CD 04 1C         [ 4] 2998         CALL     OVER
      000FC6 CD 03 AF         [ 4] 2999         CALL     RAT
      000FC9 CD 05 C8         [ 4] 3000         CALL     PLUS
      000FCC CD 03 69         [ 4] 3001         CALL     CAT
      000FCF CD 06 26         [ 4] 3002         CALL     SUBB
      000FD2 CD 05 77         [ 4] 3003         CALL     QDUP
      000FD5 CD 02 F6         [ 4] 3004         CALL     QBRAN
      000FD8 0F E0                 3005         .word      SAME2
      000FDA CD 03 9C         [ 4] 3006         CALL     RFROM
      000FDD CC 03 E8         [ 2] 3007         JP     DROP
      000FE0 CD 02 D7         [ 4] 3008 SAME2:  CALL     DONXT
      000FE3 0F B7                 3009         .word      SAME1
      000FE5 CC 09 13         [ 2] 3010         JP     ZERO
                                   3011 
                                   3012 ;       find    ( a va -- ca na | a F )
                                   3013 ;       Search vocabulary for string.
                                   3014 ;       Return ca and na if succeeded.
      000FE8 0F A9                 3015         .word      LINK
                           000FEA  3016 LINK = . 
      000FEA 04                    3017         .byte      4
      000FEB 46 49 4E 44           3018         .ascii     "FIND"
      000FEF                       3019 FIND:
      000FEF CD 04 02         [ 4] 3020         CALL     SWAPP
      000FF2 CD 03 F2         [ 4] 3021         CALL     DUPP
      000FF5 CD 03 69         [ 4] 3022         CALL     CAT
      000FF8 CD 04 BE         [ 4] 3023         CALL     TEMP
      000FFB CD 03 34         [ 4] 3024         CALL     STORE
      000FFE CD 03 F2         [ 4] 3025         CALL     DUPP
      001001 CD 03 4B         [ 4] 3026         CALL     AT
      001004 CD 03 BB         [ 4] 3027         CALL     TOR
      001007 CD 08 7C         [ 4] 3028         CALL     CELLP
      00100A CD 04 02         [ 4] 3029         CALL     SWAPP
      00100D CD 03 4B         [ 4] 3030 FIND1:  CALL     AT
      001010 CD 03 F2         [ 4] 3031         CALL     DUPP
      001013 CD 02 F6         [ 4] 3032         CALL     QBRAN
      001016 10 4C                 3033         .word      FIND6
      001018 CD 03 F2         [ 4] 3034         CALL     DUPP
      00101B CD 03 4B         [ 4] 3035         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00101E CD 02 C3         [ 4] 3036         CALL     DOLIT
      001021 1F 7F                 3037         .word      MASKK
      001023 CD 04 3E         [ 4] 3038         CALL     ANDD
      001026 CD 03 AF         [ 4] 3039         CALL     RAT
      001029 CD 04 67         [ 4] 3040         CALL     XORR
      00102C CD 02 F6         [ 4] 3041         CALL     QBRAN
      00102F 10 3B                 3042         .word      FIND2
      001031 CD 08 7C         [ 4] 3043         CALL     CELLP
      001034 CD 02 C3         [ 4] 3044         CALL     DOLIT
      001037 FF FF                 3045         .word     0xFFFF
      001039 20 0C            [ 2] 3046         JRA     FIND3
      00103B CD 08 7C         [ 4] 3047 FIND2:  CALL     CELLP
      00103E CD 04 BE         [ 4] 3048         CALL     TEMP
      001041 CD 03 4B         [ 4] 3049         CALL     AT
      001044 CD 0F AF         [ 4] 3050         CALL     SAMEQ
      001047 CD 03 0D         [ 4] 3051 FIND3:  CALL     BRAN
      00104A 10 5B                 3052         .word      FIND4
      00104C CD 03 9C         [ 4] 3053 FIND6:  CALL     RFROM
      00104F CD 03 E8         [ 4] 3054         CALL     DROP
      001052 CD 04 02         [ 4] 3055         CALL     SWAPP
      001055 CD 08 8B         [ 4] 3056         CALL     CELLM
      001058 CC 04 02         [ 2] 3057         JP     SWAPP
      00105B CD 02 F6         [ 4] 3058 FIND4:  CALL     QBRAN
      00105E 10 68                 3059         .word      FIND5
      001060 CD 08 8B         [ 4] 3060         CALL     CELLM
      001063 CD 08 8B         [ 4] 3061         CALL     CELLM
      001066 20 A5            [ 2] 3062         JRA     FIND1
      001068 CD 03 9C         [ 4] 3063 FIND5:  CALL     RFROM
      00106B CD 03 E8         [ 4] 3064         CALL     DROP
      00106E CD 04 02         [ 4] 3065         CALL     SWAPP
      001071 CD 03 E8         [ 4] 3066         CALL     DROP
      001074 CD 08 8B         [ 4] 3067         CALL     CELLM
      001077 CD 03 F2         [ 4] 3068         CALL     DUPP
      00107A CD 0F 99         [ 4] 3069         CALL     NAMET
      00107D CC 04 02         [ 2] 3070         JP     SWAPP
                                   3071 
                                   3072 ;       NAME?   ( a -- ca na | a F )
                                   3073 ;       Search vocabularies for a string.
      001080 0F EA                 3074         .word      LINK
                           001082  3075 LINK = . 
      001082 05                    3076         .byte      5
      001083 4E 41 4D 45 3F        3077         .ascii     "NAME?"
      001088                       3078 NAMEQ:
      001088 CD 05 20         [ 4] 3079         CALL   CNTXT
      00108B CC 0F EF         [ 2] 3080         JP     FIND
                                   3081 
                                   3082 ;; Terminal response
                                   3083 
                                   3084 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3085 ;       Backup cursor by one character.
      00108E 10 82                 3086         .word      LINK
                           001090  3087 LINK = . 
      001090 02                    3088         .byte      2
      001091 5E 48                 3089         .ascii     "^H"
      001093                       3090 BKSP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001093 CD 03 BB         [ 4] 3091         CALL     TOR
      001096 CD 04 1C         [ 4] 3092         CALL     OVER
      001099 CD 03 9C         [ 4] 3093         CALL     RFROM
      00109C CD 04 02         [ 4] 3094         CALL     SWAPP
      00109F CD 04 1C         [ 4] 3095         CALL     OVER
      0010A2 CD 04 67         [ 4] 3096         CALL     XORR
      0010A5 CD 02 F6         [ 4] 3097         CALL     QBRAN
      0010A8 10 C3                 3098         .word      BACK1
      0010AA CD 02 C3         [ 4] 3099         CALL     DOLIT
      0010AD 00 08                 3100         .word      BKSPP
      0010AF CD 02 AD         [ 4] 3101         CALL     EMIT
      0010B2 CD 08 B4         [ 4] 3102         CALL     ONEM
      0010B5 CD 09 06         [ 4] 3103         CALL     BLANK
      0010B8 CD 02 AD         [ 4] 3104         CALL     EMIT
      0010BB CD 02 C3         [ 4] 3105         CALL     DOLIT
      0010BE 00 08                 3106         .word      BKSPP
      0010C0 CC 02 AD         [ 2] 3107         JP     EMIT
      0010C3 81               [ 4] 3108 BACK1:  RET
                                   3109 
                                   3110 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   3111 ;       Accept and echo key stroke
                                   3112 ;       and bump cursor.
      0010C4 10 90                 3113         .word      LINK
                           0010C6  3114 LINK = . 
      0010C6 03                    3115         .byte      3
      0010C7 54 41 50              3116         .ascii     "TAP"
      0010CA                       3117 TAP:
      0010CA CD 03 F2         [ 4] 3118         CALL     DUPP
      0010CD CD 02 AD         [ 4] 3119         CALL     EMIT
      0010D0 CD 04 1C         [ 4] 3120         CALL     OVER
      0010D3 CD 03 58         [ 4] 3121         CALL     CSTOR
      0010D6 CC 08 A7         [ 2] 3122         JP     ONEP
                                   3123 
                                   3124 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3125 ;       Process a key stroke,
                                   3126 ;       CR or backspace.
      0010D9 10 C6                 3127         .word      LINK
                           0010DB  3128 LINK = . 
      0010DB 04                    3129         .byte      4
      0010DC 4B 54 41 50           3130         .ascii     "KTAP"
      0010E0                       3131 KTAP:
      0010E0 CD 03 F2         [ 4] 3132         CALL     DUPP
      0010E3 CD 02 C3         [ 4] 3133         CALL     DOLIT
      0010E6 00 0D                 3134         .word      CRR
      0010E8 CD 04 67         [ 4] 3135         CALL     XORR
      0010EB CD 02 F6         [ 4] 3136         CALL     QBRAN
      0010EE 11 06                 3137         .word      KTAP2
      0010F0 CD 02 C3         [ 4] 3138         CALL     DOLIT
      0010F3 00 08                 3139         .word      BKSPP
      0010F5 CD 04 67         [ 4] 3140         CALL     XORR
      0010F8 CD 02 F6         [ 4] 3141         CALL     QBRAN
      0010FB 11 03                 3142         .word      KTAP1
      0010FD CD 09 06         [ 4] 3143         CALL     BLANK
      001100 CC 10 CA         [ 2] 3144         JP     TAP
      001103 CC 10 93         [ 2] 3145 KTAP1:  JP     BKSP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001106 CD 03 E8         [ 4] 3146 KTAP2:  CALL     DROP
      001109 CD 04 02         [ 4] 3147         CALL     SWAPP
      00110C CD 03 E8         [ 4] 3148         CALL     DROP
      00110F CC 03 F2         [ 2] 3149         JP     DUPP
                                   3150 
                                   3151 ;       accept  ( b u -- b u )
                                   3152 ;       Accept characters to input
                                   3153 ;       buffer. Return with actual count.
      001112 10 DB                 3154         .word      LINK
                           001114  3155 LINK = . 
      001114 06                    3156         .byte      6
      001115 41 43 43 45 50 54     3157         .ascii     "ACCEPT"
      00111B                       3158 ACCEP:
      00111B CD 04 1C         [ 4] 3159         CALL     OVER
      00111E CD 05 C8         [ 4] 3160         CALL     PLUS
      001121 CD 04 1C         [ 4] 3161         CALL     OVER
      001124 CD 05 B3         [ 4] 3162 ACCP1:  CALL     DDUP
      001127 CD 04 67         [ 4] 3163         CALL     XORR
      00112A CD 02 F6         [ 4] 3164         CALL     QBRAN
      00112D 11 4F                 3165         .word      ACCP4
      00112F CD 0C F9         [ 4] 3166         CALL     KEY
      001132 CD 03 F2         [ 4] 3167         CALL     DUPP
      001135 CD 09 06         [ 4] 3168         CALL     BLANK
      001138 CD 02 C3         [ 4] 3169         CALL     DOLIT
      00113B 00 7F                 3170         .word      127
      00113D CD 06 E8         [ 4] 3171         CALL     WITHI
      001140 CD 02 F6         [ 4] 3172         CALL     QBRAN
      001143 11 4A                 3173         .word      ACCP2
      001145 CD 10 CA         [ 4] 3174         CALL     TAP
      001148 20 03            [ 2] 3175         JRA     ACCP3
      00114A CD 10 E0         [ 4] 3176 ACCP2:  CALL     KTAP
      00114D 20 D5            [ 2] 3177 ACCP3:  JRA     ACCP1
      00114F CD 03 E8         [ 4] 3178 ACCP4:  CALL     DROP
      001152 CD 04 1C         [ 4] 3179         CALL     OVER
      001155 CC 06 26         [ 2] 3180         JP     SUBB
                                   3181 
                                   3182 ;       QUERY   ( -- )
                                   3183 ;       Accept input stream to
                                   3184 ;       terminal input buffer.
      001158 11 14                 3185         .word      LINK
                                   3186         
                           00115A  3187 LINK = . 
      00115A 05                    3188         .byte      5
      00115B 51 55 45 52 59        3189         .ascii     "QUERY"
      001160                       3190 QUERY:
      001160 CD 0A 22         [ 4] 3191         CALL     TIB
      001163 CD 02 C3         [ 4] 3192         CALL     DOLIT
      001166 00 50                 3193         .word      80
      001168 CD 11 1B         [ 4] 3194         CALL     ACCEP
      00116B CD 04 DD         [ 4] 3195         CALL     NTIB
      00116E CD 03 34         [ 4] 3196         CALL     STORE
      001171 CD 03 E8         [ 4] 3197         CALL     DROP
      001174 CD 09 13         [ 4] 3198         CALL     ZERO
      001177 CD 04 CD         [ 4] 3199         CALL     INN
      00117A CC 03 34         [ 2] 3200         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3201 
                                   3202 ;       ABORT   ( -- )
                                   3203 ;       Reset data stack and
                                   3204 ;       jump to QUIT.
      00117D 11 5A                 3205         .word      LINK
                           00117F  3206 LINK = . 
      00117F 05                    3207         .byte      5
      001180 41 42 4F 52 54        3208         .ascii     "ABORT"
      001185                       3209 ABORT:
      001185 CD 12 7C         [ 4] 3210         CALL     PRESE
      001188 CC 12 99         [ 2] 3211         JP     QUIT
                                   3212 
                                   3213 ;       abort"  ( f -- )
                                   3214 ;       Run time routine of ABORT".
                                   3215 ;       Abort with a message.
      00118B 11 7F                 3216         .word      LINK
                           00118D  3217 LINK = . 
      00118D 46                    3218 	.byte      COMPO+6
      00118E 41 42 4F 52 54        3219         .ascii     "ABORT"
      001193 22                    3220         .byte      '"'
      001194                       3221 ABORQ:
      001194 CD 02 F6         [ 4] 3222         CALL     QBRAN
      001197 11 B3                 3223         .word      ABOR2   ;text flag
      001199 CD 0D 8F         [ 4] 3224         CALL     DOSTR
      00119C CD 0D 31         [ 4] 3225 ABOR1:  CALL     SPACE
      00119F CD 09 E9         [ 4] 3226         CALL     COUNT
      0011A2 CD 0D 5B         [ 4] 3227         CALL     TYPES
      0011A5 CD 02 C3         [ 4] 3228         CALL     DOLIT
      0011A8 00 3F                 3229         .word     63 ; "?"
      0011AA CD 02 AD         [ 4] 3230         CALL     EMIT
      0011AD CD 0D 79         [ 4] 3231         CALL     CR
      0011B0 CC 11 85         [ 2] 3232         JP     ABORT   ;pass error string
      0011B3 CD 0D 8F         [ 4] 3233 ABOR2:  CALL     DOSTR
      0011B6 CC 03 E8         [ 2] 3234         JP     DROP
                                   3235 
                                   3236 ;; The text interpreter
                                   3237 
                                   3238 ;       $INTERPRET      ( a -- )
                                   3239 ;       Interpret a word. If failed,
                                   3240 ;       try to convert it to an integer.
      0011B9 11 8D                 3241         .word      LINK
                           0011BB  3242 LINK = . 
      0011BB 0A                    3243         .byte      10
      0011BC 24 49 4E 54 45 52 50  3244         .ascii     "$INTERPRET"
             52 45 54
      0011C6                       3245 INTER:
      0011C6 CD 10 88         [ 4] 3246         CALL     NAMEQ
      0011C9 CD 05 77         [ 4] 3247         CALL     QDUP    ;?defined
      0011CC CD 02 F6         [ 4] 3248         CALL     QBRAN
      0011CF 11 F0                 3249         .word      INTE1
      0011D1 CD 03 4B         [ 4] 3250         CALL     AT
      0011D4 CD 02 C3         [ 4] 3251         CALL     DOLIT
      0011D7 40 00                 3252 	.word       0x4000	; COMPO*256
      0011D9 CD 04 3E         [ 4] 3253         CALL     ANDD    ;?compile only lexicon bits
      0011DC CD 11 94         [ 4] 3254         CALL     ABORQ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011DF 0D                    3255         .byte      13
      0011E0 20 63 6F 6D 70 69 6C  3256         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0011ED CC 03 1D         [ 2] 3257         JP     EXECU
      0011F0 CD 0C 26         [ 4] 3258 INTE1:  CALL     NUMBQ   ;convert a number
      0011F3 CD 02 F6         [ 4] 3259         CALL     QBRAN
      0011F6 11 9C                 3260         .word    ABOR1
      0011F8 81               [ 4] 3261         RET
                                   3262 
                                   3263 ;       [       ( -- )
                                   3264 ;       Start  text interpreter.
      0011F9 11 BB                 3265         .word      LINK
                           0011FB  3266 LINK = . 
      0011FB 81                    3267 	.byte      IMEDD+1
      0011FC 5B                    3268         .ascii     "["
      0011FD                       3269 LBRAC:
      0011FD CD 02 C3         [ 4] 3270         CALL   DOLIT
      001200 11 C6                 3271         .word  INTER
      001202 CD 04 FE         [ 4] 3272         CALL   TEVAL
      001205 CC 03 34         [ 2] 3273         JP     STORE
                                   3274 
                                   3275 ;       .OK     ( -- )
                                   3276 ;       Display 'ok' while interpreting.
      001208 11 FB                 3277         .word      LINK
                           00120A  3278 LINK = . 
      00120A 03                    3279         .byte      3
      00120B 2E 4F 4B              3280         .ascii     ".OK"
      00120E                       3281 DOTOK:
      00120E CD 02 C3         [ 4] 3282         CALL     DOLIT
      001211 11 C6                 3283         .word      INTER
      001213 CD 04 FE         [ 4] 3284         CALL     TEVAL
      001216 CD 03 4B         [ 4] 3285         CALL     AT
      001219 CD 06 4E         [ 4] 3286         CALL     EQUAL
      00121C CD 02 F6         [ 4] 3287         CALL     QBRAN
      00121F 12 28                 3288         .word      DOTO1
      001221 CD 0D B8         [ 4] 3289         CALL     DOTQP
      001224 03                    3290         .byte      3
      001225 20 6F 6B              3291         .ascii     " ok"
      001228 CC 0D 79         [ 2] 3292 DOTO1:  JP     CR
                                   3293 
                                   3294 ;       ?STACK  ( -- )
                                   3295 ;       Abort if stack underflows.
      00122B 12 0A                 3296         .word      LINK
                           00122D  3297 LINK = . 
      00122D 06                    3298         .byte      6
      00122E 3F 53 54 41 43 4B     3299         .ascii     "?STACK"
      001234                       3300 QSTAC: 
      001234 CD 09 56         [ 4] 3301         CALL     DEPTH
      001237 CD 04 2B         [ 4] 3302         CALL     ZLESS   ;check only for underflow
      00123A CD 11 94         [ 4] 3303         CALL     ABORQ
      00123D 0B                    3304         .byte      11
      00123E 20 75 6E 64 65 72 66  3305         .ascii     " underflow "
             6C 6F 77 20
      001249 81               [ 4] 3306         RET
                                   3307 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3308 ;       EVAL    ( -- )
                                   3309 ;       Interpret  input stream.
      00124A 12 2D                 3310         .word      LINK
                           00124C  3311 LINK = . 
      00124C 04                    3312         .byte      4
      00124D 45 56 41 4C           3313         .ascii     "EVAL"
      001251                       3314 EVAL:
      001251 CD 0F 8B         [ 4] 3315 EVAL1:  CALL     TOKEN
      001254 CD 03 F2         [ 4] 3316         CALL     DUPP
      001257 CD 03 69         [ 4] 3317         CALL     CAT     ;?input stream empty
      00125A CD 02 F6         [ 4] 3318         CALL     QBRAN
      00125D 12 6D                 3319         .word    EVAL2
      00125F CD 04 FE         [ 4] 3320         CALL     TEVAL
      001262 CD 0A 36         [ 4] 3321         CALL     ATEXE
      001265 CD 12 34         [ 4] 3322         CALL     QSTAC   ;evaluate input, check stack
      001268 CD 03 0D         [ 4] 3323         CALL     BRAN
      00126B 12 51                 3324         .word    EVAL1
      00126D CD 03 E8         [ 4] 3325 EVAL2:  CALL     DROP
      001270 CC 12 0E         [ 2] 3326         JP       DOTOK
                                   3327 
                                   3328 ;       PRESET  ( -- )
                                   3329 ;       Reset data stack pointer and
                                   3330 ;       terminal input buffer.
      001273 12 4C                 3331         .word      LINK
                           001275  3332 LINK = . 
      001275 06                    3333         .byte      6
      001276 50 52 45 53 45 54     3334         .ascii     "PRESET"
      00127C                       3335 PRESE:
      00127C CD 02 C3         [ 4] 3336         CALL     DOLIT
      00127F 16 70                 3337         .word      SPP
      001281 CD 03 DF         [ 4] 3338         CALL     SPSTO
      001284 CD 02 C3         [ 4] 3339         CALL     DOLIT
      001287 17 00                 3340         .word      TIBB
      001289 CD 04 DD         [ 4] 3341         CALL     NTIB
      00128C CD 08 7C         [ 4] 3342         CALL     CELLP
      00128F CC 03 34         [ 2] 3343         JP     STORE
                                   3344 
                                   3345 ;       QUIT    ( -- )
                                   3346 ;       Reset return stack pointer
                                   3347 ;       and start text interpreter.
      001292 12 75                 3348         .word      LINK
                           001294  3349 LINK = . 
      001294 04                    3350         .byte      4
      001295 51 55 49 54           3351         .ascii     "QUIT"
      001299                       3352 QUIT:
      001299 CD 02 C3         [ 4] 3353         CALL     DOLIT
      00129C 17 FF                 3354         .word      RPP
      00129E CD 03 86         [ 4] 3355         CALL     RPSTO   ;reset return stack pointer
      0012A1 CD 11 FD         [ 4] 3356 QUIT1:  CALL     LBRAC   ;start interpretation
      0012A4 CD 11 60         [ 4] 3357 QUIT2:  CALL     QUERY   ;get input
      0012A7 CD 12 51         [ 4] 3358         CALL     EVAL
      0012AA 20 F8            [ 2] 3359         JRA     QUIT2   ;continue till error
                                   3360 
                                   3361 ;; The compiler
                                   3362 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3363 ;       '       ( -- ca )
                                   3364 ;       Search vocabularies for
                                   3365 ;       next word in input stream.
      0012AC 12 94                 3366         .word      LINK
                           0012AE  3367 LINK = . 
      0012AE 01                    3368         .byte      1
      0012AF 27                    3369         .ascii     "'"
      0012B0                       3370 TICK:
      0012B0 CD 0F 8B         [ 4] 3371         CALL     TOKEN
      0012B3 CD 10 88         [ 4] 3372         CALL     NAMEQ   ;?defined
      0012B6 CD 02 F6         [ 4] 3373         CALL     QBRAN
      0012B9 11 9C                 3374         .word      ABOR1
      0012BB 81               [ 4] 3375         RET     ;yes, push code address
                                   3376 
                                   3377 ;       ALLOT   ( n -- )
                           000001  3378 .if PICATOUT_MOD
                                   3379 ;       Allocate n bytes to RAM 
                           000000  3380 .else 
                                   3381 ;       Allocate n bytes to  code dictionary.
                                   3382 .endif 
      0012BC 12 AE                 3383         .word      LINK
                           0012BE  3384 LINK = . 
      0012BE 05                    3385         .byte      5
      0012BF 41 4C 4C 4F 54        3386         .ascii     "ALLOT"
      0012C4                       3387 ALLOT:
      0012C4 CD 05 2E         [ 4] 3388         CALL     VPP
                           000001  3389 .if PICATOUT_MOD
                                   3390 ; must update APP_VP each time VP is modidied
      0012C7 CD 09 82         [ 4] 3391         call PSTOR 
      0012CA CD 19 71         [ 4] 3392         call UPDATVP 
                           000000  3393 .else
                                   3394         JP     PSTOR
                                   3395 .endif ;PICATOUT_MOD
                                   3396 
                                   3397 ;       ,       ( w -- )
                                   3398 ;         Compile an integer into
                                   3399 ;         variable space.
      0012CD 12 BE                 3400         .word      LINK
                           0012CF  3401 LINK = . 
      0012CF 01                    3402         .byte      1
      0012D0 2C                    3403         .ascii     ","
      0012D1                       3404 COMMA:
      0012D1 CD 0A 00         [ 4] 3405         CALL     HERE
      0012D4 CD 03 F2         [ 4] 3406         CALL     DUPP
      0012D7 CD 08 7C         [ 4] 3407         CALL     CELLP   ;cell boundary
      0012DA CD 05 2E         [ 4] 3408         CALL     VPP
      0012DD CD 03 34         [ 4] 3409         CALL     STORE
      0012E0 CC 03 34         [ 2] 3410         JP     STORE
                                   3411 
                                   3412 ;       C,      ( c -- )
                                   3413 ;       Compile a byte into
                                   3414 ;       variables space.
      0012E3 12 CF                 3415        .word      LINK
                           0012E5  3416 LINK = . 
      0012E5 02                    3417         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012E6 43 2C                 3418         .ascii     "C,"
      0012E8                       3419 CCOMMA:
      0012E8 CD 0A 00         [ 4] 3420         CALL     HERE
      0012EB CD 03 F2         [ 4] 3421         CALL     DUPP
      0012EE CD 08 A7         [ 4] 3422         CALL     ONEP
      0012F1 CD 05 2E         [ 4] 3423         CALL     VPP
      0012F4 CD 03 34         [ 4] 3424         CALL     STORE
      0012F7 CC 03 58         [ 2] 3425         JP     CSTOR
                                   3426 
                                   3427 ;       [COMPILE]       ( -- ; <string> )
                                   3428 ;       Compile next immediate
                                   3429 ;       word into code dictionary.
      0012FA 12 E5                 3430         .word      LINK
                           0012FC  3431 LINK = . 
      0012FC 89                    3432 	.byte      IMEDD+9
      0012FD 5B 43 4F 4D 50 49 4C  3433         .ascii     "[COMPILE]"
             45 5D
      001306                       3434 BCOMP:
      001306 CD 12 B0         [ 4] 3435         CALL     TICK
      001309 CC 15 B8         [ 2] 3436         JP     JSRC
                                   3437 
                                   3438 ;       COMPILE ( -- )
                                   3439 ;       Compile next jsr in
                                   3440 ;       colon list to code dictionary.
      00130C 12 FC                 3441         .word      LINK
                           00130E  3442 LINK = . 
      00130E 47                    3443 	.byte      COMPO+7
      00130F 43 4F 4D 50 49 4C 45  3444         .ascii     "COMPILE"
      001316                       3445 COMPI:
      001316 CD 03 9C         [ 4] 3446         CALL     RFROM
                           000001  3447 .if PICATOUT_MOD
                                   3448 ; no need to increment
                           000000  3449 .else
                                   3450         CALL     ONEP
                                   3451 .endif 
      001319 CD 03 F2         [ 4] 3452         CALL     DUPP
      00131C CD 03 4B         [ 4] 3453         CALL     AT
      00131F CD 15 B8         [ 4] 3454         CALL     JSRC    ;compile subroutine
      001322 CD 08 7C         [ 4] 3455         CALL     CELLP
                           000001  3456 .if PICATOUT_MOD
      001325 90 93            [ 1] 3457         ldw y,x 
      001327 90 FE            [ 2] 3458         ldw y,(y)
      001329 1C 00 02         [ 2] 3459         addw x,#CELLL 
      00132C 90 FC            [ 2] 3460         jp (y)
                           000000  3461 .else 
                                   3462         JP     TOR
                                   3463 .endif 
                                   3464 
                                   3465 ;       LITERAL ( w -- )
                                   3466 ;       Compile tos to dictionary
                                   3467 ;       as an integer literal.
      00132E 13 0E                 3468         .word      LINK
                           001330  3469 LINK = . 
      001330 87                    3470 	.byte      IMEDD+7
      001331 4C 49 54 45 52 41 4C  3471         .ascii     "LITERAL"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001338                       3472 LITER:
      001338 CD 13 16         [ 4] 3473         CALL     COMPI
                           000001  3474 .if PICATOUT_MOD
      00133B 02 C3                 3475         .word DOLIT 
                           000000  3476 .else         
                                   3477         CALL     DOLIT
                                   3478 .endif 
      00133D CC 12 D1         [ 2] 3479         JP     COMMA
                                   3480 
                                   3481 ;       $,"     ( -- )
                                   3482 ;       Compile a literal string
                                   3483 ;       up to next " .
      001340 13 30                 3484         .word      LINK
                           001342  3485 LINK = . 
      001342 03                    3486         .byte      3
      001343 24 2C 22              3487         .byte     '$',',','"'
      001346                       3488 STRCQ:
      001346 CD 02 C3         [ 4] 3489         CALL     DOLIT
      001349 00 22                 3490         .word     34	; "
      00134B CD 0F 0E         [ 4] 3491         CALL     PARSE
      00134E CD 0A 00         [ 4] 3492         CALL     HERE
      001351 CD 0A C1         [ 4] 3493         CALL     PACKS   ;string to code dictionary
      001354 CD 09 E9         [ 4] 3494         CALL     COUNT
      001357 CD 05 C8         [ 4] 3495         CALL     PLUS    ;calculate aligned end of string
      00135A CD 05 2E         [ 4] 3496         CALL     VPP
      00135D CC 03 34         [ 2] 3497         JP     STORE
                                   3498 
                                   3499 ;; Structures
                                   3500 
                                   3501 ;       FOR     ( -- a )
                                   3502 ;       Start a FOR-NEXT loop
                                   3503 ;       structure in a colon definition.
      001360 13 42                 3504         .word      LINK
                           001362  3505 LINK = . 
      001362 83                    3506 	.byte      IMEDD+3
      001363 46 4F 52              3507         .ascii     "FOR"
      001366                       3508 FOR:
      001366 CD 13 16         [ 4] 3509         CALL     COMPI
                           000001  3510 .if PICATOUT_MOD
      001369 03 BB                 3511         .word TOR 
                           000000  3512 .else
                                   3513         CALL     TOR
                                   3514 .endif
      00136B CC 0A 00         [ 2] 3515         JP     HERE
                                   3516 
                                   3517 ;       NEXT    ( a -- )
                                   3518 ;       Terminate a FOR-NEXT loop.
      00136E 13 62                 3519         .word      LINK
                           001370  3520 LINK = . 
      001370 84                    3521 	.byte      IMEDD+4
      001371 4E 45 58 54           3522         .ascii     "NEXT"
      001375                       3523 NEXT:
      001375 CD 13 16         [ 4] 3524         CALL     COMPI
                           000001  3525 .if PICATOUT_MOD
      001378 02 D7                 3526         .word DONXT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                           000000  3527 .else 
                                   3528         CALL     DONXT
                                   3529 .endif         
                           000001  3530 .if PICATOUT_MOD
      00137A CD 05 67         [ 4] 3531         call ADRADJ
                                   3532 .endif ; PICATOUT_MOD
      00137D CC 12 D1         [ 2] 3533         JP     COMMA
                                   3534 
                                   3535 ;       I ( -- n )
                                   3536 ;       stack FOR-NEXT COUNTER 
      001380 13 70                 3537         .word LINK 
                           001382  3538         LINK=.
      001382 01                    3539         .byte 1 
      001383 49                    3540         .ascii "I"
      001384                       3541 IFETCH: 
      001384 1D 00 02         [ 2] 3542         subw x,#CELLL 
      001387 16 03            [ 2] 3543         ldw y,(3,sp)
      001389 FF               [ 2] 3544         ldw (x),y 
      00138A 81               [ 4] 3545         ret 
                                   3546 
                                   3547 ;       BEGIN   ( -- a )
                                   3548 ;       Start an infinite or
                                   3549 ;       indefinite loop structure.
      00138B 13 82                 3550         .word      LINK
                           00138D  3551 LINK = . 
      00138D 85                    3552 	.byte      IMEDD+5
      00138E 42 45 47 49 4E        3553         .ascii     "BEGIN"
      001393                       3554 BEGIN:
      001393 CC 0A 00         [ 2] 3555         JP     HERE
                                   3556 
                                   3557 ;       UNTIL   ( a -- )
                                   3558 ;       Terminate a BEGIN-UNTIL
                                   3559 ;       indefinite loop structure.
      001396 13 8D                 3560         .word      LINK
                           001398  3561 LINK = . 
      001398 85                    3562 	.byte      IMEDD+5
      001399 55 4E 54 49 4C        3563         .ascii     "UNTIL"
      00139E                       3564 UNTIL:
      00139E CD 13 16         [ 4] 3565         CALL     COMPI
                           000001  3566 .if PICATOUT_MOD
      0013A1 02 F6                 3567         .word    QBRAN 
                           000000  3568 .else 
                                   3569         CALL     QBRAN
                                   3570 .endif 
                           000001  3571 .if PICATOUT_MOD 
      0013A3 CD 05 67         [ 4] 3572         call ADRADJ
                                   3573 .endif ; PICATOUT_MOD
      0013A6 CC 12 D1         [ 2] 3574         JP     COMMA
                                   3575 
                                   3576 ;       AGAIN   ( a -- )
                                   3577 ;       Terminate a BEGIN-AGAIN
                                   3578 ;       infinite loop structure.
      0013A9 13 98                 3579         .word      LINK
                           0013AB  3580 LINK = . 
      0013AB 85                    3581 	.byte      IMEDD+5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013AC 41 47 41 49 4E        3582         .ascii     "AGAIN"
      0013B1                       3583 AGAIN:
      0013B1 CD 13 16         [ 4] 3584         CALL     COMPI
                           000001  3585 .if PICATOUT_MOD
      0013B4 03 0D                 3586         .word BRAN
                           000000  3587 .else
                                   3588         CALL     BRAN
                                   3589 .endif 
                           000001  3590 .if PICATOUT_MOD 
      0013B6 CD 05 67         [ 4] 3591         call ADRADJ 
                                   3592 .endif ; PICATOUT_MOD
      0013B9 CC 12 D1         [ 2] 3593         JP     COMMA
                                   3594 
                                   3595 ;       IF      ( -- A )
                                   3596 ;       Begin a conditional branch.
      0013BC 13 AB                 3597         .word      LINK
                           0013BE  3598 LINK = . 
      0013BE 82                    3599 	.byte      IMEDD+2
      0013BF 49 46                 3600         .ascii     "IF"
      0013C1                       3601 IFF:
      0013C1 CD 13 16         [ 4] 3602         CALL     COMPI
                           000001  3603 .if PICATOUT_MOD
      0013C4 02 F6                 3604         .word QBRAN
                           000000  3605 .else
                                   3606         CALL     QBRAN
                                   3607 .endif 
      0013C6 CD 0A 00         [ 4] 3608         CALL     HERE
      0013C9 CD 09 13         [ 4] 3609         CALL     ZERO
      0013CC CC 12 D1         [ 2] 3610         JP     COMMA
                                   3611 
                                   3612 ;       THEN        ( A -- )
                                   3613 ;       Terminate a conditional branch structure.
      0013CF 13 BE                 3614         .word      LINK
                           0013D1  3615 LINK = . 
      0013D1 84                    3616 	.byte      IMEDD+4
      0013D2 54 48 45 4E           3617         .ascii     "THEN"
      0013D6                       3618 THENN:
      0013D6 CD 0A 00         [ 4] 3619         CALL     HERE
                           000001  3620 .if PICATOUT_MOD 
      0013D9 CD 05 67         [ 4] 3621         call ADRADJ 
                                   3622 .endif ; PICATOUT_MOD
      0013DC CD 04 02         [ 4] 3623         CALL     SWAPP
      0013DF CC 03 34         [ 2] 3624         JP     STORE
                                   3625 
                                   3626 ;       ELSE        ( A -- A )
                                   3627 ;       Start the false clause in an IF-ELSE-THEN structure.
      0013E2 13 D1                 3628         .word      LINK
                           0013E4  3629 LINK = . 
      0013E4 84                    3630 	.byte      IMEDD+4
      0013E5 45 4C 53 45           3631         .ascii     "ELSE"
      0013E9                       3632 ELSEE:
      0013E9 CD 13 16         [ 4] 3633         CALL     COMPI
                           000001  3634 .if PICATOUT_MOD
      0013EC 03 0D                 3635         .word BRAN
                           000000  3636 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3637         CALL     BRAN
                                   3638 .endif 
      0013EE CD 0A 00         [ 4] 3639         CALL     HERE
      0013F1 CD 09 13         [ 4] 3640         CALL     ZERO
      0013F4 CD 12 D1         [ 4] 3641         CALL     COMMA
      0013F7 CD 04 02         [ 4] 3642         CALL     SWAPP
      0013FA CD 0A 00         [ 4] 3643         CALL     HERE
                           000001  3644 .if PICATOUT_MOD 
      0013FD CD 05 67         [ 4] 3645         call ADRADJ 
                                   3646 .endif ; PICATOUT_MOD
      001400 CD 04 02         [ 4] 3647         CALL     SWAPP
      001403 CC 03 34         [ 2] 3648         JP     STORE
                                   3649 
                                   3650 ;       AHEAD       ( -- A )
                                   3651 ;       Compile a forward branch instruction.
      001406 13 E4                 3652         .word      LINK
                           001408  3653 LINK = . 
      001408 85                    3654 	.byte      IMEDD+5
      001409 41 48 45 41 44        3655         .ascii     "AHEAD"
      00140E                       3656 AHEAD:
      00140E CD 13 16         [ 4] 3657         CALL     COMPI
                           000001  3658 .if PICATOUT_MOD
      001411 03 0D                 3659         .word BRAN
                           000000  3660 .else
                                   3661         CALL     BRAN
                                   3662 .endif 
      001413 CD 0A 00         [ 4] 3663         CALL     HERE
      001416 CD 09 13         [ 4] 3664         CALL     ZERO
      001419 CC 12 D1         [ 2] 3665         JP     COMMA
                                   3666 
                                   3667 ;       WHILE       ( a -- A a )
                                   3668 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00141C 14 08                 3669         .word      LINK
                           00141E  3670 LINK = . 
      00141E 85                    3671 	.byte      IMEDD+5
      00141F 57 48 49 4C 45        3672         .ascii     "WHILE"
      001424                       3673 WHILE:
      001424 CD 13 16         [ 4] 3674         CALL     COMPI
                           000001  3675 .if PICATOUT_MOD
      001427 02 F6                 3676         .word QBRAN
                           000000  3677 .else
                                   3678         CALL     QBRAN
                                   3679 .endif 
      001429 CD 0A 00         [ 4] 3680         CALL     HERE
      00142C CD 09 13         [ 4] 3681         CALL     ZERO
      00142F CD 12 D1         [ 4] 3682         CALL     COMMA
      001432 CC 04 02         [ 2] 3683         JP     SWAPP
                                   3684 
                                   3685 ;       REPEAT      ( A a -- )
                                   3686 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001435 14 1E                 3687         .word      LINK
                           001437  3688 LINK = . 
      001437 86                    3689         .byte      IMEDD+6
      001438 52 45 50 45 41 54     3690         .ascii     "REPEAT"
      00143E                       3691 REPEA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00143E CD 13 16         [ 4] 3692         CALL     COMPI
                           000001  3693 .if PICATOUT_MOD
      001441 03 0D                 3694         .word BRAN
                           000000  3695 .else
                                   3696         CALL     BRAN
                                   3697 .endif 
                           000001  3698 .if PICATOUT_MOD 
      001443 CD 05 67         [ 4] 3699         call ADRADJ 
                                   3700 .endif ; PICATOUT_MOD
      001446 CD 12 D1         [ 4] 3701         CALL     COMMA
      001449 CD 0A 00         [ 4] 3702         CALL     HERE
                           000001  3703 .if PICATOUT_MOD 
      00144C CD 05 67         [ 4] 3704         call ADRADJ 
                                   3705 .endif ; PICATOUT_MOD
      00144F CD 04 02         [ 4] 3706         CALL     SWAPP
      001452 CC 03 34         [ 2] 3707         JP     STORE
                                   3708 
                                   3709 ;       AFT         ( a -- a A )
                                   3710 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001455 14 37                 3711         .word      LINK
                           001457  3712 LINK = . 
      001457 83                    3713 	.byte      IMEDD+3
      001458 41 46 54              3714         .ascii     "AFT"
      00145B                       3715 AFT:
      00145B CD 03 E8         [ 4] 3716         CALL     DROP
      00145E CD 14 0E         [ 4] 3717         CALL     AHEAD
      001461 CD 0A 00         [ 4] 3718         CALL     HERE
      001464 CC 04 02         [ 2] 3719         JP     SWAPP
                                   3720 
                                   3721 ;       ABORT"      ( -- ; <string> )
                                   3722 ;       Conditional abort with an error message.
      001467 14 57                 3723         .word      LINK
                           001469  3724 LINK = . 
      001469 86                    3725 	.byte      IMEDD+6
      00146A 41 42 4F 52 54        3726         .ascii     "ABORT"
      00146F 22                    3727         .byte      '"'
      001470                       3728 ABRTQ:
      001470 CD 13 16         [ 4] 3729         CALL     COMPI
                           000001  3730 .if PICATOUT_MOD
      001473 11 94                 3731         .word ABORQ
                           000000  3732 .else
                                   3733         CALL     ABORQ
                                   3734 .endif
      001475 CC 13 46         [ 2] 3735         JP     STRCQ
                                   3736 
                                   3737 ;       $"     ( -- ; <string> )
                                   3738 ;       Compile an inline string literal.
      001478 14 69                 3739         .word      LINK
                           00147A  3740 LINK = . 
      00147A 82                    3741 	.byte      IMEDD+2
      00147B 24 22                 3742         .byte     '$','"'
      00147D                       3743 STRQ:
      00147D CD 13 16         [ 4] 3744         CALL     COMPI
                           000001  3745 .if PICATOUT_MOD
      001480 0D AE                 3746         .word STRQP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                           000000  3747 .else
                                   3748         CALL     STRQP
                                   3749 .endif
      001482 CC 13 46         [ 2] 3750         JP     STRCQ
                                   3751 
                                   3752 ;       ."          ( -- ; <string> )
                                   3753 ;       Compile an inline string literal to be typed out at run time.
      001485 14 7A                 3754         .word      LINK
                           001487  3755 LINK = . 
      001487 82                    3756 	.byte      IMEDD+2
      001488 2E 22                 3757         .byte     '.','"'
      00148A                       3758 DOTQ:
      00148A CD 13 16         [ 4] 3759         CALL     COMPI
                           000001  3760 .if PICATOUT_MOD
      00148D 0D B8                 3761         .word DOTQP 
                           000000  3762 .else
                                   3763         CALL     DOTQP
                                   3764 .endif 
      00148F CC 13 46         [ 2] 3765         JP     STRCQ
                                   3766 
                                   3767 ;; Name compiler
                                   3768 
                                   3769 ;       ?UNIQUE ( a -- a )
                                   3770 ;       Display a warning message
                                   3771 ;       if word already exists.
      001492 14 87                 3772         .word      LINK
                           001494  3773 LINK = . 
      001494 07                    3774         .byte      7
      001495 3F 55 4E 49 51 55 45  3775         .ascii     "?UNIQUE"
      00149C                       3776 UNIQU:
      00149C CD 03 F2         [ 4] 3777         CALL     DUPP
      00149F CD 10 88         [ 4] 3778         CALL     NAMEQ   ;?name exists
      0014A2 CD 02 F6         [ 4] 3779         CALL     QBRAN
      0014A5 14 BB                 3780         .word      UNIQ1
      0014A7 CD 0D B8         [ 4] 3781         CALL     DOTQP   ;redef are OK
      0014AA 07                    3782         .byte       7
      0014AB 20 72 65 44 65 66 20  3783         .ascii     " reDef "       
      0014B2 CD 04 1C         [ 4] 3784         CALL     OVER
      0014B5 CD 09 E9         [ 4] 3785         CALL     COUNT
      0014B8 CD 0D 5B         [ 4] 3786         CALL     TYPES   ;just in case
      0014BB CC 03 E8         [ 2] 3787 UNIQ1:  JP     DROP
                                   3788 
                                   3789 ;       $,n     ( na -- )
                                   3790 ;       Build a new dictionary name
                                   3791 ;       using string at na.
                           000001  3792 .if PICATOUT_MOD
                                   3793 ; compile dans l'espace des variables 
                                   3794 .endif 
      0014BE 14 94                 3795         .word      LINK
                           0014C0  3796 LINK = . 
      0014C0 03                    3797         .byte      3
      0014C1 24 2C 6E              3798         .ascii     "$,n"
      0014C4                       3799 SNAME:
      0014C4 CD 03 F2         [ 4] 3800         CALL     DUPP
      0014C7 CD 03 69         [ 4] 3801         CALL     CAT     ;?null input
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      0014CA CD 02 F6         [ 4] 3802         CALL     QBRAN
      0014CD 14 FA                 3803         .word      PNAM1
      0014CF CD 14 9C         [ 4] 3804         CALL     UNIQU   ;?redefinition
      0014D2 CD 03 F2         [ 4] 3805         CALL     DUPP
      0014D5 CD 09 E9         [ 4] 3806         CALL     COUNT
      0014D8 CD 05 C8         [ 4] 3807         CALL     PLUS
      0014DB CD 05 2E         [ 4] 3808         CALL     VPP
      0014DE CD 03 34         [ 4] 3809         CALL     STORE
      0014E1 CD 03 F2         [ 4] 3810         CALL     DUPP
      0014E4 CD 05 4C         [ 4] 3811         CALL     LAST
      0014E7 CD 03 34         [ 4] 3812         CALL     STORE   ;save na for vocabulary link
      0014EA CD 08 8B         [ 4] 3813         CALL     CELLM   ;link address
      0014ED CD 05 20         [ 4] 3814         CALL     CNTXT
      0014F0 CD 03 4B         [ 4] 3815         CALL     AT
      0014F3 CD 04 02         [ 4] 3816         CALL     SWAPP
      0014F6 CD 03 34         [ 4] 3817         CALL     STORE
      0014F9 81               [ 4] 3818         RET     ;save code pointer
      0014FA CD 0D AE         [ 4] 3819 PNAM1:  CALL     STRQP
      0014FD 05                    3820         .byte      5
      0014FE 20 6E 61 6D 65        3821         .ascii     " name" ;null input
      001503 CC 11 9C         [ 2] 3822         JP     ABOR1
                                   3823 
                                   3824 ;; FORTH compiler
                                   3825 
                                   3826 ;       $COMPILE        ( a -- )
                                   3827 ;       Compile next word to
                                   3828 ;       dictionary as a token or literal.
      001506 14 C0                 3829         .word      LINK
                           001508  3830 LINK = . 
      001508 08                    3831         .byte      8
      001509 24 43 4F 4D 50 49 4C  3832         .ascii     "$COMPILE"
             45
      001511                       3833 SCOMP:
      001511 CD 10 88         [ 4] 3834         CALL     NAMEQ
      001514 CD 05 77         [ 4] 3835         CALL     QDUP    ;?defined
      001517 CD 02 F6         [ 4] 3836         CALL     QBRAN
      00151A 15 32                 3837         .word      SCOM2
      00151C CD 03 4B         [ 4] 3838         CALL     AT
      00151F CD 02 C3         [ 4] 3839         CALL     DOLIT
      001522 80 00                 3840         .word     0x8000	;  IMEDD*256
      001524 CD 04 3E         [ 4] 3841         CALL     ANDD    ;?immediate
      001527 CD 02 F6         [ 4] 3842         CALL     QBRAN
      00152A 15 2F                 3843         .word      SCOM1
      00152C CC 03 1D         [ 2] 3844         JP     EXECU
      00152F CC 15 B8         [ 2] 3845 SCOM1:  JP     JSRC
      001532 CD 0C 26         [ 4] 3846 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001535 CD 02 F6         [ 4] 3847         CALL     QBRAN
      001538 11 9C                 3848         .word      ABOR1
      00153A CC 13 38         [ 2] 3849         JP     LITER
                                   3850 
                                   3851 ;       OVERT   ( -- )
                                   3852 ;       Link a new word into vocabulary.
      00153D 15 08                 3853         .word      LINK
                           00153F  3854 LINK = . 
      00153F 05                    3855         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001540 4F 56 45 52 54        3856         .ascii     "OVERT"
      001545                       3857 OVERT:
      001545 CD 05 4C         [ 4] 3858         CALL     LAST
      001548 CD 03 4B         [ 4] 3859         CALL     AT
      00154B CD 05 20         [ 4] 3860         CALL     CNTXT
      00154E CC 03 34         [ 2] 3861         JP     STORE
                                   3862 
                                   3863 ;       ;       ( -- )
                                   3864 ;       Terminate a colon definition.
      001551 15 3F                 3865         .word      LINK
                           001553  3866 LINK = . 
      001553 C1                    3867 	.byte      IMEDD+COMPO+1
      001554 3B                    3868         .ascii     ";"
      001555                       3869 SEMIS:
      001555 CD 13 16         [ 4] 3870         CALL     COMPI
                           000001  3871 .if PICATOUT_MOD
      001558 03 2D                 3872         .word EXIT 
                           000000  3873 .else
                                   3874         CALL     EXIT
                                   3875 .endif 
      00155A CD 11 FD         [ 4] 3876         CALL     LBRAC
                           000001  3877 .if PICATOUT_MOD
      00155D CD 15 45         [ 4] 3878         call OVERT 
      001560 CD 1E 3D         [ 4] 3879         CALL FMOVE
      001563 CD 1E C2         [ 4] 3880         CALL UPDATPTR 
      001566 81               [ 4] 3881         RET 
                           000000  3882 .else 
                                   3883         JP     OVERT
                                   3884 .endif 
                                   3885 
                           000001  3886 .if PICATOUT_MOD
                                   3887 ;       Terminate an ISR definition 
                                   3888 ;       retourn ca of ISR as double
                                   3889 ;       I; ( -- ud )
      001567 15 53                 3890         .word LINK 
                           001569  3891         LINK=.
      001569 C2                    3892         .byte 2+IMEDD+COMPO 
      00156A 49 3B                 3893         .ascii "I;" 
      00156C                       3894 ISEMI:
      00156C 1D 00 02         [ 2] 3895         subw x,#CELLL  
      00156F 90 AE 00 80      [ 2] 3896         ldw y,#IRET_CODE 
      001573 FF               [ 2] 3897         ldw (x),y 
      001574 CD 12 E8         [ 4] 3898         call CCOMMA
      001577 CD 11 FD         [ 4] 3899         call LBRAC 
      00157A CD 1F 07         [ 4] 3900         call IFMOVE 
      00157D CD 05 3C         [ 4] 3901         CALL CPP
      001580 CD 03 4B         [ 4] 3902         call AT 
      001583 CD 04 02         [ 4] 3903         call SWAPP 
      001586 CD 05 3C         [ 4] 3904         CALL CPP 
      001589 CD 03 34         [ 4] 3905         call STORE 
      00158C CD 19 5A         [ 4] 3906         call UPDATCP 
      00158F CD 19 17         [ 4] 3907         call EEPVP 
      001592 CD 03 E8         [ 4] 3908         call DROP 
      001595 CD 03 4B         [ 4] 3909         call AT 
      001598 CD 05 2E         [ 4] 3910         call VPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      00159B CD 03 34         [ 4] 3911         call STORE 
      00159E CC 09 13         [ 2] 3912         jp ZERO
                                   3913           
                                   3914         
                                   3915 .endif ;PICATOUT_MOD
                                   3916 
                                   3917 ;       ]       ( -- )
                                   3918 ;       Start compiling words in
                                   3919 ;       input stream.
      0015A1 15 69                 3920         .word      LINK
                           0015A3  3921 LINK = . 
      0015A3 01                    3922         .byte      1
      0015A4 5D                    3923         .ascii     "]"
      0015A5                       3924 RBRAC:
      0015A5 CD 02 C3         [ 4] 3925         CALL   DOLIT
      0015A8 15 11                 3926         .word  SCOMP
      0015AA CD 04 FE         [ 4] 3927         CALL   TEVAL
      0015AD CC 03 34         [ 2] 3928         JP     STORE
                                   3929 
                                   3930 ;       CALL,    ( ca -- )
                                   3931 ;       Compile a subroutine call.
      0015B0 15 A3                 3932         .word      LINK
                           0015B2  3933 LINK = . 
      0015B2 04                    3934         .byte      4
      0015B3 43 41 4C 4C 2C        3935         .ascii     "CALL,"
      0015B8                       3936 JSRC:
      0015B8 CD 02 C3         [ 4] 3937         CALL     DOLIT
      0015BB 00 CD                 3938         .word     CALLL     ;CALL
      0015BD CD 12 E8         [ 4] 3939         CALL     CCOMMA
      0015C0 CC 12 D1         [ 2] 3940         JP     COMMA
                                   3941 
                           000001  3942 .if PICATOUT_MOD
                                   3943 ;       INIT-OFS ( -- )
                                   3944 ;       compute offset to adjust jump address 
                                   3945 ;       set variable OFFSET 
      0015C3 15 B2                 3946         .word LINK 
                           0015C5  3947         LINK=.
      0015C5 08                    3948         .byte 8 
      0015C6 49 4E 49 54 2D 4F 46  3949         .ascii "INIT-OFS" 
             53
      0015CE                       3950 INITOFS:
      0015CE CD 05 3C         [ 4] 3951         call CPP 
      0015D1 CD 03 4B         [ 4] 3952         call AT 
      0015D4 CD 0A 00         [ 4] 3953         call HERE
      0015D7 CD 06 26         [ 4] 3954         call SUBB 
      0015DA CD 05 5E         [ 4] 3955         call OFFSET 
      0015DD CD 03 34         [ 4] 3956         call STORE 
      0015E0 81               [ 4] 3957         ret 
                                   3958 .endif 
                                   3959 
                                   3960 ;       :       ( -- ; <string> )
                                   3961 ;       Start a new colon definition
                                   3962 ;       using next word as its name.
      0015E1 15 C5                 3963         .word      LINK
                           0015E3  3964 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015E3 01                    3965         .byte      1
      0015E4 3A                    3966         .ascii     ":"
      0015E5                       3967 COLON:
                           000001  3968 .if PICATOUT_MOD
      0015E5 CD 15 CE         [ 4] 3969         call INITOFS 
                                   3970 .endif ; PICATOUT_MOD
      0015E8 CD 0F 8B         [ 4] 3971         CALL   TOKEN
      0015EB CD 14 C4         [ 4] 3972         CALL   SNAME
      0015EE CC 15 A5         [ 2] 3973         JP     RBRAC
                                   3974 
                           000001  3975 .if PICATOUT_MOD 
                                   3976 ;       I:  ( -- )
                                   3977 ;       Start interrupt service routine definition
                                   3978 ;       those definition have no name.
      0015F1 15 E3                 3979         .word LINK
                           0015F3  3980         LINK=.
      0015F3 02                    3981         .byte 2 
      0015F4 49 3A                 3982         .ascii "I:" 
      0015F6                       3983 ICOLON:
      0015F6 CD 15 CE         [ 4] 3984         call INITOFS 
      0015F9 CC 15 A5         [ 2] 3985         jp RBRAC  
                                   3986 .endif ; PICATOUT_MOD
                                   3987 
                                   3988 ;       IMMEDIATE       ( -- )
                                   3989 ;       Make last compiled word
                                   3990 ;       an immediate word.
      0015FC 15 F3                 3991         .word      LINK
                           0015FE  3992 LINK = . 
      0015FE 09                    3993         .byte      9
      0015FF 49 4D 4D 45 44 49 41  3994         .ascii     "IMMEDIATE"
             54 45
      001608                       3995 IMMED:
      001608 CD 02 C3         [ 4] 3996         CALL     DOLIT
      00160B 80 00                 3997         .word     0x8000	;  IMEDD*256
      00160D CD 05 4C         [ 4] 3998         CALL     LAST
      001610 CD 03 4B         [ 4] 3999         CALL     AT
      001613 CD 03 4B         [ 4] 4000         CALL     AT
      001616 CD 04 52         [ 4] 4001         CALL     ORR
      001619 CD 05 4C         [ 4] 4002         CALL     LAST
      00161C CD 03 4B         [ 4] 4003         CALL     AT
      00161F CC 03 34         [ 2] 4004         JP     STORE
                                   4005 
                                   4006 ;; Defining words
                                   4007 
                                   4008 ;       CREATE  ( -- ; <string> )
                                   4009 ;       Compile a new array
                                   4010 ;       without allocating space.
      001622 15 FE                 4011         .word      LINK
                           001624  4012 LINK = . 
      001624 06                    4013         .byte      6
      001625 43 52 45 41 54 45     4014         .ascii     "CREATE"
      00162B                       4015 CREAT:
      00162B CD 0F 8B         [ 4] 4016         CALL     TOKEN
      00162E CD 14 C4         [ 4] 4017         CALL     SNAME
      001631 CD 15 45         [ 4] 4018         CALL     OVERT        
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001634 CD 13 16         [ 4] 4019         CALL     COMPI 
                           000001  4020 .if PICATOUT_MOD
      001637 04 9F                 4021         .word DOVAR 
                           000000  4022 .else
                                   4023         CALL     DOVAR
                                   4024 .endif 
      001639 81               [ 4] 4025         RET
                                   4026 
                                   4027 ;       VARIABLE        ( -- ; <string> )
                                   4028 ;       Compile a new variable
                                   4029 ;       initialized to 0.
      00163A 16 24                 4030         .word      LINK
                           00163C  4031 LINK = . 
      00163C 08                    4032         .byte      8
      00163D 56 41 52 49 41 42 4C  4033         .ascii     "VARIABLE"
             45
      001645                       4034 VARIA:
                           000001  4035 .if PICATOUT_MOD
                                   4036 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001645 CD 0A 00         [ 4] 4037         CALL HERE
      001648 CD 03 F2         [ 4] 4038         CALL DUPP 
      00164B CD 08 7C         [ 4] 4039         CALL CELLP
      00164E CD 05 2E         [ 4] 4040         CALL VPP 
      001651 CD 03 34         [ 4] 4041         CALL STORE
      001654 CD 19 71         [ 4] 4042         call UPDATVP 
                                   4043 .endif         
      001657 CD 16 2B         [ 4] 4044         CALL CREAT
      00165A CD 03 F2         [ 4] 4045         CALL DUPP
      00165D CD 12 D1         [ 4] 4046         CALL COMMA
      001660 CD 09 13         [ 4] 4047         CALL ZERO
                           000001  4048 .if PICATOUT_MOD 
      001663 CD 04 02         [ 4] 4049         call SWAPP 
      001666 CD 03 34         [ 4] 4050         CALL STORE 
      001669 CD 1E 3D         [ 4] 4051         CALL FMOVE ; move definition to FLASH
      00166C CD 1E C2         [ 4] 4052         CALL UPDATPTR
      00166F 81               [ 4] 4053         RET 
                                   4054 .endif ;PICATOUT_MOD        
                                   4055 
                           000001  4056 .if PICATOUT_MOD
                                   4057 ;       CONSTANT  ( n -- ; <string> )
                                   4058 ;       Compile a new constant 
                                   4059 ;       n CONSTANT name 
      001670 16 3C                 4060         .word LINK 
                           001672  4061         LINK=. 
      001672 08                    4062         .byte 8 
      001673 43 4F 4E 53 54 41 4E  4063         .ascii "CONSTANT" 
             54
      00167B                       4064 CONSTANT:          
      00167B CD 0F 8B         [ 4] 4065         CALL TOKEN
      00167E CD 14 C4         [ 4] 4066         CALL SNAME 
      001681 CD 15 45         [ 4] 4067         CALL OVERT 
      001684 CD 13 16         [ 4] 4068         CALL COMPI 
                           000001  4069 .if PICATOUT_MOD
      001687 16 9D                 4070         .word DOCONST
                           000000  4071 .else
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                   4072         CALL DOCONST
                                   4073 .endif 
      001689 CD 12 D1         [ 4] 4074         CALL COMMA 
      00168C CD 1E 3D         [ 4] 4075         CALL FMOVE
      00168F CD 1E C2         [ 4] 4076         CALL UPDATPTR  
      001692 81               [ 4] 4077         RET          
                                   4078 
                                   4079 ; CONSTANT runtime semantic 
                                   4080 ; doCONST  ( -- n )
      001693 16 72                 4081         .word LINK 
                           001695  4082         LINK=.
      001695 07                    4083         .byte 7
      001696 44 4F 43 4F 4E 53 54  4084         .ascii "DOCONST"
      00169D                       4085 DOCONST:
      00169D 1D 00 02         [ 2] 4086         subw x,#CELLL
      0016A0 90 85            [ 2] 4087         popw y 
      0016A2 90 FE            [ 2] 4088         ldw y,(y) 
      0016A4 FF               [ 2] 4089         ldw (x),y 
      0016A5 81               [ 4] 4090         ret 
                                   4091 .endif ;PICATOUT_MOD
                                   4092 
                                   4093 
                                   4094 ;; Tools
                                   4095 
                                   4096 ;       _TYPE   ( b u -- )
                                   4097 ;       Display a string. Filter
                                   4098 ;       non-printing characters.
      0016A6 16 95                 4099         .word      LINK
                           0016A8  4100 LINK = . 
      0016A8 05                    4101         .byte      5
      0016A9 5F 54 59 50 45        4102         .ascii     "_TYPE"
      0016AE                       4103 UTYPE:
      0016AE CD 03 BB         [ 4] 4104         CALL     TOR     ;start count down loop
      0016B1 20 0F            [ 2] 4105         JRA     UTYP2   ;skip first pass
      0016B3 CD 03 F2         [ 4] 4106 UTYP1:  CALL     DUPP
      0016B6 CD 03 69         [ 4] 4107         CALL     CAT
      0016B9 CD 09 3D         [ 4] 4108         CALL     TCHAR
      0016BC CD 02 AD         [ 4] 4109         CALL     EMIT    ;display only printable
      0016BF CD 08 A7         [ 4] 4110         CALL     ONEP    ;increment address
      0016C2 CD 02 D7         [ 4] 4111 UTYP2:  CALL     DONXT
      0016C5 16 B3                 4112         .word      UTYP1   ;loop till done
      0016C7 CC 03 E8         [ 2] 4113         JP     DROP
                                   4114 
                                   4115 ;       dm+     ( a u -- a )
                                   4116 ;       Dump u bytes from ,
                                   4117 ;       leaving a+u on  stack.
      0016CA 16 A8                 4118         .word      LINK
                           0016CC  4119 LINK = . 
      0016CC 03                    4120         .byte      3
      0016CD 64 6D 2B              4121         .ascii     "dm+"
      0016D0                       4122 DUMPP:
      0016D0 CD 04 1C         [ 4] 4123         CALL     OVER
      0016D3 CD 02 C3         [ 4] 4124         CALL     DOLIT
      0016D6 00 04                 4125         .word      4
      0016D8 CD 0D E1         [ 4] 4126         CALL     UDOTR   ;display address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016DB CD 0D 31         [ 4] 4127         CALL     SPACE
      0016DE CD 03 BB         [ 4] 4128         CALL     TOR     ;start count down loop
      0016E1 20 11            [ 2] 4129         JRA     PDUM2   ;skip first pass
      0016E3 CD 03 F2         [ 4] 4130 PDUM1:  CALL     DUPP
      0016E6 CD 03 69         [ 4] 4131         CALL     CAT
      0016E9 CD 02 C3         [ 4] 4132         CALL     DOLIT
      0016EC 00 03                 4133         .word      3
      0016EE CD 0D E1         [ 4] 4134         CALL     UDOTR   ;display numeric data
      0016F1 CD 08 A7         [ 4] 4135         CALL     ONEP    ;increment address
      0016F4 CD 02 D7         [ 4] 4136 PDUM2:  CALL     DONXT
      0016F7 16 E3                 4137         .word      PDUM1   ;loop till done
      0016F9 81               [ 4] 4138         RET
                                   4139 
                                   4140 ;       DUMP    ( a u -- )
                                   4141 ;       Dump u bytes from a,
                                   4142 ;       in a formatted manner.
      0016FA 16 CC                 4143         .word      LINK
                           0016FC  4144 LINK = . 
      0016FC 04                    4145         .byte      4
      0016FD 44 55 4D 50           4146         .ascii     "DUMP"
      001701                       4147 DUMP:
      001701 CD 04 AF         [ 4] 4148         CALL     BASE
      001704 CD 03 4B         [ 4] 4149         CALL     AT
      001707 CD 03 BB         [ 4] 4150         CALL     TOR
      00170A CD 0B B9         [ 4] 4151         CALL     HEX     ;save radix, set hex
      00170D CD 02 C3         [ 4] 4152         CALL     DOLIT
      001710 00 10                 4153         .word      16
      001712 CD 07 CD         [ 4] 4154         CALL     SLASH   ;change count to lines
      001715 CD 03 BB         [ 4] 4155         CALL     TOR     ;start count down loop
      001718 CD 0D 79         [ 4] 4156 DUMP1:  CALL     CR
      00171B CD 02 C3         [ 4] 4157         CALL     DOLIT
      00171E 00 10                 4158         .word      16
      001720 CD 05 B3         [ 4] 4159         CALL     DDUP
      001723 CD 16 D0         [ 4] 4160         CALL     DUMPP   ;display numeric
      001726 CD 05 88         [ 4] 4161         CALL     ROT
      001729 CD 05 88         [ 4] 4162         CALL     ROT
      00172C CD 0D 31         [ 4] 4163         CALL     SPACE
      00172F CD 0D 31         [ 4] 4164         CALL     SPACE
      001732 CD 16 AE         [ 4] 4165         CALL     UTYPE   ;display printable characters
      001735 CD 02 D7         [ 4] 4166         CALL     DONXT
      001738 17 18                 4167         .word      DUMP1   ;loop till done
      00173A CD 03 E8         [ 4] 4168 DUMP3:  CALL     DROP
      00173D CD 03 9C         [ 4] 4169         CALL     RFROM
      001740 CD 04 AF         [ 4] 4170         CALL     BASE
      001743 CC 03 34         [ 2] 4171         JP     STORE   ;restore radix
                                   4172 
                                   4173 ;       .S      ( ... -- ... )
                                   4174 ;        Display  contents of stack.
      001746 16 FC                 4175         .word      LINK
                           001748  4176 LINK = . 
      001748 02                    4177         .byte      2
      001749 2E 53                 4178         .ascii     ".S"
      00174B                       4179 DOTS:
      00174B CD 0D 79         [ 4] 4180         CALL     CR
      00174E CD 09 56         [ 4] 4181         CALL     DEPTH   ;stack depth
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001751 CD 03 BB         [ 4] 4182         CALL     TOR     ;start count down loop
      001754 20 0C            [ 2] 4183         JRA     DOTS2   ;skip first pass
      001756 CD 03 AF         [ 4] 4184 DOTS1:  CALL     RAT
      001759 CD 08 A7         [ 4] 4185         CALL ONEP
      00175C CD 09 6D         [ 4] 4186 	CALL     PICK
      00175F CD 0E 14         [ 4] 4187         CALL     DOT     ;index stack, display contents
      001762 CD 02 D7         [ 4] 4188 DOTS2:  CALL     DONXT
      001765 17 56                 4189         .word      DOTS1   ;loop till done
      001767 CD 0D B8         [ 4] 4190         CALL     DOTQP
      00176A 05                    4191         .byte      5
      00176B 20 3C 73 70 20        4192         .ascii     " <sp "
      001770 81               [ 4] 4193         RET
                                   4194 
                                   4195 ;       >NAME   ( ca -- na | F )
                                   4196 ;       Convert code address
                                   4197 ;       to a name address.
      001771 17 48                 4198         .word      LINK
                           001773  4199 LINK = . 
      001773 05                    4200         .byte      5
      001774 3E 4E 41 4D 45        4201         .ascii     ">NAME"
      001779                       4202 TNAME:
      001779 CD 05 20         [ 4] 4203         CALL     CNTXT   ;vocabulary link
      00177C CD 03 4B         [ 4] 4204 TNAM2:  CALL     AT
      00177F CD 03 F2         [ 4] 4205         CALL     DUPP    ;?last word in a vocabulary
      001782 CD 02 F6         [ 4] 4206         CALL     QBRAN
      001785 17 A0                 4207         .word      TNAM4
      001787 CD 05 B3         [ 4] 4208         CALL     DDUP
      00178A CD 0F 99         [ 4] 4209         CALL     NAMET
      00178D CD 04 67         [ 4] 4210         CALL     XORR    ;compare
      001790 CD 02 F6         [ 4] 4211         CALL     QBRAN
      001793 17 9A                 4212         .word      TNAM3
      001795 CD 08 8B         [ 4] 4213         CALL     CELLM   ;continue with next word
      001798 20 E2            [ 2] 4214         JRA     TNAM2
      00179A CD 04 02         [ 4] 4215 TNAM3:  CALL     SWAPP
      00179D CC 03 E8         [ 2] 4216         JP     DROP
      0017A0 CD 05 A8         [ 4] 4217 TNAM4:  CALL     DDROP
      0017A3 CC 09 13         [ 2] 4218         JP     ZERO
                                   4219 
                                   4220 ;       .ID     ( na -- )
                                   4221 ;        Display  name at address.
      0017A6 17 73                 4222         .word      LINK
                           0017A8  4223 LINK = . 
      0017A8 03                    4224         .byte      3
      0017A9 2E 49 44              4225         .ascii     ".ID"
      0017AC                       4226 DOTID:
      0017AC CD 05 77         [ 4] 4227         CALL     QDUP    ;if zero no name
      0017AF CD 02 F6         [ 4] 4228         CALL     QBRAN
      0017B2 17 C2                 4229         .word      DOTI1
      0017B4 CD 09 E9         [ 4] 4230         CALL     COUNT
      0017B7 CD 02 C3         [ 4] 4231         CALL     DOLIT
      0017BA 00 1F                 4232         .word      0x1F
      0017BC CD 04 3E         [ 4] 4233         CALL     ANDD    ;mask lexicon bits
      0017BF CC 16 AE         [ 2] 4234         JP     UTYPE
      0017C2 CD 0D B8         [ 4] 4235 DOTI1:  CALL     DOTQP
      0017C5 09                    4236         .byte      9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017C6 20 6E 6F 4E 61 6D 65  4237         .ascii     " noName"
      0017CD 81               [ 4] 4238         RET
                                   4239 
                           000000  4240 WANT_SEE=0 
                           000000  4241 .if WANT_SEE 
                                   4242 ;       SEE     ( -- ; <string> )
                                   4243 ;       A simple decompiler.
                                   4244 ;       Updated for byte machines.
                                   4245         .word      LINK
                                   4246 LINK = . 
                                   4247         .byte      3
                                   4248         .ascii     "SEE"
                                   4249 SEE:
                                   4250         CALL     TICK    ;starting address
                                   4251         CALL     CR
                                   4252         CALL     ONEM
                                   4253 SEE1:   CALL     ONEP
                                   4254         CALL     DUPP
                                   4255         CALL     AT
                                   4256         CALL     DUPP    ;?does it contain a zero
                                   4257         CALL     QBRAN
                                   4258         .word    SEE2
                                   4259         CALL     TNAME   ;?is it a name
                                   4260 SEE2:   CALL     QDUP    ;name address or zero
                                   4261         CALL     QBRAN
                                   4262         .word    SEE3
                                   4263         CALL     SPACE
                                   4264         CALL     DOTID   ;display name
                                   4265         CALL     ONEP
                                   4266         JRA      SEE4
                                   4267 SEE3:   CALL     DUPP
                                   4268         CALL     CAT
                                   4269         CALL     UDOT    ;display number
                                   4270 SEE4:   CALL     NUFQ    ;user control
                                   4271         CALL     QBRAN
                                   4272         .word    SEE1
                                   4273         JP     DROP
                                   4274 .endif ; WANT_SEE 
                                   4275 
                                   4276 ;       WORDS   ( -- )
                                   4277 ;       Display names in vocabulary.
      0017CE 17 A8                 4278         .word      LINK
                           0017D0  4279 LINK = . 
      0017D0 05                    4280         .byte      5
      0017D1 57 4F 52 44 53        4281         .ascii     "WORDS"
      0017D6                       4282 WORDS:
      0017D6 CD 0D 79         [ 4] 4283         CALL     CR
      0017D9 CD 05 20         [ 4] 4284         CALL     CNTXT   ;only in context
      0017DC CD 03 4B         [ 4] 4285 WORS1:  CALL     AT
      0017DF CD 05 77         [ 4] 4286         CALL     QDUP    ;?at end of list
      0017E2 CD 02 F6         [ 4] 4287         CALL     QBRAN
      0017E5 17 FB                 4288         .word      WORS2
      0017E7 CD 03 F2         [ 4] 4289         CALL     DUPP
      0017EA CD 0D 31         [ 4] 4290         CALL     SPACE
      0017ED CD 17 AC         [ 4] 4291         CALL     DOTID   ;display a name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0017F0 CD 08 8B         [ 4] 4292         CALL     CELLM
      0017F3 CD 03 0D         [ 4] 4293         CALL     BRAN
      0017F6 17 DC                 4294         .word      WORS1
      0017F8 CD 03 E8         [ 4] 4295         CALL     DROP
      0017FB 81               [ 4] 4296 WORS2:  RET
                                   4297 
                                   4298         
                                   4299 ;; Hardware reset
                                   4300 
                                   4301 ;       hi      ( -- )
                                   4302 ;       Display sign-on message.
      0017FC 17 D0                 4303         .word      LINK
                           0017FE  4304 LINK = . 
      0017FE 02                    4305         .byte      2
      0017FF 68 69                 4306         .ascii     "hi"
      001801                       4307 HI:
      001801 CD 0D 79         [ 4] 4308         CALL     CR
      001804 CD 0D B8         [ 4] 4309         CALL     DOTQP   ;initialize I/O
      001807 0F                    4310         .byte      15
      001808 73 74 6D 38 65 46 6F  4311         .ascii     "stm8eForth v"
             72 74 68 20 76
      001814 33                    4312 	.byte      VER+'0'
      001815 2E                    4313         .byte      '.' 
      001816 30                    4314 	.byte      EXT+'0' ;version
      001817 CC 0D 79         [ 2] 4315         JP     CR
                                   4316 
                           000000  4317 WANT_DEBUG=0
                           000000  4318 .if WANT_DEBUG 
                                   4319 ;       DEBUG      ( -- )
                                   4320 ;       Display sign-on message.
                                   4321 ;        .word      LINK
                                   4322 LINK = . 
                                   4323         .byte      5
                                   4324         .ascii     "DEBUG"
                                   4325 DEBUG:
                                   4326 	CALL DOLIT
                                   4327 	.word 0x65
                                   4328 	CALL EMIT
                                   4329 	CALL DOLIT
                                   4330 	.word 0
                                   4331  	CALL ZLESS 
                                   4332 	CALL DOLIT
                                   4333 	.word 0xFFFE
                                   4334 	CALL ZLESS 
                                   4335 	CALL UPLUS 
                                   4336  	CALL DROP 
                                   4337 	CALL DOLIT
                                   4338 	.word 3
                                   4339 	CALL UPLUS 
                                   4340 	CALL UPLUS 
                                   4341  	CALL DROP
                                   4342 	CALL DOLIT
                                   4343 	.word 0x43
                                   4344 	CALL UPLUS 
                                   4345  	CALL DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4346 	CALL EMIT
                                   4347 	CALL DOLIT
                                   4348 	.word 0x4F
                                   4349 	CALL DOLIT
                                   4350 	.word 0x6F
                                   4351  	CALL XORR
                                   4352 	CALL DOLIT
                                   4353 	.word 0xF0
                                   4354  	CALL ANDD
                                   4355 	CALL DOLIT
                                   4356 	.word 0x4F
                                   4357  	CALL ORR
                                   4358 	CALL EMIT
                                   4359 	CALL DOLIT
                                   4360 	.word 8
                                   4361 	CALL DOLIT
                                   4362 	.word 6
                                   4363  	CALL SWAPP
                                   4364 	CALL OVER
                                   4365 	CALL XORR
                                   4366 	CALL DOLIT
                                   4367 	.word 3
                                   4368 	CALL ANDD 
                                   4369 	CALL ANDD
                                   4370 	CALL DOLIT
                                   4371 	.word 0x70
                                   4372 	CALL UPLUS 
                                   4373 	CALL DROP
                                   4374 	CALL EMIT
                                   4375 	CALL DOLIT
                                   4376 	.word 0
                                   4377 	CALL QBRAN
                                   4378 	.word DEBUG1
                                   4379 	CALL DOLIT
                                   4380 	.word 0x3F
                                   4381 DEBUG1:
                                   4382 	CALL DOLIT
                                   4383 	.word 0xFFFF
                                   4384 	CALL QBRAN
                                   4385 	.word DEBUG2
                                   4386 	CALL DOLIT
                                   4387 	.word 0x74
                                   4388 	CALL BRAN
                                   4389 	.word DEBUG3
                                   4390 DEBUG2:
                                   4391 	CALL DOLIT
                                   4392 	.word 0x21
                                   4393 DEBUG3:
                                   4394 	CALL EMIT
                                   4395 	CALL DOLIT
                                   4396 	.word 0x68
                                   4397 	CALL DOLIT
                                   4398 	.word 0x80
                                   4399 	CALL STORE
                                   4400 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4401 	.word 0x80
                                   4402 	CALL AT
                                   4403 	CALL EMIT
                                   4404 	CALL DOLIT
                                   4405 	.word 0x4D
                                   4406 	CALL TOR
                                   4407 	CALL RAT
                                   4408 	CALL RFROM
                                   4409 	CALL ANDD
                                   4410 	CALL EMIT
                                   4411 	CALL DOLIT
                                   4412 	.word 0x61
                                   4413 	CALL DOLIT
                                   4414 	.word 0xA
                                   4415 	CALL TOR
                                   4416 DEBUG4:
                                   4417 	CALL DOLIT
                                   4418 	.word 1
                                   4419 	CALL UPLUS 
                                   4420 	CALL DROP
                                   4421 	CALL DONXT
                                   4422 	.word DEBUG4
                                   4423 	CALL EMIT
                                   4424 	CALL DOLIT
                                   4425 	.word 0x656D
                                   4426 	CALL DOLIT
                                   4427 	.word 0x100
                                   4428 	CALL UMSTA
                                   4429 	CALL SWAPP
                                   4430 	CALL DOLIT
                                   4431 	.word 0x100
                                   4432 	CALL UMSTA
                                   4433 	CALL SWAPP 
                                   4434 	CALL DROP
                                   4435 	CALL EMIT
                                   4436 	CALL EMIT
                                   4437 	CALL DOLIT
                                   4438 	.word 0x2043
                                   4439 	CALL DOLIT
                                   4440 	.word 0
                                   4441 	CALL DOLIT
                                   4442 	.word 0x100
                                   4443 	CALL UMMOD
                                   4444 	CALL EMIT
                                   4445 	CALL EMIT
                                   4446 	;JP ORIG
                                   4447 	RET
                                   4448 .endif ; WANT_DEBUG 
                                   4449 
                                   4450 
                                   4451 ;       'BOOT   ( -- a )
                                   4452 ;       The application startup vector.
      00181A 17 FE                 4453         .word      LINK
                           00181C  4454 LINK = . 
      00181C 05                    4455         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      00181D 27 42 4F 4F 54        4456         .ascii     "'BOOT"
      001822                       4457 TBOOT:
      001822 CD 04 9F         [ 4] 4458         CALL     DOVAR
      001825 40 02                 4459         .word    APP_RUN      ;application to boot
                                   4460 
                                   4461 ;       COLD    ( -- )
                                   4462 ;       The hilevel cold start s=ence.
      001827 18 1C                 4463         .word      LINK
                           001829  4464         LINK = . 
      001829 04                    4465         .byte      4
      00182A 43 4F 4C 44           4466         .ascii     "COLD"
      00182E                       4467 COLD:
                           000000  4468 .if WANT_DEBUG
                                   4469         CALL DEBUG
                                   4470 .endif 
      00182E CD 02 C3         [ 4] 4471 COLD1:  CALL     DOLIT
      001831 00 27                 4472         .word      UZERO
      001833 CD 02 C3         [ 4] 4473 	CALL     DOLIT
      001836 00 06                 4474         .word      UPP
      001838 CD 02 C3         [ 4] 4475         CALL     DOLIT
      00183B 00 16                 4476 	.word      UEND-UZERO
      00183D CD 0A 4D         [ 4] 4477         CALL     CMOVE   ;initialize user area
                                   4478 
                           000001  4479 .if PICATOUT_MOD
                                   4480 ; if APP_RUN==0 initialize with ca de 'hi'  
      001840 90 CE 40 02      [ 2] 4481         ldw y,APP_RUN 
      001844 26 0B            [ 1] 4482         jrne 0$
      001846 1D 00 02         [ 2] 4483         subw x,#CELLL 
      001849 90 AE 18 01      [ 2] 4484         ldw y,#HI  
      00184D FF               [ 2] 4485         ldw (x),y
      00184E CD 19 49         [ 4] 4486         call UPDATRUN 
      001851                       4487 0$:        
                                   4488 ; update LAST with APP_LAST 
                                   4489 ; if APP_LAST > LAST else do the opposite
      001851 90 CE 40 00      [ 2] 4490         ldw y,APP_LAST 
      001855 90 B3 1A         [ 2] 4491         cpw y,ULAST 
      001858 22 05            [ 1] 4492         jrugt 1$ 
                                   4493 ; save LAST at APP_LAST  
      00185A CD 19 31         [ 4] 4494         call UPDATLAST 
      00185D 20 06            [ 2] 4495         jra 2$
      00185F                       4496 1$: ; update LAST with APP_LAST 
      00185F 90 BF 1A         [ 2] 4497         ldw ULAST,y
      001862 90 BF 14         [ 2] 4498         ldw UCNTXT,y 
      001865                       4499 2$:  
                                   4500 ; update APP_CP if < app_space 
      001865 90 CE 40 04      [ 2] 4501         ldw y,APP_CP  
      001869 90 B3 18         [ 2] 4502         cpw y,UCP   
      00186C 24 06            [ 1] 4503         jruge 3$ 
      00186E CD 19 5A         [ 4] 4504         call UPDATCP
      001871 90 BE 18         [ 2] 4505         ldw y,UCP   
      001874                       4506 3$:
      001874 90 BF 18         [ 2] 4507         ldw UCP,y                 
                                   4508 ; update UVP with APP_VP  
                                   4509 ; if APP_VP>UVP else do the opposite 
      001877 90 CE 40 06      [ 2] 4510         ldw y,APP_VP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      00187B 90 B3 16         [ 2] 4511         cpw y,UVP 
      00187E 22 05            [ 1] 4512         jrugt 4$
      001880 CD 19 71         [ 4] 4513         call UPDATVP 
      001883 20 03            [ 2] 4514         jra 6$
      001885                       4515 4$: ; update UVP with APP_VP 
      001885 90 BF 16         [ 2] 4516         ldw UVP,y 
      001888                       4517 6$:      
                                   4518 .endif ; PICATOUT_MOD
      001888 CD 12 7C         [ 4] 4519         CALL     PRESE   ;initialize data stack and TIB
      00188B CD 18 22         [ 4] 4520         CALL     TBOOT
      00188E CD 0A 36         [ 4] 4521         CALL     ATEXE   ;application boot
      001891 CD 15 45         [ 4] 4522         CALL     OVERT
      001894 CC 12 99         [ 2] 4523         JP     QUIT    ;start interpretation
                                   4524 
                           000001  4525 .if PICATOUT_MOD
                                   4526         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4527         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001897 18 29                   30     .word LINK 
                           001899    31     LINK=.
      001899 03                      32     .byte 3 
      00189A 46 50 21                33     .ascii "FP!"
      00189D                         34 fptr_store:
      00189D 90 93            [ 1]   35     ldw y,x
      00189F 90 FE            [ 2]   36     ldw y,(y)
      0018A1 90 9F            [ 1]   37     ld a,yl 
      0018A3 B7 2E            [ 1]   38     ld FPTR,a 
      0018A5 1C 00 02         [ 2]   39     addw x,#CELLL 
      0018A8 90 93            [ 1]   40     ldw y,x 
      0018AA 90 FE            [ 2]   41     ldw y,(y)
      0018AC 90 BF 2F         [ 2]   42     ldw PTR16,y
      0018AF 1C 00 02         [ 2]   43     addw x,#CELLL 
      0018B2 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      0018B3 18 99                   51     .word LINK 
                           0018B5    52 LINK=.
      0018B5 06                      53     .byte 6 
      0018B6 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018BC                         55 EEPROM: 
      0018BC 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      0018C0 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      0018C3 EF 02            [ 2]   58     ldw (2,x),y 
      0018C5 90 5F            [ 1]   59     clrw y 
      0018C7 FF               [ 2]   60     ldw (x),y 
      0018C8 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      0018C9 18 B5                   67 	.word LINK 
                           0018CB    68 	LINK=.
      0018CB 08                      69 	.byte 8 
      0018CC 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      0018D4                         71 EEPLAST:
      0018D4 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      0018D7 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      0018DB EF 02            [ 2]   74 	ldw (2,x),y 
      0018DD 90 5F            [ 1]   75 	clrw y 
      0018DF FF               [ 2]   76 	ldw (x),y 
      0018E0 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      0018E1 18 CB                   83 	.word LINK 
                           0018E3    84 	LINK=.
      0018E3 07                      85 	.byte 7
      0018E4 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      0018EB                         87 EEPRUN:
      0018EB 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      0018EE 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      0018F2 EF 02            [ 2]   90 	ldw (2,x),y 
      0018F4 90 5F            [ 1]   91 	clrw y 
      0018F6 FF               [ 2]   92 	ldw (x),y 
      0018F7 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      0018F8 18 E3                   99 	.word LINK
                           0018FA   100 	LINK=.
      0018FA 06                     101 	.byte 6 
      0018FB 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001901                        103 EEPCP:
      001901 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001904 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001908 EF 02            [ 2]  106 	ldw (2,x),y 
      00190A 90 5F            [ 1]  107 	clrw y 
      00190C FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      00190D 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      00190E 18 FA                  115 	.word LINK
                           001910   116 	LINK=.
      001910 06                     117 	.byte 6
      001911 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001917                        119 EEPVP:
      001917 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      00191A 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      00191E EF 02            [ 2]  122 	ldw (2,x),y 
      001920 90 5F            [ 1]  123 	clrw y 
      001922 FF               [ 2]  124 	ldw (x),y 
      001923 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001924 19 10                  131 	.word LINK 
                           001926   132 	LINK=.
      001926 0A                     133 	.byte 10
      001927 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001931                        135 UPDATLAST:
      001931 CD 05 4C         [ 4]  136 	call LAST
      001934 CD 03 4B         [ 4]  137 	call AT  
      001937 CD 18 D4         [ 4]  138 	call EEPLAST
      00193A CC 1A AD         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      00193D 19 26                  145 	.word LINK
                           00193F   146 	LINK=.
      00193F 09                     147 	.byte 9
      001940 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001949                        149 UPDATRUN:
      001949 CD 18 EB         [ 4]  150 	call EEPRUN
      00194C CC 1A AD         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      00194F 19 3F                  157 	.word LINK 
                           001951   158 	LINK=.
      001951 08                     159 	.byte 8 
      001952 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      00195A                        161 UPDATCP:
      00195A CD 05 3C         [ 4]  162 	call CPP 
      00195D CD 03 4B         [ 4]  163 	call AT 
      001960 CD 19 01         [ 4]  164 	call EEPCP 
      001963 CC 1A AD         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001966 19 51                  171 	.word LINK
                           001968   172 	LINK=.
      001968 08                     173 	.byte 8 
      001969 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001971                        175 UPDATVP:
      001971 CD 05 2E         [ 4]  176 	call VPP 
      001974 CD 03 4B         [ 4]  177 	call AT
      001977 CD 19 17         [ 4]  178 	call EEPVP 
      00197A CC 1A AD         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      00197D 19 68                  186     .word LINK 
                           00197F   187 LINK=.
      00197F 02                     188     .byte 2
      001980 46 40                  189     .ascii "F@"
      001982                        190 farat:
      001982 CD 18 9D         [ 4]  191     call fptr_store
      001985 92 BC 00 2E      [ 5]  192     ldf a,[FPTR]
      001989 1D 00 02         [ 2]  193     subw x,#CELLL 
      00198C F7               [ 1]  194     ld (x),a 
      00198D 90 AE 00 01      [ 2]  195     ldw y,#1
      001991 91 AF 00 2E      [ 1]  196     ldf a,([FPTR],y)
      001995 E7 01            [ 1]  197     ld (1,x),a
      001997 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001998 19 7F                  204     .word LINK
                           00199A   205     LINK=.
      00199A 03                     206     .byte 3 
      00199B 46 43 40               207     .ascii "FC@" 
      00199E                        208 farcat:
      00199E CD 18 9D         [ 4]  209     call fptr_store 
      0019A1 92 BC 00 2E      [ 5]  210     ldf a,[FPTR]
      0019A5 1D 00 02         [ 2]  211     subw x,#CELLL 
      0019A8 E7 01            [ 1]  212     ld (1,x),a 
      0019AA 7F               [ 1]  213     clr (x)
      0019AB 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      0019AC 19 9A                  221     .word LINK 
                           0019AE   222 LINK=.
      0019AE 06                     223     .byte 6 
      0019AF 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      0019B5                        225 unlock_eeprom:
      0019B5 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      0019B9 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      0019BD 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0019C1 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0019C5 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0019CA 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      0019CB 19 AE                  238     .word LINK 
                           0019CD   239 LINK=. 
      0019CD 06                     240     .byte 6 
      0019CE 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      0019D4                        242 unlock_flash:
      0019D4 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      0019D8 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      0019DC 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0019E0 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0019E4 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0019E9 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      0019EA 19 CD                  255 	.word LINK 
                           0019EC   256 	LINK=.
      0019EC 06                     257 	.byte 6
      0019ED 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      0019F3                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      0019F3 90 BE 2F         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      0019F6 3D 2E            [ 1]  263 	tnz FPTR 
      0019F8 26 16            [ 1]  264 	jrne 4$
      0019FA 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      0019FE 24 10            [ 1]  266     jruge 4$
      001A00 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001A04 25 0D            [ 1]  268     jrult 9$
      001A06 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A0A 22 07            [ 1]  270 	jrugt 9$
      001A0C CD 19 B5         [ 4]  271 	call unlock_eeprom
      001A0F 81               [ 4]  272 	ret 
      001A10 CD 19 D4         [ 4]  273 4$: call unlock_flash
      001A13 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001A14 19 EC                  281 	.word LINK 
                           001A16   282 	LINK=.
      001A16 04                     283 	.byte 4 
      001A17 4C 4F 43 4B            284 	.ascii "LOCK" 
      001A1B                        285 lock: 
      001A1B 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001A1F 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001A23 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001A24 1A 16                  294 	.word LINK 
                           001A26   295 	LINK=. 
      001A26 08                     296 	.byte 8 
      001A27 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001A2F                        298 inc_fptr:
      001A2F 3C 30            [ 1]  299 	inc PTR8 
      001A31 26 08            [ 1]  300 	jrne 1$
      001A33 90 BE 2E         [ 2]  301 	ldw y,FPTR 
      001A36 90 5C            [ 2]  302 	incw y 
      001A38 90 BF 2E         [ 2]  303 	ldw FPTR,y 
      001A3B 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001A3C 1A 26                  315 	.word LINK 
                           001A3E   316 	LINK=. 
      001A3E 07                     317 	.byte 7 
      001A3F 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001A46                        320 write_byte:
      001A46 90 93            [ 1]  321 	ldw y,x 
      001A48 90 FE            [ 2]  322 	ldw y,(y)
      001A4A 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A4D 90 9F            [ 1]  324 	ld a,yl
      001A4F 92 BD 00 2E      [ 4]  325 	ldf [FPTR],a
      001A53 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001A58 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001A5A 1A 3E                  335     .word LINK 
                           001A5C   336 	LINK=.
      001A5C 04                     337     .byte 4 
      001A5D 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001A61                        343 ee_cstore:
      001A61 52 02            [ 2]  344 	sub sp,#VSIZE
      001A63 CD 18 9D         [ 4]  345     call fptr_store
      001A66 E6 01            [ 1]  346 	ld a,(1,x)
      001A68 43               [ 1]  347 	cpl a 
      001A69 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001A6B 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001A6D CD 19 F3         [ 4]  350 	call unlock 
                                    351 	; check if option
      001A70 3D 2E            [ 1]  352 	tnz FPTR 
      001A72 26 19            [ 1]  353 	jrne 2$
      001A74 90 BE 2F         [ 2]  354 	ldw y,PTR16 
      001A77 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001A7B 2B 10            [ 1]  356 	jrmi 2$
      001A7D 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001A81 2A 0A            [ 1]  358 	jrpl 2$
      001A83 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001A85 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001A89 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001A8D                        363 2$: 
      001A8D CD 1A 46         [ 4]  364 	call write_byte 	
      001A90 0D 02            [ 1]  365 	tnz (OPT,sp)
      001A92 27 0D            [ 1]  366 	jreq 3$ 
      001A94 7B 01            [ 1]  367     ld a,(BTW,sp)
      001A96 90 5F            [ 1]  368     clrw y
      001A98 90 97            [ 1]  369 	ld yl,a 
      001A9A 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001A9D FF               [ 2]  371 	ldw (x),y 
      001A9E CD 1A 46         [ 4]  372 	call write_byte
      001AA1                        373 3$: 
      001AA1 CD 1A 1B         [ 4]  374 	call lock 
      001AA4 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001AA6 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001AA7 1A 5C                  382 	.word LINK 
                           001AA9   383 	LINK=.
      001AA9 03                     384 	.byte 3 
      001AAA 45 45 21               385 	.ascii "EE!"
      001AAD                        386 ee_store:
      001AAD CD 18 9D         [ 4]  387 	call fptr_store 
      001AB0 CD 19 F3         [ 4]  388 	call unlock 
      001AB3 90 93            [ 1]  389 	ldw y,x 
      001AB5 90 FE            [ 2]  390 	ldw y,(y)
      001AB7 90 89            [ 2]  391 	pushw y 
      001AB9 90 5E            [ 1]  392 	swapw y 
      001ABB FF               [ 2]  393 	ldw (x),y 
      001ABC CD 1A 46         [ 4]  394 	call write_byte 
      001ABF 90 85            [ 2]  395 	popw y 
      001AC1 1D 00 02         [ 2]  396 	subw x,#CELLL
      001AC4 FF               [ 2]  397 	ldw (x),y 
      001AC5 CD 1A 46         [ 4]  398 	call write_byte
      001AC8 CC 1A 1B         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001ACB 1A A9                  407 	.word LINK 
                           001ACD   408 	LINK=. 
      001ACD 09                     409 	.byte 9 
      001ACE 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001AD7                        411 row_erase:
      001AD7 CD 18 9D         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001ADA 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001ADD 90 AE 1B 24      [ 2]  416 	ldw y,#row_erase_proc
      001AE1 FF               [ 2]  417 	ldw (x),y 
      001AE2 CD 0A 11         [ 4]  418 	call PAD 
      001AE5 90 AE 1B 4B      [ 2]  419 	ldw y,#row_erase_proc_end 
      001AE9 72 A2 1B 24      [ 2]  420 	subw y,#row_erase_proc
      001AED 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001AF0 FF               [ 2]  422 	ldw (x),y 
      001AF1 CD 0A 4D         [ 4]  423 	call CMOVE 
      001AF4                        424 block_erase:
      001AF4 90 BE 2F         [ 2]  425 	ldw y,FPTR+1
      001AF7 90 A3 1F 80      [ 2]  426 	cpw y,#app_space 
      001AFB 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001AFD 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001B01 24 01            [ 1]  430 	jruge 1$
      001B03 81               [ 4]  431 	ret ; bad address 
      001B04 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001B08 23 01            [ 2]  433 	jrule 2$ 
      001B0A 81               [ 4]  434 	ret ; bad address 
      001B0B                        435 2$:	
      001B0B CD 19 B5         [ 4]  436 	call unlock_eeprom 
      001B0E 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001B10                        439 erase_flash:
      001B10 CD 19 D4         [ 4]  440 	call unlock_flash 
      001B13                        441 proceed_erase:
      001B13 CD 0A 11         [ 4]  442 	call PAD 
      001B16 90 93            [ 1]  443 	ldw y,x
      001B18 90 FE            [ 2]  444 	ldw y,(y)
      001B1A 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001B1D 90 FD            [ 4]  446 	call (y) 
      001B1F 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001B23 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001B24                        451 row_erase_proc:
      001B24 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001B28 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001B2C 4F               [ 1]  454 	clr a 
      001B2D 90 5F            [ 1]  455 	clrw y 
      001B2F 91 A7 00 2E      [ 1]  456 	ldf ([FPTR],y),a
      001B33 90 5C            [ 2]  457     incw y
      001B35 91 A7 00 2E      [ 1]  458 	ldf ([FPTR],y),a
      001B39 90 5C            [ 2]  459     incw y
      001B3B 91 A7 00 2E      [ 1]  460 	ldf ([FPTR],y),a
      001B3F 90 5C            [ 2]  461     incw y
      001B41 91 A7 00 2E      [ 1]  462 	ldf ([FPTR],y),a
      001B45 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001B4A 81               [ 4]  464 	ret
      001B4B                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001B4B                        478 copy_buffer:
      001B4B 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001B4D 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001B51 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001B55 90 5F            [ 1]  483 	clrw y
      001B57 F6               [ 1]  484 1$:	ld a,(x)
      001B58 91 A7 00 2E      [ 1]  485 	ldf ([FPTR],y),a
      001B5C 5C               [ 2]  486 	incw x 
      001B5D 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B5F 0A 01            [ 1]  488 	dec (BCNT,sp)
      001B61 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001B63 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001B68 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001B69 81               [ 4]  493 	ret 
      001B6A                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001B6A                        500 copy_prog_to_ram:
      001B6A 1D 00 06         [ 2]  501 	subw x,#6
      001B6D 90 AE 1B 4B      [ 2]  502 	ldw y,#copy_buffer 
      001B71 EF 04            [ 2]  503 	ldw (4,x),y 
      001B73 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001B77 EF 02            [ 2]  505 	ldw (2,x),y 
      001B79 90 AE 1B 6A      [ 2]  506 	ldw y,#copy_buffer_end 
      001B7D 72 A2 1B 4B      [ 2]  507 	subw y,#copy_buffer  
      001B81 FF               [ 2]  508 	ldw (x),y 
      001B82 CD 0A 4D         [ 4]  509 	call CMOVE 
      001B85 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001B86 1A CD                  519 	.word LINK 
                           001B88   520 	LINK=.
      001B88 06                     521 	.byte 6 
      001B89 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001B8F                        523 write_row:
      001B8F CD 18 9D         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001B92 A6 80            [ 1]  526 	ld a,#0x80 
      001B94 B4 30            [ 1]  527 	and a,PTR8 
      001B96 B7 30            [ 1]  528 	ld PTR8,a  
      001B98 CD 1B 6A         [ 4]  529 	call copy_prog_to_ram
      001B9B CD 19 F3         [ 4]  530 	call unlock
      001B9E 90 93            [ 1]  531 	ldw y,x 
      001BA0 90 FE            [ 2]  532 	ldw y,(y)
      001BA2 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001BA5 89               [ 2]  534 	pushw x 
      001BA6 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001BA7 CD 17 00         [ 4]  536 	call TIBBASE
      001BAA CD 1A 1B         [ 4]  537 	call lock
      001BAD 85               [ 2]  538 	popw x 
      001BAE 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001BAF 1B 88                  547 		.word LINK 
                           001BB1   548 		LINK=.
      001BB1 07                     549 		.byte 7 
      001BB2 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001BB9                        551 set_option: 
      001BB9 90 93            [ 1]  552 		ldw y,x 
      001BBB 90 FE            [ 2]  553 		ldw y,(y)
      001BBD 27 06            [ 1]  554 		jreq 1$
      001BBF 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001BC3 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001BC5 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001BC8 81               [ 4]  559 		ret
      001BC9 90 58            [ 2]  560 2$:		sllw y 
      001BCB 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001BCF FF               [ 2]  562 		ldw (x),y 
      001BD0 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001BD3 90 5F            [ 1]  564 		clrw y 
      001BD5 FF               [ 2]  565 		ldw (x),y 
      001BD6 CD 1A 61         [ 4]  566 		call ee_cstore
      001BD9 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001BDA 1B B1                  576 	.word LINK  
                           001BDC   577 	LINK=.
      001BDC 08                     578 	.byte 8 
      001BDD 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001BE5                        580 pristine:
                                    581 ;;; erase EEPROM
      001BE5 CD 18 BC         [ 4]  582 	call EEPROM 
      001BE8 CD 05 B3         [ 4]  583 1$:	call DDUP 
      001BEB CD 1A D7         [ 4]  584 	call row_erase
      001BEE 90 93            [ 1]  585 	ldw y,x 
      001BF0 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001BF3 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001BF7 EF 02            [ 2]  588 	ldw (2,x),y
      001BF9 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001BFD 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001BFF 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001C03 FF               [ 2]  593 2$:	ldw (x),y   
      001C04 90 5F            [ 1]  594 	clrw y 
      001C06 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001C08 CD 05 B3         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C0B CD 1B B9         [ 4]  597 	call set_option
      001C0E 90 93            [ 1]  598 	ldw y,x 
      001C10 90 FE            [ 2]  599 	ldw y,(y)
      001C12 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001C14 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001C18 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001C1A 90 AE 1F 80      [ 2]  604 	ldw y,#app_space
      001C1E EF 02            [ 2]  605 	ldw (2,x),y  
      001C20 90 5F            [ 1]  606 	clrw y 
      001C22 FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001C23 CD 1A D7         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001C26 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001C29 90 5F            [ 1]  611 	clrw y  
      001C2B FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001C2C CD 03 F2         [ 4]  613 	call DUPP  
      001C2F CD 1C 4C         [ 4]  614 	call reset_vector
      001C32 90 93            [ 1]  615 	ldw y,x 
      001C34 90 FE            [ 2]  616 	ldw y,(y)
      001C36 90 5C            [ 2]  617 	incw y   ; next vector 
      001C38 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001C3C 25 ED            [ 1]  619 	jrult 4$
      001C3E CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001C41 1B DC                  628 	.word LINK 
                           001C43   629 	LINK=. 
      001C43 08                     630 	.byte 8 
      001C44 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001C4C                        632 reset_vector:
      001C4C 90 93            [ 1]  633 	ldw y,x
      001C4E 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001C51 90 FE            [ 2]  635 	ldw y,(y)
      001C53 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001C57 27 3A            [ 1]  637 	jreq 9$
      001C59 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001C5D 22 34            [ 1]  639 	jrugt 9$  
      001C5F 90 58            [ 2]  640 	sllw y 
      001C61 90 58            [ 2]  641 	sllw y 
      001C63 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001C67 90 BF 20         [ 2]  643 	ldw YTEMP,y
      001C6A 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001C6D EF 02            [ 2]  645 	ldw (2,x),y 
      001C6F 90 5F            [ 1]  646 	clrw y
      001C71 FF               [ 2]  647 	ldw (x),y 
      001C72 A6 82            [ 1]  648 	ld a,#0x82 
      001C74 90 95            [ 1]  649 	ld yh,a
      001C76 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C78 CD 1A AD         [ 4]  651 	call ee_store
      001C7B 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001C7E 90 5F            [ 1]  653 	clrw y 
      001C80 FF               [ 2]  654 	ldw (x),y 
      001C81 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001C85 EF 04            [ 2]  656 	ldw (4,x),y 
      001C87 90 BE 20         [ 2]  657 	ldw y,YTEMP  
      001C8A 72 A9 00 02      [ 2]  658 	addw y,#2
      001C8E EF 02            [ 2]  659 	ldw (2,x),y 
      001C90 CD 1A AD         [ 4]  660 	call ee_store
      001C93 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= ca are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( ca -- )
                                    669 ;------------------------------
      001C94 1C 43                  670 	.word LINK 
                           001C96   671 	LINK=.
      001C96 07                     672 	.byte 7
      001C97 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001C9E                        679 CHKIVEC:
      001C9E 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001CA0 90 93            [ 1]  681 	ldw y,x 
      001CA2 90 FE            [ 2]  682 	ldw y,(y)
      001CA4 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001CA6 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001CA8 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001CAB BF 2F            [ 2]  686 	ldw PTR16,X
      001CAD AE FF FC         [ 2]  687 	ldw x,#-4 
      001CB0 1C 00 04         [ 2]  688 1$:	addw x,#4
      001CB3 A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001CB6 27 22            [ 1]  690 	jreq 9$
      001CB8 90 93            [ 1]  691 	ldw y,x  
      001CBA 91 D6 2F         [ 4]  692 	ld a,([PTR16],y)
      001CBD 11 03            [ 1]  693 	cp a,(CADR,sp)
      001CBF 25 EF            [ 1]  694 	jrult 1$
      001CC1 90 5C            [ 2]  695 	incw y 
      001CC3 91 D6 2F         [ 4]  696 	ld a,([PTR16],y)
      001CC6 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001CC8 25 E6            [ 1]  698 	jrult 1$ 
      001CCA 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001CCC 54               [ 2]  700 	srlw x
      001CCD 54               [ 2]  701 	srlw x 
      001CCE 90 93            [ 1]  702 	ldw y,x 
      001CD0 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001CD2 FF               [ 2]  704 	ldw (x),y
      001CD3 CD 1C 4C         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CD6 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001CD8 20 D6            [ 2]  707 	jra 1$
      001CDA 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001CDC 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001CDF 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001CE1 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001CE2 1C 96                  719 	.word LINK
                           001CE4   720 	LINK=.
      001CE4 08                     721 	.byte 8 
      001CE5 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001CED                        723 set_vector:
      001CED 90 93            [ 1]  724     ldw y,x 
      001CEF 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001CF2 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001CF4 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001CF8 23 04            [ 2]  728 	jrule 2$
      001CFA 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001CFD 81               [ 4]  730 	ret
      001CFE 90 58            [ 2]  731 2$:	sllw y 
      001D00 90 58            [ 2]  732 	sllw y 
      001D02 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001D06 90 BF 20         [ 2]  734 	ldw YTEMP,y ; vector address 
      001D09 A6 82            [ 1]  735 	ld a,#0x82 
      001D0B 90 95            [ 1]  736 	ld yh,a 
      001D0D E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001D0F 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001D11 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001D14 EF 04            [ 2]  741 	ldw (4,x),y 
      001D16 90 BE 20         [ 2]  742 	ldw y,YTEMP
      001D19 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001D1B 90 5F            [ 1]  744 	clrw y 
      001D1D FF               [ 2]  745 	ldw (x),y   ; as a double 
      001D1E CD 1A AD         [ 4]  746 	call ee_store 
      001D21 90 93            [ 1]  747 	ldw y,x 
      001D23 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001D26 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001D29 EF 04            [ 2]  750 	ldw (4,x),y 
      001D2B 90 BE 20         [ 2]  751 	ldw y,YTEMP 
      001D2E 72 A9 00 02      [ 2]  752 	addw y,#2 
      001D32 EF 02            [ 2]  753 	ldw (2,x),y 
      001D34 90 5F            [ 1]  754 	clrw y 
      001D36 FF               [ 2]  755 	ldw (x),y 
      001D37 CD 1A AD         [ 4]  756 	call ee_store
      001D3A 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001D3D 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001D3E 1C E4                  765 	.word LINK
                           001D40   766 	LINK=.
      001D40 03                     767 	.byte 3
      001D41 45 45 2C               768 	.ascii "EE,"
      001D44                        769 ee_comma:
      001D44 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001D47 90 BE 18         [ 2]  771 	ldw y,UCP
      001D4A 90 89            [ 2]  772 	pushw y 
      001D4C EF 02            [ 2]  773 	ldw (2,x),y 
      001D4E 90 5F            [ 1]  774 	clrw y 
      001D50 FF               [ 2]  775 	ldw (x),y
      001D51 CD 1A AD         [ 4]  776 	call ee_store
      001D54 90 85            [ 2]  777 	popw y 
      001D56 72 A9 00 02      [ 2]  778 	addw y,#2
      001D5A 90 BF 18         [ 2]  779 	ldw UCP,y
      001D5D 81               [ 4]  780 	ret 
                                    781 
                                    782 ;-------------------------
                                    783 ; Compile byte to flash 
                                    784 ; EEC, ( c -- )	
                                    785 ;-------------------------
      001D5E 1D 40                  786 	.word LINK 
                           001D60   787 	LINK=.
      001D60 04                     788 	.byte 4 
      001D61 45 45 43 2C            789 	.ascii "EEC,"
      001D65                        790 ee_ccomma:
      001D65 1D 00 04         [ 2]  791 	subw x,#2*CELLL 
      001D68 90 BE 18         [ 2]  792 	ldw y,UCP
      001D6B 90 89            [ 2]  793 	pushw y 
      001D6D EF 02            [ 2]  794 	ldw (2,x),y 
      001D6F 90 5F            [ 1]  795 	clrw y 
      001D71 FF               [ 2]  796 	ldw (x),y
      001D72 CD 1A 61         [ 4]  797 	call ee_cstore
      001D75 90 85            [ 2]  798 	popw y 
      001D77 90 5C            [ 2]  799 	incw y 
      001D79 90 BF 18         [ 2]  800 	ldw UCP,y
      001D7C 81               [ 4]  801 	ret 
                                    802 
                                    803 
                                    804 ;--------------------------
                                    805 ; copy FLASH block to ROWBUF
                                    806 ; ROW2BUF ( ud -- )
                                    807 ;--------------------------
      001D7D 1D 60                  808 	.word LINK 
                           001D7F   809 	LINK=.
      001D7F 07                     810 	.byte 7 
      001D80 52 4F 57 32 42 55 46   811 	.ascii "ROW2BUF"
      001D87                        812 ROW2BUF: 
      001D87 CD 18 9D         [ 4]  813 	call fptr_store 
      001D8A A6 80            [ 1]  814 	ld a,#BLOCK_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D8C 88               [ 1]  815 	push a 
      001D8D B4 30            [ 1]  816 	and a,PTR8 ; block align 
      001D8F B7 30            [ 1]  817 	ld PTR8,a
      001D91 90 AE 16 80      [ 2]  818 	ldw y,#ROWBUFF 
      001D95 92 BC 00 2E      [ 5]  819 1$: ldf a,[FPTR]
      001D99 90 F7            [ 1]  820 	ld (y),a
      001D9B CD 1A 2F         [ 4]  821 	call inc_fptr
      001D9E 90 5C            [ 2]  822 	incw y 
      001DA0 0A 01            [ 1]  823 	dec (1,sp)
      001DA2 26 F1            [ 1]  824 	jrne 1$ 
      001DA4 84               [ 1]  825 	pop a 
      001DA5 81               [ 4]  826 	ret 
                                    827 
                                    828 
                                    829 ;---------------------------
                                    830 ; copy ROWBUFF to flash 
                                    831 ; BUF2ROW ( ud -- )
                                    832 ; ud is row address as double 
                                    833 ;---------------------------
      001DA6 1D 7F                  834 	.word LINK 
                           001DA8   835 	LINK=.
      001DA8 07                     836 	.byte 7 
      001DA9 42 55 46 32 52 4F 57   837 	.ascii "BUF2ROW" 
      001DB0                        838 BUF2ROW:
      001DB0 CD 04 ED         [ 4]  839 	call TBUF ; ( ud rb -- )
      001DB3 CD 05 88         [ 4]  840 	call ROT 
      001DB6 CD 05 88         [ 4]  841 	call ROT  ; ( rb ud -- )
      001DB9 CD 1B 8F         [ 4]  842 	call write_row 
      001DBC 81               [ 4]  843 	ret 
                                    844 
                                    845 ;---------------------------------
                                    846 ; how many byte free in that row 
                                    847 ; RFREE ( a -- n )
                                    848 ; a is least byte of target address
                                    849 ;----------------------------------
      001DBD 1D A8                  850 	.word LINK 
                           001DBF   851 	LINK=.
      001DBF 05                     852 	.byte 5 
      001DC0 52 46 52 45 45         853 	.ascii "RFREE"
      001DC5                        854 RFREE:
      001DC5 E6 01            [ 1]  855 	ld a,(1,x)
      001DC7 A4 7F            [ 1]  856 	and a,#BLOCK_SIZE-1 
      001DC9 B7 20            [ 1]  857 	ld YTEMP,a 
      001DCB A6 80            [ 1]  858 	ld a,#BLOCK_SIZE 
      001DCD B0 20            [ 1]  859 	sub a,YTEMP 
      001DCF 90 5F            [ 1]  860 	clrw y 
      001DD1 90 97            [ 1]  861 	ld yl,a
      001DD3 FF               [ 2]  862 	ldw (x),y 
      001DD4 81               [ 4]  863 	ret 
                                    864 
                                    865 ;---------------------------------
                                    866 ; write u bytes to flash/EEPROM 
                                    867 ; constraint to row limit 
                                    868 ; RAM2EE ( ud a u -- u2 )
                                    869 ; ud flash address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    870 ; a ram address 
                                    871 ; u bytes count
                                    872 ; return u2 bytes written  
                                    873 ;-------------------------------
      001DD5 1D BF                  874 	.word LINK 
                           001DD7   875 	LINK=. 
      001DD7 06                     876 	.byte 6
      001DD8 52 41 4D 32 45 45      877 	.ascii "RAM2EE"
                                    878 	
      001DDE                        879 RAM2EE:
                                    880 ; copy ud on top 
      001DDE 90 93            [ 1]  881 	ldw y,x 
      001DE0 90 EE 06         [ 2]  882 	ldw y,(6,y) ; LSW of ud  
      001DE3 90 BF 20         [ 2]  883 	ldw YTEMP,y 
      001DE6 90 93            [ 1]  884 	ldw y,x 
      001DE8 90 EE 04         [ 2]  885 	ldw y,(4,y)  ; MSW of ud 
      001DEB 1D 00 04         [ 2]  886 	subw x,#2*CELLL 
      001DEE FF               [ 2]  887 	ldw (x),y 
      001DEF 90 BE 20         [ 2]  888 	ldw y,YTEMP 
      001DF2 EF 02            [ 2]  889 	ldw (2,x),y 
      001DF4 CD 1D 87         [ 4]  890 	call ROW2BUF 
      001DF7 90 93            [ 1]  891 	ldw y,x 
      001DF9 90 EE 06         [ 2]  892 	ldw y,(6,y)
      001DFC 90 89            [ 2]  893 	pushw y ; udl 
      001DFE 90 9F            [ 1]  894 	ld a,yl
      001E00 A4 7F            [ 1]  895 	and a,#BLOCK_SIZE-1 
      001E02 90 5F            [ 1]  896 	clrw y 
      001E04 90 97            [ 1]  897 	ld yl,a 
      001E06 72 A9 16 80      [ 2]  898 	addw y,#ROWBUFF 
      001E0A 1D 00 02         [ 2]  899 	subw x,#CELLL 
      001E0D FF               [ 2]  900 	ldw (x),y  
      001E0E CD 04 02         [ 4]  901 	call SWAPP ;  ( ud a ra u -- )
      001E11 CD 03 9C         [ 4]  902 	call RFROM  
      001E14 CD 1D C5         [ 4]  903 	call RFREE 
      001E17 CD 06 C8         [ 4]  904 	call MIN
      001E1A CD 03 F2         [ 4]  905 	call DUPP 
      001E1D CD 03 BB         [ 4]  906 	call TOR  
      001E20 CD 0A 4D         [ 4]  907 	call CMOVE
      001E23 CD 1D B0         [ 4]  908 	call BUF2ROW 
      001E26 CD 03 9C         [ 4]  909 	call RFROM 
      001E29 81               [ 4]  910 	ret 
                                    911 
                                    912 ;--------------------------
                                    913 ; expand 16 bit address 
                                    914 ; to 32 bit address 
                                    915 ; FADDR ( a -- ud )
                                    916 ;--------------------------
      001E2A 1D D7                  917 	.word LINK 
                           001E2C   918 	LINK=. 
      001E2C 05                     919 	.byte 5 
      001E2D 46 41 44 44 52         920 	.ascii "FADDR"
      001E32                        921 FADDR:
      001E32 CC 09 13         [ 2]  922 	jp ZERO 
                                    923 
                                    924 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    925 ; move new colon definition to FLASH 
                                    926 ; using WR-ROW for efficiency 
                                    927 ; preserving bytes already used 
                                    928 ; in the current block. 
                                    929 ; ud+c must not exceed block boundary 
                                    930 ; at this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      001E35 1E 2C                  938 	.word LINK 
                           001E37   939 	LINK=.
      001E37 05                     940 	.byte 5 
      001E38 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      001E3D                        942 FMOVE:
      001E3D CD 05 3C         [ 4]  943 	call CPP
      001E40 CD 03 4B         [ 4]  944 	call AT  
      001E43 CD 03 F2         [ 4]  945 	call DUPP ; ( udl udl -- )
      001E46 CD 05 20         [ 4]  946 	call CNTXT 
      001E49 CD 03 4B         [ 4]  947 	call AT 
      001E4C CD 02 C3         [ 4]  948 	call DOLIT 
      001E4F 00 02                  949 	.word 2 
      001E51 CD 06 26         [ 4]  950 	call SUBB ; ( udl udl a -- )
      001E54 CD 04 02         [ 4]  951 	call SWAPP 
      001E57 CD 1E 32         [ 4]  952 	call FADDR 
      001E5A CD 05 88         [ 4]  953 	call ROT  ; ( udl ud a -- )
      001E5D CD 03 F2         [ 4]  954 	call DUPP 
      001E60 CD 03 BB         [ 4]  955 	call TOR    ; R: a 
      001E63                        956 FMOVE2: 
      001E63 CD 0A 00         [ 4]  957 	call HERE 
      001E66 CD 03 AF         [ 4]  958 	call RAT 
      001E69 CD 06 26         [ 4]  959 	call SUBB ; (udl ud a wl -- )
      001E6C                        960 next_row:
      001E6C CD 03 F2         [ 4]  961 	call DUPP 
      001E6F CD 03 BB         [ 4]  962 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001E72 CD 1D DE         [ 4]  963 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001E75 CD 03 F2         [ 4]  964 	call DUPP 
      001E78 CD 03 BB         [ 4]  965 	call TOR
      001E7B CD 05 C8         [ 4]  966 	call PLUS  ; ( udl+ ) 
      001E7E CD 03 F2         [ 4]  967 	call DUPP 
      001E81 CD 09 13         [ 4]  968 	call ZERO   ; ( udl+ ud -- )
      001E84 CD 03 9C         [ 4]  969 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001E87 CD 03 9C         [ 4]  970 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001E8A CD 04 1C         [ 4]  971 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001E8D CD 06 26         [ 4]  972 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      001E90 CD 03 F2         [ 4]  973 	call DUPP 
      001E93 CD 02 F6         [ 4]  974 	call QBRAN
      001E96 1E AF                  975 	.word fmove_done 
      001E98 CD 04 02         [ 4]  976 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001E9B CD 03 9C         [ 4]  977 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001E9E CD 05 C8         [ 4]  978 	call PLUS  ; ( udl+2 ud wl- a+ )
      001EA1 CD 03 F2         [ 4]  979 	call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001EA4 CD 03 BB         [ 4]  980 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001EA7 CD 04 02         [ 4]  981 	call SWAPP 
      001EAA CD 03 0D         [ 4]  982 	call BRAN
      001EAD 1E 6C                  983 	.word next_row  
      001EAF                        984 fmove_done:	
      001EAF CD 03 9C         [ 4]  985 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001EB2 1C 00 0A         [ 2]  986 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
      001EB5 81               [ 4]  987  	ret  
                                    988 
                                    989 ;------------------------------------------
                                    990 ; adjust pointers after **FMOVE** operetion.
                                    991 ; UPDAT-PTR ( cp+ -- )
                                    992 ; cp+ is new CP position after FMOVE 
                                    993 ;-------------------------------------------
      001EB6 1E 37                  994 	.word LINK 
                           001EB8   995 	LINK=.
      001EB8 09                     996 	.byte 9
      001EB9 55 50 44 41 54 2D 50   997 	.ascii "UPDAT-PTR" 
             54 52
      001EC2                        998 UPDATPTR:
                                    999 ;reset VP to previous position  
      001EC2 CD 19 17         [ 4] 1000 	call EEPVP 
      001EC5 CD 03 E8         [ 4] 1001 	call DROP 
      001EC8 CD 03 4B         [ 4] 1002 	call AT
      001ECB CD 05 2E         [ 4] 1003 	call VPP 
      001ECE CD 03 34         [ 4] 1004 	call STORE
                                   1005 ;update CONTEXT and LAST 
      001ED1 CD 19 01         [ 4] 1006 	call EEPCP 
      001ED4 CD 03 E8         [ 4] 1007 	call DROP
      001ED7 CD 03 4B         [ 4] 1008 	call AT
      001EDA CD 02 C3         [ 4] 1009 	call DOLIT 
      001EDD 00 02                 1010 	.word 2 
      001EDF CD 05 C8         [ 4] 1011 	call PLUS 
      001EE2 CD 03 F2         [ 4] 1012 	call DUPP 
      001EE5 CD 05 20         [ 4] 1013 	call CNTXT 
      001EE8 CD 03 34         [ 4] 1014 	call STORE
      001EEB CD 05 4C         [ 4] 1015 	call LAST
      001EEE CD 03 34         [ 4] 1016 	call STORE 
      001EF1 CD 19 31         [ 4] 1017 	call UPDATLAST 
                                   1018 ;update CP 
      001EF4 CD 05 3C         [ 4] 1019 	call CPP 
      001EF7 CD 03 34         [ 4] 1020 	call STORE
      001EFA CD 19 5A         [ 4] 1021 	call UPDATCP 
      001EFD 81               [ 4] 1022 	ret 
                                   1023 
                                   1024 ;-----------------------------
                                   1025 ; move interrupt sub-routine
                                   1026 ; in flash memory
                                   1027 ;----------------------------- 
      001EFE 1E B8                 1028 	.word LINK 
                           001F00  1029 	LINK=. 
      001F00 06                    1030 	.byte 6
      001F01 49 46 4D 4F 56 45     1031 	.ascii "IFMOVE" 
      001F07                       1032 IFMOVE:
      001F07 CD 05 3C         [ 4] 1033 	call CPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F0A CD 03 4B         [ 4] 1034 	call AT 
      001F0D CD 03 F2         [ 4] 1035 	call DUPP ; ( udl udl -- )
      001F10 CD 19 17         [ 4] 1036 	call EEPVP 
      001F13 CD 03 E8         [ 4] 1037 	call DROP
      001F16 CD 03 4B         [ 4] 1038 	call AT  ; ( udl udl a )
      001F19 CD 03 BB         [ 4] 1039 	call TOR 
      001F1C CD 1E 32         [ 4] 1040 	call FADDR
      001F1F CD 03 AF         [ 4] 1041 	call RAT ; ( udl ud a -- ) R: a 
      001F22 CC 1E 63         [ 2] 1042 	jp FMOVE2 
                                   1043 
                                   1044 
                                   1045 ; application code begin here
      001F80                       1046 	.bndry 128 ; align on flash block  
      001F80                       1047 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   4528 .endif ; PICATOUT_MOD
                                   4529 
                                   4530 ;===============================================================
                                   4531 
                           001F00  4532 LASTN =	LINK   ;last name defined
                                   4533 
                                   4534 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000649 R   |   6 ABOR1      00119C R
  6 ABOR2      0011B3 R   |   6 ABORQ      001194 R   |   6 ABORT      001185 R
  6 ABRTQ      001470 R   |   6 ABSS       000640 R   |   6 ACCEP      00111B R
  6 ACCP1      001124 R   |   6 ACCP2      00114A R   |   6 ACCP3      00114D R
  6 ACCP4      00114F R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000567 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00145B R   |   6 AGAIN      0013B1 R   |   6 AHEAD      00140E R
  6 ALLOT      0012C4 R   |   6 ANDD       00043E R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         00034B R   |   6 ATEXE      000A36 R   |   6 AUTORUN    00011F R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0010C3 R   |   6 BASE       0004AF R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001306 R   |   6 BDIGS      000B1E R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      001393 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000F5B R   |   6 BKSP       001093 R
    BKSPP   =  000008     |   6 BLANK      000906 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       00030D R
    BTW     =  000001     |   6 BUF2ROW    001DB0 R   |   6 BYE        0000AC R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CANT_FOR   0001CA R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CARRY   =  000024     |   6 CAT        000369 R   |   6 CCOMMA     0012E8 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      00088B R
  6 CELLP      00087C R   |   6 CELLS      00089A R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000D4B R
  6 CHAR2      000D4E R   |   6 CHKIVEC    001C9E R   |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000A55 R
  6 CMOV2      000A6D R   |   6 CMOVE      000A4D R   |     CNTDWN  =  00002C 
  6 CNTXT      000520 R   |   6 COLD       00182E R   |   6 COLD1      00182E R
  6 COLON      0015E5 R   |   6 COMMA      0012D1 R   |   6 COMPI      001316 R
    COMPO   =  000040     |   6 CONSTANT   00167B R   |     CONVERT_=  000001 
  6 COUNT      0009E9 R   |   6 CPP        00053C R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000D79 R   |   6 CREAT      00162B R
    CRR     =  00000D     |   6 CSTOR      000358 R   |     CTOP    =  000080 
  6 DAT        0009C9 R   |     DATSTK  =  001670     |   6 DDROP      0005A8 R
  6 DDUP       0005B3 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000BCE R   |   6 DEPTH      000956 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000C13 R   |   6 DI         0000BA R
  6 DIG        000B47 R   |   6 DIGIT      000AE2 R   |   6 DIGS       000B58 R
  6 DIGS1      000B58 R   |   6 DIGS2      000B65 R   |   6 DIGTQ      000BE2 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000620 R
  6 DNEGA      000605 R   |   6 DOCONST    00169D R   |   6 DOLIT      0002C3 R
  6 DONXT      0002D7 R   |   6 DOSTR      000D8F R   |   6 DOT        000E14 R
  6 DOT1       000E2A R   |   6 DOTI1      0017C2 R   |   6 DOTID      0017AC R
  6 DOTO1      001228 R   |   6 DOTOK      00120E R   |   6 DOTPR      000F3D R
  6 DOTQ       00148A R   |   6 DOTQP      000DB8 R   |   6 DOTR       000DC6 R
  6 DOTS       00174B R   |   6 DOTS1      001756 R   |   6 DOTS2      001762 R
  6 DOVAR      00049F R   |   6 DROP       0003E8 R   |   6 DSTOR      0009A3 R
  6 DUMP       001701 R   |   6 DUMP1      001718 R   |   6 DUMP3      00173A R
  6 DUMPP      0016D0 R   |   6 DUPP       0003F2 R   |   6 EDIGS      000B83 R
  6 EEPCP      001901 R   |   6 EEPLAST    0018D4 R   |   6 EEPROM     0018BC R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     0018EB R   |   6 EEPVP      001917 R   |   6 EI         0000B3 R
  6 ELSEE      0013E9 R   |   6 EMIT       0002AD R   |   6 EQ1        000664 R
  6 EQUAL      00064E R   |   6 ERASE      000AAF R   |     ERR     =  00001B 
  6 EVAL       001251 R   |   6 EVAL1      001251 R   |   6 EVAL2      00126D R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

  6 EXE1       000A44 R   |   6 EXECU      00031D R   |   6 EXIT       00032D R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000B0A R   |   6 FADDR      001E32 R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000A7C R   |   6 FILL1      000A99 R
  6 FILL2      000AA2 R   |   6 FIND       000FEF R   |   6 FIND1      00100D R
  6 FIND2      00103B R   |   6 FIND3      001047 R   |   6 FIND4      00105B R
  6 FIND5      001068 R   |   6 FIND6      00104C R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  6 FMOVE      001E3D R   |   6 FMOVE2     001E63 R   |   6 FOR        001366 R
  6 FORGET     000150 R   |   6 FORGET1    000182 R   |   6 FORGET2    0001D8 R
  6 FORGET4    0001E1 R   |     FPTR    =  00002E     |   6 FREEVAR    0001EE R
  6 FREEVAR4   000224 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000A00 R
  6 HEX        000BB9 R   |   6 HI         001801 R   |   6 HLD        00050D R
  6 HOLD       000B2E R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0015F6 R
  6 IFETCH     001384 R   |   6 IFF        0013C1 R   |   6 IFMOVE     001F07 R
    IMEDD   =  000080     |   6 IMMED      001608 R   |   6 INCH       0002A1 R
  6 INITOFS    0015CE R   |   6 INN        0004CD R   |     INPUT_DI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      0011F0 R   |   6 INTER      0011C6 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0005E2 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      00156C R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       0015B8 R   |   6 KEY        000CF9 R
  6 KTAP       0010E0 R   |   6 KTAP1      001103 R   |   6 KTAP2      001106 R
  6 LAST       00054C R   |   6 LASTN   =  001F00 R   |   6 LBRAC      0011FD R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       00068B R   |     LF      =  00000A     |   6 LINK    =  001F00 R
  6 LITER      001338 R   |   6 LSHIFT     0008C5 R   |   6 LSHIFT1    0008CE R
  6 LSHIFT4    0008D6 R   |   6 LT1        0006A1 R   |     MASKK   =  001F7F 
  6 MAX        0006AB R   |   6 MAX1       0006BE R   |   6 MIN        0006C8 R
  6 MIN1       0006DB R   |   6 MMOD1      00077E R   |   6 MMOD2      000792 R
  6 MMOD3      0007A9 R   |   6 MMSM1      000725 R   |   6 MMSM2      000739 R
  6 MMSM3      00073B R   |   6 MMSM4      000743 R   |   6 MODD       0007C3 R
  6 MONE       00092C R   |     MS      =  00002A     |   6 MSEC       00022E R
  6 MSMOD      000761 R   |   6 MSTA1      000854 R   |   6 MSTAR      000831 R
    NAFR    =  004804     |   6 NAMEQ      001088 R   |   6 NAMET      000F99 R
    NCLKOPT =  004808     |   6 NEGAT      0005F3 R   |   6 NEX1       0002E4 R
  6 NEXT       001375 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       0004DD R
    NUBC    =  004802     |   6 NUFQ       000D0F R   |   6 NUFQ1      000D28 R
  6 NUMBQ      000C26 R   |   6 NUMQ1      000C5A R   |   6 NUMQ2      000C8B R
  6 NUMQ3      000CCD R   |   6 NUMQ4      000CD2 R   |   6 NUMQ5      000CE1 R
  6 NUMQ6      000CE4 R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     00055E R   |     OFS     =  000005 
  6 ONE        00091E R   |   6 ONEM       0008B4 R   |   6 ONEP       0008A7 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_S=  000080     |   6 ORIG       00003F R   |   6 ORR        000452 R
  6 OUTPUT     0002B2 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       00041C R
  6 OVERT      001545 R   |     PA      =  000000     |   6 PACKS      000AC1 R
  6 PAD        000A11 R   |   6 PAREN      000F4C R   |   6 PARS       000E45 R
  6 PARS1      000E70 R   |   6 PARS2      000E9B R   |   6 PARS3      000E9E R
  6 PARS4      000EA7 R   |   6 PARS5      000ECA R   |   6 PARS6      000EDF R
  6 PARS7      000EEE R   |   6 PARS8      000EFD R   |   6 PARSE      000F0E R
  6 PAUSE      00023E R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      0016E3 R   |   6 PDUM2      0016F4 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PICATOUT=  000001 
  6 PICK       00096D R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       0005C8 R   |   6 PNAM1      0014FA R
  6 PRESE      00127C R   |     PROD1   =  00001E     |     PROD2   =  000020 
    PROD3   =  000022     |   6 PSTOR      000982 R   |     PTR16   =  00002F 
    PTR8    =  000030     |   6 QBRAN      0002F6 R   |   6 QDUP       000577 R
  6 QDUP1      000581 R   |   6 QKEY       00028F R   |   6 QSTAC      001234 R
  6 QUERY      001160 R   |   6 QUEST      000E37 R   |   6 QUIT       001299 R
  6 QUIT1      0012A1 R   |   6 QUIT2      0012A4 R   |   6 RAM2EE     001DDE R
    RAMBASE =  000000     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RAT        0003AF R   |   6 RBRAC      0015A5 R
  6 REPEA      00143E R   |   6 RFREE      001DC5 R   |   6 RFROM      00039C R
    ROP     =  004800     |   6 ROT        000588 R   |   6 ROW2BUF    001D87 R
    ROWBUFF =  001680     |     RP0     =  000028     |   6 RPAT       000379 R
    RPP     =  0017FF     |   6 RPSTO      000386 R   |   6 RSHIFT     0008E1 R
  6 RSHIFT1    0008EA R   |   6 RSHIFT4    0008F2 R   |     RST_SR  =  0050B3 
  6 SAME1      000FB7 R   |   6 SAME2      000FE0 R   |   6 SAMEQ      000FAF R
  6 SCOM1      00152F R   |   6 SCOM2      001532 R   |   6 SCOMP      001511 R
  6 SEMIS      001555 R   |   6 SETISP     0000C6 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000B6D R   |   6 SIGN1      000B7D R
  6 SLASH      0007CD R   |   6 SLMOD      0007B1 R   |   6 SNAME      0014C4 R
    SP0     =  000026     |   6 SPACE      000D31 R   |   6 SPACS      000D40 R
  6 SPAT       0003D2 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001670     |   6 SPSTO      0003DF R   |   6 SSMOD      00085D R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       000826 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

  6 STASL      00086E R   |   6 STORE      000334 R   |   6 STR        000B9B R
  6 STRCQ      001346 R   |   6 STRQ       00147D R   |   6 STRQP      000DAE R
  6 SUBB       000626 R   |   6 SWAPP      000402 R   |     SWIM_CSR=  007F80 
  6 TAP        0010CA R   |   6 TBOOT      001822 R   |   6 TBUF       0004ED R
    TBUFFBAS=  001680     |   6 TCHA1      00094D R   |   6 TCHAR      00093D R
  6 TEMP       0004BE R   |   6 TEVAL      0004FE R   |   6 THENN      0013D6 R
  6 TIB        000A22 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0012B0 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
  6 TIMEOUTQ   00026E R   |   6 TIMER      000258 R   |     TIM_CR1_=  000007 
    TIM_CR1_=  000000     |     TIM_CR1_=  000006     |     TIM_CR1_=  000005 
    TIM_CR1_=  000004     |     TIM_CR1_=  000003     |     TIM_CR1_=  000001 
    TIM_CR1_=  000002     |   6 TNAM2      00177C R   |   6 TNAM3      00179A R
  6 TNAM4      0017A0 R   |   6 TNAME      001779 R   |   6 TOKEN      000F8B R
  6 TOR        0003BB R   |     TRUEE   =  00FFFF     |   6 TWOSL      0008F9 R
  6 TYPE1      000D60 R   |   6 TYPE2      000D6C R   |   6 TYPES      000D5B R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000E01 R
  6 UDOTR      000DE1 R   |   6 UEND       00003D R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      000683 R   |   6 ULESS      00066D R   |   6 UMMOD      000703 R
  6 UMSTA      0007DC R   |   6 UNIQ1      0014BB R   |   6 UNIQU      00149C R
  6 UNTIL      00139E R   |     UOFFSET =  00001C     |   6 UPDATCP    00195A R
  6 UPDATLAS   001931 R   |   6 UPDATPTR   001EC2 R   |   6 UPDATRUN   001949 R
  6 UPDATVP    001971 R   |   6 UPL1       000493 R   |   6 UPLUS      00047C R
    UPP     =  000006     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      0016B3 R   |   6 UTYP2      0016C2 R   |   6 UTYPE      0016AE R
    UVP     =  000016     |   6 UZERO      000027 R   |   6 VARIA      001645 R
    VER     =  000003     |   6 VPP        00052E R   |     VSIZE   =  000006 
    WANT_DEB=  000000     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001424 R   |   6 WITHI      0006E8 R
  6 WORDD      000F77 R   |   6 WORDS      0017D6 R   |   6 WORS1      0017DC R
  6 WORS2      0017FB R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       000467 R   |     XTEMP   =  00001E     |     YTEMP   =  000020 
  6 ZERO       000913 R   |   6 ZL1        000434 R   |   6 ZLESS      00042B R
  6 app_spac   001F80 R   |   6 block_er   001AF4 R   |   6 clear_ra   000019 R
  6 clock_in   00005A R   |   6 copy_buf   001B4B R   |   6 copy_buf   001B6A R
  6 copy_pro   001B6A R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 ee_ccomm   001D65 R
  6 ee_comma   001D44 R   |   6 ee_cstor   001A61 R   |   6 ee_store   001AAD R
  6 erase_fl   001B10 R   |   6 farat      001982 R   |   6 farcat     00199E R
  6 fmove_do   001EAF R   |   6 fptr_sto   00189D R   |   6 inc_fptr   001A2F R
  6 lock       001A1B R   |   6 main       000016 R   |   6 next_row   001E6C R
  6 pristine   001BE5 R   |   6 proceed_   001B13 R   |   6 reboot     000285 R
  6 reset_ve   001C4C R   |   6 row_eras   001AD7 R   |   6 row_eras   001B24 R
  6 row_eras   001B4B R   |   6 set_opti   001BB9 R   |   6 set_vect   001CED R
  6 uart1_in   00006C R   |   6 unlock     0019F3 R   |   6 unlock_e   0019B5 R
  6 unlock_f   0019D4 R   |   6 write_by   001A46 R   |   6 write_ro   001B8F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1F80   flags    0

