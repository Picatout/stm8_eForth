ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    97 DATSTK  =	0x1670	;data stack  empty
                           001680    98 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700    99 TIBBASE =       0X1700  ; tib addr.
                                    100 
                                    101 
                                    102 
                                    103 ;; Memory allocation
                                    104 
                           000006   105 UPP     =     RAMBASE+6
                           001670   106 SPP     =     RAMBASE+DATSTK
                           0017FF   107 RPP     =     RAMBASE+STACK
                           001680   108 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   109 TIBB    =     RAMBASE+TIBBASE
                           000080   110 CTOP    =     RAMBASE+0x80
                                    111 
                           000001   112 .if PICATOUT_MOD 
                                    113 ; user variables constants 
                           000006   114 UBASE = UPP       ; numeric base 
                           000008   115 UTMP = UBASE+2    ; temporary storage
                           00000A   116 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   117 UCTIB = UINN+2    ; tib count 
                           00000E   118 UTIB = UCTIB+2    ; tib address 
                           000010   119 UINTER = UTIB+2   ; interpreter vector 
                           000012   120 UHLD = UINTER+2   ; hold 
                           000014   121 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   122 UVP = UCNTXT+2    ; variable pointer 
                           000018   123 UCP = UVP+2      ; code pointer
                           00001A   124 ULAST = UCP+2    ; last dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           00001C   125 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                                    126 .endif ; PICATOUT_MOD
                                    127 
                                    128 ;******  System Variables  ******
                           00001E   129 XTEMP	=	UOFFSET+2;address called by CREATE
                           000020   130 YTEMP	=	XTEMP+2	;address called by CREATE
                           00001E   131 PROD1 = XTEMP	;space for UM*
                           000020   132 PROD2 = PROD1+2
                           000022   133 PROD3 = PROD2+2
                           000024   134 CARRY = PROD3+2
                           000026   135 SP0	= CARRY+2	;initial data stack pointer
                           000028   136 RP0	= SP0+2		;initial return stack pointer
                           00002A   137 MS    =   RP0+2         ; millisecond counter 
                           00002C   138 CNTDWN =  MS+2          ; count down timer 
                           00002E   139 FPTR = CNTDWN+2         ; 24 bits farptr 
                           00002F   140 PTR16 = FPTR+1          ; middle byte of farptr 
                           000030   141 PTR8 = FPTR+2           ; least byte of farptr 
                                    142 
                           000001   143 .if PICATOUT_MOD
                                    144 ; EEPROM persistant data  
                           004000   145 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   146 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   147 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   148 APP_VP = APP_CP+2  ; free data space pointer 
                                    149 .endif ;PICATOUT_MOD
                                    150 
                                    151 
                                    152 ;***********************************************
                                    153 ;; Version control
                                    154 
                           000002   155 VER     =     2         ;major release version
                           000001   156 EXT     =     1         ;minor extension
                                    157 
                                    158 ;; Constants
                                    159 
                           00FFFF   160 TRUEE   =     0xFFFF      ;true flag
                                    161 
                           000040   162 COMPO   =     0x40     ;lexicon compile only bit
                           000080   163 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   164 MASKK   =     0x1F7F  ;lexicon bit mask
                                    165 
                           000002   166 CELLL   =     2       ;size of a cell
                           00000A   167 BASEE   =     10      ;default radix
                           000008   168 BKSPP   =     8       ;back space
                           00000A   169 LF      =     10      ;line feed
                           00000D   170 CRR     =     13      ;carriage return
                           00001B   171 ERR     =     27      ;error escape
                           000027   172 TIC     =     39      ;tick
                           0000CD   173 CALLL   =     0xCD     ;CALL opcodes
                                    174 
                                    175 
                                    176         .macro _ledon
                                    177         bset PC_ODR,#LED2_BIT
                                    178         .endm
                                    179 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .macro _ledoff
                                    181         bres PC_ODR,#LED2_BIT
                                    182         .endm
                                    183 
                                    184 ;**********************************************************
                                    185         .area DATA (ABS)
      000000                        186         .org RAMBASE 
                                    187 ;**********************************************************
                                    188 
                                    189 ;**********************************************************
                                    190         .area SSEG (ABS) ; STACK
      001700                        191         .org 0x1700
      001700                        192         .ds 256 
                                    193 ; space for DATSTK,TIB and STACK         
                                    194 ;**********************************************************
                                    195 
                                    196 ;**********************************************************
                                    197         .area HOME ; vectors table
                                    198 ;**********************************************************
      000000 82 00 00 16            199 	int main	        ; reset
      000004 82 00 00 00            200 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            201 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            202 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            203 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            204 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            205 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            206 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            207 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            208 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            209 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            210 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            211 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            212 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            213 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            214 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            215 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            216 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            217 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            218 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            219 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            220 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            221 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            222 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            223 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            224 	int Timer4Handler	; irq23
      000068 82 00 00 00            225 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            226 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            227 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            228 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            229 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            230 	int NonHandledInterrupt	; irq29
                                    231 
                                    232 ;**********************************************************
                                    233         .area CODE
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 
                                    236 ; non handled interrupt reset MCU
      000000                        237 NonHandledInterrupt:
      000000 A6 80            [ 1]  238         ld a, #0x80
      000002 C7 50 D1         [ 1]  239         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    240 	;iret
                                    241 
                                    242 ; used for milliseconds counter 
                                    243 ; MS is 16 bits counter 
      000005                        244 Timer4Handler:
      000005 72 5F 53 42      [ 1]  245 	clr TIM4_SR 
      000009 BE 2A            [ 2]  246         ldw x,MS 
      00000B 5C               [ 2]  247         incw x 
      00000C BF 2A            [ 2]  248         ldw MS,x
      00000E BE 2C            [ 2]  249         ldw x,CNTDWN 
      000010 27 03            [ 1]  250         jreq 1$
      000012 5A               [ 2]  251         decw x 
      000013 BF 2C            [ 2]  252         ldw CNTDWN,x 
      000015                        253 1$:         
      000015 80               [11]  254         iret 
                                    255 
                                    256 
                                    257 ;; Main entry points and COLD start data
      000016                        258 main:
                                    259 ; clear all RAM
      000016 AE 00 00         [ 2]  260 	ldw X,#RAMBASE
      000019                        261 clear_ram0:
      000019 7F               [ 1]  262 	clr (X)
      00001A 5C               [ 2]  263 	incw X
      00001B A3 17 FF         [ 2]  264 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  265 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  266         ldw x,#RPP
      000023 94               [ 1]  267         ldw sp,x 
      000024 CC 00 3F         [ 2]  268 	jp ORIG
                                    269 
                                    270 ; COLD initialize these variables.
      000027                        271 UZERO:
      000027 00 0A                  272         .word      BASEE   ;BASE
      000029 00 00                  273         .word      0       ;tmp
      00002B 00 00                  274         .word      0       ;>IN
      00002D 00 00                  275         .word      0       ;#TIB
      00002F 17 00                  276         .word      TIBB    ;TIB
      000031 10 03                  277         .word      INTER   ;'EVAL
      000033 00 00                  278         .word      0       ;HLD
      000035 1B CF                  279         .word      LASTN  ;CNTXT pointer
      000037 00 80                  280         .word      CTOP   ;CP in RAM
      000039 1D 00                  281         .word      app_space ; CP in FLASH 
      00003B 1B CF                  282         .word      LASTN   ;LAST
      00003D 00 00                  283 UEND:  .word      0
                                    284 
      00003F                        285 ORIG:   
                                    286 ; initialize SP
      00003F AE 17 FF         [ 2]  287         LDW     X,#STACK  ;initialize return stack
      000042 94               [ 1]  288         LDW     SP,X
      000043 BF 28            [ 2]  289         LDW     RP0,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000045 AE 16 70         [ 2]  290         LDW     X,#DATSTK ;initialize data stack
      000048 BF 26            [ 2]  291         LDW     SP0,X
                                    292 ; initialize PC_5 as output to control LED2
                                    293 ; added by Picatout 
      00004A 72 1A 50 0D      [ 1]  294         bset PC_CR1,#LED2_BIT
      00004E 72 1A 50 0E      [ 1]  295         bset PC_CR2,#LED2_BIT
      000052 72 1A 50 0C      [ 1]  296         bset PC_DDR,#LED2_BIT
      000056                        297         _ledoff
      000056 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    298 ; initialize clock to HSI
                                    299 ; no divisor 16Mhz 
                                    300 ; Added by Picatout 
      00005A                        301 clock_init:
      00005A 72 5F 50 C6      [ 1]  302         clr CLK_CKDIVR
      00005E 72 12 50 C5      [ 1]  303 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000062 A6 E1            [ 1]  304 	ld a,#CLK_SWR_HSI
      000064 C7 50 C4         [ 1]  305 	ld CLK_SWR,a
      000067 C1 50 C3         [ 1]  306 1$:	cp a,CLK_CMSR
      00006A 26 FB            [ 1]  307 	jrne 1$
                                    308         
                                    309 ; initialize UART1, 115200 8N1
      00006C                        310 uart1_init:
      00006C 72 14 50 C7      [ 1]  311 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    312 	; configure tx pin
      000070 72 1A 50 02      [ 1]  313 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000074 72 1A 50 03      [ 1]  314 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000078 72 1A 50 04      [ 1]  315 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    316 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007C 35 0B 52 33      [ 1]  317 	mov UART1_BRR2,#0x0b ; must be loaded first
      000080 35 08 52 32      [ 1]  318 	mov UART1_BRR1,#0x8
      000084 35 0C 52 35      [ 1]  319 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    320 ; initialize timer4, used for millisecond interrupt  
      000088 35 07 53 45      [ 1]  321 	mov TIM4_PSCR,#7 ; prescale 128  
      00008C 35 7D 53 46      [ 1]  322 	mov TIM4_ARR,#125 ; set for 1msec.
      000090 35 05 53 40      [ 1]  323 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000094 72 10 53 41      [ 1]  324 	bset TIM4_IER,#TIM4_IER_UIE 
      000098 9A               [ 1]  325         rim
      000099 CC 16 13         [ 2]  326         jp  COLD   ;default=MN1
                                    327 
                                    328 
                                    329 ;; get millisecond counter 
                                    330 ;; msec ( -- u )
                                    331 ;; Added by Picatout 2020-04-26
      00009C 00 00                  332         .word 0 
                           00009E   333 LINK = . 
      00009E 04                     334         .byte 4
      00009F 4D 53 45 43            335         .ascii "MSEC"
      0000A3                        336 MSEC: 
      0000A3 1D 00 02         [ 2]  337         subw x,#CELLL 
      0000A6 90 BE 2A         [ 2]  338         ldw y,MS 
      0000A9 FF               [ 2]  339         ldw (x),y 
      0000AA 81               [ 4]  340         ret 
                                    341 
                                    342 ; suspend execution for u msec 
                                    343 ;  pause ( u -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000AB 00 9E                  344         .word LINK 
                           0000AD   345         LINK=.
      0000AD 05                     346         .byte 5 
      0000AE 50 41 55 53 45         347         .ascii "PAUSE"
      0000B3                        348 PAUSE:
      0000B3 90 93            [ 1]  349         ldw y,x
      0000B5 90 FE            [ 2]  350         ldw y,(y)
      0000B7 72 B9 00 2A      [ 2]  351         addw y,MS 
      0000BB 8F               [10]  352 1$:     wfi  
      0000BC 90 B3 2A         [ 2]  353         cpw y,MS  
      0000BF 26 FA            [ 1]  354         jrne 1$        
      0000C1 1C 00 02         [ 2]  355         addw x,#CELLL 
      0000C4 81               [ 4]  356         ret 
                                    357 
                                    358 ; initialize count down timer 
                                    359 ;  TIMER ( u -- )  milliseconds 
      0000C5 00 AD                  360         .word LINK 
                           0000C7   361         LINK=.
      0000C7 05                     362         .byte 5 
      0000C8 54 49 4D 45 52         363         .ascii "TIMER" 
      0000CD                        364 TIMER:
      0000CD 90 93            [ 1]  365         ldw y,x
      0000CF 90 FE            [ 2]  366         ldw y,(y) 
      0000D1 90 BF 2C         [ 2]  367         ldw CNTDWN,y
      0000D4 1C 00 02         [ 2]  368         addw x,#CELLL 
      0000D7 81               [ 4]  369         ret 
                                    370 
                                    371 ; check for TIMER exiparition 
                                    372 ;  TIMEOUT? ( -- 0|-1 )
      0000D8 00 C7                  373         .word LINK 
                           0000DA   374         LINK=. 
      0000DA 08                     375         .byte 8 
      0000DB 54 49 4D 45 4F 55 54   376         .ascii "TIMEOUT?"
             3F
      0000E3                        377 TIMEOUTQ: 
      0000E3 4F               [ 1]  378         clr a
      0000E4 1D 00 02         [ 2]  379         subw x,#CELLL 
      0000E7 90 BE 2C         [ 2]  380         ldw y,CNTDWN 
      0000EA 26 01            [ 1]  381         jrne 1$ 
      0000EC 43               [ 1]  382         cpl a 
      0000ED E7 01            [ 1]  383 1$:     ld (1,x),a 
      0000EF F7               [ 1]  384         ld (x),a 
      0000F0 81               [ 4]  385         ret         
                                    386 
                                    387 ; reboot MCU 
                                    388 ; REBOOT ( -- )
      0000F1 00 DA                  389         .word LINK 
                           0000F3   390         LINK=. 
      0000F3 06                     391         .byte 6 
      0000F4 52 45 42 4F 4F 54      392         .ascii "REBOOT"
      0000FA                        393 reboot:
      0000FA CC 00 00         [ 2]  394         jp NonHandledInterrupt
                                    395         
                                    396 
                                    397 ;; Device dependent I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    398 ;       ?RX     ( -- c T | F )
                                    399 ;         Return input byte and true, or false.
      0000FD 00 F3                  400         .word      LINK 
                           0000FF   401 LINK	= .
      0000FF 04                     402         .byte      4
      000100 3F 4B 45 59            403         .ascii     "?KEY"
      000104                        404 QKEY:
      000104 90 5F            [ 1]  405         CLRW Y 
      000106 72 0B 52 30 0B   [ 2]  406         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      00010B C6 52 31         [ 1]  407         LD    A,UART1_DR   ;get char in A
      00010E 1D 00 02         [ 2]  408 	SUBW	X,#2
      000111 E7 01            [ 1]  409         LD     (1,X),A
      000113 7F               [ 1]  410 	CLR	(X)
      000114 90 53            [ 2]  411         CPLW     Y
      000116                        412 INCH:
      000116 1D 00 02         [ 2]  413 	SUBW	X,#2
      000119 FF               [ 2]  414         LDW     (X),Y
      00011A 81               [ 4]  415         RET
                                    416 
                                    417 ;       TX!     ( c -- )
                                    418 ;       Send character c to  output device.
      00011B 00 FF                  419         .word      LINK
                           00011D   420 LINK	= .
      00011D 04                     421         .byte      4
      00011E 45 4D 49 54            422         .ascii     "EMIT"
      000122                        423 EMIT:
      000122 E6 01            [ 1]  424         LD     A,(1,X)
      000124 1C 00 02         [ 2]  425 	ADDW	X,#2
      000127 72 0F 52 30 FB   [ 2]  426 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00012C C7 52 31         [ 1]  427         LD    UART1_DR,A   ;send A
      00012F 81               [ 4]  428         RET
                                    429 
                                    430 ;; The kernel
                                    431 
                                    432 ;       doLIT   ( -- w )
                                    433 ;       Push an inline literal.
      000130 01 1D                  434         .word      LINK
                           000132   435 LINK	= 	.
      000132 45                     436 	.byte      COMPO+5
      000133 44 4F 4C 49 54         437         .ascii     "DOLIT"
      000138                        438 DOLIT:
      000138 1D 00 02         [ 2]  439 	SUBW X,#2
                           000001   440 .if PICATOUT_MOD 
      00013B 16 01            [ 2]  441         ldw y,(1,sp)
      00013D 90 FE            [ 2]  442         ldw y,(y)
      00013F FF               [ 2]  443         ldw (x),y
      000140 90 85            [ 2]  444         popw y 
      000142 90 EC 02         [ 2]  445         jp (2,y)
                           000000   446 .else 
                                    447         POPW Y
                                    448 	LDW YTEMP,Y
                                    449 	LDW Y,(Y)
                                    450         LDW (X),Y
                                    451         LDW Y,YTEMP
                                    452 	JP (2,Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    453 .endif 
                                    454 
                                    455 ;       next    ( -- )
                                    456 ;       Code for  single index loop.
      000145 01 32                  457         .word      LINK
                           000147   458 LINK	= 	.
      000147 44                     459 	.byte      COMPO+4
      000148 4E 45 58 54            460         .ascii     "NEXT"
      00014C                        461 DONXT:
      00014C 16 03            [ 2]  462 	LDW Y,(3,SP)
      00014E 90 5A            [ 2]  463 	DECW Y
      000150 2A 07            [ 1]  464 	JRPL NEX1 ; jump if N=0
      000152 90 85            [ 2]  465 	POPW Y
                           000001   466 .if PICATOUT_MOD
      000154 5B 02            [ 2]  467         addw sp,#2
                           000000   468 .else        
                                    469 	POP A
                                    470 	POP A
                                    471 .endif         
      000156 90 EC 02         [ 2]  472         JP (2,Y)
      000159                        473 NEX1:
      000159 17 03            [ 2]  474         LDW (3,SP),Y
      00015B 90 85            [ 2]  475         POPW Y
      00015D 90 FE            [ 2]  476 	LDW Y,(Y)
      00015F 90 FC            [ 2]  477 	JP (Y)
                                    478 
                                    479 ;       ?branch ( f -- )
                                    480 ;       Branch if flag is zero.
      000161 01 47                  481         .word      LINK
                           000163   482 LINK	= 	.
      000163 47                     483 	.byte      COMPO+7
      000164 3F 42 52 41 4E 43 48   484         .ascii     "?BRANCH"
      00016B                        485 QBRAN:	
      00016B 90 93            [ 1]  486         LDW Y,X
      00016D 1C 00 02         [ 2]  487 	ADDW X,#2
      000170 90 FE            [ 2]  488 	LDW Y,(Y)
      000172 27 0E            [ 1]  489         JREQ     BRAN
      000174 90 85            [ 2]  490 	POPW Y
      000176 90 EC 02         [ 2]  491 	JP (2,Y)
                                    492         
                                    493 ;       branch  ( -- )
                                    494 ;       Branch to an inline address.
      000179 01 63                  495         .word      LINK
                           00017B   496 LINK	= 	.
      00017B 46                     497 	.byte      COMPO+6
      00017C 42 52 41 4E 43 48      498         .ascii     "BRANCH"
      000182                        499 BRAN:
      000182 90 85            [ 2]  500         POPW Y
      000184 90 FE            [ 2]  501 	LDW Y,(Y)
      000186 90 FC            [ 2]  502         JP     (Y)
                                    503 
                                    504 ;       EXECUTE ( ca -- )
                                    505 ;       Execute  word at ca.
      000188 01 7B                  506         .word      LINK
                           00018A   507 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      00018A 07                     508         .byte       7
      00018B 45 58 45 43 55 54 45   509         .ascii     "EXECUTE"
      000192                        510 EXECU:
      000192 90 93            [ 1]  511         LDW Y,X
      000194 1C 00 02         [ 2]  512 	ADDW X,#2
      000197 90 FE            [ 2]  513 	LDW  Y,(Y)
      000199 90 FC            [ 2]  514         JP   (Y)
                                    515 
                                    516 ;       EXIT    ( -- )
                                    517 ;       Terminate a colon definition.
      00019B 01 8A                  518         .word      LINK
                           00019D   519 LINK = .
      00019D 04                     520         .byte      4
      00019E 45 58 49 54            521         .ascii     "EXIT"
      0001A2                        522 EXIT:
      0001A2 90 85            [ 2]  523         POPW Y
      0001A4 81               [ 4]  524         RET
                                    525 
                                    526 ;       !       ( w a -- )
                                    527 ;       Pop  data stack to memory.
      0001A5 01 9D                  528         .word      LINK
                           0001A7   529 LINK = .
      0001A7 01                     530         .byte      1
      0001A8 21                     531         .ascii     "!"
      0001A9                        532 STORE:
      0001A9 90 93            [ 1]  533         LDW Y,X
      0001AB 90 FE            [ 2]  534         LDW Y,(Y)    ;Y=a
      0001AD 90 BF 20         [ 2]  535         LDW YTEMP,Y
      0001B0 90 93            [ 1]  536         LDW Y,X
      0001B2 90 EE 02         [ 2]  537         LDW Y,(2,Y)
      0001B5 91 CF 20         [ 5]  538         LDW [YTEMP],Y ;store w at a
      0001B8 1C 00 04         [ 2]  539         ADDW X,#4 ; DDROP 
      0001BB 81               [ 4]  540         RET     
                                    541 
                                    542 ;       @       ( a -- w )
                                    543 ;       Push memory location to stack.
      0001BC 01 A7                  544         .word      LINK
                           0001BE   545 LINK	= 	.
      0001BE 01                     546         .byte    1
      0001BF 40                     547         .ascii	"@"
      0001C0                        548 AT:
      0001C0 90 93            [ 1]  549         LDW Y,X     ;Y = a
      0001C2 90 FE            [ 2]  550         LDW Y,(Y)   ; address 
      0001C4 90 FE            [ 2]  551         LDW Y,(Y)   ; value 
      0001C6 FF               [ 2]  552         LDW (X),Y ;w = @Y
      0001C7 81               [ 4]  553         RET     
                                    554 
                                    555 ;       C!      ( c b -- )
                                    556 ;       Pop  data stack to byte memory.
      0001C8 01 BE                  557         .word      LINK
                           0001CA   558 LINK	= .
      0001CA 02                     559         .byte      2
      0001CB 43 21                  560         .ascii     "C!"
      0001CD                        561 CSTOR:
      0001CD 90 93            [ 1]  562         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001CF 90 FE            [ 2]  563 	LDW Y,(Y)    ;Y=b
      0001D1 E6 03            [ 1]  564         LD A,(3,X)    ;D = c
      0001D3 90 F7            [ 1]  565         LD  (Y),A     ;store c at b
      0001D5 1C 00 04         [ 2]  566 	ADDW X,#4 ; DDROP 
      0001D8 81               [ 4]  567         RET     
                                    568 
                                    569 ;       C@      ( b -- c )
                                    570 ;       Push byte in memory to  stack.
      0001D9 01 CA                  571         .word      LINK
                           0001DB   572 LINK	= 	.
      0001DB 02                     573         .byte      2
      0001DC 43 40                  574         .ascii     "C@"
      0001DE                        575 CAT:
      0001DE 90 93            [ 1]  576         LDW Y,X     ;Y=b
      0001E0 90 FE            [ 2]  577         LDW Y,(Y)
      0001E2 90 F6            [ 1]  578         LD A,(Y)
      0001E4 E7 01            [ 1]  579         LD (1,X),A
      0001E6 7F               [ 1]  580         CLR (X)
      0001E7 81               [ 4]  581         RET     
                                    582 
                                    583 ;       RP@     ( -- a )
                                    584 ;       Push current RP to data stack.
      0001E8 01 DB                  585         .word      LINK
                           0001EA   586 LINK	= .
      0001EA 03                     587         .byte      3
      0001EB 52 50 40               588         .ascii     "RP@"
      0001EE                        589 RPAT:
      0001EE 90 96            [ 1]  590         LDW Y,SP    ;save return addr
      0001F0 1D 00 02         [ 2]  591         SUBW X,#2
      0001F3 FF               [ 2]  592         LDW (X),Y
      0001F4 81               [ 4]  593         RET     
                                    594 
                                    595 ;       RP!     ( a -- )
                                    596 ;       Set  return stack pointer.
      0001F5 01 EA                  597         .word      LINK
                           0001F7   598 LINK	= 	. 
      0001F7 43                     599 	.byte      COMPO+3
      0001F8 52 50 21               600         .ascii     "RP!"
      0001FB                        601 RPSTO:
      0001FB 90 85            [ 2]  602         POPW Y
      0001FD 90 BF 20         [ 2]  603         LDW YTEMP,Y
      000200 90 93            [ 1]  604         LDW Y,X
      000202 90 FE            [ 2]  605         LDW Y,(Y)
      000204 90 94            [ 1]  606         LDW SP,Y
      000206 1C 00 02         [ 2]  607         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000209 92 CC 20         [ 5]  608         JP [YTEMP]
                                    609 
                                    610 ;       R>      ( -- w )
                                    611 ;       Pop return stack to data stack.
      00020C 01 F7                  612         .word      LINK
                           00020E   613 LINK	= 	. 
      00020E 42                     614 	.byte      COMPO+2
      00020F 52 3E                  615         .ascii     "R>"
      000211                        616 RFROM:
      000211 90 85            [ 2]  617         POPW Y    ;save return addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000213 90 BF 20         [ 2]  618         LDW YTEMP,Y
      000216 90 85            [ 2]  619         POPW Y
      000218 1D 00 02         [ 2]  620         SUBW X,#2
      00021B FF               [ 2]  621         LDW (X),Y
      00021C 92 CC 20         [ 5]  622         JP [YTEMP]
                                    623 
                                    624 ;       R@      ( -- w )
                                    625 ;       Copy top of return stack to stack.
      00021F 02 0E                  626         .word      LINK
                           000221   627 LINK	= 	. 
      000221 02                     628         .byte      2
      000222 52 40                  629         .ascii     "R@"
      000224                        630 RAT:
                           000001   631 .if PICATOUT_MOD
      000224 16 03            [ 2]  632         ldw y,(3,sp)
      000226 1D 00 02         [ 2]  633         subw x,#CELLL 
      000229 FF               [ 2]  634         ldw (x),y 
      00022A 81               [ 4]  635         ret 
                           000000   636 .else 
                                    637         POPW Y
                                    638         LDW YTEMP,Y
                                    639         POPW Y
                                    640         PUSHW Y
                                    641         SUBW X,#2
                                    642         LDW (X),Y
                                    643         JP [YTEMP]
                                    644 .endif         
                                    645 
                                    646 ;       >R      ( w -- )
                                    647 ;       Push data stack to return stack.
      00022B 02 21                  648         .word      LINK
                           00022D   649 LINK	= 	. 
      00022D 42                     650 	.byte      COMPO+2
      00022E 3E 52                  651         .ascii     ">R"
      000230                        652 TOR:
      000230 90 85            [ 2]  653         POPW Y    ;save return addr
      000232 90 BF 20         [ 2]  654         LDW YTEMP,Y
      000235 90 93            [ 1]  655         LDW Y,X
      000237 90 FE            [ 2]  656         LDW Y,(Y)
      000239 90 89            [ 2]  657         PUSHW Y    ;restore return addr
      00023B 1C 00 02         [ 2]  658         ADDW X,#2
      00023E 92 CC 20         [ 5]  659         JP [YTEMP]
                                    660 
                                    661 ;       SP@     ( -- a )
                                    662 ;       Push current stack pointer.
      000241 02 2D                  663         .word      LINK
                           000243   664 LINK	= 	. 
      000243 03                     665         .byte      3
      000244 53 50 40               666         .ascii     "SP@"
      000247                        667 SPAT:
      000247 90 93            [ 1]  668 	LDW Y,X
      000249 1D 00 02         [ 2]  669         SUBW X,#2
      00024C FF               [ 2]  670 	LDW (X),Y
      00024D 81               [ 4]  671         RET     
                                    672 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



                                    673 ;       SP!     ( a -- )
                                    674 ;       Set  data stack pointer.
      00024E 02 43                  675         .word      LINK
                           000250   676 LINK	= 	. 
      000250 03                     677         .byte      3
      000251 53 50 21               678         .ascii     "SP!"
      000254                        679 SPSTO:
      000254 FE               [ 2]  680         LDW     X,(X)     ;X = a
      000255 81               [ 4]  681         RET     
                                    682 
                                    683 ;       DROP    ( w -- )
                                    684 ;       Discard top stack item.
      000256 02 50                  685         .word      LINK
                           000258   686 LINK	= 	. 
      000258 04                     687         .byte      4
      000259 44 52 4F 50            688         .ascii     "DROP"
      00025D                        689 DROP:
      00025D 1C 00 02         [ 2]  690         ADDW X,#2     
      000260 81               [ 4]  691         RET     
                                    692 
                                    693 ;       DUP     ( w -- w w )
                                    694 ;       Duplicate  top stack item.
      000261 02 58                  695         .word      LINK
                           000263   696 LINK	= 	. 
      000263 03                     697         .byte      3
      000264 44 55 50               698         .ascii     "DUP"
      000267                        699 DUPP:
      000267 90 93            [ 1]  700 	LDW Y,X
      000269 1D 00 02         [ 2]  701         SUBW X,#2
      00026C 90 FE            [ 2]  702 	LDW Y,(Y)
      00026E FF               [ 2]  703 	LDW (X),Y
      00026F 81               [ 4]  704         RET     
                                    705 
                                    706 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    707 ;       Exchange top two stack items.
      000270 02 63                  708         .word      LINK
                           000272   709 LINK	= 	. 
      000272 04                     710         .byte      4
      000273 53 57 41 50            711         .ascii     "SWAP"
      000277                        712 SWAPP:
      000277 90 93            [ 1]  713         LDW Y,X
      000279 90 FE            [ 2]  714         LDW Y,(Y)
      00027B 90 BF 20         [ 2]  715         LDW YTEMP,Y
      00027E 90 93            [ 1]  716         LDW Y,X
      000280 90 EE 02         [ 2]  717         LDW Y,(2,Y)
      000283 FF               [ 2]  718         LDW (X),Y
      000284 90 BE 20         [ 2]  719         LDW Y,YTEMP
      000287 EF 02            [ 2]  720         LDW (2,X),Y
      000289 81               [ 4]  721         RET     
                                    722 
                                    723 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    724 ;       Copy second stack item to top.
      00028A 02 72                  725         .word      LINK
                           00028C   726 LINK	= . 
      00028C 04                     727         .byte      4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00028D 4F 56 45 52            728         .ascii     "OVER"
      000291                        729 OVER:
      000291 1D 00 02         [ 2]  730         SUBW X,#2
      000294 90 93            [ 1]  731         LDW Y,X
      000296 90 EE 04         [ 2]  732         LDW Y,(4,Y)
      000299 FF               [ 2]  733         LDW (X),Y
      00029A 81               [ 4]  734         RET     
                                    735 
                                    736 ;       0<      ( n -- t )
                                    737 ;       Return true if n is negative.
      00029B 02 8C                  738         .word      LINK
                           00029D   739 LINK	= . 
      00029D 02                     740         .byte      2
      00029E 30 3C                  741         .ascii     "0<"
      0002A0                        742 ZLESS:
      0002A0 A6 FF            [ 1]  743         LD A,#0xFF
      0002A2 90 93            [ 1]  744         LDW Y,X
      0002A4 90 FE            [ 2]  745         LDW Y,(Y)
      0002A6 2B 01            [ 1]  746         JRMI     ZL1
      0002A8 4F               [ 1]  747         CLR A   ;false
      0002A9 F7               [ 1]  748 ZL1:    LD     (X),A
      0002AA E7 01            [ 1]  749         LD (1,X),A
      0002AC 81               [ 4]  750 	RET     
                                    751 
                                    752 ;       AND     ( w w -- w )
                                    753 ;       Bitwise AND.
      0002AD 02 9D                  754         .word      LINK
                           0002AF   755 LINK	= . 
      0002AF 03                     756         .byte      3
      0002B0 41 4E 44               757         .ascii     "AND"
      0002B3                        758 ANDD:
      0002B3 F6               [ 1]  759         LD  A,(X)    ;D=w
      0002B4 E4 02            [ 1]  760         AND A,(2,X)
      0002B6 E7 02            [ 1]  761         LD (2,X),A
      0002B8 E6 01            [ 1]  762         LD A,(1,X)
      0002BA E4 03            [ 1]  763         AND A,(3,X)
      0002BC E7 03            [ 1]  764         LD (3,X),A
      0002BE 1C 00 02         [ 2]  765         ADDW X,#2
      0002C1 81               [ 4]  766         RET
                                    767 
                                    768 ;       OR      ( w w -- w )
                                    769 ;       Bitwise inclusive OR.
      0002C2 02 AF                  770         .word      LINK
                           0002C4   771 LINK = . 
      0002C4 02                     772         .byte      2
      0002C5 4F 52                  773         .ascii     "OR"
      0002C7                        774 ORR:
      0002C7 F6               [ 1]  775         LD A,(X)    ;D=w
      0002C8 EA 02            [ 1]  776         OR A,(2,X)
      0002CA E7 02            [ 1]  777         LD (2,X),A
      0002CC E6 01            [ 1]  778         LD A,(1,X)
      0002CE EA 03            [ 1]  779         OR A,(3,X)
      0002D0 E7 03            [ 1]  780         LD (3,X),A
      0002D2 1C 00 02         [ 2]  781         ADDW X,#2
      0002D5 81               [ 4]  782         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    783 
                                    784 ;       XOR     ( w w -- w )
                                    785 ;       Bitwise exclusive OR.
      0002D6 02 C4                  786         .word      LINK
                           0002D8   787 LINK	= . 
      0002D8 03                     788         .byte      3
      0002D9 58 4F 52               789         .ascii     "XOR"
      0002DC                        790 XORR:
      0002DC F6               [ 1]  791         LD A,(X)    ;D=w
      0002DD E8 02            [ 1]  792         XOR A,(2,X)
      0002DF E7 02            [ 1]  793         LD (2,X),A
      0002E1 E6 01            [ 1]  794         LD A,(1,X)
      0002E3 E8 03            [ 1]  795         XOR A,(3,X)
      0002E5 E7 03            [ 1]  796         LD (3,X),A
      0002E7 1C 00 02         [ 2]  797         ADDW X,#2
      0002EA 81               [ 4]  798         RET
                                    799 
                                    800 ;       UM+     ( u u -- udsum )
                                    801 ;       Add two unsigned single
                                    802 ;       and return a double sum.
      0002EB 02 D8                  803         .word      LINK
                           0002ED   804 LINK	= . 
      0002ED 03                     805         .byte      3
      0002EE 55 4D 2B               806         .ascii     "UM+"
      0002F1                        807 UPLUS:
      0002F1 A6 01            [ 1]  808         LD A,#1
      0002F3 90 93            [ 1]  809         LDW Y,X
      0002F5 90 EE 02         [ 2]  810         LDW Y,(2,Y)
      0002F8 90 BF 20         [ 2]  811         LDW YTEMP,Y
      0002FB 90 93            [ 1]  812         LDW Y,X
      0002FD 90 FE            [ 2]  813         LDW Y,(Y)
      0002FF 72 B9 00 20      [ 2]  814         ADDW Y,YTEMP
      000303 EF 02            [ 2]  815         LDW (2,X),Y
      000305 25 01            [ 1]  816         JRC     UPL1
      000307 4F               [ 1]  817         CLR A
      000308 E7 01            [ 1]  818 UPL1:   LD     (1,X),A
      00030A 7F               [ 1]  819         CLR (X)
      00030B 81               [ 4]  820         RET
                                    821 
                                    822 ;; System and user variables
                                    823 
                                    824 ;       doVAR   ( -- a )
                                    825 ;       Code for VARIABLE and CREATE.
      00030C 02 ED                  826         .word      LINK
                           00030E   827 LINK	= . 
      00030E 45                     828 	.byte      COMPO+5
      00030F 44 4F 56 41 52         829         .ascii     "DOVAR"
      000314                        830 DOVAR:
      000314 1D 00 02         [ 2]  831 	SUBW X,#2
      000317 90 85            [ 2]  832         POPW Y    ;get return addr (pfa)
                           000001   833 .if PICATOUT_MOD
      000319 90 FE            [ 2]  834         LDW Y,(Y) ; indirect address 
                                    835 .endif ;PICATOUT_MOD        
      00031B FF               [ 2]  836         LDW (X),Y    ;push on stack
      00031C 81               [ 4]  837         RET     ;go to RET of EXEC
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    838 
                                    839 ;       BASE    ( -- a )
                                    840 ;       Radix base for numeric I/O.
      00031D 03 0E                  841         .word      LINK        
                           00031F   842 LINK = . 
      00031F 04                     843         .byte      4
      000320 42 41 53 45            844         .ascii     "BASE"
      000324                        845 BASE:
      000324 90 AE 00 06      [ 2]  846 	LDW Y,#UBASE 
      000328 1D 00 02         [ 2]  847 	SUBW X,#2
      00032B FF               [ 2]  848         LDW (X),Y
      00032C 81               [ 4]  849         RET
                                    850 
                                    851 ;       tmp     ( -- a )
                                    852 ;       A temporary storage.
      00032D 03 1F                  853         .word      LINK
                                    854         
                           00032F   855 LINK = . 
      00032F 03                     856 	.byte      3
      000330 54 4D 50               857         .ascii     "TMP"
      000333                        858 TEMP:
      000333 90 AE 00 08      [ 2]  859 	LDW Y,#UTMP
      000337 1D 00 02         [ 2]  860 	SUBW X,#2
      00033A FF               [ 2]  861         LDW (X),Y
      00033B 81               [ 4]  862         RET
                                    863 
                                    864 ;       >IN     ( -- a )
                                    865 ;        Hold parsing pointer.
      00033C 03 2F                  866         .word      LINK
                           00033E   867 LINK = . 
      00033E 03                     868         .byte      3
      00033F 3E 49 4E               869         .ascii    ">IN"
      000342                        870 INN:
      000342 90 AE 00 0A      [ 2]  871 	LDW Y,#UINN 
      000346 1D 00 02         [ 2]  872 	SUBW X,#2
      000349 FF               [ 2]  873         LDW (X),Y
      00034A 81               [ 4]  874         RET
                                    875 
                                    876 ;       #TIB    ( -- a )
                                    877 ;       Count in terminal input buffer.
      00034B 03 3E                  878         .word      LINK
                           00034D   879 LINK = . 
      00034D 04                     880         .byte      4
      00034E 23 54 49 42            881         .ascii     "#TIB"
      000352                        882 NTIB:
      000352 90 AE 00 0C      [ 2]  883 	LDW Y,#UCTIB 
      000356 1D 00 02         [ 2]  884 	SUBW X,#2
      000359 FF               [ 2]  885         LDW (X),Y
      00035A 81               [ 4]  886         RET
                                    887 
                           000001   888 .if PICATOUT_MOD
                                    889 ;       TBUF ( -- a )
                                    890 ;       address of 128 bytes transaction buffer 
      00035B 03 4D                  891         .word LINK 
                           00035D   892         LINK=.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00035D 04                     893         .byte 4 
      00035E 54 42 55 46            894         .ascii "TBUF"
      000362                        895 TBUF:
      000362 90 AE 16 80      [ 2]  896         ldw y,#ROWBUFF
      000366 1D 00 02         [ 2]  897         subw x,#CELLL
      000369 FF               [ 2]  898         ldw (x),y 
      00036A 81               [ 4]  899         ret 
                                    900 
                                    901 
                                    902 .endif ;PICATOUT_MOD
                                    903 
                                    904 ;       "EVAL   ( -- a )
                                    905 ;       Execution vector of EVAL.
      00036B 03 5D                  906         .word      LINK
                           00036D   907 LINK = . 
      00036D 05                     908         .byte      5
      00036E 27 45 56 41 4C         909         .ascii     "'EVAL"
      000373                        910 TEVAL:
      000373 90 AE 00 10      [ 2]  911 	LDW Y,#UINTER 
      000377 1D 00 02         [ 2]  912 	SUBW X,#2
      00037A FF               [ 2]  913         LDW (X),Y
      00037B 81               [ 4]  914         RET
                                    915 
                                    916 ;       HLD     ( -- a )
                                    917 ;       Hold a pointer of output string.
      00037C 03 6D                  918         .word      LINK
                           00037E   919 LINK = . 
      00037E 03                     920         .byte      3
      00037F 48 4C 44               921         .ascii     "HLD"
      000382                        922 HLD:
      000382 90 AE 00 12      [ 2]  923 	LDW Y,#UHLD 
      000386 1D 00 02         [ 2]  924 	SUBW X,#2
      000389 FF               [ 2]  925         LDW (X),Y
      00038A 81               [ 4]  926         RET
                                    927 
                                    928 ;       CONTEXT ( -- a )
                                    929 ;       Start vocabulary search.
      00038B 03 7E                  930         .word      LINK
                           00038D   931 LINK = . 
      00038D 07                     932         .byte      7
      00038E 43 4F 4E 54 45 58 54   933         .ascii     "CONTEXT"
      000395                        934 CNTXT:
      000395 90 AE 00 14      [ 2]  935 	LDW Y,#UCNTXT
      000399 1D 00 02         [ 2]  936 	SUBW X,#2
      00039C FF               [ 2]  937         LDW (X),Y
      00039D 81               [ 4]  938         RET
                                    939 
                                    940 ;       VP      ( -- a )
                                    941 ;       Point to top of variables
      00039E 03 8D                  942         .word      LINK
                           0003A0   943 LINK = . 
      0003A0 02                     944         .byte      2
      0003A1 56 50                  945         .ascii     "VP"
      0003A3                        946 VPP:
      0003A3 90 AE 00 16      [ 2]  947 	LDW Y,#UVP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003A7 1D 00 02         [ 2]  948 	SUBW X,#2
      0003AA FF               [ 2]  949         LDW (X),Y
      0003AB 81               [ 4]  950         RET
                                    951 
                           000001   952 .if PICATOUT_MOD
                                    953 ;       CP    ( -- a )
                                    954 ;       Pointer to top of FLASH 
      0003AC 03 A0                  955         .word LINK 
                           0003AE   956         LINK=.
      0003AE 03                     957         .byte 3 
      0003AF 43 50                  958         .ascii "CP"
      0003B1                        959 CPP: 
      0003B1 90 AE 00 18      [ 2]  960         ldw y,#UCP 
      0003B5 1D 00 02         [ 2]  961         subw x,#CELLL 
      0003B8 FF               [ 2]  962         ldw (x),y 
      0003B9 81               [ 4]  963         ret                
                                    964 .endif ;PICATOUT_MOD
                                    965 
                                    966 ;       LAST    ( -- a )
                                    967 ;       Point to last name in dictionary.
      0003BA 03 AE                  968         .word      LINK
                           0003BC   969 LINK = . 
      0003BC 04                     970         .byte      4
      0003BD 4C 41 53 54            971         .ascii     "LAST"
      0003C1                        972 LAST:
      0003C1 90 AE 00 1A      [ 2]  973 	LDW Y,#ULAST 
      0003C5 1D 00 02         [ 2]  974 	SUBW X,#2
      0003C8 FF               [ 2]  975         LDW (X),Y
      0003C9 81               [ 4]  976         RET
                                    977 
                           000001   978 .if PICATOUT_MOD
      0003CA 03 BC                  979         .word LINK 
                           0003CC   980         LINK=.
      0003CC 06                     981         .byte 6
      0003CD 4F 46 46 53 45 54      982         .ascii "OFFSET" 
      0003D3                        983 OFFSET: 
      0003D3 1D 00 02         [ 2]  984         subw x,#CELLL
      0003D6 90 AE 00 1C      [ 2]  985         ldw y,#UOFFSET 
      0003DA FF               [ 2]  986         ldw (x),y 
      0003DB 81               [ 4]  987         ret 
                                    988 
                                    989 ; adjust jump address adding OFFSET
                                    990 ; ADR-ADJ ( a -- a+offset )
      0003DC                        991 ADRADJ: 
      0003DC CD 03 D3         [ 4]  992         call OFFSET 
      0003DF CD 01 C0         [ 4]  993         call AT 
      0003E2 CC 04 3D         [ 2]  994         jp PLUS 
                                    995 
                                    996 .endif ; PICATOUT_MOD
                                    997 
                                    998 ;; Common functions
                                    999 
                                   1000 ;       ?DUP    ( w -- w w | 0 )
                                   1001 ;       Dup tos if its is not zero.
      0003E5 03 CC                 1002         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           0003E7  1003 LINK = . 
      0003E7 04                    1004         .byte      4
      0003E8 3F 44 55 50           1005         .ascii     "?DUP"
      0003EC                       1006 QDUP:
      0003EC 90 93            [ 1] 1007         LDW Y,X
      0003EE 90 FE            [ 2] 1008 	LDW Y,(Y)
      0003F0 27 04            [ 1] 1009         JREQ     QDUP1
      0003F2 1D 00 02         [ 2] 1010 	SUBW X,#2
      0003F5 FF               [ 2] 1011         LDW (X),Y
      0003F6 81               [ 4] 1012 QDUP1:  RET
                                   1013 
                                   1014 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1015 ;       Rot 3rd item to top.
      0003F7 03 E7                 1016         .word      LINK
                           0003F9  1017 LINK = . 
      0003F9 03                    1018         .byte      3
      0003FA 52 4F 54              1019         .ascii     "ROT"
      0003FD                       1020 ROT:
                           000001  1021 .if PICATOUT_MOD
      0003FD 90 93            [ 1] 1022         ldw y,x 
      0003FF 90 FE            [ 2] 1023         ldw y,(y)
      000401 90 89            [ 2] 1024         pushw y 
      000403 90 93            [ 1] 1025         ldw y,x 
      000405 90 EE 04         [ 2] 1026         ldw y,(4,y)
      000408 FF               [ 2] 1027         ldw (x),y 
      000409 90 93            [ 1] 1028         ldw y,x 
      00040B 90 EE 02         [ 2] 1029         ldw y,(2,y)
      00040E EF 04            [ 2] 1030         ldw (4,x),y 
      000410 90 85            [ 2] 1031         popw y 
      000412 EF 02            [ 2] 1032         ldw (2,x),y
      000414 81               [ 4] 1033         ret 
                           000000  1034 .else 
                                   1035         LDW Y,X
                                   1036 	LDW Y,(4,Y)
                                   1037 	LDW YTEMP,Y
                                   1038         LDW Y,X
                                   1039         LDW Y,(2,Y)
                                   1040         LDW XTEMP,Y
                                   1041         LDW Y,X
                                   1042         LDW Y,(Y)
                                   1043         LDW (2,X),Y
                                   1044         LDW Y,XTEMP
                                   1045         LDW (4,X),Y
                                   1046         LDW Y,YTEMP
                                   1047         LDW (X),Y
                                   1048         RET
                                   1049 .endif 
                                   1050 
                                   1051 ;       2DROP   ( w w -- )
                                   1052 ;       Discard two items on stack.
      000415 03 F9                 1053         .word      LINK
                           000417  1054 LINK = . 
      000417 05                    1055         .byte      5
      000418 32 44 52 4F 50        1056         .ascii     "2DROP"
      00041D                       1057 DDROP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00041D 1C 00 04         [ 2] 1058         ADDW X,#4
      000420 81               [ 4] 1059         RET
                                   1060 
                                   1061 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1062 ;       Duplicate top two items.
      000421 04 17                 1063         .word      LINK
                           000423  1064 LINK = . 
      000423 04                    1065         .byte      4
      000424 32 44 55 50           1066         .ascii     "2DUP"
      000428                       1067 DDUP:
      000428 1D 00 04         [ 2] 1068         SUBW X,#4
      00042B 90 93            [ 1] 1069         LDW Y,X
      00042D 90 EE 06         [ 2] 1070         LDW Y,(6,Y)
      000430 EF 02            [ 2] 1071         LDW (2,X),Y
      000432 90 93            [ 1] 1072         LDW Y,X
      000434 90 EE 04         [ 2] 1073         LDW Y,(4,Y)
      000437 FF               [ 2] 1074         LDW (X),Y
      000438 81               [ 4] 1075         RET
                                   1076 
                                   1077 ;       +       ( w w -- sum )
                                   1078 ;       Add top two items.
      000439 04 23                 1079         .word      LINK
                           00043B  1080 LINK = . 
      00043B 01                    1081         .byte      1
      00043C 2B                    1082         .ascii     "+"
      00043D                       1083 PLUS:
      00043D 90 93            [ 1] 1084         LDW Y,X
      00043F 90 FE            [ 2] 1085         LDW Y,(Y)
      000441 90 BF 20         [ 2] 1086         LDW YTEMP,Y
      000444 1C 00 02         [ 2] 1087         ADDW X,#2
      000447 90 93            [ 1] 1088         LDW Y,X
      000449 90 FE            [ 2] 1089         LDW Y,(Y)
      00044B 72 B9 00 20      [ 2] 1090         ADDW Y,YTEMP
      00044F FF               [ 2] 1091         LDW (X),Y
      000450 81               [ 4] 1092         RET
                                   1093 
                                   1094 ;       NOT     ( w -- w )
                                   1095 ;       One's complement of tos.
      000451 04 3B                 1096         .word      LINK
                           000453  1097 LINK = . 
      000453 03                    1098         .byte      3
      000454 4E 4F 54              1099         .ascii     "NOT"
      000457                       1100 INVER:
      000457 90 93            [ 1] 1101         LDW Y,X
      000459 90 FE            [ 2] 1102         LDW Y,(Y)
      00045B 90 53            [ 2] 1103         CPLW Y
      00045D FF               [ 2] 1104         LDW (X),Y
      00045E 81               [ 4] 1105         RET
                                   1106 
                                   1107 ;       NEGATE  ( n -- -n )
                                   1108 ;       Two's complement of tos.
      00045F 04 53                 1109         .word      LINK
                           000461  1110 LINK = . 
      000461 06                    1111         .byte      6
      000462 4E 45 47 41 54 45     1112         .ascii     "NEGATE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000468                       1113 NEGAT:
      000468 90 93            [ 1] 1114         LDW Y,X
      00046A 90 FE            [ 2] 1115         LDW Y,(Y)
      00046C 90 50            [ 2] 1116         NEGW Y
      00046E FF               [ 2] 1117         LDW (X),Y
      00046F 81               [ 4] 1118         RET
                                   1119 
                                   1120 ;       DNEGATE ( d -- -d )
                                   1121 ;       Two's complement of top double.
      000470 04 61                 1122         .word      LINK
                           000472  1123 LINK = . 
      000472 07                    1124         .byte      7
      000473 44 4E 45 47 41 54 45  1125         .ascii     "DNEGATE"
      00047A                       1126 DNEGA:
      00047A 90 93            [ 1] 1127         LDW Y,X
      00047C 90 FE            [ 2] 1128 	LDW Y,(Y)
      00047E 90 53            [ 2] 1129         CPLW Y     
      000480 90 BF 20         [ 2] 1130 	LDW YTEMP,Y
      000483 90 93            [ 1] 1131         LDW Y,X
      000485 90 EE 02         [ 2] 1132         LDW Y,(2,Y)
      000488 90 53            [ 2] 1133         CPLW Y
      00048A 90 5C            [ 2] 1134         INCW Y
      00048C EF 02            [ 2] 1135         LDW (2,X),Y
      00048E 90 BE 20         [ 2] 1136         LDW Y,YTEMP
      000491 24 02            [ 1] 1137         JRNC DN1 
      000493 90 5C            [ 2] 1138         INCW Y
      000495 FF               [ 2] 1139 DN1:    LDW (X),Y
      000496 81               [ 4] 1140         RET
                                   1141 
                                   1142 ;       -       ( n1 n2 -- n1-n2 )
                                   1143 ;       Subtraction.
      000497 04 72                 1144         .word      LINK
                           000499  1145 LINK = . 
      000499 01                    1146         .byte      1
      00049A 2D                    1147         .ascii     "-"
      00049B                       1148 SUBB:
      00049B 90 93            [ 1] 1149         LDW Y,X
      00049D 90 FE            [ 2] 1150         LDW Y,(Y)
      00049F 90 BF 20         [ 2] 1151         LDW YTEMP,Y
      0004A2 1C 00 02         [ 2] 1152         ADDW X,#2
      0004A5 90 93            [ 1] 1153         LDW Y,X
      0004A7 90 FE            [ 2] 1154         LDW Y,(Y)
      0004A9 72 B2 00 20      [ 2] 1155         SUBW Y,YTEMP
      0004AD FF               [ 2] 1156         LDW (X),Y
      0004AE 81               [ 4] 1157         RET
                                   1158 
                                   1159 ;       ABS     ( n -- n )
                                   1160 ;       Return  absolute value of n.
      0004AF 04 99                 1161         .word      LINK
                           0004B1  1162 LINK = . 
      0004B1 03                    1163         .byte      3
      0004B2 41 42 53              1164         .ascii     "ABS"
      0004B5                       1165 ABSS:
      0004B5 90 93            [ 1] 1166         LDW Y,X
      0004B7 90 FE            [ 2] 1167 	LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004B9 2A 03            [ 1] 1168         JRPL     AB1     ;negate:
      0004BB 90 50            [ 2] 1169         NEGW     Y     ;else negate hi byte
      0004BD FF               [ 2] 1170         LDW (X),Y
      0004BE 81               [ 4] 1171 AB1:    RET
                                   1172 
                                   1173 ;       =       ( w w -- t )
                                   1174 ;       Return true if top two are =al.
      0004BF 04 B1                 1175         .word      LINK
                           0004C1  1176 LINK = . 
      0004C1 01                    1177         .byte      1
      0004C2 3D                    1178         .ascii     "="
      0004C3                       1179 EQUAL:
      0004C3 A6 FF            [ 1] 1180         LD A,#0xFF  ;true
      0004C5 90 93            [ 1] 1181         LDW Y,X    ;D = n2
      0004C7 90 FE            [ 2] 1182         LDW Y,(Y)
      0004C9 90 BF 20         [ 2] 1183         LDW YTEMP,Y
      0004CC 1C 00 02         [ 2] 1184         ADDW X,#2
      0004CF 90 93            [ 1] 1185         LDW Y,X
      0004D1 90 FE            [ 2] 1186         LDW Y,(Y)
      0004D3 90 B3 20         [ 2] 1187         CPW Y,YTEMP     ;if n2 <> n1
      0004D6 27 01            [ 1] 1188         JREQ     EQ1
      0004D8 4F               [ 1] 1189         CLR A
      0004D9 F7               [ 1] 1190 EQ1:    LD (X),A
      0004DA E7 01            [ 1] 1191         LD (1,X),A
      0004DC 81               [ 4] 1192 	RET     
                                   1193 
                                   1194 ;       U<      ( u u -- t )
                                   1195 ;       Unsigned compare of top two items.
      0004DD 04 C1                 1196         .word      LINK
                           0004DF  1197 LINK = . 
      0004DF 02                    1198         .byte      2
      0004E0 55 3C                 1199         .ascii     "U<"
      0004E2                       1200 ULESS:
      0004E2 A6 FF            [ 1] 1201         LD A,#0xFF  ;true
      0004E4 90 93            [ 1] 1202         LDW Y,X    ;D = n2
      0004E6 90 FE            [ 2] 1203         LDW Y,(Y)
      0004E8 90 BF 20         [ 2] 1204         LDW YTEMP,Y
      0004EB 1C 00 02         [ 2] 1205         ADDW X,#2
      0004EE 90 93            [ 1] 1206         LDW Y,X
      0004F0 90 FE            [ 2] 1207         LDW Y,(Y)
      0004F2 90 B3 20         [ 2] 1208         CPW Y,YTEMP     ;if n2 <> n1
      0004F5 25 01            [ 1] 1209         JRULT     ULES1
      0004F7 4F               [ 1] 1210         CLR A
      0004F8 F7               [ 1] 1211 ULES1:  LD (X),A
      0004F9 E7 01            [ 1] 1212         LD (1,X),A
      0004FB 81               [ 4] 1213 	RET     
                                   1214 
                                   1215 ;       <       ( n1 n2 -- t )
                                   1216 ;       Signed compare of top two items.
      0004FC 04 DF                 1217         .word      LINK
                           0004FE  1218 LINK = . 
      0004FE 01                    1219         .byte      1
      0004FF 3C                    1220         .ascii     "<"
      000500                       1221 LESS:
      000500 A6 FF            [ 1] 1222         LD A,#0xFF  ;true
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000502 90 93            [ 1] 1223         LDW Y,X    ;D = n2
      000504 90 FE            [ 2] 1224         LDW Y,(Y)
      000506 90 BF 20         [ 2] 1225         LDW YTEMP,Y
      000509 1C 00 02         [ 2] 1226         ADDW X,#2
      00050C 90 93            [ 1] 1227         LDW Y,X
      00050E 90 FE            [ 2] 1228         LDW Y,(Y)
      000510 90 B3 20         [ 2] 1229         CPW Y,YTEMP     ;if n2 <> n1
      000513 2F 01            [ 1] 1230         JRSLT     LT1
      000515 4F               [ 1] 1231         CLR A
      000516 F7               [ 1] 1232 LT1:    LD (X),A
      000517 E7 01            [ 1] 1233         LD (1,X),A
      000519 81               [ 4] 1234 	RET     
                                   1235 
                                   1236 ;       MAX     ( n n -- n )
                                   1237 ;       Return greater of two top items.
      00051A 04 FE                 1238         .word      LINK
                           00051C  1239 LINK = . 
      00051C 03                    1240         .byte      3
      00051D 4D 41 58              1241         .ascii     "MAX"
      000520                       1242 MAX:
      000520 90 93            [ 1] 1243         LDW Y,X    ;D = n2
      000522 90 EE 02         [ 2] 1244         LDW Y,(2,Y)
      000525 90 BF 20         [ 2] 1245         LDW YTEMP,Y
      000528 90 93            [ 1] 1246         LDW Y,X
      00052A 90 FE            [ 2] 1247         LDW Y,(Y)
      00052C 90 B3 20         [ 2] 1248         CPW Y,YTEMP     ;if n2 <> n1
      00052F 2F 02            [ 1] 1249         JRSLT     MAX1
      000531 EF 02            [ 2] 1250         LDW (2,X),Y
      000533 1C 00 02         [ 2] 1251 MAX1:   ADDW X,#2
      000536 81               [ 4] 1252 	RET     
                                   1253 
                                   1254 ;       MIN     ( n n -- n )
                                   1255 ;       Return smaller of top two items.
      000537 05 1C                 1256         .word      LINK
                           000539  1257 LINK = . 
      000539 03                    1258         .byte      3
      00053A 4D 49 4E              1259         .ascii     "MIN"
      00053D                       1260 MIN:
      00053D 90 93            [ 1] 1261         LDW Y,X    ;D = n2
      00053F 90 EE 02         [ 2] 1262         LDW Y,(2,Y)
      000542 90 BF 20         [ 2] 1263         LDW YTEMP,Y
      000545 90 93            [ 1] 1264         LDW Y,X
      000547 90 FE            [ 2] 1265         LDW Y,(Y)
      000549 90 B3 20         [ 2] 1266         CPW Y,YTEMP     ;if n2 <> n1
      00054C 2C 02            [ 1] 1267         JRSGT     MIN1
      00054E EF 02            [ 2] 1268         LDW (2,X),Y
      000550 1C 00 02         [ 2] 1269 MIN1:	ADDW X,#2
      000553 81               [ 4] 1270 	RET     
                                   1271 
                                   1272 ;       WITHIN  ( u ul uh -- t )
                                   1273 ;       Return true if u is within
                                   1274 ;       range of ul and uh. ( ul <= u < uh )
      000554 05 39                 1275         .word      LINK
                           000556  1276 LINK = . 
      000556 06                    1277         .byte      6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000557 57 49 54 48 49 4E     1278         .ascii     "WITHIN"
      00055D                       1279 WITHI:
      00055D CD 02 91         [ 4] 1280         CALL     OVER
      000560 CD 04 9B         [ 4] 1281         CALL     SUBB
      000563 CD 02 30         [ 4] 1282         CALL     TOR
      000566 CD 04 9B         [ 4] 1283         CALL     SUBB
      000569 CD 02 11         [ 4] 1284         CALL     RFROM
      00056C CC 04 E2         [ 2] 1285         JP     ULESS
                                   1286 
                                   1287 ;; Divide
                                   1288 
                                   1289 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1290 ;       Unsigned divide of a double by a
                                   1291 ;       single. Return mod and quotient.
      00056F 05 56                 1292         .word      LINK
                           000571  1293 LINK = . 
      000571 06                    1294         .byte      6
      000572 55 4D 2F 4D 4F 44     1295         .ascii     "UM/MOD"
      000578                       1296 UMMOD:
      000578 BF 1E            [ 2] 1297 	LDW XTEMP,X	; save stack pointer
      00057A FE               [ 2] 1298 	LDW X,(X)	; un
      00057B BF 20            [ 2] 1299 	LDW YTEMP,X     ; save un
      00057D 90 BE 1E         [ 2] 1300 	LDW Y,XTEMP	; stack pointer
      000580 90 EE 04         [ 2] 1301 	LDW Y,(4,Y)     ; Y=udl
      000583 BE 1E            [ 2] 1302 	LDW X,XTEMP
      000585 EE 02            [ 2] 1303 	LDW X,(2,X)	; X=udh
      000587 B3 20            [ 2] 1304 	CPW X,YTEMP
      000589 23 0F            [ 2] 1305 	JRULE MMSM1
      00058B BE 1E            [ 2] 1306 	LDW X,XTEMP
      00058D 1C 00 02         [ 2] 1307 	ADDW X,#2	; pop off 1 level
      000590 90 AE FF FF      [ 2] 1308 	LDW Y,#0xFFFF
      000594 FF               [ 2] 1309 	LDW (X),Y
      000595 90 5F            [ 1] 1310 	CLRW Y
      000597 EF 02            [ 2] 1311 	LDW (2,X),Y
      000599 81               [ 4] 1312 	RET
      00059A                       1313 MMSM1:
                           000001  1314 .if  PICATOUT_MOD 
                                   1315 ; take advantage of divw x,y when udh==0
      00059A 5D               [ 2] 1316         tnzw x  ; is udh==0?
      00059B 26 11            [ 1] 1317         jrne MMSM2 
      00059D 93               [ 1] 1318         ldw x,y    ;udl 
      00059E 90 BE 20         [ 2] 1319         ldw y,YTEMP ; divisor 
      0005A1 65               [ 2] 1320         divw x,y 
      0005A2 89               [ 2] 1321         pushw x     ; quotient 
      0005A3 BE 1E            [ 2] 1322         ldw x,XTEMP 
      0005A5 1C 00 02         [ 2] 1323         addw x,#CELLL 
      0005A8 EF 02            [ 2] 1324         ldw (2,x),y  ; ur
      0005AA 90 85            [ 2] 1325         popw y 
      0005AC FF               [ 2] 1326         ldw (x),y ; uq 
      0005AD 81               [ 4] 1327         ret 
      0005AE                       1328 MMSM2:        
                                   1329 .endif 
      0005AE A6 11            [ 1] 1330 	LD A,#17	; loop count
      0005B0                       1331 MMSM3:
      0005B0 B3 20            [ 2] 1332 	CPW X,YTEMP	; compare udh to un
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      0005B2 25 04            [ 1] 1333 	JRULT MMSM4	; can't subtract
      0005B4 72 B0 00 20      [ 2] 1334 	SUBW X,YTEMP	; can subtract
      0005B8                       1335 MMSM4:
      0005B8 8C               [ 1] 1336 	CCF	; quotient bit
      0005B9 90 59            [ 2] 1337 	RLCW Y	; rotate into quotient
      0005BB 59               [ 2] 1338 	RLCW X	; rotate into remainder
      0005BC 4A               [ 1] 1339 	DEC A	; repeat
      0005BD 22 F1            [ 1] 1340 	JRUGT MMSM3
      0005BF 57               [ 2] 1341 	SRAW X
      0005C0 BF 20            [ 2] 1342 	LDW YTEMP,X	; done, save remainder
      0005C2 BE 1E            [ 2] 1343 	LDW X,XTEMP
      0005C4 1C 00 02         [ 2] 1344 	ADDW X,#2	; drop
      0005C7 FF               [ 2] 1345 	LDW (X),Y
      0005C8 90 BE 20         [ 2] 1346 	LDW Y,YTEMP	; save quotient
      0005CB EF 02            [ 2] 1347 	LDW (2,X),Y
      0005CD 81               [ 4] 1348 	RET
                                   1349 	
                                   1350 ;       M/MOD   ( d n -- r q )
                                   1351 ;       Signed floored divide of double by
                                   1352 ;       single. Return mod and quotient.
      0005CE 05 71                 1353         .word      LINK
                           0005D0  1354 LINK = . 
      0005D0 05                    1355         .byte      5
      0005D1 4D 2F 4D 4F 44        1356         .ascii     "M/MOD"
      0005D6                       1357 MSMOD:  
      0005D6 CD 02 67         [ 4] 1358         CALL	DUPP
      0005D9 CD 02 A0         [ 4] 1359         CALL	ZLESS
      0005DC CD 02 67         [ 4] 1360         CALL	DUPP
      0005DF CD 02 30         [ 4] 1361         CALL	TOR
      0005E2 CD 01 6B         [ 4] 1362         CALL	QBRAN
      0005E5 05 F3                 1363         .word	MMOD1
      0005E7 CD 04 68         [ 4] 1364         CALL	NEGAT
      0005EA CD 02 30         [ 4] 1365         CALL	TOR
      0005ED CD 04 7A         [ 4] 1366         CALL	DNEGA
      0005F0 CD 02 11         [ 4] 1367         CALL	RFROM
      0005F3 CD 02 30         [ 4] 1368 MMOD1:	CALL	TOR
      0005F6 CD 02 67         [ 4] 1369         CALL	DUPP
      0005F9 CD 02 A0         [ 4] 1370         CALL	ZLESS
      0005FC CD 01 6B         [ 4] 1371         CALL	QBRAN
      0005FF 06 07                 1372         .word	MMOD2
      000601 CD 02 24         [ 4] 1373         CALL	RAT
      000604 CD 04 3D         [ 4] 1374         CALL	PLUS
      000607 CD 02 11         [ 4] 1375 MMOD2:	CALL	RFROM
      00060A CD 05 78         [ 4] 1376         CALL	UMMOD
      00060D CD 02 11         [ 4] 1377         CALL	RFROM
      000610 CD 01 6B         [ 4] 1378         CALL	QBRAN
      000613 06 1E                 1379         .word	MMOD3
      000615 CD 02 77         [ 4] 1380         CALL	SWAPP
      000618 CD 04 68         [ 4] 1381         CALL	NEGAT
      00061B CD 02 77         [ 4] 1382         CALL	SWAPP
      00061E 81               [ 4] 1383 MMOD3:	RET
                                   1384 
                                   1385 ;       /MOD    ( n n -- r q )
                                   1386 ;       Signed divide. Return mod and quotient.
      00061F 05 D0                 1387         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                           000621  1388 LINK = . 
      000621 04                    1389         .byte      4
      000622 2F 4D 4F 44           1390         .ascii     "/MOD"
      000626                       1391 SLMOD:
      000626 CD 02 91         [ 4] 1392         CALL	OVER
      000629 CD 02 A0         [ 4] 1393         CALL	ZLESS
      00062C CD 02 77         [ 4] 1394         CALL	SWAPP
      00062F CC 05 D6         [ 2] 1395         JP	MSMOD
                                   1396 
                                   1397 ;       MOD     ( n n -- r )
                                   1398 ;       Signed divide. Return mod only.
      000632 06 21                 1399         .word      LINK
                           000634  1400 LINK = . 
      000634 03                    1401         .byte      3
      000635 4D 4F 44              1402         .ascii     "MOD"
      000638                       1403 MODD:
      000638 CD 06 26         [ 4] 1404 	CALL	SLMOD
      00063B CC 02 5D         [ 2] 1405 	JP	DROP
                                   1406 
                                   1407 ;       /       ( n n -- q )
                                   1408 ;       Signed divide. Return quotient only.
      00063E 06 34                 1409         .word      LINK
                           000640  1410 LINK = . 
      000640 01                    1411         .byte      1
      000641 2F                    1412         .ascii     "/"
      000642                       1413 SLASH:
      000642 CD 06 26         [ 4] 1414         CALL	SLMOD
      000645 CD 02 77         [ 4] 1415         CALL	SWAPP
      000648 CC 02 5D         [ 2] 1416         JP	DROP
                                   1417 
                                   1418 ;; Multiply
                                   1419 
                                   1420 ;       UM*     ( u u -- ud )
                                   1421 ;       Unsigned multiply. Return double product.
      00064B 06 40                 1422         .word      LINK
                           00064D  1423 LINK = . 
      00064D 03                    1424         .byte      3
      00064E 55 4D 2A              1425         .ascii     "UM*"
      000651                       1426 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1427 .if PICATOUT_MOD 
                                   1428 ; take advantage of SP addressing modes
                                   1429 ; these PRODx in RAM are not required
                                   1430 ; the product is kept on stack as local variable 
                                   1431         ;; bytes offset on data stack 
                           000002  1432         da=2 
                           000003  1433         db=3 
                           000000  1434         dc=0 
                           000001  1435         dd=1 
                                   1436         ;; product bytes offset on return stack 
                           000001  1437         UD1=1  ; ud bits 31..24
                           000002  1438         UD2=2  ; ud bits 23..16
                           000003  1439         UD3=3  ; ud bits 15..8 
                           000004  1440         UD4=4  ; ud bits 7..0 
                                   1441         ;; local variable for product set to zero   
      000651 90 5F            [ 1] 1442         clrw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000653 90 89            [ 2] 1443         pushw y  ; bits 15..0
      000655 90 89            [ 2] 1444         pushw y  ; bits 31..16 
      000657 E6 03            [ 1] 1445         ld a,(db,x) ; b 
      000659 90 97            [ 1] 1446         ld yl,a 
      00065B E6 01            [ 1] 1447         ld a,(dd,x)   ; d
      00065D 90 42            [ 4] 1448         mul y,a    ; b*d  
      00065F 17 03            [ 2] 1449         ldw (UD3,sp),y ; lowest weight product 
      000661 E6 03            [ 1] 1450         ld a,(db,x)
      000663 90 97            [ 1] 1451         ld yl,a 
      000665 E6 00            [ 1] 1452         ld a,(dc,x)
      000667 90 42            [ 4] 1453         mul y,a  ; b*c 
                                   1454         ;;; do the partial sum 
      000669 72 F9 02         [ 2] 1455         addw y,(UD2,sp)
      00066C 4F               [ 1] 1456         clr a 
      00066D 49               [ 1] 1457         rlc a
      00066E 6B 01            [ 1] 1458         ld (UD1,sp),a 
      000670 17 02            [ 2] 1459         ldw (UD2,sp),y 
      000672 E6 02            [ 1] 1460         ld a,(da,x)
      000674 90 97            [ 1] 1461         ld yl,a 
      000676 E6 01            [ 1] 1462         ld a,(dd,x)
      000678 90 42            [ 4] 1463         mul y,a   ; a*d 
                                   1464         ;; do partial sum 
      00067A 72 F9 02         [ 2] 1465         addw y,(UD2,sp)
      00067D 4F               [ 1] 1466         clr a 
      00067E 19 01            [ 1] 1467         adc a,(UD1,sp)
      000680 6B 01            [ 1] 1468         ld (UD1,sp),a  
      000682 17 02            [ 2] 1469         ldw (UD2,sp),y 
      000684 E6 02            [ 1] 1470         ld a,(da,x)
      000686 90 97            [ 1] 1471         ld yl,a 
      000688 E6 00            [ 1] 1472         ld a,(dc,x)
      00068A 90 42            [ 4] 1473         mul y,a  ;  a*c highest weight product 
                                   1474         ;;; do partial sum 
      00068C 72 F9 01         [ 2] 1475         addw y,(UD1,sp)
      00068F FF               [ 2] 1476         ldw (x),y  ; udh 
      000690 16 03            [ 2] 1477         ldw y,(UD3,sp)
      000692 EF 02            [ 2] 1478         ldw (2,x),y  ; udl  
      000694 5B 04            [ 2] 1479         addw sp,#4 ; drop local variable 
      000696 81               [ 4] 1480         ret  
                           000000  1481 .else
                                   1482 	LD A,(2,X)	; b
                                   1483 	LD YL,A
                                   1484 	LD A,(X)	; d
                                   1485 	MUL Y,A
                                   1486 	LDW PROD1,Y
                                   1487 	LD A,(3,X)	; a
                                   1488 	LD YL,A
                                   1489 	LD A,(X)	; d
                                   1490 	MUL Y,A
                                   1491 	LDW PROD2,Y
                                   1492 	LD A,(2,X)	; b
                                   1493 	LD YL,A
                                   1494 	LD A,(1,X)	; c
                                   1495 	MUL Y,A
                                   1496 	LDW PROD3,Y
                                   1497 	LD A,(3,X)	; a
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1498 	LD YL,A
                                   1499 	LD A,(1,X)	; c
                                   1500 	MUL Y,A	; least signifiant product
                                   1501 	CLR A
                                   1502 	RRWA Y
                                   1503 	LD (3,X),A	; store least significant byte
                                   1504 	ADDW Y,PROD3
                                   1505 	CLR A
                                   1506 	ADC A,#0	; save carry
                                   1507 	LD CARRY,A
                                   1508 	ADDW Y,PROD2
                                   1509 	LD A,CARRY
                                   1510 	ADC A,#0	; add 2nd carry
                                   1511 	LD CARRY,A
                                   1512 	CLR A
                                   1513 	RRWA Y
                                   1514 	LD (2,X),A	; 2nd product byte
                                   1515 	ADDW Y,PROD1
                                   1516 	RRWA Y
                                   1517 	LD (1,X),A	; 3rd product byte
                                   1518 	RRWA Y  	; 4th product byte now in A
                                   1519 	ADC A,CARRY	; fill in carry bits
                                   1520 	LD (X),A
                                   1521 	RET
                                   1522 .endif 
                                   1523 
                                   1524 
                                   1525 ;       *       ( n n -- n )
                                   1526 ;       Signed multiply. Return single product.
      000697 06 4D                 1527         .word      LINK
                           000699  1528 LINK = . 
      000699 01                    1529         .byte      1
      00069A 2A                    1530         .ascii     "*"
      00069B                       1531 STAR:
      00069B CD 06 51         [ 4] 1532 	CALL	UMSTA
      00069E CC 02 5D         [ 2] 1533 	JP	DROP
                                   1534 
                                   1535 ;       M*      ( n n -- d )
                                   1536 ;       Signed multiply. Return double product.
      0006A1 06 99                 1537         .word      LINK
                           0006A3  1538 LINK = . 
      0006A3 02                    1539         .byte      2
      0006A4 4D 2A                 1540         .ascii     "M*"
      0006A6                       1541 MSTAR:      
      0006A6 CD 04 28         [ 4] 1542         CALL	DDUP
      0006A9 CD 02 DC         [ 4] 1543         CALL	XORR
      0006AC CD 02 A0         [ 4] 1544         CALL	ZLESS
      0006AF CD 02 30         [ 4] 1545         CALL	TOR
      0006B2 CD 04 B5         [ 4] 1546         CALL	ABSS
      0006B5 CD 02 77         [ 4] 1547         CALL	SWAPP
      0006B8 CD 04 B5         [ 4] 1548         CALL	ABSS
      0006BB CD 06 51         [ 4] 1549         CALL	UMSTA
      0006BE CD 02 11         [ 4] 1550         CALL	RFROM
      0006C1 CD 01 6B         [ 4] 1551         CALL	QBRAN
      0006C4 06 C9                 1552         .word	MSTA1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006C6 CD 04 7A         [ 4] 1553         CALL	DNEGA
      0006C9 81               [ 4] 1554 MSTA1:	RET
                                   1555 
                                   1556 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1557 ;       Multiply n1 and n2, then divide
                                   1558 ;       by n3. Return mod and quotient.
      0006CA 06 A3                 1559         .word      LINK
                           0006CC  1560 LINK = . 
      0006CC 05                    1561         .byte      5
      0006CD 2A 2F 4D 4F 44        1562         .ascii     "*/MOD"
      0006D2                       1563 SSMOD:
      0006D2 CD 02 30         [ 4] 1564         CALL     TOR
      0006D5 CD 06 A6         [ 4] 1565         CALL     MSTAR
      0006D8 CD 02 11         [ 4] 1566         CALL     RFROM
      0006DB CC 05 D6         [ 2] 1567         JP     MSMOD
                                   1568 
                                   1569 ;       */      ( n1 n2 n3 -- q )
                                   1570 ;       Multiply n1 by n2, then divide
                                   1571 ;       by n3. Return quotient only.
      0006DE 06 CC                 1572         .word      LINK
                           0006E0  1573 LINK = . 
      0006E0 02                    1574         .byte      2
      0006E1 2A 2F                 1575         .ascii     "*/"
      0006E3                       1576 STASL:
      0006E3 CD 06 D2         [ 4] 1577         CALL	SSMOD
      0006E6 CD 02 77         [ 4] 1578         CALL	SWAPP
      0006E9 CC 02 5D         [ 2] 1579         JP	DROP
                                   1580 
                                   1581 ;; Miscellaneous
                                   1582 
                                   1583 ;       CELL+   ( a -- a )
                                   1584 ;       Add cell size in byte to address.
      0006EC 06 E0                 1585         .word      LINK
                           0006EE  1586 LINK = . 
      0006EE 02                    1587         .byte       2
      0006EF 32 2B                 1588         .ascii     "2+"
      0006F1                       1589 CELLP:
      0006F1 90 93            [ 1] 1590         LDW Y,X
      0006F3 90 FE            [ 2] 1591 	LDW Y,(Y)
      0006F5 72 A9 00 02      [ 2] 1592         ADDW Y,#CELLL 
      0006F9 FF               [ 2] 1593         LDW (X),Y
      0006FA 81               [ 4] 1594         RET
                                   1595 
                                   1596 ;       CELL-   ( a -- a )
                                   1597 ;       Subtract 2 from address.
      0006FB 06 EE                 1598         .word      LINK
                           0006FD  1599 LINK = . 
      0006FD 02                    1600         .byte       2
      0006FE 32 2D                 1601         .ascii     "2-"
      000700                       1602 CELLM:
      000700 90 93            [ 1] 1603         LDW Y,X
      000702 90 FE            [ 2] 1604 	LDW Y,(Y)
      000704 72 A2 00 02      [ 2] 1605         SUBW Y,#CELLL
      000708 FF               [ 2] 1606         LDW (X),Y
      000709 81               [ 4] 1607         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1608 
                                   1609 ;       CELLS   ( n -- n )
                                   1610 ;       Multiply tos by 2.
      00070A 06 FD                 1611         .word      LINK
                           00070C  1612 LINK = . 
      00070C 02                    1613         .byte       2
      00070D 32 2A                 1614         .ascii     "2*"
      00070F                       1615 CELLS:
      00070F 90 93            [ 1] 1616         LDW Y,X
      000711 90 FE            [ 2] 1617 	LDW Y,(Y)
      000713 90 58            [ 2] 1618         SLAW Y
      000715 FF               [ 2] 1619         LDW (X),Y
      000716 81               [ 4] 1620         RET
                                   1621 
                                   1622 ;       1+      ( a -- a )
                                   1623 ;       Add cell size in byte to address.
      000717 07 0C                 1624         .word      LINK
                           000719  1625 LINK = . 
      000719 02                    1626         .byte      2
      00071A 31 2B                 1627         .ascii     "1+"
      00071C                       1628 ONEP:
      00071C 90 93            [ 1] 1629         LDW Y,X
      00071E 90 FE            [ 2] 1630 	LDW Y,(Y)
      000720 90 5C            [ 2] 1631         INCW Y
      000722 FF               [ 2] 1632         LDW (X),Y
      000723 81               [ 4] 1633         RET
                                   1634 
                                   1635 ;       1-      ( a -- a )
                                   1636 ;       Subtract 2 from address.
      000724 07 19                 1637         .word      LINK
                           000726  1638 LINK = . 
      000726 02                    1639         .byte      2
      000727 31 2D                 1640         .ascii     "1-"
      000729                       1641 ONEM:
      000729 90 93            [ 1] 1642         LDW Y,X
      00072B 90 FE            [ 2] 1643 	LDW Y,(Y)
      00072D 90 5A            [ 2] 1644         DECW Y
      00072F FF               [ 2] 1645         LDW (X),Y
      000730 81               [ 4] 1646         RET
                                   1647 
                                   1648 ;       2/      ( n -- n )
                                   1649 ;       Multiply tos by 2.
      000731 07 26                 1650         .word      LINK
                           000733  1651 LINK = . 
      000733 02                    1652         .byte      2
      000734 32 2F                 1653         .ascii     "2/"
      000736                       1654 TWOSL:
      000736 90 93            [ 1] 1655         LDW Y,X
      000738 90 FE            [ 2] 1656 	LDW Y,(Y)
      00073A 90 57            [ 2] 1657         SRAW Y
      00073C FF               [ 2] 1658         LDW (X),Y
      00073D 81               [ 4] 1659         RET
                                   1660 
                                   1661 ;       BL      ( -- 32 )
                                   1662 ;       Return 32,  blank character.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00073E 07 33                 1663         .word      LINK
                           000740  1664 LINK = . 
      000740 02                    1665         .byte      2
      000741 42 4C                 1666         .ascii     "BL"
      000743                       1667 BLANK:
      000743 1D 00 02         [ 2] 1668         SUBW X,#2
      000746 90 AE 00 20      [ 2] 1669 	LDW Y,#32
      00074A FF               [ 2] 1670         LDW (X),Y
      00074B 81               [ 4] 1671         RET
                                   1672 
                                   1673 ;         0     ( -- 0)
                                   1674 ;         Return 0.
      00074C 07 40                 1675         .word      LINK
                           00074E  1676 LINK = . 
      00074E 01                    1677         .byte       1
      00074F 30                    1678         .ascii     "0"
      000750                       1679 ZERO:
      000750 1D 00 02         [ 2] 1680         SUBW X,#2
      000753 90 5F            [ 1] 1681 	CLRW Y
      000755 FF               [ 2] 1682         LDW (X),Y
      000756 81               [ 4] 1683         RET
                                   1684 
                                   1685 ;         1     ( -- 1)
                                   1686 ;         Return 1.
      000757 07 4E                 1687         .word      LINK
                           000759  1688 LINK = . 
      000759 01                    1689         .byte       1
      00075A 31                    1690         .ascii     "1"
      00075B                       1691 ONE:
      00075B 1D 00 02         [ 2] 1692         SUBW X,#2
      00075E 90 AE 00 01      [ 2] 1693 	LDW Y,#1
      000762 FF               [ 2] 1694         LDW (X),Y
      000763 81               [ 4] 1695         RET
                                   1696 
                                   1697 ;         -1    ( -- -1)
                                   1698 ;         Return 32,  blank character.
      000764 07 59                 1699         .word      LINK
                           000766  1700 LINK = . 
      000766 02                    1701         .byte       2
      000767 2D 31                 1702         .ascii     "-1"
      000769                       1703 MONE:
      000769 1D 00 02         [ 2] 1704         SUBW X,#2
      00076C 90 AE FF FF      [ 2] 1705 	LDW Y,#0xFFFF
      000770 FF               [ 2] 1706         LDW (X),Y
      000771 81               [ 4] 1707         RET
                                   1708 
                                   1709 ;       >CHAR   ( c -- c )
                                   1710 ;       Filter non-printing characters.
      000772 07 66                 1711         .word      LINK
                           000774  1712 LINK = . 
      000774 05                    1713         .byte      5
      000775 3E 43 48 41 52        1714         .ascii     ">CHAR"
      00077A                       1715 TCHAR:
                           000001  1716 .if CONVERT_TO_CODE
      00077A E6 01            [ 1] 1717         ld a,(1,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00077C A1 20            [ 1] 1718         cp a,#32  
      00077E 2B 05            [ 1] 1719         jrmi 1$ 
      000780 A1 7F            [ 1] 1720         cp a,#127 
      000782 2A 01            [ 1] 1721         jrpl 1$ 
      000784 81               [ 4] 1722         ret 
      000785 A6 5F            [ 1] 1723 1$:     ld a,#'_ 
      000787 E7 01            [ 1] 1724         ld (1,x),a 
      000789 81               [ 4] 1725         ret 
                           000000  1726 .else
                                   1727         CALL     DOLIT
                                   1728         .word       0x7F
                                   1729         CALL     ANDD
                                   1730         CALL     DUPP    ;mask msb
                                   1731         CALL     DOLIT
                                   1732         .word      127
                                   1733         CALL     BLANK
                                   1734         CALL     WITHI   ;check for printable
                                   1735         CALL     QBRAN
                                   1736         .word    TCHA1
                                   1737         CALL     DROP
                                   1738         CALL     DOLIT
                                   1739         .word     0x5F		; "_"     ;replace non-printables
                                   1740 .endif 
      00078A 81               [ 4] 1741 TCHA1:  RET
                                   1742 
                                   1743 ;       DEPTH   ( -- n )
                                   1744 ;       Return  depth of  data stack.
      00078B 07 74                 1745         .word      LINK
                           00078D  1746 LINK = . 
      00078D 05                    1747         .byte      5
      00078E 44 45 50 54 48        1748         .ascii     "DEPTH"
      000793                       1749 DEPTH: 
      000793 90 BE 26         [ 2] 1750         LDW Y,SP0    ;save data stack ptr
      000796 BF 1E            [ 2] 1751 	LDW XTEMP,X
      000798 72 B2 00 1E      [ 2] 1752         SUBW Y,XTEMP     ;#bytes = SP0 - X
      00079C 90 57            [ 2] 1753         SRAW Y    ;Y = #stack items
                           000001  1754 .if PICATOUT_MOD
                                   1755 ; why ? 
                                   1756 ;      	DECW Y
                                   1757 .endif 
      00079E 1D 00 02         [ 2] 1758 	SUBW X,#2
      0007A1 FF               [ 2] 1759         LDW (X),Y     ; if neg, underflow
      0007A2 81               [ 4] 1760         RET
                                   1761 
                                   1762 ;       PICK    ( ... +n -- ... w )
                                   1763 ;       Copy  nth stack item to tos.
      0007A3 07 8D                 1764         .word      LINK
                           0007A5  1765 LINK = . 
      0007A5 04                    1766         .byte      4
      0007A6 50 49 43 4B           1767         .ascii     "PICK"
      0007AA                       1768 PICK:
      0007AA 90 93            [ 1] 1769         LDW Y,X   ;D = n1
      0007AC 90 FE            [ 2] 1770         LDW Y,(Y)
      0007AE 90 58            [ 2] 1771         SLAW Y
      0007B0 BF 1E            [ 2] 1772         LDW XTEMP,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007B2 72 B9 00 1E      [ 2] 1773         ADDW Y,XTEMP
      0007B6 90 FE            [ 2] 1774         LDW Y,(Y)
      0007B8 FF               [ 2] 1775         LDW (X),Y
      0007B9 81               [ 4] 1776         RET
                                   1777 
                                   1778 ;; Memory access
                                   1779 
                                   1780 ;       +!      ( n a -- )
                                   1781 ;       Add n to  contents at address a.
      0007BA 07 A5                 1782         .word      LINK
                           0007BC  1783 LINK = . 
      0007BC 02                    1784         .byte      2
      0007BD 2B 21                 1785         .ascii     "+!"
      0007BF                       1786 PSTOR:
                           000001  1787 .if CONVERT_TO_CODE
      0007BF 90 93            [ 1] 1788         ldw y,x 
      0007C1 90 FE            [ 2] 1789         ldw y,(y)
      0007C3 90 BF 20         [ 2] 1790         ldw YTEMP,y  ; address
      0007C6 90 FE            [ 2] 1791         ldw y,(y)  
      0007C8 90 89            [ 2] 1792         pushw y  ; value at address 
      0007CA 90 93            [ 1] 1793         ldw y,x 
      0007CC 90 EE 02         [ 2] 1794         ldw y,(2,y) ; n 
      0007CF 72 F9 01         [ 2] 1795         addw y,(1,sp) ; n+value
      0007D2 91 CF 20         [ 5] 1796         ldw [YTEMP],y ;  a!
      0007D5 90 85            [ 2] 1797         popw y    ;drop local var
      0007D7 1C 00 04         [ 2] 1798         addw x,#4 ; DDROP 
      0007DA 81               [ 4] 1799         ret 
                           000000  1800 .else
                                   1801         CALL	SWAPP
                                   1802         CALL	OVER
                                   1803         CALL	AT
                                   1804         CALL	PLUS
                                   1805         CALL	SWAPP
                                   1806         JP	STORE
                                   1807 .endif 
                                   1808 
                                   1809 ;       2!      ( d a -- )
                                   1810 ;       Store  double integer to address a.
      0007DB 07 BC                 1811         .word      LINK
                           0007DD  1812 LINK = . 
      0007DD 02                    1813         .byte      2
      0007DE 32 21                 1814         .ascii     "2!"
      0007E0                       1815 DSTOR:
                           000001  1816 .if CONVERT_TO_CODE
      0007E0 90 93            [ 1] 1817         ldw y,x 
      0007E2 90 FE            [ 2] 1818         ldw y,(y)
      0007E4 90 BF 20         [ 2] 1819         ldw YTEMP,y ; address 
      0007E7 1C 00 02         [ 2] 1820         addw x,#CELLL ; drop a 
      0007EA 90 93            [ 1] 1821         ldw y,x 
      0007EC 90 FE            [ 2] 1822         ldw y,(y) ; hi word 
      0007EE 89               [ 2] 1823         pushw x 
      0007EF EE 02            [ 2] 1824         ldw x,(2,x) ; lo word 
      0007F1 91 CF 20         [ 5] 1825         ldw [YTEMP],y
      0007F4 90 93            [ 1] 1826         ldw y,x 
      0007F6 AE 00 02         [ 2] 1827         ldw x,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007F9 92 DF 20         [ 5] 1828         ldw ([YTEMP],x),y 
      0007FC 85               [ 2] 1829         popw x 
      0007FD 1C 00 04         [ 2] 1830         addw x,#4 ; DDROP 
      000800 81               [ 4] 1831         ret 
                           000000  1832 .else
                                   1833         CALL	SWAPP
                                   1834         CALL	OVER
                                   1835         CALL	STORE
                                   1836         CALL	CELLP
                                   1837         JP	STORE
                                   1838 .endif 
                                   1839 ;       2@      ( a -- d )
                                   1840 ;       Fetch double integer from address a.
      000801 07 DD                 1841         .word      LINK
                           000803  1842 LINK = . 
      000803 02                    1843         .byte      2
      000804 32 40                 1844         .ascii     "2@"
      000806                       1845 DAT:
                           000001  1846 .if CONVERT_TO_CODE
      000806 90 93            [ 1] 1847         ldw y,x 
      000808 90 FE            [ 2] 1848         ldw y,(y) ;address 
      00080A 90 BF 20         [ 2] 1849         ldw YTEMP,y 
      00080D 1D 00 02         [ 2] 1850         subw x,#CELLL ; space for udh 
      000810 91 CE 20         [ 5] 1851         ldw y,[YTEMP] ; udh 
      000813 FF               [ 2] 1852         ldw (x),y 
      000814 90 AE 00 02      [ 2] 1853         ldw y,#2
      000818 91 DE 20         [ 5] 1854         ldw y,([YTEMP],y) ; udl 
      00081B EF 02            [ 2] 1855         ldw (2,x),y
      00081D 81               [ 4] 1856         ret 
                           000000  1857 .else 
                                   1858         CALL	DUPP
                                   1859         CALL	CELLP
                                   1860         CALL	AT
                                   1861         CALL	SWAPP
                                   1862         JP	AT
                                   1863 .endif 
                                   1864 
                                   1865 ;       COUNT   ( b -- b +n )
                                   1866 ;       Return count byte of a string
                                   1867 ;       and add 1 to byte address.
      00081E 08 03                 1868         .word      LINK
                           000820  1869 LINK = . 
      000820 05                    1870         .byte      5
      000821 43 4F 55 4E 54        1871         .ascii     "COUNT"
      000826                       1872 COUNT:
                           000001  1873 .if CONVERT_TO_CODE
      000826 90 93            [ 1] 1874         ldw y,x 
      000828 90 FE            [ 2] 1875         ldw y,(y) ; address 
      00082A 90 F6            [ 1] 1876         ld a,(y)  ; count 
      00082C 90 5C            [ 2] 1877         incw y 
      00082E FF               [ 2] 1878         ldw (x),y 
      00082F 1D 00 02         [ 2] 1879         subw x,#CELLL 
      000832 E7 01            [ 1] 1880         ld (1,x),a 
      000834 7F               [ 1] 1881         clr (x)
      000835 81               [ 4] 1882         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                           000000  1883 .else 
                                   1884         CALL     DUPP
                                   1885         CALL     ONEP
                                   1886         CALL     SWAPP
                                   1887         JP     CAT
                                   1888 .endif 
                                   1889 
                                   1890 ;       HERE    ( -- a )
                                   1891 ;       Return  top of  variables
      000836 08 20                 1892         .word      LINK
                           000838  1893 LINK = . 
      000838 04                    1894         .byte      4
      000839 48 45 52 45           1895         .ascii     "HERE"
      00083D                       1896 HERE:
                           000001  1897 .if CONVERT_TO_CODE
      00083D 90 AE 00 16      [ 2] 1898       	ldw y,#UVP 
      000841 90 FE            [ 2] 1899         ldw y,(y)
      000843 1D 00 02         [ 2] 1900         subw x,#CELLL 
      000846 FF               [ 2] 1901         ldw (x),y 
      000847 81               [ 4] 1902         ret 
                           000000  1903 .else
                                   1904         CALL     VPP
                                   1905         JP     AT
                                   1906 .endif 
                                   1907 
                                   1908 ;       PAD     ( -- a )
                                   1909 ;       Return address of text buffer
                                   1910 ;       above  code dictionary.
      000848 08 38                 1911         .word      LINK
                           00084A  1912 LINK = . 
      00084A 03                    1913         .byte      3
      00084B 50 41 44              1914         .ascii     "PAD"
      00084E                       1915 PAD:
      00084E CD 08 3D         [ 4] 1916         CALL     HERE
      000851 CD 01 38         [ 4] 1917         CALL     DOLIT
      000854 00 50                 1918         .word      80
      000856 CC 04 3D         [ 2] 1919         JP     PLUS
                                   1920 
                                   1921 ;       TIB     ( -- a )
                                   1922 ;       Return address of terminal input buffer.
      000859 08 4A                 1923         .word      LINK
                           00085B  1924 LINK = . 
      00085B 03                    1925         .byte      3
      00085C 54 49 42              1926         .ascii     "TIB"
      00085F                       1927 TIB:
      00085F CD 03 52         [ 4] 1928         CALL     NTIB
      000862 CD 06 F1         [ 4] 1929         CALL     CELLP
      000865 CC 01 C0         [ 2] 1930         JP     AT
                                   1931 
                                   1932 ;       @EXECUTE        ( a -- )
                                   1933 ;       Execute vector stored in address a.
      000868 08 5B                 1934         .word      LINK
                           00086A  1935 LINK = . 
      00086A 08                    1936         .byte      8
      00086B 40 45 58 45 43 55 54  1937         .ascii     "@EXECUTE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



             45
      000873                       1938 ATEXE:
      000873 CD 01 C0         [ 4] 1939         CALL     AT
      000876 CD 03 EC         [ 4] 1940         CALL     QDUP    ;?address or zero
      000879 CD 01 6B         [ 4] 1941         CALL     QBRAN
      00087C 08 81                 1942         .word      EXE1
      00087E CD 01 92         [ 4] 1943         CALL     EXECU   ;execute if non-zero
      000881 81               [ 4] 1944 EXE1:   RET     ;do nothing if zero
                                   1945 
                                   1946 ;       CMOVE   ( b1 b2 u -- )
                                   1947 ;       Copy u bytes from b1 to b2.
      000882 08 6A                 1948         .word      LINK
                           000884  1949 LINK = . 
      000884 05                    1950         .byte      5
      000885 43 4D 4F 56 45        1951         .ascii     "CMOVE"
      00088A                       1952 CMOVE:
      00088A CD 02 30         [ 4] 1953         CALL	TOR
      00088D CD 01 82         [ 4] 1954         CALL	BRAN
      000890 08 AA                 1955         .word	CMOV2
      000892 CD 02 30         [ 4] 1956 CMOV1:	CALL	TOR
      000895 CD 02 67         [ 4] 1957         CALL	DUPP
      000898 CD 01 DE         [ 4] 1958         CALL	CAT
      00089B CD 02 24         [ 4] 1959         CALL	RAT
      00089E CD 01 CD         [ 4] 1960         CALL	CSTOR
      0008A1 CD 07 1C         [ 4] 1961         CALL	ONEP
      0008A4 CD 02 11         [ 4] 1962         CALL	RFROM
      0008A7 CD 07 1C         [ 4] 1963         CALL	ONEP
      0008AA CD 01 4C         [ 4] 1964 CMOV2:	CALL	DONXT
      0008AD 08 92                 1965         .word	CMOV1
      0008AF CC 04 1D         [ 2] 1966         JP	DDROP
                                   1967 
                                   1968 ;       FILL    ( b u c -- )
                                   1969 ;       Fill u bytes of character c
                                   1970 ;       to area beginning at b.
      0008B2 08 84                 1971         .word       LINK
                           0008B4  1972 LINK = . 
      0008B4 04                    1973         .byte       4
      0008B5 46 49 4C 4C           1974         .ascii     "FILL"
      0008B9                       1975 FILL:
                           000001  1976 .if CONVERT_TO_CODE
      0008B9 90 93            [ 1] 1977         ldw y,x 
      0008BB 90 E6 01         [ 1] 1978         ld a,(1,y) ; c 
      0008BE 1C 00 02         [ 2] 1979         addw x,#CELLL ; drop c 
      0008C1 90 93            [ 1] 1980         ldw y,x 
      0008C3 90 FE            [ 2] 1981         ldw y,(y) ; count
      0008C5 90 89            [ 2] 1982         pushw y 
      0008C7 1C 00 02         [ 2] 1983         addw x,#CELLL ; drop u 
      0008CA 90 93            [ 1] 1984         ldw y,x 
      0008CC 1C 00 02         [ 2] 1985         addw x,#CELLL ; drop b 
      0008CF 90 FE            [ 2] 1986         ldw y,(y) ; address
      0008D1 90 BF 20         [ 2] 1987         ldw YTEMP,y
      0008D4 90 85            [ 2] 1988         popw y ; count 
      0008D6                       1989 FILL1:  
      0008D6 92 C7 20         [ 4] 1990         ld [YTEMP],a 
      0008D9 3C 21            [ 1] 1991         inc YTEMP+1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      0008DB 24 02            [ 1] 1992         jrnc FILL2 
      0008DD 3C 20            [ 1] 1993         inc YTEMP
      0008DF                       1994 FILL2: 
      0008DF 90 5A            [ 2] 1995         decw y ; count 
      0008E1 26 F3            [ 1] 1996         jrne FILL1  
      0008E3 81               [ 4] 1997         ret 
                           000000  1998 .else 
                                   1999         CALL	SWAPP
                                   2000         CALL	TOR
                                   2001         CALL	SWAPP
                                   2002         CALL	BRAN
                                   2003         .word	FILL2
                                   2004 FILL1:	CALL	DDUP
                                   2005         CALL	CSTOR
                                   2006         CALL	ONEP
                                   2007 FILL2:	CALL	DONXT
                                   2008         .word	FILL1
                                   2009         JP	DDROP
                                   2010 .endif
                                   2011 
                                   2012 ;       ERASE   ( b u -- )
                                   2013 ;       Erase u bytes beginning at b.
      0008E4 08 B4                 2014         .word      LINK
                           0008E6  2015 LINK = . 
      0008E6 05                    2016         .byte      5
      0008E7 45 52 41 53 45        2017         .ascii     "ERASE"
      0008EC                       2018 ERASE:
                           000001  2019 .if CONVERT_TO_CODE
      0008EC 90 5F            [ 1] 2020         clrw y 
      0008EE 1D 00 02         [ 2] 2021         subw x,#CELLL 
      0008F1 FF               [ 2] 2022         ldw (x),y 
      0008F2 CC 08 B9         [ 2] 2023         jp FILL 
                           000000  2024 .else 
                                   2025         CALL     ZERO
                                   2026         JP     FILL
                                   2027 .endif 
                                   2028 ;       PACK0x   ( b u a -- a )
                                   2029 ;       Build a counted string with
                                   2030 ;       u characters from b. Null fill.
      0008F5 08 E6                 2031         .word      LINK
                           0008F7  2032 LINK = . 
      0008F7 05                    2033         .byte      5
      0008F8 50 41 43 4B 30 58     2034         .ascii     "PACK0X"
      0008FE                       2035 PACKS:
      0008FE CD 02 67         [ 4] 2036         CALL     DUPP
      000901 CD 02 30         [ 4] 2037         CALL     TOR     ;strings only on cell boundary
      000904 CD 04 28         [ 4] 2038         CALL     DDUP
      000907 CD 01 CD         [ 4] 2039         CALL     CSTOR
      00090A CD 07 1C         [ 4] 2040         CALL     ONEP ;save count
      00090D CD 02 77         [ 4] 2041         CALL     SWAPP
      000910 CD 08 8A         [ 4] 2042         CALL     CMOVE
      000913 CD 02 11         [ 4] 2043         CALL     RFROM
      000916 81               [ 4] 2044         RET
                                   2045 
                                   2046 ;; Numeric output, single precision
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2047 
                                   2048 ;       DIGIT   ( u -- c )
                                   2049 ;       Convert digit u to a character.
      000917 08 F7                 2050         .word      LINK
                           000919  2051 LINK = . 
      000919 05                    2052         .byte      5
      00091A 44 49 47 49 54        2053         .ascii     "DIGIT"
      00091F                       2054 DIGIT:
      00091F CD 01 38         [ 4] 2055         CALL	DOLIT
      000922 00 09                 2056         .word	9
      000924 CD 02 91         [ 4] 2057         CALL	OVER
      000927 CD 05 00         [ 4] 2058         CALL	LESS
      00092A CD 01 38         [ 4] 2059         CALL	DOLIT
      00092D 00 07                 2060         .word	7
      00092F CD 02 B3         [ 4] 2061         CALL	ANDD
      000932 CD 04 3D         [ 4] 2062         CALL	PLUS
      000935 CD 01 38         [ 4] 2063         CALL	DOLIT
      000938 00 30                 2064         .word	48	;'0'
      00093A CC 04 3D         [ 2] 2065         JP	PLUS
                                   2066 
                                   2067 ;       EXTRACT ( n base -- n c )
                                   2068 ;       Extract least significant digit from n.
      00093D 09 19                 2069         .word      LINK
                           00093F  2070 LINK = . 
      00093F 07                    2071         .byte      7
      000940 45 58 54 52 41 43 54  2072         .ascii     "EXTRACT"
      000947                       2073 EXTRC:
      000947 CD 07 50         [ 4] 2074         CALL     ZERO
      00094A CD 02 77         [ 4] 2075         CALL     SWAPP
      00094D CD 05 78         [ 4] 2076         CALL     UMMOD
      000950 CD 02 77         [ 4] 2077         CALL     SWAPP
      000953 CC 09 1F         [ 2] 2078         JP     DIGIT
                                   2079 
                                   2080 ;       <#      ( -- )
                                   2081 ;       Initiate  numeric output process.
      000956 09 3F                 2082         .word      LINK
                           000958  2083 LINK = . 
      000958 02                    2084         .byte      2
      000959 3C 23                 2085         .ascii     "<#"
      00095B                       2086 BDIGS:
      00095B CD 08 4E         [ 4] 2087         CALL     PAD
      00095E CD 03 82         [ 4] 2088         CALL     HLD
      000961 CC 01 A9         [ 2] 2089         JP     STORE
                                   2090 
                                   2091 ;       HOLD    ( c -- )
                                   2092 ;       Insert a character into output string.
      000964 09 58                 2093         .word      LINK
                           000966  2094 LINK = . 
      000966 04                    2095         .byte      4
      000967 48 4F 4C 44           2096         .ascii     "HOLD"
      00096B                       2097 HOLD:
      00096B CD 03 82         [ 4] 2098         CALL     HLD
      00096E CD 01 C0         [ 4] 2099         CALL     AT
      000971 CD 07 29         [ 4] 2100         CALL     ONEM
      000974 CD 02 67         [ 4] 2101         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000977 CD 03 82         [ 4] 2102         CALL     HLD
      00097A CD 01 A9         [ 4] 2103         CALL     STORE
      00097D CC 01 CD         [ 2] 2104         JP     CSTOR
                                   2105 
                                   2106 ;       #       ( u -- u )
                                   2107 ;       Extract one digit from u and
                                   2108 ;       append digit to output string.
      000980 09 66                 2109         .word      LINK
                           000982  2110 LINK = . 
      000982 01                    2111         .byte      1
      000983 23                    2112         .ascii     "#"
      000984                       2113 DIG:
      000984 CD 03 24         [ 4] 2114         CALL     BASE
      000987 CD 01 C0         [ 4] 2115         CALL     AT
      00098A CD 09 47         [ 4] 2116         CALL     EXTRC
      00098D CC 09 6B         [ 2] 2117         JP     HOLD
                                   2118 
                                   2119 ;       #S      ( u -- 0 )
                                   2120 ;       Convert u until all digits
                                   2121 ;       are added to output string.
      000990 09 82                 2122         .word      LINK
                           000992  2123 LINK = . 
      000992 02                    2124         .byte      2
      000993 23 53                 2125         .ascii     "#S"
      000995                       2126 DIGS:
      000995 CD 09 84         [ 4] 2127 DIGS1:  CALL     DIG
      000998 CD 02 67         [ 4] 2128         CALL     DUPP
      00099B CD 01 6B         [ 4] 2129         CALL     QBRAN
      00099E 09 A2                 2130         .word      DIGS2
      0009A0 20 F3            [ 2] 2131         JRA     DIGS1
      0009A2 81               [ 4] 2132 DIGS2:  RET
                                   2133 
                                   2134 ;       SIGN    ( n -- )
                                   2135 ;       Add a minus sign to
                                   2136 ;       numeric output string.
      0009A3 09 92                 2137         .word      LINK
                           0009A5  2138 LINK = . 
      0009A5 04                    2139         .byte      4
      0009A6 53 49 47 4E           2140         .ascii     "SIGN"
      0009AA                       2141 SIGN:
      0009AA CD 02 A0         [ 4] 2142         CALL     ZLESS
      0009AD CD 01 6B         [ 4] 2143         CALL     QBRAN
      0009B0 09 BA                 2144         .word      SIGN1
      0009B2 CD 01 38         [ 4] 2145         CALL     DOLIT
      0009B5 00 2D                 2146         .word      45	;"-"
      0009B7 CC 09 6B         [ 2] 2147         JP     HOLD
      0009BA 81               [ 4] 2148 SIGN1:  RET
                                   2149 
                                   2150 ;       #>      ( w -- b u )
                                   2151 ;       Prepare output string.
      0009BB 09 A5                 2152         .word      LINK
                           0009BD  2153 LINK = . 
      0009BD 02                    2154         .byte      2
      0009BE 23 3E                 2155         .ascii     "#>"
      0009C0                       2156 EDIGS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0009C0 CD 02 5D         [ 4] 2157         CALL     DROP
      0009C3 CD 03 82         [ 4] 2158         CALL     HLD
      0009C6 CD 01 C0         [ 4] 2159         CALL     AT
      0009C9 CD 08 4E         [ 4] 2160         CALL     PAD
      0009CC CD 02 91         [ 4] 2161         CALL     OVER
      0009CF CC 04 9B         [ 2] 2162         JP     SUBB
                                   2163 
                                   2164 ;       str     ( w -- b u )
                                   2165 ;       Convert a signed integer
                                   2166 ;       to a numeric string.
      0009D2 09 BD                 2167         .word      LINK
                           0009D4  2168 LINK = . 
      0009D4 03                    2169         .byte      3
      0009D5 53 54 52              2170         .ascii     "STR"
      0009D8                       2171 STR:
      0009D8 CD 02 67         [ 4] 2172         CALL     DUPP
      0009DB CD 02 30         [ 4] 2173         CALL     TOR
      0009DE CD 04 B5         [ 4] 2174         CALL     ABSS
      0009E1 CD 09 5B         [ 4] 2175         CALL     BDIGS
      0009E4 CD 09 95         [ 4] 2176         CALL     DIGS
      0009E7 CD 02 11         [ 4] 2177         CALL     RFROM
      0009EA CD 09 AA         [ 4] 2178         CALL     SIGN
      0009ED CC 09 C0         [ 2] 2179         JP     EDIGS
                                   2180 
                                   2181 ;       HEX     ( -- )
                                   2182 ;       Use radix 16 as base for
                                   2183 ;       numeric conversions.
      0009F0 09 D4                 2184         .word      LINK
                           0009F2  2185 LINK = . 
      0009F2 03                    2186         .byte      3
      0009F3 48 45 58              2187         .ascii     "HEX"
      0009F6                       2188 HEX:
      0009F6 CD 01 38         [ 4] 2189         CALL     DOLIT
      0009F9 00 10                 2190         .word      16
      0009FB CD 03 24         [ 4] 2191         CALL     BASE
      0009FE CC 01 A9         [ 2] 2192         JP     STORE
                                   2193 
                                   2194 ;       DECIMAL ( -- )
                                   2195 ;       Use radix 10 as base
                                   2196 ;       for numeric conversions.
      000A01 09 F2                 2197         .word      LINK
                           000A03  2198 LINK = . 
      000A03 07                    2199         .byte      7
      000A04 44 45 43 49 4D 41 4C  2200         .ascii     "DECIMAL"
      000A0B                       2201 DECIM:
      000A0B CD 01 38         [ 4] 2202         CALL     DOLIT
      000A0E 00 0A                 2203         .word      10
      000A10 CD 03 24         [ 4] 2204         CALL     BASE
      000A13 CC 01 A9         [ 2] 2205         JP     STORE
                                   2206 
                                   2207 ;; Numeric input, single precision
                                   2208 
                                   2209 ;       DIGIT?  ( c base -- u t )
                                   2210 ;       Convert a character to its numeric
                                   2211 ;       value. A flag indicates success.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A16 0A 03                 2212         .word      LINK
                           000A18  2213 LINK = . 
      000A18 06                    2214         .byte       6
      000A19 44 49 47 49 54 3F     2215         .ascii     "DIGIT?"
      000A1F                       2216 DIGTQ:
      000A1F CD 02 30         [ 4] 2217         CALL     TOR
      000A22 CD 01 38         [ 4] 2218         CALL     DOLIT
      000A25 00 30                 2219         .word     48	; "0"
      000A27 CD 04 9B         [ 4] 2220         CALL     SUBB
      000A2A CD 01 38         [ 4] 2221         CALL     DOLIT
      000A2D 00 09                 2222         .word      9
      000A2F CD 02 91         [ 4] 2223         CALL     OVER
      000A32 CD 05 00         [ 4] 2224         CALL     LESS
      000A35 CD 01 6B         [ 4] 2225         CALL     QBRAN
      000A38 0A 50                 2226         .word      DGTQ1
      000A3A CD 01 38         [ 4] 2227         CALL     DOLIT
      000A3D 00 07                 2228         .word      7
      000A3F CD 04 9B         [ 4] 2229         CALL     SUBB
      000A42 CD 02 67         [ 4] 2230         CALL     DUPP
      000A45 CD 01 38         [ 4] 2231         CALL     DOLIT
      000A48 00 0A                 2232         .word      10
      000A4A CD 05 00         [ 4] 2233         CALL     LESS
      000A4D CD 02 C7         [ 4] 2234         CALL     ORR
      000A50 CD 02 67         [ 4] 2235 DGTQ1:  CALL     DUPP
      000A53 CD 02 11         [ 4] 2236         CALL     RFROM
      000A56 CC 04 E2         [ 2] 2237         JP     ULESS
                                   2238 
                                   2239 ;       NUMBER? ( a -- n T | a F )
                                   2240 ;       Convert a number string to
                                   2241 ;       integer. Push a flag on tos.
      000A59 0A 18                 2242         .word      LINK
                           000A5B  2243 LINK = . 
      000A5B 07                    2244         .byte      7
      000A5C 4E 55 4D 42 45 52 3F  2245         .ascii     "NUMBER?"
      000A63                       2246 NUMBQ:
      000A63 CD 03 24         [ 4] 2247         CALL     BASE
      000A66 CD 01 C0         [ 4] 2248         CALL     AT
      000A69 CD 02 30         [ 4] 2249         CALL     TOR
      000A6C CD 07 50         [ 4] 2250         CALL     ZERO
      000A6F CD 02 91         [ 4] 2251         CALL     OVER
      000A72 CD 08 26         [ 4] 2252         CALL     COUNT
      000A75 CD 02 91         [ 4] 2253         CALL     OVER
      000A78 CD 01 DE         [ 4] 2254         CALL     CAT
      000A7B CD 01 38         [ 4] 2255         CALL     DOLIT
      000A7E 00 24                 2256         .word     36	; "0x"
      000A80 CD 04 C3         [ 4] 2257         CALL     EQUAL
      000A83 CD 01 6B         [ 4] 2258         CALL     QBRAN
      000A86 0A 97                 2259         .word      NUMQ1
      000A88 CD 09 F6         [ 4] 2260         CALL     HEX
      000A8B CD 02 77         [ 4] 2261         CALL     SWAPP
      000A8E CD 07 1C         [ 4] 2262         CALL     ONEP
      000A91 CD 02 77         [ 4] 2263         CALL     SWAPP
      000A94 CD 07 29         [ 4] 2264         CALL     ONEM
      000A97 CD 02 91         [ 4] 2265 NUMQ1:  CALL     OVER
      000A9A CD 01 DE         [ 4] 2266         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000A9D CD 01 38         [ 4] 2267         CALL     DOLIT
      000AA0 00 2D                 2268         .word     45	; "-"
      000AA2 CD 04 C3         [ 4] 2269         CALL     EQUAL
      000AA5 CD 02 30         [ 4] 2270         CALL     TOR
      000AA8 CD 02 77         [ 4] 2271         CALL     SWAPP
      000AAB CD 02 24         [ 4] 2272         CALL     RAT
      000AAE CD 04 9B         [ 4] 2273         CALL     SUBB
      000AB1 CD 02 77         [ 4] 2274         CALL     SWAPP
      000AB4 CD 02 24         [ 4] 2275         CALL     RAT
      000AB7 CD 04 3D         [ 4] 2276         CALL     PLUS
      000ABA CD 03 EC         [ 4] 2277         CALL     QDUP
      000ABD CD 01 6B         [ 4] 2278         CALL     QBRAN
      000AC0 0B 21                 2279         .word      NUMQ6
      000AC2 CD 07 29         [ 4] 2280         CALL     ONEM
      000AC5 CD 02 30         [ 4] 2281         CALL     TOR
      000AC8 CD 02 67         [ 4] 2282 NUMQ2:  CALL     DUPP
      000ACB CD 02 30         [ 4] 2283         CALL     TOR
      000ACE CD 01 DE         [ 4] 2284         CALL     CAT
      000AD1 CD 03 24         [ 4] 2285         CALL     BASE
      000AD4 CD 01 C0         [ 4] 2286         CALL     AT
      000AD7 CD 0A 1F         [ 4] 2287         CALL     DIGTQ
      000ADA CD 01 6B         [ 4] 2288         CALL     QBRAN
      000ADD 0B 0F                 2289         .word      NUMQ4
      000ADF CD 02 77         [ 4] 2290         CALL     SWAPP
      000AE2 CD 03 24         [ 4] 2291         CALL     BASE
      000AE5 CD 01 C0         [ 4] 2292         CALL     AT
      000AE8 CD 06 9B         [ 4] 2293         CALL     STAR
      000AEB CD 04 3D         [ 4] 2294         CALL     PLUS
      000AEE CD 02 11         [ 4] 2295         CALL     RFROM
      000AF1 CD 07 1C         [ 4] 2296         CALL     ONEP
      000AF4 CD 01 4C         [ 4] 2297         CALL     DONXT
      000AF7 0A C8                 2298         .word      NUMQ2
      000AF9 CD 02 24         [ 4] 2299         CALL     RAT
      000AFC CD 02 77         [ 4] 2300         CALL     SWAPP
      000AFF CD 02 5D         [ 4] 2301         CALL     DROP
      000B02 CD 01 6B         [ 4] 2302         CALL     QBRAN
      000B05 0B 0A                 2303         .word      NUMQ3
      000B07 CD 04 68         [ 4] 2304         CALL     NEGAT
      000B0A CD 02 77         [ 4] 2305 NUMQ3:  CALL     SWAPP
      000B0D 20 0F            [ 2] 2306         JRA     NUMQ5
      000B0F CD 02 11         [ 4] 2307 NUMQ4:  CALL     RFROM
      000B12 CD 02 11         [ 4] 2308         CALL     RFROM
      000B15 CD 04 1D         [ 4] 2309         CALL     DDROP
      000B18 CD 04 1D         [ 4] 2310         CALL     DDROP
      000B1B CD 07 50         [ 4] 2311         CALL     ZERO
      000B1E CD 02 67         [ 4] 2312 NUMQ5:  CALL     DUPP
      000B21 CD 02 11         [ 4] 2313 NUMQ6:  CALL     RFROM
      000B24 CD 04 1D         [ 4] 2314         CALL     DDROP
      000B27 CD 02 11         [ 4] 2315         CALL     RFROM
      000B2A CD 03 24         [ 4] 2316         CALL     BASE
      000B2D CC 01 A9         [ 2] 2317         JP     STORE
                                   2318 
                                   2319 ;; Basic I/O
                                   2320 
                                   2321 ;       KEY     ( -- c )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2322 ;       Wait for and return an
                                   2323 ;       input character.
      000B30 0A 5B                 2324         .word      LINK
                           000B32  2325 LINK = . 
      000B32 03                    2326         .byte      3
      000B33 4B 45 59              2327         .ascii     "KEY"
      000B36                       2328 KEY:
                           000001  2329 .if CONVERT_TO_CODE
      000B36 72 0B 52 30 FB   [ 2] 2330         btjf UART1_SR,#UART_SR_RXNE,. 
      000B3B C6 52 31         [ 1] 2331         ld a,UART1_DR 
      000B3E 1D 00 02         [ 2] 2332         subw x,#CELLL 
      000B41 E7 01            [ 1] 2333         ld (1,x),a 
      000B43 7F               [ 1] 2334         clr (x)
      000B44 81               [ 4] 2335         ret 
                           000000  2336 .else 
                                   2337 KEY1:   CALL     QKEY
                                   2338         CALL     QBRAN
                                   2339         .word      KEY1
                                   2340         RET
                                   2341 .endif 
                                   2342 
                                   2343 ;       NUF?    ( -- t )
                                   2344 ;       Return false if no input,
                                   2345 ;       else pause and if CR return true.
      000B45 0B 32                 2346         .word      LINK
                           000B47  2347 LINK = . 
      000B47 04                    2348         .byte      4
      000B48 4E 55 46 3F           2349         .ascii     "NUF?"
      000B4C                       2350 NUFQ:
      000B4C CD 01 04         [ 4] 2351         CALL     QKEY
      000B4F CD 02 67         [ 4] 2352         CALL     DUPP
      000B52 CD 01 6B         [ 4] 2353         CALL     QBRAN
      000B55 0B 65                 2354         .word    NUFQ1
      000B57 CD 04 1D         [ 4] 2355         CALL     DDROP
      000B5A CD 0B 36         [ 4] 2356         CALL     KEY
      000B5D CD 01 38         [ 4] 2357         CALL     DOLIT
      000B60 00 0D                 2358         .word      CRR
      000B62 CC 04 C3         [ 2] 2359         JP     EQUAL
      000B65 81               [ 4] 2360 NUFQ1:  RET
                                   2361 
                                   2362 ;       SPACE   ( -- )
                                   2363 ;       Send  blank character to
                                   2364 ;       output device.
      000B66 0B 47                 2365         .word      LINK
                           000B68  2366 LINK = . 
      000B68 05                    2367         .byte      5
      000B69 53 50 41 43 45        2368         .ascii     "SPACE"
      000B6E                       2369 SPACE:
      000B6E CD 07 43         [ 4] 2370         CALL     BLANK
      000B71 CC 01 22         [ 2] 2371         JP     EMIT
                                   2372 
                                   2373 ;       SPACES  ( +n -- )
                                   2374 ;       Send n spaces to output device.
      000B74 0B 68                 2375         .word      LINK
                           000B76  2376 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B76 06                    2377         .byte      6
      000B77 53 50 41 43 45 53     2378         .ascii     "SPACES"
      000B7D                       2379 SPACS:
      000B7D CD 07 50         [ 4] 2380         CALL     ZERO
      000B80 CD 05 20         [ 4] 2381         CALL     MAX
      000B83 CD 02 30         [ 4] 2382         CALL     TOR
      000B86 20 03            [ 2] 2383         JRA      CHAR2
      000B88 CD 0B 6E         [ 4] 2384 CHAR1:  CALL     SPACE
      000B8B CD 01 4C         [ 4] 2385 CHAR2:  CALL     DONXT
      000B8E 0B 88                 2386         .word    CHAR1
      000B90 81               [ 4] 2387         RET
                                   2388 
                                   2389 ;       TYPE    ( b u -- )
                                   2390 ;       Output u characters from b.
      000B91 0B 76                 2391         .word      LINK
                           000B93  2392 LINK = . 
      000B93 04                    2393         .byte      4
      000B94 54 59 50 45           2394         .ascii     "TYPE"
      000B98                       2395 TYPES:
      000B98 CD 02 30         [ 4] 2396         CALL     TOR
      000B9B 20 0C            [ 2] 2397         JRA     TYPE2
      000B9D CD 02 67         [ 4] 2398 TYPE1:  CALL     DUPP
      000BA0 CD 01 DE         [ 4] 2399         CALL     CAT
      000BA3 CD 01 22         [ 4] 2400         CALL     EMIT
      000BA6 CD 07 1C         [ 4] 2401         CALL     ONEP
      000BA9 CD 01 4C         [ 4] 2402 TYPE2:  CALL     DONXT
      000BAC 0B 9D                 2403         .word      TYPE1
      000BAE CC 02 5D         [ 2] 2404         JP     DROP
                                   2405 
                                   2406 ;       CR      ( -- )
                                   2407 ;       Output a carriage return
                                   2408 ;       and a line feed.
      000BB1 0B 93                 2409         .word      LINK
                           000BB3  2410 LINK = . 
      000BB3 02                    2411         .byte      2
      000BB4 43 52                 2412         .ascii     "CR"
      000BB6                       2413 CR:
      000BB6 CD 01 38         [ 4] 2414         CALL     DOLIT
      000BB9 00 0D                 2415         .word      CRR
      000BBB CD 01 22         [ 4] 2416         CALL     EMIT
      000BBE CD 01 38         [ 4] 2417         CALL     DOLIT
      000BC1 00 0A                 2418         .word      LF
      000BC3 CC 01 22         [ 2] 2419         JP     EMIT
                                   2420 
                                   2421 ;       do$     ( -- a )
                                   2422 ;       Return  address of a compiled
                                   2423 ;       string.
      000BC6 0B B3                 2424         .word      LINK
                           000BC8  2425 LINK = . 
      000BC8 43                    2426 	.byte      COMPO+3
      000BC9 44 4F 24              2427         .ascii     "DO$"
      000BCC                       2428 DOSTR:
      000BCC CD 02 11         [ 4] 2429         CALL     RFROM
      000BCF CD 02 24         [ 4] 2430         CALL     RAT
      000BD2 CD 02 11         [ 4] 2431         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BD5 CD 08 26         [ 4] 2432         CALL     COUNT
      000BD8 CD 04 3D         [ 4] 2433         CALL     PLUS
      000BDB CD 02 30         [ 4] 2434         CALL     TOR
      000BDE CD 02 77         [ 4] 2435         CALL     SWAPP
      000BE1 CD 02 30         [ 4] 2436         CALL     TOR
      000BE4 81               [ 4] 2437         RET
                                   2438 
                                   2439 ;       $"|     ( -- a )
                                   2440 ;       Run time routine compiled by $".
                                   2441 ;       Return address of a compiled string.
      000BE5 0B C8                 2442         .word      LINK
                           000BE7  2443 LINK = . 
      000BE7 43                    2444 	.byte      COMPO+3
      000BE8 24 22 7C              2445         .byte     '$','"','|'
      000BEB                       2446 STRQP:
      000BEB CD 0B CC         [ 4] 2447         CALL     DOSTR
      000BEE 81               [ 4] 2448         RET
                                   2449 
                                   2450 ;       ."|     ( -- )
                                   2451 ;       Run time routine of ." .
                                   2452 ;       Output a compiled string.
      000BEF 0B E7                 2453         .word      LINK
                           000BF1  2454 LINK = . 
      000BF1 43                    2455 	.byte      COMPO+3
      000BF2 2E 22 7C              2456         .byte     '.','"','|'
      000BF5                       2457 DOTQP:
      000BF5 CD 0B CC         [ 4] 2458         CALL     DOSTR
      000BF8 CD 08 26         [ 4] 2459         CALL     COUNT
      000BFB CC 0B 98         [ 2] 2460         JP     TYPES
                                   2461 
                                   2462 ;       .R      ( n +n -- )
                                   2463 ;       Display an integer in a field
                                   2464 ;       of n columns, right justified.
      000BFE 0B F1                 2465         .word      LINK
                           000C00  2466 LINK = . 
      000C00 02                    2467         .byte      2
      000C01 2E 52                 2468         .ascii     ".R"
      000C03                       2469 DOTR:
      000C03 CD 02 30         [ 4] 2470         CALL     TOR
      000C06 CD 09 D8         [ 4] 2471         CALL     STR
      000C09 CD 02 11         [ 4] 2472         CALL     RFROM
      000C0C CD 02 91         [ 4] 2473         CALL     OVER
      000C0F CD 04 9B         [ 4] 2474         CALL     SUBB
      000C12 CD 0B 7D         [ 4] 2475         CALL     SPACS
      000C15 CC 0B 98         [ 2] 2476         JP     TYPES
                                   2477 
                                   2478 ;       U.R     ( u +n -- )
                                   2479 ;       Display an unsigned integer
                                   2480 ;       in n column, right justified.
      000C18 0C 00                 2481         .word      LINK
                           000C1A  2482 LINK = . 
      000C1A 03                    2483         .byte      3
      000C1B 55 2E 52              2484         .ascii     "U.R"
      000C1E                       2485 UDOTR:
      000C1E CD 02 30         [ 4] 2486         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C21 CD 09 5B         [ 4] 2487         CALL     BDIGS
      000C24 CD 09 95         [ 4] 2488         CALL     DIGS
      000C27 CD 09 C0         [ 4] 2489         CALL     EDIGS
      000C2A CD 02 11         [ 4] 2490         CALL     RFROM
      000C2D CD 02 91         [ 4] 2491         CALL     OVER
      000C30 CD 04 9B         [ 4] 2492         CALL     SUBB
      000C33 CD 0B 7D         [ 4] 2493         CALL     SPACS
      000C36 CC 0B 98         [ 2] 2494         JP     TYPES
                                   2495 
                                   2496 ;       U.      ( u -- )
                                   2497 ;       Display an unsigned integer
                                   2498 ;       in free format.
      000C39 0C 1A                 2499         .word      LINK
                           000C3B  2500 LINK = . 
      000C3B 02                    2501         .byte      2
      000C3C 55 2E                 2502         .ascii     "U."
      000C3E                       2503 UDOT:
      000C3E CD 09 5B         [ 4] 2504         CALL     BDIGS
      000C41 CD 09 95         [ 4] 2505         CALL     DIGS
      000C44 CD 09 C0         [ 4] 2506         CALL     EDIGS
      000C47 CD 0B 6E         [ 4] 2507         CALL     SPACE
      000C4A CC 0B 98         [ 2] 2508         JP     TYPES
                                   2509 
                                   2510 ;       .       ( w -- )
                                   2511 ;       Display an integer in free
                                   2512 ;       format, preceeded by a space.
      000C4D 0C 3B                 2513         .word      LINK
                           000C4F  2514 LINK = . 
      000C4F 01                    2515         .byte      1
      000C50 2E                    2516         .ascii     "."
      000C51                       2517 DOT:
      000C51 CD 03 24         [ 4] 2518         CALL     BASE
      000C54 CD 01 C0         [ 4] 2519         CALL     AT
      000C57 CD 01 38         [ 4] 2520         CALL     DOLIT
      000C5A 00 0A                 2521         .word      10
      000C5C CD 02 DC         [ 4] 2522         CALL     XORR    ;?decimal
      000C5F CD 01 6B         [ 4] 2523         CALL     QBRAN
      000C62 0C 67                 2524         .word      DOT1
      000C64 CC 0C 3E         [ 2] 2525         JP     UDOT
      000C67 CD 09 D8         [ 4] 2526 DOT1:   CALL     STR
      000C6A CD 0B 6E         [ 4] 2527         CALL     SPACE
      000C6D CC 0B 98         [ 2] 2528         JP     TYPES
                                   2529 
                                   2530 ;       ?       ( a -- )
                                   2531 ;       Display contents in memory cell.
      000C70 0C 4F                 2532         .word      LINK
                                   2533         
                           000C72  2534 LINK = . 
      000C72 01                    2535         .byte      1
      000C73 3F                    2536         .ascii     "?"
      000C74                       2537 QUEST:
      000C74 CD 01 C0         [ 4] 2538         CALL     AT
      000C77 CC 0C 51         [ 2] 2539         JP     DOT
                                   2540 
                                   2541 ;; Parsing
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                                   2542 
                                   2543 ;       parse   ( b u c -- b u delta ; <string> )
                                   2544 ;       Scan string delimited by c.
                                   2545 ;       Return found string and its offset.
      000C7A 0C 72                 2546         .word      LINK
                           000C7C  2547 LINK = . 
      000C7C 05                    2548         .byte      5
      000C7D 70 61 72 73 65        2549         .ascii     "parse"
      000C82                       2550 PARS:
      000C82 CD 03 33         [ 4] 2551         CALL     TEMP
      000C85 CD 01 A9         [ 4] 2552         CALL     STORE
      000C88 CD 02 91         [ 4] 2553         CALL     OVER
      000C8B CD 02 30         [ 4] 2554         CALL     TOR
      000C8E CD 02 67         [ 4] 2555         CALL     DUPP
      000C91 CD 01 6B         [ 4] 2556         CALL     QBRAN
      000C94 0D 3A                 2557         .word    PARS8
      000C96 CD 07 29         [ 4] 2558         CALL     ONEM
      000C99 CD 03 33         [ 4] 2559         CALL     TEMP
      000C9C CD 01 C0         [ 4] 2560         CALL     AT
      000C9F CD 07 43         [ 4] 2561         CALL     BLANK
      000CA2 CD 04 C3         [ 4] 2562         CALL     EQUAL
      000CA5 CD 01 6B         [ 4] 2563         CALL     QBRAN
      000CA8 0C DB                 2564         .word      PARS3
      000CAA CD 02 30         [ 4] 2565         CALL     TOR
      000CAD CD 07 43         [ 4] 2566 PARS1:  CALL     BLANK
      000CB0 CD 02 91         [ 4] 2567         CALL     OVER
      000CB3 CD 01 DE         [ 4] 2568         CALL     CAT     ;skip leading blanks ONLY
      000CB6 CD 04 9B         [ 4] 2569         CALL     SUBB
      000CB9 CD 02 A0         [ 4] 2570         CALL     ZLESS
      000CBC CD 04 57         [ 4] 2571         CALL     INVER
      000CBF CD 01 6B         [ 4] 2572         CALL     QBRAN
      000CC2 0C D8                 2573         .word      PARS2
      000CC4 CD 07 1C         [ 4] 2574         CALL     ONEP
      000CC7 CD 01 4C         [ 4] 2575         CALL     DONXT
      000CCA 0C AD                 2576         .word      PARS1
      000CCC CD 02 11         [ 4] 2577         CALL     RFROM
      000CCF CD 02 5D         [ 4] 2578         CALL     DROP
      000CD2 CD 07 50         [ 4] 2579         CALL     ZERO
      000CD5 CC 02 67         [ 2] 2580         JP     DUPP
      000CD8 CD 02 11         [ 4] 2581 PARS2:  CALL     RFROM
      000CDB CD 02 91         [ 4] 2582 PARS3:  CALL     OVER
      000CDE CD 02 77         [ 4] 2583         CALL     SWAPP
      000CE1 CD 02 30         [ 4] 2584         CALL     TOR
      000CE4 CD 03 33         [ 4] 2585 PARS4:  CALL     TEMP
      000CE7 CD 01 C0         [ 4] 2586         CALL     AT
      000CEA CD 02 91         [ 4] 2587         CALL     OVER
      000CED CD 01 DE         [ 4] 2588         CALL     CAT
      000CF0 CD 04 9B         [ 4] 2589         CALL     SUBB    ;scan for delimiter
      000CF3 CD 03 33         [ 4] 2590         CALL     TEMP
      000CF6 CD 01 C0         [ 4] 2591         CALL     AT
      000CF9 CD 07 43         [ 4] 2592         CALL     BLANK
      000CFC CD 04 C3         [ 4] 2593         CALL     EQUAL
      000CFF CD 01 6B         [ 4] 2594         CALL     QBRAN
      000D02 0D 07                 2595         .word      PARS5
      000D04 CD 02 A0         [ 4] 2596         CALL     ZLESS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D07 CD 01 6B         [ 4] 2597 PARS5:  CALL     QBRAN
      000D0A 0D 1C                 2598         .word      PARS6
      000D0C CD 07 1C         [ 4] 2599         CALL     ONEP
      000D0F CD 01 4C         [ 4] 2600         CALL     DONXT
      000D12 0C E4                 2601         .word      PARS4
      000D14 CD 02 67         [ 4] 2602         CALL     DUPP
      000D17 CD 02 30         [ 4] 2603         CALL     TOR
      000D1A 20 0F            [ 2] 2604         JRA     PARS7
      000D1C CD 02 11         [ 4] 2605 PARS6:  CALL     RFROM
      000D1F CD 02 5D         [ 4] 2606         CALL     DROP
      000D22 CD 02 67         [ 4] 2607         CALL     DUPP
      000D25 CD 07 1C         [ 4] 2608         CALL     ONEP
      000D28 CD 02 30         [ 4] 2609         CALL     TOR
      000D2B CD 02 91         [ 4] 2610 PARS7:  CALL     OVER
      000D2E CD 04 9B         [ 4] 2611         CALL     SUBB
      000D31 CD 02 11         [ 4] 2612         CALL     RFROM
      000D34 CD 02 11         [ 4] 2613         CALL     RFROM
      000D37 CC 04 9B         [ 2] 2614         JP     SUBB
      000D3A CD 02 91         [ 4] 2615 PARS8:  CALL     OVER
      000D3D CD 02 11         [ 4] 2616         CALL     RFROM
      000D40 CC 04 9B         [ 2] 2617         JP     SUBB
                                   2618 
                                   2619 ;       PARSE   ( c -- b u ; <string> )
                                   2620 ;       Scan input stream and return
                                   2621 ;       counted string delimited by c.
      000D43 0C 7C                 2622         .word      LINK
                           000D45  2623 LINK = . 
      000D45 05                    2624         .byte      5
      000D46 50 41 52 53 45        2625         .ascii     "PARSE"
      000D4B                       2626 PARSE:
      000D4B CD 02 30         [ 4] 2627         CALL     TOR
      000D4E CD 08 5F         [ 4] 2628         CALL     TIB
      000D51 CD 03 42         [ 4] 2629         CALL     INN
      000D54 CD 01 C0         [ 4] 2630         CALL     AT
      000D57 CD 04 3D         [ 4] 2631         CALL     PLUS    ;current input buffer pointer
      000D5A CD 03 52         [ 4] 2632         CALL     NTIB
      000D5D CD 01 C0         [ 4] 2633         CALL     AT
      000D60 CD 03 42         [ 4] 2634         CALL     INN
      000D63 CD 01 C0         [ 4] 2635         CALL     AT
      000D66 CD 04 9B         [ 4] 2636         CALL     SUBB    ;remaining count
      000D69 CD 02 11         [ 4] 2637         CALL     RFROM
      000D6C CD 0C 82         [ 4] 2638         CALL     PARS
      000D6F CD 03 42         [ 4] 2639         CALL     INN
      000D72 CC 07 BF         [ 2] 2640         JP     PSTOR
                                   2641 
                                   2642 ;       .(      ( -- )
                                   2643 ;       Output following string up to next ) .
      000D75 0D 45                 2644         .word      LINK
                           000D77  2645 LINK = . 
      000D77 82                    2646 	.byte      IMEDD+2
      000D78 2E 28                 2647         .ascii     ".("
      000D7A                       2648 DOTPR:
      000D7A CD 01 38         [ 4] 2649         CALL     DOLIT
      000D7D 00 29                 2650         .word     41	; ")"
      000D7F CD 0D 4B         [ 4] 2651         CALL     PARSE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D82 CC 0B 98         [ 2] 2652         JP     TYPES
                                   2653 
                                   2654 ;       (       ( -- )
                                   2655 ;       Ignore following string up to next ).
                                   2656 ;       A comment.
      000D85 0D 77                 2657         .word      LINK
                           000D87  2658 LINK = . 
      000D87 81                    2659 	.byte      IMEDD+1
      000D88 28                    2660         .ascii     "("
      000D89                       2661 PAREN:
      000D89 CD 01 38         [ 4] 2662         CALL     DOLIT
      000D8C 00 29                 2663         .word     41	; ")"
      000D8E CD 0D 4B         [ 4] 2664         CALL     PARSE
      000D91 CC 04 1D         [ 2] 2665         JP     DDROP
                                   2666 
                                   2667 ;       \       ( -- )
                                   2668 ;       Ignore following text till
                                   2669 ;       end of line.
      000D94 0D 87                 2670         .word      LINK
                           000D96  2671 LINK = . 
      000D96 81                    2672 	.byte      IMEDD+1
      000D97 5C                    2673         .ascii     "\"
      000D98                       2674 BKSLA:
                           000001  2675 .if CONVERT_TO_CODE
      000D98 90 AE 00 0C      [ 2] 2676         ldw y,#UCTIB ; #TIB  
      000D9C 90 FE            [ 2] 2677         ldw y,(y)
      000D9E 90 89            [ 2] 2678         pushw y ; count in TIB 
      000DA0 90 AE 00 0A      [ 2] 2679         ldw y,#UINN ; >IN 
      000DA4 90 BF 20         [ 2] 2680         ldw YTEMP,y
      000DA7 90 85            [ 2] 2681         popw y 
      000DA9 91 CF 20         [ 5] 2682         ldw [YTEMP],y
      000DAC 81               [ 4] 2683         ret 
                           000000  2684 .else
                                   2685         CALL     NTIB
                                   2686         CALL     AT
                                   2687         CALL     INN
                                   2688         JP     STORE
                                   2689 .endif 
                                   2690 
                                   2691 ;       WORD    ( c -- a ; <string> )
                                   2692 ;       Parse a word from input stream
                                   2693 ;       and copy it to code dictionary.
      000DAD 0D 96                 2694         .word      LINK
                           000DAF  2695 LINK = . 
      000DAF 04                    2696         .byte      4
      000DB0 57 4F 52 44           2697         .ascii     "WORD"
      000DB4                       2698 WORDD:
      000DB4 CD 0D 4B         [ 4] 2699         CALL     PARSE
      000DB7 CD 08 3D         [ 4] 2700         CALL     HERE
      000DBA CD 06 F1         [ 4] 2701         CALL     CELLP
      000DBD CC 08 FE         [ 2] 2702         JP     PACKS
                                   2703 
                                   2704 ;       TOKEN   ( -- a ; <string> )
                                   2705 ;       Parse a word from input stream
                                   2706 ;       and copy it to name dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DC0 0D AF                 2707         .word      LINK
                           000DC2  2708 LINK = . 
      000DC2 05                    2709         .byte      5
      000DC3 54 4F 4B 45 4E        2710         .ascii     "TOKEN"
      000DC8                       2711 TOKEN:
      000DC8 CD 07 43         [ 4] 2712         CALL     BLANK
      000DCB CC 0D B4         [ 2] 2713         JP     WORDD
                                   2714 
                                   2715 ;; Dictionary search
                                   2716 
                                   2717 ;       NAME>   ( na -- ca )
                                   2718 ;       Return a code address given
                                   2719 ;       a name address.
      000DCE 0D C2                 2720         .word      LINK
                           000DD0  2721 LINK = . 
      000DD0 05                    2722         .byte      5
      000DD1 4E 41 4D 45 3E        2723         .ascii     "NAME>"
      000DD6                       2724 NAMET:
      000DD6 CD 08 26         [ 4] 2725         CALL     COUNT
      000DD9 CD 01 38         [ 4] 2726         CALL     DOLIT
      000DDC 00 1F                 2727         .word      31
      000DDE CD 02 B3         [ 4] 2728         CALL     ANDD
      000DE1 CC 04 3D         [ 2] 2729         JP     PLUS
                                   2730 
                                   2731 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2732 ;       Compare u cells in two
                                   2733 ;       strings. Return 0 if identical.
      000DE4 0D D0                 2734         .word      LINK
                           000DE6  2735 LINK = . 
      000DE6 05                    2736         .byte       5
      000DE7 53 41 4D 45 3F        2737         .ascii     "SAME?"
      000DEC                       2738 SAMEQ:
      000DEC CD 07 29         [ 4] 2739         CALL     ONEM
      000DEF CD 02 30         [ 4] 2740         CALL     TOR
      000DF2 20 29            [ 2] 2741         JRA     SAME2
      000DF4 CD 02 91         [ 4] 2742 SAME1:  CALL     OVER
      000DF7 CD 02 24         [ 4] 2743         CALL     RAT
      000DFA CD 04 3D         [ 4] 2744         CALL     PLUS
      000DFD CD 01 DE         [ 4] 2745         CALL     CAT
      000E00 CD 02 91         [ 4] 2746         CALL     OVER
      000E03 CD 02 24         [ 4] 2747         CALL     RAT
      000E06 CD 04 3D         [ 4] 2748         CALL     PLUS
      000E09 CD 01 DE         [ 4] 2749         CALL     CAT
      000E0C CD 04 9B         [ 4] 2750         CALL     SUBB
      000E0F CD 03 EC         [ 4] 2751         CALL     QDUP
      000E12 CD 01 6B         [ 4] 2752         CALL     QBRAN
      000E15 0E 1D                 2753         .word      SAME2
      000E17 CD 02 11         [ 4] 2754         CALL     RFROM
      000E1A CC 02 5D         [ 2] 2755         JP     DROP
      000E1D CD 01 4C         [ 4] 2756 SAME2:  CALL     DONXT
      000E20 0D F4                 2757         .word      SAME1
      000E22 CC 07 50         [ 2] 2758         JP     ZERO
                                   2759 
                                   2760 ;       find    ( a va -- ca na | a F )
                                   2761 ;       Search vocabulary for string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2762 ;       Return ca and na if succeeded.
      000E25 0D E6                 2763         .word      LINK
                           000E27  2764 LINK = . 
      000E27 04                    2765         .byte      4
      000E28 46 49 4E 44           2766         .ascii     "FIND"
      000E2C                       2767 FIND:
      000E2C CD 02 77         [ 4] 2768         CALL     SWAPP
      000E2F CD 02 67         [ 4] 2769         CALL     DUPP
      000E32 CD 01 DE         [ 4] 2770         CALL     CAT
      000E35 CD 03 33         [ 4] 2771         CALL     TEMP
      000E38 CD 01 A9         [ 4] 2772         CALL     STORE
      000E3B CD 02 67         [ 4] 2773         CALL     DUPP
      000E3E CD 01 C0         [ 4] 2774         CALL     AT
      000E41 CD 02 30         [ 4] 2775         CALL     TOR
      000E44 CD 06 F1         [ 4] 2776         CALL     CELLP
      000E47 CD 02 77         [ 4] 2777         CALL     SWAPP
      000E4A CD 01 C0         [ 4] 2778 FIND1:  CALL     AT
      000E4D CD 02 67         [ 4] 2779         CALL     DUPP
      000E50 CD 01 6B         [ 4] 2780         CALL     QBRAN
      000E53 0E 89                 2781         .word      FIND6
      000E55 CD 02 67         [ 4] 2782         CALL     DUPP
      000E58 CD 01 C0         [ 4] 2783         CALL     AT
      000E5B CD 01 38         [ 4] 2784         CALL     DOLIT
      000E5E 1F 7F                 2785         .word      MASKK
      000E60 CD 02 B3         [ 4] 2786         CALL     ANDD
      000E63 CD 02 24         [ 4] 2787         CALL     RAT
      000E66 CD 02 DC         [ 4] 2788         CALL     XORR
      000E69 CD 01 6B         [ 4] 2789         CALL     QBRAN
      000E6C 0E 78                 2790         .word      FIND2
      000E6E CD 06 F1         [ 4] 2791         CALL     CELLP
      000E71 CD 01 38         [ 4] 2792         CALL     DOLIT
      000E74 FF FF                 2793         .word     0xFFFF
      000E76 20 0C            [ 2] 2794         JRA     FIND3
      000E78 CD 06 F1         [ 4] 2795 FIND2:  CALL     CELLP
      000E7B CD 03 33         [ 4] 2796         CALL     TEMP
      000E7E CD 01 C0         [ 4] 2797         CALL     AT
      000E81 CD 0D EC         [ 4] 2798         CALL     SAMEQ
      000E84 CD 01 82         [ 4] 2799 FIND3:  CALL     BRAN
      000E87 0E 98                 2800         .word      FIND4
      000E89 CD 02 11         [ 4] 2801 FIND6:  CALL     RFROM
      000E8C CD 02 5D         [ 4] 2802         CALL     DROP
      000E8F CD 02 77         [ 4] 2803         CALL     SWAPP
      000E92 CD 07 00         [ 4] 2804         CALL     CELLM
      000E95 CC 02 77         [ 2] 2805         JP     SWAPP
      000E98 CD 01 6B         [ 4] 2806 FIND4:  CALL     QBRAN
      000E9B 0E A5                 2807         .word      FIND5
      000E9D CD 07 00         [ 4] 2808         CALL     CELLM
      000EA0 CD 07 00         [ 4] 2809         CALL     CELLM
      000EA3 20 A5            [ 2] 2810         JRA     FIND1
      000EA5 CD 02 11         [ 4] 2811 FIND5:  CALL     RFROM
      000EA8 CD 02 5D         [ 4] 2812         CALL     DROP
      000EAB CD 02 77         [ 4] 2813         CALL     SWAPP
      000EAE CD 02 5D         [ 4] 2814         CALL     DROP
      000EB1 CD 07 00         [ 4] 2815         CALL     CELLM
      000EB4 CD 02 67         [ 4] 2816         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000EB7 CD 0D D6         [ 4] 2817         CALL     NAMET
      000EBA CC 02 77         [ 2] 2818         JP     SWAPP
                                   2819 
                                   2820 ;       NAME?   ( a -- ca na | a F )
                                   2821 ;       Search vocabularies for a string.
      000EBD 0E 27                 2822         .word      LINK
                           000EBF  2823 LINK = . 
      000EBF 05                    2824         .byte      5
      000EC0 4E 41 4D 45 3F        2825         .ascii     "NAME?"
      000EC5                       2826 NAMEQ:
      000EC5 CD 03 95         [ 4] 2827         CALL   CNTXT
      000EC8 CC 0E 2C         [ 2] 2828         JP     FIND
                                   2829 
                                   2830 ;; Terminal response
                                   2831 
                                   2832 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2833 ;       Backup cursor by one character.
      000ECB 0E BF                 2834         .word      LINK
                           000ECD  2835 LINK = . 
      000ECD 02                    2836         .byte      2
      000ECE 5E 48                 2837         .ascii     "^H"
      000ED0                       2838 BKSP:
      000ED0 CD 02 30         [ 4] 2839         CALL     TOR
      000ED3 CD 02 91         [ 4] 2840         CALL     OVER
      000ED6 CD 02 11         [ 4] 2841         CALL     RFROM
      000ED9 CD 02 77         [ 4] 2842         CALL     SWAPP
      000EDC CD 02 91         [ 4] 2843         CALL     OVER
      000EDF CD 02 DC         [ 4] 2844         CALL     XORR
      000EE2 CD 01 6B         [ 4] 2845         CALL     QBRAN
      000EE5 0F 00                 2846         .word      BACK1
      000EE7 CD 01 38         [ 4] 2847         CALL     DOLIT
      000EEA 00 08                 2848         .word      BKSPP
      000EEC CD 01 22         [ 4] 2849         CALL     EMIT
      000EEF CD 07 29         [ 4] 2850         CALL     ONEM
      000EF2 CD 07 43         [ 4] 2851         CALL     BLANK
      000EF5 CD 01 22         [ 4] 2852         CALL     EMIT
      000EF8 CD 01 38         [ 4] 2853         CALL     DOLIT
      000EFB 00 08                 2854         .word      BKSPP
      000EFD CC 01 22         [ 2] 2855         JP     EMIT
      000F00 81               [ 4] 2856 BACK1:  RET
                                   2857 
                                   2858 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2859 ;       Accept and echo key stroke
                                   2860 ;       and bump cursor.
      000F01 0E CD                 2861         .word      LINK
                           000F03  2862 LINK = . 
      000F03 03                    2863         .byte      3
      000F04 54 41 50              2864         .ascii     "TAP"
      000F07                       2865 TAP:
      000F07 CD 02 67         [ 4] 2866         CALL     DUPP
      000F0A CD 01 22         [ 4] 2867         CALL     EMIT
      000F0D CD 02 91         [ 4] 2868         CALL     OVER
      000F10 CD 01 CD         [ 4] 2869         CALL     CSTOR
      000F13 CC 07 1C         [ 2] 2870         JP     ONEP
                                   2871 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2872 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2873 ;       Process a key stroke,
                                   2874 ;       CR or backspace.
      000F16 0F 03                 2875         .word      LINK
                           000F18  2876 LINK = . 
      000F18 04                    2877         .byte      4
      000F19 4B 54 41 50           2878         .ascii     "KTAP"
      000F1D                       2879 KTAP:
      000F1D CD 02 67         [ 4] 2880         CALL     DUPP
      000F20 CD 01 38         [ 4] 2881         CALL     DOLIT
      000F23 00 0D                 2882         .word      CRR
      000F25 CD 02 DC         [ 4] 2883         CALL     XORR
      000F28 CD 01 6B         [ 4] 2884         CALL     QBRAN
      000F2B 0F 43                 2885         .word      KTAP2
      000F2D CD 01 38         [ 4] 2886         CALL     DOLIT
      000F30 00 08                 2887         .word      BKSPP
      000F32 CD 02 DC         [ 4] 2888         CALL     XORR
      000F35 CD 01 6B         [ 4] 2889         CALL     QBRAN
      000F38 0F 40                 2890         .word      KTAP1
      000F3A CD 07 43         [ 4] 2891         CALL     BLANK
      000F3D CC 0F 07         [ 2] 2892         JP     TAP
      000F40 CC 0E D0         [ 2] 2893 KTAP1:  JP     BKSP
      000F43 CD 02 5D         [ 4] 2894 KTAP2:  CALL     DROP
      000F46 CD 02 77         [ 4] 2895         CALL     SWAPP
      000F49 CD 02 5D         [ 4] 2896         CALL     DROP
      000F4C CC 02 67         [ 2] 2897         JP     DUPP
                                   2898 
                                   2899 ;       accept  ( b u -- b u )
                                   2900 ;       Accept characters to input
                                   2901 ;       buffer. Return with actual count.
      000F4F 0F 18                 2902         .word      LINK
                           000F51  2903 LINK = . 
      000F51 06                    2904         .byte      6
      000F52 41 43 43 45 50 54     2905         .ascii     "ACCEPT"
      000F58                       2906 ACCEP:
      000F58 CD 02 91         [ 4] 2907         CALL     OVER
      000F5B CD 04 3D         [ 4] 2908         CALL     PLUS
      000F5E CD 02 91         [ 4] 2909         CALL     OVER
      000F61 CD 04 28         [ 4] 2910 ACCP1:  CALL     DDUP
      000F64 CD 02 DC         [ 4] 2911         CALL     XORR
      000F67 CD 01 6B         [ 4] 2912         CALL     QBRAN
      000F6A 0F 8C                 2913         .word      ACCP4
      000F6C CD 0B 36         [ 4] 2914         CALL     KEY
      000F6F CD 02 67         [ 4] 2915         CALL     DUPP
      000F72 CD 07 43         [ 4] 2916         CALL     BLANK
      000F75 CD 01 38         [ 4] 2917         CALL     DOLIT
      000F78 00 7F                 2918         .word      127
      000F7A CD 05 5D         [ 4] 2919         CALL     WITHI
      000F7D CD 01 6B         [ 4] 2920         CALL     QBRAN
      000F80 0F 87                 2921         .word      ACCP2
      000F82 CD 0F 07         [ 4] 2922         CALL     TAP
      000F85 20 03            [ 2] 2923         JRA     ACCP3
      000F87 CD 0F 1D         [ 4] 2924 ACCP2:  CALL     KTAP
      000F8A 20 D5            [ 2] 2925 ACCP3:  JRA     ACCP1
      000F8C CD 02 5D         [ 4] 2926 ACCP4:  CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F8F CD 02 91         [ 4] 2927         CALL     OVER
      000F92 CC 04 9B         [ 2] 2928         JP     SUBB
                                   2929 
                                   2930 ;       QUERY   ( -- )
                                   2931 ;       Accept input stream to
                                   2932 ;       terminal input buffer.
      000F95 0F 51                 2933         .word      LINK
                                   2934         
                           000F97  2935 LINK = . 
      000F97 05                    2936         .byte      5
      000F98 51 55 45 52 59        2937         .ascii     "QUERY"
      000F9D                       2938 QUERY:
      000F9D CD 08 5F         [ 4] 2939         CALL     TIB
      000FA0 CD 01 38         [ 4] 2940         CALL     DOLIT
      000FA3 00 50                 2941         .word      80
      000FA5 CD 0F 58         [ 4] 2942         CALL     ACCEP
      000FA8 CD 03 52         [ 4] 2943         CALL     NTIB
      000FAB CD 01 A9         [ 4] 2944         CALL     STORE
      000FAE CD 02 5D         [ 4] 2945         CALL     DROP
      000FB1 CD 07 50         [ 4] 2946         CALL     ZERO
      000FB4 CD 03 42         [ 4] 2947         CALL     INN
      000FB7 CC 01 A9         [ 2] 2948         JP     STORE
                                   2949 
                                   2950 ;       ABORT   ( -- )
                                   2951 ;       Reset data stack and
                                   2952 ;       jump to QUIT.
      000FBA 0F 97                 2953         .word      LINK
                           000FBC  2954 LINK = . 
      000FBC 05                    2955         .byte      5
      000FBD 41 42 4F 52 54        2956         .ascii     "ABORT"
      000FC2                       2957 ABORT:
      000FC2 CD 10 B9         [ 4] 2958         CALL     PRESE
      000FC5 CC 10 D6         [ 2] 2959         JP     QUIT
                                   2960 
                                   2961 ;       abort"  ( f -- )
                                   2962 ;       Run time routine of ABORT".
                                   2963 ;       Abort with a message.
      000FC8 0F BC                 2964         .word      LINK
                           000FCA  2965 LINK = . 
      000FCA 46                    2966 	.byte      COMPO+6
      000FCB 41 42 4F 52 54        2967         .ascii     "ABORT"
      000FD0 22                    2968         .byte      '"'
      000FD1                       2969 ABORQ:
      000FD1 CD 01 6B         [ 4] 2970         CALL     QBRAN
      000FD4 0F F0                 2971         .word      ABOR2   ;text flag
      000FD6 CD 0B CC         [ 4] 2972         CALL     DOSTR
      000FD9 CD 0B 6E         [ 4] 2973 ABOR1:  CALL     SPACE
      000FDC CD 08 26         [ 4] 2974         CALL     COUNT
      000FDF CD 0B 98         [ 4] 2975         CALL     TYPES
      000FE2 CD 01 38         [ 4] 2976         CALL     DOLIT
      000FE5 00 3F                 2977         .word     63 ; "?"
      000FE7 CD 01 22         [ 4] 2978         CALL     EMIT
      000FEA CD 0B B6         [ 4] 2979         CALL     CR
      000FED CC 0F C2         [ 2] 2980         JP     ABORT   ;pass error string
      000FF0 CD 0B CC         [ 4] 2981 ABOR2:  CALL     DOSTR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FF3 CC 02 5D         [ 2] 2982         JP     DROP
                                   2983 
                                   2984 ;; The text interpreter
                                   2985 
                                   2986 ;       $INTERPRET      ( a -- )
                                   2987 ;       Interpret a word. If failed,
                                   2988 ;       try to convert it to an integer.
      000FF6 0F CA                 2989         .word      LINK
                           000FF8  2990 LINK = . 
      000FF8 0A                    2991         .byte      10
      000FF9 24 49 4E 54 45 52 50  2992         .ascii     "$INTERPRET"
             52 45 54
      001003                       2993 INTER:
      001003 CD 0E C5         [ 4] 2994         CALL     NAMEQ
      001006 CD 03 EC         [ 4] 2995         CALL     QDUP    ;?defined
      001009 CD 01 6B         [ 4] 2996         CALL     QBRAN
      00100C 10 2D                 2997         .word      INTE1
      00100E CD 01 C0         [ 4] 2998         CALL     AT
      001011 CD 01 38         [ 4] 2999         CALL     DOLIT
      001014 40 00                 3000 	.word       0x4000	; COMPO*256
      001016 CD 02 B3         [ 4] 3001         CALL     ANDD    ;?compile only lexicon bits
      001019 CD 0F D1         [ 4] 3002         CALL     ABORQ
      00101C 0D                    3003         .byte      13
      00101D 20 63 6F 6D 70 69 6C  3004         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00102A CC 01 92         [ 2] 3005         JP     EXECU
      00102D CD 0A 63         [ 4] 3006 INTE1:  CALL     NUMBQ   ;convert a number
      001030 CD 01 6B         [ 4] 3007         CALL     QBRAN
      001033 0F D9                 3008         .word    ABOR1
      001035 81               [ 4] 3009         RET
                                   3010 
                                   3011 ;       [       ( -- )
                                   3012 ;       Start  text interpreter.
      001036 0F F8                 3013         .word      LINK
                           001038  3014 LINK = . 
      001038 81                    3015 	.byte      IMEDD+1
      001039 5B                    3016         .ascii     "["
      00103A                       3017 LBRAC:
      00103A CD 01 38         [ 4] 3018         CALL   DOLIT
      00103D 10 03                 3019         .word  INTER
      00103F CD 03 73         [ 4] 3020         CALL   TEVAL
      001042 CC 01 A9         [ 2] 3021         JP     STORE
                                   3022 
                                   3023 ;       .OK     ( -- )
                                   3024 ;       Display 'ok' while interpreting.
      001045 10 38                 3025         .word      LINK
                           001047  3026 LINK = . 
      001047 03                    3027         .byte      3
      001048 2E 4F 4B              3028         .ascii     ".OK"
      00104B                       3029 DOTOK:
      00104B CD 01 38         [ 4] 3030         CALL     DOLIT
      00104E 10 03                 3031         .word      INTER
      001050 CD 03 73         [ 4] 3032         CALL     TEVAL
      001053 CD 01 C0         [ 4] 3033         CALL     AT
      001056 CD 04 C3         [ 4] 3034         CALL     EQUAL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001059 CD 01 6B         [ 4] 3035         CALL     QBRAN
      00105C 10 65                 3036         .word      DOTO1
      00105E CD 0B F5         [ 4] 3037         CALL     DOTQP
      001061 03                    3038         .byte      3
      001062 20 6F 6B              3039         .ascii     " ok"
      001065 CC 0B B6         [ 2] 3040 DOTO1:  JP     CR
                                   3041 
                                   3042 ;       ?STACK  ( -- )
                                   3043 ;       Abort if stack underflows.
      001068 10 47                 3044         .word      LINK
                           00106A  3045 LINK = . 
      00106A 06                    3046         .byte      6
      00106B 3F 53 54 41 43 4B     3047         .ascii     "?STACK"
      001071                       3048 QSTAC: 
      001071 CD 07 93         [ 4] 3049         CALL     DEPTH
      001074 CD 02 A0         [ 4] 3050         CALL     ZLESS   ;check only for underflow
      001077 CD 0F D1         [ 4] 3051         CALL     ABORQ
      00107A 0B                    3052         .byte      11
      00107B 20 75 6E 64 65 72 66  3053         .ascii     " underflow "
             6C 6F 77 20
      001086 81               [ 4] 3054         RET
                                   3055 
                                   3056 ;       EVAL    ( -- )
                                   3057 ;       Interpret  input stream.
      001087 10 6A                 3058         .word      LINK
                           001089  3059 LINK = . 
      001089 04                    3060         .byte      4
      00108A 45 56 41 4C           3061         .ascii     "EVAL"
      00108E                       3062 EVAL:
      00108E CD 0D C8         [ 4] 3063 EVAL1:  CALL     TOKEN
      001091 CD 02 67         [ 4] 3064         CALL     DUPP
      001094 CD 01 DE         [ 4] 3065         CALL     CAT     ;?input stream empty
      001097 CD 01 6B         [ 4] 3066         CALL     QBRAN
      00109A 10 AA                 3067         .word    EVAL2
      00109C CD 03 73         [ 4] 3068         CALL     TEVAL
      00109F CD 08 73         [ 4] 3069         CALL     ATEXE
      0010A2 CD 10 71         [ 4] 3070         CALL     QSTAC   ;evaluate input, check stack
      0010A5 CD 01 82         [ 4] 3071         CALL     BRAN
      0010A8 10 8E                 3072         .word    EVAL1
      0010AA CD 02 5D         [ 4] 3073 EVAL2:  CALL     DROP
      0010AD CC 10 4B         [ 2] 3074         JP       DOTOK
                                   3075 
                                   3076 ;       PRESET  ( -- )
                                   3077 ;       Reset data stack pointer and
                                   3078 ;       terminal input buffer.
      0010B0 10 89                 3079         .word      LINK
                           0010B2  3080 LINK = . 
      0010B2 06                    3081         .byte      6
      0010B3 50 52 45 53 45 54     3082         .ascii     "PRESET"
      0010B9                       3083 PRESE:
      0010B9 CD 01 38         [ 4] 3084         CALL     DOLIT
      0010BC 16 70                 3085         .word      SPP
      0010BE CD 02 54         [ 4] 3086         CALL     SPSTO
      0010C1 CD 01 38         [ 4] 3087         CALL     DOLIT
      0010C4 17 00                 3088         .word      TIBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0010C6 CD 03 52         [ 4] 3089         CALL     NTIB
      0010C9 CD 06 F1         [ 4] 3090         CALL     CELLP
      0010CC CC 01 A9         [ 2] 3091         JP     STORE
                                   3092 
                                   3093 ;       QUIT    ( -- )
                                   3094 ;       Reset return stack pointer
                                   3095 ;       and start text interpreter.
      0010CF 10 B2                 3096         .word      LINK
                           0010D1  3097 LINK = . 
      0010D1 04                    3098         .byte      4
      0010D2 51 55 49 54           3099         .ascii     "QUIT"
      0010D6                       3100 QUIT:
      0010D6 CD 01 38         [ 4] 3101         CALL     DOLIT
      0010D9 17 FF                 3102         .word      RPP
      0010DB CD 01 FB         [ 4] 3103         CALL     RPSTO   ;reset return stack pointer
      0010DE CD 10 3A         [ 4] 3104 QUIT1:  CALL     LBRAC   ;start interpretation
      0010E1 CD 0F 9D         [ 4] 3105 QUIT2:  CALL     QUERY   ;get input
      0010E4 CD 10 8E         [ 4] 3106         CALL     EVAL
      0010E7 20 F8            [ 2] 3107         JRA     QUIT2   ;continue till error
                                   3108 
                                   3109 ;; The compiler
                                   3110 
                                   3111 ;       '       ( -- ca )
                                   3112 ;       Search vocabularies for
                                   3113 ;       next word in input stream.
      0010E9 10 D1                 3114         .word      LINK
                           0010EB  3115 LINK = . 
      0010EB 01                    3116         .byte      1
      0010EC 27                    3117         .ascii     "'"
      0010ED                       3118 TICK:
      0010ED CD 0D C8         [ 4] 3119         CALL     TOKEN
      0010F0 CD 0E C5         [ 4] 3120         CALL     NAMEQ   ;?defined
      0010F3 CD 01 6B         [ 4] 3121         CALL     QBRAN
      0010F6 0F D9                 3122         .word      ABOR1
      0010F8 81               [ 4] 3123         RET     ;yes, push code address
                                   3124 
                                   3125 ;       ALLOT   ( n -- )
                           000001  3126 .if PICATOUT_MOD
                                   3127 ;       Allocate n bytes to RAM 
                           000000  3128 .else 
                                   3129 ;       Allocate n bytes to  code dictionary.
                                   3130 .endif 
      0010F9 10 EB                 3131         .word      LINK
                           0010FB  3132 LINK = . 
      0010FB 05                    3133         .byte      5
      0010FC 41 4C 4C 4F 54        3134         .ascii     "ALLOT"
      001101                       3135 ALLOT:
      001101 CD 03 A3         [ 4] 3136         CALL     VPP
                           000001  3137 .if PICATOUT_MOD
                                   3138 ; must update APP_VP each time VP is modidied
      001104 CD 07 BF         [ 4] 3139         call PSTOR 
      001107 CD 17 56         [ 4] 3140         call UPDATVP 
                           000000  3141 .else
                                   3142         JP     PSTOR
                                   3143 .endif ;PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3144 
                                   3145 ;       ,       ( w -- )
                                   3146 ;         Compile an integer into
                                   3147 ;         variable space.
      00110A 10 FB                 3148         .word      LINK
                           00110C  3149 LINK = . 
      00110C 01                    3150         .byte      1
      00110D 2C                    3151         .ascii     ","
      00110E                       3152 COMMA:
      00110E CD 08 3D         [ 4] 3153         CALL     HERE
      001111 CD 02 67         [ 4] 3154         CALL     DUPP
      001114 CD 06 F1         [ 4] 3155         CALL     CELLP   ;cell boundary
      001117 CD 03 A3         [ 4] 3156         CALL     VPP
      00111A CD 01 A9         [ 4] 3157         CALL     STORE
      00111D CC 01 A9         [ 2] 3158         JP     STORE
                                   3159 
                                   3160 ;       C,      ( c -- )
                                   3161 ;       Compile a byte into
                                   3162 ;       variables space.
      001120 11 0C                 3163        .word      LINK
                           001122  3164 LINK = . 
      001122 02                    3165         .byte      2
      001123 43 2C                 3166         .ascii     "C,"
      001125                       3167 CCOMMA:
      001125 CD 08 3D         [ 4] 3168         CALL     HERE
      001128 CD 02 67         [ 4] 3169         CALL     DUPP
      00112B CD 07 1C         [ 4] 3170         CALL     ONEP
      00112E CD 03 A3         [ 4] 3171         CALL     VPP
      001131 CD 01 A9         [ 4] 3172         CALL     STORE
      001134 CC 01 CD         [ 2] 3173         JP     CSTOR
                                   3174 
                                   3175 ;       [COMPILE]       ( -- ; <string> )
                                   3176 ;       Compile next immediate
                                   3177 ;       word into code dictionary.
      001137 11 22                 3178         .word      LINK
                           001139  3179 LINK = . 
      001139 89                    3180 	.byte      IMEDD+9
      00113A 5B 43 4F 4D 50 49 4C  3181         .ascii     "[COMPILE]"
             45 5D
      001143                       3182 BCOMP:
      001143 CD 10 ED         [ 4] 3183         CALL     TICK
      001146 CC 13 BB         [ 2] 3184         JP     JSRC
                                   3185 
                                   3186 ;       COMPILE ( -- )
                                   3187 ;       Compile next jsr in
                                   3188 ;       colon list to code dictionary.
      001149 11 39                 3189         .word      LINK
                           00114B  3190 LINK = . 
      00114B 47                    3191 	.byte      COMPO+7
      00114C 43 4F 4D 50 49 4C 45  3192         .ascii     "COMPILE"
      001153                       3193 COMPI:
      001153 CD 02 11         [ 4] 3194         CALL     RFROM
      001156 CD 07 1C         [ 4] 3195         CALL     ONEP
      001159 CD 02 67         [ 4] 3196         CALL     DUPP
      00115C CD 01 C0         [ 4] 3197         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00115F CD 13 BB         [ 4] 3198         CALL     JSRC    ;compile subroutine
      001162 CD 06 F1         [ 4] 3199         CALL     CELLP
      001165 CC 02 30         [ 2] 3200         JP     TOR
                                   3201 
                                   3202 ;       LITERAL ( w -- )
                                   3203 ;       Compile tos to dictionary
                                   3204 ;       as an integer literal.
      001168 11 4B                 3205         .word      LINK
                           00116A  3206 LINK = . 
      00116A 87                    3207 	.byte      IMEDD+7
      00116B 4C 49 54 45 52 41 4C  3208         .ascii     "LITERAL"
      001172                       3209 LITER:
      001172 CD 11 53         [ 4] 3210         CALL     COMPI
      001175 CD 01 38         [ 4] 3211         CALL     DOLIT
      001178 CC 11 0E         [ 2] 3212         JP     COMMA
                                   3213 
                                   3214 ;       $,"     ( -- )
                                   3215 ;       Compile a literal string
                                   3216 ;       up to next " .
      00117B 11 6A                 3217         .word      LINK
                           00117D  3218 LINK = . 
      00117D 03                    3219         .byte      3
      00117E 24 2C 22              3220         .byte     '$',',','"'
      001181                       3221 STRCQ:
      001181 CD 01 38         [ 4] 3222         CALL     DOLIT
      001184 00 22                 3223         .word     34	; "
      001186 CD 0D 4B         [ 4] 3224         CALL     PARSE
      001189 CD 08 3D         [ 4] 3225         CALL     HERE
      00118C CD 08 FE         [ 4] 3226         CALL     PACKS   ;string to code dictionary
      00118F CD 08 26         [ 4] 3227         CALL     COUNT
      001192 CD 04 3D         [ 4] 3228         CALL     PLUS    ;calculate aligned end of string
      001195 CD 03 A3         [ 4] 3229         CALL     VPP
      001198 CC 01 A9         [ 2] 3230         JP     STORE
                                   3231 
                                   3232 ;; Structures
                                   3233 
                                   3234 ;       FOR     ( -- a )
                                   3235 ;       Start a FOR-NEXT loop
                                   3236 ;       structure in a colon definition.
      00119B 11 7D                 3237         .word      LINK
                           00119D  3238 LINK = . 
      00119D 83                    3239 	.byte      IMEDD+3
      00119E 46 4F 52              3240         .ascii     "FOR"
      0011A1                       3241 FOR:
      0011A1 CD 11 53         [ 4] 3242         CALL     COMPI
      0011A4 CD 02 30         [ 4] 3243         CALL     TOR
      0011A7 CC 08 3D         [ 2] 3244         JP     HERE
                                   3245 
                                   3246 ;       NEXT    ( a -- )
                                   3247 ;       Terminate a FOR-NEXT loop.
      0011AA 11 9D                 3248         .word      LINK
                           0011AC  3249 LINK = . 
      0011AC 84                    3250 	.byte      IMEDD+4
      0011AD 4E 45 58 54           3251         .ascii     "NEXT"
      0011B1                       3252 NEXT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011B1 CD 11 53         [ 4] 3253         CALL     COMPI
      0011B4 CD 01 4C         [ 4] 3254         CALL     DONXT
                           000001  3255 .if PICATOUT_MOD 
      0011B7 CD 03 DC         [ 4] 3256         call ADRADJ
                                   3257 .endif ; PICATOUT_MOD
      0011BA CC 11 0E         [ 2] 3258         JP     COMMA
                                   3259 
                                   3260 ;       BEGIN   ( -- a )
                                   3261 ;       Start an infinite or
                                   3262 ;       indefinite loop structure.
      0011BD 11 AC                 3263         .word      LINK
                           0011BF  3264 LINK = . 
      0011BF 85                    3265 	.byte      IMEDD+5
      0011C0 42 45 47 49 4E        3266         .ascii     "BEGIN"
      0011C5                       3267 BEGIN:
      0011C5 CC 08 3D         [ 2] 3268         JP     HERE
                                   3269 
                                   3270 ;       UNTIL   ( a -- )
                                   3271 ;       Terminate a BEGIN-UNTIL
                                   3272 ;       indefinite loop structure.
      0011C8 11 BF                 3273         .word      LINK
                           0011CA  3274 LINK = . 
      0011CA 85                    3275 	.byte      IMEDD+5
      0011CB 55 4E 54 49 4C        3276         .ascii     "UNTIL"
      0011D0                       3277 UNTIL:
      0011D0 CD 11 53         [ 4] 3278         CALL     COMPI
      0011D3 CD 01 6B         [ 4] 3279         CALL     QBRAN
                           000001  3280 .if PICATOUT_MOD 
      0011D6 CD 03 DC         [ 4] 3281         call ADRADJ
                                   3282 .endif ; PICATOUT_MOD
      0011D9 CC 11 0E         [ 2] 3283         JP     COMMA
                                   3284 
                                   3285 ;       AGAIN   ( a -- )
                                   3286 ;       Terminate a BEGIN-AGAIN
                                   3287 ;       infinite loop structure.
      0011DC 11 CA                 3288         .word      LINK
                           0011DE  3289 LINK = . 
      0011DE 85                    3290 	.byte      IMEDD+5
      0011DF 41 47 41 49 4E        3291         .ascii     "AGAIN"
      0011E4                       3292 AGAIN:
      0011E4 CD 11 53         [ 4] 3293         CALL     COMPI
      0011E7 CD 01 82         [ 4] 3294         CALL     BRAN
                           000001  3295 .if PICATOUT_MOD 
      0011EA CD 03 DC         [ 4] 3296         call ADRADJ 
                                   3297 .endif ; PICATOUT_MOD
      0011ED CC 11 0E         [ 2] 3298         JP     COMMA
                                   3299 
                                   3300 ;       IF      ( -- A )
                                   3301 ;       Begin a conditional branch.
      0011F0 11 DE                 3302         .word      LINK
                           0011F2  3303 LINK = . 
      0011F2 82                    3304 	.byte      IMEDD+2
      0011F3 49 46                 3305         .ascii     "IF"
      0011F5                       3306 IFF:
      0011F5 CD 11 53         [ 4] 3307         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      0011F8 CD 01 6B         [ 4] 3308         CALL     QBRAN
      0011FB CD 08 3D         [ 4] 3309         CALL     HERE
      0011FE CD 07 50         [ 4] 3310         CALL     ZERO
      001201 CC 11 0E         [ 2] 3311         JP     COMMA
                                   3312 
                                   3313 ;       THEN        ( A -- )
                                   3314 ;       Terminate a conditional branch structure.
      001204 11 F2                 3315         .word      LINK
                           001206  3316 LINK = . 
      001206 84                    3317 	.byte      IMEDD+4
      001207 54 48 45 4E           3318         .ascii     "THEN"
      00120B                       3319 THENN:
      00120B CD 08 3D         [ 4] 3320         CALL     HERE
                           000001  3321 .if PICATOUT_MOD 
      00120E CD 03 DC         [ 4] 3322         call ADRADJ 
                                   3323 .endif ; PICATOUT_MOD
      001211 CD 02 77         [ 4] 3324         CALL     SWAPP
      001214 CC 01 A9         [ 2] 3325         JP     STORE
                                   3326 
                                   3327 ;       ELSE        ( A -- A )
                                   3328 ;       Start the false clause in an IF-ELSE-THEN structure.
      001217 12 06                 3329         .word      LINK
                           001219  3330 LINK = . 
      001219 84                    3331 	.byte      IMEDD+4
      00121A 45 4C 53 45           3332         .ascii     "ELSE"
      00121E                       3333 ELSEE:
      00121E CD 11 53         [ 4] 3334         CALL     COMPI
      001221 CD 01 82         [ 4] 3335         CALL     BRAN
      001224 CD 08 3D         [ 4] 3336         CALL     HERE
      001227 CD 07 50         [ 4] 3337         CALL     ZERO
      00122A CD 11 0E         [ 4] 3338         CALL     COMMA
      00122D CD 02 77         [ 4] 3339         CALL     SWAPP
      001230 CD 08 3D         [ 4] 3340         CALL     HERE
                           000001  3341 .if PICATOUT_MOD 
      001233 CD 03 DC         [ 4] 3342         call ADRADJ 
                                   3343 .endif ; PICATOUT_MOD
      001236 CD 02 77         [ 4] 3344         CALL     SWAPP
      001239 CC 01 A9         [ 2] 3345         JP     STORE
                                   3346 
                                   3347 ;       AHEAD       ( -- A )
                                   3348 ;       Compile a forward branch instruction.
      00123C 12 19                 3349         .word      LINK
                           00123E  3350 LINK = . 
      00123E 85                    3351 	.byte      IMEDD+5
      00123F 41 48 45 41 44        3352         .ascii     "AHEAD"
      001244                       3353 AHEAD:
      001244 CD 11 53         [ 4] 3354         CALL     COMPI
      001247 CD 01 82         [ 4] 3355         CALL     BRAN
      00124A CD 08 3D         [ 4] 3356         CALL     HERE
      00124D CD 07 50         [ 4] 3357         CALL     ZERO
      001250 CC 11 0E         [ 2] 3358         JP     COMMA
                                   3359 
                                   3360 ;       WHILE       ( a -- A a )
                                   3361 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001253 12 3E                 3362         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                           001255  3363 LINK = . 
      001255 85                    3364 	.byte      IMEDD+5
      001256 57 48 49 4C 45        3365         .ascii     "WHILE"
      00125B                       3366 WHILE:
      00125B CD 11 53         [ 4] 3367         CALL     COMPI
      00125E CD 01 6B         [ 4] 3368         CALL     QBRAN
      001261 CD 08 3D         [ 4] 3369         CALL     HERE
      001264 CD 07 50         [ 4] 3370         CALL     ZERO
      001267 CD 11 0E         [ 4] 3371         CALL     COMMA
      00126A CC 02 77         [ 2] 3372         JP     SWAPP
                                   3373 
                                   3374 ;       REPEAT      ( A a -- )
                                   3375 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00126D 12 55                 3376         .word      LINK
                           00126F  3377 LINK = . 
      00126F 86                    3378         .byte      IMEDD+6
      001270 52 45 50 45 41 54     3379         .ascii     "REPEAT"
      001276                       3380 REPEA:
      001276 CD 11 53         [ 4] 3381         CALL     COMPI
      001279 CD 01 82         [ 4] 3382         CALL     BRAN
                           000001  3383 .if PICATOUT_MOD 
      00127C CD 03 DC         [ 4] 3384         call ADRADJ 
                                   3385 .endif ; PICATOUT_MOD
      00127F CD 11 0E         [ 4] 3386         CALL     COMMA
      001282 CD 08 3D         [ 4] 3387         CALL     HERE
                           000001  3388 .if PICATOUT_MOD 
      001285 CD 03 DC         [ 4] 3389         call ADRADJ 
                                   3390 .endif ; PICATOUT_MOD
      001288 CD 02 77         [ 4] 3391         CALL     SWAPP
      00128B CC 01 A9         [ 2] 3392         JP     STORE
                                   3393 
                                   3394 ;       AFT         ( a -- a A )
                                   3395 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00128E 12 6F                 3396         .word      LINK
                           001290  3397 LINK = . 
      001290 83                    3398 	.byte      IMEDD+3
      001291 41 46 54              3399         .ascii     "AFT"
      001294                       3400 AFT:
      001294 CD 02 5D         [ 4] 3401         CALL     DROP
      001297 CD 12 44         [ 4] 3402         CALL     AHEAD
      00129A CD 08 3D         [ 4] 3403         CALL     HERE
                           000001  3404 .if PICATOUT_MOD 
      00129D CD 03 DC         [ 4] 3405         call ADRADJ 
                                   3406 .endif ; PICATOUT_MOD
      0012A0 CC 02 77         [ 2] 3407         JP     SWAPP
                                   3408 
                                   3409 ;       ABORT"      ( -- ; <string> )
                                   3410 ;       Conditional abort with an error message.
      0012A3 12 90                 3411         .word      LINK
                           0012A5  3412 LINK = . 
      0012A5 86                    3413 	.byte      IMEDD+6
      0012A6 41 42 4F 52 54        3414         .ascii     "ABORT"
      0012AB 22                    3415         .byte      '"'
      0012AC                       3416 ABRTQ:
      0012AC CD 11 53         [ 4] 3417         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012AF CD 0F D1         [ 4] 3418         CALL     ABORQ
      0012B2 CC 11 81         [ 2] 3419         JP     STRCQ
                                   3420 
                                   3421 ;       $"     ( -- ; <string> )
                                   3422 ;       Compile an inline string literal.
      0012B5 12 A5                 3423         .word      LINK
                           0012B7  3424 LINK = . 
      0012B7 82                    3425 	.byte      IMEDD+2
      0012B8 24 22                 3426         .byte     '$','"'
      0012BA                       3427 STRQ:
      0012BA CD 11 53         [ 4] 3428         CALL     COMPI
      0012BD CD 0B EB         [ 4] 3429         CALL     STRQP
      0012C0 CC 11 81         [ 2] 3430         JP     STRCQ
                                   3431 
                                   3432 ;       ."          ( -- ; <string> )
                                   3433 ;       Compile an inline string literal to be typed out at run time.
      0012C3 12 B7                 3434         .word      LINK
                           0012C5  3435 LINK = . 
      0012C5 82                    3436 	.byte      IMEDD+2
      0012C6 2E 22                 3437         .byte     '.','"'
      0012C8                       3438 DOTQ:
      0012C8 CD 11 53         [ 4] 3439         CALL     COMPI
      0012CB CD 0B F5         [ 4] 3440         CALL     DOTQP
      0012CE CC 11 81         [ 2] 3441         JP     STRCQ
                                   3442 
                                   3443 ;; Name compiler
                                   3444 
                                   3445 ;       ?UNIQUE ( a -- a )
                                   3446 ;       Display a warning message
                                   3447 ;       if word already exists.
      0012D1 12 C5                 3448         .word      LINK
                           0012D3  3449 LINK = . 
      0012D3 07                    3450         .byte      7
      0012D4 3F 55 4E 49 51 55 45  3451         .ascii     "?UNIQUE"
      0012DB                       3452 UNIQU:
      0012DB CD 02 67         [ 4] 3453         CALL     DUPP
      0012DE CD 0E C5         [ 4] 3454         CALL     NAMEQ   ;?name exists
      0012E1 CD 01 6B         [ 4] 3455         CALL     QBRAN
      0012E4 12 FA                 3456         .word      UNIQ1
      0012E6 CD 0B F5         [ 4] 3457         CALL     DOTQP   ;redef are OK
      0012E9 07                    3458         .byte       7
      0012EA 20 72 65 44 65 66 20  3459         .ascii     " reDef "       
      0012F1 CD 02 91         [ 4] 3460         CALL     OVER
      0012F4 CD 08 26         [ 4] 3461         CALL     COUNT
      0012F7 CD 0B 98         [ 4] 3462         CALL     TYPES   ;just in case
      0012FA CC 02 5D         [ 2] 3463 UNIQ1:  JP     DROP
                                   3464 
                                   3465 ;       $,n     ( na -- )
                                   3466 ;       Build a new dictionary name
                                   3467 ;       using string at na.
                           000001  3468 .if PICATOUT_MOD
                                   3469 ; compile dans l'espace des variables 
                                   3470 .endif 
      0012FD 12 D3                 3471         .word      LINK
                           0012FF  3472 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      0012FF 03                    3473         .byte      3
      001300 24 2C 6E              3474         .ascii     "$,n"
      001303                       3475 SNAME:
      001303 CD 02 67         [ 4] 3476         CALL     DUPP
      001306 CD 01 DE         [ 4] 3477         CALL     CAT     ;?null input
      001309 CD 01 6B         [ 4] 3478         CALL     QBRAN
      00130C 13 39                 3479         .word      PNAM1
      00130E CD 12 DB         [ 4] 3480         CALL     UNIQU   ;?redefinition
      001311 CD 02 67         [ 4] 3481         CALL     DUPP
      001314 CD 08 26         [ 4] 3482         CALL     COUNT
      001317 CD 04 3D         [ 4] 3483         CALL     PLUS
      00131A CD 03 A3         [ 4] 3484         CALL     VPP
      00131D CD 01 A9         [ 4] 3485         CALL     STORE
      001320 CD 02 67         [ 4] 3486         CALL     DUPP
      001323 CD 03 C1         [ 4] 3487         CALL     LAST
      001326 CD 01 A9         [ 4] 3488         CALL     STORE   ;save na for vocabulary link
      001329 CD 07 00         [ 4] 3489         CALL     CELLM   ;link address
      00132C CD 03 95         [ 4] 3490         CALL     CNTXT
      00132F CD 01 C0         [ 4] 3491         CALL     AT
      001332 CD 02 77         [ 4] 3492         CALL     SWAPP
      001335 CD 01 A9         [ 4] 3493         CALL     STORE
      001338 81               [ 4] 3494         RET     ;save code pointer
      001339 CD 0B EB         [ 4] 3495 PNAM1:  CALL     STRQP
      00133C 05                    3496         .byte      5
      00133D 20 6E 61 6D 65        3497         .ascii     " name" ;null input
      001342 CC 0F D9         [ 2] 3498         JP     ABOR1
                                   3499 
                                   3500 ;; FORTH compiler
                                   3501 
                                   3502 ;       $COMPILE        ( a -- )
                                   3503 ;       Compile next word to
                                   3504 ;       dictionary as a token or literal.
      001345 12 FF                 3505         .word      LINK
                           001347  3506 LINK = . 
      001347 08                    3507         .byte      8
      001348 24 43 4F 4D 50 49 4C  3508         .ascii     "$COMPILE"
             45
      001350                       3509 SCOMP:
      001350 CD 0E C5         [ 4] 3510         CALL     NAMEQ
      001353 CD 03 EC         [ 4] 3511         CALL     QDUP    ;?defined
      001356 CD 01 6B         [ 4] 3512         CALL     QBRAN
      001359 13 71                 3513         .word      SCOM2
      00135B CD 01 C0         [ 4] 3514         CALL     AT
      00135E CD 01 38         [ 4] 3515         CALL     DOLIT
      001361 80 00                 3516         .word     0x8000	;  IMEDD*256
      001363 CD 02 B3         [ 4] 3517         CALL     ANDD    ;?immediate
      001366 CD 01 6B         [ 4] 3518         CALL     QBRAN
      001369 13 6E                 3519         .word      SCOM1
      00136B CC 01 92         [ 2] 3520         JP     EXECU
      00136E CC 13 BB         [ 2] 3521 SCOM1:  JP     JSRC
      001371 CD 0A 63         [ 4] 3522 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001374 CD 01 6B         [ 4] 3523         CALL     QBRAN
      001377 0F D9                 3524         .word      ABOR1
      001379 CC 11 72         [ 2] 3525         JP     LITER
                                   3526 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3527 ;       OVERT   ( -- )
                                   3528 ;       Link a new word into vocabulary.
      00137C 13 47                 3529         .word      LINK
                           00137E  3530 LINK = . 
      00137E 05                    3531         .byte      5
      00137F 4F 56 45 52 54        3532         .ascii     "OVERT"
      001384                       3533 OVERT:
      001384 CD 03 C1         [ 4] 3534         CALL     LAST
      001387 CD 01 C0         [ 4] 3535         CALL     AT
      00138A CD 03 95         [ 4] 3536         CALL     CNTXT
      00138D CC 01 A9         [ 2] 3537         JP     STORE
                                   3538 
                                   3539 ;       ;       ( -- )
                                   3540 ;       Terminate a colon definition.
      001390 13 7E                 3541         .word      LINK
                           001392  3542 LINK = . 
      001392 C1                    3543 	.byte      IMEDD+COMPO+1
      001393 3B                    3544         .ascii     ";"
      001394                       3545 SEMIS:
      001394 CD 11 53         [ 4] 3546         CALL     COMPI
      001397 CD 01 A2         [ 4] 3547         CALL     EXIT
      00139A CD 10 3A         [ 4] 3548         CALL     LBRAC
                           000001  3549 .if PICATOUT_MOD
      00139D CD 13 84         [ 4] 3550         call OVERT 
      0013A0 CD 1B D5         [ 4] 3551         CALL FMOVE 
      0013A3 81               [ 4] 3552         RET 
                           000000  3553 .else 
                                   3554         JP     OVERT
                                   3555 .endif 
                                   3556 
                                   3557 ;       ]       ( -- )
                                   3558 ;       Start compiling words in
                                   3559 ;       input stream.
      0013A4 13 92                 3560         .word      LINK
                           0013A6  3561 LINK = . 
      0013A6 01                    3562         .byte      1
      0013A7 5D                    3563         .ascii     "]"
      0013A8                       3564 RBRAC:
      0013A8 CD 01 38         [ 4] 3565         CALL   DOLIT
      0013AB 13 50                 3566         .word  SCOMP
      0013AD CD 03 73         [ 4] 3567         CALL   TEVAL
      0013B0 CC 01 A9         [ 2] 3568         JP     STORE
                                   3569 
                                   3570 ;       CALL,    ( ca -- )
                                   3571 ;       Compile a subroutine call.
      0013B3 13 A6                 3572         .word      LINK
                           0013B5  3573 LINK = . 
      0013B5 04                    3574         .byte      4
      0013B6 43 41 4C 4C 2C        3575         .ascii     "CALL,"
      0013BB                       3576 JSRC:
      0013BB CD 01 38         [ 4] 3577         CALL     DOLIT
      0013BE 00 CD                 3578         .word     CALLL     ;CALL
      0013C0 CD 11 25         [ 4] 3579         CALL     CCOMMA
      0013C3 CC 11 0E         [ 2] 3580         JP     COMMA
                                   3581 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3582 ;       :       ( -- ; <string> )
                                   3583 ;       Start a new colon definition
                                   3584 ;       using next word as its name.
      0013C6 13 B5                 3585         .word      LINK
                           0013C8  3586 LINK = . 
      0013C8 01                    3587         .byte      1
      0013C9 3A                    3588         .ascii     ":"
      0013CA                       3589 COLON:
                           000001  3590 .if PICATOUT_MOD
                                   3591 ; compute offset to adjust jump address 
      0013CA CD 03 B1         [ 4] 3592         call CPP 
      0013CD CD 01 C0         [ 4] 3593         call AT 
      0013D0 CD 08 3D         [ 4] 3594         call HERE
      0013D3 CD 04 9B         [ 4] 3595         call SUBB 
      0013D6 CD 03 D3         [ 4] 3596         call OFFSET 
      0013D9 CD 01 A9         [ 4] 3597         call STORE 
                                   3598 .endif ; PICATOUT_MOD
      0013DC CD 0D C8         [ 4] 3599         CALL   TOKEN
      0013DF CD 13 03         [ 4] 3600         CALL   SNAME
      0013E2 CC 13 A8         [ 2] 3601         JP     RBRAC
                                   3602 
                                   3603 ;       IMMEDIATE       ( -- )
                                   3604 ;       Make last compiled word
                                   3605 ;       an immediate word.
      0013E5 13 C8                 3606         .word      LINK
                           0013E7  3607 LINK = . 
      0013E7 09                    3608         .byte      9
      0013E8 49 4D 4D 45 44 49 41  3609         .ascii     "IMMEDIATE"
             54 45
      0013F1                       3610 IMMED:
      0013F1 CD 01 38         [ 4] 3611         CALL     DOLIT
      0013F4 80 00                 3612         .word     0x8000	;  IMEDD*256
      0013F6 CD 03 C1         [ 4] 3613         CALL     LAST
      0013F9 CD 01 C0         [ 4] 3614         CALL     AT
      0013FC CD 01 C0         [ 4] 3615         CALL     AT
      0013FF CD 02 C7         [ 4] 3616         CALL     ORR
      001402 CD 03 C1         [ 4] 3617         CALL     LAST
      001405 CD 01 C0         [ 4] 3618         CALL     AT
      001408 CC 01 A9         [ 2] 3619         JP     STORE
                                   3620 
                                   3621 ;; Defining words
                                   3622 
                                   3623 ;       CREATE  ( -- ; <string> )
                                   3624 ;       Compile a new array
                                   3625 ;       without allocating space.
      00140B 13 E7                 3626         .word      LINK
                           00140D  3627 LINK = . 
      00140D 06                    3628         .byte      6
      00140E 43 52 45 41 54 45     3629         .ascii     "CREATE"
      001414                       3630 CREAT:
      001414 CD 0D C8         [ 4] 3631         CALL     TOKEN
      001417 CD 13 03         [ 4] 3632         CALL     SNAME
      00141A CD 13 84         [ 4] 3633         CALL     OVERT        
      00141D CD 11 53         [ 4] 3634         CALL     COMPI 
      001420 CD 03 14         [ 4] 3635         CALL     DOVAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001423 81               [ 4] 3636         RET
                                   3637 
                                   3638 ;       VARIABLE        ( -- ; <string> )
                                   3639 ;       Compile a new variable
                                   3640 ;       initialized to 0.
      001424 14 0D                 3641         .word      LINK
                           001426  3642 LINK = . 
      001426 08                    3643         .byte      8
      001427 56 41 52 49 41 42 4C  3644         .ascii     "VARIABLE"
             45
      00142F                       3645 VARIA:
                           000001  3646 .if PICATOUT_MOD
                                   3647 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00142F CD 08 3D         [ 4] 3648         CALL HERE
      001432 CD 02 67         [ 4] 3649         CALL DUPP 
      001435 CD 06 F1         [ 4] 3650         CALL CELLP
      001438 CD 03 A3         [ 4] 3651         CALL VPP 
      00143B CD 01 A9         [ 4] 3652         CALL STORE
      00143E CD 17 56         [ 4] 3653         call UPDATVP 
                                   3654 .endif         
      001441 CD 14 14         [ 4] 3655         CALL CREAT
      001444 CD 02 67         [ 4] 3656         CALL DUPP
      001447 CD 11 0E         [ 4] 3657         CALL COMMA
      00144A CD 07 50         [ 4] 3658         CALL ZERO
                           000001  3659 .if PICATOUT_MOD 
      00144D CD 02 77         [ 4] 3660         call SWAPP 
      001450 CD 01 A9         [ 4] 3661         CALL STORE 
      001453 CD 1B D5         [ 4] 3662         CALL FMOVE ; move definition to FLASH
      001456 81               [ 4] 3663         RET 
                                   3664 .endif ;PICATOUT_MOD        
                                   3665 
                           000001  3666 .if PICATOUT_MOD
                                   3667 ;       CONSTANT  ( n -- ; <string> )
                                   3668 ;       Compile a new constant 
                                   3669 ;       n CONSTANT name 
      001457 14 26                 3670         .word LINK 
                           001459  3671         LINK=. 
      001459 08                    3672         .byte 8 
      00145A 43 4F 4E 53 54 41 4E  3673         .ascii "CONSTANT" 
             54
      001462                       3674 CONSTANT:          
      001462 CD 0D C8         [ 4] 3675         CALL TOKEN
      001465 CD 13 03         [ 4] 3676         CALL SNAME 
      001468 CD 13 84         [ 4] 3677         CALL OVERT 
      00146B CD 11 53         [ 4] 3678         CALL COMPI 
      00146E CD 14 82         [ 4] 3679         CALL DOCONST
      001471 CD 11 0E         [ 4] 3680         CALL COMMA 
      001474 CD 1B D5         [ 4] 3681         CALL FMOVE 
      001477 81               [ 4] 3682         RET          
                                   3683 
                                   3684 ; CONSTANT runtime semantic 
                                   3685 ; doCONST  ( -- n )
      001478 14 59                 3686         .word LINK 
                           00147A  3687         LINK=.
      00147A 07                    3688         .byte 7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00147B 44 4F 43 4F 4E 53 54  3689         .ascii "DOCONST"
      001482                       3690 DOCONST:
      001482 1D 00 02         [ 2] 3691         subw x,#CELLL
      001485 90 85            [ 2] 3692         popw y 
      001487 90 FE            [ 2] 3693         ldw y,(y) 
      001489 FF               [ 2] 3694         ldw (x),y 
      00148A 81               [ 4] 3695         ret 
                                   3696 .endif ;PICATOUT_MOD
                                   3697 
                                   3698 
                                   3699 ;; Tools
                                   3700 
                                   3701 ;       _TYPE   ( b u -- )
                                   3702 ;       Display a string. Filter
                                   3703 ;       non-printing characters.
      00148B 14 7A                 3704         .word      LINK
                           00148D  3705 LINK = . 
      00148D 05                    3706         .byte      5
      00148E 5F 54 59 50 45        3707         .ascii     "_TYPE"
      001493                       3708 UTYPE:
      001493 CD 02 30         [ 4] 3709         CALL     TOR     ;start count down loop
      001496 20 0F            [ 2] 3710         JRA     UTYP2   ;skip first pass
      001498 CD 02 67         [ 4] 3711 UTYP1:  CALL     DUPP
      00149B CD 01 DE         [ 4] 3712         CALL     CAT
      00149E CD 07 7A         [ 4] 3713         CALL     TCHAR
      0014A1 CD 01 22         [ 4] 3714         CALL     EMIT    ;display only printable
      0014A4 CD 07 1C         [ 4] 3715         CALL     ONEP    ;increment address
      0014A7 CD 01 4C         [ 4] 3716 UTYP2:  CALL     DONXT
      0014AA 14 98                 3717         .word      UTYP1   ;loop till done
      0014AC CC 02 5D         [ 2] 3718         JP     DROP
                                   3719 
                                   3720 ;       dm+     ( a u -- a )
                                   3721 ;       Dump u bytes from ,
                                   3722 ;       leaving a+u on  stack.
      0014AF 14 8D                 3723         .word      LINK
                           0014B1  3724 LINK = . 
      0014B1 03                    3725         .byte      3
      0014B2 64 6D 2B              3726         .ascii     "dm+"
      0014B5                       3727 DUMPP:
      0014B5 CD 02 91         [ 4] 3728         CALL     OVER
      0014B8 CD 01 38         [ 4] 3729         CALL     DOLIT
      0014BB 00 04                 3730         .word      4
      0014BD CD 0C 1E         [ 4] 3731         CALL     UDOTR   ;display address
      0014C0 CD 0B 6E         [ 4] 3732         CALL     SPACE
      0014C3 CD 02 30         [ 4] 3733         CALL     TOR     ;start count down loop
      0014C6 20 11            [ 2] 3734         JRA     PDUM2   ;skip first pass
      0014C8 CD 02 67         [ 4] 3735 PDUM1:  CALL     DUPP
      0014CB CD 01 DE         [ 4] 3736         CALL     CAT
      0014CE CD 01 38         [ 4] 3737         CALL     DOLIT
      0014D1 00 03                 3738         .word      3
      0014D3 CD 0C 1E         [ 4] 3739         CALL     UDOTR   ;display numeric data
      0014D6 CD 07 1C         [ 4] 3740         CALL     ONEP    ;increment address
      0014D9 CD 01 4C         [ 4] 3741 PDUM2:  CALL     DONXT
      0014DC 14 C8                 3742         .word      PDUM1   ;loop till done
      0014DE 81               [ 4] 3743         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3744 
                                   3745 ;       DUMP    ( a u -- )
                                   3746 ;       Dump u bytes from a,
                                   3747 ;       in a formatted manner.
      0014DF 14 B1                 3748         .word      LINK
                           0014E1  3749 LINK = . 
      0014E1 04                    3750         .byte      4
      0014E2 44 55 4D 50           3751         .ascii     "DUMP"
      0014E6                       3752 DUMP:
      0014E6 CD 03 24         [ 4] 3753         CALL     BASE
      0014E9 CD 01 C0         [ 4] 3754         CALL     AT
      0014EC CD 02 30         [ 4] 3755         CALL     TOR
      0014EF CD 09 F6         [ 4] 3756         CALL     HEX     ;save radix, set hex
      0014F2 CD 01 38         [ 4] 3757         CALL     DOLIT
      0014F5 00 10                 3758         .word      16
      0014F7 CD 06 42         [ 4] 3759         CALL     SLASH   ;change count to lines
      0014FA CD 02 30         [ 4] 3760         CALL     TOR     ;start count down loop
      0014FD CD 0B B6         [ 4] 3761 DUMP1:  CALL     CR
      001500 CD 01 38         [ 4] 3762         CALL     DOLIT
      001503 00 10                 3763         .word      16
      001505 CD 04 28         [ 4] 3764         CALL     DDUP
      001508 CD 14 B5         [ 4] 3765         CALL     DUMPP   ;display numeric
      00150B CD 03 FD         [ 4] 3766         CALL     ROT
      00150E CD 03 FD         [ 4] 3767         CALL     ROT
      001511 CD 0B 6E         [ 4] 3768         CALL     SPACE
      001514 CD 0B 6E         [ 4] 3769         CALL     SPACE
      001517 CD 14 93         [ 4] 3770         CALL     UTYPE   ;display printable characters
      00151A CD 01 4C         [ 4] 3771         CALL     DONXT
      00151D 14 FD                 3772         .word      DUMP1   ;loop till done
      00151F CD 02 5D         [ 4] 3773 DUMP3:  CALL     DROP
      001522 CD 02 11         [ 4] 3774         CALL     RFROM
      001525 CD 03 24         [ 4] 3775         CALL     BASE
      001528 CC 01 A9         [ 2] 3776         JP     STORE   ;restore radix
                                   3777 
                                   3778 ;       .S      ( ... -- ... )
                                   3779 ;        Display  contents of stack.
      00152B 14 E1                 3780         .word      LINK
                           00152D  3781 LINK = . 
      00152D 02                    3782         .byte      2
      00152E 2E 53                 3783         .ascii     ".S"
      001530                       3784 DOTS:
      001530 CD 0B B6         [ 4] 3785         CALL     CR
      001533 CD 07 93         [ 4] 3786         CALL     DEPTH   ;stack depth
      001536 CD 02 30         [ 4] 3787         CALL     TOR     ;start count down loop
      001539 20 0C            [ 2] 3788         JRA     DOTS2   ;skip first pass
      00153B CD 02 24         [ 4] 3789 DOTS1:  CALL     RAT
      00153E CD 07 1C         [ 4] 3790         CALL ONEP
      001541 CD 07 AA         [ 4] 3791 	CALL     PICK
      001544 CD 0C 51         [ 4] 3792         CALL     DOT     ;index stack, display contents
      001547 CD 01 4C         [ 4] 3793 DOTS2:  CALL     DONXT
      00154A 15 3B                 3794         .word      DOTS1   ;loop till done
      00154C CD 0B F5         [ 4] 3795         CALL     DOTQP
      00154F 05                    3796         .byte      5
      001550 20 3C 73 70 20        3797         .ascii     " <sp "
      001555 81               [ 4] 3798         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3799 
                                   3800 ;       >NAME   ( ca -- na | F )
                                   3801 ;       Convert code address
                                   3802 ;       to a name address.
      001556 15 2D                 3803         .word      LINK
                           001558  3804 LINK = . 
      001558 05                    3805         .byte      5
      001559 3E 4E 41 4D 45        3806         .ascii     ">NAME"
      00155E                       3807 TNAME:
      00155E CD 03 95         [ 4] 3808         CALL     CNTXT   ;vocabulary link
      001561 CD 01 C0         [ 4] 3809 TNAM2:  CALL     AT
      001564 CD 02 67         [ 4] 3810         CALL     DUPP    ;?last word in a vocabulary
      001567 CD 01 6B         [ 4] 3811         CALL     QBRAN
      00156A 15 85                 3812         .word      TNAM4
      00156C CD 04 28         [ 4] 3813         CALL     DDUP
      00156F CD 0D D6         [ 4] 3814         CALL     NAMET
      001572 CD 02 DC         [ 4] 3815         CALL     XORR    ;compare
      001575 CD 01 6B         [ 4] 3816         CALL     QBRAN
      001578 15 7F                 3817         .word      TNAM3
      00157A CD 07 00         [ 4] 3818         CALL     CELLM   ;continue with next word
      00157D 20 E2            [ 2] 3819         JRA     TNAM2
      00157F CD 02 77         [ 4] 3820 TNAM3:  CALL     SWAPP
      001582 CC 02 5D         [ 2] 3821         JP     DROP
      001585 CD 04 1D         [ 4] 3822 TNAM4:  CALL     DDROP
      001588 CC 07 50         [ 2] 3823         JP     ZERO
                                   3824 
                                   3825 ;       .ID     ( na -- )
                                   3826 ;        Display  name at address.
      00158B 15 58                 3827         .word      LINK
                           00158D  3828 LINK = . 
      00158D 03                    3829         .byte      3
      00158E 2E 49 44              3830         .ascii     ".ID"
      001591                       3831 DOTID:
      001591 CD 03 EC         [ 4] 3832         CALL     QDUP    ;if zero no name
      001594 CD 01 6B         [ 4] 3833         CALL     QBRAN
      001597 15 A7                 3834         .word      DOTI1
      001599 CD 08 26         [ 4] 3835         CALL     COUNT
      00159C CD 01 38         [ 4] 3836         CALL     DOLIT
      00159F 00 1F                 3837         .word      0x1F
      0015A1 CD 02 B3         [ 4] 3838         CALL     ANDD    ;mask lexicon bits
      0015A4 CC 14 93         [ 2] 3839         JP     UTYPE
      0015A7 CD 0B F5         [ 4] 3840 DOTI1:  CALL     DOTQP
      0015AA 09                    3841         .byte      9
      0015AB 20 6E 6F 4E 61 6D 65  3842         .ascii     " noName"
      0015B2 81               [ 4] 3843         RET
                                   3844 
                           000000  3845 WANT_SEE=0 
                           000000  3846 .if WANT_SEE 
                                   3847 ;       SEE     ( -- ; <string> )
                                   3848 ;       A simple decompiler.
                                   3849 ;       Updated for byte machines.
                                   3850         .word      LINK
                                   3851 LINK = . 
                                   3852         .byte      3
                                   3853         .ascii     "SEE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3854 SEE:
                                   3855         CALL     TICK    ;starting address
                                   3856         CALL     CR
                                   3857         CALL     ONEM
                                   3858 SEE1:   CALL     ONEP
                                   3859         CALL     DUPP
                                   3860         CALL     AT
                                   3861         CALL     DUPP    ;?does it contain a zero
                                   3862         CALL     QBRAN
                                   3863         .word    SEE2
                                   3864         CALL     TNAME   ;?is it a name
                                   3865 SEE2:   CALL     QDUP    ;name address or zero
                                   3866         CALL     QBRAN
                                   3867         .word    SEE3
                                   3868         CALL     SPACE
                                   3869         CALL     DOTID   ;display name
                                   3870         CALL     ONEP
                                   3871         JRA      SEE4
                                   3872 SEE3:   CALL     DUPP
                                   3873         CALL     CAT
                                   3874         CALL     UDOT    ;display number
                                   3875 SEE4:   CALL     NUFQ    ;user control
                                   3876         CALL     QBRAN
                                   3877         .word    SEE1
                                   3878         JP     DROP
                                   3879 .endif ; WANT_SEE 
                                   3880 
                                   3881 ;       WORDS   ( -- )
                                   3882 ;       Display names in vocabulary.
      0015B3 15 8D                 3883         .word      LINK
                           0015B5  3884 LINK = . 
      0015B5 05                    3885         .byte      5
      0015B6 57 4F 52 44 53        3886         .ascii     "WORDS"
      0015BB                       3887 WORDS:
      0015BB CD 0B B6         [ 4] 3888         CALL     CR
      0015BE CD 03 95         [ 4] 3889         CALL     CNTXT   ;only in context
      0015C1 CD 01 C0         [ 4] 3890 WORS1:  CALL     AT
      0015C4 CD 03 EC         [ 4] 3891         CALL     QDUP    ;?at end of list
      0015C7 CD 01 6B         [ 4] 3892         CALL     QBRAN
      0015CA 15 E0                 3893         .word      WORS2
      0015CC CD 02 67         [ 4] 3894         CALL     DUPP
      0015CF CD 0B 6E         [ 4] 3895         CALL     SPACE
      0015D2 CD 15 91         [ 4] 3896         CALL     DOTID   ;display a name
      0015D5 CD 07 00         [ 4] 3897         CALL     CELLM
      0015D8 CD 01 82         [ 4] 3898         CALL     BRAN
      0015DB 15 C1                 3899         .word      WORS1
      0015DD CD 02 5D         [ 4] 3900         CALL     DROP
      0015E0 81               [ 4] 3901 WORS2:  RET
                                   3902 
                                   3903         
                                   3904 ;; Hardware reset
                                   3905 
                                   3906 ;       hi      ( -- )
                                   3907 ;       Display sign-on message.
      0015E1 15 B5                 3908         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                           0015E3  3909 LINK = . 
      0015E3 02                    3910         .byte      2
      0015E4 68 69                 3911         .ascii     "hi"
      0015E6                       3912 HI:
      0015E6 CD 0B B6         [ 4] 3913         CALL     CR
      0015E9 CD 0B F5         [ 4] 3914         CALL     DOTQP   ;initialize I/O
      0015EC 0F                    3915         .byte      15
      0015ED 73 74 6D 38 65 46 6F  3916         .ascii     "stm8eForth v"
             72 74 68 20 76
      0015F9 32                    3917 	.byte      VER+'0'
      0015FA 2E                    3918         .byte      '.' 
      0015FB 31                    3919 	.byte      EXT+'0' ;version
      0015FC CC 0B B6         [ 2] 3920         JP     CR
                                   3921 
                           000000  3922 WANT_DEBUG=0
                           000000  3923 .if WANT_DEBUG 
                                   3924 ;       DEBUG      ( -- )
                                   3925 ;       Display sign-on message.
                                   3926 ;        .word      LINK
                                   3927 LINK = . 
                                   3928         .byte      5
                                   3929         .ascii     "DEBUG"
                                   3930 DEBUG:
                                   3931 	CALL DOLIT
                                   3932 	.word 0x65
                                   3933 	CALL EMIT
                                   3934 	CALL DOLIT
                                   3935 	.word 0
                                   3936  	CALL ZLESS 
                                   3937 	CALL DOLIT
                                   3938 	.word 0xFFFE
                                   3939 	CALL ZLESS 
                                   3940 	CALL UPLUS 
                                   3941  	CALL DROP 
                                   3942 	CALL DOLIT
                                   3943 	.word 3
                                   3944 	CALL UPLUS 
                                   3945 	CALL UPLUS 
                                   3946  	CALL DROP
                                   3947 	CALL DOLIT
                                   3948 	.word 0x43
                                   3949 	CALL UPLUS 
                                   3950  	CALL DROP
                                   3951 	CALL EMIT
                                   3952 	CALL DOLIT
                                   3953 	.word 0x4F
                                   3954 	CALL DOLIT
                                   3955 	.word 0x6F
                                   3956  	CALL XORR
                                   3957 	CALL DOLIT
                                   3958 	.word 0xF0
                                   3959  	CALL ANDD
                                   3960 	CALL DOLIT
                                   3961 	.word 0x4F
                                   3962  	CALL ORR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3963 	CALL EMIT
                                   3964 	CALL DOLIT
                                   3965 	.word 8
                                   3966 	CALL DOLIT
                                   3967 	.word 6
                                   3968  	CALL SWAPP
                                   3969 	CALL OVER
                                   3970 	CALL XORR
                                   3971 	CALL DOLIT
                                   3972 	.word 3
                                   3973 	CALL ANDD 
                                   3974 	CALL ANDD
                                   3975 	CALL DOLIT
                                   3976 	.word 0x70
                                   3977 	CALL UPLUS 
                                   3978 	CALL DROP
                                   3979 	CALL EMIT
                                   3980 	CALL DOLIT
                                   3981 	.word 0
                                   3982 	CALL QBRAN
                                   3983 	.word DEBUG1
                                   3984 	CALL DOLIT
                                   3985 	.word 0x3F
                                   3986 DEBUG1:
                                   3987 	CALL DOLIT
                                   3988 	.word 0xFFFF
                                   3989 	CALL QBRAN
                                   3990 	.word DEBUG2
                                   3991 	CALL DOLIT
                                   3992 	.word 0x74
                                   3993 	CALL BRAN
                                   3994 	.word DEBUG3
                                   3995 DEBUG2:
                                   3996 	CALL DOLIT
                                   3997 	.word 0x21
                                   3998 DEBUG3:
                                   3999 	CALL EMIT
                                   4000 	CALL DOLIT
                                   4001 	.word 0x68
                                   4002 	CALL DOLIT
                                   4003 	.word 0x80
                                   4004 	CALL STORE
                                   4005 	CALL DOLIT
                                   4006 	.word 0x80
                                   4007 	CALL AT
                                   4008 	CALL EMIT
                                   4009 	CALL DOLIT
                                   4010 	.word 0x4D
                                   4011 	CALL TOR
                                   4012 	CALL RAT
                                   4013 	CALL RFROM
                                   4014 	CALL ANDD
                                   4015 	CALL EMIT
                                   4016 	CALL DOLIT
                                   4017 	.word 0x61
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4018 	CALL DOLIT
                                   4019 	.word 0xA
                                   4020 	CALL TOR
                                   4021 DEBUG4:
                                   4022 	CALL DOLIT
                                   4023 	.word 1
                                   4024 	CALL UPLUS 
                                   4025 	CALL DROP
                                   4026 	CALL DONXT
                                   4027 	.word DEBUG4
                                   4028 	CALL EMIT
                                   4029 	CALL DOLIT
                                   4030 	.word 0x656D
                                   4031 	CALL DOLIT
                                   4032 	.word 0x100
                                   4033 	CALL UMSTA
                                   4034 	CALL SWAPP
                                   4035 	CALL DOLIT
                                   4036 	.word 0x100
                                   4037 	CALL UMSTA
                                   4038 	CALL SWAPP 
                                   4039 	CALL DROP
                                   4040 	CALL EMIT
                                   4041 	CALL EMIT
                                   4042 	CALL DOLIT
                                   4043 	.word 0x2043
                                   4044 	CALL DOLIT
                                   4045 	.word 0
                                   4046 	CALL DOLIT
                                   4047 	.word 0x100
                                   4048 	CALL UMMOD
                                   4049 	CALL EMIT
                                   4050 	CALL EMIT
                                   4051 	;JP ORIG
                                   4052 	RET
                                   4053 .endif ; WANT_DEBUG 
                                   4054 
                                   4055 
                                   4056 ;       'BOOT   ( -- a )
                                   4057 ;       The application startup vector.
      0015FF 15 E3                 4058         .word      LINK
                           001601  4059 LINK = . 
      001601 05                    4060         .byte      5
      001602 27 42 4F 4F 54        4061         .ascii     "'BOOT"
      001607                       4062 TBOOT:
      001607 CD 03 14         [ 4] 4063         CALL     DOVAR
      00160A 40 02                 4064         .word    APP_RUN      ;application to boot
                                   4065 
                                   4066 ;       COLD    ( -- )
                                   4067 ;       The hilevel cold start s=ence.
      00160C 16 01                 4068         .word      LINK
                           00160E  4069 LINK = . 
      00160E 04                    4070         .byte      4
      00160F 43 4F 4C 44           4071         .ascii     "COLD"
      001613                       4072 COLD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                           000000  4073 .if WANT_DEBUG
                                   4074         CALL DEBUG
                                   4075 .endif 
      001613 CD 01 38         [ 4] 4076 COLD1:  CALL     DOLIT
      001616 00 27                 4077         .word      UZERO
      001618 CD 01 38         [ 4] 4078 	CALL     DOLIT
      00161B 00 06                 4079         .word      UPP
      00161D CD 01 38         [ 4] 4080         CALL     DOLIT
      001620 00 16                 4081 	.word      UEND-UZERO
      001622 CD 08 8A         [ 4] 4082         CALL     CMOVE   ;initialize user area
                                   4083 
                           000001  4084 .if PICATOUT_MOD
                                   4085 ; if APP_RUN==0 initialize with ca de 'hi'  
      001625 90 CE 40 02      [ 2] 4086         ldw y,APP_RUN 
      001629 26 0B            [ 1] 4087         jrne 0$
      00162B 1D 00 02         [ 2] 4088         subw x,#CELLL 
      00162E 90 AE 15 E6      [ 2] 4089         ldw y,#HI  
      001632 FF               [ 2] 4090         ldw (x),y
      001633 CD 17 2E         [ 4] 4091         call UPDATRUN 
      001636                       4092 0$:        
                                   4093 ; update LAST with APP_LAST 
                                   4094 ; if APP_LAST > LAST else do the opposite
      001636 90 CE 40 00      [ 2] 4095         ldw y,APP_LAST 
      00163A 90 B3 1A         [ 2] 4096         cpw y,ULAST 
      00163D 22 05            [ 1] 4097         jrugt 1$ 
                                   4098 ; save LAST at APP_LAST  
      00163F CD 17 16         [ 4] 4099         call UPDATLAST 
      001642 20 06            [ 2] 4100         jra 2$
      001644                       4101 1$: ; update LAST with APP_LAST 
      001644 90 BF 1A         [ 2] 4102         ldw ULAST,y
      001647 90 BF 14         [ 2] 4103         ldw UCNTXT,y 
      00164A                       4104 2$:  
                                   4105 ; update APP_CP if < app_space 
      00164A 90 CE 40 04      [ 2] 4106         ldw y,APP_CP  
      00164E 90 B3 18         [ 2] 4107         cpw y,UCP   
      001651 24 06            [ 1] 4108         jruge 3$ 
      001653 CD 17 3F         [ 4] 4109         call UPDATCP
      001656 90 BE 18         [ 2] 4110         ldw y,UCP   
      001659                       4111 3$:
      001659 90 BF 18         [ 2] 4112         ldw UCP,y                 
                                   4113 ; update UVP with APP_VP  
                                   4114 ; if APP_VP>UVP else do the opposite 
      00165C 90 CE 40 06      [ 2] 4115         ldw y,APP_VP 
      001660 90 B3 16         [ 2] 4116         cpw y,UVP 
      001663 22 05            [ 1] 4117         jrugt 4$
      001665 CD 17 56         [ 4] 4118         call UPDATVP 
      001668 20 03            [ 2] 4119         jra 6$
      00166A                       4120 4$: ; update UVP with APP_VP 
      00166A 90 BF 16         [ 2] 4121         ldw UVP,y 
      00166D                       4122 6$:      
                                   4123 .endif ; PICATOUT_MOD
      00166D CD 10 B9         [ 4] 4124         CALL     PRESE   ;initialize data stack and TIB
      001670 CD 16 07         [ 4] 4125         CALL     TBOOT
      001673 CD 08 73         [ 4] 4126         CALL     ATEXE   ;application boot
      001676 CD 13 84         [ 4] 4127         CALL     OVERT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001679 CC 10 D6         [ 2] 4128         JP     QUIT    ;start interpretation
                                   4129 
                           000001  4130 .if PICATOUT_MOD
                                   4131         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4132         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      00167C 16 0E                   30     .word LINK 
                           00167E    31     LINK=.
      00167E 03                      32     .byte 3 
      00167F 46 50 21                33     .ascii "FP!"
      001682                         34 fptr_store:
      001682 90 93            [ 1]   35     ldw y,x
      001684 90 FE            [ 2]   36     ldw y,(y)
      001686 90 9F            [ 1]   37     ld a,yl 
      001688 B7 2E            [ 1]   38     ld FPTR,a 
      00168A 1C 00 02         [ 2]   39     addw x,#CELLL 
      00168D 90 93            [ 1]   40     ldw y,x 
      00168F 90 FE            [ 2]   41     ldw y,(y)
      001691 90 BF 2F         [ 2]   42     ldw PTR16,y
      001694 1C 00 02         [ 2]   43     addw x,#CELLL 
      001697 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001698 16 7E                   51     .word LINK 
                           00169A    52 LINK=.
      00169A 06                      53     .byte 6 
      00169B 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016A1                         55 EEPROM: 
      0016A1 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      0016A5 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      0016A8 EF 02            [ 2]   58     ldw (2,x),y 
      0016AA 90 5F            [ 1]   59     clrw y 
      0016AC FF               [ 2]   60     ldw (x),y 
      0016AD 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      0016AE 16 9A                   67 	.word LINK 
                           0016B0    68 	LINK=.
      0016B0 08                      69 	.byte 8 
      0016B1 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      0016B9                         71 EEPLAST:
      0016B9 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      0016BC 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      0016C0 EF 02            [ 2]   74 	ldw (2,x),y 
      0016C2 90 5F            [ 1]   75 	clrw y 
      0016C4 FF               [ 2]   76 	ldw (x),y 
      0016C5 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      0016C6 16 B0                   83 	.word LINK 
                           0016C8    84 	LINK=.
      0016C8 07                      85 	.byte 7
      0016C9 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      0016D0                         87 EEPRUN:
      0016D0 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      0016D3 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      0016D7 EF 02            [ 2]   90 	ldw (2,x),y 
      0016D9 90 5F            [ 1]   91 	clrw y 
      0016DB FF               [ 2]   92 	ldw (x),y 
      0016DC 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      0016DD 16 C8                   99 	.word LINK
                           0016DF   100 	LINK=.
      0016DF 06                     101 	.byte 6 
      0016E0 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      0016E6                        103 EEPCP:
      0016E6 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      0016E9 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      0016ED EF 02            [ 2]  106 	ldw (2,x),y 
      0016EF 90 5F            [ 1]  107 	clrw y 
      0016F1 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      0016F2 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      0016F3 16 DF                  115 	.word LINK
                           0016F5   116 	LINK=.
      0016F5 06                     117 	.byte 6
      0016F6 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      0016FC                        119 EEPVP:
      0016FC 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      0016FF 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001703 EF 02            [ 2]  122 	ldw (2,x),y 
      001705 90 5F            [ 1]  123 	clrw y 
      001707 FF               [ 2]  124 	ldw (x),y 
      001708 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001709 16 F5                  131 	.word LINK 
                           00170B   132 	LINK=.
      00170B 0A                     133 	.byte 10
      00170C 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001716                        135 UPDATLAST:
      001716 CD 03 C1         [ 4]  136 	call LAST
      001719 CD 01 C0         [ 4]  137 	call AT  
      00171C CD 16 B9         [ 4]  138 	call EEPLAST
      00171F CC 18 92         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001722 17 0B                  145 	.word LINK
                           001724   146 	LINK=.
      001724 09                     147 	.byte 9
      001725 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      00172E                        149 UPDATRUN:
      00172E CD 16 D0         [ 4]  150 	call EEPRUN
      001731 CC 18 92         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001734 17 24                  157 	.word LINK 
                           001736   158 	LINK=.
      001736 08                     159 	.byte 8 
      001737 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      00173F                        161 UPDATCP:
      00173F CD 03 B1         [ 4]  162 	call CPP 
      001742 CD 01 C0         [ 4]  163 	call AT 
      001745 CD 16 E6         [ 4]  164 	call EEPCP 
      001748 CC 18 92         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      00174B 17 36                  171 	.word LINK
                           00174D   172 	LINK=.
      00174D 08                     173 	.byte 8 
      00174E 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001756                        175 UPDATVP:
      001756 CD 03 A3         [ 4]  176 	call VPP 
      001759 CD 01 C0         [ 4]  177 	call AT
      00175C CD 16 FC         [ 4]  178 	call EEPVP 
      00175F CC 18 92         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001762 17 4D                  186     .word LINK 
                           001764   187 LINK=.
      001764 02                     188     .byte 2
      001765 46 40                  189     .ascii "F@"
      001767                        190 farat:
      001767 CD 16 82         [ 4]  191     call fptr_store
      00176A 92 BC 00 2E      [ 5]  192     ldf a,[FPTR]
      00176E 1D 00 02         [ 2]  193     subw x,#CELLL 
      001771 F7               [ 1]  194     ld (x),a 
      001772 90 AE 00 01      [ 2]  195     ldw y,#1
      001776 91 AF 00 2E      [ 1]  196     ldf a,([FPTR],y)
      00177A E7 01            [ 1]  197     ld (1,x),a
      00177C 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      00177D 17 64                  204     .word LINK
                           00177F   205     LINK=.
      00177F 03                     206     .byte 3 
      001780 46 43 40               207     .ascii "FC@" 
      001783                        208 farcat:
      001783 CD 16 82         [ 4]  209     call fptr_store 
      001786 92 BC 00 2E      [ 5]  210     ldf a,[FPTR]
      00178A 1D 00 02         [ 2]  211     subw x,#CELLL 
      00178D E7 01            [ 1]  212     ld (1,x),a 
      00178F 7F               [ 1]  213     clr (x)
      001790 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001791 17 7F                  221     .word LINK 
                           001793   222 LINK=.
      001793 06                     223     .byte 6 
      001794 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      00179A                        225 unlock_eeprom:
      00179A 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      00179E 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      0017A2 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0017A6 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0017AA 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0017AF 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      0017B0 17 93                  238     .word LINK 
                           0017B2   239 LINK=. 
      0017B2 06                     240     .byte 6 
      0017B3 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      0017B9                        242 unlock_flash:
      0017B9 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      0017BD 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      0017C1 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0017C5 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0017C9 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0017CE 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      0017CF 17 B2                  255 	.word LINK 
                           0017D1   256 	LINK=.
      0017D1 06                     257 	.byte 6
      0017D2 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      0017D8                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      0017D8 90 BE 2F         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      0017DB 3D 2E            [ 1]  263 	tnz FPTR 
      0017DD 26 16            [ 1]  264 	jrne 4$
      0017DF 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      0017E3 24 10            [ 1]  266     jruge 4$
      0017E5 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      0017E9 25 0D            [ 1]  268     jrult 9$
      0017EB 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      0017EF 22 07            [ 1]  270 	jrugt 9$
      0017F1 CD 17 9A         [ 4]  271 	call unlock_eeprom
      0017F4 81               [ 4]  272 	ret 
      0017F5 CD 17 B9         [ 4]  273 4$: call unlock_flash
      0017F8 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      0017F9 17 D1                  281 	.word LINK 
                           0017FB   282 	LINK=.
      0017FB 04                     283 	.byte 4 
      0017FC 4C 4F 43 4B            284 	.ascii "LOCK" 
      001800                        285 lock: 
      001800 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001804 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001808 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001809 17 FB                  294 	.word LINK 
                           00180B   295 	LINK=. 
      00180B 08                     296 	.byte 8 
      00180C 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001814                        298 inc_fptr:
      001814 3C 30            [ 1]  299 	inc PTR8 
      001816 26 08            [ 1]  300 	jrne 1$
      001818 90 BE 2E         [ 2]  301 	ldw y,FPTR 
      00181B 90 5C            [ 2]  302 	incw y 
      00181D 90 BF 2E         [ 2]  303 	ldw FPTR,y 
      001820 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001821 18 0B                  315 	.word LINK 
                           001823   316 	LINK=. 
      001823 07                     317 	.byte 7 
      001824 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      00182B                        320 write_byte:
      00182B 90 93            [ 1]  321 	ldw y,x 
      00182D 90 FE            [ 2]  322 	ldw y,(y)
      00182F 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001832 90 9F            [ 1]  324 	ld a,yl
      001834 92 BD 00 2E      [ 4]  325 	ldf [FPTR],a
      001838 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00183D 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      00183F 18 23                  335     .word LINK 
                           001841   336 	LINK=.
      001841 04                     337     .byte 4 
      001842 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001846                        343 ee_cstore:
      001846 52 02            [ 2]  344 	sub sp,#VSIZE
      001848 CD 16 82         [ 4]  345     call fptr_store
      00184B E6 01            [ 1]  346 	ld a,(1,x)
      00184D 43               [ 1]  347 	cpl a 
      00184E 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001850 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001852 CD 17 D8         [ 4]  350 	call unlock 
                                    351 	; check if option
      001855 3D 2E            [ 1]  352 	tnz FPTR 
      001857 26 19            [ 1]  353 	jrne 2$
      001859 90 BE 2F         [ 2]  354 	ldw y,PTR16 
      00185C 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001860 2B 10            [ 1]  356 	jrmi 2$
      001862 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001866 2A 0A            [ 1]  358 	jrpl 2$
      001868 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      00186A 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      00186E 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001872                        363 2$: 
      001872 CD 18 2B         [ 4]  364 	call write_byte 	
      001875 0D 02            [ 1]  365 	tnz (OPT,sp)
      001877 27 0D            [ 1]  366 	jreq 3$ 
      001879 7B 01            [ 1]  367     ld a,(BTW,sp)
      00187B 90 5F            [ 1]  368     clrw y
      00187D 90 97            [ 1]  369 	ld yl,a 
      00187F 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001882 FF               [ 2]  371 	ldw (x),y 
      001883 CD 18 2B         [ 4]  372 	call write_byte
      001886                        373 3$: 
      001886 CD 18 00         [ 4]  374 	call lock 
      001889 5B 02            [ 2]  375 	addw sp,#VSIZE 
      00188B 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      00188C 18 41                  382 	.word LINK 
                           00188E   383 	LINK=.
      00188E 03                     384 	.byte 3 
      00188F 45 45 21               385 	.ascii "EE!"
      001892                        386 ee_store:
      001892 CD 16 82         [ 4]  387 	call fptr_store 
      001895 CD 17 D8         [ 4]  388 	call unlock 
      001898 90 93            [ 1]  389 	ldw y,x 
      00189A 90 FE            [ 2]  390 	ldw y,(y)
      00189C 90 89            [ 2]  391 	pushw y 
      00189E 90 5E            [ 1]  392 	swapw y 
      0018A0 FF               [ 2]  393 	ldw (x),y 
      0018A1 CD 18 2B         [ 4]  394 	call write_byte 
      0018A4 90 85            [ 2]  395 	popw y 
      0018A6 1D 00 02         [ 2]  396 	subw x,#CELLL
      0018A9 FF               [ 2]  397 	ldw (x),y 
      0018AA CD 18 2B         [ 4]  398 	call write_byte
      0018AD CC 18 00         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      0018B0 18 8E                  407 	.word LINK 
                           0018B2   408 	LINK=. 
      0018B2 09                     409 	.byte 9 
      0018B3 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      0018BC                        411 row_erase:
      0018BC CD 16 82         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      0018BF 1D 00 02         [ 2]  415 	subw x,#CELLL 
      0018C2 90 AE 19 09      [ 2]  416 	ldw y,#row_erase_proc
      0018C6 FF               [ 2]  417 	ldw (x),y 
      0018C7 CD 08 4E         [ 4]  418 	call PAD 
      0018CA 90 AE 19 30      [ 2]  419 	ldw y,#row_erase_proc_end 
      0018CE 72 A2 19 09      [ 2]  420 	subw y,#row_erase_proc
      0018D2 1D 00 02         [ 2]  421 	subw x,#CELLL 
      0018D5 FF               [ 2]  422 	ldw (x),y 
      0018D6 CD 08 8A         [ 4]  423 	call CMOVE 
      0018D9                        424 block_erase:
      0018D9 90 BE 2F         [ 2]  425 	ldw y,FPTR+1
      0018DC 90 A3 1D 00      [ 2]  426 	cpw y,#app_space 
      0018E0 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      0018E2 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      0018E6 24 01            [ 1]  430 	jruge 1$
      0018E8 81               [ 4]  431 	ret ; bad address 
      0018E9 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      0018ED 23 01            [ 2]  433 	jrule 2$ 
      0018EF 81               [ 4]  434 	ret ; bad address 
      0018F0                        435 2$:	
      0018F0 CD 17 9A         [ 4]  436 	call unlock_eeprom 
      0018F3 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      0018F5                        439 erase_flash:
      0018F5 CD 17 B9         [ 4]  440 	call unlock_flash 
      0018F8                        441 proceed_erase:
      0018F8 CD 08 4E         [ 4]  442 	call PAD 
      0018FB 90 93            [ 1]  443 	ldw y,x
      0018FD 90 FE            [ 2]  444 	ldw y,(y)
      0018FF 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001902 90 FD            [ 4]  446 	call (y) 
      001904 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001908 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001909                        451 row_erase_proc:
      001909 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00190D 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001911 4F               [ 1]  454 	clr a 
      001912 90 5F            [ 1]  455 	clrw y 
      001914 91 A7 00 2E      [ 1]  456 	ldf ([FPTR],y),a
      001918 90 5C            [ 2]  457     incw y
      00191A 91 A7 00 2E      [ 1]  458 	ldf ([FPTR],y),a
      00191E 90 5C            [ 2]  459     incw y
      001920 91 A7 00 2E      [ 1]  460 	ldf ([FPTR],y),a
      001924 90 5C            [ 2]  461     incw y
      001926 91 A7 00 2E      [ 1]  462 	ldf ([FPTR],y),a
      00192A 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00192F 81               [ 4]  464 	ret
      001930                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001930                        478 copy_buffer:
      001930 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001932 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001936 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00193A 90 5F            [ 1]  483 	clrw y
      00193C F6               [ 1]  484 1$:	ld a,(x)
      00193D 91 A7 00 2E      [ 1]  485 	ldf ([FPTR],y),a
      001941 5C               [ 2]  486 	incw x 
      001942 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001944 0A 01            [ 1]  488 	dec (BCNT,sp)
      001946 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001948 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      00194D 84               [ 1]  492 	pop a ; remove BCNT from stack 
      00194E 81               [ 4]  493 	ret 
      00194F                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      00194F                        500 copy_prog_to_ram:
      00194F 1D 00 06         [ 2]  501 	subw x,#6
      001952 90 AE 19 30      [ 2]  502 	ldw y,#copy_buffer 
      001956 EF 04            [ 2]  503 	ldw (4,x),y 
      001958 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      00195C EF 02            [ 2]  505 	ldw (2,x),y 
      00195E 90 AE 19 4F      [ 2]  506 	ldw y,#copy_buffer_end 
      001962 72 A2 19 30      [ 2]  507 	subw y,#copy_buffer  
      001966 FF               [ 2]  508 	ldw (x),y 
      001967 CD 08 8A         [ 4]  509 	call CMOVE 
      00196A 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      00196B 18 B2                  519 	.word LINK 
                           00196D   520 	LINK=.
      00196D 06                     521 	.byte 6 
      00196E 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001974                        523 write_row:
      001974 CD 16 82         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001977 A6 80            [ 1]  526 	ld a,#0x80 
      001979 B4 30            [ 1]  527 	and a,PTR8 
      00197B B7 30            [ 1]  528 	ld PTR8,a  
      00197D CD 19 4F         [ 4]  529 	call copy_prog_to_ram
      001980 CD 17 D8         [ 4]  530 	call unlock
      001983 90 93            [ 1]  531 	ldw y,x 
      001985 90 FE            [ 2]  532 	ldw y,(y)
      001987 1C 00 02         [ 2]  533 	addw x,#CELLL 
      00198A 89               [ 2]  534 	pushw x 
      00198B 93               [ 1]  535 	ldw x,y ; buffer address in x 
      00198C CD 17 00         [ 4]  536 	call TIBBASE
      00198F CD 18 00         [ 4]  537 	call lock
      001992 85               [ 2]  538 	popw x 
      001993 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001994 19 6D                  547 		.word LINK 
                           001996   548 		LINK=.
      001996 07                     549 		.byte 7 
      001997 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      00199E                        551 set_option: 
      00199E 90 93            [ 1]  552 		ldw y,x 
      0019A0 90 FE            [ 2]  553 		ldw y,(y)
      0019A2 27 06            [ 1]  554 		jreq 1$
      0019A4 90 A3 00 07      [ 2]  555 		cpw y,#7 
      0019A8 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      0019AA 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      0019AD 81               [ 4]  559 		ret
      0019AE 90 58            [ 2]  560 2$:		sllw y 
      0019B0 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      0019B4 FF               [ 2]  562 		ldw (x),y 
      0019B5 1D 00 02         [ 2]  563 		subw x,#CELLL 
      0019B8 90 5F            [ 1]  564 		clrw y 
      0019BA FF               [ 2]  565 		ldw (x),y 
      0019BB CD 18 46         [ 4]  566 		call ee_cstore
      0019BE 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      0019BF 19 96                  576 	.word LINK  
                           0019C1   577 	LINK=.
      0019C1 08                     578 	.byte 8 
      0019C2 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      0019CA                        580 pristine:
                                    581 ;;; erase EEPROM
      0019CA CD 16 A1         [ 4]  582 	call EEPROM 
      0019CD CD 04 28         [ 4]  583 1$:	call DDUP 
      0019D0 CD 18 BC         [ 4]  584 	call row_erase
      0019D3 90 93            [ 1]  585 	ldw y,x 
      0019D5 90 EE 02         [ 2]  586 	ldw y,(2,y)
      0019D8 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      0019DC EF 02            [ 2]  588 	ldw (2,x),y
      0019DE 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      0019E2 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      0019E4 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      0019E8 FF               [ 2]  593 2$:	ldw (x),y   
      0019E9 90 5F            [ 1]  594 	clrw y 
      0019EB EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      0019ED CD 04 28         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0019F0 CD 19 9E         [ 4]  597 	call set_option
      0019F3 90 93            [ 1]  598 	ldw y,x 
      0019F5 90 FE            [ 2]  599 	ldw y,(y)
      0019F7 90 5C            [ 2]  600 	incw y  ; next OPTION 
      0019F9 90 A3 00 08      [ 2]  601 	cpw y,#8 
      0019FD 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      0019FF 90 AE 1D 00      [ 2]  604 	ldw y,#app_space
      001A03 EF 02            [ 2]  605 	ldw (2,x),y  
      001A05 90 5F            [ 1]  606 	clrw y 
      001A07 FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001A08 CD 18 BC         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001A0B 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001A0E 90 5F            [ 1]  611 	clrw y  
      001A10 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001A11 CD 02 67         [ 4]  613 	call DUPP  
      001A14 CD 1A 31         [ 4]  614 	call reset_vector
      001A17 90 93            [ 1]  615 	ldw y,x 
      001A19 90 FE            [ 2]  616 	ldw y,(y)
      001A1B 90 5C            [ 2]  617 	incw y   ; next vector 
      001A1D 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001A21 25 ED            [ 1]  619 	jrult 4$
      001A23 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001A26 19 C1                  628 	.word LINK 
                           001A28   629 	LINK=. 
      001A28 08                     630 	.byte 8 
      001A29 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001A31                        632 reset_vector:
      001A31 90 93            [ 1]  633 	ldw y,x
      001A33 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001A36 90 FE            [ 2]  635 	ldw y,(y)
      001A38 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001A3C 27 3A            [ 1]  637 	jreq 9$
      001A3E 90 A3 00 18      [ 2]  638 	cpw y,#24 ; last vector for stm8s208 
      001A42 22 34            [ 1]  639 	jrugt 9$  
      001A44 90 58            [ 2]  640 	sllw y 
      001A46 90 58            [ 2]  641 	sllw y 
      001A48 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001A4C 90 BF 20         [ 2]  643 	ldw YTEMP,y
      001A4F 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001A52 EF 02            [ 2]  645 	ldw (2,x),y 
      001A54 90 5F            [ 1]  646 	clrw y
      001A56 FF               [ 2]  647 	ldw (x),y 
      001A57 A6 82            [ 1]  648 	ld a,#0x82 
      001A59 90 95            [ 1]  649 	ld yh,a
      001A5B EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001A5D CD 18 92         [ 4]  651 	call ee_store
      001A60 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001A63 90 5F            [ 1]  653 	clrw y 
      001A65 FF               [ 2]  654 	ldw (x),y 
      001A66 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001A6A EF 04            [ 2]  656 	ldw (4,x),y 
      001A6C 90 BE 20         [ 2]  657 	ldw y,YTEMP  
      001A6F 72 A9 00 02      [ 2]  658 	addw y,#2
      001A73 EF 02            [ 2]  659 	ldw (2,x),y 
      001A75 CD 18 92         [ 4]  660 	call ee_store
      001A78 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 	
                                    665 ;------------------------------
                                    666 ; set interrupt vector 
                                    667 ; SET-IVEC ( ud n -- )
                                    668 ;  ud Handler address
                                    669 ;  n  vector # 0 .. 29 
                                    670 ;-----------------------------
      001A79 1A 28                  671 	.word LINK
                           001A7B   672 	LINK=.
      001A7B 08                     673 	.byte 8 
      001A7C 53 45 54 2D 49 56 45   674 	.ascii "SET-IVEC" 
             43
      001A84                        675 set_vector:
      001A84 90 93            [ 1]  676     ldw y,x 
      001A86 1C 00 02         [ 2]  677 	addw x,#CELLL 
      001A89 90 FE            [ 2]  678 	ldw y,(y) ; vector #
      001A8B 90 A3 00 18      [ 2]  679 	cpw y,#24 ; last vector for stm8s208  
      001A8F 23 04            [ 2]  680 	jrule 2$
      001A91 1C 00 04         [ 2]  681 	addw x,#2*CELLL 
      001A94 81               [ 4]  682 	ret
      001A95 90 58            [ 2]  683 2$:	sllw y 
      001A97 90 58            [ 2]  684 	sllw y 
      001A99 72 A9 80 08      [ 2]  685 	addw y,#0X8008 ; IRQ0 vector address 
      001A9D 90 BF 20         [ 2]  686 	ldw YTEMP,y ; vector address 
      001AA0 A6 82            [ 1]  687 	ld a,#0x82 
      001AA2 90 95            [ 1]  688 	ld yh,a 
      001AA4 E6 01            [ 1]  689 	ld a,(1,x) ; isr address bits 23..16 
      001AA6 90 97            [ 1]  690 	ld yl,a 
                                    691 ;  write 0x82 + most significant byte of int address	
      001AA8 1D 00 06         [ 2]  692 	subw x,#3*CELLL 
      001AAB EF 04            [ 2]  693 	ldw (4,x),y 
      001AAD 90 BE 20         [ 2]  694 	ldw y,YTEMP
      001AB0 EF 02            [ 2]  695 	ldw (2,x),y ; vector address 
      001AB2 90 5F            [ 1]  696 	clrw y 
      001AB4 FF               [ 2]  697 	ldw (x),y   ; as a double 
      001AB5 CD 18 92         [ 4]  698 	call ee_store 
      001AB8 90 93            [ 1]  699 	ldw y,x 
      001ABA 90 EE 02         [ 2]  700 	ldw y,(2,y) ; bits 15..0 int vector 
      001ABD 1D 00 06         [ 2]  701 	subw x,#3*CELLL 
      001AC0 EF 04            [ 2]  702 	ldw (4,x),y 
      001AC2 90 BE 20         [ 2]  703 	ldw y,YTEMP 
      001AC5 72 A9 00 02      [ 2]  704 	addw y,#2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001AC9 EF 02            [ 2]  705 	ldw (2,x),y 
      001ACB 90 5F            [ 1]  706 	clrw y 
      001ACD FF               [ 2]  707 	ldw (x),y 
      001ACE CD 18 92         [ 4]  708 	call ee_store 
      001AD1 81               [ 4]  709 9$: ret 
                                    710 
                                    711 
                                    712 ;------------------------
                                    713 ; Compile word to flash
                                    714 ; EE, (w -- )
                                    715 ;-----------------------
      001AD2 1A 7B                  716 	.word LINK
                           001AD4   717 	LINK=.
      001AD4 03                     718 	.byte 3
      001AD5 45 45 2C               719 	.ascii "EE,"
      001AD8                        720 ee_comma:
      001AD8 1D 00 04         [ 2]  721 	subw x,#2*CELLL 
      001ADB 90 BE 18         [ 2]  722 	ldw y,UCP
      001ADE 90 89            [ 2]  723 	pushw y 
      001AE0 EF 02            [ 2]  724 	ldw (2,x),y 
      001AE2 90 5F            [ 1]  725 	clrw y 
      001AE4 FF               [ 2]  726 	ldw (x),y
      001AE5 CD 18 92         [ 4]  727 	call ee_store
      001AE8 90 85            [ 2]  728 	popw y 
      001AEA 72 A9 00 02      [ 2]  729 	addw y,#2
      001AEE 90 BF 18         [ 2]  730 	ldw UCP,y
      001AF1 81               [ 4]  731 	ret 
                                    732 
                                    733 ;-------------------------
                                    734 ; Compile byte to flash 
                                    735 ; EEC, ( c -- )	
                                    736 ;-------------------------
      001AF2 1A D4                  737 	.word LINK 
                           001AF4   738 	LINK=.
      001AF4 04                     739 	.byte 4 
      001AF5 45 45 43 2C            740 	.ascii "EEC,"
      001AF9                        741 ee_ccomma:
      001AF9 1D 00 04         [ 2]  742 	subw x,#2*CELLL 
      001AFC 90 BE 18         [ 2]  743 	ldw y,UCP
      001AFF 90 89            [ 2]  744 	pushw y 
      001B01 EF 02            [ 2]  745 	ldw (2,x),y 
      001B03 90 5F            [ 1]  746 	clrw y 
      001B05 FF               [ 2]  747 	ldw (x),y
      001B06 CD 18 46         [ 4]  748 	call ee_cstore
      001B09 90 85            [ 2]  749 	popw y 
      001B0B 90 5C            [ 2]  750 	incw y 
      001B0D 90 BF 18         [ 2]  751 	ldw UCP,y
      001B10 81               [ 4]  752 	ret 
                                    753 
                                    754 
                                    755 ;--------------------------
                                    756 ; copy FLASH block to ROWBUF
                                    757 ; ROW2BUF ( ud -- )
                                    758 ;--------------------------
      001B11 1A F4                  759 	.word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



                           001B13   760 	LINK=.
      001B13 07                     761 	.byte 7 
      001B14 52 4F 57 32 42 55 46   762 	.ascii "ROW2BUF"
      001B1B                        763 ROW2BUF: 
      001B1B CD 16 82         [ 4]  764 	call fptr_store 
      001B1E A6 80            [ 1]  765 	ld a,#BLOCK_SIZE
      001B20 88               [ 1]  766 	push a 
      001B21 B4 30            [ 1]  767 	and a,PTR8 ; block align 
      001B23 B7 30            [ 1]  768 	ld PTR8,a
      001B25 90 AE 16 80      [ 2]  769 	ldw y,#ROWBUFF 
      001B29 92 BC 00 2E      [ 5]  770 1$: ldf a,[FPTR]
      001B2D 90 F7            [ 1]  771 	ld (y),a
      001B2F CD 18 14         [ 4]  772 	call inc_fptr
      001B32 90 5C            [ 2]  773 	incw y 
      001B34 0A 01            [ 1]  774 	dec (1,sp)
      001B36 26 F1            [ 1]  775 	jrne 1$ 
      001B38 84               [ 1]  776 	pop a 
      001B39 81               [ 4]  777 	ret 
                                    778 
                                    779 
                                    780 ;---------------------------
                                    781 ; copy ROWBUFF to flash 
                                    782 ; BUF2ROW ( ud -- )
                                    783 ; ud is row address as double 
                                    784 ;---------------------------
      001B3A 1B 13                  785 	.word LINK 
                           001B3C   786 	LINK=.
      001B3C 07                     787 	.byte 7 
      001B3D 42 55 46 32 52 4F 57   788 	.ascii "BUF2ROW" 
      001B44                        789 BUF2ROW:
      001B44 CD 03 62         [ 4]  790 	call TBUF ; ( ud rb -- )
      001B47 CD 03 FD         [ 4]  791 	call ROT 
      001B4A CD 03 FD         [ 4]  792 	call ROT  ; ( rb ud -- )
      001B4D CD 19 74         [ 4]  793 	call write_row 
      001B50 81               [ 4]  794 	ret 
                                    795 
                                    796 ;---------------------------------
                                    797 ; how many byte free in that row 
                                    798 ; RFREE ( a -- n )
                                    799 ; a is least byte of target address
                                    800 ;----------------------------------
      001B51 1B 3C                  801 	.word LINK 
                           001B53   802 	LINK=.
      001B53 05                     803 	.byte 5 
      001B54 52 46 52 45 45         804 	.ascii "RFREE"
      001B59                        805 RFREE:
      001B59 E6 01            [ 1]  806 	ld a,(1,x)
      001B5B A4 7F            [ 1]  807 	and a,#BLOCK_SIZE-1 
      001B5D B7 20            [ 1]  808 	ld YTEMP,a 
      001B5F A6 80            [ 1]  809 	ld a,#BLOCK_SIZE 
      001B61 B0 20            [ 1]  810 	sub a,YTEMP 
      001B63 90 5F            [ 1]  811 	clrw y 
      001B65 90 97            [ 1]  812 	ld yl,a
      001B67 FF               [ 2]  813 	ldw (x),y 
      001B68 81               [ 4]  814 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                    815 
                                    816 ;---------------------------------
                                    817 ; write u bytes to flash/EEPROM 
                                    818 ; constraint to row limit 
                                    819 ; RAM2EE ( ud a u -- u2 )
                                    820 ; ud flash address 
                                    821 ; a ram address 
                                    822 ; u bytes count
                                    823 ; return u2 bytes written  
                                    824 ;-------------------------------
      001B69 1B 53                  825 	.word LINK 
                           001B6B   826 	LINK=. 
      001B6B 06                     827 	.byte 6
      001B6C 52 41 4D 32 45 45      828 	.ascii "RAM2EE"
                                    829 	
      001B72                        830 RAM2EE:
                                    831 ; copy ud on top 
      001B72 90 93            [ 1]  832 	ldw y,x 
      001B74 90 EE 06         [ 2]  833 	ldw y,(6,y) ; LSW of ud  
      001B77 90 BF 20         [ 2]  834 	ldw YTEMP,y 
      001B7A 90 93            [ 1]  835 	ldw y,x 
      001B7C 90 EE 04         [ 2]  836 	ldw y,(4,y)  ; MSW of ud 
      001B7F 1D 00 04         [ 2]  837 	subw x,#2*CELLL 
      001B82 FF               [ 2]  838 	ldw (x),y 
      001B83 90 BE 20         [ 2]  839 	ldw y,YTEMP 
      001B86 EF 02            [ 2]  840 	ldw (2,x),y 
      001B88 CD 1B 1B         [ 4]  841 	call ROW2BUF 
      001B8B 90 93            [ 1]  842 	ldw y,x 
      001B8D 90 EE 06         [ 2]  843 	ldw y,(6,y)
      001B90 90 89            [ 2]  844 	pushw y ; udl 
      001B92 90 9F            [ 1]  845 	ld a,yl
      001B94 A4 7F            [ 1]  846 	and a,#BLOCK_SIZE-1 
      001B96 90 5F            [ 1]  847 	clrw y 
      001B98 90 97            [ 1]  848 	ld yl,a 
      001B9A 72 A9 16 80      [ 2]  849 	addw y,#ROWBUFF 
      001B9E 1D 00 02         [ 2]  850 	subw x,#CELLL 
      001BA1 FF               [ 2]  851 	ldw (x),y  
      001BA2 CD 02 77         [ 4]  852 	call SWAPP ;  ( ud a ra u -- )
      001BA5 CD 02 11         [ 4]  853 	call RFROM  
      001BA8 CD 1B 59         [ 4]  854 	call RFREE 
      001BAB CD 05 3D         [ 4]  855 	call MIN
      001BAE CD 02 67         [ 4]  856 	call DUPP 
      001BB1 CD 02 30         [ 4]  857 	call TOR  
      001BB4 CD 08 8A         [ 4]  858 	call CMOVE
      001BB7 CD 1B 44         [ 4]  859 	call BUF2ROW 
      001BBA CD 02 11         [ 4]  860 	call RFROM 
      001BBD 81               [ 4]  861 	ret 
                                    862 
                                    863 ;--------------------------
                                    864 ; expand 16 bit address 
                                    865 ; to 32 bit address 
                                    866 ; FADDR ( a -- ud )
                                    867 ;--------------------------
      001BBE 1B 6B                  868 	.word LINK 
                           001BC0   869 	LINK=. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001BC0 05                     870 	.byte 5 
      001BC1 46 41 44 44 52         871 	.ascii "FADDR"
      001BC6                        872 FADDR:
      001BC6 1D 00 02         [ 2]  873 	subw x,#CELLL 
      001BC9 90 5F            [ 1]  874 	clrw y 
      001BCB FF               [ 2]  875 	ldw (x),y 
      001BCC 81               [ 4]  876 	ret
                                    877 
                                    878 ;--------------------------
                                    879 ; move new colon definition to FLASH 
                                    880 ; using WR-ROW for efficiency 
                                    881 ; preserving bytes already used 
                                    882 ; in the current block. 
                                    883 ; ud+c must not exceed block boundary 
                                    884 ; at this point the compiler as completed
                                    885 ; in RAM and pointers CP and CNTXT updated.
                                    886 ; CNTXT point to nfa of new word and  
                                    887 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    888 ; 
                                    889 ; FMOVE ( -- )
                                    890 ;--------------------------
      001BCD 1B C0                  891 	.word LINK 
                           001BCF   892 	LINK=.
      001BCF 05                     893 	.byte 5 
      001BD0 46 4D 4F 56 45         894 	.ascii "FMOVE" 
      001BD5                        895 FMOVE:
      001BD5 CD 03 B1         [ 4]  896 	call CPP
      001BD8 CD 01 C0         [ 4]  897 	call AT  
      001BDB CD 02 67         [ 4]  898 	call DUPP ; ( udl udl -- )
      001BDE CD 03 95         [ 4]  899 	call CNTXT 
      001BE1 CD 01 C0         [ 4]  900 	call AT 
      001BE4 CD 01 38         [ 4]  901 	call DOLIT 
      001BE7 00 02                  902 	.word 2 
      001BE9 CD 04 9B         [ 4]  903 	call SUBB ; ( udl udl a -- )
      001BEC CD 02 77         [ 4]  904 	call SWAPP 
      001BEF CD 1B C6         [ 4]  905 	call FADDR 
      001BF2 CD 03 FD         [ 4]  906 	call ROT  ; ( udl ud a -- )
      001BF5 CD 02 67         [ 4]  907 	call DUPP 
      001BF8 CD 02 30         [ 4]  908 	call TOR    ; R: a 
      001BFB CD 08 3D         [ 4]  909 	call HERE 
      001BFE CD 02 24         [ 4]  910 	call RAT 
      001C01 CD 04 9B         [ 4]  911 	call SUBB ; (udl ud a wl -- )
      001C04                        912 next_row:
      001C04 CD 02 67         [ 4]  913 	call DUPP 
      001C07 CD 02 30         [ 4]  914 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001C0A CD 1B 72         [ 4]  915 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001C0D CD 02 67         [ 4]  916 	call DUPP 
      001C10 CD 02 30         [ 4]  917 	call TOR
      001C13 CD 04 3D         [ 4]  918 	call PLUS  ; ( udl+ ) 
      001C16 CD 02 67         [ 4]  919 	call DUPP 
      001C19 CD 07 50         [ 4]  920 	call ZERO   ; ( udl+ ud -- )
      001C1C CD 02 11         [ 4]  921 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001C1F CD 02 11         [ 4]  922 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001C22 CD 02 91         [ 4]  923 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001C25 CD 04 9B         [ 4]  924 	call SUBB  ; ( udl+ ud u2 wl- R: a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001C28 CD 02 67         [ 4]  925 	call DUPP 
      001C2B CD 01 6B         [ 4]  926 	call QBRAN
      001C2E 1C 47                  927 	.word fmove_done 
      001C30 CD 02 77         [ 4]  928 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001C33 CD 02 11         [ 4]  929 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001C36 CD 04 3D         [ 4]  930 	call PLUS  ; ( udl+2 ud wl- a+ )
      001C39 CD 02 67         [ 4]  931 	call DUPP 
      001C3C CD 02 30         [ 4]  932 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001C3F CD 02 77         [ 4]  933 	call SWAPP 
      001C42 CD 01 82         [ 4]  934 	call BRAN
      001C45 1C 04                  935 	.word next_row  
      001C47                        936 fmove_done:	
      001C47 CD 02 11         [ 4]  937 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001C4A 1C 00 0A         [ 2]  938 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
                                    939 ; reset VP to previous position  
      001C4D CD 16 FC         [ 4]  940 	call EEPVP 
      001C50 CD 02 5D         [ 4]  941 	call DROP 
      001C53 CD 01 C0         [ 4]  942 	call AT
      001C56 CD 03 A3         [ 4]  943 	call VPP 
      001C59 CD 01 A9         [ 4]  944 	call STORE
                                    945 ;update CONTEXT and LAST 
      001C5C CD 16 E6         [ 4]  946 	call EEPCP 
      001C5F CD 02 5D         [ 4]  947 	call DROP
      001C62 CD 01 C0         [ 4]  948 	call AT
      001C65 CD 01 38         [ 4]  949 	call DOLIT 
      001C68 00 02                  950 	.word 2 
      001C6A CD 04 3D         [ 4]  951 	call PLUS 
      001C6D CD 02 67         [ 4]  952 	call DUPP 
      001C70 CD 03 95         [ 4]  953 	call CNTXT 
      001C73 CD 01 A9         [ 4]  954 	call STORE
      001C76 CD 03 C1         [ 4]  955 	call LAST
      001C79 CD 01 A9         [ 4]  956 	call STORE 
      001C7C CD 17 16         [ 4]  957 	call UPDATLAST 
                                    958 ;update CP 
      001C7F CD 03 B1         [ 4]  959 	call CPP 
      001C82 CD 01 A9         [ 4]  960 	call STORE
      001C85 CD 17 3F         [ 4]  961 	call UPDATCP 
      001C88 81               [ 4]  962 	ret 
                                    963 
                                    964 
                                    965 ; application code begin here
      001D00                        966 	.bndry 128 ; align on flash block  
      001D00                        967 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                   4133 .endif ; PICATOUT_MOD
                                   4134 
                                   4135 ;===============================================================
                                   4136 
                           001BCF  4137 LASTN =	LINK   ;last name defined
                                   4138 
                                   4139 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0004BE R   |   6 ABOR1      000FD9 R
  6 ABOR2      000FF0 R   |   6 ABORQ      000FD1 R   |   6 ABORT      000FC2 R
  6 ABRTQ      0012AC R   |   6 ABSS       0004B5 R   |   6 ACCEP      000F58 R
  6 ACCP1      000F61 R   |   6 ACCP2      000F87 R   |   6 ACCP3      000F8A R
  6 ACCP4      000F8C R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     0003DC R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001294 R   |   6 AGAIN      0011E4 R   |   6 AHEAD      001244 R
  6 ALLOT      001101 R   |   6 ANDD       0002B3 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0001C0 R   |   6 ATEXE      000873 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      000F00 R
  6 BASE       000324 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      001143 R   |   6 BDIGS      00095B R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0011C5 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      000D98 R   |   6 BKSP       000ED0 R   |     BKSPP   =  000008 
  6 BLANK      000743 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       000182 R   |     BTW     =  000001 
  6 BUF2ROW    001B44 R   |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000024 
  6 CAT        0001DE R   |   6 CCOMMA     001125 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      000700 R   |   6 CELLP      0006F1 R
  6 CELLS      00070F R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000B88 R   |   6 CHAR2      000B8B R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000892 R   |   6 CMOV2      0008AA R   |   6 CMOVE      00088A R
    CNTDWN  =  00002C     |   6 CNTXT      000395 R   |   6 COLD       001613 R
  6 COLD1      001613 R   |   6 COLON      0013CA R   |   6 COMMA      00110E R
  6 COMPI      001153 R   |     COMPO   =  000040     |   6 CONSTANT   001462 R
    CONVERT_=  000001     |   6 COUNT      000826 R   |   6 CPP        0003B1 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000BB6 R
  6 CREAT      001414 R   |     CRR     =  00000D     |   6 CSTOR      0001CD R
    CTOP    =  000080     |   6 DAT        000806 R   |     DATSTK  =  001670 
  6 DDROP      00041D R   |   6 DDUP       000428 R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000A0B R   |   6 DEPTH      000793 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000A50 R
  6 DIG        000984 R   |   6 DIGIT      00091F R   |   6 DIGS       000995 R
  6 DIGS1      000995 R   |   6 DIGS2      0009A2 R   |   6 DIGTQ      000A1F R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000495 R
  6 DNEGA      00047A R   |   6 DOCONST    001482 R   |   6 DOLIT      000138 R
  6 DONXT      00014C R   |   6 DOSTR      000BCC R   |   6 DOT        000C51 R
  6 DOT1       000C67 R   |   6 DOTI1      0015A7 R   |   6 DOTID      001591 R
  6 DOTO1      001065 R   |   6 DOTOK      00104B R   |   6 DOTPR      000D7A R
  6 DOTQ       0012C8 R   |   6 DOTQP      000BF5 R   |   6 DOTR       000C03 R
  6 DOTS       001530 R   |   6 DOTS1      00153B R   |   6 DOTS2      001547 R
  6 DOVAR      000314 R   |   6 DROP       00025D R   |   6 DSTOR      0007E0 R
  6 DUMP       0014E6 R   |   6 DUMP1      0014FD R   |   6 DUMP3      00151F R
  6 DUMPP      0014B5 R   |   6 DUPP       000267 R   |   6 EDIGS      0009C0 R
  6 EEPCP      0016E6 R   |   6 EEPLAST    0016B9 R   |   6 EEPROM     0016A1 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     0016D0 R   |   6 EEPVP      0016FC R   |   6 ELSEE      00121E R
  6 EMIT       000122 R   |   6 EQ1        0004D9 R   |   6 EQUAL      0004C3 R
  6 ERASE      0008EC R   |     ERR     =  00001B     |   6 EVAL       00108E R
  6 EVAL1      00108E R   |   6 EVAL2      0010AA R   |   6 EXE1       000881 R
  6 EXECU      000192 R   |   6 EXIT       0001A2 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000947 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]

Symbol Table

  6 FADDR      001BC6 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       0008B9 R   |   6 FILL1      0008D6 R   |   6 FILL2      0008DF R
  6 FIND       000E2C R   |   6 FIND1      000E4A R   |   6 FIND2      000E78 R
  6 FIND3      000E84 R   |   6 FIND4      000E98 R   |   6 FIND5      000EA5 R
  6 FIND6      000E89 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FMOVE      001BD5 R
  6 FOR        0011A1 R   |     FPTR    =  00002E     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       00083D R   |   6 HEX        0009F6 R   |   6 HI         0015E6 R
  6 HLD        000382 R   |   6 HOLD       00096B R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        0011F5 R   |     IMEDD   =  000080     |   6 IMMED      0013F1 R
  6 INCH       000116 R   |   6 INN        000342 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      00102D R   |   6 INTER      001003 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]

Symbol Table

    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000457 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0013BB R   |   6 KEY        000B36 R   |   6 KTAP       000F1D R
  6 KTAP1      000F40 R   |   6 KTAP2      000F43 R   |   6 LAST       0003C1 R
  6 LASTN   =  001BCF R   |   6 LBRAC      00103A R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000500 R
    LF      =  00000A     |   6 LINK    =  001BCF R   |   6 LITER      001172 R
  6 LT1        000516 R   |     MASKK   =  001F7F     |   6 MAX        000520 R
  6 MAX1       000533 R   |   6 MIN        00053D R   |   6 MIN1       000550 R
  6 MMOD1      0005F3 R   |   6 MMOD2      000607 R   |   6 MMOD3      00061E R
  6 MMSM1      00059A R   |   6 MMSM2      0005AE R   |   6 MMSM3      0005B0 R
  6 MMSM4      0005B8 R   |   6 MODD       000638 R   |   6 MONE       000769 R
    MS      =  00002A     |   6 MSEC       0000A3 R   |   6 MSMOD      0005D6 R
  6 MSTA1      0006C9 R   |   6 MSTAR      0006A6 R   |     NAFR    =  004804 
  6 NAMEQ      000EC5 R   |   6 NAMET      000DD6 R   |     NCLKOPT =  004808 
  6 NEGAT      000468 R   |   6 NEX1       000159 R   |   6 NEXT       0011B1 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       000352 R   |     NUBC    =  004802 
  6 NUFQ       000B4C R   |   6 NUFQ1      000B65 R   |   6 NUMBQ      000A63 R
  6 NUMQ1      000A97 R   |   6 NUMQ2      000AC8 R   |   6 NUMQ3      000B0A R
  6 NUMQ4      000B0F R   |   6 NUMQ5      000B1E R   |   6 NUMQ6      000B21 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     0003D3 R   |   6 ONE        00075B R   |   6 ONEM       000729 R
  6 ONEP       00071C R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       00003F R
  6 ORR        0002C7 R   |   6 OUTPUT     000127 R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       000291 R   |   6 OVERT      001384 R   |     PA      =  000000 
  6 PACKS      0008FE R   |   6 PAD        00084E R   |   6 PAREN      000D89 R
  6 PARS       000C82 R   |   6 PARS1      000CAD R   |   6 PARS2      000CD8 R
  6 PARS3      000CDB R   |   6 PARS4      000CE4 R   |   6 PARS5      000D07 R
  6 PARS6      000D1C R   |   6 PARS7      000D2B R   |   6 PARS8      000D3A R
  6 PARSE      000D4B R   |   6 PAUSE      0000B3 R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]

Symbol Table

    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      0014C8 R
  6 PDUM2      0014D9 R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
    PICATOUT=  000001     |   6 PICK       0007AA R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       00043D R
  6 PNAM1      001339 R   |   6 PRESE      0010B9 R   |     PROD1   =  00001E 
    PROD2   =  000020     |     PROD3   =  000022     |   6 PSTOR      0007BF R
    PTR16   =  00002F     |     PTR8    =  000030     |   6 QBRAN      00016B R
  6 QDUP       0003EC R   |   6 QDUP1      0003F6 R   |   6 QKEY       000104 R
  6 QSTAC      001071 R   |   6 QUERY      000F9D R   |   6 QUEST      000C74 R
  6 QUIT       0010D6 R   |   6 QUIT1      0010DE R   |   6 QUIT2      0010E1 R
  6 RAM2EE     001B72 R   |     RAMBASE =  000000     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RAT        000224 R
  6 RBRAC      0013A8 R   |   6 REPEA      001276 R   |   6 RFREE      001B59 R
  6 RFROM      000211 R   |     ROP     =  004800     |   6 ROT        0003FD R
  6 ROW2BUF    001B1B R   |     ROWBUFF =  001680     |     RP0     =  000028 
  6 RPAT       0001EE R   |     RPP     =  0017FF     |   6 RPSTO      0001FB R
    RST_SR  =  0050B3     |   6 SAME1      000DF4 R   |   6 SAME2      000E1D R
  6 SAMEQ      000DEC R   |   6 SCOM1      00136E R   |   6 SCOM2      001371 R
  6 SCOMP      001350 R   |   6 SEMIS      001394 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       0009AA R   |   6 SIGN1      0009BA R
  6 SLASH      000642 R   |   6 SLMOD      000626 R   |   6 SNAME      001303 R
    SP0     =  000026     |   6 SPACE      000B6E R   |   6 SPACS      000B7D R
  6 SPAT       000247 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001670     |   6 SPSTO      000254 R   |   6 SSMOD      0006D2 R
    STACK   =  0017FF     |   6 STAR       00069B R   |   6 STASL      0006E3 R
  6 STORE      0001A9 R   |   6 STR        0009D8 R   |   6 STRCQ      001181 R
  6 STRQ       0012BA R   |   6 STRQP      000BEB R   |   6 SUBB       00049B R
  6 SWAPP      000277 R   |     SWIM_CSR=  007F80     |   6 TAP        000F07 R
  6 TBOOT      001607 R   |   6 TBUF       000362 R   |     TBUFFBAS=  001680 
  6 TCHA1      00078A R   |   6 TCHAR      00077A R   |   6 TEMP       000333 R
  6 TEVAL      000373 R   |   6 THENN      00120B R   |   6 TIB        00085F R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0010ED R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  005309 
    TIM2_CCM=  005305     |     TIM2_CCM=  005306     |     TIM2_CCM=  005307 
    TIM2_CCR=  00530F     |     TIM2_CCR=  005310     |     TIM2_CCR=  005311 
    TIM2_CCR=  005312     |     TIM2_CCR=  005313     |     TIM2_CCR=  005314 
    TIM2_CNT=  00530A     |     TIM2_CNT=  00530B     |     TIM2_CR1=  005300 
    TIM2_EGR=  005304     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]

Symbol Table

    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   0000E3 R
  6 TIMER      0000CD R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001561 R   |   6 TNAM3      00157F R   |   6 TNAM4      001585 R
  6 TNAME      00155E R   |   6 TOKEN      000DC8 R   |   6 TOR        000230 R
    TRUEE   =  00FFFF     |   6 TWOSL      000736 R   |   6 TYPE1      000B9D R
  6 TYPE2      000BA9 R   |   6 TYPES      000B98 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBASE   =  000006     |     UBC     =  004801 
    UCNTXT  =  000014     |     UCP     =  000018     |     UCTIB   =  00000C 
    UD1     =  000001     |     UD2     =  000002     |     UD3     =  000003 
    UD4     =  000004     |   6 UDOT       000C3E R   |   6 UDOTR      000C1E R
  6 UEND       00003D R   |     UHLD    =  000012     |     UINN    =  00000A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]

Symbol Table

    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      0004F8 R
  6 ULESS      0004E2 R   |   6 UMMOD      000578 R   |   6 UMSTA      000651 R
  6 UNIQ1      0012FA R   |   6 UNIQU      0012DB R   |   6 UNTIL      0011D0 R
    UOFFSET =  00001C     |   6 UPDATCP    00173F R   |   6 UPDATLAS   001716 R
  6 UPDATRUN   00172E R   |   6 UPDATVP    001756 R   |   6 UPL1       000308 R
  6 UPLUS      0002F1 R   |     UPP     =  000006     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      001498 R   |   6 UTYP2      0014A7 R
  6 UTYPE      001493 R   |     UVP     =  000016     |   6 UZERO      000027 R
  6 VARIA      00142F R   |     VER     =  000002     |   6 VPP        0003A3 R
    VSIZE   =  000002     |     WANT_DEB=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00125B R
  6 WITHI      00055D R   |   6 WORDD      000DB4 R   |   6 WORDS      0015BB R
  6 WORS1      0015C1 R   |   6 WORS2      0015E0 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   6 XORR       0002DC R   |     XTEMP   =  00001E 
    YTEMP   =  000020     |   6 ZERO       000750 R   |   6 ZL1        0002A9 R
  6 ZLESS      0002A0 R   |   6 app_spac   001D00 R   |   6 block_er   0018D9 R
  6 clear_ra   000019 R   |   6 clock_in   00005A R   |   6 copy_buf   001930 R
  6 copy_buf   00194F R   |   6 copy_pro   00194F R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_ccomm   001AF9 R   |   6 ee_comma   001AD8 R   |   6 ee_cstor   001846 R
  6 ee_store   001892 R   |   6 erase_fl   0018F5 R   |   6 farat      001767 R
  6 farcat     001783 R   |   6 fmove_do   001C47 R   |   6 fptr_sto   001682 R
  6 inc_fptr   001814 R   |   6 lock       001800 R   |   6 main       000016 R
  6 next_row   001C04 R   |   6 pristine   0019CA R   |   6 proceed_   0018F8 R
  6 reboot     0000FA R   |   6 reset_ve   001A31 R   |   6 row_eras   0018BC R
  6 row_eras   001909 R   |   6 row_eras   001930 R   |   6 set_opti   00199E R
  6 set_vect   001A84 R   |   6 uart1_in   00006C R   |   6 unlock     0017D8 R
  6 unlock_e   00179A R   |   6 unlock_f   0017B9 R   |   6 write_by   00182B R
  6 write_ro   001974 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1D00   flags    0

