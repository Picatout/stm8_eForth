ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 ;*************************************
                                     86 ; constant used for conditationnal 
                                     87 ; assembly for those word I converted 
                                     88 ; to code.
                                     89 ; Added by Picatout 2020-05-24 
                                     90 ;*************************************
                           000001    91 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    92 PICATOUT_MOD=1  ; code modified by Picatout 
                                     93 
                                     94 ;*********************************************************
                                     95 ;	Assembler constants
                                     96 ;*********************************************************
                           000000    97 RAMBASE =	0x0000	   ;ram base
                           0017FF    98 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    99 DATSTK  =	0x1680	;data stack  empty
                           001680   100 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700   101 TIBBASE =       0X1700  ; transaction input buffer addr.
                                    102 
                                    103 
                                    104 
                                    105 ;; Memory allocation
                                    106 
                           000006   107 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   108 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   109 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   110 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   111 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   112 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   113 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    114 
                           000001   115 .if PICATOUT_MOD 
                                    116 ; user variables constants 
                           000006   117 UBASE = UPP       ; numeric base 
                           000008   118 UTMP = UBASE+2    ; temporary storage
                           00000A   119 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   120 UCTIB = UINN+2    ; tib count 
                           00000E   121 UTIB = UCTIB+2    ; tib address 
                           000010   122 UINTER = UTIB+2   ; interpreter vector 
                           000012   123 UHLD = UINTER+2   ; hold 
                           000014   124 UCNTXT = UHLD+2   ; context, dictionary first link 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000016   125 UVP = UCNTXT+2    ; variable pointer 
                           000018   126 UCP = UVP+2      ; code pointer
                           00001A   127 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   128 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   129 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   130 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    131 
                                    132 .endif ; PICATOUT_MOD
                                    133 ;******  System Variables  ******
                           000022   134 XTEMP	=	URLAST +2;address called by CREATE
                           000024   135 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   136 PROD1 = XTEMP	;space for UM*
                           000024   137 PROD2 = PROD1+2
                           000026   138 PROD3 = PROD2+2
                           000028   139 CARRY = PROD3+2
                           00002A   140 SP0	= CARRY+2	;initial data stack pointer
                           00002C   141 RP0	= SP0+2		;initial return stack pointer
                           00002E   142 MS    =   RP0+2         ; millisecond counter 
                           000030   143 CNTDWN =  MS+2          ; count down timer 
                           000032   144 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   145 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   146 PTR8 = FPTR+2           ; least byte of farptr 
                                    147 
                           000001   148 .if PICATOUT_MOD
                                    149 ; EEPROM persistant data  
                           004000   150 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   151 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   152 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   153 APP_VP = APP_CP+2  ; free data space pointer 
                                    154 .endif ;PICATOUT_MOD
                                    155 
                                    156 
                                    157 ;***********************************************
                                    158 ;; Version control
                                    159 
                           000003   160 VER     =     3         ;major release version
                           000000   161 EXT     =     0         ;minor extension
                                    162 
                                    163 ;; Constants
                                    164 
                           00FFFF   165 TRUEE   =     0xFFFF      ;true flag
                                    166 
                           000040   167 COMPO   =     0x40     ;lexicon compile only bit
                           000080   168 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   169 MASKK   =     0x1F7F  ;lexicon bit mask
                                    170 
                           000002   171 CELLL   =     2       ;size of a cell
                           00000A   172 BASEE   =     10      ;default radix
                           000008   173 BKSPP   =     8       ;back space
                           00000A   174 LF      =     10      ;line feed
                           00000D   175 CRR     =     13      ;carriage return
                           00001B   176 ERR     =     27      ;error escape
                           000027   177 TIC     =     39      ;tick
                           0000CD   178 CALLL   =     0xCD     ;CALL opcodes
                           000080   179 IRET_CODE =   0x80    ; IRET opcode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180 
                                    181         .macro _ledon
                                    182         bset PC_ODR,#LED2_BIT
                                    183         .endm
                                    184 
                                    185         .macro _ledoff
                                    186         bres PC_ODR,#LED2_BIT
                                    187         .endm
                                    188 
                                    189 ;**********************************************************
                                    190         .area DATA (ABS)
      000000                        191         .org RAMBASE 
                                    192 ;**********************************************************
                                    193 
                                    194 ;**********************************************************
                                    195         .area SSEG (ABS) ; STACK
      001700                        196         .org 0x1700
      001700                        197         .ds 256 
                                    198 ; space for DATSTK,TIB and STACK         
                                    199 ;**********************************************************
                                    200 
                                    201 ;**********************************************************
                                    202         .area HOME ; vectors table
                                    203 ;**********************************************************
      000000 82 00 00 16            204 	int main	        ; reset
      000004 82 00 00 00            205 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            206 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            207 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            208 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            209 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            210 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            211 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            212 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            213 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            214 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            215 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            216 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            217 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            218 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            219 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            220 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            221 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            222 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            223 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            224 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            225 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            226 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            227 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            228 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            229 	int Timer4Handler	; irq23
      000068 82 00 00 00            230 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            231 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            232 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            233 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            234 	int NonHandledInterrupt	; irq28
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      00007C 82 00 00 00            235 	int NonHandledInterrupt	; irq29
                                    236 
                                    237 ;**********************************************************
                                    238         .area CODE
                                    239 ;**********************************************************
                                    240 
                                    241 ; non handled interrupt reset MCU
      000000                        242 NonHandledInterrupt:
      000000 A6 80            [ 1]  243         ld a, #0x80
      000002 C7 50 D1         [ 1]  244         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    245 	;iret
                                    246 
                                    247 ; used for milliseconds counter 
                                    248 ; MS is 16 bits counter 
      000005                        249 Timer4Handler:
      000005 72 5F 53 42      [ 1]  250 	clr TIM4_SR 
      000009 BE 2E            [ 2]  251         ldw x,MS 
      00000B 5C               [ 2]  252         incw x 
      00000C BF 2E            [ 2]  253         ldw MS,x
      00000E BE 30            [ 2]  254         ldw x,CNTDWN 
      000010 27 03            [ 1]  255         jreq 1$
      000012 5A               [ 2]  256         decw x 
      000013 BF 30            [ 2]  257         ldw CNTDWN,x 
      000015                        258 1$:         
      000015 80               [11]  259         iret 
                                    260 
                                    261 
                                    262 ;; Main entry points and COLD start data
      000016                        263 main:
                                    264 ; clear all RAM
      000016 AE 00 00         [ 2]  265 	ldw X,#RAMBASE
      000019                        266 clear_ram0:
      000019 7F               [ 1]  267 	clr (X)
      00001A 5C               [ 2]  268 	incw X
      00001B A3 17 FF         [ 2]  269 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  270 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  271         ldw x,#RPP
      000023 94               [ 1]  272         ldw sp,x 
      000024 CC 00 43         [ 2]  273 	jp ORIG
                                    274 
                                    275 ; COLD initialize these variables.
      000027                        276 UZERO:
      000027 00 0A                  277         .word      BASEE   ;BASE
      000029 00 00                  278         .word      0       ;tmp
      00002B 00 00                  279         .word      0       ;>IN
      00002D 00 00                  280         .word      0       ;#TIB
      00002F 17 00                  281         .word      TIBB    ;TIB
      000031 12 8A                  282         .word      INTER   ;'EVAL
      000033 00 00                  283         .word      0       ;HLD
      000035 20 B9                  284         .word      LASTN  ;CNTXT pointer
      000037 00 80                  285         .word      VAR_BASE   ;variables free space pointer 
      000039 21 00                  286         .word      app_space ; FLASH free space pointer 
      00003B 20 B9                  287         .word      LASTN   ;LAST
      00003D 00 00                  288         .word      0        ; OFFSET 
      00003F 00 00                  289         .word      0       ; TFLASH
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    290 ;       .word      0       ; URLAST   
      000041 00 00                  291 UEND:   .word      0
                                    292 
      000043                        293 ORIG:   
                                    294 ; initialize SP
      000043 AE 17 FF         [ 2]  295         LDW     X,#STACK  ;initialize return stack
      000046 94               [ 1]  296         LDW     SP,X
      000047 BF 2C            [ 2]  297         LDW     RP0,X
      000049 AE 16 80         [ 2]  298         LDW     X,#DATSTK ;initialize data stack
      00004C BF 2A            [ 2]  299         LDW     SP0,X
                                    300 ; initialize PC_5 as output to control LED2
                                    301 ; added by Picatout 
      00004E 72 1A 50 0D      [ 1]  302         bset PC_CR1,#LED2_BIT
      000052 72 1A 50 0E      [ 1]  303         bset PC_CR2,#LED2_BIT
      000056 72 1A 50 0C      [ 1]  304         bset PC_DDR,#LED2_BIT
      00005A                        305         _ledoff
      00005A 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    306 ; initialize clock to HSI
                                    307 ; no divisor 16Mhz 
                                    308 ; Added by Picatout 
      00005E                        309 clock_init:
      00005E 72 5F 50 C6      [ 1]  310         clr CLK_CKDIVR
      000062 72 12 50 C5      [ 1]  311 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000066 A6 E1            [ 1]  312 	ld a,#CLK_SWR_HSI
      000068 C7 50 C4         [ 1]  313 	ld CLK_SWR,a
      00006B C1 50 C3         [ 1]  314 1$:	cp a,CLK_CMSR
      00006E 26 FB            [ 1]  315 	jrne 1$
                                    316         
                                    317 ; initialize UART1, 115200 8N1
      000070                        318 uart1_init:
      000070 72 14 50 C7      [ 1]  319 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    320 	; configure tx pin
      000074 72 1A 50 02      [ 1]  321 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000078 72 1A 50 03      [ 1]  322 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00007C 72 1A 50 04      [ 1]  323 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    324 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000080 35 0B 52 33      [ 1]  325 	mov UART1_BRR2,#0x0b ; must be loaded first
      000084 35 08 52 32      [ 1]  326 	mov UART1_BRR1,#0x8
      000088 35 0C 52 35      [ 1]  327 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    328 ; initialize timer4, used for millisecond interrupt  
      00008C 35 07 53 45      [ 1]  329 	mov TIM4_PSCR,#7 ; prescale 128  
      000090 35 7D 53 46      [ 1]  330 	mov TIM4_ARR,#125 ; set for 1msec.
      000094 35 05 53 40      [ 1]  331 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000098 72 10 53 41      [ 1]  332 	bset TIM4_IER,#TIM4_IER_UIE 
                                    333 ; set TIM4 interrupt priority to highest
      00009C A6 3F            [ 1]  334         ld a,#~(IPR_MASK<<6)
      00009E C4 7F 75         [ 1]  335         and a,ITC_SPR6
      0000A1 AA C0            [ 1]  336         or a,#(IPR3<<6)
      0000A3 C7 7F 75         [ 1]  337         ld ITC_SPR6,a 
      0000A6 9A               [ 1]  338         rim
      0000A7 CC 19 29         [ 2]  339         jp  COLD   ;default=MN1
                                    340 
                                    341 
                                    342 ;; place MCU in sleep mode with
                                    343 ;; halt opcode 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    344 ;; BYE ( -- )
      0000AA 00 00                  345         .word 0
                           0000AC   346         LINK=.
      0000AC 03                     347         .byte 3 
      0000AD 42 59 45               348         .ascii "BYE"
      0000B0                        349 BYE: 
      0000B0 8E               [10]  350         halt 
      0000B1 81               [ 4]  351         ret 
                                    352 
                                    353 ; Enable interrupts 
                                    354 ; EI ( -- )
      0000B2 00 AC                  355         .word LINK 
                           0000B4   356         LINK=.
      0000B4 02                     357         .byte 2
      0000B5 45 49                  358         .ascii "EI"
      0000B7                        359 EI:
      0000B7 9A               [ 1]  360         rim 
      0000B8 81               [ 4]  361         ret 
                                    362 
                                    363 ; Disable interrupts
                                    364 ; DI ( -- )
      0000B9 00 B4                  365         .word LINK 
                           0000BB   366         LINK=.
      0000BB 02                     367         .byte 2 
      0000BC 44 49                  368         .ascii "DI"
      0000BE                        369 DI:
      0000BE 9B               [ 1]  370         sim 
      0000BF 81               [ 4]  371         ret 
                                    372 
                                    373 ; set interrupt priority level 
                                    374 ; SET-ISP ( n1 n2 -- )
                                    375 ; n1 level {1..3}
                                    376 ; n2 vector {0..29}
      0000C0 00 BB                  377         .word LINK 
                           0000C2   378         LINK=.
      0000C2 07                     379         .byte 7 
      0000C3 53 45 54 2D 49 53 50   380         .ascii "SET-ISP"
      0000CA                        381 SETISP:
      0000CA 90 93            [ 1]  382         ldw y,x 
      0000CC 90 FE            [ 2]  383         ldw y,(y)
      0000CE A6 04            [ 1]  384         ld a,#4 ; 4 slot per register 
                                    385 ;  quotient select register, remainder select slot in register.        
      0000D0 90 62            [ 2]  386         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D2 A4 03            [ 1]  387         and a,#3 
      0000D4 48               [ 1]  388         sll a ; 2*SLOT  lshift 
      0000D5 72 A9 7F 70      [ 2]  389         addw y,#ITC_SPR1 
      0000D9 FF               [ 2]  390         ldw (x),y  ; ( level reg -- )
      0000DA 90 5F            [ 1]  391         clrw y 
      0000DC 90 97            [ 1]  392         ld yl,a 
      0000DE 1D 00 02         [ 2]  393         subw x,#CELLL 
      0000E1 FF               [ 2]  394         ldw (x),y  ; ( level reg lshift -- )
      0000E2 90 93            [ 1]  395         ldw y,x 
      0000E4 90 EE 02         [ 2]  396         ldw y,(2,y) 
      0000E7 90 F6            [ 1]  397         ld a,(y)   ; reg_value
      0000E9 1D 00 02         [ 2]  398         subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000EC FF               [ 2]  399         ldw (x),y ; ( level reg lshift rval -- )
      0000ED CD 04 9E         [ 4]  400         call OVER ; ( level reg lshift rval lshift -- )
      0000F0 CD 03 45         [ 4]  401         call DOLIT 
      0000F3 00 03                  402         .word 3
      0000F5 CD 04 84         [ 4]  403         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F8 CD 09 87         [ 4]  404         call LSHIFT ; creat slot mask 
      0000FB CD 06 89         [ 4]  405         call INVER  ; ( level reg lshift rval mask )
      0000FE CD 04 C0         [ 4]  406         call ANDD ; ( level reg lshift slot_masked )
      000101 CD 04 3D         [ 4]  407         call TOR  ; ( level reg lshift -- R: slot_masked )
      000104 CD 06 2F         [ 4]  408         call ROT  ; ( reg lshift level )
      000107 CD 04 84         [ 4]  409         call SWAPP ; ( reg level lshift )
      00010A CD 09 87         [ 4]  410         call LSHIFT  ; ( reg slot_level -- )
      00010D CD 04 1E         [ 4]  411         call RFROM ; ( reg slot_level masked_val )
      000110 CD 04 D4         [ 4]  412         call ORR   ; ( reg updated_rval )
      000113 CD 04 84         [ 4]  413         call SWAPP 
      000116 CD 03 DA         [ 4]  414         call CSTOR
                                    415 
                                    416 ; sélectionne l'application 
                                    417 ; qui démarre automatique lors 
                                    418 ; d'un COLD start 
      000119 00 C2                  419         .word LINK 
                           00011B   420         LINK=.
      00011B 07                     421         .byte 7
      00011C 41 55 54 4F 52 55 4E   422         .ascii "AUTORUN"
      000123                        423 AUTORUN:
      000123 CD 10 4F         [ 4]  424         call TOKEN 
      000126 CD 04 74         [ 4]  425         call DUPP 
      000129 CD 03 78         [ 4]  426         call QBRAN 
      00012C 02 09                  427         .word FORGET2
      00012E CD 11 4C         [ 4]  428         call NAMEQ
      000131 CD 06 1E         [ 4]  429         call QDUP 
      000134 CD 03 78         [ 4]  430         call QBRAN 
      000137 02 09                  431         .word FORGET2
      000139 CD 04 6A         [ 4]  432         call DROP 
      00013C 1D 00 04         [ 2]  433         subw x,#2*CELLL 
      00013F 90 5F            [ 1]  434         clrw y 
      000141 FF               [ 2]  435         ldw (x),y 
      000142 90 AE 40 02      [ 2]  436         ldw y,#APP_RUN 
      000146 EF 02            [ 2]  437         ldw (2,x),y 
      000148 CC 1C 57         [ 2]  438         jp ee_store 
                                    439 
                                    440 ;; Reset dictionary pointer before 
                                    441 ;; forgotten word. RAM space and 
                                    442 ;; interrupt vector defined after 
                                    443 ;; must be resetted also.
      00014B 01 1B                  444         .word LINK 
                           00014D   445         LINK=.
      00014D 06                     446         .byte 6
      00014E 46 4F 52 47 45 54      447         .ascii "FORGET" 
      000154                        448 FORGET: 
      000154 CD 10 4F         [ 4]  449         call TOKEN
      000157 CD 04 74         [ 4]  450         call DUPP 
      00015A CD 03 78         [ 4]  451         call QBRAN 
      00015D 02 09                  452         .word FORGET2
      00015F CD 11 4C         [ 4]  453         call NAMEQ ; ( a -- ca na | a F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000162 CD 06 1E         [ 4]  454         call QDUP 
      000165 CD 03 78         [ 4]  455         call QBRAN 
      000168 02 09                  456         .word FORGET2
                                    457 ; only forget users words 
      00016A CD 04 74         [ 4]  458         call DUPP ; ( ca na na )
      00016D CD 03 45         [ 4]  459         call DOLIT 
      000170 21 00                  460         .word app_space 
      000172 CD 04 84         [ 4]  461         call SWAPP 
      000175 CD 07 2F         [ 4]  462         call  ULESS 
      000178 CD 03 78         [ 4]  463         call QBRAN 
      00017B 01 CB                  464         .word FORGET6 
                                    465 ; ( ca na -- )        
                                    466 ;reset ivec with address >= ca
      00017D CD 04 84         [ 4]  467         call SWAPP ; ( na ca -- ) 
      000180 CD 1E 48         [ 4]  468         call CHKIVEC ; ( na -- ) 
                                    469 ; start at LAST and link back to na 
                                    470 ; if variable found reset VP at that point.
      000183                        471 FORGET1:
      000183 CD 05 E0         [ 4]  472         call LAST 
      000186 CD 03 CD         [ 4]  473         call AT 
      000189 CD 04 74         [ 4]  474         call DUPP  ; ( -- na last last )
      00018C CD 02 1F         [ 4]  475         call FREEVAR ; ( -- na last )
      00018F CD 04 74         [ 4]  476         call DUPP 
      000192 CD 03 45         [ 4]  477         call DOLIT 
      000195 00 02                  478         .word 2 
      000197 CD 06 E8         [ 4]  479         call SUBB ; ( na last -- na last lfa ) link address 
      00019A CD 03 CD         [ 4]  480         call AT 
      00019D CD 04 74         [ 4]  481         call DUPP ; ( -- na last a a )
      0001A0 CD 05 B4         [ 4]  482         call CNTXT 
      0001A3 CD 03 B6         [ 4]  483         call STORE
      0001A6 CD 05 E0         [ 4]  484         call LAST  
      0001A9 CD 03 B6         [ 4]  485         call STORE ; ( --  na last )
      0001AC CD 04 9E         [ 4]  486         call OVER 
      0001AF CD 07 10         [ 4]  487         call EQUAL ; ( na last na -- na T|F ) 
      0001B2 CD 03 78         [ 4]  488         call QBRAN 
      0001B5 01 83                  489         .word FORGET1 
                                    490 ; ( na -- )
      0001B7 CD 03 45         [ 4]  491         call DOLIT 
      0001BA 00 02                  492         .word 2 
      0001BC CD 06 E8         [ 4]  493         call SUBB 
      0001BF CD 05 D0         [ 4]  494         call CPP 
      0001C2 CD 03 B6         [ 4]  495         call STORE  
      0001C5 CD 1B 04         [ 4]  496         call UPDATCP 
      0001C8 CC 1A DB         [ 2]  497         jp UPDATLAST 
      0001CB                        498 FORGET6: ; tried to forget a RAM or system word 
                                    499 ; ( ca na -- )
      0001CB 1D 00 02         [ 2]  500         subw x,#CELLL 
      0001CE 90 BE 2A         [ 2]  501         ldw y,SP0 
      0001D1 FF               [ 2]  502         ldw (x),y  
      0001D2 CD 07 2F         [ 4]  503         call ULESS
      0001D5 CD 03 78         [ 4]  504         call QBRAN 
      0001D8 01 FB                  505         .word PROTECTED 
      0001DA CD 12 58         [ 4]  506         call ABORQ 
      0001DD 1D                     507         .byte 29
      0001DE 20 46 6F 72 20 52 41   508         .ascii " For RAM definition do REBOOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FB                        509 PROTECTED:
      0001FB CD 12 58         [ 4]  510         call ABORQ
      0001FE 0A                     511         .byte 10
      0001FF 20 50 72 6F 74 65 63   512         .ascii " Protected"
             74 65 64
      000209                        513 FORGET2: ; no name or not found in dictionary 
      000209 CD 12 58         [ 4]  514         call ABORQ
      00020C 05                     515         .byte 5
      00020D 20 77 68 61 74         516         .ascii " what"
      000212                        517 FORGET4:
      000212 CC 04 6A         [ 2]  518         jp DROP 
                                    519 
                                    520 
                                    521 ;---------------------------------
                                    522 ; if na is variable 
                                    523 ; free variable data  
                                    524 ; FREEVAR ( na -- )
                                    525 ;---------------------------------
      000215 01 4D                  526         .word LINK 
                           000217   527         LINK=.
      000217 07                     528         .byte 7 
      000218 46 52 45 45 56 41 52   529         .ascii "FREEVAR"
      00021F                        530 FREEVAR:
      00021F CD 04 74         [ 4]  531         call DUPP ; ( na na -- )
      000222 CD 03 EB         [ 4]  532         CALL CAT  ; ( na c -- )
      000225 CD 09 69         [ 4]  533         call ONEP ;
      000228 CD 06 6F         [ 4]  534         CALL PLUS ; ( na c+1 -- ca ) 
      00022B CD 09 69         [ 4]  535         call ONEP ; ( ca+ -- ) to get routne address 
      00022E CD 04 74         [ 4]  536         call DUPP ; ( ca+ ca+ -- )
      000231 CD 03 CD         [ 4]  537         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000234 CD 03 45         [ 4]  538         call DOLIT 
      000237 05 21                  539         .word DOVAR ; if routine address is DOVAR then variable 
      000239 CD 07 10         [ 4]  540         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00023C CD 03 78         [ 4]  541         call QBRAN 
      00023F 02 55                  542         .word FREEVAR4 
      000241 CD 03 45         [ 4]  543         call DOLIT 
      000244 00 02                  544         .word 2 
      000246 CD 06 6F         [ 4]  545         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      000249 CD 03 CD         [ 4]  546         call AT 
      00024C CD 05 C2         [ 4]  547         call VPP   
      00024F CD 03 B6         [ 4]  548         call STORE 
      000252 CC 1B 1B         [ 2]  549         jp UPDATVP 
      000255                        550 FREEVAR4: ; not variable
      000255 CC 04 6A         [ 2]  551         jp  DROP 
                                    552 
                                    553 ;;
                                    554 ;; get millisecond counter 
                                    555 ;; msec ( -- u )
                                    556 ;; Added by Picatout 2020-04-26
      000258 02 17                  557         .word LINK  
                           00025A   558         LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00025A 04                     559         .byte 4
      00025B 4D 53 45 43            560         .ascii "MSEC"
      00025F                        561 MSEC: 
      00025F 1D 00 02         [ 2]  562         subw x,#CELLL 
      000262 90 BE 2E         [ 2]  563         ldw y,MS 
      000265 FF               [ 2]  564         ldw (x),y 
      000266 81               [ 4]  565         ret 
                                    566 
                                    567 ; suspend execution for u msec 
                                    568 ;  pause ( u -- )
      000267 02 5A                  569         .word LINK 
                           000269   570         LINK=.
      000269 05                     571         .byte 5 
      00026A 50 41 55 53 45         572         .ascii "PAUSE"
      00026F                        573 PAUSE:
      00026F 90 93            [ 1]  574         ldw y,x
      000271 90 FE            [ 2]  575         ldw y,(y)
      000273 72 B9 00 2E      [ 2]  576         addw y,MS 
      000277 8F               [10]  577 1$:     wfi  
      000278 90 B3 2E         [ 2]  578         cpw y,MS  
      00027B 26 FA            [ 1]  579         jrne 1$        
      00027D 1C 00 02         [ 2]  580         addw x,#CELLL 
      000280 81               [ 4]  581         ret 
                                    582 
                                    583 ; initialize count down timer 
                                    584 ;  TIMER ( u -- )  milliseconds 
      000281 02 69                  585         .word LINK 
                           000283   586         LINK=.
      000283 05                     587         .byte 5 
      000284 54 49 4D 45 52         588         .ascii "TIMER" 
      000289                        589 TIMER:
      000289 90 93            [ 1]  590         ldw y,x
      00028B 90 FE            [ 2]  591         ldw y,(y) 
      00028D 90 BF 30         [ 2]  592         ldw CNTDWN,y
      000290 1C 00 02         [ 2]  593         addw x,#CELLL 
      000293 81               [ 4]  594         ret 
                                    595 
                                    596 ; check for TIMER exiparition 
                                    597 ;  TIMEOUT? ( -- 0|-1 )
      000294 02 83                  598         .word LINK 
                           000296   599         LINK=. 
      000296 08                     600         .byte 8 
      000297 54 49 4D 45 4F 55 54   601         .ascii "TIMEOUT?"
             3F
      00029F                        602 TIMEOUTQ: 
      00029F 4F               [ 1]  603         clr a
      0002A0 1D 00 02         [ 2]  604         subw x,#CELLL 
      0002A3 90 BE 30         [ 2]  605         ldw y,CNTDWN 
      0002A6 26 01            [ 1]  606         jrne 1$ 
      0002A8 43               [ 1]  607         cpl a 
      0002A9 E7 01            [ 1]  608 1$:     ld (1,x),a 
      0002AB F7               [ 1]  609         ld (x),a 
      0002AC 81               [ 4]  610         ret         
                                    611 
                                    612 ; reboot MCU 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    613 ; REBOOT ( -- )
      0002AD 02 96                  614         .word LINK 
                           0002AF   615         LINK=. 
      0002AF 06                     616         .byte 6 
      0002B0 52 45 42 4F 4F 54      617         .ascii "REBOOT"
      0002B6                        618 reboot:
      0002B6 CC 00 00         [ 2]  619         jp NonHandledInterrupt
                                    620 
                                    621 ; compile to flash memory 
                                    622 ; TO-FLASH ( -- )
      0002B9 02 AF                  623         .word LINK 
                           0002BB   624         LINK=.
      0002BB 08                     625         .byte 8
      0002BC 54 4F 2D 46 4C 41 53   626         .ascii "TO-FLASH"
             48
      0002C4                        627 TOFLASH:
      0002C4 CD 05 F3         [ 4]  628         call RAMLAST 
      0002C7 CD 03 CD         [ 4]  629         call AT 
      0002CA CD 06 1E         [ 4]  630         call QDUP 
      0002CD CD 03 78         [ 4]  631         call QBRAN
      0002D0 02 F3                  632         .word 1$
      0002D2 CD 12 58         [ 4]  633         call ABORQ 
      0002D5 1D                     634         .byte 29
      0002D6 20 4E 6F 74 20 77 68   635         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      0002F3 90 AE FF FF      [ 2]  636 1$:     ldw y,#-1 
      0002F7 90 BF 1E         [ 2]  637         ldw UTFLASH,y
      0002FA 81               [ 4]  638         ret 
                                    639 
                                    640 ; compile to RAM 
                                    641 ; TO-RAM ( -- )
      0002FB 02 BB                  642         .word LINK 
                           0002FD   643         LINK=.
      0002FD 06                     644         .byte 6 
      0002FE 54 4F 2D 52 41 4D      645         .ascii "TO-RAM"
      000304                        646 TORAM:
      000304 90 5F            [ 1]  647         clrw y 
      000306 90 BF 1E         [ 2]  648         ldw UTFLASH,y 
      000309 81               [ 4]  649         ret 
                                    650         
                                    651 
                                    652 ;; Device dependent I/O
                                    653 ;       ?RX     ( -- c T | F )
                                    654 ;         Return input byte and true, or false.
      00030A 02 FD                  655         .word      LINK 
                           00030C   656 LINK	= .
      00030C 04                     657         .byte      4
      00030D 3F 4B 45 59            658         .ascii     "?KEY"
      000311                        659 QKEY:
      000311 90 5F            [ 1]  660         CLRW Y 
      000313 72 0B 52 30 0B   [ 2]  661         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000318 C6 52 31         [ 1]  662         LD    A,UART1_DR   ;get char in A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00031B 1D 00 02         [ 2]  663 	SUBW	X,#2
      00031E E7 01            [ 1]  664         LD     (1,X),A
      000320 7F               [ 1]  665 	CLR	(X)
      000321 90 53            [ 2]  666         CPLW     Y
      000323                        667 INCH:
      000323 1D 00 02         [ 2]  668 	SUBW	X,#2
      000326 FF               [ 2]  669         LDW     (X),Y
      000327 81               [ 4]  670         RET
                                    671 
                                    672 ;       TX!     ( c -- )
                                    673 ;       Send character c to  output device.
      000328 03 0C                  674         .word      LINK
                           00032A   675 LINK	= .
      00032A 04                     676         .byte      4
      00032B 45 4D 49 54            677         .ascii     "EMIT"
      00032F                        678 EMIT:
      00032F E6 01            [ 1]  679         LD     A,(1,X)
      000331 1C 00 02         [ 2]  680 	ADDW	X,#2
      000334 72 0F 52 30 FB   [ 2]  681 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      000339 C7 52 31         [ 1]  682         LD    UART1_DR,A   ;send A
      00033C 81               [ 4]  683         RET
                                    684 
                                    685 ;; The kernel
                                    686 
                                    687 ;       doLIT   ( -- w )
                                    688 ;       Push an inline literal.
      00033D 03 2A                  689         .word      LINK
                           00033F   690 LINK	= 	.
      00033F 45                     691 	.byte      COMPO+5
      000340 44 4F 4C 49 54         692         .ascii     "DOLIT"
      000345                        693 DOLIT:
      000345 1D 00 02         [ 2]  694 	SUBW X,#2
                           000001   695 .if PICATOUT_MOD 
      000348 16 01            [ 2]  696         ldw y,(1,sp)
      00034A 90 FE            [ 2]  697         ldw y,(y)
      00034C FF               [ 2]  698         ldw (x),y
      00034D 90 85            [ 2]  699         popw y 
      00034F 90 EC 02         [ 2]  700         jp (2,y)
                           000000   701 .else 
                                    702         POPW Y
                                    703 	LDW YTEMP,Y
                                    704 	LDW Y,(Y)
                                    705         LDW (X),Y
                                    706         LDW Y,YTEMP
                                    707 	JP (2,Y)
                                    708 .endif 
                                    709 
                                    710 ;       next    ( -- )
                                    711 ;       Code for  single index loop.
      000352 03 3F                  712         .word      LINK
                           000354   713 LINK	= 	.
      000354 44                     714 	.byte      COMPO+4
      000355 4E 45 58 54            715         .ascii     "NEXT"
      000359                        716 DONXT:
      000359 16 03            [ 2]  717 	LDW Y,(3,SP)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00035B 90 5A            [ 2]  718 	DECW Y
      00035D 2A 07            [ 1]  719 	JRPL NEX1 ; jump if N=0
      00035F 90 85            [ 2]  720 	POPW Y
                           000001   721 .if PICATOUT_MOD
      000361 5B 02            [ 2]  722         addw sp,#2
                           000000   723 .else        
                                    724 	POP A
                                    725 	POP A
                                    726 .endif         
      000363 90 EC 02         [ 2]  727         JP (2,Y)
      000366                        728 NEX1:
      000366 17 03            [ 2]  729         LDW (3,SP),Y
      000368 90 85            [ 2]  730         POPW Y
      00036A 90 FE            [ 2]  731 	LDW Y,(Y)
      00036C 90 FC            [ 2]  732 	JP (Y)
                                    733 
                                    734 ;       ?branch ( f -- )
                                    735 ;       Branch if flag is zero.
      00036E 03 54                  736         .word      LINK
                           000370   737 LINK	= 	.
      000370 47                     738 	.byte      COMPO+7
      000371 3F 42 52 41 4E 43 48   739         .ascii     "?BRANCH"
      000378                        740 QBRAN:	
      000378 90 93            [ 1]  741         LDW Y,X
      00037A 1C 00 02         [ 2]  742 	ADDW X,#2
      00037D 90 FE            [ 2]  743 	LDW Y,(Y)
      00037F 27 0E            [ 1]  744         JREQ     BRAN
      000381 90 85            [ 2]  745 	POPW Y
      000383 90 EC 02         [ 2]  746 	JP (2,Y)
                                    747         
                                    748 ;       branch  ( -- )
                                    749 ;       Branch to an inline address.
      000386 03 70                  750         .word      LINK
                           000388   751 LINK	= 	.
      000388 46                     752 	.byte      COMPO+6
      000389 42 52 41 4E 43 48      753         .ascii     "BRANCH"
      00038F                        754 BRAN:
      00038F 90 85            [ 2]  755         POPW Y
      000391 90 FE            [ 2]  756 	LDW Y,(Y)
      000393 90 FC            [ 2]  757         JP     (Y)
                                    758 
                                    759 ;       EXECUTE ( ca -- )
                                    760 ;       Execute  word at ca.
      000395 03 88                  761         .word      LINK
                           000397   762 LINK	= 	.
      000397 07                     763         .byte       7
      000398 45 58 45 43 55 54 45   764         .ascii     "EXECUTE"
      00039F                        765 EXECU:
      00039F 90 93            [ 1]  766         LDW Y,X
      0003A1 1C 00 02         [ 2]  767 	ADDW X,#2
      0003A4 90 FE            [ 2]  768 	LDW  Y,(Y)
      0003A6 90 FC            [ 2]  769         JP   (Y)
                                    770 
                                    771 ;       EXIT    ( -- )
                                    772 ;       Terminate a colon definition.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0003A8 03 97                  773         .word      LINK
                           0003AA   774 LINK = .
      0003AA 04                     775         .byte      4
      0003AB 45 58 49 54            776         .ascii     "EXIT"
      0003AF                        777 EXIT:
      0003AF 90 85            [ 2]  778         POPW Y
      0003B1 81               [ 4]  779         RET
                                    780 
                                    781 ;       !       ( w a -- )
                                    782 ;       Pop  data stack to memory.
      0003B2 03 AA                  783         .word      LINK
                           0003B4   784 LINK = .
      0003B4 01                     785         .byte      1
      0003B5 21                     786         .ascii     "!"
      0003B6                        787 STORE:
      0003B6 90 93            [ 1]  788         LDW Y,X
      0003B8 90 FE            [ 2]  789         LDW Y,(Y)    ;Y=a
      0003BA 90 BF 24         [ 2]  790         LDW YTEMP,Y
      0003BD 90 93            [ 1]  791         LDW Y,X
      0003BF 90 EE 02         [ 2]  792         LDW Y,(2,Y)
      0003C2 91 CF 24         [ 5]  793         LDW [YTEMP],Y ;store w at a
      0003C5 1C 00 04         [ 2]  794         ADDW X,#4 ; DDROP 
      0003C8 81               [ 4]  795         RET     
                                    796 
                                    797 ;       @       ( a -- w )
                                    798 ;       Push memory location to stack.
      0003C9 03 B4                  799         .word      LINK
                           0003CB   800 LINK	= 	.
      0003CB 01                     801         .byte    1
      0003CC 40                     802         .ascii	"@"
      0003CD                        803 AT:
      0003CD 90 93            [ 1]  804         LDW Y,X     ;Y = a
      0003CF 90 FE            [ 2]  805         LDW Y,(Y)   ; address 
      0003D1 90 FE            [ 2]  806         LDW Y,(Y)   ; value 
      0003D3 FF               [ 2]  807         LDW (X),Y ;w = @Y
      0003D4 81               [ 4]  808         RET     
                                    809 
                                    810 ;       C!      ( c b -- )
                                    811 ;       Pop  data stack to byte memory.
      0003D5 03 CB                  812         .word      LINK
                           0003D7   813 LINK	= .
      0003D7 02                     814         .byte      2
      0003D8 43 21                  815         .ascii     "C!"
      0003DA                        816 CSTOR:
      0003DA 90 93            [ 1]  817         LDW Y,X
      0003DC 90 FE            [ 2]  818 	LDW Y,(Y)    ;Y=b
      0003DE E6 03            [ 1]  819         LD A,(3,X)    ;D = c
      0003E0 90 F7            [ 1]  820         LD  (Y),A     ;store c at b
      0003E2 1C 00 04         [ 2]  821 	ADDW X,#4 ; DDROP 
      0003E5 81               [ 4]  822         RET     
                                    823 
                                    824 ;       C@      ( b -- c )
                                    825 ;       Push byte in memory to  stack.
      0003E6 03 D7                  826         .word      LINK
                           0003E8   827 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003E8 02                     828         .byte      2
      0003E9 43 40                  829         .ascii     "C@"
      0003EB                        830 CAT:
      0003EB 90 93            [ 1]  831         LDW Y,X     ;Y=b
      0003ED 90 FE            [ 2]  832         LDW Y,(Y)
      0003EF 90 F6            [ 1]  833         LD A,(Y)
      0003F1 E7 01            [ 1]  834         LD (1,X),A
      0003F3 7F               [ 1]  835         CLR (X)
      0003F4 81               [ 4]  836         RET     
                                    837 
                                    838 ;       RP@     ( -- a )
                                    839 ;       Push current RP to data stack.
      0003F5 03 E8                  840         .word      LINK
                           0003F7   841 LINK	= .
      0003F7 03                     842         .byte      3
      0003F8 52 50 40               843         .ascii     "RP@"
      0003FB                        844 RPAT:
      0003FB 90 96            [ 1]  845         LDW Y,SP    ;save return addr
      0003FD 1D 00 02         [ 2]  846         SUBW X,#2
      000400 FF               [ 2]  847         LDW (X),Y
      000401 81               [ 4]  848         RET     
                                    849 
                                    850 ;       RP!     ( a -- )
                                    851 ;       Set  return stack pointer.
      000402 03 F7                  852         .word      LINK
                           000404   853 LINK	= 	. 
      000404 43                     854 	.byte      COMPO+3
      000405 52 50 21               855         .ascii     "RP!"
      000408                        856 RPSTO:
      000408 90 85            [ 2]  857         POPW Y
      00040A 90 BF 24         [ 2]  858         LDW YTEMP,Y
      00040D 90 93            [ 1]  859         LDW Y,X
      00040F 90 FE            [ 2]  860         LDW Y,(Y)
      000411 90 94            [ 1]  861         LDW SP,Y
      000413 1C 00 02         [ 2]  862         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000416 92 CC 24         [ 5]  863         JP [YTEMP]
                                    864 
                                    865 ;       R>      ( -- w )
                                    866 ;       Pop return stack to data stack.
      000419 04 04                  867         .word      LINK
                           00041B   868 LINK	= 	. 
      00041B 42                     869 	.byte      COMPO+2
      00041C 52 3E                  870         .ascii     "R>"
      00041E                        871 RFROM:
      00041E 90 85            [ 2]  872         POPW Y    ;save return addr
      000420 90 BF 24         [ 2]  873         LDW YTEMP,Y
      000423 90 85            [ 2]  874         POPW Y
      000425 1D 00 02         [ 2]  875         SUBW X,#2
      000428 FF               [ 2]  876         LDW (X),Y
      000429 92 CC 24         [ 5]  877         JP [YTEMP]
                                    878 
                                    879 ;       R@      ( -- w )
                                    880 ;       Copy top of return stack to stack.
      00042C 04 1B                  881         .word      LINK
                           00042E   882 LINK	= 	. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00042E 02                     883         .byte      2
      00042F 52 40                  884         .ascii     "R@"
      000431                        885 RAT:
                           000001   886 .if PICATOUT_MOD
      000431 16 03            [ 2]  887         ldw y,(3,sp)
      000433 1D 00 02         [ 2]  888         subw x,#CELLL 
      000436 FF               [ 2]  889         ldw (x),y 
      000437 81               [ 4]  890         ret 
                           000000   891 .else 
                                    892         POPW Y
                                    893         LDW YTEMP,Y
                                    894         POPW Y
                                    895         PUSHW Y
                                    896         SUBW X,#2
                                    897         LDW (X),Y
                                    898         JP [YTEMP]
                                    899 .endif         
                                    900 
                                    901 ;       >R      ( w -- )
                                    902 ;       Push data stack to return stack.
      000438 04 2E                  903         .word      LINK
                           00043A   904 LINK	= 	. 
      00043A 42                     905 	.byte      COMPO+2
      00043B 3E 52                  906         .ascii     ">R"
      00043D                        907 TOR:
      00043D 90 85            [ 2]  908         POPW Y    ;save return addr
      00043F 90 BF 24         [ 2]  909         LDW YTEMP,Y
      000442 90 93            [ 1]  910         LDW Y,X
      000444 90 FE            [ 2]  911         LDW Y,(Y)
      000446 90 89            [ 2]  912         PUSHW Y    ;restore return addr
      000448 1C 00 02         [ 2]  913         ADDW X,#2
      00044B 92 CC 24         [ 5]  914         JP [YTEMP]
                                    915 
                                    916 ;       SP@     ( -- a )
                                    917 ;       Push current stack pointer.
      00044E 04 3A                  918         .word      LINK
                           000450   919 LINK	= 	. 
      000450 03                     920         .byte      3
      000451 53 50 40               921         .ascii     "SP@"
      000454                        922 SPAT:
      000454 90 93            [ 1]  923 	LDW Y,X
      000456 1D 00 02         [ 2]  924         SUBW X,#2
      000459 FF               [ 2]  925 	LDW (X),Y
      00045A 81               [ 4]  926         RET     
                                    927 
                                    928 ;       SP!     ( a -- )
                                    929 ;       Set  data stack pointer.
      00045B 04 50                  930         .word      LINK
                           00045D   931 LINK	= 	. 
      00045D 03                     932         .byte      3
      00045E 53 50 21               933         .ascii     "SP!"
      000461                        934 SPSTO:
      000461 FE               [ 2]  935         LDW     X,(X)     ;X = a
      000462 81               [ 4]  936         RET     
                                    937 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



                                    938 ;       DROP    ( w -- )
                                    939 ;       Discard top stack item.
      000463 04 5D                  940         .word      LINK
                           000465   941 LINK	= 	. 
      000465 04                     942         .byte      4
      000466 44 52 4F 50            943         .ascii     "DROP"
      00046A                        944 DROP:
      00046A 1C 00 02         [ 2]  945         ADDW X,#2     
      00046D 81               [ 4]  946         RET     
                                    947 
                                    948 ;       DUP     ( w -- w w )
                                    949 ;       Duplicate  top stack item.
      00046E 04 65                  950         .word      LINK
                           000470   951 LINK	= 	. 
      000470 03                     952         .byte      3
      000471 44 55 50               953         .ascii     "DUP"
      000474                        954 DUPP:
      000474 90 93            [ 1]  955 	LDW Y,X
      000476 1D 00 02         [ 2]  956         SUBW X,#2
      000479 90 FE            [ 2]  957 	LDW Y,(Y)
      00047B FF               [ 2]  958 	LDW (X),Y
      00047C 81               [ 4]  959         RET     
                                    960 
                                    961 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    962 ;       Exchange top two stack items.
      00047D 04 70                  963         .word      LINK
                           00047F   964 LINK	= 	. 
      00047F 04                     965         .byte      4
      000480 53 57 41 50            966         .ascii     "SWAP"
      000484                        967 SWAPP:
      000484 90 93            [ 1]  968         LDW Y,X
      000486 90 FE            [ 2]  969         LDW Y,(Y)
      000488 90 BF 24         [ 2]  970         LDW YTEMP,Y
      00048B 90 93            [ 1]  971         LDW Y,X
      00048D 90 EE 02         [ 2]  972         LDW Y,(2,Y)
      000490 FF               [ 2]  973         LDW (X),Y
      000491 90 BE 24         [ 2]  974         LDW Y,YTEMP
      000494 EF 02            [ 2]  975         LDW (2,X),Y
      000496 81               [ 4]  976         RET     
                                    977 
                                    978 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    979 ;       Copy second stack item to top.
      000497 04 7F                  980         .word      LINK
                           000499   981 LINK	= . 
      000499 04                     982         .byte      4
      00049A 4F 56 45 52            983         .ascii     "OVER"
      00049E                        984 OVER:
      00049E 1D 00 02         [ 2]  985         SUBW X,#2
      0004A1 90 93            [ 1]  986         LDW Y,X
      0004A3 90 EE 04         [ 2]  987         LDW Y,(4,Y)
      0004A6 FF               [ 2]  988         LDW (X),Y
      0004A7 81               [ 4]  989         RET     
                                    990 
                                    991 ;       0<      ( n -- t )
                                    992 ;       Return true if n is negative.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004A8 04 99                  993         .word      LINK
                           0004AA   994 LINK	= . 
      0004AA 02                     995         .byte      2
      0004AB 30 3C                  996         .ascii     "0<"
      0004AD                        997 ZLESS:
      0004AD A6 FF            [ 1]  998         LD A,#0xFF
      0004AF 90 93            [ 1]  999         LDW Y,X
      0004B1 90 FE            [ 2] 1000         LDW Y,(Y)
      0004B3 2B 01            [ 1] 1001         JRMI     ZL1
      0004B5 4F               [ 1] 1002         CLR A   ;false
      0004B6 F7               [ 1] 1003 ZL1:    LD     (X),A
      0004B7 E7 01            [ 1] 1004         LD (1,X),A
      0004B9 81               [ 4] 1005 	RET     
                                   1006 
                                   1007 ;       AND     ( w w -- w )
                                   1008 ;       Bitwise AND.
      0004BA 04 AA                 1009         .word      LINK
                           0004BC  1010 LINK	= . 
      0004BC 03                    1011         .byte      3
      0004BD 41 4E 44              1012         .ascii     "AND"
      0004C0                       1013 ANDD:
      0004C0 F6               [ 1] 1014         LD  A,(X)    ;D=w
      0004C1 E4 02            [ 1] 1015         AND A,(2,X)
      0004C3 E7 02            [ 1] 1016         LD (2,X),A
      0004C5 E6 01            [ 1] 1017         LD A,(1,X)
      0004C7 E4 03            [ 1] 1018         AND A,(3,X)
      0004C9 E7 03            [ 1] 1019         LD (3,X),A
      0004CB 1C 00 02         [ 2] 1020         ADDW X,#2
      0004CE 81               [ 4] 1021         RET
                                   1022 
                                   1023 ;       OR      ( w w -- w )
                                   1024 ;       Bitwise inclusive OR.
      0004CF 04 BC                 1025         .word      LINK
                           0004D1  1026 LINK = . 
      0004D1 02                    1027         .byte      2
      0004D2 4F 52                 1028         .ascii     "OR"
      0004D4                       1029 ORR:
      0004D4 F6               [ 1] 1030         LD A,(X)    ;D=w
      0004D5 EA 02            [ 1] 1031         OR A,(2,X)
      0004D7 E7 02            [ 1] 1032         LD (2,X),A
      0004D9 E6 01            [ 1] 1033         LD A,(1,X)
      0004DB EA 03            [ 1] 1034         OR A,(3,X)
      0004DD E7 03            [ 1] 1035         LD (3,X),A
      0004DF 1C 00 02         [ 2] 1036         ADDW X,#2
      0004E2 81               [ 4] 1037         RET
                                   1038 
                                   1039 ;       XOR     ( w w -- w )
                                   1040 ;       Bitwise exclusive OR.
      0004E3 04 D1                 1041         .word      LINK
                           0004E5  1042 LINK	= . 
      0004E5 03                    1043         .byte      3
      0004E6 58 4F 52              1044         .ascii     "XOR"
      0004E9                       1045 XORR:
      0004E9 F6               [ 1] 1046         LD A,(X)    ;D=w
      0004EA E8 02            [ 1] 1047         XOR A,(2,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004EC E7 02            [ 1] 1048         LD (2,X),A
      0004EE E6 01            [ 1] 1049         LD A,(1,X)
      0004F0 E8 03            [ 1] 1050         XOR A,(3,X)
      0004F2 E7 03            [ 1] 1051         LD (3,X),A
      0004F4 1C 00 02         [ 2] 1052         ADDW X,#2
      0004F7 81               [ 4] 1053         RET
                                   1054 
                                   1055 ;       UM+     ( u u -- udsum )
                                   1056 ;       Add two unsigned single
                                   1057 ;       and return a double sum.
      0004F8 04 E5                 1058         .word      LINK
                           0004FA  1059 LINK	= . 
      0004FA 03                    1060         .byte      3
      0004FB 55 4D 2B              1061         .ascii     "UM+"
      0004FE                       1062 UPLUS:
      0004FE A6 01            [ 1] 1063         LD A,#1
      000500 90 93            [ 1] 1064         LDW Y,X
      000502 90 EE 02         [ 2] 1065         LDW Y,(2,Y)
      000505 90 BF 24         [ 2] 1066         LDW YTEMP,Y
      000508 90 93            [ 1] 1067         LDW Y,X
      00050A 90 FE            [ 2] 1068         LDW Y,(Y)
      00050C 72 B9 00 24      [ 2] 1069         ADDW Y,YTEMP
      000510 EF 02            [ 2] 1070         LDW (2,X),Y
      000512 25 01            [ 1] 1071         JRC     UPL1
      000514 4F               [ 1] 1072         CLR A
      000515 E7 01            [ 1] 1073 UPL1:   LD     (1,X),A
      000517 7F               [ 1] 1074         CLR (X)
      000518 81               [ 4] 1075         RET
                                   1076 
                                   1077 ;; System and user variables
                                   1078 
                                   1079 ;       doVAR   ( -- a )
                                   1080 ;       Code for VARIABLE and CREATE.
      000519 04 FA                 1081         .word      LINK
                           00051B  1082 LINK	= . 
      00051B 45                    1083 	.byte      COMPO+5
      00051C 44 4F 56 41 52        1084         .ascii     "DOVAR"
      000521                       1085 DOVAR:
      000521 1D 00 02         [ 2] 1086 	SUBW X,#2
      000524 90 85            [ 2] 1087         POPW Y    ;get return addr (pfa)
                           000001  1088 .if PICATOUT_MOD
      000526 90 FE            [ 2] 1089         LDW Y,(Y) ; indirect address 
                                   1090 .endif ;PICATOUT_MOD        
      000528 FF               [ 2] 1091         LDW (X),Y    ;push on stack
      000529 81               [ 4] 1092         RET     ;go to RET of EXEC
                                   1093 
                                   1094 ;       BASE    ( -- a )
                                   1095 ;       Radix base for numeric I/O.
      00052A 05 1B                 1096         .word      LINK        
                           00052C  1097 LINK = . 
      00052C 04                    1098         .byte      4
      00052D 42 41 53 45           1099         .ascii     "BASE"
      000531                       1100 BASE:
      000531 90 AE 00 06      [ 2] 1101 	LDW Y,#UBASE 
      000535 1D 00 02         [ 2] 1102 	SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000538 FF               [ 2] 1103         LDW (X),Y
      000539 81               [ 4] 1104         RET
                                   1105 
                                   1106 ;       tmp     ( -- a )
                                   1107 ;       A temporary storage.
      00053A 05 2C                 1108         .word      LINK
                                   1109         
                           00053C  1110 LINK = . 
      00053C 03                    1111 	.byte      3
      00053D 54 4D 50              1112         .ascii     "TMP"
      000540                       1113 TEMP:
      000540 90 AE 00 08      [ 2] 1114 	LDW Y,#UTMP
      000544 1D 00 02         [ 2] 1115 	SUBW X,#2
      000547 FF               [ 2] 1116         LDW (X),Y
      000548 81               [ 4] 1117         RET
                                   1118 
                                   1119 ;       >IN     ( -- a )
                                   1120 ;        Hold parsing pointer.
      000549 05 3C                 1121         .word      LINK
                           00054B  1122 LINK = . 
      00054B 03                    1123         .byte      3
      00054C 3E 49 4E              1124         .ascii    ">IN"
      00054F                       1125 INN:
      00054F 90 AE 00 0A      [ 2] 1126 	LDW Y,#UINN 
      000553 1D 00 02         [ 2] 1127 	SUBW X,#2
      000556 FF               [ 2] 1128         LDW (X),Y
      000557 81               [ 4] 1129         RET
                                   1130 
                                   1131 ;       #TIB    ( -- a )
                                   1132 ;       Count in terminal input buffer.
      000558 05 4B                 1133         .word      LINK
                           00055A  1134 LINK = . 
      00055A 04                    1135         .byte      4
      00055B 23 54 49 42           1136         .ascii     "#TIB"
      00055F                       1137 NTIB:
      00055F 90 AE 00 0C      [ 2] 1138 	LDW Y,#UCTIB 
      000563 1D 00 02         [ 2] 1139 	SUBW X,#2
      000566 FF               [ 2] 1140         LDW (X),Y
      000567 81               [ 4] 1141         RET
                                   1142 
                           000001  1143 .if PICATOUT_MOD
                                   1144 ;       TBUF ( -- a )
                                   1145 ;       address of 128 bytes transaction buffer 
      000568 05 5A                 1146         .word LINK 
                           00056A  1147         LINK=.
      00056A 04                    1148         .byte 4 
      00056B 54 42 55 46           1149         .ascii "TBUF"
      00056F                       1150 TBUF:
      00056F 90 AE 16 80      [ 2] 1151         ldw y,#ROWBUFF
      000573 1D 00 02         [ 2] 1152         subw x,#CELLL
      000576 FF               [ 2] 1153         ldw (x),y 
      000577 81               [ 4] 1154         ret 
                                   1155 
                                   1156 ; systeme variable 
                                   1157 ; compilation destination 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



                                   1158 ; TFLASH ( -- A )
      000578 05 6A                 1159         .word LINK 
                           00057A  1160         LINK=.
      00057A 06                    1161         .byte 6 
      00057B 54 46 4C 41 53 48     1162         .ascii "TFLASH"         
      000581                       1163 TFLASH:
      000581 1D 00 02         [ 2] 1164         subw x,#CELLL 
      000584 90 AE 00 1E      [ 2] 1165         ldw y,#UTFLASH
      000588 FF               [ 2] 1166         ldw (x),y 
      000589 81               [ 4] 1167         ret 
                                   1168 
                                   1169 .endif ;PICATOUT_MOD
                                   1170 
                                   1171 ;       "EVAL   ( -- a )
                                   1172 ;       Execution vector of EVAL.
      00058A 05 7A                 1173         .word      LINK
                           00058C  1174 LINK = . 
      00058C 05                    1175         .byte      5
      00058D 27 45 56 41 4C        1176         .ascii     "'EVAL"
      000592                       1177 TEVAL:
      000592 90 AE 00 10      [ 2] 1178 	LDW Y,#UINTER 
      000596 1D 00 02         [ 2] 1179 	SUBW X,#2
      000599 FF               [ 2] 1180         LDW (X),Y
      00059A 81               [ 4] 1181         RET
                                   1182 
                                   1183 ;       HLD     ( -- a )
                                   1184 ;       Hold a pointer of output string.
      00059B 05 8C                 1185         .word      LINK
                           00059D  1186 LINK = . 
      00059D 03                    1187         .byte      3
      00059E 48 4C 44              1188         .ascii     "HLD"
      0005A1                       1189 HLD:
      0005A1 90 AE 00 12      [ 2] 1190 	LDW Y,#UHLD 
      0005A5 1D 00 02         [ 2] 1191 	SUBW X,#2
      0005A8 FF               [ 2] 1192         LDW (X),Y
      0005A9 81               [ 4] 1193         RET
                                   1194 
                                   1195 ;       CONTEXT ( -- a )
                                   1196 ;       Start vocabulary search.
      0005AA 05 9D                 1197         .word      LINK
                           0005AC  1198 LINK = . 
      0005AC 07                    1199         .byte      7
      0005AD 43 4F 4E 54 45 58 54  1200         .ascii     "CONTEXT"
      0005B4                       1201 CNTXT:
      0005B4 90 AE 00 14      [ 2] 1202 	LDW Y,#UCNTXT
      0005B8 1D 00 02         [ 2] 1203 	SUBW X,#2
      0005BB FF               [ 2] 1204         LDW (X),Y
      0005BC 81               [ 4] 1205         RET
                                   1206 
                                   1207 ;       VP      ( -- a )
                                   1208 ;       Point to top of variables
      0005BD 05 AC                 1209         .word      LINK
                           0005BF  1210 LINK = . 
      0005BF 02                    1211         .byte      2
      0005C0 56 50                 1212         .ascii     "VP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005C2                       1213 VPP:
      0005C2 90 AE 00 16      [ 2] 1214 	LDW Y,#UVP 
      0005C6 1D 00 02         [ 2] 1215 	SUBW X,#2
      0005C9 FF               [ 2] 1216         LDW (X),Y
      0005CA 81               [ 4] 1217         RET
                                   1218 
                           000001  1219 .if PICATOUT_MOD
                                   1220 ;       CP    ( -- a )
                                   1221 ;       Pointer to top of FLASH 
      0005CB 05 BF                 1222         .word LINK 
                           0005CD  1223         LINK=.
      0005CD 02                    1224         .byte 2 
      0005CE 43 50                 1225         .ascii "CP"
      0005D0                       1226 CPP: 
      0005D0 90 AE 00 18      [ 2] 1227         ldw y,#UCP 
      0005D4 1D 00 02         [ 2] 1228         subw x,#CELLL 
      0005D7 FF               [ 2] 1229         ldw (x),y 
      0005D8 81               [ 4] 1230         ret                
                                   1231 .endif ;PICATOUT_MOD
                                   1232 
                                   1233 ;       LAST    ( -- a )
                                   1234 ;       Point to last name in dictionary.
      0005D9 05 CD                 1235         .word      LINK
                           0005DB  1236 LINK = . 
      0005DB 04                    1237         .byte      4
      0005DC 4C 41 53 54           1238         .ascii     "LAST"
      0005E0                       1239 LAST:
      0005E0 90 AE 00 1A      [ 2] 1240 	LDW Y,#ULAST 
      0005E4 1D 00 02         [ 2] 1241 	SUBW X,#2
      0005E7 FF               [ 2] 1242         LDW (X),Y
      0005E8 81               [ 4] 1243         RET
                                   1244 
                           000001  1245 .if PICATOUT_MOD 
                                   1246 ; address of system variable URLAST 
                                   1247 ;       RAMLAST ( -- a )
                                   1248 ; RAM dictionary context 
      0005E9 05 DB                 1249         .word LINK 
                           0005EB  1250         LINK=. 
      0005EB 07                    1251         .byte 7  
      0005EC 52 41 4D 4C 41 53 54  1252         .ascii "RAMLAST" 
      0005F3                       1253 RAMLAST: 
      0005F3 90 AE 00 20      [ 2] 1254         ldw y,#URLAST 
      0005F7 1D 00 02         [ 2] 1255         subw x,#CELLL 
      0005FA FF               [ 2] 1256         ldw (x),y 
      0005FB 81               [ 4] 1257         ret 
                                   1258 .endif ;PICATOUT_MOD
                                   1259 
                           000001  1260 .if PICATOUT_MOD
                                   1261 ; OFFSET ( -- a )
                                   1262 ; address of system variable OFFSET 
      0005FC 05 EB                 1263         .word LINK 
                           0005FE  1264         LINK=.
      0005FE 06                    1265         .byte 6
      0005FF 4F 46 46 53 45 54     1266         .ascii "OFFSET" 
      000605                       1267 OFFSET: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000605 1D 00 02         [ 2] 1268         subw x,#CELLL
      000608 90 AE 00 1C      [ 2] 1269         ldw y,#UOFFSET 
      00060C FF               [ 2] 1270         ldw (x),y 
      00060D 81               [ 4] 1271         ret 
                                   1272 
                                   1273 ; adjust jump address adding OFFSET
                                   1274 ; ADR-ADJ ( a -- a+offset )
      00060E                       1275 ADRADJ: 
      00060E CD 06 05         [ 4] 1276         call OFFSET 
      000611 CD 03 CD         [ 4] 1277         call AT 
      000614 CC 06 6F         [ 2] 1278         jp PLUS 
                                   1279 
                                   1280 .endif ; PICATOUT_MOD
                                   1281 
                                   1282 ;; Common functions
                                   1283 
                                   1284 ;       ?DUP    ( w -- w w | 0 )
                                   1285 ;       Dup tos if its is not zero.
      000617 05 FE                 1286         .word      LINK
                           000619  1287 LINK = . 
      000619 04                    1288         .byte      4
      00061A 3F 44 55 50           1289         .ascii     "?DUP"
      00061E                       1290 QDUP:
      00061E 90 93            [ 1] 1291         LDW Y,X
      000620 90 FE            [ 2] 1292 	LDW Y,(Y)
      000622 27 04            [ 1] 1293         JREQ     QDUP1
      000624 1D 00 02         [ 2] 1294 	SUBW X,#2
      000627 FF               [ 2] 1295         LDW (X),Y
      000628 81               [ 4] 1296 QDUP1:  RET
                                   1297 
                                   1298 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1299 ;       Rot 3rd item to top.
      000629 06 19                 1300         .word      LINK
                           00062B  1301 LINK = . 
      00062B 03                    1302         .byte      3
      00062C 52 4F 54              1303         .ascii     "ROT"
      00062F                       1304 ROT:
                           000001  1305 .if PICATOUT_MOD
      00062F 90 93            [ 1] 1306         ldw y,x 
      000631 90 FE            [ 2] 1307         ldw y,(y)
      000633 90 89            [ 2] 1308         pushw y 
      000635 90 93            [ 1] 1309         ldw y,x 
      000637 90 EE 04         [ 2] 1310         ldw y,(4,y)
      00063A FF               [ 2] 1311         ldw (x),y 
      00063B 90 93            [ 1] 1312         ldw y,x 
      00063D 90 EE 02         [ 2] 1313         ldw y,(2,y)
      000640 EF 04            [ 2] 1314         ldw (4,x),y 
      000642 90 85            [ 2] 1315         popw y 
      000644 EF 02            [ 2] 1316         ldw (2,x),y
      000646 81               [ 4] 1317         ret 
                           000000  1318 .else 
                                   1319         LDW Y,X
                                   1320 	LDW Y,(4,Y)
                                   1321 	LDW YTEMP,Y
                                   1322         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1323         LDW Y,(2,Y)
                                   1324         LDW XTEMP,Y
                                   1325         LDW Y,X
                                   1326         LDW Y,(Y)
                                   1327         LDW (2,X),Y
                                   1328         LDW Y,XTEMP
                                   1329         LDW (4,X),Y
                                   1330         LDW Y,YTEMP
                                   1331         LDW (X),Y
                                   1332         RET
                                   1333 .endif 
                                   1334 
                                   1335 ;       2DROP   ( w w -- )
                                   1336 ;       Discard two items on stack.
      000647 06 2B                 1337         .word      LINK
                           000649  1338 LINK = . 
      000649 05                    1339         .byte      5
      00064A 32 44 52 4F 50        1340         .ascii     "2DROP"
      00064F                       1341 DDROP:
      00064F 1C 00 04         [ 2] 1342         ADDW X,#4
      000652 81               [ 4] 1343         RET
                                   1344 
                                   1345 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1346 ;       Duplicate top two items.
      000653 06 49                 1347         .word      LINK
                           000655  1348 LINK = . 
      000655 04                    1349         .byte      4
      000656 32 44 55 50           1350         .ascii     "2DUP"
      00065A                       1351 DDUP:
      00065A 1D 00 04         [ 2] 1352         SUBW X,#4
      00065D 90 93            [ 1] 1353         LDW Y,X
      00065F 90 EE 06         [ 2] 1354         LDW Y,(6,Y)
      000662 EF 02            [ 2] 1355         LDW (2,X),Y
      000664 90 93            [ 1] 1356         LDW Y,X
      000666 90 EE 04         [ 2] 1357         LDW Y,(4,Y)
      000669 FF               [ 2] 1358         LDW (X),Y
      00066A 81               [ 4] 1359         RET
                                   1360 
                                   1361 ;       +       ( w w -- sum )
                                   1362 ;       Add top two items.
      00066B 06 55                 1363         .word      LINK
                           00066D  1364 LINK = . 
      00066D 01                    1365         .byte      1
      00066E 2B                    1366         .ascii     "+"
      00066F                       1367 PLUS:
      00066F 90 93            [ 1] 1368         LDW Y,X
      000671 90 FE            [ 2] 1369         LDW Y,(Y)
      000673 90 BF 24         [ 2] 1370         LDW YTEMP,Y
      000676 1C 00 02         [ 2] 1371         ADDW X,#2
      000679 90 93            [ 1] 1372         LDW Y,X
      00067B 90 FE            [ 2] 1373         LDW Y,(Y)
      00067D 72 B9 00 24      [ 2] 1374         ADDW Y,YTEMP
      000681 FF               [ 2] 1375         LDW (X),Y
      000682 81               [ 4] 1376         RET
                                   1377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1378 ;       NOT     ( w -- w )
                                   1379 ;       One's complement of tos.
      000683 06 6D                 1380         .word      LINK
                           000685  1381 LINK = . 
      000685 03                    1382         .byte      3
      000686 4E 4F 54              1383         .ascii     "NOT"
      000689                       1384 INVER:
      000689 90 93            [ 1] 1385         LDW Y,X
      00068B 90 FE            [ 2] 1386         LDW Y,(Y)
      00068D 90 53            [ 2] 1387         CPLW Y
      00068F FF               [ 2] 1388         LDW (X),Y
      000690 81               [ 4] 1389         RET
                                   1390 
                                   1391 ;       NEGATE  ( n -- -n )
                                   1392 ;       Two's complement of tos.
      000691 06 85                 1393         .word      LINK
                           000693  1394 LINK = . 
      000693 06                    1395         .byte      6
      000694 4E 45 47 41 54 45     1396         .ascii     "NEGATE"
      00069A                       1397 NEGAT:
      00069A 90 93            [ 1] 1398         LDW Y,X
      00069C 90 FE            [ 2] 1399         LDW Y,(Y)
      00069E 90 50            [ 2] 1400         NEGW Y
      0006A0 FF               [ 2] 1401         LDW (X),Y
      0006A1 81               [ 4] 1402         RET
                                   1403 
                                   1404 ;       DNEGATE ( d -- -d )
                                   1405 ;       Two's complement of top double.
      0006A2 06 93                 1406         .word      LINK
                           0006A4  1407 LINK = . 
      0006A4 07                    1408         .byte      7
      0006A5 44 4E 45 47 41 54 45  1409         .ascii     "DNEGATE"
      0006AC                       1410 DNEGA:
      0006AC 90 93            [ 1] 1411         LDW Y,X
      0006AE 90 FE            [ 2] 1412 	LDW Y,(Y)
      0006B0 90 53            [ 2] 1413         CPLW Y     
      0006B2 90 BF 24         [ 2] 1414 	LDW YTEMP,Y
      0006B5 90 93            [ 1] 1415         LDW Y,X
      0006B7 90 EE 02         [ 2] 1416         LDW Y,(2,Y)
      0006BA 90 53            [ 2] 1417         CPLW Y
                           000001  1418 .if PICATOUT_MOD
      0006BC 72 A9 00 01      [ 2] 1419         addw y,#1
                           000000  1420 .else 
                                   1421         INCW Y ; bug incw as no effect on Carry flag 
                                   1422 .endif        
      0006C0 EF 02            [ 2] 1423         LDW (2,X),Y
      0006C2 90 BE 24         [ 2] 1424         LDW Y,YTEMP
      0006C5 24 02            [ 1] 1425         JRNC DN1 
      0006C7 90 5C            [ 2] 1426         INCW Y
      0006C9 FF               [ 2] 1427 DN1:    LDW (X),Y
      0006CA 81               [ 4] 1428         RET
                                   1429 
                                   1430 
                                   1431 ;       S>D ( n -- d )
                                   1432 ; convert single integer to double 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006CB 06 A4                 1433         .word LINK 
                           0006CD  1434         LINK=. 
      0006CD 03                    1435         .byte 3 
      0006CE 53 3E 44              1436         .ascii "S>D"
      0006D1                       1437 STOD: 
      0006D1 1D 00 02         [ 2] 1438         subw x,#CELLL 
      0006D4 90 5F            [ 1] 1439         clrw y 
      0006D6 FF               [ 2] 1440         ldw (x),y 
      0006D7 90 93            [ 1] 1441         ldw y,x 
      0006D9 90 EE 02         [ 2] 1442         ldw y,(2,y)
      0006DC 2A 05            [ 1] 1443         jrpl 1$ 
      0006DE 90 AE FF FF      [ 2] 1444         ldw y,#-1
      0006E2 FF               [ 2] 1445         ldw (x),y 
      0006E3 81               [ 4] 1446 1$:     ret 
                                   1447 
                                   1448 
                                   1449 
                                   1450 
                                   1451 ;       -       ( n1 n2 -- n1-n2 )
                                   1452 ;       Subtraction.
      0006E4 06 CD                 1453         .word      LINK
                           0006E6  1454 LINK = . 
      0006E6 01                    1455         .byte      1
      0006E7 2D                    1456         .ascii     "-"
      0006E8                       1457 SUBB:
      0006E8 90 93            [ 1] 1458         LDW Y,X
      0006EA 90 FE            [ 2] 1459         LDW Y,(Y)
      0006EC 90 BF 24         [ 2] 1460         LDW YTEMP,Y
      0006EF 1C 00 02         [ 2] 1461         ADDW X,#2
      0006F2 90 93            [ 1] 1462         LDW Y,X
      0006F4 90 FE            [ 2] 1463         LDW Y,(Y)
      0006F6 72 B2 00 24      [ 2] 1464         SUBW Y,YTEMP
      0006FA FF               [ 2] 1465         LDW (X),Y
      0006FB 81               [ 4] 1466         RET
                                   1467 
                                   1468 ;       ABS     ( n -- n )
                                   1469 ;       Return  absolute value of n.
      0006FC 06 E6                 1470         .word      LINK
                           0006FE  1471 LINK = . 
      0006FE 03                    1472         .byte      3
      0006FF 41 42 53              1473         .ascii     "ABS"
      000702                       1474 ABSS:
      000702 90 93            [ 1] 1475         LDW Y,X
      000704 90 FE            [ 2] 1476 	LDW Y,(Y)
      000706 2A 03            [ 1] 1477         JRPL     AB1     ;negate:
      000708 90 50            [ 2] 1478         NEGW     Y     ;else negate hi byte
      00070A FF               [ 2] 1479         LDW (X),Y
      00070B 81               [ 4] 1480 AB1:    RET
                                   1481 
                                   1482 ;       =       ( w w -- t )
                                   1483 ;       Return true if top two are =al.
      00070C 06 FE                 1484         .word      LINK
                           00070E  1485 LINK = . 
      00070E 01                    1486         .byte      1
      00070F 3D                    1487         .ascii     "="
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000710                       1488 EQUAL:
      000710 A6 FF            [ 1] 1489         LD A,#0xFF  ;true
      000712 90 93            [ 1] 1490         LDW Y,X    ;D = n2
      000714 90 FE            [ 2] 1491         LDW Y,(Y)
      000716 90 BF 24         [ 2] 1492         LDW YTEMP,Y
      000719 1C 00 02         [ 2] 1493         ADDW X,#2
      00071C 90 93            [ 1] 1494         LDW Y,X
      00071E 90 FE            [ 2] 1495         LDW Y,(Y)
      000720 90 B3 24         [ 2] 1496         CPW Y,YTEMP     ;if n2 <> n1
      000723 27 01            [ 1] 1497         JREQ     EQ1
      000725 4F               [ 1] 1498         CLR A
      000726 F7               [ 1] 1499 EQ1:    LD (X),A
      000727 E7 01            [ 1] 1500         LD (1,X),A
      000729 81               [ 4] 1501 	RET     
                                   1502 
                                   1503 ;       U<      ( u u -- t )
                                   1504 ;       Unsigned compare of top two items.
      00072A 07 0E                 1505         .word      LINK
                           00072C  1506 LINK = . 
      00072C 02                    1507         .byte      2
      00072D 55 3C                 1508         .ascii     "U<"
      00072F                       1509 ULESS:
      00072F A6 FF            [ 1] 1510         LD A,#0xFF  ;true
      000731 90 93            [ 1] 1511         LDW Y,X    ;D = n2
      000733 90 FE            [ 2] 1512         LDW Y,(Y)
      000735 90 BF 24         [ 2] 1513         LDW YTEMP,Y
      000738 1C 00 02         [ 2] 1514         ADDW X,#2
      00073B 90 93            [ 1] 1515         LDW Y,X
      00073D 90 FE            [ 2] 1516         LDW Y,(Y)
      00073F 90 B3 24         [ 2] 1517         CPW Y,YTEMP     ;if n2 <> n1
      000742 25 01            [ 1] 1518         JRULT     ULES1
      000744 4F               [ 1] 1519         CLR A
      000745 F7               [ 1] 1520 ULES1:  LD (X),A
      000746 E7 01            [ 1] 1521         LD (1,X),A
      000748 81               [ 4] 1522 	RET     
                                   1523 
                                   1524 ;       <       ( n1 n2 -- t )
                                   1525 ;       Signed compare of top two items.
      000749 07 2C                 1526         .word      LINK
                           00074B  1527 LINK = . 
      00074B 01                    1528         .byte      1
      00074C 3C                    1529         .ascii     "<"
      00074D                       1530 LESS:
      00074D A6 FF            [ 1] 1531         LD A,#0xFF  ;true
      00074F 90 93            [ 1] 1532         LDW Y,X    ;D = n2
      000751 90 FE            [ 2] 1533         LDW Y,(Y)
      000753 90 BF 24         [ 2] 1534         LDW YTEMP,Y
      000756 1C 00 02         [ 2] 1535         ADDW X,#2
      000759 90 93            [ 1] 1536         LDW Y,X
      00075B 90 FE            [ 2] 1537         LDW Y,(Y)
      00075D 90 B3 24         [ 2] 1538         CPW Y,YTEMP     ;if n2 <> n1
      000760 2F 01            [ 1] 1539         JRSLT     LT1
      000762 4F               [ 1] 1540         CLR A
      000763 F7               [ 1] 1541 LT1:    LD (X),A
      000764 E7 01            [ 1] 1542         LD (1,X),A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000766 81               [ 4] 1543 	RET     
                                   1544 
                                   1545 ;       MAX     ( n n -- n )
                                   1546 ;       Return greater of two top items.
      000767 07 4B                 1547         .word      LINK
                           000769  1548 LINK = . 
      000769 03                    1549         .byte      3
      00076A 4D 41 58              1550         .ascii     "MAX"
      00076D                       1551 MAX:
      00076D 90 93            [ 1] 1552         LDW Y,X    ;D = n2
      00076F 90 EE 02         [ 2] 1553         LDW Y,(2,Y)
      000772 90 BF 24         [ 2] 1554         LDW YTEMP,Y
      000775 90 93            [ 1] 1555         LDW Y,X
      000777 90 FE            [ 2] 1556         LDW Y,(Y)
      000779 90 B3 24         [ 2] 1557         CPW Y,YTEMP     ;if n2 <> n1
      00077C 2F 02            [ 1] 1558         JRSLT     MAX1
      00077E EF 02            [ 2] 1559         LDW (2,X),Y
      000780 1C 00 02         [ 2] 1560 MAX1:   ADDW X,#2
      000783 81               [ 4] 1561 	RET     
                                   1562 
                                   1563 ;       MIN     ( n n -- n )
                                   1564 ;       Return smaller of top two items.
      000784 07 69                 1565         .word      LINK
                           000786  1566 LINK = . 
      000786 03                    1567         .byte      3
      000787 4D 49 4E              1568         .ascii     "MIN"
      00078A                       1569 MIN:
      00078A 90 93            [ 1] 1570         LDW Y,X    ;D = n2
      00078C 90 EE 02         [ 2] 1571         LDW Y,(2,Y)
      00078F 90 BF 24         [ 2] 1572         LDW YTEMP,Y
      000792 90 93            [ 1] 1573         LDW Y,X
      000794 90 FE            [ 2] 1574         LDW Y,(Y)
      000796 90 B3 24         [ 2] 1575         CPW Y,YTEMP     ;if n2 <> n1
      000799 2C 02            [ 1] 1576         JRSGT     MIN1
      00079B EF 02            [ 2] 1577         LDW (2,X),Y
      00079D 1C 00 02         [ 2] 1578 MIN1:	ADDW X,#2
      0007A0 81               [ 4] 1579 	RET     
                                   1580 
                                   1581 ;       WITHIN  ( u ul uh -- t )
                                   1582 ;       Return true if u is within
                                   1583 ;       range of ul and uh. ( ul <= u < uh )
      0007A1 07 86                 1584         .word      LINK
                           0007A3  1585 LINK = . 
      0007A3 06                    1586         .byte      6
      0007A4 57 49 54 48 49 4E     1587         .ascii     "WITHIN"
      0007AA                       1588 WITHI:
      0007AA CD 04 9E         [ 4] 1589         CALL     OVER
      0007AD CD 06 E8         [ 4] 1590         CALL     SUBB
      0007B0 CD 04 3D         [ 4] 1591         CALL     TOR
      0007B3 CD 06 E8         [ 4] 1592         CALL     SUBB
      0007B6 CD 04 1E         [ 4] 1593         CALL     RFROM
      0007B9 CC 07 2F         [ 2] 1594         JP     ULESS
                                   1595 
                                   1596 ;; Divide
                                   1597 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1598 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1599 ;       Unsigned divide of a double by a
                                   1600 ;       single. Return mod and quotient.
      0007BC 07 A3                 1601         .word      LINK
                           0007BE  1602 LINK = . 
      0007BE 06                    1603         .byte      6
      0007BF 55 4D 2F 4D 4F 44     1604         .ascii     "UM/MOD"
      0007C5                       1605 UMMOD:
      0007C5 BF 22            [ 2] 1606 	LDW XTEMP,X	; save stack pointer
      0007C7 FE               [ 2] 1607 	LDW X,(X)	; un
      0007C8 BF 24            [ 2] 1608 	LDW YTEMP,X     ; save un
      0007CA 90 BE 22         [ 2] 1609 	LDW Y,XTEMP	; stack pointer
      0007CD 90 EE 04         [ 2] 1610 	LDW Y,(4,Y)     ; Y=udl
      0007D0 BE 22            [ 2] 1611 	LDW X,XTEMP
      0007D2 EE 02            [ 2] 1612 	LDW X,(2,X)	; X=udh
      0007D4 B3 24            [ 2] 1613 	CPW X,YTEMP
      0007D6 23 0F            [ 2] 1614 	JRULE MMSM1
      0007D8 BE 22            [ 2] 1615 	LDW X,XTEMP
      0007DA 1C 00 02         [ 2] 1616 	ADDW X,#2	; pop off 1 level
      0007DD 90 AE FF FF      [ 2] 1617 	LDW Y,#0xFFFF
      0007E1 FF               [ 2] 1618 	LDW (X),Y
      0007E2 90 5F            [ 1] 1619 	CLRW Y
      0007E4 EF 02            [ 2] 1620 	LDW (2,X),Y
      0007E6 81               [ 4] 1621 	RET
      0007E7                       1622 MMSM1:
                           000001  1623 .if PICATOUT_MOD 
                                   1624 ; take advantage of divw x,y when udh==0
      0007E7 5D               [ 2] 1625         tnzw x  ; is udh==0?
      0007E8 26 11            [ 1] 1626         jrne MMSM2 
      0007EA 93               [ 1] 1627         ldw x,y    ;udl 
      0007EB 90 BE 24         [ 2] 1628         ldw y,YTEMP ; divisor 
      0007EE 65               [ 2] 1629         divw x,y 
      0007EF 89               [ 2] 1630         pushw x     ; quotient 
      0007F0 BE 22            [ 2] 1631         ldw x,XTEMP 
      0007F2 1C 00 02         [ 2] 1632         addw x,#CELLL 
      0007F5 EF 02            [ 2] 1633         ldw (2,x),y  ; ur
      0007F7 90 85            [ 2] 1634         popw y 
      0007F9 FF               [ 2] 1635         ldw (x),y ; uq 
      0007FA 81               [ 4] 1636         ret 
      0007FB                       1637 MMSM2:        
                                   1638 .endif 
      0007FB A6 11            [ 1] 1639 	LD A,#17	; loop count
      0007FD                       1640 MMSM3:
      0007FD B3 24            [ 2] 1641 	CPW X,YTEMP	; compare udh to un
      0007FF 25 04            [ 1] 1642 	JRULT MMSM4	; can't subtract
      000801 72 B0 00 24      [ 2] 1643 	SUBW X,YTEMP	; can subtract
      000805                       1644 MMSM4:
      000805 8C               [ 1] 1645 	CCF	; quotient bit
      000806 90 59            [ 2] 1646 	RLCW Y	; rotate into quotient
      000808 59               [ 2] 1647 	RLCW X	; rotate into remainder
      000809 4A               [ 1] 1648 	DEC A	; repeat
      00080A 22 F1            [ 1] 1649 	JRUGT MMSM3
                           000001  1650 .if PICATOUT_MOD
      00080C 56               [ 2] 1651         RRCW X 
                           000000  1652 .else 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1653 	SRAW X  ; bug 
                                   1654 .endif         
      00080D BF 24            [ 2] 1655 	LDW YTEMP,X	; done, save remainder
      00080F BE 22            [ 2] 1656 	LDW X,XTEMP
      000811 1C 00 02         [ 2] 1657 	ADDW X,#2	; drop
      000814 FF               [ 2] 1658 	LDW (X),Y
      000815 90 BE 24         [ 2] 1659 	LDW Y,YTEMP	; save quotient
      000818 EF 02            [ 2] 1660 	LDW (2,X),Y
      00081A 81               [ 4] 1661 	RET
                                   1662 	
                                   1663 ;       M/MOD   ( d n -- r q )
                                   1664 ;       Signed floored divide of double by
                                   1665 ;       single. Return mod and quotient.
      00081B 07 BE                 1666         .word      LINK
                           00081D  1667 LINK = . 
      00081D 05                    1668         .byte      5
      00081E 4D 2F 4D 4F 44        1669         .ascii     "M/MOD"
      000823                       1670 MSMOD:  
      000823 CD 04 74         [ 4] 1671         CALL	DUPP
      000826 CD 04 AD         [ 4] 1672         CALL	ZLESS
      000829 CD 04 74         [ 4] 1673         CALL	DUPP
      00082C CD 04 3D         [ 4] 1674         CALL	TOR
      00082F CD 03 78         [ 4] 1675         CALL	QBRAN
      000832 08 40                 1676         .word	MMOD1
      000834 CD 06 9A         [ 4] 1677         CALL	NEGAT
      000837 CD 04 3D         [ 4] 1678         CALL	TOR
      00083A CD 06 AC         [ 4] 1679         CALL	DNEGA
      00083D CD 04 1E         [ 4] 1680         CALL	RFROM
      000840 CD 04 3D         [ 4] 1681 MMOD1:	CALL	TOR
      000843 CD 04 74         [ 4] 1682         CALL	DUPP
      000846 CD 04 AD         [ 4] 1683         CALL	ZLESS
      000849 CD 03 78         [ 4] 1684         CALL	QBRAN
      00084C 08 54                 1685         .word	MMOD2
      00084E CD 04 31         [ 4] 1686         CALL	RAT
      000851 CD 06 6F         [ 4] 1687         CALL	PLUS
      000854 CD 04 1E         [ 4] 1688 MMOD2:	CALL	RFROM
      000857 CD 07 C5         [ 4] 1689         CALL	UMMOD
      00085A CD 04 1E         [ 4] 1690         CALL	RFROM
      00085D CD 03 78         [ 4] 1691         CALL	QBRAN
      000860 08 6B                 1692         .word	MMOD3
      000862 CD 04 84         [ 4] 1693         CALL	SWAPP
      000865 CD 06 9A         [ 4] 1694         CALL	NEGAT
      000868 CD 04 84         [ 4] 1695         CALL	SWAPP
      00086B 81               [ 4] 1696 MMOD3:	RET
                                   1697 
                                   1698 ;       /MOD    ( n n -- r q )
                                   1699 ;       Signed divide. Return mod and quotient.
      00086C 08 1D                 1700         .word      LINK
                           00086E  1701 LINK = . 
      00086E 04                    1702         .byte      4
      00086F 2F 4D 4F 44           1703         .ascii     "/MOD"
      000873                       1704 SLMOD:
      000873 CD 04 9E         [ 4] 1705         CALL	OVER
      000876 CD 04 AD         [ 4] 1706         CALL	ZLESS
      000879 CD 04 84         [ 4] 1707         CALL	SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00087C CC 08 23         [ 2] 1708         JP	MSMOD
                                   1709 
                                   1710 ;       MOD     ( n n -- r )
                                   1711 ;       Signed divide. Return mod only.
      00087F 08 6E                 1712         .word      LINK
                           000881  1713 LINK = . 
      000881 03                    1714         .byte      3
      000882 4D 4F 44              1715         .ascii     "MOD"
      000885                       1716 MODD:
      000885 CD 08 73         [ 4] 1717 	CALL	SLMOD
      000888 CC 04 6A         [ 2] 1718 	JP	DROP
                                   1719 
                                   1720 ;       /       ( n n -- q )
                                   1721 ;       Signed divide. Return quotient only.
      00088B 08 81                 1722         .word      LINK
                           00088D  1723 LINK = . 
      00088D 01                    1724         .byte      1
      00088E 2F                    1725         .ascii     "/"
      00088F                       1726 SLASH:
      00088F CD 08 73         [ 4] 1727         CALL	SLMOD
      000892 CD 04 84         [ 4] 1728         CALL	SWAPP
      000895 CC 04 6A         [ 2] 1729         JP	DROP
                                   1730 
                                   1731 ;; Multiply
                                   1732 
                                   1733 ;       UM*     ( u u -- ud )
                                   1734 ;       Unsigned multiply. Return double product.
      000898 08 8D                 1735         .word      LINK
                           00089A  1736 LINK = . 
      00089A 03                    1737         .byte      3
      00089B 55 4D 2A              1738         .ascii     "UM*"
      00089E                       1739 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1740 .if  PICATOUT_MOD 
                                   1741 ; take advantage of SP addressing modes
                                   1742 ; these PRODx in RAM are not required
                                   1743 ; the product is kept on stack as local variable 
                                   1744         ;; bytes offset on data stack 
                           000002  1745         da=2 
                           000003  1746         db=3 
                           000000  1747         dc=0 
                           000001  1748         dd=1 
                                   1749         ;; product bytes offset on return stack 
                           000001  1750         UD1=1  ; ud bits 31..24
                           000002  1751         UD2=2  ; ud bits 23..16
                           000003  1752         UD3=3  ; ud bits 15..8 
                           000004  1753         UD4=4  ; ud bits 7..0 
                                   1754         ;; local variable for product set to zero   
      00089E 90 5F            [ 1] 1755         clrw y 
      0008A0 90 89            [ 2] 1756         pushw y  ; bits 15..0
      0008A2 90 89            [ 2] 1757         pushw y  ; bits 31..16 
      0008A4 E6 03            [ 1] 1758         ld a,(db,x) ; b 
      0008A6 90 97            [ 1] 1759         ld yl,a 
      0008A8 E6 01            [ 1] 1760         ld a,(dd,x)   ; d
      0008AA 90 42            [ 4] 1761         mul y,a    ; b*d  
      0008AC 17 03            [ 2] 1762         ldw (UD3,sp),y ; lowest weight product 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0008AE E6 03            [ 1] 1763         ld a,(db,x)
      0008B0 90 97            [ 1] 1764         ld yl,a 
      0008B2 E6 00            [ 1] 1765         ld a,(dc,x)
      0008B4 90 42            [ 4] 1766         mul y,a  ; b*c 
                                   1767         ;;; do the partial sum 
      0008B6 72 F9 02         [ 2] 1768         addw y,(UD2,sp)
      0008B9 4F               [ 1] 1769         clr a 
      0008BA 49               [ 1] 1770         rlc a
      0008BB 6B 01            [ 1] 1771         ld (UD1,sp),a 
      0008BD 17 02            [ 2] 1772         ldw (UD2,sp),y 
      0008BF E6 02            [ 1] 1773         ld a,(da,x)
      0008C1 90 97            [ 1] 1774         ld yl,a 
      0008C3 E6 01            [ 1] 1775         ld a,(dd,x)
      0008C5 90 42            [ 4] 1776         mul y,a   ; a*d 
                                   1777         ;; do partial sum 
      0008C7 72 F9 02         [ 2] 1778         addw y,(UD2,sp)
      0008CA 4F               [ 1] 1779         clr a 
      0008CB 19 01            [ 1] 1780         adc a,(UD1,sp)
      0008CD 6B 01            [ 1] 1781         ld (UD1,sp),a  
      0008CF 17 02            [ 2] 1782         ldw (UD2,sp),y 
      0008D1 E6 02            [ 1] 1783         ld a,(da,x)
      0008D3 90 97            [ 1] 1784         ld yl,a 
      0008D5 E6 00            [ 1] 1785         ld a,(dc,x)
      0008D7 90 42            [ 4] 1786         mul y,a  ;  a*c highest weight product 
                                   1787         ;;; do partial sum 
      0008D9 72 F9 01         [ 2] 1788         addw y,(UD1,sp)
      0008DC FF               [ 2] 1789         ldw (x),y  ; udh 
      0008DD 16 03            [ 2] 1790         ldw y,(UD3,sp)
      0008DF EF 02            [ 2] 1791         ldw (2,x),y  ; udl  
      0008E1 5B 04            [ 2] 1792         addw sp,#4 ; drop local variable 
      0008E3 81               [ 4] 1793         ret  
                           000000  1794 .else
                                   1795 	LD A,(2,X)	; b
                                   1796 	LD YL,A
                                   1797 	LD A,(X)	; d
                                   1798 	MUL Y,A
                                   1799 	LDW PROD1,Y
                                   1800 	LD A,(3,X)	; a
                                   1801 	LD YL,A
                                   1802 	LD A,(X)	; d
                                   1803 	MUL Y,A
                                   1804 	LDW PROD2,Y
                                   1805 	LD A,(2,X)	; b
                                   1806 	LD YL,A
                                   1807 	LD A,(1,X)	; c
                                   1808 	MUL Y,A
                                   1809 	LDW PROD3,Y
                                   1810 	LD A,(3,X)	; a
                                   1811 	LD YL,A
                                   1812 	LD A,(1,X)	; c
                                   1813 	MUL Y,A	; least signifiant product
                                   1814 	CLR A
                                   1815 	RRWA Y
                                   1816 	LD (3,X),A	; store least significant byte
                                   1817 	ADDW Y,PROD3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1818 	CLR A
                                   1819 	ADC A,#0	; save carry
                                   1820 	LD CARRY,A
                                   1821 	ADDW Y,PROD2
                                   1822 	LD A,CARRY
                                   1823 	ADC A,#0	; add 2nd carry
                                   1824 	LD CARRY,A
                                   1825 	CLR A
                                   1826 	RRWA Y
                                   1827 	LD (2,X),A	; 2nd product byte
                                   1828 	ADDW Y,PROD1
                                   1829 	RRWA Y
                                   1830 	LD (1,X),A	; 3rd product byte
                                   1831 	RRWA Y  	; 4th product byte now in A
                                   1832 	ADC A,CARRY	; fill in carry bits
                                   1833 	LD (X),A
                                   1834 	RET
                                   1835 .endif 
                                   1836 
                                   1837 
                                   1838 ;       *       ( n n -- n )
                                   1839 ;       Signed multiply. Return single product.
      0008E4 08 9A                 1840         .word      LINK
                           0008E6  1841 LINK = . 
      0008E6 01                    1842         .byte      1
      0008E7 2A                    1843         .ascii     "*"
      0008E8                       1844 STAR:
      0008E8 CD 08 9E         [ 4] 1845 	CALL	UMSTA
      0008EB CC 04 6A         [ 2] 1846 	JP	DROP
                                   1847 
                                   1848 ;       M*      ( n n -- d )
                                   1849 ;       Signed multiply. Return double product.
      0008EE 08 E6                 1850         .word      LINK
                           0008F0  1851 LINK = . 
      0008F0 02                    1852         .byte      2
      0008F1 4D 2A                 1853         .ascii     "M*"
      0008F3                       1854 MSTAR:      
      0008F3 CD 06 5A         [ 4] 1855         CALL	DDUP
      0008F6 CD 04 E9         [ 4] 1856         CALL	XORR
      0008F9 CD 04 AD         [ 4] 1857         CALL	ZLESS
      0008FC CD 04 3D         [ 4] 1858         CALL	TOR
      0008FF CD 07 02         [ 4] 1859         CALL	ABSS
      000902 CD 04 84         [ 4] 1860         CALL	SWAPP
      000905 CD 07 02         [ 4] 1861         CALL	ABSS
      000908 CD 08 9E         [ 4] 1862         CALL	UMSTA
      00090B CD 04 1E         [ 4] 1863         CALL	RFROM
      00090E CD 03 78         [ 4] 1864         CALL	QBRAN
      000911 09 16                 1865         .word	MSTA1
      000913 CD 06 AC         [ 4] 1866         CALL	DNEGA
      000916 81               [ 4] 1867 MSTA1:	RET
                                   1868 
                                   1869 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1870 ;       Multiply n1 and n2, then divide
                                   1871 ;       by n3. Return mod and quotient.
      000917 08 F0                 1872         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                           000919  1873 LINK = . 
      000919 05                    1874         .byte      5
      00091A 2A 2F 4D 4F 44        1875         .ascii     "*/MOD"
      00091F                       1876 SSMOD:
      00091F CD 04 3D         [ 4] 1877         CALL     TOR
      000922 CD 08 F3         [ 4] 1878         CALL     MSTAR
      000925 CD 04 1E         [ 4] 1879         CALL     RFROM
      000928 CC 08 23         [ 2] 1880         JP     MSMOD
                                   1881 
                                   1882 ;       */      ( n1 n2 n3 -- q )
                                   1883 ;       Multiply n1 by n2, then divide
                                   1884 ;       by n3. Return quotient only.
      00092B 09 19                 1885         .word      LINK
                           00092D  1886 LINK = . 
      00092D 02                    1887         .byte      2
      00092E 2A 2F                 1888         .ascii     "*/"
      000930                       1889 STASL:
      000930 CD 09 1F         [ 4] 1890         CALL	SSMOD
      000933 CD 04 84         [ 4] 1891         CALL	SWAPP
      000936 CC 04 6A         [ 2] 1892         JP	DROP
                                   1893 
                                   1894 ;; Miscellaneous
                                   1895 
                                   1896 ;       CELL+   ( a -- a )
                                   1897 ;       Add cell size in byte to address.
      000939 09 2D                 1898         .word      LINK
                           00093B  1899 LINK = . 
      00093B 02                    1900         .byte       2
      00093C 32 2B                 1901         .ascii     "2+"
      00093E                       1902 CELLP:
      00093E 90 93            [ 1] 1903         LDW Y,X
      000940 90 FE            [ 2] 1904 	LDW Y,(Y)
      000942 72 A9 00 02      [ 2] 1905         ADDW Y,#CELLL 
      000946 FF               [ 2] 1906         LDW (X),Y
      000947 81               [ 4] 1907         RET
                                   1908 
                                   1909 ;       CELL-   ( a -- a )
                                   1910 ;       Subtract 2 from address.
      000948 09 3B                 1911         .word      LINK
                           00094A  1912 LINK = . 
      00094A 02                    1913         .byte       2
      00094B 32 2D                 1914         .ascii     "2-"
      00094D                       1915 CELLM:
      00094D 90 93            [ 1] 1916         LDW Y,X
      00094F 90 FE            [ 2] 1917 	LDW Y,(Y)
      000951 72 A2 00 02      [ 2] 1918         SUBW Y,#CELLL
      000955 FF               [ 2] 1919         LDW (X),Y
      000956 81               [ 4] 1920         RET
                                   1921 
                                   1922 ;       CELLS   ( n -- n )
                                   1923 ;       Multiply tos by 2.
      000957 09 4A                 1924         .word      LINK
                           000959  1925 LINK = . 
      000959 02                    1926         .byte       2
      00095A 32 2A                 1927         .ascii     "2*"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      00095C                       1928 CELLS:
      00095C 90 93            [ 1] 1929         LDW Y,X
      00095E 90 FE            [ 2] 1930 	LDW Y,(Y)
      000960 90 58            [ 2] 1931         SLAW Y
      000962 FF               [ 2] 1932         LDW (X),Y
      000963 81               [ 4] 1933         RET
                                   1934 
                                   1935 ;       1+      ( a -- a )
                                   1936 ;       Add cell size in byte to address.
      000964 09 59                 1937         .word      LINK
                           000966  1938 LINK = . 
      000966 02                    1939         .byte      2
      000967 31 2B                 1940         .ascii     "1+"
      000969                       1941 ONEP:
      000969 90 93            [ 1] 1942         LDW Y,X
      00096B 90 FE            [ 2] 1943 	LDW Y,(Y)
      00096D 90 5C            [ 2] 1944         INCW Y
      00096F FF               [ 2] 1945         LDW (X),Y
      000970 81               [ 4] 1946         RET
                                   1947 
                                   1948 ;       1-      ( a -- a )
                                   1949 ;       Subtract 2 from address.
      000971 09 66                 1950         .word      LINK
                           000973  1951 LINK = . 
      000973 02                    1952         .byte      2
      000974 31 2D                 1953         .ascii     "1-"
      000976                       1954 ONEM:
      000976 90 93            [ 1] 1955         LDW Y,X
      000978 90 FE            [ 2] 1956 	LDW Y,(Y)
      00097A 90 5A            [ 2] 1957         DECW Y
      00097C FF               [ 2] 1958         LDW (X),Y
      00097D 81               [ 4] 1959         RET
                                   1960 
                                   1961 ;  shift left n times 
                                   1962 ; LSHIFT ( n1 n2 -- n1<<n2 )
      00097E 09 73                 1963         .word LINK 
                           000980  1964         LINK=.
      000980 06                    1965         .byte 6 
      000981 4C 53 48 49 46 54     1966         .ascii "LSHIFT"
      000987                       1967 LSHIFT:
      000987 E6 01            [ 1] 1968         ld a,(1,x)
      000989 1C 00 02         [ 2] 1969         addw x,#CELLL 
      00098C 90 93            [ 1] 1970         ldw y,x 
      00098E 90 FE            [ 2] 1971         ldw y,(y)
      000990                       1972 LSHIFT1:
      000990 4D               [ 1] 1973         tnz a 
      000991 27 05            [ 1] 1974         jreq LSHIFT4 
      000993 90 58            [ 2] 1975         sllw y 
      000995 4A               [ 1] 1976         dec a 
      000996 20 F8            [ 2] 1977         jra LSHIFT1 
      000998                       1978 LSHIFT4:
      000998 FF               [ 2] 1979         ldw (x),y 
      000999 81               [ 4] 1980         ret 
                                   1981 
                                   1982 ; shift right n times                 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1983 ; RSHIFT (n1 n2 -- n1>>n2 )
      00099A 09 80                 1984         .word LINK 
                           00099C  1985         LINK=.
      00099C 06                    1986         .byte 6
      00099D 52 53 48 49 46 54     1987         .ascii "RSHIFT"
      0009A3                       1988 RSHIFT:
      0009A3 E6 01            [ 1] 1989         ld a,(1,x)
      0009A5 1C 00 02         [ 2] 1990         addw x,#CELLL 
      0009A8 90 93            [ 1] 1991         ldw y,x 
      0009AA 90 FE            [ 2] 1992         ldw y,(y)
      0009AC                       1993 RSHIFT1:
      0009AC 4D               [ 1] 1994         tnz a 
      0009AD 27 05            [ 1] 1995         jreq RSHIFT4 
      0009AF 90 54            [ 2] 1996         srlw y 
      0009B1 4A               [ 1] 1997         dec a 
      0009B2 20 F8            [ 2] 1998         jra RSHIFT1 
      0009B4                       1999 RSHIFT4:
      0009B4 FF               [ 2] 2000         ldw (x),y 
      0009B5 81               [ 4] 2001         ret 
                                   2002 
                                   2003 
                                   2004 ;       2/      ( n -- n )
                                   2005 ;       divide  tos by 2.
      0009B6 09 9C                 2006         .word      LINK
                           0009B8  2007 LINK = . 
      0009B8 02                    2008         .byte      2
      0009B9 32 2F                 2009         .ascii     "2/"
      0009BB                       2010 TWOSL:
      0009BB 90 93            [ 1] 2011         LDW Y,X
      0009BD 90 FE            [ 2] 2012 	LDW Y,(Y)
      0009BF 90 57            [ 2] 2013         SRAW Y
      0009C1 FF               [ 2] 2014         LDW (X),Y
      0009C2 81               [ 4] 2015         RET
                                   2016 
                                   2017 ;       BL      ( -- 32 )
                                   2018 ;       Return 32,  blank character.
      0009C3 09 B8                 2019         .word      LINK
                           0009C5  2020 LINK = . 
      0009C5 02                    2021         .byte      2
      0009C6 42 4C                 2022         .ascii     "BL"
      0009C8                       2023 BLANK:
      0009C8 1D 00 02         [ 2] 2024         SUBW X,#2
      0009CB 90 AE 00 20      [ 2] 2025 	LDW Y,#32
      0009CF FF               [ 2] 2026         LDW (X),Y
      0009D0 81               [ 4] 2027         RET
                                   2028 
                                   2029 ;         0     ( -- 0)
                                   2030 ;         Return 0.
      0009D1 09 C5                 2031         .word      LINK
                           0009D3  2032 LINK = . 
      0009D3 01                    2033         .byte       1
      0009D4 30                    2034         .ascii     "0"
      0009D5                       2035 ZERO:
      0009D5 1D 00 02         [ 2] 2036         SUBW X,#2
      0009D8 90 5F            [ 1] 2037 	CLRW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      0009DA FF               [ 2] 2038         LDW (X),Y
      0009DB 81               [ 4] 2039         RET
                                   2040 
                                   2041 ;         1     ( -- 1)
                                   2042 ;         Return 1.
      0009DC 09 D3                 2043         .word      LINK
                           0009DE  2044 LINK = . 
      0009DE 01                    2045         .byte       1
      0009DF 31                    2046         .ascii     "1"
      0009E0                       2047 ONE:
      0009E0 1D 00 02         [ 2] 2048         SUBW X,#2
      0009E3 90 AE 00 01      [ 2] 2049 	LDW Y,#1
      0009E7 FF               [ 2] 2050         LDW (X),Y
      0009E8 81               [ 4] 2051         RET
                                   2052 
                                   2053 ;         -1    ( -- -1)
                                   2054 ;         Return 32,  blank character.
      0009E9 09 DE                 2055         .word      LINK
                           0009EB  2056 LINK = . 
      0009EB 02                    2057         .byte       2
      0009EC 2D 31                 2058         .ascii     "-1"
      0009EE                       2059 MONE:
      0009EE 1D 00 02         [ 2] 2060         SUBW X,#2
      0009F1 90 AE FF FF      [ 2] 2061 	LDW Y,#0xFFFF
      0009F5 FF               [ 2] 2062         LDW (X),Y
      0009F6 81               [ 4] 2063         RET
                                   2064 
                                   2065 ;       >CHAR   ( c -- c )
                                   2066 ;       Filter non-printing characters.
      0009F7 09 EB                 2067         .word      LINK
                           0009F9  2068 LINK = . 
      0009F9 05                    2069         .byte      5
      0009FA 3E 43 48 41 52        2070         .ascii     ">CHAR"
      0009FF                       2071 TCHAR:
                           000001  2072 .if CONVERT_TO_CODE
      0009FF E6 01            [ 1] 2073         ld a,(1,x)
      000A01 A1 20            [ 1] 2074         cp a,#32  
      000A03 2B 05            [ 1] 2075         jrmi 1$ 
      000A05 A1 7F            [ 1] 2076         cp a,#127 
      000A07 2A 01            [ 1] 2077         jrpl 1$ 
      000A09 81               [ 4] 2078         ret 
      000A0A A6 5F            [ 1] 2079 1$:     ld a,#'_ 
      000A0C E7 01            [ 1] 2080         ld (1,x),a 
      000A0E 81               [ 4] 2081         ret 
                           000000  2082 .else
                                   2083         CALL     DOLIT
                                   2084         .word       0x7F
                                   2085         CALL     ANDD
                                   2086         CALL     DUPP    ;mask msb
                                   2087         CALL     DOLIT
                                   2088         .word      127
                                   2089         CALL     BLANK
                                   2090         CALL     WITHI   ;check for printable
                                   2091         CALL     QBRAN
                                   2092         .word    TCHA1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2093         CALL     DROP
                                   2094         CALL     DOLIT
                                   2095         .word     0x5F		; "_"     ;replace non-printables
                                   2096 .endif 
      000A0F 81               [ 4] 2097 TCHA1:  RET
                                   2098 
                                   2099 ;       DEPTH   ( -- n )
                                   2100 ;       Return  depth of  data stack.
      000A10 09 F9                 2101         .word      LINK
                           000A12  2102 LINK = . 
      000A12 05                    2103         .byte      5
      000A13 44 45 50 54 48        2104         .ascii     "DEPTH"
      000A18                       2105 DEPTH: 
      000A18 90 BE 2A         [ 2] 2106         LDW Y,SP0    ;save data stack ptr
      000A1B BF 22            [ 2] 2107 	LDW XTEMP,X
      000A1D 72 B2 00 22      [ 2] 2108         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A21 90 57            [ 2] 2109         SRAW Y    ;Y = #stack items
                           000001  2110 .if PICATOUT_MOD
                                   2111 ; why ? 
                                   2112 ;      	DECW Y
                                   2113 .endif 
      000A23 1D 00 02         [ 2] 2114 	SUBW X,#2
      000A26 FF               [ 2] 2115         LDW (X),Y     ; if neg, underflow
      000A27 81               [ 4] 2116         RET
                                   2117 
                                   2118 ;       PICK    ( ... +n -- ... w )
                                   2119 ;       Copy  nth stack item to tos.
      000A28 0A 12                 2120         .word      LINK
                           000A2A  2121 LINK = . 
      000A2A 04                    2122         .byte      4
      000A2B 50 49 43 4B           2123         .ascii     "PICK"
      000A2F                       2124 PICK:
      000A2F 90 93            [ 1] 2125         LDW Y,X   ;D = n1
      000A31 90 FE            [ 2] 2126         LDW Y,(Y)
                           000001  2127 .if PICATOUT_MOD
                                   2128 ; modified for standard compliance          
                                   2129 ; 0 PICK must be equivalent to DUP 
      000A33 90 5C            [ 2] 2130         INCW Y 
                                   2131 .endif         
      000A35 90 58            [ 2] 2132         SLAW Y
      000A37 BF 22            [ 2] 2133         LDW XTEMP,X
      000A39 72 B9 00 22      [ 2] 2134         ADDW Y,XTEMP
      000A3D 90 FE            [ 2] 2135         LDW Y,(Y)
      000A3F FF               [ 2] 2136         LDW (X),Y
      000A40 81               [ 4] 2137         RET
                                   2138 
                                   2139 ;; Memory access
                                   2140 
                                   2141 ;       +!      ( n a -- )
                                   2142 ;       Add n to  contents at address a.
      000A41 0A 2A                 2143         .word      LINK
                           000A43  2144 LINK = . 
      000A43 02                    2145         .byte      2
      000A44 2B 21                 2146         .ascii     "+!"
      000A46                       2147 PSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                           000001  2148 .if CONVERT_TO_CODE
      000A46 90 93            [ 1] 2149         ldw y,x 
      000A48 90 FE            [ 2] 2150         ldw y,(y)
      000A4A 90 BF 24         [ 2] 2151         ldw YTEMP,y  ; address
      000A4D 90 FE            [ 2] 2152         ldw y,(y)  
      000A4F 90 89            [ 2] 2153         pushw y  ; value at address 
      000A51 90 93            [ 1] 2154         ldw y,x 
      000A53 90 EE 02         [ 2] 2155         ldw y,(2,y) ; n 
      000A56 72 F9 01         [ 2] 2156         addw y,(1,sp) ; n+value
      000A59 91 CF 24         [ 5] 2157         ldw [YTEMP],y ;  a!
      000A5C 90 85            [ 2] 2158         popw y    ;drop local var
      000A5E 1C 00 04         [ 2] 2159         addw x,#4 ; DDROP 
      000A61 81               [ 4] 2160         ret 
                           000000  2161 .else
                                   2162         CALL	SWAPP
                                   2163         CALL	OVER
                                   2164         CALL	AT
                                   2165         CALL	PLUS
                                   2166         CALL	SWAPP
                                   2167         JP	STORE
                                   2168 .endif 
                                   2169 
                                   2170 ;       2!      ( d a -- )
                                   2171 ;       Store  double integer to address a.
      000A62 0A 43                 2172         .word      LINK
                           000A64  2173 LINK = . 
      000A64 02                    2174         .byte      2
      000A65 32 21                 2175         .ascii     "2!"
      000A67                       2176 DSTOR:
                           000001  2177 .if CONVERT_TO_CODE
      000A67 90 93            [ 1] 2178         ldw y,x 
      000A69 90 FE            [ 2] 2179         ldw y,(y)
      000A6B 90 BF 24         [ 2] 2180         ldw YTEMP,y ; address 
      000A6E 1C 00 02         [ 2] 2181         addw x,#CELLL ; drop a 
      000A71 90 93            [ 1] 2182         ldw y,x 
      000A73 90 FE            [ 2] 2183         ldw y,(y) ; hi word 
      000A75 89               [ 2] 2184         pushw x 
      000A76 EE 02            [ 2] 2185         ldw x,(2,x) ; lo word 
      000A78 91 CF 24         [ 5] 2186         ldw [YTEMP],y
      000A7B 90 93            [ 1] 2187         ldw y,x 
      000A7D AE 00 02         [ 2] 2188         ldw x,#2 
      000A80 92 DF 24         [ 5] 2189         ldw ([YTEMP],x),y 
      000A83 85               [ 2] 2190         popw x 
      000A84 1C 00 04         [ 2] 2191         addw x,#4 ; DDROP 
      000A87 81               [ 4] 2192         ret 
                           000000  2193 .else
                                   2194         CALL	SWAPP
                                   2195         CALL	OVER
                                   2196         CALL	STORE
                                   2197         CALL	CELLP
                                   2198         JP	STORE
                                   2199 .endif 
                                   2200 ;       2@      ( a -- d )
                                   2201 ;       Fetch double integer from address a.
      000A88 0A 64                 2202         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                           000A8A  2203 LINK = . 
      000A8A 02                    2204         .byte      2
      000A8B 32 40                 2205         .ascii     "2@"
      000A8D                       2206 DAT:
                           000001  2207 .if CONVERT_TO_CODE
      000A8D 90 93            [ 1] 2208         ldw y,x 
      000A8F 90 FE            [ 2] 2209         ldw y,(y) ;address 
      000A91 90 BF 24         [ 2] 2210         ldw YTEMP,y 
      000A94 1D 00 02         [ 2] 2211         subw x,#CELLL ; space for udh 
      000A97 91 CE 24         [ 5] 2212         ldw y,[YTEMP] ; udh 
      000A9A FF               [ 2] 2213         ldw (x),y 
      000A9B 90 AE 00 02      [ 2] 2214         ldw y,#2
      000A9F 91 DE 24         [ 5] 2215         ldw y,([YTEMP],y) ; udl 
      000AA2 EF 02            [ 2] 2216         ldw (2,x),y
      000AA4 81               [ 4] 2217         ret 
                           000000  2218 .else 
                                   2219         CALL	DUPP
                                   2220         CALL	CELLP
                                   2221         CALL	AT
                                   2222         CALL	SWAPP
                                   2223         JP	AT
                                   2224 .endif 
                                   2225 
                                   2226 ;       COUNT   ( b -- b +n )
                                   2227 ;       Return count byte of a string
                                   2228 ;       and add 1 to byte address.
      000AA5 0A 8A                 2229         .word      LINK
                           000AA7  2230 LINK = . 
      000AA7 05                    2231         .byte      5
      000AA8 43 4F 55 4E 54        2232         .ascii     "COUNT"
      000AAD                       2233 COUNT:
                           000001  2234 .if CONVERT_TO_CODE
      000AAD 90 93            [ 1] 2235         ldw y,x 
      000AAF 90 FE            [ 2] 2236         ldw y,(y) ; address 
      000AB1 90 F6            [ 1] 2237         ld a,(y)  ; count 
      000AB3 90 5C            [ 2] 2238         incw y 
      000AB5 FF               [ 2] 2239         ldw (x),y 
      000AB6 1D 00 02         [ 2] 2240         subw x,#CELLL 
      000AB9 E7 01            [ 1] 2241         ld (1,x),a 
      000ABB 7F               [ 1] 2242         clr (x)
      000ABC 81               [ 4] 2243         ret 
                           000000  2244 .else 
                                   2245         CALL     DUPP
                                   2246         CALL     ONEP
                                   2247         CALL     SWAPP
                                   2248         JP     CAT
                                   2249 .endif 
                                   2250 
                                   2251 ;       HERE    ( -- a )
                                   2252 ;       Return  top of  variables
      000ABD 0A A7                 2253         .word      LINK
                           000ABF  2254 LINK = . 
      000ABF 04                    2255         .byte      4
      000AC0 48 45 52 45           2256         .ascii     "HERE"
      000AC4                       2257 HERE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                           000001  2258 .if CONVERT_TO_CODE
      000AC4 90 AE 00 16      [ 2] 2259       	ldw y,#UVP 
      000AC8 90 FE            [ 2] 2260         ldw y,(y)
      000ACA 1D 00 02         [ 2] 2261         subw x,#CELLL 
      000ACD FF               [ 2] 2262         ldw (x),y 
      000ACE 81               [ 4] 2263         ret 
                           000000  2264 .else
                                   2265         CALL     VPP
                                   2266         JP     AT
                                   2267 .endif 
                                   2268 
                                   2269 ;       PAD     ( -- a )
                                   2270 ;       Return address of text buffer
                                   2271 ;       above  code dictionary.
      000ACF 0A BF                 2272         .word      LINK
                           000AD1  2273 LINK = . 
      000AD1 03                    2274         .byte      3
      000AD2 50 41 44              2275         .ascii     "PAD"
      000AD5                       2276 PAD:
      000AD5 CD 0A C4         [ 4] 2277         CALL     HERE
      000AD8 CD 03 45         [ 4] 2278         CALL     DOLIT
      000ADB 00 50                 2279         .word      80
      000ADD CC 06 6F         [ 2] 2280         JP     PLUS
                                   2281 
                                   2282 ;       TIB     ( -- a )
                                   2283 ;       Return address of terminal input buffer.
      000AE0 0A D1                 2284         .word      LINK
                           000AE2  2285 LINK = . 
      000AE2 03                    2286         .byte      3
      000AE3 54 49 42              2287         .ascii     "TIB"
      000AE6                       2288 TIB:
      000AE6 CD 05 5F         [ 4] 2289         CALL     NTIB
      000AE9 CD 09 3E         [ 4] 2290         CALL     CELLP
      000AEC CC 03 CD         [ 2] 2291         JP     AT
                                   2292 
                                   2293 ;       @EXECUTE        ( a -- )
                                   2294 ;       Execute vector stored in address a.
      000AEF 0A E2                 2295         .word      LINK
                           000AF1  2296 LINK = . 
      000AF1 08                    2297         .byte      8
      000AF2 40 45 58 45 43 55 54  2298         .ascii     "@EXECUTE"
             45
      000AFA                       2299 ATEXE:
      000AFA CD 03 CD         [ 4] 2300         CALL     AT
      000AFD CD 06 1E         [ 4] 2301         CALL     QDUP    ;?address or zero
      000B00 CD 03 78         [ 4] 2302         CALL     QBRAN
      000B03 0B 08                 2303         .word      EXE1
      000B05 CD 03 9F         [ 4] 2304         CALL     EXECU   ;execute if non-zero
      000B08 81               [ 4] 2305 EXE1:   RET     ;do nothing if zero
                                   2306 
                                   2307 ;       CMOVE   ( b1 b2 u -- )
                                   2308 ;       Copy u bytes from b1 to b2.
      000B09 0A F1                 2309         .word      LINK
                           000B0B  2310 LINK = . 
      000B0B 05                    2311         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B0C 43 4D 4F 56 45        2312         .ascii     "CMOVE"
      000B11                       2313 CMOVE:
      000B11 CD 04 3D         [ 4] 2314         CALL	TOR
      000B14 CD 03 8F         [ 4] 2315         CALL	BRAN
      000B17 0B 31                 2316         .word	CMOV2
      000B19 CD 04 3D         [ 4] 2317 CMOV1:	CALL	TOR
      000B1C CD 04 74         [ 4] 2318         CALL	DUPP
      000B1F CD 03 EB         [ 4] 2319         CALL	CAT
      000B22 CD 04 31         [ 4] 2320         CALL	RAT
      000B25 CD 03 DA         [ 4] 2321         CALL	CSTOR
      000B28 CD 09 69         [ 4] 2322         CALL	ONEP
      000B2B CD 04 1E         [ 4] 2323         CALL	RFROM
      000B2E CD 09 69         [ 4] 2324         CALL	ONEP
      000B31 CD 03 59         [ 4] 2325 CMOV2:	CALL	DONXT
      000B34 0B 19                 2326         .word	CMOV1
      000B36 CC 06 4F         [ 2] 2327         JP	DDROP
                                   2328 
                                   2329 ;       FILL    ( b u c -- )
                                   2330 ;       Fill u bytes of character c
                                   2331 ;       to area beginning at b.
      000B39 0B 0B                 2332         .word       LINK
                           000B3B  2333 LINK = . 
      000B3B 04                    2334         .byte       4
      000B3C 46 49 4C 4C           2335         .ascii     "FILL"
      000B40                       2336 FILL:
                           000001  2337 .if CONVERT_TO_CODE
      000B40 90 93            [ 1] 2338         ldw y,x 
      000B42 90 E6 01         [ 1] 2339         ld a,(1,y) ; c 
      000B45 1C 00 02         [ 2] 2340         addw x,#CELLL ; drop c 
      000B48 90 93            [ 1] 2341         ldw y,x 
      000B4A 90 FE            [ 2] 2342         ldw y,(y) ; count
      000B4C 90 89            [ 2] 2343         pushw y 
      000B4E 1C 00 02         [ 2] 2344         addw x,#CELLL ; drop u 
      000B51 90 93            [ 1] 2345         ldw y,x 
      000B53 1C 00 02         [ 2] 2346         addw x,#CELLL ; drop b 
      000B56 90 FE            [ 2] 2347         ldw y,(y) ; address
      000B58 90 BF 24         [ 2] 2348         ldw YTEMP,y
      000B5B 90 85            [ 2] 2349         popw y ; count 
      000B5D                       2350 FILL1:  
      000B5D 92 C7 24         [ 4] 2351         ld [YTEMP],a 
      000B60 3C 25            [ 1] 2352         inc YTEMP+1
      000B62 24 02            [ 1] 2353         jrnc FILL2 
      000B64 3C 24            [ 1] 2354         inc YTEMP
      000B66                       2355 FILL2: 
      000B66 90 5A            [ 2] 2356         decw y ; count 
      000B68 26 F3            [ 1] 2357         jrne FILL1  
      000B6A 81               [ 4] 2358         ret 
                           000000  2359 .else 
                                   2360         CALL	SWAPP
                                   2361         CALL	TOR
                                   2362         CALL	SWAPP
                                   2363         CALL	BRAN
                                   2364         .word	FILL2
                                   2365 FILL1:	CALL	DDUP
                                   2366         CALL	CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2367         CALL	ONEP
                                   2368 FILL2:	CALL	DONXT
                                   2369         .word	FILL1
                                   2370         JP	DDROP
                                   2371 .endif
                                   2372 
                                   2373 ;       ERASE   ( b u -- )
                                   2374 ;       Erase u bytes beginning at b.
      000B6B 0B 3B                 2375         .word      LINK
                           000B6D  2376 LINK = . 
      000B6D 05                    2377         .byte      5
      000B6E 45 52 41 53 45        2378         .ascii     "ERASE"
      000B73                       2379 ERASE:
                           000001  2380 .if CONVERT_TO_CODE
      000B73 90 5F            [ 1] 2381         clrw y 
      000B75 1D 00 02         [ 2] 2382         subw x,#CELLL 
      000B78 FF               [ 2] 2383         ldw (x),y 
      000B79 CC 0B 40         [ 2] 2384         jp FILL 
                           000000  2385 .else 
                                   2386         CALL     ZERO
                                   2387         JP     FILL
                                   2388 .endif 
                                   2389 ;       PACK0x   ( b u a -- a )
                                   2390 ;       Build a counted string with
                                   2391 ;       u characters from b. Null fill.
      000B7C 0B 6D                 2392         .word      LINK
                           000B7E  2393 LINK = . 
      000B7E 05                    2394         .byte      5
      000B7F 50 41 43 4B 30 58     2395         .ascii     "PACK0X"
      000B85                       2396 PACKS:
      000B85 CD 04 74         [ 4] 2397         CALL     DUPP
      000B88 CD 04 3D         [ 4] 2398         CALL     TOR     ;strings only on cell boundary
      000B8B CD 06 5A         [ 4] 2399         CALL     DDUP
      000B8E CD 03 DA         [ 4] 2400         CALL     CSTOR
      000B91 CD 09 69         [ 4] 2401         CALL     ONEP ;save count
      000B94 CD 04 84         [ 4] 2402         CALL     SWAPP
      000B97 CD 0B 11         [ 4] 2403         CALL     CMOVE
      000B9A CD 04 1E         [ 4] 2404         CALL     RFROM
      000B9D 81               [ 4] 2405         RET
                                   2406 
                                   2407 ;; Numeric output, single precision
                                   2408 
                                   2409 ;       DIGIT   ( u -- c )
                                   2410 ;       Convert digit u to a character.
      000B9E 0B 7E                 2411         .word      LINK
                           000BA0  2412 LINK = . 
      000BA0 05                    2413         .byte      5
      000BA1 44 49 47 49 54        2414         .ascii     "DIGIT"
      000BA6                       2415 DIGIT:
      000BA6 CD 03 45         [ 4] 2416         CALL	DOLIT
      000BA9 00 09                 2417         .word	9
      000BAB CD 04 9E         [ 4] 2418         CALL	OVER
      000BAE CD 07 4D         [ 4] 2419         CALL	LESS
      000BB1 CD 03 45         [ 4] 2420         CALL	DOLIT
      000BB4 00 07                 2421         .word	7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BB6 CD 04 C0         [ 4] 2422         CALL	ANDD
      000BB9 CD 06 6F         [ 4] 2423         CALL	PLUS
      000BBC CD 03 45         [ 4] 2424         CALL	DOLIT
      000BBF 00 30                 2425         .word	48	;'0'
      000BC1 CC 06 6F         [ 2] 2426         JP	PLUS
                                   2427 
                                   2428 ;       EXTRACT ( n base -- n c )
                                   2429 ;       Extract least significant digit from n.
      000BC4 0B A0                 2430         .word      LINK
                           000BC6  2431 LINK = . 
      000BC6 07                    2432         .byte      7
      000BC7 45 58 54 52 41 43 54  2433         .ascii     "EXTRACT"
      000BCE                       2434 EXTRC:
      000BCE CD 09 D5         [ 4] 2435         CALL     ZERO
      000BD1 CD 04 84         [ 4] 2436         CALL     SWAPP
      000BD4 CD 07 C5         [ 4] 2437         CALL     UMMOD
      000BD7 CD 04 84         [ 4] 2438         CALL     SWAPP
      000BDA CC 0B A6         [ 2] 2439         JP     DIGIT
                                   2440 
                                   2441 ;       <#      ( -- )
                                   2442 ;       Initiate  numeric output process.
      000BDD 0B C6                 2443         .word      LINK
                           000BDF  2444 LINK = . 
      000BDF 02                    2445         .byte      2
      000BE0 3C 23                 2446         .ascii     "<#"
      000BE2                       2447 BDIGS:
      000BE2 CD 0A D5         [ 4] 2448         CALL     PAD
      000BE5 CD 05 A1         [ 4] 2449         CALL     HLD
      000BE8 CC 03 B6         [ 2] 2450         JP     STORE
                                   2451 
                                   2452 ;       HOLD    ( c -- )
                                   2453 ;       Insert a character into output string.
      000BEB 0B DF                 2454         .word      LINK
                           000BED  2455 LINK = . 
      000BED 04                    2456         .byte      4
      000BEE 48 4F 4C 44           2457         .ascii     "HOLD"
      000BF2                       2458 HOLD:
      000BF2 CD 05 A1         [ 4] 2459         CALL     HLD
      000BF5 CD 03 CD         [ 4] 2460         CALL     AT
      000BF8 CD 09 76         [ 4] 2461         CALL     ONEM
      000BFB CD 04 74         [ 4] 2462         CALL     DUPP
      000BFE CD 05 A1         [ 4] 2463         CALL     HLD
      000C01 CD 03 B6         [ 4] 2464         CALL     STORE
      000C04 CC 03 DA         [ 2] 2465         JP     CSTOR
                                   2466 
                                   2467 ;       #       ( u -- u )
                                   2468 ;       Extract one digit from u and
                                   2469 ;       append digit to output string.
      000C07 0B ED                 2470         .word      LINK
                           000C09  2471 LINK = . 
      000C09 01                    2472         .byte      1
      000C0A 23                    2473         .ascii     "#"
      000C0B                       2474 DIG:
      000C0B CD 05 31         [ 4] 2475         CALL     BASE
      000C0E CD 03 CD         [ 4] 2476         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C11 CD 0B CE         [ 4] 2477         CALL     EXTRC
      000C14 CC 0B F2         [ 2] 2478         JP     HOLD
                                   2479 
                                   2480 ;       #S      ( u -- 0 )
                                   2481 ;       Convert u until all digits
                                   2482 ;       are added to output string.
      000C17 0C 09                 2483         .word      LINK
                           000C19  2484 LINK = . 
      000C19 02                    2485         .byte      2
      000C1A 23 53                 2486         .ascii     "#S"
      000C1C                       2487 DIGS:
      000C1C CD 0C 0B         [ 4] 2488 DIGS1:  CALL     DIG
      000C1F CD 04 74         [ 4] 2489         CALL     DUPP
      000C22 CD 03 78         [ 4] 2490         CALL     QBRAN
      000C25 0C 29                 2491         .word      DIGS2
      000C27 20 F3            [ 2] 2492         JRA     DIGS1
      000C29 81               [ 4] 2493 DIGS2:  RET
                                   2494 
                                   2495 ;       SIGN    ( n -- )
                                   2496 ;       Add a minus sign to
                                   2497 ;       numeric output string.
      000C2A 0C 19                 2498         .word      LINK
                           000C2C  2499 LINK = . 
      000C2C 04                    2500         .byte      4
      000C2D 53 49 47 4E           2501         .ascii     "SIGN"
      000C31                       2502 SIGN:
      000C31 CD 04 AD         [ 4] 2503         CALL     ZLESS
      000C34 CD 03 78         [ 4] 2504         CALL     QBRAN
      000C37 0C 41                 2505         .word      SIGN1
      000C39 CD 03 45         [ 4] 2506         CALL     DOLIT
      000C3C 00 2D                 2507         .word      45	;"-"
      000C3E CC 0B F2         [ 2] 2508         JP     HOLD
      000C41 81               [ 4] 2509 SIGN1:  RET
                                   2510 
                                   2511 ;       #>      ( w -- b u )
                                   2512 ;       Prepare output string.
      000C42 0C 2C                 2513         .word      LINK
                           000C44  2514 LINK = . 
      000C44 02                    2515         .byte      2
      000C45 23 3E                 2516         .ascii     "#>"
      000C47                       2517 EDIGS:
      000C47 CD 04 6A         [ 4] 2518         CALL     DROP
      000C4A CD 05 A1         [ 4] 2519         CALL     HLD
      000C4D CD 03 CD         [ 4] 2520         CALL     AT
      000C50 CD 0A D5         [ 4] 2521         CALL     PAD
      000C53 CD 04 9E         [ 4] 2522         CALL     OVER
      000C56 CC 06 E8         [ 2] 2523         JP     SUBB
                                   2524 
                                   2525 ;       str     ( w -- b u )
                                   2526 ;       Convert a signed integer
                                   2527 ;       to a numeric string.
      000C59 0C 44                 2528         .word      LINK
                           000C5B  2529 LINK = . 
      000C5B 03                    2530         .byte      3
      000C5C 53 54 52              2531         .ascii     "STR"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C5F                       2532 STR:
      000C5F CD 04 74         [ 4] 2533         CALL     DUPP
      000C62 CD 04 3D         [ 4] 2534         CALL     TOR
      000C65 CD 07 02         [ 4] 2535         CALL     ABSS
      000C68 CD 0B E2         [ 4] 2536         CALL     BDIGS
      000C6B CD 0C 1C         [ 4] 2537         CALL     DIGS
      000C6E CD 04 1E         [ 4] 2538         CALL     RFROM
      000C71 CD 0C 31         [ 4] 2539         CALL     SIGN
      000C74 CC 0C 47         [ 2] 2540         JP     EDIGS
                                   2541 
                                   2542 ;       HEX     ( -- )
                                   2543 ;       Use radix 16 as base for
                                   2544 ;       numeric conversions.
      000C77 0C 5B                 2545         .word      LINK
                           000C79  2546 LINK = . 
      000C79 03                    2547         .byte      3
      000C7A 48 45 58              2548         .ascii     "HEX"
      000C7D                       2549 HEX:
      000C7D CD 03 45         [ 4] 2550         CALL     DOLIT
      000C80 00 10                 2551         .word      16
      000C82 CD 05 31         [ 4] 2552         CALL     BASE
      000C85 CC 03 B6         [ 2] 2553         JP     STORE
                                   2554 
                                   2555 ;       DECIMAL ( -- )
                                   2556 ;       Use radix 10 as base
                                   2557 ;       for numeric conversions.
      000C88 0C 79                 2558         .word      LINK
                           000C8A  2559 LINK = . 
      000C8A 07                    2560         .byte      7
      000C8B 44 45 43 49 4D 41 4C  2561         .ascii     "DECIMAL"
      000C92                       2562 DECIM:
      000C92 CD 03 45         [ 4] 2563         CALL     DOLIT
      000C95 00 0A                 2564         .word      10
      000C97 CD 05 31         [ 4] 2565         CALL     BASE
      000C9A CC 03 B6         [ 2] 2566         JP     STORE
                                   2567 
                                   2568 ;; Numeric input, single precision
                                   2569 
                                   2570 ;       DIGIT?  ( c base -- u t )
                                   2571 ;       Convert a character to its numeric
                                   2572 ;       value. A flag indicates success.
      000C9D 0C 8A                 2573         .word      LINK
                           000C9F  2574 LINK = . 
      000C9F 06                    2575         .byte       6
      000CA0 44 49 47 49 54 3F     2576         .ascii     "DIGIT?"
      000CA6                       2577 DIGTQ:
      000CA6 CD 04 3D         [ 4] 2578         CALL     TOR
      000CA9 CD 03 45         [ 4] 2579         CALL     DOLIT
      000CAC 00 30                 2580         .word     48	; "0"
      000CAE CD 06 E8         [ 4] 2581         CALL     SUBB
      000CB1 CD 03 45         [ 4] 2582         CALL     DOLIT
      000CB4 00 09                 2583         .word      9
      000CB6 CD 04 9E         [ 4] 2584         CALL     OVER
      000CB9 CD 07 4D         [ 4] 2585         CALL     LESS
      000CBC CD 03 78         [ 4] 2586         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000CBF 0C D7                 2587         .word      DGTQ1
      000CC1 CD 03 45         [ 4] 2588         CALL     DOLIT
      000CC4 00 07                 2589         .word      7
      000CC6 CD 06 E8         [ 4] 2590         CALL     SUBB
      000CC9 CD 04 74         [ 4] 2591         CALL     DUPP
      000CCC CD 03 45         [ 4] 2592         CALL     DOLIT
      000CCF 00 0A                 2593         .word      10
      000CD1 CD 07 4D         [ 4] 2594         CALL     LESS
      000CD4 CD 04 D4         [ 4] 2595         CALL     ORR
      000CD7 CD 04 74         [ 4] 2596 DGTQ1:  CALL     DUPP
      000CDA CD 04 1E         [ 4] 2597         CALL     RFROM
      000CDD CC 07 2F         [ 2] 2598         JP     ULESS
                                   2599 
                                   2600 ;       NUMBER? ( a -- n T | a F )
                                   2601 ;       Convert a number string to
                                   2602 ;       integer. Push a flag on tos.
      000CE0 0C 9F                 2603         .word      LINK
                           000CE2  2604 LINK = . 
      000CE2 07                    2605         .byte      7
      000CE3 4E 55 4D 42 45 52 3F  2606         .ascii     "NUMBER?"
      000CEA                       2607 NUMBQ:
      000CEA CD 05 31         [ 4] 2608         CALL     BASE
      000CED CD 03 CD         [ 4] 2609         CALL     AT
      000CF0 CD 04 3D         [ 4] 2610         CALL     TOR
      000CF3 CD 09 D5         [ 4] 2611         CALL     ZERO
      000CF6 CD 04 9E         [ 4] 2612         CALL     OVER
      000CF9 CD 0A AD         [ 4] 2613         CALL     COUNT
      000CFC CD 04 9E         [ 4] 2614         CALL     OVER
      000CFF CD 03 EB         [ 4] 2615         CALL     CAT
      000D02 CD 03 45         [ 4] 2616         CALL     DOLIT
      000D05 00 24                 2617         .word     36	; "0x"
      000D07 CD 07 10         [ 4] 2618         CALL     EQUAL
      000D0A CD 03 78         [ 4] 2619         CALL     QBRAN
      000D0D 0D 1E                 2620         .word      NUMQ1
      000D0F CD 0C 7D         [ 4] 2621         CALL     HEX
      000D12 CD 04 84         [ 4] 2622         CALL     SWAPP
      000D15 CD 09 69         [ 4] 2623         CALL     ONEP
      000D18 CD 04 84         [ 4] 2624         CALL     SWAPP
      000D1B CD 09 76         [ 4] 2625         CALL     ONEM
      000D1E CD 04 9E         [ 4] 2626 NUMQ1:  CALL     OVER
      000D21 CD 03 EB         [ 4] 2627         CALL     CAT
      000D24 CD 03 45         [ 4] 2628         CALL     DOLIT
      000D27 00 2D                 2629         .word     45	; "-"
      000D29 CD 07 10         [ 4] 2630         CALL     EQUAL
      000D2C CD 04 3D         [ 4] 2631         CALL     TOR
      000D2F CD 04 84         [ 4] 2632         CALL     SWAPP
      000D32 CD 04 31         [ 4] 2633         CALL     RAT
      000D35 CD 06 E8         [ 4] 2634         CALL     SUBB
      000D38 CD 04 84         [ 4] 2635         CALL     SWAPP
      000D3B CD 04 31         [ 4] 2636         CALL     RAT
      000D3E CD 06 6F         [ 4] 2637         CALL     PLUS
      000D41 CD 06 1E         [ 4] 2638         CALL     QDUP
      000D44 CD 03 78         [ 4] 2639         CALL     QBRAN
      000D47 0D A8                 2640         .word      NUMQ6
      000D49 CD 09 76         [ 4] 2641         CALL     ONEM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000D4C CD 04 3D         [ 4] 2642         CALL     TOR
      000D4F CD 04 74         [ 4] 2643 NUMQ2:  CALL     DUPP
      000D52 CD 04 3D         [ 4] 2644         CALL     TOR
      000D55 CD 03 EB         [ 4] 2645         CALL     CAT
      000D58 CD 05 31         [ 4] 2646         CALL     BASE
      000D5B CD 03 CD         [ 4] 2647         CALL     AT
      000D5E CD 0C A6         [ 4] 2648         CALL     DIGTQ
      000D61 CD 03 78         [ 4] 2649         CALL     QBRAN
      000D64 0D 96                 2650         .word      NUMQ4
      000D66 CD 04 84         [ 4] 2651         CALL     SWAPP
      000D69 CD 05 31         [ 4] 2652         CALL     BASE
      000D6C CD 03 CD         [ 4] 2653         CALL     AT
      000D6F CD 08 E8         [ 4] 2654         CALL     STAR
      000D72 CD 06 6F         [ 4] 2655         CALL     PLUS
      000D75 CD 04 1E         [ 4] 2656         CALL     RFROM
      000D78 CD 09 69         [ 4] 2657         CALL     ONEP
      000D7B CD 03 59         [ 4] 2658         CALL     DONXT
      000D7E 0D 4F                 2659         .word      NUMQ2
      000D80 CD 04 31         [ 4] 2660         CALL     RAT
      000D83 CD 04 84         [ 4] 2661         CALL     SWAPP
      000D86 CD 04 6A         [ 4] 2662         CALL     DROP
      000D89 CD 03 78         [ 4] 2663         CALL     QBRAN
      000D8C 0D 91                 2664         .word      NUMQ3
      000D8E CD 06 9A         [ 4] 2665         CALL     NEGAT
      000D91 CD 04 84         [ 4] 2666 NUMQ3:  CALL     SWAPP
      000D94 20 0F            [ 2] 2667         JRA     NUMQ5
      000D96 CD 04 1E         [ 4] 2668 NUMQ4:  CALL     RFROM
      000D99 CD 04 1E         [ 4] 2669         CALL     RFROM
      000D9C CD 06 4F         [ 4] 2670         CALL     DDROP
      000D9F CD 06 4F         [ 4] 2671         CALL     DDROP
      000DA2 CD 09 D5         [ 4] 2672         CALL     ZERO
      000DA5 CD 04 74         [ 4] 2673 NUMQ5:  CALL     DUPP
      000DA8 CD 04 1E         [ 4] 2674 NUMQ6:  CALL     RFROM
      000DAB CD 06 4F         [ 4] 2675         CALL     DDROP
      000DAE CD 04 1E         [ 4] 2676         CALL     RFROM
      000DB1 CD 05 31         [ 4] 2677         CALL     BASE
      000DB4 CC 03 B6         [ 2] 2678         JP     STORE
                                   2679 
                                   2680 ;; Basic I/O
                                   2681 
                                   2682 ;       KEY     ( -- c )
                                   2683 ;       Wait for and return an
                                   2684 ;       input character.
      000DB7 0C E2                 2685         .word      LINK
                           000DB9  2686 LINK = . 
      000DB9 03                    2687         .byte      3
      000DBA 4B 45 59              2688         .ascii     "KEY"
      000DBD                       2689 KEY:
                           000001  2690 .if CONVERT_TO_CODE
      000DBD 72 0B 52 30 FB   [ 2] 2691         btjf UART1_SR,#UART_SR_RXNE,. 
      000DC2 C6 52 31         [ 1] 2692         ld a,UART1_DR 
      000DC5 1D 00 02         [ 2] 2693         subw x,#CELLL 
      000DC8 E7 01            [ 1] 2694         ld (1,x),a 
      000DCA 7F               [ 1] 2695         clr (x)
      000DCB 81               [ 4] 2696         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           000000  2697 .else 
                                   2698 KEY1:   CALL     QKEY
                                   2699         CALL     QBRAN
                                   2700         .word      KEY1
                                   2701         RET
                                   2702 .endif 
                                   2703 
                                   2704 ;       NUF?    ( -- t )
                                   2705 ;       Return false if no input,
                                   2706 ;       else pause and if CR return true.
      000DCC 0D B9                 2707         .word      LINK
                           000DCE  2708 LINK = . 
      000DCE 04                    2709         .byte      4
      000DCF 4E 55 46 3F           2710         .ascii     "NUF?"
      000DD3                       2711 NUFQ:
      000DD3 CD 03 11         [ 4] 2712         CALL     QKEY
      000DD6 CD 04 74         [ 4] 2713         CALL     DUPP
      000DD9 CD 03 78         [ 4] 2714         CALL     QBRAN
      000DDC 0D EC                 2715         .word    NUFQ1
      000DDE CD 06 4F         [ 4] 2716         CALL     DDROP
      000DE1 CD 0D BD         [ 4] 2717         CALL     KEY
      000DE4 CD 03 45         [ 4] 2718         CALL     DOLIT
      000DE7 00 0D                 2719         .word      CRR
      000DE9 CC 07 10         [ 2] 2720         JP     EQUAL
      000DEC 81               [ 4] 2721 NUFQ1:  RET
                                   2722 
                                   2723 ;       SPACE   ( -- )
                                   2724 ;       Send  blank character to
                                   2725 ;       output device.
      000DED 0D CE                 2726         .word      LINK
                           000DEF  2727 LINK = . 
      000DEF 05                    2728         .byte      5
      000DF0 53 50 41 43 45        2729         .ascii     "SPACE"
      000DF5                       2730 SPACE:
      000DF5 CD 09 C8         [ 4] 2731         CALL     BLANK
      000DF8 CC 03 2F         [ 2] 2732         JP     EMIT
                                   2733 
                                   2734 ;       SPACES  ( +n -- )
                                   2735 ;       Send n spaces to output device.
      000DFB 0D EF                 2736         .word      LINK
                           000DFD  2737 LINK = . 
      000DFD 06                    2738         .byte      6
      000DFE 53 50 41 43 45 53     2739         .ascii     "SPACES"
      000E04                       2740 SPACS:
      000E04 CD 09 D5         [ 4] 2741         CALL     ZERO
      000E07 CD 07 6D         [ 4] 2742         CALL     MAX
      000E0A CD 04 3D         [ 4] 2743         CALL     TOR
      000E0D 20 03            [ 2] 2744         JRA      CHAR2
      000E0F CD 0D F5         [ 4] 2745 CHAR1:  CALL     SPACE
      000E12 CD 03 59         [ 4] 2746 CHAR2:  CALL     DONXT
      000E15 0E 0F                 2747         .word    CHAR1
      000E17 81               [ 4] 2748         RET
                                   2749 
                                   2750 ;       TYPE    ( b u -- )
                                   2751 ;       Output u characters from b.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E18 0D FD                 2752         .word      LINK
                           000E1A  2753 LINK = . 
      000E1A 04                    2754         .byte      4
      000E1B 54 59 50 45           2755         .ascii     "TYPE"
      000E1F                       2756 TYPES:
      000E1F CD 04 3D         [ 4] 2757         CALL     TOR
      000E22 20 0C            [ 2] 2758         JRA     TYPE2
      000E24 CD 04 74         [ 4] 2759 TYPE1:  CALL     DUPP
      000E27 CD 03 EB         [ 4] 2760         CALL     CAT
      000E2A CD 03 2F         [ 4] 2761         CALL     EMIT
      000E2D CD 09 69         [ 4] 2762         CALL     ONEP
      000E30 CD 03 59         [ 4] 2763 TYPE2:  CALL     DONXT
      000E33 0E 24                 2764         .word      TYPE1
      000E35 CC 04 6A         [ 2] 2765         JP     DROP
                                   2766 
                                   2767 ;       CR      ( -- )
                                   2768 ;       Output a carriage return
                                   2769 ;       and a line feed.
      000E38 0E 1A                 2770         .word      LINK
                           000E3A  2771 LINK = . 
      000E3A 02                    2772         .byte      2
      000E3B 43 52                 2773         .ascii     "CR"
      000E3D                       2774 CR:
      000E3D CD 03 45         [ 4] 2775         CALL     DOLIT
      000E40 00 0D                 2776         .word      CRR
      000E42 CD 03 2F         [ 4] 2777         CALL     EMIT
      000E45 CD 03 45         [ 4] 2778         CALL     DOLIT
      000E48 00 0A                 2779         .word      LF
      000E4A CC 03 2F         [ 2] 2780         JP     EMIT
                                   2781 
                                   2782 ;       do$     ( -- a )
                                   2783 ;       Return  address of a compiled
                                   2784 ;       string.
      000E4D 0E 3A                 2785         .word      LINK
                           000E4F  2786 LINK = . 
      000E4F 43                    2787 	.byte      COMPO+3
      000E50 44 4F 24              2788         .ascii     "DO$"
      000E53                       2789 DOSTR:
      000E53 CD 04 1E         [ 4] 2790         CALL     RFROM
      000E56 CD 04 31         [ 4] 2791         CALL     RAT
      000E59 CD 04 1E         [ 4] 2792         CALL     RFROM
      000E5C CD 0A AD         [ 4] 2793         CALL     COUNT
      000E5F CD 06 6F         [ 4] 2794         CALL     PLUS
      000E62 CD 04 3D         [ 4] 2795         CALL     TOR
      000E65 CD 04 84         [ 4] 2796         CALL     SWAPP
      000E68 CD 04 3D         [ 4] 2797         CALL     TOR
      000E6B 81               [ 4] 2798         RET
                                   2799 
                                   2800 ;       $"|     ( -- a )
                                   2801 ;       Run time routine compiled by $".
                                   2802 ;       Return address of a compiled string.
      000E6C 0E 4F                 2803         .word      LINK
                           000E6E  2804 LINK = . 
      000E6E 43                    2805 	.byte      COMPO+3
      000E6F 24 22 7C              2806         .byte     '$','"','|'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E72                       2807 STRQP:
      000E72 CD 0E 53         [ 4] 2808         CALL     DOSTR
      000E75 81               [ 4] 2809         RET
                                   2810 
                                   2811 ;       ."|     ( -- )
                                   2812 ;       Run time routine of ." .
                                   2813 ;       Output a compiled string.
      000E76 0E 6E                 2814         .word      LINK
                           000E78  2815 LINK = . 
      000E78 43                    2816 	.byte      COMPO+3
      000E79 2E 22 7C              2817         .byte     '.','"','|'
      000E7C                       2818 DOTQP:
      000E7C CD 0E 53         [ 4] 2819         CALL     DOSTR
      000E7F CD 0A AD         [ 4] 2820         CALL     COUNT
      000E82 CC 0E 1F         [ 2] 2821         JP     TYPES
                                   2822 
                                   2823 ;       .R      ( n +n -- )
                                   2824 ;       Display an integer in a field
                                   2825 ;       of n columns, right justified.
      000E85 0E 78                 2826         .word      LINK
                           000E87  2827 LINK = . 
      000E87 02                    2828         .byte      2
      000E88 2E 52                 2829         .ascii     ".R"
      000E8A                       2830 DOTR:
      000E8A CD 04 3D         [ 4] 2831         CALL     TOR
      000E8D CD 0C 5F         [ 4] 2832         CALL     STR
      000E90 CD 04 1E         [ 4] 2833         CALL     RFROM
      000E93 CD 04 9E         [ 4] 2834         CALL     OVER
      000E96 CD 06 E8         [ 4] 2835         CALL     SUBB
      000E99 CD 0E 04         [ 4] 2836         CALL     SPACS
      000E9C CC 0E 1F         [ 2] 2837         JP     TYPES
                                   2838 
                                   2839 ;       U.R     ( u +n -- )
                                   2840 ;       Display an unsigned integer
                                   2841 ;       in n column, right justified.
      000E9F 0E 87                 2842         .word      LINK
                           000EA1  2843 LINK = . 
      000EA1 03                    2844         .byte      3
      000EA2 55 2E 52              2845         .ascii     "U.R"
      000EA5                       2846 UDOTR:
      000EA5 CD 04 3D         [ 4] 2847         CALL     TOR
      000EA8 CD 0B E2         [ 4] 2848         CALL     BDIGS
      000EAB CD 0C 1C         [ 4] 2849         CALL     DIGS
      000EAE CD 0C 47         [ 4] 2850         CALL     EDIGS
      000EB1 CD 04 1E         [ 4] 2851         CALL     RFROM
      000EB4 CD 04 9E         [ 4] 2852         CALL     OVER
      000EB7 CD 06 E8         [ 4] 2853         CALL     SUBB
      000EBA CD 0E 04         [ 4] 2854         CALL     SPACS
      000EBD CC 0E 1F         [ 2] 2855         JP     TYPES
                                   2856 
                                   2857 ;       U.      ( u -- )
                                   2858 ;       Display an unsigned integer
                                   2859 ;       in free format.
      000EC0 0E A1                 2860         .word      LINK
                           000EC2  2861 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000EC2 02                    2862         .byte      2
      000EC3 55 2E                 2863         .ascii     "U."
      000EC5                       2864 UDOT:
      000EC5 CD 0B E2         [ 4] 2865         CALL     BDIGS
      000EC8 CD 0C 1C         [ 4] 2866         CALL     DIGS
      000ECB CD 0C 47         [ 4] 2867         CALL     EDIGS
      000ECE CD 0D F5         [ 4] 2868         CALL     SPACE
      000ED1 CC 0E 1F         [ 2] 2869         JP     TYPES
                                   2870 
                                   2871 ;       .       ( w -- )
                                   2872 ;       Display an integer in free
                                   2873 ;       format, preceeded by a space.
      000ED4 0E C2                 2874         .word      LINK
                           000ED6  2875 LINK = . 
      000ED6 01                    2876         .byte      1
      000ED7 2E                    2877         .ascii     "."
      000ED8                       2878 DOT:
      000ED8 CD 05 31         [ 4] 2879         CALL     BASE
      000EDB CD 03 CD         [ 4] 2880         CALL     AT
      000EDE CD 03 45         [ 4] 2881         CALL     DOLIT
      000EE1 00 0A                 2882         .word      10
      000EE3 CD 04 E9         [ 4] 2883         CALL     XORR    ;?decimal
      000EE6 CD 03 78         [ 4] 2884         CALL     QBRAN
      000EE9 0E EE                 2885         .word      DOT1
      000EEB CC 0E C5         [ 2] 2886         JP     UDOT
      000EEE CD 0C 5F         [ 4] 2887 DOT1:   CALL     STR
      000EF1 CD 0D F5         [ 4] 2888         CALL     SPACE
      000EF4 CC 0E 1F         [ 2] 2889         JP     TYPES
                                   2890 
                                   2891 ;       ?       ( a -- )
                                   2892 ;       Display contents in memory cell.
      000EF7 0E D6                 2893         .word      LINK
                                   2894         
                           000EF9  2895 LINK = . 
      000EF9 01                    2896         .byte      1
      000EFA 3F                    2897         .ascii     "?"
      000EFB                       2898 QUEST:
      000EFB CD 03 CD         [ 4] 2899         CALL     AT
      000EFE CC 0E D8         [ 2] 2900         JP     DOT
                                   2901 
                                   2902 ;; Parsing
                                   2903 
                                   2904 ;       parse   ( b u c -- b u delta ; <string> )
                                   2905 ;       Scan string delimited by c.
                                   2906 ;       Return found string and its offset.
      000F01 0E F9                 2907         .word      LINK
                           000F03  2908 LINK = . 
      000F03 05                    2909         .byte      5
      000F04 70 61 72 73 65        2910         .ascii     "parse"
      000F09                       2911 PARS:
      000F09 CD 05 40         [ 4] 2912         CALL     TEMP
      000F0C CD 03 B6         [ 4] 2913         CALL     STORE
      000F0F CD 04 9E         [ 4] 2914         CALL     OVER
      000F12 CD 04 3D         [ 4] 2915         CALL     TOR
      000F15 CD 04 74         [ 4] 2916         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F18 CD 03 78         [ 4] 2917         CALL     QBRAN
      000F1B 0F C1                 2918         .word    PARS8
      000F1D CD 09 76         [ 4] 2919         CALL     ONEM
      000F20 CD 05 40         [ 4] 2920         CALL     TEMP
      000F23 CD 03 CD         [ 4] 2921         CALL     AT
      000F26 CD 09 C8         [ 4] 2922         CALL     BLANK
      000F29 CD 07 10         [ 4] 2923         CALL     EQUAL
      000F2C CD 03 78         [ 4] 2924         CALL     QBRAN
      000F2F 0F 62                 2925         .word      PARS3
      000F31 CD 04 3D         [ 4] 2926         CALL     TOR
      000F34 CD 09 C8         [ 4] 2927 PARS1:  CALL     BLANK
      000F37 CD 04 9E         [ 4] 2928         CALL     OVER
      000F3A CD 03 EB         [ 4] 2929         CALL     CAT     ;skip leading blanks ONLY
      000F3D CD 06 E8         [ 4] 2930         CALL     SUBB
      000F40 CD 04 AD         [ 4] 2931         CALL     ZLESS
      000F43 CD 06 89         [ 4] 2932         CALL     INVER
      000F46 CD 03 78         [ 4] 2933         CALL     QBRAN
      000F49 0F 5F                 2934         .word      PARS2
      000F4B CD 09 69         [ 4] 2935         CALL     ONEP
      000F4E CD 03 59         [ 4] 2936         CALL     DONXT
      000F51 0F 34                 2937         .word      PARS1
      000F53 CD 04 1E         [ 4] 2938         CALL     RFROM
      000F56 CD 04 6A         [ 4] 2939         CALL     DROP
      000F59 CD 09 D5         [ 4] 2940         CALL     ZERO
      000F5C CC 04 74         [ 2] 2941         JP     DUPP
      000F5F CD 04 1E         [ 4] 2942 PARS2:  CALL     RFROM
      000F62 CD 04 9E         [ 4] 2943 PARS3:  CALL     OVER
      000F65 CD 04 84         [ 4] 2944         CALL     SWAPP
      000F68 CD 04 3D         [ 4] 2945         CALL     TOR
      000F6B CD 05 40         [ 4] 2946 PARS4:  CALL     TEMP
      000F6E CD 03 CD         [ 4] 2947         CALL     AT
      000F71 CD 04 9E         [ 4] 2948         CALL     OVER
      000F74 CD 03 EB         [ 4] 2949         CALL     CAT
      000F77 CD 06 E8         [ 4] 2950         CALL     SUBB    ;scan for delimiter
      000F7A CD 05 40         [ 4] 2951         CALL     TEMP
      000F7D CD 03 CD         [ 4] 2952         CALL     AT
      000F80 CD 09 C8         [ 4] 2953         CALL     BLANK
      000F83 CD 07 10         [ 4] 2954         CALL     EQUAL
      000F86 CD 03 78         [ 4] 2955         CALL     QBRAN
      000F89 0F 8E                 2956         .word      PARS5
      000F8B CD 04 AD         [ 4] 2957         CALL     ZLESS
      000F8E CD 03 78         [ 4] 2958 PARS5:  CALL     QBRAN
      000F91 0F A3                 2959         .word      PARS6
      000F93 CD 09 69         [ 4] 2960         CALL     ONEP
      000F96 CD 03 59         [ 4] 2961         CALL     DONXT
      000F99 0F 6B                 2962         .word      PARS4
      000F9B CD 04 74         [ 4] 2963         CALL     DUPP
      000F9E CD 04 3D         [ 4] 2964         CALL     TOR
      000FA1 20 0F            [ 2] 2965         JRA     PARS7
      000FA3 CD 04 1E         [ 4] 2966 PARS6:  CALL     RFROM
      000FA6 CD 04 6A         [ 4] 2967         CALL     DROP
      000FA9 CD 04 74         [ 4] 2968         CALL     DUPP
      000FAC CD 09 69         [ 4] 2969         CALL     ONEP
      000FAF CD 04 3D         [ 4] 2970         CALL     TOR
      000FB2 CD 04 9E         [ 4] 2971 PARS7:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FB5 CD 06 E8         [ 4] 2972         CALL     SUBB
      000FB8 CD 04 1E         [ 4] 2973         CALL     RFROM
      000FBB CD 04 1E         [ 4] 2974         CALL     RFROM
      000FBE CC 06 E8         [ 2] 2975         JP     SUBB
      000FC1 CD 04 9E         [ 4] 2976 PARS8:  CALL     OVER
      000FC4 CD 04 1E         [ 4] 2977         CALL     RFROM
      000FC7 CC 06 E8         [ 2] 2978         JP     SUBB
                                   2979 
                                   2980 ;       PARSE   ( c -- b u ; <string> )
                                   2981 ;       Scan input stream and return
                                   2982 ;       counted string delimited by c.
      000FCA 0F 03                 2983         .word      LINK
                           000FCC  2984 LINK = . 
      000FCC 05                    2985         .byte      5
      000FCD 50 41 52 53 45        2986         .ascii     "PARSE"
      000FD2                       2987 PARSE:
      000FD2 CD 04 3D         [ 4] 2988         CALL     TOR
      000FD5 CD 0A E6         [ 4] 2989         CALL     TIB
      000FD8 CD 05 4F         [ 4] 2990         CALL     INN
      000FDB CD 03 CD         [ 4] 2991         CALL     AT
      000FDE CD 06 6F         [ 4] 2992         CALL     PLUS    ;current input buffer pointer
      000FE1 CD 05 5F         [ 4] 2993         CALL     NTIB
      000FE4 CD 03 CD         [ 4] 2994         CALL     AT
      000FE7 CD 05 4F         [ 4] 2995         CALL     INN
      000FEA CD 03 CD         [ 4] 2996         CALL     AT
      000FED CD 06 E8         [ 4] 2997         CALL     SUBB    ;remaining count
      000FF0 CD 04 1E         [ 4] 2998         CALL     RFROM
      000FF3 CD 0F 09         [ 4] 2999         CALL     PARS
      000FF6 CD 05 4F         [ 4] 3000         CALL     INN
      000FF9 CC 0A 46         [ 2] 3001         JP     PSTOR
                                   3002 
                                   3003 ;       .(      ( -- )
                                   3004 ;       Output following string up to next ) .
      000FFC 0F CC                 3005         .word      LINK
                           000FFE  3006 LINK = . 
      000FFE 82                    3007 	.byte      IMEDD+2
      000FFF 2E 28                 3008         .ascii     ".("
      001001                       3009 DOTPR:
      001001 CD 03 45         [ 4] 3010         CALL     DOLIT
      001004 00 29                 3011         .word     41	; ")"
      001006 CD 0F D2         [ 4] 3012         CALL     PARSE
      001009 CC 0E 1F         [ 2] 3013         JP     TYPES
                                   3014 
                                   3015 ;       (       ( -- )
                                   3016 ;       Ignore following string up to next ).
                                   3017 ;       A comment.
      00100C 0F FE                 3018         .word      LINK
                           00100E  3019 LINK = . 
      00100E 81                    3020 	.byte      IMEDD+1
      00100F 28                    3021         .ascii     "("
      001010                       3022 PAREN:
      001010 CD 03 45         [ 4] 3023         CALL     DOLIT
      001013 00 29                 3024         .word     41	; ")"
      001015 CD 0F D2         [ 4] 3025         CALL     PARSE
      001018 CC 06 4F         [ 2] 3026         JP     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



                                   3027 
                                   3028 ;       \       ( -- )
                                   3029 ;       Ignore following text till
                                   3030 ;       end of line.
      00101B 10 0E                 3031         .word      LINK
                           00101D  3032 LINK = . 
      00101D 81                    3033 	.byte      IMEDD+1
      00101E 5C                    3034         .ascii     "\"
      00101F                       3035 BKSLA:
                           000001  3036 .if CONVERT_TO_CODE
      00101F 90 AE 00 0C      [ 2] 3037         ldw y,#UCTIB ; #TIB  
      001023 90 FE            [ 2] 3038         ldw y,(y)
      001025 90 89            [ 2] 3039         pushw y ; count in TIB 
      001027 90 AE 00 0A      [ 2] 3040         ldw y,#UINN ; >IN 
      00102B 90 BF 24         [ 2] 3041         ldw YTEMP,y
      00102E 90 85            [ 2] 3042         popw y 
      001030 91 CF 24         [ 5] 3043         ldw [YTEMP],y
      001033 81               [ 4] 3044         ret 
                           000000  3045 .else
                                   3046         CALL     NTIB
                                   3047         CALL     AT
                                   3048         CALL     INN
                                   3049         JP     STORE
                                   3050 .endif 
                                   3051 
                                   3052 ;       WORD    ( c -- a ; <string> )
                                   3053 ;       Parse a word from input stream
                                   3054 ;       and copy it to code dictionary.
      001034 10 1D                 3055         .word      LINK
                           001036  3056 LINK = . 
      001036 04                    3057         .byte      4
      001037 57 4F 52 44           3058         .ascii     "WORD"
      00103B                       3059 WORDD:
      00103B CD 0F D2         [ 4] 3060         CALL     PARSE
      00103E CD 0A C4         [ 4] 3061         CALL     HERE
      001041 CD 09 3E         [ 4] 3062         CALL     CELLP
      001044 CC 0B 85         [ 2] 3063         JP     PACKS
                                   3064 
                                   3065 ;       TOKEN   ( -- a ; <string> )
                                   3066 ;       Parse a word from input stream
                                   3067 ;       and copy it to name dictionary.
      001047 10 36                 3068         .word      LINK
                           001049  3069 LINK = . 
      001049 05                    3070         .byte      5
      00104A 54 4F 4B 45 4E        3071         .ascii     "TOKEN"
      00104F                       3072 TOKEN:
      00104F CD 09 C8         [ 4] 3073         CALL     BLANK
      001052 CC 10 3B         [ 2] 3074         JP     WORDD
                                   3075 
                                   3076 ;; Dictionary search
                                   3077 
                                   3078 ;       NAME>   ( na -- ca )
                                   3079 ;       Return a code address given
                                   3080 ;       a name address.
      001055 10 49                 3081         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                           001057  3082 LINK = . 
      001057 05                    3083         .byte      5
      001058 4E 41 4D 45 3E        3084         .ascii     "NAME>"
      00105D                       3085 NAMET:
      00105D CD 0A AD         [ 4] 3086         CALL     COUNT
      001060 CD 03 45         [ 4] 3087         CALL     DOLIT
      001063 00 1F                 3088         .word      31
      001065 CD 04 C0         [ 4] 3089         CALL     ANDD
      001068 CC 06 6F         [ 2] 3090         JP     PLUS
                                   3091 
                                   3092 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3093 ;       Compare u cells in two
                                   3094 ;       strings. Return 0 if identical.
      00106B 10 57                 3095         .word      LINK
                           00106D  3096 LINK = . 
      00106D 05                    3097         .byte       5
      00106E 53 41 4D 45 3F        3098         .ascii     "SAME?"
      001073                       3099 SAMEQ:
      001073 CD 09 76         [ 4] 3100         CALL     ONEM
      001076 CD 04 3D         [ 4] 3101         CALL     TOR
      001079 20 29            [ 2] 3102         JRA     SAME2
      00107B CD 04 9E         [ 4] 3103 SAME1:  CALL     OVER
      00107E CD 04 31         [ 4] 3104         CALL     RAT
      001081 CD 06 6F         [ 4] 3105         CALL     PLUS
      001084 CD 03 EB         [ 4] 3106         CALL     CAT
      001087 CD 04 9E         [ 4] 3107         CALL     OVER
      00108A CD 04 31         [ 4] 3108         CALL     RAT
      00108D CD 06 6F         [ 4] 3109         CALL     PLUS
      001090 CD 03 EB         [ 4] 3110         CALL     CAT
      001093 CD 06 E8         [ 4] 3111         CALL     SUBB
      001096 CD 06 1E         [ 4] 3112         CALL     QDUP
      001099 CD 03 78         [ 4] 3113         CALL     QBRAN
      00109C 10 A4                 3114         .word      SAME2
      00109E CD 04 1E         [ 4] 3115         CALL     RFROM
      0010A1 CC 04 6A         [ 2] 3116         JP     DROP
      0010A4 CD 03 59         [ 4] 3117 SAME2:  CALL     DONXT
      0010A7 10 7B                 3118         .word      SAME1
      0010A9 CC 09 D5         [ 2] 3119         JP     ZERO
                                   3120 
                                   3121 ;       find    ( a va -- ca na | a F )
                                   3122 ;       Search vocabulary for string.
                                   3123 ;       Return ca and na if succeeded.
      0010AC 10 6D                 3124         .word      LINK
                           0010AE  3125 LINK = . 
      0010AE 04                    3126         .byte      4
      0010AF 46 49 4E 44           3127         .ascii     "FIND"
      0010B3                       3128 FIND:
      0010B3 CD 04 84         [ 4] 3129         CALL     SWAPP
      0010B6 CD 04 74         [ 4] 3130         CALL     DUPP
      0010B9 CD 03 EB         [ 4] 3131         CALL     CAT
      0010BC CD 05 40         [ 4] 3132         CALL     TEMP
      0010BF CD 03 B6         [ 4] 3133         CALL     STORE
      0010C2 CD 04 74         [ 4] 3134         CALL     DUPP
      0010C5 CD 03 CD         [ 4] 3135         CALL     AT
      0010C8 CD 04 3D         [ 4] 3136         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010CB CD 09 3E         [ 4] 3137         CALL     CELLP
      0010CE CD 04 84         [ 4] 3138         CALL     SWAPP
      0010D1 CD 03 CD         [ 4] 3139 FIND1:  CALL     AT
      0010D4 CD 04 74         [ 4] 3140         CALL     DUPP
      0010D7 CD 03 78         [ 4] 3141         CALL     QBRAN
      0010DA 11 10                 3142         .word      FIND6
      0010DC CD 04 74         [ 4] 3143         CALL     DUPP
      0010DF CD 03 CD         [ 4] 3144         CALL     AT
      0010E2 CD 03 45         [ 4] 3145         CALL     DOLIT
      0010E5 1F 7F                 3146         .word      MASKK
      0010E7 CD 04 C0         [ 4] 3147         CALL     ANDD
      0010EA CD 04 31         [ 4] 3148         CALL     RAT
      0010ED CD 04 E9         [ 4] 3149         CALL     XORR
      0010F0 CD 03 78         [ 4] 3150         CALL     QBRAN
      0010F3 10 FF                 3151         .word      FIND2
      0010F5 CD 09 3E         [ 4] 3152         CALL     CELLP
      0010F8 CD 03 45         [ 4] 3153         CALL     DOLIT
      0010FB FF FF                 3154         .word     0xFFFF
      0010FD 20 0C            [ 2] 3155         JRA     FIND3
      0010FF CD 09 3E         [ 4] 3156 FIND2:  CALL     CELLP
      001102 CD 05 40         [ 4] 3157         CALL     TEMP
      001105 CD 03 CD         [ 4] 3158         CALL     AT
      001108 CD 10 73         [ 4] 3159         CALL     SAMEQ
      00110B CD 03 8F         [ 4] 3160 FIND3:  CALL     BRAN
      00110E 11 1F                 3161         .word      FIND4
      001110 CD 04 1E         [ 4] 3162 FIND6:  CALL     RFROM
      001113 CD 04 6A         [ 4] 3163         CALL     DROP
      001116 CD 04 84         [ 4] 3164         CALL     SWAPP
      001119 CD 09 4D         [ 4] 3165         CALL     CELLM
      00111C CC 04 84         [ 2] 3166         JP     SWAPP
      00111F CD 03 78         [ 4] 3167 FIND4:  CALL     QBRAN
      001122 11 2C                 3168         .word      FIND5
      001124 CD 09 4D         [ 4] 3169         CALL     CELLM
      001127 CD 09 4D         [ 4] 3170         CALL     CELLM
      00112A 20 A5            [ 2] 3171         JRA     FIND1
      00112C CD 04 1E         [ 4] 3172 FIND5:  CALL     RFROM
      00112F CD 04 6A         [ 4] 3173         CALL     DROP
      001132 CD 04 84         [ 4] 3174         CALL     SWAPP
      001135 CD 04 6A         [ 4] 3175         CALL     DROP
      001138 CD 09 4D         [ 4] 3176         CALL     CELLM
      00113B CD 04 74         [ 4] 3177         CALL     DUPP
      00113E CD 10 5D         [ 4] 3178         CALL     NAMET
      001141 CC 04 84         [ 2] 3179         JP     SWAPP
                                   3180 
                                   3181 ;       NAME?   ( a -- ca na | a F )
                                   3182 ;       Search vocabularies for a string.
      001144 10 AE                 3183         .word      LINK
                           001146  3184 LINK = . 
      001146 05                    3185         .byte      5
      001147 4E 41 4D 45 3F        3186         .ascii     "NAME?"
      00114C                       3187 NAMEQ:
      00114C CD 05 B4         [ 4] 3188         CALL   CNTXT
      00114F CC 10 B3         [ 2] 3189         JP     FIND
                                   3190 
                                   3191 ;; Terminal response
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3192 
                                   3193 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3194 ;       Backup cursor by one character.
      001152 11 46                 3195         .word      LINK
                           001154  3196 LINK = . 
      001154 02                    3197         .byte      2
      001155 5E 48                 3198         .ascii     "^H"
      001157                       3199 BKSP:
      001157 CD 04 3D         [ 4] 3200         CALL     TOR
      00115A CD 04 9E         [ 4] 3201         CALL     OVER
      00115D CD 04 1E         [ 4] 3202         CALL     RFROM
      001160 CD 04 84         [ 4] 3203         CALL     SWAPP
      001163 CD 04 9E         [ 4] 3204         CALL     OVER
      001166 CD 04 E9         [ 4] 3205         CALL     XORR
      001169 CD 03 78         [ 4] 3206         CALL     QBRAN
      00116C 11 87                 3207         .word      BACK1
      00116E CD 03 45         [ 4] 3208         CALL     DOLIT
      001171 00 08                 3209         .word      BKSPP
      001173 CD 03 2F         [ 4] 3210         CALL     EMIT
      001176 CD 09 76         [ 4] 3211         CALL     ONEM
      001179 CD 09 C8         [ 4] 3212         CALL     BLANK
      00117C CD 03 2F         [ 4] 3213         CALL     EMIT
      00117F CD 03 45         [ 4] 3214         CALL     DOLIT
      001182 00 08                 3215         .word      BKSPP
      001184 CC 03 2F         [ 2] 3216         JP     EMIT
      001187 81               [ 4] 3217 BACK1:  RET
                                   3218 
                                   3219 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3220 ;       Accept and echo key stroke
                                   3221 ;       and bump cursor.
      001188 11 54                 3222         .word      LINK
                           00118A  3223 LINK = . 
      00118A 03                    3224         .byte      3
      00118B 54 41 50              3225         .ascii     "TAP"
      00118E                       3226 TAP:
      00118E CD 04 74         [ 4] 3227         CALL     DUPP
      001191 CD 03 2F         [ 4] 3228         CALL     EMIT
      001194 CD 04 9E         [ 4] 3229         CALL     OVER
      001197 CD 03 DA         [ 4] 3230         CALL     CSTOR
      00119A CC 09 69         [ 2] 3231         JP     ONEP
                                   3232 
                                   3233 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3234 ;       Process a key stroke,
                                   3235 ;       CR or backspace.
      00119D 11 8A                 3236         .word      LINK
                           00119F  3237 LINK = . 
      00119F 04                    3238         .byte      4
      0011A0 4B 54 41 50           3239         .ascii     "KTAP"
      0011A4                       3240 KTAP:
      0011A4 CD 04 74         [ 4] 3241         CALL     DUPP
      0011A7 CD 03 45         [ 4] 3242         CALL     DOLIT
      0011AA 00 0D                 3243         .word      CRR
      0011AC CD 04 E9         [ 4] 3244         CALL     XORR
      0011AF CD 03 78         [ 4] 3245         CALL     QBRAN
      0011B2 11 CA                 3246         .word      KTAP2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011B4 CD 03 45         [ 4] 3247         CALL     DOLIT
      0011B7 00 08                 3248         .word      BKSPP
      0011B9 CD 04 E9         [ 4] 3249         CALL     XORR
      0011BC CD 03 78         [ 4] 3250         CALL     QBRAN
      0011BF 11 C7                 3251         .word      KTAP1
      0011C1 CD 09 C8         [ 4] 3252         CALL     BLANK
      0011C4 CC 11 8E         [ 2] 3253         JP     TAP
      0011C7 CC 11 57         [ 2] 3254 KTAP1:  JP     BKSP
      0011CA CD 04 6A         [ 4] 3255 KTAP2:  CALL     DROP
      0011CD CD 04 84         [ 4] 3256         CALL     SWAPP
      0011D0 CD 04 6A         [ 4] 3257         CALL     DROP
      0011D3 CC 04 74         [ 2] 3258         JP     DUPP
                                   3259 
                                   3260 ;       accept  ( b u -- b u )
                                   3261 ;       Accept characters to input
                                   3262 ;       buffer. Return with actual count.
      0011D6 11 9F                 3263         .word      LINK
                           0011D8  3264 LINK = . 
      0011D8 06                    3265         .byte      6
      0011D9 41 43 43 45 50 54     3266         .ascii     "ACCEPT"
      0011DF                       3267 ACCEP:
      0011DF CD 04 9E         [ 4] 3268         CALL     OVER
      0011E2 CD 06 6F         [ 4] 3269         CALL     PLUS
      0011E5 CD 04 9E         [ 4] 3270         CALL     OVER
      0011E8 CD 06 5A         [ 4] 3271 ACCP1:  CALL     DDUP
      0011EB CD 04 E9         [ 4] 3272         CALL     XORR
      0011EE CD 03 78         [ 4] 3273         CALL     QBRAN
      0011F1 12 13                 3274         .word      ACCP4
      0011F3 CD 0D BD         [ 4] 3275         CALL     KEY
      0011F6 CD 04 74         [ 4] 3276         CALL     DUPP
      0011F9 CD 09 C8         [ 4] 3277         CALL     BLANK
      0011FC CD 03 45         [ 4] 3278         CALL     DOLIT
      0011FF 00 7F                 3279         .word      127
      001201 CD 07 AA         [ 4] 3280         CALL     WITHI
      001204 CD 03 78         [ 4] 3281         CALL     QBRAN
      001207 12 0E                 3282         .word      ACCP2
      001209 CD 11 8E         [ 4] 3283         CALL     TAP
      00120C 20 03            [ 2] 3284         JRA     ACCP3
      00120E CD 11 A4         [ 4] 3285 ACCP2:  CALL     KTAP
      001211 20 D5            [ 2] 3286 ACCP3:  JRA     ACCP1
      001213 CD 04 6A         [ 4] 3287 ACCP4:  CALL     DROP
      001216 CD 04 9E         [ 4] 3288         CALL     OVER
      001219 CC 06 E8         [ 2] 3289         JP     SUBB
                                   3290 
                                   3291 ;       QUERY   ( -- )
                                   3292 ;       Accept input stream to
                                   3293 ;       terminal input buffer.
      00121C 11 D8                 3294         .word      LINK
                                   3295         
                           00121E  3296 LINK = . 
      00121E 05                    3297         .byte      5
      00121F 51 55 45 52 59        3298         .ascii     "QUERY"
      001224                       3299 QUERY:
      001224 CD 0A E6         [ 4] 3300         CALL     TIB
      001227 CD 03 45         [ 4] 3301         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00122A 00 50                 3302         .word      80
      00122C CD 11 DF         [ 4] 3303         CALL     ACCEP
      00122F CD 05 5F         [ 4] 3304         CALL     NTIB
      001232 CD 03 B6         [ 4] 3305         CALL     STORE
      001235 CD 04 6A         [ 4] 3306         CALL     DROP
      001238 CD 09 D5         [ 4] 3307         CALL     ZERO
      00123B CD 05 4F         [ 4] 3308         CALL     INN
      00123E CC 03 B6         [ 2] 3309         JP     STORE
                                   3310 
                                   3311 ;       ABORT   ( -- )
                                   3312 ;       Reset data stack and
                                   3313 ;       jump to QUIT.
      001241 12 1E                 3314         .word      LINK
                           001243  3315 LINK = . 
      001243 05                    3316         .byte      5
      001244 41 42 4F 52 54        3317         .ascii     "ABORT"
      001249                       3318 ABORT:
      001249 CD 13 40         [ 4] 3319         CALL     PRESE
      00124C CC 13 5D         [ 2] 3320         JP     QUIT
                                   3321 
                                   3322 ;       abort"  ( f -- )
                                   3323 ;       Run time routine of ABORT".
                                   3324 ;       Abort with a message.
      00124F 12 43                 3325         .word      LINK
                           001251  3326 LINK = . 
      001251 46                    3327 	.byte      COMPO+6
      001252 41 42 4F 52 54        3328         .ascii     "ABORT"
      001257 22                    3329         .byte      '"'
      001258                       3330 ABORQ:
      001258 CD 03 78         [ 4] 3331         CALL     QBRAN
      00125B 12 77                 3332         .word      ABOR2   ;text flag
      00125D CD 0E 53         [ 4] 3333         CALL     DOSTR
      001260 CD 0D F5         [ 4] 3334 ABOR1:  CALL     SPACE
      001263 CD 0A AD         [ 4] 3335         CALL     COUNT
      001266 CD 0E 1F         [ 4] 3336         CALL     TYPES
      001269 CD 03 45         [ 4] 3337         CALL     DOLIT
      00126C 00 3F                 3338         .word     63 ; "?"
      00126E CD 03 2F         [ 4] 3339         CALL     EMIT
      001271 CD 0E 3D         [ 4] 3340         CALL     CR
      001274 CC 12 49         [ 2] 3341         JP     ABORT   ;pass error string
      001277 CD 0E 53         [ 4] 3342 ABOR2:  CALL     DOSTR
      00127A CC 04 6A         [ 2] 3343         JP     DROP
                                   3344 
                                   3345 ;; The text interpreter
                                   3346 
                                   3347 ;       $INTERPRET      ( a -- )
                                   3348 ;       Interpret a word. If failed,
                                   3349 ;       try to convert it to an integer.
      00127D 12 51                 3350         .word      LINK
                           00127F  3351 LINK = . 
      00127F 0A                    3352         .byte      10
      001280 24 49 4E 54 45 52 50  3353         .ascii     "$INTERPRET"
             52 45 54
      00128A                       3354 INTER:
      00128A CD 11 4C         [ 4] 3355         CALL     NAMEQ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      00128D CD 06 1E         [ 4] 3356         CALL     QDUP    ;?defined
      001290 CD 03 78         [ 4] 3357         CALL     QBRAN
      001293 12 B4                 3358         .word      INTE1
      001295 CD 03 CD         [ 4] 3359         CALL     AT
      001298 CD 03 45         [ 4] 3360         CALL     DOLIT
      00129B 40 00                 3361 	.word       0x4000	; COMPO*256
      00129D CD 04 C0         [ 4] 3362         CALL     ANDD    ;?compile only lexicon bits
      0012A0 CD 12 58         [ 4] 3363         CALL     ABORQ
      0012A3 0D                    3364         .byte      13
      0012A4 20 63 6F 6D 70 69 6C  3365         .ascii     " compile only"
             65 20 6F 6E 6C 79
      0012B1 CC 03 9F         [ 2] 3366         JP     EXECU
      0012B4 CD 0C EA         [ 4] 3367 INTE1:  CALL     NUMBQ   ;convert a number
      0012B7 CD 03 78         [ 4] 3368         CALL     QBRAN
      0012BA 12 60                 3369         .word    ABOR1
      0012BC 81               [ 4] 3370         RET
                                   3371 
                                   3372 ;       [       ( -- )
                                   3373 ;       Start  text interpreter.
      0012BD 12 7F                 3374         .word      LINK
                           0012BF  3375 LINK = . 
      0012BF 81                    3376 	.byte      IMEDD+1
      0012C0 5B                    3377         .ascii     "["
      0012C1                       3378 LBRAC:
      0012C1 CD 03 45         [ 4] 3379         CALL   DOLIT
      0012C4 12 8A                 3380         .word  INTER
      0012C6 CD 05 92         [ 4] 3381         CALL   TEVAL
      0012C9 CC 03 B6         [ 2] 3382         JP     STORE
                                   3383 
                                   3384 ;       .OK     ( -- )
                                   3385 ;       Display 'ok' while interpreting.
      0012CC 12 BF                 3386         .word      LINK
                           0012CE  3387 LINK = . 
      0012CE 03                    3388         .byte      3
      0012CF 2E 4F 4B              3389         .ascii     ".OK"
      0012D2                       3390 DOTOK:
      0012D2 CD 03 45         [ 4] 3391         CALL     DOLIT
      0012D5 12 8A                 3392         .word      INTER
      0012D7 CD 05 92         [ 4] 3393         CALL     TEVAL
      0012DA CD 03 CD         [ 4] 3394         CALL     AT
      0012DD CD 07 10         [ 4] 3395         CALL     EQUAL
      0012E0 CD 03 78         [ 4] 3396         CALL     QBRAN
      0012E3 12 EC                 3397         .word      DOTO1
      0012E5 CD 0E 7C         [ 4] 3398         CALL     DOTQP
      0012E8 03                    3399         .byte      3
      0012E9 20 6F 6B              3400         .ascii     " ok"
      0012EC CC 0E 3D         [ 2] 3401 DOTO1:  JP     CR
                                   3402 
                                   3403 ;       ?STACK  ( -- )
                                   3404 ;       Abort if stack underflows.
      0012EF 12 CE                 3405         .word      LINK
                           0012F1  3406 LINK = . 
      0012F1 06                    3407         .byte      6
      0012F2 3F 53 54 41 43 4B     3408         .ascii     "?STACK"
      0012F8                       3409 QSTAC: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      0012F8 CD 0A 18         [ 4] 3410         CALL     DEPTH
      0012FB CD 04 AD         [ 4] 3411         CALL     ZLESS   ;check only for underflow
      0012FE CD 12 58         [ 4] 3412         CALL     ABORQ
      001301 0B                    3413         .byte      11
      001302 20 75 6E 64 65 72 66  3414         .ascii     " underflow "
             6C 6F 77 20
      00130D 81               [ 4] 3415         RET
                                   3416 
                                   3417 ;       EVAL    ( -- )
                                   3418 ;       Interpret  input stream.
      00130E 12 F1                 3419         .word      LINK
                           001310  3420 LINK = . 
      001310 04                    3421         .byte      4
      001311 45 56 41 4C           3422         .ascii     "EVAL"
      001315                       3423 EVAL:
      001315 CD 10 4F         [ 4] 3424 EVAL1:  CALL     TOKEN
      001318 CD 04 74         [ 4] 3425         CALL     DUPP
      00131B CD 03 EB         [ 4] 3426         CALL     CAT     ;?input stream empty
      00131E CD 03 78         [ 4] 3427         CALL     QBRAN
      001321 13 31                 3428         .word    EVAL2
      001323 CD 05 92         [ 4] 3429         CALL     TEVAL
      001326 CD 0A FA         [ 4] 3430         CALL     ATEXE
      001329 CD 12 F8         [ 4] 3431         CALL     QSTAC   ;evaluate input, check stack
      00132C CD 03 8F         [ 4] 3432         CALL     BRAN
      00132F 13 15                 3433         .word    EVAL1
      001331 CD 04 6A         [ 4] 3434 EVAL2:  CALL     DROP
      001334 CC 12 D2         [ 2] 3435         JP       DOTOK
                                   3436 
                                   3437 ;       PRESET  ( -- )
                                   3438 ;       Reset data stack pointer and
                                   3439 ;       terminal input buffer.
      001337 13 10                 3440         .word      LINK
                           001339  3441 LINK = . 
      001339 06                    3442         .byte      6
      00133A 50 52 45 53 45 54     3443         .ascii     "PRESET"
      001340                       3444 PRESE:
      001340 CD 03 45         [ 4] 3445         CALL     DOLIT
      001343 16 80                 3446         .word      SPP
      001345 CD 04 61         [ 4] 3447         CALL     SPSTO
      001348 CD 03 45         [ 4] 3448         CALL     DOLIT
      00134B 17 00                 3449         .word      TIBB
      00134D CD 05 5F         [ 4] 3450         CALL     NTIB
      001350 CD 09 3E         [ 4] 3451         CALL     CELLP
      001353 CC 03 B6         [ 2] 3452         JP     STORE
                                   3453 
                                   3454 ;       QUIT    ( -- )
                                   3455 ;       Reset return stack pointer
                                   3456 ;       and start text interpreter.
      001356 13 39                 3457         .word      LINK
                           001358  3458 LINK = . 
      001358 04                    3459         .byte      4
      001359 51 55 49 54           3460         .ascii     "QUIT"
      00135D                       3461 QUIT:
      00135D CD 03 45         [ 4] 3462         CALL     DOLIT
      001360 17 FF                 3463         .word      RPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001362 CD 04 08         [ 4] 3464         CALL     RPSTO   ;reset return stack pointer
      001365 CD 12 C1         [ 4] 3465 QUIT1:  CALL     LBRAC   ;start interpretation
      001368 CD 12 24         [ 4] 3466 QUIT2:  CALL     QUERY   ;get input
      00136B CD 13 15         [ 4] 3467         CALL     EVAL
      00136E 20 F8            [ 2] 3468         JRA     QUIT2   ;continue till error
                                   3469 
                                   3470 ;; The compiler
                                   3471 
                                   3472 ;       '       ( -- ca )
                                   3473 ;       Search vocabularies for
                                   3474 ;       next word in input stream.
      001370 13 58                 3475         .word      LINK
                           001372  3476 LINK = . 
      001372 01                    3477         .byte      1
      001373 27                    3478         .ascii     "'"
      001374                       3479 TICK:
      001374 CD 10 4F         [ 4] 3480         CALL     TOKEN
      001377 CD 11 4C         [ 4] 3481         CALL     NAMEQ   ;?defined
      00137A CD 03 78         [ 4] 3482         CALL     QBRAN
      00137D 12 60                 3483         .word      ABOR1
      00137F 81               [ 4] 3484         RET     ;yes, push code address
                                   3485 
                                   3486 ;       ALLOT   ( n -- )
                           000001  3487 .if PICATOUT_MOD
                                   3488 ;       Allocate n bytes to RAM 
                           000000  3489 .else 
                                   3490 ;       Allocate n bytes to  code dictionary.
                                   3491 .endif 
      001380 13 72                 3492         .word      LINK
                           001382  3493 LINK = . 
      001382 05                    3494         .byte      5
      001383 41 4C 4C 4F 54        3495         .ascii     "ALLOT"
      001388                       3496 ALLOT:
      001388 CD 05 C2         [ 4] 3497         CALL     VPP
                           000001  3498 .if PICATOUT_MOD
                                   3499 ; must update APP_VP each time VP is modidied
      00138B CD 0A 46         [ 4] 3500         call PSTOR 
      00138E CC 1B 1B         [ 2] 3501         jp UPDATVP 
                           000000  3502 .else
                                   3503         JP     PSTOR
                                   3504 .endif ;PICATOUT_MOD
                                   3505 
                                   3506 ;       ,       ( w -- )
                                   3507 ;         Compile an integer into
                                   3508 ;         variable space.
      001391 13 82                 3509         .word      LINK
                           001393  3510 LINK = . 
      001393 01                    3511         .byte      1
      001394 2C                    3512         .ascii     ","
      001395                       3513 COMMA:
      001395 CD 0A C4         [ 4] 3514         CALL     HERE
      001398 CD 04 74         [ 4] 3515         CALL     DUPP
      00139B CD 09 3E         [ 4] 3516         CALL     CELLP   ;cell boundary
      00139E CD 05 C2         [ 4] 3517         CALL     VPP
      0013A1 CD 03 B6         [ 4] 3518         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0013A4 CC 03 B6         [ 2] 3519         JP     STORE
                                   3520 
                                   3521 ;       C,      ( c -- )
                                   3522 ;       Compile a byte into
                                   3523 ;       variables space.
      0013A7 13 93                 3524        .word      LINK
                           0013A9  3525 LINK = . 
      0013A9 02                    3526         .byte      2
      0013AA 43 2C                 3527         .ascii     "C,"
      0013AC                       3528 CCOMMA:
      0013AC CD 0A C4         [ 4] 3529         CALL     HERE
      0013AF CD 04 74         [ 4] 3530         CALL     DUPP
      0013B2 CD 09 69         [ 4] 3531         CALL     ONEP
      0013B5 CD 05 C2         [ 4] 3532         CALL     VPP
      0013B8 CD 03 B6         [ 4] 3533         CALL     STORE
      0013BB CC 03 DA         [ 2] 3534         JP     CSTOR
                                   3535 
                                   3536 ;       [COMPILE]       ( -- ; <string> )
                                   3537 ;       Compile next immediate
                                   3538 ;       word into code dictionary.
      0013BE 13 A9                 3539         .word      LINK
                           0013C0  3540 LINK = . 
      0013C0 89                    3541 	.byte      IMEDD+9
      0013C1 5B 43 4F 4D 50 49 4C  3542         .ascii     "[COMPILE]"
             45 5D
      0013CA                       3543 BCOMP:
      0013CA CD 13 74         [ 4] 3544         CALL     TICK
      0013CD CC 16 8D         [ 2] 3545         JP     JSRC
                                   3546 
                                   3547 ;       COMPILE ( -- )
                                   3548 ;       Compile next jsr in
                                   3549 ;       colon list to code dictionary.
      0013D0 13 C0                 3550         .word      LINK
                           0013D2  3551 LINK = . 
      0013D2 47                    3552 	.byte      COMPO+7
      0013D3 43 4F 4D 50 49 4C 45  3553         .ascii     "COMPILE"
      0013DA                       3554 COMPI:
      0013DA CD 04 1E         [ 4] 3555         CALL     RFROM
                           000001  3556 .if PICATOUT_MOD
                                   3557 ; no need to increment
                           000000  3558 .else
                                   3559         CALL     ONEP
                                   3560 .endif 
      0013DD CD 04 74         [ 4] 3561         CALL     DUPP
      0013E0 CD 03 CD         [ 4] 3562         CALL     AT
      0013E3 CD 16 8D         [ 4] 3563         CALL     JSRC    ;compile subroutine
      0013E6 CD 09 3E         [ 4] 3564         CALL     CELLP
                           000001  3565 .if PICATOUT_MOD
      0013E9 90 93            [ 1] 3566         ldw y,x 
      0013EB 90 FE            [ 2] 3567         ldw y,(y)
      0013ED 1C 00 02         [ 2] 3568         addw x,#CELLL 
      0013F0 90 FC            [ 2] 3569         jp (y)
                           000000  3570 .else 
                                   3571         JP     TOR
                                   3572 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3573 
                                   3574 ;       LITERAL ( w -- )
                                   3575 ;       Compile tos to dictionary
                                   3576 ;       as an integer literal.
      0013F2 13 D2                 3577         .word      LINK
                           0013F4  3578 LINK = . 
      0013F4 87                    3579 	.byte      IMEDD+7
      0013F5 4C 49 54 45 52 41 4C  3580         .ascii     "LITERAL"
      0013FC                       3581 LITER:
      0013FC CD 13 DA         [ 4] 3582         CALL     COMPI
                           000001  3583 .if PICATOUT_MOD
      0013FF 03 45                 3584         .word DOLIT 
                           000000  3585 .else         
                                   3586         CALL     DOLIT
                                   3587 .endif 
      001401 CC 13 95         [ 2] 3588         JP     COMMA
                                   3589 
                                   3590 ;       $,"     ( -- )
                                   3591 ;       Compile a literal string
                                   3592 ;       up to next " .
      001404 13 F4                 3593         .word      LINK
                           001406  3594 LINK = . 
      001406 03                    3595         .byte      3
      001407 24 2C 22              3596         .byte     '$',',','"'
      00140A                       3597 STRCQ:
      00140A CD 03 45         [ 4] 3598         CALL     DOLIT
      00140D 00 22                 3599         .word     34	; "
      00140F CD 0F D2         [ 4] 3600         CALL     PARSE
      001412 CD 0A C4         [ 4] 3601         CALL     HERE
      001415 CD 0B 85         [ 4] 3602         CALL     PACKS   ;string to code dictionary
      001418 CD 0A AD         [ 4] 3603         CALL     COUNT
      00141B CD 06 6F         [ 4] 3604         CALL     PLUS    ;calculate aligned end of string
      00141E CD 05 C2         [ 4] 3605         CALL     VPP
      001421 CC 03 B6         [ 2] 3606         JP     STORE
                                   3607 
                                   3608 ;; Structures
                                   3609 
                                   3610 ;       FOR     ( -- a )
                                   3611 ;       Start a FOR-NEXT loop
                                   3612 ;       structure in a colon definition.
      001424 14 06                 3613         .word      LINK
                           001426  3614 LINK = . 
      001426 83                    3615 	.byte      IMEDD+3
      001427 46 4F 52              3616         .ascii     "FOR"
      00142A                       3617 FOR:
      00142A CD 13 DA         [ 4] 3618         CALL     COMPI
                           000001  3619 .if PICATOUT_MOD
      00142D 04 3D                 3620         .word TOR 
                           000000  3621 .else
                                   3622         CALL     TOR
                                   3623 .endif
      00142F CC 0A C4         [ 2] 3624         JP     HERE
                                   3625 
                                   3626 ;       NEXT    ( a -- )
                                   3627 ;       Terminate a FOR-NEXT loop.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001432 14 26                 3628         .word      LINK
                           001434  3629 LINK = . 
      001434 84                    3630 	.byte      IMEDD+4
      001435 4E 45 58 54           3631         .ascii     "NEXT"
      001439                       3632 NEXT:
      001439 CD 13 DA         [ 4] 3633         CALL     COMPI
                           000001  3634 .if PICATOUT_MOD
      00143C 03 59                 3635         .word DONXT 
                           000000  3636 .else 
                                   3637         CALL     DONXT
                                   3638 .endif         
                           000001  3639 .if PICATOUT_MOD
      00143E CD 06 0E         [ 4] 3640         call ADRADJ
                                   3641 .endif ; PICATOUT_MOD
      001441 CC 13 95         [ 2] 3642         JP     COMMA
                                   3643 
                                   3644 ;       I ( -- n )
                                   3645 ;       stack FOR-NEXT COUNTER 
      001444 14 34                 3646         .word LINK 
                           001446  3647         LINK=.
      001446 01                    3648         .byte 1 
      001447 49                    3649         .ascii "I"
      001448                       3650 IFETCH: 
      001448 1D 00 02         [ 2] 3651         subw x,#CELLL 
      00144B 16 03            [ 2] 3652         ldw y,(3,sp)
      00144D FF               [ 2] 3653         ldw (x),y 
      00144E 81               [ 4] 3654         ret 
                                   3655 
                                   3656 ;       BEGIN   ( -- a )
                                   3657 ;       Start an infinite or
                                   3658 ;       indefinite loop structure.
      00144F 14 46                 3659         .word      LINK
                           001451  3660 LINK = . 
      001451 85                    3661 	.byte      IMEDD+5
      001452 42 45 47 49 4E        3662         .ascii     "BEGIN"
      001457                       3663 BEGIN:
      001457 CC 0A C4         [ 2] 3664         JP     HERE
                                   3665 
                                   3666 ;       UNTIL   ( a -- )
                                   3667 ;       Terminate a BEGIN-UNTIL
                                   3668 ;       indefinite loop structure.
      00145A 14 51                 3669         .word      LINK
                           00145C  3670 LINK = . 
      00145C 85                    3671 	.byte      IMEDD+5
      00145D 55 4E 54 49 4C        3672         .ascii     "UNTIL"
      001462                       3673 UNTIL:
      001462 CD 13 DA         [ 4] 3674         CALL     COMPI
                           000001  3675 .if PICATOUT_MOD
      001465 03 78                 3676         .word    QBRAN 
                           000000  3677 .else 
                                   3678         CALL     QBRAN
                                   3679 .endif 
                           000001  3680 .if PICATOUT_MOD 
      001467 CD 06 0E         [ 4] 3681         call ADRADJ
                                   3682 .endif ; PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00146A CC 13 95         [ 2] 3683         JP     COMMA
                                   3684 
                                   3685 ;       AGAIN   ( a -- )
                                   3686 ;       Terminate a BEGIN-AGAIN
                                   3687 ;       infinite loop structure.
      00146D 14 5C                 3688         .word      LINK
                           00146F  3689 LINK = . 
      00146F 85                    3690 	.byte      IMEDD+5
      001470 41 47 41 49 4E        3691         .ascii     "AGAIN"
      001475                       3692 AGAIN:
      001475 CD 13 DA         [ 4] 3693         CALL     COMPI
                           000001  3694 .if PICATOUT_MOD
      001478 03 8F                 3695         .word BRAN
                           000000  3696 .else
                                   3697         CALL     BRAN
                                   3698 .endif 
                           000001  3699 .if PICATOUT_MOD 
      00147A CD 06 0E         [ 4] 3700         call ADRADJ 
                                   3701 .endif ; PICATOUT_MOD
      00147D CC 13 95         [ 2] 3702         JP     COMMA
                                   3703 
                                   3704 ;       IF      ( -- A )
                                   3705 ;       Begin a conditional branch.
      001480 14 6F                 3706         .word      LINK
                           001482  3707 LINK = . 
      001482 82                    3708 	.byte      IMEDD+2
      001483 49 46                 3709         .ascii     "IF"
      001485                       3710 IFF:
      001485 CD 13 DA         [ 4] 3711         CALL     COMPI
                           000001  3712 .if PICATOUT_MOD
      001488 03 78                 3713         .word QBRAN
                           000000  3714 .else
                                   3715         CALL     QBRAN
                                   3716 .endif 
      00148A CD 0A C4         [ 4] 3717         CALL     HERE
      00148D CD 09 D5         [ 4] 3718         CALL     ZERO
      001490 CC 13 95         [ 2] 3719         JP     COMMA
                                   3720 
                                   3721 ;       THEN        ( A -- )
                                   3722 ;       Terminate a conditional branch structure.
      001493 14 82                 3723         .word      LINK
                           001495  3724 LINK = . 
      001495 84                    3725 	.byte      IMEDD+4
      001496 54 48 45 4E           3726         .ascii     "THEN"
      00149A                       3727 THENN:
      00149A CD 0A C4         [ 4] 3728         CALL     HERE
                           000001  3729 .if PICATOUT_MOD 
      00149D CD 06 0E         [ 4] 3730         call ADRADJ 
                                   3731 .endif ; PICATOUT_MOD
      0014A0 CD 04 84         [ 4] 3732         CALL     SWAPP
      0014A3 CC 03 B6         [ 2] 3733         JP     STORE
                                   3734 
                                   3735 ;       ELSE        ( A -- A )
                                   3736 ;       Start the false clause in an IF-ELSE-THEN structure.
      0014A6 14 95                 3737         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                           0014A8  3738 LINK = . 
      0014A8 84                    3739 	.byte      IMEDD+4
      0014A9 45 4C 53 45           3740         .ascii     "ELSE"
      0014AD                       3741 ELSEE:
      0014AD CD 13 DA         [ 4] 3742         CALL     COMPI
                           000001  3743 .if PICATOUT_MOD
      0014B0 03 8F                 3744         .word BRAN
                           000000  3745 .else
                                   3746         CALL     BRAN
                                   3747 .endif 
      0014B2 CD 0A C4         [ 4] 3748         CALL     HERE
      0014B5 CD 09 D5         [ 4] 3749         CALL     ZERO
      0014B8 CD 13 95         [ 4] 3750         CALL     COMMA
      0014BB CD 04 84         [ 4] 3751         CALL     SWAPP
      0014BE CD 0A C4         [ 4] 3752         CALL     HERE
                           000001  3753 .if PICATOUT_MOD 
      0014C1 CD 06 0E         [ 4] 3754         call ADRADJ 
                                   3755 .endif ; PICATOUT_MOD
      0014C4 CD 04 84         [ 4] 3756         CALL     SWAPP
      0014C7 CC 03 B6         [ 2] 3757         JP     STORE
                                   3758 
                                   3759 ;       AHEAD       ( -- A )
                                   3760 ;       Compile a forward branch instruction.
      0014CA 14 A8                 3761         .word      LINK
                           0014CC  3762 LINK = . 
      0014CC 85                    3763 	.byte      IMEDD+5
      0014CD 41 48 45 41 44        3764         .ascii     "AHEAD"
      0014D2                       3765 AHEAD:
      0014D2 CD 13 DA         [ 4] 3766         CALL     COMPI
                           000001  3767 .if PICATOUT_MOD
      0014D5 03 8F                 3768         .word BRAN
                           000000  3769 .else
                                   3770         CALL     BRAN
                                   3771 .endif 
      0014D7 CD 0A C4         [ 4] 3772         CALL     HERE
      0014DA CD 09 D5         [ 4] 3773         CALL     ZERO
      0014DD CC 13 95         [ 2] 3774         JP     COMMA
                                   3775 
                                   3776 ;       WHILE       ( a -- A a )
                                   3777 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0014E0 14 CC                 3778         .word      LINK
                           0014E2  3779 LINK = . 
      0014E2 85                    3780 	.byte      IMEDD+5
      0014E3 57 48 49 4C 45        3781         .ascii     "WHILE"
      0014E8                       3782 WHILE:
      0014E8 CD 13 DA         [ 4] 3783         CALL     COMPI
                           000001  3784 .if PICATOUT_MOD
      0014EB 03 78                 3785         .word QBRAN
                           000000  3786 .else
                                   3787         CALL     QBRAN
                                   3788 .endif 
      0014ED CD 0A C4         [ 4] 3789         CALL     HERE
      0014F0 CD 09 D5         [ 4] 3790         CALL     ZERO
      0014F3 CD 13 95         [ 4] 3791         CALL     COMMA
      0014F6 CC 04 84         [ 2] 3792         JP     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3793 
                                   3794 ;       REPEAT      ( A a -- )
                                   3795 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      0014F9 14 E2                 3796         .word      LINK
                           0014FB  3797 LINK = . 
      0014FB 86                    3798         .byte      IMEDD+6
      0014FC 52 45 50 45 41 54     3799         .ascii     "REPEAT"
      001502                       3800 REPEA:
      001502 CD 13 DA         [ 4] 3801         CALL     COMPI
                           000001  3802 .if PICATOUT_MOD
      001505 03 8F                 3803         .word BRAN
                           000000  3804 .else
                                   3805         CALL     BRAN
                                   3806 .endif 
                           000001  3807 .if PICATOUT_MOD 
      001507 CD 06 0E         [ 4] 3808         call ADRADJ 
                                   3809 .endif ; PICATOUT_MOD
      00150A CD 13 95         [ 4] 3810         CALL     COMMA
      00150D CD 0A C4         [ 4] 3811         CALL     HERE
                           000001  3812 .if PICATOUT_MOD 
      001510 CD 06 0E         [ 4] 3813         call ADRADJ 
                                   3814 .endif ; PICATOUT_MOD
      001513 CD 04 84         [ 4] 3815         CALL     SWAPP
      001516 CC 03 B6         [ 2] 3816         JP     STORE
                                   3817 
                                   3818 ;       AFT         ( a -- a A )
                                   3819 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001519 14 FB                 3820         .word      LINK
                           00151B  3821 LINK = . 
      00151B 83                    3822 	.byte      IMEDD+3
      00151C 41 46 54              3823         .ascii     "AFT"
      00151F                       3824 AFT:
      00151F CD 04 6A         [ 4] 3825         CALL     DROP
      001522 CD 14 D2         [ 4] 3826         CALL     AHEAD
      001525 CD 0A C4         [ 4] 3827         CALL     HERE
      001528 CC 04 84         [ 2] 3828         JP     SWAPP
                                   3829 
                                   3830 ;       ABORT"      ( -- ; <string> )
                                   3831 ;       Conditional abort with an error message.
      00152B 15 1B                 3832         .word      LINK
                           00152D  3833 LINK = . 
      00152D 86                    3834 	.byte      IMEDD+6
      00152E 41 42 4F 52 54        3835         .ascii     "ABORT"
      001533 22                    3836         .byte      '"'
      001534                       3837 ABRTQ:
      001534 CD 13 DA         [ 4] 3838         CALL     COMPI
                           000001  3839 .if PICATOUT_MOD
      001537 12 58                 3840         .word ABORQ
                           000000  3841 .else
                                   3842         CALL     ABORQ
                                   3843 .endif
      001539 CC 14 0A         [ 2] 3844         JP     STRCQ
                                   3845 
                                   3846 ;       $"     ( -- ; <string> )
                                   3847 ;       Compile an inline string literal.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      00153C 15 2D                 3848         .word      LINK
                           00153E  3849 LINK = . 
      00153E 82                    3850 	.byte      IMEDD+2
      00153F 24 22                 3851         .byte     '$','"'
      001541                       3852 STRQ:
      001541 CD 13 DA         [ 4] 3853         CALL     COMPI
                           000001  3854 .if PICATOUT_MOD
      001544 0E 72                 3855         .word STRQP 
                           000000  3856 .else
                                   3857         CALL     STRQP
                                   3858 .endif
      001546 CC 14 0A         [ 2] 3859         JP     STRCQ
                                   3860 
                                   3861 ;       ."          ( -- ; <string> )
                                   3862 ;       Compile an inline string literal to be typed out at run time.
      001549 15 3E                 3863         .word      LINK
                           00154B  3864 LINK = . 
      00154B 82                    3865 	.byte      IMEDD+2
      00154C 2E 22                 3866         .byte     '.','"'
      00154E                       3867 DOTQ:
      00154E CD 13 DA         [ 4] 3868         CALL     COMPI
                           000001  3869 .if PICATOUT_MOD
      001551 0E 7C                 3870         .word DOTQP 
                           000000  3871 .else
                                   3872         CALL     DOTQP
                                   3873 .endif 
      001553 CC 14 0A         [ 2] 3874         JP     STRCQ
                                   3875 
                                   3876 ;; Name compiler
                                   3877 
                                   3878 ;       ?UNIQUE ( a -- a )
                                   3879 ;       Display a warning message
                                   3880 ;       if word already exists.
      001556 15 4B                 3881         .word      LINK
                           001558  3882 LINK = . 
      001558 07                    3883         .byte      7
      001559 3F 55 4E 49 51 55 45  3884         .ascii     "?UNIQUE"
      001560                       3885 UNIQU:
      001560 CD 04 74         [ 4] 3886         CALL     DUPP
      001563 CD 11 4C         [ 4] 3887         CALL     NAMEQ   ;?name exists
      001566 CD 03 78         [ 4] 3888         CALL     QBRAN
      001569 15 7F                 3889         .word      UNIQ1
      00156B CD 0E 7C         [ 4] 3890         CALL     DOTQP   ;redef are OK
      00156E 07                    3891         .byte       7
      00156F 20 72 65 44 65 66 20  3892         .ascii     " reDef "       
      001576 CD 04 9E         [ 4] 3893         CALL     OVER
      001579 CD 0A AD         [ 4] 3894         CALL     COUNT
      00157C CD 0E 1F         [ 4] 3895         CALL     TYPES   ;just in case
      00157F CC 04 6A         [ 2] 3896 UNIQ1:  JP     DROP
                                   3897 
                                   3898 ;       $,n     ( na -- )
                                   3899 ;       Build a new dictionary name
                                   3900 ;       using string at na.
                           000001  3901 .if PICATOUT_MOD
                                   3902 ; compile dans l'espace des variables 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3903 .endif 
      001582 15 58                 3904         .word      LINK
                           001584  3905 LINK = . 
      001584 03                    3906         .byte      3
      001585 24 2C 6E              3907         .ascii     "$,n"
      001588                       3908 SNAME:
      001588 CD 04 74         [ 4] 3909         CALL     DUPP
      00158B CD 03 EB         [ 4] 3910         CALL     CAT     ;?null input
      00158E CD 03 78         [ 4] 3911         CALL     QBRAN
      001591 15 BE                 3912         .word      PNAM1
      001593 CD 15 60         [ 4] 3913         CALL     UNIQU   ;?redefinition
      001596 CD 04 74         [ 4] 3914         CALL     DUPP
      001599 CD 0A AD         [ 4] 3915         CALL     COUNT
      00159C CD 06 6F         [ 4] 3916         CALL     PLUS
      00159F CD 05 C2         [ 4] 3917         CALL     VPP
      0015A2 CD 03 B6         [ 4] 3918         CALL     STORE
      0015A5 CD 04 74         [ 4] 3919         CALL     DUPP
      0015A8 CD 05 E0         [ 4] 3920         CALL     LAST
      0015AB CD 03 B6         [ 4] 3921         CALL     STORE   ;save na for vocabulary link
      0015AE CD 09 4D         [ 4] 3922         CALL     CELLM   ;link address
      0015B1 CD 05 B4         [ 4] 3923         CALL     CNTXT
      0015B4 CD 03 CD         [ 4] 3924         CALL     AT
      0015B7 CD 04 84         [ 4] 3925         CALL     SWAPP
      0015BA CD 03 B6         [ 4] 3926         CALL     STORE
      0015BD 81               [ 4] 3927         RET     ;save code pointer
      0015BE CD 0E 72         [ 4] 3928 PNAM1:  CALL     STRQP
      0015C1 05                    3929         .byte      5
      0015C2 20 6E 61 6D 65        3930         .ascii     " name" ;null input
      0015C7 CC 12 60         [ 2] 3931         JP     ABOR1
                                   3932 
                                   3933 ;; FORTH compiler
                                   3934 
                                   3935 ;       $COMPILE        ( a -- )
                                   3936 ;       Compile next word to
                                   3937 ;       dictionary as a token or literal.
      0015CA 15 84                 3938         .word      LINK
                           0015CC  3939 LINK = . 
      0015CC 08                    3940         .byte      8
      0015CD 24 43 4F 4D 50 49 4C  3941         .ascii     "$COMPILE"
             45
      0015D5                       3942 SCOMP:
      0015D5 CD 11 4C         [ 4] 3943         CALL     NAMEQ
      0015D8 CD 06 1E         [ 4] 3944         CALL     QDUP    ;?defined
      0015DB CD 03 78         [ 4] 3945         CALL     QBRAN
      0015DE 15 F6                 3946         .word      SCOM2
      0015E0 CD 03 CD         [ 4] 3947         CALL     AT
      0015E3 CD 03 45         [ 4] 3948         CALL     DOLIT
      0015E6 80 00                 3949         .word     0x8000	;  IMEDD*256
      0015E8 CD 04 C0         [ 4] 3950         CALL     ANDD    ;?immediate
      0015EB CD 03 78         [ 4] 3951         CALL     QBRAN
      0015EE 15 F3                 3952         .word      SCOM1
      0015F0 CC 03 9F         [ 2] 3953         JP     EXECU
      0015F3 CC 16 8D         [ 2] 3954 SCOM1:  JP     JSRC
      0015F6 CD 0C EA         [ 4] 3955 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0015F9 CD 03 78         [ 4] 3956         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015FC 12 60                 3957         .word      ABOR1
      0015FE CC 13 FC         [ 2] 3958         JP     LITER
                                   3959 
                                   3960 ;       OVERT   ( -- )
                                   3961 ;       Link a new word into vocabulary.
      001601 15 CC                 3962         .word      LINK
                           001603  3963 LINK = . 
      001603 05                    3964         .byte      5
      001604 4F 56 45 52 54        3965         .ascii     "OVERT"
      001609                       3966 OVERT:
      001609 CD 05 E0         [ 4] 3967         CALL     LAST
      00160C CD 03 CD         [ 4] 3968         CALL     AT
      00160F CD 05 B4         [ 4] 3969         CALL     CNTXT
      001612 CC 03 B6         [ 2] 3970         JP     STORE
                                   3971 
                                   3972 ;       ;       ( -- )
                                   3973 ;       Terminate a colon definition.
      001615 16 03                 3974         .word      LINK
                           001617  3975 LINK = . 
      001617 C1                    3976 	.byte      IMEDD+COMPO+1
      001618 3B                    3977         .ascii     ";"
      001619                       3978 SEMIS:
      001619 CD 13 DA         [ 4] 3979         CALL     COMPI
                           000001  3980 .if PICATOUT_MOD
      00161C 03 AF                 3981         .word EXIT 
                           000000  3982 .else
                                   3983         CALL     EXIT
                                   3984 .endif 
      00161E CD 12 C1         [ 4] 3985         CALL     LBRAC
                           000001  3986 .if PICATOUT_MOD
      001621 CD 16 09         [ 4] 3987         call OVERT 
      001624 CD 1F E7         [ 4] 3988         CALL FMOVE
      001627 CD 06 1E         [ 4] 3989         call QDUP 
      00162A CD 03 78         [ 4] 3990         call QBRAN 
      00162D 17 5D                 3991         .word SET_RAMLAST 
      00162F CD 20 7B         [ 4] 3992         CALL UPDATPTR
      001632 81               [ 4] 3993         RET 
                           000000  3994 .else 
                                   3995         JP     OVERT
                                   3996 .endif 
                                   3997 
                                   3998 
                           000001  3999 .if PICATOUT_MOD
                                   4000 ;       Terminate an ISR definition 
                                   4001 ;       retourn ca of ISR as double
                                   4002 ;       I; ( -- ud )
      001633 16 17                 4003         .word LINK 
                           001635  4004         LINK=.
      001635 C2                    4005         .byte 2+IMEDD+COMPO 
      001636 49 3B                 4006         .ascii "I;" 
      001638                       4007 ISEMI:
      001638 1D 00 02         [ 2] 4008         subw x,#CELLL  
      00163B 90 AE 00 80      [ 2] 4009         ldw y,#IRET_CODE 
      00163F FF               [ 2] 4010         ldw (x),y 
      001640 CD 13 AC         [ 4] 4011         call CCOMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001643 CD 12 C1         [ 4] 4012         call LBRAC 
      001646 CD 20 C0         [ 4] 4013         call IFMOVE
      001649 CD 06 1E         [ 4] 4014         call QDUP 
      00164C CD 03 78         [ 4] 4015         CALL QBRAN 
      00164F 17 5D                 4016         .word SET_RAMLAST
      001651 CD 05 D0         [ 4] 4017         CALL CPP
      001654 CD 03 CD         [ 4] 4018         call AT 
      001657 CD 04 84         [ 4] 4019         call SWAPP 
      00165A CD 05 D0         [ 4] 4020         CALL CPP 
      00165D CD 03 B6         [ 4] 4021         call STORE 
      001660 CD 1B 04         [ 4] 4022         call UPDATCP 
      001663 CD 1A C1         [ 4] 4023         call EEPVP 
      001666 CD 04 6A         [ 4] 4024         call DROP 
      001669 CD 03 CD         [ 4] 4025         call AT 
      00166C CD 05 C2         [ 4] 4026         call VPP 
      00166F CD 03 B6         [ 4] 4027         call STORE 
      001672 CC 09 D5         [ 2] 4028         jp ZERO
      001675 81               [ 4] 4029         ret           
                                   4030         
                                   4031 .endif ;PICATOUT_MOD
                                   4032 
                                   4033 ;       ]       ( -- )
                                   4034 ;       Start compiling words in
                                   4035 ;       input stream.
      001676 16 35                 4036         .word      LINK
                           001678  4037 LINK = . 
      001678 01                    4038         .byte      1
      001679 5D                    4039         .ascii     "]"
      00167A                       4040 RBRAC:
      00167A CD 03 45         [ 4] 4041         CALL   DOLIT
      00167D 15 D5                 4042         .word  SCOMP
      00167F CD 05 92         [ 4] 4043         CALL   TEVAL
      001682 CC 03 B6         [ 2] 4044         JP     STORE
                                   4045 
                                   4046 ;       CALL,    ( ca -- )
                                   4047 ;       Compile a subroutine call.
      001685 16 78                 4048         .word      LINK
                           001687  4049 LINK = . 
      001687 05                    4050         .byte      5
      001688 43 41 4C 4C 2C        4051         .ascii     "CALL,"
      00168D                       4052 JSRC:
      00168D CD 03 45         [ 4] 4053         CALL     DOLIT
      001690 00 CD                 4054         .word     CALLL     ;CALL
      001692 CD 13 AC         [ 4] 4055         CALL     CCOMMA
      001695 CC 13 95         [ 2] 4056         JP     COMMA
                                   4057 
                           000001  4058 .if PICATOUT_MOD
                                   4059 ;       INIT-OFS ( -- )
                                   4060 ;       compute offset to adjust jump address 
                                   4061 ;       set variable OFFSET 
      001698 16 87                 4062         .word LINK 
                           00169A  4063         LINK=.
      00169A 08                    4064         .byte 8 
      00169B 49 4E 49 54 2D 4F 46  4065         .ascii "INIT-OFS" 
             53
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      0016A3                       4066 INITOFS:
      0016A3 CD 05 81         [ 4] 4067         call TFLASH 
      0016A6 CD 03 CD         [ 4] 4068         CALL AT 
      0016A9 CD 04 74         [ 4] 4069         CALL DUPP 
      0016AC CD 03 78         [ 4] 4070         call QBRAN
      0016AF 16 C0                 4071         .word 1$
      0016B1 CD 04 6A         [ 4] 4072         call DROP  
      0016B4 CD 05 D0         [ 4] 4073         call CPP 
      0016B7 CD 03 CD         [ 4] 4074         call AT 
      0016BA CD 0A C4         [ 4] 4075         call HERE
      0016BD CD 06 E8         [ 4] 4076         call SUBB 
      0016C0 CD 06 05         [ 4] 4077 1$:     call OFFSET 
      0016C3 CC 03 B6         [ 2] 4078         jp STORE  
                                   4079 .endif 
                                   4080 
                                   4081 ;       :       ( -- ; <string> )
                                   4082 ;       Start a new colon definition
                                   4083 ;       using next word as its name.
      0016C6 16 9A                 4084         .word      LINK
                           0016C8  4085 LINK = . 
      0016C8 01                    4086         .byte      1
      0016C9 3A                    4087         .ascii     ":"
      0016CA                       4088 COLON:
                           000001  4089 .if PICATOUT_MOD
      0016CA CD 16 A3         [ 4] 4090         call INITOFS       
                                   4091 .endif ; PICATOUT_MOD
      0016CD CD 10 4F         [ 4] 4092         CALL   TOKEN
      0016D0 CD 15 88         [ 4] 4093         CALL   SNAME
      0016D3 CC 16 7A         [ 2] 4094         JP     RBRAC
                                   4095 
                           000001  4096 .if PICATOUT_MOD 
                                   4097 ;       I:  ( -- )
                                   4098 ;       Start interrupt service routine definition
                                   4099 ;       those definition have no name.
      0016D6 16 C8                 4100         .word LINK
                           0016D8  4101         LINK=.
      0016D8 02                    4102         .byte 2 
      0016D9 49 3A                 4103         .ascii "I:" 
      0016DB                       4104 ICOLON:
      0016DB CD 16 A3         [ 4] 4105         call INITOFS 
      0016DE CC 16 7A         [ 2] 4106         jp RBRAC  
                                   4107 .endif ; PICATOUT_MOD
                                   4108 
                                   4109 ;       IMMEDIATE       ( -- )
                                   4110 ;       Make last compiled word
                                   4111 ;       an immediate word.
      0016E1 16 D8                 4112         .word      LINK
                           0016E3  4113 LINK = . 
      0016E3 09                    4114         .byte      9
      0016E4 49 4D 4D 45 44 49 41  4115         .ascii     "IMMEDIATE"
             54 45
      0016ED                       4116 IMMED:
      0016ED CD 03 45         [ 4] 4117         CALL     DOLIT
      0016F0 80 00                 4118         .word     0x8000	;  IMEDD*256
      0016F2 CD 05 E0         [ 4] 4119         CALL     LAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016F5 CD 03 CD         [ 4] 4120         CALL     AT
      0016F8 CD 03 CD         [ 4] 4121         CALL     AT
      0016FB CD 04 D4         [ 4] 4122         CALL     ORR
      0016FE CD 05 E0         [ 4] 4123         CALL     LAST
      001701 CD 03 CD         [ 4] 4124         CALL     AT
      001704 CC 03 B6         [ 2] 4125         JP     STORE
                                   4126 
                                   4127 ;; Defining words
                                   4128 
                                   4129 ;       CREATE  ( -- ; <string> )
                                   4130 ;       Compile a new array
                                   4131 ;       without allocating space.
      001707 16 E3                 4132         .word      LINK
                           001709  4133 LINK = . 
      001709 06                    4134         .byte      6
      00170A 43 52 45 41 54 45     4135         .ascii     "CREATE"
      001710                       4136 CREAT:
      001710 CD 10 4F         [ 4] 4137         CALL     TOKEN
      001713 CD 15 88         [ 4] 4138         CALL     SNAME
      001716 CD 16 09         [ 4] 4139         CALL     OVERT        
      001719 CD 13 DA         [ 4] 4140         CALL     COMPI 
                           000001  4141 .if PICATOUT_MOD
      00171C 05 21                 4142         .word DOVAR 
                           000000  4143 .else
                                   4144         CALL     DOVAR
                                   4145 .endif 
      00171E 81               [ 4] 4146         RET
                                   4147 
                                   4148 ;       VARIABLE        ( -- ; <string> )
                                   4149 ;       Compile a new variable
                                   4150 ;       initialized to 0.
      00171F 17 09                 4151         .word      LINK
                           001721  4152 LINK = . 
      001721 08                    4153         .byte      8
      001722 56 41 52 49 41 42 4C  4154         .ascii     "VARIABLE"
             45
      00172A                       4155 VARIA:
                           000001  4156 .if PICATOUT_MOD
                                   4157 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00172A CD 0A C4         [ 4] 4158         CALL HERE
      00172D CD 04 74         [ 4] 4159         CALL DUPP 
      001730 CD 09 3E         [ 4] 4160         CALL CELLP
      001733 CD 05 C2         [ 4] 4161         CALL VPP 
      001736 CD 03 B6         [ 4] 4162         CALL STORE
                                   4163 .endif         
      001739 CD 17 10         [ 4] 4164         CALL CREAT
      00173C CD 04 74         [ 4] 4165         CALL DUPP
      00173F CD 13 95         [ 4] 4166         CALL COMMA
      001742 CD 09 D5         [ 4] 4167         CALL ZERO
                           000001  4168 .if PICATOUT_MOD 
      001745 CD 04 84         [ 4] 4169         call SWAPP 
      001748 CD 03 B6         [ 4] 4170         CALL STORE
      00174B CD 1F E7         [ 4] 4171         CALL FMOVE ; move definition to FLASH
      00174E CD 06 1E         [ 4] 4172         CALL QDUP 
      001751 CD 03 78         [ 4] 4173         CALL QBRAN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001754 17 5D                 4174         .word SET_RAMLAST   
      001756 CD 1B 1B         [ 4] 4175         call UPDATVP  ; don't update if variable kept in RAM.
      001759 CD 20 7B         [ 4] 4176         CALL UPDATPTR
      00175C 81               [ 4] 4177         RET         
      00175D                       4178 SET_RAMLAST: 
      00175D CD 05 E0         [ 4] 4179         CALL LAST 
      001760 CD 03 CD         [ 4] 4180         CALL AT 
      001763 CD 05 F3         [ 4] 4181         CALL RAMLAST 
      001766 CC 03 B6         [ 2] 4182         jp STORE  
                                   4183 
                                   4184 .endif ;PICATOUT_MOD        
                                   4185 
                           000001  4186 .if PICATOUT_MOD
                                   4187 ;       CONSTANT  ( n -- ; <string> )
                                   4188 ;       Compile a new constant 
                                   4189 ;       n CONSTANT name 
      001769 17 21                 4190         .word LINK 
                           00176B  4191         LINK=. 
      00176B 08                    4192         .byte 8 
      00176C 43 4F 4E 53 54 41 4E  4193         .ascii "CONSTANT" 
             54
      001774                       4194 CONSTANT:          
      001774 CD 10 4F         [ 4] 4195         CALL TOKEN
      001777 CD 15 88         [ 4] 4196         CALL SNAME 
      00177A CD 16 09         [ 4] 4197         CALL OVERT 
      00177D CD 13 DA         [ 4] 4198         CALL COMPI 
                           000001  4199 .if PICATOUT_MOD
      001780 17 9E                 4200         .word DOCONST
                           000000  4201 .else
                                   4202         CALL DOCONST
                                   4203 .endif 
      001782 CD 13 95         [ 4] 4204         CALL COMMA 
      001785 CD 1F E7         [ 4] 4205         CALL FMOVE
      001788 CD 06 1E         [ 4] 4206         CALL QDUP 
      00178B CD 03 78         [ 4] 4207         CALL QBRAN 
      00178E 17 5D                 4208         .word SET_RAMLAST  
      001790 CD 20 7B         [ 4] 4209         CALL UPDATPTR  
      001793 81               [ 4] 4210 1$:     RET          
                                   4211 
                                   4212 ; CONSTANT runtime semantic 
                                   4213 ; doCONST  ( -- n )
      001794 17 6B                 4214         .word LINK 
                           001796  4215         LINK=.
      001796 07                    4216         .byte 7
      001797 44 4F 43 4F 4E 53 54  4217         .ascii "DOCONST"
      00179E                       4218 DOCONST:
      00179E 1D 00 02         [ 2] 4219         subw x,#CELLL
      0017A1 90 85            [ 2] 4220         popw y 
      0017A3 90 FE            [ 2] 4221         ldw y,(y) 
      0017A5 FF               [ 2] 4222         ldw (x),y 
      0017A6 81               [ 4] 4223         ret 
                                   4224 .endif ;PICATOUT_MOD
                                   4225 
                                   4226 
                                   4227 ;; Tools
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4228 
                                   4229 ;       _TYPE   ( b u -- )
                                   4230 ;       Display a string. Filter
                                   4231 ;       non-printing characters.
      0017A7 17 96                 4232         .word      LINK
                           0017A9  4233 LINK = . 
      0017A9 05                    4234         .byte      5
      0017AA 5F 54 59 50 45        4235         .ascii     "_TYPE"
      0017AF                       4236 UTYPE:
      0017AF CD 04 3D         [ 4] 4237         CALL     TOR     ;start count down loop
      0017B2 20 0F            [ 2] 4238         JRA     UTYP2   ;skip first pass
      0017B4 CD 04 74         [ 4] 4239 UTYP1:  CALL     DUPP
      0017B7 CD 03 EB         [ 4] 4240         CALL     CAT
      0017BA CD 09 FF         [ 4] 4241         CALL     TCHAR
      0017BD CD 03 2F         [ 4] 4242         CALL     EMIT    ;display only printable
      0017C0 CD 09 69         [ 4] 4243         CALL     ONEP    ;increment address
      0017C3 CD 03 59         [ 4] 4244 UTYP2:  CALL     DONXT
      0017C6 17 B4                 4245         .word      UTYP1   ;loop till done
      0017C8 CC 04 6A         [ 2] 4246         JP     DROP
                                   4247 
                                   4248 ;       dm+     ( a u -- a )
                                   4249 ;       Dump u bytes from ,
                                   4250 ;       leaving a+u on  stack.
      0017CB 17 A9                 4251         .word      LINK
                           0017CD  4252 LINK = . 
      0017CD 03                    4253         .byte      3
      0017CE 64 6D 2B              4254         .ascii     "dm+"
      0017D1                       4255 DUMPP:
      0017D1 CD 04 9E         [ 4] 4256         CALL     OVER
      0017D4 CD 03 45         [ 4] 4257         CALL     DOLIT
      0017D7 00 04                 4258         .word      4
      0017D9 CD 0E A5         [ 4] 4259         CALL     UDOTR   ;display address
      0017DC CD 0D F5         [ 4] 4260         CALL     SPACE
      0017DF CD 04 3D         [ 4] 4261         CALL     TOR     ;start count down loop
      0017E2 20 11            [ 2] 4262         JRA     PDUM2   ;skip first pass
      0017E4 CD 04 74         [ 4] 4263 PDUM1:  CALL     DUPP
      0017E7 CD 03 EB         [ 4] 4264         CALL     CAT
      0017EA CD 03 45         [ 4] 4265         CALL     DOLIT
      0017ED 00 03                 4266         .word      3
      0017EF CD 0E A5         [ 4] 4267         CALL     UDOTR   ;display numeric data
      0017F2 CD 09 69         [ 4] 4268         CALL     ONEP    ;increment address
      0017F5 CD 03 59         [ 4] 4269 PDUM2:  CALL     DONXT
      0017F8 17 E4                 4270         .word      PDUM1   ;loop till done
      0017FA 81               [ 4] 4271         RET
                                   4272 
                                   4273 ;       DUMP    ( a u -- )
                                   4274 ;       Dump u bytes from a,
                                   4275 ;       in a formatted manner.
      0017FB 17 CD                 4276         .word      LINK
                           0017FD  4277 LINK = . 
      0017FD 04                    4278         .byte      4
      0017FE 44 55 4D 50           4279         .ascii     "DUMP"
      001802                       4280 DUMP:
      001802 CD 05 31         [ 4] 4281         CALL     BASE
      001805 CD 03 CD         [ 4] 4282         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      001808 CD 04 3D         [ 4] 4283         CALL     TOR
      00180B CD 0C 7D         [ 4] 4284         CALL     HEX     ;save radix, set hex
      00180E CD 03 45         [ 4] 4285         CALL     DOLIT
      001811 00 10                 4286         .word      16
      001813 CD 08 8F         [ 4] 4287         CALL     SLASH   ;change count to lines
      001816 CD 04 3D         [ 4] 4288         CALL     TOR     ;start count down loop
      001819 CD 0E 3D         [ 4] 4289 DUMP1:  CALL     CR
      00181C CD 03 45         [ 4] 4290         CALL     DOLIT
      00181F 00 10                 4291         .word      16
      001821 CD 06 5A         [ 4] 4292         CALL     DDUP
      001824 CD 17 D1         [ 4] 4293         CALL     DUMPP   ;display numeric
      001827 CD 06 2F         [ 4] 4294         CALL     ROT
      00182A CD 06 2F         [ 4] 4295         CALL     ROT
      00182D CD 0D F5         [ 4] 4296         CALL     SPACE
      001830 CD 0D F5         [ 4] 4297         CALL     SPACE
      001833 CD 17 AF         [ 4] 4298         CALL     UTYPE   ;display printable characters
      001836 CD 03 59         [ 4] 4299         CALL     DONXT
      001839 18 19                 4300         .word      DUMP1   ;loop till done
      00183B CD 04 6A         [ 4] 4301 DUMP3:  CALL     DROP
      00183E CD 04 1E         [ 4] 4302         CALL     RFROM
      001841 CD 05 31         [ 4] 4303         CALL     BASE
      001844 CC 03 B6         [ 2] 4304         JP     STORE   ;restore radix
                                   4305 
                                   4306 ;       .S      ( ... -- ... )
                                   4307 ;        Display  contents of stack.
      001847 17 FD                 4308         .word      LINK
                           001849  4309 LINK = . 
      001849 02                    4310         .byte      2
      00184A 2E 53                 4311         .ascii     ".S"
      00184C                       4312 DOTS:
      00184C CD 0E 3D         [ 4] 4313         CALL     CR
      00184F CD 0A 18         [ 4] 4314         CALL     DEPTH   ;stack depth
      001852 CD 04 3D         [ 4] 4315         CALL     TOR     ;start count down loop
      001855 20 09            [ 2] 4316         JRA     DOTS2   ;skip first pass
      001857 CD 04 31         [ 4] 4317 DOTS1:  CALL     RAT
                           000001  4318 .if PICATOUT_MOD
                                   4319 ; Not required following modification I made To PICK 
                                   4320 ;        CALL ONEP
                                   4321 .endif 
      00185A CD 0A 2F         [ 4] 4322 	CALL     PICK
      00185D CD 0E D8         [ 4] 4323         CALL     DOT     ;index stack, display contents
      001860 CD 03 59         [ 4] 4324 DOTS2:  CALL     DONXT
      001863 18 57                 4325         .word      DOTS1   ;loop till done
      001865 CD 0E 7C         [ 4] 4326         CALL     DOTQP
      001868 05                    4327         .byte      5
      001869 20 3C 73 70 20        4328         .ascii     " <sp "
      00186E 81               [ 4] 4329         RET
                                   4330 
                                   4331 ;       >NAME   ( ca -- na | F )
                                   4332 ;       Convert code address
                                   4333 ;       to a name address.
      00186F 18 49                 4334         .word      LINK
                           001871  4335 LINK = . 
      001871 05                    4336         .byte      5
      001872 3E 4E 41 4D 45        4337         .ascii     ">NAME"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001877                       4338 TNAME:
      001877 CD 05 B4         [ 4] 4339         CALL     CNTXT   ;vocabulary link
      00187A CD 03 CD         [ 4] 4340 TNAM2:  CALL     AT
      00187D CD 04 74         [ 4] 4341         CALL     DUPP    ;?last word in a vocabulary
      001880 CD 03 78         [ 4] 4342         CALL     QBRAN
      001883 18 9E                 4343         .word      TNAM4
      001885 CD 06 5A         [ 4] 4344         CALL     DDUP
      001888 CD 10 5D         [ 4] 4345         CALL     NAMET
      00188B CD 04 E9         [ 4] 4346         CALL     XORR    ;compare
      00188E CD 03 78         [ 4] 4347         CALL     QBRAN
      001891 18 98                 4348         .word      TNAM3
      001893 CD 09 4D         [ 4] 4349         CALL     CELLM   ;continue with next word
      001896 20 E2            [ 2] 4350         JRA     TNAM2
      001898 CD 04 84         [ 4] 4351 TNAM3:  CALL     SWAPP
      00189B CC 04 6A         [ 2] 4352         JP     DROP
      00189E CD 06 4F         [ 4] 4353 TNAM4:  CALL     DDROP
      0018A1 CC 09 D5         [ 2] 4354         JP     ZERO
                                   4355 
                                   4356 ;       .ID     ( na -- )
                                   4357 ;        Display  name at address.
      0018A4 18 71                 4358         .word      LINK
                           0018A6  4359 LINK = . 
      0018A6 03                    4360         .byte      3
      0018A7 2E 49 44              4361         .ascii     ".ID"
      0018AA                       4362 DOTID:
      0018AA CD 06 1E         [ 4] 4363         CALL     QDUP    ;if zero no name
      0018AD CD 03 78         [ 4] 4364         CALL     QBRAN
      0018B0 18 C0                 4365         .word      DOTI1
      0018B2 CD 0A AD         [ 4] 4366         CALL     COUNT
      0018B5 CD 03 45         [ 4] 4367         CALL     DOLIT
      0018B8 00 1F                 4368         .word      0x1F
      0018BA CD 04 C0         [ 4] 4369         CALL     ANDD    ;mask lexicon bits
      0018BD CC 17 AF         [ 2] 4370         JP     UTYPE
      0018C0 CD 0E 7C         [ 4] 4371 DOTI1:  CALL     DOTQP
      0018C3 09                    4372         .byte      9
      0018C4 20 6E 6F 4E 61 6D 65  4373         .ascii     " noName"
      0018CB 81               [ 4] 4374         RET
                                   4375 
                           000000  4376 WANT_SEE=0 
                           000000  4377 .if WANT_SEE 
                                   4378 ;       SEE     ( -- ; <string> )
                                   4379 ;       A simple decompiler.
                                   4380 ;       Updated for byte machines.
                                   4381         .word      LINK
                                   4382 LINK = . 
                                   4383         .byte      3
                                   4384         .ascii     "SEE"
                                   4385 SEE:
                                   4386         CALL     TICK    ;starting address
                                   4387         CALL     CR
                                   4388         CALL     ONEM
                                   4389 SEE1:   CALL     ONEP
                                   4390         CALL     DUPP
                                   4391         CALL     AT
                                   4392         CALL     DUPP    ;?does it contain a zero
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4393         CALL     QBRAN
                                   4394         .word    SEE2
                                   4395         CALL     TNAME   ;?is it a name
                                   4396 SEE2:   CALL     QDUP    ;name address or zero
                                   4397         CALL     QBRAN
                                   4398         .word    SEE3
                                   4399         CALL     SPACE
                                   4400         CALL     DOTID   ;display name
                                   4401         CALL     ONEP
                                   4402         JRA      SEE4
                                   4403 SEE3:   CALL     DUPP
                                   4404         CALL     CAT
                                   4405         CALL     UDOT    ;display number
                                   4406 SEE4:   CALL     NUFQ    ;user control
                                   4407         CALL     QBRAN
                                   4408         .word    SEE1
                                   4409         JP     DROP
                                   4410 .endif ; WANT_SEE 
                                   4411 
                                   4412 ;       WORDS   ( -- )
                                   4413 ;       Display names in vocabulary.
      0018CC 18 A6                 4414         .word      LINK
                           0018CE  4415 LINK = . 
      0018CE 05                    4416         .byte      5
      0018CF 57 4F 52 44 53        4417         .ascii     "WORDS"
      0018D4                       4418 WORDS:
      0018D4 CD 0E 3D         [ 4] 4419         CALL     CR
      0018D7 CD 05 B4         [ 4] 4420         CALL     CNTXT   ;only in context
      0018DA CD 03 CD         [ 4] 4421 WORS1:  CALL     AT
      0018DD CD 06 1E         [ 4] 4422         CALL     QDUP    ;?at end of list
      0018E0 CD 03 78         [ 4] 4423         CALL     QBRAN
      0018E3 18 F6                 4424         .word      WORS2
      0018E5 CD 04 74         [ 4] 4425         CALL     DUPP
      0018E8 CD 0D F5         [ 4] 4426         CALL     SPACE
      0018EB CD 18 AA         [ 4] 4427         CALL     DOTID   ;display a name
      0018EE CD 09 4D         [ 4] 4428         CALL     CELLM
      0018F1 CD 03 8F         [ 4] 4429         CALL     BRAN
      0018F4 18 DA                 4430         .word      WORS1
                           000001  4431 .if PICATOUT_MOD
                                   4432 ;        CALL     DROP ; never reached
                                   4433 .endif 
      0018F6 81               [ 4] 4434 WORS2:  RET
                                   4435 
                                   4436         
                                   4437 ;; Hardware reset
                                   4438 
                                   4439 ;       hi      ( -- )
                                   4440 ;       Display sign-on message.
      0018F7 18 CE                 4441         .word      LINK
                           0018F9  4442 LINK = . 
      0018F9 02                    4443         .byte      2
      0018FA 68 69                 4444         .ascii     "hi"
      0018FC                       4445 HI:
      0018FC CD 0E 3D         [ 4] 4446         CALL     CR
      0018FF CD 0E 7C         [ 4] 4447         CALL     DOTQP   ;initialize I/O
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001902 0F                    4448         .byte      15
      001903 73 74 6D 38 65 46 6F  4449         .ascii     "stm8eForth v"
             72 74 68 20 76
      00190F 33                    4450 	.byte      VER+'0'
      001910 2E                    4451         .byte      '.' 
      001911 30                    4452 	.byte      EXT+'0' ;version
      001912 CC 0E 3D         [ 2] 4453         JP     CR
                                   4454 
                           000000  4455 WANT_DEBUG=0
                           000000  4456 .if WANT_DEBUG 
                                   4457 ;       DEBUG      ( -- )
                                   4458 ;       Display sign-on message.
                                   4459 ;        .word      LINK
                                   4460 LINK = . 
                                   4461         .byte      5
                                   4462         .ascii     "DEBUG"
                                   4463 DEBUG:
                                   4464 	CALL DOLIT
                                   4465 	.word 0x65
                                   4466 	CALL EMIT
                                   4467 	CALL DOLIT
                                   4468 	.word 0
                                   4469  	CALL ZLESS 
                                   4470 	CALL DOLIT
                                   4471 	.word 0xFFFE
                                   4472 	CALL ZLESS 
                                   4473 	CALL UPLUS 
                                   4474  	CALL DROP 
                                   4475 	CALL DOLIT
                                   4476 	.word 3
                                   4477 	CALL UPLUS 
                                   4478 	CALL UPLUS 
                                   4479  	CALL DROP
                                   4480 	CALL DOLIT
                                   4481 	.word 0x43
                                   4482 	CALL UPLUS 
                                   4483  	CALL DROP
                                   4484 	CALL EMIT
                                   4485 	CALL DOLIT
                                   4486 	.word 0x4F
                                   4487 	CALL DOLIT
                                   4488 	.word 0x6F
                                   4489  	CALL XORR
                                   4490 	CALL DOLIT
                                   4491 	.word 0xF0
                                   4492  	CALL ANDD
                                   4493 	CALL DOLIT
                                   4494 	.word 0x4F
                                   4495  	CALL ORR
                                   4496 	CALL EMIT
                                   4497 	CALL DOLIT
                                   4498 	.word 8
                                   4499 	CALL DOLIT
                                   4500 	.word 6
                                   4501  	CALL SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



                                   4502 	CALL OVER
                                   4503 	CALL XORR
                                   4504 	CALL DOLIT
                                   4505 	.word 3
                                   4506 	CALL ANDD 
                                   4507 	CALL ANDD
                                   4508 	CALL DOLIT
                                   4509 	.word 0x70
                                   4510 	CALL UPLUS 
                                   4511 	CALL DROP
                                   4512 	CALL EMIT
                                   4513 	CALL DOLIT
                                   4514 	.word 0
                                   4515 	CALL QBRAN
                                   4516 	.word DEBUG1
                                   4517 	CALL DOLIT
                                   4518 	.word 0x3F
                                   4519 DEBUG1:
                                   4520 	CALL DOLIT
                                   4521 	.word 0xFFFF
                                   4522 	CALL QBRAN
                                   4523 	.word DEBUG2
                                   4524 	CALL DOLIT
                                   4525 	.word 0x74
                                   4526 	CALL BRAN
                                   4527 	.word DEBUG3
                                   4528 DEBUG2:
                                   4529 	CALL DOLIT
                                   4530 	.word 0x21
                                   4531 DEBUG3:
                                   4532 	CALL EMIT
                                   4533 	CALL DOLIT
                                   4534 	.word 0x68
                                   4535 	CALL DOLIT
                                   4536 	.word 0x80
                                   4537 	CALL STORE
                                   4538 	CALL DOLIT
                                   4539 	.word 0x80
                                   4540 	CALL AT
                                   4541 	CALL EMIT
                                   4542 	CALL DOLIT
                                   4543 	.word 0x4D
                                   4544 	CALL TOR
                                   4545 	CALL RAT
                                   4546 	CALL RFROM
                                   4547 	CALL ANDD
                                   4548 	CALL EMIT
                                   4549 	CALL DOLIT
                                   4550 	.word 0x61
                                   4551 	CALL DOLIT
                                   4552 	.word 0xA
                                   4553 	CALL TOR
                                   4554 DEBUG4:
                                   4555 	CALL DOLIT
                                   4556 	.word 1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                   4557 	CALL UPLUS 
                                   4558 	CALL DROP
                                   4559 	CALL DONXT
                                   4560 	.word DEBUG4
                                   4561 	CALL EMIT
                                   4562 	CALL DOLIT
                                   4563 	.word 0x656D
                                   4564 	CALL DOLIT
                                   4565 	.word 0x100
                                   4566 	CALL UMSTA
                                   4567 	CALL SWAPP
                                   4568 	CALL DOLIT
                                   4569 	.word 0x100
                                   4570 	CALL UMSTA
                                   4571 	CALL SWAPP 
                                   4572 	CALL DROP
                                   4573 	CALL EMIT
                                   4574 	CALL EMIT
                                   4575 	CALL DOLIT
                                   4576 	.word 0x2043
                                   4577 	CALL DOLIT
                                   4578 	.word 0
                                   4579 	CALL DOLIT
                                   4580 	.word 0x100
                                   4581 	CALL UMMOD
                                   4582 	CALL EMIT
                                   4583 	CALL EMIT
                                   4584 	;JP ORIG
                                   4585 	RET
                                   4586 .endif ; WANT_DEBUG 
                                   4587 
                                   4588 
                                   4589 ;       'BOOT   ( -- a )
                                   4590 ;       The application startup vector.
      001915 18 F9                 4591         .word      LINK
                           001917  4592 LINK = . 
      001917 05                    4593         .byte      5
      001918 27 42 4F 4F 54        4594         .ascii     "'BOOT"
      00191D                       4595 TBOOT:
      00191D CD 05 21         [ 4] 4596         CALL     DOVAR
      001920 40 02                 4597         .word    APP_RUN      ;application to boot
                                   4598 
                                   4599 ;       COLD    ( -- )
                                   4600 ;       The hilevel cold start s=ence.
      001922 19 17                 4601         .word      LINK
                           001924  4602         LINK = . 
      001924 04                    4603         .byte      4
      001925 43 4F 4C 44           4604         .ascii     "COLD"
      001929                       4605 COLD:
                           000000  4606 .if WANT_DEBUG
                                   4607         CALL DEBUG
                                   4608 .endif 
      001929 CD 03 45         [ 4] 4609 COLD1:  CALL     DOLIT
      00192C 00 27                 4610         .word      UZERO
      00192E CD 03 45         [ 4] 4611 	CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001931 00 06                 4612         .word      UPP
      001933 CD 03 45         [ 4] 4613         CALL     DOLIT
      001936 00 1A                 4614 	.word      UEND-UZERO
      001938 CD 0B 11         [ 4] 4615         CALL     CMOVE   ;initialize user area
                                   4616 
                           000001  4617 .if PICATOUT_MOD
                                   4618 ; if APP_RUN==0 initialize with ca de 'hi'  
      00193B 90 CE 40 02      [ 2] 4619         ldw y,APP_RUN 
      00193F 26 0B            [ 1] 4620         jrne 0$
      001941 1D 00 02         [ 2] 4621         subw x,#CELLL 
      001944 90 AE 18 FC      [ 2] 4622         ldw y,#HI  
      001948 FF               [ 2] 4623         ldw (x),y
      001949 CD 1A F3         [ 4] 4624         call UPDATRUN 
      00194C                       4625 0$:        
                                   4626 ; update LAST with APP_LAST 
                                   4627 ; if APP_LAST > LAST else do the opposite
      00194C 90 CE 40 00      [ 2] 4628         ldw y,APP_LAST 
      001950 90 B3 1A         [ 2] 4629         cpw y,ULAST 
      001953 22 05            [ 1] 4630         jrugt 1$ 
                                   4631 ; save LAST at APP_LAST  
      001955 CD 1A DB         [ 4] 4632         call UPDATLAST 
      001958 20 06            [ 2] 4633         jra 2$
      00195A                       4634 1$: ; update LAST with APP_LAST 
      00195A 90 BF 1A         [ 2] 4635         ldw ULAST,y
      00195D 90 BF 14         [ 2] 4636         ldw UCNTXT,y
      001960                       4637 2$:  
                                   4638 ; update APP_CP if < app_space 
      001960 90 CE 40 04      [ 2] 4639         ldw y,APP_CP  
      001964 90 B3 18         [ 2] 4640         cpw y,UCP   
      001967 24 06            [ 1] 4641         jruge 3$ 
      001969 CD 1B 04         [ 4] 4642         call UPDATCP
      00196C 90 BE 18         [ 2] 4643         ldw y,UCP   
      00196F                       4644 3$:
      00196F 90 BF 18         [ 2] 4645         ldw UCP,y                 
                                   4646 ; update UVP with APP_VP  
                                   4647 ; if APP_VP>UVP else do the opposite 
      001972 90 CE 40 06      [ 2] 4648         ldw y,APP_VP 
      001976 90 B3 16         [ 2] 4649         cpw y,UVP 
      001979 22 05            [ 1] 4650         jrugt 4$
      00197B CD 1B 1B         [ 4] 4651         call UPDATVP 
      00197E 20 03            [ 2] 4652         jra 6$
      001980                       4653 4$: ; update UVP with APP_VP 
      001980 90 BF 16         [ 2] 4654         ldw UVP,y 
      001983                       4655 6$:      
                                   4656 .endif ; PICATOUT_MOD
      001983 CD 13 40         [ 4] 4657         CALL     PRESE   ;initialize data stack and TIB
      001986 CD 19 1D         [ 4] 4658         CALL     TBOOT
      001989 CD 0A FA         [ 4] 4659         CALL     ATEXE   ;application boot
      00198C CD 16 09         [ 4] 4660         CALL     OVERT
      00198F CC 13 5D         [ 2] 4661         JP     QUIT    ;start interpretation
                                   4662 
                           000001  4663 WANT_MATH_CONST = 1 
                           000001  4664 .if WANT_MATH_CONST 
                                   4665         ; irrational constants 
                                   4666         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4667         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      001992 19 24                   31         .word LINK 
                           001994    32         LINK=.
      001994 02                      33         .byte 2
      001995 50 49                   34         .ascii "PI" 
      001997                         35 PII:
      001997 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      00199A 90 AE 01 63      [ 2]   37         ldw y,#355 
      00199E EF 02            [ 2]   38         ldw (2,x),y 
      0019A0 90 AE 00 71      [ 2]   39         ldw y,#113 
      0019A4 FF               [ 2]   40         ldw (x),y 
      0019A5 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      0019A6 19 94                   48         .word LINK 
                           0019A8    49         LINK=.
      0019A8 05                      50         .byte 5 
      0019A9 53 51 52 54 32          51         .ascii "SQRT2" 
      0019AE                         52 SQRT2:
      0019AE 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      0019B1 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      0019B5 EF 02            [ 2]   55         ldw (2,x),y 
      0019B7 90 AE 36 24      [ 2]   56         ldw y,#13860 
      0019BB FF               [ 2]   57         ldw (x),y 
      0019BC 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      0019BD 19 A8                   63         .word LINK 
                           0019BF    64         LINK=.
      0019BF 05                      65         .byte 5
      0019C0 53 51 52 54 33          66         .ascii "SQRT3" 
      0019C5                         67 SQRT3: 
      0019C5 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      0019C8 90 AE 49 81      [ 2]   69     ldw y,#18817 
      0019CC EF 02            [ 2]   70     ldw (2,x),y 
      0019CE 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      0019D2 FF               [ 2]   72     ldw (x),y 
      0019D3 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      0019D4 19 BF                   78         .word LINK 
                           0019D6    79         LINK=.
      0019D6 01                      80         .byte 1
      0019D7 45                      81         .ascii "E" 
      0019D8                         82 ENEPER:
      0019D8 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      0019DB 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      0019DF EF 02            [ 2]   85     ldw (2,x),y 
      0019E1 90 AE 29 32      [ 2]   86     ldw y,#10546 
      0019E5 FF               [ 2]   87     ldw (x),y 
      0019E6 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      0019E7 19 D6                   92         .word LINK 
                           0019E9    93         LINK=.
      0019E9 06                      94         .byte 6 
      0019EA 53 51 52 54 31 30       95         .ascii "SQRT10" 
      0019F0                         96 SQRT10:
      0019F0 1D 00 04         [ 2]   97     subw x,#2*CELLL
      0019F3 90 AE 59 98      [ 2]   98     ldw y,#22936 
      0019F7 EF 02            [ 2]   99     ldw (2,x),y 
      0019F9 90 AE 1C 55      [ 2]  100     ldw y,#7253
      0019FD FF               [ 2]  101     ldw (x),y 
      0019FE 81               [ 4]  102     ret 
                                    103 
                                    104 ;   SQRT12 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      0019FF 19 E9                  107         .word LINK 
                           001A01   108         LINK=. 
      001A01 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A02 31 32 52 54 32         110         .ascii "12RT2"
      001A07                        111 RT12_2:
      001A07 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A0A 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A0E EF 02            [ 2]  114     ldw (2,x),y 
      001A10 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A14 FF               [ 2]  116     ldw (x),y 
      001A15 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2 ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A16 1A 01                  122         .word LINK 
                           001A18   123         LINK=.
      001A18 04                     124         .byte 4 
      001A19 4C 4F 47 32            125         .ascii "LOG2" 
      001A1D                        126 LOG2:
      001A1D 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A20 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001A24 EF 02            [ 2]  129     ldw (2,x),y 
      001A26 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001A2A FF               [ 2]  131     ldw (x),y 
      001A2B 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001A2C 1A 18                  137         .word LINK 
                           001A2E   138         LINK=.
      001A2E 03                     139         .byte 3 
      001A2F 4C 4E 32               140         .ascii "LN2" 
      001A32                        141 LN2: 
      001A32 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001A35 90 AE 01 E5      [ 2]  143     ldw y,#485
      001A39 EF 02            [ 2]  144     ldw (2,x),y 
      001A3B 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001A3F FF               [ 2]  146     ldw (x),y 
      001A40 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                   4668 .endif 
                                   4669 
                           000001  4670 .if PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4671         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001A41 1A 2E                   30     .word LINK 
                           001A43    31     LINK=.
      001A43 03                      32     .byte 3 
      001A44 46 50 21                33     .ascii "FP!"
      001A47                         34 fptr_store:
      001A47 90 93            [ 1]   35     ldw y,x
      001A49 90 FE            [ 2]   36     ldw y,(y)
      001A4B 90 9F            [ 1]   37     ld a,yl 
      001A4D B7 32            [ 1]   38     ld FPTR,a 
      001A4F 1C 00 02         [ 2]   39     addw x,#CELLL 
      001A52 90 93            [ 1]   40     ldw y,x 
      001A54 90 FE            [ 2]   41     ldw y,(y)
      001A56 90 BF 33         [ 2]   42     ldw PTR16,y
      001A59 1C 00 02         [ 2]   43     addw x,#CELLL 
      001A5C 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001A5D 1A 43                   51     .word LINK 
                           001A5F    52 LINK=.
      001A5F 06                      53     .byte 6 
      001A60 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001A66                         55 EEPROM: 
      001A66 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001A6A 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001A6D EF 02            [ 2]   58     ldw (2,x),y 
      001A6F 90 5F            [ 1]   59     clrw y 
      001A71 FF               [ 2]   60     ldw (x),y 
      001A72 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001A73 1A 5F                   67 	.word LINK 
                           001A75    68 	LINK=.
      001A75 08                      69 	.byte 8 
      001A76 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001A7E                         71 EEPLAST:
      001A7E 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001A81 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001A85 EF 02            [ 2]   74 	ldw (2,x),y 
      001A87 90 5F            [ 1]   75 	clrw y 
      001A89 FF               [ 2]   76 	ldw (x),y 
      001A8A 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001A8B 1A 75                   83 	.word LINK 
                           001A8D    84 	LINK=.
      001A8D 07                      85 	.byte 7
      001A8E 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001A95                         87 EEPRUN:
      001A95 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001A98 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001A9C EF 02            [ 2]   90 	ldw (2,x),y 
      001A9E 90 5F            [ 1]   91 	clrw y 
      001AA0 FF               [ 2]   92 	ldw (x),y 
      001AA1 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001AA2 1A 8D                   99 	.word LINK
                           001AA4   100 	LINK=.
      001AA4 06                     101 	.byte 6 
      001AA5 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001AAB                        103 EEPCP:
      001AAB 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001AAE 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001AB2 EF 02            [ 2]  106 	ldw (2,x),y 
      001AB4 90 5F            [ 1]  107 	clrw y 
      001AB6 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001AB7 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001AB8 1A A4                  115 	.word LINK
                           001ABA   116 	LINK=.
      001ABA 06                     117 	.byte 6
      001ABB 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001AC1                        119 EEPVP:
      001AC1 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001AC4 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001AC8 EF 02            [ 2]  122 	ldw (2,x),y 
      001ACA 90 5F            [ 1]  123 	clrw y 
      001ACC FF               [ 2]  124 	ldw (x),y 
      001ACD 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001ACE 1A BA                  131 	.word LINK 
                           001AD0   132 	LINK=.
      001AD0 0A                     133 	.byte 10
      001AD1 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001ADB                        135 UPDATLAST:
      001ADB CD 05 E0         [ 4]  136 	call LAST
      001ADE CD 03 CD         [ 4]  137 	call AT  
      001AE1 CD 1A 7E         [ 4]  138 	call EEPLAST
      001AE4 CC 1C 57         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001AE7 1A D0                  145 	.word LINK
                           001AE9   146 	LINK=.
      001AE9 09                     147 	.byte 9
      001AEA 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001AF3                        149 UPDATRUN:
      001AF3 CD 1A 95         [ 4]  150 	call EEPRUN
      001AF6 CC 1C 57         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001AF9 1A E9                  157 	.word LINK 
                           001AFB   158 	LINK=.
      001AFB 08                     159 	.byte 8 
      001AFC 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B04                        161 UPDATCP:
      001B04 CD 05 D0         [ 4]  162 	call CPP 
      001B07 CD 03 CD         [ 4]  163 	call AT 
      001B0A CD 1A AB         [ 4]  164 	call EEPCP 
      001B0D CC 1C 57         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B10 1A FB                  171 	.word LINK
                           001B12   172 	LINK=.
      001B12 08                     173 	.byte 8 
      001B13 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B1B                        175 UPDATVP:
      001B1B CD 05 C2         [ 4]  176 	call VPP 
      001B1E CD 03 CD         [ 4]  177 	call AT
      001B21 CD 1A C1         [ 4]  178 	call EEPVP 
      001B24 CC 1C 57         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001B27 1B 12                  186     .word LINK 
                           001B29   187 LINK=.
      001B29 02                     188     .byte 2
      001B2A 46 40                  189     .ascii "F@"
      001B2C                        190 farat:
      001B2C CD 1A 47         [ 4]  191     call fptr_store
      001B2F 92 BC 00 32      [ 5]  192     ldf a,[FPTR]
      001B33 1D 00 02         [ 2]  193     subw x,#CELLL 
      001B36 F7               [ 1]  194     ld (x),a 
      001B37 90 AE 00 01      [ 2]  195     ldw y,#1
      001B3B 91 AF 00 32      [ 1]  196     ldf a,([FPTR],y)
      001B3F E7 01            [ 1]  197     ld (1,x),a
      001B41 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001B42 1B 29                  204     .word LINK
                           001B44   205     LINK=.
      001B44 03                     206     .byte 3 
      001B45 46 43 40               207     .ascii "FC@" 
      001B48                        208 farcat:
      001B48 CD 1A 47         [ 4]  209     call fptr_store 
      001B4B 92 BC 00 32      [ 5]  210     ldf a,[FPTR]
      001B4F 1D 00 02         [ 2]  211     subw x,#CELLL 
      001B52 E7 01            [ 1]  212     ld (1,x),a 
      001B54 7F               [ 1]  213     clr (x)
      001B55 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001B56 1B 44                  221     .word LINK 
                           001B58   222 LINK=.
      001B58 06                     223     .byte 6 
      001B59 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001B5F                        225 unlock_eeprom:
      001B5F 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001B63 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001B67 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001B6B 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001B6F 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001B74 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001B75 1B 58                  238     .word LINK 
                           001B77   239 LINK=. 
      001B77 06                     240     .byte 6 
      001B78 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001B7E                        242 unlock_flash:
      001B7E 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001B82 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001B86 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001B8A 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001B8E 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001B93 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001B94 1B 77                  255 	.word LINK 
                           001B96   256 	LINK=.
      001B96 06                     257 	.byte 6
      001B97 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001B9D                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001B9D 90 BE 33         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001BA0 3D 32            [ 1]  263 	tnz FPTR 
      001BA2 26 16            [ 1]  264 	jrne 4$
      001BA4 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001BA8 24 10            [ 1]  266     jruge 4$
      001BAA 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001BAE 25 0D            [ 1]  268     jrult 9$
      001BB0 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001BB4 22 07            [ 1]  270 	jrugt 9$
      001BB6 CD 1B 5F         [ 4]  271 	call unlock_eeprom
      001BB9 81               [ 4]  272 	ret 
      001BBA CD 1B 7E         [ 4]  273 4$: call unlock_flash
      001BBD 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001BBE 1B 96                  281 	.word LINK 
                           001BC0   282 	LINK=.
      001BC0 04                     283 	.byte 4 
      001BC1 4C 4F 43 4B            284 	.ascii "LOCK" 
      001BC5                        285 lock: 
      001BC5 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001BC9 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001BCD 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001BCE 1B C0                  294 	.word LINK 
                           001BD0   295 	LINK=. 
      001BD0 08                     296 	.byte 8 
      001BD1 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001BD9                        298 inc_fptr:
      001BD9 3C 34            [ 1]  299 	inc PTR8 
      001BDB 26 08            [ 1]  300 	jrne 1$
      001BDD 90 BE 32         [ 2]  301 	ldw y,FPTR 
      001BE0 90 5C            [ 2]  302 	incw y 
      001BE2 90 BF 32         [ 2]  303 	ldw FPTR,y 
      001BE5 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001BE6 1B D0                  315 	.word LINK 
                           001BE8   316 	LINK=. 
      001BE8 07                     317 	.byte 7 
      001BE9 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001BF0                        320 write_byte:
      001BF0 90 93            [ 1]  321 	ldw y,x 
      001BF2 90 FE            [ 2]  322 	ldw y,(y)
      001BF4 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001BF7 90 9F            [ 1]  324 	ld a,yl
      001BF9 92 BD 00 32      [ 4]  325 	ldf [FPTR],a
      001BFD 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C02 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001C04 1B E8                  335     .word LINK 
                           001C06   336 	LINK=.
      001C06 04                     337     .byte 4 
      001C07 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001C0B                        343 ee_cstore:
      001C0B 52 02            [ 2]  344 	sub sp,#VSIZE
      001C0D CD 1A 47         [ 4]  345     call fptr_store
      001C10 E6 01            [ 1]  346 	ld a,(1,x)
      001C12 43               [ 1]  347 	cpl a 
      001C13 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001C15 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001C17 CD 1B 9D         [ 4]  350 	call unlock 
                                    351 	; check if option
      001C1A 3D 32            [ 1]  352 	tnz FPTR 
      001C1C 26 19            [ 1]  353 	jrne 2$
      001C1E 90 BE 33         [ 2]  354 	ldw y,PTR16 
      001C21 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001C25 2B 10            [ 1]  356 	jrmi 2$
      001C27 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001C2B 2A 0A            [ 1]  358 	jrpl 2$
      001C2D 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001C2F 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001C33 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001C37                        363 2$: 
      001C37 CD 1B F0         [ 4]  364 	call write_byte 	
      001C3A 0D 02            [ 1]  365 	tnz (OPT,sp)
      001C3C 27 0D            [ 1]  366 	jreq 3$ 
      001C3E 7B 01            [ 1]  367     ld a,(BTW,sp)
      001C40 90 5F            [ 1]  368     clrw y
      001C42 90 97            [ 1]  369 	ld yl,a 
      001C44 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001C47 FF               [ 2]  371 	ldw (x),y 
      001C48 CD 1B F0         [ 4]  372 	call write_byte
      001C4B                        373 3$: 
      001C4B CD 1B C5         [ 4]  374 	call lock 
      001C4E 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001C50 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001C51 1C 06                  382 	.word LINK 
                           001C53   383 	LINK=.
      001C53 03                     384 	.byte 3 
      001C54 45 45 21               385 	.ascii "EE!"
      001C57                        386 ee_store:
      001C57 CD 1A 47         [ 4]  387 	call fptr_store 
      001C5A CD 1B 9D         [ 4]  388 	call unlock 
      001C5D 90 93            [ 1]  389 	ldw y,x 
      001C5F 90 FE            [ 2]  390 	ldw y,(y)
      001C61 90 89            [ 2]  391 	pushw y 
      001C63 90 5E            [ 1]  392 	swapw y 
      001C65 FF               [ 2]  393 	ldw (x),y 
      001C66 CD 1B F0         [ 4]  394 	call write_byte 
      001C69 90 85            [ 2]  395 	popw y 
      001C6B 1D 00 02         [ 2]  396 	subw x,#CELLL
      001C6E FF               [ 2]  397 	ldw (x),y 
      001C6F CD 1B F0         [ 4]  398 	call write_byte
      001C72 CC 1B C5         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001C75 1C 53                  407 	.word LINK 
                           001C77   408 	LINK=. 
      001C77 09                     409 	.byte 9 
      001C78 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001C81                        411 row_erase:
      001C81 CD 1A 47         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001C84 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001C87 90 AE 1C CE      [ 2]  416 	ldw y,#row_erase_proc
      001C8B FF               [ 2]  417 	ldw (x),y 
      001C8C CD 0A D5         [ 4]  418 	call PAD 
      001C8F 90 AE 1C F5      [ 2]  419 	ldw y,#row_erase_proc_end 
      001C93 72 A2 1C CE      [ 2]  420 	subw y,#row_erase_proc
      001C97 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001C9A FF               [ 2]  422 	ldw (x),y 
      001C9B CD 0B 11         [ 4]  423 	call CMOVE 
      001C9E                        424 block_erase:
      001C9E 90 BE 33         [ 2]  425 	ldw y,FPTR+1
      001CA1 90 A3 21 00      [ 2]  426 	cpw y,#app_space 
      001CA5 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001CA7 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001CAB 24 01            [ 1]  430 	jruge 1$
      001CAD 81               [ 4]  431 	ret ; bad address 
      001CAE 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001CB2 23 01            [ 2]  433 	jrule 2$ 
      001CB4 81               [ 4]  434 	ret ; bad address 
      001CB5                        435 2$:	
      001CB5 CD 1B 5F         [ 4]  436 	call unlock_eeprom 
      001CB8 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001CBA                        439 erase_flash:
      001CBA CD 1B 7E         [ 4]  440 	call unlock_flash 
      001CBD                        441 proceed_erase:
      001CBD CD 0A D5         [ 4]  442 	call PAD 
      001CC0 90 93            [ 1]  443 	ldw y,x
      001CC2 90 FE            [ 2]  444 	ldw y,(y)
      001CC4 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001CC7 90 FD            [ 4]  446 	call (y) 
      001CC9 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001CCD 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001CCE                        451 row_erase_proc:
      001CCE 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001CD2 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001CD6 4F               [ 1]  454 	clr a 
      001CD7 90 5F            [ 1]  455 	clrw y 
      001CD9 91 A7 00 32      [ 1]  456 	ldf ([FPTR],y),a
      001CDD 90 5C            [ 2]  457     incw y
      001CDF 91 A7 00 32      [ 1]  458 	ldf ([FPTR],y),a
      001CE3 90 5C            [ 2]  459     incw y
      001CE5 91 A7 00 32      [ 1]  460 	ldf ([FPTR],y),a
      001CE9 90 5C            [ 2]  461     incw y
      001CEB 91 A7 00 32      [ 1]  462 	ldf ([FPTR],y),a
      001CEF 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001CF4 81               [ 4]  464 	ret
      001CF5                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001CF5                        478 copy_buffer:
      001CF5 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001CF7 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001CFB 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001CFF 90 5F            [ 1]  483 	clrw y
      001D01 F6               [ 1]  484 1$:	ld a,(x)
      001D02 91 A7 00 32      [ 1]  485 	ldf ([FPTR],y),a
      001D06 5C               [ 2]  486 	incw x 
      001D07 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001D09 0A 01            [ 1]  488 	dec (BCNT,sp)
      001D0B 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001D0D 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D12 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001D13 81               [ 4]  493 	ret 
      001D14                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001D14                        500 copy_prog_to_ram:
      001D14 1D 00 06         [ 2]  501 	subw x,#6
      001D17 90 AE 1C F5      [ 2]  502 	ldw y,#copy_buffer 
      001D1B EF 04            [ 2]  503 	ldw (4,x),y 
      001D1D 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001D21 EF 02            [ 2]  505 	ldw (2,x),y 
      001D23 90 AE 1D 14      [ 2]  506 	ldw y,#copy_buffer_end 
      001D27 72 A2 1C F5      [ 2]  507 	subw y,#copy_buffer  
      001D2B FF               [ 2]  508 	ldw (x),y 
      001D2C CD 0B 11         [ 4]  509 	call CMOVE 
      001D2F 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001D30 1C 77                  519 	.word LINK 
                           001D32   520 	LINK=.
      001D32 06                     521 	.byte 6 
      001D33 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001D39                        523 write_row:
      001D39 CD 1A 47         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001D3C A6 80            [ 1]  526 	ld a,#0x80 
      001D3E B4 34            [ 1]  527 	and a,PTR8 
      001D40 B7 34            [ 1]  528 	ld PTR8,a  
      001D42 CD 1D 14         [ 4]  529 	call copy_prog_to_ram
      001D45 CD 1B 9D         [ 4]  530 	call unlock
      001D48 90 93            [ 1]  531 	ldw y,x 
      001D4A 90 FE            [ 2]  532 	ldw y,(y)
      001D4C 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001D4F 89               [ 2]  534 	pushw x 
      001D50 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001D51 CD 17 00         [ 4]  536 	call TIBBASE
      001D54 CD 1B C5         [ 4]  537 	call lock
      001D57 85               [ 2]  538 	popw x 
      001D58 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001D59 1D 32                  547 		.word LINK 
                           001D5B   548 		LINK=.
      001D5B 07                     549 		.byte 7 
      001D5C 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001D63                        551 set_option: 
      001D63 90 93            [ 1]  552 		ldw y,x 
      001D65 90 FE            [ 2]  553 		ldw y,(y)
      001D67 27 06            [ 1]  554 		jreq 1$
      001D69 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001D6D 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001D6F 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001D72 81               [ 4]  559 		ret
      001D73 90 58            [ 2]  560 2$:		sllw y 
      001D75 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001D79 FF               [ 2]  562 		ldw (x),y 
      001D7A 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001D7D 90 5F            [ 1]  564 		clrw y 
      001D7F FF               [ 2]  565 		ldw (x),y 
      001D80 CD 1C 0B         [ 4]  566 		call ee_cstore
      001D83 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001D84 1D 5B                  576 	.word LINK  
                           001D86   577 	LINK=.
      001D86 08                     578 	.byte 8 
      001D87 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001D8F                        580 pristine:
                                    581 ;;; erase EEPROM
      001D8F CD 1A 66         [ 4]  582 	call EEPROM 
      001D92 CD 06 5A         [ 4]  583 1$:	call DDUP 
      001D95 CD 1C 81         [ 4]  584 	call row_erase
      001D98 90 93            [ 1]  585 	ldw y,x 
      001D9A 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001D9D 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001DA1 EF 02            [ 2]  588 	ldw (2,x),y
      001DA3 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001DA7 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001DA9 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001DAD FF               [ 2]  593 2$:	ldw (x),y   
      001DAE 90 5F            [ 1]  594 	clrw y 
      001DB0 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001DB2 CD 06 5A         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001DB5 CD 1D 63         [ 4]  597 	call set_option
      001DB8 90 93            [ 1]  598 	ldw y,x 
      001DBA 90 FE            [ 2]  599 	ldw y,(y)
      001DBC 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001DBE 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001DC2 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001DC4 90 AE 21 00      [ 2]  604 	ldw y,#app_space
      001DC8 EF 02            [ 2]  605 	ldw (2,x),y  
      001DCA 90 5F            [ 1]  606 	clrw y 
      001DCC FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001DCD CD 1C 81         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001DD0 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001DD3 90 5F            [ 1]  611 	clrw y  
      001DD5 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001DD6 CD 04 74         [ 4]  613 	call DUPP  
      001DD9 CD 1D F6         [ 4]  614 	call reset_vector
      001DDC 90 93            [ 1]  615 	ldw y,x 
      001DDE 90 FE            [ 2]  616 	ldw y,(y)
      001DE0 90 5C            [ 2]  617 	incw y   ; next vector 
      001DE2 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001DE6 25 ED            [ 1]  619 	jrult 4$
      001DE8 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001DEB 1D 86                  628 	.word LINK 
                           001DED   629 	LINK=. 
      001DED 08                     630 	.byte 8 
      001DEE 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001DF6                        632 reset_vector:
      001DF6 90 93            [ 1]  633 	ldw y,x
      001DF8 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001DFB 90 FE            [ 2]  635 	ldw y,(y)
      001DFD 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001E01 27 3A            [ 1]  637 	jreq 9$
      001E03 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001E07 22 34            [ 1]  639 	jrugt 9$  
      001E09 90 58            [ 2]  640 	sllw y 
      001E0B 90 58            [ 2]  641 	sllw y 
      001E0D 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001E11 90 BF 24         [ 2]  643 	ldw YTEMP,y
      001E14 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001E17 EF 02            [ 2]  645 	ldw (2,x),y 
      001E19 90 5F            [ 1]  646 	clrw y
      001E1B FF               [ 2]  647 	ldw (x),y 
      001E1C A6 82            [ 1]  648 	ld a,#0x82 
      001E1E 90 95            [ 1]  649 	ld yh,a
      001E20 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



      001E22 CD 1C 57         [ 4]  651 	call ee_store
      001E25 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001E28 90 5F            [ 1]  653 	clrw y 
      001E2A FF               [ 2]  654 	ldw (x),y 
      001E2B 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001E2F EF 04            [ 2]  656 	ldw (4,x),y 
      001E31 90 BE 24         [ 2]  657 	ldw y,YTEMP  
      001E34 72 A9 00 02      [ 2]  658 	addw y,#2
      001E38 EF 02            [ 2]  659 	ldw (2,x),y 
      001E3A CD 1C 57         [ 4]  660 	call ee_store
      001E3D 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= a are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( a -- )
                                    669 ;------------------------------
      001E3E 1D ED                  670 	.word LINK 
                           001E40   671 	LINK=.
      001E40 07                     672 	.byte 7
      001E41 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001E48                        679 CHKIVEC:
      001E48 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001E4A 90 93            [ 1]  681 	ldw y,x 
      001E4C 90 FE            [ 2]  682 	ldw y,(y)
      001E4E 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001E50 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001E52 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001E55 BF 33            [ 2]  686 	ldw PTR16,X
      001E57 AE FF FC         [ 2]  687 	ldw x,#-4 
      001E5A 1C 00 04         [ 2]  688 1$:	addw x,#4
      001E5D A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001E60 27 22            [ 1]  690 	jreq 9$
      001E62 90 93            [ 1]  691 	ldw y,x  
      001E64 91 D6 33         [ 4]  692 	ld a,([PTR16],y)
      001E67 11 03            [ 1]  693 	cp a,(CADR,sp)
      001E69 25 EF            [ 1]  694 	jrult 1$
      001E6B 90 5C            [ 2]  695 	incw y 
      001E6D 91 D6 33         [ 4]  696 	ld a,([PTR16],y)
      001E70 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001E72 25 E6            [ 1]  698 	jrult 1$ 
      001E74 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001E76 54               [ 2]  700 	srlw x
      001E77 54               [ 2]  701 	srlw x 
      001E78 90 93            [ 1]  702 	ldw y,x 
      001E7A 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001E7C FF               [ 2]  704 	ldw (x),y
      001E7D CD 1D F6         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001E80 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001E82 20 D6            [ 2]  707 	jra 1$
      001E84 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001E86 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001E89 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001E8B 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001E8C 1E 40                  719 	.word LINK
                           001E8E   720 	LINK=.
      001E8E 08                     721 	.byte 8 
      001E8F 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001E97                        723 set_vector:
      001E97 90 93            [ 1]  724     ldw y,x 
      001E99 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001E9C 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001E9E 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001EA2 23 04            [ 2]  728 	jrule 2$
      001EA4 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001EA7 81               [ 4]  730 	ret
      001EA8 90 58            [ 2]  731 2$:	sllw y 
      001EAA 90 58            [ 2]  732 	sllw y 
      001EAC 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001EB0 90 BF 24         [ 2]  734 	ldw YTEMP,y ; vector address 
      001EB3 A6 82            [ 1]  735 	ld a,#0x82 
      001EB5 90 95            [ 1]  736 	ld yh,a 
      001EB7 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001EB9 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001EBB 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001EBE EF 04            [ 2]  741 	ldw (4,x),y 
      001EC0 90 BE 24         [ 2]  742 	ldw y,YTEMP
      001EC3 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001EC5 90 5F            [ 1]  744 	clrw y 
      001EC7 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001EC8 CD 1C 57         [ 4]  746 	call ee_store 
      001ECB 90 93            [ 1]  747 	ldw y,x 
      001ECD 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001ED0 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001ED3 EF 04            [ 2]  750 	ldw (4,x),y 
      001ED5 90 BE 24         [ 2]  751 	ldw y,YTEMP 
      001ED8 72 A9 00 02      [ 2]  752 	addw y,#2 
      001EDC EF 02            [ 2]  753 	ldw (2,x),y 
      001EDE 90 5F            [ 1]  754 	clrw y 
      001EE0 FF               [ 2]  755 	ldw (x),y 
      001EE1 CD 1C 57         [ 4]  756 	call ee_store
      001EE4 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001EE7 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001EE8 1E 8E                  765 	.word LINK
                           001EEA   766 	LINK=.
      001EEA 03                     767 	.byte 3
      001EEB 45 45 2C               768 	.ascii "EE,"
      001EEE                        769 ee_comma:
      001EEE 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001EF1 90 BE 18         [ 2]  771 	ldw y,UCP
      001EF4 90 89            [ 2]  772 	pushw y 
      001EF6 EF 02            [ 2]  773 	ldw (2,x),y 
      001EF8 90 5F            [ 1]  774 	clrw y 
      001EFA FF               [ 2]  775 	ldw (x),y
      001EFB CD 1C 57         [ 4]  776 	call ee_store
      001EFE 90 85            [ 2]  777 	popw y 
      001F00 72 A9 00 02      [ 2]  778 	addw y,#2
      001F04 90 BF 18         [ 2]  779 	ldw UCP,y
      001F07 81               [ 4]  780 	ret 
                                    781 
                                    782 
                                    783 ;-------------------------
                                    784 ; Compile byte to flash 
                                    785 ; EEC, ( c -- )	
                                    786 ;-------------------------
      001F08 1E EA                  787 	.word LINK 
                           001F0A   788 	LINK=.
      001F0A 04                     789 	.byte 4 
      001F0B 45 45 43 2C            790 	.ascii "EEC,"
      001F0F                        791 ee_ccomma:
      001F0F 1D 00 04         [ 2]  792 	subw x,#2*CELLL 
      001F12 90 BE 18         [ 2]  793 	ldw y,UCP
      001F15 90 89            [ 2]  794 	pushw y 
      001F17 EF 02            [ 2]  795 	ldw (2,x),y 
      001F19 90 5F            [ 1]  796 	clrw y 
      001F1B FF               [ 2]  797 	ldw (x),y
      001F1C CD 1C 0B         [ 4]  798 	call ee_cstore
      001F1F 90 85            [ 2]  799 	popw y 
      001F21 90 5C            [ 2]  800 	incw y 
      001F23 90 BF 18         [ 2]  801 	ldw UCP,y
      001F26 81               [ 4]  802 	ret 
                                    803 
                                    804 
                                    805 ;--------------------------
                                    806 ; copy FLASH block to ROWBUF
                                    807 ; ROW2BUF ( ud -- )
                                    808 ;--------------------------
      001F27 1F 0A                  809 	.word LINK 
                           001F29   810 	LINK=.
      001F29 07                     811 	.byte 7 
      001F2A 52 4F 57 32 42 55 46   812 	.ascii "ROW2BUF"
      001F31                        813 ROW2BUF: 
      001F31 CD 1A 47         [ 4]  814 	call fptr_store 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



      001F34 A6 80            [ 1]  815 	ld a,#BLOCK_SIZE
      001F36 88               [ 1]  816 	push a 
      001F37 B4 34            [ 1]  817 	and a,PTR8 ; block align 
      001F39 B7 34            [ 1]  818 	ld PTR8,a
      001F3B 90 AE 16 80      [ 2]  819 	ldw y,#ROWBUFF 
      001F3F 92 BC 00 32      [ 5]  820 1$: ldf a,[FPTR]
      001F43 90 F7            [ 1]  821 	ld (y),a
      001F45 CD 1B D9         [ 4]  822 	call inc_fptr
      001F48 90 5C            [ 2]  823 	incw y 
      001F4A 0A 01            [ 1]  824 	dec (1,sp)
      001F4C 26 F1            [ 1]  825 	jrne 1$ 
      001F4E 84               [ 1]  826 	pop a 
      001F4F 81               [ 4]  827 	ret 
                                    828 
                                    829 
                                    830 ;---------------------------
                                    831 ; copy ROWBUFF to flash 
                                    832 ; BUF2ROW ( ud -- )
                                    833 ; ud is row address as double 
                                    834 ;---------------------------
      001F50 1F 29                  835 	.word LINK 
                           001F52   836 	LINK=.
      001F52 07                     837 	.byte 7 
      001F53 42 55 46 32 52 4F 57   838 	.ascii "BUF2ROW" 
      001F5A                        839 BUF2ROW:
      001F5A CD 05 6F         [ 4]  840 	call TBUF ; ( ud rb -- )
      001F5D CD 06 2F         [ 4]  841 	call ROT 
      001F60 CD 06 2F         [ 4]  842 	call ROT  ; ( rb ud -- )
      001F63 CD 1D 39         [ 4]  843 	call write_row 
      001F66 81               [ 4]  844 	ret 
                                    845 
                                    846 ;---------------------------------
                                    847 ; how many byte free in that row 
                                    848 ; RFREE ( a -- n )
                                    849 ; a is least byte of target address
                                    850 ;----------------------------------
      001F67 1F 52                  851 	.word LINK 
                           001F69   852 	LINK=.
      001F69 05                     853 	.byte 5 
      001F6A 52 46 52 45 45         854 	.ascii "RFREE"
      001F6F                        855 RFREE:
      001F6F E6 01            [ 1]  856 	ld a,(1,x)
      001F71 A4 7F            [ 1]  857 	and a,#BLOCK_SIZE-1 
      001F73 B7 24            [ 1]  858 	ld YTEMP,a 
      001F75 A6 80            [ 1]  859 	ld a,#BLOCK_SIZE 
      001F77 B0 24            [ 1]  860 	sub a,YTEMP 
      001F79 90 5F            [ 1]  861 	clrw y 
      001F7B 90 97            [ 1]  862 	ld yl,a
      001F7D FF               [ 2]  863 	ldw (x),y 
      001F7E 81               [ 4]  864 	ret 
                                    865 
                                    866 ;---------------------------------
                                    867 ; write u bytes to flash/EEPROM 
                                    868 ; constraint to row limit 
                                    869 ; RAM2EE ( ud a u -- u2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                    870 ; ud flash address 
                                    871 ; a ram address 
                                    872 ; u bytes count
                                    873 ; return u2 bytes written  
                                    874 ;-------------------------------
      001F7F 1F 69                  875 	.word LINK 
                           001F81   876 	LINK=. 
      001F81 06                     877 	.byte 6
      001F82 52 41 4D 32 45 45      878 	.ascii "RAM2EE"
                                    879 	
      001F88                        880 RAM2EE:
                                    881 ; copy ud on top 
      001F88 90 93            [ 1]  882 	ldw y,x 
      001F8A 90 EE 06         [ 2]  883 	ldw y,(6,y) ; LSW of ud  
      001F8D 90 BF 24         [ 2]  884 	ldw YTEMP,y 
      001F90 90 93            [ 1]  885 	ldw y,x 
      001F92 90 EE 04         [ 2]  886 	ldw y,(4,y)  ; MSW of ud 
      001F95 1D 00 04         [ 2]  887 	subw x,#2*CELLL 
      001F98 FF               [ 2]  888 	ldw (x),y 
      001F99 90 BE 24         [ 2]  889 	ldw y,YTEMP 
      001F9C EF 02            [ 2]  890 	ldw (2,x),y 
      001F9E CD 1F 31         [ 4]  891 	call ROW2BUF 
      001FA1 90 93            [ 1]  892 	ldw y,x 
      001FA3 90 EE 06         [ 2]  893 	ldw y,(6,y)
      001FA6 90 89            [ 2]  894 	pushw y ; udl 
      001FA8 90 9F            [ 1]  895 	ld a,yl
      001FAA A4 7F            [ 1]  896 	and a,#BLOCK_SIZE-1 
      001FAC 90 5F            [ 1]  897 	clrw y 
      001FAE 90 97            [ 1]  898 	ld yl,a 
      001FB0 72 A9 16 80      [ 2]  899 	addw y,#ROWBUFF 
      001FB4 1D 00 02         [ 2]  900 	subw x,#CELLL 
      001FB7 FF               [ 2]  901 	ldw (x),y  
      001FB8 CD 04 84         [ 4]  902 	call SWAPP ;  ( ud a ra u -- )
      001FBB CD 04 1E         [ 4]  903 	call RFROM  
      001FBE CD 1F 6F         [ 4]  904 	call RFREE 
      001FC1 CD 07 8A         [ 4]  905 	call MIN
      001FC4 CD 04 74         [ 4]  906 	call DUPP 
      001FC7 CD 04 3D         [ 4]  907 	call TOR  
      001FCA CD 0B 11         [ 4]  908 	call CMOVE
      001FCD CD 1F 5A         [ 4]  909 	call BUF2ROW 
      001FD0 CD 04 1E         [ 4]  910 	call RFROM 
      001FD3 81               [ 4]  911 	ret 
                                    912 
                                    913 ;--------------------------
                                    914 ; expand 16 bit address 
                                    915 ; to 32 bit address 
                                    916 ; FADDR ( a -- ud )
                                    917 ;--------------------------
      001FD4 1F 81                  918 	.word LINK 
                           001FD6   919 	LINK=. 
      001FD6 05                     920 	.byte 5 
      001FD7 46 41 44 44 52         921 	.ascii "FADDR"
      001FDC                        922 FADDR:
      001FDC CC 09 D5         [ 2]  923 	jp ZERO 
                                    924 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]



                                    925 ;--------------------------
                                    926 ; move new colon definition to FLASH 
                                    927 ; using WR-ROW for efficiency 
                                    928 ; preserving bytes already used 
                                    929 ; in the current block. 
                                    930 ; ud+c must not exceed block boundary 
                                    931 ; at this point the compiler as completed
                                    932 ; in RAM and pointers CP and CNTXT updated.
                                    933 ; CNTXT point to nfa of new word and  
                                    934 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    935 ; 
                                    936 ; FMOVE ( -- cp+ )
                                    937 ; 
                                    938 ;--------------------------
      001FDF 1F D6                  939 	.word LINK 
                           001FE1   940 	LINK=.
      001FE1 05                     941 	.byte 5 
      001FE2 46 4D 4F 56 45         942 	.ascii "FMOVE" 
      001FE7                        943 FMOVE:
      001FE7 CD 05 81         [ 4]  944 	call TFLASH 
      001FEA CD 03 CD         [ 4]  945 	CALL AT 
      001FED CD 03 78         [ 4]  946 	CALL QBRAN 
      001FF0 20 6B                  947 	.word no_move  
      001FF2 CD 05 D0         [ 4]  948 	call CPP
      001FF5 CD 03 CD         [ 4]  949 	call AT  
      001FF8 CD 04 74         [ 4]  950 	call DUPP ; ( udl udl -- )
      001FFB CD 05 B4         [ 4]  951 	call CNTXT 
      001FFE CD 03 CD         [ 4]  952 	call AT 
      002001 CD 03 45         [ 4]  953 	call DOLIT 
      002004 00 02                  954 	.word 2 
      002006 CD 06 E8         [ 4]  955 	call SUBB ; ( udl udl a -- )
      002009 CD 04 84         [ 4]  956 	call SWAPP 
      00200C CD 1F DC         [ 4]  957 	call FADDR 
      00200F CD 06 2F         [ 4]  958 	call ROT  ; ( udl ud a -- )
      002012 CD 04 74         [ 4]  959 	call DUPP 
      002015 CD 04 3D         [ 4]  960 	call TOR    ; R: a 
      002018                        961 FMOVE2: 
      002018 CD 0A C4         [ 4]  962 	call HERE 
      00201B CD 04 31         [ 4]  963 	call RAT 
      00201E CD 06 E8         [ 4]  964 	call SUBB ; (udl ud a wl -- )
      002021                        965 next_row:
      002021 CD 04 74         [ 4]  966 	call DUPP 
      002024 CD 04 3D         [ 4]  967 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002027 CD 1F 88         [ 4]  968 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00202A CD 04 74         [ 4]  969 	call DUPP 
      00202D CD 04 3D         [ 4]  970 	call TOR
      002030 CD 06 6F         [ 4]  971 	call PLUS  ; ( udl+ ) 
      002033 CD 04 74         [ 4]  972 	call DUPP 
      002036 CD 09 D5         [ 4]  973 	call ZERO   ; ( udl+ ud -- )
      002039 CD 04 1E         [ 4]  974 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      00203C CD 04 1E         [ 4]  975 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      00203F CD 04 9E         [ 4]  976 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      002042 CD 06 E8         [ 4]  977 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      002045 CD 04 74         [ 4]  978 	call DUPP 
      002048 CD 03 78         [ 4]  979 	call QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]



      00204B 20 64                  980 	.word fmove_done 
      00204D CD 04 84         [ 4]  981 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      002050 CD 04 1E         [ 4]  982 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      002053 CD 06 6F         [ 4]  983 	call PLUS  ; ( udl+2 ud wl- a+ )
      002056 CD 04 74         [ 4]  984 	call DUPP 
      002059 CD 04 3D         [ 4]  985 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      00205C CD 04 84         [ 4]  986 	call SWAPP 
      00205F CD 03 8F         [ 4]  987 	call BRAN
      002062 20 21                  988 	.word next_row  
      002064                        989 fmove_done:	
      002064 CD 04 1E         [ 4]  990 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      002067 1C 00 0A         [ 2]  991 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      00206A 81               [ 4]  992  	ret  
      00206B                        993 no_move:
      00206B CD 09 D5         [ 4]  994 	call ZERO
      00206E 81               [ 4]  995 	ret 
                                    996 
                                    997 ;------------------------------------------
                                    998 ; adjust pointers after **FMOVE** operetion.
                                    999 ; UPDAT-PTR ( cp+ -- )
                                   1000 ; cp+ is new CP position after FMOVE 
                                   1001 ;-------------------------------------------
      00206F 1F E1                 1002 	.word LINK 
                           002071  1003 	LINK=.
      002071 09                    1004 	.byte 9
      002072 55 50 44 41 54 2D 50  1005 	.ascii "UPDAT-PTR" 
             54 52
      00207B                       1006 UPDATPTR:
                                   1007 ;reset VP to previous position  
      00207B CD 1A C1         [ 4] 1008 	call EEPVP 
      00207E CD 04 6A         [ 4] 1009 	call DROP 
      002081 CD 03 CD         [ 4] 1010 	call AT
      002084 CD 05 C2         [ 4] 1011 	call VPP 
      002087 CD 03 B6         [ 4] 1012 	call STORE
                                   1013 ;update CONTEXT and LAST 
      00208A CD 1A AB         [ 4] 1014 	call EEPCP 
      00208D CD 04 6A         [ 4] 1015 	call DROP
      002090 CD 03 CD         [ 4] 1016 	call AT
      002093 CD 03 45         [ 4] 1017 	call DOLIT 
      002096 00 02                 1018 	.word 2 
      002098 CD 06 6F         [ 4] 1019 	call PLUS 
      00209B CD 04 74         [ 4] 1020 	call DUPP 
      00209E CD 05 B4         [ 4] 1021 	call CNTXT 
      0020A1 CD 03 B6         [ 4] 1022 	call STORE
      0020A4 CD 05 E0         [ 4] 1023 	call LAST
      0020A7 CD 03 B6         [ 4] 1024 	call STORE 
      0020AA CD 1A DB         [ 4] 1025 	call UPDATLAST 
                                   1026 ;update CP 
      0020AD CD 05 D0         [ 4] 1027 	call CPP 
      0020B0 CD 03 B6         [ 4] 1028 	call STORE
      0020B3 CD 1B 04         [ 4] 1029 	call UPDATCP 
      0020B6 81               [ 4] 1030 	ret 
                                   1031 
                                   1032 ;-----------------------------
                                   1033 ; move interrupt sub-routine
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]



                                   1034 ; in flash memory
                                   1035 ;----------------------------- 
      0020B7 20 71                 1036 	.word LINK 
                           0020B9  1037 	LINK=. 
      0020B9 06                    1038 	.byte 6
      0020BA 49 46 4D 4F 56 45     1039 	.ascii "IFMOVE" 
      0020C0                       1040 IFMOVE:
      0020C0 CD 05 81         [ 4] 1041 	call TFLASH 
      0020C3 CD 03 CD         [ 4] 1042 	CALL AT 
      0020C6 CD 03 78         [ 4] 1043 	CALL QBRAN 
      0020C9 20 6B                 1044 	.word no_move 
      0020CB CD 05 D0         [ 4] 1045 	call CPP 
      0020CE CD 03 CD         [ 4] 1046 	call AT 
      0020D1 CD 04 74         [ 4] 1047 	call DUPP ; ( udl udl -- )
      0020D4 CD 1A C1         [ 4] 1048 	call EEPVP 
      0020D7 CD 04 6A         [ 4] 1049 	call DROP
      0020DA CD 03 CD         [ 4] 1050 	call AT  ; ( udl udl a )
      0020DD CD 04 3D         [ 4] 1051 	call TOR 
      0020E0 CD 1F DC         [ 4] 1052 	call FADDR
      0020E3 CD 04 31         [ 4] 1053 	call RAT ; ( udl ud a -- ) R: a 
      0020E6 CC 20 18         [ 2] 1054 	jp FMOVE2 
                                   1055 
                                   1056 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]



                                   4672 .endif ; PICATOUT_MOD
                                   4673 
                                   4674 ;===============================================================
                                   4675 
                           0020B9  4676 LASTN =	LINK   ;last name defined
                                   4677 
                                   4678 ; application code begin here
      002100                       4679 	.bndry 128 ; align on flash block  
      002100                       4680 app_space: 
                                   4681 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        00070B R   |   6 ABOR1      001260 R
  6 ABOR2      001277 R   |   6 ABORQ      001258 R   |   6 ABORT      001249 R
  6 ABRTQ      001534 R   |   6 ABSS       000702 R   |   6 ACCEP      0011DF R
  6 ACCP1      0011E8 R   |   6 ACCP2      00120E R   |   6 ACCP3      001211 R
  6 ACCP4      001213 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00060E R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00151F R   |   6 AGAIN      001475 R   |   6 AHEAD      0014D2 R
  6 ALLOT      001388 R   |   6 ANDD       0004C0 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0003CD R   |   6 ATEXE      000AFA R   |   6 AUTORUN    000123 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      001187 R   |   6 BASE       000531 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      0013CA R   |   6 BDIGS      000BE2 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      001457 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      00101F R   |   6 BKSP       001157 R
    BKSPP   =  000008     |   6 BLANK      0009C8 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       00038F R
    BTW     =  000001     |   6 BUF2ROW    001F5A R   |   6 BYE        0000B0 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        0003EB R   |   6 CCOMMA     0013AC R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      00094D R   |   6 CELLP      00093E R
  6 CELLS      00095C R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E0F R   |   6 CHAR2      000E12 R
  6 CHKIVEC    001E48 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000B19 R   |   6 CMOV2      000B31 R
  6 CMOVE      000B11 R   |     CNTDWN  =  000030     |   6 CNTXT      0005B4 R
  6 COLD       001929 R   |   6 COLD1      001929 R   |   6 COLON      0016CA R
  6 COMMA      001395 R   |   6 COMPI      0013DA R   |     COMPO   =  000040 
  6 CONSTANT   001774 R   |     CONVERT_=  000001     |   6 COUNT      000AAD R
  6 CPP        0005D0 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000E3D R   |   6 CREAT      001710 R   |     CRR     =  00000D 
  6 CSTOR      0003DA R   |   6 DAT        000A8D R   |     DATSTK  =  001680 
  6 DDROP      00064F R   |   6 DDUP       00065A R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000C92 R   |   6 DEPTH      000A18 R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      000CD7 R
  6 DI         0000BE R   |   6 DIG        000C0B R   |   6 DIGIT      000BA6 R
  6 DIGS       000C1C R   |   6 DIGS1      000C1C R   |   6 DIGS2      000C29 R
  6 DIGTQ      000CA6 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        0006C9 R   |   6 DNEGA      0006AC R   |   6 DOCONST    00179E R
  6 DOLIT      000345 R   |   6 DONXT      000359 R   |   6 DOSTR      000E53 R
  6 DOT        000ED8 R   |   6 DOT1       000EEE R   |   6 DOTI1      0018C0 R
  6 DOTID      0018AA R   |   6 DOTO1      0012EC R   |   6 DOTOK      0012D2 R
  6 DOTPR      001001 R   |   6 DOTQ       00154E R   |   6 DOTQP      000E7C R
  6 DOTR       000E8A R   |   6 DOTS       00184C R   |   6 DOTS1      001857 R
  6 DOTS2      001860 R   |   6 DOVAR      000521 R   |   6 DROP       00046A R
  6 DSTOR      000A67 R   |   6 DUMP       001802 R   |   6 DUMP1      001819 R
  6 DUMP3      00183B R   |   6 DUMPP      0017D1 R   |   6 DUPP       000474 R
  6 EDIGS      000C47 R   |   6 EEPCP      001AAB R   |   6 EEPLAST    001A7E R
  6 EEPROM     001A66 R   |     EEPROM_B=  004000     |     EEPROM_E=  0047FF 
    EEPROM_S=  000800     |   6 EEPRUN     001A95 R   |   6 EEPVP      001AC1 R
  6 EI         0000B7 R   |   6 ELSEE      0014AD R   |   6 EMIT       00032F R
  6 ENEPER     0019D8 R   |   6 EQ1        000726 R   |   6 EQUAL      000710 R
  6 ERASE      000B73 R   |     ERR     =  00001B     |   6 EVAL       001315 R
  6 EVAL1      001315 R   |   6 EVAL2      001331 R   |   6 EXE1       000B08 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

  6 EXECU      00039F R   |   6 EXIT       0003AF R   |     EXT     =  000000 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000BCE R
  6 FADDR      001FDC R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000B40 R   |   6 FILL1      000B5D R   |   6 FILL2      000B66 R
  6 FIND       0010B3 R   |   6 FIND1      0010D1 R   |   6 FIND2      0010FF R
  6 FIND3      00110B R   |   6 FIND4      00111F R   |   6 FIND5      00112C R
  6 FIND6      001110 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FMOVE      001FE7 R
  6 FMOVE2     002018 R   |   6 FOR        00142A R   |   6 FORGET     000154 R
  6 FORGET1    000183 R   |   6 FORGET2    000209 R   |   6 FORGET4    000212 R
  6 FORGET6    0001CB R   |     FPTR    =  000032     |   6 FREEVAR    00021F R
  6 FREEVAR4   000255 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000AC4 R
  6 HEX        000C7D R   |   6 HI         0018FC R   |   6 HLD        0005A1 R
  6 HOLD       000BF2 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     0016DB R
  6 IFETCH     001448 R   |   6 IFF        001485 R   |   6 IFMOVE     0020C0 R
    IMEDD   =  000080     |   6 IMMED      0016ED R   |   6 INCH       000323 R
  6 INITOFS    0016A3 R   |   6 INN        00054F R   |     INPUT_DI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      0012B4 R   |   6 INTER      00128A R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      000689 R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      001638 R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       00168D R   |   6 KEY        000DBD R
  6 KTAP       0011A4 R   |   6 KTAP1      0011C7 R   |   6 KTAP2      0011CA R
  6 LAST       0005E0 R   |   6 LASTN   =  0020B9 R   |   6 LBRAC      0012C1 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       00074D R   |     LF      =  00000A     |   6 LINK    =  0020B9 R
  6 LITER      0013FC R   |   6 LN2        001A32 R   |   6 LOG2       001A1D R
  6 LSHIFT     000987 R   |   6 LSHIFT1    000990 R   |   6 LSHIFT4    000998 R
  6 LT1        000763 R   |     MASKK   =  001F7F     |   6 MAX        00076D R
  6 MAX1       000780 R   |   6 MIN        00078A R   |   6 MIN1       00079D R
  6 MMOD1      000840 R   |   6 MMOD2      000854 R   |   6 MMOD3      00086B R
  6 MMSM1      0007E7 R   |   6 MMSM2      0007FB R   |   6 MMSM3      0007FD R
  6 MMSM4      000805 R   |   6 MODD       000885 R   |   6 MONE       0009EE R
    MS      =  00002E     |   6 MSEC       00025F R   |   6 MSMOD      000823 R
  6 MSTA1      000916 R   |   6 MSTAR      0008F3 R   |     NAFR    =  004804 
  6 NAMEQ      00114C R   |   6 NAMET      00105D R   |     NCLKOPT =  004808 
  6 NEGAT      00069A R   |   6 NEX1       000366 R   |   6 NEXT       001439 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       00055F R   |     NUBC    =  004802 
  6 NUFQ       000DD3 R   |   6 NUFQ1      000DEC R   |   6 NUMBQ      000CEA R
  6 NUMQ1      000D1E R   |   6 NUMQ2      000D4F R   |   6 NUMQ3      000D91 R
  6 NUMQ4      000D96 R   |   6 NUMQ5      000DA5 R   |   6 NUMQ6      000DA8 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     000605 R   |     OFS     =  000005     |   6 ONE        0009E0 R
  6 ONEM       000976 R   |   6 ONEP       000969 R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000043 R   |   6 ORR        0004D4 R   |   6 OUTPUT     000334 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       00049E R   |   6 OVERT      001609 R
    PA      =  000000     |   6 PACKS      000B85 R   |   6 PAD        000AD5 R
  6 PAREN      001010 R   |   6 PARS       000F09 R   |   6 PARS1      000F34 R
  6 PARS2      000F5F R   |   6 PARS3      000F62 R   |   6 PARS4      000F6B R
  6 PARS5      000F8E R   |   6 PARS6      000FA3 R   |   6 PARS7      000FB2 R
  6 PARS8      000FC1 R   |   6 PARSE      000FD2 R   |   6 PAUSE      00026F R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      0017E4 R   |   6 PDUM2      0017F5 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PICATOUT=  000001     |   6 PICK       000A2F R
  6 PII        001997 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       00066F R   |   6 PNAM1      0015BE R
  6 PRESE      001340 R   |     PROD1   =  000022     |     PROD2   =  000024 
    PROD3   =  000026     |   6 PROTECTE   0001FB R   |   6 PSTOR      000A46 R
    PTR16   =  000033     |     PTR8    =  000034     |   6 QBRAN      000378 R
  6 QDUP       00061E R   |   6 QDUP1      000628 R   |   6 QKEY       000311 R
  6 QSTAC      0012F8 R   |   6 QUERY      001224 R   |   6 QUEST      000EFB R
  6 QUIT       00135D R   |   6 QUIT1      001365 R   |   6 QUIT2      001368 R
  6 RAM2EE     001F88 R   |     RAMBASE =  000000     |   6 RAMLAST    0005F3 R
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        000431 R   |   6 RBRAC      00167A R   |   6 REPEA      001502 R
  6 RFREE      001F6F R   |   6 RFROM      00041E R   |     ROP     =  004800 
  6 ROT        00062F R   |   6 ROW2BUF    001F31 R   |     ROWBUFF =  001680 
    RP0     =  00002C     |   6 RPAT       0003FB R   |     RPP     =  0017FF 
  6 RPSTO      000408 R   |   6 RSHIFT     0009A3 R   |   6 RSHIFT1    0009AC R
  6 RSHIFT4    0009B4 R   |     RST_SR  =  0050B3     |   6 RT12_2     001A07 R
  6 SAME1      00107B R   |   6 SAME2      0010A4 R   |   6 SAMEQ      001073 R
  6 SCOM1      0015F3 R   |   6 SCOM2      0015F6 R   |   6 SCOMP      0015D5 R
  6 SEMIS      001619 R   |   6 SETISP     0000CA R   |   6 SET_RAML   00175D R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000C31 R
  6 SIGN1      000C41 R   |   6 SLASH      00088F R   |   6 SLMOD      000873 R
  6 SNAME      001588 R   |     SP0     =  00002A     |   6 SPACE      000DF5 R
  6 SPACS      000E04 R   |   6 SPAT       000454 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Symbol Table

    SPI_TXCR=  005207     |     SPP     =  001680     |   6 SPSTO      000461 R
  6 SQRT10     0019F0 R   |   6 SQRT2      0019AE R   |   6 SQRT3      0019C5 R
  6 SSMOD      00091F R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       0008E8 R   |   6 STASL      000930 R   |   6 STOD       0006D1 R
  6 STORE      0003B6 R   |   6 STR        000C5F R   |   6 STRCQ      00140A R
  6 STRQ       001541 R   |   6 STRQP      000E72 R   |   6 SUBB       0006E8 R
  6 SWAPP      000484 R   |     SWIM_CSR=  007F80     |   6 TAP        00118E R
  6 TBOOT      00191D R   |   6 TBUF       00056F R   |     TBUFFBAS=  001680 
  6 TCHA1      000A0F R   |   6 TCHAR      0009FF R   |   6 TEMP       000540 R
  6 TEVAL      000592 R   |   6 TFLASH     000581 R   |   6 THENN      00149A R
  6 TIB        000AE6 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       001374 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 118.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00029F R
  6 TIMER      000289 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      00187A R   |   6 TNAM3      001898 R   |   6 TNAM4      00189E R
  6 TNAME      001877 R   |   6 TOFLASH    0002C4 R   |   6 TOKEN      00104F R
  6 TOR        00043D R   |   6 TORAM      000304 R   |     TRUEE   =  00FFFF 
  6 TWOSL      0009BB R   |   6 TYPE1      000E24 R   |   6 TYPE2      000E30 R
  6 TYPES      000E1F R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 119.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000EC5 R   |   6 UDOTR      000EA5 R   |   6 UEND       000041 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      000745 R   |   6 ULESS      00072F R
  6 UMMOD      0007C5 R   |   6 UMSTA      00089E R   |   6 UNIQ1      00157F R
  6 UNIQU      001560 R   |   6 UNTIL      001462 R   |     UOFFSET =  00001C 
  6 UPDATCP    001B04 R   |   6 UPDATLAS   001ADB R   |   6 UPDATPTR   00207B R
  6 UPDATRUN   001AF3 R   |   6 UPDATVP    001B1B R   |   6 UPL1       000515 R
  6 UPLUS      0004FE R   |     UPP     =  000006     |     URLAST  =  000020 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  00001E     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      0017B4 R   |   6 UTYP2      0017C3 R   |   6 UTYPE      0017AF R
    UVP     =  000016     |   6 UZERO      000027 R   |   6 VARIA      00172A R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000003 
  6 VPP        0005C2 R   |     VSIZE   =  000006     |     WANT_DEB=  000000 
    WANT_MAT=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      0014E8 R   |   6 WITHI      0007AA R
  6 WORDD      00103B R   |   6 WORDS      0018D4 R   |   6 WORS1      0018DA R
  6 WORS2      0018F6 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       0004E9 R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       0009D5 R   |   6 ZL1        0004B6 R   |   6 ZLESS      0004AD R
  6 app_spac   002100 R   |   6 block_er   001C9E R   |   6 clear_ra   000019 R
  6 clock_in   00005E R   |   6 copy_buf   001CF5 R   |   6 copy_buf   001D14 R
  6 copy_pro   001D14 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 ee_ccomm   001F0F R
  6 ee_comma   001EEE R   |   6 ee_cstor   001C0B R   |   6 ee_store   001C57 R
  6 erase_fl   001CBA R   |   6 farat      001B2C R   |   6 farcat     001B48 R
  6 fmove_do   002064 R   |   6 fptr_sto   001A47 R   |   6 inc_fptr   001BD9 R
  6 lock       001BC5 R   |   6 main       000016 R   |   6 next_row   002021 R
  6 no_move    00206B R   |   6 pristine   001D8F R   |   6 proceed_   001CBD R
  6 reboot     0002B6 R   |   6 reset_ve   001DF6 R   |   6 row_eras   001C81 R
  6 row_eras   001CCE R   |   6 row_eras   001CF5 R   |   6 set_opti   001D63 R
  6 set_vect   001E97 R   |   6 uart1_in   000070 R   |   6 unlock     001B9D R
  6 unlock_e   001B5F R   |   6 unlock_f   001B7E R   |   6 write_by   001BF0 R
  6 write_ro   001D39 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 120.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2100   flags    0

