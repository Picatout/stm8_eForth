ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                                     94 
                                     95 
                                     96 
                                     97 ;; Memory allocation
                                     98 
                           000006    99 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   100 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   101 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   102 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   103 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   104 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   105 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    106 
                                    107 ; user variables constants 
                           000006   108 UBASE = UPP       ; numeric base 
                           000008   109 UTMP = UBASE+2    ; temporary storage
                           00000A   110 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   111 UCTIB = UINN+2    ; tib count 
                           00000E   112 UTIB = UCTIB+2    ; tib address 
                           000010   113 UINTER = UTIB+2   ; interpreter vector 
                           000012   114 UHLD = UINTER+2   ; hold 
                           000014   115 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   116 UVP = UCNTXT+2    ; variable pointer 
                           000018   117 UCP = UVP+2      ; code pointer
                           00001A   118 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   119 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   120 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   121 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    122 
                                    123 ;******  System Variables  ******
                           000022   124 XTEMP	=	URLAST +2;address called by CREATE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000024   125 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   126 PROD1 = XTEMP	;space for UM*
                           000024   127 PROD2 = PROD1+2
                           000026   128 PROD3 = PROD2+2
                           000028   129 CARRY = PROD3+2
                           00002A   130 SP0	= CARRY+2	;initial data stack pointer
                           00002C   131 RP0	= SP0+2		;initial return stack pointer
                           00002E   132 MS    =   RP0+2         ; millisecond counter 
                           000030   133 CNTDWN =  MS+2          ; count down timer 
                           000032   134 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   135 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   136 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   137 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   138 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    139 
                                    140 ; EEPROM persistant data  
                           004000   141 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   142 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   143 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   144 APP_VP = APP_CP+2  ; free data space pointer 
                                    145 
                                    146 
                                    147 ;***********************************************
                                    148 ;; Version control
                                    149 
                           000003   150 VER     =     3         ;major release version
                           000000   151 EXT     =     0         ;minor extension
                                    152 
                                    153 ;; Constants
                                    154 
                           00FFFF   155 TRUEE   =     0xFFFF      ;true flag
                                    156 
                           000040   157 COMPO   =     0x40     ;lexicon compile only bit
                           000080   158 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   159 MASKK   =     0x1F7F  ;lexicon bit mask
                                    160 
                           000002   161 CELLL   =     2       ;size of a cell
                           00000A   162 BASEE   =     10      ;default radix
                           000008   163 BKSPP   =     8       ;back space
                           00000A   164 LF      =     10      ;line feed
                           00000D   165 CRR     =     13      ;carriage return
                           00001B   166 ERR     =     27      ;error escape
                           000027   167 TIC     =     39      ;tick
                           0000CD   168 CALLL   =     0xCD     ;CALL opcodes
                           000080   169 IRET_CODE =   0x80    ; IRET opcode 
                                    170 
                                    171         .macro _ledon
                                    172         bset PC_ODR,#LED2_BIT
                                    173         .endm
                                    174 
                                    175         .macro _ledoff
                                    176         bres PC_ODR,#LED2_BIT
                                    177         .endm
                                    178 
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .area DATA (ABS)
      000000                        181         .org RAMBASE 
                                    182 ;**********************************************************
                                    183 
                                    184 ;**********************************************************
                                    185         .area SSEG (ABS) ; STACK
      001700                        186         .org 0x1700
      001700                        187         .ds 256 
                                    188 ; space for DATSTK,TIB and STACK         
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area HOME ; vectors table
                                    193 ;**********************************************************
      000000 82 00 00 16            194 	int main	        ; reset
      000004 82 00 00 00            195 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            196 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            197 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            198 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            199 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            200 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            201 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            202 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            203 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            204 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            205 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            206 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            207 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            208 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            209 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            210 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            211 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            212 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            213 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            214 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            215 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            216 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            217 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            218 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            219 	int Timer4Handler	; irq23
      000068 82 00 00 00            220 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            221 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            222 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            223 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            224 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            225 	int NonHandledInterrupt	; irq29
                                    226 
                                    227 ;**********************************************************
                                    228         .area CODE
                                    229 ;**********************************************************
                                    230 
                                    231 ; non handled interrupt reset MCU
      000000                        232 NonHandledInterrupt:
      000000 A6 80            [ 1]  233         ld a, #0x80
      000002 C7 50 D1         [ 1]  234         ld WWDG_CR,a ; WWDG_CR used to reset mcu
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 	;iret
                                    236 
                                    237 ; used for milliseconds counter 
                                    238 ; MS is 16 bits counter 
      000005                        239 Timer4Handler:
      000005 72 5F 53 42      [ 1]  240 	clr TIM4_SR 
      000009 BE 2E            [ 2]  241         ldw x,MS 
      00000B 5C               [ 2]  242         incw x 
      00000C BF 2E            [ 2]  243         ldw MS,x
      00000E BE 30            [ 2]  244         ldw x,CNTDWN 
      000010 27 03            [ 1]  245         jreq 1$
      000012 5A               [ 2]  246         decw x 
      000013 BF 30            [ 2]  247         ldw CNTDWN,x 
      000015                        248 1$:         
      000015 80               [11]  249         iret 
                                    250 
                                    251 
                                    252 ;; Main entry points and COLD start data
      000016                        253 main:
                                    254 ; clear all RAM
      000016 AE 00 00         [ 2]  255 	ldw X,#RAMBASE
      000019                        256 clear_ram0:
      000019 7F               [ 1]  257 	clr (X)
      00001A 5C               [ 2]  258 	incw X
      00001B A3 17 FF         [ 2]  259 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  260 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  261         ldw x,#RPP
      000023 94               [ 1]  262         ldw sp,x
                                    263 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  264         inc SEEDX+1 
      000026 3C 39            [ 1]  265         inc SEEDY+1          
      000028 CC 00 47         [ 2]  266 	jp ORIG
                                    267 
                                    268 ; COLD initialize these variables.
      00002B                        269 UZERO:
      00002B 00 0A                  270         .word      BASEE   ;BASE
      00002D 00 00                  271         .word      0       ;tmp
      00002F 00 00                  272         .word      0       ;>IN
      000031 00 00                  273         .word      0       ;#TIB
      000033 17 00                  274         .word      TIBB    ;TIB
      000035 12 F7                  275         .word      INTER   ;'EVAL
      000037 00 00                  276         .word      0       ;HLD
      000039 21 2B                  277         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  278         .word      VAR_BASE   ;variables free space pointer 
      00003D 21 80                  279         .word      app_space ; FLASH free space pointer 
      00003F 21 2B                  280         .word      LASTN   ;LAST
      000041 00 00                  281         .word      0        ; OFFSET 
      000043 00 00                  282         .word      0       ; TFLASH
                                    283 ;       .word      0       ; URLAST   
      000045 00 00                  284 UEND:   .word      0
                                    285 
      000047                        286 ORIG:   
                                    287 ; initialize SP
      000047 AE 17 FF         [ 2]  288         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  289         LDW     SP,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00004B BF 2C            [ 2]  290         LDW     RP0,X
      00004D AE 16 80         [ 2]  291         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  292         LDW     SP0,X
                                    293 ; initialize PC_5 as output to control LED2
                                    294 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  295         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  296         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  297         bset PC_DDR,#LED2_BIT
      00005E                        298         _ledoff
      00005E 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    299 ; initialize clock to HSI
                                    300 ; no divisor 16Mhz 
                                    301 ; Added by Picatout 
      000062                        302 clock_init:
      000062 72 5F 50 C6      [ 1]  303         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  304 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00006A A6 E1            [ 1]  305 	ld a,#CLK_SWR_HSI
      00006C C7 50 C4         [ 1]  306 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  307 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  308 	jrne 1$
                                    309         
                                    310 ; initialize UART1, 115200 8N1
      000074                        311 uart1_init:
      000074 72 14 50 C7      [ 1]  312 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    313 	; configure tx pin
      000078 72 1A 50 02      [ 1]  314 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  315 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  316 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    317 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000084 35 0B 52 33      [ 1]  318 	mov UART1_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  319 	mov UART1_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  320 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    321 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  322 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  323 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  324 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  325 	bset TIM4_IER,#TIM4_IER_UIE 
                                    326 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  327         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  328         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  329         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  330         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  331         rim
      0000AB CC 19 99         [ 2]  332         jp  COLD   ;default=MN1
                                    333 
                                    334 
                                    335 ;; place MCU in sleep mode with
                                    336 ;; halt opcode 
                                    337 ;; BYE ( -- )
      0000AE 00 00                  338         .word 0
                           0000B0   339         LINK=.
      0000B0 03                     340         .byte 3 
      0000B1 42 59 45               341         .ascii "BYE"
      0000B4                        342 BYE: 
      0000B4 8E               [10]  343         halt 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000B5 81               [ 4]  344         ret 
                                    345 
                                    346 ; Enable interrupts 
                                    347 ; EI ( -- )
      0000B6 00 B0                  348         .word LINK 
                           0000B8   349         LINK=.
      0000B8 02                     350         .byte 2
      0000B9 45 49                  351         .ascii "EI"
      0000BB                        352 EI:
      0000BB 9A               [ 1]  353         rim 
      0000BC 81               [ 4]  354         ret 
                                    355 
                                    356 ; Disable interrupts
                                    357 ; DI ( -- )
      0000BD 00 B8                  358         .word LINK 
                           0000BF   359         LINK=.
      0000BF 02                     360         .byte 2 
      0000C0 44 49                  361         .ascii "DI"
      0000C2                        362 DI:
      0000C2 9B               [ 1]  363         sim 
      0000C3 81               [ 4]  364         ret 
                                    365 
                                    366 ; set interrupt priority level 
                                    367 ; SET-ISP ( n1 n2 -- )
                                    368 ; n1 level {1..3}
                                    369 ; n2 vector {0..29}
      0000C4 00 BF                  370         .word LINK 
                           0000C6   371         LINK=.
      0000C6 07                     372         .byte 7 
      0000C7 53 45 54 2D 49 53 50   373         .ascii "SET-ISP"
      0000CE                        374 SETISP:
      0000CE 90 93            [ 1]  375         ldw y,x 
      0000D0 90 FE            [ 2]  376         ldw y,(y)
      0000D2 A6 04            [ 1]  377         ld a,#4 ; 4 slot per register 
                                    378 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  379         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  380         and a,#3 
      0000D8 48               [ 1]  381         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  382         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  383         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  384         clrw y 
      0000E0 90 97            [ 1]  385         ld yl,a 
      0000E2 1D 00 02         [ 2]  386         subw x,#CELLL 
      0000E5 FF               [ 2]  387         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  388         ldw y,x 
      0000E8 90 EE 02         [ 2]  389         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  390         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  391         subw x,#CELLL 
      0000F0 FF               [ 2]  392         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 0D         [ 4]  393         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B4         [ 4]  394         call DOLIT 
      0000F7 00 03                  395         .word 3
      0000F9 CD 04 F3         [ 4]  396         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 F6         [ 4]  397         call LSHIFT ; creat slot mask 
      0000FF CD 06 F8         [ 4]  398         call INVER  ; ( level reg lshift rval mask )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000102 CD 05 2F         [ 4]  399         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 04 AC         [ 4]  400         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 9E         [ 4]  401         call ROT  ; ( reg lshift level )
      00010B CD 04 F3         [ 4]  402         call SWAPP ; ( reg level lshift )
      00010E CD 09 F6         [ 4]  403         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 8D         [ 4]  404         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 43         [ 4]  405         call ORR   ; ( reg updated_rval )
      000117 CD 04 F3         [ 4]  406         call SWAPP 
      00011A CD 04 49         [ 4]  407         call CSTOR
                                    408 
                                    409 ; sélectionne l'application 
                                    410 ; qui démarre automatique lors 
                                    411 ; d'un COLD start 
      00011D 00 C6                  412         .word LINK 
                           00011F   413         LINK=.
      00011F 07                     414         .byte 7
      000120 41 55 54 4F 52 55 4E   415         .ascii "AUTORUN"
      000127                        416 AUTORUN:
      000127 CD 10 BC         [ 4]  417         call TOKEN 
      00012A CD 04 E3         [ 4]  418         call DUPP 
      00012D CD 03 E7         [ 4]  419         call QBRAN 
      000130 02 0D                  420         .word FORGET2
      000132 CD 11 B9         [ 4]  421         call NAMEQ
      000135 CD 06 8D         [ 4]  422         call QDUP 
      000138 CD 03 E7         [ 4]  423         call QBRAN 
      00013B 02 0D                  424         .word FORGET2
      00013D CD 04 D9         [ 4]  425         call DROP 
      000140 1D 00 04         [ 2]  426         subw x,#2*CELLL 
      000143 90 5F            [ 1]  427         clrw y 
      000145 FF               [ 2]  428         ldw (x),y 
      000146 90 AE 40 02      [ 2]  429         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  430         ldw (2,x),y 
      00014C CC 1C C9         [ 2]  431         jp ee_store 
                                    432 
                                    433 ;; Reset dictionary pointer before 
                                    434 ;; forgotten word. RAM space and 
                                    435 ;; interrupt vector defined after 
                                    436 ;; must be resetted also.
      00014F 01 1F                  437         .word LINK 
                           000151   438         LINK=.
      000151 06                     439         .byte 6
      000152 46 4F 52 47 45 54      440         .ascii "FORGET" 
      000158                        441 FORGET: 
      000158 CD 10 BC         [ 4]  442         call TOKEN
      00015B CD 04 E3         [ 4]  443         call DUPP 
      00015E CD 03 E7         [ 4]  444         call QBRAN 
      000161 02 0D                  445         .word FORGET2
      000163 CD 11 B9         [ 4]  446         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 8D         [ 4]  447         call QDUP 
      000169 CD 03 E7         [ 4]  448         call QBRAN 
      00016C 02 0D                  449         .word FORGET2
                                    450 ; only forget users words 
      00016E CD 04 E3         [ 4]  451         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  452         call DOLIT 
      000174 21 80                  453         .word app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000176 CD 04 F3         [ 4]  454         call SWAPP 
      000179 CD 07 9E         [ 4]  455         call  ULESS 
      00017C CD 03 E7         [ 4]  456         call QBRAN 
      00017F 01 CF                  457         .word FORGET6 
                                    458 ; ( ca na -- )        
                                    459 ;reset ivec with address >= ca
      000181 CD 04 F3         [ 4]  460         call SWAPP ; ( na ca -- ) 
      000184 CD 1E BA         [ 4]  461         call CHKIVEC ; ( na -- ) 
                                    462 ; start at LAST and link back to na 
                                    463 ; if variable found reset VP at that point.
      000187                        464 FORGET1:
      000187 CD 06 4F         [ 4]  465         call LAST 
      00018A CD 04 3C         [ 4]  466         call AT 
      00018D CD 04 E3         [ 4]  467         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  468         call FREEVAR ; ( -- na last )
      000193 CD 04 E3         [ 4]  469         call DUPP 
      000196 CD 03 B4         [ 4]  470         call DOLIT 
      000199 00 02                  471         .word 2 
      00019B CD 07 57         [ 4]  472         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 3C         [ 4]  473         call AT 
      0001A1 CD 04 E3         [ 4]  474         call DUPP ; ( -- na last a a )
      0001A4 CD 06 23         [ 4]  475         call CNTXT 
      0001A7 CD 04 25         [ 4]  476         call STORE
      0001AA CD 06 4F         [ 4]  477         call LAST  
      0001AD CD 04 25         [ 4]  478         call STORE ; ( --  na last )
      0001B0 CD 05 0D         [ 4]  479         call OVER 
      0001B3 CD 07 7F         [ 4]  480         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  481         call QBRAN 
      0001B9 01 87                  482         .word FORGET1 
                                    483 ; ( na -- )
      0001BB CD 03 B4         [ 4]  484         call DOLIT 
      0001BE 00 02                  485         .word 2 
      0001C0 CD 07 57         [ 4]  486         call SUBB 
      0001C3 CD 06 3F         [ 4]  487         call CPP 
      0001C6 CD 04 25         [ 4]  488         call STORE  
      0001C9 CD 1B 76         [ 4]  489         call UPDATCP 
      0001CC CC 1B 4D         [ 2]  490         jp UPDATLAST 
      0001CF                        491 FORGET6: ; tried to forget a RAM or system word 
                                    492 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  493         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  494         ldw y,SP0 
      0001D5 FF               [ 2]  495         ldw (x),y  
      0001D6 CD 07 9E         [ 4]  496         call ULESS
      0001D9 CD 03 E7         [ 4]  497         call QBRAN 
      0001DC 01 FF                  498         .word PROTECTED 
      0001DE CD 12 C5         [ 4]  499         call ABORQ 
      0001E1 1D                     500         .byte 29
      0001E2 20 46 6F 72 20 52 41   501         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        502 PROTECTED:
      0001FF CD 12 C5         [ 4]  503         call ABORQ
      000202 0A                     504         .byte 10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000203 20 50 72 6F 74 65 63   505         .ascii " Protected"
             74 65 64
      00020D                        506 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 C5         [ 4]  507         call ABORQ
      000210 05                     508         .byte 5
      000211 20 77 68 61 74         509         .ascii " what"
      000216                        510 FORGET4:
      000216 CC 04 D9         [ 2]  511         jp DROP 
                                    512 
                                    513 
                                    514 ;---------------------------------
                                    515 ; if na is variable 
                                    516 ; free variable data  
                                    517 ; FREEVAR ( na -- )
                                    518 ;---------------------------------
      000219 01 51                  519         .word LINK 
                           00021B   520         LINK=.
      00021B 07                     521         .byte 7 
      00021C 46 52 45 45 56 41 52   522         .ascii "FREEVAR"
      000223                        523 FREEVAR:
      000223 CD 04 E3         [ 4]  524         call DUPP ; ( na na -- )
      000226 CD 04 5A         [ 4]  525         CALL CAT  ; ( na c -- )
      000229 CD 09 D8         [ 4]  526         call ONEP ;
      00022C CD 06 DE         [ 4]  527         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 D8         [ 4]  528         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 E3         [ 4]  529         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 3C         [ 4]  530         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  531         call DOLIT 
      00023B 05 90                  532         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 7F         [ 4]  533         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  534         call QBRAN 
      000243 02 59                  535         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  536         call DOLIT 
      000248 00 02                  537         .word 2 
      00024A CD 06 DE         [ 4]  538         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 3C         [ 4]  539         call AT 
      000250 CD 06 31         [ 4]  540         call VPP   
      000253 CD 04 25         [ 4]  541         call STORE 
      000256 CC 1B 8D         [ 2]  542         jp UPDATVP 
      000259                        543 FREEVAR4: ; not variable
      000259 CC 04 D9         [ 2]  544         jp  DROP 
                                    545 
                                    546 ;    SEED ( n -- )
                                    547 ; Initialize PRNG seed with n 
      00025C 02 1B                  548         .word LINK 
                           00025E   549         LINK=. 
      00025E 04                     550         .byte 4 
      00025F 53 45 45 44            551         .ascii "SEED" 
      000263                        552 SEED:
      000263 90 93            [ 1]  553         ldw y,x 
      000265 1C 00 02         [ 2]  554         addw x,#CELLL
      000268 90 FE            [ 2]  555         ldw y,(y)
      00026A 90 9E            [ 1]  556         ld a,yh 
      00026C B7 36            [ 1]  557         ld SEEDX,a 
      00026E 90 9F            [ 1]  558         ld a,yl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000270 B7 38            [ 1]  559         ld SEEDY,a 
      000272 81               [ 4]  560         ret 
                                    561 
                                    562 ;    RANDOM ( u1 -- u2 )
                                    563 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  564         .word LINK 
                           000275   565         LINK=.
      000275 06                     566         .byte 6
      000276 52 41 4E 44 4F 4D      567         .ascii "RANDOM" 
      00027C                        568 RANDOM:
                                    569 ;local variable 
                           000001   570         SPSAVE=1
                           000002   571         VSIZE=2 
      00027C 52 02            [ 2]  572         sub sp,#VSIZE
      00027E 1F 01            [ 2]  573         ldw (SPSAVE,sp),x  
                                    574 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  575         ldw y,x 
      000282 90 FE            [ 2]  576         ldw y,(y)
      000284 90 BF 24         [ 2]  577         ldw YTEMP,y 
      000287 BE 36            [ 2]  578 	ldw x,SEEDX 
      000289 58               [ 2]  579 	sllw x 
      00028A 58               [ 2]  580 	sllw x 
      00028B 58               [ 2]  581 	sllw x 
      00028C 58               [ 2]  582 	sllw x 
      00028D 58               [ 2]  583 	sllw x 
      00028E 9E               [ 1]  584 	ld a,xh 
      00028F B8 36            [ 1]  585 	xor a,SEEDX 
      000291 B7 22            [ 1]  586 	ld XTEMP,a 
      000293 9F               [ 1]  587 	ld a,xl 
      000294 B8 37            [ 1]  588 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  589 	ld XTEMP+1,a 
                                    590 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  591 	ldw x,SEEDY 
      00029A BF 36            [ 2]  592 	ldw SEEDX,x  
                                    593 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  594 	srlw x 
      00029D 9E               [ 1]  595 	ld a,xh 
      00029E B8 38            [ 1]  596 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  597 	ld SEEDY,a  
      0002A2 9F               [ 1]  598 	ld a,xl 
      0002A3 B8 39            [ 1]  599 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  600 	ld SEEDY+1,a 
                                    601 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  602 	ldw x,XTEMP 
      0002A9 54               [ 2]  603 	srlw x 
      0002AA 54               [ 2]  604 	srlw x 
      0002AB 54               [ 2]  605 	srlw x 
                                    606 ; x=XTEMP^x 
      0002AC 9E               [ 1]  607 	ld a,xh 
      0002AD B8 22            [ 1]  608 	xor a,XTEMP 
      0002AF 95               [ 1]  609 	ld xh,a 
      0002B0 9F               [ 1]  610 	ld a,xl 
      0002B1 B8 23            [ 1]  611 	xor a,XTEMP+1  
      0002B3 97               [ 1]  612 	ld xl,a 
                                    613 ; SEEDY=x^SEEDY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002B4 B8 39            [ 1]  614 	xor a,SEEDY+1
      0002B6 97               [ 1]  615 	ld xl,a 
      0002B7 9E               [ 1]  616 	ld a,xh 
      0002B8 B8 38            [ 1]  617 	xor a,SEEDY
      0002BA 95               [ 1]  618 	ld xh,a 
      0002BB BF 38            [ 2]  619 	ldw SEEDY,x 
                                    620 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  621 	ldw y,YTEMP  
      0002C0 65               [ 2]  622 	divw x,y 
      0002C1 1E 01            [ 2]  623 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  624         ldw (x),y 
      0002C4 5B 02            [ 2]  625         addw sp,#VSIZE 
      0002C6 81               [ 4]  626 	ret 
                                    627 
                                    628 
                                    629 ;;
                                    630 ;; get millisecond counter 
                                    631 ;; msec ( -- u )
                                    632 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  633         .word LINK  
                           0002C9   634         LINK = . 
      0002C9 04                     635         .byte 4
      0002CA 4D 53 45 43            636         .ascii "MSEC"
      0002CE                        637 MSEC: 
      0002CE 1D 00 02         [ 2]  638         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  639         ldw y,MS 
      0002D4 FF               [ 2]  640         ldw (x),y 
      0002D5 81               [ 4]  641         ret 
                                    642 
                                    643 ; suspend execution for u msec 
                                    644 ;  pause ( u -- )
      0002D6 02 C9                  645         .word LINK 
                           0002D8   646         LINK=.
      0002D8 05                     647         .byte 5 
      0002D9 50 41 55 53 45         648         .ascii "PAUSE"
      0002DE                        649 PAUSE:
      0002DE 90 93            [ 1]  650         ldw y,x
      0002E0 90 FE            [ 2]  651         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  652         addw y,MS 
      0002E6 8F               [10]  653 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  654         cpw y,MS  
      0002EA 26 FA            [ 1]  655         jrne 1$        
      0002EC 1C 00 02         [ 2]  656         addw x,#CELLL 
      0002EF 81               [ 4]  657         ret 
                                    658 
                                    659 ; initialize count down timer 
                                    660 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  661         .word LINK 
                           0002F2   662         LINK=.
      0002F2 05                     663         .byte 5 
      0002F3 54 49 4D 45 52         664         .ascii "TIMER" 
      0002F8                        665 TIMER:
      0002F8 90 93            [ 1]  666         ldw y,x
      0002FA 90 FE            [ 2]  667         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  668         ldw CNTDWN,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002FF 1C 00 02         [ 2]  669         addw x,#CELLL 
      000302 81               [ 4]  670         ret 
                                    671 
                                    672 ; check for TIMER exiparition 
                                    673 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  674         .word LINK 
                           000305   675         LINK=. 
      000305 08                     676         .byte 8 
      000306 54 49 4D 45 4F 55 54   677         .ascii "TIMEOUT?"
             3F
      00030E                        678 TIMEOUTQ: 
      00030E 4F               [ 1]  679         clr a
      00030F 1D 00 02         [ 2]  680         subw x,#CELLL 
      000312 90 BE 30         [ 2]  681         ldw y,CNTDWN 
      000315 26 01            [ 1]  682         jrne 1$ 
      000317 43               [ 1]  683         cpl a 
      000318 E7 01            [ 1]  684 1$:     ld (1,x),a 
      00031A F7               [ 1]  685         ld (x),a 
      00031B 81               [ 4]  686         ret         
                                    687 
                                    688 ; reboot MCU 
                                    689 ; REBOOT ( -- )
      00031C 03 05                  690         .word LINK 
                           00031E   691         LINK=. 
      00031E 06                     692         .byte 6 
      00031F 52 45 42 4F 4F 54      693         .ascii "REBOOT"
      000325                        694 reboot:
      000325 CC 00 00         [ 2]  695         jp NonHandledInterrupt
                                    696 
                                    697 ; compile to flash memory 
                                    698 ; TO-FLASH ( -- )
      000328 03 1E                  699         .word LINK 
                           00032A   700         LINK=.
      00032A 08                     701         .byte 8
      00032B 54 4F 2D 46 4C 41 53   702         .ascii "TO-FLASH"
             48
      000333                        703 TOFLASH:
      000333 CD 06 62         [ 4]  704         call RAMLAST 
      000336 CD 04 3C         [ 4]  705         call AT 
      000339 CD 06 8D         [ 4]  706         call QDUP 
      00033C CD 03 E7         [ 4]  707         call QBRAN
      00033F 03 62                  708         .word 1$
      000341 CD 12 C5         [ 4]  709         call ABORQ 
      000344 1D                     710         .byte 29
      000345 20 4E 6F 74 20 77 68   711         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  712 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  713         ldw UTFLASH,y
      000369 81               [ 4]  714         ret 
                                    715 
                                    716 ; compile to RAM 
                                    717 ; TO-RAM ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00036A 03 2A                  718         .word LINK 
                           00036C   719         LINK=.
      00036C 06                     720         .byte 6 
      00036D 54 4F 2D 52 41 4D      721         .ascii "TO-RAM"
      000373                        722 TORAM:
      000373 90 5F            [ 1]  723         clrw y 
      000375 90 BF 1E         [ 2]  724         ldw UTFLASH,y 
      000378 81               [ 4]  725         ret 
                                    726         
                                    727 
                                    728 ;; Device dependent I/O
                                    729 ;       ?RX     ( -- c T | F )
                                    730 ;         Return input byte and true, or false.
      000379 03 6C                  731         .word      LINK 
                           00037B   732 LINK	= .
      00037B 04                     733         .byte      4
      00037C 3F 4B 45 59            734         .ascii     "?KEY"
      000380                        735 QKEY:
      000380 90 5F            [ 1]  736         CLRW Y 
      000382 72 0B 52 30 0B   [ 2]  737         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 31         [ 1]  738         LD    A,UART1_DR   ;get char in A
      00038A 1D 00 02         [ 2]  739 	SUBW	X,#2
      00038D E7 01            [ 1]  740         LD     (1,X),A
      00038F 7F               [ 1]  741 	CLR	(X)
      000390 90 53            [ 2]  742         CPLW     Y
      000392                        743 INCH:
      000392 1D 00 02         [ 2]  744 	SUBW	X,#2
      000395 FF               [ 2]  745         LDW     (X),Y
      000396 81               [ 4]  746         RET
                                    747 
                                    748 ;       TX!     ( c -- )
                                    749 ;       Send character c to  output device.
      000397 03 7B                  750         .word      LINK
                           000399   751 LINK	= .
      000399 04                     752         .byte      4
      00039A 45 4D 49 54            753         .ascii     "EMIT"
      00039E                        754 EMIT:
      00039E E6 01            [ 1]  755         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  756 	ADDW	X,#2
      0003A3 72 0F 52 30 FB   [ 2]  757 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A8 C7 52 31         [ 1]  758         LD    UART1_DR,A   ;send A
      0003AB 81               [ 4]  759         RET
                                    760 
                                    761 ;; The kernel
                                    762 
                                    763 ;       doLIT   ( -- w )
                                    764 ;       Push an inline literal.
      0003AC 03 99                  765         .word      LINK
                           0003AE   766 LINK	= 	.
      0003AE 45                     767 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         768         .ascii     "DOLIT"
      0003B4                        769 DOLIT:
      0003B4 1D 00 02         [ 2]  770 	SUBW X,#2
      0003B7 16 01            [ 2]  771         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  772         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0003BB FF               [ 2]  773         ldw (x),y
      0003BC 90 85            [ 2]  774         popw y 
      0003BE 90 EC 02         [ 2]  775         jp (2,y)
                                    776 
                                    777 ;       next    ( -- )
                                    778 ;       Code for  single index loop.
      0003C1 03 AE                  779         .word      LINK
                           0003C3   780 LINK	= 	.
      0003C3 44                     781 	.byte      COMPO+4
      0003C4 6E 65 78 74            782         .ascii     "next"
      0003C8                        783 DONXT:
      0003C8 16 03            [ 2]  784 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  785 	DECW Y
      0003CC 2A 07            [ 1]  786 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  787 	POPW Y
      0003D0 5B 02            [ 2]  788         addw sp,#2
      0003D2 90 EC 02         [ 2]  789         JP (2,Y)
      0003D5                        790 NEX1:
      0003D5 17 03            [ 2]  791         LDW (3,SP),Y
      0003D7 90 85            [ 2]  792         POPW Y
      0003D9 90 FE            [ 2]  793 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  794 	JP (Y)
                                    795 
                                    796 ;       ?branch ( f -- )
                                    797 ;       Branch if flag is zero.
      0003DD 03 C3                  798         .word      LINK
                           0003DF   799 LINK	= 	.
      0003DF 47                     800 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   801         .ascii     "?BRANCH"
      0003E7                        802 QBRAN:	
      0003E7 90 93            [ 1]  803         LDW Y,X
      0003E9 1C 00 02         [ 2]  804 	ADDW X,#2
      0003EC 90 FE            [ 2]  805 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  806         JREQ     BRAN
      0003F0 90 85            [ 2]  807 	POPW Y
      0003F2 90 EC 02         [ 2]  808 	JP (2,Y)
                                    809         
                                    810 ;       branch  ( -- )
                                    811 ;       Branch to an inline address.
      0003F5 03 DF                  812         .word      LINK
                           0003F7   813 LINK	= 	.
      0003F7 46                     814 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      815         .ascii     "BRANCH"
      0003FE                        816 BRAN:
      0003FE 90 85            [ 2]  817         POPW Y
      000400 90 FE            [ 2]  818 	LDW Y,(Y)
      000402 90 FC            [ 2]  819         JP     (Y)
                                    820 
                                    821 ;       EXECUTE ( ca -- )
                                    822 ;       Execute  word at ca.
      000404 03 F7                  823         .word      LINK
                           000406   824 LINK	= 	.
      000406 07                     825         .byte       7
      000407 45 58 45 43 55 54 45   826         .ascii     "EXECUTE"
      00040E                        827 EXECU:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00040E 90 93            [ 1]  828         LDW Y,X
      000410 1C 00 02         [ 2]  829 	ADDW X,#2
      000413 90 FE            [ 2]  830 	LDW  Y,(Y)
      000415 90 FC            [ 2]  831         JP   (Y)
                                    832 
                           000001   833 OPTIMIZE = 1
                           000001   834 .if OPTIMIZE 
                                    835 ; remplacement de CALL EXIT par 
                                    836 ; le opcode de RET.
                                    837 ; Voir modification au code de ";"
                                    838 ;
                                    839 ;       EXIT    ( -- )
                                    840 ;       Terminate a colon definition.
      000417 04 06                  841         .word      LINK
                           000419   842 LINK = .
      000419 04                     843         .byte      4
      00041A 45 58 49 54            844         .ascii     "EXIT"
      00041E                        845 EXIT:
      00041E 90 85            [ 2]  846         POPW Y
      000420 81               [ 4]  847         RET
                                    848 .endif 
                                    849 
                                    850 ;       !       ( w a -- )
                                    851 ;       Pop  data stack to memory.
      000421 04 19                  852         .word      LINK
                           000423   853 LINK = .
      000423 01                     854         .byte      1
      000424 21                     855         .ascii     "!"
      000425                        856 STORE:
      000425 90 93            [ 1]  857         LDW Y,X
      000427 90 FE            [ 2]  858         LDW Y,(Y)    ;Y=a
      000429 90 BF 24         [ 2]  859         LDW YTEMP,Y
      00042C 90 93            [ 1]  860         LDW Y,X
      00042E 90 EE 02         [ 2]  861         LDW Y,(2,Y)
      000431 91 CF 24         [ 5]  862         LDW [YTEMP],Y ;store w at a
      000434 1C 00 04         [ 2]  863         ADDW X,#4 ; DDROP 
      000437 81               [ 4]  864         RET     
                                    865 
                                    866 ;       @       ( a -- w )
                                    867 ;       Push memory location to stack.
      000438 04 23                  868         .word      LINK
                           00043A   869 LINK	= 	.
      00043A 01                     870         .byte    1
      00043B 40                     871         .ascii	"@"
      00043C                        872 AT:
      00043C 90 93            [ 1]  873         LDW Y,X     ;Y = a
      00043E 90 FE            [ 2]  874         LDW Y,(Y)   ; address 
      000440 90 FE            [ 2]  875         LDW Y,(Y)   ; value 
      000442 FF               [ 2]  876         LDW (X),Y ;w = @Y
      000443 81               [ 4]  877         RET     
                                    878 
                                    879 ;       C!      ( c b -- )
                                    880 ;       Pop  data stack to byte memory.
      000444 04 3A                  881         .word      LINK
                           000446   882 LINK	= .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000446 02                     883         .byte      2
      000447 43 21                  884         .ascii     "C!"
      000449                        885 CSTOR:
      000449 90 93            [ 1]  886         LDW Y,X
      00044B 90 FE            [ 2]  887 	LDW Y,(Y)    ;Y=b
      00044D E6 03            [ 1]  888         LD A,(3,X)    ;D = c
      00044F 90 F7            [ 1]  889         LD  (Y),A     ;store c at b
      000451 1C 00 04         [ 2]  890 	ADDW X,#4 ; DDROP 
      000454 81               [ 4]  891         RET     
                                    892 
                                    893 ;       C@      ( b -- c )
                                    894 ;       Push byte in memory to  stack.
      000455 04 46                  895         .word      LINK
                           000457   896 LINK	= 	.
      000457 02                     897         .byte      2
      000458 43 40                  898         .ascii     "C@"
      00045A                        899 CAT:
      00045A 90 93            [ 1]  900         LDW Y,X     ;Y=b
      00045C 90 FE            [ 2]  901         LDW Y,(Y)
      00045E 90 F6            [ 1]  902         LD A,(Y)
      000460 E7 01            [ 1]  903         LD (1,X),A
      000462 7F               [ 1]  904         CLR (X)
      000463 81               [ 4]  905         RET     
                                    906 
                                    907 ;       RP@     ( -- a )
                                    908 ;       Push current RP to data stack.
      000464 04 57                  909         .word      LINK
                           000466   910 LINK	= .
      000466 03                     911         .byte      3
      000467 52 50 40               912         .ascii     "RP@"
      00046A                        913 RPAT:
      00046A 90 96            [ 1]  914         LDW Y,SP    ;save return addr
      00046C 1D 00 02         [ 2]  915         SUBW X,#2
      00046F FF               [ 2]  916         LDW (X),Y
      000470 81               [ 4]  917         RET     
                                    918 
                                    919 ;       RP!     ( a -- )
                                    920 ;       Set  return stack pointer.
      000471 04 66                  921         .word      LINK
                           000473   922 LINK	= 	. 
      000473 43                     923 	.byte      COMPO+3
      000474 52 50 21               924         .ascii     "RP!"
      000477                        925 RPSTO:
      000477 90 85            [ 2]  926         POPW Y
      000479 90 BF 24         [ 2]  927         LDW YTEMP,Y
      00047C 90 93            [ 1]  928         LDW Y,X
      00047E 90 FE            [ 2]  929         LDW Y,(Y)
      000480 90 94            [ 1]  930         LDW SP,Y
      000482 1C 00 02         [ 2]  931         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000485 92 CC 24         [ 5]  932         JP [YTEMP]
                                    933 
                                    934 ;       R>      ( -- w )
                                    935 ;       Pop return stack to data stack.
      000488 04 73                  936         .word      LINK
                           00048A   937 LINK	= 	. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      00048A 42                     938 	.byte      COMPO+2
      00048B 52 3E                  939         .ascii     "R>"
      00048D                        940 RFROM:
      00048D 90 85            [ 2]  941         POPW Y    ;save return addr
      00048F 90 BF 24         [ 2]  942         LDW YTEMP,Y
      000492 90 85            [ 2]  943         POPW Y
      000494 1D 00 02         [ 2]  944         SUBW X,#2
      000497 FF               [ 2]  945         LDW (X),Y
      000498 92 CC 24         [ 5]  946         JP [YTEMP]
                                    947 
                                    948 ;       R@      ( -- w )
                                    949 ;       Copy top of return stack to stack.
      00049B 04 8A                  950         .word      LINK
                           00049D   951 LINK	= 	. 
      00049D 02                     952         .byte      2
      00049E 52 40                  953         .ascii     "R@"
      0004A0                        954 RAT:
      0004A0 16 03            [ 2]  955         ldw y,(3,sp)
      0004A2 1D 00 02         [ 2]  956         subw x,#CELLL 
      0004A5 FF               [ 2]  957         ldw (x),y 
      0004A6 81               [ 4]  958         ret 
                                    959 
                                    960 ;       >R      ( w -- )
                                    961 ;       Push data stack to return stack.
      0004A7 04 9D                  962         .word      LINK
                           0004A9   963 LINK	= 	. 
      0004A9 42                     964 	.byte      COMPO+2
      0004AA 3E 52                  965         .ascii     ">R"
      0004AC                        966 TOR:
      0004AC 90 85            [ 2]  967         POPW Y    ;save return addr
      0004AE 90 BF 24         [ 2]  968         LDW YTEMP,Y
      0004B1 90 93            [ 1]  969         LDW Y,X
      0004B3 90 FE            [ 2]  970         LDW Y,(Y)
      0004B5 90 89            [ 2]  971         PUSHW Y    ;restore return addr
      0004B7 1C 00 02         [ 2]  972         ADDW X,#2
      0004BA 92 CC 24         [ 5]  973         JP [YTEMP]
                                    974 
                                    975 ;       SP@     ( -- a )
                                    976 ;       Push current stack pointer.
      0004BD 04 A9                  977         .word      LINK
                           0004BF   978 LINK	= 	. 
      0004BF 03                     979         .byte      3
      0004C0 53 50 40               980         .ascii     "SP@"
      0004C3                        981 SPAT:
      0004C3 90 93            [ 1]  982 	LDW Y,X
      0004C5 1D 00 02         [ 2]  983         SUBW X,#2
      0004C8 FF               [ 2]  984 	LDW (X),Y
      0004C9 81               [ 4]  985         RET     
                                    986 
                                    987 ;       SP!     ( a -- )
                                    988 ;       Set  data stack pointer.
      0004CA 04 BF                  989         .word      LINK
                           0004CC   990 LINK	= 	. 
      0004CC 03                     991         .byte      3
      0004CD 53 50 21               992         .ascii     "SP!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004D0                        993 SPSTO:
      0004D0 FE               [ 2]  994         LDW     X,(X)     ;X = a
      0004D1 81               [ 4]  995         RET     
                                    996 
                                    997 ;       DROP    ( w -- )
                                    998 ;       Discard top stack item.
      0004D2 04 CC                  999         .word      LINK
                           0004D4  1000 LINK	= 	. 
      0004D4 04                    1001         .byte      4
      0004D5 44 52 4F 50           1002         .ascii     "DROP"
      0004D9                       1003 DROP:
      0004D9 1C 00 02         [ 2] 1004         ADDW X,#2     
      0004DC 81               [ 4] 1005         RET     
                                   1006 
                                   1007 ;       DUP     ( w -- w w )
                                   1008 ;       Duplicate  top stack item.
      0004DD 04 D4                 1009         .word      LINK
                           0004DF  1010 LINK	= 	. 
      0004DF 03                    1011         .byte      3
      0004E0 44 55 50              1012         .ascii     "DUP"
      0004E3                       1013 DUPP:
      0004E3 90 93            [ 1] 1014 	LDW Y,X
      0004E5 1D 00 02         [ 2] 1015         SUBW X,#2
      0004E8 90 FE            [ 2] 1016 	LDW Y,(Y)
      0004EA FF               [ 2] 1017 	LDW (X),Y
      0004EB 81               [ 4] 1018         RET     
                                   1019 
                                   1020 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1021 ;       Exchange top two stack items.
      0004EC 04 DF                 1022         .word      LINK
                           0004EE  1023 LINK	= 	. 
      0004EE 04                    1024         .byte      4
      0004EF 53 57 41 50           1025         .ascii     "SWAP"
      0004F3                       1026 SWAPP:
      0004F3 90 93            [ 1] 1027         LDW Y,X
      0004F5 90 FE            [ 2] 1028         LDW Y,(Y)
      0004F7 90 BF 24         [ 2] 1029         LDW YTEMP,Y
      0004FA 90 93            [ 1] 1030         LDW Y,X
      0004FC 90 EE 02         [ 2] 1031         LDW Y,(2,Y)
      0004FF FF               [ 2] 1032         LDW (X),Y
      000500 90 BE 24         [ 2] 1033         LDW Y,YTEMP
      000503 EF 02            [ 2] 1034         LDW (2,X),Y
      000505 81               [ 4] 1035         RET     
                                   1036 
                                   1037 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1038 ;       Copy second stack item to top.
      000506 04 EE                 1039         .word      LINK
                           000508  1040 LINK	= . 
      000508 04                    1041         .byte      4
      000509 4F 56 45 52           1042         .ascii     "OVER"
      00050D                       1043 OVER:
      00050D 1D 00 02         [ 2] 1044         SUBW X,#2
      000510 90 93            [ 1] 1045         LDW Y,X
      000512 90 EE 04         [ 2] 1046         LDW Y,(4,Y)
      000515 FF               [ 2] 1047         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000516 81               [ 4] 1048         RET     
                                   1049 
                                   1050 ;       0<      ( n -- t )
                                   1051 ;       Return true if n is negative.
      000517 05 08                 1052         .word      LINK
                           000519  1053 LINK	= . 
      000519 02                    1054         .byte      2
      00051A 30 3C                 1055         .ascii     "0<"
      00051C                       1056 ZLESS:
      00051C A6 FF            [ 1] 1057         LD A,#0xFF
      00051E 90 93            [ 1] 1058         LDW Y,X
      000520 90 FE            [ 2] 1059         LDW Y,(Y)
      000522 2B 01            [ 1] 1060         JRMI     ZL1
      000524 4F               [ 1] 1061         CLR A   ;false
      000525 F7               [ 1] 1062 ZL1:    LD     (X),A
      000526 E7 01            [ 1] 1063         LD (1,X),A
      000528 81               [ 4] 1064 	RET     
                                   1065 
                                   1066 ;       AND     ( w w -- w )
                                   1067 ;       Bitwise AND.
      000529 05 19                 1068         .word      LINK
                           00052B  1069 LINK	= . 
      00052B 03                    1070         .byte      3
      00052C 41 4E 44              1071         .ascii     "AND"
      00052F                       1072 ANDD:
      00052F F6               [ 1] 1073         LD  A,(X)    ;D=w
      000530 E4 02            [ 1] 1074         AND A,(2,X)
      000532 E7 02            [ 1] 1075         LD (2,X),A
      000534 E6 01            [ 1] 1076         LD A,(1,X)
      000536 E4 03            [ 1] 1077         AND A,(3,X)
      000538 E7 03            [ 1] 1078         LD (3,X),A
      00053A 1C 00 02         [ 2] 1079         ADDW X,#2
      00053D 81               [ 4] 1080         RET
                                   1081 
                                   1082 ;       OR      ( w w -- w )
                                   1083 ;       Bitwise inclusive OR.
      00053E 05 2B                 1084         .word      LINK
                           000540  1085 LINK = . 
      000540 02                    1086         .byte      2
      000541 4F 52                 1087         .ascii     "OR"
      000543                       1088 ORR:
      000543 F6               [ 1] 1089         LD A,(X)    ;D=w
      000544 EA 02            [ 1] 1090         OR A,(2,X)
      000546 E7 02            [ 1] 1091         LD (2,X),A
      000548 E6 01            [ 1] 1092         LD A,(1,X)
      00054A EA 03            [ 1] 1093         OR A,(3,X)
      00054C E7 03            [ 1] 1094         LD (3,X),A
      00054E 1C 00 02         [ 2] 1095         ADDW X,#2
      000551 81               [ 4] 1096         RET
                                   1097 
                                   1098 ;       XOR     ( w w -- w )
                                   1099 ;       Bitwise exclusive OR.
      000552 05 40                 1100         .word      LINK
                           000554  1101 LINK	= . 
      000554 03                    1102         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000555 58 4F 52              1103         .ascii     "XOR"
      000558                       1104 XORR:
      000558 F6               [ 1] 1105         LD A,(X)    ;D=w
      000559 E8 02            [ 1] 1106         XOR A,(2,X)
      00055B E7 02            [ 1] 1107         LD (2,X),A
      00055D E6 01            [ 1] 1108         LD A,(1,X)
      00055F E8 03            [ 1] 1109         XOR A,(3,X)
      000561 E7 03            [ 1] 1110         LD (3,X),A
      000563 1C 00 02         [ 2] 1111         ADDW X,#2
      000566 81               [ 4] 1112         RET
                                   1113 
                                   1114 ;       UM+     ( u u -- udsum )
                                   1115 ;       Add two unsigned single
                                   1116 ;       and return a double sum.
      000567 05 54                 1117         .word      LINK
                           000569  1118 LINK	= . 
      000569 03                    1119         .byte      3
      00056A 55 4D 2B              1120         .ascii     "UM+"
      00056D                       1121 UPLUS:
      00056D A6 01            [ 1] 1122         LD A,#1
      00056F 90 93            [ 1] 1123         LDW Y,X
      000571 90 EE 02         [ 2] 1124         LDW Y,(2,Y)
      000574 90 BF 24         [ 2] 1125         LDW YTEMP,Y
      000577 90 93            [ 1] 1126         LDW Y,X
      000579 90 FE            [ 2] 1127         LDW Y,(Y)
      00057B 72 B9 00 24      [ 2] 1128         ADDW Y,YTEMP
      00057F EF 02            [ 2] 1129         LDW (2,X),Y
      000581 25 01            [ 1] 1130         JRC     UPL1
      000583 4F               [ 1] 1131         CLR A
      000584 E7 01            [ 1] 1132 UPL1:   LD     (1,X),A
      000586 7F               [ 1] 1133         CLR (X)
      000587 81               [ 4] 1134         RET
                                   1135 
                                   1136 ;; System and user variables
                                   1137 
                                   1138 ;       doVAR   ( -- a )
                                   1139 ;       Code for VARIABLE and CREATE.
      000588 05 69                 1140         .word      LINK
                           00058A  1141 LINK	= . 
      00058A 45                    1142 	.byte      COMPO+5
      00058B 44 4F 56 41 52        1143         .ascii     "DOVAR"
      000590                       1144 DOVAR:
      000590 1D 00 02         [ 2] 1145 	SUBW X,#2
      000593 90 85            [ 2] 1146         POPW Y    ;get return addr (pfa)
      000595 90 FE            [ 2] 1147         LDW Y,(Y) ; indirect address 
      000597 FF               [ 2] 1148         LDW (X),Y    ;push on stack
      000598 81               [ 4] 1149         RET     ;go to RET of EXEC
                                   1150 
                                   1151 ;       BASE    ( -- a )
                                   1152 ;       Radix base for numeric I/O.
      000599 05 8A                 1153         .word      LINK        
                           00059B  1154 LINK = . 
      00059B 04                    1155         .byte      4
      00059C 42 41 53 45           1156         .ascii     "BASE"
      0005A0                       1157 BASE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0005A0 90 AE 00 06      [ 2] 1158 	LDW Y,#UBASE 
      0005A4 1D 00 02         [ 2] 1159 	SUBW X,#2
      0005A7 FF               [ 2] 1160         LDW (X),Y
      0005A8 81               [ 4] 1161         RET
                                   1162 
                                   1163 ;       tmp     ( -- a )
                                   1164 ;       A temporary storage.
      0005A9 05 9B                 1165         .word      LINK
                                   1166         
                           0005AB  1167 LINK = . 
      0005AB 03                    1168 	.byte      3
      0005AC 54 4D 50              1169         .ascii     "TMP"
      0005AF                       1170 TEMP:
      0005AF 90 AE 00 08      [ 2] 1171 	LDW Y,#UTMP
      0005B3 1D 00 02         [ 2] 1172 	SUBW X,#2
      0005B6 FF               [ 2] 1173         LDW (X),Y
      0005B7 81               [ 4] 1174         RET
                                   1175 
                                   1176 ;       >IN     ( -- a )
                                   1177 ;        Hold parsing pointer.
      0005B8 05 AB                 1178         .word      LINK
                           0005BA  1179 LINK = . 
      0005BA 03                    1180         .byte      3
      0005BB 3E 49 4E              1181         .ascii    ">IN"
      0005BE                       1182 INN:
      0005BE 90 AE 00 0A      [ 2] 1183 	LDW Y,#UINN 
      0005C2 1D 00 02         [ 2] 1184 	SUBW X,#2
      0005C5 FF               [ 2] 1185         LDW (X),Y
      0005C6 81               [ 4] 1186         RET
                                   1187 
                                   1188 ;       #TIB    ( -- a )
                                   1189 ;       Count in terminal input buffer.
      0005C7 05 BA                 1190         .word      LINK
                           0005C9  1191 LINK = . 
      0005C9 04                    1192         .byte      4
      0005CA 23 54 49 42           1193         .ascii     "#TIB"
      0005CE                       1194 NTIB:
      0005CE 90 AE 00 0C      [ 2] 1195 	LDW Y,#UCTIB 
      0005D2 1D 00 02         [ 2] 1196 	SUBW X,#2
      0005D5 FF               [ 2] 1197         LDW (X),Y
      0005D6 81               [ 4] 1198         RET
                                   1199 
                                   1200 ;       TBUF ( -- a )
                                   1201 ;       address of 128 bytes transaction buffer 
      0005D7 05 C9                 1202         .word LINK 
                           0005D9  1203         LINK=.
      0005D9 04                    1204         .byte 4 
      0005DA 54 42 55 46           1205         .ascii "TBUF"
      0005DE                       1206 TBUF:
      0005DE 90 AE 16 80      [ 2] 1207         ldw y,#ROWBUFF
      0005E2 1D 00 02         [ 2] 1208         subw x,#CELLL
      0005E5 FF               [ 2] 1209         ldw (x),y 
      0005E6 81               [ 4] 1210         ret 
                                   1211 
                                   1212 ; systeme variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1213 ; compilation destination 
                                   1214 ; TFLASH ( -- A )
      0005E7 05 D9                 1215         .word LINK 
                           0005E9  1216         LINK=.
      0005E9 06                    1217         .byte 6 
      0005EA 54 46 4C 41 53 48     1218         .ascii "TFLASH"         
      0005F0                       1219 TFLASH:
      0005F0 1D 00 02         [ 2] 1220         subw x,#CELLL 
      0005F3 90 AE 00 1E      [ 2] 1221         ldw y,#UTFLASH
      0005F7 FF               [ 2] 1222         ldw (x),y 
      0005F8 81               [ 4] 1223         ret 
                                   1224 
                                   1225 ;       "EVAL   ( -- a )
                                   1226 ;       Execution vector of EVAL.
      0005F9 05 E9                 1227         .word      LINK
                           0005FB  1228 LINK = . 
      0005FB 05                    1229         .byte      5
      0005FC 27 45 56 41 4C        1230         .ascii     "'EVAL"
      000601                       1231 TEVAL:
      000601 90 AE 00 10      [ 2] 1232 	LDW Y,#UINTER 
      000605 1D 00 02         [ 2] 1233 	SUBW X,#2
      000608 FF               [ 2] 1234         LDW (X),Y
      000609 81               [ 4] 1235         RET
                                   1236 
                                   1237 ;       HLD     ( -- a )
                                   1238 ;       Hold a pointer of output string.
      00060A 05 FB                 1239         .word      LINK
                           00060C  1240 LINK = . 
      00060C 03                    1241         .byte      3
      00060D 48 4C 44              1242         .ascii     "HLD"
      000610                       1243 HLD:
      000610 90 AE 00 12      [ 2] 1244 	LDW Y,#UHLD 
      000614 1D 00 02         [ 2] 1245 	SUBW X,#2
      000617 FF               [ 2] 1246         LDW (X),Y
      000618 81               [ 4] 1247         RET
                                   1248 
                                   1249 ;       CONTEXT ( -- a )
                                   1250 ;       Start vocabulary search.
      000619 06 0C                 1251         .word      LINK
                           00061B  1252 LINK = . 
      00061B 07                    1253         .byte      7
      00061C 43 4F 4E 54 45 58 54  1254         .ascii     "CONTEXT"
      000623                       1255 CNTXT:
      000623 90 AE 00 14      [ 2] 1256 	LDW Y,#UCNTXT
      000627 1D 00 02         [ 2] 1257 	SUBW X,#2
      00062A FF               [ 2] 1258         LDW (X),Y
      00062B 81               [ 4] 1259         RET
                                   1260 
                                   1261 ;       VP      ( -- a )
                                   1262 ;       Point to top of variables
      00062C 06 1B                 1263         .word      LINK
                           00062E  1264 LINK = . 
      00062E 02                    1265         .byte      2
      00062F 56 50                 1266         .ascii     "VP"
      000631                       1267 VPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000631 90 AE 00 16      [ 2] 1268 	LDW Y,#UVP 
      000635 1D 00 02         [ 2] 1269 	SUBW X,#2
      000638 FF               [ 2] 1270         LDW (X),Y
      000639 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;       CP    ( -- a )
                                   1274 ;       Pointer to top of FLASH 
      00063A 06 2E                 1275         .word LINK 
                           00063C  1276         LINK=.
      00063C 02                    1277         .byte 2 
      00063D 43 50                 1278         .ascii "CP"
      00063F                       1279 CPP: 
      00063F 90 AE 00 18      [ 2] 1280         ldw y,#UCP 
      000643 1D 00 02         [ 2] 1281         subw x,#CELLL 
      000646 FF               [ 2] 1282         ldw (x),y 
      000647 81               [ 4] 1283         ret                
                                   1284 
                                   1285 ;       LAST    ( -- a )
                                   1286 ;       Point to last name in dictionary.
      000648 06 3C                 1287         .word      LINK
                           00064A  1288 LINK = . 
      00064A 04                    1289         .byte      4
      00064B 4C 41 53 54           1290         .ascii     "LAST"
      00064F                       1291 LAST:
      00064F 90 AE 00 1A      [ 2] 1292 	LDW Y,#ULAST 
      000653 1D 00 02         [ 2] 1293 	SUBW X,#2
      000656 FF               [ 2] 1294         LDW (X),Y
      000657 81               [ 4] 1295         RET
                                   1296 
                                   1297 ; address of system variable URLAST 
                                   1298 ;       RAMLAST ( -- a )
                                   1299 ; RAM dictionary context 
      000658 06 4A                 1300         .word LINK 
                           00065A  1301         LINK=. 
      00065A 07                    1302         .byte 7  
      00065B 52 41 4D 4C 41 53 54  1303         .ascii "RAMLAST" 
      000662                       1304 RAMLAST: 
      000662 90 AE 00 20      [ 2] 1305         ldw y,#URLAST 
      000666 1D 00 02         [ 2] 1306         subw x,#CELLL 
      000669 FF               [ 2] 1307         ldw (x),y 
      00066A 81               [ 4] 1308         ret 
                                   1309 
                                   1310 ; OFFSET ( -- a )
                                   1311 ; address of system variable OFFSET 
      00066B 06 5A                 1312         .word LINK 
                           00066D  1313         LINK=.
      00066D 06                    1314         .byte 6
      00066E 4F 46 46 53 45 54     1315         .ascii "OFFSET" 
      000674                       1316 OFFSET: 
      000674 1D 00 02         [ 2] 1317         subw x,#CELLL
      000677 90 AE 00 1C      [ 2] 1318         ldw y,#UOFFSET 
      00067B FF               [ 2] 1319         ldw (x),y 
      00067C 81               [ 4] 1320         ret 
                                   1321 
                                   1322 ; adjust jump address adding OFFSET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1323 ; ADR-ADJ ( a -- a+offset )
      00067D                       1324 ADRADJ: 
      00067D CD 06 74         [ 4] 1325         call OFFSET 
      000680 CD 04 3C         [ 4] 1326         call AT 
      000683 CC 06 DE         [ 2] 1327         jp PLUS 
                                   1328 
                                   1329 
                                   1330 ;; Common functions
                                   1331 
                                   1332 ;       ?DUP    ( w -- w w | 0 )
                                   1333 ;       Dup tos if its is not zero.
      000686 06 6D                 1334         .word      LINK
                           000688  1335 LINK = . 
      000688 04                    1336         .byte      4
      000689 3F 44 55 50           1337         .ascii     "?DUP"
      00068D                       1338 QDUP:
      00068D 90 93            [ 1] 1339         LDW Y,X
      00068F 90 FE            [ 2] 1340 	LDW Y,(Y)
      000691 27 04            [ 1] 1341         JREQ     QDUP1
      000693 1D 00 02         [ 2] 1342 	SUBW X,#2
      000696 FF               [ 2] 1343         LDW (X),Y
      000697 81               [ 4] 1344 QDUP1:  RET
                                   1345 
                                   1346 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1347 ;       Rot 3rd item to top.
      000698 06 88                 1348         .word      LINK
                           00069A  1349 LINK = . 
      00069A 03                    1350         .byte      3
      00069B 52 4F 54              1351         .ascii     "ROT"
      00069E                       1352 ROT:
      00069E 90 93            [ 1] 1353         ldw y,x 
      0006A0 90 FE            [ 2] 1354         ldw y,(y)
      0006A2 90 89            [ 2] 1355         pushw y 
      0006A4 90 93            [ 1] 1356         ldw y,x 
      0006A6 90 EE 04         [ 2] 1357         ldw y,(4,y)
      0006A9 FF               [ 2] 1358         ldw (x),y 
      0006AA 90 93            [ 1] 1359         ldw y,x 
      0006AC 90 EE 02         [ 2] 1360         ldw y,(2,y)
      0006AF EF 04            [ 2] 1361         ldw (4,x),y 
      0006B1 90 85            [ 2] 1362         popw y 
      0006B3 EF 02            [ 2] 1363         ldw (2,x),y
      0006B5 81               [ 4] 1364         ret 
                                   1365 
                                   1366 ;       2DROP   ( w w -- )
                                   1367 ;       Discard two items on stack.
      0006B6 06 9A                 1368         .word      LINK
                           0006B8  1369 LINK = . 
      0006B8 05                    1370         .byte      5
      0006B9 32 44 52 4F 50        1371         .ascii     "2DROP"
      0006BE                       1372 DDROP:
      0006BE 1C 00 04         [ 2] 1373         ADDW X,#4
      0006C1 81               [ 4] 1374         RET
                                   1375 
                                   1376 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1377 ;       Duplicate top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006C2 06 B8                 1378         .word      LINK
                           0006C4  1379 LINK = . 
      0006C4 04                    1380         .byte      4
      0006C5 32 44 55 50           1381         .ascii     "2DUP"
      0006C9                       1382 DDUP:
      0006C9 1D 00 04         [ 2] 1383         SUBW X,#4
      0006CC 90 93            [ 1] 1384         LDW Y,X
      0006CE 90 EE 06         [ 2] 1385         LDW Y,(6,Y)
      0006D1 EF 02            [ 2] 1386         LDW (2,X),Y
      0006D3 90 93            [ 1] 1387         LDW Y,X
      0006D5 90 EE 04         [ 2] 1388         LDW Y,(4,Y)
      0006D8 FF               [ 2] 1389         LDW (X),Y
      0006D9 81               [ 4] 1390         RET
                                   1391 
                                   1392 ;       +       ( w w -- sum )
                                   1393 ;       Add top two items.
      0006DA 06 C4                 1394         .word      LINK
                           0006DC  1395 LINK = . 
      0006DC 01                    1396         .byte      1
      0006DD 2B                    1397         .ascii     "+"
      0006DE                       1398 PLUS:
      0006DE 90 93            [ 1] 1399         LDW Y,X
      0006E0 90 FE            [ 2] 1400         LDW Y,(Y)
      0006E2 90 BF 24         [ 2] 1401         LDW YTEMP,Y
      0006E5 1C 00 02         [ 2] 1402         ADDW X,#2
      0006E8 90 93            [ 1] 1403         LDW Y,X
      0006EA 90 FE            [ 2] 1404         LDW Y,(Y)
      0006EC 72 B9 00 24      [ 2] 1405         ADDW Y,YTEMP
      0006F0 FF               [ 2] 1406         LDW (X),Y
      0006F1 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;       NOT     ( w -- w )
                                   1410 ;       One's complement of tos.
      0006F2 06 DC                 1411         .word      LINK
                           0006F4  1412 LINK = . 
      0006F4 03                    1413         .byte      3
      0006F5 4E 4F 54              1414         .ascii     "NOT"
      0006F8                       1415 INVER:
      0006F8 90 93            [ 1] 1416         LDW Y,X
      0006FA 90 FE            [ 2] 1417         LDW Y,(Y)
      0006FC 90 53            [ 2] 1418         CPLW Y
      0006FE FF               [ 2] 1419         LDW (X),Y
      0006FF 81               [ 4] 1420         RET
                                   1421 
                                   1422 ;       NEGATE  ( n -- -n )
                                   1423 ;       Two's complement of tos.
      000700 06 F4                 1424         .word      LINK
                           000702  1425 LINK = . 
      000702 06                    1426         .byte      6
      000703 4E 45 47 41 54 45     1427         .ascii     "NEGATE"
      000709                       1428 NEGAT:
      000709 90 93            [ 1] 1429         LDW Y,X
      00070B 90 FE            [ 2] 1430         LDW Y,(Y)
      00070D 90 50            [ 2] 1431         NEGW Y
      00070F FF               [ 2] 1432         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000710 81               [ 4] 1433         RET
                                   1434 
                                   1435 ;       DNEGATE ( d -- -d )
                                   1436 ;       Two's complement of top double.
      000711 07 02                 1437         .word      LINK
                           000713  1438 LINK = . 
      000713 07                    1439         .byte      7
      000714 44 4E 45 47 41 54 45  1440         .ascii     "DNEGATE"
      00071B                       1441 DNEGA:
      00071B 90 93            [ 1] 1442         LDW Y,X
      00071D 90 FE            [ 2] 1443 	LDW Y,(Y)
      00071F 90 53            [ 2] 1444         CPLW Y     
      000721 90 BF 24         [ 2] 1445 	LDW YTEMP,Y
      000724 90 93            [ 1] 1446         LDW Y,X
      000726 90 EE 02         [ 2] 1447         LDW Y,(2,Y)
      000729 90 53            [ 2] 1448         CPLW Y
      00072B 72 A9 00 01      [ 2] 1449         addw y,#1
      00072F EF 02            [ 2] 1450         LDW (2,X),Y
      000731 90 BE 24         [ 2] 1451         LDW Y,YTEMP
      000734 24 02            [ 1] 1452         JRNC DN1 
      000736 90 5C            [ 2] 1453         INCW Y
      000738 FF               [ 2] 1454 DN1:    LDW (X),Y
      000739 81               [ 4] 1455         RET
                                   1456 
                                   1457 
                                   1458 ;       S>D ( n -- d )
                                   1459 ; convert single integer to double 
      00073A 07 13                 1460         .word LINK 
                           00073C  1461         LINK=. 
      00073C 03                    1462         .byte 3 
      00073D 53 3E 44              1463         .ascii "S>D"
      000740                       1464 STOD: 
      000740 1D 00 02         [ 2] 1465         subw x,#CELLL 
      000743 90 5F            [ 1] 1466         clrw y 
      000745 FF               [ 2] 1467         ldw (x),y 
      000746 90 93            [ 1] 1468         ldw y,x 
      000748 90 EE 02         [ 2] 1469         ldw y,(2,y)
      00074B 2A 05            [ 1] 1470         jrpl 1$ 
      00074D 90 AE FF FF      [ 2] 1471         ldw y,#-1
      000751 FF               [ 2] 1472         ldw (x),y 
      000752 81               [ 4] 1473 1$:     ret 
                                   1474 
                                   1475 
                                   1476 
                                   1477 
                                   1478 ;       -       ( n1 n2 -- n1-n2 )
                                   1479 ;       Subtraction.
      000753 07 3C                 1480         .word      LINK
                           000755  1481 LINK = . 
      000755 01                    1482         .byte      1
      000756 2D                    1483         .ascii     "-"
      000757                       1484 SUBB:
      000757 90 93            [ 1] 1485         LDW Y,X
      000759 90 FE            [ 2] 1486         LDW Y,(Y)
      00075B 90 BF 24         [ 2] 1487         LDW YTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00075E 1C 00 02         [ 2] 1488         ADDW X,#2
      000761 90 93            [ 1] 1489         LDW Y,X
      000763 90 FE            [ 2] 1490         LDW Y,(Y)
      000765 72 B2 00 24      [ 2] 1491         SUBW Y,YTEMP
      000769 FF               [ 2] 1492         LDW (X),Y
      00076A 81               [ 4] 1493         RET
                                   1494 
                                   1495 ;       ABS     ( n -- n )
                                   1496 ;       Return  absolute value of n.
      00076B 07 55                 1497         .word      LINK
                           00076D  1498 LINK = . 
      00076D 03                    1499         .byte      3
      00076E 41 42 53              1500         .ascii     "ABS"
      000771                       1501 ABSS:
      000771 90 93            [ 1] 1502         LDW Y,X
      000773 90 FE            [ 2] 1503 	LDW Y,(Y)
      000775 2A 03            [ 1] 1504         JRPL     AB1     ;negate:
      000777 90 50            [ 2] 1505         NEGW     Y     ;else negate hi byte
      000779 FF               [ 2] 1506         LDW (X),Y
      00077A 81               [ 4] 1507 AB1:    RET
                                   1508 
                                   1509 ;       =       ( w w -- t )
                                   1510 ;       Return true if top two are =al.
      00077B 07 6D                 1511         .word      LINK
                           00077D  1512 LINK = . 
      00077D 01                    1513         .byte      1
      00077E 3D                    1514         .ascii     "="
      00077F                       1515 EQUAL:
      00077F A6 FF            [ 1] 1516         LD A,#0xFF  ;true
      000781 90 93            [ 1] 1517         LDW Y,X    ;D = n2
      000783 90 FE            [ 2] 1518         LDW Y,(Y)
      000785 90 BF 24         [ 2] 1519         LDW YTEMP,Y
      000788 1C 00 02         [ 2] 1520         ADDW X,#2
      00078B 90 93            [ 1] 1521         LDW Y,X
      00078D 90 FE            [ 2] 1522         LDW Y,(Y)
      00078F 90 B3 24         [ 2] 1523         CPW Y,YTEMP     ;if n2 <> n1
      000792 27 01            [ 1] 1524         JREQ     EQ1
      000794 4F               [ 1] 1525         CLR A
      000795 F7               [ 1] 1526 EQ1:    LD (X),A
      000796 E7 01            [ 1] 1527         LD (1,X),A
      000798 81               [ 4] 1528 	RET     
                                   1529 
                                   1530 ;       U<      ( u u -- t )
                                   1531 ;       Unsigned compare of top two items.
      000799 07 7D                 1532         .word      LINK
                           00079B  1533 LINK = . 
      00079B 02                    1534         .byte      2
      00079C 55 3C                 1535         .ascii     "U<"
      00079E                       1536 ULESS:
      00079E A6 FF            [ 1] 1537         LD A,#0xFF  ;true
      0007A0 90 93            [ 1] 1538         LDW Y,X    ;D = n2
      0007A2 90 FE            [ 2] 1539         LDW Y,(Y)
      0007A4 90 BF 24         [ 2] 1540         LDW YTEMP,Y
      0007A7 1C 00 02         [ 2] 1541         ADDW X,#2
      0007AA 90 93            [ 1] 1542         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0007AC 90 FE            [ 2] 1543         LDW Y,(Y)
      0007AE 90 B3 24         [ 2] 1544         CPW Y,YTEMP     ;if n2 <> n1
      0007B1 25 01            [ 1] 1545         JRULT     ULES1
      0007B3 4F               [ 1] 1546         CLR A
      0007B4 F7               [ 1] 1547 ULES1:  LD (X),A
      0007B5 E7 01            [ 1] 1548         LD (1,X),A
      0007B7 81               [ 4] 1549 	RET     
                                   1550 
                                   1551 ;       <       ( n1 n2 -- t )
                                   1552 ;       Signed compare of top two items.
      0007B8 07 9B                 1553         .word      LINK
                           0007BA  1554 LINK = . 
      0007BA 01                    1555         .byte      1
      0007BB 3C                    1556         .ascii     "<"
      0007BC                       1557 LESS:
      0007BC A6 FF            [ 1] 1558         LD A,#0xFF  ;true
      0007BE 90 93            [ 1] 1559         LDW Y,X    ;D = n2
      0007C0 90 FE            [ 2] 1560         LDW Y,(Y)
      0007C2 90 BF 24         [ 2] 1561         LDW YTEMP,Y
      0007C5 1C 00 02         [ 2] 1562         ADDW X,#2
      0007C8 90 93            [ 1] 1563         LDW Y,X
      0007CA 90 FE            [ 2] 1564         LDW Y,(Y)
      0007CC 90 B3 24         [ 2] 1565         CPW Y,YTEMP     ;if n2 <> n1
      0007CF 2F 01            [ 1] 1566         JRSLT     LT1
      0007D1 4F               [ 1] 1567         CLR A
      0007D2 F7               [ 1] 1568 LT1:    LD (X),A
      0007D3 E7 01            [ 1] 1569         LD (1,X),A
      0007D5 81               [ 4] 1570 	RET     
                                   1571 
                                   1572 ;       MAX     ( n n -- n )
                                   1573 ;       Return greater of two top items.
      0007D6 07 BA                 1574         .word      LINK
                           0007D8  1575 LINK = . 
      0007D8 03                    1576         .byte      3
      0007D9 4D 41 58              1577         .ascii     "MAX"
      0007DC                       1578 MAX:
      0007DC 90 93            [ 1] 1579         LDW Y,X    ;D = n2
      0007DE 90 EE 02         [ 2] 1580         LDW Y,(2,Y)
      0007E1 90 BF 24         [ 2] 1581         LDW YTEMP,Y
      0007E4 90 93            [ 1] 1582         LDW Y,X
      0007E6 90 FE            [ 2] 1583         LDW Y,(Y)
      0007E8 90 B3 24         [ 2] 1584         CPW Y,YTEMP     ;if n2 <> n1
      0007EB 2F 02            [ 1] 1585         JRSLT     MAX1
      0007ED EF 02            [ 2] 1586         LDW (2,X),Y
      0007EF 1C 00 02         [ 2] 1587 MAX1:   ADDW X,#2
      0007F2 81               [ 4] 1588 	RET     
                                   1589 
                                   1590 ;       MIN     ( n n -- n )
                                   1591 ;       Return smaller of top two items.
      0007F3 07 D8                 1592         .word      LINK
                           0007F5  1593 LINK = . 
      0007F5 03                    1594         .byte      3
      0007F6 4D 49 4E              1595         .ascii     "MIN"
      0007F9                       1596 MIN:
      0007F9 90 93            [ 1] 1597         LDW Y,X    ;D = n2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007FB 90 EE 02         [ 2] 1598         LDW Y,(2,Y)
      0007FE 90 BF 24         [ 2] 1599         LDW YTEMP,Y
      000801 90 93            [ 1] 1600         LDW Y,X
      000803 90 FE            [ 2] 1601         LDW Y,(Y)
      000805 90 B3 24         [ 2] 1602         CPW Y,YTEMP     ;if n2 <> n1
      000808 2C 02            [ 1] 1603         JRSGT     MIN1
      00080A EF 02            [ 2] 1604         LDW (2,X),Y
      00080C 1C 00 02         [ 2] 1605 MIN1:	ADDW X,#2
      00080F 81               [ 4] 1606 	RET     
                                   1607 
                                   1608 ;       WITHIN  ( u ul uh -- t )
                                   1609 ;       Return true if u is within
                                   1610 ;       range of ul and uh. ( ul <= u < uh )
      000810 07 F5                 1611         .word      LINK
                           000812  1612 LINK = . 
      000812 06                    1613         .byte      6
      000813 57 49 54 48 49 4E     1614         .ascii     "WITHIN"
      000819                       1615 WITHI:
      000819 CD 05 0D         [ 4] 1616         CALL     OVER
      00081C CD 07 57         [ 4] 1617         CALL     SUBB
      00081F CD 04 AC         [ 4] 1618         CALL     TOR
      000822 CD 07 57         [ 4] 1619         CALL     SUBB
      000825 CD 04 8D         [ 4] 1620         CALL     RFROM
      000828 CC 07 9E         [ 2] 1621         JP     ULESS
                                   1622 
                                   1623 ;; Divide
                                   1624 
                                   1625 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1626 ;       Unsigned divide of a double by a
                                   1627 ;       single. Return mod and quotient.
      00082B 08 12                 1628         .word      LINK
                           00082D  1629 LINK = . 
      00082D 06                    1630         .byte      6
      00082E 55 4D 2F 4D 4F 44     1631         .ascii     "UM/MOD"
      000834                       1632 UMMOD:
      000834 BF 22            [ 2] 1633 	LDW XTEMP,X	; save stack pointer
      000836 FE               [ 2] 1634 	LDW X,(X)	; un
      000837 BF 24            [ 2] 1635 	LDW YTEMP,X     ; save un
      000839 90 BE 22         [ 2] 1636 	LDW Y,XTEMP	; stack pointer
      00083C 90 EE 04         [ 2] 1637 	LDW Y,(4,Y)     ; Y=udl
      00083F BE 22            [ 2] 1638 	LDW X,XTEMP
      000841 EE 02            [ 2] 1639 	LDW X,(2,X)	; X=udh
      000843 B3 24            [ 2] 1640 	CPW X,YTEMP
      000845 23 0F            [ 2] 1641 	JRULE MMSM1
      000847 BE 22            [ 2] 1642 	LDW X,XTEMP
      000849 1C 00 02         [ 2] 1643 	ADDW X,#2	; pop off 1 level
      00084C 90 AE FF FF      [ 2] 1644 	LDW Y,#0xFFFF
      000850 FF               [ 2] 1645 	LDW (X),Y
      000851 90 5F            [ 1] 1646 	CLRW Y
      000853 EF 02            [ 2] 1647 	LDW (2,X),Y
      000855 81               [ 4] 1648 	RET
      000856                       1649 MMSM1:
                                   1650 ; take advantage of divw x,y when udh==0
      000856 5D               [ 2] 1651         tnzw x  ; is udh==0?
      000857 26 11            [ 1] 1652         jrne MMSM2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000859 93               [ 1] 1653         ldw x,y    ;udl 
      00085A 90 BE 24         [ 2] 1654         ldw y,YTEMP ; divisor 
      00085D 65               [ 2] 1655         divw x,y 
      00085E 89               [ 2] 1656         pushw x     ; quotient 
      00085F BE 22            [ 2] 1657         ldw x,XTEMP 
      000861 1C 00 02         [ 2] 1658         addw x,#CELLL 
      000864 EF 02            [ 2] 1659         ldw (2,x),y  ; ur
      000866 90 85            [ 2] 1660         popw y 
      000868 FF               [ 2] 1661         ldw (x),y ; uq 
      000869 81               [ 4] 1662         ret 
      00086A                       1663 MMSM2:        
      00086A A6 11            [ 1] 1664 	LD A,#17	; loop count
      00086C                       1665 MMSM3:
      00086C B3 24            [ 2] 1666 	CPW X,YTEMP	; compare udh to un
      00086E 25 04            [ 1] 1667 	JRULT MMSM4	; can't subtract
      000870 72 B0 00 24      [ 2] 1668 	SUBW X,YTEMP	; can subtract
      000874                       1669 MMSM4:
      000874 8C               [ 1] 1670 	CCF	; quotient bit
      000875 90 59            [ 2] 1671 	RLCW Y	; rotate into quotient
      000877 59               [ 2] 1672 	RLCW X	; rotate into remainder
      000878 4A               [ 1] 1673 	DEC A	; repeat
      000879 22 F1            [ 1] 1674 	JRUGT MMSM3
      00087B 56               [ 2] 1675         RRCW X 
      00087C BF 24            [ 2] 1676 	LDW YTEMP,X	; done, save remainder
      00087E BE 22            [ 2] 1677 	LDW X,XTEMP
      000880 1C 00 02         [ 2] 1678 	ADDW X,#2	; drop
      000883 FF               [ 2] 1679 	LDW (X),Y
      000884 90 BE 24         [ 2] 1680 	LDW Y,YTEMP	; save quotient
      000887 EF 02            [ 2] 1681 	LDW (2,X),Y
      000889 81               [ 4] 1682 	RET
                                   1683 	
                                   1684 ;       M/MOD   ( d n -- r q )
                                   1685 ;       Signed floored divide of double by
                                   1686 ;       single. Return mod and quotient.
      00088A 08 2D                 1687         .word      LINK
                           00088C  1688 LINK = . 
      00088C 05                    1689         .byte      5
      00088D 4D 2F 4D 4F 44        1690         .ascii     "M/MOD"
      000892                       1691 MSMOD:  
      000892 CD 04 E3         [ 4] 1692         CALL	DUPP
      000895 CD 05 1C         [ 4] 1693         CALL	ZLESS
      000898 CD 04 E3         [ 4] 1694         CALL	DUPP
      00089B CD 04 AC         [ 4] 1695         CALL	TOR
      00089E CD 03 E7         [ 4] 1696         CALL	QBRAN
      0008A1 08 AF                 1697         .word	MMOD1
      0008A3 CD 07 09         [ 4] 1698         CALL	NEGAT
      0008A6 CD 04 AC         [ 4] 1699         CALL	TOR
      0008A9 CD 07 1B         [ 4] 1700         CALL	DNEGA
      0008AC CD 04 8D         [ 4] 1701         CALL	RFROM
      0008AF CD 04 AC         [ 4] 1702 MMOD1:	CALL	TOR
      0008B2 CD 04 E3         [ 4] 1703         CALL	DUPP
      0008B5 CD 05 1C         [ 4] 1704         CALL	ZLESS
      0008B8 CD 03 E7         [ 4] 1705         CALL	QBRAN
      0008BB 08 C3                 1706         .word	MMOD2
      0008BD CD 04 A0         [ 4] 1707         CALL	RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0008C0 CD 06 DE         [ 4] 1708         CALL	PLUS
      0008C3 CD 04 8D         [ 4] 1709 MMOD2:	CALL	RFROM
      0008C6 CD 08 34         [ 4] 1710         CALL	UMMOD
      0008C9 CD 04 8D         [ 4] 1711         CALL	RFROM
      0008CC CD 03 E7         [ 4] 1712         CALL	QBRAN
      0008CF 08 DA                 1713         .word	MMOD3
      0008D1 CD 04 F3         [ 4] 1714         CALL	SWAPP
      0008D4 CD 07 09         [ 4] 1715         CALL	NEGAT
      0008D7 CD 04 F3         [ 4] 1716         CALL	SWAPP
      0008DA 81               [ 4] 1717 MMOD3:	RET
                                   1718 
                                   1719 ;       /MOD    ( n n -- r q )
                                   1720 ;       Signed divide. Return mod and quotient.
      0008DB 08 8C                 1721         .word      LINK
                           0008DD  1722 LINK = . 
      0008DD 04                    1723         .byte      4
      0008DE 2F 4D 4F 44           1724         .ascii     "/MOD"
      0008E2                       1725 SLMOD:
      0008E2 CD 05 0D         [ 4] 1726         CALL	OVER
      0008E5 CD 05 1C         [ 4] 1727         CALL	ZLESS
      0008E8 CD 04 F3         [ 4] 1728         CALL	SWAPP
      0008EB CC 08 92         [ 2] 1729         JP	MSMOD
                                   1730 
                                   1731 ;       MOD     ( n n -- r )
                                   1732 ;       Signed divide. Return mod only.
      0008EE 08 DD                 1733         .word      LINK
                           0008F0  1734 LINK = . 
      0008F0 03                    1735         .byte      3
      0008F1 4D 4F 44              1736         .ascii     "MOD"
      0008F4                       1737 MODD:
      0008F4 CD 08 E2         [ 4] 1738 	CALL	SLMOD
      0008F7 CC 04 D9         [ 2] 1739 	JP	DROP
                                   1740 
                                   1741 ;       /       ( n n -- q )
                                   1742 ;       Signed divide. Return quotient only.
      0008FA 08 F0                 1743         .word      LINK
                           0008FC  1744 LINK = . 
      0008FC 01                    1745         .byte      1
      0008FD 2F                    1746         .ascii     "/"
      0008FE                       1747 SLASH:
      0008FE CD 08 E2         [ 4] 1748         CALL	SLMOD
      000901 CD 04 F3         [ 4] 1749         CALL	SWAPP
      000904 CC 04 D9         [ 2] 1750         JP	DROP
                                   1751 
                                   1752 ;; Multiply
                                   1753 
                                   1754 ;       UM*     ( u u -- ud )
                                   1755 ;       Unsigned multiply. Return double product.
      000907 08 FC                 1756         .word      LINK
                           000909  1757 LINK = . 
      000909 03                    1758         .byte      3
      00090A 55 4D 2A              1759         .ascii     "UM*"
      00090D                       1760 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1761 ; take advantage of SP addressing modes
                                   1762 ; these PRODx in RAM are not required
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1763 ; the product is kept on stack as local variable 
                                   1764         ;; bytes offset on data stack 
                           000002  1765         da=2 
                           000003  1766         db=3 
                           000000  1767         dc=0 
                           000001  1768         dd=1 
                                   1769         ;; product bytes offset on return stack 
                           000001  1770         UD1=1  ; ud bits 31..24
                           000002  1771         UD2=2  ; ud bits 23..16
                           000003  1772         UD3=3  ; ud bits 15..8 
                           000004  1773         UD4=4  ; ud bits 7..0 
                                   1774         ;; local variable for product set to zero   
      00090D 90 5F            [ 1] 1775         clrw y 
      00090F 90 89            [ 2] 1776         pushw y  ; bits 15..0
      000911 90 89            [ 2] 1777         pushw y  ; bits 31..16 
      000913 E6 03            [ 1] 1778         ld a,(db,x) ; b 
      000915 90 97            [ 1] 1779         ld yl,a 
      000917 E6 01            [ 1] 1780         ld a,(dd,x)   ; d
      000919 90 42            [ 4] 1781         mul y,a    ; b*d  
      00091B 17 03            [ 2] 1782         ldw (UD3,sp),y ; lowest weight product 
      00091D E6 03            [ 1] 1783         ld a,(db,x)
      00091F 90 97            [ 1] 1784         ld yl,a 
      000921 E6 00            [ 1] 1785         ld a,(dc,x)
      000923 90 42            [ 4] 1786         mul y,a  ; b*c 
                                   1787         ;;; do the partial sum 
      000925 72 F9 02         [ 2] 1788         addw y,(UD2,sp)
      000928 4F               [ 1] 1789         clr a 
      000929 49               [ 1] 1790         rlc a
      00092A 6B 01            [ 1] 1791         ld (UD1,sp),a 
      00092C 17 02            [ 2] 1792         ldw (UD2,sp),y 
      00092E E6 02            [ 1] 1793         ld a,(da,x)
      000930 90 97            [ 1] 1794         ld yl,a 
      000932 E6 01            [ 1] 1795         ld a,(dd,x)
      000934 90 42            [ 4] 1796         mul y,a   ; a*d 
                                   1797         ;; do partial sum 
      000936 72 F9 02         [ 2] 1798         addw y,(UD2,sp)
      000939 4F               [ 1] 1799         clr a 
      00093A 19 01            [ 1] 1800         adc a,(UD1,sp)
      00093C 6B 01            [ 1] 1801         ld (UD1,sp),a  
      00093E 17 02            [ 2] 1802         ldw (UD2,sp),y 
      000940 E6 02            [ 1] 1803         ld a,(da,x)
      000942 90 97            [ 1] 1804         ld yl,a 
      000944 E6 00            [ 1] 1805         ld a,(dc,x)
      000946 90 42            [ 4] 1806         mul y,a  ;  a*c highest weight product 
                                   1807         ;;; do partial sum 
      000948 72 F9 01         [ 2] 1808         addw y,(UD1,sp)
      00094B FF               [ 2] 1809         ldw (x),y  ; udh 
      00094C 16 03            [ 2] 1810         ldw y,(UD3,sp)
      00094E EF 02            [ 2] 1811         ldw (2,x),y  ; udl  
      000950 5B 04            [ 2] 1812         addw sp,#4 ; drop local variable 
      000952 81               [ 4] 1813         ret  
                                   1814 
                                   1815 
                                   1816 ;       *       ( n n -- n )
                                   1817 ;       Signed multiply. Return single product.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000953 09 09                 1818         .word      LINK
                           000955  1819 LINK = . 
      000955 01                    1820         .byte      1
      000956 2A                    1821         .ascii     "*"
      000957                       1822 STAR:
      000957 CD 09 0D         [ 4] 1823 	CALL	UMSTA
      00095A CC 04 D9         [ 2] 1824 	JP	DROP
                                   1825 
                                   1826 ;       M*      ( n n -- d )
                                   1827 ;       Signed multiply. Return double product.
      00095D 09 55                 1828         .word      LINK
                           00095F  1829 LINK = . 
      00095F 02                    1830         .byte      2
      000960 4D 2A                 1831         .ascii     "M*"
      000962                       1832 MSTAR:      
      000962 CD 06 C9         [ 4] 1833         CALL	DDUP
      000965 CD 05 58         [ 4] 1834         CALL	XORR
      000968 CD 05 1C         [ 4] 1835         CALL	ZLESS
      00096B CD 04 AC         [ 4] 1836         CALL	TOR
      00096E CD 07 71         [ 4] 1837         CALL	ABSS
      000971 CD 04 F3         [ 4] 1838         CALL	SWAPP
      000974 CD 07 71         [ 4] 1839         CALL	ABSS
      000977 CD 09 0D         [ 4] 1840         CALL	UMSTA
      00097A CD 04 8D         [ 4] 1841         CALL	RFROM
      00097D CD 03 E7         [ 4] 1842         CALL	QBRAN
      000980 09 85                 1843         .word	MSTA1
      000982 CD 07 1B         [ 4] 1844         CALL	DNEGA
      000985 81               [ 4] 1845 MSTA1:	RET
                                   1846 
                                   1847 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1848 ;       Multiply n1 and n2, then divide
                                   1849 ;       by n3. Return mod and quotient.
      000986 09 5F                 1850         .word      LINK
                           000988  1851 LINK = . 
      000988 05                    1852         .byte      5
      000989 2A 2F 4D 4F 44        1853         .ascii     "*/MOD"
      00098E                       1854 SSMOD:
      00098E CD 04 AC         [ 4] 1855         CALL     TOR
      000991 CD 09 62         [ 4] 1856         CALL     MSTAR
      000994 CD 04 8D         [ 4] 1857         CALL     RFROM
      000997 CC 08 92         [ 2] 1858         JP     MSMOD
                                   1859 
                                   1860 ;       */      ( n1 n2 n3 -- q )
                                   1861 ;       Multiply n1 by n2, then divide
                                   1862 ;       by n3. Return quotient only.
      00099A 09 88                 1863         .word      LINK
                           00099C  1864 LINK = . 
      00099C 02                    1865         .byte      2
      00099D 2A 2F                 1866         .ascii     "*/"
      00099F                       1867 STASL:
      00099F CD 09 8E         [ 4] 1868         CALL	SSMOD
      0009A2 CD 04 F3         [ 4] 1869         CALL	SWAPP
      0009A5 CC 04 D9         [ 2] 1870         JP	DROP
                                   1871 
                                   1872 ;; Miscellaneous
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1873 
                                   1874 ;       CELL+   ( a -- a )
                                   1875 ;       Add cell size in byte to address.
      0009A8 09 9C                 1876         .word      LINK
                           0009AA  1877 LINK = . 
      0009AA 02                    1878         .byte       2
      0009AB 32 2B                 1879         .ascii     "2+"
      0009AD                       1880 CELLP:
      0009AD 90 93            [ 1] 1881         LDW Y,X
      0009AF 90 FE            [ 2] 1882 	LDW Y,(Y)
      0009B1 72 A9 00 02      [ 2] 1883         ADDW Y,#CELLL 
      0009B5 FF               [ 2] 1884         LDW (X),Y
      0009B6 81               [ 4] 1885         RET
                                   1886 
                                   1887 ;       CELL-   ( a -- a )
                                   1888 ;       Subtract 2 from address.
      0009B7 09 AA                 1889         .word      LINK
                           0009B9  1890 LINK = . 
      0009B9 02                    1891         .byte       2
      0009BA 32 2D                 1892         .ascii     "2-"
      0009BC                       1893 CELLM:
      0009BC 90 93            [ 1] 1894         LDW Y,X
      0009BE 90 FE            [ 2] 1895 	LDW Y,(Y)
      0009C0 72 A2 00 02      [ 2] 1896         SUBW Y,#CELLL
      0009C4 FF               [ 2] 1897         LDW (X),Y
      0009C5 81               [ 4] 1898         RET
                                   1899 
                                   1900 ;       CELLS   ( n -- n )
                                   1901 ;       Multiply tos by 2.
      0009C6 09 B9                 1902         .word      LINK
                           0009C8  1903 LINK = . 
      0009C8 02                    1904         .byte       2
      0009C9 32 2A                 1905         .ascii     "2*"
      0009CB                       1906 CELLS:
      0009CB 90 93            [ 1] 1907         LDW Y,X
      0009CD 90 FE            [ 2] 1908 	LDW Y,(Y)
      0009CF 90 58            [ 2] 1909         SLAW Y
      0009D1 FF               [ 2] 1910         LDW (X),Y
      0009D2 81               [ 4] 1911         RET
                                   1912 
                                   1913 ;       1+      ( a -- a )
                                   1914 ;       Add cell size in byte to address.
      0009D3 09 C8                 1915         .word      LINK
                           0009D5  1916 LINK = . 
      0009D5 02                    1917         .byte      2
      0009D6 31 2B                 1918         .ascii     "1+"
      0009D8                       1919 ONEP:
      0009D8 90 93            [ 1] 1920         LDW Y,X
      0009DA 90 FE            [ 2] 1921 	LDW Y,(Y)
      0009DC 90 5C            [ 2] 1922         INCW Y
      0009DE FF               [ 2] 1923         LDW (X),Y
      0009DF 81               [ 4] 1924         RET
                                   1925 
                                   1926 ;       1-      ( a -- a )
                                   1927 ;       Subtract 2 from address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009E0 09 D5                 1928         .word      LINK
                           0009E2  1929 LINK = . 
      0009E2 02                    1930         .byte      2
      0009E3 31 2D                 1931         .ascii     "1-"
      0009E5                       1932 ONEM:
      0009E5 90 93            [ 1] 1933         LDW Y,X
      0009E7 90 FE            [ 2] 1934 	LDW Y,(Y)
      0009E9 90 5A            [ 2] 1935         DECW Y
      0009EB FF               [ 2] 1936         LDW (X),Y
      0009EC 81               [ 4] 1937         RET
                                   1938 
                                   1939 ;  shift left n times 
                                   1940 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009ED 09 E2                 1941         .word LINK 
                           0009EF  1942         LINK=.
      0009EF 06                    1943         .byte 6 
      0009F0 4C 53 48 49 46 54     1944         .ascii "LSHIFT"
      0009F6                       1945 LSHIFT:
      0009F6 E6 01            [ 1] 1946         ld a,(1,x)
      0009F8 1C 00 02         [ 2] 1947         addw x,#CELLL 
      0009FB 90 93            [ 1] 1948         ldw y,x 
      0009FD 90 FE            [ 2] 1949         ldw y,(y)
      0009FF                       1950 LSHIFT1:
      0009FF 4D               [ 1] 1951         tnz a 
      000A00 27 05            [ 1] 1952         jreq LSHIFT4 
      000A02 90 58            [ 2] 1953         sllw y 
      000A04 4A               [ 1] 1954         dec a 
      000A05 20 F8            [ 2] 1955         jra LSHIFT1 
      000A07                       1956 LSHIFT4:
      000A07 FF               [ 2] 1957         ldw (x),y 
      000A08 81               [ 4] 1958         ret 
                                   1959 
                                   1960 ; shift right n times                 
                                   1961 ; RSHIFT (n1 n2 -- n1>>n2 )
      000A09 09 EF                 1962         .word LINK 
                           000A0B  1963         LINK=.
      000A0B 06                    1964         .byte 6
      000A0C 52 53 48 49 46 54     1965         .ascii "RSHIFT"
      000A12                       1966 RSHIFT:
      000A12 E6 01            [ 1] 1967         ld a,(1,x)
      000A14 1C 00 02         [ 2] 1968         addw x,#CELLL 
      000A17 90 93            [ 1] 1969         ldw y,x 
      000A19 90 FE            [ 2] 1970         ldw y,(y)
      000A1B                       1971 RSHIFT1:
      000A1B 4D               [ 1] 1972         tnz a 
      000A1C 27 05            [ 1] 1973         jreq RSHIFT4 
      000A1E 90 54            [ 2] 1974         srlw y 
      000A20 4A               [ 1] 1975         dec a 
      000A21 20 F8            [ 2] 1976         jra RSHIFT1 
      000A23                       1977 RSHIFT4:
      000A23 FF               [ 2] 1978         ldw (x),y 
      000A24 81               [ 4] 1979         ret 
                                   1980 
                                   1981 
                                   1982 ;       2/      ( n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1983 ;       divide  tos by 2.
      000A25 0A 0B                 1984         .word      LINK
                           000A27  1985 LINK = . 
      000A27 02                    1986         .byte      2
      000A28 32 2F                 1987         .ascii     "2/"
      000A2A                       1988 TWOSL:
      000A2A 90 93            [ 1] 1989         LDW Y,X
      000A2C 90 FE            [ 2] 1990 	LDW Y,(Y)
      000A2E 90 57            [ 2] 1991         SRAW Y
      000A30 FF               [ 2] 1992         LDW (X),Y
      000A31 81               [ 4] 1993         RET
                                   1994 
                                   1995 ;       BL      ( -- 32 )
                                   1996 ;       Return 32,  blank character.
      000A32 0A 27                 1997         .word      LINK
                           000A34  1998 LINK = . 
      000A34 02                    1999         .byte      2
      000A35 42 4C                 2000         .ascii     "BL"
      000A37                       2001 BLANK:
      000A37 1D 00 02         [ 2] 2002         SUBW X,#2
      000A3A 90 AE 00 20      [ 2] 2003 	LDW Y,#32
      000A3E FF               [ 2] 2004         LDW (X),Y
      000A3F 81               [ 4] 2005         RET
                                   2006 
                                   2007 ;         0     ( -- 0)
                                   2008 ;         Return 0.
      000A40 0A 34                 2009         .word      LINK
                           000A42  2010 LINK = . 
      000A42 01                    2011         .byte       1
      000A43 30                    2012         .ascii     "0"
      000A44                       2013 ZERO:
      000A44 1D 00 02         [ 2] 2014         SUBW X,#2
      000A47 90 5F            [ 1] 2015 	CLRW Y
      000A49 FF               [ 2] 2016         LDW (X),Y
      000A4A 81               [ 4] 2017         RET
                                   2018 
                                   2019 ;         1     ( -- 1)
                                   2020 ;         Return 1.
      000A4B 0A 42                 2021         .word      LINK
                           000A4D  2022 LINK = . 
      000A4D 01                    2023         .byte       1
      000A4E 31                    2024         .ascii     "1"
      000A4F                       2025 ONE:
      000A4F 1D 00 02         [ 2] 2026         SUBW X,#2
      000A52 90 AE 00 01      [ 2] 2027 	LDW Y,#1
      000A56 FF               [ 2] 2028         LDW (X),Y
      000A57 81               [ 4] 2029         RET
                                   2030 
                                   2031 ;         -1    ( -- -1)
                                   2032 ;         Return 32,  blank character.
      000A58 0A 4D                 2033         .word      LINK
                           000A5A  2034 LINK = . 
      000A5A 02                    2035         .byte       2
      000A5B 2D 31                 2036         .ascii     "-1"
      000A5D                       2037 MONE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A5D 1D 00 02         [ 2] 2038         SUBW X,#2
      000A60 90 AE FF FF      [ 2] 2039 	LDW Y,#0xFFFF
      000A64 FF               [ 2] 2040         LDW (X),Y
      000A65 81               [ 4] 2041         RET
                                   2042 
                                   2043 ;       >CHAR   ( c -- c )
                                   2044 ;       Filter non-printing characters.
      000A66 0A 5A                 2045         .word      LINK
                           000A68  2046 LINK = . 
      000A68 05                    2047         .byte      5
      000A69 3E 43 48 41 52        2048         .ascii     ">CHAR"
      000A6E                       2049 TCHAR:
      000A6E E6 01            [ 1] 2050         ld a,(1,x)
      000A70 A1 20            [ 1] 2051         cp a,#32  
      000A72 2B 05            [ 1] 2052         jrmi 1$ 
      000A74 A1 7F            [ 1] 2053         cp a,#127 
      000A76 2A 01            [ 1] 2054         jrpl 1$ 
      000A78 81               [ 4] 2055         ret 
      000A79 A6 5F            [ 1] 2056 1$:     ld a,#'_ 
      000A7B E7 01            [ 1] 2057         ld (1,x),a 
      000A7D 81               [ 4] 2058         ret 
                                   2059 
                                   2060 ;       DEPTH   ( -- n )
                                   2061 ;       Return  depth of  data stack.
      000A7E 0A 68                 2062         .word      LINK
                           000A80  2063 LINK = . 
      000A80 05                    2064         .byte      5
      000A81 44 45 50 54 48        2065         .ascii     "DEPTH"
      000A86                       2066 DEPTH: 
      000A86 90 BE 2A         [ 2] 2067         LDW Y,SP0    ;save data stack ptr
      000A89 BF 22            [ 2] 2068 	LDW XTEMP,X
      000A8B 72 B2 00 22      [ 2] 2069         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A8F 90 57            [ 2] 2070         SRAW Y    ;Y = #stack items
      000A91 1D 00 02         [ 2] 2071 	SUBW X,#2
      000A94 FF               [ 2] 2072         LDW (X),Y     ; if neg, underflow
      000A95 81               [ 4] 2073         RET
                                   2074 
                                   2075 ;       PICK    ( ... +n -- ... w )
                                   2076 ;       Copy  nth stack item to tos.
      000A96 0A 80                 2077         .word      LINK
                           000A98  2078 LINK = . 
      000A98 04                    2079         .byte      4
      000A99 50 49 43 4B           2080         .ascii     "PICK"
      000A9D                       2081 PICK:
      000A9D 90 93            [ 1] 2082         LDW Y,X   ;D = n1
      000A9F 90 FE            [ 2] 2083         LDW Y,(Y)
                                   2084 ; modified for standard compliance          
                                   2085 ; 0 PICK must be equivalent to DUP 
      000AA1 90 5C            [ 2] 2086         INCW Y 
      000AA3 90 58            [ 2] 2087         SLAW Y
      000AA5 BF 22            [ 2] 2088         LDW XTEMP,X
      000AA7 72 B9 00 22      [ 2] 2089         ADDW Y,XTEMP
      000AAB 90 FE            [ 2] 2090         LDW Y,(Y)
      000AAD FF               [ 2] 2091         LDW (X),Y
      000AAE 81               [ 4] 2092         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2093 
                                   2094 ;; Memory access
                                   2095 
                                   2096 ;       +!      ( n a -- )
                                   2097 ;       Add n to  contents at address a.
      000AAF 0A 98                 2098         .word      LINK
                           000AB1  2099 LINK = . 
      000AB1 02                    2100         .byte      2
      000AB2 2B 21                 2101         .ascii     "+!"
      000AB4                       2102 PSTOR:
      000AB4 90 93            [ 1] 2103         ldw y,x 
      000AB6 90 FE            [ 2] 2104         ldw y,(y)
      000AB8 90 BF 24         [ 2] 2105         ldw YTEMP,y  ; address
      000ABB 90 FE            [ 2] 2106         ldw y,(y)  
      000ABD 90 89            [ 2] 2107         pushw y  ; value at address 
      000ABF 90 93            [ 1] 2108         ldw y,x 
      000AC1 90 EE 02         [ 2] 2109         ldw y,(2,y) ; n 
      000AC4 72 F9 01         [ 2] 2110         addw y,(1,sp) ; n+value
      000AC7 91 CF 24         [ 5] 2111         ldw [YTEMP],y ;  a!
      000ACA 90 85            [ 2] 2112         popw y    ;drop local var
      000ACC 1C 00 04         [ 2] 2113         addw x,#4 ; DDROP 
      000ACF 81               [ 4] 2114         ret 
                                   2115 
                                   2116 ;       2!      ( d a -- )
                                   2117 ;       Store  double integer to address a.
      000AD0 0A B1                 2118         .word      LINK
                           000AD2  2119 LINK = . 
      000AD2 02                    2120         .byte      2
      000AD3 32 21                 2121         .ascii     "2!"
      000AD5                       2122 DSTOR:
      000AD5 90 93            [ 1] 2123         ldw y,x 
      000AD7 90 FE            [ 2] 2124         ldw y,(y)
      000AD9 90 BF 24         [ 2] 2125         ldw YTEMP,y ; address 
      000ADC 1C 00 02         [ 2] 2126         addw x,#CELLL ; drop a 
      000ADF 90 93            [ 1] 2127         ldw y,x 
      000AE1 90 FE            [ 2] 2128         ldw y,(y) ; hi word 
      000AE3 89               [ 2] 2129         pushw x 
      000AE4 EE 02            [ 2] 2130         ldw x,(2,x) ; lo word 
      000AE6 91 CF 24         [ 5] 2131         ldw [YTEMP],y
      000AE9 90 93            [ 1] 2132         ldw y,x 
      000AEB AE 00 02         [ 2] 2133         ldw x,#2 
      000AEE 92 DF 24         [ 5] 2134         ldw ([YTEMP],x),y 
      000AF1 85               [ 2] 2135         popw x 
      000AF2 1C 00 04         [ 2] 2136         addw x,#4 ; DDROP 
      000AF5 81               [ 4] 2137         ret 
                                   2138 
                                   2139 ;       2@      ( a -- d )
                                   2140 ;       Fetch double integer from address a.
      000AF6 0A D2                 2141         .word      LINK
                           000AF8  2142 LINK = . 
      000AF8 02                    2143         .byte      2
      000AF9 32 40                 2144         .ascii     "2@"
      000AFB                       2145 DAT:
      000AFB 90 93            [ 1] 2146         ldw y,x 
      000AFD 90 FE            [ 2] 2147         ldw y,(y) ;address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AFF 90 BF 24         [ 2] 2148         ldw YTEMP,y 
      000B02 1D 00 02         [ 2] 2149         subw x,#CELLL ; space for udh 
      000B05 91 CE 24         [ 5] 2150         ldw y,[YTEMP] ; udh 
      000B08 FF               [ 2] 2151         ldw (x),y 
      000B09 90 AE 00 02      [ 2] 2152         ldw y,#2
      000B0D 91 DE 24         [ 5] 2153         ldw y,([YTEMP],y) ; udl 
      000B10 EF 02            [ 2] 2154         ldw (2,x),y
      000B12 81               [ 4] 2155         ret 
                                   2156 
                                   2157 ;       COUNT   ( b -- b +n )
                                   2158 ;       Return count byte of a string
                                   2159 ;       and add 1 to byte address.
      000B13 0A F8                 2160         .word      LINK
                           000B15  2161 LINK = . 
      000B15 05                    2162         .byte      5
      000B16 43 4F 55 4E 54        2163         .ascii     "COUNT"
      000B1B                       2164 COUNT:
      000B1B 90 93            [ 1] 2165         ldw y,x 
      000B1D 90 FE            [ 2] 2166         ldw y,(y) ; address 
      000B1F 90 F6            [ 1] 2167         ld a,(y)  ; count 
      000B21 90 5C            [ 2] 2168         incw y 
      000B23 FF               [ 2] 2169         ldw (x),y 
      000B24 1D 00 02         [ 2] 2170         subw x,#CELLL 
      000B27 E7 01            [ 1] 2171         ld (1,x),a 
      000B29 7F               [ 1] 2172         clr (x)
      000B2A 81               [ 4] 2173         ret 
                                   2174 
                                   2175 ;       HERE    ( -- a )
                                   2176 ;       Return  top of  variables
      000B2B 0B 15                 2177         .word      LINK
                           000B2D  2178 LINK = . 
      000B2D 04                    2179         .byte      4
      000B2E 48 45 52 45           2180         .ascii     "HERE"
      000B32                       2181 HERE:
      000B32 90 AE 00 16      [ 2] 2182       	ldw y,#UVP 
      000B36 90 FE            [ 2] 2183         ldw y,(y)
      000B38 1D 00 02         [ 2] 2184         subw x,#CELLL 
      000B3B FF               [ 2] 2185         ldw (x),y 
      000B3C 81               [ 4] 2186         ret 
                                   2187 
                                   2188 ;       PAD     ( -- a )
                                   2189 ;       Return address of text buffer
                                   2190 ;       above  code dictionary.
      000B3D 0B 2D                 2191         .word      LINK
                           000B3F  2192 LINK = . 
      000B3F 03                    2193         .byte      3
      000B40 50 41 44              2194         .ascii     "PAD"
      000B43                       2195 PAD:
      000B43 CD 0B 32         [ 4] 2196         CALL     HERE
      000B46 CD 03 B4         [ 4] 2197         CALL     DOLIT
      000B49 00 50                 2198         .word      80
      000B4B CC 06 DE         [ 2] 2199         JP     PLUS
                                   2200 
                                   2201 ;       TIB     ( -- a )
                                   2202 ;       Return address of terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B4E 0B 3F                 2203         .word      LINK
                           000B50  2204 LINK = . 
      000B50 03                    2205         .byte      3
      000B51 54 49 42              2206         .ascii     "TIB"
      000B54                       2207 TIB:
      000B54 CD 05 CE         [ 4] 2208         CALL     NTIB
      000B57 CD 09 AD         [ 4] 2209         CALL     CELLP
      000B5A CC 04 3C         [ 2] 2210         JP     AT
                                   2211 
                                   2212 ;       @EXECUTE        ( a -- )
                                   2213 ;       Execute vector stored in address a.
      000B5D 0B 50                 2214         .word      LINK
                           000B5F  2215 LINK = . 
      000B5F 08                    2216         .byte      8
      000B60 40 45 58 45 43 55 54  2217         .ascii     "@EXECUTE"
             45
      000B68                       2218 ATEXE:
      000B68 CD 04 3C         [ 4] 2219         CALL     AT
      000B6B CD 06 8D         [ 4] 2220         CALL     QDUP    ;?address or zero
      000B6E CD 03 E7         [ 4] 2221         CALL     QBRAN
      000B71 0B 76                 2222         .word      EXE1
      000B73 CD 04 0E         [ 4] 2223         CALL     EXECU   ;execute if non-zero
      000B76 81               [ 4] 2224 EXE1:   RET     ;do nothing if zero
                                   2225 
                                   2226 ;       CMOVE   ( b1 b2 u -- )
                                   2227 ;       Copy u bytes from b1 to b2.
      000B77 0B 5F                 2228         .word      LINK
                           000B79  2229 LINK = . 
      000B79 05                    2230         .byte      5
      000B7A 43 4D 4F 56 45        2231         .ascii     "CMOVE"
      000B7F                       2232 CMOVE:
      000B7F CD 04 AC         [ 4] 2233         CALL	TOR
      000B82 CD 03 FE         [ 4] 2234         CALL	BRAN
      000B85 0B 9F                 2235         .word	CMOV2
      000B87 CD 04 AC         [ 4] 2236 CMOV1:	CALL	TOR
      000B8A CD 04 E3         [ 4] 2237         CALL	DUPP
      000B8D CD 04 5A         [ 4] 2238         CALL	CAT
      000B90 CD 04 A0         [ 4] 2239         CALL	RAT
      000B93 CD 04 49         [ 4] 2240         CALL	CSTOR
      000B96 CD 09 D8         [ 4] 2241         CALL	ONEP
      000B99 CD 04 8D         [ 4] 2242         CALL	RFROM
      000B9C CD 09 D8         [ 4] 2243         CALL	ONEP
      000B9F CD 03 C8         [ 4] 2244 CMOV2:	CALL	DONXT
      000BA2 0B 87                 2245         .word	CMOV1
      000BA4 CC 06 BE         [ 2] 2246         JP	DDROP
                                   2247 
                                   2248 ;       FILL    ( b u c -- )
                                   2249 ;       Fill u bytes of character c
                                   2250 ;       to area beginning at b.
      000BA7 0B 79                 2251         .word       LINK
                           000BA9  2252 LINK = . 
      000BA9 04                    2253         .byte       4
      000BAA 46 49 4C 4C           2254         .ascii     "FILL"
      000BAE                       2255 FILL:
      000BAE 90 93            [ 1] 2256         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000BB0 90 E6 01         [ 1] 2257         ld a,(1,y) ; c 
      000BB3 1C 00 02         [ 2] 2258         addw x,#CELLL ; drop c 
      000BB6 90 93            [ 1] 2259         ldw y,x 
      000BB8 90 FE            [ 2] 2260         ldw y,(y) ; count
      000BBA 90 89            [ 2] 2261         pushw y 
      000BBC 1C 00 02         [ 2] 2262         addw x,#CELLL ; drop u 
      000BBF 90 93            [ 1] 2263         ldw y,x 
      000BC1 1C 00 02         [ 2] 2264         addw x,#CELLL ; drop b 
      000BC4 90 FE            [ 2] 2265         ldw y,(y) ; address
      000BC6 90 BF 24         [ 2] 2266         ldw YTEMP,y
      000BC9 90 85            [ 2] 2267         popw y ; count 
      000BCB                       2268 FILL1:  
      000BCB 92 C7 24         [ 4] 2269         ld [YTEMP],a 
      000BCE 3C 25            [ 1] 2270         inc YTEMP+1
      000BD0 24 02            [ 1] 2271         jrnc FILL2 
      000BD2 3C 24            [ 1] 2272         inc YTEMP
      000BD4                       2273 FILL2: 
      000BD4 90 5A            [ 2] 2274         decw y ; count 
      000BD6 26 F3            [ 1] 2275         jrne FILL1  
      000BD8 81               [ 4] 2276         ret 
                                   2277 
                                   2278 ;       ERASE   ( b u -- )
                                   2279 ;       Erase u bytes beginning at b.
      000BD9 0B A9                 2280         .word      LINK
                           000BDB  2281 LINK = . 
      000BDB 05                    2282         .byte      5
      000BDC 45 52 41 53 45        2283         .ascii     "ERASE"
      000BE1                       2284 ERASE:
      000BE1 90 5F            [ 1] 2285         clrw y 
      000BE3 1D 00 02         [ 2] 2286         subw x,#CELLL 
      000BE6 FF               [ 2] 2287         ldw (x),y 
      000BE7 CC 0B AE         [ 2] 2288         jp FILL 
                                   2289 
                                   2290 
                                   2291 ;       PACK0   ( b u a -- a )
                                   2292 ;       Build a counted string with
                                   2293 ;       u characters from b. Null fill.
      000BEA 0B DB                 2294         .word      LINK
                           000BEC  2295 LINK = . 
      000BEC 05                    2296         .byte      5
      000BED 50 41 43 4B 30        2297         .ascii     "PACK0"
      000BF2                       2298 PACKS:
      000BF2 CD 04 E3         [ 4] 2299         CALL     DUPP
      000BF5 CD 04 AC         [ 4] 2300         CALL     TOR     ;strings only on cell boundary
      000BF8 CD 06 C9         [ 4] 2301         CALL     DDUP
      000BFB CD 04 49         [ 4] 2302         CALL     CSTOR
      000BFE CD 09 D8         [ 4] 2303         CALL     ONEP ;save count
      000C01 CD 04 F3         [ 4] 2304         CALL     SWAPP
      000C04 CD 0B 7F         [ 4] 2305         CALL     CMOVE
      000C07 CD 04 8D         [ 4] 2306         CALL     RFROM
      000C0A 81               [ 4] 2307         RET
                                   2308 
                                   2309 ;; Numeric output, single precision
                                   2310 
                                   2311 ;       DIGIT   ( u -- c )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2312 ;       Convert digit u to a character.
      000C0B 0B EC                 2313         .word      LINK
                           000C0D  2314 LINK = . 
      000C0D 05                    2315         .byte      5
      000C0E 44 49 47 49 54        2316         .ascii     "DIGIT"
      000C13                       2317 DIGIT:
      000C13 CD 03 B4         [ 4] 2318         CALL	DOLIT
      000C16 00 09                 2319         .word	9
      000C18 CD 05 0D         [ 4] 2320         CALL	OVER
      000C1B CD 07 BC         [ 4] 2321         CALL	LESS
      000C1E CD 03 B4         [ 4] 2322         CALL	DOLIT
      000C21 00 07                 2323         .word	7
      000C23 CD 05 2F         [ 4] 2324         CALL	ANDD
      000C26 CD 06 DE         [ 4] 2325         CALL	PLUS
      000C29 CD 03 B4         [ 4] 2326         CALL	DOLIT
      000C2C 00 30                 2327         .word	48	;'0'
      000C2E CC 06 DE         [ 2] 2328         JP	PLUS
                                   2329 
                                   2330 ;       EXTRACT ( n base -- n c )
                                   2331 ;       Extract least significant digit from n.
      000C31 0C 0D                 2332         .word      LINK
                           000C33  2333 LINK = . 
      000C33 07                    2334         .byte      7
      000C34 45 58 54 52 41 43 54  2335         .ascii     "EXTRACT"
      000C3B                       2336 EXTRC:
      000C3B CD 0A 44         [ 4] 2337         CALL     ZERO
      000C3E CD 04 F3         [ 4] 2338         CALL     SWAPP
      000C41 CD 08 34         [ 4] 2339         CALL     UMMOD
      000C44 CD 04 F3         [ 4] 2340         CALL     SWAPP
      000C47 CC 0C 13         [ 2] 2341         JP     DIGIT
                                   2342 
                                   2343 ;       <#      ( -- )
                                   2344 ;       Initiate  numeric output process.
      000C4A 0C 33                 2345         .word      LINK
                           000C4C  2346 LINK = . 
      000C4C 02                    2347         .byte      2
      000C4D 3C 23                 2348         .ascii     "<#"
      000C4F                       2349 BDIGS:
      000C4F CD 0B 43         [ 4] 2350         CALL     PAD
      000C52 CD 06 10         [ 4] 2351         CALL     HLD
      000C55 CC 04 25         [ 2] 2352         JP     STORE
                                   2353 
                                   2354 ;       HOLD    ( c -- )
                                   2355 ;       Insert a character into output string.
      000C58 0C 4C                 2356         .word      LINK
                           000C5A  2357 LINK = . 
      000C5A 04                    2358         .byte      4
      000C5B 48 4F 4C 44           2359         .ascii     "HOLD"
      000C5F                       2360 HOLD:
      000C5F CD 06 10         [ 4] 2361         CALL     HLD
      000C62 CD 04 3C         [ 4] 2362         CALL     AT
      000C65 CD 09 E5         [ 4] 2363         CALL     ONEM
      000C68 CD 04 E3         [ 4] 2364         CALL     DUPP
      000C6B CD 06 10         [ 4] 2365         CALL     HLD
      000C6E CD 04 25         [ 4] 2366         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000C71 CC 04 49         [ 2] 2367         JP     CSTOR
                                   2368 
                                   2369 ;       #       ( u -- u )
                                   2370 ;       Extract one digit from u and
                                   2371 ;       append digit to output string.
      000C74 0C 5A                 2372         .word      LINK
                           000C76  2373 LINK = . 
      000C76 01                    2374         .byte      1
      000C77 23                    2375         .ascii     "#"
      000C78                       2376 DIG:
      000C78 CD 05 A0         [ 4] 2377         CALL     BASE
      000C7B CD 04 3C         [ 4] 2378         CALL     AT
      000C7E CD 0C 3B         [ 4] 2379         CALL     EXTRC
      000C81 CC 0C 5F         [ 2] 2380         JP     HOLD
                                   2381 
                                   2382 ;       #S      ( u -- 0 )
                                   2383 ;       Convert u until all digits
                                   2384 ;       are added to output string.
      000C84 0C 76                 2385         .word      LINK
                           000C86  2386 LINK = . 
      000C86 02                    2387         .byte      2
      000C87 23 53                 2388         .ascii     "#S"
      000C89                       2389 DIGS:
      000C89 CD 0C 78         [ 4] 2390 DIGS1:  CALL     DIG
      000C8C CD 04 E3         [ 4] 2391         CALL     DUPP
      000C8F CD 03 E7         [ 4] 2392         CALL     QBRAN
      000C92 0C 96                 2393         .word      DIGS2
      000C94 20 F3            [ 2] 2394         JRA     DIGS1
      000C96 81               [ 4] 2395 DIGS2:  RET
                                   2396 
                                   2397 ;       SIGN    ( n -- )
                                   2398 ;       Add a minus sign to
                                   2399 ;       numeric output string.
      000C97 0C 86                 2400         .word      LINK
                           000C99  2401 LINK = . 
      000C99 04                    2402         .byte      4
      000C9A 53 49 47 4E           2403         .ascii     "SIGN"
      000C9E                       2404 SIGN:
      000C9E CD 05 1C         [ 4] 2405         CALL     ZLESS
      000CA1 CD 03 E7         [ 4] 2406         CALL     QBRAN
      000CA4 0C AE                 2407         .word      SIGN1
      000CA6 CD 03 B4         [ 4] 2408         CALL     DOLIT
      000CA9 00 2D                 2409         .word      45	;"-"
      000CAB CC 0C 5F         [ 2] 2410         JP     HOLD
      000CAE 81               [ 4] 2411 SIGN1:  RET
                                   2412 
                                   2413 ;       #>      ( w -- b u )
                                   2414 ;       Prepare output string.
      000CAF 0C 99                 2415         .word      LINK
                           000CB1  2416 LINK = . 
      000CB1 02                    2417         .byte      2
      000CB2 23 3E                 2418         .ascii     "#>"
      000CB4                       2419 EDIGS:
      000CB4 CD 04 D9         [ 4] 2420         CALL     DROP
      000CB7 CD 06 10         [ 4] 2421         CALL     HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CBA CD 04 3C         [ 4] 2422         CALL     AT
      000CBD CD 0B 43         [ 4] 2423         CALL     PAD
      000CC0 CD 05 0D         [ 4] 2424         CALL     OVER
      000CC3 CC 07 57         [ 2] 2425         JP     SUBB
                                   2426 
                                   2427 ;       str     ( w -- b u )
                                   2428 ;       Convert a signed integer
                                   2429 ;       to a numeric string.
      000CC6 0C B1                 2430         .word      LINK
                           000CC8  2431 LINK = . 
      000CC8 03                    2432         .byte      3
      000CC9 53 54 52              2433         .ascii     "STR"
      000CCC                       2434 STR:
      000CCC CD 04 E3         [ 4] 2435         CALL     DUPP
      000CCF CD 04 AC         [ 4] 2436         CALL     TOR
      000CD2 CD 07 71         [ 4] 2437         CALL     ABSS
      000CD5 CD 0C 4F         [ 4] 2438         CALL     BDIGS
      000CD8 CD 0C 89         [ 4] 2439         CALL     DIGS
      000CDB CD 04 8D         [ 4] 2440         CALL     RFROM
      000CDE CD 0C 9E         [ 4] 2441         CALL     SIGN
      000CE1 CC 0C B4         [ 2] 2442         JP     EDIGS
                                   2443 
                                   2444 ;       HEX     ( -- )
                                   2445 ;       Use radix 16 as base for
                                   2446 ;       numeric conversions.
      000CE4 0C C8                 2447         .word      LINK
                           000CE6  2448 LINK = . 
      000CE6 03                    2449         .byte      3
      000CE7 48 45 58              2450         .ascii     "HEX"
      000CEA                       2451 HEX:
      000CEA CD 03 B4         [ 4] 2452         CALL     DOLIT
      000CED 00 10                 2453         .word      16
      000CEF CD 05 A0         [ 4] 2454         CALL     BASE
      000CF2 CC 04 25         [ 2] 2455         JP     STORE
                                   2456 
                                   2457 ;       DECIMAL ( -- )
                                   2458 ;       Use radix 10 as base
                                   2459 ;       for numeric conversions.
      000CF5 0C E6                 2460         .word      LINK
                           000CF7  2461 LINK = . 
      000CF7 07                    2462         .byte      7
      000CF8 44 45 43 49 4D 41 4C  2463         .ascii     "DECIMAL"
      000CFF                       2464 DECIM:
      000CFF CD 03 B4         [ 4] 2465         CALL     DOLIT
      000D02 00 0A                 2466         .word      10
      000D04 CD 05 A0         [ 4] 2467         CALL     BASE
      000D07 CC 04 25         [ 2] 2468         JP     STORE
                                   2469 
                                   2470 ;; Numeric input, single precision
                                   2471 
                                   2472 ;       DIGIT?  ( c base -- u t )
                                   2473 ;       Convert a character to its numeric
                                   2474 ;       value. A flag indicates success.
      000D0A 0C F7                 2475         .word      LINK
                           000D0C  2476 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D0C 06                    2477         .byte       6
      000D0D 44 49 47 49 54 3F     2478         .ascii     "DIGIT?"
      000D13                       2479 DIGTQ:
      000D13 CD 04 AC         [ 4] 2480         CALL     TOR
      000D16 CD 03 B4         [ 4] 2481         CALL     DOLIT
      000D19 00 30                 2482         .word     48	; "0"
      000D1B CD 07 57         [ 4] 2483         CALL     SUBB
      000D1E CD 03 B4         [ 4] 2484         CALL     DOLIT
      000D21 00 09                 2485         .word      9
      000D23 CD 05 0D         [ 4] 2486         CALL     OVER
      000D26 CD 07 BC         [ 4] 2487         CALL     LESS
      000D29 CD 03 E7         [ 4] 2488         CALL     QBRAN
      000D2C 0D 44                 2489         .word      DGTQ1
      000D2E CD 03 B4         [ 4] 2490         CALL     DOLIT
      000D31 00 07                 2491         .word      7
      000D33 CD 07 57         [ 4] 2492         CALL     SUBB
      000D36 CD 04 E3         [ 4] 2493         CALL     DUPP
      000D39 CD 03 B4         [ 4] 2494         CALL     DOLIT
      000D3C 00 0A                 2495         .word      10
      000D3E CD 07 BC         [ 4] 2496         CALL     LESS
      000D41 CD 05 43         [ 4] 2497         CALL     ORR
      000D44 CD 04 E3         [ 4] 2498 DGTQ1:  CALL     DUPP
      000D47 CD 04 8D         [ 4] 2499         CALL     RFROM
      000D4A CC 07 9E         [ 2] 2500         JP     ULESS
                                   2501 
                                   2502 ;       NUMBER? ( a -- n T | a F )
                                   2503 ;       Convert a number string to
                                   2504 ;       integer. Push a flag on tos.
      000D4D 0D 0C                 2505         .word      LINK
                           000D4F  2506 LINK = . 
      000D4F 07                    2507         .byte      7
      000D50 4E 55 4D 42 45 52 3F  2508         .ascii     "NUMBER?"
      000D57                       2509 NUMBQ:
      000D57 CD 05 A0         [ 4] 2510         CALL     BASE
      000D5A CD 04 3C         [ 4] 2511         CALL     AT
      000D5D CD 04 AC         [ 4] 2512         CALL     TOR
      000D60 CD 0A 44         [ 4] 2513         CALL     ZERO
      000D63 CD 05 0D         [ 4] 2514         CALL     OVER
      000D66 CD 0B 1B         [ 4] 2515         CALL     COUNT
      000D69 CD 05 0D         [ 4] 2516         CALL     OVER
      000D6C CD 04 5A         [ 4] 2517         CALL     CAT
      000D6F CD 03 B4         [ 4] 2518         CALL     DOLIT
      000D72 00 24                 2519         .word     36	; "0x"
      000D74 CD 07 7F         [ 4] 2520         CALL     EQUAL
      000D77 CD 03 E7         [ 4] 2521         CALL     QBRAN
      000D7A 0D 8B                 2522         .word      NUMQ1
      000D7C CD 0C EA         [ 4] 2523         CALL     HEX
      000D7F CD 04 F3         [ 4] 2524         CALL     SWAPP
      000D82 CD 09 D8         [ 4] 2525         CALL     ONEP
      000D85 CD 04 F3         [ 4] 2526         CALL     SWAPP
      000D88 CD 09 E5         [ 4] 2527         CALL     ONEM
      000D8B CD 05 0D         [ 4] 2528 NUMQ1:  CALL     OVER
      000D8E CD 04 5A         [ 4] 2529         CALL     CAT
      000D91 CD 03 B4         [ 4] 2530         CALL     DOLIT
      000D94 00 2D                 2531         .word     45	; "-"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D96 CD 07 7F         [ 4] 2532         CALL     EQUAL
      000D99 CD 04 AC         [ 4] 2533         CALL     TOR
      000D9C CD 04 F3         [ 4] 2534         CALL     SWAPP
      000D9F CD 04 A0         [ 4] 2535         CALL     RAT
      000DA2 CD 07 57         [ 4] 2536         CALL     SUBB
      000DA5 CD 04 F3         [ 4] 2537         CALL     SWAPP
      000DA8 CD 04 A0         [ 4] 2538         CALL     RAT
      000DAB CD 06 DE         [ 4] 2539         CALL     PLUS
      000DAE CD 06 8D         [ 4] 2540         CALL     QDUP
      000DB1 CD 03 E7         [ 4] 2541         CALL     QBRAN
      000DB4 0E 15                 2542         .word      NUMQ6
      000DB6 CD 09 E5         [ 4] 2543         CALL     ONEM
      000DB9 CD 04 AC         [ 4] 2544         CALL     TOR
      000DBC CD 04 E3         [ 4] 2545 NUMQ2:  CALL     DUPP
      000DBF CD 04 AC         [ 4] 2546         CALL     TOR
      000DC2 CD 04 5A         [ 4] 2547         CALL     CAT
      000DC5 CD 05 A0         [ 4] 2548         CALL     BASE
      000DC8 CD 04 3C         [ 4] 2549         CALL     AT
      000DCB CD 0D 13         [ 4] 2550         CALL     DIGTQ
      000DCE CD 03 E7         [ 4] 2551         CALL     QBRAN
      000DD1 0E 03                 2552         .word      NUMQ4
      000DD3 CD 04 F3         [ 4] 2553         CALL     SWAPP
      000DD6 CD 05 A0         [ 4] 2554         CALL     BASE
      000DD9 CD 04 3C         [ 4] 2555         CALL     AT
      000DDC CD 09 57         [ 4] 2556         CALL     STAR
      000DDF CD 06 DE         [ 4] 2557         CALL     PLUS
      000DE2 CD 04 8D         [ 4] 2558         CALL     RFROM
      000DE5 CD 09 D8         [ 4] 2559         CALL     ONEP
      000DE8 CD 03 C8         [ 4] 2560         CALL     DONXT
      000DEB 0D BC                 2561         .word      NUMQ2
      000DED CD 04 A0         [ 4] 2562         CALL     RAT
      000DF0 CD 04 F3         [ 4] 2563         CALL     SWAPP
      000DF3 CD 04 D9         [ 4] 2564         CALL     DROP
      000DF6 CD 03 E7         [ 4] 2565         CALL     QBRAN
      000DF9 0D FE                 2566         .word      NUMQ3
      000DFB CD 07 09         [ 4] 2567         CALL     NEGAT
      000DFE CD 04 F3         [ 4] 2568 NUMQ3:  CALL     SWAPP
      000E01 20 0F            [ 2] 2569         JRA     NUMQ5
      000E03 CD 04 8D         [ 4] 2570 NUMQ4:  CALL     RFROM
      000E06 CD 04 8D         [ 4] 2571         CALL     RFROM
      000E09 CD 06 BE         [ 4] 2572         CALL     DDROP
      000E0C CD 06 BE         [ 4] 2573         CALL     DDROP
      000E0F CD 0A 44         [ 4] 2574         CALL     ZERO
      000E12 CD 04 E3         [ 4] 2575 NUMQ5:  CALL     DUPP
      000E15 CD 04 8D         [ 4] 2576 NUMQ6:  CALL     RFROM
      000E18 CD 06 BE         [ 4] 2577         CALL     DDROP
      000E1B CD 04 8D         [ 4] 2578         CALL     RFROM
      000E1E CD 05 A0         [ 4] 2579         CALL     BASE
      000E21 CC 04 25         [ 2] 2580         JP     STORE
                                   2581 
                                   2582 ;; Basic I/O
                                   2583 
                                   2584 ;       KEY     ( -- c )
                                   2585 ;       Wait for and return an
                                   2586 ;       input character.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E24 0D 4F                 2587         .word      LINK
                           000E26  2588 LINK = . 
      000E26 03                    2589         .byte      3
      000E27 4B 45 59              2590         .ascii     "KEY"
      000E2A                       2591 KEY:
      000E2A 72 0B 52 30 FB   [ 2] 2592         btjf UART1_SR,#UART_SR_RXNE,. 
      000E2F C6 52 31         [ 1] 2593         ld a,UART1_DR 
      000E32 1D 00 02         [ 2] 2594         subw x,#CELLL 
      000E35 E7 01            [ 1] 2595         ld (1,x),a 
      000E37 7F               [ 1] 2596         clr (x)
      000E38 81               [ 4] 2597         ret 
                                   2598 
                                   2599 ;       NUF?    ( -- t )
                                   2600 ;       Return false if no input,
                                   2601 ;       else pause and if CR return true.
      000E39 0E 26                 2602         .word      LINK
                           000E3B  2603 LINK = . 
      000E3B 04                    2604         .byte      4
      000E3C 4E 55 46 3F           2605         .ascii     "NUF?"
      000E40                       2606 NUFQ:
      000E40 CD 03 80         [ 4] 2607         CALL     QKEY
      000E43 CD 04 E3         [ 4] 2608         CALL     DUPP
      000E46 CD 03 E7         [ 4] 2609         CALL     QBRAN
      000E49 0E 59                 2610         .word    NUFQ1
      000E4B CD 06 BE         [ 4] 2611         CALL     DDROP
      000E4E CD 0E 2A         [ 4] 2612         CALL     KEY
      000E51 CD 03 B4         [ 4] 2613         CALL     DOLIT
      000E54 00 0D                 2614         .word      CRR
      000E56 CC 07 7F         [ 2] 2615         JP     EQUAL
      000E59 81               [ 4] 2616 NUFQ1:  RET
                                   2617 
                                   2618 ;       SPACE   ( -- )
                                   2619 ;       Send  blank character to
                                   2620 ;       output device.
      000E5A 0E 3B                 2621         .word      LINK
                           000E5C  2622 LINK = . 
      000E5C 05                    2623         .byte      5
      000E5D 53 50 41 43 45        2624         .ascii     "SPACE"
      000E62                       2625 SPACE:
      000E62 CD 0A 37         [ 4] 2626         CALL     BLANK
      000E65 CC 03 9E         [ 2] 2627         JP     EMIT
                                   2628 
                                   2629 ;       SPACES  ( +n -- )
                                   2630 ;       Send n spaces to output device.
      000E68 0E 5C                 2631         .word      LINK
                           000E6A  2632 LINK = . 
      000E6A 06                    2633         .byte      6
      000E6B 53 50 41 43 45 53     2634         .ascii     "SPACES"
      000E71                       2635 SPACS:
      000E71 CD 0A 44         [ 4] 2636         CALL     ZERO
      000E74 CD 07 DC         [ 4] 2637         CALL     MAX
      000E77 CD 04 AC         [ 4] 2638         CALL     TOR
      000E7A 20 03            [ 2] 2639         JRA      CHAR2
      000E7C CD 0E 62         [ 4] 2640 CHAR1:  CALL     SPACE
      000E7F CD 03 C8         [ 4] 2641 CHAR2:  CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E82 0E 7C                 2642         .word    CHAR1
      000E84 81               [ 4] 2643         RET
                                   2644 
                                   2645 ;       TYPE    ( b u -- )
                                   2646 ;       Output u characters from b.
      000E85 0E 6A                 2647         .word      LINK
                           000E87  2648 LINK = . 
      000E87 04                    2649         .byte      4
      000E88 54 59 50 45           2650         .ascii     "TYPE"
      000E8C                       2651 TYPES:
      000E8C CD 04 AC         [ 4] 2652         CALL     TOR
      000E8F 20 0C            [ 2] 2653         JRA     TYPE2
      000E91 CD 04 E3         [ 4] 2654 TYPE1:  CALL     DUPP
      000E94 CD 04 5A         [ 4] 2655         CALL     CAT
      000E97 CD 03 9E         [ 4] 2656         CALL     EMIT
      000E9A CD 09 D8         [ 4] 2657         CALL     ONEP
      000E9D CD 03 C8         [ 4] 2658 TYPE2:  CALL     DONXT
      000EA0 0E 91                 2659         .word      TYPE1
      000EA2 CC 04 D9         [ 2] 2660         JP     DROP
                                   2661 
                                   2662 ;       CR      ( -- )
                                   2663 ;       Output a carriage return
                                   2664 ;       and a line feed.
      000EA5 0E 87                 2665         .word      LINK
                           000EA7  2666 LINK = . 
      000EA7 02                    2667         .byte      2
      000EA8 43 52                 2668         .ascii     "CR"
      000EAA                       2669 CR:
      000EAA CD 03 B4         [ 4] 2670         CALL     DOLIT
      000EAD 00 0D                 2671         .word      CRR
      000EAF CD 03 9E         [ 4] 2672         CALL     EMIT
      000EB2 CD 03 B4         [ 4] 2673         CALL     DOLIT
      000EB5 00 0A                 2674         .word      LF
      000EB7 CC 03 9E         [ 2] 2675         JP     EMIT
                                   2676 
                                   2677 ;       do$     ( -- a )
                                   2678 ;       Return  address of a compiled
                                   2679 ;       string.
      000EBA 0E A7                 2680         .word      LINK
                           000EBC  2681 LINK = . 
      000EBC 43                    2682 	.byte      COMPO+3
      000EBD 44 4F 24              2683         .ascii     "DO$"
      000EC0                       2684 DOSTR:
      000EC0 CD 04 8D         [ 4] 2685         CALL     RFROM
      000EC3 CD 04 A0         [ 4] 2686         CALL     RAT
      000EC6 CD 04 8D         [ 4] 2687         CALL     RFROM
      000EC9 CD 0B 1B         [ 4] 2688         CALL     COUNT
      000ECC CD 06 DE         [ 4] 2689         CALL     PLUS
      000ECF CD 04 AC         [ 4] 2690         CALL     TOR
      000ED2 CD 04 F3         [ 4] 2691         CALL     SWAPP
      000ED5 CD 04 AC         [ 4] 2692         CALL     TOR
      000ED8 81               [ 4] 2693         RET
                                   2694 
                                   2695 ;       $"|     ( -- a )
                                   2696 ;       Run time routine compiled by $".
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2697 ;       Return address of a compiled string.
      000ED9 0E BC                 2698         .word      LINK
                           000EDB  2699 LINK = . 
      000EDB 43                    2700 	.byte      COMPO+3
      000EDC 24 22 7C              2701         .byte     '$','"','|'
      000EDF                       2702 STRQP:
      000EDF CD 0E C0         [ 4] 2703         CALL     DOSTR
      000EE2 81               [ 4] 2704         RET
                                   2705 
                                   2706 ;       ."|     ( -- )
                                   2707 ;       Run time routine of ." .
                                   2708 ;       Output a compiled string.
      000EE3 0E DB                 2709         .word      LINK
                           000EE5  2710 LINK = . 
      000EE5 43                    2711 	.byte      COMPO+3
      000EE6 2E 22 7C              2712         .byte     '.','"','|'
      000EE9                       2713 DOTQP:
      000EE9 CD 0E C0         [ 4] 2714         CALL     DOSTR
      000EEC CD 0B 1B         [ 4] 2715         CALL     COUNT
      000EEF CC 0E 8C         [ 2] 2716         JP     TYPES
                                   2717 
                                   2718 ;       .R      ( n +n -- )
                                   2719 ;       Display an integer in a field
                                   2720 ;       of n columns, right justified.
      000EF2 0E E5                 2721         .word      LINK
                           000EF4  2722 LINK = . 
      000EF4 02                    2723         .byte      2
      000EF5 2E 52                 2724         .ascii     ".R"
      000EF7                       2725 DOTR:
      000EF7 CD 04 AC         [ 4] 2726         CALL     TOR
      000EFA CD 0C CC         [ 4] 2727         CALL     STR
      000EFD CD 04 8D         [ 4] 2728         CALL     RFROM
      000F00 CD 05 0D         [ 4] 2729         CALL     OVER
      000F03 CD 07 57         [ 4] 2730         CALL     SUBB
      000F06 CD 0E 71         [ 4] 2731         CALL     SPACS
      000F09 CC 0E 8C         [ 2] 2732         JP     TYPES
                                   2733 
                                   2734 ;       U.R     ( u +n -- )
                                   2735 ;       Display an unsigned integer
                                   2736 ;       in n column, right justified.
      000F0C 0E F4                 2737         .word      LINK
                           000F0E  2738 LINK = . 
      000F0E 03                    2739         .byte      3
      000F0F 55 2E 52              2740         .ascii     "U.R"
      000F12                       2741 UDOTR:
      000F12 CD 04 AC         [ 4] 2742         CALL     TOR
      000F15 CD 0C 4F         [ 4] 2743         CALL     BDIGS
      000F18 CD 0C 89         [ 4] 2744         CALL     DIGS
      000F1B CD 0C B4         [ 4] 2745         CALL     EDIGS
      000F1E CD 04 8D         [ 4] 2746         CALL     RFROM
      000F21 CD 05 0D         [ 4] 2747         CALL     OVER
      000F24 CD 07 57         [ 4] 2748         CALL     SUBB
      000F27 CD 0E 71         [ 4] 2749         CALL     SPACS
      000F2A CC 0E 8C         [ 2] 2750         JP     TYPES
                                   2751 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2752 ;       U.      ( u -- )
                                   2753 ;       Display an unsigned integer
                                   2754 ;       in free format.
      000F2D 0F 0E                 2755         .word      LINK
                           000F2F  2756 LINK = . 
      000F2F 02                    2757         .byte      2
      000F30 55 2E                 2758         .ascii     "U."
      000F32                       2759 UDOT:
      000F32 CD 0C 4F         [ 4] 2760         CALL     BDIGS
      000F35 CD 0C 89         [ 4] 2761         CALL     DIGS
      000F38 CD 0C B4         [ 4] 2762         CALL     EDIGS
      000F3B CD 0E 62         [ 4] 2763         CALL     SPACE
      000F3E CC 0E 8C         [ 2] 2764         JP     TYPES
                                   2765 
                                   2766 ;       .       ( w -- )
                                   2767 ;       Display an integer in free
                                   2768 ;       format, preceeded by a space.
      000F41 0F 2F                 2769         .word      LINK
                           000F43  2770 LINK = . 
      000F43 01                    2771         .byte      1
      000F44 2E                    2772         .ascii     "."
      000F45                       2773 DOT:
      000F45 CD 05 A0         [ 4] 2774         CALL     BASE
      000F48 CD 04 3C         [ 4] 2775         CALL     AT
      000F4B CD 03 B4         [ 4] 2776         CALL     DOLIT
      000F4E 00 0A                 2777         .word      10
      000F50 CD 05 58         [ 4] 2778         CALL     XORR    ;?decimal
      000F53 CD 03 E7         [ 4] 2779         CALL     QBRAN
      000F56 0F 5B                 2780         .word      DOT1
      000F58 CC 0F 32         [ 2] 2781         JP     UDOT
      000F5B CD 0C CC         [ 4] 2782 DOT1:   CALL     STR
      000F5E CD 0E 62         [ 4] 2783         CALL     SPACE
      000F61 CC 0E 8C         [ 2] 2784         JP     TYPES
                                   2785 
                                   2786 ;       ?       ( a -- )
                                   2787 ;       Display contents in memory cell.
      000F64 0F 43                 2788         .word      LINK
                                   2789         
                           000F66  2790 LINK = . 
      000F66 01                    2791         .byte      1
      000F67 3F                    2792         .ascii     "?"
      000F68                       2793 QUEST:
      000F68 CD 04 3C         [ 4] 2794         CALL     AT
      000F6B CC 0F 45         [ 2] 2795         JP     DOT
                                   2796 
                                   2797 ;; Parsing
                                   2798 
                                   2799 ;       parse   ( b u c -- b u delta ; <string> )
                                   2800 ;       Scan string delimited by c.
                                   2801 ;       Return found string and its offset.
      000F6E 0F 66                 2802         .word      LINK
                           000F70  2803 LINK = . 
      000F70 05                    2804         .byte      5
      000F71 70 61 72 73 65        2805         .ascii     "parse"
      000F76                       2806 PARS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F76 CD 05 AF         [ 4] 2807         CALL     TEMP
      000F79 CD 04 25         [ 4] 2808         CALL     STORE
      000F7C CD 05 0D         [ 4] 2809         CALL     OVER
      000F7F CD 04 AC         [ 4] 2810         CALL     TOR
      000F82 CD 04 E3         [ 4] 2811         CALL     DUPP
      000F85 CD 03 E7         [ 4] 2812         CALL     QBRAN
      000F88 10 2E                 2813         .word    PARS8
      000F8A CD 09 E5         [ 4] 2814         CALL     ONEM
      000F8D CD 05 AF         [ 4] 2815         CALL     TEMP
      000F90 CD 04 3C         [ 4] 2816         CALL     AT
      000F93 CD 0A 37         [ 4] 2817         CALL     BLANK
      000F96 CD 07 7F         [ 4] 2818         CALL     EQUAL
      000F99 CD 03 E7         [ 4] 2819         CALL     QBRAN
      000F9C 0F CF                 2820         .word      PARS3
      000F9E CD 04 AC         [ 4] 2821         CALL     TOR
      000FA1 CD 0A 37         [ 4] 2822 PARS1:  CALL     BLANK
      000FA4 CD 05 0D         [ 4] 2823         CALL     OVER
      000FA7 CD 04 5A         [ 4] 2824         CALL     CAT     ;skip leading blanks ONLY
      000FAA CD 07 57         [ 4] 2825         CALL     SUBB
      000FAD CD 05 1C         [ 4] 2826         CALL     ZLESS
      000FB0 CD 06 F8         [ 4] 2827         CALL     INVER
      000FB3 CD 03 E7         [ 4] 2828         CALL     QBRAN
      000FB6 0F CC                 2829         .word      PARS2
      000FB8 CD 09 D8         [ 4] 2830         CALL     ONEP
      000FBB CD 03 C8         [ 4] 2831         CALL     DONXT
      000FBE 0F A1                 2832         .word      PARS1
      000FC0 CD 04 8D         [ 4] 2833         CALL     RFROM
      000FC3 CD 04 D9         [ 4] 2834         CALL     DROP
      000FC6 CD 0A 44         [ 4] 2835         CALL     ZERO
      000FC9 CC 04 E3         [ 2] 2836         JP     DUPP
      000FCC CD 04 8D         [ 4] 2837 PARS2:  CALL     RFROM
      000FCF CD 05 0D         [ 4] 2838 PARS3:  CALL     OVER
      000FD2 CD 04 F3         [ 4] 2839         CALL     SWAPP
      000FD5 CD 04 AC         [ 4] 2840         CALL     TOR
      000FD8 CD 05 AF         [ 4] 2841 PARS4:  CALL     TEMP
      000FDB CD 04 3C         [ 4] 2842         CALL     AT
      000FDE CD 05 0D         [ 4] 2843         CALL     OVER
      000FE1 CD 04 5A         [ 4] 2844         CALL     CAT
      000FE4 CD 07 57         [ 4] 2845         CALL     SUBB    ;scan for delimiter
      000FE7 CD 05 AF         [ 4] 2846         CALL     TEMP
      000FEA CD 04 3C         [ 4] 2847         CALL     AT
      000FED CD 0A 37         [ 4] 2848         CALL     BLANK
      000FF0 CD 07 7F         [ 4] 2849         CALL     EQUAL
      000FF3 CD 03 E7         [ 4] 2850         CALL     QBRAN
      000FF6 0F FB                 2851         .word      PARS5
      000FF8 CD 05 1C         [ 4] 2852         CALL     ZLESS
      000FFB CD 03 E7         [ 4] 2853 PARS5:  CALL     QBRAN
      000FFE 10 10                 2854         .word      PARS6
      001000 CD 09 D8         [ 4] 2855         CALL     ONEP
      001003 CD 03 C8         [ 4] 2856         CALL     DONXT
      001006 0F D8                 2857         .word      PARS4
      001008 CD 04 E3         [ 4] 2858         CALL     DUPP
      00100B CD 04 AC         [ 4] 2859         CALL     TOR
      00100E 20 0F            [ 2] 2860         JRA     PARS7
      001010 CD 04 8D         [ 4] 2861 PARS6:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001013 CD 04 D9         [ 4] 2862         CALL     DROP
      001016 CD 04 E3         [ 4] 2863         CALL     DUPP
      001019 CD 09 D8         [ 4] 2864         CALL     ONEP
      00101C CD 04 AC         [ 4] 2865         CALL     TOR
      00101F CD 05 0D         [ 4] 2866 PARS7:  CALL     OVER
      001022 CD 07 57         [ 4] 2867         CALL     SUBB
      001025 CD 04 8D         [ 4] 2868         CALL     RFROM
      001028 CD 04 8D         [ 4] 2869         CALL     RFROM
      00102B CC 07 57         [ 2] 2870         JP     SUBB
      00102E CD 05 0D         [ 4] 2871 PARS8:  CALL     OVER
      001031 CD 04 8D         [ 4] 2872         CALL     RFROM
      001034 CC 07 57         [ 2] 2873         JP     SUBB
                                   2874 
                                   2875 ;       PARSE   ( c -- b u ; <string> )
                                   2876 ;       Scan input stream and return
                                   2877 ;       counted string delimited by c.
      001037 0F 70                 2878         .word      LINK
                           001039  2879 LINK = . 
      001039 05                    2880         .byte      5
      00103A 50 41 52 53 45        2881         .ascii     "PARSE"
      00103F                       2882 PARSE:
      00103F CD 04 AC         [ 4] 2883         CALL     TOR
      001042 CD 0B 54         [ 4] 2884         CALL     TIB
      001045 CD 05 BE         [ 4] 2885         CALL     INN
      001048 CD 04 3C         [ 4] 2886         CALL     AT
      00104B CD 06 DE         [ 4] 2887         CALL     PLUS    ;current input buffer pointer
      00104E CD 05 CE         [ 4] 2888         CALL     NTIB
      001051 CD 04 3C         [ 4] 2889         CALL     AT
      001054 CD 05 BE         [ 4] 2890         CALL     INN
      001057 CD 04 3C         [ 4] 2891         CALL     AT
      00105A CD 07 57         [ 4] 2892         CALL     SUBB    ;remaining count
      00105D CD 04 8D         [ 4] 2893         CALL     RFROM
      001060 CD 0F 76         [ 4] 2894         CALL     PARS
      001063 CD 05 BE         [ 4] 2895         CALL     INN
      001066 CC 0A B4         [ 2] 2896         JP     PSTOR
                                   2897 
                                   2898 ;       .(      ( -- )
                                   2899 ;       Output following string up to next ) .
      001069 10 39                 2900         .word      LINK
                           00106B  2901 LINK = . 
      00106B 82                    2902 	.byte      IMEDD+2
      00106C 2E 28                 2903         .ascii     ".("
      00106E                       2904 DOTPR:
      00106E CD 03 B4         [ 4] 2905         CALL     DOLIT
      001071 00 29                 2906         .word     41	; ")"
      001073 CD 10 3F         [ 4] 2907         CALL     PARSE
      001076 CC 0E 8C         [ 2] 2908         JP     TYPES
                                   2909 
                                   2910 ;       (       ( -- )
                                   2911 ;       Ignore following string up to next ).
                                   2912 ;       A comment.
      001079 10 6B                 2913         .word      LINK
                           00107B  2914 LINK = . 
      00107B 81                    2915 	.byte      IMEDD+1
      00107C 28                    2916         .ascii     "("
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      00107D                       2917 PAREN:
      00107D CD 03 B4         [ 4] 2918         CALL     DOLIT
      001080 00 29                 2919         .word     41	; ")"
      001082 CD 10 3F         [ 4] 2920         CALL     PARSE
      001085 CC 06 BE         [ 2] 2921         JP     DDROP
                                   2922 
                                   2923 ;       \       ( -- )
                                   2924 ;       Ignore following text till
                                   2925 ;       end of line.
      001088 10 7B                 2926         .word      LINK
                           00108A  2927 LINK = . 
      00108A 81                    2928 	.byte      IMEDD+1
      00108B 5C                    2929         .ascii     "\"
      00108C                       2930 BKSLA:
      00108C 90 AE 00 0C      [ 2] 2931         ldw y,#UCTIB ; #TIB  
      001090 90 FE            [ 2] 2932         ldw y,(y)
      001092 90 89            [ 2] 2933         pushw y ; count in TIB 
      001094 90 AE 00 0A      [ 2] 2934         ldw y,#UINN ; >IN 
      001098 90 BF 24         [ 2] 2935         ldw YTEMP,y
      00109B 90 85            [ 2] 2936         popw y 
      00109D 91 CF 24         [ 5] 2937         ldw [YTEMP],y
      0010A0 81               [ 4] 2938         ret 
                                   2939 
                                   2940 ;       WORD    ( c -- a ; <string> )
                                   2941 ;       Parse a word from input stream
                                   2942 ;       and copy it to code dictionary.
      0010A1 10 8A                 2943         .word      LINK
                           0010A3  2944 LINK = . 
      0010A3 04                    2945         .byte      4
      0010A4 57 4F 52 44           2946         .ascii     "WORD"
      0010A8                       2947 WORDD:
      0010A8 CD 10 3F         [ 4] 2948         CALL     PARSE
      0010AB CD 0B 32         [ 4] 2949         CALL     HERE
      0010AE CD 09 AD         [ 4] 2950         CALL     CELLP
      0010B1 CC 0B F2         [ 2] 2951         JP     PACKS
                                   2952 
                                   2953 ;       TOKEN   ( -- a ; <string> )
                                   2954 ;       Parse a word from input stream
                                   2955 ;       and copy it to name dictionary.
      0010B4 10 A3                 2956         .word      LINK
                           0010B6  2957 LINK = . 
      0010B6 05                    2958         .byte      5
      0010B7 54 4F 4B 45 4E        2959         .ascii     "TOKEN"
      0010BC                       2960 TOKEN:
      0010BC CD 0A 37         [ 4] 2961         CALL     BLANK
      0010BF CC 10 A8         [ 2] 2962         JP     WORDD
                                   2963 
                                   2964 ;; Dictionary search
                                   2965 
                                   2966 ;       NAME>   ( na -- ca )
                                   2967 ;       Return a code address given
                                   2968 ;       a name address.
      0010C2 10 B6                 2969         .word      LINK
                           0010C4  2970 LINK = . 
      0010C4 05                    2971         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010C5 4E 41 4D 45 3E        2972         .ascii     "NAME>"
      0010CA                       2973 NAMET:
      0010CA CD 0B 1B         [ 4] 2974         CALL     COUNT
      0010CD CD 03 B4         [ 4] 2975         CALL     DOLIT
      0010D0 00 1F                 2976         .word      31
      0010D2 CD 05 2F         [ 4] 2977         CALL     ANDD
      0010D5 CC 06 DE         [ 2] 2978         JP     PLUS
                                   2979 
                                   2980 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2981 ;       Compare u cells in two
                                   2982 ;       strings. Return 0 if identical.
      0010D8 10 C4                 2983         .word      LINK
                           0010DA  2984 LINK = . 
      0010DA 05                    2985         .byte       5
      0010DB 53 41 4D 45 3F        2986         .ascii     "SAME?"
      0010E0                       2987 SAMEQ:
      0010E0 CD 09 E5         [ 4] 2988         CALL     ONEM
      0010E3 CD 04 AC         [ 4] 2989         CALL     TOR
      0010E6 20 29            [ 2] 2990         JRA     SAME2
      0010E8 CD 05 0D         [ 4] 2991 SAME1:  CALL     OVER
      0010EB CD 04 A0         [ 4] 2992         CALL     RAT
      0010EE CD 06 DE         [ 4] 2993         CALL     PLUS
      0010F1 CD 04 5A         [ 4] 2994         CALL     CAT
      0010F4 CD 05 0D         [ 4] 2995         CALL     OVER
      0010F7 CD 04 A0         [ 4] 2996         CALL     RAT
      0010FA CD 06 DE         [ 4] 2997         CALL     PLUS
      0010FD CD 04 5A         [ 4] 2998         CALL     CAT
      001100 CD 07 57         [ 4] 2999         CALL     SUBB
      001103 CD 06 8D         [ 4] 3000         CALL     QDUP
      001106 CD 03 E7         [ 4] 3001         CALL     QBRAN
      001109 11 11                 3002         .word      SAME2
      00110B CD 04 8D         [ 4] 3003         CALL     RFROM
      00110E CC 04 D9         [ 2] 3004         JP     DROP
      001111 CD 03 C8         [ 4] 3005 SAME2:  CALL     DONXT
      001114 10 E8                 3006         .word      SAME1
      001116 CC 0A 44         [ 2] 3007         JP     ZERO
                                   3008 
                                   3009 ;       find    ( a va -- ca na | a F )
                                   3010 ;       Search vocabulary for string.
                                   3011 ;       Return ca and na if succeeded.
      001119 10 DA                 3012         .word      LINK
                           00111B  3013 LINK = . 
      00111B 04                    3014         .byte      4
      00111C 46 49 4E 44           3015         .ascii     "FIND"
      001120                       3016 FIND:
      001120 CD 04 F3         [ 4] 3017         CALL     SWAPP
      001123 CD 04 E3         [ 4] 3018         CALL     DUPP
      001126 CD 04 5A         [ 4] 3019         CALL     CAT
      001129 CD 05 AF         [ 4] 3020         CALL     TEMP
      00112C CD 04 25         [ 4] 3021         CALL     STORE
      00112F CD 04 E3         [ 4] 3022         CALL     DUPP
      001132 CD 04 3C         [ 4] 3023         CALL     AT
      001135 CD 04 AC         [ 4] 3024         CALL     TOR
      001138 CD 09 AD         [ 4] 3025         CALL     CELLP
      00113B CD 04 F3         [ 4] 3026         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00113E CD 04 3C         [ 4] 3027 FIND1:  CALL     AT
      001141 CD 04 E3         [ 4] 3028         CALL     DUPP
      001144 CD 03 E7         [ 4] 3029         CALL     QBRAN
      001147 11 7D                 3030         .word      FIND6
      001149 CD 04 E3         [ 4] 3031         CALL     DUPP
      00114C CD 04 3C         [ 4] 3032         CALL     AT
      00114F CD 03 B4         [ 4] 3033         CALL     DOLIT
      001152 1F 7F                 3034         .word      MASKK
      001154 CD 05 2F         [ 4] 3035         CALL     ANDD
      001157 CD 04 A0         [ 4] 3036         CALL     RAT
      00115A CD 05 58         [ 4] 3037         CALL     XORR
      00115D CD 03 E7         [ 4] 3038         CALL     QBRAN
      001160 11 6C                 3039         .word      FIND2
      001162 CD 09 AD         [ 4] 3040         CALL     CELLP
      001165 CD 03 B4         [ 4] 3041         CALL     DOLIT
      001168 FF FF                 3042         .word     0xFFFF
      00116A 20 0C            [ 2] 3043         JRA     FIND3
      00116C CD 09 AD         [ 4] 3044 FIND2:  CALL     CELLP
      00116F CD 05 AF         [ 4] 3045         CALL     TEMP
      001172 CD 04 3C         [ 4] 3046         CALL     AT
      001175 CD 10 E0         [ 4] 3047         CALL     SAMEQ
      001178 CD 03 FE         [ 4] 3048 FIND3:  CALL     BRAN
      00117B 11 8C                 3049         .word      FIND4
      00117D CD 04 8D         [ 4] 3050 FIND6:  CALL     RFROM
      001180 CD 04 D9         [ 4] 3051         CALL     DROP
      001183 CD 04 F3         [ 4] 3052         CALL     SWAPP
      001186 CD 09 BC         [ 4] 3053         CALL     CELLM
      001189 CC 04 F3         [ 2] 3054         JP     SWAPP
      00118C CD 03 E7         [ 4] 3055 FIND4:  CALL     QBRAN
      00118F 11 99                 3056         .word      FIND5
      001191 CD 09 BC         [ 4] 3057         CALL     CELLM
      001194 CD 09 BC         [ 4] 3058         CALL     CELLM
      001197 20 A5            [ 2] 3059         JRA     FIND1
      001199 CD 04 8D         [ 4] 3060 FIND5:  CALL     RFROM
      00119C CD 04 D9         [ 4] 3061         CALL     DROP
      00119F CD 04 F3         [ 4] 3062         CALL     SWAPP
      0011A2 CD 04 D9         [ 4] 3063         CALL     DROP
      0011A5 CD 09 BC         [ 4] 3064         CALL     CELLM
      0011A8 CD 04 E3         [ 4] 3065         CALL     DUPP
      0011AB CD 10 CA         [ 4] 3066         CALL     NAMET
      0011AE CC 04 F3         [ 2] 3067         JP     SWAPP
                                   3068 
                                   3069 ;       NAME?   ( a -- ca na | a F )
                                   3070 ;       Search vocabularies for a string.
      0011B1 11 1B                 3071         .word      LINK
                           0011B3  3072 LINK = . 
      0011B3 05                    3073         .byte      5
      0011B4 4E 41 4D 45 3F        3074         .ascii     "NAME?"
      0011B9                       3075 NAMEQ:
      0011B9 CD 06 23         [ 4] 3076         CALL   CNTXT
      0011BC CC 11 20         [ 2] 3077         JP     FIND
                                   3078 
                                   3079 ;; Terminal response
                                   3080 
                                   3081 ;       ^H      ( bot eot cur -- bot eot cur )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3082 ;       Backup cursor by one character.
      0011BF 11 B3                 3083         .word      LINK
                           0011C1  3084 LINK = . 
      0011C1 02                    3085         .byte      2
      0011C2 5E 48                 3086         .ascii     "^H"
      0011C4                       3087 BKSP:
      0011C4 CD 04 AC         [ 4] 3088         CALL     TOR
      0011C7 CD 05 0D         [ 4] 3089         CALL     OVER
      0011CA CD 04 8D         [ 4] 3090         CALL     RFROM
      0011CD CD 04 F3         [ 4] 3091         CALL     SWAPP
      0011D0 CD 05 0D         [ 4] 3092         CALL     OVER
      0011D3 CD 05 58         [ 4] 3093         CALL     XORR
      0011D6 CD 03 E7         [ 4] 3094         CALL     QBRAN
      0011D9 11 F4                 3095         .word      BACK1
      0011DB CD 03 B4         [ 4] 3096         CALL     DOLIT
      0011DE 00 08                 3097         .word      BKSPP
      0011E0 CD 03 9E         [ 4] 3098         CALL     EMIT
      0011E3 CD 09 E5         [ 4] 3099         CALL     ONEM
      0011E6 CD 0A 37         [ 4] 3100         CALL     BLANK
      0011E9 CD 03 9E         [ 4] 3101         CALL     EMIT
      0011EC CD 03 B4         [ 4] 3102         CALL     DOLIT
      0011EF 00 08                 3103         .word      BKSPP
      0011F1 CC 03 9E         [ 2] 3104         JP     EMIT
      0011F4 81               [ 4] 3105 BACK1:  RET
                                   3106 
                                   3107 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3108 ;       Accept and echo key stroke
                                   3109 ;       and bump cursor.
      0011F5 11 C1                 3110         .word      LINK
                           0011F7  3111 LINK = . 
      0011F7 03                    3112         .byte      3
      0011F8 54 41 50              3113         .ascii     "TAP"
      0011FB                       3114 TAP:
      0011FB CD 04 E3         [ 4] 3115         CALL     DUPP
      0011FE CD 03 9E         [ 4] 3116         CALL     EMIT
      001201 CD 05 0D         [ 4] 3117         CALL     OVER
      001204 CD 04 49         [ 4] 3118         CALL     CSTOR
      001207 CC 09 D8         [ 2] 3119         JP     ONEP
                                   3120 
                                   3121 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3122 ;       Process a key stroke,
                                   3123 ;       CR or backspace.
      00120A 11 F7                 3124         .word      LINK
                           00120C  3125 LINK = . 
      00120C 04                    3126         .byte      4
      00120D 4B 54 41 50           3127         .ascii     "KTAP"
      001211                       3128 KTAP:
      001211 CD 04 E3         [ 4] 3129         CALL     DUPP
      001214 CD 03 B4         [ 4] 3130         CALL     DOLIT
      001217 00 0D                 3131         .word      CRR
      001219 CD 05 58         [ 4] 3132         CALL     XORR
      00121C CD 03 E7         [ 4] 3133         CALL     QBRAN
      00121F 12 37                 3134         .word      KTAP2
      001221 CD 03 B4         [ 4] 3135         CALL     DOLIT
      001224 00 08                 3136         .word      BKSPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001226 CD 05 58         [ 4] 3137         CALL     XORR
      001229 CD 03 E7         [ 4] 3138         CALL     QBRAN
      00122C 12 34                 3139         .word      KTAP1
      00122E CD 0A 37         [ 4] 3140         CALL     BLANK
      001231 CC 11 FB         [ 2] 3141         JP     TAP
      001234 CC 11 C4         [ 2] 3142 KTAP1:  JP     BKSP
      001237 CD 04 D9         [ 4] 3143 KTAP2:  CALL     DROP
      00123A CD 04 F3         [ 4] 3144         CALL     SWAPP
      00123D CD 04 D9         [ 4] 3145         CALL     DROP
      001240 CC 04 E3         [ 2] 3146         JP     DUPP
                                   3147 
                                   3148 ;       accept  ( b u -- b u )
                                   3149 ;       Accept characters to input
                                   3150 ;       buffer. Return with actual count.
      001243 12 0C                 3151         .word      LINK
                           001245  3152 LINK = . 
      001245 06                    3153         .byte      6
      001246 41 43 43 45 50 54     3154         .ascii     "ACCEPT"
      00124C                       3155 ACCEP:
      00124C CD 05 0D         [ 4] 3156         CALL     OVER
      00124F CD 06 DE         [ 4] 3157         CALL     PLUS
      001252 CD 05 0D         [ 4] 3158         CALL     OVER
      001255 CD 06 C9         [ 4] 3159 ACCP1:  CALL     DDUP
      001258 CD 05 58         [ 4] 3160         CALL     XORR
      00125B CD 03 E7         [ 4] 3161         CALL     QBRAN
      00125E 12 80                 3162         .word      ACCP4
      001260 CD 0E 2A         [ 4] 3163         CALL     KEY
      001263 CD 04 E3         [ 4] 3164         CALL     DUPP
      001266 CD 0A 37         [ 4] 3165         CALL     BLANK
      001269 CD 03 B4         [ 4] 3166         CALL     DOLIT
      00126C 00 7F                 3167         .word      127
      00126E CD 08 19         [ 4] 3168         CALL     WITHI
      001271 CD 03 E7         [ 4] 3169         CALL     QBRAN
      001274 12 7B                 3170         .word      ACCP2
      001276 CD 11 FB         [ 4] 3171         CALL     TAP
      001279 20 03            [ 2] 3172         JRA     ACCP3
      00127B CD 12 11         [ 4] 3173 ACCP2:  CALL     KTAP
      00127E 20 D5            [ 2] 3174 ACCP3:  JRA     ACCP1
      001280 CD 04 D9         [ 4] 3175 ACCP4:  CALL     DROP
      001283 CD 05 0D         [ 4] 3176         CALL     OVER
      001286 CC 07 57         [ 2] 3177         JP     SUBB
                                   3178 
                                   3179 ;       QUERY   ( -- )
                                   3180 ;       Accept input stream to
                                   3181 ;       terminal input buffer.
      001289 12 45                 3182         .word      LINK
                                   3183         
                           00128B  3184 LINK = . 
      00128B 05                    3185         .byte      5
      00128C 51 55 45 52 59        3186         .ascii     "QUERY"
      001291                       3187 QUERY:
      001291 CD 0B 54         [ 4] 3188         CALL     TIB
      001294 CD 03 B4         [ 4] 3189         CALL     DOLIT
      001297 00 50                 3190         .word      80
      001299 CD 12 4C         [ 4] 3191         CALL     ACCEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      00129C CD 05 CE         [ 4] 3192         CALL     NTIB
      00129F CD 04 25         [ 4] 3193         CALL     STORE
      0012A2 CD 04 D9         [ 4] 3194         CALL     DROP
      0012A5 CD 0A 44         [ 4] 3195         CALL     ZERO
      0012A8 CD 05 BE         [ 4] 3196         CALL     INN
      0012AB CC 04 25         [ 2] 3197         JP     STORE
                                   3198 
                                   3199 ;       ABORT   ( -- )
                                   3200 ;       Reset data stack and
                                   3201 ;       jump to QUIT.
      0012AE 12 8B                 3202         .word      LINK
                           0012B0  3203 LINK = . 
      0012B0 05                    3204         .byte      5
      0012B1 41 42 4F 52 54        3205         .ascii     "ABORT"
      0012B6                       3206 ABORT:
      0012B6 CD 13 AD         [ 4] 3207         CALL     PRESE
      0012B9 CC 13 CA         [ 2] 3208         JP     QUIT
                                   3209 
                                   3210 ;       abort"  ( f -- )
                                   3211 ;       Run time routine of ABORT".
                                   3212 ;       Abort with a message.
      0012BC 12 B0                 3213         .word      LINK
                           0012BE  3214 LINK = . 
      0012BE 46                    3215 	.byte      COMPO+6
      0012BF 41 42 4F 52 54        3216         .ascii     "ABORT"
      0012C4 22                    3217         .byte      '"'
      0012C5                       3218 ABORQ:
      0012C5 CD 03 E7         [ 4] 3219         CALL     QBRAN
      0012C8 12 E4                 3220         .word      ABOR2   ;text flag
      0012CA CD 0E C0         [ 4] 3221         CALL     DOSTR
      0012CD CD 0E 62         [ 4] 3222 ABOR1:  CALL     SPACE
      0012D0 CD 0B 1B         [ 4] 3223         CALL     COUNT
      0012D3 CD 0E 8C         [ 4] 3224         CALL     TYPES
      0012D6 CD 03 B4         [ 4] 3225         CALL     DOLIT
      0012D9 00 3F                 3226         .word     63 ; "?"
      0012DB CD 03 9E         [ 4] 3227         CALL     EMIT
      0012DE CD 0E AA         [ 4] 3228         CALL     CR
      0012E1 CC 12 B6         [ 2] 3229         JP     ABORT   ;pass error string
      0012E4 CD 0E C0         [ 4] 3230 ABOR2:  CALL     DOSTR
      0012E7 CC 04 D9         [ 2] 3231         JP     DROP
                                   3232 
                                   3233 ;; The text interpreter
                                   3234 
                                   3235 ;       $INTERPRET      ( a -- )
                                   3236 ;       Interpret a word. If failed,
                                   3237 ;       try to convert it to an integer.
      0012EA 12 BE                 3238         .word      LINK
                           0012EC  3239 LINK = . 
      0012EC 0A                    3240         .byte      10
      0012ED 24 49 4E 54 45 52 50  3241         .ascii     "$INTERPRET"
             52 45 54
      0012F7                       3242 INTER:
      0012F7 CD 11 B9         [ 4] 3243         CALL     NAMEQ
      0012FA CD 06 8D         [ 4] 3244         CALL     QDUP    ;?defined
      0012FD CD 03 E7         [ 4] 3245         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001300 13 21                 3246         .word      INTE1
      001302 CD 04 3C         [ 4] 3247         CALL     AT
      001305 CD 03 B4         [ 4] 3248         CALL     DOLIT
      001308 40 00                 3249 	.word       0x4000	; COMPO*256
      00130A CD 05 2F         [ 4] 3250         CALL     ANDD    ;?compile only lexicon bits
      00130D CD 12 C5         [ 4] 3251         CALL     ABORQ
      001310 0D                    3252         .byte      13
      001311 20 63 6F 6D 70 69 6C  3253         .ascii     " compile only"
             65 20 6F 6E 6C 79
      00131E CC 04 0E         [ 2] 3254         JP     EXECU
      001321 CD 0D 57         [ 4] 3255 INTE1:  CALL     NUMBQ   ;convert a number
      001324 CD 03 E7         [ 4] 3256         CALL     QBRAN
      001327 12 CD                 3257         .word    ABOR1
      001329 81               [ 4] 3258         RET
                                   3259 
                                   3260 ;       [       ( -- )
                                   3261 ;       Start  text interpreter.
      00132A 12 EC                 3262         .word      LINK
                           00132C  3263 LINK = . 
      00132C 81                    3264 	.byte      IMEDD+1
      00132D 5B                    3265         .ascii     "["
      00132E                       3266 LBRAC:
      00132E CD 03 B4         [ 4] 3267         CALL   DOLIT
      001331 12 F7                 3268         .word  INTER
      001333 CD 06 01         [ 4] 3269         CALL   TEVAL
      001336 CC 04 25         [ 2] 3270         JP     STORE
                                   3271 
                                   3272 ;       .OK     ( -- )
                                   3273 ;       Display 'ok' while interpreting.
      001339 13 2C                 3274         .word      LINK
                           00133B  3275 LINK = . 
      00133B 03                    3276         .byte      3
      00133C 2E 4F 4B              3277         .ascii     ".OK"
      00133F                       3278 DOTOK:
      00133F CD 03 B4         [ 4] 3279         CALL     DOLIT
      001342 12 F7                 3280         .word      INTER
      001344 CD 06 01         [ 4] 3281         CALL     TEVAL
      001347 CD 04 3C         [ 4] 3282         CALL     AT
      00134A CD 07 7F         [ 4] 3283         CALL     EQUAL
      00134D CD 03 E7         [ 4] 3284         CALL     QBRAN
      001350 13 59                 3285         .word      DOTO1
      001352 CD 0E E9         [ 4] 3286         CALL     DOTQP
      001355 03                    3287         .byte      3
      001356 20 6F 6B              3288         .ascii     " ok"
      001359 CC 0E AA         [ 2] 3289 DOTO1:  JP     CR
                                   3290 
                                   3291 ;       ?STACK  ( -- )
                                   3292 ;       Abort if stack underflows.
      00135C 13 3B                 3293         .word      LINK
                           00135E  3294 LINK = . 
      00135E 06                    3295         .byte      6
      00135F 3F 53 54 41 43 4B     3296         .ascii     "?STACK"
      001365                       3297 QSTAC: 
      001365 CD 0A 86         [ 4] 3298         CALL     DEPTH
      001368 CD 05 1C         [ 4] 3299         CALL     ZLESS   ;check only for underflow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00136B CD 12 C5         [ 4] 3300         CALL     ABORQ
      00136E 0B                    3301         .byte      11
      00136F 20 75 6E 64 65 72 66  3302         .ascii     " underflow "
             6C 6F 77 20
      00137A 81               [ 4] 3303         RET
                                   3304 
                                   3305 ;       EVAL    ( -- )
                                   3306 ;       Interpret  input stream.
      00137B 13 5E                 3307         .word      LINK
                           00137D  3308 LINK = . 
      00137D 04                    3309         .byte      4
      00137E 45 56 41 4C           3310         .ascii     "EVAL"
      001382                       3311 EVAL:
      001382 CD 10 BC         [ 4] 3312 EVAL1:  CALL     TOKEN
      001385 CD 04 E3         [ 4] 3313         CALL     DUPP
      001388 CD 04 5A         [ 4] 3314         CALL     CAT     ;?input stream empty
      00138B CD 03 E7         [ 4] 3315         CALL     QBRAN
      00138E 13 9E                 3316         .word    EVAL2
      001390 CD 06 01         [ 4] 3317         CALL     TEVAL
      001393 CD 0B 68         [ 4] 3318         CALL     ATEXE
      001396 CD 13 65         [ 4] 3319         CALL     QSTAC   ;evaluate input, check stack
      001399 CD 03 FE         [ 4] 3320         CALL     BRAN
      00139C 13 82                 3321         .word    EVAL1
      00139E CD 04 D9         [ 4] 3322 EVAL2:  CALL     DROP
      0013A1 CC 13 3F         [ 2] 3323         JP       DOTOK
                                   3324 
                                   3325 ;       PRESET  ( -- )
                                   3326 ;       Reset data stack pointer and
                                   3327 ;       terminal input buffer.
      0013A4 13 7D                 3328         .word      LINK
                           0013A6  3329 LINK = . 
      0013A6 06                    3330         .byte      6
      0013A7 50 52 45 53 45 54     3331         .ascii     "PRESET"
      0013AD                       3332 PRESE:
      0013AD CD 03 B4         [ 4] 3333         CALL     DOLIT
      0013B0 16 80                 3334         .word      SPP
      0013B2 CD 04 D0         [ 4] 3335         CALL     SPSTO
      0013B5 CD 03 B4         [ 4] 3336         CALL     DOLIT
      0013B8 17 00                 3337         .word      TIBB
      0013BA CD 05 CE         [ 4] 3338         CALL     NTIB
      0013BD CD 09 AD         [ 4] 3339         CALL     CELLP
      0013C0 CC 04 25         [ 2] 3340         JP     STORE
                                   3341 
                                   3342 ;       QUIT    ( -- )
                                   3343 ;       Reset return stack pointer
                                   3344 ;       and start text interpreter.
      0013C3 13 A6                 3345         .word      LINK
                           0013C5  3346 LINK = . 
      0013C5 04                    3347         .byte      4
      0013C6 51 55 49 54           3348         .ascii     "QUIT"
      0013CA                       3349 QUIT:
      0013CA CD 03 B4         [ 4] 3350         CALL     DOLIT
      0013CD 17 FF                 3351         .word      RPP
      0013CF CD 04 77         [ 4] 3352         CALL     RPSTO   ;reset return stack pointer
      0013D2 CD 13 2E         [ 4] 3353 QUIT1:  CALL     LBRAC   ;start interpretation
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0013D5 CD 12 91         [ 4] 3354 QUIT2:  CALL     QUERY   ;get input
      0013D8 CD 13 82         [ 4] 3355         CALL     EVAL
      0013DB 20 F8            [ 2] 3356         JRA     QUIT2   ;continue till error
                                   3357 
                                   3358 ;; The compiler
                                   3359 
                                   3360 ;       '       ( -- ca )
                                   3361 ;       Search vocabularies for
                                   3362 ;       next word in input stream.
      0013DD 13 C5                 3363         .word      LINK
                           0013DF  3364 LINK = . 
      0013DF 01                    3365         .byte      1
      0013E0 27                    3366         .ascii     "'"
      0013E1                       3367 TICK:
      0013E1 CD 10 BC         [ 4] 3368         CALL     TOKEN
      0013E4 CD 11 B9         [ 4] 3369         CALL     NAMEQ   ;?defined
      0013E7 CD 03 E7         [ 4] 3370         CALL     QBRAN
      0013EA 12 CD                 3371         .word      ABOR1
      0013EC 81               [ 4] 3372         RET     ;yes, push code address
                                   3373 
                                   3374 ;       ALLOT   ( n -- )
                                   3375 ;       Allocate n bytes to RAM 
      0013ED 13 DF                 3376         .word      LINK
                           0013EF  3377         LINK = . 
      0013EF 05                    3378         .byte      5
      0013F0 41 4C 4C 4F 54        3379         .ascii     "ALLOT"
      0013F5                       3380 ALLOT:
      0013F5 CD 06 31         [ 4] 3381         CALL     VPP
                                   3382 ; must update APP_VP each time VP is modidied
      0013F8 CD 0A B4         [ 4] 3383         call PSTOR 
      0013FB CC 1B 8D         [ 2] 3384         jp UPDATVP 
                                   3385 
                                   3386 ;       ,       ( w -- )
                                   3387 ;         Compile an integer into
                                   3388 ;         variable space.
      0013FE 13 EF                 3389         .word      LINK
                           001400  3390 LINK = . 
      001400 01                    3391         .byte      1
      001401 2C                    3392         .ascii     ","
      001402                       3393 COMMA:
      001402 CD 0B 32         [ 4] 3394         CALL     HERE
      001405 CD 04 E3         [ 4] 3395         CALL     DUPP
      001408 CD 09 AD         [ 4] 3396         CALL     CELLP   ;cell boundary
      00140B CD 06 31         [ 4] 3397         CALL     VPP
      00140E CD 04 25         [ 4] 3398         CALL     STORE
      001411 CC 04 25         [ 2] 3399         JP     STORE
                                   3400 
                                   3401 ;       C,      ( c -- )
                                   3402 ;       Compile a byte into
                                   3403 ;       variables space.
      001414 14 00                 3404        .word      LINK
                           001416  3405 LINK = . 
      001416 02                    3406         .byte      2
      001417 43 2C                 3407         .ascii     "C,"
      001419                       3408 CCOMMA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      001419 CD 0B 32         [ 4] 3409         CALL     HERE
      00141C CD 04 E3         [ 4] 3410         CALL     DUPP
      00141F CD 09 D8         [ 4] 3411         CALL     ONEP
      001422 CD 06 31         [ 4] 3412         CALL     VPP
      001425 CD 04 25         [ 4] 3413         CALL     STORE
      001428 CC 04 49         [ 2] 3414         JP     CSTOR
                                   3415 
                                   3416 ;       [COMPILE]       ( -- ; <string> )
                                   3417 ;       Compile next immediate
                                   3418 ;       word into code dictionary.
      00142B 14 16                 3419         .word      LINK
                           00142D  3420 LINK = . 
      00142D 89                    3421 	.byte      IMEDD+9
      00142E 5B 43 4F 4D 50 49 4C  3422         .ascii     "[COMPILE]"
             45 5D
      001437                       3423 BCOMP:
      001437 CD 13 E1         [ 4] 3424         CALL     TICK
      00143A CC 16 FD         [ 2] 3425         JP     JSRC
                                   3426 
                                   3427 ;       COMPILE ( -- )
                                   3428 ;       Compile next jsr in
                                   3429 ;       colon list to code dictionary.
      00143D 14 2D                 3430         .word      LINK
                           00143F  3431 LINK = . 
      00143F 47                    3432 	.byte      COMPO+7
      001440 43 4F 4D 50 49 4C 45  3433         .ascii     "COMPILE"
      001447                       3434 COMPI:
      001447 CD 04 8D         [ 4] 3435         CALL     RFROM
      00144A CD 04 E3         [ 4] 3436         CALL     DUPP
      00144D CD 04 3C         [ 4] 3437         CALL     AT
      001450 CD 16 FD         [ 4] 3438         CALL     JSRC    ;compile subroutine
      001453 CD 09 AD         [ 4] 3439         CALL     CELLP
      001456 90 93            [ 1] 3440         ldw y,x 
      001458 90 FE            [ 2] 3441         ldw y,(y)
      00145A 1C 00 02         [ 2] 3442         addw x,#CELLL 
      00145D 90 FC            [ 2] 3443         jp (y)
                                   3444 
                                   3445 ;       LITERAL ( w -- )
                                   3446 ;       Compile tos to dictionary
                                   3447 ;       as an integer literal.
      00145F 14 3F                 3448         .word      LINK
                           001461  3449 LINK = . 
      001461 87                    3450 	.byte      IMEDD+7
      001462 4C 49 54 45 52 41 4C  3451         .ascii     "LITERAL"
      001469                       3452 LITER:
      001469 CD 14 47         [ 4] 3453         CALL     COMPI
      00146C 03 B4                 3454         .word DOLIT 
      00146E CC 14 02         [ 2] 3455         JP     COMMA
                                   3456 
                                   3457 ;       $,"     ( -- )
                                   3458 ;       Compile a literal string
                                   3459 ;       up to next " .
      001471 14 61                 3460         .word      LINK
                           001473  3461 LINK = . 
      001473 03                    3462         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001474 24 2C 22              3463         .byte     '$',',','"'
      001477                       3464 STRCQ:
      001477 CD 03 B4         [ 4] 3465         CALL     DOLIT
      00147A 00 22                 3466         .word     34	; "
      00147C CD 10 3F         [ 4] 3467         CALL     PARSE
      00147F CD 0B 32         [ 4] 3468         CALL     HERE
      001482 CD 0B F2         [ 4] 3469         CALL     PACKS   ;string to code dictionary
      001485 CD 0B 1B         [ 4] 3470         CALL     COUNT
      001488 CD 06 DE         [ 4] 3471         CALL     PLUS    ;calculate aligned end of string
      00148B CD 06 31         [ 4] 3472         CALL     VPP
      00148E CC 04 25         [ 2] 3473         JP     STORE
                                   3474 
                                   3475 ;; Structures
                                   3476 
                                   3477 ;       FOR     ( -- a )
                                   3478 ;       Start a FOR-NEXT loop
                                   3479 ;       structure in a colon definition.
      001491 14 73                 3480         .word      LINK
                           001493  3481 LINK = . 
      001493 83                    3482 	.byte      IMEDD+3
      001494 46 4F 52              3483         .ascii     "FOR"
      001497                       3484 FOR:
      001497 CD 14 47         [ 4] 3485         CALL     COMPI
      00149A 04 AC                 3486         .word TOR 
      00149C CC 0B 32         [ 2] 3487         JP     HERE
                                   3488 
                                   3489 ;       NEXT    ( a -- )
                                   3490 ;       Terminate a FOR-NEXT loop.
      00149F 14 93                 3491         .word      LINK
                           0014A1  3492 LINK = . 
      0014A1 84                    3493 	.byte      IMEDD+4
      0014A2 4E 45 58 54           3494         .ascii     "NEXT"
      0014A6                       3495 NEXT:
      0014A6 CD 14 47         [ 4] 3496         CALL     COMPI
      0014A9 03 C8                 3497         .word DONXT 
      0014AB CD 06 7D         [ 4] 3498         call ADRADJ
      0014AE CC 14 02         [ 2] 3499         JP     COMMA
                                   3500 
                                   3501 ;       I ( -- n )
                                   3502 ;       stack FOR-NEXT COUNTER 
      0014B1 14 A1                 3503         .word LINK 
                           0014B3  3504         LINK=.
      0014B3 01                    3505         .byte 1 
      0014B4 49                    3506         .ascii "I"
      0014B5                       3507 IFETCH: 
      0014B5 1D 00 02         [ 2] 3508         subw x,#CELLL 
      0014B8 16 03            [ 2] 3509         ldw y,(3,sp)
      0014BA FF               [ 2] 3510         ldw (x),y 
      0014BB 81               [ 4] 3511         ret 
                                   3512 
                                   3513 ;       BEGIN   ( -- a )
                                   3514 ;       Start an infinite or
                                   3515 ;       indefinite loop structure.
      0014BC 14 B3                 3516         .word      LINK
                           0014BE  3517 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0014BE 85                    3518 	.byte      IMEDD+5
      0014BF 42 45 47 49 4E        3519         .ascii     "BEGIN"
      0014C4                       3520 BEGIN:
      0014C4 CC 0B 32         [ 2] 3521         JP     HERE
                                   3522 
                                   3523 ;       UNTIL   ( a -- )
                                   3524 ;       Terminate a BEGIN-UNTIL
                                   3525 ;       indefinite loop structure.
      0014C7 14 BE                 3526         .word      LINK
                           0014C9  3527 LINK = . 
      0014C9 85                    3528 	.byte      IMEDD+5
      0014CA 55 4E 54 49 4C        3529         .ascii     "UNTIL"
      0014CF                       3530 UNTIL:
      0014CF CD 14 47         [ 4] 3531         CALL     COMPI
      0014D2 03 E7                 3532         .word    QBRAN 
      0014D4 CD 06 7D         [ 4] 3533         call ADRADJ
      0014D7 CC 14 02         [ 2] 3534         JP     COMMA
                                   3535 
                                   3536 ;       AGAIN   ( a -- )
                                   3537 ;       Terminate a BEGIN-AGAIN
                                   3538 ;       infinite loop structure.
      0014DA 14 C9                 3539         .word      LINK
                           0014DC  3540 LINK = . 
      0014DC 85                    3541 	.byte      IMEDD+5
      0014DD 41 47 41 49 4E        3542         .ascii     "AGAIN"
      0014E2                       3543 AGAIN:
      0014E2 CD 14 47         [ 4] 3544         CALL     COMPI
      0014E5 03 FE                 3545         .word BRAN
      0014E7 CD 06 7D         [ 4] 3546         call ADRADJ 
      0014EA CC 14 02         [ 2] 3547         JP     COMMA
                                   3548 
                                   3549 ;       IF      ( -- A )
                                   3550 ;       Begin a conditional branch.
      0014ED 14 DC                 3551         .word      LINK
                           0014EF  3552 LINK = . 
      0014EF 82                    3553 	.byte      IMEDD+2
      0014F0 49 46                 3554         .ascii     "IF"
      0014F2                       3555 IFF:
      0014F2 CD 14 47         [ 4] 3556         CALL     COMPI
      0014F5 03 E7                 3557         .word QBRAN
      0014F7 CD 0B 32         [ 4] 3558         CALL     HERE
      0014FA CD 0A 44         [ 4] 3559         CALL     ZERO
      0014FD CC 14 02         [ 2] 3560         JP     COMMA
                                   3561 
                                   3562 ;       THEN        ( A -- )
                                   3563 ;       Terminate a conditional branch structure.
      001500 14 EF                 3564         .word      LINK
                           001502  3565 LINK = . 
      001502 84                    3566 	.byte      IMEDD+4
      001503 54 48 45 4E           3567         .ascii     "THEN"
      001507                       3568 THENN:
      001507 CD 0B 32         [ 4] 3569         CALL     HERE
      00150A CD 06 7D         [ 4] 3570         call ADRADJ 
      00150D CD 04 F3         [ 4] 3571         CALL     SWAPP
      001510 CC 04 25         [ 2] 3572         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3573 
                                   3574 ;       ELSE        ( A -- A )
                                   3575 ;       Start the false clause in an IF-ELSE-THEN structure.
      001513 15 02                 3576         .word      LINK
                           001515  3577 LINK = . 
      001515 84                    3578 	.byte      IMEDD+4
      001516 45 4C 53 45           3579         .ascii     "ELSE"
      00151A                       3580 ELSEE:
      00151A CD 14 47         [ 4] 3581         CALL     COMPI
      00151D 03 FE                 3582         .word BRAN
      00151F CD 0B 32         [ 4] 3583         CALL     HERE
      001522 CD 0A 44         [ 4] 3584         CALL     ZERO
      001525 CD 14 02         [ 4] 3585         CALL     COMMA
      001528 CD 04 F3         [ 4] 3586         CALL     SWAPP
      00152B CD 0B 32         [ 4] 3587         CALL     HERE
      00152E CD 06 7D         [ 4] 3588         call ADRADJ 
      001531 CD 04 F3         [ 4] 3589         CALL     SWAPP
      001534 CC 04 25         [ 2] 3590         JP     STORE
                                   3591 
                                   3592 ;       AHEAD       ( -- A )
                                   3593 ;       Compile a forward branch instruction.
      001537 15 15                 3594         .word      LINK
                           001539  3595 LINK = . 
      001539 85                    3596 	.byte      IMEDD+5
      00153A 41 48 45 41 44        3597         .ascii     "AHEAD"
      00153F                       3598 AHEAD:
      00153F CD 14 47         [ 4] 3599         CALL     COMPI
      001542 03 FE                 3600         .word BRAN
      001544 CD 0B 32         [ 4] 3601         CALL     HERE
      001547 CD 0A 44         [ 4] 3602         CALL     ZERO
      00154A CC 14 02         [ 2] 3603         JP     COMMA
                                   3604 
                                   3605 ;       WHILE       ( a -- A a )
                                   3606 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00154D 15 39                 3607         .word      LINK
                           00154F  3608 LINK = . 
      00154F 85                    3609 	.byte      IMEDD+5
      001550 57 48 49 4C 45        3610         .ascii     "WHILE"
      001555                       3611 WHILE:
      001555 CD 14 47         [ 4] 3612         CALL     COMPI
      001558 03 E7                 3613         .word QBRAN
      00155A CD 0B 32         [ 4] 3614         CALL     HERE
      00155D CD 0A 44         [ 4] 3615         CALL     ZERO
      001560 CD 14 02         [ 4] 3616         CALL     COMMA
      001563 CC 04 F3         [ 2] 3617         JP     SWAPP
                                   3618 
                                   3619 ;       REPEAT      ( A a -- )
                                   3620 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001566 15 4F                 3621         .word      LINK
                           001568  3622 LINK = . 
      001568 86                    3623         .byte      IMEDD+6
      001569 52 45 50 45 41 54     3624         .ascii     "REPEAT"
      00156F                       3625 REPEA:
      00156F CD 14 47         [ 4] 3626         CALL     COMPI
      001572 03 FE                 3627         .word BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      001574 CD 06 7D         [ 4] 3628         call ADRADJ 
      001577 CD 14 02         [ 4] 3629         CALL     COMMA
      00157A CD 0B 32         [ 4] 3630         CALL     HERE
      00157D CD 06 7D         [ 4] 3631         call ADRADJ 
      001580 CD 04 F3         [ 4] 3632         CALL     SWAPP
      001583 CC 04 25         [ 2] 3633         JP     STORE
                                   3634 
                                   3635 ;       AFT         ( a -- a A )
                                   3636 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001586 15 68                 3637         .word      LINK
                           001588  3638 LINK = . 
      001588 83                    3639 	.byte      IMEDD+3
      001589 41 46 54              3640         .ascii     "AFT"
      00158C                       3641 AFT:
      00158C CD 04 D9         [ 4] 3642         CALL     DROP
      00158F CD 15 3F         [ 4] 3643         CALL     AHEAD
      001592 CD 0B 32         [ 4] 3644         CALL     HERE
      001595 CC 04 F3         [ 2] 3645         JP     SWAPP
                                   3646 
                                   3647 ;       ABORT"      ( -- ; <string> )
                                   3648 ;       Conditional abort with an error message.
      001598 15 88                 3649         .word      LINK
                           00159A  3650 LINK = . 
      00159A 86                    3651 	.byte      IMEDD+6
      00159B 41 42 4F 52 54        3652         .ascii     "ABORT"
      0015A0 22                    3653         .byte      '"'
      0015A1                       3654 ABRTQ:
      0015A1 CD 14 47         [ 4] 3655         CALL     COMPI
      0015A4 12 C5                 3656         .word ABORQ
      0015A6 CC 14 77         [ 2] 3657         JP     STRCQ
                                   3658 
                                   3659 ;       $"     ( -- ; <string> )
                                   3660 ;       Compile an inline string literal.
      0015A9 15 9A                 3661         .word      LINK
                           0015AB  3662 LINK = . 
      0015AB 82                    3663 	.byte      IMEDD+2
      0015AC 24 22                 3664         .byte     '$','"'
      0015AE                       3665 STRQ:
      0015AE CD 14 47         [ 4] 3666         CALL     COMPI
      0015B1 0E DF                 3667         .word STRQP 
      0015B3 CC 14 77         [ 2] 3668         JP     STRCQ
                                   3669 
                                   3670 ;       ."          ( -- ; <string> )
                                   3671 ;       Compile an inline string literal to be typed out at run time.
      0015B6 15 AB                 3672         .word      LINK
                           0015B8  3673 LINK = . 
      0015B8 82                    3674 	.byte      IMEDD+2
      0015B9 2E 22                 3675         .byte     '.','"'
      0015BB                       3676 DOTQ:
      0015BB CD 14 47         [ 4] 3677         CALL     COMPI
      0015BE 0E E9                 3678         .word DOTQP 
      0015C0 CC 14 77         [ 2] 3679         JP     STRCQ
                                   3680 
                                   3681 ;; Name compiler
                                   3682 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3683 ;       ?UNIQUE ( a -- a )
                                   3684 ;       Display a warning message
                                   3685 ;       if word already exists.
      0015C3 15 B8                 3686         .word      LINK
                           0015C5  3687 LINK = . 
      0015C5 07                    3688         .byte      7
      0015C6 3F 55 4E 49 51 55 45  3689         .ascii     "?UNIQUE"
      0015CD                       3690 UNIQU:
      0015CD CD 04 E3         [ 4] 3691         CALL     DUPP
      0015D0 CD 11 B9         [ 4] 3692         CALL     NAMEQ   ;?name exists
      0015D3 CD 03 E7         [ 4] 3693         CALL     QBRAN
      0015D6 15 EC                 3694         .word      UNIQ1
      0015D8 CD 0E E9         [ 4] 3695         CALL     DOTQP   ;redef are OK
      0015DB 07                    3696         .byte       7
      0015DC 20 72 65 44 65 66 20  3697         .ascii     " reDef "       
      0015E3 CD 05 0D         [ 4] 3698         CALL     OVER
      0015E6 CD 0B 1B         [ 4] 3699         CALL     COUNT
      0015E9 CD 0E 8C         [ 4] 3700         CALL     TYPES   ;just in case
      0015EC CC 04 D9         [ 2] 3701 UNIQ1:  JP     DROP
                                   3702 
                                   3703 ;       $,n     ( na -- )
                                   3704 ;       Build a new dictionary name
                                   3705 ;       using string at na.
                                   3706 ; compile dans l'espace des variables 
      0015EF 15 C5                 3707         .word      LINK
                           0015F1  3708 LINK = . 
      0015F1 03                    3709         .byte      3
      0015F2 24 2C 6E              3710         .ascii     "$,n"
      0015F5                       3711 SNAME:
      0015F5 CD 04 E3         [ 4] 3712         CALL     DUPP
      0015F8 CD 04 5A         [ 4] 3713         CALL     CAT     ;?null input
      0015FB CD 03 E7         [ 4] 3714         CALL     QBRAN
      0015FE 16 2B                 3715         .word      PNAM1
      001600 CD 15 CD         [ 4] 3716         CALL     UNIQU   ;?redefinition
      001603 CD 04 E3         [ 4] 3717         CALL     DUPP
      001606 CD 0B 1B         [ 4] 3718         CALL     COUNT
      001609 CD 06 DE         [ 4] 3719         CALL     PLUS
      00160C CD 06 31         [ 4] 3720         CALL     VPP
      00160F CD 04 25         [ 4] 3721         CALL     STORE
      001612 CD 04 E3         [ 4] 3722         CALL     DUPP
      001615 CD 06 4F         [ 4] 3723         CALL     LAST
      001618 CD 04 25         [ 4] 3724         CALL     STORE   ;save na for vocabulary link
      00161B CD 09 BC         [ 4] 3725         CALL     CELLM   ;link address
      00161E CD 06 23         [ 4] 3726         CALL     CNTXT
      001621 CD 04 3C         [ 4] 3727         CALL     AT
      001624 CD 04 F3         [ 4] 3728         CALL     SWAPP
      001627 CD 04 25         [ 4] 3729         CALL     STORE
      00162A 81               [ 4] 3730         RET     ;save code pointer
      00162B CD 0E DF         [ 4] 3731 PNAM1:  CALL     STRQP
      00162E 05                    3732         .byte      5
      00162F 20 6E 61 6D 65        3733         .ascii     " name" ;null input
      001634 CC 12 CD         [ 2] 3734         JP     ABOR1
                                   3735 
                                   3736 ;; FORTH compiler
                                   3737 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3738 ;       $COMPILE        ( a -- )
                                   3739 ;       Compile next word to
                                   3740 ;       dictionary as a token or literal.
      001637 15 F1                 3741         .word      LINK
                           001639  3742 LINK = . 
      001639 08                    3743         .byte      8
      00163A 24 43 4F 4D 50 49 4C  3744         .ascii     "$COMPILE"
             45
      001642                       3745 SCOMP:
      001642 CD 11 B9         [ 4] 3746         CALL     NAMEQ
      001645 CD 06 8D         [ 4] 3747         CALL     QDUP    ;?defined
      001648 CD 03 E7         [ 4] 3748         CALL     QBRAN
      00164B 16 63                 3749         .word      SCOM2
      00164D CD 04 3C         [ 4] 3750         CALL     AT
      001650 CD 03 B4         [ 4] 3751         CALL     DOLIT
      001653 80 00                 3752         .word     0x8000	;  IMEDD*256
      001655 CD 05 2F         [ 4] 3753         CALL     ANDD    ;?immediate
      001658 CD 03 E7         [ 4] 3754         CALL     QBRAN
      00165B 16 60                 3755         .word      SCOM1
      00165D CC 04 0E         [ 2] 3756         JP     EXECU
      001660 CC 16 FD         [ 2] 3757 SCOM1:  JP     JSRC
      001663 CD 0D 57         [ 4] 3758 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001666 CD 03 E7         [ 4] 3759         CALL     QBRAN
      001669 12 CD                 3760         .word      ABOR1
      00166B CC 14 69         [ 2] 3761         JP     LITER
                                   3762 
                                   3763 ;       OVERT   ( -- )
                                   3764 ;       Link a new word into vocabulary.
      00166E 16 39                 3765         .word      LINK
                           001670  3766 LINK = . 
      001670 05                    3767         .byte      5
      001671 4F 56 45 52 54        3768         .ascii     "OVERT"
      001676                       3769 OVERT:
      001676 CD 06 4F         [ 4] 3770         CALL     LAST
      001679 CD 04 3C         [ 4] 3771         CALL     AT
      00167C CD 06 23         [ 4] 3772         CALL     CNTXT
      00167F CC 04 25         [ 2] 3773         JP     STORE
                                   3774 
                                   3775 ;       ;       ( -- )
                                   3776 ;       Terminate a colon definition.
      001682 16 70                 3777         .word      LINK
                           001684  3778 LINK = . 
      001684 C1                    3779 	.byte      IMEDD+COMPO+1
      001685 3B                    3780         .ascii     ";"
      001686                       3781 SEMIS:
                           000001  3782 .if OPTIMIZE ; more compact and faster
      001686 CD 03 B4         [ 4] 3783         call DOLIT 
      001689 00 81                 3784         .word 0x81   ; opcode for RET 
      00168B CD 14 19         [ 4] 3785         call CCOMMA 
                           000000  3786 .else
                                   3787         CALL     COMPI
                                   3788         .word EXIT 
                                   3789 .endif 
      00168E CD 13 2E         [ 4] 3790         CALL     LBRAC
      001691 CD 16 76         [ 4] 3791         call OVERT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      001694 CD 20 59         [ 4] 3792         CALL FMOVE
      001697 CD 06 8D         [ 4] 3793         call QDUP 
      00169A CD 03 E7         [ 4] 3794         call QBRAN 
      00169D 17 CD                 3795         .word SET_RAMLAST 
      00169F CD 20 ED         [ 4] 3796         CALL UPDATPTR
      0016A2 81               [ 4] 3797         RET 
                                   3798 
                                   3799 
                                   3800 ;       Terminate an ISR definition 
                                   3801 ;       retourn ca of ISR as double
                                   3802 ;       I; ( -- ud )
      0016A3 16 84                 3803         .word LINK 
                           0016A5  3804         LINK=.
      0016A5 C2                    3805         .byte 2+IMEDD+COMPO 
      0016A6 49 3B                 3806         .ascii "I;" 
      0016A8                       3807 ISEMI:
      0016A8 1D 00 02         [ 2] 3808         subw x,#CELLL  
      0016AB 90 AE 00 80      [ 2] 3809         ldw y,#IRET_CODE 
      0016AF FF               [ 2] 3810         ldw (x),y 
      0016B0 CD 14 19         [ 4] 3811         call CCOMMA
      0016B3 CD 13 2E         [ 4] 3812         call LBRAC 
      0016B6 CD 21 32         [ 4] 3813         call IFMOVE
      0016B9 CD 06 8D         [ 4] 3814         call QDUP 
      0016BC CD 03 E7         [ 4] 3815         CALL QBRAN 
      0016BF 17 CD                 3816         .word SET_RAMLAST
      0016C1 CD 06 3F         [ 4] 3817         CALL CPP
      0016C4 CD 04 3C         [ 4] 3818         call AT 
      0016C7 CD 04 F3         [ 4] 3819         call SWAPP 
      0016CA CD 06 3F         [ 4] 3820         CALL CPP 
      0016CD CD 04 25         [ 4] 3821         call STORE 
      0016D0 CD 1B 76         [ 4] 3822         call UPDATCP 
      0016D3 CD 1B 33         [ 4] 3823         call EEPVP 
      0016D6 CD 04 D9         [ 4] 3824         call DROP 
      0016D9 CD 04 3C         [ 4] 3825         call AT 
      0016DC CD 06 31         [ 4] 3826         call VPP 
      0016DF CD 04 25         [ 4] 3827         call STORE 
      0016E2 CC 0A 44         [ 2] 3828         jp ZERO
      0016E5 81               [ 4] 3829         ret           
                                   3830         
                                   3831 
                                   3832 ;       ]       ( -- )
                                   3833 ;       Start compiling words in
                                   3834 ;       input stream.
      0016E6 16 A5                 3835         .word      LINK
                           0016E8  3836 LINK = . 
      0016E8 01                    3837         .byte      1
      0016E9 5D                    3838         .ascii     "]"
      0016EA                       3839 RBRAC:
      0016EA CD 03 B4         [ 4] 3840         CALL   DOLIT
      0016ED 16 42                 3841         .word  SCOMP
      0016EF CD 06 01         [ 4] 3842         CALL   TEVAL
      0016F2 CC 04 25         [ 2] 3843         JP     STORE
                                   3844 
                                   3845 ;       CALL,    ( ca -- )
                                   3846 ;       Compile a subroutine call.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0016F5 16 E8                 3847         .word      LINK
                           0016F7  3848 LINK = . 
      0016F7 05                    3849         .byte      5
      0016F8 43 41 4C 4C 2C        3850         .ascii     "CALL,"
      0016FD                       3851 JSRC:
      0016FD CD 03 B4         [ 4] 3852         CALL     DOLIT
      001700 00 CD                 3853         .word     CALLL     ;CALL
      001702 CD 14 19         [ 4] 3854         CALL     CCOMMA
      001705 CC 14 02         [ 2] 3855         JP     COMMA
                                   3856 
                                   3857 ;       INIT-OFS ( -- )
                                   3858 ;       compute offset to adjust jump address 
                                   3859 ;       set variable OFFSET 
      001708 16 F7                 3860         .word LINK 
                           00170A  3861         LINK=.
      00170A 08                    3862         .byte 8 
      00170B 49 4E 49 54 2D 4F 46  3863         .ascii "INIT-OFS" 
             53
      001713                       3864 INITOFS:
      001713 CD 05 F0         [ 4] 3865         call TFLASH 
      001716 CD 04 3C         [ 4] 3866         CALL AT 
      001719 CD 04 E3         [ 4] 3867         CALL DUPP 
      00171C CD 03 E7         [ 4] 3868         call QBRAN
      00171F 17 30                 3869         .word 1$
      001721 CD 04 D9         [ 4] 3870         call DROP  
      001724 CD 06 3F         [ 4] 3871         call CPP 
      001727 CD 04 3C         [ 4] 3872         call AT 
      00172A CD 0B 32         [ 4] 3873         call HERE
      00172D CD 07 57         [ 4] 3874         call SUBB 
      001730 CD 06 74         [ 4] 3875 1$:     call OFFSET 
      001733 CC 04 25         [ 2] 3876         jp STORE  
                                   3877 
                                   3878 ;       :       ( -- ; <string> )
                                   3879 ;       Start a new colon definition
                                   3880 ;       using next word as its name.
      001736 17 0A                 3881         .word      LINK
                           001738  3882 LINK = . 
      001738 01                    3883         .byte      1
      001739 3A                    3884         .ascii     ":"
      00173A                       3885 COLON:
      00173A CD 17 13         [ 4] 3886         call INITOFS       
      00173D CD 10 BC         [ 4] 3887         CALL   TOKEN
      001740 CD 15 F5         [ 4] 3888         CALL   SNAME
      001743 CC 16 EA         [ 2] 3889         JP     RBRAC
                                   3890 
                                   3891 ;       I:  ( -- )
                                   3892 ;       Start interrupt service routine definition
                                   3893 ;       those definition have no name.
      001746 17 38                 3894         .word LINK
                           001748  3895         LINK=.
      001748 02                    3896         .byte 2 
      001749 49 3A                 3897         .ascii "I:" 
      00174B                       3898 ICOLON:
      00174B CD 17 13         [ 4] 3899         call INITOFS 
      00174E CC 16 EA         [ 2] 3900         jp RBRAC  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3901 
                                   3902 ;       IMMEDIATE       ( -- )
                                   3903 ;       Make last compiled word
                                   3904 ;       an immediate word.
      001751 17 48                 3905         .word      LINK
                           001753  3906 LINK = . 
      001753 09                    3907         .byte      9
      001754 49 4D 4D 45 44 49 41  3908         .ascii     "IMMEDIATE"
             54 45
      00175D                       3909 IMMED:
      00175D CD 03 B4         [ 4] 3910         CALL     DOLIT
      001760 80 00                 3911         .word     0x8000	;  IMEDD*256
      001762 CD 06 4F         [ 4] 3912         CALL     LAST
      001765 CD 04 3C         [ 4] 3913         CALL     AT
      001768 CD 04 3C         [ 4] 3914         CALL     AT
      00176B CD 05 43         [ 4] 3915         CALL     ORR
      00176E CD 06 4F         [ 4] 3916         CALL     LAST
      001771 CD 04 3C         [ 4] 3917         CALL     AT
      001774 CC 04 25         [ 2] 3918         JP     STORE
                                   3919 
                                   3920 ;; Defining words
                                   3921 
                                   3922 ;       CREATE  ( -- ; <string> )
                                   3923 ;       Compile a new array
                                   3924 ;       without allocating space.
      001777 17 53                 3925         .word      LINK
                           001779  3926 LINK = . 
      001779 06                    3927         .byte      6
      00177A 43 52 45 41 54 45     3928         .ascii     "CREATE"
      001780                       3929 CREAT:
      001780 CD 10 BC         [ 4] 3930         CALL     TOKEN
      001783 CD 15 F5         [ 4] 3931         CALL     SNAME
      001786 CD 16 76         [ 4] 3932         CALL     OVERT        
      001789 CD 14 47         [ 4] 3933         CALL     COMPI 
      00178C 05 90                 3934         .word DOVAR 
      00178E 81               [ 4] 3935         RET
                                   3936 
                                   3937 ;       VARIABLE        ( -- ; <string> )
                                   3938 ;       Compile a new variable
                                   3939 ;       initialized to 0.
      00178F 17 79                 3940         .word      LINK
                           001791  3941 LINK = . 
      001791 08                    3942         .byte      8
      001792 56 41 52 49 41 42 4C  3943         .ascii     "VARIABLE"
             45
      00179A                       3944 VARIA:
                                   3945 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      00179A CD 0B 32         [ 4] 3946         CALL HERE
      00179D CD 04 E3         [ 4] 3947         CALL DUPP 
      0017A0 CD 09 AD         [ 4] 3948         CALL CELLP
      0017A3 CD 06 31         [ 4] 3949         CALL VPP 
      0017A6 CD 04 25         [ 4] 3950         CALL STORE
      0017A9 CD 17 80         [ 4] 3951         CALL CREAT
      0017AC CD 04 E3         [ 4] 3952         CALL DUPP
      0017AF CD 14 02         [ 4] 3953         CALL COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0017B2 CD 0A 44         [ 4] 3954         CALL ZERO
      0017B5 CD 04 F3         [ 4] 3955         call SWAPP 
      0017B8 CD 04 25         [ 4] 3956         CALL STORE
      0017BB CD 20 59         [ 4] 3957         CALL FMOVE ; move definition to FLASH
      0017BE CD 06 8D         [ 4] 3958         CALL QDUP 
      0017C1 CD 03 E7         [ 4] 3959         CALL QBRAN 
      0017C4 17 CD                 3960         .word SET_RAMLAST   
      0017C6 CD 1B 8D         [ 4] 3961         call UPDATVP  ; don't update if variable kept in RAM.
      0017C9 CD 20 ED         [ 4] 3962         CALL UPDATPTR
      0017CC 81               [ 4] 3963         RET         
      0017CD                       3964 SET_RAMLAST: 
      0017CD CD 06 4F         [ 4] 3965         CALL LAST 
      0017D0 CD 04 3C         [ 4] 3966         CALL AT 
      0017D3 CD 06 62         [ 4] 3967         CALL RAMLAST 
      0017D6 CC 04 25         [ 2] 3968         jp STORE  
                                   3969 
                                   3970 
                                   3971 ;       CONSTANT  ( n -- ; <string> )
                                   3972 ;       Compile a new constant 
                                   3973 ;       n CONSTANT name 
      0017D9 17 91                 3974         .word LINK 
                           0017DB  3975         LINK=. 
      0017DB 08                    3976         .byte 8 
      0017DC 43 4F 4E 53 54 41 4E  3977         .ascii "CONSTANT" 
             54
      0017E4                       3978 CONSTANT:          
      0017E4 CD 10 BC         [ 4] 3979         CALL TOKEN
      0017E7 CD 15 F5         [ 4] 3980         CALL SNAME 
      0017EA CD 16 76         [ 4] 3981         CALL OVERT 
      0017ED CD 14 47         [ 4] 3982         CALL COMPI 
      0017F0 18 0E                 3983         .word DOCONST
      0017F2 CD 14 02         [ 4] 3984         CALL COMMA 
      0017F5 CD 20 59         [ 4] 3985         CALL FMOVE
      0017F8 CD 06 8D         [ 4] 3986         CALL QDUP 
      0017FB CD 03 E7         [ 4] 3987         CALL QBRAN 
      0017FE 17 CD                 3988         .word SET_RAMLAST  
      001800 CD 20 ED         [ 4] 3989         CALL UPDATPTR  
      001803 81               [ 4] 3990 1$:     RET          
                                   3991 
                                   3992 ; CONSTANT runtime semantic 
                                   3993 ; doCONST  ( -- n )
      001804 17 DB                 3994         .word LINK 
                           001806  3995         LINK=.
      001806 07                    3996         .byte 7
      001807 44 4F 43 4F 4E 53 54  3997         .ascii "DOCONST"
      00180E                       3998 DOCONST:
      00180E 1D 00 02         [ 2] 3999         subw x,#CELLL
      001811 90 85            [ 2] 4000         popw y 
      001813 90 FE            [ 2] 4001         ldw y,(y) 
      001815 FF               [ 2] 4002         ldw (x),y 
      001816 81               [ 4] 4003         ret 
                                   4004 
                                   4005 
                                   4006 ;; Tools
                                   4007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4008 ;       _TYPE   ( b u -- )
                                   4009 ;       Display a string. Filter
                                   4010 ;       non-printing characters.
      001817 18 06                 4011         .word      LINK
                           001819  4012 LINK = . 
      001819 05                    4013         .byte      5
      00181A 5F 54 59 50 45        4014         .ascii     "_TYPE"
      00181F                       4015 UTYPE:
      00181F CD 04 AC         [ 4] 4016         CALL     TOR     ;start count down loop
      001822 20 0F            [ 2] 4017         JRA     UTYP2   ;skip first pass
      001824 CD 04 E3         [ 4] 4018 UTYP1:  CALL     DUPP
      001827 CD 04 5A         [ 4] 4019         CALL     CAT
      00182A CD 0A 6E         [ 4] 4020         CALL     TCHAR
      00182D CD 03 9E         [ 4] 4021         CALL     EMIT    ;display only printable
      001830 CD 09 D8         [ 4] 4022         CALL     ONEP    ;increment address
      001833 CD 03 C8         [ 4] 4023 UTYP2:  CALL     DONXT
      001836 18 24                 4024         .word      UTYP1   ;loop till done
      001838 CC 04 D9         [ 2] 4025         JP     DROP
                                   4026 
                                   4027 ;       dm+     ( a u -- a )
                                   4028 ;       Dump u bytes from ,
                                   4029 ;       leaving a+u on  stack.
      00183B 18 19                 4030         .word      LINK
                           00183D  4031 LINK = . 
      00183D 03                    4032         .byte      3
      00183E 64 6D 2B              4033         .ascii     "dm+"
      001841                       4034 DUMPP:
      001841 CD 05 0D         [ 4] 4035         CALL     OVER
      001844 CD 03 B4         [ 4] 4036         CALL     DOLIT
      001847 00 04                 4037         .word      4
      001849 CD 0F 12         [ 4] 4038         CALL     UDOTR   ;display address
      00184C CD 0E 62         [ 4] 4039         CALL     SPACE
      00184F CD 04 AC         [ 4] 4040         CALL     TOR     ;start count down loop
      001852 20 11            [ 2] 4041         JRA     PDUM2   ;skip first pass
      001854 CD 04 E3         [ 4] 4042 PDUM1:  CALL     DUPP
      001857 CD 04 5A         [ 4] 4043         CALL     CAT
      00185A CD 03 B4         [ 4] 4044         CALL     DOLIT
      00185D 00 03                 4045         .word      3
      00185F CD 0F 12         [ 4] 4046         CALL     UDOTR   ;display numeric data
      001862 CD 09 D8         [ 4] 4047         CALL     ONEP    ;increment address
      001865 CD 03 C8         [ 4] 4048 PDUM2:  CALL     DONXT
      001868 18 54                 4049         .word      PDUM1   ;loop till done
      00186A 81               [ 4] 4050         RET
                                   4051 
                                   4052 ;       DUMP    ( a u -- )
                                   4053 ;       Dump u bytes from a,
                                   4054 ;       in a formatted manner.
      00186B 18 3D                 4055         .word      LINK
                           00186D  4056 LINK = . 
      00186D 04                    4057         .byte      4
      00186E 44 55 4D 50           4058         .ascii     "DUMP"
      001872                       4059 DUMP:
      001872 CD 05 A0         [ 4] 4060         CALL     BASE
      001875 CD 04 3C         [ 4] 4061         CALL     AT
      001878 CD 04 AC         [ 4] 4062         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00187B CD 0C EA         [ 4] 4063         CALL     HEX     ;save radix, set hex
      00187E CD 03 B4         [ 4] 4064         CALL     DOLIT
      001881 00 10                 4065         .word      16
      001883 CD 08 FE         [ 4] 4066         CALL     SLASH   ;change count to lines
      001886 CD 04 AC         [ 4] 4067         CALL     TOR     ;start count down loop
      001889 CD 0E AA         [ 4] 4068 DUMP1:  CALL     CR
      00188C CD 03 B4         [ 4] 4069         CALL     DOLIT
      00188F 00 10                 4070         .word      16
      001891 CD 06 C9         [ 4] 4071         CALL     DDUP
      001894 CD 18 41         [ 4] 4072         CALL     DUMPP   ;display numeric
      001897 CD 06 9E         [ 4] 4073         CALL     ROT
      00189A CD 06 9E         [ 4] 4074         CALL     ROT
      00189D CD 0E 62         [ 4] 4075         CALL     SPACE
      0018A0 CD 0E 62         [ 4] 4076         CALL     SPACE
      0018A3 CD 18 1F         [ 4] 4077         CALL     UTYPE   ;display printable characters
      0018A6 CD 03 C8         [ 4] 4078         CALL     DONXT
      0018A9 18 89                 4079         .word      DUMP1   ;loop till done
      0018AB CD 04 D9         [ 4] 4080 DUMP3:  CALL     DROP
      0018AE CD 04 8D         [ 4] 4081         CALL     RFROM
      0018B1 CD 05 A0         [ 4] 4082         CALL     BASE
      0018B4 CC 04 25         [ 2] 4083         JP     STORE   ;restore radix
                                   4084 
                                   4085 ;       .S      ( ... -- ... )
                                   4086 ;        Display  contents of stack.
      0018B7 18 6D                 4087         .word      LINK
                           0018B9  4088 LINK = . 
      0018B9 02                    4089         .byte      2
      0018BA 2E 53                 4090         .ascii     ".S"
      0018BC                       4091 DOTS:
      0018BC CD 0E AA         [ 4] 4092         CALL     CR
      0018BF CD 0A 86         [ 4] 4093         CALL     DEPTH   ;stack depth
      0018C2 CD 04 AC         [ 4] 4094         CALL     TOR     ;start count down loop
      0018C5 20 09            [ 2] 4095         JRA     DOTS2   ;skip first pass
      0018C7 CD 04 A0         [ 4] 4096 DOTS1:  CALL     RAT
      0018CA CD 0A 9D         [ 4] 4097 	CALL     PICK
      0018CD CD 0F 45         [ 4] 4098         CALL     DOT     ;index stack, display contents
      0018D0 CD 03 C8         [ 4] 4099 DOTS2:  CALL     DONXT
      0018D3 18 C7                 4100         .word      DOTS1   ;loop till done
      0018D5 CD 0E E9         [ 4] 4101         CALL     DOTQP
      0018D8 05                    4102         .byte      5
      0018D9 20 3C 73 70 20        4103         .ascii     " <sp "
      0018DE 81               [ 4] 4104         RET
                                   4105 
                                   4106 ;       >NAME   ( ca -- na | F )
                                   4107 ;       Convert code address
                                   4108 ;       to a name address.
      0018DF 18 B9                 4109         .word      LINK
                           0018E1  4110 LINK = . 
      0018E1 05                    4111         .byte      5
      0018E2 3E 4E 41 4D 45        4112         .ascii     ">NAME"
      0018E7                       4113 TNAME:
      0018E7 CD 06 23         [ 4] 4114         CALL     CNTXT   ;vocabulary link
      0018EA CD 04 3C         [ 4] 4115 TNAM2:  CALL     AT
      0018ED CD 04 E3         [ 4] 4116         CALL     DUPP    ;?last word in a vocabulary
      0018F0 CD 03 E7         [ 4] 4117         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0018F3 19 0E                 4118         .word      TNAM4
      0018F5 CD 06 C9         [ 4] 4119         CALL     DDUP
      0018F8 CD 10 CA         [ 4] 4120         CALL     NAMET
      0018FB CD 05 58         [ 4] 4121         CALL     XORR    ;compare
      0018FE CD 03 E7         [ 4] 4122         CALL     QBRAN
      001901 19 08                 4123         .word      TNAM3
      001903 CD 09 BC         [ 4] 4124         CALL     CELLM   ;continue with next word
      001906 20 E2            [ 2] 4125         JRA     TNAM2
      001908 CD 04 F3         [ 4] 4126 TNAM3:  CALL     SWAPP
      00190B CC 04 D9         [ 2] 4127         JP     DROP
      00190E CD 06 BE         [ 4] 4128 TNAM4:  CALL     DDROP
      001911 CC 0A 44         [ 2] 4129         JP     ZERO
                                   4130 
                                   4131 ;       .ID     ( na -- )
                                   4132 ;        Display  name at address.
      001914 18 E1                 4133         .word      LINK
                           001916  4134 LINK = . 
      001916 03                    4135         .byte      3
      001917 2E 49 44              4136         .ascii     ".ID"
      00191A                       4137 DOTID:
      00191A CD 06 8D         [ 4] 4138         CALL     QDUP    ;if zero no name
      00191D CD 03 E7         [ 4] 4139         CALL     QBRAN
      001920 19 30                 4140         .word      DOTI1
      001922 CD 0B 1B         [ 4] 4141         CALL     COUNT
      001925 CD 03 B4         [ 4] 4142         CALL     DOLIT
      001928 00 1F                 4143         .word      0x1F
      00192A CD 05 2F         [ 4] 4144         CALL     ANDD    ;mask lexicon bits
      00192D CC 18 1F         [ 2] 4145         JP     UTYPE
      001930 CD 0E E9         [ 4] 4146 DOTI1:  CALL     DOTQP
      001933 09                    4147         .byte      9
      001934 20 6E 6F 4E 61 6D 65  4148         .ascii     " noName"
      00193B 81               [ 4] 4149         RET
                                   4150 
                           000000  4151 WANT_SEE=0
                           000000  4152 .if WANT_SEE 
                                   4153 ;       SEE     ( -- ; <string> )
                                   4154 ;       A simple decompiler.
                                   4155 ;       Updated for byte machines.
                                   4156         .word      LINK
                                   4157 LINK = . 
                                   4158         .byte      3
                                   4159         .ascii     "SEE"
                                   4160 SEE:
                                   4161         CALL     TICK    ;starting address
                                   4162         CALL     CR
                                   4163         CALL     ONEM
                                   4164 SEE1:   CALL     ONEP
                                   4165         CALL     DUPP
                                   4166         CALL     AT
                                   4167         CALL     DUPP
                                   4168         CALL     QBRAN
                                   4169         .word    SEE2
                                   4170         CALL     TNAME   ;?is it a name
                                   4171 SEE2:   CALL     QDUP    ;name address or zero
                                   4172         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173         .word    SEE3
                                   4174         CALL     SPACE
                                   4175         CALL     DOTID   ;display name
                                   4176         CALL     ONEP
                                   4177         JRA      SEE4
                                   4178 SEE3:   CALL     DUPP
                                   4179         CALL     CAT
                                   4180         CALL     UDOT    ;display number
                                   4181 SEE4:   CALL     NUFQ    ;user control
                                   4182         CALL     QBRAN
                                   4183         .word    SEE1
                                   4184         JP     DROP
                                   4185 .endif ; WANT_SEE 
                                   4186 
                                   4187 ;       WORDS   ( -- )
                                   4188 ;       Display names in vocabulary.
      00193C 19 16                 4189         .word      LINK
                           00193E  4190 LINK = . 
      00193E 05                    4191         .byte      5
      00193F 57 4F 52 44 53        4192         .ascii     "WORDS"
      001944                       4193 WORDS:
      001944 CD 0E AA         [ 4] 4194         CALL     CR
      001947 CD 06 23         [ 4] 4195         CALL     CNTXT   ;only in context
      00194A CD 04 3C         [ 4] 4196 WORS1:  CALL     AT
      00194D CD 06 8D         [ 4] 4197         CALL     QDUP    ;?at end of list
      001950 CD 03 E7         [ 4] 4198         CALL     QBRAN
      001953 19 66                 4199         .word      WORS2
      001955 CD 04 E3         [ 4] 4200         CALL     DUPP
      001958 CD 0E 62         [ 4] 4201         CALL     SPACE
      00195B CD 19 1A         [ 4] 4202         CALL     DOTID   ;display a name
      00195E CD 09 BC         [ 4] 4203         CALL     CELLM
      001961 CD 03 FE         [ 4] 4204         CALL     BRAN
      001964 19 4A                 4205         .word      WORS1
      001966 81               [ 4] 4206 WORS2:  RET
                                   4207 
                                   4208         
                                   4209 ;; Hardware reset
                                   4210 
                                   4211 ;       hi      ( -- )
                                   4212 ;       Display sign-on message.
      001967 19 3E                 4213         .word      LINK
                           001969  4214 LINK = . 
      001969 02                    4215         .byte      2
      00196A 68 69                 4216         .ascii     "hi"
      00196C                       4217 HI:
      00196C CD 0E AA         [ 4] 4218         CALL     CR
      00196F CD 0E E9         [ 4] 4219         CALL     DOTQP   ;initialize I/O
      001972 0F                    4220         .byte      15
      001973 73 74 6D 38 65 46 6F  4221         .ascii     "stm8eForth v"
             72 74 68 20 76
      00197F 33                    4222 	.byte      VER+'0'
      001980 2E                    4223         .byte      '.' 
      001981 30                    4224 	.byte      EXT+'0' ;version
      001982 CC 0E AA         [ 2] 4225         JP     CR
                                   4226 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                           000000  4227 WANT_DEBUG=0
                           000000  4228 .if WANT_DEBUG 
                                   4229 ;       DEBUG      ( -- )
                                   4230 ;       Display sign-on message.
                                   4231 ;        .word      LINK
                                   4232 LINK = . 
                                   4233         .byte      5
                                   4234         .ascii     "DEBUG"
                                   4235 DEBUG:
                                   4236 	CALL DOLIT
                                   4237 	.word 0x65
                                   4238 	CALL EMIT
                                   4239 	CALL DOLIT
                                   4240 	.word 0
                                   4241  	CALL ZLESS 
                                   4242 	CALL DOLIT
                                   4243 	.word 0xFFFE
                                   4244 	CALL ZLESS 
                                   4245 	CALL UPLUS 
                                   4246  	CALL DROP 
                                   4247 	CALL DOLIT
                                   4248 	.word 3
                                   4249 	CALL UPLUS 
                                   4250 	CALL UPLUS 
                                   4251  	CALL DROP
                                   4252 	CALL DOLIT
                                   4253 	.word 0x43
                                   4254 	CALL UPLUS 
                                   4255  	CALL DROP
                                   4256 	CALL EMIT
                                   4257 	CALL DOLIT
                                   4258 	.word 0x4F
                                   4259 	CALL DOLIT
                                   4260 	.word 0x6F
                                   4261  	CALL XORR
                                   4262 	CALL DOLIT
                                   4263 	.word 0xF0
                                   4264  	CALL ANDD
                                   4265 	CALL DOLIT
                                   4266 	.word 0x4F
                                   4267  	CALL ORR
                                   4268 	CALL EMIT
                                   4269 	CALL DOLIT
                                   4270 	.word 8
                                   4271 	CALL DOLIT
                                   4272 	.word 6
                                   4273  	CALL SWAPP
                                   4274 	CALL OVER
                                   4275 	CALL XORR
                                   4276 	CALL DOLIT
                                   4277 	.word 3
                                   4278 	CALL ANDD 
                                   4279 	CALL ANDD
                                   4280 	CALL DOLIT
                                   4281 	.word 0x70
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4282 	CALL UPLUS 
                                   4283 	CALL DROP
                                   4284 	CALL EMIT
                                   4285 	CALL DOLIT
                                   4286 	.word 0
                                   4287 	CALL QBRAN
                                   4288 	.word DEBUG1
                                   4289 	CALL DOLIT
                                   4290 	.word 0x3F
                                   4291 DEBUG1:
                                   4292 	CALL DOLIT
                                   4293 	.word 0xFFFF
                                   4294 	CALL QBRAN
                                   4295 	.word DEBUG2
                                   4296 	CALL DOLIT
                                   4297 	.word 0x74
                                   4298 	CALL BRAN
                                   4299 	.word DEBUG3
                                   4300 DEBUG2:
                                   4301 	CALL DOLIT
                                   4302 	.word 0x21
                                   4303 DEBUG3:
                                   4304 	CALL EMIT
                                   4305 	CALL DOLIT
                                   4306 	.word 0x68
                                   4307 	CALL DOLIT
                                   4308 	.word 0x80
                                   4309 	CALL STORE
                                   4310 	CALL DOLIT
                                   4311 	.word 0x80
                                   4312 	CALL AT
                                   4313 	CALL EMIT
                                   4314 	CALL DOLIT
                                   4315 	.word 0x4D
                                   4316 	CALL TOR
                                   4317 	CALL RAT
                                   4318 	CALL RFROM
                                   4319 	CALL ANDD
                                   4320 	CALL EMIT
                                   4321 	CALL DOLIT
                                   4322 	.word 0x61
                                   4323 	CALL DOLIT
                                   4324 	.word 0xA
                                   4325 	CALL TOR
                                   4326 DEBUG4:
                                   4327 	CALL DOLIT
                                   4328 	.word 1
                                   4329 	CALL UPLUS 
                                   4330 	CALL DROP
                                   4331 	CALL DONXT
                                   4332 	.word DEBUG4
                                   4333 	CALL EMIT
                                   4334 	CALL DOLIT
                                   4335 	.word 0x656D
                                   4336 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4337 	.word 0x100
                                   4338 	CALL UMSTA
                                   4339 	CALL SWAPP
                                   4340 	CALL DOLIT
                                   4341 	.word 0x100
                                   4342 	CALL UMSTA
                                   4343 	CALL SWAPP 
                                   4344 	CALL DROP
                                   4345 	CALL EMIT
                                   4346 	CALL EMIT
                                   4347 	CALL DOLIT
                                   4348 	.word 0x2043
                                   4349 	CALL DOLIT
                                   4350 	.word 0
                                   4351 	CALL DOLIT
                                   4352 	.word 0x100
                                   4353 	CALL UMMOD
                                   4354 	CALL EMIT
                                   4355 	CALL EMIT
                                   4356 	;JP ORIG
                                   4357 	RET
                                   4358 .endif ; WANT_DEBUG 
                                   4359 
                                   4360 
                                   4361 ;       'BOOT   ( -- a )
                                   4362 ;       The application startup vector.
      001985 19 69                 4363         .word      LINK
                           001987  4364 LINK = . 
      001987 05                    4365         .byte      5
      001988 27 42 4F 4F 54        4366         .ascii     "'BOOT"
      00198D                       4367 TBOOT:
      00198D CD 05 90         [ 4] 4368         CALL     DOVAR
      001990 40 02                 4369         .word    APP_RUN      ;application to boot
                                   4370 
                                   4371 ;       COLD    ( -- )
                                   4372 ;       The hilevel cold start s=ence.
      001992 19 87                 4373         .word      LINK
                           001994  4374         LINK = . 
      001994 04                    4375         .byte      4
      001995 43 4F 4C 44           4376         .ascii     "COLD"
      001999                       4377 COLD:
                           000000  4378 .if WANT_DEBUG
                                   4379         CALL DEBUG
                                   4380 .endif ; WANT_DEBUG
      001999 CD 03 B4         [ 4] 4381 COLD1:  CALL     DOLIT
      00199C 00 2B                 4382         .word      UZERO
      00199E CD 03 B4         [ 4] 4383 	CALL     DOLIT
      0019A1 00 06                 4384         .word      UPP
      0019A3 CD 03 B4         [ 4] 4385         CALL     DOLIT
      0019A6 00 1A                 4386 	.word      UEND-UZERO
      0019A8 CD 0B 7F         [ 4] 4387         CALL     CMOVE   ;initialize user area
                                   4388 
                                   4389 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019AB 90 CE 40 02      [ 2] 4390         ldw y,APP_RUN 
      0019AF 26 0B            [ 1] 4391         jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0019B1 1D 00 02         [ 2] 4392         subw x,#CELLL 
      0019B4 90 AE 19 6C      [ 2] 4393         ldw y,#HI  
      0019B8 FF               [ 2] 4394         ldw (x),y
      0019B9 CD 1B 65         [ 4] 4395         call UPDATRUN 
      0019BC                       4396 0$:        
                                   4397 ; update LAST with APP_LAST 
                                   4398 ; if APP_LAST > LAST else do the opposite
      0019BC 90 CE 40 00      [ 2] 4399         ldw y,APP_LAST 
      0019C0 90 B3 1A         [ 2] 4400         cpw y,ULAST 
      0019C3 22 05            [ 1] 4401         jrugt 1$ 
                                   4402 ; save LAST at APP_LAST  
      0019C5 CD 1B 4D         [ 4] 4403         call UPDATLAST 
      0019C8 20 06            [ 2] 4404         jra 2$
      0019CA                       4405 1$: ; update LAST with APP_LAST 
      0019CA 90 BF 1A         [ 2] 4406         ldw ULAST,y
      0019CD 90 BF 14         [ 2] 4407         ldw UCNTXT,y
      0019D0                       4408 2$:  
                                   4409 ; update APP_CP if < app_space 
      0019D0 90 CE 40 04      [ 2] 4410         ldw y,APP_CP  
      0019D4 90 B3 18         [ 2] 4411         cpw y,UCP   
      0019D7 24 06            [ 1] 4412         jruge 3$ 
      0019D9 CD 1B 76         [ 4] 4413         call UPDATCP
      0019DC 90 BE 18         [ 2] 4414         ldw y,UCP   
      0019DF                       4415 3$:
      0019DF 90 BF 18         [ 2] 4416         ldw UCP,y                 
                                   4417 ; update UVP with APP_VP  
                                   4418 ; if APP_VP>UVP else do the opposite 
      0019E2 90 CE 40 06      [ 2] 4419         ldw y,APP_VP 
      0019E6 90 B3 16         [ 2] 4420         cpw y,UVP 
      0019E9 22 05            [ 1] 4421         jrugt 4$
      0019EB CD 1B 8D         [ 4] 4422         call UPDATVP 
      0019EE 20 03            [ 2] 4423         jra 6$
      0019F0                       4424 4$: ; update UVP with APP_VP 
      0019F0 90 BF 16         [ 2] 4425         ldw UVP,y 
      0019F3                       4426 6$:      
      0019F3 CD 13 AD         [ 4] 4427         CALL     PRESE   ;initialize data stack and TIB
      0019F6 CD 19 8D         [ 4] 4428         CALL     TBOOT
      0019F9 CD 0B 68         [ 4] 4429         CALL     ATEXE   ;application boot
      0019FC CD 16 76         [ 4] 4430         CALL     OVERT
      0019FF CC 13 CA         [ 2] 4431         JP     QUIT    ;start interpretation
                                   4432 
                           000001  4433 WANT_MATH_CONST = 1 
                           000001  4434 .if WANT_MATH_CONST 
                                   4435         ; irrational constants 
                                   4436         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      001A02 19 94                   31         .word LINK 
                           001A04    32         LINK=.
      001A04 02                      33         .byte 2
      001A05 50 49                   34         .ascii "PI" 
      001A07                         35 PII:
      001A07 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      001A0A 90 AE 01 63      [ 2]   37         ldw y,#355 
      001A0E EF 02            [ 2]   38         ldw (2,x),y 
      001A10 90 AE 00 71      [ 2]   39         ldw y,#113 
      001A14 FF               [ 2]   40         ldw (x),y 
      001A15 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      001A16 1A 04                   48         .word LINK 
                           001A18    49         LINK=.
      001A18 05                      50         .byte 5 
      001A19 53 51 52 54 32          51         .ascii "SQRT2" 
      001A1E                         52 SQRT2:
      001A1E 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      001A21 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A25 EF 02            [ 2]   55         ldw (2,x),y 
      001A27 90 AE 36 24      [ 2]   56         ldw y,#13860 
      001A2B FF               [ 2]   57         ldw (x),y 
      001A2C 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      001A2D 1A 18                   63         .word LINK 
                           001A2F    64         LINK=.
      001A2F 05                      65         .byte 5
      001A30 53 51 52 54 33          66         .ascii "SQRT3" 
      001A35                         67 SQRT3: 
      001A35 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001A38 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001A3C EF 02            [ 2]   70     ldw (2,x),y 
      001A3E 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      001A42 FF               [ 2]   72     ldw (x),y 
      001A43 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      001A44 1A 2F                   78         .word LINK 
                           001A46    79         LINK=.
      001A46 01                      80         .byte 1
      001A47 45                      81         .ascii "E" 
      001A48                         82 ENEPER:
      001A48 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001A4B 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001A4F EF 02            [ 2]   85     ldw (2,x),y 
      001A51 90 AE 29 32      [ 2]   86     ldw y,#10546 
      001A55 FF               [ 2]   87     ldw (x),y 
      001A56 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001A57 1A 46                   92         .word LINK 
                           001A59    93         LINK=.
      001A59 06                      94         .byte 6 
      001A5A 53 51 52 54 31 30       95         .ascii "SQRT10" 
      001A60                         96 SQRT10:
      001A60 1D 00 04         [ 2]   97     subw x,#2*CELLL
      001A63 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001A67 EF 02            [ 2]   99     ldw (2,x),y 
      001A69 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001A6D FF               [ 2]  101     ldw (x),y 
      001A6E 81               [ 4]  102     ret 
                                    103 
                                    104 ;   SQRT12 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001A6F 1A 59                  107         .word LINK 
                           001A71   108         LINK=. 
      001A71 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A72 31 32 52 54 32         110         .ascii "12RT2"
      001A77                        111 RT12_2:
      001A77 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A7A 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A7E EF 02            [ 2]  114     ldw (2,x),y 
      001A80 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A84 FF               [ 2]  116     ldw (x),y 
      001A85 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A86 1A 71                  122         .word LINK 
                           001A88   123         LINK=.
      001A88 05                     124         .byte 5 
      001A89 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001A8E                        126 LOG2S:
      001A8E 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A91 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001A95 EF 02            [ 2]  129     ldw (2,x),y 
      001A97 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001A9B FF               [ 2]  131     ldw (x),y 
      001A9C 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001A9D 1A 88                  137         .word LINK 
                           001A9F   138         LINK=.
      001A9F 04                     139         .byte 4 
      001AA0 4C 4E 32 53            140         .ascii "LN2S" 
      001AA4                        141 LN2S: 
      001AA4 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001AA7 90 AE 01 E5      [ 2]  143     ldw y,#485
      001AAB EF 02            [ 2]  144     ldw (2,x),y 
      001AAD 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001AB1 FF               [ 2]  146     ldw (x),y 
      001AB2 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4438 .endif ; WANT_MATH_CONST
                                   4439 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4440         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001AB3 1A 9F                   30     .word LINK 
                           001AB5    31     LINK=.
      001AB5 03                      32     .byte 3 
      001AB6 46 50 21                33     .ascii "FP!"
      001AB9                         34 fptr_store:
      001AB9 90 93            [ 1]   35     ldw y,x
      001ABB 90 FE            [ 2]   36     ldw y,(y)
      001ABD 90 9F            [ 1]   37     ld a,yl 
      001ABF B7 32            [ 1]   38     ld FPTR,a 
      001AC1 1C 00 02         [ 2]   39     addw x,#CELLL 
      001AC4 90 93            [ 1]   40     ldw y,x 
      001AC6 90 FE            [ 2]   41     ldw y,(y)
      001AC8 90 BF 33         [ 2]   42     ldw PTR16,y
      001ACB 1C 00 02         [ 2]   43     addw x,#CELLL 
      001ACE 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001ACF 1A B5                   51     .word LINK 
                           001AD1    52 LINK=.
      001AD1 06                      53     .byte 6 
      001AD2 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001AD8                         55 EEPROM: 
      001AD8 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001ADC 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001ADF EF 02            [ 2]   58     ldw (2,x),y 
      001AE1 90 5F            [ 1]   59     clrw y 
      001AE3 FF               [ 2]   60     ldw (x),y 
      001AE4 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001AE5 1A D1                   67 	.word LINK 
                           001AE7    68 	LINK=.
      001AE7 08                      69 	.byte 8 
      001AE8 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001AF0                         71 EEPLAST:
      001AF0 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001AF3 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001AF7 EF 02            [ 2]   74 	ldw (2,x),y 
      001AF9 90 5F            [ 1]   75 	clrw y 
      001AFB FF               [ 2]   76 	ldw (x),y 
      001AFC 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001AFD 1A E7                   83 	.word LINK 
                           001AFF    84 	LINK=.
      001AFF 07                      85 	.byte 7
      001B00 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B07                         87 EEPRUN:
      001B07 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B0A 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B0E EF 02            [ 2]   90 	ldw (2,x),y 
      001B10 90 5F            [ 1]   91 	clrw y 
      001B12 FF               [ 2]   92 	ldw (x),y 
      001B13 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B14 1A FF                   99 	.word LINK
                           001B16   100 	LINK=.
      001B16 06                     101 	.byte 6 
      001B17 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B1D                        103 EEPCP:
      001B1D 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B20 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B24 EF 02            [ 2]  106 	ldw (2,x),y 
      001B26 90 5F            [ 1]  107 	clrw y 
      001B28 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B29 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B2A 1B 16                  115 	.word LINK
                           001B2C   116 	LINK=.
      001B2C 06                     117 	.byte 6
      001B2D 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B33                        119 EEPVP:
      001B33 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B36 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B3A EF 02            [ 2]  122 	ldw (2,x),y 
      001B3C 90 5F            [ 1]  123 	clrw y 
      001B3E FF               [ 2]  124 	ldw (x),y 
      001B3F 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B40 1B 2C                  131 	.word LINK 
                           001B42   132 	LINK=.
      001B42 0A                     133 	.byte 10
      001B43 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B4D                        135 UPDATLAST:
      001B4D CD 06 4F         [ 4]  136 	call LAST
      001B50 CD 04 3C         [ 4]  137 	call AT  
      001B53 CD 1A F0         [ 4]  138 	call EEPLAST
      001B56 CC 1C C9         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B59 1B 42                  145 	.word LINK
                           001B5B   146 	LINK=.
      001B5B 09                     147 	.byte 9
      001B5C 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B65                        149 UPDATRUN:
      001B65 CD 1B 07         [ 4]  150 	call EEPRUN
      001B68 CC 1C C9         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B6B 1B 5B                  157 	.word LINK 
                           001B6D   158 	LINK=.
      001B6D 08                     159 	.byte 8 
      001B6E 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B76                        161 UPDATCP:
      001B76 CD 06 3F         [ 4]  162 	call CPP 
      001B79 CD 04 3C         [ 4]  163 	call AT 
      001B7C CD 1B 1D         [ 4]  164 	call EEPCP 
      001B7F CC 1C C9         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B82 1B 6D                  171 	.word LINK
                           001B84   172 	LINK=.
      001B84 08                     173 	.byte 8 
      001B85 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B8D                        175 UPDATVP:
      001B8D CD 06 31         [ 4]  176 	call VPP 
      001B90 CD 04 3C         [ 4]  177 	call AT
      001B93 CD 1B 33         [ 4]  178 	call EEPVP 
      001B96 CC 1C C9         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001B99 1B 84                  186     .word LINK 
                           001B9B   187 LINK=.
      001B9B 02                     188     .byte 2
      001B9C 46 40                  189     .ascii "F@"
      001B9E                        190 farat:
      001B9E CD 1A B9         [ 4]  191     call fptr_store
      001BA1 92 BC 00 32      [ 5]  192     ldf a,[FPTR]
      001BA5 1D 00 02         [ 2]  193     subw x,#CELLL 
      001BA8 F7               [ 1]  194     ld (x),a 
      001BA9 90 AE 00 01      [ 2]  195     ldw y,#1
      001BAD 91 AF 00 32      [ 1]  196     ldf a,([FPTR],y)
      001BB1 E7 01            [ 1]  197     ld (1,x),a
      001BB3 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001BB4 1B 9B                  204     .word LINK
                           001BB6   205     LINK=.
      001BB6 03                     206     .byte 3 
      001BB7 46 43 40               207     .ascii "FC@" 
      001BBA                        208 farcat:
      001BBA CD 1A B9         [ 4]  209     call fptr_store 
      001BBD 92 BC 00 32      [ 5]  210     ldf a,[FPTR]
      001BC1 1D 00 02         [ 2]  211     subw x,#CELLL 
      001BC4 E7 01            [ 1]  212     ld (1,x),a 
      001BC6 7F               [ 1]  213     clr (x)
      001BC7 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001BC8 1B B6                  221     .word LINK 
                           001BCA   222 LINK=.
      001BCA 06                     223     .byte 6 
      001BCB 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001BD1                        225 unlock_eeprom:
      001BD1 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001BD5 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001BD9 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BDD 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BE1 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BE6 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001BE7 1B CA                  238     .word LINK 
                           001BE9   239 LINK=. 
      001BE9 06                     240     .byte 6 
      001BEA 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001BF0                        242 unlock_flash:
      001BF0 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001BF4 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001BF8 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BFC 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001C00 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C05 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001C06 1B E9                  255 	.word LINK 
                           001C08   256 	LINK=.
      001C08 06                     257 	.byte 6
      001C09 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001C0F                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001C0F 90 BE 33         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C12 3D 32            [ 1]  263 	tnz FPTR 
      001C14 26 16            [ 1]  264 	jrne 4$
      001C16 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001C1A 24 10            [ 1]  266     jruge 4$
      001C1C 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001C20 25 0D            [ 1]  268     jrult 9$
      001C22 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001C26 22 07            [ 1]  270 	jrugt 9$
      001C28 CD 1B D1         [ 4]  271 	call unlock_eeprom
      001C2B 81               [ 4]  272 	ret 
      001C2C CD 1B F0         [ 4]  273 4$: call unlock_flash
      001C2F 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001C30 1C 08                  281 	.word LINK 
                           001C32   282 	LINK=.
      001C32 04                     283 	.byte 4 
      001C33 4C 4F 43 4B            284 	.ascii "LOCK" 
      001C37                        285 lock: 
      001C37 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C3B 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C3F 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001C40 1C 32                  294 	.word LINK 
                           001C42   295 	LINK=. 
      001C42 08                     296 	.byte 8 
      001C43 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001C4B                        298 inc_fptr:
      001C4B 3C 34            [ 1]  299 	inc PTR8 
      001C4D 26 08            [ 1]  300 	jrne 1$
      001C4F 90 BE 32         [ 2]  301 	ldw y,FPTR 
      001C52 90 5C            [ 2]  302 	incw y 
      001C54 90 BF 32         [ 2]  303 	ldw FPTR,y 
      001C57 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001C58 1C 42                  315 	.word LINK 
                           001C5A   316 	LINK=. 
      001C5A 07                     317 	.byte 7 
      001C5B 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001C62                        320 write_byte:
      001C62 90 93            [ 1]  321 	ldw y,x 
      001C64 90 FE            [ 2]  322 	ldw y,(y)
      001C66 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C69 90 9F            [ 1]  324 	ld a,yl
      001C6B 92 BD 00 32      [ 4]  325 	ldf [FPTR],a
      001C6F 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C74 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001C76 1C 5A                  335     .word LINK 
                           001C78   336 	LINK=.
      001C78 04                     337     .byte 4 
      001C79 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001C7D                        343 ee_cstore:
      001C7D 52 02            [ 2]  344 	sub sp,#VSIZE
      001C7F CD 1A B9         [ 4]  345     call fptr_store
      001C82 E6 01            [ 1]  346 	ld a,(1,x)
      001C84 43               [ 1]  347 	cpl a 
      001C85 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001C87 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001C89 CD 1C 0F         [ 4]  350 	call unlock 
                                    351 	; check if option
      001C8C 3D 32            [ 1]  352 	tnz FPTR 
      001C8E 26 19            [ 1]  353 	jrne 2$
      001C90 90 BE 33         [ 2]  354 	ldw y,PTR16 
      001C93 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001C97 2B 10            [ 1]  356 	jrmi 2$
      001C99 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001C9D 2A 0A            [ 1]  358 	jrpl 2$
      001C9F 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001CA1 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001CA5 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001CA9                        363 2$: 
      001CA9 CD 1C 62         [ 4]  364 	call write_byte 	
      001CAC 0D 02            [ 1]  365 	tnz (OPT,sp)
      001CAE 27 0D            [ 1]  366 	jreq 3$ 
      001CB0 7B 01            [ 1]  367     ld a,(BTW,sp)
      001CB2 90 5F            [ 1]  368     clrw y
      001CB4 90 97            [ 1]  369 	ld yl,a 
      001CB6 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001CB9 FF               [ 2]  371 	ldw (x),y 
      001CBA CD 1C 62         [ 4]  372 	call write_byte
      001CBD                        373 3$: 
      001CBD CD 1C 37         [ 4]  374 	call lock 
      001CC0 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001CC2 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001CC3 1C 78                  382 	.word LINK 
                           001CC5   383 	LINK=.
      001CC5 03                     384 	.byte 3 
      001CC6 45 45 21               385 	.ascii "EE!"
      001CC9                        386 ee_store:
      001CC9 CD 1A B9         [ 4]  387 	call fptr_store 
      001CCC CD 1C 0F         [ 4]  388 	call unlock 
      001CCF 90 93            [ 1]  389 	ldw y,x 
      001CD1 90 FE            [ 2]  390 	ldw y,(y)
      001CD3 90 89            [ 2]  391 	pushw y 
      001CD5 90 5E            [ 1]  392 	swapw y 
      001CD7 FF               [ 2]  393 	ldw (x),y 
      001CD8 CD 1C 62         [ 4]  394 	call write_byte 
      001CDB 90 85            [ 2]  395 	popw y 
      001CDD 1D 00 02         [ 2]  396 	subw x,#CELLL
      001CE0 FF               [ 2]  397 	ldw (x),y 
      001CE1 CD 1C 62         [ 4]  398 	call write_byte
      001CE4 CC 1C 37         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001CE7 1C C5                  407 	.word LINK 
                           001CE9   408 	LINK=. 
      001CE9 09                     409 	.byte 9 
      001CEA 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001CF3                        411 row_erase:
      001CF3 CD 1A B9         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001CF6 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001CF9 90 AE 1D 40      [ 2]  416 	ldw y,#row_erase_proc
      001CFD FF               [ 2]  417 	ldw (x),y 
      001CFE CD 0B 43         [ 4]  418 	call PAD 
      001D01 90 AE 1D 67      [ 2]  419 	ldw y,#row_erase_proc_end 
      001D05 72 A2 1D 40      [ 2]  420 	subw y,#row_erase_proc
      001D09 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001D0C FF               [ 2]  422 	ldw (x),y 
      001D0D CD 0B 7F         [ 4]  423 	call CMOVE 
      001D10                        424 block_erase:
      001D10 90 BE 33         [ 2]  425 	ldw y,FPTR+1
      001D13 90 A3 21 80      [ 2]  426 	cpw y,#app_space 
      001D17 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001D19 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001D1D 24 01            [ 1]  430 	jruge 1$
      001D1F 81               [ 4]  431 	ret ; bad address 
      001D20 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D24 23 01            [ 2]  433 	jrule 2$ 
      001D26 81               [ 4]  434 	ret ; bad address 
      001D27                        435 2$:	
      001D27 CD 1B D1         [ 4]  436 	call unlock_eeprom 
      001D2A 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001D2C                        439 erase_flash:
      001D2C CD 1B F0         [ 4]  440 	call unlock_flash 
      001D2F                        441 proceed_erase:
      001D2F CD 0B 43         [ 4]  442 	call PAD 
      001D32 90 93            [ 1]  443 	ldw y,x
      001D34 90 FE            [ 2]  444 	ldw y,(y)
      001D36 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001D39 90 FD            [ 4]  446 	call (y) 
      001D3B 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D3F 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001D40                        451 row_erase_proc:
      001D40 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D44 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D48 4F               [ 1]  454 	clr a 
      001D49 90 5F            [ 1]  455 	clrw y 
      001D4B 91 A7 00 32      [ 1]  456 	ldf ([FPTR],y),a
      001D4F 90 5C            [ 2]  457     incw y
      001D51 91 A7 00 32      [ 1]  458 	ldf ([FPTR],y),a
      001D55 90 5C            [ 2]  459     incw y
      001D57 91 A7 00 32      [ 1]  460 	ldf ([FPTR],y),a
      001D5B 90 5C            [ 2]  461     incw y
      001D5D 91 A7 00 32      [ 1]  462 	ldf ([FPTR],y),a
      001D61 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D66 81               [ 4]  464 	ret
      001D67                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001D67                        478 copy_buffer:
      001D67 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001D69 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D6D 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D71 90 5F            [ 1]  483 	clrw y
      001D73 F6               [ 1]  484 1$:	ld a,(x)
      001D74 91 A7 00 32      [ 1]  485 	ldf ([FPTR],y),a
      001D78 5C               [ 2]  486 	incw x 
      001D79 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D7B 0A 01            [ 1]  488 	dec (BCNT,sp)
      001D7D 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001D7F 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D84 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001D85 81               [ 4]  493 	ret 
      001D86                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001D86                        500 copy_prog_to_ram:
      001D86 1D 00 06         [ 2]  501 	subw x,#6
      001D89 90 AE 1D 67      [ 2]  502 	ldw y,#copy_buffer 
      001D8D EF 04            [ 2]  503 	ldw (4,x),y 
      001D8F 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001D93 EF 02            [ 2]  505 	ldw (2,x),y 
      001D95 90 AE 1D 86      [ 2]  506 	ldw y,#copy_buffer_end 
      001D99 72 A2 1D 67      [ 2]  507 	subw y,#copy_buffer  
      001D9D FF               [ 2]  508 	ldw (x),y 
      001D9E CD 0B 7F         [ 4]  509 	call CMOVE 
      001DA1 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001DA2 1C E9                  519 	.word LINK 
                           001DA4   520 	LINK=.
      001DA4 06                     521 	.byte 6 
      001DA5 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001DAB                        523 write_row:
      001DAB CD 1A B9         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001DAE A6 80            [ 1]  526 	ld a,#0x80 
      001DB0 B4 34            [ 1]  527 	and a,PTR8 
      001DB2 B7 34            [ 1]  528 	ld PTR8,a  
      001DB4 CD 1D 86         [ 4]  529 	call copy_prog_to_ram
      001DB7 CD 1C 0F         [ 4]  530 	call unlock
      001DBA 90 93            [ 1]  531 	ldw y,x 
      001DBC 90 FE            [ 2]  532 	ldw y,(y)
      001DBE 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001DC1 89               [ 2]  534 	pushw x 
      001DC2 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001DC3 CD 17 00         [ 4]  536 	call TIBBASE
      001DC6 CD 1C 37         [ 4]  537 	call lock
      001DC9 85               [ 2]  538 	popw x 
      001DCA 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001DCB 1D A4                  547 		.word LINK 
                           001DCD   548 		LINK=.
      001DCD 07                     549 		.byte 7 
      001DCE 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001DD5                        551 set_option: 
      001DD5 90 93            [ 1]  552 		ldw y,x 
      001DD7 90 FE            [ 2]  553 		ldw y,(y)
      001DD9 27 06            [ 1]  554 		jreq 1$
      001DDB 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001DDF 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001DE1 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001DE4 81               [ 4]  559 		ret
      001DE5 90 58            [ 2]  560 2$:		sllw y 
      001DE7 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001DEB FF               [ 2]  562 		ldw (x),y 
      001DEC 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001DEF 90 5F            [ 1]  564 		clrw y 
      001DF1 FF               [ 2]  565 		ldw (x),y 
      001DF2 CD 1C 7D         [ 4]  566 		call ee_cstore
      001DF5 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001DF6 1D CD                  576 	.word LINK  
                           001DF8   577 	LINK=.
      001DF8 08                     578 	.byte 8 
      001DF9 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001E01                        580 pristine:
                                    581 ;;; erase EEPROM
      001E01 CD 1A D8         [ 4]  582 	call EEPROM 
      001E04 CD 06 C9         [ 4]  583 1$:	call DDUP 
      001E07 CD 1C F3         [ 4]  584 	call row_erase
      001E0A 90 93            [ 1]  585 	ldw y,x 
      001E0C 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001E0F 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001E13 EF 02            [ 2]  588 	ldw (2,x),y
      001E15 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001E19 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001E1B 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001E1F FF               [ 2]  593 2$:	ldw (x),y   
      001E20 90 5F            [ 1]  594 	clrw y 
      001E22 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E24 CD 06 C9         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E27 CD 1D D5         [ 4]  597 	call set_option
      001E2A 90 93            [ 1]  598 	ldw y,x 
      001E2C 90 FE            [ 2]  599 	ldw y,(y)
      001E2E 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001E30 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001E34 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001E36 90 AE 21 80      [ 2]  604 	ldw y,#app_space
      001E3A EF 02            [ 2]  605 	ldw (2,x),y  
      001E3C 90 5F            [ 1]  606 	clrw y 
      001E3E FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001E3F CD 1C F3         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001E42 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001E45 90 5F            [ 1]  611 	clrw y  
      001E47 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001E48 CD 04 E3         [ 4]  613 	call DUPP  
      001E4B CD 1E 68         [ 4]  614 	call reset_vector
      001E4E 90 93            [ 1]  615 	ldw y,x 
      001E50 90 FE            [ 2]  616 	ldw y,(y)
      001E52 90 5C            [ 2]  617 	incw y   ; next vector 
      001E54 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001E58 25 ED            [ 1]  619 	jrult 4$
      001E5A CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001E5D 1D F8                  628 	.word LINK 
                           001E5F   629 	LINK=. 
      001E5F 08                     630 	.byte 8 
      001E60 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001E68                        632 reset_vector:
      001E68 90 93            [ 1]  633 	ldw y,x
      001E6A 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001E6D 90 FE            [ 2]  635 	ldw y,(y)
      001E6F 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001E73 27 3A            [ 1]  637 	jreq 9$
      001E75 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001E79 22 34            [ 1]  639 	jrugt 9$  
      001E7B 90 58            [ 2]  640 	sllw y 
      001E7D 90 58            [ 2]  641 	sllw y 
      001E7F 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001E83 90 BF 24         [ 2]  643 	ldw YTEMP,y
      001E86 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001E89 EF 02            [ 2]  645 	ldw (2,x),y 
      001E8B 90 5F            [ 1]  646 	clrw y
      001E8D FF               [ 2]  647 	ldw (x),y 
      001E8E A6 82            [ 1]  648 	ld a,#0x82 
      001E90 90 95            [ 1]  649 	ld yh,a
      001E92 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E94 CD 1C C9         [ 4]  651 	call ee_store
      001E97 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001E9A 90 5F            [ 1]  653 	clrw y 
      001E9C FF               [ 2]  654 	ldw (x),y 
      001E9D 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001EA1 EF 04            [ 2]  656 	ldw (4,x),y 
      001EA3 90 BE 24         [ 2]  657 	ldw y,YTEMP  
      001EA6 72 A9 00 02      [ 2]  658 	addw y,#2
      001EAA EF 02            [ 2]  659 	ldw (2,x),y 
      001EAC CD 1C C9         [ 4]  660 	call ee_store
      001EAF 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= a are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( a -- )
                                    669 ;------------------------------
      001EB0 1E 5F                  670 	.word LINK 
                           001EB2   671 	LINK=.
      001EB2 07                     672 	.byte 7
      001EB3 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001EBA                        679 CHKIVEC:
      001EBA 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001EBC 90 93            [ 1]  681 	ldw y,x 
      001EBE 90 FE            [ 2]  682 	ldw y,(y)
      001EC0 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001EC2 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001EC4 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001EC7 BF 33            [ 2]  686 	ldw PTR16,X
      001EC9 AE FF FC         [ 2]  687 	ldw x,#-4 
      001ECC 1C 00 04         [ 2]  688 1$:	addw x,#4
      001ECF A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001ED2 27 22            [ 1]  690 	jreq 9$
      001ED4 90 93            [ 1]  691 	ldw y,x  
      001ED6 91 D6 33         [ 4]  692 	ld a,([PTR16],y)
      001ED9 11 03            [ 1]  693 	cp a,(CADR,sp)
      001EDB 25 EF            [ 1]  694 	jrult 1$
      001EDD 90 5C            [ 2]  695 	incw y 
      001EDF 91 D6 33         [ 4]  696 	ld a,([PTR16],y)
      001EE2 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001EE4 25 E6            [ 1]  698 	jrult 1$ 
      001EE6 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001EE8 54               [ 2]  700 	srlw x
      001EE9 54               [ 2]  701 	srlw x 
      001EEA 90 93            [ 1]  702 	ldw y,x 
      001EEC 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001EEE FF               [ 2]  704 	ldw (x),y
      001EEF CD 1E 68         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001EF2 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001EF4 20 D6            [ 2]  707 	jra 1$
      001EF6 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001EF8 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001EFB 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001EFD 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001EFE 1E B2                  719 	.word LINK
                           001F00   720 	LINK=.
      001F00 08                     721 	.byte 8 
      001F01 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001F09                        723 set_vector:
      001F09 90 93            [ 1]  724     ldw y,x 
      001F0B 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001F0E 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001F10 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001F14 23 04            [ 2]  728 	jrule 2$
      001F16 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001F19 81               [ 4]  730 	ret
      001F1A 90 58            [ 2]  731 2$:	sllw y 
      001F1C 90 58            [ 2]  732 	sllw y 
      001F1E 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001F22 90 BF 24         [ 2]  734 	ldw YTEMP,y ; vector address 
      001F25 A6 82            [ 1]  735 	ld a,#0x82 
      001F27 90 95            [ 1]  736 	ld yh,a 
      001F29 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001F2B 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001F2D 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001F30 EF 04            [ 2]  741 	ldw (4,x),y 
      001F32 90 BE 24         [ 2]  742 	ldw y,YTEMP
      001F35 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001F37 90 5F            [ 1]  744 	clrw y 
      001F39 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001F3A CD 1C C9         [ 4]  746 	call ee_store 
      001F3D 90 93            [ 1]  747 	ldw y,x 
      001F3F 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001F42 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001F45 EF 04            [ 2]  750 	ldw (4,x),y 
      001F47 90 BE 24         [ 2]  751 	ldw y,YTEMP 
      001F4A 72 A9 00 02      [ 2]  752 	addw y,#2 
      001F4E EF 02            [ 2]  753 	ldw (2,x),y 
      001F50 90 5F            [ 1]  754 	clrw y 
      001F52 FF               [ 2]  755 	ldw (x),y 
      001F53 CD 1C C9         [ 4]  756 	call ee_store
      001F56 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001F59 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001F5A 1F 00                  765 	.word LINK
                           001F5C   766 	LINK=.
      001F5C 03                     767 	.byte 3
      001F5D 45 45 2C               768 	.ascii "EE,"
      001F60                        769 ee_comma:
      001F60 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001F63 90 BE 18         [ 2]  771 	ldw y,UCP
      001F66 90 89            [ 2]  772 	pushw y 
      001F68 EF 02            [ 2]  773 	ldw (2,x),y 
      001F6A 90 5F            [ 1]  774 	clrw y 
      001F6C FF               [ 2]  775 	ldw (x),y
      001F6D CD 1C C9         [ 4]  776 	call ee_store
      001F70 90 85            [ 2]  777 	popw y 
      001F72 72 A9 00 02      [ 2]  778 	addw y,#2
      001F76 90 BF 18         [ 2]  779 	ldw UCP,y
      001F79 81               [ 4]  780 	ret 
                                    781 
                                    782 
                                    783 ;-------------------------
                                    784 ; Compile byte to flash 
                                    785 ; EEC, ( c -- )	
                                    786 ;-------------------------
      001F7A 1F 5C                  787 	.word LINK 
                           001F7C   788 	LINK=.
      001F7C 04                     789 	.byte 4 
      001F7D 45 45 43 2C            790 	.ascii "EEC,"
      001F81                        791 ee_ccomma:
      001F81 1D 00 04         [ 2]  792 	subw x,#2*CELLL 
      001F84 90 BE 18         [ 2]  793 	ldw y,UCP
      001F87 90 89            [ 2]  794 	pushw y 
      001F89 EF 02            [ 2]  795 	ldw (2,x),y 
      001F8B 90 5F            [ 1]  796 	clrw y 
      001F8D FF               [ 2]  797 	ldw (x),y
      001F8E CD 1C 7D         [ 4]  798 	call ee_cstore
      001F91 90 85            [ 2]  799 	popw y 
      001F93 90 5C            [ 2]  800 	incw y 
      001F95 90 BF 18         [ 2]  801 	ldw UCP,y
      001F98 81               [ 4]  802 	ret 
                                    803 
                                    804 
                                    805 ;--------------------------
                                    806 ; copy FLASH block to ROWBUF
                                    807 ; ROW2BUF ( ud -- )
                                    808 ;--------------------------
      001F99 1F 7C                  809 	.word LINK 
                           001F9B   810 	LINK=.
      001F9B 07                     811 	.byte 7 
      001F9C 52 4F 57 32 42 55 46   812 	.ascii "ROW2BUF"
      001FA3                        813 ROW2BUF: 
      001FA3 CD 1A B9         [ 4]  814 	call fptr_store 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FA6 A6 80            [ 1]  815 	ld a,#BLOCK_SIZE
      001FA8 88               [ 1]  816 	push a 
      001FA9 B4 34            [ 1]  817 	and a,PTR8 ; block align 
      001FAB B7 34            [ 1]  818 	ld PTR8,a
      001FAD 90 AE 16 80      [ 2]  819 	ldw y,#ROWBUFF 
      001FB1 92 BC 00 32      [ 5]  820 1$: ldf a,[FPTR]
      001FB5 90 F7            [ 1]  821 	ld (y),a
      001FB7 CD 1C 4B         [ 4]  822 	call inc_fptr
      001FBA 90 5C            [ 2]  823 	incw y 
      001FBC 0A 01            [ 1]  824 	dec (1,sp)
      001FBE 26 F1            [ 1]  825 	jrne 1$ 
      001FC0 84               [ 1]  826 	pop a 
      001FC1 81               [ 4]  827 	ret 
                                    828 
                                    829 
                                    830 ;---------------------------
                                    831 ; copy ROWBUFF to flash 
                                    832 ; BUF2ROW ( ud -- )
                                    833 ; ud is row address as double 
                                    834 ;---------------------------
      001FC2 1F 9B                  835 	.word LINK 
                           001FC4   836 	LINK=.
      001FC4 07                     837 	.byte 7 
      001FC5 42 55 46 32 52 4F 57   838 	.ascii "BUF2ROW" 
      001FCC                        839 BUF2ROW:
      001FCC CD 05 DE         [ 4]  840 	call TBUF ; ( ud rb -- )
      001FCF CD 06 9E         [ 4]  841 	call ROT 
      001FD2 CD 06 9E         [ 4]  842 	call ROT  ; ( rb ud -- )
      001FD5 CD 1D AB         [ 4]  843 	call write_row 
      001FD8 81               [ 4]  844 	ret 
                                    845 
                                    846 ;---------------------------------
                                    847 ; how many byte free in that row 
                                    848 ; RFREE ( a -- n )
                                    849 ; a is least byte of target address
                                    850 ;----------------------------------
      001FD9 1F C4                  851 	.word LINK 
                           001FDB   852 	LINK=.
      001FDB 05                     853 	.byte 5 
      001FDC 52 46 52 45 45         854 	.ascii "RFREE"
      001FE1                        855 RFREE:
      001FE1 E6 01            [ 1]  856 	ld a,(1,x)
      001FE3 A4 7F            [ 1]  857 	and a,#BLOCK_SIZE-1 
      001FE5 B7 24            [ 1]  858 	ld YTEMP,a 
      001FE7 A6 80            [ 1]  859 	ld a,#BLOCK_SIZE 
      001FE9 B0 24            [ 1]  860 	sub a,YTEMP 
      001FEB 90 5F            [ 1]  861 	clrw y 
      001FED 90 97            [ 1]  862 	ld yl,a
      001FEF FF               [ 2]  863 	ldw (x),y 
      001FF0 81               [ 4]  864 	ret 
                                    865 
                                    866 ;---------------------------------
                                    867 ; write u bytes to flash/EEPROM 
                                    868 ; constraint to row limit 
                                    869 ; RAM2EE ( ud a u -- u2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    870 ; ud flash address 
                                    871 ; a ram address 
                                    872 ; u bytes count
                                    873 ; return u2 bytes written  
                                    874 ;-------------------------------
      001FF1 1F DB                  875 	.word LINK 
                           001FF3   876 	LINK=. 
      001FF3 06                     877 	.byte 6
      001FF4 52 41 4D 32 45 45      878 	.ascii "RAM2EE"
                                    879 	
      001FFA                        880 RAM2EE:
                                    881 ; copy ud on top 
      001FFA 90 93            [ 1]  882 	ldw y,x 
      001FFC 90 EE 06         [ 2]  883 	ldw y,(6,y) ; LSW of ud  
      001FFF 90 BF 24         [ 2]  884 	ldw YTEMP,y 
      002002 90 93            [ 1]  885 	ldw y,x 
      002004 90 EE 04         [ 2]  886 	ldw y,(4,y)  ; MSW of ud 
      002007 1D 00 04         [ 2]  887 	subw x,#2*CELLL 
      00200A FF               [ 2]  888 	ldw (x),y 
      00200B 90 BE 24         [ 2]  889 	ldw y,YTEMP 
      00200E EF 02            [ 2]  890 	ldw (2,x),y 
      002010 CD 1F A3         [ 4]  891 	call ROW2BUF 
      002013 90 93            [ 1]  892 	ldw y,x 
      002015 90 EE 06         [ 2]  893 	ldw y,(6,y)
      002018 90 89            [ 2]  894 	pushw y ; udl 
      00201A 90 9F            [ 1]  895 	ld a,yl
      00201C A4 7F            [ 1]  896 	and a,#BLOCK_SIZE-1 
      00201E 90 5F            [ 1]  897 	clrw y 
      002020 90 97            [ 1]  898 	ld yl,a 
      002022 72 A9 16 80      [ 2]  899 	addw y,#ROWBUFF 
      002026 1D 00 02         [ 2]  900 	subw x,#CELLL 
      002029 FF               [ 2]  901 	ldw (x),y  
      00202A CD 04 F3         [ 4]  902 	call SWAPP ;  ( ud a ra u -- )
      00202D CD 04 8D         [ 4]  903 	call RFROM  
      002030 CD 1F E1         [ 4]  904 	call RFREE 
      002033 CD 07 F9         [ 4]  905 	call MIN
      002036 CD 04 E3         [ 4]  906 	call DUPP 
      002039 CD 04 AC         [ 4]  907 	call TOR  
      00203C CD 0B 7F         [ 4]  908 	call CMOVE
      00203F CD 1F CC         [ 4]  909 	call BUF2ROW 
      002042 CD 04 8D         [ 4]  910 	call RFROM 
      002045 81               [ 4]  911 	ret 
                                    912 
                                    913 ;--------------------------
                                    914 ; expand 16 bit address 
                                    915 ; to 32 bit address 
                                    916 ; FADDR ( a -- ud )
                                    917 ;--------------------------
      002046 1F F3                  918 	.word LINK 
                           002048   919 	LINK=. 
      002048 05                     920 	.byte 5 
      002049 46 41 44 44 52         921 	.ascii "FADDR"
      00204E                        922 FADDR:
      00204E CC 0A 44         [ 2]  923 	jp ZERO 
                                    924 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    925 ;--------------------------
                                    926 ; move new colon definition to FLASH 
                                    927 ; using WR-ROW for efficiency 
                                    928 ; preserving bytes already used 
                                    929 ; in the current block. 
                                    930 ; ud+c must not exceed block boundary 
                                    931 ; at this point the compiler as completed
                                    932 ; in RAM and pointers CP and CNTXT updated.
                                    933 ; CNTXT point to nfa of new word and  
                                    934 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    935 ; 
                                    936 ; FMOVE ( -- cp+ )
                                    937 ; 
                                    938 ;--------------------------
      002051 20 48                  939 	.word LINK 
                           002053   940 	LINK=.
      002053 05                     941 	.byte 5 
      002054 46 4D 4F 56 45         942 	.ascii "FMOVE" 
      002059                        943 FMOVE:
      002059 CD 05 F0         [ 4]  944 	call TFLASH 
      00205C CD 04 3C         [ 4]  945 	CALL AT 
      00205F CD 03 E7         [ 4]  946 	CALL QBRAN 
      002062 20 DD                  947 	.word no_move  
      002064 CD 06 3F         [ 4]  948 	call CPP
      002067 CD 04 3C         [ 4]  949 	call AT  
      00206A CD 04 E3         [ 4]  950 	call DUPP ; ( udl udl -- )
      00206D CD 06 23         [ 4]  951 	call CNTXT 
      002070 CD 04 3C         [ 4]  952 	call AT 
      002073 CD 03 B4         [ 4]  953 	call DOLIT 
      002076 00 02                  954 	.word 2 
      002078 CD 07 57         [ 4]  955 	call SUBB ; ( udl udl a -- )
      00207B CD 04 F3         [ 4]  956 	call SWAPP 
      00207E CD 20 4E         [ 4]  957 	call FADDR 
      002081 CD 06 9E         [ 4]  958 	call ROT  ; ( udl ud a -- )
      002084 CD 04 E3         [ 4]  959 	call DUPP 
      002087 CD 04 AC         [ 4]  960 	call TOR    ; R: a 
      00208A                        961 FMOVE2: 
      00208A CD 0B 32         [ 4]  962 	call HERE 
      00208D CD 04 A0         [ 4]  963 	call RAT 
      002090 CD 07 57         [ 4]  964 	call SUBB ; (udl ud a wl -- )
      002093                        965 next_row:
      002093 CD 04 E3         [ 4]  966 	call DUPP 
      002096 CD 04 AC         [ 4]  967 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002099 CD 1F FA         [ 4]  968 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00209C CD 04 E3         [ 4]  969 	call DUPP 
      00209F CD 04 AC         [ 4]  970 	call TOR
      0020A2 CD 06 DE         [ 4]  971 	call PLUS  ; ( udl+ ) 
      0020A5 CD 04 E3         [ 4]  972 	call DUPP 
      0020A8 CD 0A 44         [ 4]  973 	call ZERO   ; ( udl+ ud -- )
      0020AB CD 04 8D         [ 4]  974 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0020AE CD 04 8D         [ 4]  975 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020B1 CD 05 0D         [ 4]  976 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020B4 CD 07 57         [ 4]  977 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020B7 CD 04 E3         [ 4]  978 	call DUPP 
      0020BA CD 03 E7         [ 4]  979 	call QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020BD 20 D6                  980 	.word fmove_done 
      0020BF CD 04 F3         [ 4]  981 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020C2 CD 04 8D         [ 4]  982 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020C5 CD 06 DE         [ 4]  983 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020C8 CD 04 E3         [ 4]  984 	call DUPP 
      0020CB CD 04 AC         [ 4]  985 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020CE CD 04 F3         [ 4]  986 	call SWAPP 
      0020D1 CD 03 FE         [ 4]  987 	call BRAN
      0020D4 20 93                  988 	.word next_row  
      0020D6                        989 fmove_done:	
      0020D6 CD 04 8D         [ 4]  990 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020D9 1C 00 0A         [ 2]  991 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020DC 81               [ 4]  992  	ret  
      0020DD                        993 no_move:
      0020DD CD 0A 44         [ 4]  994 	call ZERO
      0020E0 81               [ 4]  995 	ret 
                                    996 
                                    997 ;------------------------------------------
                                    998 ; adjust pointers after **FMOVE** operetion.
                                    999 ; UPDAT-PTR ( cp+ -- )
                                   1000 ; cp+ is new CP position after FMOVE 
                                   1001 ;-------------------------------------------
      0020E1 20 53                 1002 	.word LINK 
                           0020E3  1003 	LINK=.
      0020E3 09                    1004 	.byte 9
      0020E4 55 50 44 41 54 2D 50  1005 	.ascii "UPDAT-PTR" 
             54 52
      0020ED                       1006 UPDATPTR:
                                   1007 ;reset VP to previous position  
      0020ED CD 1B 33         [ 4] 1008 	call EEPVP 
      0020F0 CD 04 D9         [ 4] 1009 	call DROP 
      0020F3 CD 04 3C         [ 4] 1010 	call AT
      0020F6 CD 06 31         [ 4] 1011 	call VPP 
      0020F9 CD 04 25         [ 4] 1012 	call STORE
                                   1013 ;update CONTEXT and LAST 
      0020FC CD 1B 1D         [ 4] 1014 	call EEPCP 
      0020FF CD 04 D9         [ 4] 1015 	call DROP
      002102 CD 04 3C         [ 4] 1016 	call AT
      002105 CD 03 B4         [ 4] 1017 	call DOLIT 
      002108 00 02                 1018 	.word 2 
      00210A CD 06 DE         [ 4] 1019 	call PLUS 
      00210D CD 04 E3         [ 4] 1020 	call DUPP 
      002110 CD 06 23         [ 4] 1021 	call CNTXT 
      002113 CD 04 25         [ 4] 1022 	call STORE
      002116 CD 06 4F         [ 4] 1023 	call LAST
      002119 CD 04 25         [ 4] 1024 	call STORE 
      00211C CD 1B 4D         [ 4] 1025 	call UPDATLAST 
                                   1026 ;update CP 
      00211F CD 06 3F         [ 4] 1027 	call CPP 
      002122 CD 04 25         [ 4] 1028 	call STORE
      002125 CD 1B 76         [ 4] 1029 	call UPDATCP 
      002128 81               [ 4] 1030 	ret 
                                   1031 
                                   1032 ;-----------------------------
                                   1033 ; move interrupt sub-routine
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   1034 ; in flash memory
                                   1035 ;----------------------------- 
      002129 20 E3                 1036 	.word LINK 
                           00212B  1037 	LINK=. 
      00212B 06                    1038 	.byte 6
      00212C 49 46 4D 4F 56 45     1039 	.ascii "IFMOVE" 
      002132                       1040 IFMOVE:
      002132 CD 05 F0         [ 4] 1041 	call TFLASH 
      002135 CD 04 3C         [ 4] 1042 	CALL AT 
      002138 CD 03 E7         [ 4] 1043 	CALL QBRAN 
      00213B 20 DD                 1044 	.word no_move 
      00213D CD 06 3F         [ 4] 1045 	call CPP 
      002140 CD 04 3C         [ 4] 1046 	call AT 
      002143 CD 04 E3         [ 4] 1047 	call DUPP ; ( udl udl -- )
      002146 CD 1B 33         [ 4] 1048 	call EEPVP 
      002149 CD 04 D9         [ 4] 1049 	call DROP
      00214C CD 04 3C         [ 4] 1050 	call AT  ; ( udl udl a )
      00214F CD 04 AC         [ 4] 1051 	call TOR 
      002152 CD 20 4E         [ 4] 1052 	call FADDR
      002155 CD 04 A0         [ 4] 1053 	call RAT ; ( udl ud a -- ) R: a 
      002158 CC 20 8A         [ 2] 1054 	jp FMOVE2 
                                   1055 
                                   1056 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4441 
                                   4442 ;===============================================================
                                   4443 
                           00212B  4444 LASTN =	LINK   ;last name defined
                                   4445 
                                   4446 ; application code begin here
      002180                       4447 	.bndry 128 ; align on flash block  
      002180                       4448 app_space: 
                                   4449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        00077A R   |   6 ABOR1      0012CD R
  6 ABOR2      0012E4 R   |   6 ABORQ      0012C5 R   |   6 ABORT      0012B6 R
  6 ABRTQ      0015A1 R   |   6 ABSS       000771 R   |   6 ACCEP      00124C R
  6 ACCP1      001255 R   |   6 ACCP2      00127B R   |   6 ACCP3      00127E R
  6 ACCP4      001280 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00067D R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00158C R   |   6 AGAIN      0014E2 R   |   6 AHEAD      00153F R
  6 ALLOT      0013F5 R   |   6 ANDD       00052F R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         00043C R   |   6 ATEXE      000B68 R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0011F4 R   |   6 BASE       0005A0 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001437 R   |   6 BDIGS      000C4F R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0014C4 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      00108C R   |   6 BKSP       0011C4 R
    BKSPP   =  000008     |   6 BLANK      000A37 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FCC R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        00045A R   |   6 CCOMMA     001419 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0009BC R   |   6 CELLP      0009AD R
  6 CELLS      0009CB R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E7C R   |   6 CHAR2      000E7F R
  6 CHKIVEC    001EBA R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000B87 R   |   6 CMOV2      000B9F R
  6 CMOVE      000B7F R   |     CNTDWN  =  000030     |   6 CNTXT      000623 R
  6 COLD       001999 R   |   6 COLD1      001999 R   |   6 COLON      00173A R
  6 COMMA      001402 R   |   6 COMPI      001447 R   |     COMPO   =  000040 
  6 CONSTANT   0017E4 R   |   6 COUNT      000B1B R   |   6 CPP        00063F R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000EAA R
  6 CREAT      001780 R   |     CRR     =  00000D     |   6 CSTOR      000449 R
  6 DAT        000AFB R   |     DATSTK  =  001680     |   6 DDROP      0006BE R
  6 DDUP       0006C9 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000CFF R   |   6 DEPTH      000A86 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000D44 R   |   6 DI         0000C2 R
  6 DIG        000C78 R   |   6 DIGIT      000C13 R   |   6 DIGS       000C89 R
  6 DIGS1      000C89 R   |   6 DIGS2      000C96 R   |   6 DIGTQ      000D13 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000738 R
  6 DNEGA      00071B R   |   6 DOCONST    00180E R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EC0 R   |   6 DOT        000F45 R
  6 DOT1       000F5B R   |   6 DOTI1      001930 R   |   6 DOTID      00191A R
  6 DOTO1      001359 R   |   6 DOTOK      00133F R   |   6 DOTPR      00106E R
  6 DOTQ       0015BB R   |   6 DOTQP      000EE9 R   |   6 DOTR       000EF7 R
  6 DOTS       0018BC R   |   6 DOTS1      0018C7 R   |   6 DOTS2      0018D0 R
  6 DOVAR      000590 R   |   6 DROP       0004D9 R   |   6 DSTOR      000AD5 R
  6 DUMP       001872 R   |   6 DUMP1      001889 R   |   6 DUMP3      0018AB R
  6 DUMPP      001841 R   |   6 DUPP       0004E3 R   |   6 EDIGS      000CB4 R
  6 EEPCP      001B1D R   |   6 EEPLAST    001AF0 R   |   6 EEPROM     001AD8 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     001B07 R   |   6 EEPVP      001B33 R   |   6 EI         0000BB R
  6 ELSEE      00151A R   |   6 EMIT       00039E R   |   6 ENEPER     001A48 R
  6 EQ1        000795 R   |   6 EQUAL      00077F R   |   6 ERASE      000BE1 R
    ERR     =  00001B     |   6 EVAL       001382 R   |   6 EVAL1      001382 R
  6 EVAL2      00139E R   |   6 EXE1       000B76 R   |   6 EXECU      00040E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  6 EXIT       00041E R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C3B R   |   6 FADDR      00204E R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000BAE R
  6 FILL1      000BCB R   |   6 FILL2      000BD4 R   |   6 FIND       001120 R
  6 FIND1      00113E R   |   6 FIND2      00116C R   |   6 FIND3      001178 R
  6 FIND4      00118C R   |   6 FIND5      001199 R   |   6 FIND6      00117D R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      002059 R   |   6 FMOVE2     00208A R
  6 FOR        001497 R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
    FPTR    =  000032     |   6 FREEVAR    000223 R   |   6 FREEVAR4   000259 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 HERE       000B32 R   |   6 HEX        000CEA R
  6 HI         00196C R   |   6 HLD        000610 R   |   6 HOLD       000C5F R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00174B R   |   6 IFETCH     0014B5 R
  6 IFF        0014F2 R   |   6 IFMOVE     002132 R   |     IMEDD   =  000080 
  6 IMMED      00175D R   |   6 INCH       000392 R   |   6 INITOFS    001713 R
  6 INN        0005BE R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001321 R
  6 INTER      0012F7 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0006F8 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0016A8 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0016FD R   |   6 KEY        000E2A R   |   6 KTAP       001211 R
  6 KTAP1      001234 R   |   6 KTAP2      001237 R   |   6 LAST       00064F R
  6 LASTN   =  00212B R   |   6 LBRAC      00132E R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       0007BC R
    LF      =  00000A     |   6 LINK    =  00212B R   |   6 LITER      001469 R
  6 LN2S       001AA4 R   |   6 LOG2S      001A8E R   |   6 LSHIFT     0009F6 R
  6 LSHIFT1    0009FF R   |   6 LSHIFT4    000A07 R   |   6 LT1        0007D2 R
    MASKK   =  001F7F     |   6 MAX        0007DC R   |   6 MAX1       0007EF R
  6 MIN        0007F9 R   |   6 MIN1       00080C R   |   6 MMOD1      0008AF R
  6 MMOD2      0008C3 R   |   6 MMOD3      0008DA R   |   6 MMSM1      000856 R
  6 MMSM2      00086A R   |   6 MMSM3      00086C R   |   6 MMSM4      000874 R
  6 MODD       0008F4 R   |   6 MONE       000A5D R   |     MS      =  00002E 
  6 MSEC       0002CE R   |   6 MSMOD      000892 R   |   6 MSTA1      000985 R
  6 MSTAR      000962 R   |     NAFR    =  004804     |   6 NAMEQ      0011B9 R
  6 NAMET      0010CA R   |     NCLKOPT =  004808     |   6 NEGAT      000709 R
  6 NEX1       0003D5 R   |   6 NEXT       0014A6 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NTIB       0005CE R   |     NUBC    =  004802     |   6 NUFQ       000E40 R
  6 NUFQ1      000E59 R   |   6 NUMBQ      000D57 R   |   6 NUMQ1      000D8B R
  6 NUMQ2      000DBC R   |   6 NUMQ3      000DFE R   |   6 NUMQ4      000E03 R
  6 NUMQ5      000E12 R   |   6 NUMQ6      000E15 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     000674 R
    OFS     =  000005     |   6 ONE        000A4F R   |   6 ONEM       0009E5 R
  6 ONEP       0009D8 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTIMIZE=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       000047 R   |   6 ORR        000543 R   |   6 OUTPUT     0003A3 R
    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       00050D R   |   6 OVERT      001676 R
    PA      =  000000     |   6 PACKS      000BF2 R   |   6 PAD        000B43 R
  6 PAREN      00107D R   |   6 PARS       000F76 R   |   6 PARS1      000FA1 R
  6 PARS2      000FCC R   |   6 PARS3      000FCF R   |   6 PARS4      000FD8 R
  6 PARS5      000FFB R   |   6 PARS6      001010 R   |   6 PARS7      00101F R
  6 PARS8      00102E R   |   6 PARSE      00103F R   |   6 PAUSE      0002DE R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001854 R   |   6 PDUM2      001865 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000A9D R   |   6 PII        001A07 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       0006DE R   |   6 PNAM1      00162B R   |   6 PRESE      0013AD R
    PROD1   =  000022     |     PROD2   =  000024     |     PROD3   =  000026 
  6 PROTECTE   0001FF R   |   6 PSTOR      000AB4 R   |     PTR16   =  000033 
    PTR8    =  000034     |   6 QBRAN      0003E7 R   |   6 QDUP       00068D R
  6 QDUP1      000697 R   |   6 QKEY       000380 R   |   6 QSTAC      001365 R
  6 QUERY      001291 R   |   6 QUEST      000F68 R   |   6 QUIT       0013CA R
  6 QUIT1      0013D2 R   |   6 QUIT2      0013D5 R   |   6 RAM2EE     001FFA R
    RAMBASE =  000000     |   6 RAMLAST    000662 R   |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RANDOM     00027C R
  6 RAT        0004A0 R   |   6 RBRAC      0016EA R   |   6 REPEA      00156F R
  6 RFREE      001FE1 R   |   6 RFROM      00048D R   |     ROP     =  004800 
  6 ROT        00069E R   |   6 ROW2BUF    001FA3 R   |     ROWBUFF =  001680 
    RP0     =  00002C     |   6 RPAT       00046A R   |     RPP     =  0017FF 
  6 RPSTO      000477 R   |   6 RSHIFT     000A12 R   |   6 RSHIFT1    000A1B R
  6 RSHIFT4    000A23 R   |     RST_SR  =  0050B3     |   6 RT12_2     001A77 R
  6 SAME1      0010E8 R   |   6 SAME2      001111 R   |   6 SAMEQ      0010E0 R
  6 SCOM1      001660 R   |   6 SCOM2      001663 R   |   6 SCOMP      001642 R
  6 SEED       000263 R   |     SEEDX   =  000036     |     SEEDY   =  000038 
  6 SEMIS      001686 R   |   6 SETISP     0000CE R   |   6 SET_RAML   0017CD R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000C9E R
  6 SIGN1      000CAE R   |   6 SLASH      0008FE R   |   6 SLMOD      0008E2 R
  6 SNAME      0015F5 R   |     SP0     =  00002A     |   6 SPACE      000E62 R
  6 SPACS      000E71 R   |   6 SPAT       0004C3 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001680     |     SPSAVE  =  000001 
  6 SPSTO      0004D0 R   |   6 SQRT10     001A60 R   |   6 SQRT2      001A1E R
  6 SQRT3      001A35 R   |   6 SSMOD      00098E R   |     SSP     =  000001 
    STACK   =  0017FF     |   6 STAR       000957 R   |   6 STASL      00099F R
  6 STOD       000740 R   |   6 STORE      000425 R   |   6 STR        000CCC R
  6 STRCQ      001477 R   |   6 STRQ       0015AE R   |   6 STRQP      000EDF R
  6 SUBB       000757 R   |   6 SWAPP      0004F3 R   |     SWIM_CSR=  007F80 
  6 TAP        0011FB R   |   6 TBOOT      00198D R   |   6 TBUF       0005DE R
    TBUFFBAS=  001680     |   6 TCHAR      000A6E R   |   6 TEMP       0005AF R
  6 TEVAL      000601 R   |   6 TFLASH     0005F0 R   |   6 THENN      001507 R
  6 TIB        000B54 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0013E1 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R
  6 TIMER      0002F8 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0018EA R   |   6 TNAM3      001908 R   |   6 TNAM4      00190E R
  6 TNAME      0018E7 R   |   6 TOFLASH    000333 R   |   6 TOKEN      0010BC R
  6 TOR        0004AC R   |   6 TORAM      000373 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000A2A R   |   6 TYPE1      000E91 R   |   6 TYPE2      000E9D R
  6 TYPES      000E8C R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000F32 R   |   6 UDOTR      000F12 R   |   6 UEND       000045 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0007B4 R   |   6 ULESS      00079E R
  6 UMMOD      000834 R   |   6 UMSTA      00090D R   |   6 UNIQ1      0015EC R
  6 UNIQU      0015CD R   |   6 UNTIL      0014CF R   |     UOFFSET =  00001C 
  6 UPDATCP    001B76 R   |   6 UPDATLAS   001B4D R   |   6 UPDATPTR   0020ED R
  6 UPDATRUN   001B65 R   |   6 UPDATVP    001B8D R   |   6 UPL1       000584 R
  6 UPLUS      00056D R   |     UPP     =  000006     |     URLAST  =  000020 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  00001E     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      001824 R   |   6 UTYP2      001833 R   |   6 UTYPE      00181F R
    UVP     =  000016     |   6 UZERO      00002B R   |   6 VARIA      00179A R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000003 
  6 VPP        000631 R   |     VSIZE   =  000006     |     WANT_DEB=  000000 
    WANT_MAT=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001555 R   |   6 WITHI      000819 R
  6 WORDD      0010A8 R   |   6 WORDS      001944 R   |   6 WORS1      00194A R
  6 WORS2      001966 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       000558 R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       000A44 R   |   6 ZL1        000525 R   |   6 ZLESS      00051C R
  6 app_spac   002180 R   |   6 block_er   001D10 R   |   6 clear_ra   000019 R
  6 clock_in   000062 R   |   6 copy_buf   001D67 R   |   6 copy_buf   001D86 R
  6 copy_pro   001D86 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 ee_ccomm   001F81 R
  6 ee_comma   001F60 R   |   6 ee_cstor   001C7D R   |   6 ee_store   001CC9 R
  6 erase_fl   001D2C R   |   6 farat      001B9E R   |   6 farcat     001BBA R
  6 fmove_do   0020D6 R   |   6 fptr_sto   001AB9 R   |   6 inc_fptr   001C4B R
  6 lock       001C37 R   |   6 main       000016 R   |   6 next_row   002093 R
  6 no_move    0020DD R   |   6 pristine   001E01 R   |   6 proceed_   001D2F R
  6 reboot     000325 R   |   6 reset_ve   001E68 R   |   6 row_eras   001CF3 R
  6 row_eras   001D40 R   |   6 row_eras   001D67 R   |   6 set_opti   001DD5 R
  6 set_vect   001F09 R   |   6 uart1_in   000074 R   |   6 unlock     001C0F R
  6 unlock_e   001BD1 R   |   6 unlock_f   001BF0 R   |   6 write_by   001C62 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

  6 write_ro   001DAB R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2180   flags    0

