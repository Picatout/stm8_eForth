ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                                     94 
                                     95 
                                     96 
                                     97 ;; Memory allocation
                                     98 
                           000006    99 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   100 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   101 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   102 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   103 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   104 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   105 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    106 
                                    107 ; user variables constants 
                           000006   108 UBASE = UPP       ; numeric base 
                           000008   109 UTMP = UBASE+2    ; temporary storage
                           00000A   110 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   111 UCTIB = UINN+2    ; tib count 
                           00000E   112 UTIB = UCTIB+2    ; tib address 
                           000010   113 UINTER = UTIB+2   ; interpreter vector 
                           000012   114 UHLD = UINTER+2   ; hold 
                           000014   115 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   116 UVP = UCNTXT+2    ; variable pointer 
                           000018   117 UCP = UVP+2      ; code pointer
                           00001A   118 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   119 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   120 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   121 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    122 
                                    123 ;******  System Variables  ******
                           000022   124 XTEMP	=	URLAST +2;address called by CREATE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000024   125 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   126 PROD1 = XTEMP	;space for UM*
                           000024   127 PROD2 = PROD1+2
                           000026   128 PROD3 = PROD2+2
                           000028   129 CARRY = PROD3+2
                           00002A   130 SP0	= CARRY+2	;initial data stack pointer
                           00002C   131 RP0	= SP0+2		;initial return stack pointer
                           00002E   132 MS    =   RP0+2         ; millisecond counter 
                           000030   133 CNTDWN =  MS+2          ; count down timer 
                           000032   134 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   135 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   136 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   137 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   138 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    139 
                                    140 ; EEPROM persistant data  
                           004000   141 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   142 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   143 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   144 APP_VP = APP_CP+2  ; free data space pointer 
                                    145 
                                    146 
                                    147 ;***********************************************
                                    148 ;; Version control
                                    149 
                           000003   150 VER     =     3         ;major release version
                           000000   151 EXT     =     0         ;minor extension
                                    152 
                                    153 ;; Constants
                                    154 
                           00FFFF   155 TRUEE   =     0xFFFF      ;true flag
                                    156 
                           000040   157 COMPO   =     0x40     ;lexicon compile only bit
                           000080   158 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   159 MASKK   =     0x1F7F  ;lexicon bit mask
                                    160 
                           000002   161 CELLL   =     2       ;size of a cell
                           00000A   162 BASEE   =     10      ;default radix
                           000008   163 BKSPP   =     8       ;back space
                           00000A   164 LF      =     10      ;line feed
                           00000D   165 CRR     =     13      ;carriage return
                           00001B   166 ERR     =     27      ;error escape
                           000027   167 TIC     =     39      ;tick
                           0000CD   168 CALLL   =     0xCD     ;CALL opcodes
                           000080   169 IRET_CODE =   0x80    ; IRET opcode 
                                    170 
                                    171         .macro _ledon
                                    172         bset PC_ODR,#LED2_BIT
                                    173         .endm
                                    174 
                                    175         .macro _ledoff
                                    176         bres PC_ODR,#LED2_BIT
                                    177         .endm
                                    178 
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .area DATA (ABS)
      000000                        181         .org RAMBASE 
                                    182 ;**********************************************************
                                    183 
                                    184 ;**********************************************************
                                    185         .area SSEG (ABS) ; STACK
      001700                        186         .org 0x1700
      001700                        187         .ds 256 
                                    188 ; space for DATSTK,TIB and STACK         
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area HOME ; vectors table
                                    193 ;**********************************************************
      000000 82 00 00 16            194 	int main	        ; reset
      000004 82 00 00 00            195 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            196 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            197 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            198 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            199 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            200 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            201 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            202 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            203 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            204 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            205 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            206 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            207 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            208 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            209 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            210 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            211 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            212 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            213 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            214 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            215 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            216 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            217 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            218 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            219 	int Timer4Handler	; irq23
      000068 82 00 00 00            220 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            221 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            222 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            223 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            224 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            225 	int NonHandledInterrupt	; irq29
                                    226 
                                    227 ;**********************************************************
                                    228         .area CODE
                                    229 ;**********************************************************
                                    230 
                                    231 ; non handled interrupt reset MCU
      000000                        232 NonHandledInterrupt:
      000000 A6 80            [ 1]  233         ld a, #0x80
      000002 C7 50 D1         [ 1]  234         ld WWDG_CR,a ; WWDG_CR used to reset mcu
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 	;iret
                                    236 
                                    237 ; used for milliseconds counter 
                                    238 ; MS is 16 bits counter 
      000005                        239 Timer4Handler:
      000005 72 5F 53 42      [ 1]  240 	clr TIM4_SR 
      000009 BE 2E            [ 2]  241         ldw x,MS 
      00000B 5C               [ 2]  242         incw x 
      00000C BF 2E            [ 2]  243         ldw MS,x
      00000E BE 30            [ 2]  244         ldw x,CNTDWN 
      000010 27 03            [ 1]  245         jreq 1$
      000012 5A               [ 2]  246         decw x 
      000013 BF 30            [ 2]  247         ldw CNTDWN,x 
      000015                        248 1$:         
      000015 80               [11]  249         iret 
                                    250 
                                    251 
                                    252 ;; Main entry points and COLD start data
      000016                        253 main:
                                    254 ; clear all RAM
      000016 AE 00 00         [ 2]  255 	ldw X,#RAMBASE
      000019                        256 clear_ram0:
      000019 7F               [ 1]  257 	clr (X)
      00001A 5C               [ 2]  258 	incw X
      00001B A3 17 FF         [ 2]  259 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  260 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  261         ldw x,#RPP
      000023 94               [ 1]  262         ldw sp,x
                                    263 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  264         inc SEEDX+1 
      000026 3C 39            [ 1]  265         inc SEEDY+1          
      000028 CC 00 47         [ 2]  266 	jp ORIG
                                    267 
                                    268 ; COLD initialize these variables.
      00002B                        269 UZERO:
      00002B 00 0A                  270         .word      BASEE   ;BASE
      00002D 00 00                  271         .word      0       ;tmp
      00002F 00 00                  272         .word      0       ;>IN
      000031 00 00                  273         .word      0       ;#TIB
      000033 17 00                  274         .word      TIBB    ;TIB
      000035 12 ED                  275         .word      INTER   ;'EVAL
      000037 00 00                  276         .word      0       ;HLD
      000039 21 21                  277         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  278         .word      VAR_BASE   ;variables free space pointer 
      00003D 21 80                  279         .word      app_space ; FLASH free space pointer 
      00003F 21 21                  280         .word      LASTN   ;LAST
      000041 00 00                  281         .word      0        ; OFFSET 
      000043 00 00                  282         .word      0       ; TFLASH
                                    283 ;       .word      0       ; URLAST   
      000045 00 00                  284 UEND:   .word      0
                                    285 
      000047                        286 ORIG:   
                                    287 ; initialize SP
      000047 AE 17 FF         [ 2]  288         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  289         LDW     SP,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00004B BF 2C            [ 2]  290         LDW     RP0,X
      00004D AE 16 80         [ 2]  291         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  292         LDW     SP0,X
                                    293 ; initialize PC_5 as output to control LED2
                                    294 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  295         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  296         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  297         bset PC_DDR,#LED2_BIT
      00005E                        298         _ledoff
      00005E 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    299 ; initialize clock to HSI
                                    300 ; no divisor 16Mhz 
                                    301 ; Added by Picatout 
      000062                        302 clock_init:
      000062 72 5F 50 C6      [ 1]  303         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  304 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00006A A6 E1            [ 1]  305 	ld a,#CLK_SWR_HSI
      00006C C7 50 C4         [ 1]  306 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  307 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  308 	jrne 1$
                                    309         
                                    310 ; initialize UART1, 115200 8N1
      000074                        311 uart1_init:
      000074 72 14 50 C7      [ 1]  312 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    313 	; configure tx pin
      000078 72 1A 50 02      [ 1]  314 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  315 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  316 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    317 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000084 35 0B 52 33      [ 1]  318 	mov UART1_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  319 	mov UART1_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  320 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    321 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  322 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  323 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  324 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  325 	bset TIM4_IER,#TIM4_IER_UIE 
                                    326 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  327         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  328         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  329         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  330         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  331         rim
      0000AB CC 19 8F         [ 2]  332         jp  COLD   ;default=MN1
                                    333 
                                    334 
                                    335 ;; place MCU in sleep mode with
                                    336 ;; halt opcode 
                                    337 ;; BYE ( -- )
      0000AE 00 00                  338         .word 0
                           0000B0   339         LINK=.
      0000B0 03                     340         .byte 3 
      0000B1 42 59 45               341         .ascii "BYE"
      0000B4                        342 BYE: 
      0000B4 8E               [10]  343         halt 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000B5 81               [ 4]  344         ret 
                                    345 
                                    346 ; Enable interrupts 
                                    347 ; EI ( -- )
      0000B6 00 B0                  348         .word LINK 
                           0000B8   349         LINK=.
      0000B8 02                     350         .byte 2
      0000B9 45 49                  351         .ascii "EI"
      0000BB                        352 EI:
      0000BB 9A               [ 1]  353         rim 
      0000BC 81               [ 4]  354         ret 
                                    355 
                                    356 ; Disable interrupts
                                    357 ; DI ( -- )
      0000BD 00 B8                  358         .word LINK 
                           0000BF   359         LINK=.
      0000BF 02                     360         .byte 2 
      0000C0 44 49                  361         .ascii "DI"
      0000C2                        362 DI:
      0000C2 9B               [ 1]  363         sim 
      0000C3 81               [ 4]  364         ret 
                                    365 
                                    366 ; set interrupt priority level 
                                    367 ; SET-ISP ( n1 n2 -- )
                                    368 ; n1 level {1..3}
                                    369 ; n2 vector {0..29}
      0000C4 00 BF                  370         .word LINK 
                           0000C6   371         LINK=.
      0000C6 07                     372         .byte 7 
      0000C7 53 45 54 2D 49 53 50   373         .ascii "SET-ISP"
      0000CE                        374 SETISP:
      0000CE 90 93            [ 1]  375         ldw y,x 
      0000D0 90 FE            [ 2]  376         ldw y,(y)
      0000D2 A6 04            [ 1]  377         ld a,#4 ; 4 slot per register 
                                    378 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  379         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  380         and a,#3 
      0000D8 48               [ 1]  381         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  382         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  383         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  384         clrw y 
      0000E0 90 97            [ 1]  385         ld yl,a 
      0000E2 1D 00 02         [ 2]  386         subw x,#CELLL 
      0000E5 FF               [ 2]  387         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  388         ldw y,x 
      0000E8 90 EE 02         [ 2]  389         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  390         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  391         subw x,#CELLL 
      0000F0 FF               [ 2]  392         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 03         [ 4]  393         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B4         [ 4]  394         call DOLIT 
      0000F7 00 03                  395         .word 3
      0000F9 CD 04 E9         [ 4]  396         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 EC         [ 4]  397         call LSHIFT ; creat slot mask 
      0000FF CD 06 EE         [ 4]  398         call INVER  ; ( level reg lshift rval mask )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000102 CD 05 25         [ 4]  399         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 04 A2         [ 4]  400         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 94         [ 4]  401         call ROT  ; ( reg lshift level )
      00010B CD 04 E9         [ 4]  402         call SWAPP ; ( reg level lshift )
      00010E CD 09 EC         [ 4]  403         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 83         [ 4]  404         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 39         [ 4]  405         call ORR   ; ( reg updated_rval )
      000117 CD 04 E9         [ 4]  406         call SWAPP 
      00011A CD 04 3F         [ 4]  407         call CSTOR
                                    408 
                                    409 ; sélectionne l'application 
                                    410 ; qui démarre automatique lors 
                                    411 ; d'un COLD start 
      00011D 00 C6                  412         .word LINK 
                           00011F   413         LINK=.
      00011F 07                     414         .byte 7
      000120 41 55 54 4F 52 55 4E   415         .ascii "AUTORUN"
      000127                        416 AUTORUN:
      000127 CD 10 B2         [ 4]  417         call TOKEN 
      00012A CD 04 D9         [ 4]  418         call DUPP 
      00012D CD 03 E7         [ 4]  419         call QBRAN 
      000130 02 0D                  420         .word FORGET2
      000132 CD 11 AF         [ 4]  421         call NAMEQ
      000135 CD 06 83         [ 4]  422         call QDUP 
      000138 CD 03 E7         [ 4]  423         call QBRAN 
      00013B 02 0D                  424         .word FORGET2
      00013D CD 04 CF         [ 4]  425         call DROP 
      000140 1D 00 04         [ 2]  426         subw x,#2*CELLL 
      000143 90 5F            [ 1]  427         clrw y 
      000145 FF               [ 2]  428         ldw (x),y 
      000146 90 AE 40 02      [ 2]  429         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  430         ldw (2,x),y 
      00014C CC 1C BF         [ 2]  431         jp ee_store 
                                    432 
                                    433 ;; Reset dictionary pointer before 
                                    434 ;; forgotten word. RAM space and 
                                    435 ;; interrupt vector defined after 
                                    436 ;; must be resetted also.
      00014F 01 1F                  437         .word LINK 
                           000151   438         LINK=.
      000151 06                     439         .byte 6
      000152 46 4F 52 47 45 54      440         .ascii "FORGET" 
      000158                        441 FORGET: 
      000158 CD 10 B2         [ 4]  442         call TOKEN
      00015B CD 04 D9         [ 4]  443         call DUPP 
      00015E CD 03 E7         [ 4]  444         call QBRAN 
      000161 02 0D                  445         .word FORGET2
      000163 CD 11 AF         [ 4]  446         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 83         [ 4]  447         call QDUP 
      000169 CD 03 E7         [ 4]  448         call QBRAN 
      00016C 02 0D                  449         .word FORGET2
                                    450 ; only forget users words 
      00016E CD 04 D9         [ 4]  451         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  452         call DOLIT 
      000174 21 80                  453         .word app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000176 CD 04 E9         [ 4]  454         call SWAPP 
      000179 CD 07 94         [ 4]  455         call  ULESS 
      00017C CD 03 E7         [ 4]  456         call QBRAN 
      00017F 01 CF                  457         .word FORGET6 
                                    458 ; ( ca na -- )        
                                    459 ;reset ivec with address >= ca
      000181 CD 04 E9         [ 4]  460         call SWAPP ; ( na ca -- ) 
      000184 CD 1E B0         [ 4]  461         call CHKIVEC ; ( na -- ) 
                                    462 ; start at LAST and link back to na 
                                    463 ; if variable found reset VP at that point.
      000187                        464 FORGET1:
      000187 CD 06 45         [ 4]  465         call LAST 
      00018A CD 04 32         [ 4]  466         call AT 
      00018D CD 04 D9         [ 4]  467         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  468         call FREEVAR ; ( -- na last )
      000193 CD 04 D9         [ 4]  469         call DUPP 
      000196 CD 03 B4         [ 4]  470         call DOLIT 
      000199 00 02                  471         .word 2 
      00019B CD 07 4D         [ 4]  472         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 32         [ 4]  473         call AT 
      0001A1 CD 04 D9         [ 4]  474         call DUPP ; ( -- na last a a )
      0001A4 CD 06 19         [ 4]  475         call CNTXT 
      0001A7 CD 04 1B         [ 4]  476         call STORE
      0001AA CD 06 45         [ 4]  477         call LAST  
      0001AD CD 04 1B         [ 4]  478         call STORE ; ( --  na last )
      0001B0 CD 05 03         [ 4]  479         call OVER 
      0001B3 CD 07 75         [ 4]  480         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  481         call QBRAN 
      0001B9 01 87                  482         .word FORGET1 
                                    483 ; ( na -- )
      0001BB CD 03 B4         [ 4]  484         call DOLIT 
      0001BE 00 02                  485         .word 2 
      0001C0 CD 07 4D         [ 4]  486         call SUBB 
      0001C3 CD 06 35         [ 4]  487         call CPP 
      0001C6 CD 04 1B         [ 4]  488         call STORE  
      0001C9 CD 1B 6C         [ 4]  489         call UPDATCP 
      0001CC CC 1B 43         [ 2]  490         jp UPDATLAST 
      0001CF                        491 FORGET6: ; tried to forget a RAM or system word 
                                    492 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  493         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  494         ldw y,SP0 
      0001D5 FF               [ 2]  495         ldw (x),y  
      0001D6 CD 07 94         [ 4]  496         call ULESS
      0001D9 CD 03 E7         [ 4]  497         call QBRAN 
      0001DC 01 FF                  498         .word PROTECTED 
      0001DE CD 12 BB         [ 4]  499         call ABORQ 
      0001E1 1D                     500         .byte 29
      0001E2 20 46 6F 72 20 52 41   501         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        502 PROTECTED:
      0001FF CD 12 BB         [ 4]  503         call ABORQ
      000202 0A                     504         .byte 10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000203 20 50 72 6F 74 65 63   505         .ascii " Protected"
             74 65 64
      00020D                        506 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 BB         [ 4]  507         call ABORQ
      000210 05                     508         .byte 5
      000211 20 77 68 61 74         509         .ascii " what"
      000216                        510 FORGET4:
      000216 CC 04 CF         [ 2]  511         jp DROP 
                                    512 
                                    513 
                                    514 ;---------------------------------
                                    515 ; if na is variable 
                                    516 ; free variable data  
                                    517 ; FREEVAR ( na -- )
                                    518 ;---------------------------------
      000219 01 51                  519         .word LINK 
                           00021B   520         LINK=.
      00021B 07                     521         .byte 7 
      00021C 46 52 45 45 56 41 52   522         .ascii "FREEVAR"
      000223                        523 FREEVAR:
      000223 CD 04 D9         [ 4]  524         call DUPP ; ( na na -- )
      000226 CD 04 50         [ 4]  525         CALL CAT  ; ( na c -- )
      000229 CD 09 CE         [ 4]  526         call ONEP ;
      00022C CD 06 D4         [ 4]  527         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 CE         [ 4]  528         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 D9         [ 4]  529         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 32         [ 4]  530         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  531         call DOLIT 
      00023B 05 86                  532         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 75         [ 4]  533         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  534         call QBRAN 
      000243 02 59                  535         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  536         call DOLIT 
      000248 00 02                  537         .word 2 
      00024A CD 06 D4         [ 4]  538         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 32         [ 4]  539         call AT 
      000250 CD 06 27         [ 4]  540         call VPP   
      000253 CD 04 1B         [ 4]  541         call STORE 
      000256 CC 1B 83         [ 2]  542         jp UPDATVP 
      000259                        543 FREEVAR4: ; not variable
      000259 CC 04 CF         [ 2]  544         jp  DROP 
                                    545 
                                    546 ;    SEED ( n -- )
                                    547 ; Initialize PRNG seed with n 
      00025C 02 1B                  548         .word LINK 
                           00025E   549         LINK=. 
      00025E 04                     550         .byte 4 
      00025F 53 45 45 44            551         .ascii "SEED" 
      000263                        552 SEED:
      000263 90 93            [ 1]  553         ldw y,x 
      000265 1C 00 02         [ 2]  554         addw x,#CELLL
      000268 90 FE            [ 2]  555         ldw y,(y)
      00026A 90 9E            [ 1]  556         ld a,yh 
      00026C B7 36            [ 1]  557         ld SEEDX,a 
      00026E 90 9F            [ 1]  558         ld a,yl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000270 B7 38            [ 1]  559         ld SEEDY,a 
      000272 81               [ 4]  560         ret 
                                    561 
                                    562 ;    RANDOM ( u1 -- u2 )
                                    563 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  564         .word LINK 
                           000275   565         LINK=.
      000275 06                     566         .byte 6
      000276 52 41 4E 44 4F 4D      567         .ascii "RANDOM" 
      00027C                        568 RANDOM:
                                    569 ;local variable 
                           000001   570         SPSAVE=1
                           000002   571         VSIZE=2 
      00027C 52 02            [ 2]  572         sub sp,#VSIZE
      00027E 1F 01            [ 2]  573         ldw (SPSAVE,sp),x  
                                    574 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  575         ldw y,x 
      000282 90 FE            [ 2]  576         ldw y,(y)
      000284 90 BF 24         [ 2]  577         ldw YTEMP,y 
      000287 BE 36            [ 2]  578 	ldw x,SEEDX 
      000289 58               [ 2]  579 	sllw x 
      00028A 58               [ 2]  580 	sllw x 
      00028B 58               [ 2]  581 	sllw x 
      00028C 58               [ 2]  582 	sllw x 
      00028D 58               [ 2]  583 	sllw x 
      00028E 9E               [ 1]  584 	ld a,xh 
      00028F B8 36            [ 1]  585 	xor a,SEEDX 
      000291 B7 22            [ 1]  586 	ld XTEMP,a 
      000293 9F               [ 1]  587 	ld a,xl 
      000294 B8 37            [ 1]  588 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  589 	ld XTEMP+1,a 
                                    590 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  591 	ldw x,SEEDY 
      00029A BF 36            [ 2]  592 	ldw SEEDX,x  
                                    593 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  594 	srlw x 
      00029D 9E               [ 1]  595 	ld a,xh 
      00029E B8 38            [ 1]  596 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  597 	ld SEEDY,a  
      0002A2 9F               [ 1]  598 	ld a,xl 
      0002A3 B8 39            [ 1]  599 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  600 	ld SEEDY+1,a 
                                    601 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  602 	ldw x,XTEMP 
      0002A9 54               [ 2]  603 	srlw x 
      0002AA 54               [ 2]  604 	srlw x 
      0002AB 54               [ 2]  605 	srlw x 
                                    606 ; x=XTEMP^x 
      0002AC 9E               [ 1]  607 	ld a,xh 
      0002AD B8 22            [ 1]  608 	xor a,XTEMP 
      0002AF 95               [ 1]  609 	ld xh,a 
      0002B0 9F               [ 1]  610 	ld a,xl 
      0002B1 B8 23            [ 1]  611 	xor a,XTEMP+1  
      0002B3 97               [ 1]  612 	ld xl,a 
                                    613 ; SEEDY=x^SEEDY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002B4 B8 39            [ 1]  614 	xor a,SEEDY+1
      0002B6 97               [ 1]  615 	ld xl,a 
      0002B7 9E               [ 1]  616 	ld a,xh 
      0002B8 B8 38            [ 1]  617 	xor a,SEEDY
      0002BA 95               [ 1]  618 	ld xh,a 
      0002BB BF 38            [ 2]  619 	ldw SEEDY,x 
                                    620 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  621 	ldw y,YTEMP  
      0002C0 65               [ 2]  622 	divw x,y 
      0002C1 1E 01            [ 2]  623 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  624         ldw (x),y 
      0002C4 5B 02            [ 2]  625         addw sp,#VSIZE 
      0002C6 81               [ 4]  626 	ret 
                                    627 
                                    628 
                                    629 ;;
                                    630 ;; get millisecond counter 
                                    631 ;; msec ( -- u )
                                    632 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  633         .word LINK  
                           0002C9   634         LINK = . 
      0002C9 04                     635         .byte 4
      0002CA 4D 53 45 43            636         .ascii "MSEC"
      0002CE                        637 MSEC: 
      0002CE 1D 00 02         [ 2]  638         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  639         ldw y,MS 
      0002D4 FF               [ 2]  640         ldw (x),y 
      0002D5 81               [ 4]  641         ret 
                                    642 
                                    643 ; suspend execution for u msec 
                                    644 ;  pause ( u -- )
      0002D6 02 C9                  645         .word LINK 
                           0002D8   646         LINK=.
      0002D8 05                     647         .byte 5 
      0002D9 50 41 55 53 45         648         .ascii "PAUSE"
      0002DE                        649 PAUSE:
      0002DE 90 93            [ 1]  650         ldw y,x
      0002E0 90 FE            [ 2]  651         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  652         addw y,MS 
      0002E6 8F               [10]  653 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  654         cpw y,MS  
      0002EA 26 FA            [ 1]  655         jrne 1$        
      0002EC 1C 00 02         [ 2]  656         addw x,#CELLL 
      0002EF 81               [ 4]  657         ret 
                                    658 
                                    659 ; initialize count down timer 
                                    660 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  661         .word LINK 
                           0002F2   662         LINK=.
      0002F2 05                     663         .byte 5 
      0002F3 54 49 4D 45 52         664         .ascii "TIMER" 
      0002F8                        665 TIMER:
      0002F8 90 93            [ 1]  666         ldw y,x
      0002FA 90 FE            [ 2]  667         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  668         ldw CNTDWN,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002FF 1C 00 02         [ 2]  669         addw x,#CELLL 
      000302 81               [ 4]  670         ret 
                                    671 
                                    672 ; check for TIMER exiparition 
                                    673 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  674         .word LINK 
                           000305   675         LINK=. 
      000305 08                     676         .byte 8 
      000306 54 49 4D 45 4F 55 54   677         .ascii "TIMEOUT?"
             3F
      00030E                        678 TIMEOUTQ: 
      00030E 4F               [ 1]  679         clr a
      00030F 1D 00 02         [ 2]  680         subw x,#CELLL 
      000312 90 BE 30         [ 2]  681         ldw y,CNTDWN 
      000315 26 01            [ 1]  682         jrne 1$ 
      000317 43               [ 1]  683         cpl a 
      000318 E7 01            [ 1]  684 1$:     ld (1,x),a 
      00031A F7               [ 1]  685         ld (x),a 
      00031B 81               [ 4]  686         ret         
                                    687 
                                    688 ; reboot MCU 
                                    689 ; REBOOT ( -- )
      00031C 03 05                  690         .word LINK 
                           00031E   691         LINK=. 
      00031E 06                     692         .byte 6 
      00031F 52 45 42 4F 4F 54      693         .ascii "REBOOT"
      000325                        694 reboot:
      000325 CC 00 00         [ 2]  695         jp NonHandledInterrupt
                                    696 
                                    697 ; compile to flash memory 
                                    698 ; TO-FLASH ( -- )
      000328 03 1E                  699         .word LINK 
                           00032A   700         LINK=.
      00032A 08                     701         .byte 8
      00032B 54 4F 2D 46 4C 41 53   702         .ascii "TO-FLASH"
             48
      000333                        703 TOFLASH:
      000333 CD 06 58         [ 4]  704         call RAMLAST 
      000336 CD 04 32         [ 4]  705         call AT 
      000339 CD 06 83         [ 4]  706         call QDUP 
      00033C CD 03 E7         [ 4]  707         call QBRAN
      00033F 03 62                  708         .word 1$
      000341 CD 12 BB         [ 4]  709         call ABORQ 
      000344 1D                     710         .byte 29
      000345 20 4E 6F 74 20 77 68   711         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  712 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  713         ldw UTFLASH,y
      000369 81               [ 4]  714         ret 
                                    715 
                                    716 ; compile to RAM 
                                    717 ; TO-RAM ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00036A 03 2A                  718         .word LINK 
                           00036C   719         LINK=.
      00036C 06                     720         .byte 6 
      00036D 54 4F 2D 52 41 4D      721         .ascii "TO-RAM"
      000373                        722 TORAM:
      000373 90 5F            [ 1]  723         clrw y 
      000375 90 BF 1E         [ 2]  724         ldw UTFLASH,y 
      000378 81               [ 4]  725         ret 
                                    726         
                                    727 
                                    728 ;; Device dependent I/O
                                    729 ;       ?RX     ( -- c T | F )
                                    730 ;         Return input byte and true, or false.
      000379 03 6C                  731         .word      LINK 
                           00037B   732 LINK	= .
      00037B 04                     733         .byte      4
      00037C 3F 4B 45 59            734         .ascii     "?KEY"
      000380                        735 QKEY:
      000380 90 5F            [ 1]  736         CLRW Y 
      000382 72 0B 52 30 0B   [ 2]  737         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 31         [ 1]  738         LD    A,UART1_DR   ;get char in A
      00038A 1D 00 02         [ 2]  739 	SUBW	X,#2
      00038D E7 01            [ 1]  740         LD     (1,X),A
      00038F 7F               [ 1]  741 	CLR	(X)
      000390 90 53            [ 2]  742         CPLW     Y
      000392                        743 INCH:
      000392 1D 00 02         [ 2]  744 	SUBW	X,#2
      000395 FF               [ 2]  745         LDW     (X),Y
      000396 81               [ 4]  746         RET
                                    747 
                                    748 ;       TX!     ( c -- )
                                    749 ;       Send character c to  output device.
      000397 03 7B                  750         .word      LINK
                           000399   751 LINK	= .
      000399 04                     752         .byte      4
      00039A 45 4D 49 54            753         .ascii     "EMIT"
      00039E                        754 EMIT:
      00039E E6 01            [ 1]  755         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  756 	ADDW	X,#2
      0003A3 72 0F 52 30 FB   [ 2]  757 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A8 C7 52 31         [ 1]  758         LD    UART1_DR,A   ;send A
      0003AB 81               [ 4]  759         RET
                                    760 
                                    761 ;; The kernel
                                    762 
                                    763 ;       doLIT   ( -- w )
                                    764 ;       Push an inline literal.
      0003AC 03 99                  765         .word      LINK
                           0003AE   766 LINK	= 	.
      0003AE 45                     767 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         768         .ascii     "DOLIT"
      0003B4                        769 DOLIT:
      0003B4 1D 00 02         [ 2]  770 	SUBW X,#2
      0003B7 16 01            [ 2]  771         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  772         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0003BB FF               [ 2]  773         ldw (x),y
      0003BC 90 85            [ 2]  774         popw y 
      0003BE 90 EC 02         [ 2]  775         jp (2,y)
                                    776 
                                    777 ;       next    ( -- )
                                    778 ;       Code for  single index loop.
      0003C1 03 AE                  779         .word      LINK
                           0003C3   780 LINK	= 	.
      0003C3 44                     781 	.byte      COMPO+4
      0003C4 6E 65 78 74            782         .ascii     "next"
      0003C8                        783 DONXT:
      0003C8 16 03            [ 2]  784 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  785 	DECW Y
      0003CC 2A 07            [ 1]  786 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  787 	POPW Y
      0003D0 5B 02            [ 2]  788         addw sp,#2
      0003D2 90 EC 02         [ 2]  789         JP (2,Y)
      0003D5                        790 NEX1:
      0003D5 17 03            [ 2]  791         LDW (3,SP),Y
      0003D7 90 85            [ 2]  792         POPW Y
      0003D9 90 FE            [ 2]  793 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  794 	JP (Y)
                                    795 
                                    796 ;       ?branch ( f -- )
                                    797 ;       Branch if flag is zero.
      0003DD 03 C3                  798         .word      LINK
                           0003DF   799 LINK	= 	.
      0003DF 47                     800 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   801         .ascii     "?BRANCH"
      0003E7                        802 QBRAN:	
      0003E7 90 93            [ 1]  803         LDW Y,X
      0003E9 1C 00 02         [ 2]  804 	ADDW X,#2
      0003EC 90 FE            [ 2]  805 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  806         JREQ     BRAN
      0003F0 90 85            [ 2]  807 	POPW Y
      0003F2 90 EC 02         [ 2]  808 	JP (2,Y)
                                    809         
                                    810 ;       branch  ( -- )
                                    811 ;       Branch to an inline address.
      0003F5 03 DF                  812         .word      LINK
                           0003F7   813 LINK	= 	.
      0003F7 46                     814 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      815         .ascii     "BRANCH"
      0003FE                        816 BRAN:
      0003FE 90 85            [ 2]  817         POPW Y
      000400 90 FE            [ 2]  818 	LDW Y,(Y)
      000402 90 FC            [ 2]  819         JP     (Y)
                                    820 
                                    821 ;       EXECUTE ( ca -- )
                                    822 ;       Execute  word at ca.
      000404 03 F7                  823         .word      LINK
                           000406   824 LINK	= 	.
      000406 07                     825         .byte       7
      000407 45 58 45 43 55 54 45   826         .ascii     "EXECUTE"
      00040E                        827 EXECU:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00040E 90 93            [ 1]  828         LDW Y,X
      000410 1C 00 02         [ 2]  829 	ADDW X,#2
      000413 90 FE            [ 2]  830 	LDW  Y,(Y)
      000415 90 FC            [ 2]  831         JP   (Y)
                                    832 
                           000001   833 OPTIMIZE = 1
                           000001   834 .if OPTIMIZE 
                                    835 ; remplacement de CALL EXIT par 
                                    836 ; le opcode de RET.
                                    837 ; Voir modification au code de ";"
                           000000   838 .else 
                                    839 ;       EXIT    ( -- )
                                    840 ;       Terminate a colon definition.
                                    841         .word      LINK
                                    842 LINK = .
                                    843         .byte      4
                                    844         .ascii     "EXIT"
                                    845 EXIT:
                                    846         POPW Y
                                    847         RET
                                    848 .endif 
                                    849 
                                    850 ;       !       ( w a -- )
                                    851 ;       Pop  data stack to memory.
      000417 04 06                  852         .word      LINK
                           000419   853 LINK = .
      000419 01                     854         .byte      1
      00041A 21                     855         .ascii     "!"
      00041B                        856 STORE:
      00041B 90 93            [ 1]  857         LDW Y,X
      00041D 90 FE            [ 2]  858         LDW Y,(Y)    ;Y=a
      00041F 90 BF 24         [ 2]  859         LDW YTEMP,Y
      000422 90 93            [ 1]  860         LDW Y,X
      000424 90 EE 02         [ 2]  861         LDW Y,(2,Y)
      000427 91 CF 24         [ 5]  862         LDW [YTEMP],Y ;store w at a
      00042A 1C 00 04         [ 2]  863         ADDW X,#4 ; DDROP 
      00042D 81               [ 4]  864         RET     
                                    865 
                                    866 ;       @       ( a -- w )
                                    867 ;       Push memory location to stack.
      00042E 04 19                  868         .word      LINK
                           000430   869 LINK	= 	.
      000430 01                     870         .byte    1
      000431 40                     871         .ascii	"@"
      000432                        872 AT:
      000432 90 93            [ 1]  873         LDW Y,X     ;Y = a
      000434 90 FE            [ 2]  874         LDW Y,(Y)   ; address 
      000436 90 FE            [ 2]  875         LDW Y,(Y)   ; value 
      000438 FF               [ 2]  876         LDW (X),Y ;w = @Y
      000439 81               [ 4]  877         RET     
                                    878 
                                    879 ;       C!      ( c b -- )
                                    880 ;       Pop  data stack to byte memory.
      00043A 04 30                  881         .word      LINK
                           00043C   882 LINK	= .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      00043C 02                     883         .byte      2
      00043D 43 21                  884         .ascii     "C!"
      00043F                        885 CSTOR:
      00043F 90 93            [ 1]  886         LDW Y,X
      000441 90 FE            [ 2]  887 	LDW Y,(Y)    ;Y=b
      000443 E6 03            [ 1]  888         LD A,(3,X)    ;D = c
      000445 90 F7            [ 1]  889         LD  (Y),A     ;store c at b
      000447 1C 00 04         [ 2]  890 	ADDW X,#4 ; DDROP 
      00044A 81               [ 4]  891         RET     
                                    892 
                                    893 ;       C@      ( b -- c )
                                    894 ;       Push byte in memory to  stack.
      00044B 04 3C                  895         .word      LINK
                           00044D   896 LINK	= 	.
      00044D 02                     897         .byte      2
      00044E 43 40                  898         .ascii     "C@"
      000450                        899 CAT:
      000450 90 93            [ 1]  900         LDW Y,X     ;Y=b
      000452 90 FE            [ 2]  901         LDW Y,(Y)
      000454 90 F6            [ 1]  902         LD A,(Y)
      000456 E7 01            [ 1]  903         LD (1,X),A
      000458 7F               [ 1]  904         CLR (X)
      000459 81               [ 4]  905         RET     
                                    906 
                                    907 ;       RP@     ( -- a )
                                    908 ;       Push current RP to data stack.
      00045A 04 4D                  909         .word      LINK
                           00045C   910 LINK	= .
      00045C 03                     911         .byte      3
      00045D 52 50 40               912         .ascii     "RP@"
      000460                        913 RPAT:
      000460 90 96            [ 1]  914         LDW Y,SP    ;save return addr
      000462 1D 00 02         [ 2]  915         SUBW X,#2
      000465 FF               [ 2]  916         LDW (X),Y
      000466 81               [ 4]  917         RET     
                                    918 
                                    919 ;       RP!     ( a -- )
                                    920 ;       Set  return stack pointer.
      000467 04 5C                  921         .word      LINK
                           000469   922 LINK	= 	. 
      000469 43                     923 	.byte      COMPO+3
      00046A 52 50 21               924         .ascii     "RP!"
      00046D                        925 RPSTO:
      00046D 90 85            [ 2]  926         POPW Y
      00046F 90 BF 24         [ 2]  927         LDW YTEMP,Y
      000472 90 93            [ 1]  928         LDW Y,X
      000474 90 FE            [ 2]  929         LDW Y,(Y)
      000476 90 94            [ 1]  930         LDW SP,Y
      000478 1C 00 02         [ 2]  931         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      00047B 92 CC 24         [ 5]  932         JP [YTEMP]
                                    933 
                                    934 ;       R>      ( -- w )
                                    935 ;       Pop return stack to data stack.
      00047E 04 69                  936         .word      LINK
                           000480   937 LINK	= 	. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000480 42                     938 	.byte      COMPO+2
      000481 52 3E                  939         .ascii     "R>"
      000483                        940 RFROM:
      000483 90 85            [ 2]  941         POPW Y    ;save return addr
      000485 90 BF 24         [ 2]  942         LDW YTEMP,Y
      000488 90 85            [ 2]  943         POPW Y
      00048A 1D 00 02         [ 2]  944         SUBW X,#2
      00048D FF               [ 2]  945         LDW (X),Y
      00048E 92 CC 24         [ 5]  946         JP [YTEMP]
                                    947 
                                    948 ;       R@      ( -- w )
                                    949 ;       Copy top of return stack to stack.
      000491 04 80                  950         .word      LINK
                           000493   951 LINK	= 	. 
      000493 02                     952         .byte      2
      000494 52 40                  953         .ascii     "R@"
      000496                        954 RAT:
      000496 16 03            [ 2]  955         ldw y,(3,sp)
      000498 1D 00 02         [ 2]  956         subw x,#CELLL 
      00049B FF               [ 2]  957         ldw (x),y 
      00049C 81               [ 4]  958         ret 
                                    959 
                                    960 ;       >R      ( w -- )
                                    961 ;       Push data stack to return stack.
      00049D 04 93                  962         .word      LINK
                           00049F   963 LINK	= 	. 
      00049F 42                     964 	.byte      COMPO+2
      0004A0 3E 52                  965         .ascii     ">R"
      0004A2                        966 TOR:
      0004A2 90 85            [ 2]  967         POPW Y    ;save return addr
      0004A4 90 BF 24         [ 2]  968         LDW YTEMP,Y
      0004A7 90 93            [ 1]  969         LDW Y,X
      0004A9 90 FE            [ 2]  970         LDW Y,(Y)
      0004AB 90 89            [ 2]  971         PUSHW Y    ;restore return addr
      0004AD 1C 00 02         [ 2]  972         ADDW X,#2
      0004B0 92 CC 24         [ 5]  973         JP [YTEMP]
                                    974 
                                    975 ;       SP@     ( -- a )
                                    976 ;       Push current stack pointer.
      0004B3 04 9F                  977         .word      LINK
                           0004B5   978 LINK	= 	. 
      0004B5 03                     979         .byte      3
      0004B6 53 50 40               980         .ascii     "SP@"
      0004B9                        981 SPAT:
      0004B9 90 93            [ 1]  982 	LDW Y,X
      0004BB 1D 00 02         [ 2]  983         SUBW X,#2
      0004BE FF               [ 2]  984 	LDW (X),Y
      0004BF 81               [ 4]  985         RET     
                                    986 
                                    987 ;       SP!     ( a -- )
                                    988 ;       Set  data stack pointer.
      0004C0 04 B5                  989         .word      LINK
                           0004C2   990 LINK	= 	. 
      0004C2 03                     991         .byte      3
      0004C3 53 50 21               992         .ascii     "SP!"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      0004C6                        993 SPSTO:
      0004C6 FE               [ 2]  994         LDW     X,(X)     ;X = a
      0004C7 81               [ 4]  995         RET     
                                    996 
                                    997 ;       DROP    ( w -- )
                                    998 ;       Discard top stack item.
      0004C8 04 C2                  999         .word      LINK
                           0004CA  1000 LINK	= 	. 
      0004CA 04                    1001         .byte      4
      0004CB 44 52 4F 50           1002         .ascii     "DROP"
      0004CF                       1003 DROP:
      0004CF 1C 00 02         [ 2] 1004         ADDW X,#2     
      0004D2 81               [ 4] 1005         RET     
                                   1006 
                                   1007 ;       DUP     ( w -- w w )
                                   1008 ;       Duplicate  top stack item.
      0004D3 04 CA                 1009         .word      LINK
                           0004D5  1010 LINK	= 	. 
      0004D5 03                    1011         .byte      3
      0004D6 44 55 50              1012         .ascii     "DUP"
      0004D9                       1013 DUPP:
      0004D9 90 93            [ 1] 1014 	LDW Y,X
      0004DB 1D 00 02         [ 2] 1015         SUBW X,#2
      0004DE 90 FE            [ 2] 1016 	LDW Y,(Y)
      0004E0 FF               [ 2] 1017 	LDW (X),Y
      0004E1 81               [ 4] 1018         RET     
                                   1019 
                                   1020 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1021 ;       Exchange top two stack items.
      0004E2 04 D5                 1022         .word      LINK
                           0004E4  1023 LINK	= 	. 
      0004E4 04                    1024         .byte      4
      0004E5 53 57 41 50           1025         .ascii     "SWAP"
      0004E9                       1026 SWAPP:
      0004E9 90 93            [ 1] 1027         LDW Y,X
      0004EB 90 FE            [ 2] 1028         LDW Y,(Y)
      0004ED 90 BF 24         [ 2] 1029         LDW YTEMP,Y
      0004F0 90 93            [ 1] 1030         LDW Y,X
      0004F2 90 EE 02         [ 2] 1031         LDW Y,(2,Y)
      0004F5 FF               [ 2] 1032         LDW (X),Y
      0004F6 90 BE 24         [ 2] 1033         LDW Y,YTEMP
      0004F9 EF 02            [ 2] 1034         LDW (2,X),Y
      0004FB 81               [ 4] 1035         RET     
                                   1036 
                                   1037 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1038 ;       Copy second stack item to top.
      0004FC 04 E4                 1039         .word      LINK
                           0004FE  1040 LINK	= . 
      0004FE 04                    1041         .byte      4
      0004FF 4F 56 45 52           1042         .ascii     "OVER"
      000503                       1043 OVER:
      000503 1D 00 02         [ 2] 1044         SUBW X,#2
      000506 90 93            [ 1] 1045         LDW Y,X
      000508 90 EE 04         [ 2] 1046         LDW Y,(4,Y)
      00050B FF               [ 2] 1047         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00050C 81               [ 4] 1048         RET     
                                   1049 
                                   1050 ;       0<      ( n -- t )
                                   1051 ;       Return true if n is negative.
      00050D 04 FE                 1052         .word      LINK
                           00050F  1053 LINK	= . 
      00050F 02                    1054         .byte      2
      000510 30 3C                 1055         .ascii     "0<"
      000512                       1056 ZLESS:
      000512 A6 FF            [ 1] 1057         LD A,#0xFF
      000514 90 93            [ 1] 1058         LDW Y,X
      000516 90 FE            [ 2] 1059         LDW Y,(Y)
      000518 2B 01            [ 1] 1060         JRMI     ZL1
      00051A 4F               [ 1] 1061         CLR A   ;false
      00051B F7               [ 1] 1062 ZL1:    LD     (X),A
      00051C E7 01            [ 1] 1063         LD (1,X),A
      00051E 81               [ 4] 1064 	RET     
                                   1065 
                                   1066 ;       AND     ( w w -- w )
                                   1067 ;       Bitwise AND.
      00051F 05 0F                 1068         .word      LINK
                           000521  1069 LINK	= . 
      000521 03                    1070         .byte      3
      000522 41 4E 44              1071         .ascii     "AND"
      000525                       1072 ANDD:
      000525 F6               [ 1] 1073         LD  A,(X)    ;D=w
      000526 E4 02            [ 1] 1074         AND A,(2,X)
      000528 E7 02            [ 1] 1075         LD (2,X),A
      00052A E6 01            [ 1] 1076         LD A,(1,X)
      00052C E4 03            [ 1] 1077         AND A,(3,X)
      00052E E7 03            [ 1] 1078         LD (3,X),A
      000530 1C 00 02         [ 2] 1079         ADDW X,#2
      000533 81               [ 4] 1080         RET
                                   1081 
                                   1082 ;       OR      ( w w -- w )
                                   1083 ;       Bitwise inclusive OR.
      000534 05 21                 1084         .word      LINK
                           000536  1085 LINK = . 
      000536 02                    1086         .byte      2
      000537 4F 52                 1087         .ascii     "OR"
      000539                       1088 ORR:
      000539 F6               [ 1] 1089         LD A,(X)    ;D=w
      00053A EA 02            [ 1] 1090         OR A,(2,X)
      00053C E7 02            [ 1] 1091         LD (2,X),A
      00053E E6 01            [ 1] 1092         LD A,(1,X)
      000540 EA 03            [ 1] 1093         OR A,(3,X)
      000542 E7 03            [ 1] 1094         LD (3,X),A
      000544 1C 00 02         [ 2] 1095         ADDW X,#2
      000547 81               [ 4] 1096         RET
                                   1097 
                                   1098 ;       XOR     ( w w -- w )
                                   1099 ;       Bitwise exclusive OR.
      000548 05 36                 1100         .word      LINK
                           00054A  1101 LINK	= . 
      00054A 03                    1102         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00054B 58 4F 52              1103         .ascii     "XOR"
      00054E                       1104 XORR:
      00054E F6               [ 1] 1105         LD A,(X)    ;D=w
      00054F E8 02            [ 1] 1106         XOR A,(2,X)
      000551 E7 02            [ 1] 1107         LD (2,X),A
      000553 E6 01            [ 1] 1108         LD A,(1,X)
      000555 E8 03            [ 1] 1109         XOR A,(3,X)
      000557 E7 03            [ 1] 1110         LD (3,X),A
      000559 1C 00 02         [ 2] 1111         ADDW X,#2
      00055C 81               [ 4] 1112         RET
                                   1113 
                                   1114 ;       UM+     ( u u -- udsum )
                                   1115 ;       Add two unsigned single
                                   1116 ;       and return a double sum.
      00055D 05 4A                 1117         .word      LINK
                           00055F  1118 LINK	= . 
      00055F 03                    1119         .byte      3
      000560 55 4D 2B              1120         .ascii     "UM+"
      000563                       1121 UPLUS:
      000563 A6 01            [ 1] 1122         LD A,#1
      000565 90 93            [ 1] 1123         LDW Y,X
      000567 90 EE 02         [ 2] 1124         LDW Y,(2,Y)
      00056A 90 BF 24         [ 2] 1125         LDW YTEMP,Y
      00056D 90 93            [ 1] 1126         LDW Y,X
      00056F 90 FE            [ 2] 1127         LDW Y,(Y)
      000571 72 B9 00 24      [ 2] 1128         ADDW Y,YTEMP
      000575 EF 02            [ 2] 1129         LDW (2,X),Y
      000577 25 01            [ 1] 1130         JRC     UPL1
      000579 4F               [ 1] 1131         CLR A
      00057A E7 01            [ 1] 1132 UPL1:   LD     (1,X),A
      00057C 7F               [ 1] 1133         CLR (X)
      00057D 81               [ 4] 1134         RET
                                   1135 
                                   1136 ;; System and user variables
                                   1137 
                                   1138 ;       doVAR   ( -- a )
                                   1139 ;       Code for VARIABLE and CREATE.
      00057E 05 5F                 1140         .word      LINK
                           000580  1141 LINK	= . 
      000580 45                    1142 	.byte      COMPO+5
      000581 44 4F 56 41 52        1143         .ascii     "DOVAR"
      000586                       1144 DOVAR:
      000586 1D 00 02         [ 2] 1145 	SUBW X,#2
      000589 90 85            [ 2] 1146         POPW Y    ;get return addr (pfa)
      00058B 90 FE            [ 2] 1147         LDW Y,(Y) ; indirect address 
      00058D FF               [ 2] 1148         LDW (X),Y    ;push on stack
      00058E 81               [ 4] 1149         RET     ;go to RET of EXEC
                                   1150 
                                   1151 ;       BASE    ( -- a )
                                   1152 ;       Radix base for numeric I/O.
      00058F 05 80                 1153         .word      LINK        
                           000591  1154 LINK = . 
      000591 04                    1155         .byte      4
      000592 42 41 53 45           1156         .ascii     "BASE"
      000596                       1157 BASE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000596 90 AE 00 06      [ 2] 1158 	LDW Y,#UBASE 
      00059A 1D 00 02         [ 2] 1159 	SUBW X,#2
      00059D FF               [ 2] 1160         LDW (X),Y
      00059E 81               [ 4] 1161         RET
                                   1162 
                                   1163 ;       tmp     ( -- a )
                                   1164 ;       A temporary storage.
      00059F 05 91                 1165         .word      LINK
                                   1166         
                           0005A1  1167 LINK = . 
      0005A1 03                    1168 	.byte      3
      0005A2 54 4D 50              1169         .ascii     "TMP"
      0005A5                       1170 TEMP:
      0005A5 90 AE 00 08      [ 2] 1171 	LDW Y,#UTMP
      0005A9 1D 00 02         [ 2] 1172 	SUBW X,#2
      0005AC FF               [ 2] 1173         LDW (X),Y
      0005AD 81               [ 4] 1174         RET
                                   1175 
                                   1176 ;       >IN     ( -- a )
                                   1177 ;        Hold parsing pointer.
      0005AE 05 A1                 1178         .word      LINK
                           0005B0  1179 LINK = . 
      0005B0 03                    1180         .byte      3
      0005B1 3E 49 4E              1181         .ascii    ">IN"
      0005B4                       1182 INN:
      0005B4 90 AE 00 0A      [ 2] 1183 	LDW Y,#UINN 
      0005B8 1D 00 02         [ 2] 1184 	SUBW X,#2
      0005BB FF               [ 2] 1185         LDW (X),Y
      0005BC 81               [ 4] 1186         RET
                                   1187 
                                   1188 ;       #TIB    ( -- a )
                                   1189 ;       Count in terminal input buffer.
      0005BD 05 B0                 1190         .word      LINK
                           0005BF  1191 LINK = . 
      0005BF 04                    1192         .byte      4
      0005C0 23 54 49 42           1193         .ascii     "#TIB"
      0005C4                       1194 NTIB:
      0005C4 90 AE 00 0C      [ 2] 1195 	LDW Y,#UCTIB 
      0005C8 1D 00 02         [ 2] 1196 	SUBW X,#2
      0005CB FF               [ 2] 1197         LDW (X),Y
      0005CC 81               [ 4] 1198         RET
                                   1199 
                                   1200 ;       TBUF ( -- a )
                                   1201 ;       address of 128 bytes transaction buffer 
      0005CD 05 BF                 1202         .word LINK 
                           0005CF  1203         LINK=.
      0005CF 04                    1204         .byte 4 
      0005D0 54 42 55 46           1205         .ascii "TBUF"
      0005D4                       1206 TBUF:
      0005D4 90 AE 16 80      [ 2] 1207         ldw y,#ROWBUFF
      0005D8 1D 00 02         [ 2] 1208         subw x,#CELLL
      0005DB FF               [ 2] 1209         ldw (x),y 
      0005DC 81               [ 4] 1210         ret 
                                   1211 
                                   1212 ; systeme variable 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



                                   1213 ; compilation destination 
                                   1214 ; TFLASH ( -- A )
      0005DD 05 CF                 1215         .word LINK 
                           0005DF  1216         LINK=.
      0005DF 06                    1217         .byte 6 
      0005E0 54 46 4C 41 53 48     1218         .ascii "TFLASH"         
      0005E6                       1219 TFLASH:
      0005E6 1D 00 02         [ 2] 1220         subw x,#CELLL 
      0005E9 90 AE 00 1E      [ 2] 1221         ldw y,#UTFLASH
      0005ED FF               [ 2] 1222         ldw (x),y 
      0005EE 81               [ 4] 1223         ret 
                                   1224 
                                   1225 ;       "EVAL   ( -- a )
                                   1226 ;       Execution vector of EVAL.
      0005EF 05 DF                 1227         .word      LINK
                           0005F1  1228 LINK = . 
      0005F1 05                    1229         .byte      5
      0005F2 27 45 56 41 4C        1230         .ascii     "'EVAL"
      0005F7                       1231 TEVAL:
      0005F7 90 AE 00 10      [ 2] 1232 	LDW Y,#UINTER 
      0005FB 1D 00 02         [ 2] 1233 	SUBW X,#2
      0005FE FF               [ 2] 1234         LDW (X),Y
      0005FF 81               [ 4] 1235         RET
                                   1236 
                                   1237 ;       HLD     ( -- a )
                                   1238 ;       Hold a pointer of output string.
      000600 05 F1                 1239         .word      LINK
                           000602  1240 LINK = . 
      000602 03                    1241         .byte      3
      000603 48 4C 44              1242         .ascii     "HLD"
      000606                       1243 HLD:
      000606 90 AE 00 12      [ 2] 1244 	LDW Y,#UHLD 
      00060A 1D 00 02         [ 2] 1245 	SUBW X,#2
      00060D FF               [ 2] 1246         LDW (X),Y
      00060E 81               [ 4] 1247         RET
                                   1248 
                                   1249 ;       CONTEXT ( -- a )
                                   1250 ;       Start vocabulary search.
      00060F 06 02                 1251         .word      LINK
                           000611  1252 LINK = . 
      000611 07                    1253         .byte      7
      000612 43 4F 4E 54 45 58 54  1254         .ascii     "CONTEXT"
      000619                       1255 CNTXT:
      000619 90 AE 00 14      [ 2] 1256 	LDW Y,#UCNTXT
      00061D 1D 00 02         [ 2] 1257 	SUBW X,#2
      000620 FF               [ 2] 1258         LDW (X),Y
      000621 81               [ 4] 1259         RET
                                   1260 
                                   1261 ;       VP      ( -- a )
                                   1262 ;       Point to top of variables
      000622 06 11                 1263         .word      LINK
                           000624  1264 LINK = . 
      000624 02                    1265         .byte      2
      000625 56 50                 1266         .ascii     "VP"
      000627                       1267 VPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000627 90 AE 00 16      [ 2] 1268 	LDW Y,#UVP 
      00062B 1D 00 02         [ 2] 1269 	SUBW X,#2
      00062E FF               [ 2] 1270         LDW (X),Y
      00062F 81               [ 4] 1271         RET
                                   1272 
                                   1273 ;       CP    ( -- a )
                                   1274 ;       Pointer to top of FLASH 
      000630 06 24                 1275         .word LINK 
                           000632  1276         LINK=.
      000632 02                    1277         .byte 2 
      000633 43 50                 1278         .ascii "CP"
      000635                       1279 CPP: 
      000635 90 AE 00 18      [ 2] 1280         ldw y,#UCP 
      000639 1D 00 02         [ 2] 1281         subw x,#CELLL 
      00063C FF               [ 2] 1282         ldw (x),y 
      00063D 81               [ 4] 1283         ret                
                                   1284 
                                   1285 ;       LAST    ( -- a )
                                   1286 ;       Point to last name in dictionary.
      00063E 06 32                 1287         .word      LINK
                           000640  1288 LINK = . 
      000640 04                    1289         .byte      4
      000641 4C 41 53 54           1290         .ascii     "LAST"
      000645                       1291 LAST:
      000645 90 AE 00 1A      [ 2] 1292 	LDW Y,#ULAST 
      000649 1D 00 02         [ 2] 1293 	SUBW X,#2
      00064C FF               [ 2] 1294         LDW (X),Y
      00064D 81               [ 4] 1295         RET
                                   1296 
                                   1297 ; address of system variable URLAST 
                                   1298 ;       RAMLAST ( -- a )
                                   1299 ; RAM dictionary context 
      00064E 06 40                 1300         .word LINK 
                           000650  1301         LINK=. 
      000650 07                    1302         .byte 7  
      000651 52 41 4D 4C 41 53 54  1303         .ascii "RAMLAST" 
      000658                       1304 RAMLAST: 
      000658 90 AE 00 20      [ 2] 1305         ldw y,#URLAST 
      00065C 1D 00 02         [ 2] 1306         subw x,#CELLL 
      00065F FF               [ 2] 1307         ldw (x),y 
      000660 81               [ 4] 1308         ret 
                                   1309 
                                   1310 ; OFFSET ( -- a )
                                   1311 ; address of system variable OFFSET 
      000661 06 50                 1312         .word LINK 
                           000663  1313         LINK=.
      000663 06                    1314         .byte 6
      000664 4F 46 46 53 45 54     1315         .ascii "OFFSET" 
      00066A                       1316 OFFSET: 
      00066A 1D 00 02         [ 2] 1317         subw x,#CELLL
      00066D 90 AE 00 1C      [ 2] 1318         ldw y,#UOFFSET 
      000671 FF               [ 2] 1319         ldw (x),y 
      000672 81               [ 4] 1320         ret 
                                   1321 
                                   1322 ; adjust jump address adding OFFSET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1323 ; ADR-ADJ ( a -- a+offset )
      000673                       1324 ADRADJ: 
      000673 CD 06 6A         [ 4] 1325         call OFFSET 
      000676 CD 04 32         [ 4] 1326         call AT 
      000679 CC 06 D4         [ 2] 1327         jp PLUS 
                                   1328 
                                   1329 
                                   1330 ;; Common functions
                                   1331 
                                   1332 ;       ?DUP    ( w -- w w | 0 )
                                   1333 ;       Dup tos if its is not zero.
      00067C 06 63                 1334         .word      LINK
                           00067E  1335 LINK = . 
      00067E 04                    1336         .byte      4
      00067F 3F 44 55 50           1337         .ascii     "?DUP"
      000683                       1338 QDUP:
      000683 90 93            [ 1] 1339         LDW Y,X
      000685 90 FE            [ 2] 1340 	LDW Y,(Y)
      000687 27 04            [ 1] 1341         JREQ     QDUP1
      000689 1D 00 02         [ 2] 1342 	SUBW X,#2
      00068C FF               [ 2] 1343         LDW (X),Y
      00068D 81               [ 4] 1344 QDUP1:  RET
                                   1345 
                                   1346 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1347 ;       Rot 3rd item to top.
      00068E 06 7E                 1348         .word      LINK
                           000690  1349 LINK = . 
      000690 03                    1350         .byte      3
      000691 52 4F 54              1351         .ascii     "ROT"
      000694                       1352 ROT:
      000694 90 93            [ 1] 1353         ldw y,x 
      000696 90 FE            [ 2] 1354         ldw y,(y)
      000698 90 89            [ 2] 1355         pushw y 
      00069A 90 93            [ 1] 1356         ldw y,x 
      00069C 90 EE 04         [ 2] 1357         ldw y,(4,y)
      00069F FF               [ 2] 1358         ldw (x),y 
      0006A0 90 93            [ 1] 1359         ldw y,x 
      0006A2 90 EE 02         [ 2] 1360         ldw y,(2,y)
      0006A5 EF 04            [ 2] 1361         ldw (4,x),y 
      0006A7 90 85            [ 2] 1362         popw y 
      0006A9 EF 02            [ 2] 1363         ldw (2,x),y
      0006AB 81               [ 4] 1364         ret 
                                   1365 
                                   1366 ;       2DROP   ( w w -- )
                                   1367 ;       Discard two items on stack.
      0006AC 06 90                 1368         .word      LINK
                           0006AE  1369 LINK = . 
      0006AE 05                    1370         .byte      5
      0006AF 32 44 52 4F 50        1371         .ascii     "2DROP"
      0006B4                       1372 DDROP:
      0006B4 1C 00 04         [ 2] 1373         ADDW X,#4
      0006B7 81               [ 4] 1374         RET
                                   1375 
                                   1376 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1377 ;       Duplicate top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006B8 06 AE                 1378         .word      LINK
                           0006BA  1379 LINK = . 
      0006BA 04                    1380         .byte      4
      0006BB 32 44 55 50           1381         .ascii     "2DUP"
      0006BF                       1382 DDUP:
      0006BF 1D 00 04         [ 2] 1383         SUBW X,#4
      0006C2 90 93            [ 1] 1384         LDW Y,X
      0006C4 90 EE 06         [ 2] 1385         LDW Y,(6,Y)
      0006C7 EF 02            [ 2] 1386         LDW (2,X),Y
      0006C9 90 93            [ 1] 1387         LDW Y,X
      0006CB 90 EE 04         [ 2] 1388         LDW Y,(4,Y)
      0006CE FF               [ 2] 1389         LDW (X),Y
      0006CF 81               [ 4] 1390         RET
                                   1391 
                                   1392 ;       +       ( w w -- sum )
                                   1393 ;       Add top two items.
      0006D0 06 BA                 1394         .word      LINK
                           0006D2  1395 LINK = . 
      0006D2 01                    1396         .byte      1
      0006D3 2B                    1397         .ascii     "+"
      0006D4                       1398 PLUS:
      0006D4 90 93            [ 1] 1399         LDW Y,X
      0006D6 90 FE            [ 2] 1400         LDW Y,(Y)
      0006D8 90 BF 24         [ 2] 1401         LDW YTEMP,Y
      0006DB 1C 00 02         [ 2] 1402         ADDW X,#2
      0006DE 90 93            [ 1] 1403         LDW Y,X
      0006E0 90 FE            [ 2] 1404         LDW Y,(Y)
      0006E2 72 B9 00 24      [ 2] 1405         ADDW Y,YTEMP
      0006E6 FF               [ 2] 1406         LDW (X),Y
      0006E7 81               [ 4] 1407         RET
                                   1408 
                                   1409 ;       NOT     ( w -- w )
                                   1410 ;       One's complement of tos.
      0006E8 06 D2                 1411         .word      LINK
                           0006EA  1412 LINK = . 
      0006EA 03                    1413         .byte      3
      0006EB 4E 4F 54              1414         .ascii     "NOT"
      0006EE                       1415 INVER:
      0006EE 90 93            [ 1] 1416         LDW Y,X
      0006F0 90 FE            [ 2] 1417         LDW Y,(Y)
      0006F2 90 53            [ 2] 1418         CPLW Y
      0006F4 FF               [ 2] 1419         LDW (X),Y
      0006F5 81               [ 4] 1420         RET
                                   1421 
                                   1422 ;       NEGATE  ( n -- -n )
                                   1423 ;       Two's complement of tos.
      0006F6 06 EA                 1424         .word      LINK
                           0006F8  1425 LINK = . 
      0006F8 06                    1426         .byte      6
      0006F9 4E 45 47 41 54 45     1427         .ascii     "NEGATE"
      0006FF                       1428 NEGAT:
      0006FF 90 93            [ 1] 1429         LDW Y,X
      000701 90 FE            [ 2] 1430         LDW Y,(Y)
      000703 90 50            [ 2] 1431         NEGW Y
      000705 FF               [ 2] 1432         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000706 81               [ 4] 1433         RET
                                   1434 
                                   1435 ;       DNEGATE ( d -- -d )
                                   1436 ;       Two's complement of top double.
      000707 06 F8                 1437         .word      LINK
                           000709  1438 LINK = . 
      000709 07                    1439         .byte      7
      00070A 44 4E 45 47 41 54 45  1440         .ascii     "DNEGATE"
      000711                       1441 DNEGA:
      000711 90 93            [ 1] 1442         LDW Y,X
      000713 90 FE            [ 2] 1443 	LDW Y,(Y)
      000715 90 53            [ 2] 1444         CPLW Y     
      000717 90 BF 24         [ 2] 1445 	LDW YTEMP,Y
      00071A 90 93            [ 1] 1446         LDW Y,X
      00071C 90 EE 02         [ 2] 1447         LDW Y,(2,Y)
      00071F 90 53            [ 2] 1448         CPLW Y
      000721 72 A9 00 01      [ 2] 1449         addw y,#1
      000725 EF 02            [ 2] 1450         LDW (2,X),Y
      000727 90 BE 24         [ 2] 1451         LDW Y,YTEMP
      00072A 24 02            [ 1] 1452         JRNC DN1 
      00072C 90 5C            [ 2] 1453         INCW Y
      00072E FF               [ 2] 1454 DN1:    LDW (X),Y
      00072F 81               [ 4] 1455         RET
                                   1456 
                                   1457 
                                   1458 ;       S>D ( n -- d )
                                   1459 ; convert single integer to double 
      000730 07 09                 1460         .word LINK 
                           000732  1461         LINK=. 
      000732 03                    1462         .byte 3 
      000733 53 3E 44              1463         .ascii "S>D"
      000736                       1464 STOD: 
      000736 1D 00 02         [ 2] 1465         subw x,#CELLL 
      000739 90 5F            [ 1] 1466         clrw y 
      00073B FF               [ 2] 1467         ldw (x),y 
      00073C 90 93            [ 1] 1468         ldw y,x 
      00073E 90 EE 02         [ 2] 1469         ldw y,(2,y)
      000741 2A 05            [ 1] 1470         jrpl 1$ 
      000743 90 AE FF FF      [ 2] 1471         ldw y,#-1
      000747 FF               [ 2] 1472         ldw (x),y 
      000748 81               [ 4] 1473 1$:     ret 
                                   1474 
                                   1475 
                                   1476 
                                   1477 
                                   1478 ;       -       ( n1 n2 -- n1-n2 )
                                   1479 ;       Subtraction.
      000749 07 32                 1480         .word      LINK
                           00074B  1481 LINK = . 
      00074B 01                    1482         .byte      1
      00074C 2D                    1483         .ascii     "-"
      00074D                       1484 SUBB:
      00074D 90 93            [ 1] 1485         LDW Y,X
      00074F 90 FE            [ 2] 1486         LDW Y,(Y)
      000751 90 BF 24         [ 2] 1487         LDW YTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      000754 1C 00 02         [ 2] 1488         ADDW X,#2
      000757 90 93            [ 1] 1489         LDW Y,X
      000759 90 FE            [ 2] 1490         LDW Y,(Y)
      00075B 72 B2 00 24      [ 2] 1491         SUBW Y,YTEMP
      00075F FF               [ 2] 1492         LDW (X),Y
      000760 81               [ 4] 1493         RET
                                   1494 
                                   1495 ;       ABS     ( n -- n )
                                   1496 ;       Return  absolute value of n.
      000761 07 4B                 1497         .word      LINK
                           000763  1498 LINK = . 
      000763 03                    1499         .byte      3
      000764 41 42 53              1500         .ascii     "ABS"
      000767                       1501 ABSS:
      000767 90 93            [ 1] 1502         LDW Y,X
      000769 90 FE            [ 2] 1503 	LDW Y,(Y)
      00076B 2A 03            [ 1] 1504         JRPL     AB1     ;negate:
      00076D 90 50            [ 2] 1505         NEGW     Y     ;else negate hi byte
      00076F FF               [ 2] 1506         LDW (X),Y
      000770 81               [ 4] 1507 AB1:    RET
                                   1508 
                                   1509 ;       =       ( w w -- t )
                                   1510 ;       Return true if top two are =al.
      000771 07 63                 1511         .word      LINK
                           000773  1512 LINK = . 
      000773 01                    1513         .byte      1
      000774 3D                    1514         .ascii     "="
      000775                       1515 EQUAL:
      000775 A6 FF            [ 1] 1516         LD A,#0xFF  ;true
      000777 90 93            [ 1] 1517         LDW Y,X    ;D = n2
      000779 90 FE            [ 2] 1518         LDW Y,(Y)
      00077B 90 BF 24         [ 2] 1519         LDW YTEMP,Y
      00077E 1C 00 02         [ 2] 1520         ADDW X,#2
      000781 90 93            [ 1] 1521         LDW Y,X
      000783 90 FE            [ 2] 1522         LDW Y,(Y)
      000785 90 B3 24         [ 2] 1523         CPW Y,YTEMP     ;if n2 <> n1
      000788 27 01            [ 1] 1524         JREQ     EQ1
      00078A 4F               [ 1] 1525         CLR A
      00078B F7               [ 1] 1526 EQ1:    LD (X),A
      00078C E7 01            [ 1] 1527         LD (1,X),A
      00078E 81               [ 4] 1528 	RET     
                                   1529 
                                   1530 ;       U<      ( u u -- t )
                                   1531 ;       Unsigned compare of top two items.
      00078F 07 73                 1532         .word      LINK
                           000791  1533 LINK = . 
      000791 02                    1534         .byte      2
      000792 55 3C                 1535         .ascii     "U<"
      000794                       1536 ULESS:
      000794 A6 FF            [ 1] 1537         LD A,#0xFF  ;true
      000796 90 93            [ 1] 1538         LDW Y,X    ;D = n2
      000798 90 FE            [ 2] 1539         LDW Y,(Y)
      00079A 90 BF 24         [ 2] 1540         LDW YTEMP,Y
      00079D 1C 00 02         [ 2] 1541         ADDW X,#2
      0007A0 90 93            [ 1] 1542         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0007A2 90 FE            [ 2] 1543         LDW Y,(Y)
      0007A4 90 B3 24         [ 2] 1544         CPW Y,YTEMP     ;if n2 <> n1
      0007A7 25 01            [ 1] 1545         JRULT     ULES1
      0007A9 4F               [ 1] 1546         CLR A
      0007AA F7               [ 1] 1547 ULES1:  LD (X),A
      0007AB E7 01            [ 1] 1548         LD (1,X),A
      0007AD 81               [ 4] 1549 	RET     
                                   1550 
                                   1551 ;       <       ( n1 n2 -- t )
                                   1552 ;       Signed compare of top two items.
      0007AE 07 91                 1553         .word      LINK
                           0007B0  1554 LINK = . 
      0007B0 01                    1555         .byte      1
      0007B1 3C                    1556         .ascii     "<"
      0007B2                       1557 LESS:
      0007B2 A6 FF            [ 1] 1558         LD A,#0xFF  ;true
      0007B4 90 93            [ 1] 1559         LDW Y,X    ;D = n2
      0007B6 90 FE            [ 2] 1560         LDW Y,(Y)
      0007B8 90 BF 24         [ 2] 1561         LDW YTEMP,Y
      0007BB 1C 00 02         [ 2] 1562         ADDW X,#2
      0007BE 90 93            [ 1] 1563         LDW Y,X
      0007C0 90 FE            [ 2] 1564         LDW Y,(Y)
      0007C2 90 B3 24         [ 2] 1565         CPW Y,YTEMP     ;if n2 <> n1
      0007C5 2F 01            [ 1] 1566         JRSLT     LT1
      0007C7 4F               [ 1] 1567         CLR A
      0007C8 F7               [ 1] 1568 LT1:    LD (X),A
      0007C9 E7 01            [ 1] 1569         LD (1,X),A
      0007CB 81               [ 4] 1570 	RET     
                                   1571 
                                   1572 ;       MAX     ( n n -- n )
                                   1573 ;       Return greater of two top items.
      0007CC 07 B0                 1574         .word      LINK
                           0007CE  1575 LINK = . 
      0007CE 03                    1576         .byte      3
      0007CF 4D 41 58              1577         .ascii     "MAX"
      0007D2                       1578 MAX:
      0007D2 90 93            [ 1] 1579         LDW Y,X    ;D = n2
      0007D4 90 EE 02         [ 2] 1580         LDW Y,(2,Y)
      0007D7 90 BF 24         [ 2] 1581         LDW YTEMP,Y
      0007DA 90 93            [ 1] 1582         LDW Y,X
      0007DC 90 FE            [ 2] 1583         LDW Y,(Y)
      0007DE 90 B3 24         [ 2] 1584         CPW Y,YTEMP     ;if n2 <> n1
      0007E1 2F 02            [ 1] 1585         JRSLT     MAX1
      0007E3 EF 02            [ 2] 1586         LDW (2,X),Y
      0007E5 1C 00 02         [ 2] 1587 MAX1:   ADDW X,#2
      0007E8 81               [ 4] 1588 	RET     
                                   1589 
                                   1590 ;       MIN     ( n n -- n )
                                   1591 ;       Return smaller of top two items.
      0007E9 07 CE                 1592         .word      LINK
                           0007EB  1593 LINK = . 
      0007EB 03                    1594         .byte      3
      0007EC 4D 49 4E              1595         .ascii     "MIN"
      0007EF                       1596 MIN:
      0007EF 90 93            [ 1] 1597         LDW Y,X    ;D = n2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007F1 90 EE 02         [ 2] 1598         LDW Y,(2,Y)
      0007F4 90 BF 24         [ 2] 1599         LDW YTEMP,Y
      0007F7 90 93            [ 1] 1600         LDW Y,X
      0007F9 90 FE            [ 2] 1601         LDW Y,(Y)
      0007FB 90 B3 24         [ 2] 1602         CPW Y,YTEMP     ;if n2 <> n1
      0007FE 2C 02            [ 1] 1603         JRSGT     MIN1
      000800 EF 02            [ 2] 1604         LDW (2,X),Y
      000802 1C 00 02         [ 2] 1605 MIN1:	ADDW X,#2
      000805 81               [ 4] 1606 	RET     
                                   1607 
                                   1608 ;       WITHIN  ( u ul uh -- t )
                                   1609 ;       Return true if u is within
                                   1610 ;       range of ul and uh. ( ul <= u < uh )
      000806 07 EB                 1611         .word      LINK
                           000808  1612 LINK = . 
      000808 06                    1613         .byte      6
      000809 57 49 54 48 49 4E     1614         .ascii     "WITHIN"
      00080F                       1615 WITHI:
      00080F CD 05 03         [ 4] 1616         CALL     OVER
      000812 CD 07 4D         [ 4] 1617         CALL     SUBB
      000815 CD 04 A2         [ 4] 1618         CALL     TOR
      000818 CD 07 4D         [ 4] 1619         CALL     SUBB
      00081B CD 04 83         [ 4] 1620         CALL     RFROM
      00081E CC 07 94         [ 2] 1621         JP     ULESS
                                   1622 
                                   1623 ;; Divide
                                   1624 
                                   1625 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1626 ;       Unsigned divide of a double by a
                                   1627 ;       single. Return mod and quotient.
      000821 08 08                 1628         .word      LINK
                           000823  1629 LINK = . 
      000823 06                    1630         .byte      6
      000824 55 4D 2F 4D 4F 44     1631         .ascii     "UM/MOD"
      00082A                       1632 UMMOD:
      00082A BF 22            [ 2] 1633 	LDW XTEMP,X	; save stack pointer
      00082C FE               [ 2] 1634 	LDW X,(X)	; un
      00082D BF 24            [ 2] 1635 	LDW YTEMP,X     ; save un
      00082F 90 BE 22         [ 2] 1636 	LDW Y,XTEMP	; stack pointer
      000832 90 EE 04         [ 2] 1637 	LDW Y,(4,Y)     ; Y=udl
      000835 BE 22            [ 2] 1638 	LDW X,XTEMP
      000837 EE 02            [ 2] 1639 	LDW X,(2,X)	; X=udh
      000839 B3 24            [ 2] 1640 	CPW X,YTEMP
      00083B 23 0F            [ 2] 1641 	JRULE MMSM1
      00083D BE 22            [ 2] 1642 	LDW X,XTEMP
      00083F 1C 00 02         [ 2] 1643 	ADDW X,#2	; pop off 1 level
      000842 90 AE FF FF      [ 2] 1644 	LDW Y,#0xFFFF
      000846 FF               [ 2] 1645 	LDW (X),Y
      000847 90 5F            [ 1] 1646 	CLRW Y
      000849 EF 02            [ 2] 1647 	LDW (2,X),Y
      00084B 81               [ 4] 1648 	RET
      00084C                       1649 MMSM1:
                                   1650 ; take advantage of divw x,y when udh==0
      00084C 5D               [ 2] 1651         tnzw x  ; is udh==0?
      00084D 26 11            [ 1] 1652         jrne MMSM2 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00084F 93               [ 1] 1653         ldw x,y    ;udl 
      000850 90 BE 24         [ 2] 1654         ldw y,YTEMP ; divisor 
      000853 65               [ 2] 1655         divw x,y 
      000854 89               [ 2] 1656         pushw x     ; quotient 
      000855 BE 22            [ 2] 1657         ldw x,XTEMP 
      000857 1C 00 02         [ 2] 1658         addw x,#CELLL 
      00085A EF 02            [ 2] 1659         ldw (2,x),y  ; ur
      00085C 90 85            [ 2] 1660         popw y 
      00085E FF               [ 2] 1661         ldw (x),y ; uq 
      00085F 81               [ 4] 1662         ret 
      000860                       1663 MMSM2:        
      000860 A6 11            [ 1] 1664 	LD A,#17	; loop count
      000862                       1665 MMSM3:
      000862 B3 24            [ 2] 1666 	CPW X,YTEMP	; compare udh to un
      000864 25 04            [ 1] 1667 	JRULT MMSM4	; can't subtract
      000866 72 B0 00 24      [ 2] 1668 	SUBW X,YTEMP	; can subtract
      00086A                       1669 MMSM4:
      00086A 8C               [ 1] 1670 	CCF	; quotient bit
      00086B 90 59            [ 2] 1671 	RLCW Y	; rotate into quotient
      00086D 59               [ 2] 1672 	RLCW X	; rotate into remainder
      00086E 4A               [ 1] 1673 	DEC A	; repeat
      00086F 22 F1            [ 1] 1674 	JRUGT MMSM3
      000871 56               [ 2] 1675         RRCW X 
      000872 BF 24            [ 2] 1676 	LDW YTEMP,X	; done, save remainder
      000874 BE 22            [ 2] 1677 	LDW X,XTEMP
      000876 1C 00 02         [ 2] 1678 	ADDW X,#2	; drop
      000879 FF               [ 2] 1679 	LDW (X),Y
      00087A 90 BE 24         [ 2] 1680 	LDW Y,YTEMP	; save quotient
      00087D EF 02            [ 2] 1681 	LDW (2,X),Y
      00087F 81               [ 4] 1682 	RET
                                   1683 	
                                   1684 ;       M/MOD   ( d n -- r q )
                                   1685 ;       Signed floored divide of double by
                                   1686 ;       single. Return mod and quotient.
      000880 08 23                 1687         .word      LINK
                           000882  1688 LINK = . 
      000882 05                    1689         .byte      5
      000883 4D 2F 4D 4F 44        1690         .ascii     "M/MOD"
      000888                       1691 MSMOD:  
      000888 CD 04 D9         [ 4] 1692         CALL	DUPP
      00088B CD 05 12         [ 4] 1693         CALL	ZLESS
      00088E CD 04 D9         [ 4] 1694         CALL	DUPP
      000891 CD 04 A2         [ 4] 1695         CALL	TOR
      000894 CD 03 E7         [ 4] 1696         CALL	QBRAN
      000897 08 A5                 1697         .word	MMOD1
      000899 CD 06 FF         [ 4] 1698         CALL	NEGAT
      00089C CD 04 A2         [ 4] 1699         CALL	TOR
      00089F CD 07 11         [ 4] 1700         CALL	DNEGA
      0008A2 CD 04 83         [ 4] 1701         CALL	RFROM
      0008A5 CD 04 A2         [ 4] 1702 MMOD1:	CALL	TOR
      0008A8 CD 04 D9         [ 4] 1703         CALL	DUPP
      0008AB CD 05 12         [ 4] 1704         CALL	ZLESS
      0008AE CD 03 E7         [ 4] 1705         CALL	QBRAN
      0008B1 08 B9                 1706         .word	MMOD2
      0008B3 CD 04 96         [ 4] 1707         CALL	RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0008B6 CD 06 D4         [ 4] 1708         CALL	PLUS
      0008B9 CD 04 83         [ 4] 1709 MMOD2:	CALL	RFROM
      0008BC CD 08 2A         [ 4] 1710         CALL	UMMOD
      0008BF CD 04 83         [ 4] 1711         CALL	RFROM
      0008C2 CD 03 E7         [ 4] 1712         CALL	QBRAN
      0008C5 08 D0                 1713         .word	MMOD3
      0008C7 CD 04 E9         [ 4] 1714         CALL	SWAPP
      0008CA CD 06 FF         [ 4] 1715         CALL	NEGAT
      0008CD CD 04 E9         [ 4] 1716         CALL	SWAPP
      0008D0 81               [ 4] 1717 MMOD3:	RET
                                   1718 
                                   1719 ;       /MOD    ( n n -- r q )
                                   1720 ;       Signed divide. Return mod and quotient.
      0008D1 08 82                 1721         .word      LINK
                           0008D3  1722 LINK = . 
      0008D3 04                    1723         .byte      4
      0008D4 2F 4D 4F 44           1724         .ascii     "/MOD"
      0008D8                       1725 SLMOD:
      0008D8 CD 05 03         [ 4] 1726         CALL	OVER
      0008DB CD 05 12         [ 4] 1727         CALL	ZLESS
      0008DE CD 04 E9         [ 4] 1728         CALL	SWAPP
      0008E1 CC 08 88         [ 2] 1729         JP	MSMOD
                                   1730 
                                   1731 ;       MOD     ( n n -- r )
                                   1732 ;       Signed divide. Return mod only.
      0008E4 08 D3                 1733         .word      LINK
                           0008E6  1734 LINK = . 
      0008E6 03                    1735         .byte      3
      0008E7 4D 4F 44              1736         .ascii     "MOD"
      0008EA                       1737 MODD:
      0008EA CD 08 D8         [ 4] 1738 	CALL	SLMOD
      0008ED CC 04 CF         [ 2] 1739 	JP	DROP
                                   1740 
                                   1741 ;       /       ( n n -- q )
                                   1742 ;       Signed divide. Return quotient only.
      0008F0 08 E6                 1743         .word      LINK
                           0008F2  1744 LINK = . 
      0008F2 01                    1745         .byte      1
      0008F3 2F                    1746         .ascii     "/"
      0008F4                       1747 SLASH:
      0008F4 CD 08 D8         [ 4] 1748         CALL	SLMOD
      0008F7 CD 04 E9         [ 4] 1749         CALL	SWAPP
      0008FA CC 04 CF         [ 2] 1750         JP	DROP
                                   1751 
                                   1752 ;; Multiply
                                   1753 
                                   1754 ;       UM*     ( u u -- ud )
                                   1755 ;       Unsigned multiply. Return double product.
      0008FD 08 F2                 1756         .word      LINK
                           0008FF  1757 LINK = . 
      0008FF 03                    1758         .byte      3
      000900 55 4D 2A              1759         .ascii     "UM*"
      000903                       1760 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1761 ; take advantage of SP addressing modes
                                   1762 ; these PRODx in RAM are not required
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1763 ; the product is kept on stack as local variable 
                                   1764         ;; bytes offset on data stack 
                           000002  1765         da=2 
                           000003  1766         db=3 
                           000000  1767         dc=0 
                           000001  1768         dd=1 
                                   1769         ;; product bytes offset on return stack 
                           000001  1770         UD1=1  ; ud bits 31..24
                           000002  1771         UD2=2  ; ud bits 23..16
                           000003  1772         UD3=3  ; ud bits 15..8 
                           000004  1773         UD4=4  ; ud bits 7..0 
                                   1774         ;; local variable for product set to zero   
      000903 90 5F            [ 1] 1775         clrw y 
      000905 90 89            [ 2] 1776         pushw y  ; bits 15..0
      000907 90 89            [ 2] 1777         pushw y  ; bits 31..16 
      000909 E6 03            [ 1] 1778         ld a,(db,x) ; b 
      00090B 90 97            [ 1] 1779         ld yl,a 
      00090D E6 01            [ 1] 1780         ld a,(dd,x)   ; d
      00090F 90 42            [ 4] 1781         mul y,a    ; b*d  
      000911 17 03            [ 2] 1782         ldw (UD3,sp),y ; lowest weight product 
      000913 E6 03            [ 1] 1783         ld a,(db,x)
      000915 90 97            [ 1] 1784         ld yl,a 
      000917 E6 00            [ 1] 1785         ld a,(dc,x)
      000919 90 42            [ 4] 1786         mul y,a  ; b*c 
                                   1787         ;;; do the partial sum 
      00091B 72 F9 02         [ 2] 1788         addw y,(UD2,sp)
      00091E 4F               [ 1] 1789         clr a 
      00091F 49               [ 1] 1790         rlc a
      000920 6B 01            [ 1] 1791         ld (UD1,sp),a 
      000922 17 02            [ 2] 1792         ldw (UD2,sp),y 
      000924 E6 02            [ 1] 1793         ld a,(da,x)
      000926 90 97            [ 1] 1794         ld yl,a 
      000928 E6 01            [ 1] 1795         ld a,(dd,x)
      00092A 90 42            [ 4] 1796         mul y,a   ; a*d 
                                   1797         ;; do partial sum 
      00092C 72 F9 02         [ 2] 1798         addw y,(UD2,sp)
      00092F 4F               [ 1] 1799         clr a 
      000930 19 01            [ 1] 1800         adc a,(UD1,sp)
      000932 6B 01            [ 1] 1801         ld (UD1,sp),a  
      000934 17 02            [ 2] 1802         ldw (UD2,sp),y 
      000936 E6 02            [ 1] 1803         ld a,(da,x)
      000938 90 97            [ 1] 1804         ld yl,a 
      00093A E6 00            [ 1] 1805         ld a,(dc,x)
      00093C 90 42            [ 4] 1806         mul y,a  ;  a*c highest weight product 
                                   1807         ;;; do partial sum 
      00093E 72 F9 01         [ 2] 1808         addw y,(UD1,sp)
      000941 FF               [ 2] 1809         ldw (x),y  ; udh 
      000942 16 03            [ 2] 1810         ldw y,(UD3,sp)
      000944 EF 02            [ 2] 1811         ldw (2,x),y  ; udl  
      000946 5B 04            [ 2] 1812         addw sp,#4 ; drop local variable 
      000948 81               [ 4] 1813         ret  
                                   1814 
                                   1815 
                                   1816 ;       *       ( n n -- n )
                                   1817 ;       Signed multiply. Return single product.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      000949 08 FF                 1818         .word      LINK
                           00094B  1819 LINK = . 
      00094B 01                    1820         .byte      1
      00094C 2A                    1821         .ascii     "*"
      00094D                       1822 STAR:
      00094D CD 09 03         [ 4] 1823 	CALL	UMSTA
      000950 CC 04 CF         [ 2] 1824 	JP	DROP
                                   1825 
                                   1826 ;       M*      ( n n -- d )
                                   1827 ;       Signed multiply. Return double product.
      000953 09 4B                 1828         .word      LINK
                           000955  1829 LINK = . 
      000955 02                    1830         .byte      2
      000956 4D 2A                 1831         .ascii     "M*"
      000958                       1832 MSTAR:      
      000958 CD 06 BF         [ 4] 1833         CALL	DDUP
      00095B CD 05 4E         [ 4] 1834         CALL	XORR
      00095E CD 05 12         [ 4] 1835         CALL	ZLESS
      000961 CD 04 A2         [ 4] 1836         CALL	TOR
      000964 CD 07 67         [ 4] 1837         CALL	ABSS
      000967 CD 04 E9         [ 4] 1838         CALL	SWAPP
      00096A CD 07 67         [ 4] 1839         CALL	ABSS
      00096D CD 09 03         [ 4] 1840         CALL	UMSTA
      000970 CD 04 83         [ 4] 1841         CALL	RFROM
      000973 CD 03 E7         [ 4] 1842         CALL	QBRAN
      000976 09 7B                 1843         .word	MSTA1
      000978 CD 07 11         [ 4] 1844         CALL	DNEGA
      00097B 81               [ 4] 1845 MSTA1:	RET
                                   1846 
                                   1847 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1848 ;       Multiply n1 and n2, then divide
                                   1849 ;       by n3. Return mod and quotient.
      00097C 09 55                 1850         .word      LINK
                           00097E  1851 LINK = . 
      00097E 05                    1852         .byte      5
      00097F 2A 2F 4D 4F 44        1853         .ascii     "*/MOD"
      000984                       1854 SSMOD:
      000984 CD 04 A2         [ 4] 1855         CALL     TOR
      000987 CD 09 58         [ 4] 1856         CALL     MSTAR
      00098A CD 04 83         [ 4] 1857         CALL     RFROM
      00098D CC 08 88         [ 2] 1858         JP     MSMOD
                                   1859 
                                   1860 ;       */      ( n1 n2 n3 -- q )
                                   1861 ;       Multiply n1 by n2, then divide
                                   1862 ;       by n3. Return quotient only.
      000990 09 7E                 1863         .word      LINK
                           000992  1864 LINK = . 
      000992 02                    1865         .byte      2
      000993 2A 2F                 1866         .ascii     "*/"
      000995                       1867 STASL:
      000995 CD 09 84         [ 4] 1868         CALL	SSMOD
      000998 CD 04 E9         [ 4] 1869         CALL	SWAPP
      00099B CC 04 CF         [ 2] 1870         JP	DROP
                                   1871 
                                   1872 ;; Miscellaneous
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1873 
                                   1874 ;       CELL+   ( a -- a )
                                   1875 ;       Add cell size in byte to address.
      00099E 09 92                 1876         .word      LINK
                           0009A0  1877 LINK = . 
      0009A0 02                    1878         .byte       2
      0009A1 32 2B                 1879         .ascii     "2+"
      0009A3                       1880 CELLP:
      0009A3 90 93            [ 1] 1881         LDW Y,X
      0009A5 90 FE            [ 2] 1882 	LDW Y,(Y)
      0009A7 72 A9 00 02      [ 2] 1883         ADDW Y,#CELLL 
      0009AB FF               [ 2] 1884         LDW (X),Y
      0009AC 81               [ 4] 1885         RET
                                   1886 
                                   1887 ;       CELL-   ( a -- a )
                                   1888 ;       Subtract 2 from address.
      0009AD 09 A0                 1889         .word      LINK
                           0009AF  1890 LINK = . 
      0009AF 02                    1891         .byte       2
      0009B0 32 2D                 1892         .ascii     "2-"
      0009B2                       1893 CELLM:
      0009B2 90 93            [ 1] 1894         LDW Y,X
      0009B4 90 FE            [ 2] 1895 	LDW Y,(Y)
      0009B6 72 A2 00 02      [ 2] 1896         SUBW Y,#CELLL
      0009BA FF               [ 2] 1897         LDW (X),Y
      0009BB 81               [ 4] 1898         RET
                                   1899 
                                   1900 ;       CELLS   ( n -- n )
                                   1901 ;       Multiply tos by 2.
      0009BC 09 AF                 1902         .word      LINK
                           0009BE  1903 LINK = . 
      0009BE 02                    1904         .byte       2
      0009BF 32 2A                 1905         .ascii     "2*"
      0009C1                       1906 CELLS:
      0009C1 90 93            [ 1] 1907         LDW Y,X
      0009C3 90 FE            [ 2] 1908 	LDW Y,(Y)
      0009C5 90 58            [ 2] 1909         SLAW Y
      0009C7 FF               [ 2] 1910         LDW (X),Y
      0009C8 81               [ 4] 1911         RET
                                   1912 
                                   1913 ;       1+      ( a -- a )
                                   1914 ;       Add cell size in byte to address.
      0009C9 09 BE                 1915         .word      LINK
                           0009CB  1916 LINK = . 
      0009CB 02                    1917         .byte      2
      0009CC 31 2B                 1918         .ascii     "1+"
      0009CE                       1919 ONEP:
      0009CE 90 93            [ 1] 1920         LDW Y,X
      0009D0 90 FE            [ 2] 1921 	LDW Y,(Y)
      0009D2 90 5C            [ 2] 1922         INCW Y
      0009D4 FF               [ 2] 1923         LDW (X),Y
      0009D5 81               [ 4] 1924         RET
                                   1925 
                                   1926 ;       1-      ( a -- a )
                                   1927 ;       Subtract 2 from address.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009D6 09 CB                 1928         .word      LINK
                           0009D8  1929 LINK = . 
      0009D8 02                    1930         .byte      2
      0009D9 31 2D                 1931         .ascii     "1-"
      0009DB                       1932 ONEM:
      0009DB 90 93            [ 1] 1933         LDW Y,X
      0009DD 90 FE            [ 2] 1934 	LDW Y,(Y)
      0009DF 90 5A            [ 2] 1935         DECW Y
      0009E1 FF               [ 2] 1936         LDW (X),Y
      0009E2 81               [ 4] 1937         RET
                                   1938 
                                   1939 ;  shift left n times 
                                   1940 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009E3 09 D8                 1941         .word LINK 
                           0009E5  1942         LINK=.
      0009E5 06                    1943         .byte 6 
      0009E6 4C 53 48 49 46 54     1944         .ascii "LSHIFT"
      0009EC                       1945 LSHIFT:
      0009EC E6 01            [ 1] 1946         ld a,(1,x)
      0009EE 1C 00 02         [ 2] 1947         addw x,#CELLL 
      0009F1 90 93            [ 1] 1948         ldw y,x 
      0009F3 90 FE            [ 2] 1949         ldw y,(y)
      0009F5                       1950 LSHIFT1:
      0009F5 4D               [ 1] 1951         tnz a 
      0009F6 27 05            [ 1] 1952         jreq LSHIFT4 
      0009F8 90 58            [ 2] 1953         sllw y 
      0009FA 4A               [ 1] 1954         dec a 
      0009FB 20 F8            [ 2] 1955         jra LSHIFT1 
      0009FD                       1956 LSHIFT4:
      0009FD FF               [ 2] 1957         ldw (x),y 
      0009FE 81               [ 4] 1958         ret 
                                   1959 
                                   1960 ; shift right n times                 
                                   1961 ; RSHIFT (n1 n2 -- n1>>n2 )
      0009FF 09 E5                 1962         .word LINK 
                           000A01  1963         LINK=.
      000A01 06                    1964         .byte 6
      000A02 52 53 48 49 46 54     1965         .ascii "RSHIFT"
      000A08                       1966 RSHIFT:
      000A08 E6 01            [ 1] 1967         ld a,(1,x)
      000A0A 1C 00 02         [ 2] 1968         addw x,#CELLL 
      000A0D 90 93            [ 1] 1969         ldw y,x 
      000A0F 90 FE            [ 2] 1970         ldw y,(y)
      000A11                       1971 RSHIFT1:
      000A11 4D               [ 1] 1972         tnz a 
      000A12 27 05            [ 1] 1973         jreq RSHIFT4 
      000A14 90 54            [ 2] 1974         srlw y 
      000A16 4A               [ 1] 1975         dec a 
      000A17 20 F8            [ 2] 1976         jra RSHIFT1 
      000A19                       1977 RSHIFT4:
      000A19 FF               [ 2] 1978         ldw (x),y 
      000A1A 81               [ 4] 1979         ret 
                                   1980 
                                   1981 
                                   1982 ;       2/      ( n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1983 ;       divide  tos by 2.
      000A1B 0A 01                 1984         .word      LINK
                           000A1D  1985 LINK = . 
      000A1D 02                    1986         .byte      2
      000A1E 32 2F                 1987         .ascii     "2/"
      000A20                       1988 TWOSL:
      000A20 90 93            [ 1] 1989         LDW Y,X
      000A22 90 FE            [ 2] 1990 	LDW Y,(Y)
      000A24 90 57            [ 2] 1991         SRAW Y
      000A26 FF               [ 2] 1992         LDW (X),Y
      000A27 81               [ 4] 1993         RET
                                   1994 
                                   1995 ;       BL      ( -- 32 )
                                   1996 ;       Return 32,  blank character.
      000A28 0A 1D                 1997         .word      LINK
                           000A2A  1998 LINK = . 
      000A2A 02                    1999         .byte      2
      000A2B 42 4C                 2000         .ascii     "BL"
      000A2D                       2001 BLANK:
      000A2D 1D 00 02         [ 2] 2002         SUBW X,#2
      000A30 90 AE 00 20      [ 2] 2003 	LDW Y,#32
      000A34 FF               [ 2] 2004         LDW (X),Y
      000A35 81               [ 4] 2005         RET
                                   2006 
                                   2007 ;         0     ( -- 0)
                                   2008 ;         Return 0.
      000A36 0A 2A                 2009         .word      LINK
                           000A38  2010 LINK = . 
      000A38 01                    2011         .byte       1
      000A39 30                    2012         .ascii     "0"
      000A3A                       2013 ZERO:
      000A3A 1D 00 02         [ 2] 2014         SUBW X,#2
      000A3D 90 5F            [ 1] 2015 	CLRW Y
      000A3F FF               [ 2] 2016         LDW (X),Y
      000A40 81               [ 4] 2017         RET
                                   2018 
                                   2019 ;         1     ( -- 1)
                                   2020 ;         Return 1.
      000A41 0A 38                 2021         .word      LINK
                           000A43  2022 LINK = . 
      000A43 01                    2023         .byte       1
      000A44 31                    2024         .ascii     "1"
      000A45                       2025 ONE:
      000A45 1D 00 02         [ 2] 2026         SUBW X,#2
      000A48 90 AE 00 01      [ 2] 2027 	LDW Y,#1
      000A4C FF               [ 2] 2028         LDW (X),Y
      000A4D 81               [ 4] 2029         RET
                                   2030 
                                   2031 ;         -1    ( -- -1)
                                   2032 ;         Return 32,  blank character.
      000A4E 0A 43                 2033         .word      LINK
                           000A50  2034 LINK = . 
      000A50 02                    2035         .byte       2
      000A51 2D 31                 2036         .ascii     "-1"
      000A53                       2037 MONE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A53 1D 00 02         [ 2] 2038         SUBW X,#2
      000A56 90 AE FF FF      [ 2] 2039 	LDW Y,#0xFFFF
      000A5A FF               [ 2] 2040         LDW (X),Y
      000A5B 81               [ 4] 2041         RET
                                   2042 
                                   2043 ;       >CHAR   ( c -- c )
                                   2044 ;       Filter non-printing characters.
      000A5C 0A 50                 2045         .word      LINK
                           000A5E  2046 LINK = . 
      000A5E 05                    2047         .byte      5
      000A5F 3E 43 48 41 52        2048         .ascii     ">CHAR"
      000A64                       2049 TCHAR:
      000A64 E6 01            [ 1] 2050         ld a,(1,x)
      000A66 A1 20            [ 1] 2051         cp a,#32  
      000A68 2B 05            [ 1] 2052         jrmi 1$ 
      000A6A A1 7F            [ 1] 2053         cp a,#127 
      000A6C 2A 01            [ 1] 2054         jrpl 1$ 
      000A6E 81               [ 4] 2055         ret 
      000A6F A6 5F            [ 1] 2056 1$:     ld a,#'_ 
      000A71 E7 01            [ 1] 2057         ld (1,x),a 
      000A73 81               [ 4] 2058         ret 
                                   2059 
                                   2060 ;       DEPTH   ( -- n )
                                   2061 ;       Return  depth of  data stack.
      000A74 0A 5E                 2062         .word      LINK
                           000A76  2063 LINK = . 
      000A76 05                    2064         .byte      5
      000A77 44 45 50 54 48        2065         .ascii     "DEPTH"
      000A7C                       2066 DEPTH: 
      000A7C 90 BE 2A         [ 2] 2067         LDW Y,SP0    ;save data stack ptr
      000A7F BF 22            [ 2] 2068 	LDW XTEMP,X
      000A81 72 B2 00 22      [ 2] 2069         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A85 90 57            [ 2] 2070         SRAW Y    ;Y = #stack items
      000A87 1D 00 02         [ 2] 2071 	SUBW X,#2
      000A8A FF               [ 2] 2072         LDW (X),Y     ; if neg, underflow
      000A8B 81               [ 4] 2073         RET
                                   2074 
                                   2075 ;       PICK    ( ... +n -- ... w )
                                   2076 ;       Copy  nth stack item to tos.
      000A8C 0A 76                 2077         .word      LINK
                           000A8E  2078 LINK = . 
      000A8E 04                    2079         .byte      4
      000A8F 50 49 43 4B           2080         .ascii     "PICK"
      000A93                       2081 PICK:
      000A93 90 93            [ 1] 2082         LDW Y,X   ;D = n1
      000A95 90 FE            [ 2] 2083         LDW Y,(Y)
                                   2084 ; modified for standard compliance          
                                   2085 ; 0 PICK must be equivalent to DUP 
      000A97 90 5C            [ 2] 2086         INCW Y 
      000A99 90 58            [ 2] 2087         SLAW Y
      000A9B BF 22            [ 2] 2088         LDW XTEMP,X
      000A9D 72 B9 00 22      [ 2] 2089         ADDW Y,XTEMP
      000AA1 90 FE            [ 2] 2090         LDW Y,(Y)
      000AA3 FF               [ 2] 2091         LDW (X),Y
      000AA4 81               [ 4] 2092         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2093 
                                   2094 ;; Memory access
                                   2095 
                                   2096 ;       +!      ( n a -- )
                                   2097 ;       Add n to  contents at address a.
      000AA5 0A 8E                 2098         .word      LINK
                           000AA7  2099 LINK = . 
      000AA7 02                    2100         .byte      2
      000AA8 2B 21                 2101         .ascii     "+!"
      000AAA                       2102 PSTOR:
      000AAA 90 93            [ 1] 2103         ldw y,x 
      000AAC 90 FE            [ 2] 2104         ldw y,(y)
      000AAE 90 BF 24         [ 2] 2105         ldw YTEMP,y  ; address
      000AB1 90 FE            [ 2] 2106         ldw y,(y)  
      000AB3 90 89            [ 2] 2107         pushw y  ; value at address 
      000AB5 90 93            [ 1] 2108         ldw y,x 
      000AB7 90 EE 02         [ 2] 2109         ldw y,(2,y) ; n 
      000ABA 72 F9 01         [ 2] 2110         addw y,(1,sp) ; n+value
      000ABD 91 CF 24         [ 5] 2111         ldw [YTEMP],y ;  a!
      000AC0 90 85            [ 2] 2112         popw y    ;drop local var
      000AC2 1C 00 04         [ 2] 2113         addw x,#4 ; DDROP 
      000AC5 81               [ 4] 2114         ret 
                                   2115 
                                   2116 ;       2!      ( d a -- )
                                   2117 ;       Store  double integer to address a.
      000AC6 0A A7                 2118         .word      LINK
                           000AC8  2119 LINK = . 
      000AC8 02                    2120         .byte      2
      000AC9 32 21                 2121         .ascii     "2!"
      000ACB                       2122 DSTOR:
      000ACB 90 93            [ 1] 2123         ldw y,x 
      000ACD 90 FE            [ 2] 2124         ldw y,(y)
      000ACF 90 BF 24         [ 2] 2125         ldw YTEMP,y ; address 
      000AD2 1C 00 02         [ 2] 2126         addw x,#CELLL ; drop a 
      000AD5 90 93            [ 1] 2127         ldw y,x 
      000AD7 90 FE            [ 2] 2128         ldw y,(y) ; hi word 
      000AD9 89               [ 2] 2129         pushw x 
      000ADA EE 02            [ 2] 2130         ldw x,(2,x) ; lo word 
      000ADC 91 CF 24         [ 5] 2131         ldw [YTEMP],y
      000ADF 90 93            [ 1] 2132         ldw y,x 
      000AE1 AE 00 02         [ 2] 2133         ldw x,#2 
      000AE4 92 DF 24         [ 5] 2134         ldw ([YTEMP],x),y 
      000AE7 85               [ 2] 2135         popw x 
      000AE8 1C 00 04         [ 2] 2136         addw x,#4 ; DDROP 
      000AEB 81               [ 4] 2137         ret 
                                   2138 
                                   2139 ;       2@      ( a -- d )
                                   2140 ;       Fetch double integer from address a.
      000AEC 0A C8                 2141         .word      LINK
                           000AEE  2142 LINK = . 
      000AEE 02                    2143         .byte      2
      000AEF 32 40                 2144         .ascii     "2@"
      000AF1                       2145 DAT:
      000AF1 90 93            [ 1] 2146         ldw y,x 
      000AF3 90 FE            [ 2] 2147         ldw y,(y) ;address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000AF5 90 BF 24         [ 2] 2148         ldw YTEMP,y 
      000AF8 1D 00 02         [ 2] 2149         subw x,#CELLL ; space for udh 
      000AFB 91 CE 24         [ 5] 2150         ldw y,[YTEMP] ; udh 
      000AFE FF               [ 2] 2151         ldw (x),y 
      000AFF 90 AE 00 02      [ 2] 2152         ldw y,#2
      000B03 91 DE 24         [ 5] 2153         ldw y,([YTEMP],y) ; udl 
      000B06 EF 02            [ 2] 2154         ldw (2,x),y
      000B08 81               [ 4] 2155         ret 
                                   2156 
                                   2157 ;       COUNT   ( b -- b +n )
                                   2158 ;       Return count byte of a string
                                   2159 ;       and add 1 to byte address.
      000B09 0A EE                 2160         .word      LINK
                           000B0B  2161 LINK = . 
      000B0B 05                    2162         .byte      5
      000B0C 43 4F 55 4E 54        2163         .ascii     "COUNT"
      000B11                       2164 COUNT:
      000B11 90 93            [ 1] 2165         ldw y,x 
      000B13 90 FE            [ 2] 2166         ldw y,(y) ; address 
      000B15 90 F6            [ 1] 2167         ld a,(y)  ; count 
      000B17 90 5C            [ 2] 2168         incw y 
      000B19 FF               [ 2] 2169         ldw (x),y 
      000B1A 1D 00 02         [ 2] 2170         subw x,#CELLL 
      000B1D E7 01            [ 1] 2171         ld (1,x),a 
      000B1F 7F               [ 1] 2172         clr (x)
      000B20 81               [ 4] 2173         ret 
                                   2174 
                                   2175 ;       HERE    ( -- a )
                                   2176 ;       Return  top of  variables
      000B21 0B 0B                 2177         .word      LINK
                           000B23  2178 LINK = . 
      000B23 04                    2179         .byte      4
      000B24 48 45 52 45           2180         .ascii     "HERE"
      000B28                       2181 HERE:
      000B28 90 AE 00 16      [ 2] 2182       	ldw y,#UVP 
      000B2C 90 FE            [ 2] 2183         ldw y,(y)
      000B2E 1D 00 02         [ 2] 2184         subw x,#CELLL 
      000B31 FF               [ 2] 2185         ldw (x),y 
      000B32 81               [ 4] 2186         ret 
                                   2187 
                                   2188 ;       PAD     ( -- a )
                                   2189 ;       Return address of text buffer
                                   2190 ;       above  code dictionary.
      000B33 0B 23                 2191         .word      LINK
                           000B35  2192 LINK = . 
      000B35 03                    2193         .byte      3
      000B36 50 41 44              2194         .ascii     "PAD"
      000B39                       2195 PAD:
      000B39 CD 0B 28         [ 4] 2196         CALL     HERE
      000B3C CD 03 B4         [ 4] 2197         CALL     DOLIT
      000B3F 00 50                 2198         .word      80
      000B41 CC 06 D4         [ 2] 2199         JP     PLUS
                                   2200 
                                   2201 ;       TIB     ( -- a )
                                   2202 ;       Return address of terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B44 0B 35                 2203         .word      LINK
                           000B46  2204 LINK = . 
      000B46 03                    2205         .byte      3
      000B47 54 49 42              2206         .ascii     "TIB"
      000B4A                       2207 TIB:
      000B4A CD 05 C4         [ 4] 2208         CALL     NTIB
      000B4D CD 09 A3         [ 4] 2209         CALL     CELLP
      000B50 CC 04 32         [ 2] 2210         JP     AT
                                   2211 
                                   2212 ;       @EXECUTE        ( a -- )
                                   2213 ;       Execute vector stored in address a.
      000B53 0B 46                 2214         .word      LINK
                           000B55  2215 LINK = . 
      000B55 08                    2216         .byte      8
      000B56 40 45 58 45 43 55 54  2217         .ascii     "@EXECUTE"
             45
      000B5E                       2218 ATEXE:
      000B5E CD 04 32         [ 4] 2219         CALL     AT
      000B61 CD 06 83         [ 4] 2220         CALL     QDUP    ;?address or zero
      000B64 CD 03 E7         [ 4] 2221         CALL     QBRAN
      000B67 0B 6C                 2222         .word      EXE1
      000B69 CD 04 0E         [ 4] 2223         CALL     EXECU   ;execute if non-zero
      000B6C 81               [ 4] 2224 EXE1:   RET     ;do nothing if zero
                                   2225 
                                   2226 ;       CMOVE   ( b1 b2 u -- )
                                   2227 ;       Copy u bytes from b1 to b2.
      000B6D 0B 55                 2228         .word      LINK
                           000B6F  2229 LINK = . 
      000B6F 05                    2230         .byte      5
      000B70 43 4D 4F 56 45        2231         .ascii     "CMOVE"
      000B75                       2232 CMOVE:
      000B75 CD 04 A2         [ 4] 2233         CALL	TOR
      000B78 CD 03 FE         [ 4] 2234         CALL	BRAN
      000B7B 0B 95                 2235         .word	CMOV2
      000B7D CD 04 A2         [ 4] 2236 CMOV1:	CALL	TOR
      000B80 CD 04 D9         [ 4] 2237         CALL	DUPP
      000B83 CD 04 50         [ 4] 2238         CALL	CAT
      000B86 CD 04 96         [ 4] 2239         CALL	RAT
      000B89 CD 04 3F         [ 4] 2240         CALL	CSTOR
      000B8C CD 09 CE         [ 4] 2241         CALL	ONEP
      000B8F CD 04 83         [ 4] 2242         CALL	RFROM
      000B92 CD 09 CE         [ 4] 2243         CALL	ONEP
      000B95 CD 03 C8         [ 4] 2244 CMOV2:	CALL	DONXT
      000B98 0B 7D                 2245         .word	CMOV1
      000B9A CC 06 B4         [ 2] 2246         JP	DDROP
                                   2247 
                                   2248 ;       FILL    ( b u c -- )
                                   2249 ;       Fill u bytes of character c
                                   2250 ;       to area beginning at b.
      000B9D 0B 6F                 2251         .word       LINK
                           000B9F  2252 LINK = . 
      000B9F 04                    2253         .byte       4
      000BA0 46 49 4C 4C           2254         .ascii     "FILL"
      000BA4                       2255 FILL:
      000BA4 90 93            [ 1] 2256         ldw y,x 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000BA6 90 E6 01         [ 1] 2257         ld a,(1,y) ; c 
      000BA9 1C 00 02         [ 2] 2258         addw x,#CELLL ; drop c 
      000BAC 90 93            [ 1] 2259         ldw y,x 
      000BAE 90 FE            [ 2] 2260         ldw y,(y) ; count
      000BB0 90 89            [ 2] 2261         pushw y 
      000BB2 1C 00 02         [ 2] 2262         addw x,#CELLL ; drop u 
      000BB5 90 93            [ 1] 2263         ldw y,x 
      000BB7 1C 00 02         [ 2] 2264         addw x,#CELLL ; drop b 
      000BBA 90 FE            [ 2] 2265         ldw y,(y) ; address
      000BBC 90 BF 24         [ 2] 2266         ldw YTEMP,y
      000BBF 90 85            [ 2] 2267         popw y ; count 
      000BC1                       2268 FILL1:  
      000BC1 92 C7 24         [ 4] 2269         ld [YTEMP],a 
      000BC4 3C 25            [ 1] 2270         inc YTEMP+1
      000BC6 24 02            [ 1] 2271         jrnc FILL2 
      000BC8 3C 24            [ 1] 2272         inc YTEMP
      000BCA                       2273 FILL2: 
      000BCA 90 5A            [ 2] 2274         decw y ; count 
      000BCC 26 F3            [ 1] 2275         jrne FILL1  
      000BCE 81               [ 4] 2276         ret 
                                   2277 
                                   2278 ;       ERASE   ( b u -- )
                                   2279 ;       Erase u bytes beginning at b.
      000BCF 0B 9F                 2280         .word      LINK
                           000BD1  2281 LINK = . 
      000BD1 05                    2282         .byte      5
      000BD2 45 52 41 53 45        2283         .ascii     "ERASE"
      000BD7                       2284 ERASE:
      000BD7 90 5F            [ 1] 2285         clrw y 
      000BD9 1D 00 02         [ 2] 2286         subw x,#CELLL 
      000BDC FF               [ 2] 2287         ldw (x),y 
      000BDD CC 0B A4         [ 2] 2288         jp FILL 
                                   2289 
                                   2290 
                                   2291 ;       PACK0   ( b u a -- a )
                                   2292 ;       Build a counted string with
                                   2293 ;       u characters from b. Null fill.
      000BE0 0B D1                 2294         .word      LINK
                           000BE2  2295 LINK = . 
      000BE2 05                    2296         .byte      5
      000BE3 50 41 43 4B 30        2297         .ascii     "PACK0"
      000BE8                       2298 PACKS:
      000BE8 CD 04 D9         [ 4] 2299         CALL     DUPP
      000BEB CD 04 A2         [ 4] 2300         CALL     TOR     ;strings only on cell boundary
      000BEE CD 06 BF         [ 4] 2301         CALL     DDUP
      000BF1 CD 04 3F         [ 4] 2302         CALL     CSTOR
      000BF4 CD 09 CE         [ 4] 2303         CALL     ONEP ;save count
      000BF7 CD 04 E9         [ 4] 2304         CALL     SWAPP
      000BFA CD 0B 75         [ 4] 2305         CALL     CMOVE
      000BFD CD 04 83         [ 4] 2306         CALL     RFROM
      000C00 81               [ 4] 2307         RET
                                   2308 
                                   2309 ;; Numeric output, single precision
                                   2310 
                                   2311 ;       DIGIT   ( u -- c )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2312 ;       Convert digit u to a character.
      000C01 0B E2                 2313         .word      LINK
                           000C03  2314 LINK = . 
      000C03 05                    2315         .byte      5
      000C04 44 49 47 49 54        2316         .ascii     "DIGIT"
      000C09                       2317 DIGIT:
      000C09 CD 03 B4         [ 4] 2318         CALL	DOLIT
      000C0C 00 09                 2319         .word	9
      000C0E CD 05 03         [ 4] 2320         CALL	OVER
      000C11 CD 07 B2         [ 4] 2321         CALL	LESS
      000C14 CD 03 B4         [ 4] 2322         CALL	DOLIT
      000C17 00 07                 2323         .word	7
      000C19 CD 05 25         [ 4] 2324         CALL	ANDD
      000C1C CD 06 D4         [ 4] 2325         CALL	PLUS
      000C1F CD 03 B4         [ 4] 2326         CALL	DOLIT
      000C22 00 30                 2327         .word	48	;'0'
      000C24 CC 06 D4         [ 2] 2328         JP	PLUS
                                   2329 
                                   2330 ;       EXTRACT ( n base -- n c )
                                   2331 ;       Extract least significant digit from n.
      000C27 0C 03                 2332         .word      LINK
                           000C29  2333 LINK = . 
      000C29 07                    2334         .byte      7
      000C2A 45 58 54 52 41 43 54  2335         .ascii     "EXTRACT"
      000C31                       2336 EXTRC:
      000C31 CD 0A 3A         [ 4] 2337         CALL     ZERO
      000C34 CD 04 E9         [ 4] 2338         CALL     SWAPP
      000C37 CD 08 2A         [ 4] 2339         CALL     UMMOD
      000C3A CD 04 E9         [ 4] 2340         CALL     SWAPP
      000C3D CC 0C 09         [ 2] 2341         JP     DIGIT
                                   2342 
                                   2343 ;       <#      ( -- )
                                   2344 ;       Initiate  numeric output process.
      000C40 0C 29                 2345         .word      LINK
                           000C42  2346 LINK = . 
      000C42 02                    2347         .byte      2
      000C43 3C 23                 2348         .ascii     "<#"
      000C45                       2349 BDIGS:
      000C45 CD 0B 39         [ 4] 2350         CALL     PAD
      000C48 CD 06 06         [ 4] 2351         CALL     HLD
      000C4B CC 04 1B         [ 2] 2352         JP     STORE
                                   2353 
                                   2354 ;       HOLD    ( c -- )
                                   2355 ;       Insert a character into output string.
      000C4E 0C 42                 2356         .word      LINK
                           000C50  2357 LINK = . 
      000C50 04                    2358         .byte      4
      000C51 48 4F 4C 44           2359         .ascii     "HOLD"
      000C55                       2360 HOLD:
      000C55 CD 06 06         [ 4] 2361         CALL     HLD
      000C58 CD 04 32         [ 4] 2362         CALL     AT
      000C5B CD 09 DB         [ 4] 2363         CALL     ONEM
      000C5E CD 04 D9         [ 4] 2364         CALL     DUPP
      000C61 CD 06 06         [ 4] 2365         CALL     HLD
      000C64 CD 04 1B         [ 4] 2366         CALL     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000C67 CC 04 3F         [ 2] 2367         JP     CSTOR
                                   2368 
                                   2369 ;       #       ( u -- u )
                                   2370 ;       Extract one digit from u and
                                   2371 ;       append digit to output string.
      000C6A 0C 50                 2372         .word      LINK
                           000C6C  2373 LINK = . 
      000C6C 01                    2374         .byte      1
      000C6D 23                    2375         .ascii     "#"
      000C6E                       2376 DIG:
      000C6E CD 05 96         [ 4] 2377         CALL     BASE
      000C71 CD 04 32         [ 4] 2378         CALL     AT
      000C74 CD 0C 31         [ 4] 2379         CALL     EXTRC
      000C77 CC 0C 55         [ 2] 2380         JP     HOLD
                                   2381 
                                   2382 ;       #S      ( u -- 0 )
                                   2383 ;       Convert u until all digits
                                   2384 ;       are added to output string.
      000C7A 0C 6C                 2385         .word      LINK
                           000C7C  2386 LINK = . 
      000C7C 02                    2387         .byte      2
      000C7D 23 53                 2388         .ascii     "#S"
      000C7F                       2389 DIGS:
      000C7F CD 0C 6E         [ 4] 2390 DIGS1:  CALL     DIG
      000C82 CD 04 D9         [ 4] 2391         CALL     DUPP
      000C85 CD 03 E7         [ 4] 2392         CALL     QBRAN
      000C88 0C 8C                 2393         .word      DIGS2
      000C8A 20 F3            [ 2] 2394         JRA     DIGS1
      000C8C 81               [ 4] 2395 DIGS2:  RET
                                   2396 
                                   2397 ;       SIGN    ( n -- )
                                   2398 ;       Add a minus sign to
                                   2399 ;       numeric output string.
      000C8D 0C 7C                 2400         .word      LINK
                           000C8F  2401 LINK = . 
      000C8F 04                    2402         .byte      4
      000C90 53 49 47 4E           2403         .ascii     "SIGN"
      000C94                       2404 SIGN:
      000C94 CD 05 12         [ 4] 2405         CALL     ZLESS
      000C97 CD 03 E7         [ 4] 2406         CALL     QBRAN
      000C9A 0C A4                 2407         .word      SIGN1
      000C9C CD 03 B4         [ 4] 2408         CALL     DOLIT
      000C9F 00 2D                 2409         .word      45	;"-"
      000CA1 CC 0C 55         [ 2] 2410         JP     HOLD
      000CA4 81               [ 4] 2411 SIGN1:  RET
                                   2412 
                                   2413 ;       #>      ( w -- b u )
                                   2414 ;       Prepare output string.
      000CA5 0C 8F                 2415         .word      LINK
                           000CA7  2416 LINK = . 
      000CA7 02                    2417         .byte      2
      000CA8 23 3E                 2418         .ascii     "#>"
      000CAA                       2419 EDIGS:
      000CAA CD 04 CF         [ 4] 2420         CALL     DROP
      000CAD CD 06 06         [ 4] 2421         CALL     HLD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000CB0 CD 04 32         [ 4] 2422         CALL     AT
      000CB3 CD 0B 39         [ 4] 2423         CALL     PAD
      000CB6 CD 05 03         [ 4] 2424         CALL     OVER
      000CB9 CC 07 4D         [ 2] 2425         JP     SUBB
                                   2426 
                                   2427 ;       str     ( w -- b u )
                                   2428 ;       Convert a signed integer
                                   2429 ;       to a numeric string.
      000CBC 0C A7                 2430         .word      LINK
                           000CBE  2431 LINK = . 
      000CBE 03                    2432         .byte      3
      000CBF 53 54 52              2433         .ascii     "STR"
      000CC2                       2434 STR:
      000CC2 CD 04 D9         [ 4] 2435         CALL     DUPP
      000CC5 CD 04 A2         [ 4] 2436         CALL     TOR
      000CC8 CD 07 67         [ 4] 2437         CALL     ABSS
      000CCB CD 0C 45         [ 4] 2438         CALL     BDIGS
      000CCE CD 0C 7F         [ 4] 2439         CALL     DIGS
      000CD1 CD 04 83         [ 4] 2440         CALL     RFROM
      000CD4 CD 0C 94         [ 4] 2441         CALL     SIGN
      000CD7 CC 0C AA         [ 2] 2442         JP     EDIGS
                                   2443 
                                   2444 ;       HEX     ( -- )
                                   2445 ;       Use radix 16 as base for
                                   2446 ;       numeric conversions.
      000CDA 0C BE                 2447         .word      LINK
                           000CDC  2448 LINK = . 
      000CDC 03                    2449         .byte      3
      000CDD 48 45 58              2450         .ascii     "HEX"
      000CE0                       2451 HEX:
      000CE0 CD 03 B4         [ 4] 2452         CALL     DOLIT
      000CE3 00 10                 2453         .word      16
      000CE5 CD 05 96         [ 4] 2454         CALL     BASE
      000CE8 CC 04 1B         [ 2] 2455         JP     STORE
                                   2456 
                                   2457 ;       DECIMAL ( -- )
                                   2458 ;       Use radix 10 as base
                                   2459 ;       for numeric conversions.
      000CEB 0C DC                 2460         .word      LINK
                           000CED  2461 LINK = . 
      000CED 07                    2462         .byte      7
      000CEE 44 45 43 49 4D 41 4C  2463         .ascii     "DECIMAL"
      000CF5                       2464 DECIM:
      000CF5 CD 03 B4         [ 4] 2465         CALL     DOLIT
      000CF8 00 0A                 2466         .word      10
      000CFA CD 05 96         [ 4] 2467         CALL     BASE
      000CFD CC 04 1B         [ 2] 2468         JP     STORE
                                   2469 
                                   2470 ;; Numeric input, single precision
                                   2471 
                                   2472 ;       DIGIT?  ( c base -- u t )
                                   2473 ;       Convert a character to its numeric
                                   2474 ;       value. A flag indicates success.
      000D00 0C ED                 2475         .word      LINK
                           000D02  2476 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D02 06                    2477         .byte       6
      000D03 44 49 47 49 54 3F     2478         .ascii     "DIGIT?"
      000D09                       2479 DIGTQ:
      000D09 CD 04 A2         [ 4] 2480         CALL     TOR
      000D0C CD 03 B4         [ 4] 2481         CALL     DOLIT
      000D0F 00 30                 2482         .word     48	; "0"
      000D11 CD 07 4D         [ 4] 2483         CALL     SUBB
      000D14 CD 03 B4         [ 4] 2484         CALL     DOLIT
      000D17 00 09                 2485         .word      9
      000D19 CD 05 03         [ 4] 2486         CALL     OVER
      000D1C CD 07 B2         [ 4] 2487         CALL     LESS
      000D1F CD 03 E7         [ 4] 2488         CALL     QBRAN
      000D22 0D 3A                 2489         .word      DGTQ1
      000D24 CD 03 B4         [ 4] 2490         CALL     DOLIT
      000D27 00 07                 2491         .word      7
      000D29 CD 07 4D         [ 4] 2492         CALL     SUBB
      000D2C CD 04 D9         [ 4] 2493         CALL     DUPP
      000D2F CD 03 B4         [ 4] 2494         CALL     DOLIT
      000D32 00 0A                 2495         .word      10
      000D34 CD 07 B2         [ 4] 2496         CALL     LESS
      000D37 CD 05 39         [ 4] 2497         CALL     ORR
      000D3A CD 04 D9         [ 4] 2498 DGTQ1:  CALL     DUPP
      000D3D CD 04 83         [ 4] 2499         CALL     RFROM
      000D40 CC 07 94         [ 2] 2500         JP     ULESS
                                   2501 
                                   2502 ;       NUMBER? ( a -- n T | a F )
                                   2503 ;       Convert a number string to
                                   2504 ;       integer. Push a flag on tos.
      000D43 0D 02                 2505         .word      LINK
                           000D45  2506 LINK = . 
      000D45 07                    2507         .byte      7
      000D46 4E 55 4D 42 45 52 3F  2508         .ascii     "NUMBER?"
      000D4D                       2509 NUMBQ:
      000D4D CD 05 96         [ 4] 2510         CALL     BASE
      000D50 CD 04 32         [ 4] 2511         CALL     AT
      000D53 CD 04 A2         [ 4] 2512         CALL     TOR
      000D56 CD 0A 3A         [ 4] 2513         CALL     ZERO
      000D59 CD 05 03         [ 4] 2514         CALL     OVER
      000D5C CD 0B 11         [ 4] 2515         CALL     COUNT
      000D5F CD 05 03         [ 4] 2516         CALL     OVER
      000D62 CD 04 50         [ 4] 2517         CALL     CAT
      000D65 CD 03 B4         [ 4] 2518         CALL     DOLIT
      000D68 00 24                 2519         .word     36	; "0x"
      000D6A CD 07 75         [ 4] 2520         CALL     EQUAL
      000D6D CD 03 E7         [ 4] 2521         CALL     QBRAN
      000D70 0D 81                 2522         .word      NUMQ1
      000D72 CD 0C E0         [ 4] 2523         CALL     HEX
      000D75 CD 04 E9         [ 4] 2524         CALL     SWAPP
      000D78 CD 09 CE         [ 4] 2525         CALL     ONEP
      000D7B CD 04 E9         [ 4] 2526         CALL     SWAPP
      000D7E CD 09 DB         [ 4] 2527         CALL     ONEM
      000D81 CD 05 03         [ 4] 2528 NUMQ1:  CALL     OVER
      000D84 CD 04 50         [ 4] 2529         CALL     CAT
      000D87 CD 03 B4         [ 4] 2530         CALL     DOLIT
      000D8A 00 2D                 2531         .word     45	; "-"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000D8C CD 07 75         [ 4] 2532         CALL     EQUAL
      000D8F CD 04 A2         [ 4] 2533         CALL     TOR
      000D92 CD 04 E9         [ 4] 2534         CALL     SWAPP
      000D95 CD 04 96         [ 4] 2535         CALL     RAT
      000D98 CD 07 4D         [ 4] 2536         CALL     SUBB
      000D9B CD 04 E9         [ 4] 2537         CALL     SWAPP
      000D9E CD 04 96         [ 4] 2538         CALL     RAT
      000DA1 CD 06 D4         [ 4] 2539         CALL     PLUS
      000DA4 CD 06 83         [ 4] 2540         CALL     QDUP
      000DA7 CD 03 E7         [ 4] 2541         CALL     QBRAN
      000DAA 0E 0B                 2542         .word      NUMQ6
      000DAC CD 09 DB         [ 4] 2543         CALL     ONEM
      000DAF CD 04 A2         [ 4] 2544         CALL     TOR
      000DB2 CD 04 D9         [ 4] 2545 NUMQ2:  CALL     DUPP
      000DB5 CD 04 A2         [ 4] 2546         CALL     TOR
      000DB8 CD 04 50         [ 4] 2547         CALL     CAT
      000DBB CD 05 96         [ 4] 2548         CALL     BASE
      000DBE CD 04 32         [ 4] 2549         CALL     AT
      000DC1 CD 0D 09         [ 4] 2550         CALL     DIGTQ
      000DC4 CD 03 E7         [ 4] 2551         CALL     QBRAN
      000DC7 0D F9                 2552         .word      NUMQ4
      000DC9 CD 04 E9         [ 4] 2553         CALL     SWAPP
      000DCC CD 05 96         [ 4] 2554         CALL     BASE
      000DCF CD 04 32         [ 4] 2555         CALL     AT
      000DD2 CD 09 4D         [ 4] 2556         CALL     STAR
      000DD5 CD 06 D4         [ 4] 2557         CALL     PLUS
      000DD8 CD 04 83         [ 4] 2558         CALL     RFROM
      000DDB CD 09 CE         [ 4] 2559         CALL     ONEP
      000DDE CD 03 C8         [ 4] 2560         CALL     DONXT
      000DE1 0D B2                 2561         .word      NUMQ2
      000DE3 CD 04 96         [ 4] 2562         CALL     RAT
      000DE6 CD 04 E9         [ 4] 2563         CALL     SWAPP
      000DE9 CD 04 CF         [ 4] 2564         CALL     DROP
      000DEC CD 03 E7         [ 4] 2565         CALL     QBRAN
      000DEF 0D F4                 2566         .word      NUMQ3
      000DF1 CD 06 FF         [ 4] 2567         CALL     NEGAT
      000DF4 CD 04 E9         [ 4] 2568 NUMQ3:  CALL     SWAPP
      000DF7 20 0F            [ 2] 2569         JRA     NUMQ5
      000DF9 CD 04 83         [ 4] 2570 NUMQ4:  CALL     RFROM
      000DFC CD 04 83         [ 4] 2571         CALL     RFROM
      000DFF CD 06 B4         [ 4] 2572         CALL     DDROP
      000E02 CD 06 B4         [ 4] 2573         CALL     DDROP
      000E05 CD 0A 3A         [ 4] 2574         CALL     ZERO
      000E08 CD 04 D9         [ 4] 2575 NUMQ5:  CALL     DUPP
      000E0B CD 04 83         [ 4] 2576 NUMQ6:  CALL     RFROM
      000E0E CD 06 B4         [ 4] 2577         CALL     DDROP
      000E11 CD 04 83         [ 4] 2578         CALL     RFROM
      000E14 CD 05 96         [ 4] 2579         CALL     BASE
      000E17 CC 04 1B         [ 2] 2580         JP     STORE
                                   2581 
                                   2582 ;; Basic I/O
                                   2583 
                                   2584 ;       KEY     ( -- c )
                                   2585 ;       Wait for and return an
                                   2586 ;       input character.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E1A 0D 45                 2587         .word      LINK
                           000E1C  2588 LINK = . 
      000E1C 03                    2589         .byte      3
      000E1D 4B 45 59              2590         .ascii     "KEY"
      000E20                       2591 KEY:
      000E20 72 0B 52 30 FB   [ 2] 2592         btjf UART1_SR,#UART_SR_RXNE,. 
      000E25 C6 52 31         [ 1] 2593         ld a,UART1_DR 
      000E28 1D 00 02         [ 2] 2594         subw x,#CELLL 
      000E2B E7 01            [ 1] 2595         ld (1,x),a 
      000E2D 7F               [ 1] 2596         clr (x)
      000E2E 81               [ 4] 2597         ret 
                                   2598 
                                   2599 ;       NUF?    ( -- t )
                                   2600 ;       Return false if no input,
                                   2601 ;       else pause and if CR return true.
      000E2F 0E 1C                 2602         .word      LINK
                           000E31  2603 LINK = . 
      000E31 04                    2604         .byte      4
      000E32 4E 55 46 3F           2605         .ascii     "NUF?"
      000E36                       2606 NUFQ:
      000E36 CD 03 80         [ 4] 2607         CALL     QKEY
      000E39 CD 04 D9         [ 4] 2608         CALL     DUPP
      000E3C CD 03 E7         [ 4] 2609         CALL     QBRAN
      000E3F 0E 4F                 2610         .word    NUFQ1
      000E41 CD 06 B4         [ 4] 2611         CALL     DDROP
      000E44 CD 0E 20         [ 4] 2612         CALL     KEY
      000E47 CD 03 B4         [ 4] 2613         CALL     DOLIT
      000E4A 00 0D                 2614         .word      CRR
      000E4C CC 07 75         [ 2] 2615         JP     EQUAL
      000E4F 81               [ 4] 2616 NUFQ1:  RET
                                   2617 
                                   2618 ;       SPACE   ( -- )
                                   2619 ;       Send  blank character to
                                   2620 ;       output device.
      000E50 0E 31                 2621         .word      LINK
                           000E52  2622 LINK = . 
      000E52 05                    2623         .byte      5
      000E53 53 50 41 43 45        2624         .ascii     "SPACE"
      000E58                       2625 SPACE:
      000E58 CD 0A 2D         [ 4] 2626         CALL     BLANK
      000E5B CC 03 9E         [ 2] 2627         JP     EMIT
                                   2628 
                                   2629 ;       SPACES  ( +n -- )
                                   2630 ;       Send n spaces to output device.
      000E5E 0E 52                 2631         .word      LINK
                           000E60  2632 LINK = . 
      000E60 06                    2633         .byte      6
      000E61 53 50 41 43 45 53     2634         .ascii     "SPACES"
      000E67                       2635 SPACS:
      000E67 CD 0A 3A         [ 4] 2636         CALL     ZERO
      000E6A CD 07 D2         [ 4] 2637         CALL     MAX
      000E6D CD 04 A2         [ 4] 2638         CALL     TOR
      000E70 20 03            [ 2] 2639         JRA      CHAR2
      000E72 CD 0E 58         [ 4] 2640 CHAR1:  CALL     SPACE
      000E75 CD 03 C8         [ 4] 2641 CHAR2:  CALL     DONXT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000E78 0E 72                 2642         .word    CHAR1
      000E7A 81               [ 4] 2643         RET
                                   2644 
                                   2645 ;       TYPE    ( b u -- )
                                   2646 ;       Output u characters from b.
      000E7B 0E 60                 2647         .word      LINK
                           000E7D  2648 LINK = . 
      000E7D 04                    2649         .byte      4
      000E7E 54 59 50 45           2650         .ascii     "TYPE"
      000E82                       2651 TYPES:
      000E82 CD 04 A2         [ 4] 2652         CALL     TOR
      000E85 20 0C            [ 2] 2653         JRA     TYPE2
      000E87 CD 04 D9         [ 4] 2654 TYPE1:  CALL     DUPP
      000E8A CD 04 50         [ 4] 2655         CALL     CAT
      000E8D CD 03 9E         [ 4] 2656         CALL     EMIT
      000E90 CD 09 CE         [ 4] 2657         CALL     ONEP
      000E93 CD 03 C8         [ 4] 2658 TYPE2:  CALL     DONXT
      000E96 0E 87                 2659         .word      TYPE1
      000E98 CC 04 CF         [ 2] 2660         JP     DROP
                                   2661 
                                   2662 ;       CR      ( -- )
                                   2663 ;       Output a carriage return
                                   2664 ;       and a line feed.
      000E9B 0E 7D                 2665         .word      LINK
                           000E9D  2666 LINK = . 
      000E9D 02                    2667         .byte      2
      000E9E 43 52                 2668         .ascii     "CR"
      000EA0                       2669 CR:
      000EA0 CD 03 B4         [ 4] 2670         CALL     DOLIT
      000EA3 00 0D                 2671         .word      CRR
      000EA5 CD 03 9E         [ 4] 2672         CALL     EMIT
      000EA8 CD 03 B4         [ 4] 2673         CALL     DOLIT
      000EAB 00 0A                 2674         .word      LF
      000EAD CC 03 9E         [ 2] 2675         JP     EMIT
                                   2676 
                                   2677 ;       do$     ( -- a )
                                   2678 ;       Return  address of a compiled
                                   2679 ;       string.
      000EB0 0E 9D                 2680         .word      LINK
                           000EB2  2681 LINK = . 
      000EB2 43                    2682 	.byte      COMPO+3
      000EB3 44 4F 24              2683         .ascii     "DO$"
      000EB6                       2684 DOSTR:
      000EB6 CD 04 83         [ 4] 2685         CALL     RFROM
      000EB9 CD 04 96         [ 4] 2686         CALL     RAT
      000EBC CD 04 83         [ 4] 2687         CALL     RFROM
      000EBF CD 0B 11         [ 4] 2688         CALL     COUNT
      000EC2 CD 06 D4         [ 4] 2689         CALL     PLUS
      000EC5 CD 04 A2         [ 4] 2690         CALL     TOR
      000EC8 CD 04 E9         [ 4] 2691         CALL     SWAPP
      000ECB CD 04 A2         [ 4] 2692         CALL     TOR
      000ECE 81               [ 4] 2693         RET
                                   2694 
                                   2695 ;       $"|     ( -- a )
                                   2696 ;       Run time routine compiled by $".
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2697 ;       Return address of a compiled string.
      000ECF 0E B2                 2698         .word      LINK
                           000ED1  2699 LINK = . 
      000ED1 43                    2700 	.byte      COMPO+3
      000ED2 24 22 7C              2701         .byte     '$','"','|'
      000ED5                       2702 STRQP:
      000ED5 CD 0E B6         [ 4] 2703         CALL     DOSTR
      000ED8 81               [ 4] 2704         RET
                                   2705 
                                   2706 ;       ."|     ( -- )
                                   2707 ;       Run time routine of ." .
                                   2708 ;       Output a compiled string.
      000ED9 0E D1                 2709         .word      LINK
                           000EDB  2710 LINK = . 
      000EDB 43                    2711 	.byte      COMPO+3
      000EDC 2E 22 7C              2712         .byte     '.','"','|'
      000EDF                       2713 DOTQP:
      000EDF CD 0E B6         [ 4] 2714         CALL     DOSTR
      000EE2 CD 0B 11         [ 4] 2715         CALL     COUNT
      000EE5 CC 0E 82         [ 2] 2716         JP     TYPES
                                   2717 
                                   2718 ;       .R      ( n +n -- )
                                   2719 ;       Display an integer in a field
                                   2720 ;       of n columns, right justified.
      000EE8 0E DB                 2721         .word      LINK
                           000EEA  2722 LINK = . 
      000EEA 02                    2723         .byte      2
      000EEB 2E 52                 2724         .ascii     ".R"
      000EED                       2725 DOTR:
      000EED CD 04 A2         [ 4] 2726         CALL     TOR
      000EF0 CD 0C C2         [ 4] 2727         CALL     STR
      000EF3 CD 04 83         [ 4] 2728         CALL     RFROM
      000EF6 CD 05 03         [ 4] 2729         CALL     OVER
      000EF9 CD 07 4D         [ 4] 2730         CALL     SUBB
      000EFC CD 0E 67         [ 4] 2731         CALL     SPACS
      000EFF CC 0E 82         [ 2] 2732         JP     TYPES
                                   2733 
                                   2734 ;       U.R     ( u +n -- )
                                   2735 ;       Display an unsigned integer
                                   2736 ;       in n column, right justified.
      000F02 0E EA                 2737         .word      LINK
                           000F04  2738 LINK = . 
      000F04 03                    2739         .byte      3
      000F05 55 2E 52              2740         .ascii     "U.R"
      000F08                       2741 UDOTR:
      000F08 CD 04 A2         [ 4] 2742         CALL     TOR
      000F0B CD 0C 45         [ 4] 2743         CALL     BDIGS
      000F0E CD 0C 7F         [ 4] 2744         CALL     DIGS
      000F11 CD 0C AA         [ 4] 2745         CALL     EDIGS
      000F14 CD 04 83         [ 4] 2746         CALL     RFROM
      000F17 CD 05 03         [ 4] 2747         CALL     OVER
      000F1A CD 07 4D         [ 4] 2748         CALL     SUBB
      000F1D CD 0E 67         [ 4] 2749         CALL     SPACS
      000F20 CC 0E 82         [ 2] 2750         JP     TYPES
                                   2751 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



                                   2752 ;       U.      ( u -- )
                                   2753 ;       Display an unsigned integer
                                   2754 ;       in free format.
      000F23 0F 04                 2755         .word      LINK
                           000F25  2756 LINK = . 
      000F25 02                    2757         .byte      2
      000F26 55 2E                 2758         .ascii     "U."
      000F28                       2759 UDOT:
      000F28 CD 0C 45         [ 4] 2760         CALL     BDIGS
      000F2B CD 0C 7F         [ 4] 2761         CALL     DIGS
      000F2E CD 0C AA         [ 4] 2762         CALL     EDIGS
      000F31 CD 0E 58         [ 4] 2763         CALL     SPACE
      000F34 CC 0E 82         [ 2] 2764         JP     TYPES
                                   2765 
                                   2766 ;       .       ( w -- )
                                   2767 ;       Display an integer in free
                                   2768 ;       format, preceeded by a space.
      000F37 0F 25                 2769         .word      LINK
                           000F39  2770 LINK = . 
      000F39 01                    2771         .byte      1
      000F3A 2E                    2772         .ascii     "."
      000F3B                       2773 DOT:
      000F3B CD 05 96         [ 4] 2774         CALL     BASE
      000F3E CD 04 32         [ 4] 2775         CALL     AT
      000F41 CD 03 B4         [ 4] 2776         CALL     DOLIT
      000F44 00 0A                 2777         .word      10
      000F46 CD 05 4E         [ 4] 2778         CALL     XORR    ;?decimal
      000F49 CD 03 E7         [ 4] 2779         CALL     QBRAN
      000F4C 0F 51                 2780         .word      DOT1
      000F4E CC 0F 28         [ 2] 2781         JP     UDOT
      000F51 CD 0C C2         [ 4] 2782 DOT1:   CALL     STR
      000F54 CD 0E 58         [ 4] 2783         CALL     SPACE
      000F57 CC 0E 82         [ 2] 2784         JP     TYPES
                                   2785 
                                   2786 ;       ?       ( a -- )
                                   2787 ;       Display contents in memory cell.
      000F5A 0F 39                 2788         .word      LINK
                                   2789         
                           000F5C  2790 LINK = . 
      000F5C 01                    2791         .byte      1
      000F5D 3F                    2792         .ascii     "?"
      000F5E                       2793 QUEST:
      000F5E CD 04 32         [ 4] 2794         CALL     AT
      000F61 CC 0F 3B         [ 2] 2795         JP     DOT
                                   2796 
                                   2797 ;; Parsing
                                   2798 
                                   2799 ;       parse   ( b u c -- b u delta ; <string> )
                                   2800 ;       Scan string delimited by c.
                                   2801 ;       Return found string and its offset.
      000F64 0F 5C                 2802         .word      LINK
                           000F66  2803 LINK = . 
      000F66 05                    2804         .byte      5
      000F67 70 61 72 73 65        2805         .ascii     "parse"
      000F6C                       2806 PARS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F6C CD 05 A5         [ 4] 2807         CALL     TEMP
      000F6F CD 04 1B         [ 4] 2808         CALL     STORE
      000F72 CD 05 03         [ 4] 2809         CALL     OVER
      000F75 CD 04 A2         [ 4] 2810         CALL     TOR
      000F78 CD 04 D9         [ 4] 2811         CALL     DUPP
      000F7B CD 03 E7         [ 4] 2812         CALL     QBRAN
      000F7E 10 24                 2813         .word    PARS8
      000F80 CD 09 DB         [ 4] 2814         CALL     ONEM
      000F83 CD 05 A5         [ 4] 2815         CALL     TEMP
      000F86 CD 04 32         [ 4] 2816         CALL     AT
      000F89 CD 0A 2D         [ 4] 2817         CALL     BLANK
      000F8C CD 07 75         [ 4] 2818         CALL     EQUAL
      000F8F CD 03 E7         [ 4] 2819         CALL     QBRAN
      000F92 0F C5                 2820         .word      PARS3
      000F94 CD 04 A2         [ 4] 2821         CALL     TOR
      000F97 CD 0A 2D         [ 4] 2822 PARS1:  CALL     BLANK
      000F9A CD 05 03         [ 4] 2823         CALL     OVER
      000F9D CD 04 50         [ 4] 2824         CALL     CAT     ;skip leading blanks ONLY
      000FA0 CD 07 4D         [ 4] 2825         CALL     SUBB
      000FA3 CD 05 12         [ 4] 2826         CALL     ZLESS
      000FA6 CD 06 EE         [ 4] 2827         CALL     INVER
      000FA9 CD 03 E7         [ 4] 2828         CALL     QBRAN
      000FAC 0F C2                 2829         .word      PARS2
      000FAE CD 09 CE         [ 4] 2830         CALL     ONEP
      000FB1 CD 03 C8         [ 4] 2831         CALL     DONXT
      000FB4 0F 97                 2832         .word      PARS1
      000FB6 CD 04 83         [ 4] 2833         CALL     RFROM
      000FB9 CD 04 CF         [ 4] 2834         CALL     DROP
      000FBC CD 0A 3A         [ 4] 2835         CALL     ZERO
      000FBF CC 04 D9         [ 2] 2836         JP     DUPP
      000FC2 CD 04 83         [ 4] 2837 PARS2:  CALL     RFROM
      000FC5 CD 05 03         [ 4] 2838 PARS3:  CALL     OVER
      000FC8 CD 04 E9         [ 4] 2839         CALL     SWAPP
      000FCB CD 04 A2         [ 4] 2840         CALL     TOR
      000FCE CD 05 A5         [ 4] 2841 PARS4:  CALL     TEMP
      000FD1 CD 04 32         [ 4] 2842         CALL     AT
      000FD4 CD 05 03         [ 4] 2843         CALL     OVER
      000FD7 CD 04 50         [ 4] 2844         CALL     CAT
      000FDA CD 07 4D         [ 4] 2845         CALL     SUBB    ;scan for delimiter
      000FDD CD 05 A5         [ 4] 2846         CALL     TEMP
      000FE0 CD 04 32         [ 4] 2847         CALL     AT
      000FE3 CD 0A 2D         [ 4] 2848         CALL     BLANK
      000FE6 CD 07 75         [ 4] 2849         CALL     EQUAL
      000FE9 CD 03 E7         [ 4] 2850         CALL     QBRAN
      000FEC 0F F1                 2851         .word      PARS5
      000FEE CD 05 12         [ 4] 2852         CALL     ZLESS
      000FF1 CD 03 E7         [ 4] 2853 PARS5:  CALL     QBRAN
      000FF4 10 06                 2854         .word      PARS6
      000FF6 CD 09 CE         [ 4] 2855         CALL     ONEP
      000FF9 CD 03 C8         [ 4] 2856         CALL     DONXT
      000FFC 0F CE                 2857         .word      PARS4
      000FFE CD 04 D9         [ 4] 2858         CALL     DUPP
      001001 CD 04 A2         [ 4] 2859         CALL     TOR
      001004 20 0F            [ 2] 2860         JRA     PARS7
      001006 CD 04 83         [ 4] 2861 PARS6:  CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001009 CD 04 CF         [ 4] 2862         CALL     DROP
      00100C CD 04 D9         [ 4] 2863         CALL     DUPP
      00100F CD 09 CE         [ 4] 2864         CALL     ONEP
      001012 CD 04 A2         [ 4] 2865         CALL     TOR
      001015 CD 05 03         [ 4] 2866 PARS7:  CALL     OVER
      001018 CD 07 4D         [ 4] 2867         CALL     SUBB
      00101B CD 04 83         [ 4] 2868         CALL     RFROM
      00101E CD 04 83         [ 4] 2869         CALL     RFROM
      001021 CC 07 4D         [ 2] 2870         JP     SUBB
      001024 CD 05 03         [ 4] 2871 PARS8:  CALL     OVER
      001027 CD 04 83         [ 4] 2872         CALL     RFROM
      00102A CC 07 4D         [ 2] 2873         JP     SUBB
                                   2874 
                                   2875 ;       PARSE   ( c -- b u ; <string> )
                                   2876 ;       Scan input stream and return
                                   2877 ;       counted string delimited by c.
      00102D 0F 66                 2878         .word      LINK
                           00102F  2879 LINK = . 
      00102F 05                    2880         .byte      5
      001030 50 41 52 53 45        2881         .ascii     "PARSE"
      001035                       2882 PARSE:
      001035 CD 04 A2         [ 4] 2883         CALL     TOR
      001038 CD 0B 4A         [ 4] 2884         CALL     TIB
      00103B CD 05 B4         [ 4] 2885         CALL     INN
      00103E CD 04 32         [ 4] 2886         CALL     AT
      001041 CD 06 D4         [ 4] 2887         CALL     PLUS    ;current input buffer pointer
      001044 CD 05 C4         [ 4] 2888         CALL     NTIB
      001047 CD 04 32         [ 4] 2889         CALL     AT
      00104A CD 05 B4         [ 4] 2890         CALL     INN
      00104D CD 04 32         [ 4] 2891         CALL     AT
      001050 CD 07 4D         [ 4] 2892         CALL     SUBB    ;remaining count
      001053 CD 04 83         [ 4] 2893         CALL     RFROM
      001056 CD 0F 6C         [ 4] 2894         CALL     PARS
      001059 CD 05 B4         [ 4] 2895         CALL     INN
      00105C CC 0A AA         [ 2] 2896         JP     PSTOR
                                   2897 
                                   2898 ;       .(      ( -- )
                                   2899 ;       Output following string up to next ) .
      00105F 10 2F                 2900         .word      LINK
                           001061  2901 LINK = . 
      001061 82                    2902 	.byte      IMEDD+2
      001062 2E 28                 2903         .ascii     ".("
      001064                       2904 DOTPR:
      001064 CD 03 B4         [ 4] 2905         CALL     DOLIT
      001067 00 29                 2906         .word     41	; ")"
      001069 CD 10 35         [ 4] 2907         CALL     PARSE
      00106C CC 0E 82         [ 2] 2908         JP     TYPES
                                   2909 
                                   2910 ;       (       ( -- )
                                   2911 ;       Ignore following string up to next ).
                                   2912 ;       A comment.
      00106F 10 61                 2913         .word      LINK
                           001071  2914 LINK = . 
      001071 81                    2915 	.byte      IMEDD+1
      001072 28                    2916         .ascii     "("
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      001073                       2917 PAREN:
      001073 CD 03 B4         [ 4] 2918         CALL     DOLIT
      001076 00 29                 2919         .word     41	; ")"
      001078 CD 10 35         [ 4] 2920         CALL     PARSE
      00107B CC 06 B4         [ 2] 2921         JP     DDROP
                                   2922 
                                   2923 ;       \       ( -- )
                                   2924 ;       Ignore following text till
                                   2925 ;       end of line.
      00107E 10 71                 2926         .word      LINK
                           001080  2927 LINK = . 
      001080 81                    2928 	.byte      IMEDD+1
      001081 5C                    2929         .ascii     "\"
      001082                       2930 BKSLA:
      001082 90 AE 00 0C      [ 2] 2931         ldw y,#UCTIB ; #TIB  
      001086 90 FE            [ 2] 2932         ldw y,(y)
      001088 90 89            [ 2] 2933         pushw y ; count in TIB 
      00108A 90 AE 00 0A      [ 2] 2934         ldw y,#UINN ; >IN 
      00108E 90 BF 24         [ 2] 2935         ldw YTEMP,y
      001091 90 85            [ 2] 2936         popw y 
      001093 91 CF 24         [ 5] 2937         ldw [YTEMP],y
      001096 81               [ 4] 2938         ret 
                                   2939 
                                   2940 ;       WORD    ( c -- a ; <string> )
                                   2941 ;       Parse a word from input stream
                                   2942 ;       and copy it to code dictionary.
      001097 10 80                 2943         .word      LINK
                           001099  2944 LINK = . 
      001099 04                    2945         .byte      4
      00109A 57 4F 52 44           2946         .ascii     "WORD"
      00109E                       2947 WORDD:
      00109E CD 10 35         [ 4] 2948         CALL     PARSE
      0010A1 CD 0B 28         [ 4] 2949         CALL     HERE
      0010A4 CD 09 A3         [ 4] 2950         CALL     CELLP
      0010A7 CC 0B E8         [ 2] 2951         JP     PACKS
                                   2952 
                                   2953 ;       TOKEN   ( -- a ; <string> )
                                   2954 ;       Parse a word from input stream
                                   2955 ;       and copy it to name dictionary.
      0010AA 10 99                 2956         .word      LINK
                           0010AC  2957 LINK = . 
      0010AC 05                    2958         .byte      5
      0010AD 54 4F 4B 45 4E        2959         .ascii     "TOKEN"
      0010B2                       2960 TOKEN:
      0010B2 CD 0A 2D         [ 4] 2961         CALL     BLANK
      0010B5 CC 10 9E         [ 2] 2962         JP     WORDD
                                   2963 
                                   2964 ;; Dictionary search
                                   2965 
                                   2966 ;       NAME>   ( na -- ca )
                                   2967 ;       Return a code address given
                                   2968 ;       a name address.
      0010B8 10 AC                 2969         .word      LINK
                           0010BA  2970 LINK = . 
      0010BA 05                    2971         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010BB 4E 41 4D 45 3E        2972         .ascii     "NAME>"
      0010C0                       2973 NAMET:
      0010C0 CD 0B 11         [ 4] 2974         CALL     COUNT
      0010C3 CD 03 B4         [ 4] 2975         CALL     DOLIT
      0010C6 00 1F                 2976         .word      31
      0010C8 CD 05 25         [ 4] 2977         CALL     ANDD
      0010CB CC 06 D4         [ 2] 2978         JP     PLUS
                                   2979 
                                   2980 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2981 ;       Compare u cells in two
                                   2982 ;       strings. Return 0 if identical.
      0010CE 10 BA                 2983         .word      LINK
                           0010D0  2984 LINK = . 
      0010D0 05                    2985         .byte       5
      0010D1 53 41 4D 45 3F        2986         .ascii     "SAME?"
      0010D6                       2987 SAMEQ:
      0010D6 CD 09 DB         [ 4] 2988         CALL     ONEM
      0010D9 CD 04 A2         [ 4] 2989         CALL     TOR
      0010DC 20 29            [ 2] 2990         JRA     SAME2
      0010DE CD 05 03         [ 4] 2991 SAME1:  CALL     OVER
      0010E1 CD 04 96         [ 4] 2992         CALL     RAT
      0010E4 CD 06 D4         [ 4] 2993         CALL     PLUS
      0010E7 CD 04 50         [ 4] 2994         CALL     CAT
      0010EA CD 05 03         [ 4] 2995         CALL     OVER
      0010ED CD 04 96         [ 4] 2996         CALL     RAT
      0010F0 CD 06 D4         [ 4] 2997         CALL     PLUS
      0010F3 CD 04 50         [ 4] 2998         CALL     CAT
      0010F6 CD 07 4D         [ 4] 2999         CALL     SUBB
      0010F9 CD 06 83         [ 4] 3000         CALL     QDUP
      0010FC CD 03 E7         [ 4] 3001         CALL     QBRAN
      0010FF 11 07                 3002         .word      SAME2
      001101 CD 04 83         [ 4] 3003         CALL     RFROM
      001104 CC 04 CF         [ 2] 3004         JP     DROP
      001107 CD 03 C8         [ 4] 3005 SAME2:  CALL     DONXT
      00110A 10 DE                 3006         .word      SAME1
      00110C CC 0A 3A         [ 2] 3007         JP     ZERO
                                   3008 
                                   3009 ;       find    ( a va -- ca na | a F )
                                   3010 ;       Search vocabulary for string.
                                   3011 ;       Return ca and na if succeeded.
      00110F 10 D0                 3012         .word      LINK
                           001111  3013 LINK = . 
      001111 04                    3014         .byte      4
      001112 46 49 4E 44           3015         .ascii     "FIND"
      001116                       3016 FIND:
      001116 CD 04 E9         [ 4] 3017         CALL     SWAPP
      001119 CD 04 D9         [ 4] 3018         CALL     DUPP
      00111C CD 04 50         [ 4] 3019         CALL     CAT
      00111F CD 05 A5         [ 4] 3020         CALL     TEMP
      001122 CD 04 1B         [ 4] 3021         CALL     STORE
      001125 CD 04 D9         [ 4] 3022         CALL     DUPP
      001128 CD 04 32         [ 4] 3023         CALL     AT
      00112B CD 04 A2         [ 4] 3024         CALL     TOR
      00112E CD 09 A3         [ 4] 3025         CALL     CELLP
      001131 CD 04 E9         [ 4] 3026         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001134 CD 04 32         [ 4] 3027 FIND1:  CALL     AT
      001137 CD 04 D9         [ 4] 3028         CALL     DUPP
      00113A CD 03 E7         [ 4] 3029         CALL     QBRAN
      00113D 11 73                 3030         .word      FIND6
      00113F CD 04 D9         [ 4] 3031         CALL     DUPP
      001142 CD 04 32         [ 4] 3032         CALL     AT
      001145 CD 03 B4         [ 4] 3033         CALL     DOLIT
      001148 1F 7F                 3034         .word      MASKK
      00114A CD 05 25         [ 4] 3035         CALL     ANDD
      00114D CD 04 96         [ 4] 3036         CALL     RAT
      001150 CD 05 4E         [ 4] 3037         CALL     XORR
      001153 CD 03 E7         [ 4] 3038         CALL     QBRAN
      001156 11 62                 3039         .word      FIND2
      001158 CD 09 A3         [ 4] 3040         CALL     CELLP
      00115B CD 03 B4         [ 4] 3041         CALL     DOLIT
      00115E FF FF                 3042         .word     0xFFFF
      001160 20 0C            [ 2] 3043         JRA     FIND3
      001162 CD 09 A3         [ 4] 3044 FIND2:  CALL     CELLP
      001165 CD 05 A5         [ 4] 3045         CALL     TEMP
      001168 CD 04 32         [ 4] 3046         CALL     AT
      00116B CD 10 D6         [ 4] 3047         CALL     SAMEQ
      00116E CD 03 FE         [ 4] 3048 FIND3:  CALL     BRAN
      001171 11 82                 3049         .word      FIND4
      001173 CD 04 83         [ 4] 3050 FIND6:  CALL     RFROM
      001176 CD 04 CF         [ 4] 3051         CALL     DROP
      001179 CD 04 E9         [ 4] 3052         CALL     SWAPP
      00117C CD 09 B2         [ 4] 3053         CALL     CELLM
      00117F CC 04 E9         [ 2] 3054         JP     SWAPP
      001182 CD 03 E7         [ 4] 3055 FIND4:  CALL     QBRAN
      001185 11 8F                 3056         .word      FIND5
      001187 CD 09 B2         [ 4] 3057         CALL     CELLM
      00118A CD 09 B2         [ 4] 3058         CALL     CELLM
      00118D 20 A5            [ 2] 3059         JRA     FIND1
      00118F CD 04 83         [ 4] 3060 FIND5:  CALL     RFROM
      001192 CD 04 CF         [ 4] 3061         CALL     DROP
      001195 CD 04 E9         [ 4] 3062         CALL     SWAPP
      001198 CD 04 CF         [ 4] 3063         CALL     DROP
      00119B CD 09 B2         [ 4] 3064         CALL     CELLM
      00119E CD 04 D9         [ 4] 3065         CALL     DUPP
      0011A1 CD 10 C0         [ 4] 3066         CALL     NAMET
      0011A4 CC 04 E9         [ 2] 3067         JP     SWAPP
                                   3068 
                                   3069 ;       NAME?   ( a -- ca na | a F )
                                   3070 ;       Search vocabularies for a string.
      0011A7 11 11                 3071         .word      LINK
                           0011A9  3072 LINK = . 
      0011A9 05                    3073         .byte      5
      0011AA 4E 41 4D 45 3F        3074         .ascii     "NAME?"
      0011AF                       3075 NAMEQ:
      0011AF CD 06 19         [ 4] 3076         CALL   CNTXT
      0011B2 CC 11 16         [ 2] 3077         JP     FIND
                                   3078 
                                   3079 ;; Terminal response
                                   3080 
                                   3081 ;       ^H      ( bot eot cur -- bot eot cur )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3082 ;       Backup cursor by one character.
      0011B5 11 A9                 3083         .word      LINK
                           0011B7  3084 LINK = . 
      0011B7 02                    3085         .byte      2
      0011B8 5E 48                 3086         .ascii     "^H"
      0011BA                       3087 BKSP:
      0011BA CD 04 A2         [ 4] 3088         CALL     TOR
      0011BD CD 05 03         [ 4] 3089         CALL     OVER
      0011C0 CD 04 83         [ 4] 3090         CALL     RFROM
      0011C3 CD 04 E9         [ 4] 3091         CALL     SWAPP
      0011C6 CD 05 03         [ 4] 3092         CALL     OVER
      0011C9 CD 05 4E         [ 4] 3093         CALL     XORR
      0011CC CD 03 E7         [ 4] 3094         CALL     QBRAN
      0011CF 11 EA                 3095         .word      BACK1
      0011D1 CD 03 B4         [ 4] 3096         CALL     DOLIT
      0011D4 00 08                 3097         .word      BKSPP
      0011D6 CD 03 9E         [ 4] 3098         CALL     EMIT
      0011D9 CD 09 DB         [ 4] 3099         CALL     ONEM
      0011DC CD 0A 2D         [ 4] 3100         CALL     BLANK
      0011DF CD 03 9E         [ 4] 3101         CALL     EMIT
      0011E2 CD 03 B4         [ 4] 3102         CALL     DOLIT
      0011E5 00 08                 3103         .word      BKSPP
      0011E7 CC 03 9E         [ 2] 3104         JP     EMIT
      0011EA 81               [ 4] 3105 BACK1:  RET
                                   3106 
                                   3107 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3108 ;       Accept and echo key stroke
                                   3109 ;       and bump cursor.
      0011EB 11 B7                 3110         .word      LINK
                           0011ED  3111 LINK = . 
      0011ED 03                    3112         .byte      3
      0011EE 54 41 50              3113         .ascii     "TAP"
      0011F1                       3114 TAP:
      0011F1 CD 04 D9         [ 4] 3115         CALL     DUPP
      0011F4 CD 03 9E         [ 4] 3116         CALL     EMIT
      0011F7 CD 05 03         [ 4] 3117         CALL     OVER
      0011FA CD 04 3F         [ 4] 3118         CALL     CSTOR
      0011FD CC 09 CE         [ 2] 3119         JP     ONEP
                                   3120 
                                   3121 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3122 ;       Process a key stroke,
                                   3123 ;       CR or backspace.
      001200 11 ED                 3124         .word      LINK
                           001202  3125 LINK = . 
      001202 04                    3126         .byte      4
      001203 4B 54 41 50           3127         .ascii     "KTAP"
      001207                       3128 KTAP:
      001207 CD 04 D9         [ 4] 3129         CALL     DUPP
      00120A CD 03 B4         [ 4] 3130         CALL     DOLIT
      00120D 00 0D                 3131         .word      CRR
      00120F CD 05 4E         [ 4] 3132         CALL     XORR
      001212 CD 03 E7         [ 4] 3133         CALL     QBRAN
      001215 12 2D                 3134         .word      KTAP2
      001217 CD 03 B4         [ 4] 3135         CALL     DOLIT
      00121A 00 08                 3136         .word      BKSPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00121C CD 05 4E         [ 4] 3137         CALL     XORR
      00121F CD 03 E7         [ 4] 3138         CALL     QBRAN
      001222 12 2A                 3139         .word      KTAP1
      001224 CD 0A 2D         [ 4] 3140         CALL     BLANK
      001227 CC 11 F1         [ 2] 3141         JP     TAP
      00122A CC 11 BA         [ 2] 3142 KTAP1:  JP     BKSP
      00122D CD 04 CF         [ 4] 3143 KTAP2:  CALL     DROP
      001230 CD 04 E9         [ 4] 3144         CALL     SWAPP
      001233 CD 04 CF         [ 4] 3145         CALL     DROP
      001236 CC 04 D9         [ 2] 3146         JP     DUPP
                                   3147 
                                   3148 ;       accept  ( b u -- b u )
                                   3149 ;       Accept characters to input
                                   3150 ;       buffer. Return with actual count.
      001239 12 02                 3151         .word      LINK
                           00123B  3152 LINK = . 
      00123B 06                    3153         .byte      6
      00123C 41 43 43 45 50 54     3154         .ascii     "ACCEPT"
      001242                       3155 ACCEP:
      001242 CD 05 03         [ 4] 3156         CALL     OVER
      001245 CD 06 D4         [ 4] 3157         CALL     PLUS
      001248 CD 05 03         [ 4] 3158         CALL     OVER
      00124B CD 06 BF         [ 4] 3159 ACCP1:  CALL     DDUP
      00124E CD 05 4E         [ 4] 3160         CALL     XORR
      001251 CD 03 E7         [ 4] 3161         CALL     QBRAN
      001254 12 76                 3162         .word      ACCP4
      001256 CD 0E 20         [ 4] 3163         CALL     KEY
      001259 CD 04 D9         [ 4] 3164         CALL     DUPP
      00125C CD 0A 2D         [ 4] 3165         CALL     BLANK
      00125F CD 03 B4         [ 4] 3166         CALL     DOLIT
      001262 00 7F                 3167         .word      127
      001264 CD 08 0F         [ 4] 3168         CALL     WITHI
      001267 CD 03 E7         [ 4] 3169         CALL     QBRAN
      00126A 12 71                 3170         .word      ACCP2
      00126C CD 11 F1         [ 4] 3171         CALL     TAP
      00126F 20 03            [ 2] 3172         JRA     ACCP3
      001271 CD 12 07         [ 4] 3173 ACCP2:  CALL     KTAP
      001274 20 D5            [ 2] 3174 ACCP3:  JRA     ACCP1
      001276 CD 04 CF         [ 4] 3175 ACCP4:  CALL     DROP
      001279 CD 05 03         [ 4] 3176         CALL     OVER
      00127C CC 07 4D         [ 2] 3177         JP     SUBB
                                   3178 
                                   3179 ;       QUERY   ( -- )
                                   3180 ;       Accept input stream to
                                   3181 ;       terminal input buffer.
      00127F 12 3B                 3182         .word      LINK
                                   3183         
                           001281  3184 LINK = . 
      001281 05                    3185         .byte      5
      001282 51 55 45 52 59        3186         .ascii     "QUERY"
      001287                       3187 QUERY:
      001287 CD 0B 4A         [ 4] 3188         CALL     TIB
      00128A CD 03 B4         [ 4] 3189         CALL     DOLIT
      00128D 00 50                 3190         .word      80
      00128F CD 12 42         [ 4] 3191         CALL     ACCEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001292 CD 05 C4         [ 4] 3192         CALL     NTIB
      001295 CD 04 1B         [ 4] 3193         CALL     STORE
      001298 CD 04 CF         [ 4] 3194         CALL     DROP
      00129B CD 0A 3A         [ 4] 3195         CALL     ZERO
      00129E CD 05 B4         [ 4] 3196         CALL     INN
      0012A1 CC 04 1B         [ 2] 3197         JP     STORE
                                   3198 
                                   3199 ;       ABORT   ( -- )
                                   3200 ;       Reset data stack and
                                   3201 ;       jump to QUIT.
      0012A4 12 81                 3202         .word      LINK
                           0012A6  3203 LINK = . 
      0012A6 05                    3204         .byte      5
      0012A7 41 42 4F 52 54        3205         .ascii     "ABORT"
      0012AC                       3206 ABORT:
      0012AC CD 13 A3         [ 4] 3207         CALL     PRESE
      0012AF CC 13 C0         [ 2] 3208         JP     QUIT
                                   3209 
                                   3210 ;       abort"  ( f -- )
                                   3211 ;       Run time routine of ABORT".
                                   3212 ;       Abort with a message.
      0012B2 12 A6                 3213         .word      LINK
                           0012B4  3214 LINK = . 
      0012B4 46                    3215 	.byte      COMPO+6
      0012B5 41 42 4F 52 54        3216         .ascii     "ABORT"
      0012BA 22                    3217         .byte      '"'
      0012BB                       3218 ABORQ:
      0012BB CD 03 E7         [ 4] 3219         CALL     QBRAN
      0012BE 12 DA                 3220         .word      ABOR2   ;text flag
      0012C0 CD 0E B6         [ 4] 3221         CALL     DOSTR
      0012C3 CD 0E 58         [ 4] 3222 ABOR1:  CALL     SPACE
      0012C6 CD 0B 11         [ 4] 3223         CALL     COUNT
      0012C9 CD 0E 82         [ 4] 3224         CALL     TYPES
      0012CC CD 03 B4         [ 4] 3225         CALL     DOLIT
      0012CF 00 3F                 3226         .word     63 ; "?"
      0012D1 CD 03 9E         [ 4] 3227         CALL     EMIT
      0012D4 CD 0E A0         [ 4] 3228         CALL     CR
      0012D7 CC 12 AC         [ 2] 3229         JP     ABORT   ;pass error string
      0012DA CD 0E B6         [ 4] 3230 ABOR2:  CALL     DOSTR
      0012DD CC 04 CF         [ 2] 3231         JP     DROP
                                   3232 
                                   3233 ;; The text interpreter
                                   3234 
                                   3235 ;       $INTERPRET      ( a -- )
                                   3236 ;       Interpret a word. If failed,
                                   3237 ;       try to convert it to an integer.
      0012E0 12 B4                 3238         .word      LINK
                           0012E2  3239 LINK = . 
      0012E2 0A                    3240         .byte      10
      0012E3 24 49 4E 54 45 52 50  3241         .ascii     "$INTERPRET"
             52 45 54
      0012ED                       3242 INTER:
      0012ED CD 11 AF         [ 4] 3243         CALL     NAMEQ
      0012F0 CD 06 83         [ 4] 3244         CALL     QDUP    ;?defined
      0012F3 CD 03 E7         [ 4] 3245         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0012F6 13 17                 3246         .word      INTE1
      0012F8 CD 04 32         [ 4] 3247         CALL     AT
      0012FB CD 03 B4         [ 4] 3248         CALL     DOLIT
      0012FE 40 00                 3249 	.word       0x4000	; COMPO*256
      001300 CD 05 25         [ 4] 3250         CALL     ANDD    ;?compile only lexicon bits
      001303 CD 12 BB         [ 4] 3251         CALL     ABORQ
      001306 0D                    3252         .byte      13
      001307 20 63 6F 6D 70 69 6C  3253         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001314 CC 04 0E         [ 2] 3254         JP     EXECU
      001317 CD 0D 4D         [ 4] 3255 INTE1:  CALL     NUMBQ   ;convert a number
      00131A CD 03 E7         [ 4] 3256         CALL     QBRAN
      00131D 12 C3                 3257         .word    ABOR1
      00131F 81               [ 4] 3258         RET
                                   3259 
                                   3260 ;       [       ( -- )
                                   3261 ;       Start  text interpreter.
      001320 12 E2                 3262         .word      LINK
                           001322  3263 LINK = . 
      001322 81                    3264 	.byte      IMEDD+1
      001323 5B                    3265         .ascii     "["
      001324                       3266 LBRAC:
      001324 CD 03 B4         [ 4] 3267         CALL   DOLIT
      001327 12 ED                 3268         .word  INTER
      001329 CD 05 F7         [ 4] 3269         CALL   TEVAL
      00132C CC 04 1B         [ 2] 3270         JP     STORE
                                   3271 
                                   3272 ;       .OK     ( -- )
                                   3273 ;       Display 'ok' while interpreting.
      00132F 13 22                 3274         .word      LINK
                           001331  3275 LINK = . 
      001331 03                    3276         .byte      3
      001332 2E 4F 4B              3277         .ascii     ".OK"
      001335                       3278 DOTOK:
      001335 CD 03 B4         [ 4] 3279         CALL     DOLIT
      001338 12 ED                 3280         .word      INTER
      00133A CD 05 F7         [ 4] 3281         CALL     TEVAL
      00133D CD 04 32         [ 4] 3282         CALL     AT
      001340 CD 07 75         [ 4] 3283         CALL     EQUAL
      001343 CD 03 E7         [ 4] 3284         CALL     QBRAN
      001346 13 4F                 3285         .word      DOTO1
      001348 CD 0E DF         [ 4] 3286         CALL     DOTQP
      00134B 03                    3287         .byte      3
      00134C 20 6F 6B              3288         .ascii     " ok"
      00134F CC 0E A0         [ 2] 3289 DOTO1:  JP     CR
                                   3290 
                                   3291 ;       ?STACK  ( -- )
                                   3292 ;       Abort if stack underflows.
      001352 13 31                 3293         .word      LINK
                           001354  3294 LINK = . 
      001354 06                    3295         .byte      6
      001355 3F 53 54 41 43 4B     3296         .ascii     "?STACK"
      00135B                       3297 QSTAC: 
      00135B CD 0A 7C         [ 4] 3298         CALL     DEPTH
      00135E CD 05 12         [ 4] 3299         CALL     ZLESS   ;check only for underflow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001361 CD 12 BB         [ 4] 3300         CALL     ABORQ
      001364 0B                    3301         .byte      11
      001365 20 75 6E 64 65 72 66  3302         .ascii     " underflow "
             6C 6F 77 20
      001370 81               [ 4] 3303         RET
                                   3304 
                                   3305 ;       EVAL    ( -- )
                                   3306 ;       Interpret  input stream.
      001371 13 54                 3307         .word      LINK
                           001373  3308 LINK = . 
      001373 04                    3309         .byte      4
      001374 45 56 41 4C           3310         .ascii     "EVAL"
      001378                       3311 EVAL:
      001378 CD 10 B2         [ 4] 3312 EVAL1:  CALL     TOKEN
      00137B CD 04 D9         [ 4] 3313         CALL     DUPP
      00137E CD 04 50         [ 4] 3314         CALL     CAT     ;?input stream empty
      001381 CD 03 E7         [ 4] 3315         CALL     QBRAN
      001384 13 94                 3316         .word    EVAL2
      001386 CD 05 F7         [ 4] 3317         CALL     TEVAL
      001389 CD 0B 5E         [ 4] 3318         CALL     ATEXE
      00138C CD 13 5B         [ 4] 3319         CALL     QSTAC   ;evaluate input, check stack
      00138F CD 03 FE         [ 4] 3320         CALL     BRAN
      001392 13 78                 3321         .word    EVAL1
      001394 CD 04 CF         [ 4] 3322 EVAL2:  CALL     DROP
      001397 CC 13 35         [ 2] 3323         JP       DOTOK
                                   3324 
                                   3325 ;       PRESET  ( -- )
                                   3326 ;       Reset data stack pointer and
                                   3327 ;       terminal input buffer.
      00139A 13 73                 3328         .word      LINK
                           00139C  3329 LINK = . 
      00139C 06                    3330         .byte      6
      00139D 50 52 45 53 45 54     3331         .ascii     "PRESET"
      0013A3                       3332 PRESE:
      0013A3 CD 03 B4         [ 4] 3333         CALL     DOLIT
      0013A6 16 80                 3334         .word      SPP
      0013A8 CD 04 C6         [ 4] 3335         CALL     SPSTO
      0013AB CD 03 B4         [ 4] 3336         CALL     DOLIT
      0013AE 17 00                 3337         .word      TIBB
      0013B0 CD 05 C4         [ 4] 3338         CALL     NTIB
      0013B3 CD 09 A3         [ 4] 3339         CALL     CELLP
      0013B6 CC 04 1B         [ 2] 3340         JP     STORE
                                   3341 
                                   3342 ;       QUIT    ( -- )
                                   3343 ;       Reset return stack pointer
                                   3344 ;       and start text interpreter.
      0013B9 13 9C                 3345         .word      LINK
                           0013BB  3346 LINK = . 
      0013BB 04                    3347         .byte      4
      0013BC 51 55 49 54           3348         .ascii     "QUIT"
      0013C0                       3349 QUIT:
      0013C0 CD 03 B4         [ 4] 3350         CALL     DOLIT
      0013C3 17 FF                 3351         .word      RPP
      0013C5 CD 04 6D         [ 4] 3352         CALL     RPSTO   ;reset return stack pointer
      0013C8 CD 13 24         [ 4] 3353 QUIT1:  CALL     LBRAC   ;start interpretation
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0013CB CD 12 87         [ 4] 3354 QUIT2:  CALL     QUERY   ;get input
      0013CE CD 13 78         [ 4] 3355         CALL     EVAL
      0013D1 20 F8            [ 2] 3356         JRA     QUIT2   ;continue till error
                                   3357 
                                   3358 ;; The compiler
                                   3359 
                                   3360 ;       '       ( -- ca )
                                   3361 ;       Search vocabularies for
                                   3362 ;       next word in input stream.
      0013D3 13 BB                 3363         .word      LINK
                           0013D5  3364 LINK = . 
      0013D5 01                    3365         .byte      1
      0013D6 27                    3366         .ascii     "'"
      0013D7                       3367 TICK:
      0013D7 CD 10 B2         [ 4] 3368         CALL     TOKEN
      0013DA CD 11 AF         [ 4] 3369         CALL     NAMEQ   ;?defined
      0013DD CD 03 E7         [ 4] 3370         CALL     QBRAN
      0013E0 12 C3                 3371         .word      ABOR1
      0013E2 81               [ 4] 3372         RET     ;yes, push code address
                                   3373 
                                   3374 ;       ALLOT   ( n -- )
                                   3375 ;       Allocate n bytes to RAM 
      0013E3 13 D5                 3376         .word      LINK
                           0013E5  3377         LINK = . 
      0013E5 05                    3378         .byte      5
      0013E6 41 4C 4C 4F 54        3379         .ascii     "ALLOT"
      0013EB                       3380 ALLOT:
      0013EB CD 06 27         [ 4] 3381         CALL     VPP
                                   3382 ; must update APP_VP each time VP is modidied
      0013EE CD 0A AA         [ 4] 3383         call PSTOR 
      0013F1 CC 1B 83         [ 2] 3384         jp UPDATVP 
                                   3385 
                                   3386 ;       ,       ( w -- )
                                   3387 ;         Compile an integer into
                                   3388 ;         variable space.
      0013F4 13 E5                 3389         .word      LINK
                           0013F6  3390 LINK = . 
      0013F6 01                    3391         .byte      1
      0013F7 2C                    3392         .ascii     ","
      0013F8                       3393 COMMA:
      0013F8 CD 0B 28         [ 4] 3394         CALL     HERE
      0013FB CD 04 D9         [ 4] 3395         CALL     DUPP
      0013FE CD 09 A3         [ 4] 3396         CALL     CELLP   ;cell boundary
      001401 CD 06 27         [ 4] 3397         CALL     VPP
      001404 CD 04 1B         [ 4] 3398         CALL     STORE
      001407 CC 04 1B         [ 2] 3399         JP     STORE
                                   3400 
                                   3401 ;       C,      ( c -- )
                                   3402 ;       Compile a byte into
                                   3403 ;       variables space.
      00140A 13 F6                 3404        .word      LINK
                           00140C  3405 LINK = . 
      00140C 02                    3406         .byte      2
      00140D 43 2C                 3407         .ascii     "C,"
      00140F                       3408 CCOMMA:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



      00140F CD 0B 28         [ 4] 3409         CALL     HERE
      001412 CD 04 D9         [ 4] 3410         CALL     DUPP
      001415 CD 09 CE         [ 4] 3411         CALL     ONEP
      001418 CD 06 27         [ 4] 3412         CALL     VPP
      00141B CD 04 1B         [ 4] 3413         CALL     STORE
      00141E CC 04 3F         [ 2] 3414         JP     CSTOR
                                   3415 
                                   3416 ;       [COMPILE]       ( -- ; <string> )
                                   3417 ;       Compile next immediate
                                   3418 ;       word into code dictionary.
      001421 14 0C                 3419         .word      LINK
                           001423  3420 LINK = . 
      001423 89                    3421 	.byte      IMEDD+9
      001424 5B 43 4F 4D 50 49 4C  3422         .ascii     "[COMPILE]"
             45 5D
      00142D                       3423 BCOMP:
      00142D CD 13 D7         [ 4] 3424         CALL     TICK
      001430 CC 16 F3         [ 2] 3425         JP     JSRC
                                   3426 
                                   3427 ;       COMPILE ( -- )
                                   3428 ;       Compile next jsr in
                                   3429 ;       colon list to code dictionary.
      001433 14 23                 3430         .word      LINK
                           001435  3431 LINK = . 
      001435 47                    3432 	.byte      COMPO+7
      001436 43 4F 4D 50 49 4C 45  3433         .ascii     "COMPILE"
      00143D                       3434 COMPI:
      00143D CD 04 83         [ 4] 3435         CALL     RFROM
      001440 CD 04 D9         [ 4] 3436         CALL     DUPP
      001443 CD 04 32         [ 4] 3437         CALL     AT
      001446 CD 16 F3         [ 4] 3438         CALL     JSRC    ;compile subroutine
      001449 CD 09 A3         [ 4] 3439         CALL     CELLP
      00144C 90 93            [ 1] 3440         ldw y,x 
      00144E 90 FE            [ 2] 3441         ldw y,(y)
      001450 1C 00 02         [ 2] 3442         addw x,#CELLL 
      001453 90 FC            [ 2] 3443         jp (y)
                                   3444 
                                   3445 ;       LITERAL ( w -- )
                                   3446 ;       Compile tos to dictionary
                                   3447 ;       as an integer literal.
      001455 14 35                 3448         .word      LINK
                           001457  3449 LINK = . 
      001457 87                    3450 	.byte      IMEDD+7
      001458 4C 49 54 45 52 41 4C  3451         .ascii     "LITERAL"
      00145F                       3452 LITER:
      00145F CD 14 3D         [ 4] 3453         CALL     COMPI
      001462 03 B4                 3454         .word DOLIT 
      001464 CC 13 F8         [ 2] 3455         JP     COMMA
                                   3456 
                                   3457 ;       $,"     ( -- )
                                   3458 ;       Compile a literal string
                                   3459 ;       up to next " .
      001467 14 57                 3460         .word      LINK
                           001469  3461 LINK = . 
      001469 03                    3462         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      00146A 24 2C 22              3463         .byte     '$',',','"'
      00146D                       3464 STRCQ:
      00146D CD 03 B4         [ 4] 3465         CALL     DOLIT
      001470 00 22                 3466         .word     34	; "
      001472 CD 10 35         [ 4] 3467         CALL     PARSE
      001475 CD 0B 28         [ 4] 3468         CALL     HERE
      001478 CD 0B E8         [ 4] 3469         CALL     PACKS   ;string to code dictionary
      00147B CD 0B 11         [ 4] 3470         CALL     COUNT
      00147E CD 06 D4         [ 4] 3471         CALL     PLUS    ;calculate aligned end of string
      001481 CD 06 27         [ 4] 3472         CALL     VPP
      001484 CC 04 1B         [ 2] 3473         JP     STORE
                                   3474 
                                   3475 ;; Structures
                                   3476 
                                   3477 ;       FOR     ( -- a )
                                   3478 ;       Start a FOR-NEXT loop
                                   3479 ;       structure in a colon definition.
      001487 14 69                 3480         .word      LINK
                           001489  3481 LINK = . 
      001489 83                    3482 	.byte      IMEDD+3
      00148A 46 4F 52              3483         .ascii     "FOR"
      00148D                       3484 FOR:
      00148D CD 14 3D         [ 4] 3485         CALL     COMPI
      001490 04 A2                 3486         .word TOR 
      001492 CC 0B 28         [ 2] 3487         JP     HERE
                                   3488 
                                   3489 ;       NEXT    ( a -- )
                                   3490 ;       Terminate a FOR-NEXT loop.
      001495 14 89                 3491         .word      LINK
                           001497  3492 LINK = . 
      001497 84                    3493 	.byte      IMEDD+4
      001498 4E 45 58 54           3494         .ascii     "NEXT"
      00149C                       3495 NEXT:
      00149C CD 14 3D         [ 4] 3496         CALL     COMPI
      00149F 03 C8                 3497         .word DONXT 
      0014A1 CD 06 73         [ 4] 3498         call ADRADJ
      0014A4 CC 13 F8         [ 2] 3499         JP     COMMA
                                   3500 
                                   3501 ;       I ( -- n )
                                   3502 ;       stack FOR-NEXT COUNTER 
      0014A7 14 97                 3503         .word LINK 
                           0014A9  3504         LINK=.
      0014A9 01                    3505         .byte 1 
      0014AA 49                    3506         .ascii "I"
      0014AB                       3507 IFETCH: 
      0014AB 1D 00 02         [ 2] 3508         subw x,#CELLL 
      0014AE 16 03            [ 2] 3509         ldw y,(3,sp)
      0014B0 FF               [ 2] 3510         ldw (x),y 
      0014B1 81               [ 4] 3511         ret 
                                   3512 
                                   3513 ;       BEGIN   ( -- a )
                                   3514 ;       Start an infinite or
                                   3515 ;       indefinite loop structure.
      0014B2 14 A9                 3516         .word      LINK
                           0014B4  3517 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      0014B4 85                    3518 	.byte      IMEDD+5
      0014B5 42 45 47 49 4E        3519         .ascii     "BEGIN"
      0014BA                       3520 BEGIN:
      0014BA CC 0B 28         [ 2] 3521         JP     HERE
                                   3522 
                                   3523 ;       UNTIL   ( a -- )
                                   3524 ;       Terminate a BEGIN-UNTIL
                                   3525 ;       indefinite loop structure.
      0014BD 14 B4                 3526         .word      LINK
                           0014BF  3527 LINK = . 
      0014BF 85                    3528 	.byte      IMEDD+5
      0014C0 55 4E 54 49 4C        3529         .ascii     "UNTIL"
      0014C5                       3530 UNTIL:
      0014C5 CD 14 3D         [ 4] 3531         CALL     COMPI
      0014C8 03 E7                 3532         .word    QBRAN 
      0014CA CD 06 73         [ 4] 3533         call ADRADJ
      0014CD CC 13 F8         [ 2] 3534         JP     COMMA
                                   3535 
                                   3536 ;       AGAIN   ( a -- )
                                   3537 ;       Terminate a BEGIN-AGAIN
                                   3538 ;       infinite loop structure.
      0014D0 14 BF                 3539         .word      LINK
                           0014D2  3540 LINK = . 
      0014D2 85                    3541 	.byte      IMEDD+5
      0014D3 41 47 41 49 4E        3542         .ascii     "AGAIN"
      0014D8                       3543 AGAIN:
      0014D8 CD 14 3D         [ 4] 3544         CALL     COMPI
      0014DB 03 FE                 3545         .word BRAN
      0014DD CD 06 73         [ 4] 3546         call ADRADJ 
      0014E0 CC 13 F8         [ 2] 3547         JP     COMMA
                                   3548 
                                   3549 ;       IF      ( -- A )
                                   3550 ;       Begin a conditional branch.
      0014E3 14 D2                 3551         .word      LINK
                           0014E5  3552 LINK = . 
      0014E5 82                    3553 	.byte      IMEDD+2
      0014E6 49 46                 3554         .ascii     "IF"
      0014E8                       3555 IFF:
      0014E8 CD 14 3D         [ 4] 3556         CALL     COMPI
      0014EB 03 E7                 3557         .word QBRAN
      0014ED CD 0B 28         [ 4] 3558         CALL     HERE
      0014F0 CD 0A 3A         [ 4] 3559         CALL     ZERO
      0014F3 CC 13 F8         [ 2] 3560         JP     COMMA
                                   3561 
                                   3562 ;       THEN        ( A -- )
                                   3563 ;       Terminate a conditional branch structure.
      0014F6 14 E5                 3564         .word      LINK
                           0014F8  3565 LINK = . 
      0014F8 84                    3566 	.byte      IMEDD+4
      0014F9 54 48 45 4E           3567         .ascii     "THEN"
      0014FD                       3568 THENN:
      0014FD CD 0B 28         [ 4] 3569         CALL     HERE
      001500 CD 06 73         [ 4] 3570         call ADRADJ 
      001503 CD 04 E9         [ 4] 3571         CALL     SWAPP
      001506 CC 04 1B         [ 2] 3572         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3573 
                                   3574 ;       ELSE        ( A -- A )
                                   3575 ;       Start the false clause in an IF-ELSE-THEN structure.
      001509 14 F8                 3576         .word      LINK
                           00150B  3577 LINK = . 
      00150B 84                    3578 	.byte      IMEDD+4
      00150C 45 4C 53 45           3579         .ascii     "ELSE"
      001510                       3580 ELSEE:
      001510 CD 14 3D         [ 4] 3581         CALL     COMPI
      001513 03 FE                 3582         .word BRAN
      001515 CD 0B 28         [ 4] 3583         CALL     HERE
      001518 CD 0A 3A         [ 4] 3584         CALL     ZERO
      00151B CD 13 F8         [ 4] 3585         CALL     COMMA
      00151E CD 04 E9         [ 4] 3586         CALL     SWAPP
      001521 CD 0B 28         [ 4] 3587         CALL     HERE
      001524 CD 06 73         [ 4] 3588         call ADRADJ 
      001527 CD 04 E9         [ 4] 3589         CALL     SWAPP
      00152A CC 04 1B         [ 2] 3590         JP     STORE
                                   3591 
                                   3592 ;       AHEAD       ( -- A )
                                   3593 ;       Compile a forward branch instruction.
      00152D 15 0B                 3594         .word      LINK
                           00152F  3595 LINK = . 
      00152F 85                    3596 	.byte      IMEDD+5
      001530 41 48 45 41 44        3597         .ascii     "AHEAD"
      001535                       3598 AHEAD:
      001535 CD 14 3D         [ 4] 3599         CALL     COMPI
      001538 03 FE                 3600         .word BRAN
      00153A CD 0B 28         [ 4] 3601         CALL     HERE
      00153D CD 0A 3A         [ 4] 3602         CALL     ZERO
      001540 CC 13 F8         [ 2] 3603         JP     COMMA
                                   3604 
                                   3605 ;       WHILE       ( a -- A a )
                                   3606 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001543 15 2F                 3607         .word      LINK
                           001545  3608 LINK = . 
      001545 85                    3609 	.byte      IMEDD+5
      001546 57 48 49 4C 45        3610         .ascii     "WHILE"
      00154B                       3611 WHILE:
      00154B CD 14 3D         [ 4] 3612         CALL     COMPI
      00154E 03 E7                 3613         .word QBRAN
      001550 CD 0B 28         [ 4] 3614         CALL     HERE
      001553 CD 0A 3A         [ 4] 3615         CALL     ZERO
      001556 CD 13 F8         [ 4] 3616         CALL     COMMA
      001559 CC 04 E9         [ 2] 3617         JP     SWAPP
                                   3618 
                                   3619 ;       REPEAT      ( A a -- )
                                   3620 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00155C 15 45                 3621         .word      LINK
                           00155E  3622 LINK = . 
      00155E 86                    3623         .byte      IMEDD+6
      00155F 52 45 50 45 41 54     3624         .ascii     "REPEAT"
      001565                       3625 REPEA:
      001565 CD 14 3D         [ 4] 3626         CALL     COMPI
      001568 03 FE                 3627         .word BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      00156A CD 06 73         [ 4] 3628         call ADRADJ 
      00156D CD 13 F8         [ 4] 3629         CALL     COMMA
      001570 CD 0B 28         [ 4] 3630         CALL     HERE
      001573 CD 06 73         [ 4] 3631         call ADRADJ 
      001576 CD 04 E9         [ 4] 3632         CALL     SWAPP
      001579 CC 04 1B         [ 2] 3633         JP     STORE
                                   3634 
                                   3635 ;       AFT         ( a -- a A )
                                   3636 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00157C 15 5E                 3637         .word      LINK
                           00157E  3638 LINK = . 
      00157E 83                    3639 	.byte      IMEDD+3
      00157F 41 46 54              3640         .ascii     "AFT"
      001582                       3641 AFT:
      001582 CD 04 CF         [ 4] 3642         CALL     DROP
      001585 CD 15 35         [ 4] 3643         CALL     AHEAD
      001588 CD 0B 28         [ 4] 3644         CALL     HERE
      00158B CC 04 E9         [ 2] 3645         JP     SWAPP
                                   3646 
                                   3647 ;       ABORT"      ( -- ; <string> )
                                   3648 ;       Conditional abort with an error message.
      00158E 15 7E                 3649         .word      LINK
                           001590  3650 LINK = . 
      001590 86                    3651 	.byte      IMEDD+6
      001591 41 42 4F 52 54        3652         .ascii     "ABORT"
      001596 22                    3653         .byte      '"'
      001597                       3654 ABRTQ:
      001597 CD 14 3D         [ 4] 3655         CALL     COMPI
      00159A 12 BB                 3656         .word ABORQ
      00159C CC 14 6D         [ 2] 3657         JP     STRCQ
                                   3658 
                                   3659 ;       $"     ( -- ; <string> )
                                   3660 ;       Compile an inline string literal.
      00159F 15 90                 3661         .word      LINK
                           0015A1  3662 LINK = . 
      0015A1 82                    3663 	.byte      IMEDD+2
      0015A2 24 22                 3664         .byte     '$','"'
      0015A4                       3665 STRQ:
      0015A4 CD 14 3D         [ 4] 3666         CALL     COMPI
      0015A7 0E D5                 3667         .word STRQP 
      0015A9 CC 14 6D         [ 2] 3668         JP     STRCQ
                                   3669 
                                   3670 ;       ."          ( -- ; <string> )
                                   3671 ;       Compile an inline string literal to be typed out at run time.
      0015AC 15 A1                 3672         .word      LINK
                           0015AE  3673 LINK = . 
      0015AE 82                    3674 	.byte      IMEDD+2
      0015AF 2E 22                 3675         .byte     '.','"'
      0015B1                       3676 DOTQ:
      0015B1 CD 14 3D         [ 4] 3677         CALL     COMPI
      0015B4 0E DF                 3678         .word DOTQP 
      0015B6 CC 14 6D         [ 2] 3679         JP     STRCQ
                                   3680 
                                   3681 ;; Name compiler
                                   3682 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3683 ;       ?UNIQUE ( a -- a )
                                   3684 ;       Display a warning message
                                   3685 ;       if word already exists.
      0015B9 15 AE                 3686         .word      LINK
                           0015BB  3687 LINK = . 
      0015BB 07                    3688         .byte      7
      0015BC 3F 55 4E 49 51 55 45  3689         .ascii     "?UNIQUE"
      0015C3                       3690 UNIQU:
      0015C3 CD 04 D9         [ 4] 3691         CALL     DUPP
      0015C6 CD 11 AF         [ 4] 3692         CALL     NAMEQ   ;?name exists
      0015C9 CD 03 E7         [ 4] 3693         CALL     QBRAN
      0015CC 15 E2                 3694         .word      UNIQ1
      0015CE CD 0E DF         [ 4] 3695         CALL     DOTQP   ;redef are OK
      0015D1 07                    3696         .byte       7
      0015D2 20 72 65 44 65 66 20  3697         .ascii     " reDef "       
      0015D9 CD 05 03         [ 4] 3698         CALL     OVER
      0015DC CD 0B 11         [ 4] 3699         CALL     COUNT
      0015DF CD 0E 82         [ 4] 3700         CALL     TYPES   ;just in case
      0015E2 CC 04 CF         [ 2] 3701 UNIQ1:  JP     DROP
                                   3702 
                                   3703 ;       $,n     ( na -- )
                                   3704 ;       Build a new dictionary name
                                   3705 ;       using string at na.
                                   3706 ; compile dans l'espace des variables 
      0015E5 15 BB                 3707         .word      LINK
                           0015E7  3708 LINK = . 
      0015E7 03                    3709         .byte      3
      0015E8 24 2C 6E              3710         .ascii     "$,n"
      0015EB                       3711 SNAME:
      0015EB CD 04 D9         [ 4] 3712         CALL     DUPP
      0015EE CD 04 50         [ 4] 3713         CALL     CAT     ;?null input
      0015F1 CD 03 E7         [ 4] 3714         CALL     QBRAN
      0015F4 16 21                 3715         .word      PNAM1
      0015F6 CD 15 C3         [ 4] 3716         CALL     UNIQU   ;?redefinition
      0015F9 CD 04 D9         [ 4] 3717         CALL     DUPP
      0015FC CD 0B 11         [ 4] 3718         CALL     COUNT
      0015FF CD 06 D4         [ 4] 3719         CALL     PLUS
      001602 CD 06 27         [ 4] 3720         CALL     VPP
      001605 CD 04 1B         [ 4] 3721         CALL     STORE
      001608 CD 04 D9         [ 4] 3722         CALL     DUPP
      00160B CD 06 45         [ 4] 3723         CALL     LAST
      00160E CD 04 1B         [ 4] 3724         CALL     STORE   ;save na for vocabulary link
      001611 CD 09 B2         [ 4] 3725         CALL     CELLM   ;link address
      001614 CD 06 19         [ 4] 3726         CALL     CNTXT
      001617 CD 04 32         [ 4] 3727         CALL     AT
      00161A CD 04 E9         [ 4] 3728         CALL     SWAPP
      00161D CD 04 1B         [ 4] 3729         CALL     STORE
      001620 81               [ 4] 3730         RET     ;save code pointer
      001621 CD 0E D5         [ 4] 3731 PNAM1:  CALL     STRQP
      001624 05                    3732         .byte      5
      001625 20 6E 61 6D 65        3733         .ascii     " name" ;null input
      00162A CC 12 C3         [ 2] 3734         JP     ABOR1
                                   3735 
                                   3736 ;; FORTH compiler
                                   3737 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3738 ;       $COMPILE        ( a -- )
                                   3739 ;       Compile next word to
                                   3740 ;       dictionary as a token or literal.
      00162D 15 E7                 3741         .word      LINK
                           00162F  3742 LINK = . 
      00162F 08                    3743         .byte      8
      001630 24 43 4F 4D 50 49 4C  3744         .ascii     "$COMPILE"
             45
      001638                       3745 SCOMP:
      001638 CD 11 AF         [ 4] 3746         CALL     NAMEQ
      00163B CD 06 83         [ 4] 3747         CALL     QDUP    ;?defined
      00163E CD 03 E7         [ 4] 3748         CALL     QBRAN
      001641 16 59                 3749         .word      SCOM2
      001643 CD 04 32         [ 4] 3750         CALL     AT
      001646 CD 03 B4         [ 4] 3751         CALL     DOLIT
      001649 80 00                 3752         .word     0x8000	;  IMEDD*256
      00164B CD 05 25         [ 4] 3753         CALL     ANDD    ;?immediate
      00164E CD 03 E7         [ 4] 3754         CALL     QBRAN
      001651 16 56                 3755         .word      SCOM1
      001653 CC 04 0E         [ 2] 3756         JP     EXECU
      001656 CC 16 F3         [ 2] 3757 SCOM1:  JP     JSRC
      001659 CD 0D 4D         [ 4] 3758 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00165C CD 03 E7         [ 4] 3759         CALL     QBRAN
      00165F 12 C3                 3760         .word      ABOR1
      001661 CC 14 5F         [ 2] 3761         JP     LITER
                                   3762 
                                   3763 ;       OVERT   ( -- )
                                   3764 ;       Link a new word into vocabulary.
      001664 16 2F                 3765         .word      LINK
                           001666  3766 LINK = . 
      001666 05                    3767         .byte      5
      001667 4F 56 45 52 54        3768         .ascii     "OVERT"
      00166C                       3769 OVERT:
      00166C CD 06 45         [ 4] 3770         CALL     LAST
      00166F CD 04 32         [ 4] 3771         CALL     AT
      001672 CD 06 19         [ 4] 3772         CALL     CNTXT
      001675 CC 04 1B         [ 2] 3773         JP     STORE
                                   3774 
                                   3775 ;       ;       ( -- )
                                   3776 ;       Terminate a colon definition.
      001678 16 66                 3777         .word      LINK
                           00167A  3778 LINK = . 
      00167A C1                    3779 	.byte      IMEDD+COMPO+1
      00167B 3B                    3780         .ascii     ";"
      00167C                       3781 SEMIS:
                           000001  3782 .if OPTIMIZE ; more compact and faster
      00167C CD 03 B4         [ 4] 3783         call DOLIT 
      00167F 00 81                 3784         .word 0x81   ; opcode for RET 
      001681 CD 14 0F         [ 4] 3785         call CCOMMA 
                           000000  3786 .else
                                   3787         CALL     COMPI
                                   3788         .word EXIT 
                                   3789 .endif 
      001684 CD 13 24         [ 4] 3790         CALL     LBRAC
      001687 CD 16 6C         [ 4] 3791         call OVERT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



      00168A CD 20 4F         [ 4] 3792         CALL FMOVE
      00168D CD 06 83         [ 4] 3793         call QDUP 
      001690 CD 03 E7         [ 4] 3794         call QBRAN 
      001693 17 C3                 3795         .word SET_RAMLAST 
      001695 CD 20 E3         [ 4] 3796         CALL UPDATPTR
      001698 81               [ 4] 3797         RET 
                                   3798 
                                   3799 
                                   3800 ;       Terminate an ISR definition 
                                   3801 ;       retourn ca of ISR as double
                                   3802 ;       I; ( -- ud )
      001699 16 7A                 3803         .word LINK 
                           00169B  3804         LINK=.
      00169B C2                    3805         .byte 2+IMEDD+COMPO 
      00169C 49 3B                 3806         .ascii "I;" 
      00169E                       3807 ISEMI:
      00169E 1D 00 02         [ 2] 3808         subw x,#CELLL  
      0016A1 90 AE 00 80      [ 2] 3809         ldw y,#IRET_CODE 
      0016A5 FF               [ 2] 3810         ldw (x),y 
      0016A6 CD 14 0F         [ 4] 3811         call CCOMMA
      0016A9 CD 13 24         [ 4] 3812         call LBRAC 
      0016AC CD 21 28         [ 4] 3813         call IFMOVE
      0016AF CD 06 83         [ 4] 3814         call QDUP 
      0016B2 CD 03 E7         [ 4] 3815         CALL QBRAN 
      0016B5 17 C3                 3816         .word SET_RAMLAST
      0016B7 CD 06 35         [ 4] 3817         CALL CPP
      0016BA CD 04 32         [ 4] 3818         call AT 
      0016BD CD 04 E9         [ 4] 3819         call SWAPP 
      0016C0 CD 06 35         [ 4] 3820         CALL CPP 
      0016C3 CD 04 1B         [ 4] 3821         call STORE 
      0016C6 CD 1B 6C         [ 4] 3822         call UPDATCP 
      0016C9 CD 1B 29         [ 4] 3823         call EEPVP 
      0016CC CD 04 CF         [ 4] 3824         call DROP 
      0016CF CD 04 32         [ 4] 3825         call AT 
      0016D2 CD 06 27         [ 4] 3826         call VPP 
      0016D5 CD 04 1B         [ 4] 3827         call STORE 
      0016D8 CC 0A 3A         [ 2] 3828         jp ZERO
      0016DB 81               [ 4] 3829         ret           
                                   3830         
                                   3831 
                                   3832 ;       ]       ( -- )
                                   3833 ;       Start compiling words in
                                   3834 ;       input stream.
      0016DC 16 9B                 3835         .word      LINK
                           0016DE  3836 LINK = . 
      0016DE 01                    3837         .byte      1
      0016DF 5D                    3838         .ascii     "]"
      0016E0                       3839 RBRAC:
      0016E0 CD 03 B4         [ 4] 3840         CALL   DOLIT
      0016E3 16 38                 3841         .word  SCOMP
      0016E5 CD 05 F7         [ 4] 3842         CALL   TEVAL
      0016E8 CC 04 1B         [ 2] 3843         JP     STORE
                                   3844 
                                   3845 ;       CALL,    ( ca -- )
                                   3846 ;       Compile a subroutine call.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      0016EB 16 DE                 3847         .word      LINK
                           0016ED  3848 LINK = . 
      0016ED 05                    3849         .byte      5
      0016EE 43 41 4C 4C 2C        3850         .ascii     "CALL,"
      0016F3                       3851 JSRC:
      0016F3 CD 03 B4         [ 4] 3852         CALL     DOLIT
      0016F6 00 CD                 3853         .word     CALLL     ;CALL
      0016F8 CD 14 0F         [ 4] 3854         CALL     CCOMMA
      0016FB CC 13 F8         [ 2] 3855         JP     COMMA
                                   3856 
                                   3857 ;       INIT-OFS ( -- )
                                   3858 ;       compute offset to adjust jump address 
                                   3859 ;       set variable OFFSET 
      0016FE 16 ED                 3860         .word LINK 
                           001700  3861         LINK=.
      001700 08                    3862         .byte 8 
      001701 49 4E 49 54 2D 4F 46  3863         .ascii "INIT-OFS" 
             53
      001709                       3864 INITOFS:
      001709 CD 05 E6         [ 4] 3865         call TFLASH 
      00170C CD 04 32         [ 4] 3866         CALL AT 
      00170F CD 04 D9         [ 4] 3867         CALL DUPP 
      001712 CD 03 E7         [ 4] 3868         call QBRAN
      001715 17 26                 3869         .word 1$
      001717 CD 04 CF         [ 4] 3870         call DROP  
      00171A CD 06 35         [ 4] 3871         call CPP 
      00171D CD 04 32         [ 4] 3872         call AT 
      001720 CD 0B 28         [ 4] 3873         call HERE
      001723 CD 07 4D         [ 4] 3874         call SUBB 
      001726 CD 06 6A         [ 4] 3875 1$:     call OFFSET 
      001729 CC 04 1B         [ 2] 3876         jp STORE  
                                   3877 
                                   3878 ;       :       ( -- ; <string> )
                                   3879 ;       Start a new colon definition
                                   3880 ;       using next word as its name.
      00172C 17 00                 3881         .word      LINK
                           00172E  3882 LINK = . 
      00172E 01                    3883         .byte      1
      00172F 3A                    3884         .ascii     ":"
      001730                       3885 COLON:
      001730 CD 17 09         [ 4] 3886         call INITOFS       
      001733 CD 10 B2         [ 4] 3887         CALL   TOKEN
      001736 CD 15 EB         [ 4] 3888         CALL   SNAME
      001739 CC 16 E0         [ 2] 3889         JP     RBRAC
                                   3890 
                                   3891 ;       I:  ( -- )
                                   3892 ;       Start interrupt service routine definition
                                   3893 ;       those definition have no name.
      00173C 17 2E                 3894         .word LINK
                           00173E  3895         LINK=.
      00173E 02                    3896         .byte 2 
      00173F 49 3A                 3897         .ascii "I:" 
      001741                       3898 ICOLON:
      001741 CD 17 09         [ 4] 3899         call INITOFS 
      001744 CC 16 E0         [ 2] 3900         jp RBRAC  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3901 
                                   3902 ;       IMMEDIATE       ( -- )
                                   3903 ;       Make last compiled word
                                   3904 ;       an immediate word.
      001747 17 3E                 3905         .word      LINK
                           001749  3906 LINK = . 
      001749 09                    3907         .byte      9
      00174A 49 4D 4D 45 44 49 41  3908         .ascii     "IMMEDIATE"
             54 45
      001753                       3909 IMMED:
      001753 CD 03 B4         [ 4] 3910         CALL     DOLIT
      001756 80 00                 3911         .word     0x8000	;  IMEDD*256
      001758 CD 06 45         [ 4] 3912         CALL     LAST
      00175B CD 04 32         [ 4] 3913         CALL     AT
      00175E CD 04 32         [ 4] 3914         CALL     AT
      001761 CD 05 39         [ 4] 3915         CALL     ORR
      001764 CD 06 45         [ 4] 3916         CALL     LAST
      001767 CD 04 32         [ 4] 3917         CALL     AT
      00176A CC 04 1B         [ 2] 3918         JP     STORE
                                   3919 
                                   3920 ;; Defining words
                                   3921 
                                   3922 ;       CREATE  ( -- ; <string> )
                                   3923 ;       Compile a new array
                                   3924 ;       without allocating space.
      00176D 17 49                 3925         .word      LINK
                           00176F  3926 LINK = . 
      00176F 06                    3927         .byte      6
      001770 43 52 45 41 54 45     3928         .ascii     "CREATE"
      001776                       3929 CREAT:
      001776 CD 10 B2         [ 4] 3930         CALL     TOKEN
      001779 CD 15 EB         [ 4] 3931         CALL     SNAME
      00177C CD 16 6C         [ 4] 3932         CALL     OVERT        
      00177F CD 14 3D         [ 4] 3933         CALL     COMPI 
      001782 05 86                 3934         .word DOVAR 
      001784 81               [ 4] 3935         RET
                                   3936 
                                   3937 ;       VARIABLE        ( -- ; <string> )
                                   3938 ;       Compile a new variable
                                   3939 ;       initialized to 0.
      001785 17 6F                 3940         .word      LINK
                           001787  3941 LINK = . 
      001787 08                    3942         .byte      8
      001788 56 41 52 49 41 42 4C  3943         .ascii     "VARIABLE"
             45
      001790                       3944 VARIA:
                                   3945 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001790 CD 0B 28         [ 4] 3946         CALL HERE
      001793 CD 04 D9         [ 4] 3947         CALL DUPP 
      001796 CD 09 A3         [ 4] 3948         CALL CELLP
      001799 CD 06 27         [ 4] 3949         CALL VPP 
      00179C CD 04 1B         [ 4] 3950         CALL STORE
      00179F CD 17 76         [ 4] 3951         CALL CREAT
      0017A2 CD 04 D9         [ 4] 3952         CALL DUPP
      0017A5 CD 13 F8         [ 4] 3953         CALL COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0017A8 CD 0A 3A         [ 4] 3954         CALL ZERO
      0017AB CD 04 E9         [ 4] 3955         call SWAPP 
      0017AE CD 04 1B         [ 4] 3956         CALL STORE
      0017B1 CD 20 4F         [ 4] 3957         CALL FMOVE ; move definition to FLASH
      0017B4 CD 06 83         [ 4] 3958         CALL QDUP 
      0017B7 CD 03 E7         [ 4] 3959         CALL QBRAN 
      0017BA 17 C3                 3960         .word SET_RAMLAST   
      0017BC CD 1B 83         [ 4] 3961         call UPDATVP  ; don't update if variable kept in RAM.
      0017BF CD 20 E3         [ 4] 3962         CALL UPDATPTR
      0017C2 81               [ 4] 3963         RET         
      0017C3                       3964 SET_RAMLAST: 
      0017C3 CD 06 45         [ 4] 3965         CALL LAST 
      0017C6 CD 04 32         [ 4] 3966         CALL AT 
      0017C9 CD 06 58         [ 4] 3967         CALL RAMLAST 
      0017CC CC 04 1B         [ 2] 3968         jp STORE  
                                   3969 
                                   3970 
                                   3971 ;       CONSTANT  ( n -- ; <string> )
                                   3972 ;       Compile a new constant 
                                   3973 ;       n CONSTANT name 
      0017CF 17 87                 3974         .word LINK 
                           0017D1  3975         LINK=. 
      0017D1 08                    3976         .byte 8 
      0017D2 43 4F 4E 53 54 41 4E  3977         .ascii "CONSTANT" 
             54
      0017DA                       3978 CONSTANT:          
      0017DA CD 10 B2         [ 4] 3979         CALL TOKEN
      0017DD CD 15 EB         [ 4] 3980         CALL SNAME 
      0017E0 CD 16 6C         [ 4] 3981         CALL OVERT 
      0017E3 CD 14 3D         [ 4] 3982         CALL COMPI 
      0017E6 18 04                 3983         .word DOCONST
      0017E8 CD 13 F8         [ 4] 3984         CALL COMMA 
      0017EB CD 20 4F         [ 4] 3985         CALL FMOVE
      0017EE CD 06 83         [ 4] 3986         CALL QDUP 
      0017F1 CD 03 E7         [ 4] 3987         CALL QBRAN 
      0017F4 17 C3                 3988         .word SET_RAMLAST  
      0017F6 CD 20 E3         [ 4] 3989         CALL UPDATPTR  
      0017F9 81               [ 4] 3990 1$:     RET          
                                   3991 
                                   3992 ; CONSTANT runtime semantic 
                                   3993 ; doCONST  ( -- n )
      0017FA 17 D1                 3994         .word LINK 
                           0017FC  3995         LINK=.
      0017FC 07                    3996         .byte 7
      0017FD 44 4F 43 4F 4E 53 54  3997         .ascii "DOCONST"
      001804                       3998 DOCONST:
      001804 1D 00 02         [ 2] 3999         subw x,#CELLL
      001807 90 85            [ 2] 4000         popw y 
      001809 90 FE            [ 2] 4001         ldw y,(y) 
      00180B FF               [ 2] 4002         ldw (x),y 
      00180C 81               [ 4] 4003         ret 
                                   4004 
                                   4005 
                                   4006 ;; Tools
                                   4007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                   4008 ;       _TYPE   ( b u -- )
                                   4009 ;       Display a string. Filter
                                   4010 ;       non-printing characters.
      00180D 17 FC                 4011         .word      LINK
                           00180F  4012 LINK = . 
      00180F 05                    4013         .byte      5
      001810 5F 54 59 50 45        4014         .ascii     "_TYPE"
      001815                       4015 UTYPE:
      001815 CD 04 A2         [ 4] 4016         CALL     TOR     ;start count down loop
      001818 20 0F            [ 2] 4017         JRA     UTYP2   ;skip first pass
      00181A CD 04 D9         [ 4] 4018 UTYP1:  CALL     DUPP
      00181D CD 04 50         [ 4] 4019         CALL     CAT
      001820 CD 0A 64         [ 4] 4020         CALL     TCHAR
      001823 CD 03 9E         [ 4] 4021         CALL     EMIT    ;display only printable
      001826 CD 09 CE         [ 4] 4022         CALL     ONEP    ;increment address
      001829 CD 03 C8         [ 4] 4023 UTYP2:  CALL     DONXT
      00182C 18 1A                 4024         .word      UTYP1   ;loop till done
      00182E CC 04 CF         [ 2] 4025         JP     DROP
                                   4026 
                                   4027 ;       dm+     ( a u -- a )
                                   4028 ;       Dump u bytes from ,
                                   4029 ;       leaving a+u on  stack.
      001831 18 0F                 4030         .word      LINK
                           001833  4031 LINK = . 
      001833 03                    4032         .byte      3
      001834 64 6D 2B              4033         .ascii     "dm+"
      001837                       4034 DUMPP:
      001837 CD 05 03         [ 4] 4035         CALL     OVER
      00183A CD 03 B4         [ 4] 4036         CALL     DOLIT
      00183D 00 04                 4037         .word      4
      00183F CD 0F 08         [ 4] 4038         CALL     UDOTR   ;display address
      001842 CD 0E 58         [ 4] 4039         CALL     SPACE
      001845 CD 04 A2         [ 4] 4040         CALL     TOR     ;start count down loop
      001848 20 11            [ 2] 4041         JRA     PDUM2   ;skip first pass
      00184A CD 04 D9         [ 4] 4042 PDUM1:  CALL     DUPP
      00184D CD 04 50         [ 4] 4043         CALL     CAT
      001850 CD 03 B4         [ 4] 4044         CALL     DOLIT
      001853 00 03                 4045         .word      3
      001855 CD 0F 08         [ 4] 4046         CALL     UDOTR   ;display numeric data
      001858 CD 09 CE         [ 4] 4047         CALL     ONEP    ;increment address
      00185B CD 03 C8         [ 4] 4048 PDUM2:  CALL     DONXT
      00185E 18 4A                 4049         .word      PDUM1   ;loop till done
      001860 81               [ 4] 4050         RET
                                   4051 
                                   4052 ;       DUMP    ( a u -- )
                                   4053 ;       Dump u bytes from a,
                                   4054 ;       in a formatted manner.
      001861 18 33                 4055         .word      LINK
                           001863  4056 LINK = . 
      001863 04                    4057         .byte      4
      001864 44 55 4D 50           4058         .ascii     "DUMP"
      001868                       4059 DUMP:
      001868 CD 05 96         [ 4] 4060         CALL     BASE
      00186B CD 04 32         [ 4] 4061         CALL     AT
      00186E CD 04 A2         [ 4] 4062         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001871 CD 0C E0         [ 4] 4063         CALL     HEX     ;save radix, set hex
      001874 CD 03 B4         [ 4] 4064         CALL     DOLIT
      001877 00 10                 4065         .word      16
      001879 CD 08 F4         [ 4] 4066         CALL     SLASH   ;change count to lines
      00187C CD 04 A2         [ 4] 4067         CALL     TOR     ;start count down loop
      00187F CD 0E A0         [ 4] 4068 DUMP1:  CALL     CR
      001882 CD 03 B4         [ 4] 4069         CALL     DOLIT
      001885 00 10                 4070         .word      16
      001887 CD 06 BF         [ 4] 4071         CALL     DDUP
      00188A CD 18 37         [ 4] 4072         CALL     DUMPP   ;display numeric
      00188D CD 06 94         [ 4] 4073         CALL     ROT
      001890 CD 06 94         [ 4] 4074         CALL     ROT
      001893 CD 0E 58         [ 4] 4075         CALL     SPACE
      001896 CD 0E 58         [ 4] 4076         CALL     SPACE
      001899 CD 18 15         [ 4] 4077         CALL     UTYPE   ;display printable characters
      00189C CD 03 C8         [ 4] 4078         CALL     DONXT
      00189F 18 7F                 4079         .word      DUMP1   ;loop till done
      0018A1 CD 04 CF         [ 4] 4080 DUMP3:  CALL     DROP
      0018A4 CD 04 83         [ 4] 4081         CALL     RFROM
      0018A7 CD 05 96         [ 4] 4082         CALL     BASE
      0018AA CC 04 1B         [ 2] 4083         JP     STORE   ;restore radix
                                   4084 
                                   4085 ;       .S      ( ... -- ... )
                                   4086 ;        Display  contents of stack.
      0018AD 18 63                 4087         .word      LINK
                           0018AF  4088 LINK = . 
      0018AF 02                    4089         .byte      2
      0018B0 2E 53                 4090         .ascii     ".S"
      0018B2                       4091 DOTS:
      0018B2 CD 0E A0         [ 4] 4092         CALL     CR
      0018B5 CD 0A 7C         [ 4] 4093         CALL     DEPTH   ;stack depth
      0018B8 CD 04 A2         [ 4] 4094         CALL     TOR     ;start count down loop
      0018BB 20 09            [ 2] 4095         JRA     DOTS2   ;skip first pass
      0018BD CD 04 96         [ 4] 4096 DOTS1:  CALL     RAT
      0018C0 CD 0A 93         [ 4] 4097 	CALL     PICK
      0018C3 CD 0F 3B         [ 4] 4098         CALL     DOT     ;index stack, display contents
      0018C6 CD 03 C8         [ 4] 4099 DOTS2:  CALL     DONXT
      0018C9 18 BD                 4100         .word      DOTS1   ;loop till done
      0018CB CD 0E DF         [ 4] 4101         CALL     DOTQP
      0018CE 05                    4102         .byte      5
      0018CF 20 3C 73 70 20        4103         .ascii     " <sp "
      0018D4 81               [ 4] 4104         RET
                                   4105 
                                   4106 ;       >NAME   ( ca -- na | F )
                                   4107 ;       Convert code address
                                   4108 ;       to a name address.
      0018D5 18 AF                 4109         .word      LINK
                           0018D7  4110 LINK = . 
      0018D7 05                    4111         .byte      5
      0018D8 3E 4E 41 4D 45        4112         .ascii     ">NAME"
      0018DD                       4113 TNAME:
      0018DD CD 06 19         [ 4] 4114         CALL     CNTXT   ;vocabulary link
      0018E0 CD 04 32         [ 4] 4115 TNAM2:  CALL     AT
      0018E3 CD 04 D9         [ 4] 4116         CALL     DUPP    ;?last word in a vocabulary
      0018E6 CD 03 E7         [ 4] 4117         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0018E9 19 04                 4118         .word      TNAM4
      0018EB CD 06 BF         [ 4] 4119         CALL     DDUP
      0018EE CD 10 C0         [ 4] 4120         CALL     NAMET
      0018F1 CD 05 4E         [ 4] 4121         CALL     XORR    ;compare
      0018F4 CD 03 E7         [ 4] 4122         CALL     QBRAN
      0018F7 18 FE                 4123         .word      TNAM3
      0018F9 CD 09 B2         [ 4] 4124         CALL     CELLM   ;continue with next word
      0018FC 20 E2            [ 2] 4125         JRA     TNAM2
      0018FE CD 04 E9         [ 4] 4126 TNAM3:  CALL     SWAPP
      001901 CC 04 CF         [ 2] 4127         JP     DROP
      001904 CD 06 B4         [ 4] 4128 TNAM4:  CALL     DDROP
      001907 CC 0A 3A         [ 2] 4129         JP     ZERO
                                   4130 
                                   4131 ;       .ID     ( na -- )
                                   4132 ;        Display  name at address.
      00190A 18 D7                 4133         .word      LINK
                           00190C  4134 LINK = . 
      00190C 03                    4135         .byte      3
      00190D 2E 49 44              4136         .ascii     ".ID"
      001910                       4137 DOTID:
      001910 CD 06 83         [ 4] 4138         CALL     QDUP    ;if zero no name
      001913 CD 03 E7         [ 4] 4139         CALL     QBRAN
      001916 19 26                 4140         .word      DOTI1
      001918 CD 0B 11         [ 4] 4141         CALL     COUNT
      00191B CD 03 B4         [ 4] 4142         CALL     DOLIT
      00191E 00 1F                 4143         .word      0x1F
      001920 CD 05 25         [ 4] 4144         CALL     ANDD    ;mask lexicon bits
      001923 CC 18 15         [ 2] 4145         JP     UTYPE
      001926 CD 0E DF         [ 4] 4146 DOTI1:  CALL     DOTQP
      001929 09                    4147         .byte      9
      00192A 20 6E 6F 4E 61 6D 65  4148         .ascii     " noName"
      001931 81               [ 4] 4149         RET
                                   4150 
                           000000  4151 WANT_SEE=0
                           000000  4152 .if WANT_SEE 
                                   4153 ;       SEE     ( -- ; <string> )
                                   4154 ;       A simple decompiler.
                                   4155 ;       Updated for byte machines.
                                   4156         .word      LINK
                                   4157 LINK = . 
                                   4158         .byte      3
                                   4159         .ascii     "SEE"
                                   4160 SEE:
                                   4161         CALL     TICK    ;starting address
                                   4162         CALL     CR
                                   4163         CALL     ONEM
                                   4164 SEE1:   CALL     ONEP
                                   4165         CALL     DUPP
                                   4166         CALL     AT
                                   4167         CALL     DUPP
                                   4168         CALL     QBRAN
                                   4169         .word    SEE2
                                   4170         CALL     TNAME   ;?is it a name
                                   4171 SEE2:   CALL     QDUP    ;name address or zero
                                   4172         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173         .word    SEE3
                                   4174         CALL     SPACE
                                   4175         CALL     DOTID   ;display name
                                   4176         CALL     ONEP
                                   4177         JRA      SEE4
                                   4178 SEE3:   CALL     DUPP
                                   4179         CALL     CAT
                                   4180         CALL     UDOT    ;display number
                                   4181 SEE4:   CALL     NUFQ    ;user control
                                   4182         CALL     QBRAN
                                   4183         .word    SEE1
                                   4184         JP     DROP
                                   4185 .endif ; WANT_SEE 
                                   4186 
                                   4187 ;       WORDS   ( -- )
                                   4188 ;       Display names in vocabulary.
      001932 19 0C                 4189         .word      LINK
                           001934  4190 LINK = . 
      001934 05                    4191         .byte      5
      001935 57 4F 52 44 53        4192         .ascii     "WORDS"
      00193A                       4193 WORDS:
      00193A CD 0E A0         [ 4] 4194         CALL     CR
      00193D CD 06 19         [ 4] 4195         CALL     CNTXT   ;only in context
      001940 CD 04 32         [ 4] 4196 WORS1:  CALL     AT
      001943 CD 06 83         [ 4] 4197         CALL     QDUP    ;?at end of list
      001946 CD 03 E7         [ 4] 4198         CALL     QBRAN
      001949 19 5C                 4199         .word      WORS2
      00194B CD 04 D9         [ 4] 4200         CALL     DUPP
      00194E CD 0E 58         [ 4] 4201         CALL     SPACE
      001951 CD 19 10         [ 4] 4202         CALL     DOTID   ;display a name
      001954 CD 09 B2         [ 4] 4203         CALL     CELLM
      001957 CD 03 FE         [ 4] 4204         CALL     BRAN
      00195A 19 40                 4205         .word      WORS1
      00195C 81               [ 4] 4206 WORS2:  RET
                                   4207 
                                   4208         
                                   4209 ;; Hardware reset
                                   4210 
                                   4211 ;       hi      ( -- )
                                   4212 ;       Display sign-on message.
      00195D 19 34                 4213         .word      LINK
                           00195F  4214 LINK = . 
      00195F 02                    4215         .byte      2
      001960 68 69                 4216         .ascii     "hi"
      001962                       4217 HI:
      001962 CD 0E A0         [ 4] 4218         CALL     CR
      001965 CD 0E DF         [ 4] 4219         CALL     DOTQP   ;initialize I/O
      001968 0F                    4220         .byte      15
      001969 73 74 6D 38 65 46 6F  4221         .ascii     "stm8eForth v"
             72 74 68 20 76
      001975 33                    4222 	.byte      VER+'0'
      001976 2E                    4223         .byte      '.' 
      001977 30                    4224 	.byte      EXT+'0' ;version
      001978 CC 0E A0         [ 2] 4225         JP     CR
                                   4226 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                           000000  4227 WANT_DEBUG=0
                           000000  4228 .if WANT_DEBUG 
                                   4229 ;       DEBUG      ( -- )
                                   4230 ;       Display sign-on message.
                                   4231 ;        .word      LINK
                                   4232 LINK = . 
                                   4233         .byte      5
                                   4234         .ascii     "DEBUG"
                                   4235 DEBUG:
                                   4236 	CALL DOLIT
                                   4237 	.word 0x65
                                   4238 	CALL EMIT
                                   4239 	CALL DOLIT
                                   4240 	.word 0
                                   4241  	CALL ZLESS 
                                   4242 	CALL DOLIT
                                   4243 	.word 0xFFFE
                                   4244 	CALL ZLESS 
                                   4245 	CALL UPLUS 
                                   4246  	CALL DROP 
                                   4247 	CALL DOLIT
                                   4248 	.word 3
                                   4249 	CALL UPLUS 
                                   4250 	CALL UPLUS 
                                   4251  	CALL DROP
                                   4252 	CALL DOLIT
                                   4253 	.word 0x43
                                   4254 	CALL UPLUS 
                                   4255  	CALL DROP
                                   4256 	CALL EMIT
                                   4257 	CALL DOLIT
                                   4258 	.word 0x4F
                                   4259 	CALL DOLIT
                                   4260 	.word 0x6F
                                   4261  	CALL XORR
                                   4262 	CALL DOLIT
                                   4263 	.word 0xF0
                                   4264  	CALL ANDD
                                   4265 	CALL DOLIT
                                   4266 	.word 0x4F
                                   4267  	CALL ORR
                                   4268 	CALL EMIT
                                   4269 	CALL DOLIT
                                   4270 	.word 8
                                   4271 	CALL DOLIT
                                   4272 	.word 6
                                   4273  	CALL SWAPP
                                   4274 	CALL OVER
                                   4275 	CALL XORR
                                   4276 	CALL DOLIT
                                   4277 	.word 3
                                   4278 	CALL ANDD 
                                   4279 	CALL ANDD
                                   4280 	CALL DOLIT
                                   4281 	.word 0x70
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4282 	CALL UPLUS 
                                   4283 	CALL DROP
                                   4284 	CALL EMIT
                                   4285 	CALL DOLIT
                                   4286 	.word 0
                                   4287 	CALL QBRAN
                                   4288 	.word DEBUG1
                                   4289 	CALL DOLIT
                                   4290 	.word 0x3F
                                   4291 DEBUG1:
                                   4292 	CALL DOLIT
                                   4293 	.word 0xFFFF
                                   4294 	CALL QBRAN
                                   4295 	.word DEBUG2
                                   4296 	CALL DOLIT
                                   4297 	.word 0x74
                                   4298 	CALL BRAN
                                   4299 	.word DEBUG3
                                   4300 DEBUG2:
                                   4301 	CALL DOLIT
                                   4302 	.word 0x21
                                   4303 DEBUG3:
                                   4304 	CALL EMIT
                                   4305 	CALL DOLIT
                                   4306 	.word 0x68
                                   4307 	CALL DOLIT
                                   4308 	.word 0x80
                                   4309 	CALL STORE
                                   4310 	CALL DOLIT
                                   4311 	.word 0x80
                                   4312 	CALL AT
                                   4313 	CALL EMIT
                                   4314 	CALL DOLIT
                                   4315 	.word 0x4D
                                   4316 	CALL TOR
                                   4317 	CALL RAT
                                   4318 	CALL RFROM
                                   4319 	CALL ANDD
                                   4320 	CALL EMIT
                                   4321 	CALL DOLIT
                                   4322 	.word 0x61
                                   4323 	CALL DOLIT
                                   4324 	.word 0xA
                                   4325 	CALL TOR
                                   4326 DEBUG4:
                                   4327 	CALL DOLIT
                                   4328 	.word 1
                                   4329 	CALL UPLUS 
                                   4330 	CALL DROP
                                   4331 	CALL DONXT
                                   4332 	.word DEBUG4
                                   4333 	CALL EMIT
                                   4334 	CALL DOLIT
                                   4335 	.word 0x656D
                                   4336 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4337 	.word 0x100
                                   4338 	CALL UMSTA
                                   4339 	CALL SWAPP
                                   4340 	CALL DOLIT
                                   4341 	.word 0x100
                                   4342 	CALL UMSTA
                                   4343 	CALL SWAPP 
                                   4344 	CALL DROP
                                   4345 	CALL EMIT
                                   4346 	CALL EMIT
                                   4347 	CALL DOLIT
                                   4348 	.word 0x2043
                                   4349 	CALL DOLIT
                                   4350 	.word 0
                                   4351 	CALL DOLIT
                                   4352 	.word 0x100
                                   4353 	CALL UMMOD
                                   4354 	CALL EMIT
                                   4355 	CALL EMIT
                                   4356 	;JP ORIG
                                   4357 	RET
                                   4358 .endif ; WANT_DEBUG 
                                   4359 
                                   4360 
                                   4361 ;       'BOOT   ( -- a )
                                   4362 ;       The application startup vector.
      00197B 19 5F                 4363         .word      LINK
                           00197D  4364 LINK = . 
      00197D 05                    4365         .byte      5
      00197E 27 42 4F 4F 54        4366         .ascii     "'BOOT"
      001983                       4367 TBOOT:
      001983 CD 05 86         [ 4] 4368         CALL     DOVAR
      001986 40 02                 4369         .word    APP_RUN      ;application to boot
                                   4370 
                                   4371 ;       COLD    ( -- )
                                   4372 ;       The hilevel cold start s=ence.
      001988 19 7D                 4373         .word      LINK
                           00198A  4374         LINK = . 
      00198A 04                    4375         .byte      4
      00198B 43 4F 4C 44           4376         .ascii     "COLD"
      00198F                       4377 COLD:
                           000000  4378 .if WANT_DEBUG
                                   4379         CALL DEBUG
                                   4380 .endif ; WANT_DEBUG
      00198F CD 03 B4         [ 4] 4381 COLD1:  CALL     DOLIT
      001992 00 2B                 4382         .word      UZERO
      001994 CD 03 B4         [ 4] 4383 	CALL     DOLIT
      001997 00 06                 4384         .word      UPP
      001999 CD 03 B4         [ 4] 4385         CALL     DOLIT
      00199C 00 1A                 4386 	.word      UEND-UZERO
      00199E CD 0B 75         [ 4] 4387         CALL     CMOVE   ;initialize user area
                                   4388 
                                   4389 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019A1 90 CE 40 02      [ 2] 4390         ldw y,APP_RUN 
      0019A5 26 0B            [ 1] 4391         jrne 0$
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0019A7 1D 00 02         [ 2] 4392         subw x,#CELLL 
      0019AA 90 AE 19 62      [ 2] 4393         ldw y,#HI  
      0019AE FF               [ 2] 4394         ldw (x),y
      0019AF CD 1B 5B         [ 4] 4395         call UPDATRUN 
      0019B2                       4396 0$:        
                                   4397 ; update LAST with APP_LAST 
                                   4398 ; if APP_LAST > LAST else do the opposite
      0019B2 90 CE 40 00      [ 2] 4399         ldw y,APP_LAST 
      0019B6 90 B3 1A         [ 2] 4400         cpw y,ULAST 
      0019B9 22 05            [ 1] 4401         jrugt 1$ 
                                   4402 ; save LAST at APP_LAST  
      0019BB CD 1B 43         [ 4] 4403         call UPDATLAST 
      0019BE 20 06            [ 2] 4404         jra 2$
      0019C0                       4405 1$: ; update LAST with APP_LAST 
      0019C0 90 BF 1A         [ 2] 4406         ldw ULAST,y
      0019C3 90 BF 14         [ 2] 4407         ldw UCNTXT,y
      0019C6                       4408 2$:  
                                   4409 ; update APP_CP if < app_space 
      0019C6 90 CE 40 04      [ 2] 4410         ldw y,APP_CP  
      0019CA 90 B3 18         [ 2] 4411         cpw y,UCP   
      0019CD 24 06            [ 1] 4412         jruge 3$ 
      0019CF CD 1B 6C         [ 4] 4413         call UPDATCP
      0019D2 90 BE 18         [ 2] 4414         ldw y,UCP   
      0019D5                       4415 3$:
      0019D5 90 BF 18         [ 2] 4416         ldw UCP,y                 
                                   4417 ; update UVP with APP_VP  
                                   4418 ; if APP_VP>UVP else do the opposite 
      0019D8 90 CE 40 06      [ 2] 4419         ldw y,APP_VP 
      0019DC 90 B3 16         [ 2] 4420         cpw y,UVP 
      0019DF 22 05            [ 1] 4421         jrugt 4$
      0019E1 CD 1B 83         [ 4] 4422         call UPDATVP 
      0019E4 20 03            [ 2] 4423         jra 6$
      0019E6                       4424 4$: ; update UVP with APP_VP 
      0019E6 90 BF 16         [ 2] 4425         ldw UVP,y 
      0019E9                       4426 6$:      
      0019E9 CD 13 A3         [ 4] 4427         CALL     PRESE   ;initialize data stack and TIB
      0019EC CD 19 83         [ 4] 4428         CALL     TBOOT
      0019EF CD 0B 5E         [ 4] 4429         CALL     ATEXE   ;application boot
      0019F2 CD 16 6C         [ 4] 4430         CALL     OVERT
      0019F5 CC 13 C0         [ 2] 4431         JP     QUIT    ;start interpretation
                                   4432 
                           000001  4433 WANT_MATH_CONST = 1 
                           000001  4434 .if WANT_MATH_CONST 
                                   4435         ; irrational constants 
                                   4436         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4437         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      0019F8 19 8A                   31         .word LINK 
                           0019FA    32         LINK=.
      0019FA 02                      33         .byte 2
      0019FB 50 49                   34         .ascii "PI" 
      0019FD                         35 PII:
      0019FD 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      001A00 90 AE 01 63      [ 2]   37         ldw y,#355 
      001A04 EF 02            [ 2]   38         ldw (2,x),y 
      001A06 90 AE 00 71      [ 2]   39         ldw y,#113 
      001A0A FF               [ 2]   40         ldw (x),y 
      001A0B 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      001A0C 19 FA                   48         .word LINK 
                           001A0E    49         LINK=.
      001A0E 05                      50         .byte 5 
      001A0F 53 51 52 54 32          51         .ascii "SQRT2" 
      001A14                         52 SQRT2:
      001A14 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      001A17 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A1B EF 02            [ 2]   55         ldw (2,x),y 
      001A1D 90 AE 36 24      [ 2]   56         ldw y,#13860 
      001A21 FF               [ 2]   57         ldw (x),y 
      001A22 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      001A23 1A 0E                   63         .word LINK 
                           001A25    64         LINK=.
      001A25 05                      65         .byte 5
      001A26 53 51 52 54 33          66         .ascii "SQRT3" 
      001A2B                         67 SQRT3: 
      001A2B 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001A2E 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001A32 EF 02            [ 2]   70     ldw (2,x),y 
      001A34 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      001A38 FF               [ 2]   72     ldw (x),y 
      001A39 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      001A3A 1A 25                   78         .word LINK 
                           001A3C    79         LINK=.
      001A3C 01                      80         .byte 1
      001A3D 45                      81         .ascii "E" 
      001A3E                         82 ENEPER:
      001A3E 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001A41 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001A45 EF 02            [ 2]   85     ldw (2,x),y 
      001A47 90 AE 29 32      [ 2]   86     ldw y,#10546 
      001A4B FF               [ 2]   87     ldw (x),y 
      001A4C 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001A4D 1A 3C                   92         .word LINK 
                           001A4F    93         LINK=.
      001A4F 06                      94         .byte 6 
      001A50 53 51 52 54 31 30       95         .ascii "SQRT10" 
      001A56                         96 SQRT10:
      001A56 1D 00 04         [ 2]   97     subw x,#2*CELLL
      001A59 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001A5D EF 02            [ 2]   99     ldw (2,x),y 
      001A5F 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001A63 FF               [ 2]  101     ldw (x),y 
      001A64 81               [ 4]  102     ret 
                                    103 
                                    104 ;   12RT2 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001A65 1A 4F                  107         .word LINK 
                           001A67   108         LINK=. 
      001A67 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A68 31 32 52 54 32         110         .ascii "12RT2"
      001A6D                        111 RT12_2:
      001A6D 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A70 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A74 EF 02            [ 2]  114     ldw (2,x),y 
      001A76 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A7A FF               [ 2]  116     ldw (x),y 
      001A7B 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A7C 1A 67                  122         .word LINK 
                           001A7E   123         LINK=.
      001A7E 05                     124         .byte 5 
      001A7F 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001A84                        126 LOG2S:
      001A84 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A87 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001A8B EF 02            [ 2]  129     ldw (2,x),y 
      001A8D 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001A91 FF               [ 2]  131     ldw (x),y 
      001A92 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001A93 1A 7E                  137         .word LINK 
                           001A95   138         LINK=.
      001A95 04                     139         .byte 4 
      001A96 4C 4E 32 53            140         .ascii "LN2S" 
      001A9A                        141 LN2S: 
      001A9A 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001A9D 90 AE 01 E5      [ 2]  143     ldw y,#485
      001AA1 EF 02            [ 2]  144     ldw (2,x),y 
      001AA3 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001AA7 FF               [ 2]  146     ldw (x),y 
      001AA8 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4438 .endif ; WANT_MATH_CONST
                                   4439 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4440         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001AA9 1A 95                   30     .word LINK 
                           001AAB    31     LINK=.
      001AAB 03                      32     .byte 3 
      001AAC 46 50 21                33     .ascii "FP!"
      001AAF                         34 fptr_store:
      001AAF 90 93            [ 1]   35     ldw y,x
      001AB1 90 FE            [ 2]   36     ldw y,(y)
      001AB3 90 9F            [ 1]   37     ld a,yl 
      001AB5 B7 32            [ 1]   38     ld FPTR,a 
      001AB7 1C 00 02         [ 2]   39     addw x,#CELLL 
      001ABA 90 93            [ 1]   40     ldw y,x 
      001ABC 90 FE            [ 2]   41     ldw y,(y)
      001ABE 90 BF 33         [ 2]   42     ldw PTR16,y
      001AC1 1C 00 02         [ 2]   43     addw x,#CELLL 
      001AC4 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001AC5 1A AB                   51     .word LINK 
                           001AC7    52 LINK=.
      001AC7 06                      53     .byte 6 
      001AC8 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001ACE                         55 EEPROM: 
      001ACE 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001AD2 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001AD5 EF 02            [ 2]   58     ldw (2,x),y 
      001AD7 90 5F            [ 1]   59     clrw y 
      001AD9 FF               [ 2]   60     ldw (x),y 
      001ADA 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001ADB 1A C7                   67 	.word LINK 
                           001ADD    68 	LINK=.
      001ADD 08                      69 	.byte 8 
      001ADE 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001AE6                         71 EEPLAST:
      001AE6 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001AE9 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001AED EF 02            [ 2]   74 	ldw (2,x),y 
      001AEF 90 5F            [ 1]   75 	clrw y 
      001AF1 FF               [ 2]   76 	ldw (x),y 
      001AF2 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001AF3 1A DD                   83 	.word LINK 
                           001AF5    84 	LINK=.
      001AF5 07                      85 	.byte 7
      001AF6 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001AFD                         87 EEPRUN:
      001AFD 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B00 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B04 EF 02            [ 2]   90 	ldw (2,x),y 
      001B06 90 5F            [ 1]   91 	clrw y 
      001B08 FF               [ 2]   92 	ldw (x),y 
      001B09 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B0A 1A F5                   99 	.word LINK
                           001B0C   100 	LINK=.
      001B0C 06                     101 	.byte 6 
      001B0D 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B13                        103 EEPCP:
      001B13 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B16 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B1A EF 02            [ 2]  106 	ldw (2,x),y 
      001B1C 90 5F            [ 1]  107 	clrw y 
      001B1E FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B1F 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B20 1B 0C                  115 	.word LINK
                           001B22   116 	LINK=.
      001B22 06                     117 	.byte 6
      001B23 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B29                        119 EEPVP:
      001B29 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B2C 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B30 EF 02            [ 2]  122 	ldw (2,x),y 
      001B32 90 5F            [ 1]  123 	clrw y 
      001B34 FF               [ 2]  124 	ldw (x),y 
      001B35 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B36 1B 22                  131 	.word LINK 
                           001B38   132 	LINK=.
      001B38 0A                     133 	.byte 10
      001B39 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B43                        135 UPDATLAST:
      001B43 CD 06 45         [ 4]  136 	call LAST
      001B46 CD 04 32         [ 4]  137 	call AT  
      001B49 CD 1A E6         [ 4]  138 	call EEPLAST
      001B4C CC 1C BF         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B4F 1B 38                  145 	.word LINK
                           001B51   146 	LINK=.
      001B51 09                     147 	.byte 9
      001B52 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B5B                        149 UPDATRUN:
      001B5B CD 1A FD         [ 4]  150 	call EEPRUN
      001B5E CC 1C BF         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B61 1B 51                  157 	.word LINK 
                           001B63   158 	LINK=.
      001B63 08                     159 	.byte 8 
      001B64 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B6C                        161 UPDATCP:
      001B6C CD 06 35         [ 4]  162 	call CPP 
      001B6F CD 04 32         [ 4]  163 	call AT 
      001B72 CD 1B 13         [ 4]  164 	call EEPCP 
      001B75 CC 1C BF         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B78 1B 63                  171 	.word LINK
                           001B7A   172 	LINK=.
      001B7A 08                     173 	.byte 8 
      001B7B 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B83                        175 UPDATVP:
      001B83 CD 06 27         [ 4]  176 	call VPP 
      001B86 CD 04 32         [ 4]  177 	call AT
      001B89 CD 1B 29         [ 4]  178 	call EEPVP 
      001B8C CC 1C BF         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001B8F 1B 7A                  186     .word LINK 
                           001B91   187 LINK=.
      001B91 02                     188     .byte 2
      001B92 46 40                  189     .ascii "F@"
      001B94                        190 farat:
      001B94 CD 1A AF         [ 4]  191     call fptr_store
      001B97 92 BC 00 32      [ 5]  192     ldf a,[FPTR]
      001B9B 1D 00 02         [ 2]  193     subw x,#CELLL 
      001B9E F7               [ 1]  194     ld (x),a 
      001B9F 90 AE 00 01      [ 2]  195     ldw y,#1
      001BA3 91 AF 00 32      [ 1]  196     ldf a,([FPTR],y)
      001BA7 E7 01            [ 1]  197     ld (1,x),a
      001BA9 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001BAA 1B 91                  204     .word LINK
                           001BAC   205     LINK=.
      001BAC 03                     206     .byte 3 
      001BAD 46 43 40               207     .ascii "FC@" 
      001BB0                        208 farcat:
      001BB0 CD 1A AF         [ 4]  209     call fptr_store 
      001BB3 92 BC 00 32      [ 5]  210     ldf a,[FPTR]
      001BB7 1D 00 02         [ 2]  211     subw x,#CELLL 
      001BBA E7 01            [ 1]  212     ld (1,x),a 
      001BBC 7F               [ 1]  213     clr (x)
      001BBD 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001BBE 1B AC                  221     .word LINK 
                           001BC0   222 LINK=.
      001BC0 06                     223     .byte 6 
      001BC1 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001BC7                        225 unlock_eeprom:
      001BC7 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001BCB 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001BCF 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BD3 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BD7 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BDC 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001BDD 1B C0                  238     .word LINK 
                           001BDF   239 LINK=. 
      001BDF 06                     240     .byte 6 
      001BE0 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001BE6                        242 unlock_flash:
      001BE6 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001BEA 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001BEE 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BF2 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BF6 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001BFB 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001BFC 1B DF                  255 	.word LINK 
                           001BFE   256 	LINK=.
      001BFE 06                     257 	.byte 6
      001BFF 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001C05                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001C05 90 BE 33         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C08 3D 32            [ 1]  263 	tnz FPTR 
      001C0A 26 16            [ 1]  264 	jrne 4$
      001C0C 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001C10 24 10            [ 1]  266     jruge 4$
      001C12 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001C16 25 0D            [ 1]  268     jrult 9$
      001C18 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001C1C 22 07            [ 1]  270 	jrugt 9$
      001C1E CD 1B C7         [ 4]  271 	call unlock_eeprom
      001C21 81               [ 4]  272 	ret 
      001C22 CD 1B E6         [ 4]  273 4$: call unlock_flash
      001C25 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001C26 1B FE                  281 	.word LINK 
                           001C28   282 	LINK=.
      001C28 04                     283 	.byte 4 
      001C29 4C 4F 43 4B            284 	.ascii "LOCK" 
      001C2D                        285 lock: 
      001C2D 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C31 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C35 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001C36 1C 28                  294 	.word LINK 
                           001C38   295 	LINK=. 
      001C38 08                     296 	.byte 8 
      001C39 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001C41                        298 inc_fptr:
      001C41 3C 34            [ 1]  299 	inc PTR8 
      001C43 26 08            [ 1]  300 	jrne 1$
      001C45 90 BE 32         [ 2]  301 	ldw y,FPTR 
      001C48 90 5C            [ 2]  302 	incw y 
      001C4A 90 BF 32         [ 2]  303 	ldw FPTR,y 
      001C4D 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001C4E 1C 38                  315 	.word LINK 
                           001C50   316 	LINK=. 
      001C50 07                     317 	.byte 7 
      001C51 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001C58                        320 write_byte:
      001C58 90 93            [ 1]  321 	ldw y,x 
      001C5A 90 FE            [ 2]  322 	ldw y,(y)
      001C5C 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C5F 90 9F            [ 1]  324 	ld a,yl
      001C61 92 BD 00 32      [ 4]  325 	ldf [FPTR],a
      001C65 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C6A 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001C6C 1C 50                  335     .word LINK 
                           001C6E   336 	LINK=.
      001C6E 04                     337     .byte 4 
      001C6F 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001C73                        343 ee_cstore:
      001C73 52 02            [ 2]  344 	sub sp,#VSIZE
      001C75 CD 1A AF         [ 4]  345     call fptr_store
      001C78 E6 01            [ 1]  346 	ld a,(1,x)
      001C7A 43               [ 1]  347 	cpl a 
      001C7B 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001C7D 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001C7F CD 1C 05         [ 4]  350 	call unlock 
                                    351 	; check if option
      001C82 3D 32            [ 1]  352 	tnz FPTR 
      001C84 26 19            [ 1]  353 	jrne 2$
      001C86 90 BE 33         [ 2]  354 	ldw y,PTR16 
      001C89 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001C8D 2B 10            [ 1]  356 	jrmi 2$
      001C8F 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001C93 2A 0A            [ 1]  358 	jrpl 2$
      001C95 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001C97 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001C9B 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001C9F                        363 2$: 
      001C9F CD 1C 58         [ 4]  364 	call write_byte 	
      001CA2 0D 02            [ 1]  365 	tnz (OPT,sp)
      001CA4 27 0D            [ 1]  366 	jreq 3$ 
      001CA6 7B 01            [ 1]  367     ld a,(BTW,sp)
      001CA8 90 5F            [ 1]  368     clrw y
      001CAA 90 97            [ 1]  369 	ld yl,a 
      001CAC 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001CAF FF               [ 2]  371 	ldw (x),y 
      001CB0 CD 1C 58         [ 4]  372 	call write_byte
      001CB3                        373 3$: 
      001CB3 CD 1C 2D         [ 4]  374 	call lock 
      001CB6 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001CB8 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001CB9 1C 6E                  382 	.word LINK 
                           001CBB   383 	LINK=.
      001CBB 03                     384 	.byte 3 
      001CBC 45 45 21               385 	.ascii "EE!"
      001CBF                        386 ee_store:
      001CBF CD 1A AF         [ 4]  387 	call fptr_store 
      001CC2 CD 1C 05         [ 4]  388 	call unlock 
      001CC5 90 93            [ 1]  389 	ldw y,x 
      001CC7 90 FE            [ 2]  390 	ldw y,(y)
      001CC9 90 89            [ 2]  391 	pushw y 
      001CCB 90 5E            [ 1]  392 	swapw y 
      001CCD FF               [ 2]  393 	ldw (x),y 
      001CCE CD 1C 58         [ 4]  394 	call write_byte 
      001CD1 90 85            [ 2]  395 	popw y 
      001CD3 1D 00 02         [ 2]  396 	subw x,#CELLL
      001CD6 FF               [ 2]  397 	ldw (x),y 
      001CD7 CD 1C 58         [ 4]  398 	call write_byte
      001CDA CC 1C 2D         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001CDD 1C BB                  407 	.word LINK 
                           001CDF   408 	LINK=. 
      001CDF 09                     409 	.byte 9 
      001CE0 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001CE9                        411 row_erase:
      001CE9 CD 1A AF         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001CEC 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001CEF 90 AE 1D 36      [ 2]  416 	ldw y,#row_erase_proc
      001CF3 FF               [ 2]  417 	ldw (x),y 
      001CF4 CD 0B 39         [ 4]  418 	call PAD 
      001CF7 90 AE 1D 5D      [ 2]  419 	ldw y,#row_erase_proc_end 
      001CFB 72 A2 1D 36      [ 2]  420 	subw y,#row_erase_proc
      001CFF 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001D02 FF               [ 2]  422 	ldw (x),y 
      001D03 CD 0B 75         [ 4]  423 	call CMOVE 
      001D06                        424 block_erase:
      001D06 90 BE 33         [ 2]  425 	ldw y,FPTR+1
      001D09 90 A3 21 80      [ 2]  426 	cpw y,#app_space 
      001D0D 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001D0F 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001D13 24 01            [ 1]  430 	jruge 1$
      001D15 81               [ 4]  431 	ret ; bad address 
      001D16 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D1A 23 01            [ 2]  433 	jrule 2$ 
      001D1C 81               [ 4]  434 	ret ; bad address 
      001D1D                        435 2$:	
      001D1D CD 1B C7         [ 4]  436 	call unlock_eeprom 
      001D20 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001D22                        439 erase_flash:
      001D22 CD 1B E6         [ 4]  440 	call unlock_flash 
      001D25                        441 proceed_erase:
      001D25 CD 0B 39         [ 4]  442 	call PAD 
      001D28 90 93            [ 1]  443 	ldw y,x
      001D2A 90 FE            [ 2]  444 	ldw y,(y)
      001D2C 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001D2F 90 FD            [ 4]  446 	call (y) 
      001D31 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D35 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001D36                        451 row_erase_proc:
      001D36 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D3A 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D3E 4F               [ 1]  454 	clr a 
      001D3F 90 5F            [ 1]  455 	clrw y 
      001D41 91 A7 00 32      [ 1]  456 	ldf ([FPTR],y),a
      001D45 90 5C            [ 2]  457     incw y
      001D47 91 A7 00 32      [ 1]  458 	ldf ([FPTR],y),a
      001D4B 90 5C            [ 2]  459     incw y
      001D4D 91 A7 00 32      [ 1]  460 	ldf ([FPTR],y),a
      001D51 90 5C            [ 2]  461     incw y
      001D53 91 A7 00 32      [ 1]  462 	ldf ([FPTR],y),a
      001D57 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D5C 81               [ 4]  464 	ret
      001D5D                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001D5D                        478 copy_buffer:
      001D5D 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001D5F 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D63 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D67 90 5F            [ 1]  483 	clrw y
      001D69 F6               [ 1]  484 1$:	ld a,(x)
      001D6A 91 A7 00 32      [ 1]  485 	ldf ([FPTR],y),a
      001D6E 5C               [ 2]  486 	incw x 
      001D6F 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D71 0A 01            [ 1]  488 	dec (BCNT,sp)
      001D73 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001D75 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D7A 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001D7B 81               [ 4]  493 	ret 
      001D7C                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001D7C                        500 copy_prog_to_ram:
      001D7C 1D 00 06         [ 2]  501 	subw x,#6
      001D7F 90 AE 1D 5D      [ 2]  502 	ldw y,#copy_buffer 
      001D83 EF 04            [ 2]  503 	ldw (4,x),y 
      001D85 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001D89 EF 02            [ 2]  505 	ldw (2,x),y 
      001D8B 90 AE 1D 7C      [ 2]  506 	ldw y,#copy_buffer_end 
      001D8F 72 A2 1D 5D      [ 2]  507 	subw y,#copy_buffer  
      001D93 FF               [ 2]  508 	ldw (x),y 
      001D94 CD 0B 75         [ 4]  509 	call CMOVE 
      001D97 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001D98 1C DF                  519 	.word LINK 
                           001D9A   520 	LINK=.
      001D9A 06                     521 	.byte 6 
      001D9B 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001DA1                        523 write_row:
      001DA1 CD 1A AF         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001DA4 A6 80            [ 1]  526 	ld a,#0x80 
      001DA6 B4 34            [ 1]  527 	and a,PTR8 
      001DA8 B7 34            [ 1]  528 	ld PTR8,a  
      001DAA CD 1D 7C         [ 4]  529 	call copy_prog_to_ram
      001DAD CD 1C 05         [ 4]  530 	call unlock
      001DB0 90 93            [ 1]  531 	ldw y,x 
      001DB2 90 FE            [ 2]  532 	ldw y,(y)
      001DB4 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001DB7 89               [ 2]  534 	pushw x 
      001DB8 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001DB9 CD 17 00         [ 4]  536 	call TIBBASE
      001DBC CD 1C 2D         [ 4]  537 	call lock
      001DBF 85               [ 2]  538 	popw x 
      001DC0 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001DC1 1D 9A                  547 		.word LINK 
                           001DC3   548 		LINK=.
      001DC3 07                     549 		.byte 7 
      001DC4 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001DCB                        551 set_option: 
      001DCB 90 93            [ 1]  552 		ldw y,x 
      001DCD 90 FE            [ 2]  553 		ldw y,(y)
      001DCF 27 06            [ 1]  554 		jreq 1$
      001DD1 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001DD5 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001DD7 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001DDA 81               [ 4]  559 		ret
      001DDB 90 58            [ 2]  560 2$:		sllw y 
      001DDD 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001DE1 FF               [ 2]  562 		ldw (x),y 
      001DE2 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001DE5 90 5F            [ 1]  564 		clrw y 
      001DE7 FF               [ 2]  565 		ldw (x),y 
      001DE8 CD 1C 73         [ 4]  566 		call ee_cstore
      001DEB 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001DEC 1D C3                  576 	.word LINK  
                           001DEE   577 	LINK=.
      001DEE 08                     578 	.byte 8 
      001DEF 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001DF7                        580 pristine:
                                    581 ;;; erase EEPROM
      001DF7 CD 1A CE         [ 4]  582 	call EEPROM 
      001DFA CD 06 BF         [ 4]  583 1$:	call DDUP 
      001DFD CD 1C E9         [ 4]  584 	call row_erase
      001E00 90 93            [ 1]  585 	ldw y,x 
      001E02 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001E05 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001E09 EF 02            [ 2]  588 	ldw (2,x),y
      001E0B 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001E0F 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001E11 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001E15 FF               [ 2]  593 2$:	ldw (x),y   
      001E16 90 5F            [ 1]  594 	clrw y 
      001E18 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E1A CD 06 BF         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E1D CD 1D CB         [ 4]  597 	call set_option
      001E20 90 93            [ 1]  598 	ldw y,x 
      001E22 90 FE            [ 2]  599 	ldw y,(y)
      001E24 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001E26 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001E2A 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001E2C 90 AE 21 80      [ 2]  604 	ldw y,#app_space
      001E30 EF 02            [ 2]  605 	ldw (2,x),y  
      001E32 90 5F            [ 1]  606 	clrw y 
      001E34 FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001E35 CD 1C E9         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001E38 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001E3B 90 5F            [ 1]  611 	clrw y  
      001E3D FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001E3E CD 04 D9         [ 4]  613 	call DUPP  
      001E41 CD 1E 5E         [ 4]  614 	call reset_vector
      001E44 90 93            [ 1]  615 	ldw y,x 
      001E46 90 FE            [ 2]  616 	ldw y,(y)
      001E48 90 5C            [ 2]  617 	incw y   ; next vector 
      001E4A 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001E4E 25 ED            [ 1]  619 	jrult 4$
      001E50 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001E53 1D EE                  628 	.word LINK 
                           001E55   629 	LINK=. 
      001E55 08                     630 	.byte 8 
      001E56 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001E5E                        632 reset_vector:
      001E5E 90 93            [ 1]  633 	ldw y,x
      001E60 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001E63 90 FE            [ 2]  635 	ldw y,(y)
      001E65 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001E69 27 3A            [ 1]  637 	jreq 9$
      001E6B 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001E6F 22 34            [ 1]  639 	jrugt 9$  
      001E71 90 58            [ 2]  640 	sllw y 
      001E73 90 58            [ 2]  641 	sllw y 
      001E75 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001E79 90 BF 24         [ 2]  643 	ldw YTEMP,y
      001E7C 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001E7F EF 02            [ 2]  645 	ldw (2,x),y 
      001E81 90 5F            [ 1]  646 	clrw y
      001E83 FF               [ 2]  647 	ldw (x),y 
      001E84 A6 82            [ 1]  648 	ld a,#0x82 
      001E86 90 95            [ 1]  649 	ld yh,a
      001E88 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E8A CD 1C BF         [ 4]  651 	call ee_store
      001E8D 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001E90 90 5F            [ 1]  653 	clrw y 
      001E92 FF               [ 2]  654 	ldw (x),y 
      001E93 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001E97 EF 04            [ 2]  656 	ldw (4,x),y 
      001E99 90 BE 24         [ 2]  657 	ldw y,YTEMP  
      001E9C 72 A9 00 02      [ 2]  658 	addw y,#2
      001EA0 EF 02            [ 2]  659 	ldw (2,x),y 
      001EA2 CD 1C BF         [ 4]  660 	call ee_store
      001EA5 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= a are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( a -- )
                                    669 ;------------------------------
      001EA6 1E 55                  670 	.word LINK 
                           001EA8   671 	LINK=.
      001EA8 07                     672 	.byte 7
      001EA9 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001EB0                        679 CHKIVEC:
      001EB0 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001EB2 90 93            [ 1]  681 	ldw y,x 
      001EB4 90 FE            [ 2]  682 	ldw y,(y)
      001EB6 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001EB8 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001EBA AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001EBD BF 33            [ 2]  686 	ldw PTR16,X
      001EBF AE FF FC         [ 2]  687 	ldw x,#-4 
      001EC2 1C 00 04         [ 2]  688 1$:	addw x,#4
      001EC5 A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001EC8 27 22            [ 1]  690 	jreq 9$
      001ECA 90 93            [ 1]  691 	ldw y,x  
      001ECC 91 D6 33         [ 4]  692 	ld a,([PTR16],y)
      001ECF 11 03            [ 1]  693 	cp a,(CADR,sp)
      001ED1 25 EF            [ 1]  694 	jrult 1$
      001ED3 90 5C            [ 2]  695 	incw y 
      001ED5 91 D6 33         [ 4]  696 	ld a,([PTR16],y)
      001ED8 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001EDA 25 E6            [ 1]  698 	jrult 1$ 
      001EDC 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001EDE 54               [ 2]  700 	srlw x
      001EDF 54               [ 2]  701 	srlw x 
      001EE0 90 93            [ 1]  702 	ldw y,x 
      001EE2 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001EE4 FF               [ 2]  704 	ldw (x),y
      001EE5 CD 1E 5E         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001EE8 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001EEA 20 D6            [ 2]  707 	jra 1$
      001EEC 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001EEE 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001EF1 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001EF3 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001EF4 1E A8                  719 	.word LINK
                           001EF6   720 	LINK=.
      001EF6 08                     721 	.byte 8 
      001EF7 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001EFF                        723 set_vector:
      001EFF 90 93            [ 1]  724     ldw y,x 
      001F01 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001F04 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001F06 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001F0A 23 04            [ 2]  728 	jrule 2$
      001F0C 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001F0F 81               [ 4]  730 	ret
      001F10 90 58            [ 2]  731 2$:	sllw y 
      001F12 90 58            [ 2]  732 	sllw y 
      001F14 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001F18 90 BF 24         [ 2]  734 	ldw YTEMP,y ; vector address 
      001F1B A6 82            [ 1]  735 	ld a,#0x82 
      001F1D 90 95            [ 1]  736 	ld yh,a 
      001F1F E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001F21 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001F23 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001F26 EF 04            [ 2]  741 	ldw (4,x),y 
      001F28 90 BE 24         [ 2]  742 	ldw y,YTEMP
      001F2B EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001F2D 90 5F            [ 1]  744 	clrw y 
      001F2F FF               [ 2]  745 	ldw (x),y   ; as a double 
      001F30 CD 1C BF         [ 4]  746 	call ee_store 
      001F33 90 93            [ 1]  747 	ldw y,x 
      001F35 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001F38 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001F3B EF 04            [ 2]  750 	ldw (4,x),y 
      001F3D 90 BE 24         [ 2]  751 	ldw y,YTEMP 
      001F40 72 A9 00 02      [ 2]  752 	addw y,#2 
      001F44 EF 02            [ 2]  753 	ldw (2,x),y 
      001F46 90 5F            [ 1]  754 	clrw y 
      001F48 FF               [ 2]  755 	ldw (x),y 
      001F49 CD 1C BF         [ 4]  756 	call ee_store
      001F4C 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001F4F 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001F50 1E F6                  765 	.word LINK
                           001F52   766 	LINK=.
      001F52 03                     767 	.byte 3
      001F53 45 45 2C               768 	.ascii "EE,"
      001F56                        769 ee_comma:
      001F56 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001F59 90 BE 18         [ 2]  771 	ldw y,UCP
      001F5C 90 89            [ 2]  772 	pushw y 
      001F5E EF 02            [ 2]  773 	ldw (2,x),y 
      001F60 90 5F            [ 1]  774 	clrw y 
      001F62 FF               [ 2]  775 	ldw (x),y
      001F63 CD 1C BF         [ 4]  776 	call ee_store
      001F66 90 85            [ 2]  777 	popw y 
      001F68 72 A9 00 02      [ 2]  778 	addw y,#2
      001F6C 90 BF 18         [ 2]  779 	ldw UCP,y
      001F6F 81               [ 4]  780 	ret 
                                    781 
                                    782 
                                    783 ;-------------------------
                                    784 ; Compile byte to flash 
                                    785 ; EEC, ( c -- )	
                                    786 ;-------------------------
      001F70 1F 52                  787 	.word LINK 
                           001F72   788 	LINK=.
      001F72 04                     789 	.byte 4 
      001F73 45 45 43 2C            790 	.ascii "EEC,"
      001F77                        791 ee_ccomma:
      001F77 1D 00 04         [ 2]  792 	subw x,#2*CELLL 
      001F7A 90 BE 18         [ 2]  793 	ldw y,UCP
      001F7D 90 89            [ 2]  794 	pushw y 
      001F7F EF 02            [ 2]  795 	ldw (2,x),y 
      001F81 90 5F            [ 1]  796 	clrw y 
      001F83 FF               [ 2]  797 	ldw (x),y
      001F84 CD 1C 73         [ 4]  798 	call ee_cstore
      001F87 90 85            [ 2]  799 	popw y 
      001F89 90 5C            [ 2]  800 	incw y 
      001F8B 90 BF 18         [ 2]  801 	ldw UCP,y
      001F8E 81               [ 4]  802 	ret 
                                    803 
                                    804 
                                    805 ;--------------------------
                                    806 ; copy FLASH block to ROWBUF
                                    807 ; ROW>BUF ( ud -- )
                                    808 ;--------------------------
      001F8F 1F 72                  809 	.word LINK 
                           001F91   810 	LINK=.
      001F91 07                     811 	.byte 7 
      001F92 52 4F 57 3E 42 55 46   812 	.ascii "ROW>BUF"
      001F99                        813 ROW2BUF: 
      001F99 CD 1A AF         [ 4]  814 	call fptr_store 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001F9C A6 80            [ 1]  815 	ld a,#BLOCK_SIZE
      001F9E 88               [ 1]  816 	push a 
      001F9F B4 34            [ 1]  817 	and a,PTR8 ; block align 
      001FA1 B7 34            [ 1]  818 	ld PTR8,a
      001FA3 90 AE 16 80      [ 2]  819 	ldw y,#ROWBUFF 
      001FA7 92 BC 00 32      [ 5]  820 1$: ldf a,[FPTR]
      001FAB 90 F7            [ 1]  821 	ld (y),a
      001FAD CD 1C 41         [ 4]  822 	call inc_fptr
      001FB0 90 5C            [ 2]  823 	incw y 
      001FB2 0A 01            [ 1]  824 	dec (1,sp)
      001FB4 26 F1            [ 1]  825 	jrne 1$ 
      001FB6 84               [ 1]  826 	pop a 
      001FB7 81               [ 4]  827 	ret 
                                    828 
                                    829 
                                    830 ;---------------------------
                                    831 ; copy ROWBUFF to flash 
                                    832 ; BUF>ROW ( ud -- )
                                    833 ; ud is row address as double 
                                    834 ;---------------------------
      001FB8 1F 91                  835 	.word LINK 
                           001FBA   836 	LINK=.
      001FBA 07                     837 	.byte 7 
      001FBB 42 55 46 3E 52 4F 57   838 	.ascii "BUF>ROW" 
      001FC2                        839 BUF2ROW:
      001FC2 CD 05 D4         [ 4]  840 	call TBUF ; ( ud rb -- )
      001FC5 CD 06 94         [ 4]  841 	call ROT 
      001FC8 CD 06 94         [ 4]  842 	call ROT  ; ( rb ud -- )
      001FCB CD 1D A1         [ 4]  843 	call write_row 
      001FCE 81               [ 4]  844 	ret 
                                    845 
                                    846 ;---------------------------------
                                    847 ; how many byte free in that row 
                                    848 ; RFREE ( a -- n )
                                    849 ; a is least byte of target address
                                    850 ;----------------------------------
      001FCF 1F BA                  851 	.word LINK 
                           001FD1   852 	LINK=.
      001FD1 05                     853 	.byte 5 
      001FD2 52 46 52 45 45         854 	.ascii "RFREE"
      001FD7                        855 RFREE:
      001FD7 E6 01            [ 1]  856 	ld a,(1,x)
      001FD9 A4 7F            [ 1]  857 	and a,#BLOCK_SIZE-1 
      001FDB B7 24            [ 1]  858 	ld YTEMP,a 
      001FDD A6 80            [ 1]  859 	ld a,#BLOCK_SIZE 
      001FDF B0 24            [ 1]  860 	sub a,YTEMP 
      001FE1 90 5F            [ 1]  861 	clrw y 
      001FE3 90 97            [ 1]  862 	ld yl,a
      001FE5 FF               [ 2]  863 	ldw (x),y 
      001FE6 81               [ 4]  864 	ret 
                                    865 
                                    866 ;---------------------------------
                                    867 ; write u bytes to flash/EEPROM 
                                    868 ; constraint to row limit 
                                    869 ; RAM>EE ( ud a u -- u2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    870 ; ud flash address 
                                    871 ; a ram address 
                                    872 ; u bytes count
                                    873 ; return u2 bytes written  
                                    874 ;-------------------------------
      001FE7 1F D1                  875 	.word LINK 
                           001FE9   876 	LINK=. 
      001FE9 06                     877 	.byte 6
      001FEA 52 41 4D 3E 45 45      878 	.ascii "RAM>EE"
                                    879 	
      001FF0                        880 RAM2EE:
                                    881 ; copy ud on top 
      001FF0 90 93            [ 1]  882 	ldw y,x 
      001FF2 90 EE 06         [ 2]  883 	ldw y,(6,y) ; LSW of ud  
      001FF5 90 BF 24         [ 2]  884 	ldw YTEMP,y 
      001FF8 90 93            [ 1]  885 	ldw y,x 
      001FFA 90 EE 04         [ 2]  886 	ldw y,(4,y)  ; MSW of ud 
      001FFD 1D 00 04         [ 2]  887 	subw x,#2*CELLL 
      002000 FF               [ 2]  888 	ldw (x),y 
      002001 90 BE 24         [ 2]  889 	ldw y,YTEMP 
      002004 EF 02            [ 2]  890 	ldw (2,x),y 
      002006 CD 1F 99         [ 4]  891 	call ROW2BUF 
      002009 90 93            [ 1]  892 	ldw y,x 
      00200B 90 EE 06         [ 2]  893 	ldw y,(6,y)
      00200E 90 89            [ 2]  894 	pushw y ; udl 
      002010 90 9F            [ 1]  895 	ld a,yl
      002012 A4 7F            [ 1]  896 	and a,#BLOCK_SIZE-1 
      002014 90 5F            [ 1]  897 	clrw y 
      002016 90 97            [ 1]  898 	ld yl,a 
      002018 72 A9 16 80      [ 2]  899 	addw y,#ROWBUFF 
      00201C 1D 00 02         [ 2]  900 	subw x,#CELLL 
      00201F FF               [ 2]  901 	ldw (x),y  
      002020 CD 04 E9         [ 4]  902 	call SWAPP ;  ( ud a ra u -- )
      002023 CD 04 83         [ 4]  903 	call RFROM  
      002026 CD 1F D7         [ 4]  904 	call RFREE 
      002029 CD 07 EF         [ 4]  905 	call MIN
      00202C CD 04 D9         [ 4]  906 	call DUPP 
      00202F CD 04 A2         [ 4]  907 	call TOR  
      002032 CD 0B 75         [ 4]  908 	call CMOVE
      002035 CD 1F C2         [ 4]  909 	call BUF2ROW 
      002038 CD 04 83         [ 4]  910 	call RFROM 
      00203B 81               [ 4]  911 	ret 
                                    912 
                                    913 ;--------------------------
                                    914 ; expand 16 bit address 
                                    915 ; to 32 bit address 
                                    916 ; FADDR ( a -- ud )
                                    917 ;--------------------------
      00203C 1F E9                  918 	.word LINK 
                           00203E   919 	LINK=. 
      00203E 05                     920 	.byte 5 
      00203F 46 41 44 44 52         921 	.ascii "FADDR"
      002044                        922 FADDR:
      002044 CC 0A 3A         [ 2]  923 	jp ZERO 
                                    924 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    925 ;--------------------------
                                    926 ; move new colon definition to FLASH 
                                    927 ; using WR-ROW for efficiency 
                                    928 ; preserving bytes already used 
                                    929 ; in the current block. 
                                    930 ; At this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      002047 20 3E                  938 	.word LINK 
                           002049   939 	LINK=.
      002049 05                     940 	.byte 5 
      00204A 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      00204F                        942 FMOVE:
      00204F CD 05 E6         [ 4]  943 	call TFLASH 
      002052 CD 04 32         [ 4]  944 	CALL AT 
      002055 CD 03 E7         [ 4]  945 	CALL QBRAN 
      002058 20 D3                  946 	.word no_move  
      00205A CD 06 35         [ 4]  947 	call CPP
      00205D CD 04 32         [ 4]  948 	call AT  
      002060 CD 04 D9         [ 4]  949 	call DUPP ; ( udl udl -- )
      002063 CD 06 19         [ 4]  950 	call CNTXT 
      002066 CD 04 32         [ 4]  951 	call AT 
      002069 CD 03 B4         [ 4]  952 	call DOLIT 
      00206C 00 02                  953 	.word 2 
      00206E CD 07 4D         [ 4]  954 	call SUBB ; ( udl udl a -- )
      002071 CD 04 E9         [ 4]  955 	call SWAPP 
      002074 CD 20 44         [ 4]  956 	call FADDR 
      002077 CD 06 94         [ 4]  957 	call ROT  ; ( udl ud a -- )
      00207A CD 04 D9         [ 4]  958 	call DUPP 
      00207D CD 04 A2         [ 4]  959 	call TOR    ; R: a 
      002080                        960 FMOVE2: 
      002080 CD 0B 28         [ 4]  961 	call HERE 
      002083 CD 04 96         [ 4]  962 	call RAT 
      002086 CD 07 4D         [ 4]  963 	call SUBB ; (udl ud a wl -- )
      002089                        964 next_row:
      002089 CD 04 D9         [ 4]  965 	call DUPP 
      00208C CD 04 A2         [ 4]  966 	call TOR  ; ( udl ud a wl -- ) R: a wl
      00208F CD 1F F0         [ 4]  967 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      002092 CD 04 D9         [ 4]  968 	call DUPP 
      002095 CD 04 A2         [ 4]  969 	call TOR
      002098 CD 06 D4         [ 4]  970 	call PLUS  ; ( udl+ ) 
      00209B CD 04 D9         [ 4]  971 	call DUPP 
      00209E CD 0A 3A         [ 4]  972 	call ZERO   ; ( udl+ ud -- )
      0020A1 CD 04 83         [ 4]  973 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0020A4 CD 04 83         [ 4]  974 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020A7 CD 05 03         [ 4]  975 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020AA CD 07 4D         [ 4]  976 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020AD CD 04 D9         [ 4]  977 	call DUPP 
      0020B0 CD 03 E7         [ 4]  978 	call QBRAN
      0020B3 20 CC                  979 	.word fmove_done 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020B5 CD 04 E9         [ 4]  980 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020B8 CD 04 83         [ 4]  981 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020BB CD 06 D4         [ 4]  982 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020BE CD 04 D9         [ 4]  983 	call DUPP 
      0020C1 CD 04 A2         [ 4]  984 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020C4 CD 04 E9         [ 4]  985 	call SWAPP 
      0020C7 CD 03 FE         [ 4]  986 	call BRAN
      0020CA 20 89                  987 	.word next_row  
      0020CC                        988 fmove_done:	
      0020CC CD 04 83         [ 4]  989 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020CF 1C 00 0A         [ 2]  990 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020D2 81               [ 4]  991  	ret  
      0020D3                        992 no_move:
      0020D3 CD 0A 3A         [ 4]  993 	call ZERO
      0020D6 81               [ 4]  994 	ret 
                                    995 
                                    996 ;------------------------------------------
                                    997 ; adjust pointers after **FMOVE** operetion.
                                    998 ; UPDAT-PTR ( cp+ -- )
                                    999 ; cp+ is new CP position after FMOVE 
                                   1000 ;-------------------------------------------
      0020D7 20 49                 1001 	.word LINK 
                           0020D9  1002 	LINK=.
      0020D9 09                    1003 	.byte 9
      0020DA 55 50 44 41 54 2D 50  1004 	.ascii "UPDAT-PTR" 
             54 52
      0020E3                       1005 UPDATPTR:
                                   1006 ;reset VP to previous position  
      0020E3 CD 1B 29         [ 4] 1007 	call EEPVP 
      0020E6 CD 04 CF         [ 4] 1008 	call DROP 
      0020E9 CD 04 32         [ 4] 1009 	call AT
      0020EC CD 06 27         [ 4] 1010 	call VPP 
      0020EF CD 04 1B         [ 4] 1011 	call STORE
                                   1012 ;update CONTEXT and LAST 
      0020F2 CD 1B 13         [ 4] 1013 	call EEPCP 
      0020F5 CD 04 CF         [ 4] 1014 	call DROP
      0020F8 CD 04 32         [ 4] 1015 	call AT
      0020FB CD 03 B4         [ 4] 1016 	call DOLIT 
      0020FE 00 02                 1017 	.word 2 
      002100 CD 06 D4         [ 4] 1018 	call PLUS 
      002103 CD 04 D9         [ 4] 1019 	call DUPP 
      002106 CD 06 19         [ 4] 1020 	call CNTXT 
      002109 CD 04 1B         [ 4] 1021 	call STORE
      00210C CD 06 45         [ 4] 1022 	call LAST
      00210F CD 04 1B         [ 4] 1023 	call STORE 
      002112 CD 1B 43         [ 4] 1024 	call UPDATLAST 
                                   1025 ;update CP 
      002115 CD 06 35         [ 4] 1026 	call CPP 
      002118 CD 04 1B         [ 4] 1027 	call STORE
      00211B CD 1B 6C         [ 4] 1028 	call UPDATCP 
      00211E 81               [ 4] 1029 	ret 
                                   1030 
                                   1031 ;-----------------------------
                                   1032 ; move interrupt sub-routine
                                   1033 ; in flash memory
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   1034 ;----------------------------- 
      00211F 20 D9                 1035 	.word LINK 
                           002121  1036 	LINK=. 
      002121 06                    1037 	.byte 6
      002122 49 46 4D 4F 56 45     1038 	.ascii "IFMOVE" 
      002128                       1039 IFMOVE:
      002128 CD 05 E6         [ 4] 1040 	call TFLASH 
      00212B CD 04 32         [ 4] 1041 	CALL AT 
      00212E CD 03 E7         [ 4] 1042 	CALL QBRAN 
      002131 20 D3                 1043 	.word no_move 
      002133 CD 06 35         [ 4] 1044 	call CPP 
      002136 CD 04 32         [ 4] 1045 	call AT 
      002139 CD 04 D9         [ 4] 1046 	call DUPP ; ( udl udl -- )
      00213C CD 1B 29         [ 4] 1047 	call EEPVP 
      00213F CD 04 CF         [ 4] 1048 	call DROP
      002142 CD 04 32         [ 4] 1049 	call AT  ; ( udl udl a )
      002145 CD 04 A2         [ 4] 1050 	call TOR 
      002148 CD 20 44         [ 4] 1051 	call FADDR
      00214B CD 04 96         [ 4] 1052 	call RAT ; ( udl ud a -- ) R: a 
      00214E CC 20 80         [ 2] 1053 	jp FMOVE2 
                                   1054 
                                   1055 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4441 
                                   4442 ;===============================================================
                                   4443 
                           002121  4444 LASTN =	LINK   ;last name defined
                                   4445 
                                   4446 ; application code begin here
      002180                       4447 	.bndry 128 ; align on flash block  
      002180                       4448 app_space: 
                                   4449 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000770 R   |   6 ABOR1      0012C3 R
  6 ABOR2      0012DA R   |   6 ABORQ      0012BB R   |   6 ABORT      0012AC R
  6 ABRTQ      001597 R   |   6 ABSS       000767 R   |   6 ACCEP      001242 R
  6 ACCP1      00124B R   |   6 ACCP2      001271 R   |   6 ACCP3      001274 R
  6 ACCP4      001276 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     000673 R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001582 R   |   6 AGAIN      0014D8 R   |   6 AHEAD      001535 R
  6 ALLOT      0013EB R   |   6 ANDD       000525 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000432 R   |   6 ATEXE      000B5E R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0011EA R   |   6 BASE       000596 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      00142D R   |   6 BDIGS      000C45 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0014BA R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      001082 R   |   6 BKSP       0011BA R
    BKSPP   =  000008     |   6 BLANK      000A2D R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FC2 R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        000450 R   |   6 CCOMMA     00140F R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0009B2 R   |   6 CELLP      0009A3 R
  6 CELLS      0009C1 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E72 R   |   6 CHAR2      000E75 R
  6 CHKIVEC    001EB0 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000B7D R   |   6 CMOV2      000B95 R
  6 CMOVE      000B75 R   |     CNTDWN  =  000030     |   6 CNTXT      000619 R
  6 COLD       00198F R   |   6 COLD1      00198F R   |   6 COLON      001730 R
  6 COMMA      0013F8 R   |   6 COMPI      00143D R   |     COMPO   =  000040 
  6 CONSTANT   0017DA R   |   6 COUNT      000B11 R   |   6 CPP        000635 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000EA0 R
  6 CREAT      001776 R   |     CRR     =  00000D     |   6 CSTOR      00043F R
  6 DAT        000AF1 R   |     DATSTK  =  001680     |   6 DDROP      0006B4 R
  6 DDUP       0006BF R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000CF5 R   |   6 DEPTH      000A7C R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000D3A R   |   6 DI         0000C2 R
  6 DIG        000C6E R   |   6 DIGIT      000C09 R   |   6 DIGS       000C7F R
  6 DIGS1      000C7F R   |   6 DIGS2      000C8C R   |   6 DIGTQ      000D09 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        00072E R
  6 DNEGA      000711 R   |   6 DOCONST    001804 R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EB6 R   |   6 DOT        000F3B R
  6 DOT1       000F51 R   |   6 DOTI1      001926 R   |   6 DOTID      001910 R
  6 DOTO1      00134F R   |   6 DOTOK      001335 R   |   6 DOTPR      001064 R
  6 DOTQ       0015B1 R   |   6 DOTQP      000EDF R   |   6 DOTR       000EED R
  6 DOTS       0018B2 R   |   6 DOTS1      0018BD R   |   6 DOTS2      0018C6 R
  6 DOVAR      000586 R   |   6 DROP       0004CF R   |   6 DSTOR      000ACB R
  6 DUMP       001868 R   |   6 DUMP1      00187F R   |   6 DUMP3      0018A1 R
  6 DUMPP      001837 R   |   6 DUPP       0004D9 R   |   6 EDIGS      000CAA R
  6 EEPCP      001B13 R   |   6 EEPLAST    001AE6 R   |   6 EEPROM     001ACE R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     001AFD R   |   6 EEPVP      001B29 R   |   6 EI         0000BB R
  6 ELSEE      001510 R   |   6 EMIT       00039E R   |   6 ENEPER     001A3E R
  6 EQ1        00078B R   |   6 EQUAL      000775 R   |   6 ERASE      000BD7 R
    ERR     =  00001B     |   6 EVAL       001378 R   |   6 EVAL1      001378 R
  6 EVAL2      001394 R   |   6 EXE1       000B6C R   |   6 EXECU      00040E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000C31 R   |   6 FADDR      002044 R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000BA4 R   |   6 FILL1      000BC1 R
  6 FILL2      000BCA R   |   6 FIND       001116 R   |   6 FIND1      001134 R
  6 FIND2      001162 R   |   6 FIND3      00116E R   |   6 FIND4      001182 R
  6 FIND5      00118F R   |   6 FIND6      001173 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  6 FMOVE      00204F R   |   6 FMOVE2     002080 R   |   6 FOR        00148D R
  6 FORGET     000158 R   |   6 FORGET1    000187 R   |   6 FORGET2    00020D R
  6 FORGET4    000216 R   |   6 FORGET6    0001CF R   |     FPTR    =  000032 
  6 FREEVAR    000223 R   |   6 FREEVAR4   000259 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       000B28 R   |   6 HEX        000CE0 R   |   6 HI         001962 R
  6 HLD        000606 R   |   6 HOLD       000C55 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 ICOLON     001741 R   |   6 IFETCH     0014AB R   |   6 IFF        0014E8 R
  6 IFMOVE     002128 R   |     IMEDD   =  000080     |   6 IMMED      001753 R
  6 INCH       000392 R   |   6 INITOFS    001709 R   |   6 INN        0005B4 R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_PU=  000001     |   6 INTE1      001317 R   |   6 INTER      0012ED R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      0006EE R   |     IPR0    =  000002 
    IPR1    =  000001     |     IPR2    =  000000     |     IPR3    =  000003 
    IPR_MASK=  000003     |     IRET_COD=  000080     |   6 ISEMI      00169E R
    ITC_SPR1=  007F70     |     ITC_SPR2=  007F71     |     ITC_SPR3=  007F72 
    ITC_SPR4=  007F73     |     ITC_SPR5=  007F74     |     ITC_SPR6=  007F75 
    ITC_SPR7=  007F76     |     ITC_SPR8=  007F77     |     IWDG_KR =  0050E0 
    IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2     |   6 JSRC       0016F3 R
  6 KEY        000E20 R   |   6 KTAP       001207 R   |   6 KTAP1      00122A R
  6 KTAP2      00122D R   |   6 LAST       000645 R   |   6 LASTN   =  002121 R
  6 LBRAC      001324 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       0007B2 R   |     LF      =  00000A 
  6 LINK    =  002121 R   |   6 LITER      00145F R   |   6 LN2S       001A9A R
  6 LOG2S      001A84 R   |   6 LSHIFT     0009EC R   |   6 LSHIFT1    0009F5 R
  6 LSHIFT4    0009FD R   |   6 LT1        0007C8 R   |     MASKK   =  001F7F 
  6 MAX        0007D2 R   |   6 MAX1       0007E5 R   |   6 MIN        0007EF R
  6 MIN1       000802 R   |   6 MMOD1      0008A5 R   |   6 MMOD2      0008B9 R
  6 MMOD3      0008D0 R   |   6 MMSM1      00084C R   |   6 MMSM2      000860 R
  6 MMSM3      000862 R   |   6 MMSM4      00086A R   |   6 MODD       0008EA R
  6 MONE       000A53 R   |     MS      =  00002E     |   6 MSEC       0002CE R
  6 MSMOD      000888 R   |   6 MSTA1      00097B R   |   6 MSTAR      000958 R
    NAFR    =  004804     |   6 NAMEQ      0011AF R   |   6 NAMET      0010C0 R
    NCLKOPT =  004808     |   6 NEGAT      0006FF R   |   6 NEX1       0003D5 R
  6 NEXT       00149C R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       0005C4 R
    NUBC    =  004802     |   6 NUFQ       000E36 R   |   6 NUFQ1      000E4F R
  6 NUMBQ      000D4D R   |   6 NUMQ1      000D81 R   |   6 NUMQ2      000DB2 R
  6 NUMQ3      000DF4 R   |   6 NUMQ4      000DF9 R   |   6 NUMQ5      000E08 R
  6 NUMQ6      000E0B R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     00066A R   |     OFS     =  000005 
  6 ONE        000A45 R   |   6 ONEM       0009DB R   |   6 ONEP       0009CE R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTIMIZE=  000001     |     OPTION_B=  004800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       000047 R
  6 ORR        000539 R   |   6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       000503 R   |   6 OVERT      00166C R   |     PA      =  000000 
  6 PACKS      000BE8 R   |   6 PAD        000B39 R   |   6 PAREN      001073 R
  6 PARS       000F6C R   |   6 PARS1      000F97 R   |   6 PARS2      000FC2 R
  6 PARS3      000FC5 R   |   6 PARS4      000FCE R   |   6 PARS5      000FF1 R
  6 PARS6      001006 R   |   6 PARS7      001015 R   |   6 PARS8      001024 R
  6 PARSE      001035 R   |   6 PAUSE      0002DE R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      00184A R
  6 PDUM2      00185B R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000A93 R   |   6 PII        0019FD R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       0006D4 R
  6 PNAM1      001621 R   |   6 PRESE      0013A3 R   |     PROD1   =  000022 
    PROD2   =  000024     |     PROD3   =  000026     |   6 PROTECTE   0001FF R
  6 PSTOR      000AAA R   |     PTR16   =  000033     |     PTR8    =  000034 
  6 QBRAN      0003E7 R   |   6 QDUP       000683 R   |   6 QDUP1      00068D R
  6 QKEY       000380 R   |   6 QSTAC      00135B R   |   6 QUERY      001287 R
  6 QUEST      000F5E R   |   6 QUIT       0013C0 R   |   6 QUIT1      0013C8 R
  6 QUIT2      0013CB R   |   6 RAM2EE     001FF0 R   |     RAMBASE =  000000 
  6 RAMLAST    000658 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RANDOM     00027C R   |   6 RAT        000496 R
  6 RBRAC      0016E0 R   |   6 REPEA      001565 R   |   6 RFREE      001FD7 R
  6 RFROM      000483 R   |     ROP     =  004800     |   6 ROT        000694 R
  6 ROW2BUF    001F99 R   |     ROWBUFF =  001680     |     RP0     =  00002C 
  6 RPAT       000460 R   |     RPP     =  0017FF     |   6 RPSTO      00046D R
  6 RSHIFT     000A08 R   |   6 RSHIFT1    000A11 R   |   6 RSHIFT4    000A19 R
    RST_SR  =  0050B3     |   6 RT12_2     001A6D R   |   6 SAME1      0010DE R
  6 SAME2      001107 R   |   6 SAMEQ      0010D6 R   |   6 SCOM1      001656 R
  6 SCOM2      001659 R   |   6 SCOMP      001638 R   |   6 SEED       000263 R
    SEEDX   =  000036     |     SEEDY   =  000038     |   6 SEMIS      00167C R
  6 SETISP     0000CE R   |   6 SET_RAML   0017C3 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000C94 R   |   6 SIGN1      000CA4 R
  6 SLASH      0008F4 R   |   6 SLMOD      0008D8 R   |   6 SNAME      0015EB R
    SP0     =  00002A     |   6 SPACE      000E58 R   |   6 SPACS      000E67 R
  6 SPAT       0004B9 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001680     |     SPSAVE  =  000001     |   6 SPSTO      0004C6 R
  6 SQRT10     001A56 R   |   6 SQRT2      001A14 R   |   6 SQRT3      001A2B R
  6 SSMOD      000984 R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       00094D R   |   6 STASL      000995 R   |   6 STOD       000736 R
  6 STORE      00041B R   |   6 STR        000CC2 R   |   6 STRCQ      00146D R
  6 STRQ       0015A4 R   |   6 STRQP      000ED5 R   |   6 SUBB       00074D R
  6 SWAPP      0004E9 R   |     SWIM_CSR=  007F80     |   6 TAP        0011F1 R
  6 TBOOT      001983 R   |   6 TBUF       0005D4 R   |     TBUFFBAS=  001680 
  6 TCHAR      000A64 R   |   6 TEMP       0005A5 R   |   6 TEVAL      0005F7 R
  6 TFLASH     0005E6 R   |   6 THENN      0014FD R   |   6 TIB        000B4A R
    TIBB    =  001700     |     TIBBASE =  001700     |     TIC     =  000027 
  6 TICK       0013D7 R   |     TIM1_ARR=  005262     |     TIM1_ARR=  005263 
    TIM1_BKR=  00526D     |     TIM1_CCE=  00525C     |     TIM1_CCE=  00525D 
    TIM1_CCM=  005258     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  005259     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525A     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCM=  00525B     |     TIM1_CCM=  000000     |     TIM1_CCM=  000001 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000003 
    TIM1_CCM=  000007     |     TIM1_CCM=  000002     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000003 
    TIM1_CCR=  005265     |     TIM1_CCR=  005266     |     TIM1_CCR=  005267 
    TIM1_CCR=  005268     |     TIM1_CCR=  005269     |     TIM1_CCR=  00526A 
    TIM1_CCR=  00526B     |     TIM1_CCR=  00526C     |     TIM1_CNT=  00525E 
    TIM1_CNT=  00525F     |     TIM1_CR1=  005250     |     TIM1_CR2=  005251 
    TIM1_CR2=  000000     |     TIM1_CR2=  000002     |     TIM1_CR2=  000004 
    TIM1_CR2=  000005     |     TIM1_CR2=  000006     |     TIM1_DTR=  00526E 
    TIM1_EGR=  005257     |     TIM1_EGR=  000007     |     TIM1_EGR=  000001 
    TIM1_EGR=  000002     |     TIM1_EGR=  000003     |     TIM1_EGR=  000004 
    TIM1_EGR=  000005     |     TIM1_EGR=  000006     |     TIM1_EGR=  000000 
    TIM1_ETR=  005253     |     TIM1_ETR=  000006     |     TIM1_ETR=  000000 
    TIM1_ETR=  000001     |     TIM1_ETR=  000002     |     TIM1_ETR=  000003 
    TIM1_ETR=  000007     |     TIM1_ETR=  000004     |     TIM1_ETR=  000005 
    TIM1_IER=  005254     |     TIM1_IER=  000007     |     TIM1_IER=  000001 
    TIM1_IER=  000002     |     TIM1_IER=  000003     |     TIM1_IER=  000004 
    TIM1_IER=  000005     |     TIM1_IER=  000006     |     TIM1_IER=  000000 
    TIM1_OIS=  00526F     |     TIM1_PSC=  005260     |     TIM1_PSC=  005261 
    TIM1_RCR=  005264     |     TIM1_SMC=  005252     |     TIM1_SMC=  000007 
    TIM1_SMC=  000000     |     TIM1_SMC=  000001     |     TIM1_SMC=  000002 
    TIM1_SMC=  000004     |     TIM1_SMC=  000005     |     TIM1_SMC=  000006 
    TIM1_SR1=  005255     |     TIM1_SR1=  000007     |     TIM1_SR1=  000001 
    TIM1_SR1=  000002     |     TIM1_SR1=  000003     |     TIM1_SR1=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000005     |     TIM1_SR1=  000006     |     TIM1_SR1=  000000 
    TIM1_SR2=  005256     |     TIM1_SR2=  000001     |     TIM1_SR2=  000002 
    TIM1_SR2=  000003     |     TIM1_SR2=  000004     |     TIM2_ARR=  00530D 
    TIM2_ARR=  00530E     |     TIM2_CCE=  005308     |     TIM2_CCE=  000000 
    TIM2_CCE=  000001     |     TIM2_CCE=  000004     |     TIM2_CCE=  000005 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCM=  000000     |     TIM2_CCM=  000004 
    TIM2_CCM=  000003     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_CR1=  000007     |     TIM2_CR1=  000000 
    TIM2_CR1=  000003     |     TIM2_CR1=  000001     |     TIM2_CR1=  000002 
    TIM2_EGR=  005304     |     TIM2_EGR=  000001     |     TIM2_EGR=  000002 
    TIM2_EGR=  000003     |     TIM2_EGR=  000006     |     TIM2_EGR=  000000 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R   |   6 TIMER      0002F8 R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0018E0 R
  6 TNAM3      0018FE R   |   6 TNAM4      001904 R   |   6 TNAME      0018DD R
  6 TOFLASH    000333 R   |   6 TOKEN      0010B2 R   |   6 TOR        0004A2 R
  6 TORAM      000373 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000A20 R
  6 TYPE1      000E87 R   |   6 TYPE2      000E93 R   |   6 TYPES      000E82 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000F28 R
  6 UDOTR      000F08 R   |   6 UEND       000045 R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      0007AA R   |   6 ULESS      000794 R   |   6 UMMOD      00082A R
  6 UMSTA      000903 R   |   6 UNIQ1      0015E2 R   |   6 UNIQU      0015C3 R
  6 UNTIL      0014C5 R   |     UOFFSET =  00001C     |   6 UPDATCP    001B6C R
  6 UPDATLAS   001B43 R   |   6 UPDATPTR   0020E3 R   |   6 UPDATRUN   001B5B R
  6 UPDATVP    001B83 R   |   6 UPL1       00057A R   |   6 UPLUS      000563 R
    UPP     =  000006     |     URLAST  =  000020     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTFLASH =  00001E 
    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      00181A R
  6 UTYP2      001829 R   |   6 UTYPE      001815 R   |     UVP     =  000016 
  6 UZERO      00002B R   |   6 VARIA      001790 R   |     VAR_BASE=  000080 
    VAR_TOP =  0017BF     |     VER     =  000003     |   6 VPP        000627 R
    VSIZE   =  000006     |     WANT_DEB=  000000     |     WANT_MAT=  000001 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      00154B R   |   6 WITHI      00080F R   |   6 WORDD      00109E R
  6 WORDS      00193A R   |   6 WORS1      001940 R   |   6 WORS2      00195C R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |   6 XORR       00054E R
    XTEMP   =  000022     |     YTEMP   =  000024     |   6 ZERO       000A3A R
  6 ZL1        00051B R   |   6 ZLESS      000512 R   |   6 app_spac   002180 R
  6 block_er   001D06 R   |   6 clear_ra   000019 R   |   6 clock_in   000062 R
  6 copy_buf   001D5D R   |   6 copy_buf   001D7C R   |   6 copy_pro   001D7C R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 ee_ccomm   001F77 R   |   6 ee_comma   001F56 R
  6 ee_cstor   001C73 R   |   6 ee_store   001CBF R   |   6 erase_fl   001D22 R
  6 farat      001B94 R   |   6 farcat     001BB0 R   |   6 fmove_do   0020CC R
  6 fptr_sto   001AAF R   |   6 inc_fptr   001C41 R   |   6 lock       001C2D R
  6 main       000016 R   |   6 next_row   002089 R   |   6 no_move    0020D3 R
  6 pristine   001DF7 R   |   6 proceed_   001D25 R   |   6 reboot     000325 R
  6 reset_ve   001E5E R   |   6 row_eras   001CE9 R   |   6 row_eras   001D36 R
  6 row_eras   001D5D R   |   6 set_opti   001DCB R   |   6 set_vect   001EFF R
  6 uart1_in   000074 R   |   6 unlock     001C05 R   |   6 unlock_e   001BC7 R
  6 unlock_f   001BE6 R   |   6 write_by   001C58 R   |   6 write_ro   001DA1 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table


ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2180   flags    0

