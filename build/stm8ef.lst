ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           0016F0    97 DATSTK  =	0x16F0	;data stack  empty
                           001700    98 TIBBASE =       0X1700  ; tib addr.
                                     99 ;******  System Variables  ******
                           00001A   100 XTEMP	=	26	;address called by CREATE
                           00001C   101 YTEMP	=	28	;address called by CREATE
                           00001A   102 PROD1 = 26	;space for UM*
                           00001C   103 PROD2 = 28
                           00001E   104 PROD3 = 30
                           000020   105 CARRY = 32
                           000022   106 SP0	=	34	 ;initial data stack pointer
                           000024   107 RP0	=	36	;initial return stack pointer
                           000026   108 MS    =         38      ; millisecond counter 
                                    109 ;***********************************************
                                    110 ;; Version control
                                    111 
                           000002   112 VER     =     2         ;major release version
                           000001   113 EXT     =     1         ;minor extension
                                    114 
                                    115 ;; Constants
                                    116 
                           00FFFF   117 TRUEE   =     0xFFFF      ;true flag
                                    118 
                           000040   119 COMPO   =     0x40     ;lexicon compile only bit
                           000080   120 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   121 MASKK   =     0x1F7F  ;lexicon bit mask
                                    122 
                           000002   123 CELLL   =     2       ;size of a cell
                           00000A   124 BASEE   =     10      ;default radix
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000008   125 BKSPP   =     8       ;back space
                           00000A   126 LF      =     10      ;line feed
                           00000D   127 CRR     =     13      ;carriage return
                           00001B   128 ERR     =     27      ;error escape
                           000027   129 TIC     =     39      ;tick
                           0000CD   130 CALLL   =     0xCD     ;CALL opcodes
                                    131 
                                    132 ;; Memory allocation
                                    133 
                           000006   134 UPP     =     RAMBASE+6
                           0016F0   135 SPP     =     RAMBASE+DATSTK
                           0017FF   136 RPP     =     RAMBASE+STACK
                           001700   137 TIBB    =     RAMBASE+TIBBASE
                           000080   138 CTOP    =     RAMBASE+0x80
                                    139 
                                    140         .macro _ledon
                                    141         bset PC_ODR,#LED2_BIT
                                    142         .endm
                                    143 
                                    144         .macro _ledoff
                                    145         bres PC_ODR,#LED2_BIT
                                    146         .endm
                                    147 
                                    148 ;**********************************************************
                                    149         .area DATA (ABS)
      000000                        150         .org RAMBASE 
                                    151 ;**********************************************************
                                    152 
                                    153 ;**********************************************************
                                    154         .area SSEG (ABS) ; STACK
      001700                        155         .org 0x1700
      001700                        156         .ds 256 
                                    157 ; space for DATSTK,TIB and STACK         
                                    158 ;**********************************************************
                                    159 
                                    160 ;**********************************************************
                                    161         .area HOME ; vectors table
                                    162 ;**********************************************************
      000000 82 00 00 0F            163 	int main	        ; reset
      000004 82 00 00 00            164 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            165 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            166 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            167 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            168 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            169 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            170 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            171 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            172 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            173 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            174 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            175 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            176 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            177 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            178 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            179 	int NonHandledInterrupt	; irq14
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



      000044 82 00 00 00            180 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            181 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            182 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            183 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            184 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            185 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            186 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            187 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            188 	int Timer4Handler	; irq23
      000068 82 00 00 00            189 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            190 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            191 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            192 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            193 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            194 	int NonHandledInterrupt	; irq29
                                    195 
                                    196 ;**********************************************************
                                    197         .area CODE
                                    198 ;**********************************************************
                                    199 
                                    200 ; non handled interrupt reset MCU
      000000                        201 NonHandledInterrupt:
      000000 A6 80            [ 1]  202         ld a, #0x80
      000002 C7 50 D1         [ 1]  203         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    204 	;iret
                                    205 
                                    206 ; used for milliseconds counter 
                                    207 ; MS is 16 bits counter 
      000005                        208 Timer4Handler:
      000005 72 5F 53 42      [ 1]  209 	clr TIM4_SR 
      000009 BE 26            [ 2]  210         ldw x,MS 
      00000B 5C               [ 2]  211         incw x 
      00000C BF 26            [ 2]  212         ldw MS,x 
      00000E 80               [11]  213         iret 
                                    214 
                                    215 
                                    216 ;; Main entry points and COLD start data
      00000F                        217 main:
                                    218 ; clear all RAM
      00000F AE 00 00         [ 2]  219 	ldw X,#RAMBASE
      000012                        220 clear_ram0:
      000012 7F               [ 1]  221 	clr (X)
      000013 5C               [ 2]  222 	incw X
      000014 A3 17 FF         [ 2]  223 	cpw X,#RAM_END
      000017 23 F9            [ 2]  224 	jrule clear_ram0
      000019 AE 17 FF         [ 2]  225         ldw x,#RPP
      00001C 94               [ 1]  226         ldw sp,x 
      00001D CC 00 36         [ 2]  227 	jp ORIG
                                    228 
                                    229 ; COLD initialize these variables.
      000020                        230 UZERO:
      000020 00 0A                  231         .word      BASEE   ;BASE
      000022 00 00                  232         .word      0       ;tmp
      000024 00 00                  233         .word      0       ;>IN
      000026 00 00                  234         .word      0       ;#TIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000028 17 00                  235         .word      TIBB    ;TIB
      00002A 0F 6D                  236         .word      INTER   ;'EVAL
      00002C 00 00                  237         .word      0       ;HLD
      00002E 16 9E                  238         .word       LASTN   ;CONTEXT pointer
      000030 00 80                  239         .word       CTOP   ;CP in RAM
      000032 16 9E                  240         .word      LASTN   ;LAST
      000034 00 00                  241 ULAST:  .word      0
                                    242 
      000036                        243 ORIG:   
                                    244 ; initialize SP
      000036 AE 17 FF         [ 2]  245         LDW     X,#STACK  ;initialize return stack
      000039 94               [ 1]  246         LDW     SP,X
      00003A BF 24            [ 2]  247         LDW     RP0,X
      00003C AE 16 F0         [ 2]  248         LDW     X,#DATSTK ;initialize data stack
      00003F BF 22            [ 2]  249         LDW     SP0,X
                                    250 ; initialize PC_5 as output to control LED2
                                    251 ; added by Picatout 
      000041 72 1A 50 0D      [ 1]  252         bset PC_CR1,#LED2_BIT
      000045 72 1A 50 0E      [ 1]  253         bset PC_CR2,#LED2_BIT
      000049 72 1A 50 0C      [ 1]  254         bset PC_DDR,#LED2_BIT
      00004D                        255         _ledoff
      00004D 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    256 ; initialize clock to HSI
                                    257 ; no divisor 16Mhz 
                                    258 ; Added by Picatout 
      000051                        259 clock_init:
      000051 72 5F 50 C6      [ 1]  260         clr CLK_CKDIVR
      000055 72 12 50 C5      [ 1]  261 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000059 A6 E1            [ 1]  262 	ld a,#CLK_SWR_HSI
      00005B C7 50 C4         [ 1]  263 	ld CLK_SWR,a
      00005E C1 50 C3         [ 1]  264 1$:	cp a,CLK_CMSR
      000061 26 FB            [ 1]  265 	jrne 1$
                                    266         
                                    267 ; initialize UART1, 115200 8N1
      000063                        268 uart1_init:
      000063 72 14 50 C7      [ 1]  269 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    270 	; configure tx pin
      000067 72 1A 50 02      [ 1]  271 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00006B 72 1A 50 03      [ 1]  272 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00006F 72 1A 50 04      [ 1]  273 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    274 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000073 35 0B 52 33      [ 1]  275 	mov UART1_BRR2,#0x0b ; must be loaded first
      000077 35 08 52 32      [ 1]  276 	mov UART1_BRR1,#0x8
      00007B 35 0C 52 35      [ 1]  277 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    278 ; initialize timer4, used for millisecond interrupt  
      00007F 35 07 53 45      [ 1]  279 	mov TIM4_PSCR,#7 ; prescale 128  
      000083 35 7D 53 46      [ 1]  280 	mov TIM4_ARR,#125 ; set for 1msec.
      000087 35 05 53 40      [ 1]  281 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00008B 72 10 53 41      [ 1]  282 	bset TIM4_IER,#TIM4_IER_UIE 
      00008F 9A               [ 1]  283         rim
      000090 CC 14 F9         [ 2]  284         jp  COLD   ;default=MN1
                                    285 
                                    286 
                                    287 ;; get millisecond counter 
                                    288 ;; msec ( -- u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    289 ;; Added by Picatout 2020-04-26
      000093 00 00                  290         .word 0 
                           000095   291 LINK = . 
      000095 04                     292         .byte 4
      000096 4D 53 45 43            293         .ascii "MSEC"
      00009A                        294 MSEC: 
      00009A 1D 00 02         [ 2]  295         subw x,#CELLL 
      00009D 90 BE 26         [ 2]  296         ldw y,MS 
      0000A0 FF               [ 2]  297         ldw (x),y 
      0000A1 81               [ 4]  298         ret 
                                    299 
                                    300 ;; Device dependent I/O
                                    301 ;       ?RX     ( -- c T | F )
                                    302 ;         Return input byte and true, or false.
      0000A2 00 95                  303         .word      LINK 
                           0000A4   304 LINK	= .
      0000A4 04                     305         .byte      4
      0000A5 3F 4B 45 59            306         .ascii     "?KEY"
      0000A9                        307 QKEY:
      0000A9 90 5F            [ 1]  308         CLRW Y 
      0000AB 72 0B 52 30 0B   [ 2]  309         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      0000B0 C6 52 31         [ 1]  310         LD    A,UART1_DR   ;get char in A
      0000B3 1D 00 02         [ 2]  311 	SUBW	X,#2
      0000B6 E7 01            [ 1]  312         LD     (1,X),A
      0000B8 7F               [ 1]  313 	CLR	(X)
      0000B9 90 53            [ 2]  314         CPLW     Y
      0000BB                        315 INCH:
      0000BB 1D 00 02         [ 2]  316 	SUBW	X,#2
      0000BE FF               [ 2]  317         LDW     (X),Y
      0000BF 81               [ 4]  318         RET
                                    319 
                                    320 ;       TX!     ( c -- )
                                    321 ;       Send character c to  output device.
      0000C0 00 A4                  322         .word      LINK
                           0000C2   323 LINK	= .
      0000C2 04                     324         .byte      4
      0000C3 45 4D 49 54            325         .ascii     "EMIT"
      0000C7                        326 EMIT:
      0000C7 E6 01            [ 1]  327         LD     A,(1,X)
      0000C9 1C 00 02         [ 2]  328 	ADDW	X,#2
      0000CC 72 0F 52 30 FB   [ 2]  329 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0000D1 C7 52 31         [ 1]  330         LD    UART1_DR,A   ;send A
      0000D4 81               [ 4]  331         RET
                                    332 
                                    333 ;; The kernel
                                    334 
                                    335 ;       doLIT   ( -- w )
                                    336 ;       Push an inline literal.
      0000D5 00 C2                  337         .word      LINK
                           0000D7   338 LINK	= 	.
      0000D7 45                     339 	.byte      COMPO+5
      0000D8 44 4F 4C 49 54         340         .ascii     "DOLIT"
      0000DD                        341 DOLIT:
      0000DD 1D 00 02         [ 2]  342 	SUBW X,#2
                           000001   343 .if PICATOUT_MOD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000E0 16 01            [ 2]  344         ldw y,(1,sp)
      0000E2 90 FE            [ 2]  345         ldw y,(y)
      0000E4 FF               [ 2]  346         ldw (x),y
      0000E5 90 85            [ 2]  347         popw y 
                           000000   348 .else 
                                    349         POPW Y
                                    350 	LDW YTEMP,Y
                                    351 	LDW Y,(Y)
                                    352         LDW (X),Y
                                    353         LDW Y,YTEMP
                                    354 .endif 
      0000E7 90 EC 02         [ 2]  355 	JP (2,Y)
                                    356 
                                    357 ;       next    ( -- )
                                    358 ;       Code for  single index loop.
      0000EA 00 D7                  359         .word      LINK
                           0000EC   360 LINK	= 	.
      0000EC 44                     361 	.byte      COMPO+4
      0000ED 4E 45 58 54            362         .ascii     "NEXT"
      0000F1                        363 DONXT:
      0000F1 16 03            [ 2]  364 	LDW Y,(3,SP)
      0000F3 90 5A            [ 2]  365 	DECW Y
      0000F5 2A 07            [ 1]  366 	JRPL NEX1
      0000F7 90 85            [ 2]  367 	POPW Y
                           000001   368 .if PICATOUT_MOD
      0000F9 5B 02            [ 2]  369         addw sp,#2
                           000000   370 .else        
                                    371 	POP A
                                    372 	POP A
                                    373 .endif         
      0000FB 90 EC 02         [ 2]  374         JP (2,Y)
      0000FE                        375 NEX1:
      0000FE 17 03            [ 2]  376         LDW (3,SP),Y
      000100 90 85            [ 2]  377         POPW Y
      000102 90 FE            [ 2]  378 	LDW Y,(Y)
      000104 90 FC            [ 2]  379 	JP (Y)
                                    380 
                                    381 ;       ?branch ( f -- )
                                    382 ;       Branch if flag is zero.
      000106 00 EC                  383         .word      LINK
                           000108   384 LINK	= 	.
      000108 47                     385 	.byte      COMPO+7
      000109 3F 42 52 41 4E 43 48   386         .ascii     "?BRANCH"
      000110                        387 QBRAN:	
      000110 90 93            [ 1]  388         LDW Y,X
      000112 1C 00 02         [ 2]  389 	ADDW X,#2
      000115 90 FE            [ 2]  390 	LDW Y,(Y)
      000117 27 0E            [ 1]  391         JREQ     BRAN
      000119 90 85            [ 2]  392 	POPW Y
      00011B 90 EC 02         [ 2]  393 	JP (2,Y)
                                    394         
                                    395 ;       branch  ( -- )
                                    396 ;       Branch to an inline address.
      00011E 01 08                  397         .word      LINK
                           000120   398 LINK	= 	.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000120 46                     399 	.byte      COMPO+6
      000121 42 52 41 4E 43 48      400         .ascii     "BRANCH"
      000127                        401 BRAN:
      000127 90 85            [ 2]  402         POPW Y
      000129 90 FE            [ 2]  403 	LDW Y,(Y)
      00012B 90 FC            [ 2]  404         JP     (Y)
                                    405 
                                    406 ;       EXECUTE ( ca -- )
                                    407 ;       Execute  word at ca.
      00012D 01 20                  408         .word      LINK
                           00012F   409 LINK	= 	.
      00012F 07                     410         .byte       7
      000130 45 58 45 43 55 54 45   411         .ascii     "EXECUTE"
      000137                        412 EXECU:
      000137 90 93            [ 1]  413         LDW Y,X
      000139 1C 00 02         [ 2]  414 	ADDW X,#2
      00013C 90 FE            [ 2]  415 	LDW  Y,(Y)
      00013E 90 FC            [ 2]  416         JP   (Y)
                                    417 
                                    418 ;       EXIT    ( -- )
                                    419 ;       Terminate a colon definition.
      000140 01 2F                  420         .word      LINK
                           000142   421 LINK = .
      000142 04                     422         .byte      4
      000143 45 58 49 54            423         .ascii     "EXIT"
      000147                        424 EXIT:
      000147 90 85            [ 2]  425         POPW Y
      000149 81               [ 4]  426         RET
                                    427 
                                    428 ;       !       ( w a -- )
                                    429 ;       Pop  data stack to memory.
      00014A 01 42                  430         .word      LINK
                           00014C   431 LINK = .
      00014C 01                     432         .byte      1
      00014D 21                     433         .ascii     "!"
      00014E                        434 STORE:
      00014E 90 93            [ 1]  435         LDW Y,X
      000150 90 FE            [ 2]  436         LDW Y,(Y)    ;Y=a
      000152 90 BF 1C         [ 2]  437         LDW YTEMP,Y
      000155 90 93            [ 1]  438         LDW Y,X
      000157 90 EE 02         [ 2]  439         LDW Y,(2,Y)
      00015A 91 CF 1C         [ 5]  440         LDW [YTEMP],Y ;store w at a
      00015D 1C 00 04         [ 2]  441         ADDW X,#4 ; DDROP 
      000160 81               [ 4]  442         RET     
                                    443 
                                    444 ;       @       ( a -- w )
                                    445 ;       Push memory location to stack.
      000161 01 4C                  446         .word      LINK
                           000163   447 LINK	= 	.
      000163 01                     448         .byte    1
      000164 40                     449         .ascii	"@"
      000165                        450 AT:
      000165 90 93            [ 1]  451         LDW Y,X     ;Y = a
      000167 90 FE            [ 2]  452         LDW Y,(Y)   ; address 
      000169 90 FE            [ 2]  453         LDW Y,(Y)   ; value 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00016B FF               [ 2]  454         LDW (X),Y ;w = @Y
      00016C 81               [ 4]  455         RET     
                                    456 
                                    457 ;       C!      ( c b -- )
                                    458 ;       Pop  data stack to byte memory.
      00016D 01 63                  459         .word      LINK
                           00016F   460 LINK	= .
      00016F 02                     461         .byte      2
      000170 43 21                  462         .ascii     "C!"
      000172                        463 CSTOR:
      000172 90 93            [ 1]  464         LDW Y,X
      000174 90 FE            [ 2]  465 	LDW Y,(Y)    ;Y=b
      000176 E6 03            [ 1]  466         LD A,(3,X)    ;D = c
      000178 90 F7            [ 1]  467         LD  (Y),A     ;store c at b
      00017A 1C 00 04         [ 2]  468 	ADDW X,#4 ; DDROP 
      00017D 81               [ 4]  469         RET     
                                    470 
                                    471 ;       C@      ( b -- c )
                                    472 ;       Push byte in memory to  stack.
      00017E 01 6F                  473         .word      LINK
                           000180   474 LINK	= 	.
      000180 02                     475         .byte      2
      000181 43 40                  476         .ascii     "C@"
      000183                        477 CAT:
      000183 90 93            [ 1]  478         LDW Y,X     ;Y=b
      000185 90 FE            [ 2]  479         LDW Y,(Y)
      000187 90 F6            [ 1]  480         LD A,(Y)
      000189 E7 01            [ 1]  481         LD (1,X),A
      00018B 7F               [ 1]  482         CLR (X)
      00018C 81               [ 4]  483         RET     
                                    484 
                                    485 ;       RP@     ( -- a )
                                    486 ;       Push current RP to data stack.
      00018D 01 80                  487         .word      LINK
                           00018F   488 LINK	= .
      00018F 03                     489         .byte      3
      000190 52 50 40               490         .ascii     "RP@"
      000193                        491 RPAT:
      000193 90 96            [ 1]  492         LDW Y,SP    ;save return addr
      000195 1D 00 02         [ 2]  493         SUBW X,#2
      000198 FF               [ 2]  494         LDW (X),Y
      000199 81               [ 4]  495         RET     
                                    496 
                                    497 ;       RP!     ( a -- )
                                    498 ;       Set  return stack pointer.
      00019A 01 8F                  499         .word      LINK
                           00019C   500 LINK	= 	. 
      00019C 43                     501 	.byte      COMPO+3
      00019D 52 50 21               502         .ascii     "RP!"
      0001A0                        503 RPSTO:
      0001A0 90 85            [ 2]  504         POPW Y
      0001A2 90 BF 1C         [ 2]  505         LDW YTEMP,Y
      0001A5 90 93            [ 1]  506         LDW Y,X
      0001A7 90 FE            [ 2]  507         LDW Y,(Y)
      0001A9 90 94            [ 1]  508         LDW SP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001AB 1C 00 02         [ 2]  509         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      0001AE 92 CC 1C         [ 5]  510         JP [YTEMP]
                                    511 
                                    512 ;       R>      ( -- w )
                                    513 ;       Pop return stack to data stack.
      0001B1 01 9C                  514         .word      LINK
                           0001B3   515 LINK	= 	. 
      0001B3 42                     516 	.byte      COMPO+2
      0001B4 52 3E                  517         .ascii     "R>"
      0001B6                        518 RFROM:
      0001B6 90 85            [ 2]  519         POPW Y    ;save return addr
      0001B8 90 BF 1C         [ 2]  520         LDW YTEMP,Y
      0001BB 90 85            [ 2]  521         POPW Y
      0001BD 1D 00 02         [ 2]  522         SUBW X,#2
      0001C0 FF               [ 2]  523         LDW (X),Y
      0001C1 92 CC 1C         [ 5]  524         JP [YTEMP]
                                    525 
                                    526 ;       R@      ( -- w )
                                    527 ;       Copy top of return stack to stack.
      0001C4 01 B3                  528         .word      LINK
                           0001C6   529 LINK	= 	. 
      0001C6 02                     530         .byte      2
      0001C7 52 40                  531         .ascii     "R@"
      0001C9                        532 RAT:
                           000001   533 .if PICATOUT_MOD
      0001C9 16 03            [ 2]  534         ldw y,(3,sp)
      0001CB 1D 00 02         [ 2]  535         subw x,#CELLL 
      0001CE FF               [ 2]  536         ldw (x),y 
      0001CF 81               [ 4]  537         ret 
                           000000   538 .else 
                                    539         POPW Y
                                    540         LDW YTEMP,Y
                                    541         POPW Y
                                    542         PUSHW Y
                                    543         SUBW X,#2
                                    544         LDW (X),Y
                                    545         JP [YTEMP]
                                    546 .endif         
                                    547 
                                    548 ;       >R      ( w -- )
                                    549 ;       Push data stack to return stack.
      0001D0 01 C6                  550         .word      LINK
                           0001D2   551 LINK	= 	. 
      0001D2 42                     552 	.byte      COMPO+2
      0001D3 3E 52                  553         .ascii     ">R"
      0001D5                        554 TOR:
      0001D5 90 85            [ 2]  555         POPW Y    ;save return addr
      0001D7 90 BF 1C         [ 2]  556         LDW YTEMP,Y
      0001DA 90 93            [ 1]  557         LDW Y,X
      0001DC 90 FE            [ 2]  558         LDW Y,(Y)
      0001DE 90 89            [ 2]  559         PUSHW Y    ;restore return addr
      0001E0 1C 00 02         [ 2]  560         ADDW X,#2
      0001E3 92 CC 1C         [ 5]  561         JP [YTEMP]
                                    562 
                                    563 ;       SP@     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



                                    564 ;       Push current stack pointer.
      0001E6 01 D2                  565         .word      LINK
                           0001E8   566 LINK	= 	. 
      0001E8 03                     567         .byte      3
      0001E9 53 50 40               568         .ascii     "SP@"
      0001EC                        569 SPAT:
      0001EC 90 93            [ 1]  570 	LDW Y,X
      0001EE 1D 00 02         [ 2]  571         SUBW X,#2
      0001F1 FF               [ 2]  572 	LDW (X),Y
      0001F2 81               [ 4]  573         RET     
                                    574 
                                    575 ;       SP!     ( a -- )
                                    576 ;       Set  data stack pointer.
      0001F3 01 E8                  577         .word      LINK
                           0001F5   578 LINK	= 	. 
      0001F5 03                     579         .byte      3
      0001F6 53 50 21               580         .ascii     "SP!"
      0001F9                        581 SPSTO:
      0001F9 FE               [ 2]  582         LDW     X,(X)     ;X = a
      0001FA 81               [ 4]  583         RET     
                                    584 
                                    585 ;       DROP    ( w -- )
                                    586 ;       Discard top stack item.
      0001FB 01 F5                  587         .word      LINK
                           0001FD   588 LINK	= 	. 
      0001FD 04                     589         .byte      4
      0001FE 44 52 4F 50            590         .ascii     "DROP"
      000202                        591 DROP:
      000202 1C 00 02         [ 2]  592         ADDW X,#2     
      000205 81               [ 4]  593         RET     
                                    594 
                                    595 ;       DUP     ( w -- w w )
                                    596 ;       Duplicate  top stack item.
      000206 01 FD                  597         .word      LINK
                           000208   598 LINK	= 	. 
      000208 03                     599         .byte      3
      000209 44 55 50               600         .ascii     "DUP"
      00020C                        601 DUPP:
      00020C 90 93            [ 1]  602 	LDW Y,X
      00020E 1D 00 02         [ 2]  603         SUBW X,#2
      000211 90 FE            [ 2]  604 	LDW Y,(Y)
      000213 FF               [ 2]  605 	LDW (X),Y
      000214 81               [ 4]  606         RET     
                                    607 
                                    608 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    609 ;       Exchange top two stack items.
      000215 02 08                  610         .word      LINK
                           000217   611 LINK	= 	. 
      000217 04                     612         .byte      4
      000218 53 57 41 50            613         .ascii     "SWAP"
      00021C                        614 SWAPP:
      00021C 90 93            [ 1]  615         LDW Y,X
      00021E 90 FE            [ 2]  616         LDW Y,(Y)
      000220 90 BF 1C         [ 2]  617         LDW YTEMP,Y
      000223 90 93            [ 1]  618         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000225 90 EE 02         [ 2]  619         LDW Y,(2,Y)
      000228 FF               [ 2]  620         LDW (X),Y
      000229 90 BE 1C         [ 2]  621         LDW Y,YTEMP
      00022C EF 02            [ 2]  622         LDW (2,X),Y
      00022E 81               [ 4]  623         RET     
                                    624 
                                    625 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    626 ;       Copy second stack item to top.
      00022F 02 17                  627         .word      LINK
                           000231   628 LINK	= . 
      000231 04                     629         .byte      4
      000232 4F 56 45 52            630         .ascii     "OVER"
      000236                        631 OVER:
      000236 1D 00 02         [ 2]  632         SUBW X,#2
      000239 90 93            [ 1]  633         LDW Y,X
      00023B 90 EE 04         [ 2]  634         LDW Y,(4,Y)
      00023E FF               [ 2]  635         LDW (X),Y
      00023F 81               [ 4]  636         RET     
                                    637 
                                    638 ;       0<      ( n -- t )
                                    639 ;       Return true if n is negative.
      000240 02 31                  640         .word      LINK
                           000242   641 LINK	= . 
      000242 02                     642         .byte      2
      000243 30 3C                  643         .ascii     "0<"
      000245                        644 ZLESS:
      000245 A6 FF            [ 1]  645         LD A,#0xFF
      000247 90 93            [ 1]  646         LDW Y,X
      000249 90 FE            [ 2]  647         LDW Y,(Y)
      00024B 2B 01            [ 1]  648         JRMI     ZL1
      00024D 4F               [ 1]  649         CLR A   ;false
      00024E F7               [ 1]  650 ZL1:    LD     (X),A
      00024F E7 01            [ 1]  651         LD (1,X),A
      000251 81               [ 4]  652 	RET     
                                    653 
                                    654 ;       AND     ( w w -- w )
                                    655 ;       Bitwise AND.
      000252 02 42                  656         .word      LINK
                           000254   657 LINK	= . 
      000254 03                     658         .byte      3
      000255 41 4E 44               659         .ascii     "AND"
      000258                        660 ANDD:
      000258 F6               [ 1]  661         LD  A,(X)    ;D=w
      000259 E4 02            [ 1]  662         AND A,(2,X)
      00025B E7 02            [ 1]  663         LD (2,X),A
      00025D E6 01            [ 1]  664         LD A,(1,X)
      00025F E4 03            [ 1]  665         AND A,(3,X)
      000261 E7 03            [ 1]  666         LD (3,X),A
      000263 1C 00 02         [ 2]  667         ADDW X,#2
      000266 81               [ 4]  668         RET
                                    669 
                                    670 ;       OR      ( w w -- w )
                                    671 ;       Bitwise inclusive OR.
      000267 02 54                  672         .word      LINK
                           000269   673 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      000269 02                     674         .byte      2
      00026A 4F 52                  675         .ascii     "OR"
      00026C                        676 ORR:
      00026C F6               [ 1]  677         LD A,(X)    ;D=w
      00026D EA 02            [ 1]  678         OR A,(2,X)
      00026F E7 02            [ 1]  679         LD (2,X),A
      000271 E6 01            [ 1]  680         LD A,(1,X)
      000273 EA 03            [ 1]  681         OR A,(3,X)
      000275 E7 03            [ 1]  682         LD (3,X),A
      000277 1C 00 02         [ 2]  683         ADDW X,#2
      00027A 81               [ 4]  684         RET
                                    685 
                                    686 ;       XOR     ( w w -- w )
                                    687 ;       Bitwise exclusive OR.
      00027B 02 69                  688         .word      LINK
                           00027D   689 LINK	= . 
      00027D 03                     690         .byte      3
      00027E 58 4F 52               691         .ascii     "XOR"
      000281                        692 XORR:
      000281 F6               [ 1]  693         LD A,(X)    ;D=w
      000282 E8 02            [ 1]  694         XOR A,(2,X)
      000284 E7 02            [ 1]  695         LD (2,X),A
      000286 E6 01            [ 1]  696         LD A,(1,X)
      000288 E8 03            [ 1]  697         XOR A,(3,X)
      00028A E7 03            [ 1]  698         LD (3,X),A
      00028C 1C 00 02         [ 2]  699         ADDW X,#2
      00028F 81               [ 4]  700         RET
                                    701 
                                    702 ;       UM+     ( u u -- udsum )
                                    703 ;       Add two unsigned single
                                    704 ;       and return a double sum.
      000290 02 7D                  705         .word      LINK
                           000292   706 LINK	= . 
      000292 03                     707         .byte      3
      000293 55 4D 2B               708         .ascii     "UM+"
      000296                        709 UPLUS:
      000296 A6 01            [ 1]  710         LD A,#1
      000298 90 93            [ 1]  711         LDW Y,X
      00029A 90 EE 02         [ 2]  712         LDW Y,(2,Y)
      00029D 90 BF 1C         [ 2]  713         LDW YTEMP,Y
      0002A0 90 93            [ 1]  714         LDW Y,X
      0002A2 90 FE            [ 2]  715         LDW Y,(Y)
      0002A4 72 B9 00 1C      [ 2]  716         ADDW Y,YTEMP
      0002A8 EF 02            [ 2]  717         LDW (2,X),Y
      0002AA 25 01            [ 1]  718         JRC     UPL1
      0002AC 4F               [ 1]  719         CLR A
      0002AD E7 01            [ 1]  720 UPL1:   LD     (1,X),A
      0002AF 7F               [ 1]  721         CLR (X)
      0002B0 81               [ 4]  722         RET
                                    723 
                                    724 ;; System and user variables
                                    725 
                                    726 ;       doVAR   ( -- a )
                                    727 ;       Code for VARIABLE and CREATE.
      0002B1 02 92                  728         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                           0002B3   729 LINK	= . 
      0002B3 45                     730 	.byte      COMPO+5
      0002B4 44 4F 56 41 52         731         .ascii     "DOVAR"
      0002B9                        732 DOVAR:
      0002B9 1D 00 02         [ 2]  733 	SUBW X,#2
      0002BC 90 85            [ 2]  734         POPW Y    ;get return addr (pfa)
      0002BE FF               [ 2]  735         LDW (X),Y    ;push on stack
      0002BF 81               [ 4]  736         RET     ;go to RET of EXEC
                                    737 
                                    738 ;       BASE    ( -- a )
                                    739 ;       Radix base for numeric I/O.
      0002C0 02 B3                  740         .word      LINK        
                           0002C2   741 LINK = . 
      0002C2 04                     742         .byte      4
      0002C3 42 41 53 45            743         .ascii     "BASE"
      0002C7                        744 BASE:
      0002C7 90 AE 00 06      [ 2]  745 	LDW Y,#RAMBASE+6
      0002CB 1D 00 02         [ 2]  746 	SUBW X,#2
      0002CE FF               [ 2]  747         LDW (X),Y
      0002CF 81               [ 4]  748         RET
                                    749 
                                    750 ;       tmp     ( -- a )
                                    751 ;       A temporary storage.
      0002D0 02 C2                  752         .word      LINK
                                    753         
                           0002D2   754 LINK = . 
      0002D2 03                     755 	.byte      3
      0002D3 54 4D 50               756         .ascii     "TMP"
      0002D6                        757 TEMP:
      0002D6 90 AE 00 08      [ 2]  758 	LDW Y,#RAMBASE+8
      0002DA 1D 00 02         [ 2]  759 	SUBW X,#2
      0002DD FF               [ 2]  760         LDW (X),Y
      0002DE 81               [ 4]  761         RET
                                    762 
                                    763 ;       >IN     ( -- a )
                                    764 ;        Hold parsing pointer.
      0002DF 02 D2                  765         .word      LINK
                           0002E1   766 LINK = . 
      0002E1 03                     767         .byte      3
      0002E2 3E 49 4E               768         .ascii    ">IN"
      0002E5                        769 INN:
      0002E5 90 AE 00 0A      [ 2]  770 	LDW Y,#RAMBASE+10
      0002E9 1D 00 02         [ 2]  771 	SUBW X,#2
      0002EC FF               [ 2]  772         LDW (X),Y
      0002ED 81               [ 4]  773         RET
                                    774 
                                    775 ;       #TIB    ( -- a )
                                    776 ;       Count in terminal input buffer.
      0002EE 02 E1                  777         .word      LINK
                           0002F0   778 LINK = . 
      0002F0 04                     779         .byte      4
      0002F1 23 54 49 42            780         .ascii     "#TIB"
      0002F5                        781 NTIB:
      0002F5 90 AE 00 0C      [ 2]  782 	LDW Y,#RAMBASE+12
      0002F9 1D 00 02         [ 2]  783 	SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0002FC FF               [ 2]  784         LDW (X),Y
      0002FD 81               [ 4]  785         RET
                                    786 
                                    787 ;       "EVAL   ( -- a )
                                    788 ;       Execution vector of EVAL.
      0002FE 02 F0                  789         .word      LINK
                           000300   790 LINK = . 
      000300 05                     791         .byte      5
      000301 27 45 56 41 4C         792         .ascii     "'EVAL"
      000306                        793 TEVAL:
      000306 90 AE 00 10      [ 2]  794 	LDW Y,#RAMBASE+16
      00030A 1D 00 02         [ 2]  795 	SUBW X,#2
      00030D FF               [ 2]  796         LDW (X),Y
      00030E 81               [ 4]  797         RET
                                    798 
                                    799 ;       HLD     ( -- a )
                                    800 ;       Hold a pointer of output string.
      00030F 03 00                  801         .word      LINK
                           000311   802 LINK = . 
      000311 03                     803         .byte      3
      000312 48 4C 44               804         .ascii     "HLD"
      000315                        805 HLD:
      000315 90 AE 00 12      [ 2]  806 	LDW Y,#RAMBASE+18
      000319 1D 00 02         [ 2]  807 	SUBW X,#2
      00031C FF               [ 2]  808         LDW (X),Y
      00031D 81               [ 4]  809         RET
                                    810 
                                    811 ;       CONTEXT ( -- a )
                                    812 ;       Start vocabulary search.
      00031E 03 11                  813         .word      LINK
                           000320   814 LINK = . 
      000320 07                     815         .byte      7
      000321 43 4F 4E 54 45 58 54   816         .ascii     "CONTEXT"
      000328                        817 CNTXT:
      000328 90 AE 00 14      [ 2]  818 	LDW Y,#RAMBASE+20
      00032C 1D 00 02         [ 2]  819 	SUBW X,#2
      00032F FF               [ 2]  820         LDW (X),Y
      000330 81               [ 4]  821         RET
                                    822 
                                    823 ;       CP      ( -- a )
                                    824 ;       Point to top of dictionary.
      000331 03 20                  825         .word      LINK
                           000333   826 LINK = . 
      000333 02                     827         .byte      2
      000334 43 50                  828         .ascii     "CP"
      000336                        829 CPP:
      000336 90 AE 00 16      [ 2]  830 	LDW Y,#RAMBASE+22
      00033A 1D 00 02         [ 2]  831 	SUBW X,#2
      00033D FF               [ 2]  832         LDW (X),Y
      00033E 81               [ 4]  833         RET
                                    834 
                                    835 ;       LAST    ( -- a )
                                    836 ;       Point to last name in dictionary.
      00033F 03 33                  837         .word      LINK
                           000341   838 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000341 04                     839         .byte      4
      000342 4C 41 53 54            840         .ascii     "LAST"
      000346                        841 LAST:
      000346 90 AE 00 18      [ 2]  842 	LDW Y,#RAMBASE+24
      00034A 1D 00 02         [ 2]  843 	SUBW X,#2
      00034D FF               [ 2]  844         LDW (X),Y
      00034E 81               [ 4]  845         RET
                                    846 
                                    847 ;; Common functions
                                    848 
                                    849 ;       ?DUP    ( w -- w w | 0 )
                                    850 ;       Dup tos if its is not zero.
      00034F 03 41                  851         .word      LINK
                           000351   852 LINK = . 
      000351 04                     853         .byte      4
      000352 3F 44 55 50            854         .ascii     "?DUP"
      000356                        855 QDUP:
      000356 90 93            [ 1]  856         LDW Y,X
      000358 90 FE            [ 2]  857 	LDW Y,(Y)
      00035A 27 04            [ 1]  858         JREQ     QDUP1
      00035C 1D 00 02         [ 2]  859 	SUBW X,#2
      00035F FF               [ 2]  860         LDW (X),Y
      000360 81               [ 4]  861 QDUP1:  RET
                                    862 
                                    863 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    864 ;       Rot 3rd item to top.
      000361 03 51                  865         .word      LINK
                           000363   866 LINK = . 
      000363 03                     867         .byte      3
      000364 52 4F 54               868         .ascii     "ROT"
      000367                        869 ROT:
                           000001   870 .if PICATOUT_MOD
      000367 90 93            [ 1]  871         ldw y,x 
      000369 90 FE            [ 2]  872         ldw y,(y)
      00036B 90 89            [ 2]  873         pushw y 
      00036D 90 93            [ 1]  874         ldw y,x 
      00036F 90 EE 04         [ 2]  875         ldw y,(4,y)
      000372 FF               [ 2]  876         ldw (x),y 
      000373 90 93            [ 1]  877         ldw y,x 
      000375 90 EE 02         [ 2]  878         ldw y,(2,y)
      000378 EF 04            [ 2]  879         ldw (4,x),y 
      00037A 90 85            [ 2]  880         popw y 
      00037C EF 02            [ 2]  881         ldw (2,x),y
      00037E 81               [ 4]  882         ret 
                           000000   883 .else 
                                    884         LDW Y,X
                                    885 	LDW Y,(4,Y)
                                    886 	LDW YTEMP,Y
                                    887         LDW Y,X
                                    888         LDW Y,(2,Y)
                                    889         LDW XTEMP,Y
                                    890         LDW Y,X
                                    891         LDW Y,(Y)
                                    892         LDW (2,X),Y
                                    893         LDW Y,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    894         LDW (4,X),Y
                                    895         LDW Y,YTEMP
                                    896         LDW (X),Y
                                    897         RET
                                    898 .endif 
                                    899 
                                    900 ;       2DROP   ( w w -- )
                                    901 ;       Discard two items on stack.
      00037F 03 63                  902         .word      LINK
                           000381   903 LINK = . 
      000381 05                     904         .byte      5
      000382 32 44 52 4F 50         905         .ascii     "2DROP"
      000387                        906 DDROP:
      000387 1C 00 04         [ 2]  907         ADDW X,#4
      00038A 81               [ 4]  908         RET
                                    909 
                                    910 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                    911 ;       Duplicate top two items.
      00038B 03 81                  912         .word      LINK
                           00038D   913 LINK = . 
      00038D 04                     914         .byte      4
      00038E 32 44 55 50            915         .ascii     "2DUP"
      000392                        916 DDUP:
      000392 1D 00 04         [ 2]  917         SUBW X,#4
      000395 90 93            [ 1]  918         LDW Y,X
      000397 90 EE 06         [ 2]  919         LDW Y,(6,Y)
      00039A EF 02            [ 2]  920         LDW (2,X),Y
      00039C 90 93            [ 1]  921         LDW Y,X
      00039E 90 EE 04         [ 2]  922         LDW Y,(4,Y)
      0003A1 FF               [ 2]  923         LDW (X),Y
      0003A2 81               [ 4]  924         RET
                                    925 
                                    926 ;       +       ( w w -- sum )
                                    927 ;       Add top two items.
      0003A3 03 8D                  928         .word      LINK
                           0003A5   929 LINK = . 
      0003A5 01                     930         .byte      1
      0003A6 2B                     931         .ascii     "+"
      0003A7                        932 PLUS:
      0003A7 90 93            [ 1]  933         LDW Y,X
      0003A9 90 FE            [ 2]  934         LDW Y,(Y)
      0003AB 90 BF 1C         [ 2]  935         LDW YTEMP,Y
      0003AE 1C 00 02         [ 2]  936         ADDW X,#2
      0003B1 90 93            [ 1]  937         LDW Y,X
      0003B3 90 FE            [ 2]  938         LDW Y,(Y)
      0003B5 72 B9 00 1C      [ 2]  939         ADDW Y,YTEMP
      0003B9 FF               [ 2]  940         LDW (X),Y
      0003BA 81               [ 4]  941         RET
                                    942 
                                    943 ;       NOT     ( w -- w )
                                    944 ;       One's complement of tos.
      0003BB 03 A5                  945         .word      LINK
                           0003BD   946 LINK = . 
      0003BD 03                     947         .byte      3
      0003BE 4E 4F 54               948         .ascii     "NOT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003C1                        949 INVER:
      0003C1 90 93            [ 1]  950         LDW Y,X
      0003C3 90 FE            [ 2]  951         LDW Y,(Y)
      0003C5 90 53            [ 2]  952         CPLW Y
      0003C7 FF               [ 2]  953         LDW (X),Y
      0003C8 81               [ 4]  954         RET
                                    955 
                                    956 ;       NEGATE  ( n -- -n )
                                    957 ;       Two's complement of tos.
      0003C9 03 BD                  958         .word      LINK
                           0003CB   959 LINK = . 
      0003CB 06                     960         .byte      6
      0003CC 4E 45 47 41 54 45      961         .ascii     "NEGATE"
      0003D2                        962 NEGAT:
      0003D2 90 93            [ 1]  963         LDW Y,X
      0003D4 90 FE            [ 2]  964         LDW Y,(Y)
      0003D6 90 50            [ 2]  965         NEGW Y
      0003D8 FF               [ 2]  966         LDW (X),Y
      0003D9 81               [ 4]  967         RET
                                    968 
                                    969 ;       DNEGATE ( d -- -d )
                                    970 ;       Two's complement of top double.
      0003DA 03 CB                  971         .word      LINK
                           0003DC   972 LINK = . 
      0003DC 07                     973         .byte      7
      0003DD 44 4E 45 47 41 54 45   974         .ascii     "DNEGATE"
      0003E4                        975 DNEGA:
      0003E4 90 93            [ 1]  976         LDW Y,X
      0003E6 90 FE            [ 2]  977 	LDW Y,(Y)
      0003E8 90 53            [ 2]  978         CPLW Y     
      0003EA 90 BF 1C         [ 2]  979 	LDW YTEMP,Y
      0003ED 90 93            [ 1]  980         LDW Y,X
      0003EF 90 EE 02         [ 2]  981         LDW Y,(2,Y)
      0003F2 90 53            [ 2]  982         CPLW Y
      0003F4 90 5C            [ 2]  983         INCW Y
      0003F6 EF 02            [ 2]  984         LDW (2,X),Y
      0003F8 90 BE 1C         [ 2]  985         LDW Y,YTEMP
      0003FB 24 02            [ 1]  986         JRNC DN1 
      0003FD 90 5C            [ 2]  987         INCW Y
      0003FF FF               [ 2]  988 DN1:    LDW (X),Y
      000400 81               [ 4]  989         RET
                                    990 
                                    991 ;       -       ( n1 n2 -- n1-n2 )
                                    992 ;       Subtraction.
      000401 03 DC                  993         .word      LINK
                           000403   994 LINK = . 
      000403 01                     995         .byte      1
      000404 2D                     996         .ascii     "-"
      000405                        997 SUBB:
      000405 90 93            [ 1]  998         LDW Y,X
      000407 90 FE            [ 2]  999         LDW Y,(Y)
      000409 90 BF 1C         [ 2] 1000         LDW YTEMP,Y
      00040C 1C 00 02         [ 2] 1001         ADDW X,#2
      00040F 90 93            [ 1] 1002         LDW Y,X
      000411 90 FE            [ 2] 1003         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000413 72 B2 00 1C      [ 2] 1004         SUBW Y,YTEMP
      000417 FF               [ 2] 1005         LDW (X),Y
      000418 81               [ 4] 1006         RET
                                   1007 
                                   1008 ;       ABS     ( n -- n )
                                   1009 ;       Return  absolute value of n.
      000419 04 03                 1010         .word      LINK
                           00041B  1011 LINK = . 
      00041B 03                    1012         .byte      3
      00041C 41 42 53              1013         .ascii     "ABS"
      00041F                       1014 ABSS:
      00041F 90 93            [ 1] 1015         LDW Y,X
      000421 90 FE            [ 2] 1016 	LDW Y,(Y)
      000423 2A 03            [ 1] 1017         JRPL     AB1     ;negate:
      000425 90 50            [ 2] 1018         NEGW     Y     ;else negate hi byte
      000427 FF               [ 2] 1019         LDW (X),Y
      000428 81               [ 4] 1020 AB1:    RET
                                   1021 
                                   1022 ;       =       ( w w -- t )
                                   1023 ;       Return true if top two are =al.
      000429 04 1B                 1024         .word      LINK
                           00042B  1025 LINK = . 
      00042B 01                    1026         .byte      1
      00042C 3D                    1027         .ascii     "="
      00042D                       1028 EQUAL:
      00042D A6 FF            [ 1] 1029         LD A,#0xFF  ;true
      00042F 90 93            [ 1] 1030         LDW Y,X    ;D = n2
      000431 90 FE            [ 2] 1031         LDW Y,(Y)
      000433 90 BF 1C         [ 2] 1032         LDW YTEMP,Y
      000436 1C 00 02         [ 2] 1033         ADDW X,#2
      000439 90 93            [ 1] 1034         LDW Y,X
      00043B 90 FE            [ 2] 1035         LDW Y,(Y)
      00043D 90 B3 1C         [ 2] 1036         CPW Y,YTEMP     ;if n2 <> n1
      000440 27 01            [ 1] 1037         JREQ     EQ1
      000442 4F               [ 1] 1038         CLR A
      000443 F7               [ 1] 1039 EQ1:    LD (X),A
      000444 E7 01            [ 1] 1040         LD (1,X),A
      000446 81               [ 4] 1041 	RET     
                                   1042 
                                   1043 ;       U<      ( u u -- t )
                                   1044 ;       Unsigned compare of top two items.
      000447 04 2B                 1045         .word      LINK
                           000449  1046 LINK = . 
      000449 02                    1047         .byte      2
      00044A 55 3C                 1048         .ascii     "U<"
      00044C                       1049 ULESS:
      00044C A6 FF            [ 1] 1050         LD A,#0xFF  ;true
      00044E 90 93            [ 1] 1051         LDW Y,X    ;D = n2
      000450 90 FE            [ 2] 1052         LDW Y,(Y)
      000452 90 BF 1C         [ 2] 1053         LDW YTEMP,Y
      000455 1C 00 02         [ 2] 1054         ADDW X,#2
      000458 90 93            [ 1] 1055         LDW Y,X
      00045A 90 FE            [ 2] 1056         LDW Y,(Y)
      00045C 90 B3 1C         [ 2] 1057         CPW Y,YTEMP     ;if n2 <> n1
      00045F 25 01            [ 1] 1058         JRULT     ULES1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      000461 4F               [ 1] 1059         CLR A
      000462 F7               [ 1] 1060 ULES1:  LD (X),A
      000463 E7 01            [ 1] 1061         LD (1,X),A
      000465 81               [ 4] 1062 	RET     
                                   1063 
                                   1064 ;       <       ( n1 n2 -- t )
                                   1065 ;       Signed compare of top two items.
      000466 04 49                 1066         .word      LINK
                           000468  1067 LINK = . 
      000468 01                    1068         .byte      1
      000469 3C                    1069         .ascii     "<"
      00046A                       1070 LESS:
      00046A A6 FF            [ 1] 1071         LD A,#0xFF  ;true
      00046C 90 93            [ 1] 1072         LDW Y,X    ;D = n2
      00046E 90 FE            [ 2] 1073         LDW Y,(Y)
      000470 90 BF 1C         [ 2] 1074         LDW YTEMP,Y
      000473 1C 00 02         [ 2] 1075         ADDW X,#2
      000476 90 93            [ 1] 1076         LDW Y,X
      000478 90 FE            [ 2] 1077         LDW Y,(Y)
      00047A 90 B3 1C         [ 2] 1078         CPW Y,YTEMP     ;if n2 <> n1
      00047D 2F 01            [ 1] 1079         JRSLT     LT1
      00047F 4F               [ 1] 1080         CLR A
      000480 F7               [ 1] 1081 LT1:    LD (X),A
      000481 E7 01            [ 1] 1082         LD (1,X),A
      000483 81               [ 4] 1083 	RET     
                                   1084 
                                   1085 ;       MAX     ( n n -- n )
                                   1086 ;       Return greater of two top items.
      000484 04 68                 1087         .word      LINK
                           000486  1088 LINK = . 
      000486 03                    1089         .byte      3
      000487 4D 41 58              1090         .ascii     "MAX"
      00048A                       1091 MAX:
      00048A 90 93            [ 1] 1092         LDW Y,X    ;D = n2
      00048C 90 EE 02         [ 2] 1093         LDW Y,(2,Y)
      00048F 90 BF 1C         [ 2] 1094         LDW YTEMP,Y
      000492 90 93            [ 1] 1095         LDW Y,X
      000494 90 FE            [ 2] 1096         LDW Y,(Y)
      000496 90 B3 1C         [ 2] 1097         CPW Y,YTEMP     ;if n2 <> n1
      000499 2F 02            [ 1] 1098         JRSLT     MAX1
      00049B EF 02            [ 2] 1099         LDW (2,X),Y
      00049D 1C 00 02         [ 2] 1100 MAX1:   ADDW X,#2
      0004A0 81               [ 4] 1101 	RET     
                                   1102 
                                   1103 ;       MIN     ( n n -- n )
                                   1104 ;       Return smaller of top two items.
      0004A1 04 86                 1105         .word      LINK
                           0004A3  1106 LINK = . 
      0004A3 03                    1107         .byte      3
      0004A4 4D 49 4E              1108         .ascii     "MIN"
      0004A7                       1109 MIN:
      0004A7 90 93            [ 1] 1110         LDW Y,X    ;D = n2
      0004A9 90 EE 02         [ 2] 1111         LDW Y,(2,Y)
      0004AC 90 BF 1C         [ 2] 1112         LDW YTEMP,Y
      0004AF 90 93            [ 1] 1113         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004B1 90 FE            [ 2] 1114         LDW Y,(Y)
      0004B3 90 B3 1C         [ 2] 1115         CPW Y,YTEMP     ;if n2 <> n1
      0004B6 2C 02            [ 1] 1116         JRSGT     MIN1
      0004B8 EF 02            [ 2] 1117         LDW (2,X),Y
      0004BA 1C 00 02         [ 2] 1118 MIN1:	ADDW X,#2
      0004BD 81               [ 4] 1119 	RET     
                                   1120 
                                   1121 ;       WITHIN  ( u ul uh -- t )
                                   1122 ;       Return true if u is within
                                   1123 ;       range of ul and uh. ( ul <= u < uh )
      0004BE 04 A3                 1124         .word      LINK
                           0004C0  1125 LINK = . 
      0004C0 06                    1126         .byte      6
      0004C1 57 49 54 48 49 4E     1127         .ascii     "WITHIN"
      0004C7                       1128 WITHI:
      0004C7 CD 02 36         [ 4] 1129         CALL     OVER
      0004CA CD 04 05         [ 4] 1130         CALL     SUBB
      0004CD CD 01 D5         [ 4] 1131         CALL     TOR
      0004D0 CD 04 05         [ 4] 1132         CALL     SUBB
      0004D3 CD 01 B6         [ 4] 1133         CALL     RFROM
      0004D6 CC 04 4C         [ 2] 1134         JP     ULESS
                                   1135 
                                   1136 ;; Divide
                                   1137 
                                   1138 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1139 ;       Unsigned divide of a double by a
                                   1140 ;       single. Return mod and quotient.
      0004D9 04 C0                 1141         .word      LINK
                           0004DB  1142 LINK = . 
      0004DB 06                    1143         .byte      6
      0004DC 55 4D 2F 4D 4F 44     1144         .ascii     "UM/MOD"
      0004E2                       1145 UMMOD:
      0004E2 BF 1A            [ 2] 1146 	LDW XTEMP,X	; save stack pointer
      0004E4 FE               [ 2] 1147 	LDW X,(X)		; un
      0004E5 BF 1C            [ 2] 1148 	LDW YTEMP,X ; save un
      0004E7 90 BE 1A         [ 2] 1149 	LDW Y,XTEMP	; stack pointer
      0004EA 90 EE 04         [ 2] 1150 	LDW Y,(4,Y) ; Y=udl
      0004ED BE 1A            [ 2] 1151 	LDW X,XTEMP
      0004EF EE 02            [ 2] 1152 	LDW X,(2,X)	; X=udh
      0004F1 B3 1C            [ 2] 1153 	CPW X,YTEMP
      0004F3 23 0F            [ 2] 1154 	JRULE MMSM1
      0004F5 BE 1A            [ 2] 1155 	LDW X,XTEMP
      0004F7 1C 00 02         [ 2] 1156 	ADDW X,#2	; pop off 1 level
      0004FA 90 AE FF FF      [ 2] 1157 	LDW Y,#0xFFFF
      0004FE FF               [ 2] 1158 	LDW (X),Y
      0004FF 90 5F            [ 1] 1159 	CLRW Y
      000501 EF 02            [ 2] 1160 	LDW (2,X),Y
      000503 81               [ 4] 1161 	RET
      000504                       1162 MMSM1:
                           000001  1163 .if  PICATOUT_MOD 
                                   1164 ; take advantage of divw x,y when udh==0
      000504 5D               [ 2] 1165         tnzw x  ; is udh==0?
      000505 26 11            [ 1] 1166         jrne MMSM2 
      000507 93               [ 1] 1167         ldw x,y    ;udl 
      000508 90 BE 1C         [ 2] 1168         ldw y,YTEMP ; divisor 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00050B 65               [ 2] 1169         divw x,y 
      00050C 89               [ 2] 1170         pushw x     ; quotient 
      00050D BE 1A            [ 2] 1171         ldw x,XTEMP 
      00050F 1C 00 02         [ 2] 1172         addw x,#CELLL 
      000512 EF 02            [ 2] 1173         ldw (2,x),y  ; ur
      000514 90 85            [ 2] 1174         popw y 
      000516 FF               [ 2] 1175         ldw (x),y ; uq 
      000517 81               [ 4] 1176         ret 
      000518                       1177 MMSM2:        
                                   1178 .endif 
      000518 A6 11            [ 1] 1179 	LD A,#17	; loop count
      00051A                       1180 MMSM3:
      00051A B3 1C            [ 2] 1181 	CPW X,YTEMP	; compare udh to un
      00051C 25 04            [ 1] 1182 	JRULT MMSM4	; can't subtract
      00051E 72 B0 00 1C      [ 2] 1183 	SUBW X,YTEMP	; can subtract
      000522                       1184 MMSM4:
      000522 8C               [ 1] 1185 	CCF	; quotient bit
      000523 90 59            [ 2] 1186 	RLCW Y	; rotate into quotient
      000525 59               [ 2] 1187 	RLCW X	; rotate into remainder
      000526 4A               [ 1] 1188 	DEC A	; repeat
      000527 22 F1            [ 1] 1189 	JRUGT MMSM3
      000529 57               [ 2] 1190 	SRAW X
      00052A BF 1C            [ 2] 1191 	LDW YTEMP,X	; done, save remainder
      00052C BE 1A            [ 2] 1192 	LDW X,XTEMP
      00052E 1C 00 02         [ 2] 1193 	ADDW X,#2	; drop
      000531 FF               [ 2] 1194 	LDW (X),Y
      000532 90 BE 1C         [ 2] 1195 	LDW Y,YTEMP	; save quotient
      000535 EF 02            [ 2] 1196 	LDW (2,X),Y
      000537 81               [ 4] 1197 	RET
                                   1198 	
                                   1199 ;       M/MOD   ( d n -- r q )
                                   1200 ;       Signed floored divide of double by
                                   1201 ;       single. Return mod and quotient.
      000538 04 DB                 1202         .word      LINK
                           00053A  1203 LINK = . 
      00053A 05                    1204         .byte      5
      00053B 4D 2F 4D 4F 44        1205         .ascii     "M/MOD"
      000540                       1206 MSMOD:  
      000540 CD 02 0C         [ 4] 1207         CALL	DUPP
      000543 CD 02 45         [ 4] 1208         CALL	ZLESS
      000546 CD 02 0C         [ 4] 1209         CALL	DUPP
      000549 CD 01 D5         [ 4] 1210         CALL	TOR
      00054C CD 01 10         [ 4] 1211         CALL	QBRAN
      00054F 05 5D                 1212         .word	MMOD1
      000551 CD 03 D2         [ 4] 1213         CALL	NEGAT
      000554 CD 01 D5         [ 4] 1214         CALL	TOR
      000557 CD 03 E4         [ 4] 1215         CALL	DNEGA
      00055A CD 01 B6         [ 4] 1216         CALL	RFROM
      00055D CD 01 D5         [ 4] 1217 MMOD1:	CALL	TOR
      000560 CD 02 0C         [ 4] 1218         CALL	DUPP
      000563 CD 02 45         [ 4] 1219         CALL	ZLESS
      000566 CD 01 10         [ 4] 1220         CALL	QBRAN
      000569 05 71                 1221         .word	MMOD2
      00056B CD 01 C9         [ 4] 1222         CALL	RAT
      00056E CD 03 A7         [ 4] 1223         CALL	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000571 CD 01 B6         [ 4] 1224 MMOD2:	CALL	RFROM
      000574 CD 04 E2         [ 4] 1225         CALL	UMMOD
      000577 CD 01 B6         [ 4] 1226         CALL	RFROM
      00057A CD 01 10         [ 4] 1227         CALL	QBRAN
      00057D 05 88                 1228         .word	MMOD3
      00057F CD 02 1C         [ 4] 1229         CALL	SWAPP
      000582 CD 03 D2         [ 4] 1230         CALL	NEGAT
      000585 CD 02 1C         [ 4] 1231         CALL	SWAPP
      000588 81               [ 4] 1232 MMOD3:	RET
                                   1233 
                                   1234 ;       /MOD    ( n n -- r q )
                                   1235 ;       Signed divide. Return mod and quotient.
      000589 05 3A                 1236         .word      LINK
                           00058B  1237 LINK = . 
      00058B 04                    1238         .byte      4
      00058C 2F 4D 4F 44           1239         .ascii     "/MOD"
      000590                       1240 SLMOD:
      000590 CD 02 36         [ 4] 1241         CALL	OVER
      000593 CD 02 45         [ 4] 1242         CALL	ZLESS
      000596 CD 02 1C         [ 4] 1243         CALL	SWAPP
      000599 CC 05 40         [ 2] 1244         JP	MSMOD
                                   1245 
                                   1246 ;       MOD     ( n n -- r )
                                   1247 ;       Signed divide. Return mod only.
      00059C 05 8B                 1248         .word      LINK
                           00059E  1249 LINK = . 
      00059E 03                    1250         .byte      3
      00059F 4D 4F 44              1251         .ascii     "MOD"
      0005A2                       1252 MODD:
      0005A2 CD 05 90         [ 4] 1253 	CALL	SLMOD
      0005A5 CC 02 02         [ 2] 1254 	JP	DROP
                                   1255 
                                   1256 ;       /       ( n n -- q )
                                   1257 ;       Signed divide. Return quotient only.
      0005A8 05 9E                 1258         .word      LINK
                           0005AA  1259 LINK = . 
      0005AA 01                    1260         .byte      1
      0005AB 2F                    1261         .ascii     "/"
      0005AC                       1262 SLASH:
      0005AC CD 05 90         [ 4] 1263         CALL	SLMOD
      0005AF CD 02 1C         [ 4] 1264         CALL	SWAPP
      0005B2 CC 02 02         [ 2] 1265         JP	DROP
                                   1266 
                                   1267 ;; Multiply
                                   1268 
                                   1269 ;       UM*     ( u u -- ud )
                                   1270 ;       Unsigned multiply. Return double product.
      0005B5 05 AA                 1271         .word      LINK
                           0005B7  1272 LINK = . 
      0005B7 03                    1273         .byte      3
      0005B8 55 4D 2A              1274         .ascii     "UM*"
      0005BB                       1275 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1276 .if PICATOUT_MOD 
                                   1277 ; take advantage of SP addressing modes
                                   1278 ; these PRODx in RAM are not required
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



                                   1279 ; the product is kept on stack as local variable 
                                   1280         ;; bytes offset on data stack 
                           000002  1281         da=2 
                           000003  1282         db=3 
                           000000  1283         dc=0 
                           000001  1284         dd=1 
                                   1285         ;; product bytes offset on return stack 
                           000001  1286         UD1=1  ; ud bits 31..24
                           000002  1287         UD2=2  ; ud bits 23..16
                           000003  1288         UD3=3  ; ud bits 15..8 
                           000004  1289         UD4=4  ; ud bits 7..0 
                                   1290         ;; local variable for product set to zero   
      0005BB 90 5F            [ 1] 1291         clrw y 
      0005BD 90 89            [ 2] 1292         pushw y  ; bits 15..0
      0005BF 90 89            [ 2] 1293         pushw y  ; bits 31..16 
      0005C1 E6 03            [ 1] 1294         ld a,(db,x) ; b 
      0005C3 90 97            [ 1] 1295         ld yl,a 
      0005C5 E6 01            [ 1] 1296         ld a,(dd,x)   ; d
      0005C7 90 42            [ 4] 1297         mul y,a    ; b*d  
      0005C9 17 03            [ 2] 1298         ldw (UD3,sp),y ; lowest weight product 
      0005CB E6 03            [ 1] 1299         ld a,(db,x)
      0005CD 90 97            [ 1] 1300         ld yl,a 
      0005CF E6 00            [ 1] 1301         ld a,(dc,x)
      0005D1 90 42            [ 4] 1302         mul y,a  ; b*c 
                                   1303         ;;; do the partial sum 
      0005D3 72 F9 02         [ 2] 1304         addw y,(UD2,sp)
      0005D6 4F               [ 1] 1305         clr a 
      0005D7 49               [ 1] 1306         rlc a
      0005D8 6B 01            [ 1] 1307         ld (UD1,sp),a 
      0005DA 17 02            [ 2] 1308         ldw (UD2,sp),y 
      0005DC E6 02            [ 1] 1309         ld a,(da,x)
      0005DE 90 97            [ 1] 1310         ld yl,a 
      0005E0 E6 01            [ 1] 1311         ld a,(dd,x)
      0005E2 90 42            [ 4] 1312         mul y,a   ; a*d 
                                   1313         ;; do partial sum 
      0005E4 72 F9 02         [ 2] 1314         addw y,(UD2,sp)
      0005E7 4F               [ 1] 1315         clr a 
      0005E8 19 01            [ 1] 1316         adc a,(UD1,sp)
      0005EA 6B 01            [ 1] 1317         ld (UD1,sp),a  
      0005EC 17 02            [ 2] 1318         ldw (UD2,sp),y 
      0005EE E6 02            [ 1] 1319         ld a,(da,x)
      0005F0 90 97            [ 1] 1320         ld yl,a 
      0005F2 E6 00            [ 1] 1321         ld a,(dc,x)
      0005F4 90 42            [ 4] 1322         mul y,a  ;  a*c highest weight product 
                                   1323         ;;; do partial sum 
      0005F6 72 F9 01         [ 2] 1324         addw y,(UD1,sp)
      0005F9 FF               [ 2] 1325         ldw (x),y  ; udh 
      0005FA 16 03            [ 2] 1326         ldw y,(UD3,sp)
      0005FC EF 02            [ 2] 1327         ldw (2,x),y  ; udl  
      0005FE 5B 04            [ 2] 1328         addw sp,#4 ; drop local variable 
      000600 81               [ 4] 1329         ret  
                           000000  1330 .else
                                   1331 	LD A,(2,X)	; b
                                   1332 	LD YL,A
                                   1333 	LD A,(X)	; d
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1334 	MUL Y,A
                                   1335 	LDW PROD1,Y
                                   1336 	LD A,(3,X)	; a
                                   1337 	LD YL,A
                                   1338 	LD A,(X)	; d
                                   1339 	MUL Y,A
                                   1340 	LDW PROD2,Y
                                   1341 	LD A,(2,X)	; b
                                   1342 	LD YL,A
                                   1343 	LD A,(1,X)	; c
                                   1344 	MUL Y,A
                                   1345 	LDW PROD3,Y
                                   1346 	LD A,(3,X)	; a
                                   1347 	LD YL,A
                                   1348 	LD A,(1,X)	; c
                                   1349 	MUL Y,A	; least signifiant product
                                   1350 	CLR A
                                   1351 	RRWA Y
                                   1352 	LD (3,X),A	; store least significant byte
                                   1353 	ADDW Y,PROD3
                                   1354 	CLR A
                                   1355 	ADC A,#0	; save carry
                                   1356 	LD CARRY,A
                                   1357 	ADDW Y,PROD2
                                   1358 	LD A,CARRY
                                   1359 	ADC A,#0	; add 2nd carry
                                   1360 	LD CARRY,A
                                   1361 	CLR A
                                   1362 	RRWA Y
                                   1363 	LD (2,X),A	; 2nd product byte
                                   1364 	ADDW Y,PROD1
                                   1365 	RRWA Y
                                   1366 	LD (1,X),A	; 3rd product byte
                                   1367 	RRWA Y  	; 4th product byte now in A
                                   1368 	ADC A,CARRY	; fill in carry bits
                                   1369 	LD (X),A
                                   1370 	RET
                                   1371 .endif 
                                   1372 
                                   1373 
                                   1374 ;       *       ( n n -- n )
                                   1375 ;       Signed multiply. Return single product.
      000601 05 B7                 1376         .word      LINK
                           000603  1377 LINK = . 
      000603 01                    1378         .byte      1
      000604 2A                    1379         .ascii     "*"
      000605                       1380 STAR:
      000605 CD 05 BB         [ 4] 1381 	CALL	UMSTA
      000608 CC 02 02         [ 2] 1382 	JP	DROP
                                   1383 
                                   1384 ;       M*      ( n n -- d )
                                   1385 ;       Signed multiply. Return double product.
      00060B 06 03                 1386         .word      LINK
                           00060D  1387 LINK = . 
      00060D 02                    1388         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00060E 4D 2A                 1389         .ascii     "M*"
      000610                       1390 MSTAR:      
      000610 CD 03 92         [ 4] 1391         CALL	DDUP
      000613 CD 02 81         [ 4] 1392         CALL	XORR
      000616 CD 02 45         [ 4] 1393         CALL	ZLESS
      000619 CD 01 D5         [ 4] 1394         CALL	TOR
      00061C CD 04 1F         [ 4] 1395         CALL	ABSS
      00061F CD 02 1C         [ 4] 1396         CALL	SWAPP
      000622 CD 04 1F         [ 4] 1397         CALL	ABSS
      000625 CD 05 BB         [ 4] 1398         CALL	UMSTA
      000628 CD 01 B6         [ 4] 1399         CALL	RFROM
      00062B CD 01 10         [ 4] 1400         CALL	QBRAN
      00062E 06 33                 1401         .word	MSTA1
      000630 CD 03 E4         [ 4] 1402         CALL	DNEGA
      000633 81               [ 4] 1403 MSTA1:	RET
                                   1404 
                                   1405 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1406 ;       Multiply n1 and n2, then divide
                                   1407 ;       by n3. Return mod and quotient.
      000634 06 0D                 1408         .word      LINK
                           000636  1409 LINK = . 
      000636 05                    1410         .byte      5
      000637 2A 2F 4D 4F 44        1411         .ascii     "*/MOD"
      00063C                       1412 SSMOD:
      00063C CD 01 D5         [ 4] 1413         CALL     TOR
      00063F CD 06 10         [ 4] 1414         CALL     MSTAR
      000642 CD 01 B6         [ 4] 1415         CALL     RFROM
      000645 CC 05 40         [ 2] 1416         JP     MSMOD
                                   1417 
                                   1418 ;       */      ( n1 n2 n3 -- q )
                                   1419 ;       Multiply n1 by n2, then divide
                                   1420 ;       by n3. Return quotient only.
      000648 06 36                 1421         .word      LINK
                           00064A  1422 LINK = . 
      00064A 02                    1423         .byte      2
      00064B 2A 2F                 1424         .ascii     "*/"
      00064D                       1425 STASL:
      00064D CD 06 3C         [ 4] 1426         CALL	SSMOD
      000650 CD 02 1C         [ 4] 1427         CALL	SWAPP
      000653 CC 02 02         [ 2] 1428         JP	DROP
                                   1429 
                                   1430 ;; Miscellaneous
                                   1431 
                                   1432 ;       CELL+   ( a -- a )
                                   1433 ;       Add cell size in byte to address.
      000656 06 4A                 1434         .word      LINK
                           000658  1435 LINK = . 
      000658 02                    1436         .byte       2
      000659 32 2B                 1437         .ascii     "2+"
      00065B                       1438 CELLP:
      00065B 90 93            [ 1] 1439         LDW Y,X
      00065D 90 FE            [ 2] 1440 	LDW Y,(Y)
      00065F 72 A9 00 02      [ 2] 1441         ADDW Y,#CELLL 
      000663 FF               [ 2] 1442         LDW (X),Y
      000664 81               [ 4] 1443         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



                                   1444 
                                   1445 ;       CELL-   ( a -- a )
                                   1446 ;       Subtract 2 from address.
      000665 06 58                 1447         .word      LINK
                           000667  1448 LINK = . 
      000667 02                    1449         .byte       2
      000668 32 2D                 1450         .ascii     "2-"
      00066A                       1451 CELLM:
      00066A 90 93            [ 1] 1452         LDW Y,X
      00066C 90 FE            [ 2] 1453 	LDW Y,(Y)
      00066E 72 A2 00 02      [ 2] 1454         SUBW Y,#CELLL
      000672 FF               [ 2] 1455         LDW (X),Y
      000673 81               [ 4] 1456         RET
                                   1457 
                                   1458 ;       CELLS   ( n -- n )
                                   1459 ;       Multiply tos by 2.
      000674 06 67                 1460         .word      LINK
                           000676  1461 LINK = . 
      000676 02                    1462         .byte       2
      000677 32 2A                 1463         .ascii     "2*"
      000679                       1464 CELLS:
      000679 90 93            [ 1] 1465         LDW Y,X
      00067B 90 FE            [ 2] 1466 	LDW Y,(Y)
      00067D 90 58            [ 2] 1467         SLAW Y
      00067F FF               [ 2] 1468         LDW (X),Y
      000680 81               [ 4] 1469         RET
                                   1470 
                                   1471 ;       1+      ( a -- a )
                                   1472 ;       Add cell size in byte to address.
      000681 06 76                 1473         .word      LINK
                           000683  1474 LINK = . 
      000683 02                    1475         .byte      2
      000684 31 2B                 1476         .ascii     "1+"
      000686                       1477 ONEP:
      000686 90 93            [ 1] 1478         LDW Y,X
      000688 90 FE            [ 2] 1479 	LDW Y,(Y)
      00068A 90 5C            [ 2] 1480         INCW Y
      00068C FF               [ 2] 1481         LDW (X),Y
      00068D 81               [ 4] 1482         RET
                                   1483 
                                   1484 ;       1-      ( a -- a )
                                   1485 ;       Subtract 2 from address.
      00068E 06 83                 1486         .word      LINK
                           000690  1487 LINK = . 
      000690 02                    1488         .byte      2
      000691 31 2D                 1489         .ascii     "1-"
      000693                       1490 ONEM:
      000693 90 93            [ 1] 1491         LDW Y,X
      000695 90 FE            [ 2] 1492 	LDW Y,(Y)
      000697 90 5A            [ 2] 1493         DECW Y
      000699 FF               [ 2] 1494         LDW (X),Y
      00069A 81               [ 4] 1495         RET
                                   1496 
                                   1497 ;       2/      ( n -- n )
                                   1498 ;       Multiply tos by 2.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      00069B 06 90                 1499         .word      LINK
                           00069D  1500 LINK = . 
      00069D 02                    1501         .byte      2
      00069E 32 2F                 1502         .ascii     "2/"
      0006A0                       1503 TWOSL:
      0006A0 90 93            [ 1] 1504         LDW Y,X
      0006A2 90 FE            [ 2] 1505 	LDW Y,(Y)
      0006A4 90 57            [ 2] 1506         SRAW Y
      0006A6 FF               [ 2] 1507         LDW (X),Y
      0006A7 81               [ 4] 1508         RET
                                   1509 
                                   1510 ;       BL      ( -- 32 )
                                   1511 ;       Return 32,  blank character.
      0006A8 06 9D                 1512         .word      LINK
                           0006AA  1513 LINK = . 
      0006AA 02                    1514         .byte      2
      0006AB 42 4C                 1515         .ascii     "BL"
      0006AD                       1516 BLANK:
      0006AD 1D 00 02         [ 2] 1517         SUBW X,#2
      0006B0 90 AE 00 20      [ 2] 1518 	LDW Y,#32
      0006B4 FF               [ 2] 1519         LDW (X),Y
      0006B5 81               [ 4] 1520         RET
                                   1521 
                                   1522 ;         0     ( -- 0)
                                   1523 ;         Return 0.
      0006B6 06 AA                 1524         .word      LINK
                           0006B8  1525 LINK = . 
      0006B8 01                    1526         .byte       1
      0006B9 30                    1527         .ascii     "0"
      0006BA                       1528 ZERO:
      0006BA 1D 00 02         [ 2] 1529         SUBW X,#2
      0006BD 90 5F            [ 1] 1530 	CLRW Y
      0006BF FF               [ 2] 1531         LDW (X),Y
      0006C0 81               [ 4] 1532         RET
                                   1533 
                                   1534 ;         1     ( -- 1)
                                   1535 ;         Return 1.
      0006C1 06 B8                 1536         .word      LINK
                           0006C3  1537 LINK = . 
      0006C3 01                    1538         .byte       1
      0006C4 31                    1539         .ascii     "1"
      0006C5                       1540 ONE:
      0006C5 1D 00 02         [ 2] 1541         SUBW X,#2
      0006C8 90 AE 00 01      [ 2] 1542 	LDW Y,#1
      0006CC FF               [ 2] 1543         LDW (X),Y
      0006CD 81               [ 4] 1544         RET
                                   1545 
                                   1546 ;         -1    ( -- -1)
                                   1547 ;         Return 32,  blank character.
      0006CE 06 C3                 1548         .word      LINK
                           0006D0  1549 LINK = . 
      0006D0 02                    1550         .byte       2
      0006D1 2D 31                 1551         .ascii     "-1"
      0006D3                       1552 MONE:
      0006D3 1D 00 02         [ 2] 1553         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0006D6 90 AE FF FF      [ 2] 1554 	LDW Y,#0xFFFF
      0006DA FF               [ 2] 1555         LDW (X),Y
      0006DB 81               [ 4] 1556         RET
                                   1557 
                                   1558 ;       >CHAR   ( c -- c )
                                   1559 ;       Filter non-printing characters.
      0006DC 06 D0                 1560         .word      LINK
                           0006DE  1561 LINK = . 
      0006DE 05                    1562         .byte      5
      0006DF 3E 43 48 41 52        1563         .ascii     ">CHAR"
      0006E4                       1564 TCHAR:
                           000001  1565 .if CONVERT_TO_CODE
      0006E4 E6 01            [ 1] 1566         ld a,(1,x)
      0006E6 A1 20            [ 1] 1567         cp a,#32  
      0006E8 2B 05            [ 1] 1568         jrmi 1$ 
      0006EA A1 7F            [ 1] 1569         cp a,#127 
      0006EC 2A 01            [ 1] 1570         jrpl 1$ 
      0006EE 81               [ 4] 1571         ret 
      0006EF A6 5F            [ 1] 1572 1$:     ld a,#'_ 
      0006F1 E7 01            [ 1] 1573         ld (1,x),a 
      0006F3 81               [ 4] 1574         ret 
                           000000  1575 .else
                                   1576         CALL     DOLIT
                                   1577         .word       0x7F
                                   1578         CALL     ANDD
                                   1579         CALL     DUPP    ;mask msb
                                   1580         CALL     DOLIT
                                   1581         .word      127
                                   1582         CALL     BLANK
                                   1583         CALL     WITHI   ;check for printable
                                   1584         CALL     QBRAN
                                   1585         .word    TCHA1
                                   1586         CALL     DROP
                                   1587         CALL     DOLIT
                                   1588         .word     0x5F		; "_"     ;replace non-printables
                                   1589 .endif 
      0006F4 81               [ 4] 1590 TCHA1:  RET
                                   1591 
                                   1592 ;       DEPTH   ( -- n )
                                   1593 ;       Return  depth of  data stack.
      0006F5 06 DE                 1594         .word      LINK
                           0006F7  1595 LINK = . 
      0006F7 05                    1596         .byte      5
      0006F8 44 45 50 54 48        1597         .ascii     "DEPTH"
      0006FD                       1598 DEPTH: 
      0006FD 90 BE 22         [ 2] 1599         LDW Y,SP0    ;save data stack ptr
      000700 BF 1A            [ 2] 1600 	LDW XTEMP,X
      000702 72 B2 00 1A      [ 2] 1601         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000706 90 57            [ 2] 1602         SRAW Y    ;Y = #stack items
                           000001  1603 .if PICATOUT_MOD
                                   1604 ; why ? 
                                   1605 ;      	DECW Y
                                   1606 .endif 
      000708 1D 00 02         [ 2] 1607 	SUBW X,#2
      00070B FF               [ 2] 1608         LDW (X),Y     ; if neg, underflow
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00070C 81               [ 4] 1609         RET
                                   1610 
                                   1611 ;       PICK    ( ... +n -- ... w )
                                   1612 ;       Copy  nth stack item to tos.
      00070D 06 F7                 1613         .word      LINK
                           00070F  1614 LINK = . 
      00070F 04                    1615         .byte      4
      000710 50 49 43 4B           1616         .ascii     "PICK"
      000714                       1617 PICK:
      000714 90 93            [ 1] 1618         LDW Y,X   ;D = n1
      000716 90 FE            [ 2] 1619         LDW Y,(Y)
      000718 90 58            [ 2] 1620         SLAW Y
      00071A BF 1A            [ 2] 1621         LDW XTEMP,X
      00071C 72 B9 00 1A      [ 2] 1622         ADDW Y,XTEMP
      000720 90 FE            [ 2] 1623         LDW Y,(Y)
      000722 FF               [ 2] 1624         LDW (X),Y
      000723 81               [ 4] 1625         RET
                                   1626 
                                   1627 ;; Memory access
                                   1628 
                                   1629 ;       +!      ( n a -- )
                                   1630 ;       Add n to  contents at address a.
      000724 07 0F                 1631         .word      LINK
                           000726  1632 LINK = . 
      000726 02                    1633         .byte      2
      000727 2B 21                 1634         .ascii     "+!"
      000729                       1635 PSTOR:
                           000001  1636 .if CONVERT_TO_CODE
      000729 90 93            [ 1] 1637         ldw y,x 
      00072B 90 FE            [ 2] 1638         ldw y,(y)
      00072D 90 BF 1C         [ 2] 1639         ldw YTEMP,y  ; address
      000730 90 FE            [ 2] 1640         ldw y,(y)  
      000732 90 89            [ 2] 1641         pushw y  ; value at address 
      000734 90 93            [ 1] 1642         ldw y,x 
      000736 90 EE 02         [ 2] 1643         ldw y,(2,y) ; n 
      000739 72 F9 01         [ 2] 1644         addw y,(1,sp) ; n+value
      00073C 91 CF 1C         [ 5] 1645         ldw [YTEMP],y ;  a!
      00073F 90 85            [ 2] 1646         popw y    ;drop local var
      000741 1C 00 04         [ 2] 1647         addw x,#4 ; DDROP 
      000744 81               [ 4] 1648         ret 
                           000000  1649 .else
                                   1650         CALL	SWAPP
                                   1651         CALL	OVER
                                   1652         CALL	AT
                                   1653         CALL	PLUS
                                   1654         CALL	SWAPP
                                   1655         JP	STORE
                                   1656 .endif 
                                   1657 ;       2!      ( d a -- )
                                   1658 ;       Store  double integer to address a.
      000745 07 26                 1659         .word      LINK
                           000747  1660 LINK = . 
      000747 02                    1661         .byte      2
      000748 32 21                 1662         .ascii     "2!"
      00074A                       1663 DSTOR:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                           000001  1664 .if CONVERT_TO_CODE
      00074A 90 93            [ 1] 1665         ldw y,x 
      00074C 90 FE            [ 2] 1666         ldw y,(y)
      00074E 90 BF 1C         [ 2] 1667         ldw YTEMP,y ; address 
      000751 1C 00 02         [ 2] 1668         addw x,#CELLL ; drop a 
      000754 90 93            [ 1] 1669         ldw y,x 
      000756 90 FE            [ 2] 1670         ldw y,(y) ; hi word 
      000758 89               [ 2] 1671         pushw x 
      000759 EE 02            [ 2] 1672         ldw x,(2,x) ; lo word 
      00075B 91 CF 1C         [ 5] 1673         ldw [YTEMP],y
      00075E 90 93            [ 1] 1674         ldw y,x 
      000760 AE 00 02         [ 2] 1675         ldw x,#2 
      000763 92 DF 1C         [ 5] 1676         ldw ([YTEMP],x),y 
      000766 85               [ 2] 1677         popw x 
      000767 1C 00 04         [ 2] 1678         addw x,#4 ; DDROP 
      00076A 81               [ 4] 1679         ret 
                           000000  1680 .else
                                   1681         CALL	SWAPP
                                   1682         CALL	OVER
                                   1683         CALL	STORE
                                   1684         CALL	CELLP
                                   1685         JP	STORE
                                   1686 .endif 
                                   1687 ;       2@      ( a -- d )
                                   1688 ;       Fetch double integer from address a.
      00076B 07 47                 1689         .word      LINK
                           00076D  1690 LINK = . 
      00076D 02                    1691         .byte      2
      00076E 32 40                 1692         .ascii     "2@"
      000770                       1693 DAT:
                           000001  1694 .if CONVERT_TO_CODE
      000770 90 93            [ 1] 1695         ldw y,x 
      000772 90 FE            [ 2] 1696         ldw y,(y) ;address 
      000774 90 BF 1C         [ 2] 1697         ldw YTEMP,y 
      000777 1D 00 02         [ 2] 1698         subw x,#CELLL ; space for udh 
      00077A 91 CE 1C         [ 5] 1699         ldw y,[YTEMP] ; udh 
      00077D FF               [ 2] 1700         ldw (x),y 
      00077E 90 AE 00 02      [ 2] 1701         ldw y,#2
      000782 91 DE 1C         [ 5] 1702         ldw y,([YTEMP],y) ; udl 
      000785 EF 02            [ 2] 1703         ldw (2,x),y
      000787 81               [ 4] 1704         ret 
                           000000  1705 .else 
                                   1706         CALL	DUPP
                                   1707         CALL	CELLP
                                   1708         CALL	AT
                                   1709         CALL	SWAPP
                                   1710         JP	AT
                                   1711 .endif 
                                   1712 
                                   1713 ;       COUNT   ( b -- b +n )
                                   1714 ;       Return count byte of a string
                                   1715 ;       and add 1 to byte address.
      000788 07 6D                 1716         .word      LINK
                           00078A  1717 LINK = . 
      00078A 05                    1718         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      00078B 43 4F 55 4E 54        1719         .ascii     "COUNT"
      000790                       1720 COUNT:
                           000001  1721 .if CONVERT_TO_CODE
      000790 90 93            [ 1] 1722         ldw y,x 
      000792 90 FE            [ 2] 1723         ldw y,(y) ; address 
      000794 90 F6            [ 1] 1724         ld a,(y)  ; count 
      000796 90 5C            [ 2] 1725         incw y 
      000798 FF               [ 2] 1726         ldw (x),y 
      000799 1D 00 02         [ 2] 1727         subw x,#CELLL 
      00079C E7 01            [ 1] 1728         ld (1,x),a 
      00079E 7F               [ 1] 1729         clr (x)
      00079F 81               [ 4] 1730         ret 
                           000000  1731 .else 
                                   1732         CALL     DUPP
                                   1733         CALL     ONEP
                                   1734         CALL     SWAPP
                                   1735         JP     CAT
                                   1736 .endif 
                                   1737 
                                   1738 ;       HERE    ( -- a )
                                   1739 ;       Return  top of  code dictionary.
      0007A0 07 8A                 1740         .word      LINK
                           0007A2  1741 LINK = . 
      0007A2 04                    1742         .byte      4
      0007A3 48 45 52 45           1743         .ascii     "HERE"
      0007A7                       1744 HERE:
                           000001  1745 .if CONVERT_TO_CODE
      0007A7 90 AE 00 16      [ 2] 1746       	ldw y,#RAMBASE+22
      0007AB 90 FE            [ 2] 1747         ldw y,(y)
      0007AD 1D 00 02         [ 2] 1748         subw x,#CELLL 
      0007B0 FF               [ 2] 1749         ldw (x),y 
      0007B1 81               [ 4] 1750         ret 
                           000000  1751 .else
                                   1752         CALL     CPP
                                   1753         JP     AT
                                   1754 .endif 
                                   1755 
                                   1756 ;       PAD     ( -- a )
                                   1757 ;       Return address of text buffer
                                   1758 ;       above  code dictionary.
      0007B2 07 A2                 1759         .word      LINK
                           0007B4  1760 LINK = . 
      0007B4 03                    1761         .byte      3
      0007B5 50 41 44              1762         .ascii     "PAD"
      0007B8                       1763 PAD:
      0007B8 CD 07 A7         [ 4] 1764         CALL     HERE
      0007BB CD 00 DD         [ 4] 1765         CALL     DOLIT
      0007BE 00 50                 1766         .word      80
      0007C0 CC 03 A7         [ 2] 1767         JP     PLUS
                                   1768 
                                   1769 ;       TIB     ( -- a )
                                   1770 ;       Return address of terminal input buffer.
      0007C3 07 B4                 1771         .word      LINK
                           0007C5  1772 LINK = . 
      0007C5 03                    1773         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007C6 54 49 42              1774         .ascii     "TIB"
      0007C9                       1775 TIB:
      0007C9 CD 02 F5         [ 4] 1776         CALL     NTIB
      0007CC CD 06 5B         [ 4] 1777         CALL     CELLP
      0007CF CC 01 65         [ 2] 1778         JP     AT
                                   1779 
                                   1780 ;       @EXECUTE        ( a -- )
                                   1781 ;       Execute vector stored in address a.
      0007D2 07 C5                 1782         .word      LINK
                           0007D4  1783 LINK = . 
      0007D4 08                    1784         .byte      8
      0007D5 40 45 58 45 43 55 54  1785         .ascii     "@EXECUTE"
             45
      0007DD                       1786 ATEXE:
      0007DD CD 01 65         [ 4] 1787         CALL     AT
      0007E0 CD 03 56         [ 4] 1788         CALL     QDUP    ;?address or zero
      0007E3 CD 01 10         [ 4] 1789         CALL     QBRAN
      0007E6 07 EB                 1790         .word      EXE1
      0007E8 CD 01 37         [ 4] 1791         CALL     EXECU   ;execute if non-zero
      0007EB 81               [ 4] 1792 EXE1:   RET     ;do nothing if zero
                                   1793 
                                   1794 ;       CMOVE   ( b1 b2 u -- )
                                   1795 ;       Copy u bytes from b1 to b2.
      0007EC 07 D4                 1796         .word      LINK
                           0007EE  1797 LINK = . 
      0007EE 05                    1798         .byte      5
      0007EF 43 4D 4F 56 45        1799         .ascii     "CMOVE"
      0007F4                       1800 CMOVE:
      0007F4 CD 01 D5         [ 4] 1801         CALL	TOR
      0007F7 CD 01 27         [ 4] 1802         CALL	BRAN
      0007FA 08 14                 1803         .word	CMOV2
      0007FC CD 01 D5         [ 4] 1804 CMOV1:	CALL	TOR
      0007FF CD 02 0C         [ 4] 1805         CALL	DUPP
      000802 CD 01 83         [ 4] 1806         CALL	CAT
      000805 CD 01 C9         [ 4] 1807         CALL	RAT
      000808 CD 01 72         [ 4] 1808         CALL	CSTOR
      00080B CD 06 86         [ 4] 1809         CALL	ONEP
      00080E CD 01 B6         [ 4] 1810         CALL	RFROM
      000811 CD 06 86         [ 4] 1811         CALL	ONEP
      000814 CD 00 F1         [ 4] 1812 CMOV2:	CALL	DONXT
      000817 07 FC                 1813         .word	CMOV1
      000819 CC 03 87         [ 2] 1814         JP	DDROP
                                   1815 
                                   1816 ;       FILL    ( b u c -- )
                                   1817 ;       Fill u bytes of character c
                                   1818 ;       to area beginning at b.
      00081C 07 EE                 1819         .word       LINK
                           00081E  1820 LINK = . 
      00081E 04                    1821         .byte       4
      00081F 46 49 4C 4C           1822         .ascii     "FILL"
      000823                       1823 FILL:
                           000001  1824 .if CONVERT_TO_CODE
      000823 90 93            [ 1] 1825         ldw y,x 
      000825 90 E6 01         [ 1] 1826         ld a,(1,y) ; c 
      000828 1C 00 02         [ 2] 1827         addw x,#CELLL ; drop c 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00082B 90 93            [ 1] 1828         ldw y,x 
      00082D 90 FE            [ 2] 1829         ldw y,(y) ; count
      00082F 90 89            [ 2] 1830         pushw y 
      000831 1C 00 02         [ 2] 1831         addw x,#CELLL ; drop u 
      000834 90 93            [ 1] 1832         ldw y,x 
      000836 1C 00 02         [ 2] 1833         addw x,#CELLL ; drop b 
      000839 90 FE            [ 2] 1834         ldw y,(y) ; address
      00083B 90 BF 1C         [ 2] 1835         ldw YTEMP,y
      00083E 90 85            [ 2] 1836         popw y ; count 
      000840                       1837 FILL1:  
      000840 92 C7 1C         [ 4] 1838         ld [YTEMP],a 
      000843 3C 1D            [ 1] 1839         inc YTEMP+1
      000845 24 02            [ 1] 1840         jrnc FILL2 
      000847 3C 1C            [ 1] 1841         inc YTEMP
      000849                       1842 FILL2: 
      000849 90 5A            [ 2] 1843         decw y ; count 
      00084B 26 F3            [ 1] 1844         jrne FILL1  
      00084D 81               [ 4] 1845         ret 
                           000000  1846 .else 
                                   1847         CALL	SWAPP
                                   1848         CALL	TOR
                                   1849         CALL	SWAPP
                                   1850         CALL	BRAN
                                   1851         .word	FILL2
                                   1852 FILL1:	CALL	DDUP
                                   1853         CALL	CSTOR
                                   1854         CALL	ONEP
                                   1855 FILL2:	CALL	DONXT
                                   1856         .word	FILL1
                                   1857         JP	DDROP
                                   1858 .endif
                                   1859 
                                   1860 ;       ERASE   ( b u -- )
                                   1861 ;       Erase u bytes beginning at b.
      00084E 08 1E                 1862         .word      LINK
                           000850  1863 LINK = . 
      000850 05                    1864         .byte      5
      000851 45 52 41 53 45        1865         .ascii     "ERASE"
      000856                       1866 ERASE:
                           000001  1867 .if CONVERT_TO_CODE
      000856 90 5F            [ 1] 1868         clrw y 
      000858 1D 00 02         [ 2] 1869         subw x,#CELLL 
      00085B FF               [ 2] 1870         ldw (x),y 
      00085C CC 08 23         [ 2] 1871         jp FILL 
                           000000  1872 .else 
                                   1873         CALL     ZERO
                                   1874         JP     FILL
                                   1875 .endif 
                                   1876 ;       PACK0x   ( b u a -- a )
                                   1877 ;       Build a counted string with
                                   1878 ;       u characters from b. Null fill.
      00085F 08 50                 1879         .word      LINK
                           000861  1880 LINK = . 
      000861 05                    1881         .byte      5
      000862 50 41 43 4B 30 58     1882         .ascii     "PACK0X"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      000868                       1883 PACKS:
      000868 CD 02 0C         [ 4] 1884         CALL     DUPP
      00086B CD 01 D5         [ 4] 1885         CALL     TOR     ;strings only on cell boundary
      00086E CD 03 92         [ 4] 1886         CALL     DDUP
      000871 CD 01 72         [ 4] 1887         CALL     CSTOR
      000874 CD 06 86         [ 4] 1888         CALL     ONEP ;save count
      000877 CD 02 1C         [ 4] 1889         CALL     SWAPP
      00087A CD 07 F4         [ 4] 1890         CALL     CMOVE
      00087D CD 01 B6         [ 4] 1891         CALL     RFROM
      000880 81               [ 4] 1892         RET
                                   1893 
                                   1894 ;; Numeric output, single precision
                                   1895 
                                   1896 ;       DIGIT   ( u -- c )
                                   1897 ;       Convert digit u to a character.
      000881 08 61                 1898         .word      LINK
                           000883  1899 LINK = . 
      000883 05                    1900         .byte      5
      000884 44 49 47 49 54        1901         .ascii     "DIGIT"
      000889                       1902 DIGIT:
      000889 CD 00 DD         [ 4] 1903         CALL	DOLIT
      00088C 00 09                 1904         .word	9
      00088E CD 02 36         [ 4] 1905         CALL	OVER
      000891 CD 04 6A         [ 4] 1906         CALL	LESS
      000894 CD 00 DD         [ 4] 1907         CALL	DOLIT
      000897 00 07                 1908         .word	7
      000899 CD 02 58         [ 4] 1909         CALL	ANDD
      00089C CD 03 A7         [ 4] 1910         CALL	PLUS
      00089F CD 00 DD         [ 4] 1911         CALL	DOLIT
      0008A2 00 30                 1912         .word	48	;'0'
      0008A4 CC 03 A7         [ 2] 1913         JP	PLUS
                                   1914 
                                   1915 ;       EXTRACT ( n base -- n c )
                                   1916 ;       Extract least significant digit from n.
      0008A7 08 83                 1917         .word      LINK
                           0008A9  1918 LINK = . 
      0008A9 07                    1919         .byte      7
      0008AA 45 58 54 52 41 43 54  1920         .ascii     "EXTRACT"
      0008B1                       1921 EXTRC:
      0008B1 CD 06 BA         [ 4] 1922         CALL     ZERO
      0008B4 CD 02 1C         [ 4] 1923         CALL     SWAPP
      0008B7 CD 04 E2         [ 4] 1924         CALL     UMMOD
      0008BA CD 02 1C         [ 4] 1925         CALL     SWAPP
      0008BD CC 08 89         [ 2] 1926         JP     DIGIT
                                   1927 
                                   1928 ;       <#      ( -- )
                                   1929 ;       Initiate  numeric output process.
      0008C0 08 A9                 1930         .word      LINK
                           0008C2  1931 LINK = . 
      0008C2 02                    1932         .byte      2
      0008C3 3C 23                 1933         .ascii     "<#"
      0008C5                       1934 BDIGS:
      0008C5 CD 07 B8         [ 4] 1935         CALL     PAD
      0008C8 CD 03 15         [ 4] 1936         CALL     HLD
      0008CB CC 01 4E         [ 2] 1937         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1938 
                                   1939 ;       HOLD    ( c -- )
                                   1940 ;       Insert a character into output string.
      0008CE 08 C2                 1941         .word      LINK
                           0008D0  1942 LINK = . 
      0008D0 04                    1943         .byte      4
      0008D1 48 4F 4C 44           1944         .ascii     "HOLD"
      0008D5                       1945 HOLD:
      0008D5 CD 03 15         [ 4] 1946         CALL     HLD
      0008D8 CD 01 65         [ 4] 1947         CALL     AT
      0008DB CD 06 93         [ 4] 1948         CALL     ONEM
      0008DE CD 02 0C         [ 4] 1949         CALL     DUPP
      0008E1 CD 03 15         [ 4] 1950         CALL     HLD
      0008E4 CD 01 4E         [ 4] 1951         CALL     STORE
      0008E7 CC 01 72         [ 2] 1952         JP     CSTOR
                                   1953 
                                   1954 ;       #       ( u -- u )
                                   1955 ;       Extract one digit from u and
                                   1956 ;       append digit to output string.
      0008EA 08 D0                 1957         .word      LINK
                           0008EC  1958 LINK = . 
      0008EC 01                    1959         .byte      1
      0008ED 23                    1960         .ascii     "#"
      0008EE                       1961 DIG:
      0008EE CD 02 C7         [ 4] 1962         CALL     BASE
      0008F1 CD 01 65         [ 4] 1963         CALL     AT
      0008F4 CD 08 B1         [ 4] 1964         CALL     EXTRC
      0008F7 CC 08 D5         [ 2] 1965         JP     HOLD
                                   1966 
                                   1967 ;       #S      ( u -- 0 )
                                   1968 ;       Convert u until all digits
                                   1969 ;       are added to output string.
      0008FA 08 EC                 1970         .word      LINK
                           0008FC  1971 LINK = . 
      0008FC 02                    1972         .byte      2
      0008FD 23 53                 1973         .ascii     "#S"
      0008FF                       1974 DIGS:
      0008FF CD 08 EE         [ 4] 1975 DIGS1:  CALL     DIG
      000902 CD 02 0C         [ 4] 1976         CALL     DUPP
      000905 CD 01 10         [ 4] 1977         CALL     QBRAN
      000908 09 0C                 1978         .word      DIGS2
      00090A 20 F3            [ 2] 1979         JRA     DIGS1
      00090C 81               [ 4] 1980 DIGS2:  RET
                                   1981 
                                   1982 ;       SIGN    ( n -- )
                                   1983 ;       Add a minus sign to
                                   1984 ;       numeric output string.
      00090D 08 FC                 1985         .word      LINK
                           00090F  1986 LINK = . 
      00090F 04                    1987         .byte      4
      000910 53 49 47 4E           1988         .ascii     "SIGN"
      000914                       1989 SIGN:
      000914 CD 02 45         [ 4] 1990         CALL     ZLESS
      000917 CD 01 10         [ 4] 1991         CALL     QBRAN
      00091A 09 24                 1992         .word      SIGN1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      00091C CD 00 DD         [ 4] 1993         CALL     DOLIT
      00091F 00 2D                 1994         .word      45	;"-"
      000921 CC 08 D5         [ 2] 1995         JP     HOLD
      000924 81               [ 4] 1996 SIGN1:  RET
                                   1997 
                                   1998 ;       #>      ( w -- b u )
                                   1999 ;       Prepare output string.
      000925 09 0F                 2000         .word      LINK
                           000927  2001 LINK = . 
      000927 02                    2002         .byte      2
      000928 23 3E                 2003         .ascii     "#>"
      00092A                       2004 EDIGS:
      00092A CD 02 02         [ 4] 2005         CALL     DROP
      00092D CD 03 15         [ 4] 2006         CALL     HLD
      000930 CD 01 65         [ 4] 2007         CALL     AT
      000933 CD 07 B8         [ 4] 2008         CALL     PAD
      000936 CD 02 36         [ 4] 2009         CALL     OVER
      000939 CC 04 05         [ 2] 2010         JP     SUBB
                                   2011 
                                   2012 ;       str     ( w -- b u )
                                   2013 ;       Convert a signed integer
                                   2014 ;       to a numeric string.
      00093C 09 27                 2015         .word      LINK
                           00093E  2016 LINK = . 
      00093E 03                    2017         .byte      3
      00093F 53 54 52              2018         .ascii     "STR"
      000942                       2019 STR:
      000942 CD 02 0C         [ 4] 2020         CALL     DUPP
      000945 CD 01 D5         [ 4] 2021         CALL     TOR
      000948 CD 04 1F         [ 4] 2022         CALL     ABSS
      00094B CD 08 C5         [ 4] 2023         CALL     BDIGS
      00094E CD 08 FF         [ 4] 2024         CALL     DIGS
      000951 CD 01 B6         [ 4] 2025         CALL     RFROM
      000954 CD 09 14         [ 4] 2026         CALL     SIGN
      000957 CC 09 2A         [ 2] 2027         JP     EDIGS
                                   2028 
                                   2029 ;       HEX     ( -- )
                                   2030 ;       Use radix 16 as base for
                                   2031 ;       numeric conversions.
      00095A 09 3E                 2032         .word      LINK
                           00095C  2033 LINK = . 
      00095C 03                    2034         .byte      3
      00095D 48 45 58              2035         .ascii     "HEX"
      000960                       2036 HEX:
      000960 CD 00 DD         [ 4] 2037         CALL     DOLIT
      000963 00 10                 2038         .word      16
      000965 CD 02 C7         [ 4] 2039         CALL     BASE
      000968 CC 01 4E         [ 2] 2040         JP     STORE
                                   2041 
                                   2042 ;       DECIMAL ( -- )
                                   2043 ;       Use radix 10 as base
                                   2044 ;       for numeric conversions.
      00096B 09 5C                 2045         .word      LINK
                           00096D  2046 LINK = . 
      00096D 07                    2047         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      00096E 44 45 43 49 4D 41 4C  2048         .ascii     "DECIMAL"
      000975                       2049 DECIM:
      000975 CD 00 DD         [ 4] 2050         CALL     DOLIT
      000978 00 0A                 2051         .word      10
      00097A CD 02 C7         [ 4] 2052         CALL     BASE
      00097D CC 01 4E         [ 2] 2053         JP     STORE
                                   2054 
                                   2055 ;; Numeric input, single precision
                                   2056 
                                   2057 ;       DIGIT?  ( c base -- u t )
                                   2058 ;       Convert a character to its numeric
                                   2059 ;       value. A flag indicates success.
      000980 09 6D                 2060         .word      LINK
                           000982  2061 LINK = . 
      000982 06                    2062         .byte       6
      000983 44 49 47 49 54 3F     2063         .ascii     "DIGIT?"
      000989                       2064 DIGTQ:
      000989 CD 01 D5         [ 4] 2065         CALL     TOR
      00098C CD 00 DD         [ 4] 2066         CALL     DOLIT
      00098F 00 30                 2067         .word     48	; "0"
      000991 CD 04 05         [ 4] 2068         CALL     SUBB
      000994 CD 00 DD         [ 4] 2069         CALL     DOLIT
      000997 00 09                 2070         .word      9
      000999 CD 02 36         [ 4] 2071         CALL     OVER
      00099C CD 04 6A         [ 4] 2072         CALL     LESS
      00099F CD 01 10         [ 4] 2073         CALL     QBRAN
      0009A2 09 BA                 2074         .word      DGTQ1
      0009A4 CD 00 DD         [ 4] 2075         CALL     DOLIT
      0009A7 00 07                 2076         .word      7
      0009A9 CD 04 05         [ 4] 2077         CALL     SUBB
      0009AC CD 02 0C         [ 4] 2078         CALL     DUPP
      0009AF CD 00 DD         [ 4] 2079         CALL     DOLIT
      0009B2 00 0A                 2080         .word      10
      0009B4 CD 04 6A         [ 4] 2081         CALL     LESS
      0009B7 CD 02 6C         [ 4] 2082         CALL     ORR
      0009BA CD 02 0C         [ 4] 2083 DGTQ1:  CALL     DUPP
      0009BD CD 01 B6         [ 4] 2084         CALL     RFROM
      0009C0 CC 04 4C         [ 2] 2085         JP     ULESS
                                   2086 
                                   2087 ;       NUMBER? ( a -- n T | a F )
                                   2088 ;       Convert a number string to
                                   2089 ;       integer. Push a flag on tos.
      0009C3 09 82                 2090         .word      LINK
                           0009C5  2091 LINK = . 
      0009C5 07                    2092         .byte      7
      0009C6 4E 55 4D 42 45 52 3F  2093         .ascii     "NUMBER?"
      0009CD                       2094 NUMBQ:
      0009CD CD 02 C7         [ 4] 2095         CALL     BASE
      0009D0 CD 01 65         [ 4] 2096         CALL     AT
      0009D3 CD 01 D5         [ 4] 2097         CALL     TOR
      0009D6 CD 06 BA         [ 4] 2098         CALL     ZERO
      0009D9 CD 02 36         [ 4] 2099         CALL     OVER
      0009DC CD 07 90         [ 4] 2100         CALL     COUNT
      0009DF CD 02 36         [ 4] 2101         CALL     OVER
      0009E2 CD 01 83         [ 4] 2102         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0009E5 CD 00 DD         [ 4] 2103         CALL     DOLIT
      0009E8 00 24                 2104         .word     36	; "0x"
      0009EA CD 04 2D         [ 4] 2105         CALL     EQUAL
      0009ED CD 01 10         [ 4] 2106         CALL     QBRAN
      0009F0 0A 01                 2107         .word      NUMQ1
      0009F2 CD 09 60         [ 4] 2108         CALL     HEX
      0009F5 CD 02 1C         [ 4] 2109         CALL     SWAPP
      0009F8 CD 06 86         [ 4] 2110         CALL     ONEP
      0009FB CD 02 1C         [ 4] 2111         CALL     SWAPP
      0009FE CD 06 93         [ 4] 2112         CALL     ONEM
      000A01 CD 02 36         [ 4] 2113 NUMQ1:  CALL     OVER
      000A04 CD 01 83         [ 4] 2114         CALL     CAT
      000A07 CD 00 DD         [ 4] 2115         CALL     DOLIT
      000A0A 00 2D                 2116         .word     45	; "-"
      000A0C CD 04 2D         [ 4] 2117         CALL     EQUAL
      000A0F CD 01 D5         [ 4] 2118         CALL     TOR
      000A12 CD 02 1C         [ 4] 2119         CALL     SWAPP
      000A15 CD 01 C9         [ 4] 2120         CALL     RAT
      000A18 CD 04 05         [ 4] 2121         CALL     SUBB
      000A1B CD 02 1C         [ 4] 2122         CALL     SWAPP
      000A1E CD 01 C9         [ 4] 2123         CALL     RAT
      000A21 CD 03 A7         [ 4] 2124         CALL     PLUS
      000A24 CD 03 56         [ 4] 2125         CALL     QDUP
      000A27 CD 01 10         [ 4] 2126         CALL     QBRAN
      000A2A 0A 8B                 2127         .word      NUMQ6
      000A2C CD 06 93         [ 4] 2128         CALL     ONEM
      000A2F CD 01 D5         [ 4] 2129         CALL     TOR
      000A32 CD 02 0C         [ 4] 2130 NUMQ2:  CALL     DUPP
      000A35 CD 01 D5         [ 4] 2131         CALL     TOR
      000A38 CD 01 83         [ 4] 2132         CALL     CAT
      000A3B CD 02 C7         [ 4] 2133         CALL     BASE
      000A3E CD 01 65         [ 4] 2134         CALL     AT
      000A41 CD 09 89         [ 4] 2135         CALL     DIGTQ
      000A44 CD 01 10         [ 4] 2136         CALL     QBRAN
      000A47 0A 79                 2137         .word      NUMQ4
      000A49 CD 02 1C         [ 4] 2138         CALL     SWAPP
      000A4C CD 02 C7         [ 4] 2139         CALL     BASE
      000A4F CD 01 65         [ 4] 2140         CALL     AT
      000A52 CD 06 05         [ 4] 2141         CALL     STAR
      000A55 CD 03 A7         [ 4] 2142         CALL     PLUS
      000A58 CD 01 B6         [ 4] 2143         CALL     RFROM
      000A5B CD 06 86         [ 4] 2144         CALL     ONEP
      000A5E CD 00 F1         [ 4] 2145         CALL     DONXT
      000A61 0A 32                 2146         .word      NUMQ2
      000A63 CD 01 C9         [ 4] 2147         CALL     RAT
      000A66 CD 02 1C         [ 4] 2148         CALL     SWAPP
      000A69 CD 02 02         [ 4] 2149         CALL     DROP
      000A6C CD 01 10         [ 4] 2150         CALL     QBRAN
      000A6F 0A 74                 2151         .word      NUMQ3
      000A71 CD 03 D2         [ 4] 2152         CALL     NEGAT
      000A74 CD 02 1C         [ 4] 2153 NUMQ3:  CALL     SWAPP
      000A77 20 0F            [ 2] 2154         JRA     NUMQ5
      000A79 CD 01 B6         [ 4] 2155 NUMQ4:  CALL     RFROM
      000A7C CD 01 B6         [ 4] 2156         CALL     RFROM
      000A7F CD 03 87         [ 4] 2157         CALL     DDROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000A82 CD 03 87         [ 4] 2158         CALL     DDROP
      000A85 CD 06 BA         [ 4] 2159         CALL     ZERO
      000A88 CD 02 0C         [ 4] 2160 NUMQ5:  CALL     DUPP
      000A8B CD 01 B6         [ 4] 2161 NUMQ6:  CALL     RFROM
      000A8E CD 03 87         [ 4] 2162         CALL     DDROP
      000A91 CD 01 B6         [ 4] 2163         CALL     RFROM
      000A94 CD 02 C7         [ 4] 2164         CALL     BASE
      000A97 CC 01 4E         [ 2] 2165         JP     STORE
                                   2166 
                                   2167 ;; Basic I/O
                                   2168 
                                   2169 ;       KEY     ( -- c )
                                   2170 ;       Wait for and return an
                                   2171 ;       input character.
      000A9A 09 C5                 2172         .word      LINK
                           000A9C  2173 LINK = . 
      000A9C 03                    2174         .byte      3
      000A9D 4B 45 59              2175         .ascii     "KEY"
      000AA0                       2176 KEY:
                           000001  2177 .if CONVERT_TO_CODE
      000AA0 72 0B 52 30 FB   [ 2] 2178         btjf UART1_SR,#UART_SR_RXNE,. 
      000AA5 C6 52 31         [ 1] 2179         ld a,UART1_DR 
      000AA8 1D 00 02         [ 2] 2180         subw x,#CELLL 
      000AAB E7 01            [ 1] 2181         ld (1,x),a 
      000AAD 7F               [ 1] 2182         clr (x)
      000AAE 81               [ 4] 2183         ret 
                           000000  2184 .else 
                                   2185 KEY1:   CALL     QKEY
                                   2186         CALL     QBRAN
                                   2187         .word      KEY1
                                   2188         RET
                                   2189 .endif 
                                   2190 
                                   2191 ;       NUF?    ( -- t )
                                   2192 ;       Return false if no input,
                                   2193 ;       else pause and if CR return true.
      000AAF 0A 9C                 2194         .word      LINK
                           000AB1  2195 LINK = . 
      000AB1 04                    2196         .byte      4
      000AB2 4E 55 46 3F           2197         .ascii     "NUF?"
      000AB6                       2198 NUFQ:
      000AB6 CD 00 A9         [ 4] 2199         CALL     QKEY
      000AB9 CD 02 0C         [ 4] 2200         CALL     DUPP
      000ABC CD 01 10         [ 4] 2201         CALL     QBRAN
      000ABF 0A CF                 2202         .word    NUFQ1
      000AC1 CD 03 87         [ 4] 2203         CALL     DDROP
      000AC4 CD 0A A0         [ 4] 2204         CALL     KEY
      000AC7 CD 00 DD         [ 4] 2205         CALL     DOLIT
      000ACA 00 0D                 2206         .word      CRR
      000ACC CC 04 2D         [ 2] 2207         JP     EQUAL
      000ACF 81               [ 4] 2208 NUFQ1:  RET
                                   2209 
                                   2210 ;       SPACE   ( -- )
                                   2211 ;       Send  blank character to
                                   2212 ;       output device.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000AD0 0A B1                 2213         .word      LINK
                           000AD2  2214 LINK = . 
      000AD2 05                    2215         .byte      5
      000AD3 53 50 41 43 45        2216         .ascii     "SPACE"
      000AD8                       2217 SPACE:
      000AD8 CD 06 AD         [ 4] 2218         CALL     BLANK
      000ADB CC 00 C7         [ 2] 2219         JP     EMIT
                                   2220 
                                   2221 ;       SPACES  ( +n -- )
                                   2222 ;       Send n spaces to output device.
      000ADE 0A D2                 2223         .word      LINK
                           000AE0  2224 LINK = . 
      000AE0 06                    2225         .byte      6
      000AE1 53 50 41 43 45 53     2226         .ascii     "SPACES"
      000AE7                       2227 SPACS:
      000AE7 CD 06 BA         [ 4] 2228         CALL     ZERO
      000AEA CD 04 8A         [ 4] 2229         CALL     MAX
      000AED CD 01 D5         [ 4] 2230         CALL     TOR
      000AF0 20 03            [ 2] 2231         JRA      CHAR2
      000AF2 CD 0A D8         [ 4] 2232 CHAR1:  CALL     SPACE
      000AF5 CD 00 F1         [ 4] 2233 CHAR2:  CALL     DONXT
      000AF8 0A F2                 2234         .word    CHAR1
      000AFA 81               [ 4] 2235         RET
                                   2236 
                                   2237 ;       TYPE    ( b u -- )
                                   2238 ;       Output u characters from b.
      000AFB 0A E0                 2239         .word      LINK
                           000AFD  2240 LINK = . 
      000AFD 04                    2241         .byte      4
      000AFE 54 59 50 45           2242         .ascii     "TYPE"
      000B02                       2243 TYPES:
      000B02 CD 01 D5         [ 4] 2244         CALL     TOR
      000B05 20 0C            [ 2] 2245         JRA     TYPE2
      000B07 CD 02 0C         [ 4] 2246 TYPE1:  CALL     DUPP
      000B0A CD 01 83         [ 4] 2247         CALL     CAT
      000B0D CD 00 C7         [ 4] 2248         CALL     EMIT
      000B10 CD 06 86         [ 4] 2249         CALL     ONEP
      000B13 CD 00 F1         [ 4] 2250 TYPE2:  CALL     DONXT
      000B16 0B 07                 2251         .word      TYPE1
      000B18 CC 02 02         [ 2] 2252         JP     DROP
                                   2253 
                                   2254 ;       CR      ( -- )
                                   2255 ;       Output a carriage return
                                   2256 ;       and a line feed.
      000B1B 0A FD                 2257         .word      LINK
                           000B1D  2258 LINK = . 
      000B1D 02                    2259         .byte      2
      000B1E 43 52                 2260         .ascii     "CR"
      000B20                       2261 CR:
      000B20 CD 00 DD         [ 4] 2262         CALL     DOLIT
      000B23 00 0D                 2263         .word      CRR
      000B25 CD 00 C7         [ 4] 2264         CALL     EMIT
      000B28 CD 00 DD         [ 4] 2265         CALL     DOLIT
      000B2B 00 0A                 2266         .word      LF
      000B2D CC 00 C7         [ 2] 2267         JP     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2268 
                                   2269 ;       do$     ( -- a )
                                   2270 ;       Return  address of a compiled
                                   2271 ;       string.
      000B30 0B 1D                 2272         .word      LINK
                           000B32  2273 LINK = . 
      000B32 43                    2274 	.byte      COMPO+3
      000B33 44 4F 24              2275         .ascii     "DO$"
      000B36                       2276 DOSTR:
      000B36 CD 01 B6         [ 4] 2277         CALL     RFROM
      000B39 CD 01 C9         [ 4] 2278         CALL     RAT
      000B3C CD 01 B6         [ 4] 2279         CALL     RFROM
      000B3F CD 07 90         [ 4] 2280         CALL     COUNT
      000B42 CD 03 A7         [ 4] 2281         CALL     PLUS
      000B45 CD 01 D5         [ 4] 2282         CALL     TOR
      000B48 CD 02 1C         [ 4] 2283         CALL     SWAPP
      000B4B CD 01 D5         [ 4] 2284         CALL     TOR
      000B4E 81               [ 4] 2285         RET
                                   2286 
                                   2287 ;       $"|     ( -- a )
                                   2288 ;       Run time routine compiled by $".
                                   2289 ;       Return address of a compiled string.
      000B4F 0B 32                 2290         .word      LINK
                           000B51  2291 LINK = . 
      000B51 43                    2292 	.byte      COMPO+3
      000B52 24 22 7C              2293         .byte     '$','"','|'
      000B55                       2294 STRQP:
      000B55 CD 0B 36         [ 4] 2295         CALL     DOSTR
      000B58 81               [ 4] 2296         RET
                                   2297 
                                   2298 ;       ."|     ( -- )
                                   2299 ;       Run time routine of ." .
                                   2300 ;       Output a compiled string.
      000B59 0B 51                 2301         .word      LINK
                           000B5B  2302 LINK = . 
      000B5B 43                    2303 	.byte      COMPO+3
      000B5C 2E 22 7C              2304         .byte     '.','"','|'
      000B5F                       2305 DOTQP:
      000B5F CD 0B 36         [ 4] 2306         CALL     DOSTR
      000B62 CD 07 90         [ 4] 2307         CALL     COUNT
      000B65 CC 0B 02         [ 2] 2308         JP     TYPES
                                   2309 
                                   2310 ;       .R      ( n +n -- )
                                   2311 ;       Display an integer in a field
                                   2312 ;       of n columns, right justified.
      000B68 0B 5B                 2313         .word      LINK
                           000B6A  2314 LINK = . 
      000B6A 02                    2315         .byte      2
      000B6B 2E 52                 2316         .ascii     ".R"
      000B6D                       2317 DOTR:
      000B6D CD 01 D5         [ 4] 2318         CALL     TOR
      000B70 CD 09 42         [ 4] 2319         CALL     STR
      000B73 CD 01 B6         [ 4] 2320         CALL     RFROM
      000B76 CD 02 36         [ 4] 2321         CALL     OVER
      000B79 CD 04 05         [ 4] 2322         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000B7C CD 0A E7         [ 4] 2323         CALL     SPACS
      000B7F CC 0B 02         [ 2] 2324         JP     TYPES
                                   2325 
                                   2326 ;       U.R     ( u +n -- )
                                   2327 ;       Display an unsigned integer
                                   2328 ;       in n column, right justified.
      000B82 0B 6A                 2329         .word      LINK
                           000B84  2330 LINK = . 
      000B84 03                    2331         .byte      3
      000B85 55 2E 52              2332         .ascii     "U.R"
      000B88                       2333 UDOTR:
      000B88 CD 01 D5         [ 4] 2334         CALL     TOR
      000B8B CD 08 C5         [ 4] 2335         CALL     BDIGS
      000B8E CD 08 FF         [ 4] 2336         CALL     DIGS
      000B91 CD 09 2A         [ 4] 2337         CALL     EDIGS
      000B94 CD 01 B6         [ 4] 2338         CALL     RFROM
      000B97 CD 02 36         [ 4] 2339         CALL     OVER
      000B9A CD 04 05         [ 4] 2340         CALL     SUBB
      000B9D CD 0A E7         [ 4] 2341         CALL     SPACS
      000BA0 CC 0B 02         [ 2] 2342         JP     TYPES
                                   2343 
                                   2344 ;       U.      ( u -- )
                                   2345 ;       Display an unsigned integer
                                   2346 ;       in free format.
      000BA3 0B 84                 2347         .word      LINK
                           000BA5  2348 LINK = . 
      000BA5 02                    2349         .byte      2
      000BA6 55 2E                 2350         .ascii     "U."
      000BA8                       2351 UDOT:
      000BA8 CD 08 C5         [ 4] 2352         CALL     BDIGS
      000BAB CD 08 FF         [ 4] 2353         CALL     DIGS
      000BAE CD 09 2A         [ 4] 2354         CALL     EDIGS
      000BB1 CD 0A D8         [ 4] 2355         CALL     SPACE
      000BB4 CC 0B 02         [ 2] 2356         JP     TYPES
                                   2357 
                                   2358 ;       .       ( w -- )
                                   2359 ;       Display an integer in free
                                   2360 ;       format, preceeded by a space.
      000BB7 0B A5                 2361         .word      LINK
                           000BB9  2362 LINK = . 
      000BB9 01                    2363         .byte      1
      000BBA 2E                    2364         .ascii     "."
      000BBB                       2365 DOT:
      000BBB CD 02 C7         [ 4] 2366         CALL     BASE
      000BBE CD 01 65         [ 4] 2367         CALL     AT
      000BC1 CD 00 DD         [ 4] 2368         CALL     DOLIT
      000BC4 00 0A                 2369         .word      10
      000BC6 CD 02 81         [ 4] 2370         CALL     XORR    ;?decimal
      000BC9 CD 01 10         [ 4] 2371         CALL     QBRAN
      000BCC 0B D1                 2372         .word      DOT1
      000BCE CC 0B A8         [ 2] 2373         JP     UDOT
      000BD1 CD 09 42         [ 4] 2374 DOT1:   CALL     STR
      000BD4 CD 0A D8         [ 4] 2375         CALL     SPACE
      000BD7 CC 0B 02         [ 2] 2376         JP     TYPES
                                   2377 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                                   2378 ;       ?       ( a -- )
                                   2379 ;       Display contents in memory cell.
      000BDA 0B B9                 2380         .word      LINK
                                   2381         
                           000BDC  2382 LINK = . 
      000BDC 01                    2383         .byte      1
      000BDD 3F                    2384         .ascii     "?"
      000BDE                       2385 QUEST:
      000BDE CD 01 65         [ 4] 2386         CALL     AT
      000BE1 CC 0B BB         [ 2] 2387         JP     DOT
                                   2388 
                                   2389 ;; Parsing
                                   2390 
                                   2391 ;       parse   ( b u c -- b u delta ; <string> )
                                   2392 ;       Scan string delimited by c.
                                   2393 ;       Return found string and its offset.
      000BE4 0B DC                 2394         .word      LINK
                           000BE6  2395 LINK = . 
      000BE6 05                    2396         .byte      5
      000BE7 70 61 72 73 65        2397         .ascii     "parse"
      000BEC                       2398 PARS:
      000BEC CD 02 D6         [ 4] 2399         CALL     TEMP
      000BEF CD 01 4E         [ 4] 2400         CALL     STORE
      000BF2 CD 02 36         [ 4] 2401         CALL     OVER
      000BF5 CD 01 D5         [ 4] 2402         CALL     TOR
      000BF8 CD 02 0C         [ 4] 2403         CALL     DUPP
      000BFB CD 01 10         [ 4] 2404         CALL     QBRAN
      000BFE 0C A4                 2405         .word    PARS8
      000C00 CD 06 93         [ 4] 2406         CALL     ONEM
      000C03 CD 02 D6         [ 4] 2407         CALL     TEMP
      000C06 CD 01 65         [ 4] 2408         CALL     AT
      000C09 CD 06 AD         [ 4] 2409         CALL     BLANK
      000C0C CD 04 2D         [ 4] 2410         CALL     EQUAL
      000C0F CD 01 10         [ 4] 2411         CALL     QBRAN
      000C12 0C 45                 2412         .word      PARS3
      000C14 CD 01 D5         [ 4] 2413         CALL     TOR
      000C17 CD 06 AD         [ 4] 2414 PARS1:  CALL     BLANK
      000C1A CD 02 36         [ 4] 2415         CALL     OVER
      000C1D CD 01 83         [ 4] 2416         CALL     CAT     ;skip leading blanks ONLY
      000C20 CD 04 05         [ 4] 2417         CALL     SUBB
      000C23 CD 02 45         [ 4] 2418         CALL     ZLESS
      000C26 CD 03 C1         [ 4] 2419         CALL     INVER
      000C29 CD 01 10         [ 4] 2420         CALL     QBRAN
      000C2C 0C 42                 2421         .word      PARS2
      000C2E CD 06 86         [ 4] 2422         CALL     ONEP
      000C31 CD 00 F1         [ 4] 2423         CALL     DONXT
      000C34 0C 17                 2424         .word      PARS1
      000C36 CD 01 B6         [ 4] 2425         CALL     RFROM
      000C39 CD 02 02         [ 4] 2426         CALL     DROP
      000C3C CD 06 BA         [ 4] 2427         CALL     ZERO
      000C3F CC 02 0C         [ 2] 2428         JP     DUPP
      000C42 CD 01 B6         [ 4] 2429 PARS2:  CALL     RFROM
      000C45 CD 02 36         [ 4] 2430 PARS3:  CALL     OVER
      000C48 CD 02 1C         [ 4] 2431         CALL     SWAPP
      000C4B CD 01 D5         [ 4] 2432         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000C4E CD 02 D6         [ 4] 2433 PARS4:  CALL     TEMP
      000C51 CD 01 65         [ 4] 2434         CALL     AT
      000C54 CD 02 36         [ 4] 2435         CALL     OVER
      000C57 CD 01 83         [ 4] 2436         CALL     CAT
      000C5A CD 04 05         [ 4] 2437         CALL     SUBB    ;scan for delimiter
      000C5D CD 02 D6         [ 4] 2438         CALL     TEMP
      000C60 CD 01 65         [ 4] 2439         CALL     AT
      000C63 CD 06 AD         [ 4] 2440         CALL     BLANK
      000C66 CD 04 2D         [ 4] 2441         CALL     EQUAL
      000C69 CD 01 10         [ 4] 2442         CALL     QBRAN
      000C6C 0C 71                 2443         .word      PARS5
      000C6E CD 02 45         [ 4] 2444         CALL     ZLESS
      000C71 CD 01 10         [ 4] 2445 PARS5:  CALL     QBRAN
      000C74 0C 86                 2446         .word      PARS6
      000C76 CD 06 86         [ 4] 2447         CALL     ONEP
      000C79 CD 00 F1         [ 4] 2448         CALL     DONXT
      000C7C 0C 4E                 2449         .word      PARS4
      000C7E CD 02 0C         [ 4] 2450         CALL     DUPP
      000C81 CD 01 D5         [ 4] 2451         CALL     TOR
      000C84 20 0F            [ 2] 2452         JRA     PARS7
      000C86 CD 01 B6         [ 4] 2453 PARS6:  CALL     RFROM
      000C89 CD 02 02         [ 4] 2454         CALL     DROP
      000C8C CD 02 0C         [ 4] 2455         CALL     DUPP
      000C8F CD 06 86         [ 4] 2456         CALL     ONEP
      000C92 CD 01 D5         [ 4] 2457         CALL     TOR
      000C95 CD 02 36         [ 4] 2458 PARS7:  CALL     OVER
      000C98 CD 04 05         [ 4] 2459         CALL     SUBB
      000C9B CD 01 B6         [ 4] 2460         CALL     RFROM
      000C9E CD 01 B6         [ 4] 2461         CALL     RFROM
      000CA1 CC 04 05         [ 2] 2462         JP     SUBB
      000CA4 CD 02 36         [ 4] 2463 PARS8:  CALL     OVER
      000CA7 CD 01 B6         [ 4] 2464         CALL     RFROM
      000CAA CC 04 05         [ 2] 2465         JP     SUBB
                                   2466 
                                   2467 ;       PARSE   ( c -- b u ; <string> )
                                   2468 ;       Scan input stream and return
                                   2469 ;       counted string delimited by c.
      000CAD 0B E6                 2470         .word      LINK
                           000CAF  2471 LINK = . 
      000CAF 05                    2472         .byte      5
      000CB0 50 41 52 53 45        2473         .ascii     "PARSE"
      000CB5                       2474 PARSE:
      000CB5 CD 01 D5         [ 4] 2475         CALL     TOR
      000CB8 CD 07 C9         [ 4] 2476         CALL     TIB
      000CBB CD 02 E5         [ 4] 2477         CALL     INN
      000CBE CD 01 65         [ 4] 2478         CALL     AT
      000CC1 CD 03 A7         [ 4] 2479         CALL     PLUS    ;current input buffer pointer
      000CC4 CD 02 F5         [ 4] 2480         CALL     NTIB
      000CC7 CD 01 65         [ 4] 2481         CALL     AT
      000CCA CD 02 E5         [ 4] 2482         CALL     INN
      000CCD CD 01 65         [ 4] 2483         CALL     AT
      000CD0 CD 04 05         [ 4] 2484         CALL     SUBB    ;remaining count
      000CD3 CD 01 B6         [ 4] 2485         CALL     RFROM
      000CD6 CD 0B EC         [ 4] 2486         CALL     PARS
      000CD9 CD 02 E5         [ 4] 2487         CALL     INN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000CDC CC 07 29         [ 2] 2488         JP     PSTOR
                                   2489 
                                   2490 ;       .(      ( -- )
                                   2491 ;       Output following string up to next ) .
      000CDF 0C AF                 2492         .word      LINK
                           000CE1  2493 LINK = . 
      000CE1 82                    2494 	.byte      IMEDD+2
      000CE2 2E 28                 2495         .ascii     ".("
      000CE4                       2496 DOTPR:
      000CE4 CD 00 DD         [ 4] 2497         CALL     DOLIT
      000CE7 00 29                 2498         .word     41	; ")"
      000CE9 CD 0C B5         [ 4] 2499         CALL     PARSE
      000CEC CC 0B 02         [ 2] 2500         JP     TYPES
                                   2501 
                                   2502 ;       (       ( -- )
                                   2503 ;       Ignore following string up to next ).
                                   2504 ;       A comment.
      000CEF 0C E1                 2505         .word      LINK
                           000CF1  2506 LINK = . 
      000CF1 81                    2507 	.byte      IMEDD+1
      000CF2 28                    2508         .ascii     "("
      000CF3                       2509 PAREN:
      000CF3 CD 00 DD         [ 4] 2510         CALL     DOLIT
      000CF6 00 29                 2511         .word     41	; ")"
      000CF8 CD 0C B5         [ 4] 2512         CALL     PARSE
      000CFB CC 03 87         [ 2] 2513         JP     DDROP
                                   2514 
                                   2515 ;       \       ( -- )
                                   2516 ;       Ignore following text till
                                   2517 ;       end of line.
      000CFE 0C F1                 2518         .word      LINK
                           000D00  2519 LINK = . 
      000D00 81                    2520 	.byte      IMEDD+1
      000D01 5C                    2521         .ascii     "\"
      000D02                       2522 BKSLA:
                           000001  2523 .if CONVERT_TO_CODE
      000D02 90 AE 00 0C      [ 2] 2524         ldw y,#RAMBASE+12 ; #TIB  
      000D06 90 FE            [ 2] 2525         ldw y,(y)
      000D08 90 89            [ 2] 2526         pushw y ; count in TIB 
      000D0A 90 AE 00 0A      [ 2] 2527         ldw y,#RAMBASE+10 ; >IN 
      000D0E 90 BF 1C         [ 2] 2528         ldw YTEMP,y
      000D11 90 85            [ 2] 2529         popw y 
      000D13 91 CF 1C         [ 5] 2530         ldw [YTEMP],y
      000D16 81               [ 4] 2531         ret 
                           000000  2532 .else
                                   2533         CALL     NTIB
                                   2534         CALL     AT
                                   2535         CALL     INN
                                   2536         JP     STORE
                                   2537 .endif 
                                   2538 
                                   2539 ;       WORD    ( c -- a ; <string> )
                                   2540 ;       Parse a word from input stream
                                   2541 ;       and copy it to code dictionary.
      000D17 0D 00                 2542         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



                           000D19  2543 LINK = . 
      000D19 04                    2544         .byte      4
      000D1A 57 4F 52 44           2545         .ascii     "WORD"
      000D1E                       2546 WORDD:
      000D1E CD 0C B5         [ 4] 2547         CALL     PARSE
      000D21 CD 07 A7         [ 4] 2548         CALL     HERE
      000D24 CD 06 5B         [ 4] 2549         CALL     CELLP
      000D27 CC 08 68         [ 2] 2550         JP     PACKS
                                   2551 
                                   2552 ;       TOKEN   ( -- a ; <string> )
                                   2553 ;       Parse a word from input stream
                                   2554 ;       and copy it to name dictionary.
      000D2A 0D 19                 2555         .word      LINK
                           000D2C  2556 LINK = . 
      000D2C 05                    2557         .byte      5
      000D2D 54 4F 4B 45 4E        2558         .ascii     "TOKEN"
      000D32                       2559 TOKEN:
      000D32 CD 06 AD         [ 4] 2560         CALL     BLANK
      000D35 CC 0D 1E         [ 2] 2561         JP     WORDD
                                   2562 
                                   2563 ;; Dictionary search
                                   2564 
                                   2565 ;       NAME>   ( na -- ca )
                                   2566 ;       Return a code address given
                                   2567 ;       a name address.
      000D38 0D 2C                 2568         .word      LINK
                           000D3A  2569 LINK = . 
      000D3A 05                    2570         .byte      5
      000D3B 4E 41 4D 45 3E        2571         .ascii     "NAME>"
      000D40                       2572 NAMET:
      000D40 CD 07 90         [ 4] 2573         CALL     COUNT
      000D43 CD 00 DD         [ 4] 2574         CALL     DOLIT
      000D46 00 1F                 2575         .word      31
      000D48 CD 02 58         [ 4] 2576         CALL     ANDD
      000D4B CC 03 A7         [ 2] 2577         JP     PLUS
                                   2578 
                                   2579 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2580 ;       Compare u cells in two
                                   2581 ;       strings. Return 0 if identical.
      000D4E 0D 3A                 2582         .word      LINK
                           000D50  2583 LINK = . 
      000D50 05                    2584         .byte       5
      000D51 53 41 4D 45 3F        2585         .ascii     "SAME?"
      000D56                       2586 SAMEQ:
      000D56 CD 06 93         [ 4] 2587         CALL     ONEM
      000D59 CD 01 D5         [ 4] 2588         CALL     TOR
      000D5C 20 29            [ 2] 2589         JRA     SAME2
      000D5E CD 02 36         [ 4] 2590 SAME1:  CALL     OVER
      000D61 CD 01 C9         [ 4] 2591         CALL     RAT
      000D64 CD 03 A7         [ 4] 2592         CALL     PLUS
      000D67 CD 01 83         [ 4] 2593         CALL     CAT
      000D6A CD 02 36         [ 4] 2594         CALL     OVER
      000D6D CD 01 C9         [ 4] 2595         CALL     RAT
      000D70 CD 03 A7         [ 4] 2596         CALL     PLUS
      000D73 CD 01 83         [ 4] 2597         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D76 CD 04 05         [ 4] 2598         CALL     SUBB
      000D79 CD 03 56         [ 4] 2599         CALL     QDUP
      000D7C CD 01 10         [ 4] 2600         CALL     QBRAN
      000D7F 0D 87                 2601         .word      SAME2
      000D81 CD 01 B6         [ 4] 2602         CALL     RFROM
      000D84 CC 02 02         [ 2] 2603         JP     DROP
      000D87 CD 00 F1         [ 4] 2604 SAME2:  CALL     DONXT
      000D8A 0D 5E                 2605         .word      SAME1
      000D8C CC 06 BA         [ 2] 2606         JP     ZERO
                                   2607 
                                   2608 ;       find    ( a va -- ca na | a F )
                                   2609 ;       Search vocabulary for string.
                                   2610 ;       Return ca and na if succeeded.
      000D8F 0D 50                 2611         .word      LINK
                           000D91  2612 LINK = . 
      000D91 04                    2613         .byte      4
      000D92 46 49 4E 44           2614         .ascii     "FIND"
      000D96                       2615 FIND:
      000D96 CD 02 1C         [ 4] 2616         CALL     SWAPP
      000D99 CD 02 0C         [ 4] 2617         CALL     DUPP
      000D9C CD 01 83         [ 4] 2618         CALL     CAT
      000D9F CD 02 D6         [ 4] 2619         CALL     TEMP
      000DA2 CD 01 4E         [ 4] 2620         CALL     STORE
      000DA5 CD 02 0C         [ 4] 2621         CALL     DUPP
      000DA8 CD 01 65         [ 4] 2622         CALL     AT
      000DAB CD 01 D5         [ 4] 2623         CALL     TOR
      000DAE CD 06 5B         [ 4] 2624         CALL     CELLP
      000DB1 CD 02 1C         [ 4] 2625         CALL     SWAPP
      000DB4 CD 01 65         [ 4] 2626 FIND1:  CALL     AT
      000DB7 CD 02 0C         [ 4] 2627         CALL     DUPP
      000DBA CD 01 10         [ 4] 2628         CALL     QBRAN
      000DBD 0D F3                 2629         .word      FIND6
      000DBF CD 02 0C         [ 4] 2630         CALL     DUPP
      000DC2 CD 01 65         [ 4] 2631         CALL     AT
      000DC5 CD 00 DD         [ 4] 2632         CALL     DOLIT
      000DC8 1F 7F                 2633         .word      MASKK
      000DCA CD 02 58         [ 4] 2634         CALL     ANDD
      000DCD CD 01 C9         [ 4] 2635         CALL     RAT
      000DD0 CD 02 81         [ 4] 2636         CALL     XORR
      000DD3 CD 01 10         [ 4] 2637         CALL     QBRAN
      000DD6 0D E2                 2638         .word      FIND2
      000DD8 CD 06 5B         [ 4] 2639         CALL     CELLP
      000DDB CD 00 DD         [ 4] 2640         CALL     DOLIT
      000DDE FF FF                 2641         .word     0xFFFF
      000DE0 20 0C            [ 2] 2642         JRA     FIND3
      000DE2 CD 06 5B         [ 4] 2643 FIND2:  CALL     CELLP
      000DE5 CD 02 D6         [ 4] 2644         CALL     TEMP
      000DE8 CD 01 65         [ 4] 2645         CALL     AT
      000DEB CD 0D 56         [ 4] 2646         CALL     SAMEQ
      000DEE CD 01 27         [ 4] 2647 FIND3:  CALL     BRAN
      000DF1 0E 02                 2648         .word      FIND4
      000DF3 CD 01 B6         [ 4] 2649 FIND6:  CALL     RFROM
      000DF6 CD 02 02         [ 4] 2650         CALL     DROP
      000DF9 CD 02 1C         [ 4] 2651         CALL     SWAPP
      000DFC CD 06 6A         [ 4] 2652         CALL     CELLM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000DFF CC 02 1C         [ 2] 2653         JP     SWAPP
      000E02 CD 01 10         [ 4] 2654 FIND4:  CALL     QBRAN
      000E05 0E 0F                 2655         .word      FIND5
      000E07 CD 06 6A         [ 4] 2656         CALL     CELLM
      000E0A CD 06 6A         [ 4] 2657         CALL     CELLM
      000E0D 20 A5            [ 2] 2658         JRA     FIND1
      000E0F CD 01 B6         [ 4] 2659 FIND5:  CALL     RFROM
      000E12 CD 02 02         [ 4] 2660         CALL     DROP
      000E15 CD 02 1C         [ 4] 2661         CALL     SWAPP
      000E18 CD 02 02         [ 4] 2662         CALL     DROP
      000E1B CD 06 6A         [ 4] 2663         CALL     CELLM
      000E1E CD 02 0C         [ 4] 2664         CALL     DUPP
      000E21 CD 0D 40         [ 4] 2665         CALL     NAMET
      000E24 CC 02 1C         [ 2] 2666         JP     SWAPP
                                   2667 
                                   2668 ;       NAME?   ( a -- ca na | a F )
                                   2669 ;       Search vocabularies for a string.
      000E27 0D 91                 2670         .word      LINK
                           000E29  2671 LINK = . 
      000E29 05                    2672         .byte      5
      000E2A 4E 41 4D 45 3F        2673         .ascii     "NAME?"
      000E2F                       2674 NAMEQ:
      000E2F CD 03 28         [ 4] 2675         CALL     CNTXT
      000E32 CC 0D 96         [ 2] 2676         JP     FIND
                                   2677 
                                   2678 ;; Terminal response
                                   2679 
                                   2680 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2681 ;       Backup cursor by one character.
      000E35 0E 29                 2682         .word      LINK
                           000E37  2683 LINK = . 
      000E37 02                    2684         .byte      2
      000E38 5E 48                 2685         .ascii     "^H"
      000E3A                       2686 BKSP:
      000E3A CD 01 D5         [ 4] 2687         CALL     TOR
      000E3D CD 02 36         [ 4] 2688         CALL     OVER
      000E40 CD 01 B6         [ 4] 2689         CALL     RFROM
      000E43 CD 02 1C         [ 4] 2690         CALL     SWAPP
      000E46 CD 02 36         [ 4] 2691         CALL     OVER
      000E49 CD 02 81         [ 4] 2692         CALL     XORR
      000E4C CD 01 10         [ 4] 2693         CALL     QBRAN
      000E4F 0E 6A                 2694         .word      BACK1
      000E51 CD 00 DD         [ 4] 2695         CALL     DOLIT
      000E54 00 08                 2696         .word      BKSPP
      000E56 CD 00 C7         [ 4] 2697         CALL     EMIT
      000E59 CD 06 93         [ 4] 2698         CALL     ONEM
      000E5C CD 06 AD         [ 4] 2699         CALL     BLANK
      000E5F CD 00 C7         [ 4] 2700         CALL     EMIT
      000E62 CD 00 DD         [ 4] 2701         CALL     DOLIT
      000E65 00 08                 2702         .word      BKSPP
      000E67 CC 00 C7         [ 2] 2703         JP     EMIT
      000E6A 81               [ 4] 2704 BACK1:  RET
                                   2705 
                                   2706 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2707 ;       Accept and echo key stroke
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                                   2708 ;       and bump cursor.
      000E6B 0E 37                 2709         .word      LINK
                           000E6D  2710 LINK = . 
      000E6D 03                    2711         .byte      3
      000E6E 54 41 50              2712         .ascii     "TAP"
      000E71                       2713 TAP:
      000E71 CD 02 0C         [ 4] 2714         CALL     DUPP
      000E74 CD 00 C7         [ 4] 2715         CALL     EMIT
      000E77 CD 02 36         [ 4] 2716         CALL     OVER
      000E7A CD 01 72         [ 4] 2717         CALL     CSTOR
      000E7D CC 06 86         [ 2] 2718         JP     ONEP
                                   2719 
                                   2720 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2721 ;       Process a key stroke,
                                   2722 ;       CR or backspace.
      000E80 0E 6D                 2723         .word      LINK
                           000E82  2724 LINK = . 
      000E82 04                    2725         .byte      4
      000E83 4B 54 41 50           2726         .ascii     "KTAP"
      000E87                       2727 KTAP:
      000E87 CD 02 0C         [ 4] 2728         CALL     DUPP
      000E8A CD 00 DD         [ 4] 2729         CALL     DOLIT
      000E8D 00 0D                 2730         .word      CRR
      000E8F CD 02 81         [ 4] 2731         CALL     XORR
      000E92 CD 01 10         [ 4] 2732         CALL     QBRAN
      000E95 0E AD                 2733         .word      KTAP2
      000E97 CD 00 DD         [ 4] 2734         CALL     DOLIT
      000E9A 00 08                 2735         .word      BKSPP
      000E9C CD 02 81         [ 4] 2736         CALL     XORR
      000E9F CD 01 10         [ 4] 2737         CALL     QBRAN
      000EA2 0E AA                 2738         .word      KTAP1
      000EA4 CD 06 AD         [ 4] 2739         CALL     BLANK
      000EA7 CC 0E 71         [ 2] 2740         JP     TAP
      000EAA CC 0E 3A         [ 2] 2741 KTAP1:  JP     BKSP
      000EAD CD 02 02         [ 4] 2742 KTAP2:  CALL     DROP
      000EB0 CD 02 1C         [ 4] 2743         CALL     SWAPP
      000EB3 CD 02 02         [ 4] 2744         CALL     DROP
      000EB6 CC 02 0C         [ 2] 2745         JP     DUPP
                                   2746 
                                   2747 ;       accept  ( b u -- b u )
                                   2748 ;       Accept characters to input
                                   2749 ;       buffer. Return with actual count.
      000EB9 0E 82                 2750         .word      LINK
                           000EBB  2751 LINK = . 
      000EBB 06                    2752         .byte      6
      000EBC 41 43 43 45 50 54     2753         .ascii     "ACCEPT"
      000EC2                       2754 ACCEP:
      000EC2 CD 02 36         [ 4] 2755         CALL     OVER
      000EC5 CD 03 A7         [ 4] 2756         CALL     PLUS
      000EC8 CD 02 36         [ 4] 2757         CALL     OVER
      000ECB CD 03 92         [ 4] 2758 ACCP1:  CALL     DDUP
      000ECE CD 02 81         [ 4] 2759         CALL     XORR
      000ED1 CD 01 10         [ 4] 2760         CALL     QBRAN
      000ED4 0E F6                 2761         .word      ACCP4
      000ED6 CD 0A A0         [ 4] 2762         CALL     KEY
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000ED9 CD 02 0C         [ 4] 2763         CALL     DUPP
      000EDC CD 06 AD         [ 4] 2764         CALL     BLANK
      000EDF CD 00 DD         [ 4] 2765         CALL     DOLIT
      000EE2 00 7F                 2766         .word      127
      000EE4 CD 04 C7         [ 4] 2767         CALL     WITHI
      000EE7 CD 01 10         [ 4] 2768         CALL     QBRAN
      000EEA 0E F1                 2769         .word      ACCP2
      000EEC CD 0E 71         [ 4] 2770         CALL     TAP
      000EEF 20 03            [ 2] 2771         JRA     ACCP3
      000EF1 CD 0E 87         [ 4] 2772 ACCP2:  CALL     KTAP
      000EF4 20 D5            [ 2] 2773 ACCP3:  JRA     ACCP1
      000EF6 CD 02 02         [ 4] 2774 ACCP4:  CALL     DROP
      000EF9 CD 02 36         [ 4] 2775         CALL     OVER
      000EFC CC 04 05         [ 2] 2776         JP     SUBB
                                   2777 
                                   2778 ;       QUERY   ( -- )
                                   2779 ;       Accept input stream to
                                   2780 ;       terminal input buffer.
      000EFF 0E BB                 2781         .word      LINK
                                   2782         
                           000F01  2783 LINK = . 
      000F01 05                    2784         .byte      5
      000F02 51 55 45 52 59        2785         .ascii     "QUERY"
      000F07                       2786 QUERY:
      000F07 CD 07 C9         [ 4] 2787         CALL     TIB
      000F0A CD 00 DD         [ 4] 2788         CALL     DOLIT
      000F0D 00 50                 2789         .word      80
      000F0F CD 0E C2         [ 4] 2790         CALL     ACCEP
      000F12 CD 02 F5         [ 4] 2791         CALL     NTIB
      000F15 CD 01 4E         [ 4] 2792         CALL     STORE
      000F18 CD 02 02         [ 4] 2793         CALL     DROP
      000F1B CD 06 BA         [ 4] 2794         CALL     ZERO
      000F1E CD 02 E5         [ 4] 2795         CALL     INN
      000F21 CC 01 4E         [ 2] 2796         JP     STORE
                                   2797 
                                   2798 ;       ABORT   ( -- )
                                   2799 ;       Reset data stack and
                                   2800 ;       jump to QUIT.
      000F24 0F 01                 2801         .word      LINK
                           000F26  2802 LINK = . 
      000F26 05                    2803         .byte      5
      000F27 41 42 4F 52 54        2804         .ascii     "ABORT"
      000F2C                       2805 ABORT:
      000F2C CD 10 23         [ 4] 2806         CALL     PRESE
      000F2F CC 10 40         [ 2] 2807         JP     QUIT
                                   2808 
                                   2809 ;       abort"  ( f -- )
                                   2810 ;       Run time routine of ABORT".
                                   2811 ;       Abort with a message.
      000F32 0F 26                 2812         .word      LINK
                           000F34  2813 LINK = . 
      000F34 46                    2814 	.byte      COMPO+6
      000F35 41 42 4F 52 54        2815         .ascii     "ABORT"
      000F3A 22                    2816         .byte      '"'
      000F3B                       2817 ABORQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F3B CD 01 10         [ 4] 2818         CALL     QBRAN
      000F3E 0F 5A                 2819         .word      ABOR2   ;text flag
      000F40 CD 0B 36         [ 4] 2820         CALL     DOSTR
      000F43 CD 0A D8         [ 4] 2821 ABOR1:  CALL     SPACE
      000F46 CD 07 90         [ 4] 2822         CALL     COUNT
      000F49 CD 0B 02         [ 4] 2823         CALL     TYPES
      000F4C CD 00 DD         [ 4] 2824         CALL     DOLIT
      000F4F 00 3F                 2825         .word     63 ; "?"
      000F51 CD 00 C7         [ 4] 2826         CALL     EMIT
      000F54 CD 0B 20         [ 4] 2827         CALL     CR
      000F57 CC 0F 2C         [ 2] 2828         JP     ABORT   ;pass error string
      000F5A CD 0B 36         [ 4] 2829 ABOR2:  CALL     DOSTR
      000F5D CC 02 02         [ 2] 2830         JP     DROP
                                   2831 
                                   2832 ;; The text interpreter
                                   2833 
                                   2834 ;       $INTERPRET      ( a -- )
                                   2835 ;       Interpret a word. If failed,
                                   2836 ;       try to convert it to an integer.
      000F60 0F 34                 2837         .word      LINK
                           000F62  2838 LINK = . 
      000F62 0A                    2839         .byte      10
      000F63 24 49 4E 54 45 52 50  2840         .ascii     "$INTERPRET"
             52 45 54
      000F6D                       2841 INTER:
      000F6D CD 0E 2F         [ 4] 2842         CALL     NAMEQ
      000F70 CD 03 56         [ 4] 2843         CALL     QDUP    ;?defined
      000F73 CD 01 10         [ 4] 2844         CALL     QBRAN
      000F76 0F 97                 2845         .word      INTE1
      000F78 CD 01 65         [ 4] 2846         CALL     AT
      000F7B CD 00 DD         [ 4] 2847         CALL     DOLIT
      000F7E 40 00                 2848 	.word       0x4000	; COMPO*256
      000F80 CD 02 58         [ 4] 2849         CALL     ANDD    ;?compile only lexicon bits
      000F83 CD 0F 3B         [ 4] 2850         CALL     ABORQ
      000F86 0D                    2851         .byte      13
      000F87 20 63 6F 6D 70 69 6C  2852         .ascii     " compile only"
             65 20 6F 6E 6C 79
      000F94 CC 01 37         [ 2] 2853         JP     EXECU
      000F97 CD 09 CD         [ 4] 2854 INTE1:  CALL     NUMBQ   ;convert a number
      000F9A CD 01 10         [ 4] 2855         CALL     QBRAN
      000F9D 0F 43                 2856         .word    ABOR1
      000F9F 81               [ 4] 2857         RET
                                   2858 
                                   2859 ;       [       ( -- )
                                   2860 ;       Start  text interpreter.
      000FA0 0F 62                 2861         .word      LINK
                           000FA2  2862 LINK = . 
      000FA2 81                    2863 	.byte      IMEDD+1
      000FA3 5B                    2864         .ascii     "["
      000FA4                       2865 LBRAC:
      000FA4 CD 00 DD         [ 4] 2866         CALL     DOLIT
      000FA7 0F 6D                 2867         .word      INTER
      000FA9 CD 03 06         [ 4] 2868         CALL     TEVAL
      000FAC CC 01 4E         [ 2] 2869         JP     STORE
                                   2870 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2871 ;       .OK     ( -- )
                                   2872 ;       Display 'ok' while interpreting.
      000FAF 0F A2                 2873         .word      LINK
                           000FB1  2874 LINK = . 
      000FB1 03                    2875         .byte      3
      000FB2 2E 4F 4B              2876         .ascii     ".OK"
      000FB5                       2877 DOTOK:
      000FB5 CD 00 DD         [ 4] 2878         CALL     DOLIT
      000FB8 0F 6D                 2879         .word      INTER
      000FBA CD 03 06         [ 4] 2880         CALL     TEVAL
      000FBD CD 01 65         [ 4] 2881         CALL     AT
      000FC0 CD 04 2D         [ 4] 2882         CALL     EQUAL
      000FC3 CD 01 10         [ 4] 2883         CALL     QBRAN
      000FC6 0F CF                 2884         .word      DOTO1
      000FC8 CD 0B 5F         [ 4] 2885         CALL     DOTQP
      000FCB 03                    2886         .byte      3
      000FCC 20 6F 6B              2887         .ascii     " ok"
      000FCF CC 0B 20         [ 2] 2888 DOTO1:  JP     CR
                                   2889 
                                   2890 ;       ?STACK  ( -- )
                                   2891 ;       Abort if stack underflows.
      000FD2 0F B1                 2892         .word      LINK
                           000FD4  2893 LINK = . 
      000FD4 06                    2894         .byte      6
      000FD5 3F 53 54 41 43 4B     2895         .ascii     "?STACK"
      000FDB                       2896 QSTAC: 
      000FDB CD 06 FD         [ 4] 2897         CALL     DEPTH
      000FDE CD 02 45         [ 4] 2898         CALL     ZLESS   ;check only for underflow
      000FE1 CD 0F 3B         [ 4] 2899         CALL     ABORQ
      000FE4 0B                    2900         .byte      11
      000FE5 20 75 6E 64 65 72 66  2901         .ascii     " underflow "
             6C 6F 77 20
      000FF0 81               [ 4] 2902         RET
                                   2903 
                                   2904 ;       EVAL    ( -- )
                                   2905 ;       Interpret  input stream.
      000FF1 0F D4                 2906         .word      LINK
                           000FF3  2907 LINK = . 
      000FF3 04                    2908         .byte      4
      000FF4 45 56 41 4C           2909         .ascii     "EVAL"
      000FF8                       2910 EVAL:
      000FF8 CD 0D 32         [ 4] 2911 EVAL1:  CALL     TOKEN
      000FFB CD 02 0C         [ 4] 2912         CALL     DUPP
      000FFE CD 01 83         [ 4] 2913         CALL     CAT     ;?input stream empty
      001001 CD 01 10         [ 4] 2914         CALL     QBRAN
      001004 10 14                 2915         .word    EVAL2
      001006 CD 03 06         [ 4] 2916         CALL     TEVAL
      001009 CD 07 DD         [ 4] 2917         CALL     ATEXE
      00100C CD 0F DB         [ 4] 2918         CALL     QSTAC   ;evaluate input, check stack
      00100F CD 01 27         [ 4] 2919         CALL     BRAN
      001012 0F F8                 2920         .word    EVAL1
      001014 CD 02 02         [ 4] 2921 EVAL2:  CALL     DROP
      001017 CC 0F B5         [ 2] 2922         JP       DOTOK
                                   2923 
                                   2924 ;       PRESET  ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2925 ;       Reset data stack pointer and
                                   2926 ;       terminal input buffer.
      00101A 0F F3                 2927         .word      LINK
                           00101C  2928 LINK = . 
      00101C 06                    2929         .byte      6
      00101D 50 52 45 53 45 54     2930         .ascii     "PRESET"
      001023                       2931 PRESE:
      001023 CD 00 DD         [ 4] 2932         CALL     DOLIT
      001026 16 F0                 2933         .word      SPP
      001028 CD 01 F9         [ 4] 2934         CALL     SPSTO
      00102B CD 00 DD         [ 4] 2935         CALL     DOLIT
      00102E 17 00                 2936         .word      TIBB
      001030 CD 02 F5         [ 4] 2937         CALL     NTIB
      001033 CD 06 5B         [ 4] 2938         CALL     CELLP
      001036 CC 01 4E         [ 2] 2939         JP     STORE
                                   2940 
                                   2941 ;       QUIT    ( -- )
                                   2942 ;       Reset return stack pointer
                                   2943 ;       and start text interpreter.
      001039 10 1C                 2944         .word      LINK
                           00103B  2945 LINK = . 
      00103B 04                    2946         .byte      4
      00103C 51 55 49 54           2947         .ascii     "QUIT"
      001040                       2948 QUIT:
      001040 CD 00 DD         [ 4] 2949         CALL     DOLIT
      001043 17 FF                 2950         .word      RPP
      001045 CD 01 A0         [ 4] 2951         CALL     RPSTO   ;reset return stack pointer
      001048 CD 0F A4         [ 4] 2952 QUIT1:  CALL     LBRAC   ;start interpretation
      00104B CD 0F 07         [ 4] 2953 QUIT2:  CALL     QUERY   ;get input
      00104E CD 0F F8         [ 4] 2954         CALL     EVAL
      001051 20 F8            [ 2] 2955         JRA     QUIT2   ;continue till error
                                   2956 
                                   2957 ;; The compiler
                                   2958 
                                   2959 ;       '       ( -- ca )
                                   2960 ;       Search vocabularies for
                                   2961 ;       next word in input stream.
      001053 10 3B                 2962         .word      LINK
                           001055  2963 LINK = . 
      001055 01                    2964         .byte      1
      001056 27                    2965         .ascii     "'"
      001057                       2966 TICK:
      001057 CD 0D 32         [ 4] 2967         CALL     TOKEN
      00105A CD 0E 2F         [ 4] 2968         CALL     NAMEQ   ;?defined
      00105D CD 01 10         [ 4] 2969         CALL     QBRAN
      001060 0F 43                 2970         .word      ABOR1
      001062 81               [ 4] 2971         RET     ;yes, push code address
                                   2972 
                                   2973 ;       ALLOT   ( n -- )
                                   2974 ;       Allocate n bytes to  code dictionary.
      001063 10 55                 2975         .word      LINK
                           001065  2976 LINK = . 
      001065 05                    2977         .byte      5
      001066 41 4C 4C 4F 54        2978         .ascii     "ALLOT"
      00106B                       2979 ALLOT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      00106B CD 03 36         [ 4] 2980         CALL     CPP
      00106E CC 07 29         [ 2] 2981         JP     PSTOR
                                   2982 
                                   2983 ;       ,       ( w -- )
                                   2984 ;         Compile an integer into
                                   2985 ;         code dictionary.
      001071 10 65                 2986         .word      LINK
                           001073  2987 LINK = . 
      001073 01                    2988         .byte      1
      001074 2C                    2989         .ascii     ","
      001075                       2990 COMMA:
      001075 CD 07 A7         [ 4] 2991         CALL     HERE
      001078 CD 02 0C         [ 4] 2992         CALL     DUPP
      00107B CD 06 5B         [ 4] 2993         CALL     CELLP   ;cell boundary
      00107E CD 03 36         [ 4] 2994         CALL     CPP
      001081 CD 01 4E         [ 4] 2995         CALL     STORE
      001084 CC 01 4E         [ 2] 2996         JP     STORE
                                   2997 
                                   2998 ;       C,      ( c -- )
                                   2999 ;       Compile a byte into
                                   3000 ;       code dictionary.
      001087 10 73                 3001        .word      LINK
                           001089  3002 LINK = . 
      001089 02                    3003         .byte      2
      00108A 43 2C                 3004         .ascii     "C,"
      00108C                       3005 CCOMMA:
      00108C CD 07 A7         [ 4] 3006         CALL     HERE
      00108F CD 02 0C         [ 4] 3007         CALL     DUPP
      001092 CD 06 86         [ 4] 3008         CALL     ONEP
      001095 CD 03 36         [ 4] 3009         CALL     CPP
      001098 CD 01 4E         [ 4] 3010         CALL     STORE
      00109B CC 01 72         [ 2] 3011         JP     CSTOR
                                   3012 
                                   3013 ;       [COMPILE]       ( -- ; <string> )
                                   3014 ;       Compile next immediate
                                   3015 ;       word into code dictionary.
      00109E 10 89                 3016         .word      LINK
                           0010A0  3017 LINK = . 
      0010A0 89                    3018 	.byte      IMEDD+9
      0010A1 5B 43 4F 4D 50 49 4C  3019         .ascii     "[COMPILE]"
             45 5D
      0010AA                       3020 BCOMP:
      0010AA CD 10 57         [ 4] 3021         CALL     TICK
      0010AD CC 13 06         [ 2] 3022         JP     JSRC
                                   3023 
                                   3024 ;       COMPILE ( -- )
                                   3025 ;       Compile next jsr in
                                   3026 ;       colon list to code dictionary.
      0010B0 10 A0                 3027         .word      LINK
                           0010B2  3028 LINK = . 
      0010B2 47                    3029 	.byte      COMPO+7
      0010B3 43 4F 4D 50 49 4C 45  3030         .ascii     "COMPILE"
      0010BA                       3031 COMPI:
      0010BA CD 01 B6         [ 4] 3032         CALL     RFROM
      0010BD CD 06 86         [ 4] 3033         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      0010C0 CD 02 0C         [ 4] 3034         CALL     DUPP
      0010C3 CD 01 65         [ 4] 3035         CALL     AT
      0010C6 CD 13 06         [ 4] 3036         CALL     JSRC    ;compile subroutine
      0010C9 CD 06 5B         [ 4] 3037         CALL     CELLP
      0010CC CC 01 D5         [ 2] 3038         JP     TOR
                                   3039 
                                   3040 ;       LITERAL ( w -- )
                                   3041 ;       Compile tos to dictionary
                                   3042 ;       as an integer literal.
      0010CF 10 B2                 3043         .word      LINK
                           0010D1  3044 LINK = . 
      0010D1 87                    3045 	.byte      IMEDD+7
      0010D2 4C 49 54 45 52 41 4C  3046         .ascii     "LITERAL"
      0010D9                       3047 LITER:
      0010D9 CD 10 BA         [ 4] 3048         CALL     COMPI
      0010DC CD 00 DD         [ 4] 3049         CALL     DOLIT
      0010DF CC 10 75         [ 2] 3050         JP     COMMA
                                   3051 
                                   3052 ;       $,"     ( -- )
                                   3053 ;       Compile a literal string
                                   3054 ;       up to next " .
      0010E2 10 D1                 3055         .word      LINK
                           0010E4  3056 LINK = . 
      0010E4 03                    3057         .byte      3
      0010E5 24 2C 22              3058         .byte     '$',',','"'
      0010E8                       3059 STRCQ:
      0010E8 CD 00 DD         [ 4] 3060         CALL     DOLIT
      0010EB 00 22                 3061         .word     34	; "
      0010ED CD 0C B5         [ 4] 3062         CALL     PARSE
      0010F0 CD 07 A7         [ 4] 3063         CALL     HERE
      0010F3 CD 08 68         [ 4] 3064         CALL     PACKS   ;string to code dictionary
      0010F6 CD 07 90         [ 4] 3065         CALL     COUNT
      0010F9 CD 03 A7         [ 4] 3066         CALL     PLUS    ;calculate aligned end of string
      0010FC CD 03 36         [ 4] 3067         CALL     CPP
      0010FF CC 01 4E         [ 2] 3068         JP     STORE
                                   3069 
                                   3070 ;; Structures
                                   3071 
                                   3072 ;       FOR     ( -- a )
                                   3073 ;       Start a FOR-NEXT loop
                                   3074 ;       structure in a colon definition.
      001102 10 E4                 3075         .word      LINK
                           001104  3076 LINK = . 
      001104 83                    3077 	.byte      IMEDD+3
      001105 46 4F 52              3078         .ascii     "FOR"
      001108                       3079 FOR:
      001108 CD 10 BA         [ 4] 3080         CALL     COMPI
      00110B CD 01 D5         [ 4] 3081         CALL     TOR
      00110E CC 07 A7         [ 2] 3082         JP     HERE
                                   3083 
                                   3084 ;       NEXT    ( a -- )
                                   3085 ;       Terminate a FOR-NEXT loop.
      001111 11 04                 3086         .word      LINK
                           001113  3087 LINK = . 
      001113 84                    3088 	.byte      IMEDD+4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001114 4E 45 58 54           3089         .ascii     "NEXT"
      001118                       3090 NEXT:
      001118 CD 10 BA         [ 4] 3091         CALL     COMPI
      00111B CD 00 F1         [ 4] 3092         CALL     DONXT
      00111E CC 10 75         [ 2] 3093         JP     COMMA
                                   3094 
                                   3095 ;       BEGIN   ( -- a )
                                   3096 ;       Start an infinite or
                                   3097 ;       indefinite loop structure.
      001121 11 13                 3098         .word      LINK
                           001123  3099 LINK = . 
      001123 85                    3100 	.byte      IMEDD+5
      001124 42 45 47 49 4E        3101         .ascii     "BEGIN"
      001129                       3102 BEGIN:
      001129 CC 07 A7         [ 2] 3103         JP     HERE
                                   3104 
                                   3105 ;       UNTIL   ( a -- )
                                   3106 ;       Terminate a BEGIN-UNTIL
                                   3107 ;       indefinite loop structure.
      00112C 11 23                 3108         .word      LINK
                           00112E  3109 LINK = . 
      00112E 85                    3110 	.byte      IMEDD+5
      00112F 55 4E 54 49 4C        3111         .ascii     "UNTIL"
      001134                       3112 UNTIL:
      001134 CD 10 BA         [ 4] 3113         CALL     COMPI
      001137 CD 01 10         [ 4] 3114         CALL     QBRAN
      00113A CC 10 75         [ 2] 3115         JP     COMMA
                                   3116 
                                   3117 ;       AGAIN   ( a -- )
                                   3118 ;       Terminate a BEGIN-AGAIN
                                   3119 ;       infinite loop structure.
      00113D 11 2E                 3120         .word      LINK
                           00113F  3121 LINK = . 
      00113F 85                    3122 	.byte      IMEDD+5
      001140 41 47 41 49 4E        3123         .ascii     "AGAIN"
      001145                       3124 AGAIN:
      001145 CD 10 BA         [ 4] 3125         CALL     COMPI
      001148 CD 01 27         [ 4] 3126         CALL     BRAN
      00114B CC 10 75         [ 2] 3127         JP     COMMA
                                   3128 
                                   3129 ;       IF      ( -- A )
                                   3130 ;       Begin a conditional branch.
      00114E 11 3F                 3131         .word      LINK
                           001150  3132 LINK = . 
      001150 82                    3133 	.byte      IMEDD+2
      001151 49 46                 3134         .ascii     "IF"
      001153                       3135 IFF:
      001153 CD 10 BA         [ 4] 3136         CALL     COMPI
      001156 CD 01 10         [ 4] 3137         CALL     QBRAN
      001159 CD 07 A7         [ 4] 3138         CALL     HERE
      00115C CD 06 BA         [ 4] 3139         CALL     ZERO
      00115F CC 10 75         [ 2] 3140         JP     COMMA
                                   3141 
                                   3142 ;       THEN        ( A -- )
                                   3143 ;       Terminate a conditional branch structure.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001162 11 50                 3144         .word      LINK
                           001164  3145 LINK = . 
      001164 84                    3146 	.byte      IMEDD+4
      001165 54 48 45 4E           3147         .ascii     "THEN"
      001169                       3148 THENN:
      001169 CD 07 A7         [ 4] 3149         CALL     HERE
      00116C CD 02 1C         [ 4] 3150         CALL     SWAPP
      00116F CC 01 4E         [ 2] 3151         JP     STORE
                                   3152 
                                   3153 ;       ELSE        ( A -- A )
                                   3154 ;       Start the false clause in an IF-ELSE-THEN structure.
      001172 11 64                 3155         .word      LINK
                           001174  3156 LINK = . 
      001174 84                    3157 	.byte      IMEDD+4
      001175 45 4C 53 45           3158         .ascii     "ELSE"
      001179                       3159 ELSEE:
      001179 CD 10 BA         [ 4] 3160         CALL     COMPI
      00117C CD 01 27         [ 4] 3161         CALL     BRAN
      00117F CD 07 A7         [ 4] 3162         CALL     HERE
      001182 CD 06 BA         [ 4] 3163         CALL     ZERO
      001185 CD 10 75         [ 4] 3164         CALL     COMMA
      001188 CD 02 1C         [ 4] 3165         CALL     SWAPP
      00118B CD 07 A7         [ 4] 3166         CALL     HERE
      00118E CD 02 1C         [ 4] 3167         CALL     SWAPP
      001191 CC 01 4E         [ 2] 3168         JP     STORE
                                   3169 
                                   3170 ;       AHEAD       ( -- A )
                                   3171 ;       Compile a forward branch instruction.
      001194 11 74                 3172         .word      LINK
                           001196  3173 LINK = . 
      001196 85                    3174 	.byte      IMEDD+5
      001197 41 48 45 41 44        3175         .ascii     "AHEAD"
      00119C                       3176 AHEAD:
      00119C CD 10 BA         [ 4] 3177         CALL     COMPI
      00119F CD 01 27         [ 4] 3178         CALL     BRAN
      0011A2 CD 07 A7         [ 4] 3179         CALL     HERE
      0011A5 CD 06 BA         [ 4] 3180         CALL     ZERO
      0011A8 CC 10 75         [ 2] 3181         JP     COMMA
                                   3182 
                                   3183 ;       WHILE       ( a -- A a )
                                   3184 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      0011AB 11 96                 3185         .word      LINK
                           0011AD  3186 LINK = . 
      0011AD 85                    3187 	.byte      IMEDD+5
      0011AE 57 48 49 4C 45        3188         .ascii     "WHILE"
      0011B3                       3189 WHILE:
      0011B3 CD 10 BA         [ 4] 3190         CALL     COMPI
      0011B6 CD 01 10         [ 4] 3191         CALL     QBRAN
      0011B9 CD 07 A7         [ 4] 3192         CALL     HERE
      0011BC CD 06 BA         [ 4] 3193         CALL     ZERO
      0011BF CD 10 75         [ 4] 3194         CALL     COMMA
      0011C2 CC 02 1C         [ 2] 3195         JP     SWAPP
                                   3196 
                                   3197 ;       REPEAT      ( A a -- )
                                   3198 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      0011C5 11 AD                 3199         .word      LINK
                           0011C7  3200 LINK = . 
      0011C7 86                    3201         .byte      IMEDD+6
      0011C8 52 45 50 45 41 54     3202         .ascii     "REPEAT"
      0011CE                       3203 REPEA:
      0011CE CD 10 BA         [ 4] 3204         CALL     COMPI
      0011D1 CD 01 27         [ 4] 3205         CALL     BRAN
      0011D4 CD 10 75         [ 4] 3206         CALL     COMMA
      0011D7 CD 07 A7         [ 4] 3207         CALL     HERE
      0011DA CD 02 1C         [ 4] 3208         CALL     SWAPP
      0011DD CC 01 4E         [ 2] 3209         JP     STORE
                                   3210 
                                   3211 ;       AFT         ( a -- a A )
                                   3212 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0011E0 11 C7                 3213         .word      LINK
                           0011E2  3214 LINK = . 
      0011E2 83                    3215 	.byte      IMEDD+3
      0011E3 41 46 54              3216         .ascii     "AFT"
      0011E6                       3217 AFT:
      0011E6 CD 02 02         [ 4] 3218         CALL     DROP
      0011E9 CD 11 9C         [ 4] 3219         CALL     AHEAD
      0011EC CD 07 A7         [ 4] 3220         CALL     HERE
      0011EF CC 02 1C         [ 2] 3221         JP     SWAPP
                                   3222 
                                   3223 ;       ABORT"      ( -- ; <string> )
                                   3224 ;       Conditional abort with an error message.
      0011F2 11 E2                 3225         .word      LINK
                           0011F4  3226 LINK = . 
      0011F4 86                    3227 	.byte      IMEDD+6
      0011F5 41 42 4F 52 54        3228         .ascii     "ABORT"
      0011FA 22                    3229         .byte      '"'
      0011FB                       3230 ABRTQ:
      0011FB CD 10 BA         [ 4] 3231         CALL     COMPI
      0011FE CD 0F 3B         [ 4] 3232         CALL     ABORQ
      001201 CC 10 E8         [ 2] 3233         JP     STRCQ
                                   3234 
                                   3235 ;       $"     ( -- ; <string> )
                                   3236 ;       Compile an inline string literal.
      001204 11 F4                 3237         .word      LINK
                           001206  3238 LINK = . 
      001206 82                    3239 	.byte      IMEDD+2
      001207 24 22                 3240         .byte     '$','"'
      001209                       3241 STRQ:
      001209 CD 10 BA         [ 4] 3242         CALL     COMPI
      00120C CD 0B 55         [ 4] 3243         CALL     STRQP
      00120F CC 10 E8         [ 2] 3244         JP     STRCQ
                                   3245 
                                   3246 ;       ."          ( -- ; <string> )
                                   3247 ;       Compile an inline string literal to be typed out at run time.
      001212 12 06                 3248         .word      LINK
                           001214  3249 LINK = . 
      001214 82                    3250 	.byte      IMEDD+2
      001215 2E 22                 3251         .byte     '.','"'
      001217                       3252 DOTQ:
      001217 CD 10 BA         [ 4] 3253         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      00121A CD 0B 5F         [ 4] 3254         CALL     DOTQP
      00121D CC 10 E8         [ 2] 3255         JP     STRCQ
                                   3256 
                                   3257 ;; Name compiler
                                   3258 
                                   3259 ;       ?UNIQUE ( a -- a )
                                   3260 ;       Display a warning message
                                   3261 ;       if word already exists.
      001220 12 14                 3262         .word      LINK
                           001222  3263 LINK = . 
      001222 07                    3264         .byte      7
      001223 3F 55 4E 49 51 55 45  3265         .ascii     "?UNIQUE"
      00122A                       3266 UNIQU:
      00122A CD 02 0C         [ 4] 3267         CALL     DUPP
      00122D CD 0E 2F         [ 4] 3268         CALL     NAMEQ   ;?name exists
      001230 CD 01 10         [ 4] 3269         CALL     QBRAN
      001233 12 49                 3270         .word      UNIQ1
      001235 CD 0B 5F         [ 4] 3271         CALL     DOTQP   ;redef are OK
      001238 07                    3272         .byte       7
      001239 20 72 65 44 65 66 20  3273         .ascii     " reDef "       
      001240 CD 02 36         [ 4] 3274         CALL     OVER
      001243 CD 07 90         [ 4] 3275         CALL     COUNT
      001246 CD 0B 02         [ 4] 3276         CALL     TYPES   ;just in case
      001249 CC 02 02         [ 2] 3277 UNIQ1:  JP     DROP
                                   3278 
                                   3279 ;       $,n     ( na -- )
                                   3280 ;       Build a new dictionary name
                                   3281 ;       using string at na.
      00124C 12 22                 3282         .word      LINK
                           00124E  3283 LINK = . 
      00124E 03                    3284         .byte      3
      00124F 24 2C 6E              3285         .ascii     "$,n"
      001252                       3286 SNAME:
      001252 CD 02 0C         [ 4] 3287         CALL     DUPP
      001255 CD 01 83         [ 4] 3288         CALL     CAT     ;?null input
      001258 CD 01 10         [ 4] 3289         CALL     QBRAN
      00125B 12 88                 3290         .word      PNAM1
      00125D CD 12 2A         [ 4] 3291         CALL     UNIQU   ;?redefinition
      001260 CD 02 0C         [ 4] 3292         CALL     DUPP
      001263 CD 07 90         [ 4] 3293         CALL     COUNT
      001266 CD 03 A7         [ 4] 3294         CALL     PLUS
      001269 CD 03 36         [ 4] 3295         CALL     CPP
      00126C CD 01 4E         [ 4] 3296         CALL     STORE
      00126F CD 02 0C         [ 4] 3297         CALL     DUPP
      001272 CD 03 46         [ 4] 3298         CALL     LAST
      001275 CD 01 4E         [ 4] 3299         CALL     STORE   ;save na for vocabulary link
      001278 CD 06 6A         [ 4] 3300         CALL     CELLM   ;link address
      00127B CD 03 28         [ 4] 3301         CALL     CNTXT
      00127E CD 01 65         [ 4] 3302         CALL     AT
      001281 CD 02 1C         [ 4] 3303         CALL     SWAPP
      001284 CD 01 4E         [ 4] 3304         CALL     STORE
      001287 81               [ 4] 3305         RET     ;save code pointer
      001288 CD 0B 55         [ 4] 3306 PNAM1:  CALL     STRQP
      00128B 05                    3307         .byte      5
      00128C 20 6E 61 6D 65        3308         .ascii     " name" ;null input
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001291 CC 0F 43         [ 2] 3309         JP     ABOR1
                                   3310 
                                   3311 ;; FORTH compiler
                                   3312 
                                   3313 ;       $COMPILE        ( a -- )
                                   3314 ;       Compile next word to
                                   3315 ;       dictionary as a token or literal.
      001294 12 4E                 3316         .word      LINK
                           001296  3317 LINK = . 
      001296 08                    3318         .byte      8
      001297 24 43 4F 4D 50 49 4C  3319         .ascii     "$COMPILE"
             45
      00129F                       3320 SCOMP:
      00129F CD 0E 2F         [ 4] 3321         CALL     NAMEQ
      0012A2 CD 03 56         [ 4] 3322         CALL     QDUP    ;?defined
      0012A5 CD 01 10         [ 4] 3323         CALL     QBRAN
      0012A8 12 C0                 3324         .word      SCOM2
      0012AA CD 01 65         [ 4] 3325         CALL     AT
      0012AD CD 00 DD         [ 4] 3326         CALL     DOLIT
      0012B0 80 00                 3327         .word     0x8000	;  IMEDD*256
      0012B2 CD 02 58         [ 4] 3328         CALL     ANDD    ;?immediate
      0012B5 CD 01 10         [ 4] 3329         CALL     QBRAN
      0012B8 12 BD                 3330         .word      SCOM1
      0012BA CC 01 37         [ 2] 3331         JP     EXECU
      0012BD CC 13 06         [ 2] 3332 SCOM1:  JP     JSRC
      0012C0 CD 09 CD         [ 4] 3333 SCOM2:  CALL     NUMBQ   ;try to convert to number
      0012C3 CD 01 10         [ 4] 3334         CALL     QBRAN
      0012C6 0F 43                 3335         .word      ABOR1
      0012C8 CC 10 D9         [ 2] 3336         JP     LITER
                                   3337 
                                   3338 ;       OVERT   ( -- )
                                   3339 ;       Link a new word into vocabulary.
      0012CB 12 96                 3340         .word      LINK
                           0012CD  3341 LINK = . 
      0012CD 05                    3342         .byte      5
      0012CE 4F 56 45 52 54        3343         .ascii     "OVERT"
      0012D3                       3344 OVERT:
      0012D3 CD 03 46         [ 4] 3345         CALL     LAST
      0012D6 CD 01 65         [ 4] 3346         CALL     AT
      0012D9 CD 03 28         [ 4] 3347         CALL     CNTXT
      0012DC CC 01 4E         [ 2] 3348         JP     STORE
                                   3349 
                                   3350 ;       ;       ( -- )
                                   3351 ;       Terminate a colon definition.
      0012DF 12 CD                 3352         .word      LINK
                           0012E1  3353 LINK = . 
      0012E1 C1                    3354 	.byte      IMEDD+COMPO+1
      0012E2 3B                    3355         .ascii     ";"
      0012E3                       3356 SEMIS:
      0012E3 CD 10 BA         [ 4] 3357         CALL     COMPI
      0012E6 CD 01 47         [ 4] 3358         CALL     EXIT
      0012E9 CD 0F A4         [ 4] 3359         CALL     LBRAC
      0012EC CC 12 D3         [ 2] 3360         JP     OVERT
                                   3361 
                                   3362 ;       ]       ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3363 ;       Start compiling words in
                                   3364 ;       input stream.
      0012EF 12 E1                 3365         .word      LINK
                           0012F1  3366 LINK = . 
      0012F1 01                    3367         .byte      1
      0012F2 5D                    3368         .ascii     "]"
      0012F3                       3369 RBRAC:
      0012F3 CD 00 DD         [ 4] 3370         CALL     DOLIT
      0012F6 12 9F                 3371         .word      SCOMP
      0012F8 CD 03 06         [ 4] 3372         CALL     TEVAL
      0012FB CC 01 4E         [ 2] 3373         JP     STORE
                                   3374 
                                   3375 ;       CALL,    ( ca -- )
                                   3376 ;       Compile a subroutine call.
      0012FE 12 F1                 3377         .word      LINK
                           001300  3378 LINK = . 
      001300 04                    3379         .byte      4
      001301 43 41 4C 4C 2C        3380         .ascii     "CALL,"
      001306                       3381 JSRC:
      001306 CD 00 DD         [ 4] 3382         CALL     DOLIT
      001309 00 CD                 3383         .word     CALLL     ;CALL
      00130B CD 10 8C         [ 4] 3384         CALL     CCOMMA
      00130E CC 10 75         [ 2] 3385         JP     COMMA
                                   3386 
                                   3387 ;       :       ( -- ; <string> )
                                   3388 ;       Start a new colon definition
                                   3389 ;       using next word as its name.
      001311 13 00                 3390         .word      LINK
                           001313  3391 LINK = . 
      001313 01                    3392         .byte      1
      001314 3A                    3393         .ascii     ":"
      001315                       3394 COLON:
      001315 CD 0D 32         [ 4] 3395         CALL     TOKEN
      001318 CD 12 52         [ 4] 3396         CALL     SNAME
      00131B CC 12 F3         [ 2] 3397         JP     RBRAC
                                   3398 
                                   3399 ;       IMMEDIATE       ( -- )
                                   3400 ;       Make last compiled word
                                   3401 ;       an immediate word.
      00131E 13 13                 3402         .word      LINK
                           001320  3403 LINK = . 
      001320 09                    3404         .byte      9
      001321 49 4D 4D 45 44 49 41  3405         .ascii     "IMMEDIATE"
             54 45
      00132A                       3406 IMMED:
      00132A CD 00 DD         [ 4] 3407         CALL     DOLIT
      00132D 80 00                 3408         .word     0x8000	;  IMEDD*256
      00132F CD 03 46         [ 4] 3409         CALL     LAST
      001332 CD 01 65         [ 4] 3410         CALL     AT
      001335 CD 01 65         [ 4] 3411         CALL     AT
      001338 CD 02 6C         [ 4] 3412         CALL     ORR
      00133B CD 03 46         [ 4] 3413         CALL     LAST
      00133E CD 01 65         [ 4] 3414         CALL     AT
      001341 CC 01 4E         [ 2] 3415         JP     STORE
                                   3416 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3417 ;; Defining words
                                   3418 
                                   3419 ;       CREATE  ( -- ; <string> )
                                   3420 ;       Compile a new array
                                   3421 ;       without allocating space.
      001344 13 20                 3422         .word      LINK
                           001346  3423 LINK = . 
      001346 06                    3424         .byte      6
      001347 43 52 45 41 54 45     3425         .ascii     "CREATE"
      00134D                       3426 CREAT:
      00134D CD 0D 32         [ 4] 3427         CALL     TOKEN
      001350 CD 12 52         [ 4] 3428         CALL     SNAME
      001353 CD 12 D3         [ 4] 3429         CALL     OVERT
      001356 CD 10 BA         [ 4] 3430         CALL     COMPI
      001359 CD 02 B9         [ 4] 3431         CALL     DOVAR
      00135C 81               [ 4] 3432         RET
                                   3433 
                                   3434 ;       VARIABLE        ( -- ; <string> )
                                   3435 ;       Compile a new variable
                                   3436 ;       initialized to 0.
      00135D 13 46                 3437         .word      LINK
                           00135F  3438 LINK = . 
      00135F 08                    3439         .byte      8
      001360 56 41 52 49 41 42 4C  3440         .ascii     "VARIABLE"
             45
      001368                       3441 VARIA:
      001368 CD 13 4D         [ 4] 3442         CALL     CREAT
      00136B CD 06 BA         [ 4] 3443         CALL     ZERO
      00136E CC 10 75         [ 2] 3444         JP     COMMA
                                   3445 
                                   3446 ;; Tools
                                   3447 
                                   3448 ;       _TYPE   ( b u -- )
                                   3449 ;       Display a string. Filter
                                   3450 ;       non-printing characters.
      001371 13 5F                 3451         .word      LINK
                           001373  3452 LINK = . 
      001373 05                    3453         .byte      5
      001374 5F 54 59 50 45        3454         .ascii     "_TYPE"
      001379                       3455 UTYPE:
      001379 CD 01 D5         [ 4] 3456         CALL     TOR     ;start count down loop
      00137C 20 0F            [ 2] 3457         JRA     UTYP2   ;skip first pass
      00137E CD 02 0C         [ 4] 3458 UTYP1:  CALL     DUPP
      001381 CD 01 83         [ 4] 3459         CALL     CAT
      001384 CD 06 E4         [ 4] 3460         CALL     TCHAR
      001387 CD 00 C7         [ 4] 3461         CALL     EMIT    ;display only printable
      00138A CD 06 86         [ 4] 3462         CALL     ONEP    ;increment address
      00138D CD 00 F1         [ 4] 3463 UTYP2:  CALL     DONXT
      001390 13 7E                 3464         .word      UTYP1   ;loop till done
      001392 CC 02 02         [ 2] 3465         JP     DROP
                                   3466 
                                   3467 ;       dm+     ( a u -- a )
                                   3468 ;       Dump u bytes from ,
                                   3469 ;       leaving a+u on  stack.
      001395 13 73                 3470         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           001397  3471 LINK = . 
      001397 03                    3472         .byte      3
      001398 64 6D 2B              3473         .ascii     "dm+"
      00139B                       3474 DUMPP:
      00139B CD 02 36         [ 4] 3475         CALL     OVER
      00139E CD 00 DD         [ 4] 3476         CALL     DOLIT
      0013A1 00 04                 3477         .word      4
      0013A3 CD 0B 88         [ 4] 3478         CALL     UDOTR   ;display address
      0013A6 CD 0A D8         [ 4] 3479         CALL     SPACE
      0013A9 CD 01 D5         [ 4] 3480         CALL     TOR     ;start count down loop
      0013AC 20 11            [ 2] 3481         JRA     PDUM2   ;skip first pass
      0013AE CD 02 0C         [ 4] 3482 PDUM1:  CALL     DUPP
      0013B1 CD 01 83         [ 4] 3483         CALL     CAT
      0013B4 CD 00 DD         [ 4] 3484         CALL     DOLIT
      0013B7 00 03                 3485         .word      3
      0013B9 CD 0B 88         [ 4] 3486         CALL     UDOTR   ;display numeric data
      0013BC CD 06 86         [ 4] 3487         CALL     ONEP    ;increment address
      0013BF CD 00 F1         [ 4] 3488 PDUM2:  CALL     DONXT
      0013C2 13 AE                 3489         .word      PDUM1   ;loop till done
      0013C4 81               [ 4] 3490         RET
                                   3491 
                                   3492 ;       DUMP    ( a u -- )
                                   3493 ;       Dump u bytes from a,
                                   3494 ;       in a formatted manner.
      0013C5 13 97                 3495         .word      LINK
                           0013C7  3496 LINK = . 
      0013C7 04                    3497         .byte      4
      0013C8 44 55 4D 50           3498         .ascii     "DUMP"
      0013CC                       3499 DUMP:
      0013CC CD 02 C7         [ 4] 3500         CALL     BASE
      0013CF CD 01 65         [ 4] 3501         CALL     AT
      0013D2 CD 01 D5         [ 4] 3502         CALL     TOR
      0013D5 CD 09 60         [ 4] 3503         CALL     HEX     ;save radix, set hex
      0013D8 CD 00 DD         [ 4] 3504         CALL     DOLIT
      0013DB 00 10                 3505         .word      16
      0013DD CD 05 AC         [ 4] 3506         CALL     SLASH   ;change count to lines
      0013E0 CD 01 D5         [ 4] 3507         CALL     TOR     ;start count down loop
      0013E3 CD 0B 20         [ 4] 3508 DUMP1:  CALL     CR
      0013E6 CD 00 DD         [ 4] 3509         CALL     DOLIT
      0013E9 00 10                 3510         .word      16
      0013EB CD 03 92         [ 4] 3511         CALL     DDUP
      0013EE CD 13 9B         [ 4] 3512         CALL     DUMPP   ;display numeric
      0013F1 CD 03 67         [ 4] 3513         CALL     ROT
      0013F4 CD 03 67         [ 4] 3514         CALL     ROT
      0013F7 CD 0A D8         [ 4] 3515         CALL     SPACE
      0013FA CD 0A D8         [ 4] 3516         CALL     SPACE
      0013FD CD 13 79         [ 4] 3517         CALL     UTYPE   ;display printable characters
      001400 CD 00 F1         [ 4] 3518         CALL     DONXT
      001403 13 E3                 3519         .word      DUMP1   ;loop till done
      001405 CD 02 02         [ 4] 3520 DUMP3:  CALL     DROP
      001408 CD 01 B6         [ 4] 3521         CALL     RFROM
      00140B CD 02 C7         [ 4] 3522         CALL     BASE
      00140E CC 01 4E         [ 2] 3523         JP     STORE   ;restore radix
                                   3524 
                                   3525 ;       .S      ( ... -- ... )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3526 ;        Display  contents of stack.
      001411 13 C7                 3527         .word      LINK
                           001413  3528 LINK = . 
      001413 02                    3529         .byte      2
      001414 2E 53                 3530         .ascii     ".S"
      001416                       3531 DOTS:
      001416 CD 0B 20         [ 4] 3532         CALL     CR
      001419 CD 06 FD         [ 4] 3533         CALL     DEPTH   ;stack depth
      00141C CD 01 D5         [ 4] 3534         CALL     TOR     ;start count down loop
      00141F 20 0C            [ 2] 3535         JRA     DOTS2   ;skip first pass
      001421 CD 01 C9         [ 4] 3536 DOTS1:  CALL     RAT
      001424 CD 06 86         [ 4] 3537         CALL ONEP
      001427 CD 07 14         [ 4] 3538 	CALL     PICK
      00142A CD 0B BB         [ 4] 3539         CALL     DOT     ;index stack, display contents
      00142D CD 00 F1         [ 4] 3540 DOTS2:  CALL     DONXT
      001430 14 21                 3541         .word      DOTS1   ;loop till done
      001432 CD 0B 5F         [ 4] 3542         CALL     DOTQP
      001435 05                    3543         .byte      5
      001436 20 3C 73 70 20        3544         .ascii     " <sp "
      00143B 81               [ 4] 3545         RET
                                   3546 
                                   3547 ;       >NAME   ( ca -- na | F )
                                   3548 ;       Convert code address
                                   3549 ;       to a name address.
      00143C 14 13                 3550         .word      LINK
                           00143E  3551 LINK = . 
      00143E 05                    3552         .byte      5
      00143F 3E 4E 41 4D 45        3553         .ascii     ">NAME"
      001444                       3554 TNAME:
      001444 CD 03 28         [ 4] 3555         CALL     CNTXT   ;vocabulary link
      001447 CD 01 65         [ 4] 3556 TNAM2:  CALL     AT
      00144A CD 02 0C         [ 4] 3557         CALL     DUPP    ;?last word in a vocabulary
      00144D CD 01 10         [ 4] 3558         CALL     QBRAN
      001450 14 6B                 3559         .word      TNAM4
      001452 CD 03 92         [ 4] 3560         CALL     DDUP
      001455 CD 0D 40         [ 4] 3561         CALL     NAMET
      001458 CD 02 81         [ 4] 3562         CALL     XORR    ;compare
      00145B CD 01 10         [ 4] 3563         CALL     QBRAN
      00145E 14 65                 3564         .word      TNAM3
      001460 CD 06 6A         [ 4] 3565         CALL     CELLM   ;continue with next word
      001463 20 E2            [ 2] 3566         JRA     TNAM2
      001465 CD 02 1C         [ 4] 3567 TNAM3:  CALL     SWAPP
      001468 CC 02 02         [ 2] 3568         JP     DROP
      00146B CD 03 87         [ 4] 3569 TNAM4:  CALL     DDROP
      00146E CC 06 BA         [ 2] 3570         JP     ZERO
                                   3571 
                                   3572 ;       .ID     ( na -- )
                                   3573 ;        Display  name at address.
      001471 14 3E                 3574         .word      LINK
                           001473  3575 LINK = . 
      001473 03                    3576         .byte      3
      001474 2E 49 44              3577         .ascii     ".ID"
      001477                       3578 DOTID:
      001477 CD 03 56         [ 4] 3579         CALL     QDUP    ;if zero no name
      00147A CD 01 10         [ 4] 3580         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      00147D 14 8D                 3581         .word      DOTI1
      00147F CD 07 90         [ 4] 3582         CALL     COUNT
      001482 CD 00 DD         [ 4] 3583         CALL     DOLIT
      001485 00 1F                 3584         .word      0x1F
      001487 CD 02 58         [ 4] 3585         CALL     ANDD    ;mask lexicon bits
      00148A CC 13 79         [ 2] 3586         JP     UTYPE
      00148D CD 0B 5F         [ 4] 3587 DOTI1:  CALL     DOTQP
      001490 09                    3588         .byte      9
      001491 20 6E 6F 4E 61 6D 65  3589         .ascii     " noName"
      001498 81               [ 4] 3590         RET
                                   3591 
                           000000  3592 WANT_SEE=0 
                           000000  3593 .if WANT_SEE 
                                   3594 ;       SEE     ( -- ; <string> )
                                   3595 ;       A simple decompiler.
                                   3596 ;       Updated for byte machines.
                                   3597         .word      LINK
                                   3598 LINK = . 
                                   3599         .byte      3
                                   3600         .ascii     "SEE"
                                   3601 SEE:
                                   3602         CALL     TICK    ;starting address
                                   3603         CALL     CR
                                   3604         CALL     ONEM
                                   3605 SEE1:   CALL     ONEP
                                   3606         CALL     DUPP
                                   3607         CALL     AT
                                   3608         CALL     DUPP    ;?does it contain a zero
                                   3609         CALL     QBRAN
                                   3610         .word    SEE2
                                   3611         CALL     TNAME   ;?is it a name
                                   3612 SEE2:   CALL     QDUP    ;name address or zero
                                   3613         CALL     QBRAN
                                   3614         .word    SEE3
                                   3615         CALL     SPACE
                                   3616         CALL     DOTID   ;display name
                                   3617         CALL     ONEP
                                   3618         JRA      SEE4
                                   3619 SEE3:   CALL     DUPP
                                   3620         CALL     CAT
                                   3621         CALL     UDOT    ;display number
                                   3622 SEE4:   CALL     NUFQ    ;user control
                                   3623         CALL     QBRAN
                                   3624         .word    SEE1
                                   3625         JP     DROP
                                   3626 .endif ; WANT_SEE 
                                   3627 
                                   3628 ;       WORDS   ( -- )
                                   3629 ;       Display names in vocabulary.
      001499 14 73                 3630         .word      LINK
                           00149B  3631 LINK = . 
      00149B 05                    3632         .byte      5
      00149C 57 4F 52 44 53        3633         .ascii     "WORDS"
      0014A1                       3634 WORDS:
      0014A1 CD 0B 20         [ 4] 3635         CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0014A4 CD 03 28         [ 4] 3636         CALL     CNTXT   ;only in context
      0014A7 CD 01 65         [ 4] 3637 WORS1:  CALL     AT
      0014AA CD 03 56         [ 4] 3638         CALL     QDUP    ;?at end of list
      0014AD CD 01 10         [ 4] 3639         CALL     QBRAN
      0014B0 14 C6                 3640         .word      WORS2
      0014B2 CD 02 0C         [ 4] 3641         CALL     DUPP
      0014B5 CD 0A D8         [ 4] 3642         CALL     SPACE
      0014B8 CD 14 77         [ 4] 3643         CALL     DOTID   ;display a name
      0014BB CD 06 6A         [ 4] 3644         CALL     CELLM
      0014BE CD 01 27         [ 4] 3645         CALL     BRAN
      0014C1 14 A7                 3646         .word      WORS1
      0014C3 CD 02 02         [ 4] 3647         CALL     DROP
      0014C6 81               [ 4] 3648 WORS2:  RET
                                   3649 
                                   3650         
                                   3651 ;; Hardware reset
                                   3652 
                                   3653 ;       hi      ( -- )
                                   3654 ;       Display sign-on message.
      0014C7 14 9B                 3655         .word      LINK
                           0014C9  3656 LINK = . 
      0014C9 02                    3657         .byte      2
      0014CA 68 69                 3658         .ascii     "hi"
      0014CC                       3659 HI:
      0014CC CD 0B 20         [ 4] 3660         CALL     CR
      0014CF CD 0B 5F         [ 4] 3661         CALL     DOTQP   ;initialize I/O
      0014D2 0F                    3662         .byte      15
      0014D3 73 74 6D 38 65 46 6F  3663         .ascii     "stm8eForth v"
             72 74 68 20 76
      0014DF 32                    3664 	.byte      VER+'0'
      0014E0 2E                    3665         .byte      '.' 
      0014E1 31                    3666 	.byte      EXT+'0' ;version
      0014E2 CC 0B 20         [ 2] 3667         JP     CR
                                   3668 
                           000000  3669 WANT_DEBUG=0
                           000000  3670 .if WANT_DEBUG 
                                   3671 ;       DEBUG      ( -- )
                                   3672 ;       Display sign-on message.
                                   3673 ;        .word      LINK
                                   3674 LINK = . 
                                   3675         .byte      5
                                   3676         .ascii     "DEBUG"
                                   3677 DEBUG:
                                   3678 	CALL DOLIT
                                   3679 	.word 0x65
                                   3680 	CALL EMIT
                                   3681 	CALL DOLIT
                                   3682 	.word 0
                                   3683  	CALL ZLESS 
                                   3684 	CALL DOLIT
                                   3685 	.word 0xFFFE
                                   3686 	CALL ZLESS 
                                   3687 	CALL UPLUS 
                                   3688  	CALL DROP 
                                   3689 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



                                   3690 	.word 3
                                   3691 	CALL UPLUS 
                                   3692 	CALL UPLUS 
                                   3693  	CALL DROP
                                   3694 	CALL DOLIT
                                   3695 	.word 0x43
                                   3696 	CALL UPLUS 
                                   3697  	CALL DROP
                                   3698 	CALL EMIT
                                   3699 	CALL DOLIT
                                   3700 	.word 0x4F
                                   3701 	CALL DOLIT
                                   3702 	.word 0x6F
                                   3703  	CALL XORR
                                   3704 	CALL DOLIT
                                   3705 	.word 0xF0
                                   3706  	CALL ANDD
                                   3707 	CALL DOLIT
                                   3708 	.word 0x4F
                                   3709  	CALL ORR
                                   3710 	CALL EMIT
                                   3711 	CALL DOLIT
                                   3712 	.word 8
                                   3713 	CALL DOLIT
                                   3714 	.word 6
                                   3715  	CALL SWAPP
                                   3716 	CALL OVER
                                   3717 	CALL XORR
                                   3718 	CALL DOLIT
                                   3719 	.word 3
                                   3720 	CALL ANDD 
                                   3721 	CALL ANDD
                                   3722 	CALL DOLIT
                                   3723 	.word 0x70
                                   3724 	CALL UPLUS 
                                   3725 	CALL DROP
                                   3726 	CALL EMIT
                                   3727 	CALL DOLIT
                                   3728 	.word 0
                                   3729 	CALL QBRAN
                                   3730 	.word DEBUG1
                                   3731 	CALL DOLIT
                                   3732 	.word 0x3F
                                   3733 DEBUG1:
                                   3734 	CALL DOLIT
                                   3735 	.word 0xFFFF
                                   3736 	CALL QBRAN
                                   3737 	.word DEBUG2
                                   3738 	CALL DOLIT
                                   3739 	.word 0x74
                                   3740 	CALL BRAN
                                   3741 	.word DEBUG3
                                   3742 DEBUG2:
                                   3743 	CALL DOLIT
                                   3744 	.word 0x21
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3745 DEBUG3:
                                   3746 	CALL EMIT
                                   3747 	CALL DOLIT
                                   3748 	.word 0x68
                                   3749 	CALL DOLIT
                                   3750 	.word 0x80
                                   3751 	CALL STORE
                                   3752 	CALL DOLIT
                                   3753 	.word 0x80
                                   3754 	CALL AT
                                   3755 	CALL EMIT
                                   3756 	CALL DOLIT
                                   3757 	.word 0x4D
                                   3758 	CALL TOR
                                   3759 	CALL RAT
                                   3760 	CALL RFROM
                                   3761 	CALL ANDD
                                   3762 	CALL EMIT
                                   3763 	CALL DOLIT
                                   3764 	.word 0x61
                                   3765 	CALL DOLIT
                                   3766 	.word 0xA
                                   3767 	CALL TOR
                                   3768 DEBUG4:
                                   3769 	CALL DOLIT
                                   3770 	.word 1
                                   3771 	CALL UPLUS 
                                   3772 	CALL DROP
                                   3773 	CALL DONXT
                                   3774 	.word DEBUG4
                                   3775 	CALL EMIT
                                   3776 	CALL DOLIT
                                   3777 	.word 0x656D
                                   3778 	CALL DOLIT
                                   3779 	.word 0x100
                                   3780 	CALL UMSTA
                                   3781 	CALL SWAPP
                                   3782 	CALL DOLIT
                                   3783 	.word 0x100
                                   3784 	CALL UMSTA
                                   3785 	CALL SWAPP 
                                   3786 	CALL DROP
                                   3787 	CALL EMIT
                                   3788 	CALL EMIT
                                   3789 	CALL DOLIT
                                   3790 	.word 0x2043
                                   3791 	CALL DOLIT
                                   3792 	.word 0
                                   3793 	CALL DOLIT
                                   3794 	.word 0x100
                                   3795 	CALL UMMOD
                                   3796 	CALL EMIT
                                   3797 	CALL EMIT
                                   3798 	;JP ORIG
                                   3799 	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3800 .endif ; WANT_DEBUG 
                                   3801 
                                   3802 
                                   3803 ;       'BOOT   ( -- a )
                                   3804 ;       The application startup vector.
      0014E5 14 C9                 3805         .word      LINK
                           0014E7  3806 LINK = . 
      0014E7 05                    3807         .byte      5
      0014E8 27 42 4F 4F 54        3808         .ascii     "'BOOT"
      0014ED                       3809 TBOOT:
      0014ED CD 02 B9         [ 4] 3810         CALL     DOVAR
      0014F0 14 CC                 3811         .word      HI       ;application to boot
                                   3812 
                                   3813 ;       COLD    ( -- )
                                   3814 ;       The hilevel cold start s=ence.
      0014F2 14 E7                 3815         .word      LINK
                           0014F4  3816 LINK = . 
      0014F4 04                    3817         .byte      4
      0014F5 43 4F 4C 44           3818         .ascii     "COLD"
      0014F9                       3819 COLD:
                           000000  3820 .if WANT_DEBUG
                                   3821         CALL DEBUG
                                   3822 .endif 
      0014F9 CD 00 DD         [ 4] 3823 COLD1:  CALL     DOLIT
      0014FC 00 20                 3824         .word      UZERO
      0014FE CD 00 DD         [ 4] 3825 	CALL     DOLIT
      001501 00 06                 3826         .word      UPP
      001503 CD 00 DD         [ 4] 3827         CALL     DOLIT
      001506 00 14                 3828 	.word      ULAST-UZERO
      001508 CD 07 F4         [ 4] 3829         CALL     CMOVE   ;initialize user area
      00150B CD 10 23         [ 4] 3830         CALL     PRESE   ;initialize data stack and TIB
      00150E CD 14 ED         [ 4] 3831         CALL     TBOOT
      001511 CD 07 DD         [ 4] 3832         CALL     ATEXE   ;application boot
      001514 CD 12 D3         [ 4] 3833         CALL     OVERT
      001517 CC 10 40         [ 2] 3834         JP     QUIT    ;start interpretation
                                   3835 
                                   3836 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3837         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 ;pointer to far address 
                           000002    26     farptr=2
                           000003    27     ptr16=3
                           000004    28     ptr8=4
                                     29 
                                     30 ;--------------------------------
                                     31 ; initialize farptr 
                                     32 ; FP!  ( ud -- )
                                     33 ;---------------------------------
      00151A 14 F4                   34     .word LINK 
                           00151C    35     LINK=.
      00151C 03                      36     .byte 3 
      00151D 46 50 21                37     .ascii "FP!"
      001520                         38 fptr_store:
      001520 90 93            [ 1]   39     ldw y,x
      001522 90 FE            [ 2]   40     ldw y,(y)
      001524 90 9F            [ 1]   41     ld a,yl 
      001526 B7 02            [ 1]   42     ld farptr,a 
      001528 1C 00 02         [ 2]   43     addw x,#CELLL 
      00152B 90 93            [ 1]   44     ldw y,x 
      00152D 90 FE            [ 2]   45     ldw y,(y)
      00152F 90 BF 03         [ 2]   46     ldw ptr16,y
      001532 1C 00 02         [ 2]   47     addw x,#CELLL 
      001535 81               [ 4]   48     ret 
                                     49 
                                     50 ;-----------------------------------
                                     51 ; return EEPROM base address 
                                     52 ; as a double 
                                     53 ;  EEPROM  ( -- ud )
                                     54 ;-----------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001536 15 1C                   55     .word LINK 
                           001538    56 LINK=.
      001538 06                      57     .byte 6 
      001539 45 45 50 52 4F 4D       58     .ascii "EEPROM"
      00153F                         59 eeprom: 
      00153F 90 AE 40 00      [ 2]   60     ldw y,#EEPROM_BASE
      001543 1D 00 04         [ 2]   61     subw x,#2*CELLL 
      001546 EF 02            [ 2]   62     ldw (2,x),y 
      001548 90 5F            [ 1]   63     clrw y 
      00154A FF               [ 2]   64     ldw (x),y 
      00154B 81               [ 4]   65     ret
                                     66 
                                     67 ;----------------------------------
                                     68 ; fetch integer at address over 65535
                                     69 ;  F@   ( ud -- n )
                                     70 ;----------------------------------
      00154C 15 38                   71     .word LINK 
                           00154E    72 LINK=.
      00154E 02                      73     .byte 2
      00154F 46 40                   74     .ascii "F@"
      001551                         75 farat:
      001551 CD 15 20         [ 4]   76     call fptr_store
      001554 92 BC 00 02      [ 5]   77     ldf a,[farptr]
      001558 1D 00 02         [ 2]   78     subw x,#CELLL 
      00155B F7               [ 1]   79     ld (x),a 
      00155C 90 AE 00 01      [ 2]   80     ldw y,#1
      001560 91 AF 00 02      [ 1]   81     ldf a,([farptr],y)
      001564 E7 01            [ 1]   82     ld (1,x),a
      001566 81               [ 4]   83     ret 
                                     84 
                                     85 ;-------------------------------------
                                     86 ; fetch C at address over 65535 
                                     87 ; FC@ ( ud -- c)
                                     88 ;-------------------------------------
      001567 15 4E                   89     .word LINK
                           001569    90     LINK=.
      001569 03                      91     .byte 3 
      00156A 46 43 40                92     .ascii "FC@" 
      00156D                         93 farcat:
      00156D CD 15 20         [ 4]   94     call fptr_store 
      001570 92 BC 00 02      [ 5]   95     ldf a,[farptr]
      001574 1D 00 02         [ 2]   96     subw x,#CELLL 
      001577 E7 01            [ 1]   97     ld (1,x),a 
      001579 7F               [ 1]   98     clr (x)
      00157A 81               [ 4]   99     ret 
                                    100     
                                    101 ;----------------------------------
                                    102 ; unlock EEPROM/OPT for writing/erasing
                                    103 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    104 ;  UNLKEE   ( -- )
                                    105 ;----------------------------------
      00157B 15 69                  106     .word LINK 
                           00157D   107 LINK=.
      00157D 06                     108     .byte 6 
      00157E 55 4E 4C 4B 45 45      109     .ascii "UNLKEE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      001584                        110 unlock_eeprom:
      001584 35 00 50 5B      [ 1]  111 	mov FLASH_CR2,#0 
      001588 35 FF 50 5C      [ 1]  112 	mov FLASH_NCR2,#0xFF 
      00158C 35 AE 50 64      [ 1]  113 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001590 35 56 50 64      [ 1]  114     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001594 72 07 50 5F FB   [ 2]  115 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001599 81               [ 4]  116 	ret
                                    117 
                                    118 ;----------------------------------
                                    119 ; unlock FLASH for writing/erasing
                                    120 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    121 ; UNLKFL  ( -- )
                                    122 ;----------------------------------
      00159A 15 7D                  123     .word LINK 
                           00159C   124 LINK=. 
      00159C 06                     125     .byte 6 
      00159D 55 4E 4C 4B 46 4C      126     .ascii "UNLKFL"    
      0015A3                        127 unlock_flash:
      0015A3 35 00 50 5B      [ 1]  128 	mov FLASH_CR2,#0 
      0015A7 35 FF 50 5C      [ 1]  129 	mov FLASH_NCR2,#0xFF 
      0015AB 35 56 50 62      [ 1]  130 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0015AF 35 AE 50 62      [ 1]  131 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0015B3 72 03 50 5F FB   [ 2]  132 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0015B8 81               [ 4]  133 	ret
                                    134 
                                    135 ;-----------------------------
                                    136 ; unlock FLASH or EEPROM 
                                    137 ; according to farptr address 
                                    138 ;  UNLOCK ( -- )
                                    139 ;-----------------------------
      0015B9 15 9C                  140 	.word LINK 
                           0015BB   141 	LINK=.
      0015BB 06                     142 	.byte 6
      0015BC 55 4E 4C 4F 43 4B      143 	.ascii "UNLOCK"
      0015C2                        144 unlock:
                                    145 ; put addr[15:0] in Y, for bounds check.
      0015C2 90 BE 03         [ 2]  146 	ldw y,ptr16   ; Y=addr15:0
                                    147 ; check addr[23:16], if <> 0 then it is extened flash memory
      0015C5 3D 02            [ 1]  148 	tnz farptr 
      0015C7 26 16            [ 1]  149 	jrne 4$
      0015C9 90 A3 17 1C      [ 2]  150     cpw y,#user_space
      0015CD 24 10            [ 1]  151     jruge 4$
      0015CF 90 A3 40 00      [ 2]  152 	cpw y,#EEPROM_BASE  
      0015D3 25 0D            [ 1]  153     jrult 9$
      0015D5 90 A3 48 7F      [ 2]  154 	cpw y,#OPTION_END 
      0015D9 22 07            [ 1]  155 	jrugt 9$
      0015DB CD 15 84         [ 4]  156 	call unlock_eeprom
      0015DE 81               [ 4]  157 	ret 
      0015DF CD 15 A3         [ 4]  158 4$: call unlock_flash
      0015E2 81               [ 4]  159 9$: ret 
                                    160 
                                    161 ;-------------------------
                                    162 ; lock write access to 
                                    163 ; FLASH and EEPROM 
                                    164 ; LOCK ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



                                    165 ;-------------------------
      0015E3 15 BB                  166 	.word LINK 
                           0015E5   167 	LINK=.
      0015E5 04                     168 	.byte 4 
      0015E6 4C 4F 43 4B            169 	.ascii "LOCK" 
      0015EA                        170 lock: 
      0015EA 72 13 50 5F      [ 1]  171 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      0015EE 72 17 50 5F      [ 1]  172 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0015F2 81               [ 4]  173 	ret 
                                    174 
                                    175 ;-------------------------
                                    176 ; increment farptr 
                                    177 ; INC-FPTR ( -- )
                                    178 ;-------------------------
      0015F3 15 E5                  179 	.word LINK 
                           0015F5   180 	LINK=. 
      0015F5 08                     181 	.byte 8 
      0015F6 49 4E 43 2D 46 50 54   182 	.ascii "INC-FPTR" 
             52
      0015FE                        183 inc_fptr:
      0015FE 3C 04            [ 1]  184 	inc ptr8 
      001600 26 08            [ 1]  185 	jrne 1$
      001602 90 BE 02         [ 2]  186 	ldw y,farptr 
      001605 90 5C            [ 2]  187 	incw y 
      001607 90 BF 02         [ 2]  188 	ldw farptr,y 
      00160A 81               [ 4]  189 1$: ret 
                                    190 
                                    191 
                                    192 ;----------------------------
                                    193 ; write a byte at address pointed 
                                    194 ; by farptr and increment farptr.
                                    195 ; Expect pointer already initialized 
                                    196 ; and memory unlocked 
                                    197 ; WR-BYTE ( c -- )
                                    198 ;----------------------------
                                    199 
      00160B 15 F5                  200 	.word LINK 
                           00160D   201 	LINK=. 
      00160D 07                     202 	.byte 7 
      00160E 57 52 2D 42 59 54 45   203 	.ascii "WR-BYTE" 
                                    204 
      001615                        205 write_byte:
      001615 90 93            [ 1]  206 	ldw y,x 
      001617 90 FE            [ 2]  207 	ldw y,(y)
      001619 1C 00 02         [ 2]  208 	addw x,#CELLL 
      00161C 90 9F            [ 1]  209 	ld a,yl
      00161E 92 BD 00 02      [ 4]  210 	ldf [farptr],a
      001622 72 05 50 5F FB   [ 2]  211 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001627 20 D5            [ 2]  212 	jra inc_fptr 
                                    213 
                                    214 
                                    215 
                                    216 ;---------------------------------------
                                    217 ; write a byte to FLASH or EEPROM/OPTION  
                                    218 ; EEC!  (c ud -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



                                    219 ;---------------------------------------
      001629 16 0D                  220     .word LINK 
                           00162B   221 	LINK=.
      00162B 04                     222     .byte 4 
      00162C 45 45 43 21            223     .ascii "EEC!"
                                    224 	; local variables 
                           000001   225 	BTW = 1   ; byte to write offset on stack
                           000002   226     OPT = 2 
                           000002   227 	VSIZE = 2
      001630                        228 ee_cstore:
      001630 52 02            [ 2]  229 	sub sp,#VSIZE
      001632 CD 15 20         [ 4]  230     call fptr_store
      001635 E6 01            [ 1]  231 	ld a,(1,x)
      001637 43               [ 1]  232 	cpl a 
      001638 6B 01            [ 1]  233 	ld (BTW,sp),a ; byte to write 
      00163A 0F 02            [ 1]  234 	clr (OPT,sp)  ; OPTION flag
      00163C CD 15 C2         [ 4]  235 	call unlock 
                                    236 	; check if option
      00163F 3D 02            [ 1]  237 	tnz farptr 
      001641 26 19            [ 1]  238 	jrne 2$
      001643 90 BE 03         [ 2]  239 	ldw y,ptr16 
      001646 90 A3 48 00      [ 2]  240 	cpw y,#OPTION_BASE
      00164A 2B 10            [ 1]  241 	jrmi 2$
      00164C 90 A3 48 80      [ 2]  242 	cpw y,#OPTION_END+1
      001650 2A 0A            [ 1]  243 	jrpl 2$
      001652 03 02            [ 1]  244 	cpl (OPT,sp)
                                    245 	; OPTION WRITE require this unlock 
      001654 72 1E 50 5B      [ 1]  246     bset FLASH_CR2,#FLASH_CR2_OPT
      001658 72 1F 50 5C      [ 1]  247     bres FLASH_NCR2,#FLASH_CR2_OPT 
      00165C                        248 2$: 
      00165C CD 16 15         [ 4]  249 	call write_byte 	
      00165F 0D 02            [ 1]  250 	tnz (OPT,sp)
      001661 27 0D            [ 1]  251 	jreq 3$ 
      001663 7B 01            [ 1]  252     ld a,(BTW,sp)
      001665 90 5F            [ 1]  253     clrw y
      001667 90 97            [ 1]  254 	ld yl,a 
      001669 1D 00 02         [ 2]  255 	subw x,#CELLL 
      00166C FF               [ 2]  256 	ldw (x),y 
      00166D CD 16 15         [ 4]  257 	call write_byte
      001670                        258 3$: 
      001670 CD 15 EA         [ 4]  259 	call lock 
      001673 5B 02            [ 2]  260 	addw sp,#VSIZE 
      001675 81               [ 4]  261     ret
                                    262 
                                    263 ;------------------------------
                                    264 ; write integer in FLASH|EEPROM
                                    265 ; EE! ( n ud -- )
                                    266 ;------------------------------
      001676 16 2B                  267 	.word LINK 
                           001678   268 	LINK=.
      001678 03                     269 	.byte 3 
      001679 45 45 21               270 	.ascii "EE!"
      00167C                        271 ee_store:
      00167C CD 15 20         [ 4]  272 	call fptr_store 
      00167F CD 15 C2         [ 4]  273 	call unlock 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      001682 90 93            [ 1]  274 	ldw y,x 
      001684 90 FE            [ 2]  275 	ldw y,(y)
      001686 90 89            [ 2]  276 	pushw y 
      001688 90 5E            [ 1]  277 	swapw y 
      00168A FF               [ 2]  278 	ldw (x),y 
      00168B CD 16 15         [ 4]  279 	call write_byte 
      00168E 90 85            [ 2]  280 	popw y 
      001690 1D 00 02         [ 2]  281 	subw x,#CELLL
      001693 FF               [ 2]  282 	ldw (x),y 
      001694 CD 16 15         [ 4]  283 	call write_byte
      001697 72 13 50 5F      [ 1]  284 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00169B 81               [ 4]  285 	ret 
                                    286 
                                    287 ;----------------------------
                                    288 ; Erase flash memory row 
                                    289 ; stm8s208 as 128 bytes rows
                                    290 ; ROW-ERASE ( ud -- )
                                    291 ;----------------------------
      00169C 16 78                  292 	.word LINK 
                           00169E   293 	LINK=. 
      00169E 09                     294 	.byte 9 
      00169F 52 4F 57 2D 45 52 41   295 	.ascii "ROW-ERASE" 
             53 45
      0016A8                        296 row_erase:
      0016A8 CD 15 20         [ 4]  297 	call fptr_store
                                    298 ;code must be execute from RAM 
                                    299 ;copy routine to PAD 
      0016AB 1D 00 02         [ 2]  300 	subw x,#CELLL 
      0016AE 90 AE 16 F5      [ 2]  301 	ldw y,#row_erase_proc
      0016B2 FF               [ 2]  302 	ldw (x),y 
      0016B3 CD 07 B8         [ 4]  303 	call PAD 
      0016B6 90 AE 17 1C      [ 2]  304 	ldw y,#row_erase_proc_end 
      0016BA 72 A2 16 F5      [ 2]  305 	subw y,#row_erase_proc
      0016BE 1D 00 02         [ 2]  306 	subw x,#CELLL 
      0016C1 FF               [ 2]  307 	ldw (x),y 
      0016C2 CD 07 F4         [ 4]  308 	call CMOVE 
      0016C5                        309 block_erase:
      0016C5 90 BE 03         [ 2]  310 	ldw y,farptr+1
      0016C8 90 A3 17 1C      [ 2]  311 	cpw y,#user_space 
      0016CC 2A 13            [ 1]  312 	jrpl erase_flash 
                                    313 ; erase eeprom block
      0016CE 90 A3 40 00      [ 2]  314 	cpw y,#EEPROM_BASE 
      0016D2 24 01            [ 1]  315 	jruge 1$
      0016D4 81               [ 4]  316 	ret ; bad address 
      0016D5 90 A3 47 FF      [ 2]  317 1$: cpw y,#EEPROM_END 
      0016D9 23 01            [ 2]  318 	jrule 2$ 
      0016DB 81               [ 4]  319 	ret ; bad address 
      0016DC                        320 2$:	
      0016DC CD 15 84         [ 4]  321 	call unlock_eeprom 
      0016DF 20 03            [ 2]  322 	jra proceed_erase
                                    323 ; erase flash block:
      0016E1                        324 erase_flash:
      0016E1 CD 15 A3         [ 4]  325 	call unlock_flash 
      0016E4                        326 proceed_erase:
      0016E4 CD 07 B8         [ 4]  327 	call PAD 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      0016E7 90 93            [ 1]  328 	ldw y,x
      0016E9 90 FE            [ 2]  329 	ldw y,(y)
      0016EB 1C 00 02         [ 2]  330 	addw x,#CELLL  
      0016EE 90 FD            [ 4]  331 	call (y) 
      0016F0 72 17 50 5F      [ 1]  332 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      0016F4 81               [ 4]  333 	ret 
                                    334 
                                    335 ; this routine is to be copied to PAD 
      0016F5                        336 row_erase_proc:
      0016F5 35 20 50 5B      [ 1]  337 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      0016F9 35 DF 50 5C      [ 1]  338 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      0016FD 4F               [ 1]  339 	clr a 
      0016FE 90 5F            [ 1]  340 	clrw y 
      001700 91 A7 00 02      [ 1]  341 	ldf ([farptr],y),a
      001704 90 5C            [ 2]  342     incw y
      001706 91 A7 00 02      [ 1]  343 	ldf ([farptr],y),a
      00170A 90 5C            [ 2]  344     incw y
      00170C 91 A7 00 02      [ 1]  345 	ldf ([farptr],y),a
      001710 90 5C            [ 2]  346     incw y
      001712 91 A7 00 02      [ 1]  347 	ldf ([farptr],y),a
      001716 72 05 50 5F FB   [ 2]  348 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00171B 81               [ 4]  349 	ret
      00171C                        350 row_erase_proc_end:
                                    351 
                                    352 
                           000000   353 .if 0
                                    354 ;-----------------------------------
                                    355 ; block programming must be 
                                    356 ; executed from RAM 
                                    357 ; initial contidions: 
                                    358 ; 	memory unlocked
                                    359 ;   bit PRG set in 
                                    360 ; input:
                                    361 ;   x        128 bytes row to program 
                                    362 ;   farptr   row address 
                                    363 ; output:
                                    364 ;   none 
                                    365 ;----------------------------------
                                    366 	BCNT=1 
                                    367 program_row:
                                    368 	push #BLOCK_SIZE  
                                    369 ;enable block programming 
                                    370 	bset FLASH_CR2,#FLASH_CR2_PRG 
                                    371 	bres FLASH_NCR2,#FLASH_CR2_PRG
                                    372 	clrw y 
                                    373 1$:	ld a,(x)
                                    374 	ldf ([farptr],y),a
                                    375 	incw x 
                                    376 	incw y 
                                    377 	dec (BCNT,sp)
                                    378 	jrne 1$
                                    379 ; wait EOP bit 
                                    380 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
                                    381 	_drop 1 
                                    382 	ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                    383 program_row_end:
                                    384 
                                    385 ;-------------------------
                                    386 ; move program_row to RAM 
                                    387 ; at txtubound address 
                                    388 ;------------------------
                                    389 move_prg_to_ram:
                                    390 	ldw x,#program_row_end 
                                    391 	subw x,#program_row 
                                    392 	ldw acc16,x 
                                    393 	ldw x,#tib 
                                    394 	ldw y,#program_row 
                                    395 	call move 
                                    396 	ret 
                                    397 
                                    398 
                                    399 ;-----------------------------
                                    400 ; write a row in FLASH/EEPROM 
                                    401 ; input:
                                    402 ;    farptr   destination address 
                                    403 ;    x        source address 
                                    404 ;-----------------------------
                                    405 write_row:
                                    406 	pushw x 
                                    407 	tnz farptr 
                                    408 	jrne to_flash 
                                    409 	ldw x,#FLASH_BASE 
                                    410 	cpw x,farptr+1 
                                    411 	jruge to_flash 
                                    412 to_eeprom:
                                    413 	ldw x,#EEPROM_BASE 
                                    414 	cpw x,farptr+1 
                                    415 	jruge 1$
                                    416 	ret ; bad address 
                                    417 1$: ldw x,#EEPROM_END 
                                    418 	jrule 2$ 
                                    419 	ret ; bad address 
                                    420 2$:	call unlock_eeprom
                                    421 	jra do_programming
                                    422 to_flash:
                                    423 	call unlock_flash 
                                    424 do_programming:
                                    425 	popw x 
                                    426 	call tib
                                    427 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL 
                                    428 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL  
                                    429 	ret 
                                    430 
                                    431 
                                    432 ;--------------------------------------------
                                    433 ; write a data block to eeprom or flash 
                                    434 ; input:
                                    435 ;   Y        source address   
                                    436 ;   X        array index  destination  farptr[x]
                                    437 ;   BSIZE    block size bytes 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                    438 ;   farptr   write address , byte* 
                                    439 ; output:
                                    440 ;	X 		after last byte written 
                                    441 ;   Y 		after last byte read 
                                    442 ;  farptr   point after block
                                    443 ;---------------------------------------------
                                    444 	_argofs 2 
                                    445 	_arg BSIZE 1  ; block size
                                    446 	; local var 
                                    447 	XSAVE=1 
                                    448 	VSIZE=2 
                                    449 write_block:
                                    450 	_vars VSIZE
                                    451 	ldw (XSAVE,sp),x 
                                    452 	ldw x,(BSIZE,sp) 
                                    453 	jreq 9$
                                    454 1$:	ldw x,(XSAVE,sp)
                                    455 	ld a,(y)
                                    456 	call write_byte 
                                    457 	incw x 
                                    458 	incw y 
                                    459 	ldw (XSAVE,sp),x
                                    460 	ldw x,(BSIZE,sp)
                                    461 	decw x
                                    462 	ldw (BSIZE,sp),x 
                                    463 	jrne 1$
                                    464 9$:
                                    465 	ldw x,(XSAVE,sp)
                                    466 	call incr_farptr
                                    467 	_drop VSIZE
                                    468 	ret 
                                    469 .endif 
                                    470 
      00171C                        471 user_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   3838         
                                   3839 ;===============================================================
                                   3840 
                           00169E  3841 LASTN =	LINK   ;last name defined
                                   3842 
                                   3843 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000428 R   |   6 ABOR1      000F43 R
  6 ABOR2      000F5A R   |   6 ABORQ      000F3B R   |   6 ABORT      000F2C R
  6 ABRTQ      0011FB R   |   6 ABSS       00041F R   |   6 ACCEP      000EC2 R
  6 ACCP1      000ECB R   |   6 ACCP2      000EF1 R   |   6 ACCP3      000EF4 R
  6 ACCP4      000EF6 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        0011E6 R
  6 AGAIN      001145 R   |   6 AHEAD      00119C R   |   6 ALLOT      00106B R
  6 ANDD       000258 R   |   6 AT         000165 R   |   6 ATEXE      0007DD R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000E6A R   |   6 BASE       0002C7 R   |     BASEE   =  00000A 
  6 BCOMP      0010AA R   |   6 BDIGS      0008C5 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      001129 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      000D02 R   |   6 BKSP       000E3A R   |     BKSPP   =  000008 
  6 BLANK      0006AD R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       000127 R   |     BTW     =  000001 
    CALLL   =  0000CD     |     CAN_DGR =  005426     |     CAN_FPSR=  005427 
    CAN_IER =  005425     |     CAN_MCR =  005420     |     CAN_MSR =  005421 
    CAN_P0  =  005428     |     CAN_P1  =  005429     |     CAN_P2  =  00542A 
    CAN_P3  =  00542B     |     CAN_P4  =  00542C     |     CAN_P5  =  00542D 
    CAN_P6  =  00542E     |     CAN_P7  =  00542F     |     CAN_P8  =  005430 
    CAN_P9  =  005431     |     CAN_PA  =  005432     |     CAN_PB  =  005433 
    CAN_PC  =  005434     |     CAN_PD  =  005435     |     CAN_PE  =  005436 
    CAN_PF  =  005437     |     CAN_RFR =  005424     |     CAN_TPR =  005423 
    CAN_TSR =  005422     |     CARRY   =  000020     |   6 CAT        000183 R
  6 CCOMMA     00108C R   |     CC_C    =  000000     |     CC_H    =  000004 
    CC_I0   =  000003     |     CC_I1   =  000005     |     CC_N    =  000002 
    CC_V    =  000007     |     CC_Z    =  000001     |     CELLL   =  000002 
  6 CELLM      00066A R   |   6 CELLP      00065B R   |   6 CELLS      000679 R
    CFG_GCR =  007F60     |     CFG_GCR_=  000001     |     CFG_GCR_=  000000 
  6 CHAR1      000AF2 R   |   6 CHAR2      000AF5 R   |     CLKOPT  =  004807 
    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      0007FC R
  6 CMOV2      000814 R   |   6 CMOVE      0007F4 R   |   6 CNTXT      000328 R
  6 COLD       0014F9 R   |   6 COLD1      0014F9 R   |   6 COLON      001315 R
  6 COMMA      001075 R   |   6 COMPI      0010BA R   |     COMPO   =  000040 
    CONVERT_=  000001     |   6 COUNT      000790 R   |   6 CPP        000336 R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000B20 R
  6 CREAT      00134D R   |     CRR     =  00000D     |   6 CSTOR      000172 R
    CTOP    =  000080     |   6 DAT        000770 R   |     DATSTK  =  0016F0 
  6 DDROP      000387 R   |   6 DDUP       000392 R   |     DEBUG_BA=  007F00 
    DEBUG_EN=  007FFF     |   6 DECIM      000975 R   |   6 DEPTH      0006FD R
    DEVID_BA=  0048CD     |     DEVID_EN=  0048D8     |     DEVID_LO=  0048D2 
    DEVID_LO=  0048D3     |     DEVID_LO=  0048D4     |     DEVID_LO=  0048D5 
    DEVID_LO=  0048D6     |     DEVID_LO=  0048D7     |     DEVID_LO=  0048D8 
    DEVID_WA=  0048D1     |     DEVID_XH=  0048CE     |     DEVID_XL=  0048CD 
    DEVID_YH=  0048D0     |     DEVID_YL=  0048CF     |   6 DGTQ1      0009BA R
  6 DIG        0008EE R   |   6 DIGIT      000889 R   |   6 DIGS       0008FF R
  6 DIGS1      0008FF R   |   6 DIGS2      00090C R   |   6 DIGTQ      000989 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        0003FF R
  6 DNEGA      0003E4 R   |   6 DOLIT      0000DD R   |   6 DONXT      0000F1 R
  6 DOSTR      000B36 R   |   6 DOT        000BBB R   |   6 DOT1       000BD1 R
  6 DOTI1      00148D R   |   6 DOTID      001477 R   |   6 DOTO1      000FCF R
  6 DOTOK      000FB5 R   |   6 DOTPR      000CE4 R   |   6 DOTQ       001217 R
  6 DOTQP      000B5F R   |   6 DOTR       000B6D R   |   6 DOTS       001416 R
  6 DOTS1      001421 R   |   6 DOTS2      00142D R   |   6 DOVAR      0002B9 R
  6 DROP       000202 R   |   6 DSTOR      00074A R   |   6 DUMP       0013CC R
  6 DUMP1      0013E3 R   |   6 DUMP3      001405 R   |   6 DUMPP      00139B R
  6 DUPP       00020C R   |   6 EDIGS      00092A R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 ELSEE      001179 R
  6 EMIT       0000C7 R   |   6 EQ1        000443 R   |   6 EQUAL      00042D R
  6 ERASE      000856 R   |     ERR     =  00001B     |   6 EVAL       000FF8 R
  6 EVAL1      000FF8 R   |   6 EVAL2      001014 R   |   6 EXE1       0007EB R
  6 EXECU      000137 R   |   6 EXIT       000147 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      0008B1 R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000823 R
  6 FILL1      000840 R   |   6 FILL2      000849 R   |   6 FIND       000D96 R
  6 FIND1      000DB4 R   |   6 FIND2      000DE2 R   |   6 FIND3      000DEE R
  6 FIND4      000E02 R   |   6 FIND5      000E0F R   |   6 FIND6      000DF3 R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FOR        001108 R   |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       0007A7 R   |   6 HEX        000960 R   |   6 HI         0014CC R
  6 HLD        000315 R   |   6 HOLD       0008D5 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        001153 R   |     IMEDD   =  000080     |   6 IMMED      00132A R
  6 INCH       0000BB R   |   6 INN        0002E5 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      000F97 R   |   6 INTER      000F6D R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      0003C1 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       001306 R   |   6 KEY        000AA0 R   |   6 KTAP       000E87 R
  6 KTAP1      000EAA R   |   6 KTAP2      000EAD R   |   6 LAST       000346 R
  6 LASTN   =  00169E R   |   6 LBRAC      000FA4 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       00046A R
    LF      =  00000A     |   6 LINK    =  00169E R   |   6 LITER      0010D9 R
  6 LT1        000480 R   |     MASKK   =  001F7F     |   6 MAX        00048A R
  6 MAX1       00049D R   |   6 MIN        0004A7 R   |   6 MIN1       0004BA R
  6 MMOD1      00055D R   |   6 MMOD2      000571 R   |   6 MMOD3      000588 R
  6 MMSM1      000504 R   |   6 MMSM2      000518 R   |   6 MMSM3      00051A R
  6 MMSM4      000522 R   |   6 MODD       0005A2 R   |   6 MONE       0006D3 R
    MS      =  000026     |   6 MSEC       00009A R   |   6 MSMOD      000540 R
  6 MSTA1      000633 R   |   6 MSTAR      000610 R   |     NAFR    =  004804 
  6 NAMEQ      000E2F R   |   6 NAMET      000D40 R   |     NCLKOPT =  004808 
  6 NEGAT      0003D2 R   |   6 NEX1       0000FE R   |   6 NEXT       001118 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       0002F5 R   |     NUBC    =  004802 
  6 NUFQ       000AB6 R   |   6 NUFQ1      000ACF R   |   6 NUMBQ      0009CD R
  6 NUMQ1      000A01 R   |   6 NUMQ2      000A32 R   |   6 NUMQ3      000A74 R
  6 NUMQ4      000A79 R   |   6 NUMQ5      000A88 R   |   6 NUMQ6      000A8B R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 ONE        0006C5 R   |   6 ONEM       000693 R   |   6 ONEP       000686 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000036 R   |   6 ORR        00026C R
  6 OUTPUT     0000CC R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000236 R
  6 OVERT      0012D3 R   |     PA      =  000000     |   6 PACKS      000868 R
  6 PAD        0007B8 R   |   6 PAREN      000CF3 R   |   6 PARS       000BEC R
  6 PARS1      000C17 R   |   6 PARS2      000C42 R   |   6 PARS3      000C45 R
  6 PARS4      000C4E R   |   6 PARS5      000C71 R   |   6 PARS6      000C86 R
  6 PARS7      000C95 R   |   6 PARS8      000CA4 R   |   6 PARSE      000CB5 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      0013AE R   |   6 PDUM2      0013BF R   |     PD_BASE =  00500F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]

Symbol Table

    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PICATOUT=  000001     |   6 PICK       000714 R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       0003A7 R   |   6 PNAM1      001288 R   |   6 PRESE      001023 R
    PROD1   =  00001A     |     PROD2   =  00001C     |     PROD3   =  00001E 
  6 PSTOR      000729 R   |   6 QBRAN      000110 R   |   6 QDUP       000356 R
  6 QDUP1      000360 R   |   6 QKEY       0000A9 R   |   6 QSTAC      000FDB R
  6 QUERY      000F07 R   |   6 QUEST      000BDE R   |   6 QUIT       001040 R
  6 QUIT1      001048 R   |   6 QUIT2      00104B R   |     RAMBASE =  000000 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        0001C9 R   |   6 RBRAC      0012F3 R   |   6 REPEA      0011CE R
  6 RFROM      0001B6 R   |     ROP     =  004800     |   6 ROT        000367 R
    RP0     =  000024     |   6 RPAT       000193 R   |     RPP     =  0017FF 
  6 RPSTO      0001A0 R   |     RST_SR  =  0050B3     |   6 SAME1      000D5E R
  6 SAME2      000D87 R   |   6 SAMEQ      000D56 R   |   6 SCOM1      0012BD R
  6 SCOM2      0012C0 R   |   6 SCOMP      00129F R   |   6 SEMIS      0012E3 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000914 R
  6 SIGN1      000924 R   |   6 SLASH      0005AC R   |   6 SLMOD      000590 R
  6 SNAME      001252 R   |     SP0     =  000022     |   6 SPACE      000AD8 R
  6 SPACS      000AE7 R   |   6 SPAT       0001EC R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  0016F0     |   6 SPSTO      0001F9 R
  6 SSMOD      00063C R   |     STACK   =  0017FF     |   6 STAR       000605 R
  6 STASL      00064D R   |   6 STORE      00014E R   |   6 STR        000942 R
  6 STRCQ      0010E8 R   |   6 STRQ       001209 R   |   6 STRQP      000B55 R
  6 SUBB       000405 R   |   6 SWAPP      00021C R   |     SWIM_CSR=  007F80 
  6 TAP        000E71 R   |   6 TBOOT      0014ED R   |   6 TCHA1      0006F4 R
  6 TCHAR      0006E4 R   |   6 TEMP       0002D6 R   |   6 TEVAL      000306 R
  6 THENN      001169 R   |   6 TIB        0007C9 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       001057 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      001447 R   |   6 TNAM3      001465 R   |   6 TNAM4      00146B R
  6 TNAME      001444 R   |   6 TOKEN      000D32 R   |   6 TOR        0001D5 R
    TRUEE   =  00FFFF     |   6 TWOSL      0006A0 R   |   6 TYPE1      000B07 R
  6 TYPE2      000B13 R   |   6 TYPES      000B02 R   |   6 Timer4Ha   000005 R
    UART1   =  000000     |     UART1_BA=  005230     |     UART1_BR=  005232 
    UART1_BR=  005233     |     UART1_CR=  005234     |     UART1_CR=  005235 
    UART1_CR=  005236     |     UART1_CR=  005237     |     UART1_CR=  005238 
    UART1_DR=  005231     |     UART1_GT=  005239     |     UART1_PO=  000000 
    UART1_PS=  00523A     |     UART1_RX=  000004     |     UART1_SR=  005230 
    UART1_TX=  000005     |     UART3   =  000001     |     UART3_BA=  005240 
    UART3_BR=  005242     |     UART3_BR=  005243     |     UART3_CR=  005244 
    UART3_CR=  005245     |     UART3_CR=  005246     |     UART3_CR=  005247 
    UART3_CR=  004249     |     UART3_DR=  005241     |     UART3_PO=  00000F 
    UART3_RX=  000006     |     UART3_SR=  005240     |     UART3_TX=  000005 
    UART_BRR=  000002     |     UART_BRR=  000003     |     UART_CR1=  000004 
    UART_CR1=  000004     |     UART_CR1=  000002     |     UART_CR1=  000000 
    UART_CR1=  000001     |     UART_CR1=  000007     |     UART_CR1=  000006 
    UART_CR1=  000005     |     UART_CR1=  000003     |     UART_CR2=  000005 
    UART_CR2=  000004     |     UART_CR2=  000002     |     UART_CR2=  000005 
    UART_CR2=  000001     |     UART_CR2=  000000     |     UART_CR2=  000006 
    UART_CR2=  000003     |     UART_CR2=  000007     |     UART_CR3=  000006 
    UART_CR3=  000003     |     UART_CR3=  000001     |     UART_CR3=  000002 
    UART_CR3=  000000     |     UART_CR3=  000006     |     UART_CR3=  000004 
    UART_CR3=  000005     |     UART_CR4=  000007     |     UART_CR4=  000000 
    UART_CR4=  000001     |     UART_CR4=  000002     |     UART_CR4=  000003 
    UART_CR4=  000004     |     UART_CR4=  000006     |     UART_CR4=  000005 
    UART_CR5=  000008     |     UART_CR5=  000003     |     UART_CR5=  000001 
    UART_CR5=  000002     |     UART_CR5=  000004     |     UART_CR5=  000005 
    UART_CR6=  000009     |     UART_CR6=  000004     |     UART_CR6=  000007 
    UART_CR6=  000001     |     UART_CR6=  000002     |     UART_CR6=  000000 
    UART_CR6=  000005     |     UART_DR =  000001     |     UART_GTR=  000009 
    UART_PSC=  00000A     |     UART_SR =  000000     |     UART_SR_=  000001 
    UART_SR_=  000004     |     UART_SR_=  000002     |     UART_SR_=  000003 
    UART_SR_=  000000     |     UART_SR_=  000005     |     UART_SR_=  000006 
    UART_SR_=  000007     |     UBC     =  004801     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000BA8 R   |   6 UDOTR      000B88 R   |   6 ULAST      000034 R
  6 ULES1      000462 R   |   6 ULESS      00044C R   |   6 UMMOD      0004E2 R
  6 UMSTA      0005BB R   |   6 UNIQ1      001249 R   |   6 UNIQU      00122A R
  6 UNTIL      001134 R   |   6 UPL1       0002AD R   |   6 UPLUS      000296 R
    UPP     =  000006     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |   6 UTYP1      00137E R   |   6 UTYP2      00138D R
  6 UTYPE      001379 R   |   6 UZERO      000020 R   |   6 VARIA      001368 R
    VER     =  000002     |     VSIZE   =  000002     |     WANT_DEB=  000000 
    WANT_SEE=  000000     |     WDGOPT  =  004805     |     WDGOPT_I=  000002 
    WDGOPT_L=  000003     |     WDGOPT_W=  000000     |     WDGOPT_W=  000001 
  6 WHILE      0011B3 R   |   6 WITHI      0004C7 R   |   6 WORDD      000D1E R
  6 WORDS      0014A1 R   |   6 WORS1      0014A7 R   |   6 WORS2      0014C6 R
    WWDG_CR =  0050D1     |     WWDG_WR =  0050D2     |   6 XORR       000281 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]

Symbol Table

    XTEMP   =  00001A     |     YTEMP   =  00001C     |   6 ZERO       0006BA R
  6 ZL1        00024E R   |   6 ZLESS      000245 R   |   6 block_er   0016C5 R
  6 clear_ra   000012 R   |   6 clock_in   000051 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_cstor   001630 R   |   6 ee_store   00167C R   |   6 eeprom     00153F R
  6 erase_fl   0016E1 R   |   6 farat      001551 R   |   6 farcat     00156D R
    farptr  =  000002     |   6 fptr_sto   001520 R   |   6 inc_fptr   0015FE R
  6 lock       0015EA R   |   6 main       00000F R   |   6 proceed_   0016E4 R
    ptr16   =  000003     |     ptr8    =  000004     |   6 row_eras   0016A8 R
  6 row_eras   0016F5 R   |   6 row_eras   00171C R   |   6 uart1_in   000063 R
  6 unlock     0015C2 R   |   6 unlock_e   001584 R   |   6 unlock_f   0015A3 R
  6 user_spa   00171C R   |   6 write_by   001615 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   171C   flags    0

