ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    97 DATSTK  =	0x1670	;data stack  empty
                           001680    98 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700    99 TIBBASE =       0X1700  ; tib addr.
                                    100 
                                    101 
                                    102 
                                    103 ;; Memory allocation
                                    104 
                           000006   105 UPP     =     RAMBASE+6
                           001670   106 SPP     =     RAMBASE+DATSTK
                           0017FF   107 RPP     =     RAMBASE+STACK
                           001680   108 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   109 TIBB    =     RAMBASE+TIBBASE
                           000080   110 CTOP    =     RAMBASE+0x80
                                    111 
                           000001   112 .if PICATOUT_MOD 
                                    113 ; user variables constants 
                           000006   114 UBASE = UPP       ; numeric base 
                           000008   115 UTMP = UBASE+2    ; temporary storage
                           00000A   116 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   117 UCTIB = UINN+2    ; tib count 
                           00000E   118 UTIB = UCTIB+2    ; tib address 
                           000010   119 UINTER = UTIB+2   ; interpreter vector 
                           000012   120 UHLD = UINTER+2   ; hold 
                           000014   121 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   122 UVP = UCNTXT+2    ; variable pointer 
                           000018   123 UCP = UVP+2      ; code pointer
                           00001A   124 ULAST = UCP+2    ; last dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           00001C   125 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                                    126 .endif ; PICATOUT_MOD
                                    127 
                                    128 ;******  System Variables  ******
                           00001E   129 XTEMP	=	UOFFSET+2;address called by CREATE
                           000020   130 YTEMP	=	XTEMP+2	;address called by CREATE
                           00001E   131 PROD1 = XTEMP	;space for UM*
                           000020   132 PROD2 = PROD1+2
                           000022   133 PROD3 = PROD2+2
                           000024   134 CARRY = PROD3+2
                           000026   135 SP0	= CARRY+2	;initial data stack pointer
                           000028   136 RP0	= SP0+2		;initial return stack pointer
                           00002A   137 MS    =   RP0+2         ; millisecond counter 
                           00002C   138 CNTDWN =  MS+2          ; count down timer 
                           00002E   139 FPTR = CNTDWN+2         ; 24 bits farptr 
                           00002F   140 PTR16 = FPTR+1          ; middle byte of farptr 
                           000030   141 PTR8 = FPTR+2           ; least byte of farptr 
                                    142 
                           000001   143 .if PICATOUT_MOD
                                    144 ; EEPROM persistant data  
                           004000   145 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   146 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   147 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   148 APP_VP = APP_CP+2  ; free data space pointer 
                                    149 .endif ;PICATOUT_MOD
                                    150 
                                    151 
                                    152 ;***********************************************
                                    153 ;; Version control
                                    154 
                           000002   155 VER     =     2         ;major release version
                           000001   156 EXT     =     1         ;minor extension
                                    157 
                                    158 ;; Constants
                                    159 
                           00FFFF   160 TRUEE   =     0xFFFF      ;true flag
                                    161 
                           000040   162 COMPO   =     0x40     ;lexicon compile only bit
                           000080   163 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   164 MASKK   =     0x1F7F  ;lexicon bit mask
                                    165 
                           000002   166 CELLL   =     2       ;size of a cell
                           00000A   167 BASEE   =     10      ;default radix
                           000008   168 BKSPP   =     8       ;back space
                           00000A   169 LF      =     10      ;line feed
                           00000D   170 CRR     =     13      ;carriage return
                           00001B   171 ERR     =     27      ;error escape
                           000027   172 TIC     =     39      ;tick
                           0000CD   173 CALLL   =     0xCD     ;CALL opcodes
                           000080   174 IRET_CODE =   0x80    ; IRET opcode 
                                    175 
                                    176         .macro _ledon
                                    177         bset PC_ODR,#LED2_BIT
                                    178         .endm
                                    179 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .macro _ledoff
                                    181         bres PC_ODR,#LED2_BIT
                                    182         .endm
                                    183 
                                    184 ;**********************************************************
                                    185         .area DATA (ABS)
      000000                        186         .org RAMBASE 
                                    187 ;**********************************************************
                                    188 
                                    189 ;**********************************************************
                                    190         .area SSEG (ABS) ; STACK
      001700                        191         .org 0x1700
      001700                        192         .ds 256 
                                    193 ; space for DATSTK,TIB and STACK         
                                    194 ;**********************************************************
                                    195 
                                    196 ;**********************************************************
                                    197         .area HOME ; vectors table
                                    198 ;**********************************************************
      000000 82 00 00 16            199 	int main	        ; reset
      000004 82 00 00 00            200 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            201 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            202 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            203 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            204 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            205 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            206 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            207 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            208 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            209 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            210 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            211 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            212 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            213 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            214 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            215 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            216 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            217 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            218 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            219 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            220 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            221 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            222 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            223 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            224 	int Timer4Handler	; irq23
      000068 82 00 00 00            225 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            226 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            227 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            228 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            229 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            230 	int NonHandledInterrupt	; irq29
                                    231 
                                    232 ;**********************************************************
                                    233         .area CODE
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 
                                    236 ; non handled interrupt reset MCU
      000000                        237 NonHandledInterrupt:
      000000 A6 80            [ 1]  238         ld a, #0x80
      000002 C7 50 D1         [ 1]  239         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    240 	;iret
                                    241 
                                    242 ; used for milliseconds counter 
                                    243 ; MS is 16 bits counter 
      000005                        244 Timer4Handler:
      000005 72 5F 53 42      [ 1]  245 	clr TIM4_SR 
      000009 BE 2A            [ 2]  246         ldw x,MS 
      00000B 5C               [ 2]  247         incw x 
      00000C BF 2A            [ 2]  248         ldw MS,x
      00000E BE 2C            [ 2]  249         ldw x,CNTDWN 
      000010 27 03            [ 1]  250         jreq 1$
      000012 5A               [ 2]  251         decw x 
      000013 BF 2C            [ 2]  252         ldw CNTDWN,x 
      000015                        253 1$:         
      000015 80               [11]  254         iret 
                                    255 
                                    256 
                                    257 ;; Main entry points and COLD start data
      000016                        258 main:
                                    259 ; clear all RAM
      000016 AE 00 00         [ 2]  260 	ldw X,#RAMBASE
      000019                        261 clear_ram0:
      000019 7F               [ 1]  262 	clr (X)
      00001A 5C               [ 2]  263 	incw X
      00001B A3 17 FF         [ 2]  264 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  265 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  266         ldw x,#RPP
      000023 94               [ 1]  267         ldw sp,x 
      000024 CC 00 3F         [ 2]  268 	jp ORIG
                                    269 
                                    270 ; COLD initialize these variables.
      000027                        271 UZERO:
      000027 00 0A                  272         .word      BASEE   ;BASE
      000029 00 00                  273         .word      0       ;tmp
      00002B 00 00                  274         .word      0       ;>IN
      00002D 00 00                  275         .word      0       ;#TIB
      00002F 17 00                  276         .word      TIBB    ;TIB
      000031 11 03                  277         .word      INTER   ;'EVAL
      000033 00 00                  278         .word      0       ;HLD
      000035 1E 3D                  279         .word      LASTN  ;CNTXT pointer
      000037 00 80                  280         .word      CTOP   ;CP in RAM
      000039 1E 80                  281         .word      app_space ; CP in FLASH 
      00003B 1E 3D                  282         .word      LASTN   ;LAST
      00003D 00 00                  283 UEND:  .word      0
                                    284 
      00003F                        285 ORIG:   
                                    286 ; initialize SP
      00003F AE 17 FF         [ 2]  287         LDW     X,#STACK  ;initialize return stack
      000042 94               [ 1]  288         LDW     SP,X
      000043 BF 28            [ 2]  289         LDW     RP0,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000045 AE 16 70         [ 2]  290         LDW     X,#DATSTK ;initialize data stack
      000048 BF 26            [ 2]  291         LDW     SP0,X
                                    292 ; initialize PC_5 as output to control LED2
                                    293 ; added by Picatout 
      00004A 72 1A 50 0D      [ 1]  294         bset PC_CR1,#LED2_BIT
      00004E 72 1A 50 0E      [ 1]  295         bset PC_CR2,#LED2_BIT
      000052 72 1A 50 0C      [ 1]  296         bset PC_DDR,#LED2_BIT
      000056                        297         _ledoff
      000056 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    298 ; initialize clock to HSI
                                    299 ; no divisor 16Mhz 
                                    300 ; Added by Picatout 
      00005A                        301 clock_init:
      00005A 72 5F 50 C6      [ 1]  302         clr CLK_CKDIVR
      00005E 72 12 50 C5      [ 1]  303 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000062 A6 E1            [ 1]  304 	ld a,#CLK_SWR_HSI
      000064 C7 50 C4         [ 1]  305 	ld CLK_SWR,a
      000067 C1 50 C3         [ 1]  306 1$:	cp a,CLK_CMSR
      00006A 26 FB            [ 1]  307 	jrne 1$
                                    308         
                                    309 ; initialize UART1, 115200 8N1
      00006C                        310 uart1_init:
      00006C 72 14 50 C7      [ 1]  311 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    312 	; configure tx pin
      000070 72 1A 50 02      [ 1]  313 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000074 72 1A 50 03      [ 1]  314 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000078 72 1A 50 04      [ 1]  315 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    316 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007C 35 0B 52 33      [ 1]  317 	mov UART1_BRR2,#0x0b ; must be loaded first
      000080 35 08 52 32      [ 1]  318 	mov UART1_BRR1,#0x8
      000084 35 0C 52 35      [ 1]  319 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    320 ; initialize timer4, used for millisecond interrupt  
      000088 35 07 53 45      [ 1]  321 	mov TIM4_PSCR,#7 ; prescale 128  
      00008C 35 7D 53 46      [ 1]  322 	mov TIM4_ARR,#125 ; set for 1msec.
      000090 35 05 53 40      [ 1]  323 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000094 72 10 53 41      [ 1]  324 	bset TIM4_IER,#TIM4_IER_UIE 
                                    325 ; set TIM4 interrupt priority to highest
      000098 A6 3F            [ 1]  326         ld a,#~(IPR_MASK<<6)
      00009A C4 7F 75         [ 1]  327         and a,ITC_SPR6
      00009D AA C0            [ 1]  328         or a,#(IPR3<<6)
      00009F C7 7F 75         [ 1]  329         ld ITC_SPR6,a 
      0000A2 9A               [ 1]  330         rim
      0000A3 CC 17 6B         [ 2]  331         jp  COLD   ;default=MN1
                                    332 
                                    333 
                                    334 ;; place MCU in sleep mode with
                                    335 ;; halt opcode 
                                    336 ;; BYE ( -- )
      0000A6 00 00                  337         .word 0
                           0000A8   338         LINK=.
      0000A8 03                     339         .byte 3 
      0000A9 42 59 45               340         .ascii "BYE"
      0000AC                        341 BYE: 
      0000AC 8E               [10]  342         halt 
      0000AD 81               [ 4]  343         ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                                    344 
                                    345 ; Enable interrupts 
                                    346 ; EI ( -- )
      0000AE 00 A8                  347         .word LINK 
                           0000B0   348         LINK=.
      0000B0 02                     349         .byte 2
      0000B1 45 49                  350         .ascii "EI"
      0000B3                        351 EI:
      0000B3 9A               [ 1]  352         rim 
      0000B4 81               [ 4]  353         ret 
                                    354 
                                    355 ; Disable interrupts
                                    356 ; DI ( -- )
      0000B5 00 B0                  357         .word LINK 
                           0000B7   358         LINK=.
      0000B7 02                     359         .byte 2 
      0000B8 44 49                  360         .ascii "DI"
      0000BA                        361 DI:
      0000BA 9B               [ 1]  362         sim 
      0000BB 81               [ 4]  363         ret 
                                    364 
                                    365 ;; Reset dictionary pointer before 
                                    366 ;; forgotten word. RAM SPACE and 
                                    367 ;; interrupt vector defineD after 
                                    368 ;; must be resetted also.
      0000BC 00 B7                  369         .word LINK 
                           0000BE   370         LINK=.
      0000BE 06                     371         .byte 6
      0000BF 46 4F 52 47 45 54      372         .ascii "FORGET" 
      0000C5                        373 FORGET: 
      0000C5 CD 0E C8         [ 4]  374         call TOKEN
      0000C8 CD 03 67         [ 4]  375         call DUPP 
      0000CB CD 02 6B         [ 4]  376         call QBRAN 
      0000CE 01 4D                  377         .word FORGET2
      0000D0 CD 0F C5         [ 4]  378         call NAMEQ ; ( a -- ca na | a F )
      0000D3 CD 04 EC         [ 4]  379         call QDUP 
      0000D6 CD 02 6B         [ 4]  380         call QBRAN 
      0000D9 01 4D                  381         .word FORGET2
                                    382 ; only forget users words 
      0000DB CD 03 67         [ 4]  383         call DUPP ; ( ca na na )
      0000DE CD 02 38         [ 4]  384         call DOLIT 
      0000E1 1E 80                  385         .word app_space 
      0000E3 CD 03 77         [ 4]  386         call SWAPP 
      0000E6 CD 05 9B         [ 4]  387         call SUBB 
      0000E9 CD 03 A0         [ 4]  388         call  ZLESS 
      0000EC CD 02 6B         [ 4]  389         call QBRAN 
      0000EF 01 3F                  390         .word CANT_FORGET 
                                    391 ; ( ca na -- )        
                                    392 ;reset ivec with address >= ca
      0000F1 CD 03 77         [ 4]  393         call SWAPP ; ( na ca -- ) 
      0000F4 CD 1B DB         [ 4]  394         call CHKIVEC ; ( na -- ) 
                                    395 ; start at LAST and link back to na 
                                    396 ; if variable found reset VP at that point.
      0000F7                        397 FORGET1:
      0000F7 CD 04 C1         [ 4]  398         call LAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000FA CD 02 C0         [ 4]  399         call AT 
      0000FD CD 03 67         [ 4]  400         call DUPP  ; ( -- na last last )
      000100 CD 01 63         [ 4]  401         call FREEVAR ; ( -- na last )
      000103 CD 03 67         [ 4]  402         call DUPP 
      000106 CD 02 38         [ 4]  403         call DOLIT 
      000109 00 02                  404         .word 2 
      00010B CD 05 9B         [ 4]  405         call SUBB ; ( na last -- na last lfa ) link address 
      00010E CD 02 C0         [ 4]  406         call AT 
      000111 CD 03 67         [ 4]  407         call DUPP ; ( -- na last a a )
      000114 CD 04 95         [ 4]  408         call CNTXT 
      000117 CD 02 A9         [ 4]  409         call STORE
      00011A CD 04 C1         [ 4]  410         call LAST  
      00011D CD 02 A9         [ 4]  411         call STORE ; ( --  na last )
      000120 CD 03 91         [ 4]  412         call OVER 
      000123 CD 05 C3         [ 4]  413         call EQUAL ; ( na last na -- na T|F ) 
      000126 CD 02 6B         [ 4]  414         call QBRAN 
      000129 00 F7                  415         .word FORGET1 
                                    416 ; ( na -- )
      00012B CD 02 38         [ 4]  417         call DOLIT 
      00012E 00 02                  418         .word 2 
      000130 CD 05 9B         [ 4]  419         call SUBB 
      000133 CD 04 B1         [ 4]  420         call CPP 
      000136 CD 02 A9         [ 4]  421         call STORE  
      000139 CD 18 97         [ 4]  422         call UPDATCP 
      00013C CC 18 6E         [ 2]  423         jp UPDATLAST 
      00013F                        424 CANT_FORGET:
      00013F CD 10 D1         [ 4]  425         call ABORQ
      000142 0A                     426         .byte 10
      000143 20 50 72 6F 74 65 63   427         .ascii " Protected"
             74 65 64
      00014D                        428 FORGET2:
      00014D CD 10 D1         [ 4]  429         call ABORQ
      000150 05                     430         .byte 5
      000151 20 77 68 61 74         431         .ascii " what"
      000156                        432 FORGET4:
      000156 CC 03 5D         [ 2]  433         jp DROP 
                                    434 
                                    435 ;---------------------------------
                                    436 ; if na is variable 
                                    437 ; free variable data  
                                    438 ; FREEVAR ( na -- )
                                    439 ;---------------------------------
      000159 00 BE                  440         .word LINK 
                           00015B   441         LINK=.
      00015B 07                     442         .byte 7 
      00015C 46 52 45 45 56 41 52   443         .ascii "FREEVAR"
      000163                        444 FREEVAR:
      000163 CD 03 67         [ 4]  445         call DUPP ; ( na na -- )
      000166 CD 02 DE         [ 4]  446         CALL CAT  ; ( na c -- )
      000169 CD 08 1C         [ 4]  447         call ONEP ;
      00016C CD 05 3D         [ 4]  448         CALL PLUS ; ( na c+1 -- ca ) 
      00016F CD 08 1C         [ 4]  449         call ONEP ; ( ca+ -- ) to get routne address 
      000172 CD 03 67         [ 4]  450         call DUPP ; ( ca+ ca+ -- )
      000175 CD 02 C0         [ 4]  451         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000178 CD 02 38         [ 4]  452         call DOLIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00017B 04 14                  453         .word DOVAR ; if routine address is DOVAR then variable 
      00017D CD 05 C3         [ 4]  454         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000180 CD 02 6B         [ 4]  455         call QBRAN 
      000183 01 99                  456         .word FREEVAR4 
      000185 CD 02 38         [ 4]  457         call DOLIT 
      000188 00 02                  458         .word 2 
      00018A CD 05 3D         [ 4]  459         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00018D CD 02 C0         [ 4]  460         call AT 
      000190 CD 04 A3         [ 4]  461         call VPP   
      000193 CD 02 A9         [ 4]  462         call STORE 
      000196 CC 18 AE         [ 2]  463         jp UPDATVP 
      000199                        464 FREEVAR4: ; not variable
      000199 CC 03 5D         [ 2]  465         jp  DROP 
                                    466 
                                    467 ;;
                                    468 ;; get millisecond counter 
                                    469 ;; msec ( -- u )
                                    470 ;; Added by Picatout 2020-04-26
      00019C 01 5B                  471         .word LINK  
                           00019E   472         LINK = . 
      00019E 04                     473         .byte 4
      00019F 4D 53 45 43            474         .ascii "MSEC"
      0001A3                        475 MSEC: 
      0001A3 1D 00 02         [ 2]  476         subw x,#CELLL 
      0001A6 90 BE 2A         [ 2]  477         ldw y,MS 
      0001A9 FF               [ 2]  478         ldw (x),y 
      0001AA 81               [ 4]  479         ret 
                                    480 
                                    481 ; suspend execution for u msec 
                                    482 ;  pause ( u -- )
      0001AB 01 9E                  483         .word LINK 
                           0001AD   484         LINK=.
      0001AD 05                     485         .byte 5 
      0001AE 50 41 55 53 45         486         .ascii "PAUSE"
      0001B3                        487 PAUSE:
      0001B3 90 93            [ 1]  488         ldw y,x
      0001B5 90 FE            [ 2]  489         ldw y,(y)
      0001B7 72 B9 00 2A      [ 2]  490         addw y,MS 
      0001BB 8F               [10]  491 1$:     wfi  
      0001BC 90 B3 2A         [ 2]  492         cpw y,MS  
      0001BF 26 FA            [ 1]  493         jrne 1$        
      0001C1 1C 00 02         [ 2]  494         addw x,#CELLL 
      0001C4 81               [ 4]  495         ret 
                                    496 
                                    497 ; initialize count down timer 
                                    498 ;  TIMER ( u -- )  milliseconds 
      0001C5 01 AD                  499         .word LINK 
                           0001C7   500         LINK=.
      0001C7 05                     501         .byte 5 
      0001C8 54 49 4D 45 52         502         .ascii "TIMER" 
      0001CD                        503 TIMER:
      0001CD 90 93            [ 1]  504         ldw y,x
      0001CF 90 FE            [ 2]  505         ldw y,(y) 
      0001D1 90 BF 2C         [ 2]  506         ldw CNTDWN,y
      0001D4 1C 00 02         [ 2]  507         addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001D7 81               [ 4]  508         ret 
                                    509 
                                    510 ; check for TIMER exiparition 
                                    511 ;  TIMEOUT? ( -- 0|-1 )
      0001D8 01 C7                  512         .word LINK 
                           0001DA   513         LINK=. 
      0001DA 08                     514         .byte 8 
      0001DB 54 49 4D 45 4F 55 54   515         .ascii "TIMEOUT?"
             3F
      0001E3                        516 TIMEOUTQ: 
      0001E3 4F               [ 1]  517         clr a
      0001E4 1D 00 02         [ 2]  518         subw x,#CELLL 
      0001E7 90 BE 2C         [ 2]  519         ldw y,CNTDWN 
      0001EA 26 01            [ 1]  520         jrne 1$ 
      0001EC 43               [ 1]  521         cpl a 
      0001ED E7 01            [ 1]  522 1$:     ld (1,x),a 
      0001EF F7               [ 1]  523         ld (x),a 
      0001F0 81               [ 4]  524         ret         
                                    525 
                                    526 ; reboot MCU 
                                    527 ; REBOOT ( -- )
      0001F1 01 DA                  528         .word LINK 
                           0001F3   529         LINK=. 
      0001F3 06                     530         .byte 6 
      0001F4 52 45 42 4F 4F 54      531         .ascii "REBOOT"
      0001FA                        532 reboot:
      0001FA CC 00 00         [ 2]  533         jp NonHandledInterrupt
                                    534         
                                    535 
                                    536 ;; Device dependent I/O
                                    537 ;       ?RX     ( -- c T | F )
                                    538 ;         Return input byte and true, or false.
      0001FD 01 F3                  539         .word      LINK 
                           0001FF   540 LINK	= .
      0001FF 04                     541         .byte      4
      000200 3F 4B 45 59            542         .ascii     "?KEY"
      000204                        543 QKEY:
      000204 90 5F            [ 1]  544         CLRW Y 
      000206 72 0B 52 30 0B   [ 2]  545         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      00020B C6 52 31         [ 1]  546         LD    A,UART1_DR   ;get char in A
      00020E 1D 00 02         [ 2]  547 	SUBW	X,#2
      000211 E7 01            [ 1]  548         LD     (1,X),A
      000213 7F               [ 1]  549 	CLR	(X)
      000214 90 53            [ 2]  550         CPLW     Y
      000216                        551 INCH:
      000216 1D 00 02         [ 2]  552 	SUBW	X,#2
      000219 FF               [ 2]  553         LDW     (X),Y
      00021A 81               [ 4]  554         RET
                                    555 
                                    556 ;       TX!     ( c -- )
                                    557 ;       Send character c to  output device.
      00021B 01 FF                  558         .word      LINK
                           00021D   559 LINK	= .
      00021D 04                     560         .byte      4
      00021E 45 4D 49 54            561         .ascii     "EMIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000222                        562 EMIT:
      000222 E6 01            [ 1]  563         LD     A,(1,X)
      000224 1C 00 02         [ 2]  564 	ADDW	X,#2
      000227 72 0F 52 30 FB   [ 2]  565 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00022C C7 52 31         [ 1]  566         LD    UART1_DR,A   ;send A
      00022F 81               [ 4]  567         RET
                                    568 
                                    569 ;; The kernel
                                    570 
                                    571 ;       doLIT   ( -- w )
                                    572 ;       Push an inline literal.
      000230 02 1D                  573         .word      LINK
                           000232   574 LINK	= 	.
      000232 45                     575 	.byte      COMPO+5
      000233 44 4F 4C 49 54         576         .ascii     "DOLIT"
      000238                        577 DOLIT:
      000238 1D 00 02         [ 2]  578 	SUBW X,#2
                           000001   579 .if PICATOUT_MOD 
      00023B 16 01            [ 2]  580         ldw y,(1,sp)
      00023D 90 FE            [ 2]  581         ldw y,(y)
      00023F FF               [ 2]  582         ldw (x),y
      000240 90 85            [ 2]  583         popw y 
      000242 90 EC 02         [ 2]  584         jp (2,y)
                           000000   585 .else 
                                    586         POPW Y
                                    587 	LDW YTEMP,Y
                                    588 	LDW Y,(Y)
                                    589         LDW (X),Y
                                    590         LDW Y,YTEMP
                                    591 	JP (2,Y)
                                    592 .endif 
                                    593 
                                    594 ;       next    ( -- )
                                    595 ;       Code for  single index loop.
      000245 02 32                  596         .word      LINK
                           000247   597 LINK	= 	.
      000247 44                     598 	.byte      COMPO+4
      000248 4E 45 58 54            599         .ascii     "NEXT"
      00024C                        600 DONXT:
      00024C 16 03            [ 2]  601 	LDW Y,(3,SP)
      00024E 90 5A            [ 2]  602 	DECW Y
      000250 2A 07            [ 1]  603 	JRPL NEX1 ; jump if N=0
      000252 90 85            [ 2]  604 	POPW Y
                           000001   605 .if PICATOUT_MOD
      000254 5B 02            [ 2]  606         addw sp,#2
                           000000   607 .else        
                                    608 	POP A
                                    609 	POP A
                                    610 .endif         
      000256 90 EC 02         [ 2]  611         JP (2,Y)
      000259                        612 NEX1:
      000259 17 03            [ 2]  613         LDW (3,SP),Y
      00025B 90 85            [ 2]  614         POPW Y
      00025D 90 FE            [ 2]  615 	LDW Y,(Y)
      00025F 90 FC            [ 2]  616 	JP (Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



                                    617 
                                    618 ;       ?branch ( f -- )
                                    619 ;       Branch if flag is zero.
      000261 02 47                  620         .word      LINK
                           000263   621 LINK	= 	.
      000263 47                     622 	.byte      COMPO+7
      000264 3F 42 52 41 4E 43 48   623         .ascii     "?BRANCH"
      00026B                        624 QBRAN:	
      00026B 90 93            [ 1]  625         LDW Y,X
      00026D 1C 00 02         [ 2]  626 	ADDW X,#2
      000270 90 FE            [ 2]  627 	LDW Y,(Y)
      000272 27 0E            [ 1]  628         JREQ     BRAN
      000274 90 85            [ 2]  629 	POPW Y
      000276 90 EC 02         [ 2]  630 	JP (2,Y)
                                    631         
                                    632 ;       branch  ( -- )
                                    633 ;       Branch to an inline address.
      000279 02 63                  634         .word      LINK
                           00027B   635 LINK	= 	.
      00027B 46                     636 	.byte      COMPO+6
      00027C 42 52 41 4E 43 48      637         .ascii     "BRANCH"
      000282                        638 BRAN:
      000282 90 85            [ 2]  639         POPW Y
      000284 90 FE            [ 2]  640 	LDW Y,(Y)
      000286 90 FC            [ 2]  641         JP     (Y)
                                    642 
                                    643 ;       EXECUTE ( ca -- )
                                    644 ;       Execute  word at ca.
      000288 02 7B                  645         .word      LINK
                           00028A   646 LINK	= 	.
      00028A 07                     647         .byte       7
      00028B 45 58 45 43 55 54 45   648         .ascii     "EXECUTE"
      000292                        649 EXECU:
      000292 90 93            [ 1]  650         LDW Y,X
      000294 1C 00 02         [ 2]  651 	ADDW X,#2
      000297 90 FE            [ 2]  652 	LDW  Y,(Y)
      000299 90 FC            [ 2]  653         JP   (Y)
                                    654 
                                    655 ;       EXIT    ( -- )
                                    656 ;       Terminate a colon definition.
      00029B 02 8A                  657         .word      LINK
                           00029D   658 LINK = .
      00029D 04                     659         .byte      4
      00029E 45 58 49 54            660         .ascii     "EXIT"
      0002A2                        661 EXIT:
      0002A2 90 85            [ 2]  662         POPW Y
      0002A4 81               [ 4]  663         RET
                                    664 
                                    665 ;       !       ( w a -- )
                                    666 ;       Pop  data stack to memory.
      0002A5 02 9D                  667         .word      LINK
                           0002A7   668 LINK = .
      0002A7 01                     669         .byte      1
      0002A8 21                     670         .ascii     "!"
      0002A9                        671 STORE:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A9 90 93            [ 1]  672         LDW Y,X
      0002AB 90 FE            [ 2]  673         LDW Y,(Y)    ;Y=a
      0002AD 90 BF 20         [ 2]  674         LDW YTEMP,Y
      0002B0 90 93            [ 1]  675         LDW Y,X
      0002B2 90 EE 02         [ 2]  676         LDW Y,(2,Y)
      0002B5 91 CF 20         [ 5]  677         LDW [YTEMP],Y ;store w at a
      0002B8 1C 00 04         [ 2]  678         ADDW X,#4 ; DDROP 
      0002BB 81               [ 4]  679         RET     
                                    680 
                                    681 ;       @       ( a -- w )
                                    682 ;       Push memory location to stack.
      0002BC 02 A7                  683         .word      LINK
                           0002BE   684 LINK	= 	.
      0002BE 01                     685         .byte    1
      0002BF 40                     686         .ascii	"@"
      0002C0                        687 AT:
      0002C0 90 93            [ 1]  688         LDW Y,X     ;Y = a
      0002C2 90 FE            [ 2]  689         LDW Y,(Y)   ; address 
      0002C4 90 FE            [ 2]  690         LDW Y,(Y)   ; value 
      0002C6 FF               [ 2]  691         LDW (X),Y ;w = @Y
      0002C7 81               [ 4]  692         RET     
                                    693 
                                    694 ;       C!      ( c b -- )
                                    695 ;       Pop  data stack to byte memory.
      0002C8 02 BE                  696         .word      LINK
                           0002CA   697 LINK	= .
      0002CA 02                     698         .byte      2
      0002CB 43 21                  699         .ascii     "C!"
      0002CD                        700 CSTOR:
      0002CD 90 93            [ 1]  701         LDW Y,X
      0002CF 90 FE            [ 2]  702 	LDW Y,(Y)    ;Y=b
      0002D1 E6 03            [ 1]  703         LD A,(3,X)    ;D = c
      0002D3 90 F7            [ 1]  704         LD  (Y),A     ;store c at b
      0002D5 1C 00 04         [ 2]  705 	ADDW X,#4 ; DDROP 
      0002D8 81               [ 4]  706         RET     
                                    707 
                                    708 ;       C@      ( b -- c )
                                    709 ;       Push byte in memory to  stack.
      0002D9 02 CA                  710         .word      LINK
                           0002DB   711 LINK	= 	.
      0002DB 02                     712         .byte      2
      0002DC 43 40                  713         .ascii     "C@"
      0002DE                        714 CAT:
      0002DE 90 93            [ 1]  715         LDW Y,X     ;Y=b
      0002E0 90 FE            [ 2]  716         LDW Y,(Y)
      0002E2 90 F6            [ 1]  717         LD A,(Y)
      0002E4 E7 01            [ 1]  718         LD (1,X),A
      0002E6 7F               [ 1]  719         CLR (X)
      0002E7 81               [ 4]  720         RET     
                                    721 
                                    722 ;       RP@     ( -- a )
                                    723 ;       Push current RP to data stack.
      0002E8 02 DB                  724         .word      LINK
                           0002EA   725 LINK	= .
      0002EA 03                     726         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002EB 52 50 40               727         .ascii     "RP@"
      0002EE                        728 RPAT:
      0002EE 90 96            [ 1]  729         LDW Y,SP    ;save return addr
      0002F0 1D 00 02         [ 2]  730         SUBW X,#2
      0002F3 FF               [ 2]  731         LDW (X),Y
      0002F4 81               [ 4]  732         RET     
                                    733 
                                    734 ;       RP!     ( a -- )
                                    735 ;       Set  return stack pointer.
      0002F5 02 EA                  736         .word      LINK
                           0002F7   737 LINK	= 	. 
      0002F7 43                     738 	.byte      COMPO+3
      0002F8 52 50 21               739         .ascii     "RP!"
      0002FB                        740 RPSTO:
      0002FB 90 85            [ 2]  741         POPW Y
      0002FD 90 BF 20         [ 2]  742         LDW YTEMP,Y
      000300 90 93            [ 1]  743         LDW Y,X
      000302 90 FE            [ 2]  744         LDW Y,(Y)
      000304 90 94            [ 1]  745         LDW SP,Y
      000306 1C 00 02         [ 2]  746         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000309 92 CC 20         [ 5]  747         JP [YTEMP]
                                    748 
                                    749 ;       R>      ( -- w )
                                    750 ;       Pop return stack to data stack.
      00030C 02 F7                  751         .word      LINK
                           00030E   752 LINK	= 	. 
      00030E 42                     753 	.byte      COMPO+2
      00030F 52 3E                  754         .ascii     "R>"
      000311                        755 RFROM:
      000311 90 85            [ 2]  756         POPW Y    ;save return addr
      000313 90 BF 20         [ 2]  757         LDW YTEMP,Y
      000316 90 85            [ 2]  758         POPW Y
      000318 1D 00 02         [ 2]  759         SUBW X,#2
      00031B FF               [ 2]  760         LDW (X),Y
      00031C 92 CC 20         [ 5]  761         JP [YTEMP]
                                    762 
                                    763 ;       R@      ( -- w )
                                    764 ;       Copy top of return stack to stack.
      00031F 03 0E                  765         .word      LINK
                           000321   766 LINK	= 	. 
      000321 02                     767         .byte      2
      000322 52 40                  768         .ascii     "R@"
      000324                        769 RAT:
                           000001   770 .if PICATOUT_MOD
      000324 16 03            [ 2]  771         ldw y,(3,sp)
      000326 1D 00 02         [ 2]  772         subw x,#CELLL 
      000329 FF               [ 2]  773         ldw (x),y 
      00032A 81               [ 4]  774         ret 
                           000000   775 .else 
                                    776         POPW Y
                                    777         LDW YTEMP,Y
                                    778         POPW Y
                                    779         PUSHW Y
                                    780         SUBW X,#2
                                    781         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    782         JP [YTEMP]
                                    783 .endif         
                                    784 
                                    785 ;       >R      ( w -- )
                                    786 ;       Push data stack to return stack.
      00032B 03 21                  787         .word      LINK
                           00032D   788 LINK	= 	. 
      00032D 42                     789 	.byte      COMPO+2
      00032E 3E 52                  790         .ascii     ">R"
      000330                        791 TOR:
      000330 90 85            [ 2]  792         POPW Y    ;save return addr
      000332 90 BF 20         [ 2]  793         LDW YTEMP,Y
      000335 90 93            [ 1]  794         LDW Y,X
      000337 90 FE            [ 2]  795         LDW Y,(Y)
      000339 90 89            [ 2]  796         PUSHW Y    ;restore return addr
      00033B 1C 00 02         [ 2]  797         ADDW X,#2
      00033E 92 CC 20         [ 5]  798         JP [YTEMP]
                                    799 
                                    800 ;       SP@     ( -- a )
                                    801 ;       Push current stack pointer.
      000341 03 2D                  802         .word      LINK
                           000343   803 LINK	= 	. 
      000343 03                     804         .byte      3
      000344 53 50 40               805         .ascii     "SP@"
      000347                        806 SPAT:
      000347 90 93            [ 1]  807 	LDW Y,X
      000349 1D 00 02         [ 2]  808         SUBW X,#2
      00034C FF               [ 2]  809 	LDW (X),Y
      00034D 81               [ 4]  810         RET     
                                    811 
                                    812 ;       SP!     ( a -- )
                                    813 ;       Set  data stack pointer.
      00034E 03 43                  814         .word      LINK
                           000350   815 LINK	= 	. 
      000350 03                     816         .byte      3
      000351 53 50 21               817         .ascii     "SP!"
      000354                        818 SPSTO:
      000354 FE               [ 2]  819         LDW     X,(X)     ;X = a
      000355 81               [ 4]  820         RET     
                                    821 
                                    822 ;       DROP    ( w -- )
                                    823 ;       Discard top stack item.
      000356 03 50                  824         .word      LINK
                           000358   825 LINK	= 	. 
      000358 04                     826         .byte      4
      000359 44 52 4F 50            827         .ascii     "DROP"
      00035D                        828 DROP:
      00035D 1C 00 02         [ 2]  829         ADDW X,#2     
      000360 81               [ 4]  830         RET     
                                    831 
                                    832 ;       DUP     ( w -- w w )
                                    833 ;       Duplicate  top stack item.
      000361 03 58                  834         .word      LINK
                           000363   835 LINK	= 	. 
      000363 03                     836         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000364 44 55 50               837         .ascii     "DUP"
      000367                        838 DUPP:
      000367 90 93            [ 1]  839 	LDW Y,X
      000369 1D 00 02         [ 2]  840         SUBW X,#2
      00036C 90 FE            [ 2]  841 	LDW Y,(Y)
      00036E FF               [ 2]  842 	LDW (X),Y
      00036F 81               [ 4]  843         RET     
                                    844 
                                    845 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    846 ;       Exchange top two stack items.
      000370 03 63                  847         .word      LINK
                           000372   848 LINK	= 	. 
      000372 04                     849         .byte      4
      000373 53 57 41 50            850         .ascii     "SWAP"
      000377                        851 SWAPP:
      000377 90 93            [ 1]  852         LDW Y,X
      000379 90 FE            [ 2]  853         LDW Y,(Y)
      00037B 90 BF 20         [ 2]  854         LDW YTEMP,Y
      00037E 90 93            [ 1]  855         LDW Y,X
      000380 90 EE 02         [ 2]  856         LDW Y,(2,Y)
      000383 FF               [ 2]  857         LDW (X),Y
      000384 90 BE 20         [ 2]  858         LDW Y,YTEMP
      000387 EF 02            [ 2]  859         LDW (2,X),Y
      000389 81               [ 4]  860         RET     
                                    861 
                                    862 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    863 ;       Copy second stack item to top.
      00038A 03 72                  864         .word      LINK
                           00038C   865 LINK	= . 
      00038C 04                     866         .byte      4
      00038D 4F 56 45 52            867         .ascii     "OVER"
      000391                        868 OVER:
      000391 1D 00 02         [ 2]  869         SUBW X,#2
      000394 90 93            [ 1]  870         LDW Y,X
      000396 90 EE 04         [ 2]  871         LDW Y,(4,Y)
      000399 FF               [ 2]  872         LDW (X),Y
      00039A 81               [ 4]  873         RET     
                                    874 
                                    875 ;       0<      ( n -- t )
                                    876 ;       Return true if n is negative.
      00039B 03 8C                  877         .word      LINK
                           00039D   878 LINK	= . 
      00039D 02                     879         .byte      2
      00039E 30 3C                  880         .ascii     "0<"
      0003A0                        881 ZLESS:
      0003A0 A6 FF            [ 1]  882         LD A,#0xFF
      0003A2 90 93            [ 1]  883         LDW Y,X
      0003A4 90 FE            [ 2]  884         LDW Y,(Y)
      0003A6 2B 01            [ 1]  885         JRMI     ZL1
      0003A8 4F               [ 1]  886         CLR A   ;false
      0003A9 F7               [ 1]  887 ZL1:    LD     (X),A
      0003AA E7 01            [ 1]  888         LD (1,X),A
      0003AC 81               [ 4]  889 	RET     
                                    890 
                                    891 ;       AND     ( w w -- w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



                                    892 ;       Bitwise AND.
      0003AD 03 9D                  893         .word      LINK
                           0003AF   894 LINK	= . 
      0003AF 03                     895         .byte      3
      0003B0 41 4E 44               896         .ascii     "AND"
      0003B3                        897 ANDD:
      0003B3 F6               [ 1]  898         LD  A,(X)    ;D=w
      0003B4 E4 02            [ 1]  899         AND A,(2,X)
      0003B6 E7 02            [ 1]  900         LD (2,X),A
      0003B8 E6 01            [ 1]  901         LD A,(1,X)
      0003BA E4 03            [ 1]  902         AND A,(3,X)
      0003BC E7 03            [ 1]  903         LD (3,X),A
      0003BE 1C 00 02         [ 2]  904         ADDW X,#2
      0003C1 81               [ 4]  905         RET
                                    906 
                                    907 ;       OR      ( w w -- w )
                                    908 ;       Bitwise inclusive OR.
      0003C2 03 AF                  909         .word      LINK
                           0003C4   910 LINK = . 
      0003C4 02                     911         .byte      2
      0003C5 4F 52                  912         .ascii     "OR"
      0003C7                        913 ORR:
      0003C7 F6               [ 1]  914         LD A,(X)    ;D=w
      0003C8 EA 02            [ 1]  915         OR A,(2,X)
      0003CA E7 02            [ 1]  916         LD (2,X),A
      0003CC E6 01            [ 1]  917         LD A,(1,X)
      0003CE EA 03            [ 1]  918         OR A,(3,X)
      0003D0 E7 03            [ 1]  919         LD (3,X),A
      0003D2 1C 00 02         [ 2]  920         ADDW X,#2
      0003D5 81               [ 4]  921         RET
                                    922 
                                    923 ;       XOR     ( w w -- w )
                                    924 ;       Bitwise exclusive OR.
      0003D6 03 C4                  925         .word      LINK
                           0003D8   926 LINK	= . 
      0003D8 03                     927         .byte      3
      0003D9 58 4F 52               928         .ascii     "XOR"
      0003DC                        929 XORR:
      0003DC F6               [ 1]  930         LD A,(X)    ;D=w
      0003DD E8 02            [ 1]  931         XOR A,(2,X)
      0003DF E7 02            [ 1]  932         LD (2,X),A
      0003E1 E6 01            [ 1]  933         LD A,(1,X)
      0003E3 E8 03            [ 1]  934         XOR A,(3,X)
      0003E5 E7 03            [ 1]  935         LD (3,X),A
      0003E7 1C 00 02         [ 2]  936         ADDW X,#2
      0003EA 81               [ 4]  937         RET
                                    938 
                                    939 ;       UM+     ( u u -- udsum )
                                    940 ;       Add two unsigned single
                                    941 ;       and return a double sum.
      0003EB 03 D8                  942         .word      LINK
                           0003ED   943 LINK	= . 
      0003ED 03                     944         .byte      3
      0003EE 55 4D 2B               945         .ascii     "UM+"
      0003F1                        946 UPLUS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003F1 A6 01            [ 1]  947         LD A,#1
      0003F3 90 93            [ 1]  948         LDW Y,X
      0003F5 90 EE 02         [ 2]  949         LDW Y,(2,Y)
      0003F8 90 BF 20         [ 2]  950         LDW YTEMP,Y
      0003FB 90 93            [ 1]  951         LDW Y,X
      0003FD 90 FE            [ 2]  952         LDW Y,(Y)
      0003FF 72 B9 00 20      [ 2]  953         ADDW Y,YTEMP
      000403 EF 02            [ 2]  954         LDW (2,X),Y
      000405 25 01            [ 1]  955         JRC     UPL1
      000407 4F               [ 1]  956         CLR A
      000408 E7 01            [ 1]  957 UPL1:   LD     (1,X),A
      00040A 7F               [ 1]  958         CLR (X)
      00040B 81               [ 4]  959         RET
                                    960 
                                    961 ;; System and user variables
                                    962 
                                    963 ;       doVAR   ( -- a )
                                    964 ;       Code for VARIABLE and CREATE.
      00040C 03 ED                  965         .word      LINK
                           00040E   966 LINK	= . 
      00040E 45                     967 	.byte      COMPO+5
      00040F 44 4F 56 41 52         968         .ascii     "DOVAR"
      000414                        969 DOVAR:
      000414 1D 00 02         [ 2]  970 	SUBW X,#2
      000417 90 85            [ 2]  971         POPW Y    ;get return addr (pfa)
                           000001   972 .if PICATOUT_MOD
      000419 90 FE            [ 2]  973         LDW Y,(Y) ; indirect address 
                                    974 .endif ;PICATOUT_MOD        
      00041B FF               [ 2]  975         LDW (X),Y    ;push on stack
      00041C 81               [ 4]  976         RET     ;go to RET of EXEC
                                    977 
                                    978 ;       BASE    ( -- a )
                                    979 ;       Radix base for numeric I/O.
      00041D 04 0E                  980         .word      LINK        
                           00041F   981 LINK = . 
      00041F 04                     982         .byte      4
      000420 42 41 53 45            983         .ascii     "BASE"
      000424                        984 BASE:
      000424 90 AE 00 06      [ 2]  985 	LDW Y,#UBASE 
      000428 1D 00 02         [ 2]  986 	SUBW X,#2
      00042B FF               [ 2]  987         LDW (X),Y
      00042C 81               [ 4]  988         RET
                                    989 
                                    990 ;       tmp     ( -- a )
                                    991 ;       A temporary storage.
      00042D 04 1F                  992         .word      LINK
                                    993         
                           00042F   994 LINK = . 
      00042F 03                     995 	.byte      3
      000430 54 4D 50               996         .ascii     "TMP"
      000433                        997 TEMP:
      000433 90 AE 00 08      [ 2]  998 	LDW Y,#UTMP
      000437 1D 00 02         [ 2]  999 	SUBW X,#2
      00043A FF               [ 2] 1000         LDW (X),Y
      00043B 81               [ 4] 1001         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1002 
                                   1003 ;       >IN     ( -- a )
                                   1004 ;        Hold parsing pointer.
      00043C 04 2F                 1005         .word      LINK
                           00043E  1006 LINK = . 
      00043E 03                    1007         .byte      3
      00043F 3E 49 4E              1008         .ascii    ">IN"
      000442                       1009 INN:
      000442 90 AE 00 0A      [ 2] 1010 	LDW Y,#UINN 
      000446 1D 00 02         [ 2] 1011 	SUBW X,#2
      000449 FF               [ 2] 1012         LDW (X),Y
      00044A 81               [ 4] 1013         RET
                                   1014 
                                   1015 ;       #TIB    ( -- a )
                                   1016 ;       Count in terminal input buffer.
      00044B 04 3E                 1017         .word      LINK
                           00044D  1018 LINK = . 
      00044D 04                    1019         .byte      4
      00044E 23 54 49 42           1020         .ascii     "#TIB"
      000452                       1021 NTIB:
      000452 90 AE 00 0C      [ 2] 1022 	LDW Y,#UCTIB 
      000456 1D 00 02         [ 2] 1023 	SUBW X,#2
      000459 FF               [ 2] 1024         LDW (X),Y
      00045A 81               [ 4] 1025         RET
                                   1026 
                           000001  1027 .if PICATOUT_MOD
                                   1028 ;       TBUF ( -- a )
                                   1029 ;       address of 128 bytes transaction buffer 
      00045B 04 4D                 1030         .word LINK 
                           00045D  1031         LINK=.
      00045D 04                    1032         .byte 4 
      00045E 54 42 55 46           1033         .ascii "TBUF"
      000462                       1034 TBUF:
      000462 90 AE 16 80      [ 2] 1035         ldw y,#ROWBUFF
      000466 1D 00 02         [ 2] 1036         subw x,#CELLL
      000469 FF               [ 2] 1037         ldw (x),y 
      00046A 81               [ 4] 1038         ret 
                                   1039 
                                   1040 
                                   1041 .endif ;PICATOUT_MOD
                                   1042 
                                   1043 ;       "EVAL   ( -- a )
                                   1044 ;       Execution vector of EVAL.
      00046B 04 5D                 1045         .word      LINK
                           00046D  1046 LINK = . 
      00046D 05                    1047         .byte      5
      00046E 27 45 56 41 4C        1048         .ascii     "'EVAL"
      000473                       1049 TEVAL:
      000473 90 AE 00 10      [ 2] 1050 	LDW Y,#UINTER 
      000477 1D 00 02         [ 2] 1051 	SUBW X,#2
      00047A FF               [ 2] 1052         LDW (X),Y
      00047B 81               [ 4] 1053         RET
                                   1054 
                                   1055 ;       HLD     ( -- a )
                                   1056 ;       Hold a pointer of output string.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00047C 04 6D                 1057         .word      LINK
                           00047E  1058 LINK = . 
      00047E 03                    1059         .byte      3
      00047F 48 4C 44              1060         .ascii     "HLD"
      000482                       1061 HLD:
      000482 90 AE 00 12      [ 2] 1062 	LDW Y,#UHLD 
      000486 1D 00 02         [ 2] 1063 	SUBW X,#2
      000489 FF               [ 2] 1064         LDW (X),Y
      00048A 81               [ 4] 1065         RET
                                   1066 
                                   1067 ;       CONTEXT ( -- a )
                                   1068 ;       Start vocabulary search.
      00048B 04 7E                 1069         .word      LINK
                           00048D  1070 LINK = . 
      00048D 07                    1071         .byte      7
      00048E 43 4F 4E 54 45 58 54  1072         .ascii     "CONTEXT"
      000495                       1073 CNTXT:
      000495 90 AE 00 14      [ 2] 1074 	LDW Y,#UCNTXT
      000499 1D 00 02         [ 2] 1075 	SUBW X,#2
      00049C FF               [ 2] 1076         LDW (X),Y
      00049D 81               [ 4] 1077         RET
                                   1078 
                                   1079 ;       VP      ( -- a )
                                   1080 ;       Point to top of variables
      00049E 04 8D                 1081         .word      LINK
                           0004A0  1082 LINK = . 
      0004A0 02                    1083         .byte      2
      0004A1 56 50                 1084         .ascii     "VP"
      0004A3                       1085 VPP:
      0004A3 90 AE 00 16      [ 2] 1086 	LDW Y,#UVP 
      0004A7 1D 00 02         [ 2] 1087 	SUBW X,#2
      0004AA FF               [ 2] 1088         LDW (X),Y
      0004AB 81               [ 4] 1089         RET
                                   1090 
                           000001  1091 .if PICATOUT_MOD
                                   1092 ;       CP    ( -- a )
                                   1093 ;       Pointer to top of FLASH 
      0004AC 04 A0                 1094         .word LINK 
                           0004AE  1095         LINK=.
      0004AE 03                    1096         .byte 3 
      0004AF 43 50                 1097         .ascii "CP"
      0004B1                       1098 CPP: 
      0004B1 90 AE 00 18      [ 2] 1099         ldw y,#UCP 
      0004B5 1D 00 02         [ 2] 1100         subw x,#CELLL 
      0004B8 FF               [ 2] 1101         ldw (x),y 
      0004B9 81               [ 4] 1102         ret                
                                   1103 .endif ;PICATOUT_MOD
                                   1104 
                                   1105 ;       LAST    ( -- a )
                                   1106 ;       Point to last name in dictionary.
      0004BA 04 AE                 1107         .word      LINK
                           0004BC  1108 LINK = . 
      0004BC 04                    1109         .byte      4
      0004BD 4C 41 53 54           1110         .ascii     "LAST"
      0004C1                       1111 LAST:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004C1 90 AE 00 1A      [ 2] 1112 	LDW Y,#ULAST 
      0004C5 1D 00 02         [ 2] 1113 	SUBW X,#2
      0004C8 FF               [ 2] 1114         LDW (X),Y
      0004C9 81               [ 4] 1115         RET
                                   1116 
                           000001  1117 .if PICATOUT_MOD
      0004CA 04 BC                 1118         .word LINK 
                           0004CC  1119         LINK=.
      0004CC 06                    1120         .byte 6
      0004CD 4F 46 46 53 45 54     1121         .ascii "OFFSET" 
      0004D3                       1122 OFFSET: 
      0004D3 1D 00 02         [ 2] 1123         subw x,#CELLL
      0004D6 90 AE 00 1C      [ 2] 1124         ldw y,#UOFFSET 
      0004DA FF               [ 2] 1125         ldw (x),y 
      0004DB 81               [ 4] 1126         ret 
                                   1127 
                                   1128 ; adjust jump address adding OFFSET
                                   1129 ; ADR-ADJ ( a -- a+offset )
      0004DC                       1130 ADRADJ: 
      0004DC CD 04 D3         [ 4] 1131         call OFFSET 
      0004DF CD 02 C0         [ 4] 1132         call AT 
      0004E2 CC 05 3D         [ 2] 1133         jp PLUS 
                                   1134 
                                   1135 .endif ; PICATOUT_MOD
                                   1136 
                                   1137 ;; Common functions
                                   1138 
                                   1139 ;       ?DUP    ( w -- w w | 0 )
                                   1140 ;       Dup tos if its is not zero.
      0004E5 04 CC                 1141         .word      LINK
                           0004E7  1142 LINK = . 
      0004E7 04                    1143         .byte      4
      0004E8 3F 44 55 50           1144         .ascii     "?DUP"
      0004EC                       1145 QDUP:
      0004EC 90 93            [ 1] 1146         LDW Y,X
      0004EE 90 FE            [ 2] 1147 	LDW Y,(Y)
      0004F0 27 04            [ 1] 1148         JREQ     QDUP1
      0004F2 1D 00 02         [ 2] 1149 	SUBW X,#2
      0004F5 FF               [ 2] 1150         LDW (X),Y
      0004F6 81               [ 4] 1151 QDUP1:  RET
                                   1152 
                                   1153 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1154 ;       Rot 3rd item to top.
      0004F7 04 E7                 1155         .word      LINK
                           0004F9  1156 LINK = . 
      0004F9 03                    1157         .byte      3
      0004FA 52 4F 54              1158         .ascii     "ROT"
      0004FD                       1159 ROT:
                           000001  1160 .if PICATOUT_MOD
      0004FD 90 93            [ 1] 1161         ldw y,x 
      0004FF 90 FE            [ 2] 1162         ldw y,(y)
      000501 90 89            [ 2] 1163         pushw y 
      000503 90 93            [ 1] 1164         ldw y,x 
      000505 90 EE 04         [ 2] 1165         ldw y,(4,y)
      000508 FF               [ 2] 1166         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000509 90 93            [ 1] 1167         ldw y,x 
      00050B 90 EE 02         [ 2] 1168         ldw y,(2,y)
      00050E EF 04            [ 2] 1169         ldw (4,x),y 
      000510 90 85            [ 2] 1170         popw y 
      000512 EF 02            [ 2] 1171         ldw (2,x),y
      000514 81               [ 4] 1172         ret 
                           000000  1173 .else 
                                   1174         LDW Y,X
                                   1175 	LDW Y,(4,Y)
                                   1176 	LDW YTEMP,Y
                                   1177         LDW Y,X
                                   1178         LDW Y,(2,Y)
                                   1179         LDW XTEMP,Y
                                   1180         LDW Y,X
                                   1181         LDW Y,(Y)
                                   1182         LDW (2,X),Y
                                   1183         LDW Y,XTEMP
                                   1184         LDW (4,X),Y
                                   1185         LDW Y,YTEMP
                                   1186         LDW (X),Y
                                   1187         RET
                                   1188 .endif 
                                   1189 
                                   1190 ;       2DROP   ( w w -- )
                                   1191 ;       Discard two items on stack.
      000515 04 F9                 1192         .word      LINK
                           000517  1193 LINK = . 
      000517 05                    1194         .byte      5
      000518 32 44 52 4F 50        1195         .ascii     "2DROP"
      00051D                       1196 DDROP:
      00051D 1C 00 04         [ 2] 1197         ADDW X,#4
      000520 81               [ 4] 1198         RET
                                   1199 
                                   1200 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1201 ;       Duplicate top two items.
      000521 05 17                 1202         .word      LINK
                           000523  1203 LINK = . 
      000523 04                    1204         .byte      4
      000524 32 44 55 50           1205         .ascii     "2DUP"
      000528                       1206 DDUP:
      000528 1D 00 04         [ 2] 1207         SUBW X,#4
      00052B 90 93            [ 1] 1208         LDW Y,X
      00052D 90 EE 06         [ 2] 1209         LDW Y,(6,Y)
      000530 EF 02            [ 2] 1210         LDW (2,X),Y
      000532 90 93            [ 1] 1211         LDW Y,X
      000534 90 EE 04         [ 2] 1212         LDW Y,(4,Y)
      000537 FF               [ 2] 1213         LDW (X),Y
      000538 81               [ 4] 1214         RET
                                   1215 
                                   1216 ;       +       ( w w -- sum )
                                   1217 ;       Add top two items.
      000539 05 23                 1218         .word      LINK
                           00053B  1219 LINK = . 
      00053B 01                    1220         .byte      1
      00053C 2B                    1221         .ascii     "+"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00053D                       1222 PLUS:
      00053D 90 93            [ 1] 1223         LDW Y,X
      00053F 90 FE            [ 2] 1224         LDW Y,(Y)
      000541 90 BF 20         [ 2] 1225         LDW YTEMP,Y
      000544 1C 00 02         [ 2] 1226         ADDW X,#2
      000547 90 93            [ 1] 1227         LDW Y,X
      000549 90 FE            [ 2] 1228         LDW Y,(Y)
      00054B 72 B9 00 20      [ 2] 1229         ADDW Y,YTEMP
      00054F FF               [ 2] 1230         LDW (X),Y
      000550 81               [ 4] 1231         RET
                                   1232 
                                   1233 ;       NOT     ( w -- w )
                                   1234 ;       One's complement of tos.
      000551 05 3B                 1235         .word      LINK
                           000553  1236 LINK = . 
      000553 03                    1237         .byte      3
      000554 4E 4F 54              1238         .ascii     "NOT"
      000557                       1239 INVER:
      000557 90 93            [ 1] 1240         LDW Y,X
      000559 90 FE            [ 2] 1241         LDW Y,(Y)
      00055B 90 53            [ 2] 1242         CPLW Y
      00055D FF               [ 2] 1243         LDW (X),Y
      00055E 81               [ 4] 1244         RET
                                   1245 
                                   1246 ;       NEGATE  ( n -- -n )
                                   1247 ;       Two's complement of tos.
      00055F 05 53                 1248         .word      LINK
                           000561  1249 LINK = . 
      000561 06                    1250         .byte      6
      000562 4E 45 47 41 54 45     1251         .ascii     "NEGATE"
      000568                       1252 NEGAT:
      000568 90 93            [ 1] 1253         LDW Y,X
      00056A 90 FE            [ 2] 1254         LDW Y,(Y)
      00056C 90 50            [ 2] 1255         NEGW Y
      00056E FF               [ 2] 1256         LDW (X),Y
      00056F 81               [ 4] 1257         RET
                                   1258 
                                   1259 ;       DNEGATE ( d -- -d )
                                   1260 ;       Two's complement of top double.
      000570 05 61                 1261         .word      LINK
                           000572  1262 LINK = . 
      000572 07                    1263         .byte      7
      000573 44 4E 45 47 41 54 45  1264         .ascii     "DNEGATE"
      00057A                       1265 DNEGA:
      00057A 90 93            [ 1] 1266         LDW Y,X
      00057C 90 FE            [ 2] 1267 	LDW Y,(Y)
      00057E 90 53            [ 2] 1268         CPLW Y     
      000580 90 BF 20         [ 2] 1269 	LDW YTEMP,Y
      000583 90 93            [ 1] 1270         LDW Y,X
      000585 90 EE 02         [ 2] 1271         LDW Y,(2,Y)
      000588 90 53            [ 2] 1272         CPLW Y
      00058A 90 5C            [ 2] 1273         INCW Y
      00058C EF 02            [ 2] 1274         LDW (2,X),Y
      00058E 90 BE 20         [ 2] 1275         LDW Y,YTEMP
      000591 24 02            [ 1] 1276         JRNC DN1 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      000593 90 5C            [ 2] 1277         INCW Y
      000595 FF               [ 2] 1278 DN1:    LDW (X),Y
      000596 81               [ 4] 1279         RET
                                   1280 
                                   1281 ;       -       ( n1 n2 -- n1-n2 )
                                   1282 ;       Subtraction.
      000597 05 72                 1283         .word      LINK
                           000599  1284 LINK = . 
      000599 01                    1285         .byte      1
      00059A 2D                    1286         .ascii     "-"
      00059B                       1287 SUBB:
      00059B 90 93            [ 1] 1288         LDW Y,X
      00059D 90 FE            [ 2] 1289         LDW Y,(Y)
      00059F 90 BF 20         [ 2] 1290         LDW YTEMP,Y
      0005A2 1C 00 02         [ 2] 1291         ADDW X,#2
      0005A5 90 93            [ 1] 1292         LDW Y,X
      0005A7 90 FE            [ 2] 1293         LDW Y,(Y)
      0005A9 72 B2 00 20      [ 2] 1294         SUBW Y,YTEMP
      0005AD FF               [ 2] 1295         LDW (X),Y
      0005AE 81               [ 4] 1296         RET
                                   1297 
                                   1298 ;       ABS     ( n -- n )
                                   1299 ;       Return  absolute value of n.
      0005AF 05 99                 1300         .word      LINK
                           0005B1  1301 LINK = . 
      0005B1 03                    1302         .byte      3
      0005B2 41 42 53              1303         .ascii     "ABS"
      0005B5                       1304 ABSS:
      0005B5 90 93            [ 1] 1305         LDW Y,X
      0005B7 90 FE            [ 2] 1306 	LDW Y,(Y)
      0005B9 2A 03            [ 1] 1307         JRPL     AB1     ;negate:
      0005BB 90 50            [ 2] 1308         NEGW     Y     ;else negate hi byte
      0005BD FF               [ 2] 1309         LDW (X),Y
      0005BE 81               [ 4] 1310 AB1:    RET
                                   1311 
                                   1312 ;       =       ( w w -- t )
                                   1313 ;       Return true if top two are =al.
      0005BF 05 B1                 1314         .word      LINK
                           0005C1  1315 LINK = . 
      0005C1 01                    1316         .byte      1
      0005C2 3D                    1317         .ascii     "="
      0005C3                       1318 EQUAL:
      0005C3 A6 FF            [ 1] 1319         LD A,#0xFF  ;true
      0005C5 90 93            [ 1] 1320         LDW Y,X    ;D = n2
      0005C7 90 FE            [ 2] 1321         LDW Y,(Y)
      0005C9 90 BF 20         [ 2] 1322         LDW YTEMP,Y
      0005CC 1C 00 02         [ 2] 1323         ADDW X,#2
      0005CF 90 93            [ 1] 1324         LDW Y,X
      0005D1 90 FE            [ 2] 1325         LDW Y,(Y)
      0005D3 90 B3 20         [ 2] 1326         CPW Y,YTEMP     ;if n2 <> n1
      0005D6 27 01            [ 1] 1327         JREQ     EQ1
      0005D8 4F               [ 1] 1328         CLR A
      0005D9 F7               [ 1] 1329 EQ1:    LD (X),A
      0005DA E7 01            [ 1] 1330         LD (1,X),A
      0005DC 81               [ 4] 1331 	RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1332 
                                   1333 ;       U<      ( u u -- t )
                                   1334 ;       Unsigned compare of top two items.
      0005DD 05 C1                 1335         .word      LINK
                           0005DF  1336 LINK = . 
      0005DF 02                    1337         .byte      2
      0005E0 55 3C                 1338         .ascii     "U<"
      0005E2                       1339 ULESS:
      0005E2 A6 FF            [ 1] 1340         LD A,#0xFF  ;true
      0005E4 90 93            [ 1] 1341         LDW Y,X    ;D = n2
      0005E6 90 FE            [ 2] 1342         LDW Y,(Y)
      0005E8 90 BF 20         [ 2] 1343         LDW YTEMP,Y
      0005EB 1C 00 02         [ 2] 1344         ADDW X,#2
      0005EE 90 93            [ 1] 1345         LDW Y,X
      0005F0 90 FE            [ 2] 1346         LDW Y,(Y)
      0005F2 90 B3 20         [ 2] 1347         CPW Y,YTEMP     ;if n2 <> n1
      0005F5 25 01            [ 1] 1348         JRULT     ULES1
      0005F7 4F               [ 1] 1349         CLR A
      0005F8 F7               [ 1] 1350 ULES1:  LD (X),A
      0005F9 E7 01            [ 1] 1351         LD (1,X),A
      0005FB 81               [ 4] 1352 	RET     
                                   1353 
                                   1354 ;       <       ( n1 n2 -- t )
                                   1355 ;       Signed compare of top two items.
      0005FC 05 DF                 1356         .word      LINK
                           0005FE  1357 LINK = . 
      0005FE 01                    1358         .byte      1
      0005FF 3C                    1359         .ascii     "<"
      000600                       1360 LESS:
      000600 A6 FF            [ 1] 1361         LD A,#0xFF  ;true
      000602 90 93            [ 1] 1362         LDW Y,X    ;D = n2
      000604 90 FE            [ 2] 1363         LDW Y,(Y)
      000606 90 BF 20         [ 2] 1364         LDW YTEMP,Y
      000609 1C 00 02         [ 2] 1365         ADDW X,#2
      00060C 90 93            [ 1] 1366         LDW Y,X
      00060E 90 FE            [ 2] 1367         LDW Y,(Y)
      000610 90 B3 20         [ 2] 1368         CPW Y,YTEMP     ;if n2 <> n1
      000613 2F 01            [ 1] 1369         JRSLT     LT1
      000615 4F               [ 1] 1370         CLR A
      000616 F7               [ 1] 1371 LT1:    LD (X),A
      000617 E7 01            [ 1] 1372         LD (1,X),A
      000619 81               [ 4] 1373 	RET     
                                   1374 
                                   1375 ;       MAX     ( n n -- n )
                                   1376 ;       Return greater of two top items.
      00061A 05 FE                 1377         .word      LINK
                           00061C  1378 LINK = . 
      00061C 03                    1379         .byte      3
      00061D 4D 41 58              1380         .ascii     "MAX"
      000620                       1381 MAX:
      000620 90 93            [ 1] 1382         LDW Y,X    ;D = n2
      000622 90 EE 02         [ 2] 1383         LDW Y,(2,Y)
      000625 90 BF 20         [ 2] 1384         LDW YTEMP,Y
      000628 90 93            [ 1] 1385         LDW Y,X
      00062A 90 FE            [ 2] 1386         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      00062C 90 B3 20         [ 2] 1387         CPW Y,YTEMP     ;if n2 <> n1
      00062F 2F 02            [ 1] 1388         JRSLT     MAX1
      000631 EF 02            [ 2] 1389         LDW (2,X),Y
      000633 1C 00 02         [ 2] 1390 MAX1:   ADDW X,#2
      000636 81               [ 4] 1391 	RET     
                                   1392 
                                   1393 ;       MIN     ( n n -- n )
                                   1394 ;       Return smaller of top two items.
      000637 06 1C                 1395         .word      LINK
                           000639  1396 LINK = . 
      000639 03                    1397         .byte      3
      00063A 4D 49 4E              1398         .ascii     "MIN"
      00063D                       1399 MIN:
      00063D 90 93            [ 1] 1400         LDW Y,X    ;D = n2
      00063F 90 EE 02         [ 2] 1401         LDW Y,(2,Y)
      000642 90 BF 20         [ 2] 1402         LDW YTEMP,Y
      000645 90 93            [ 1] 1403         LDW Y,X
      000647 90 FE            [ 2] 1404         LDW Y,(Y)
      000649 90 B3 20         [ 2] 1405         CPW Y,YTEMP     ;if n2 <> n1
      00064C 2C 02            [ 1] 1406         JRSGT     MIN1
      00064E EF 02            [ 2] 1407         LDW (2,X),Y
      000650 1C 00 02         [ 2] 1408 MIN1:	ADDW X,#2
      000653 81               [ 4] 1409 	RET     
                                   1410 
                                   1411 ;       WITHIN  ( u ul uh -- t )
                                   1412 ;       Return true if u is within
                                   1413 ;       range of ul and uh. ( ul <= u < uh )
      000654 06 39                 1414         .word      LINK
                           000656  1415 LINK = . 
      000656 06                    1416         .byte      6
      000657 57 49 54 48 49 4E     1417         .ascii     "WITHIN"
      00065D                       1418 WITHI:
      00065D CD 03 91         [ 4] 1419         CALL     OVER
      000660 CD 05 9B         [ 4] 1420         CALL     SUBB
      000663 CD 03 30         [ 4] 1421         CALL     TOR
      000666 CD 05 9B         [ 4] 1422         CALL     SUBB
      000669 CD 03 11         [ 4] 1423         CALL     RFROM
      00066C CC 05 E2         [ 2] 1424         JP     ULESS
                                   1425 
                                   1426 ;; Divide
                                   1427 
                                   1428 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1429 ;       Unsigned divide of a double by a
                                   1430 ;       single. Return mod and quotient.
      00066F 06 56                 1431         .word      LINK
                           000671  1432 LINK = . 
      000671 06                    1433         .byte      6
      000672 55 4D 2F 4D 4F 44     1434         .ascii     "UM/MOD"
      000678                       1435 UMMOD:
      000678 BF 1E            [ 2] 1436 	LDW XTEMP,X	; save stack pointer
      00067A FE               [ 2] 1437 	LDW X,(X)	; un
      00067B BF 20            [ 2] 1438 	LDW YTEMP,X     ; save un
      00067D 90 BE 1E         [ 2] 1439 	LDW Y,XTEMP	; stack pointer
      000680 90 EE 04         [ 2] 1440 	LDW Y,(4,Y)     ; Y=udl
      000683 BE 1E            [ 2] 1441 	LDW X,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000685 EE 02            [ 2] 1442 	LDW X,(2,X)	; X=udh
      000687 B3 20            [ 2] 1443 	CPW X,YTEMP
      000689 23 0F            [ 2] 1444 	JRULE MMSM1
      00068B BE 1E            [ 2] 1445 	LDW X,XTEMP
      00068D 1C 00 02         [ 2] 1446 	ADDW X,#2	; pop off 1 level
      000690 90 AE FF FF      [ 2] 1447 	LDW Y,#0xFFFF
      000694 FF               [ 2] 1448 	LDW (X),Y
      000695 90 5F            [ 1] 1449 	CLRW Y
      000697 EF 02            [ 2] 1450 	LDW (2,X),Y
      000699 81               [ 4] 1451 	RET
      00069A                       1452 MMSM1:
                           000001  1453 .if  PICATOUT_MOD 
                                   1454 ; take advantage of divw x,y when udh==0
      00069A 5D               [ 2] 1455         tnzw x  ; is udh==0?
      00069B 26 11            [ 1] 1456         jrne MMSM2 
      00069D 93               [ 1] 1457         ldw x,y    ;udl 
      00069E 90 BE 20         [ 2] 1458         ldw y,YTEMP ; divisor 
      0006A1 65               [ 2] 1459         divw x,y 
      0006A2 89               [ 2] 1460         pushw x     ; quotient 
      0006A3 BE 1E            [ 2] 1461         ldw x,XTEMP 
      0006A5 1C 00 02         [ 2] 1462         addw x,#CELLL 
      0006A8 EF 02            [ 2] 1463         ldw (2,x),y  ; ur
      0006AA 90 85            [ 2] 1464         popw y 
      0006AC FF               [ 2] 1465         ldw (x),y ; uq 
      0006AD 81               [ 4] 1466         ret 
      0006AE                       1467 MMSM2:        
                                   1468 .endif 
      0006AE A6 11            [ 1] 1469 	LD A,#17	; loop count
      0006B0                       1470 MMSM3:
      0006B0 B3 20            [ 2] 1471 	CPW X,YTEMP	; compare udh to un
      0006B2 25 04            [ 1] 1472 	JRULT MMSM4	; can't subtract
      0006B4 72 B0 00 20      [ 2] 1473 	SUBW X,YTEMP	; can subtract
      0006B8                       1474 MMSM4:
      0006B8 8C               [ 1] 1475 	CCF	; quotient bit
      0006B9 90 59            [ 2] 1476 	RLCW Y	; rotate into quotient
      0006BB 59               [ 2] 1477 	RLCW X	; rotate into remainder
      0006BC 4A               [ 1] 1478 	DEC A	; repeat
      0006BD 22 F1            [ 1] 1479 	JRUGT MMSM3
      0006BF 57               [ 2] 1480 	SRAW X
      0006C0 BF 20            [ 2] 1481 	LDW YTEMP,X	; done, save remainder
      0006C2 BE 1E            [ 2] 1482 	LDW X,XTEMP
      0006C4 1C 00 02         [ 2] 1483 	ADDW X,#2	; drop
      0006C7 FF               [ 2] 1484 	LDW (X),Y
      0006C8 90 BE 20         [ 2] 1485 	LDW Y,YTEMP	; save quotient
      0006CB EF 02            [ 2] 1486 	LDW (2,X),Y
      0006CD 81               [ 4] 1487 	RET
                                   1488 	
                                   1489 ;       M/MOD   ( d n -- r q )
                                   1490 ;       Signed floored divide of double by
                                   1491 ;       single. Return mod and quotient.
      0006CE 06 71                 1492         .word      LINK
                           0006D0  1493 LINK = . 
      0006D0 05                    1494         .byte      5
      0006D1 4D 2F 4D 4F 44        1495         .ascii     "M/MOD"
      0006D6                       1496 MSMOD:  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0006D6 CD 03 67         [ 4] 1497         CALL	DUPP
      0006D9 CD 03 A0         [ 4] 1498         CALL	ZLESS
      0006DC CD 03 67         [ 4] 1499         CALL	DUPP
      0006DF CD 03 30         [ 4] 1500         CALL	TOR
      0006E2 CD 02 6B         [ 4] 1501         CALL	QBRAN
      0006E5 06 F3                 1502         .word	MMOD1
      0006E7 CD 05 68         [ 4] 1503         CALL	NEGAT
      0006EA CD 03 30         [ 4] 1504         CALL	TOR
      0006ED CD 05 7A         [ 4] 1505         CALL	DNEGA
      0006F0 CD 03 11         [ 4] 1506         CALL	RFROM
      0006F3 CD 03 30         [ 4] 1507 MMOD1:	CALL	TOR
      0006F6 CD 03 67         [ 4] 1508         CALL	DUPP
      0006F9 CD 03 A0         [ 4] 1509         CALL	ZLESS
      0006FC CD 02 6B         [ 4] 1510         CALL	QBRAN
      0006FF 07 07                 1511         .word	MMOD2
      000701 CD 03 24         [ 4] 1512         CALL	RAT
      000704 CD 05 3D         [ 4] 1513         CALL	PLUS
      000707 CD 03 11         [ 4] 1514 MMOD2:	CALL	RFROM
      00070A CD 06 78         [ 4] 1515         CALL	UMMOD
      00070D CD 03 11         [ 4] 1516         CALL	RFROM
      000710 CD 02 6B         [ 4] 1517         CALL	QBRAN
      000713 07 1E                 1518         .word	MMOD3
      000715 CD 03 77         [ 4] 1519         CALL	SWAPP
      000718 CD 05 68         [ 4] 1520         CALL	NEGAT
      00071B CD 03 77         [ 4] 1521         CALL	SWAPP
      00071E 81               [ 4] 1522 MMOD3:	RET
                                   1523 
                                   1524 ;       /MOD    ( n n -- r q )
                                   1525 ;       Signed divide. Return mod and quotient.
      00071F 06 D0                 1526         .word      LINK
                           000721  1527 LINK = . 
      000721 04                    1528         .byte      4
      000722 2F 4D 4F 44           1529         .ascii     "/MOD"
      000726                       1530 SLMOD:
      000726 CD 03 91         [ 4] 1531         CALL	OVER
      000729 CD 03 A0         [ 4] 1532         CALL	ZLESS
      00072C CD 03 77         [ 4] 1533         CALL	SWAPP
      00072F CC 06 D6         [ 2] 1534         JP	MSMOD
                                   1535 
                                   1536 ;       MOD     ( n n -- r )
                                   1537 ;       Signed divide. Return mod only.
      000732 07 21                 1538         .word      LINK
                           000734  1539 LINK = . 
      000734 03                    1540         .byte      3
      000735 4D 4F 44              1541         .ascii     "MOD"
      000738                       1542 MODD:
      000738 CD 07 26         [ 4] 1543 	CALL	SLMOD
      00073B CC 03 5D         [ 2] 1544 	JP	DROP
                                   1545 
                                   1546 ;       /       ( n n -- q )
                                   1547 ;       Signed divide. Return quotient only.
      00073E 07 34                 1548         .word      LINK
                           000740  1549 LINK = . 
      000740 01                    1550         .byte      1
      000741 2F                    1551         .ascii     "/"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      000742                       1552 SLASH:
      000742 CD 07 26         [ 4] 1553         CALL	SLMOD
      000745 CD 03 77         [ 4] 1554         CALL	SWAPP
      000748 CC 03 5D         [ 2] 1555         JP	DROP
                                   1556 
                                   1557 ;; Multiply
                                   1558 
                                   1559 ;       UM*     ( u u -- ud )
                                   1560 ;       Unsigned multiply. Return double product.
      00074B 07 40                 1561         .word      LINK
                           00074D  1562 LINK = . 
      00074D 03                    1563         .byte      3
      00074E 55 4D 2A              1564         .ascii     "UM*"
      000751                       1565 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1566 .if PICATOUT_MOD 
                                   1567 ; take advantage of SP addressing modes
                                   1568 ; these PRODx in RAM are not required
                                   1569 ; the product is kept on stack as local variable 
                                   1570         ;; bytes offset on data stack 
                           000002  1571         da=2 
                           000003  1572         db=3 
                           000000  1573         dc=0 
                           000001  1574         dd=1 
                                   1575         ;; product bytes offset on return stack 
                           000001  1576         UD1=1  ; ud bits 31..24
                           000002  1577         UD2=2  ; ud bits 23..16
                           000003  1578         UD3=3  ; ud bits 15..8 
                           000004  1579         UD4=4  ; ud bits 7..0 
                                   1580         ;; local variable for product set to zero   
      000751 90 5F            [ 1] 1581         clrw y 
      000753 90 89            [ 2] 1582         pushw y  ; bits 15..0
      000755 90 89            [ 2] 1583         pushw y  ; bits 31..16 
      000757 E6 03            [ 1] 1584         ld a,(db,x) ; b 
      000759 90 97            [ 1] 1585         ld yl,a 
      00075B E6 01            [ 1] 1586         ld a,(dd,x)   ; d
      00075D 90 42            [ 4] 1587         mul y,a    ; b*d  
      00075F 17 03            [ 2] 1588         ldw (UD3,sp),y ; lowest weight product 
      000761 E6 03            [ 1] 1589         ld a,(db,x)
      000763 90 97            [ 1] 1590         ld yl,a 
      000765 E6 00            [ 1] 1591         ld a,(dc,x)
      000767 90 42            [ 4] 1592         mul y,a  ; b*c 
                                   1593         ;;; do the partial sum 
      000769 72 F9 02         [ 2] 1594         addw y,(UD2,sp)
      00076C 4F               [ 1] 1595         clr a 
      00076D 49               [ 1] 1596         rlc a
      00076E 6B 01            [ 1] 1597         ld (UD1,sp),a 
      000770 17 02            [ 2] 1598         ldw (UD2,sp),y 
      000772 E6 02            [ 1] 1599         ld a,(da,x)
      000774 90 97            [ 1] 1600         ld yl,a 
      000776 E6 01            [ 1] 1601         ld a,(dd,x)
      000778 90 42            [ 4] 1602         mul y,a   ; a*d 
                                   1603         ;; do partial sum 
      00077A 72 F9 02         [ 2] 1604         addw y,(UD2,sp)
      00077D 4F               [ 1] 1605         clr a 
      00077E 19 01            [ 1] 1606         adc a,(UD1,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      000780 6B 01            [ 1] 1607         ld (UD1,sp),a  
      000782 17 02            [ 2] 1608         ldw (UD2,sp),y 
      000784 E6 02            [ 1] 1609         ld a,(da,x)
      000786 90 97            [ 1] 1610         ld yl,a 
      000788 E6 00            [ 1] 1611         ld a,(dc,x)
      00078A 90 42            [ 4] 1612         mul y,a  ;  a*c highest weight product 
                                   1613         ;;; do partial sum 
      00078C 72 F9 01         [ 2] 1614         addw y,(UD1,sp)
      00078F FF               [ 2] 1615         ldw (x),y  ; udh 
      000790 16 03            [ 2] 1616         ldw y,(UD3,sp)
      000792 EF 02            [ 2] 1617         ldw (2,x),y  ; udl  
      000794 5B 04            [ 2] 1618         addw sp,#4 ; drop local variable 
      000796 81               [ 4] 1619         ret  
                           000000  1620 .else
                                   1621 	LD A,(2,X)	; b
                                   1622 	LD YL,A
                                   1623 	LD A,(X)	; d
                                   1624 	MUL Y,A
                                   1625 	LDW PROD1,Y
                                   1626 	LD A,(3,X)	; a
                                   1627 	LD YL,A
                                   1628 	LD A,(X)	; d
                                   1629 	MUL Y,A
                                   1630 	LDW PROD2,Y
                                   1631 	LD A,(2,X)	; b
                                   1632 	LD YL,A
                                   1633 	LD A,(1,X)	; c
                                   1634 	MUL Y,A
                                   1635 	LDW PROD3,Y
                                   1636 	LD A,(3,X)	; a
                                   1637 	LD YL,A
                                   1638 	LD A,(1,X)	; c
                                   1639 	MUL Y,A	; least signifiant product
                                   1640 	CLR A
                                   1641 	RRWA Y
                                   1642 	LD (3,X),A	; store least significant byte
                                   1643 	ADDW Y,PROD3
                                   1644 	CLR A
                                   1645 	ADC A,#0	; save carry
                                   1646 	LD CARRY,A
                                   1647 	ADDW Y,PROD2
                                   1648 	LD A,CARRY
                                   1649 	ADC A,#0	; add 2nd carry
                                   1650 	LD CARRY,A
                                   1651 	CLR A
                                   1652 	RRWA Y
                                   1653 	LD (2,X),A	; 2nd product byte
                                   1654 	ADDW Y,PROD1
                                   1655 	RRWA Y
                                   1656 	LD (1,X),A	; 3rd product byte
                                   1657 	RRWA Y  	; 4th product byte now in A
                                   1658 	ADC A,CARRY	; fill in carry bits
                                   1659 	LD (X),A
                                   1660 	RET
                                   1661 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



                                   1662 
                                   1663 
                                   1664 ;       *       ( n n -- n )
                                   1665 ;       Signed multiply. Return single product.
      000797 07 4D                 1666         .word      LINK
                           000799  1667 LINK = . 
      000799 01                    1668         .byte      1
      00079A 2A                    1669         .ascii     "*"
      00079B                       1670 STAR:
      00079B CD 07 51         [ 4] 1671 	CALL	UMSTA
      00079E CC 03 5D         [ 2] 1672 	JP	DROP
                                   1673 
                                   1674 ;       M*      ( n n -- d )
                                   1675 ;       Signed multiply. Return double product.
      0007A1 07 99                 1676         .word      LINK
                           0007A3  1677 LINK = . 
      0007A3 02                    1678         .byte      2
      0007A4 4D 2A                 1679         .ascii     "M*"
      0007A6                       1680 MSTAR:      
      0007A6 CD 05 28         [ 4] 1681         CALL	DDUP
      0007A9 CD 03 DC         [ 4] 1682         CALL	XORR
      0007AC CD 03 A0         [ 4] 1683         CALL	ZLESS
      0007AF CD 03 30         [ 4] 1684         CALL	TOR
      0007B2 CD 05 B5         [ 4] 1685         CALL	ABSS
      0007B5 CD 03 77         [ 4] 1686         CALL	SWAPP
      0007B8 CD 05 B5         [ 4] 1687         CALL	ABSS
      0007BB CD 07 51         [ 4] 1688         CALL	UMSTA
      0007BE CD 03 11         [ 4] 1689         CALL	RFROM
      0007C1 CD 02 6B         [ 4] 1690         CALL	QBRAN
      0007C4 07 C9                 1691         .word	MSTA1
      0007C6 CD 05 7A         [ 4] 1692         CALL	DNEGA
      0007C9 81               [ 4] 1693 MSTA1:	RET
                                   1694 
                                   1695 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1696 ;       Multiply n1 and n2, then divide
                                   1697 ;       by n3. Return mod and quotient.
      0007CA 07 A3                 1698         .word      LINK
                           0007CC  1699 LINK = . 
      0007CC 05                    1700         .byte      5
      0007CD 2A 2F 4D 4F 44        1701         .ascii     "*/MOD"
      0007D2                       1702 SSMOD:
      0007D2 CD 03 30         [ 4] 1703         CALL     TOR
      0007D5 CD 07 A6         [ 4] 1704         CALL     MSTAR
      0007D8 CD 03 11         [ 4] 1705         CALL     RFROM
      0007DB CC 06 D6         [ 2] 1706         JP     MSMOD
                                   1707 
                                   1708 ;       */      ( n1 n2 n3 -- q )
                                   1709 ;       Multiply n1 by n2, then divide
                                   1710 ;       by n3. Return quotient only.
      0007DE 07 CC                 1711         .word      LINK
                           0007E0  1712 LINK = . 
      0007E0 02                    1713         .byte      2
      0007E1 2A 2F                 1714         .ascii     "*/"
      0007E3                       1715 STASL:
      0007E3 CD 07 D2         [ 4] 1716         CALL	SSMOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0007E6 CD 03 77         [ 4] 1717         CALL	SWAPP
      0007E9 CC 03 5D         [ 2] 1718         JP	DROP
                                   1719 
                                   1720 ;; Miscellaneous
                                   1721 
                                   1722 ;       CELL+   ( a -- a )
                                   1723 ;       Add cell size in byte to address.
      0007EC 07 E0                 1724         .word      LINK
                           0007EE  1725 LINK = . 
      0007EE 02                    1726         .byte       2
      0007EF 32 2B                 1727         .ascii     "2+"
      0007F1                       1728 CELLP:
      0007F1 90 93            [ 1] 1729         LDW Y,X
      0007F3 90 FE            [ 2] 1730 	LDW Y,(Y)
      0007F5 72 A9 00 02      [ 2] 1731         ADDW Y,#CELLL 
      0007F9 FF               [ 2] 1732         LDW (X),Y
      0007FA 81               [ 4] 1733         RET
                                   1734 
                                   1735 ;       CELL-   ( a -- a )
                                   1736 ;       Subtract 2 from address.
      0007FB 07 EE                 1737         .word      LINK
                           0007FD  1738 LINK = . 
      0007FD 02                    1739         .byte       2
      0007FE 32 2D                 1740         .ascii     "2-"
      000800                       1741 CELLM:
      000800 90 93            [ 1] 1742         LDW Y,X
      000802 90 FE            [ 2] 1743 	LDW Y,(Y)
      000804 72 A2 00 02      [ 2] 1744         SUBW Y,#CELLL
      000808 FF               [ 2] 1745         LDW (X),Y
      000809 81               [ 4] 1746         RET
                                   1747 
                                   1748 ;       CELLS   ( n -- n )
                                   1749 ;       Multiply tos by 2.
      00080A 07 FD                 1750         .word      LINK
                           00080C  1751 LINK = . 
      00080C 02                    1752         .byte       2
      00080D 32 2A                 1753         .ascii     "2*"
      00080F                       1754 CELLS:
      00080F 90 93            [ 1] 1755         LDW Y,X
      000811 90 FE            [ 2] 1756 	LDW Y,(Y)
      000813 90 58            [ 2] 1757         SLAW Y
      000815 FF               [ 2] 1758         LDW (X),Y
      000816 81               [ 4] 1759         RET
                                   1760 
                                   1761 ;       1+      ( a -- a )
                                   1762 ;       Add cell size in byte to address.
      000817 08 0C                 1763         .word      LINK
                           000819  1764 LINK = . 
      000819 02                    1765         .byte      2
      00081A 31 2B                 1766         .ascii     "1+"
      00081C                       1767 ONEP:
      00081C 90 93            [ 1] 1768         LDW Y,X
      00081E 90 FE            [ 2] 1769 	LDW Y,(Y)
      000820 90 5C            [ 2] 1770         INCW Y
      000822 FF               [ 2] 1771         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      000823 81               [ 4] 1772         RET
                                   1773 
                                   1774 ;       1-      ( a -- a )
                                   1775 ;       Subtract 2 from address.
      000824 08 19                 1776         .word      LINK
                           000826  1777 LINK = . 
      000826 02                    1778         .byte      2
      000827 31 2D                 1779         .ascii     "1-"
      000829                       1780 ONEM:
      000829 90 93            [ 1] 1781         LDW Y,X
      00082B 90 FE            [ 2] 1782 	LDW Y,(Y)
      00082D 90 5A            [ 2] 1783         DECW Y
      00082F FF               [ 2] 1784         LDW (X),Y
      000830 81               [ 4] 1785         RET
                                   1786 
                                   1787 ;       2/      ( n -- n )
                                   1788 ;       Multiply tos by 2.
      000831 08 26                 1789         .word      LINK
                           000833  1790 LINK = . 
      000833 02                    1791         .byte      2
      000834 32 2F                 1792         .ascii     "2/"
      000836                       1793 TWOSL:
      000836 90 93            [ 1] 1794         LDW Y,X
      000838 90 FE            [ 2] 1795 	LDW Y,(Y)
      00083A 90 57            [ 2] 1796         SRAW Y
      00083C FF               [ 2] 1797         LDW (X),Y
      00083D 81               [ 4] 1798         RET
                                   1799 
                                   1800 ;       BL      ( -- 32 )
                                   1801 ;       Return 32,  blank character.
      00083E 08 33                 1802         .word      LINK
                           000840  1803 LINK = . 
      000840 02                    1804         .byte      2
      000841 42 4C                 1805         .ascii     "BL"
      000843                       1806 BLANK:
      000843 1D 00 02         [ 2] 1807         SUBW X,#2
      000846 90 AE 00 20      [ 2] 1808 	LDW Y,#32
      00084A FF               [ 2] 1809         LDW (X),Y
      00084B 81               [ 4] 1810         RET
                                   1811 
                                   1812 ;         0     ( -- 0)
                                   1813 ;         Return 0.
      00084C 08 40                 1814         .word      LINK
                           00084E  1815 LINK = . 
      00084E 01                    1816         .byte       1
      00084F 30                    1817         .ascii     "0"
      000850                       1818 ZERO:
      000850 1D 00 02         [ 2] 1819         SUBW X,#2
      000853 90 5F            [ 1] 1820 	CLRW Y
      000855 FF               [ 2] 1821         LDW (X),Y
      000856 81               [ 4] 1822         RET
                                   1823 
                                   1824 ;         1     ( -- 1)
                                   1825 ;         Return 1.
      000857 08 4E                 1826         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                           000859  1827 LINK = . 
      000859 01                    1828         .byte       1
      00085A 31                    1829         .ascii     "1"
      00085B                       1830 ONE:
      00085B 1D 00 02         [ 2] 1831         SUBW X,#2
      00085E 90 AE 00 01      [ 2] 1832 	LDW Y,#1
      000862 FF               [ 2] 1833         LDW (X),Y
      000863 81               [ 4] 1834         RET
                                   1835 
                                   1836 ;         -1    ( -- -1)
                                   1837 ;         Return 32,  blank character.
      000864 08 59                 1838         .word      LINK
                           000866  1839 LINK = . 
      000866 02                    1840         .byte       2
      000867 2D 31                 1841         .ascii     "-1"
      000869                       1842 MONE:
      000869 1D 00 02         [ 2] 1843         SUBW X,#2
      00086C 90 AE FF FF      [ 2] 1844 	LDW Y,#0xFFFF
      000870 FF               [ 2] 1845         LDW (X),Y
      000871 81               [ 4] 1846         RET
                                   1847 
                                   1848 ;       >CHAR   ( c -- c )
                                   1849 ;       Filter non-printing characters.
      000872 08 66                 1850         .word      LINK
                           000874  1851 LINK = . 
      000874 05                    1852         .byte      5
      000875 3E 43 48 41 52        1853         .ascii     ">CHAR"
      00087A                       1854 TCHAR:
                           000001  1855 .if CONVERT_TO_CODE
      00087A E6 01            [ 1] 1856         ld a,(1,x)
      00087C A1 20            [ 1] 1857         cp a,#32  
      00087E 2B 05            [ 1] 1858         jrmi 1$ 
      000880 A1 7F            [ 1] 1859         cp a,#127 
      000882 2A 01            [ 1] 1860         jrpl 1$ 
      000884 81               [ 4] 1861         ret 
      000885 A6 5F            [ 1] 1862 1$:     ld a,#'_ 
      000887 E7 01            [ 1] 1863         ld (1,x),a 
      000889 81               [ 4] 1864         ret 
                           000000  1865 .else
                                   1866         CALL     DOLIT
                                   1867         .word       0x7F
                                   1868         CALL     ANDD
                                   1869         CALL     DUPP    ;mask msb
                                   1870         CALL     DOLIT
                                   1871         .word      127
                                   1872         CALL     BLANK
                                   1873         CALL     WITHI   ;check for printable
                                   1874         CALL     QBRAN
                                   1875         .word    TCHA1
                                   1876         CALL     DROP
                                   1877         CALL     DOLIT
                                   1878         .word     0x5F		; "_"     ;replace non-printables
                                   1879 .endif 
      00088A 81               [ 4] 1880 TCHA1:  RET
                                   1881 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1882 ;       DEPTH   ( -- n )
                                   1883 ;       Return  depth of  data stack.
      00088B 08 74                 1884         .word      LINK
                           00088D  1885 LINK = . 
      00088D 05                    1886         .byte      5
      00088E 44 45 50 54 48        1887         .ascii     "DEPTH"
      000893                       1888 DEPTH: 
      000893 90 BE 26         [ 2] 1889         LDW Y,SP0    ;save data stack ptr
      000896 BF 1E            [ 2] 1890 	LDW XTEMP,X
      000898 72 B2 00 1E      [ 2] 1891         SUBW Y,XTEMP     ;#bytes = SP0 - X
      00089C 90 57            [ 2] 1892         SRAW Y    ;Y = #stack items
                           000001  1893 .if PICATOUT_MOD
                                   1894 ; why ? 
                                   1895 ;      	DECW Y
                                   1896 .endif 
      00089E 1D 00 02         [ 2] 1897 	SUBW X,#2
      0008A1 FF               [ 2] 1898         LDW (X),Y     ; if neg, underflow
      0008A2 81               [ 4] 1899         RET
                                   1900 
                                   1901 ;       PICK    ( ... +n -- ... w )
                                   1902 ;       Copy  nth stack item to tos.
      0008A3 08 8D                 1903         .word      LINK
                           0008A5  1904 LINK = . 
      0008A5 04                    1905         .byte      4
      0008A6 50 49 43 4B           1906         .ascii     "PICK"
      0008AA                       1907 PICK:
      0008AA 90 93            [ 1] 1908         LDW Y,X   ;D = n1
      0008AC 90 FE            [ 2] 1909         LDW Y,(Y)
      0008AE 90 58            [ 2] 1910         SLAW Y
      0008B0 BF 1E            [ 2] 1911         LDW XTEMP,X
      0008B2 72 B9 00 1E      [ 2] 1912         ADDW Y,XTEMP
      0008B6 90 FE            [ 2] 1913         LDW Y,(Y)
      0008B8 FF               [ 2] 1914         LDW (X),Y
      0008B9 81               [ 4] 1915         RET
                                   1916 
                                   1917 ;; Memory access
                                   1918 
                                   1919 ;       +!      ( n a -- )
                                   1920 ;       Add n to  contents at address a.
      0008BA 08 A5                 1921         .word      LINK
                           0008BC  1922 LINK = . 
      0008BC 02                    1923         .byte      2
      0008BD 2B 21                 1924         .ascii     "+!"
      0008BF                       1925 PSTOR:
                           000001  1926 .if CONVERT_TO_CODE
      0008BF 90 93            [ 1] 1927         ldw y,x 
      0008C1 90 FE            [ 2] 1928         ldw y,(y)
      0008C3 90 BF 20         [ 2] 1929         ldw YTEMP,y  ; address
      0008C6 90 FE            [ 2] 1930         ldw y,(y)  
      0008C8 90 89            [ 2] 1931         pushw y  ; value at address 
      0008CA 90 93            [ 1] 1932         ldw y,x 
      0008CC 90 EE 02         [ 2] 1933         ldw y,(2,y) ; n 
      0008CF 72 F9 01         [ 2] 1934         addw y,(1,sp) ; n+value
      0008D2 91 CF 20         [ 5] 1935         ldw [YTEMP],y ;  a!
      0008D5 90 85            [ 2] 1936         popw y    ;drop local var
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0008D7 1C 00 04         [ 2] 1937         addw x,#4 ; DDROP 
      0008DA 81               [ 4] 1938         ret 
                           000000  1939 .else
                                   1940         CALL	SWAPP
                                   1941         CALL	OVER
                                   1942         CALL	AT
                                   1943         CALL	PLUS
                                   1944         CALL	SWAPP
                                   1945         JP	STORE
                                   1946 .endif 
                                   1947 
                                   1948 ;       2!      ( d a -- )
                                   1949 ;       Store  double integer to address a.
      0008DB 08 BC                 1950         .word      LINK
                           0008DD  1951 LINK = . 
      0008DD 02                    1952         .byte      2
      0008DE 32 21                 1953         .ascii     "2!"
      0008E0                       1954 DSTOR:
                           000001  1955 .if CONVERT_TO_CODE
      0008E0 90 93            [ 1] 1956         ldw y,x 
      0008E2 90 FE            [ 2] 1957         ldw y,(y)
      0008E4 90 BF 20         [ 2] 1958         ldw YTEMP,y ; address 
      0008E7 1C 00 02         [ 2] 1959         addw x,#CELLL ; drop a 
      0008EA 90 93            [ 1] 1960         ldw y,x 
      0008EC 90 FE            [ 2] 1961         ldw y,(y) ; hi word 
      0008EE 89               [ 2] 1962         pushw x 
      0008EF EE 02            [ 2] 1963         ldw x,(2,x) ; lo word 
      0008F1 91 CF 20         [ 5] 1964         ldw [YTEMP],y
      0008F4 90 93            [ 1] 1965         ldw y,x 
      0008F6 AE 00 02         [ 2] 1966         ldw x,#2 
      0008F9 92 DF 20         [ 5] 1967         ldw ([YTEMP],x),y 
      0008FC 85               [ 2] 1968         popw x 
      0008FD 1C 00 04         [ 2] 1969         addw x,#4 ; DDROP 
      000900 81               [ 4] 1970         ret 
                           000000  1971 .else
                                   1972         CALL	SWAPP
                                   1973         CALL	OVER
                                   1974         CALL	STORE
                                   1975         CALL	CELLP
                                   1976         JP	STORE
                                   1977 .endif 
                                   1978 ;       2@      ( a -- d )
                                   1979 ;       Fetch double integer from address a.
      000901 08 DD                 1980         .word      LINK
                           000903  1981 LINK = . 
      000903 02                    1982         .byte      2
      000904 32 40                 1983         .ascii     "2@"
      000906                       1984 DAT:
                           000001  1985 .if CONVERT_TO_CODE
      000906 90 93            [ 1] 1986         ldw y,x 
      000908 90 FE            [ 2] 1987         ldw y,(y) ;address 
      00090A 90 BF 20         [ 2] 1988         ldw YTEMP,y 
      00090D 1D 00 02         [ 2] 1989         subw x,#CELLL ; space for udh 
      000910 91 CE 20         [ 5] 1990         ldw y,[YTEMP] ; udh 
      000913 FF               [ 2] 1991         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000914 90 AE 00 02      [ 2] 1992         ldw y,#2
      000918 91 DE 20         [ 5] 1993         ldw y,([YTEMP],y) ; udl 
      00091B EF 02            [ 2] 1994         ldw (2,x),y
      00091D 81               [ 4] 1995         ret 
                           000000  1996 .else 
                                   1997         CALL	DUPP
                                   1998         CALL	CELLP
                                   1999         CALL	AT
                                   2000         CALL	SWAPP
                                   2001         JP	AT
                                   2002 .endif 
                                   2003 
                                   2004 ;       COUNT   ( b -- b +n )
                                   2005 ;       Return count byte of a string
                                   2006 ;       and add 1 to byte address.
      00091E 09 03                 2007         .word      LINK
                           000920  2008 LINK = . 
      000920 05                    2009         .byte      5
      000921 43 4F 55 4E 54        2010         .ascii     "COUNT"
      000926                       2011 COUNT:
                           000001  2012 .if CONVERT_TO_CODE
      000926 90 93            [ 1] 2013         ldw y,x 
      000928 90 FE            [ 2] 2014         ldw y,(y) ; address 
      00092A 90 F6            [ 1] 2015         ld a,(y)  ; count 
      00092C 90 5C            [ 2] 2016         incw y 
      00092E FF               [ 2] 2017         ldw (x),y 
      00092F 1D 00 02         [ 2] 2018         subw x,#CELLL 
      000932 E7 01            [ 1] 2019         ld (1,x),a 
      000934 7F               [ 1] 2020         clr (x)
      000935 81               [ 4] 2021         ret 
                           000000  2022 .else 
                                   2023         CALL     DUPP
                                   2024         CALL     ONEP
                                   2025         CALL     SWAPP
                                   2026         JP     CAT
                                   2027 .endif 
                                   2028 
                                   2029 ;       HERE    ( -- a )
                                   2030 ;       Return  top of  variables
      000936 09 20                 2031         .word      LINK
                           000938  2032 LINK = . 
      000938 04                    2033         .byte      4
      000939 48 45 52 45           2034         .ascii     "HERE"
      00093D                       2035 HERE:
                           000001  2036 .if CONVERT_TO_CODE
      00093D 90 AE 00 16      [ 2] 2037       	ldw y,#UVP 
      000941 90 FE            [ 2] 2038         ldw y,(y)
      000943 1D 00 02         [ 2] 2039         subw x,#CELLL 
      000946 FF               [ 2] 2040         ldw (x),y 
      000947 81               [ 4] 2041         ret 
                           000000  2042 .else
                                   2043         CALL     VPP
                                   2044         JP     AT
                                   2045 .endif 
                                   2046 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2047 ;       PAD     ( -- a )
                                   2048 ;       Return address of text buffer
                                   2049 ;       above  code dictionary.
      000948 09 38                 2050         .word      LINK
                           00094A  2051 LINK = . 
      00094A 03                    2052         .byte      3
      00094B 50 41 44              2053         .ascii     "PAD"
      00094E                       2054 PAD:
      00094E CD 09 3D         [ 4] 2055         CALL     HERE
      000951 CD 02 38         [ 4] 2056         CALL     DOLIT
      000954 00 50                 2057         .word      80
      000956 CC 05 3D         [ 2] 2058         JP     PLUS
                                   2059 
                                   2060 ;       TIB     ( -- a )
                                   2061 ;       Return address of terminal input buffer.
      000959 09 4A                 2062         .word      LINK
                           00095B  2063 LINK = . 
      00095B 03                    2064         .byte      3
      00095C 54 49 42              2065         .ascii     "TIB"
      00095F                       2066 TIB:
      00095F CD 04 52         [ 4] 2067         CALL     NTIB
      000962 CD 07 F1         [ 4] 2068         CALL     CELLP
      000965 CC 02 C0         [ 2] 2069         JP     AT
                                   2070 
                                   2071 ;       @EXECUTE        ( a -- )
                                   2072 ;       Execute vector stored in address a.
      000968 09 5B                 2073         .word      LINK
                           00096A  2074 LINK = . 
      00096A 08                    2075         .byte      8
      00096B 40 45 58 45 43 55 54  2076         .ascii     "@EXECUTE"
             45
      000973                       2077 ATEXE:
      000973 CD 02 C0         [ 4] 2078         CALL     AT
      000976 CD 04 EC         [ 4] 2079         CALL     QDUP    ;?address or zero
      000979 CD 02 6B         [ 4] 2080         CALL     QBRAN
      00097C 09 81                 2081         .word      EXE1
      00097E CD 02 92         [ 4] 2082         CALL     EXECU   ;execute if non-zero
      000981 81               [ 4] 2083 EXE1:   RET     ;do nothing if zero
                                   2084 
                                   2085 ;       CMOVE   ( b1 b2 u -- )
                                   2086 ;       Copy u bytes from b1 to b2.
      000982 09 6A                 2087         .word      LINK
                           000984  2088 LINK = . 
      000984 05                    2089         .byte      5
      000985 43 4D 4F 56 45        2090         .ascii     "CMOVE"
      00098A                       2091 CMOVE:
      00098A CD 03 30         [ 4] 2092         CALL	TOR
      00098D CD 02 82         [ 4] 2093         CALL	BRAN
      000990 09 AA                 2094         .word	CMOV2
      000992 CD 03 30         [ 4] 2095 CMOV1:	CALL	TOR
      000995 CD 03 67         [ 4] 2096         CALL	DUPP
      000998 CD 02 DE         [ 4] 2097         CALL	CAT
      00099B CD 03 24         [ 4] 2098         CALL	RAT
      00099E CD 02 CD         [ 4] 2099         CALL	CSTOR
      0009A1 CD 08 1C         [ 4] 2100         CALL	ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      0009A4 CD 03 11         [ 4] 2101         CALL	RFROM
      0009A7 CD 08 1C         [ 4] 2102         CALL	ONEP
      0009AA CD 02 4C         [ 4] 2103 CMOV2:	CALL	DONXT
      0009AD 09 92                 2104         .word	CMOV1
      0009AF CC 05 1D         [ 2] 2105         JP	DDROP
                                   2106 
                                   2107 ;       FILL    ( b u c -- )
                                   2108 ;       Fill u bytes of character c
                                   2109 ;       to area beginning at b.
      0009B2 09 84                 2110         .word       LINK
                           0009B4  2111 LINK = . 
      0009B4 04                    2112         .byte       4
      0009B5 46 49 4C 4C           2113         .ascii     "FILL"
      0009B9                       2114 FILL:
                           000001  2115 .if CONVERT_TO_CODE
      0009B9 90 93            [ 1] 2116         ldw y,x 
      0009BB 90 E6 01         [ 1] 2117         ld a,(1,y) ; c 
      0009BE 1C 00 02         [ 2] 2118         addw x,#CELLL ; drop c 
      0009C1 90 93            [ 1] 2119         ldw y,x 
      0009C3 90 FE            [ 2] 2120         ldw y,(y) ; count
      0009C5 90 89            [ 2] 2121         pushw y 
      0009C7 1C 00 02         [ 2] 2122         addw x,#CELLL ; drop u 
      0009CA 90 93            [ 1] 2123         ldw y,x 
      0009CC 1C 00 02         [ 2] 2124         addw x,#CELLL ; drop b 
      0009CF 90 FE            [ 2] 2125         ldw y,(y) ; address
      0009D1 90 BF 20         [ 2] 2126         ldw YTEMP,y
      0009D4 90 85            [ 2] 2127         popw y ; count 
      0009D6                       2128 FILL1:  
      0009D6 92 C7 20         [ 4] 2129         ld [YTEMP],a 
      0009D9 3C 21            [ 1] 2130         inc YTEMP+1
      0009DB 24 02            [ 1] 2131         jrnc FILL2 
      0009DD 3C 20            [ 1] 2132         inc YTEMP
      0009DF                       2133 FILL2: 
      0009DF 90 5A            [ 2] 2134         decw y ; count 
      0009E1 26 F3            [ 1] 2135         jrne FILL1  
      0009E3 81               [ 4] 2136         ret 
                           000000  2137 .else 
                                   2138         CALL	SWAPP
                                   2139         CALL	TOR
                                   2140         CALL	SWAPP
                                   2141         CALL	BRAN
                                   2142         .word	FILL2
                                   2143 FILL1:	CALL	DDUP
                                   2144         CALL	CSTOR
                                   2145         CALL	ONEP
                                   2146 FILL2:	CALL	DONXT
                                   2147         .word	FILL1
                                   2148         JP	DDROP
                                   2149 .endif
                                   2150 
                                   2151 ;       ERASE   ( b u -- )
                                   2152 ;       Erase u bytes beginning at b.
      0009E4 09 B4                 2153         .word      LINK
                           0009E6  2154 LINK = . 
      0009E6 05                    2155         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0009E7 45 52 41 53 45        2156         .ascii     "ERASE"
      0009EC                       2157 ERASE:
                           000001  2158 .if CONVERT_TO_CODE
      0009EC 90 5F            [ 1] 2159         clrw y 
      0009EE 1D 00 02         [ 2] 2160         subw x,#CELLL 
      0009F1 FF               [ 2] 2161         ldw (x),y 
      0009F2 CC 09 B9         [ 2] 2162         jp FILL 
                           000000  2163 .else 
                                   2164         CALL     ZERO
                                   2165         JP     FILL
                                   2166 .endif 
                                   2167 ;       PACK0x   ( b u a -- a )
                                   2168 ;       Build a counted string with
                                   2169 ;       u characters from b. Null fill.
      0009F5 09 E6                 2170         .word      LINK
                           0009F7  2171 LINK = . 
      0009F7 05                    2172         .byte      5
      0009F8 50 41 43 4B 30 58     2173         .ascii     "PACK0X"
      0009FE                       2174 PACKS:
      0009FE CD 03 67         [ 4] 2175         CALL     DUPP
      000A01 CD 03 30         [ 4] 2176         CALL     TOR     ;strings only on cell boundary
      000A04 CD 05 28         [ 4] 2177         CALL     DDUP
      000A07 CD 02 CD         [ 4] 2178         CALL     CSTOR
      000A0A CD 08 1C         [ 4] 2179         CALL     ONEP ;save count
      000A0D CD 03 77         [ 4] 2180         CALL     SWAPP
      000A10 CD 09 8A         [ 4] 2181         CALL     CMOVE
      000A13 CD 03 11         [ 4] 2182         CALL     RFROM
      000A16 81               [ 4] 2183         RET
                                   2184 
                                   2185 ;; Numeric output, single precision
                                   2186 
                                   2187 ;       DIGIT   ( u -- c )
                                   2188 ;       Convert digit u to a character.
      000A17 09 F7                 2189         .word      LINK
                           000A19  2190 LINK = . 
      000A19 05                    2191         .byte      5
      000A1A 44 49 47 49 54        2192         .ascii     "DIGIT"
      000A1F                       2193 DIGIT:
      000A1F CD 02 38         [ 4] 2194         CALL	DOLIT
      000A22 00 09                 2195         .word	9
      000A24 CD 03 91         [ 4] 2196         CALL	OVER
      000A27 CD 06 00         [ 4] 2197         CALL	LESS
      000A2A CD 02 38         [ 4] 2198         CALL	DOLIT
      000A2D 00 07                 2199         .word	7
      000A2F CD 03 B3         [ 4] 2200         CALL	ANDD
      000A32 CD 05 3D         [ 4] 2201         CALL	PLUS
      000A35 CD 02 38         [ 4] 2202         CALL	DOLIT
      000A38 00 30                 2203         .word	48	;'0'
      000A3A CC 05 3D         [ 2] 2204         JP	PLUS
                                   2205 
                                   2206 ;       EXTRACT ( n base -- n c )
                                   2207 ;       Extract least significant digit from n.
      000A3D 0A 19                 2208         .word      LINK
                           000A3F  2209 LINK = . 
      000A3F 07                    2210         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A40 45 58 54 52 41 43 54  2211         .ascii     "EXTRACT"
      000A47                       2212 EXTRC:
      000A47 CD 08 50         [ 4] 2213         CALL     ZERO
      000A4A CD 03 77         [ 4] 2214         CALL     SWAPP
      000A4D CD 06 78         [ 4] 2215         CALL     UMMOD
      000A50 CD 03 77         [ 4] 2216         CALL     SWAPP
      000A53 CC 0A 1F         [ 2] 2217         JP     DIGIT
                                   2218 
                                   2219 ;       <#      ( -- )
                                   2220 ;       Initiate  numeric output process.
      000A56 0A 3F                 2221         .word      LINK
                           000A58  2222 LINK = . 
      000A58 02                    2223         .byte      2
      000A59 3C 23                 2224         .ascii     "<#"
      000A5B                       2225 BDIGS:
      000A5B CD 09 4E         [ 4] 2226         CALL     PAD
      000A5E CD 04 82         [ 4] 2227         CALL     HLD
      000A61 CC 02 A9         [ 2] 2228         JP     STORE
                                   2229 
                                   2230 ;       HOLD    ( c -- )
                                   2231 ;       Insert a character into output string.
      000A64 0A 58                 2232         .word      LINK
                           000A66  2233 LINK = . 
      000A66 04                    2234         .byte      4
      000A67 48 4F 4C 44           2235         .ascii     "HOLD"
      000A6B                       2236 HOLD:
      000A6B CD 04 82         [ 4] 2237         CALL     HLD
      000A6E CD 02 C0         [ 4] 2238         CALL     AT
      000A71 CD 08 29         [ 4] 2239         CALL     ONEM
      000A74 CD 03 67         [ 4] 2240         CALL     DUPP
      000A77 CD 04 82         [ 4] 2241         CALL     HLD
      000A7A CD 02 A9         [ 4] 2242         CALL     STORE
      000A7D CC 02 CD         [ 2] 2243         JP     CSTOR
                                   2244 
                                   2245 ;       #       ( u -- u )
                                   2246 ;       Extract one digit from u and
                                   2247 ;       append digit to output string.
      000A80 0A 66                 2248         .word      LINK
                           000A82  2249 LINK = . 
      000A82 01                    2250         .byte      1
      000A83 23                    2251         .ascii     "#"
      000A84                       2252 DIG:
      000A84 CD 04 24         [ 4] 2253         CALL     BASE
      000A87 CD 02 C0         [ 4] 2254         CALL     AT
      000A8A CD 0A 47         [ 4] 2255         CALL     EXTRC
      000A8D CC 0A 6B         [ 2] 2256         JP     HOLD
                                   2257 
                                   2258 ;       #S      ( u -- 0 )
                                   2259 ;       Convert u until all digits
                                   2260 ;       are added to output string.
      000A90 0A 82                 2261         .word      LINK
                           000A92  2262 LINK = . 
      000A92 02                    2263         .byte      2
      000A93 23 53                 2264         .ascii     "#S"
      000A95                       2265 DIGS:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000A95 CD 0A 84         [ 4] 2266 DIGS1:  CALL     DIG
      000A98 CD 03 67         [ 4] 2267         CALL     DUPP
      000A9B CD 02 6B         [ 4] 2268         CALL     QBRAN
      000A9E 0A A2                 2269         .word      DIGS2
      000AA0 20 F3            [ 2] 2270         JRA     DIGS1
      000AA2 81               [ 4] 2271 DIGS2:  RET
                                   2272 
                                   2273 ;       SIGN    ( n -- )
                                   2274 ;       Add a minus sign to
                                   2275 ;       numeric output string.
      000AA3 0A 92                 2276         .word      LINK
                           000AA5  2277 LINK = . 
      000AA5 04                    2278         .byte      4
      000AA6 53 49 47 4E           2279         .ascii     "SIGN"
      000AAA                       2280 SIGN:
      000AAA CD 03 A0         [ 4] 2281         CALL     ZLESS
      000AAD CD 02 6B         [ 4] 2282         CALL     QBRAN
      000AB0 0A BA                 2283         .word      SIGN1
      000AB2 CD 02 38         [ 4] 2284         CALL     DOLIT
      000AB5 00 2D                 2285         .word      45	;"-"
      000AB7 CC 0A 6B         [ 2] 2286         JP     HOLD
      000ABA 81               [ 4] 2287 SIGN1:  RET
                                   2288 
                                   2289 ;       #>      ( w -- b u )
                                   2290 ;       Prepare output string.
      000ABB 0A A5                 2291         .word      LINK
                           000ABD  2292 LINK = . 
      000ABD 02                    2293         .byte      2
      000ABE 23 3E                 2294         .ascii     "#>"
      000AC0                       2295 EDIGS:
      000AC0 CD 03 5D         [ 4] 2296         CALL     DROP
      000AC3 CD 04 82         [ 4] 2297         CALL     HLD
      000AC6 CD 02 C0         [ 4] 2298         CALL     AT
      000AC9 CD 09 4E         [ 4] 2299         CALL     PAD
      000ACC CD 03 91         [ 4] 2300         CALL     OVER
      000ACF CC 05 9B         [ 2] 2301         JP     SUBB
                                   2302 
                                   2303 ;       str     ( w -- b u )
                                   2304 ;       Convert a signed integer
                                   2305 ;       to a numeric string.
      000AD2 0A BD                 2306         .word      LINK
                           000AD4  2307 LINK = . 
      000AD4 03                    2308         .byte      3
      000AD5 53 54 52              2309         .ascii     "STR"
      000AD8                       2310 STR:
      000AD8 CD 03 67         [ 4] 2311         CALL     DUPP
      000ADB CD 03 30         [ 4] 2312         CALL     TOR
      000ADE CD 05 B5         [ 4] 2313         CALL     ABSS
      000AE1 CD 0A 5B         [ 4] 2314         CALL     BDIGS
      000AE4 CD 0A 95         [ 4] 2315         CALL     DIGS
      000AE7 CD 03 11         [ 4] 2316         CALL     RFROM
      000AEA CD 0A AA         [ 4] 2317         CALL     SIGN
      000AED CC 0A C0         [ 2] 2318         JP     EDIGS
                                   2319 
                                   2320 ;       HEX     ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2321 ;       Use radix 16 as base for
                                   2322 ;       numeric conversions.
      000AF0 0A D4                 2323         .word      LINK
                           000AF2  2324 LINK = . 
      000AF2 03                    2325         .byte      3
      000AF3 48 45 58              2326         .ascii     "HEX"
      000AF6                       2327 HEX:
      000AF6 CD 02 38         [ 4] 2328         CALL     DOLIT
      000AF9 00 10                 2329         .word      16
      000AFB CD 04 24         [ 4] 2330         CALL     BASE
      000AFE CC 02 A9         [ 2] 2331         JP     STORE
                                   2332 
                                   2333 ;       DECIMAL ( -- )
                                   2334 ;       Use radix 10 as base
                                   2335 ;       for numeric conversions.
      000B01 0A F2                 2336         .word      LINK
                           000B03  2337 LINK = . 
      000B03 07                    2338         .byte      7
      000B04 44 45 43 49 4D 41 4C  2339         .ascii     "DECIMAL"
      000B0B                       2340 DECIM:
      000B0B CD 02 38         [ 4] 2341         CALL     DOLIT
      000B0E 00 0A                 2342         .word      10
      000B10 CD 04 24         [ 4] 2343         CALL     BASE
      000B13 CC 02 A9         [ 2] 2344         JP     STORE
                                   2345 
                                   2346 ;; Numeric input, single precision
                                   2347 
                                   2348 ;       DIGIT?  ( c base -- u t )
                                   2349 ;       Convert a character to its numeric
                                   2350 ;       value. A flag indicates success.
      000B16 0B 03                 2351         .word      LINK
                           000B18  2352 LINK = . 
      000B18 06                    2353         .byte       6
      000B19 44 49 47 49 54 3F     2354         .ascii     "DIGIT?"
      000B1F                       2355 DIGTQ:
      000B1F CD 03 30         [ 4] 2356         CALL     TOR
      000B22 CD 02 38         [ 4] 2357         CALL     DOLIT
      000B25 00 30                 2358         .word     48	; "0"
      000B27 CD 05 9B         [ 4] 2359         CALL     SUBB
      000B2A CD 02 38         [ 4] 2360         CALL     DOLIT
      000B2D 00 09                 2361         .word      9
      000B2F CD 03 91         [ 4] 2362         CALL     OVER
      000B32 CD 06 00         [ 4] 2363         CALL     LESS
      000B35 CD 02 6B         [ 4] 2364         CALL     QBRAN
      000B38 0B 50                 2365         .word      DGTQ1
      000B3A CD 02 38         [ 4] 2366         CALL     DOLIT
      000B3D 00 07                 2367         .word      7
      000B3F CD 05 9B         [ 4] 2368         CALL     SUBB
      000B42 CD 03 67         [ 4] 2369         CALL     DUPP
      000B45 CD 02 38         [ 4] 2370         CALL     DOLIT
      000B48 00 0A                 2371         .word      10
      000B4A CD 06 00         [ 4] 2372         CALL     LESS
      000B4D CD 03 C7         [ 4] 2373         CALL     ORR
      000B50 CD 03 67         [ 4] 2374 DGTQ1:  CALL     DUPP
      000B53 CD 03 11         [ 4] 2375         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B56 CC 05 E2         [ 2] 2376         JP     ULESS
                                   2377 
                                   2378 ;       NUMBER? ( a -- n T | a F )
                                   2379 ;       Convert a number string to
                                   2380 ;       integer. Push a flag on tos.
      000B59 0B 18                 2381         .word      LINK
                           000B5B  2382 LINK = . 
      000B5B 07                    2383         .byte      7
      000B5C 4E 55 4D 42 45 52 3F  2384         .ascii     "NUMBER?"
      000B63                       2385 NUMBQ:
      000B63 CD 04 24         [ 4] 2386         CALL     BASE
      000B66 CD 02 C0         [ 4] 2387         CALL     AT
      000B69 CD 03 30         [ 4] 2388         CALL     TOR
      000B6C CD 08 50         [ 4] 2389         CALL     ZERO
      000B6F CD 03 91         [ 4] 2390         CALL     OVER
      000B72 CD 09 26         [ 4] 2391         CALL     COUNT
      000B75 CD 03 91         [ 4] 2392         CALL     OVER
      000B78 CD 02 DE         [ 4] 2393         CALL     CAT
      000B7B CD 02 38         [ 4] 2394         CALL     DOLIT
      000B7E 00 24                 2395         .word     36	; "0x"
      000B80 CD 05 C3         [ 4] 2396         CALL     EQUAL
      000B83 CD 02 6B         [ 4] 2397         CALL     QBRAN
      000B86 0B 97                 2398         .word      NUMQ1
      000B88 CD 0A F6         [ 4] 2399         CALL     HEX
      000B8B CD 03 77         [ 4] 2400         CALL     SWAPP
      000B8E CD 08 1C         [ 4] 2401         CALL     ONEP
      000B91 CD 03 77         [ 4] 2402         CALL     SWAPP
      000B94 CD 08 29         [ 4] 2403         CALL     ONEM
      000B97 CD 03 91         [ 4] 2404 NUMQ1:  CALL     OVER
      000B9A CD 02 DE         [ 4] 2405         CALL     CAT
      000B9D CD 02 38         [ 4] 2406         CALL     DOLIT
      000BA0 00 2D                 2407         .word     45	; "-"
      000BA2 CD 05 C3         [ 4] 2408         CALL     EQUAL
      000BA5 CD 03 30         [ 4] 2409         CALL     TOR
      000BA8 CD 03 77         [ 4] 2410         CALL     SWAPP
      000BAB CD 03 24         [ 4] 2411         CALL     RAT
      000BAE CD 05 9B         [ 4] 2412         CALL     SUBB
      000BB1 CD 03 77         [ 4] 2413         CALL     SWAPP
      000BB4 CD 03 24         [ 4] 2414         CALL     RAT
      000BB7 CD 05 3D         [ 4] 2415         CALL     PLUS
      000BBA CD 04 EC         [ 4] 2416         CALL     QDUP
      000BBD CD 02 6B         [ 4] 2417         CALL     QBRAN
      000BC0 0C 21                 2418         .word      NUMQ6
      000BC2 CD 08 29         [ 4] 2419         CALL     ONEM
      000BC5 CD 03 30         [ 4] 2420         CALL     TOR
      000BC8 CD 03 67         [ 4] 2421 NUMQ2:  CALL     DUPP
      000BCB CD 03 30         [ 4] 2422         CALL     TOR
      000BCE CD 02 DE         [ 4] 2423         CALL     CAT
      000BD1 CD 04 24         [ 4] 2424         CALL     BASE
      000BD4 CD 02 C0         [ 4] 2425         CALL     AT
      000BD7 CD 0B 1F         [ 4] 2426         CALL     DIGTQ
      000BDA CD 02 6B         [ 4] 2427         CALL     QBRAN
      000BDD 0C 0F                 2428         .word      NUMQ4
      000BDF CD 03 77         [ 4] 2429         CALL     SWAPP
      000BE2 CD 04 24         [ 4] 2430         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BE5 CD 02 C0         [ 4] 2431         CALL     AT
      000BE8 CD 07 9B         [ 4] 2432         CALL     STAR
      000BEB CD 05 3D         [ 4] 2433         CALL     PLUS
      000BEE CD 03 11         [ 4] 2434         CALL     RFROM
      000BF1 CD 08 1C         [ 4] 2435         CALL     ONEP
      000BF4 CD 02 4C         [ 4] 2436         CALL     DONXT
      000BF7 0B C8                 2437         .word      NUMQ2
      000BF9 CD 03 24         [ 4] 2438         CALL     RAT
      000BFC CD 03 77         [ 4] 2439         CALL     SWAPP
      000BFF CD 03 5D         [ 4] 2440         CALL     DROP
      000C02 CD 02 6B         [ 4] 2441         CALL     QBRAN
      000C05 0C 0A                 2442         .word      NUMQ3
      000C07 CD 05 68         [ 4] 2443         CALL     NEGAT
      000C0A CD 03 77         [ 4] 2444 NUMQ3:  CALL     SWAPP
      000C0D 20 0F            [ 2] 2445         JRA     NUMQ5
      000C0F CD 03 11         [ 4] 2446 NUMQ4:  CALL     RFROM
      000C12 CD 03 11         [ 4] 2447         CALL     RFROM
      000C15 CD 05 1D         [ 4] 2448         CALL     DDROP
      000C18 CD 05 1D         [ 4] 2449         CALL     DDROP
      000C1B CD 08 50         [ 4] 2450         CALL     ZERO
      000C1E CD 03 67         [ 4] 2451 NUMQ5:  CALL     DUPP
      000C21 CD 03 11         [ 4] 2452 NUMQ6:  CALL     RFROM
      000C24 CD 05 1D         [ 4] 2453         CALL     DDROP
      000C27 CD 03 11         [ 4] 2454         CALL     RFROM
      000C2A CD 04 24         [ 4] 2455         CALL     BASE
      000C2D CC 02 A9         [ 2] 2456         JP     STORE
                                   2457 
                                   2458 ;; Basic I/O
                                   2459 
                                   2460 ;       KEY     ( -- c )
                                   2461 ;       Wait for and return an
                                   2462 ;       input character.
      000C30 0B 5B                 2463         .word      LINK
                           000C32  2464 LINK = . 
      000C32 03                    2465         .byte      3
      000C33 4B 45 59              2466         .ascii     "KEY"
      000C36                       2467 KEY:
                           000001  2468 .if CONVERT_TO_CODE
      000C36 72 0B 52 30 FB   [ 2] 2469         btjf UART1_SR,#UART_SR_RXNE,. 
      000C3B C6 52 31         [ 1] 2470         ld a,UART1_DR 
      000C3E 1D 00 02         [ 2] 2471         subw x,#CELLL 
      000C41 E7 01            [ 1] 2472         ld (1,x),a 
      000C43 7F               [ 1] 2473         clr (x)
      000C44 81               [ 4] 2474         ret 
                           000000  2475 .else 
                                   2476 KEY1:   CALL     QKEY
                                   2477         CALL     QBRAN
                                   2478         .word      KEY1
                                   2479         RET
                                   2480 .endif 
                                   2481 
                                   2482 ;       NUF?    ( -- t )
                                   2483 ;       Return false if no input,
                                   2484 ;       else pause and if CR return true.
      000C45 0C 32                 2485         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                           000C47  2486 LINK = . 
      000C47 04                    2487         .byte      4
      000C48 4E 55 46 3F           2488         .ascii     "NUF?"
      000C4C                       2489 NUFQ:
      000C4C CD 02 04         [ 4] 2490         CALL     QKEY
      000C4F CD 03 67         [ 4] 2491         CALL     DUPP
      000C52 CD 02 6B         [ 4] 2492         CALL     QBRAN
      000C55 0C 65                 2493         .word    NUFQ1
      000C57 CD 05 1D         [ 4] 2494         CALL     DDROP
      000C5A CD 0C 36         [ 4] 2495         CALL     KEY
      000C5D CD 02 38         [ 4] 2496         CALL     DOLIT
      000C60 00 0D                 2497         .word      CRR
      000C62 CC 05 C3         [ 2] 2498         JP     EQUAL
      000C65 81               [ 4] 2499 NUFQ1:  RET
                                   2500 
                                   2501 ;       SPACE   ( -- )
                                   2502 ;       Send  blank character to
                                   2503 ;       output device.
      000C66 0C 47                 2504         .word      LINK
                           000C68  2505 LINK = . 
      000C68 05                    2506         .byte      5
      000C69 53 50 41 43 45        2507         .ascii     "SPACE"
      000C6E                       2508 SPACE:
      000C6E CD 08 43         [ 4] 2509         CALL     BLANK
      000C71 CC 02 22         [ 2] 2510         JP     EMIT
                                   2511 
                                   2512 ;       SPACES  ( +n -- )
                                   2513 ;       Send n spaces to output device.
      000C74 0C 68                 2514         .word      LINK
                           000C76  2515 LINK = . 
      000C76 06                    2516         .byte      6
      000C77 53 50 41 43 45 53     2517         .ascii     "SPACES"
      000C7D                       2518 SPACS:
      000C7D CD 08 50         [ 4] 2519         CALL     ZERO
      000C80 CD 06 20         [ 4] 2520         CALL     MAX
      000C83 CD 03 30         [ 4] 2521         CALL     TOR
      000C86 20 03            [ 2] 2522         JRA      CHAR2
      000C88 CD 0C 6E         [ 4] 2523 CHAR1:  CALL     SPACE
      000C8B CD 02 4C         [ 4] 2524 CHAR2:  CALL     DONXT
      000C8E 0C 88                 2525         .word    CHAR1
      000C90 81               [ 4] 2526         RET
                                   2527 
                                   2528 ;       TYPE    ( b u -- )
                                   2529 ;       Output u characters from b.
      000C91 0C 76                 2530         .word      LINK
                           000C93  2531 LINK = . 
      000C93 04                    2532         .byte      4
      000C94 54 59 50 45           2533         .ascii     "TYPE"
      000C98                       2534 TYPES:
      000C98 CD 03 30         [ 4] 2535         CALL     TOR
      000C9B 20 0C            [ 2] 2536         JRA     TYPE2
      000C9D CD 03 67         [ 4] 2537 TYPE1:  CALL     DUPP
      000CA0 CD 02 DE         [ 4] 2538         CALL     CAT
      000CA3 CD 02 22         [ 4] 2539         CALL     EMIT
      000CA6 CD 08 1C         [ 4] 2540         CALL     ONEP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000CA9 CD 02 4C         [ 4] 2541 TYPE2:  CALL     DONXT
      000CAC 0C 9D                 2542         .word      TYPE1
      000CAE CC 03 5D         [ 2] 2543         JP     DROP
                                   2544 
                                   2545 ;       CR      ( -- )
                                   2546 ;       Output a carriage return
                                   2547 ;       and a line feed.
      000CB1 0C 93                 2548         .word      LINK
                           000CB3  2549 LINK = . 
      000CB3 02                    2550         .byte      2
      000CB4 43 52                 2551         .ascii     "CR"
      000CB6                       2552 CR:
      000CB6 CD 02 38         [ 4] 2553         CALL     DOLIT
      000CB9 00 0D                 2554         .word      CRR
      000CBB CD 02 22         [ 4] 2555         CALL     EMIT
      000CBE CD 02 38         [ 4] 2556         CALL     DOLIT
      000CC1 00 0A                 2557         .word      LF
      000CC3 CC 02 22         [ 2] 2558         JP     EMIT
                                   2559 
                                   2560 ;       do$     ( -- a )
                                   2561 ;       Return  address of a compiled
                                   2562 ;       string.
      000CC6 0C B3                 2563         .word      LINK
                           000CC8  2564 LINK = . 
      000CC8 43                    2565 	.byte      COMPO+3
      000CC9 44 4F 24              2566         .ascii     "DO$"
      000CCC                       2567 DOSTR:
      000CCC CD 03 11         [ 4] 2568         CALL     RFROM
      000CCF CD 03 24         [ 4] 2569         CALL     RAT
      000CD2 CD 03 11         [ 4] 2570         CALL     RFROM
      000CD5 CD 09 26         [ 4] 2571         CALL     COUNT
      000CD8 CD 05 3D         [ 4] 2572         CALL     PLUS
      000CDB CD 03 30         [ 4] 2573         CALL     TOR
      000CDE CD 03 77         [ 4] 2574         CALL     SWAPP
      000CE1 CD 03 30         [ 4] 2575         CALL     TOR
      000CE4 81               [ 4] 2576         RET
                                   2577 
                                   2578 ;       $"|     ( -- a )
                                   2579 ;       Run time routine compiled by $".
                                   2580 ;       Return address of a compiled string.
      000CE5 0C C8                 2581         .word      LINK
                           000CE7  2582 LINK = . 
      000CE7 43                    2583 	.byte      COMPO+3
      000CE8 24 22 7C              2584         .byte     '$','"','|'
      000CEB                       2585 STRQP:
      000CEB CD 0C CC         [ 4] 2586         CALL     DOSTR
      000CEE 81               [ 4] 2587         RET
                                   2588 
                                   2589 ;       ."|     ( -- )
                                   2590 ;       Run time routine of ." .
                                   2591 ;       Output a compiled string.
      000CEF 0C E7                 2592         .word      LINK
                           000CF1  2593 LINK = . 
      000CF1 43                    2594 	.byte      COMPO+3
      000CF2 2E 22 7C              2595         .byte     '.','"','|'
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000CF5                       2596 DOTQP:
      000CF5 CD 0C CC         [ 4] 2597         CALL     DOSTR
      000CF8 CD 09 26         [ 4] 2598         CALL     COUNT
      000CFB CC 0C 98         [ 2] 2599         JP     TYPES
                                   2600 
                                   2601 ;       .R      ( n +n -- )
                                   2602 ;       Display an integer in a field
                                   2603 ;       of n columns, right justified.
      000CFE 0C F1                 2604         .word      LINK
                           000D00  2605 LINK = . 
      000D00 02                    2606         .byte      2
      000D01 2E 52                 2607         .ascii     ".R"
      000D03                       2608 DOTR:
      000D03 CD 03 30         [ 4] 2609         CALL     TOR
      000D06 CD 0A D8         [ 4] 2610         CALL     STR
      000D09 CD 03 11         [ 4] 2611         CALL     RFROM
      000D0C CD 03 91         [ 4] 2612         CALL     OVER
      000D0F CD 05 9B         [ 4] 2613         CALL     SUBB
      000D12 CD 0C 7D         [ 4] 2614         CALL     SPACS
      000D15 CC 0C 98         [ 2] 2615         JP     TYPES
                                   2616 
                                   2617 ;       U.R     ( u +n -- )
                                   2618 ;       Display an unsigned integer
                                   2619 ;       in n column, right justified.
      000D18 0D 00                 2620         .word      LINK
                           000D1A  2621 LINK = . 
      000D1A 03                    2622         .byte      3
      000D1B 55 2E 52              2623         .ascii     "U.R"
      000D1E                       2624 UDOTR:
      000D1E CD 03 30         [ 4] 2625         CALL     TOR
      000D21 CD 0A 5B         [ 4] 2626         CALL     BDIGS
      000D24 CD 0A 95         [ 4] 2627         CALL     DIGS
      000D27 CD 0A C0         [ 4] 2628         CALL     EDIGS
      000D2A CD 03 11         [ 4] 2629         CALL     RFROM
      000D2D CD 03 91         [ 4] 2630         CALL     OVER
      000D30 CD 05 9B         [ 4] 2631         CALL     SUBB
      000D33 CD 0C 7D         [ 4] 2632         CALL     SPACS
      000D36 CC 0C 98         [ 2] 2633         JP     TYPES
                                   2634 
                                   2635 ;       U.      ( u -- )
                                   2636 ;       Display an unsigned integer
                                   2637 ;       in free format.
      000D39 0D 1A                 2638         .word      LINK
                           000D3B  2639 LINK = . 
      000D3B 02                    2640         .byte      2
      000D3C 55 2E                 2641         .ascii     "U."
      000D3E                       2642 UDOT:
      000D3E CD 0A 5B         [ 4] 2643         CALL     BDIGS
      000D41 CD 0A 95         [ 4] 2644         CALL     DIGS
      000D44 CD 0A C0         [ 4] 2645         CALL     EDIGS
      000D47 CD 0C 6E         [ 4] 2646         CALL     SPACE
      000D4A CC 0C 98         [ 2] 2647         JP     TYPES
                                   2648 
                                   2649 ;       .       ( w -- )
                                   2650 ;       Display an integer in free
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2651 ;       format, preceeded by a space.
      000D4D 0D 3B                 2652         .word      LINK
                           000D4F  2653 LINK = . 
      000D4F 01                    2654         .byte      1
      000D50 2E                    2655         .ascii     "."
      000D51                       2656 DOT:
      000D51 CD 04 24         [ 4] 2657         CALL     BASE
      000D54 CD 02 C0         [ 4] 2658         CALL     AT
      000D57 CD 02 38         [ 4] 2659         CALL     DOLIT
      000D5A 00 0A                 2660         .word      10
      000D5C CD 03 DC         [ 4] 2661         CALL     XORR    ;?decimal
      000D5F CD 02 6B         [ 4] 2662         CALL     QBRAN
      000D62 0D 67                 2663         .word      DOT1
      000D64 CC 0D 3E         [ 2] 2664         JP     UDOT
      000D67 CD 0A D8         [ 4] 2665 DOT1:   CALL     STR
      000D6A CD 0C 6E         [ 4] 2666         CALL     SPACE
      000D6D CC 0C 98         [ 2] 2667         JP     TYPES
                                   2668 
                                   2669 ;       ?       ( a -- )
                                   2670 ;       Display contents in memory cell.
      000D70 0D 4F                 2671         .word      LINK
                                   2672         
                           000D72  2673 LINK = . 
      000D72 01                    2674         .byte      1
      000D73 3F                    2675         .ascii     "?"
      000D74                       2676 QUEST:
      000D74 CD 02 C0         [ 4] 2677         CALL     AT
      000D77 CC 0D 51         [ 2] 2678         JP     DOT
                                   2679 
                                   2680 ;; Parsing
                                   2681 
                                   2682 ;       parse   ( b u c -- b u delta ; <string> )
                                   2683 ;       Scan string delimited by c.
                                   2684 ;       Return found string and its offset.
      000D7A 0D 72                 2685         .word      LINK
                           000D7C  2686 LINK = . 
      000D7C 05                    2687         .byte      5
      000D7D 70 61 72 73 65        2688         .ascii     "parse"
      000D82                       2689 PARS:
      000D82 CD 04 33         [ 4] 2690         CALL     TEMP
      000D85 CD 02 A9         [ 4] 2691         CALL     STORE
      000D88 CD 03 91         [ 4] 2692         CALL     OVER
      000D8B CD 03 30         [ 4] 2693         CALL     TOR
      000D8E CD 03 67         [ 4] 2694         CALL     DUPP
      000D91 CD 02 6B         [ 4] 2695         CALL     QBRAN
      000D94 0E 3A                 2696         .word    PARS8
      000D96 CD 08 29         [ 4] 2697         CALL     ONEM
      000D99 CD 04 33         [ 4] 2698         CALL     TEMP
      000D9C CD 02 C0         [ 4] 2699         CALL     AT
      000D9F CD 08 43         [ 4] 2700         CALL     BLANK
      000DA2 CD 05 C3         [ 4] 2701         CALL     EQUAL
      000DA5 CD 02 6B         [ 4] 2702         CALL     QBRAN
      000DA8 0D DB                 2703         .word      PARS3
      000DAA CD 03 30         [ 4] 2704         CALL     TOR
      000DAD CD 08 43         [ 4] 2705 PARS1:  CALL     BLANK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DB0 CD 03 91         [ 4] 2706         CALL     OVER
      000DB3 CD 02 DE         [ 4] 2707         CALL     CAT     ;skip leading blanks ONLY
      000DB6 CD 05 9B         [ 4] 2708         CALL     SUBB
      000DB9 CD 03 A0         [ 4] 2709         CALL     ZLESS
      000DBC CD 05 57         [ 4] 2710         CALL     INVER
      000DBF CD 02 6B         [ 4] 2711         CALL     QBRAN
      000DC2 0D D8                 2712         .word      PARS2
      000DC4 CD 08 1C         [ 4] 2713         CALL     ONEP
      000DC7 CD 02 4C         [ 4] 2714         CALL     DONXT
      000DCA 0D AD                 2715         .word      PARS1
      000DCC CD 03 11         [ 4] 2716         CALL     RFROM
      000DCF CD 03 5D         [ 4] 2717         CALL     DROP
      000DD2 CD 08 50         [ 4] 2718         CALL     ZERO
      000DD5 CC 03 67         [ 2] 2719         JP     DUPP
      000DD8 CD 03 11         [ 4] 2720 PARS2:  CALL     RFROM
      000DDB CD 03 91         [ 4] 2721 PARS3:  CALL     OVER
      000DDE CD 03 77         [ 4] 2722         CALL     SWAPP
      000DE1 CD 03 30         [ 4] 2723         CALL     TOR
      000DE4 CD 04 33         [ 4] 2724 PARS4:  CALL     TEMP
      000DE7 CD 02 C0         [ 4] 2725         CALL     AT
      000DEA CD 03 91         [ 4] 2726         CALL     OVER
      000DED CD 02 DE         [ 4] 2727         CALL     CAT
      000DF0 CD 05 9B         [ 4] 2728         CALL     SUBB    ;scan for delimiter
      000DF3 CD 04 33         [ 4] 2729         CALL     TEMP
      000DF6 CD 02 C0         [ 4] 2730         CALL     AT
      000DF9 CD 08 43         [ 4] 2731         CALL     BLANK
      000DFC CD 05 C3         [ 4] 2732         CALL     EQUAL
      000DFF CD 02 6B         [ 4] 2733         CALL     QBRAN
      000E02 0E 07                 2734         .word      PARS5
      000E04 CD 03 A0         [ 4] 2735         CALL     ZLESS
      000E07 CD 02 6B         [ 4] 2736 PARS5:  CALL     QBRAN
      000E0A 0E 1C                 2737         .word      PARS6
      000E0C CD 08 1C         [ 4] 2738         CALL     ONEP
      000E0F CD 02 4C         [ 4] 2739         CALL     DONXT
      000E12 0D E4                 2740         .word      PARS4
      000E14 CD 03 67         [ 4] 2741         CALL     DUPP
      000E17 CD 03 30         [ 4] 2742         CALL     TOR
      000E1A 20 0F            [ 2] 2743         JRA     PARS7
      000E1C CD 03 11         [ 4] 2744 PARS6:  CALL     RFROM
      000E1F CD 03 5D         [ 4] 2745         CALL     DROP
      000E22 CD 03 67         [ 4] 2746         CALL     DUPP
      000E25 CD 08 1C         [ 4] 2747         CALL     ONEP
      000E28 CD 03 30         [ 4] 2748         CALL     TOR
      000E2B CD 03 91         [ 4] 2749 PARS7:  CALL     OVER
      000E2E CD 05 9B         [ 4] 2750         CALL     SUBB
      000E31 CD 03 11         [ 4] 2751         CALL     RFROM
      000E34 CD 03 11         [ 4] 2752         CALL     RFROM
      000E37 CC 05 9B         [ 2] 2753         JP     SUBB
      000E3A CD 03 91         [ 4] 2754 PARS8:  CALL     OVER
      000E3D CD 03 11         [ 4] 2755         CALL     RFROM
      000E40 CC 05 9B         [ 2] 2756         JP     SUBB
                                   2757 
                                   2758 ;       PARSE   ( c -- b u ; <string> )
                                   2759 ;       Scan input stream and return
                                   2760 ;       counted string delimited by c.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E43 0D 7C                 2761         .word      LINK
                           000E45  2762 LINK = . 
      000E45 05                    2763         .byte      5
      000E46 50 41 52 53 45        2764         .ascii     "PARSE"
      000E4B                       2765 PARSE:
      000E4B CD 03 30         [ 4] 2766         CALL     TOR
      000E4E CD 09 5F         [ 4] 2767         CALL     TIB
      000E51 CD 04 42         [ 4] 2768         CALL     INN
      000E54 CD 02 C0         [ 4] 2769         CALL     AT
      000E57 CD 05 3D         [ 4] 2770         CALL     PLUS    ;current input buffer pointer
      000E5A CD 04 52         [ 4] 2771         CALL     NTIB
      000E5D CD 02 C0         [ 4] 2772         CALL     AT
      000E60 CD 04 42         [ 4] 2773         CALL     INN
      000E63 CD 02 C0         [ 4] 2774         CALL     AT
      000E66 CD 05 9B         [ 4] 2775         CALL     SUBB    ;remaining count
      000E69 CD 03 11         [ 4] 2776         CALL     RFROM
      000E6C CD 0D 82         [ 4] 2777         CALL     PARS
      000E6F CD 04 42         [ 4] 2778         CALL     INN
      000E72 CC 08 BF         [ 2] 2779         JP     PSTOR
                                   2780 
                                   2781 ;       .(      ( -- )
                                   2782 ;       Output following string up to next ) .
      000E75 0E 45                 2783         .word      LINK
                           000E77  2784 LINK = . 
      000E77 82                    2785 	.byte      IMEDD+2
      000E78 2E 28                 2786         .ascii     ".("
      000E7A                       2787 DOTPR:
      000E7A CD 02 38         [ 4] 2788         CALL     DOLIT
      000E7D 00 29                 2789         .word     41	; ")"
      000E7F CD 0E 4B         [ 4] 2790         CALL     PARSE
      000E82 CC 0C 98         [ 2] 2791         JP     TYPES
                                   2792 
                                   2793 ;       (       ( -- )
                                   2794 ;       Ignore following string up to next ).
                                   2795 ;       A comment.
      000E85 0E 77                 2796         .word      LINK
                           000E87  2797 LINK = . 
      000E87 81                    2798 	.byte      IMEDD+1
      000E88 28                    2799         .ascii     "("
      000E89                       2800 PAREN:
      000E89 CD 02 38         [ 4] 2801         CALL     DOLIT
      000E8C 00 29                 2802         .word     41	; ")"
      000E8E CD 0E 4B         [ 4] 2803         CALL     PARSE
      000E91 CC 05 1D         [ 2] 2804         JP     DDROP
                                   2805 
                                   2806 ;       \       ( -- )
                                   2807 ;       Ignore following text till
                                   2808 ;       end of line.
      000E94 0E 87                 2809         .word      LINK
                           000E96  2810 LINK = . 
      000E96 81                    2811 	.byte      IMEDD+1
      000E97 5C                    2812         .ascii     "\"
      000E98                       2813 BKSLA:
                           000001  2814 .if CONVERT_TO_CODE
      000E98 90 AE 00 0C      [ 2] 2815         ldw y,#UCTIB ; #TIB  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E9C 90 FE            [ 2] 2816         ldw y,(y)
      000E9E 90 89            [ 2] 2817         pushw y ; count in TIB 
      000EA0 90 AE 00 0A      [ 2] 2818         ldw y,#UINN ; >IN 
      000EA4 90 BF 20         [ 2] 2819         ldw YTEMP,y
      000EA7 90 85            [ 2] 2820         popw y 
      000EA9 91 CF 20         [ 5] 2821         ldw [YTEMP],y
      000EAC 81               [ 4] 2822         ret 
                           000000  2823 .else
                                   2824         CALL     NTIB
                                   2825         CALL     AT
                                   2826         CALL     INN
                                   2827         JP     STORE
                                   2828 .endif 
                                   2829 
                                   2830 ;       WORD    ( c -- a ; <string> )
                                   2831 ;       Parse a word from input stream
                                   2832 ;       and copy it to code dictionary.
      000EAD 0E 96                 2833         .word      LINK
                           000EAF  2834 LINK = . 
      000EAF 04                    2835         .byte      4
      000EB0 57 4F 52 44           2836         .ascii     "WORD"
      000EB4                       2837 WORDD:
      000EB4 CD 0E 4B         [ 4] 2838         CALL     PARSE
      000EB7 CD 09 3D         [ 4] 2839         CALL     HERE
      000EBA CD 07 F1         [ 4] 2840         CALL     CELLP
      000EBD CC 09 FE         [ 2] 2841         JP     PACKS
                                   2842 
                                   2843 ;       TOKEN   ( -- a ; <string> )
                                   2844 ;       Parse a word from input stream
                                   2845 ;       and copy it to name dictionary.
      000EC0 0E AF                 2846         .word      LINK
                           000EC2  2847 LINK = . 
      000EC2 05                    2848         .byte      5
      000EC3 54 4F 4B 45 4E        2849         .ascii     "TOKEN"
      000EC8                       2850 TOKEN:
      000EC8 CD 08 43         [ 4] 2851         CALL     BLANK
      000ECB CC 0E B4         [ 2] 2852         JP     WORDD
                                   2853 
                                   2854 ;; Dictionary search
                                   2855 
                                   2856 ;       NAME>   ( na -- ca )
                                   2857 ;       Return a code address given
                                   2858 ;       a name address.
      000ECE 0E C2                 2859         .word      LINK
                           000ED0  2860 LINK = . 
      000ED0 05                    2861         .byte      5
      000ED1 4E 41 4D 45 3E        2862         .ascii     "NAME>"
      000ED6                       2863 NAMET:
      000ED6 CD 09 26         [ 4] 2864         CALL     COUNT
      000ED9 CD 02 38         [ 4] 2865         CALL     DOLIT
      000EDC 00 1F                 2866         .word      31
      000EDE CD 03 B3         [ 4] 2867         CALL     ANDD
      000EE1 CC 05 3D         [ 2] 2868         JP     PLUS
                                   2869 
                                   2870 ;       SAME?   ( a a u -- a a f \ -0+ )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



                                   2871 ;       Compare u cells in two
                                   2872 ;       strings. Return 0 if identical.
      000EE4 0E D0                 2873         .word      LINK
                           000EE6  2874 LINK = . 
      000EE6 05                    2875         .byte       5
      000EE7 53 41 4D 45 3F        2876         .ascii     "SAME?"
      000EEC                       2877 SAMEQ:
      000EEC CD 08 29         [ 4] 2878         CALL     ONEM
      000EEF CD 03 30         [ 4] 2879         CALL     TOR
      000EF2 20 29            [ 2] 2880         JRA     SAME2
      000EF4 CD 03 91         [ 4] 2881 SAME1:  CALL     OVER
      000EF7 CD 03 24         [ 4] 2882         CALL     RAT
      000EFA CD 05 3D         [ 4] 2883         CALL     PLUS
      000EFD CD 02 DE         [ 4] 2884         CALL     CAT
      000F00 CD 03 91         [ 4] 2885         CALL     OVER
      000F03 CD 03 24         [ 4] 2886         CALL     RAT
      000F06 CD 05 3D         [ 4] 2887         CALL     PLUS
      000F09 CD 02 DE         [ 4] 2888         CALL     CAT
      000F0C CD 05 9B         [ 4] 2889         CALL     SUBB
      000F0F CD 04 EC         [ 4] 2890         CALL     QDUP
      000F12 CD 02 6B         [ 4] 2891         CALL     QBRAN
      000F15 0F 1D                 2892         .word      SAME2
      000F17 CD 03 11         [ 4] 2893         CALL     RFROM
      000F1A CC 03 5D         [ 2] 2894         JP     DROP
      000F1D CD 02 4C         [ 4] 2895 SAME2:  CALL     DONXT
      000F20 0E F4                 2896         .word      SAME1
      000F22 CC 08 50         [ 2] 2897         JP     ZERO
                                   2898 
                                   2899 ;       find    ( a va -- ca na | a F )
                                   2900 ;       Search vocabulary for string.
                                   2901 ;       Return ca and na if succeeded.
      000F25 0E E6                 2902         .word      LINK
                           000F27  2903 LINK = . 
      000F27 04                    2904         .byte      4
      000F28 46 49 4E 44           2905         .ascii     "FIND"
      000F2C                       2906 FIND:
      000F2C CD 03 77         [ 4] 2907         CALL     SWAPP
      000F2F CD 03 67         [ 4] 2908         CALL     DUPP
      000F32 CD 02 DE         [ 4] 2909         CALL     CAT
      000F35 CD 04 33         [ 4] 2910         CALL     TEMP
      000F38 CD 02 A9         [ 4] 2911         CALL     STORE
      000F3B CD 03 67         [ 4] 2912         CALL     DUPP
      000F3E CD 02 C0         [ 4] 2913         CALL     AT
      000F41 CD 03 30         [ 4] 2914         CALL     TOR
      000F44 CD 07 F1         [ 4] 2915         CALL     CELLP
      000F47 CD 03 77         [ 4] 2916         CALL     SWAPP
      000F4A CD 02 C0         [ 4] 2917 FIND1:  CALL     AT
      000F4D CD 03 67         [ 4] 2918         CALL     DUPP
      000F50 CD 02 6B         [ 4] 2919         CALL     QBRAN
      000F53 0F 89                 2920         .word      FIND6
      000F55 CD 03 67         [ 4] 2921         CALL     DUPP
      000F58 CD 02 C0         [ 4] 2922         CALL     AT
      000F5B CD 02 38         [ 4] 2923         CALL     DOLIT
      000F5E 1F 7F                 2924         .word      MASKK
      000F60 CD 03 B3         [ 4] 2925         CALL     ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F63 CD 03 24         [ 4] 2926         CALL     RAT
      000F66 CD 03 DC         [ 4] 2927         CALL     XORR
      000F69 CD 02 6B         [ 4] 2928         CALL     QBRAN
      000F6C 0F 78                 2929         .word      FIND2
      000F6E CD 07 F1         [ 4] 2930         CALL     CELLP
      000F71 CD 02 38         [ 4] 2931         CALL     DOLIT
      000F74 FF FF                 2932         .word     0xFFFF
      000F76 20 0C            [ 2] 2933         JRA     FIND3
      000F78 CD 07 F1         [ 4] 2934 FIND2:  CALL     CELLP
      000F7B CD 04 33         [ 4] 2935         CALL     TEMP
      000F7E CD 02 C0         [ 4] 2936         CALL     AT
      000F81 CD 0E EC         [ 4] 2937         CALL     SAMEQ
      000F84 CD 02 82         [ 4] 2938 FIND3:  CALL     BRAN
      000F87 0F 98                 2939         .word      FIND4
      000F89 CD 03 11         [ 4] 2940 FIND6:  CALL     RFROM
      000F8C CD 03 5D         [ 4] 2941         CALL     DROP
      000F8F CD 03 77         [ 4] 2942         CALL     SWAPP
      000F92 CD 08 00         [ 4] 2943         CALL     CELLM
      000F95 CC 03 77         [ 2] 2944         JP     SWAPP
      000F98 CD 02 6B         [ 4] 2945 FIND4:  CALL     QBRAN
      000F9B 0F A5                 2946         .word      FIND5
      000F9D CD 08 00         [ 4] 2947         CALL     CELLM
      000FA0 CD 08 00         [ 4] 2948         CALL     CELLM
      000FA3 20 A5            [ 2] 2949         JRA     FIND1
      000FA5 CD 03 11         [ 4] 2950 FIND5:  CALL     RFROM
      000FA8 CD 03 5D         [ 4] 2951         CALL     DROP
      000FAB CD 03 77         [ 4] 2952         CALL     SWAPP
      000FAE CD 03 5D         [ 4] 2953         CALL     DROP
      000FB1 CD 08 00         [ 4] 2954         CALL     CELLM
      000FB4 CD 03 67         [ 4] 2955         CALL     DUPP
      000FB7 CD 0E D6         [ 4] 2956         CALL     NAMET
      000FBA CC 03 77         [ 2] 2957         JP     SWAPP
                                   2958 
                                   2959 ;       NAME?   ( a -- ca na | a F )
                                   2960 ;       Search vocabularies for a string.
      000FBD 0F 27                 2961         .word      LINK
                           000FBF  2962 LINK = . 
      000FBF 05                    2963         .byte      5
      000FC0 4E 41 4D 45 3F        2964         .ascii     "NAME?"
      000FC5                       2965 NAMEQ:
      000FC5 CD 04 95         [ 4] 2966         CALL   CNTXT
      000FC8 CC 0F 2C         [ 2] 2967         JP     FIND
                                   2968 
                                   2969 ;; Terminal response
                                   2970 
                                   2971 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2972 ;       Backup cursor by one character.
      000FCB 0F BF                 2973         .word      LINK
                           000FCD  2974 LINK = . 
      000FCD 02                    2975         .byte      2
      000FCE 5E 48                 2976         .ascii     "^H"
      000FD0                       2977 BKSP:
      000FD0 CD 03 30         [ 4] 2978         CALL     TOR
      000FD3 CD 03 91         [ 4] 2979         CALL     OVER
      000FD6 CD 03 11         [ 4] 2980         CALL     RFROM
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FD9 CD 03 77         [ 4] 2981         CALL     SWAPP
      000FDC CD 03 91         [ 4] 2982         CALL     OVER
      000FDF CD 03 DC         [ 4] 2983         CALL     XORR
      000FE2 CD 02 6B         [ 4] 2984         CALL     QBRAN
      000FE5 10 00                 2985         .word      BACK1
      000FE7 CD 02 38         [ 4] 2986         CALL     DOLIT
      000FEA 00 08                 2987         .word      BKSPP
      000FEC CD 02 22         [ 4] 2988         CALL     EMIT
      000FEF CD 08 29         [ 4] 2989         CALL     ONEM
      000FF2 CD 08 43         [ 4] 2990         CALL     BLANK
      000FF5 CD 02 22         [ 4] 2991         CALL     EMIT
      000FF8 CD 02 38         [ 4] 2992         CALL     DOLIT
      000FFB 00 08                 2993         .word      BKSPP
      000FFD CC 02 22         [ 2] 2994         JP     EMIT
      001000 81               [ 4] 2995 BACK1:  RET
                                   2996 
                                   2997 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2998 ;       Accept and echo key stroke
                                   2999 ;       and bump cursor.
      001001 0F CD                 3000         .word      LINK
                           001003  3001 LINK = . 
      001003 03                    3002         .byte      3
      001004 54 41 50              3003         .ascii     "TAP"
      001007                       3004 TAP:
      001007 CD 03 67         [ 4] 3005         CALL     DUPP
      00100A CD 02 22         [ 4] 3006         CALL     EMIT
      00100D CD 03 91         [ 4] 3007         CALL     OVER
      001010 CD 02 CD         [ 4] 3008         CALL     CSTOR
      001013 CC 08 1C         [ 2] 3009         JP     ONEP
                                   3010 
                                   3011 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3012 ;       Process a key stroke,
                                   3013 ;       CR or backspace.
      001016 10 03                 3014         .word      LINK
                           001018  3015 LINK = . 
      001018 04                    3016         .byte      4
      001019 4B 54 41 50           3017         .ascii     "KTAP"
      00101D                       3018 KTAP:
      00101D CD 03 67         [ 4] 3019         CALL     DUPP
      001020 CD 02 38         [ 4] 3020         CALL     DOLIT
      001023 00 0D                 3021         .word      CRR
      001025 CD 03 DC         [ 4] 3022         CALL     XORR
      001028 CD 02 6B         [ 4] 3023         CALL     QBRAN
      00102B 10 43                 3024         .word      KTAP2
      00102D CD 02 38         [ 4] 3025         CALL     DOLIT
      001030 00 08                 3026         .word      BKSPP
      001032 CD 03 DC         [ 4] 3027         CALL     XORR
      001035 CD 02 6B         [ 4] 3028         CALL     QBRAN
      001038 10 40                 3029         .word      KTAP1
      00103A CD 08 43         [ 4] 3030         CALL     BLANK
      00103D CC 10 07         [ 2] 3031         JP     TAP
      001040 CC 0F D0         [ 2] 3032 KTAP1:  JP     BKSP
      001043 CD 03 5D         [ 4] 3033 KTAP2:  CALL     DROP
      001046 CD 03 77         [ 4] 3034         CALL     SWAPP
      001049 CD 03 5D         [ 4] 3035         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      00104C CC 03 67         [ 2] 3036         JP     DUPP
                                   3037 
                                   3038 ;       accept  ( b u -- b u )
                                   3039 ;       Accept characters to input
                                   3040 ;       buffer. Return with actual count.
      00104F 10 18                 3041         .word      LINK
                           001051  3042 LINK = . 
      001051 06                    3043         .byte      6
      001052 41 43 43 45 50 54     3044         .ascii     "ACCEPT"
      001058                       3045 ACCEP:
      001058 CD 03 91         [ 4] 3046         CALL     OVER
      00105B CD 05 3D         [ 4] 3047         CALL     PLUS
      00105E CD 03 91         [ 4] 3048         CALL     OVER
      001061 CD 05 28         [ 4] 3049 ACCP1:  CALL     DDUP
      001064 CD 03 DC         [ 4] 3050         CALL     XORR
      001067 CD 02 6B         [ 4] 3051         CALL     QBRAN
      00106A 10 8C                 3052         .word      ACCP4
      00106C CD 0C 36         [ 4] 3053         CALL     KEY
      00106F CD 03 67         [ 4] 3054         CALL     DUPP
      001072 CD 08 43         [ 4] 3055         CALL     BLANK
      001075 CD 02 38         [ 4] 3056         CALL     DOLIT
      001078 00 7F                 3057         .word      127
      00107A CD 06 5D         [ 4] 3058         CALL     WITHI
      00107D CD 02 6B         [ 4] 3059         CALL     QBRAN
      001080 10 87                 3060         .word      ACCP2
      001082 CD 10 07         [ 4] 3061         CALL     TAP
      001085 20 03            [ 2] 3062         JRA     ACCP3
      001087 CD 10 1D         [ 4] 3063 ACCP2:  CALL     KTAP
      00108A 20 D5            [ 2] 3064 ACCP3:  JRA     ACCP1
      00108C CD 03 5D         [ 4] 3065 ACCP4:  CALL     DROP
      00108F CD 03 91         [ 4] 3066         CALL     OVER
      001092 CC 05 9B         [ 2] 3067         JP     SUBB
                                   3068 
                                   3069 ;       QUERY   ( -- )
                                   3070 ;       Accept input stream to
                                   3071 ;       terminal input buffer.
      001095 10 51                 3072         .word      LINK
                                   3073         
                           001097  3074 LINK = . 
      001097 05                    3075         .byte      5
      001098 51 55 45 52 59        3076         .ascii     "QUERY"
      00109D                       3077 QUERY:
      00109D CD 09 5F         [ 4] 3078         CALL     TIB
      0010A0 CD 02 38         [ 4] 3079         CALL     DOLIT
      0010A3 00 50                 3080         .word      80
      0010A5 CD 10 58         [ 4] 3081         CALL     ACCEP
      0010A8 CD 04 52         [ 4] 3082         CALL     NTIB
      0010AB CD 02 A9         [ 4] 3083         CALL     STORE
      0010AE CD 03 5D         [ 4] 3084         CALL     DROP
      0010B1 CD 08 50         [ 4] 3085         CALL     ZERO
      0010B4 CD 04 42         [ 4] 3086         CALL     INN
      0010B7 CC 02 A9         [ 2] 3087         JP     STORE
                                   3088 
                                   3089 ;       ABORT   ( -- )
                                   3090 ;       Reset data stack and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3091 ;       jump to QUIT.
      0010BA 10 97                 3092         .word      LINK
                           0010BC  3093 LINK = . 
      0010BC 05                    3094         .byte      5
      0010BD 41 42 4F 52 54        3095         .ascii     "ABORT"
      0010C2                       3096 ABORT:
      0010C2 CD 11 B9         [ 4] 3097         CALL     PRESE
      0010C5 CC 11 D6         [ 2] 3098         JP     QUIT
                                   3099 
                                   3100 ;       abort"  ( f -- )
                                   3101 ;       Run time routine of ABORT".
                                   3102 ;       Abort with a message.
      0010C8 10 BC                 3103         .word      LINK
                           0010CA  3104 LINK = . 
      0010CA 46                    3105 	.byte      COMPO+6
      0010CB 41 42 4F 52 54        3106         .ascii     "ABORT"
      0010D0 22                    3107         .byte      '"'
      0010D1                       3108 ABORQ:
      0010D1 CD 02 6B         [ 4] 3109         CALL     QBRAN
      0010D4 10 F0                 3110         .word      ABOR2   ;text flag
      0010D6 CD 0C CC         [ 4] 3111         CALL     DOSTR
      0010D9 CD 0C 6E         [ 4] 3112 ABOR1:  CALL     SPACE
      0010DC CD 09 26         [ 4] 3113         CALL     COUNT
      0010DF CD 0C 98         [ 4] 3114         CALL     TYPES
      0010E2 CD 02 38         [ 4] 3115         CALL     DOLIT
      0010E5 00 3F                 3116         .word     63 ; "?"
      0010E7 CD 02 22         [ 4] 3117         CALL     EMIT
      0010EA CD 0C B6         [ 4] 3118         CALL     CR
      0010ED CC 10 C2         [ 2] 3119         JP     ABORT   ;pass error string
      0010F0 CD 0C CC         [ 4] 3120 ABOR2:  CALL     DOSTR
      0010F3 CC 03 5D         [ 2] 3121         JP     DROP
                                   3122 
                                   3123 ;; The text interpreter
                                   3124 
                                   3125 ;       $INTERPRET      ( a -- )
                                   3126 ;       Interpret a word. If failed,
                                   3127 ;       try to convert it to an integer.
      0010F6 10 CA                 3128         .word      LINK
                           0010F8  3129 LINK = . 
      0010F8 0A                    3130         .byte      10
      0010F9 24 49 4E 54 45 52 50  3131         .ascii     "$INTERPRET"
             52 45 54
      001103                       3132 INTER:
      001103 CD 0F C5         [ 4] 3133         CALL     NAMEQ
      001106 CD 04 EC         [ 4] 3134         CALL     QDUP    ;?defined
      001109 CD 02 6B         [ 4] 3135         CALL     QBRAN
      00110C 11 2D                 3136         .word      INTE1
      00110E CD 02 C0         [ 4] 3137         CALL     AT
      001111 CD 02 38         [ 4] 3138         CALL     DOLIT
      001114 40 00                 3139 	.word       0x4000	; COMPO*256
      001116 CD 03 B3         [ 4] 3140         CALL     ANDD    ;?compile only lexicon bits
      001119 CD 10 D1         [ 4] 3141         CALL     ABORQ
      00111C 0D                    3142         .byte      13
      00111D 20 63 6F 6D 70 69 6C  3143         .ascii     " compile only"
             65 20 6F 6E 6C 79
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00112A CC 02 92         [ 2] 3144         JP     EXECU
      00112D CD 0B 63         [ 4] 3145 INTE1:  CALL     NUMBQ   ;convert a number
      001130 CD 02 6B         [ 4] 3146         CALL     QBRAN
      001133 10 D9                 3147         .word    ABOR1
      001135 81               [ 4] 3148         RET
                                   3149 
                                   3150 ;       [       ( -- )
                                   3151 ;       Start  text interpreter.
      001136 10 F8                 3152         .word      LINK
                           001138  3153 LINK = . 
      001138 81                    3154 	.byte      IMEDD+1
      001139 5B                    3155         .ascii     "["
      00113A                       3156 LBRAC:
      00113A CD 02 38         [ 4] 3157         CALL   DOLIT
      00113D 11 03                 3158         .word  INTER
      00113F CD 04 73         [ 4] 3159         CALL   TEVAL
      001142 CC 02 A9         [ 2] 3160         JP     STORE
                                   3161 
                                   3162 ;       .OK     ( -- )
                                   3163 ;       Display 'ok' while interpreting.
      001145 11 38                 3164         .word      LINK
                           001147  3165 LINK = . 
      001147 03                    3166         .byte      3
      001148 2E 4F 4B              3167         .ascii     ".OK"
      00114B                       3168 DOTOK:
      00114B CD 02 38         [ 4] 3169         CALL     DOLIT
      00114E 11 03                 3170         .word      INTER
      001150 CD 04 73         [ 4] 3171         CALL     TEVAL
      001153 CD 02 C0         [ 4] 3172         CALL     AT
      001156 CD 05 C3         [ 4] 3173         CALL     EQUAL
      001159 CD 02 6B         [ 4] 3174         CALL     QBRAN
      00115C 11 65                 3175         .word      DOTO1
      00115E CD 0C F5         [ 4] 3176         CALL     DOTQP
      001161 03                    3177         .byte      3
      001162 20 6F 6B              3178         .ascii     " ok"
      001165 CC 0C B6         [ 2] 3179 DOTO1:  JP     CR
                                   3180 
                                   3181 ;       ?STACK  ( -- )
                                   3182 ;       Abort if stack underflows.
      001168 11 47                 3183         .word      LINK
                           00116A  3184 LINK = . 
      00116A 06                    3185         .byte      6
      00116B 3F 53 54 41 43 4B     3186         .ascii     "?STACK"
      001171                       3187 QSTAC: 
      001171 CD 08 93         [ 4] 3188         CALL     DEPTH
      001174 CD 03 A0         [ 4] 3189         CALL     ZLESS   ;check only for underflow
      001177 CD 10 D1         [ 4] 3190         CALL     ABORQ
      00117A 0B                    3191         .byte      11
      00117B 20 75 6E 64 65 72 66  3192         .ascii     " underflow "
             6C 6F 77 20
      001186 81               [ 4] 3193         RET
                                   3194 
                                   3195 ;       EVAL    ( -- )
                                   3196 ;       Interpret  input stream.
      001187 11 6A                 3197         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                           001189  3198 LINK = . 
      001189 04                    3199         .byte      4
      00118A 45 56 41 4C           3200         .ascii     "EVAL"
      00118E                       3201 EVAL:
      00118E CD 0E C8         [ 4] 3202 EVAL1:  CALL     TOKEN
      001191 CD 03 67         [ 4] 3203         CALL     DUPP
      001194 CD 02 DE         [ 4] 3204         CALL     CAT     ;?input stream empty
      001197 CD 02 6B         [ 4] 3205         CALL     QBRAN
      00119A 11 AA                 3206         .word    EVAL2
      00119C CD 04 73         [ 4] 3207         CALL     TEVAL
      00119F CD 09 73         [ 4] 3208         CALL     ATEXE
      0011A2 CD 11 71         [ 4] 3209         CALL     QSTAC   ;evaluate input, check stack
      0011A5 CD 02 82         [ 4] 3210         CALL     BRAN
      0011A8 11 8E                 3211         .word    EVAL1
      0011AA CD 03 5D         [ 4] 3212 EVAL2:  CALL     DROP
      0011AD CC 11 4B         [ 2] 3213         JP       DOTOK
                                   3214 
                                   3215 ;       PRESET  ( -- )
                                   3216 ;       Reset data stack pointer and
                                   3217 ;       terminal input buffer.
      0011B0 11 89                 3218         .word      LINK
                           0011B2  3219 LINK = . 
      0011B2 06                    3220         .byte      6
      0011B3 50 52 45 53 45 54     3221         .ascii     "PRESET"
      0011B9                       3222 PRESE:
      0011B9 CD 02 38         [ 4] 3223         CALL     DOLIT
      0011BC 16 70                 3224         .word      SPP
      0011BE CD 03 54         [ 4] 3225         CALL     SPSTO
      0011C1 CD 02 38         [ 4] 3226         CALL     DOLIT
      0011C4 17 00                 3227         .word      TIBB
      0011C6 CD 04 52         [ 4] 3228         CALL     NTIB
      0011C9 CD 07 F1         [ 4] 3229         CALL     CELLP
      0011CC CC 02 A9         [ 2] 3230         JP     STORE
                                   3231 
                                   3232 ;       QUIT    ( -- )
                                   3233 ;       Reset return stack pointer
                                   3234 ;       and start text interpreter.
      0011CF 11 B2                 3235         .word      LINK
                           0011D1  3236 LINK = . 
      0011D1 04                    3237         .byte      4
      0011D2 51 55 49 54           3238         .ascii     "QUIT"
      0011D6                       3239 QUIT:
      0011D6 CD 02 38         [ 4] 3240         CALL     DOLIT
      0011D9 17 FF                 3241         .word      RPP
      0011DB CD 02 FB         [ 4] 3242         CALL     RPSTO   ;reset return stack pointer
      0011DE CD 11 3A         [ 4] 3243 QUIT1:  CALL     LBRAC   ;start interpretation
      0011E1 CD 10 9D         [ 4] 3244 QUIT2:  CALL     QUERY   ;get input
      0011E4 CD 11 8E         [ 4] 3245         CALL     EVAL
      0011E7 20 F8            [ 2] 3246         JRA     QUIT2   ;continue till error
                                   3247 
                                   3248 ;; The compiler
                                   3249 
                                   3250 ;       '       ( -- ca )
                                   3251 ;       Search vocabularies for
                                   3252 ;       next word in input stream.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011E9 11 D1                 3253         .word      LINK
                           0011EB  3254 LINK = . 
      0011EB 01                    3255         .byte      1
      0011EC 27                    3256         .ascii     "'"
      0011ED                       3257 TICK:
      0011ED CD 0E C8         [ 4] 3258         CALL     TOKEN
      0011F0 CD 0F C5         [ 4] 3259         CALL     NAMEQ   ;?defined
      0011F3 CD 02 6B         [ 4] 3260         CALL     QBRAN
      0011F6 10 D9                 3261         .word      ABOR1
      0011F8 81               [ 4] 3262         RET     ;yes, push code address
                                   3263 
                                   3264 ;       ALLOT   ( n -- )
                           000001  3265 .if PICATOUT_MOD
                                   3266 ;       Allocate n bytes to RAM 
                           000000  3267 .else 
                                   3268 ;       Allocate n bytes to  code dictionary.
                                   3269 .endif 
      0011F9 11 EB                 3270         .word      LINK
                           0011FB  3271 LINK = . 
      0011FB 05                    3272         .byte      5
      0011FC 41 4C 4C 4F 54        3273         .ascii     "ALLOT"
      001201                       3274 ALLOT:
      001201 CD 04 A3         [ 4] 3275         CALL     VPP
                           000001  3276 .if PICATOUT_MOD
                                   3277 ; must update APP_VP each time VP is modidied
      001204 CD 08 BF         [ 4] 3278         call PSTOR 
      001207 CD 18 AE         [ 4] 3279         call UPDATVP 
                           000000  3280 .else
                                   3281         JP     PSTOR
                                   3282 .endif ;PICATOUT_MOD
                                   3283 
                                   3284 ;       ,       ( w -- )
                                   3285 ;         Compile an integer into
                                   3286 ;         variable space.
      00120A 11 FB                 3287         .word      LINK
                           00120C  3288 LINK = . 
      00120C 01                    3289         .byte      1
      00120D 2C                    3290         .ascii     ","
      00120E                       3291 COMMA:
      00120E CD 09 3D         [ 4] 3292         CALL     HERE
      001211 CD 03 67         [ 4] 3293         CALL     DUPP
      001214 CD 07 F1         [ 4] 3294         CALL     CELLP   ;cell boundary
      001217 CD 04 A3         [ 4] 3295         CALL     VPP
      00121A CD 02 A9         [ 4] 3296         CALL     STORE
      00121D CC 02 A9         [ 2] 3297         JP     STORE
                                   3298 
                                   3299 ;       C,      ( c -- )
                                   3300 ;       Compile a byte into
                                   3301 ;       variables space.
      001220 12 0C                 3302        .word      LINK
                           001222  3303 LINK = . 
      001222 02                    3304         .byte      2
      001223 43 2C                 3305         .ascii     "C,"
      001225                       3306 CCOMMA:
      001225 CD 09 3D         [ 4] 3307         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      001228 CD 03 67         [ 4] 3308         CALL     DUPP
      00122B CD 08 1C         [ 4] 3309         CALL     ONEP
      00122E CD 04 A3         [ 4] 3310         CALL     VPP
      001231 CD 02 A9         [ 4] 3311         CALL     STORE
      001234 CC 02 CD         [ 2] 3312         JP     CSTOR
                                   3313 
                                   3314 ;       [COMPILE]       ( -- ; <string> )
                                   3315 ;       Compile next immediate
                                   3316 ;       word into code dictionary.
      001237 12 22                 3317         .word      LINK
                           001239  3318 LINK = . 
      001239 89                    3319 	.byte      IMEDD+9
      00123A 5B 43 4F 4D 50 49 4C  3320         .ascii     "[COMPILE]"
             45 5D
      001243                       3321 BCOMP:
      001243 CD 11 ED         [ 4] 3322         CALL     TICK
      001246 CC 14 F5         [ 2] 3323         JP     JSRC
                                   3324 
                                   3325 ;       COMPILE ( -- )
                                   3326 ;       Compile next jsr in
                                   3327 ;       colon list to code dictionary.
      001249 12 39                 3328         .word      LINK
                           00124B  3329 LINK = . 
      00124B 47                    3330 	.byte      COMPO+7
      00124C 43 4F 4D 50 49 4C 45  3331         .ascii     "COMPILE"
      001253                       3332 COMPI:
      001253 CD 03 11         [ 4] 3333         CALL     RFROM
                           000001  3334 .if PICATOUT_MOD
                                   3335 ; no need to increment
                           000000  3336 .else
                                   3337         CALL     ONEP
                                   3338 .endif 
      001256 CD 03 67         [ 4] 3339         CALL     DUPP
      001259 CD 02 C0         [ 4] 3340         CALL     AT
      00125C CD 14 F5         [ 4] 3341         CALL     JSRC    ;compile subroutine
      00125F CD 07 F1         [ 4] 3342         CALL     CELLP
                           000001  3343 .if PICATOUT_MOD
      001262 90 93            [ 1] 3344         ldw y,x 
      001264 90 FE            [ 2] 3345         ldw y,(y)
      001266 1C 00 02         [ 2] 3346         addw x,#CELLL 
      001269 90 FC            [ 2] 3347         jp (y)
                           000000  3348 .else 
                                   3349         JP     TOR
                                   3350 .endif 
                                   3351 
                                   3352 ;       LITERAL ( w -- )
                                   3353 ;       Compile tos to dictionary
                                   3354 ;       as an integer literal.
      00126B 12 4B                 3355         .word      LINK
                           00126D  3356 LINK = . 
      00126D 87                    3357 	.byte      IMEDD+7
      00126E 4C 49 54 45 52 41 4C  3358         .ascii     "LITERAL"
      001275                       3359 LITER:
      001275 CD 12 53         [ 4] 3360         CALL     COMPI
                           000001  3361 .if PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      001278 02 38                 3362         .word DOLIT 
                           000000  3363 .else         
                                   3364         CALL     DOLIT
                                   3365 .endif 
      00127A CC 12 0E         [ 2] 3366         JP     COMMA
                                   3367 
                                   3368 ;       $,"     ( -- )
                                   3369 ;       Compile a literal string
                                   3370 ;       up to next " .
      00127D 12 6D                 3371         .word      LINK
                           00127F  3372 LINK = . 
      00127F 03                    3373         .byte      3
      001280 24 2C 22              3374         .byte     '$',',','"'
      001283                       3375 STRCQ:
      001283 CD 02 38         [ 4] 3376         CALL     DOLIT
      001286 00 22                 3377         .word     34	; "
      001288 CD 0E 4B         [ 4] 3378         CALL     PARSE
      00128B CD 09 3D         [ 4] 3379         CALL     HERE
      00128E CD 09 FE         [ 4] 3380         CALL     PACKS   ;string to code dictionary
      001291 CD 09 26         [ 4] 3381         CALL     COUNT
      001294 CD 05 3D         [ 4] 3382         CALL     PLUS    ;calculate aligned end of string
      001297 CD 04 A3         [ 4] 3383         CALL     VPP
      00129A CC 02 A9         [ 2] 3384         JP     STORE
                                   3385 
                                   3386 ;; Structures
                                   3387 
                                   3388 ;       FOR     ( -- a )
                                   3389 ;       Start a FOR-NEXT loop
                                   3390 ;       structure in a colon definition.
      00129D 12 7F                 3391         .word      LINK
                           00129F  3392 LINK = . 
      00129F 83                    3393 	.byte      IMEDD+3
      0012A0 46 4F 52              3394         .ascii     "FOR"
      0012A3                       3395 FOR:
      0012A3 CD 12 53         [ 4] 3396         CALL     COMPI
                           000001  3397 .if PICATOUT_MOD
      0012A6 03 30                 3398         .word TOR 
                           000000  3399 .else
                                   3400         CALL     TOR
                                   3401 .endif
      0012A8 CC 09 3D         [ 2] 3402         JP     HERE
                                   3403 
                                   3404 ;       NEXT    ( a -- )
                                   3405 ;       Terminate a FOR-NEXT loop.
      0012AB 12 9F                 3406         .word      LINK
                           0012AD  3407 LINK = . 
      0012AD 84                    3408 	.byte      IMEDD+4
      0012AE 4E 45 58 54           3409         .ascii     "NEXT"
      0012B2                       3410 NEXT:
      0012B2 CD 12 53         [ 4] 3411         CALL     COMPI
                           000001  3412 .if PICATOUT_MOD
      0012B5 02 4C                 3413         .word DONXT 
                           000000  3414 .else 
                                   3415         CALL     DONXT
                                   3416 .endif         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                           000001  3417 .if PICATOUT_MOD
      0012B7 CD 04 DC         [ 4] 3418         call ADRADJ
                                   3419 .endif ; PICATOUT_MOD
      0012BA CC 12 0E         [ 2] 3420         JP     COMMA
                                   3421 
                                   3422 ;       I ( -- n )
                                   3423 ;       stack FOR-NEXT COUNTER 
      0012BD 12 AD                 3424         .word LINK 
                           0012BF  3425         LINK=.
      0012BF 01                    3426         .byte 1 
      0012C0 49                    3427         .ascii "I"
      0012C1                       3428 IFETCH: 
      0012C1 1D 00 02         [ 2] 3429         subw x,#CELLL 
      0012C4 16 03            [ 2] 3430         ldw y,(3,sp)
      0012C6 FF               [ 2] 3431         ldw (x),y 
      0012C7 81               [ 4] 3432         ret 
                                   3433 
                                   3434 ;       BEGIN   ( -- a )
                                   3435 ;       Start an infinite or
                                   3436 ;       indefinite loop structure.
      0012C8 12 BF                 3437         .word      LINK
                           0012CA  3438 LINK = . 
      0012CA 85                    3439 	.byte      IMEDD+5
      0012CB 42 45 47 49 4E        3440         .ascii     "BEGIN"
      0012D0                       3441 BEGIN:
      0012D0 CC 09 3D         [ 2] 3442         JP     HERE
                                   3443 
                                   3444 ;       UNTIL   ( a -- )
                                   3445 ;       Terminate a BEGIN-UNTIL
                                   3446 ;       indefinite loop structure.
      0012D3 12 CA                 3447         .word      LINK
                           0012D5  3448 LINK = . 
      0012D5 85                    3449 	.byte      IMEDD+5
      0012D6 55 4E 54 49 4C        3450         .ascii     "UNTIL"
      0012DB                       3451 UNTIL:
      0012DB CD 12 53         [ 4] 3452         CALL     COMPI
                           000001  3453 .if PICATOUT_MOD
      0012DE 02 6B                 3454         .word    QBRAN 
                           000000  3455 .else 
                                   3456         CALL     QBRAN
                                   3457 .endif 
                           000001  3458 .if PICATOUT_MOD 
      0012E0 CD 04 DC         [ 4] 3459         call ADRADJ
                                   3460 .endif ; PICATOUT_MOD
      0012E3 CC 12 0E         [ 2] 3461         JP     COMMA
                                   3462 
                                   3463 ;       AGAIN   ( a -- )
                                   3464 ;       Terminate a BEGIN-AGAIN
                                   3465 ;       infinite loop structure.
      0012E6 12 D5                 3466         .word      LINK
                           0012E8  3467 LINK = . 
      0012E8 85                    3468 	.byte      IMEDD+5
      0012E9 41 47 41 49 4E        3469         .ascii     "AGAIN"
      0012EE                       3470 AGAIN:
      0012EE CD 12 53         [ 4] 3471         CALL     COMPI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                           000001  3472 .if PICATOUT_MOD
      0012F1 02 82                 3473         .word BRAN
                           000000  3474 .else
                                   3475         CALL     BRAN
                                   3476 .endif 
                           000001  3477 .if PICATOUT_MOD 
      0012F3 CD 04 DC         [ 4] 3478         call ADRADJ 
                                   3479 .endif ; PICATOUT_MOD
      0012F6 CC 12 0E         [ 2] 3480         JP     COMMA
                                   3481 
                                   3482 ;       IF      ( -- A )
                                   3483 ;       Begin a conditional branch.
      0012F9 12 E8                 3484         .word      LINK
                           0012FB  3485 LINK = . 
      0012FB 82                    3486 	.byte      IMEDD+2
      0012FC 49 46                 3487         .ascii     "IF"
      0012FE                       3488 IFF:
      0012FE CD 12 53         [ 4] 3489         CALL     COMPI
                           000001  3490 .if PICATOUT_MOD
      001301 02 6B                 3491         .word QBRAN
                           000000  3492 .else
                                   3493         CALL     QBRAN
                                   3494 .endif 
      001303 CD 09 3D         [ 4] 3495         CALL     HERE
      001306 CD 08 50         [ 4] 3496         CALL     ZERO
      001309 CC 12 0E         [ 2] 3497         JP     COMMA
                                   3498 
                                   3499 ;       THEN        ( A -- )
                                   3500 ;       Terminate a conditional branch structure.
      00130C 12 FB                 3501         .word      LINK
                           00130E  3502 LINK = . 
      00130E 84                    3503 	.byte      IMEDD+4
      00130F 54 48 45 4E           3504         .ascii     "THEN"
      001313                       3505 THENN:
      001313 CD 09 3D         [ 4] 3506         CALL     HERE
                           000001  3507 .if PICATOUT_MOD 
      001316 CD 04 DC         [ 4] 3508         call ADRADJ 
                                   3509 .endif ; PICATOUT_MOD
      001319 CD 03 77         [ 4] 3510         CALL     SWAPP
      00131C CC 02 A9         [ 2] 3511         JP     STORE
                                   3512 
                                   3513 ;       ELSE        ( A -- A )
                                   3514 ;       Start the false clause in an IF-ELSE-THEN structure.
      00131F 13 0E                 3515         .word      LINK
                           001321  3516 LINK = . 
      001321 84                    3517 	.byte      IMEDD+4
      001322 45 4C 53 45           3518         .ascii     "ELSE"
      001326                       3519 ELSEE:
      001326 CD 12 53         [ 4] 3520         CALL     COMPI
                           000001  3521 .if PICATOUT_MOD
      001329 02 82                 3522         .word BRAN
                           000000  3523 .else
                                   3524         CALL     BRAN
                                   3525 .endif 
      00132B CD 09 3D         [ 4] 3526         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00132E CD 08 50         [ 4] 3527         CALL     ZERO
      001331 CD 12 0E         [ 4] 3528         CALL     COMMA
      001334 CD 03 77         [ 4] 3529         CALL     SWAPP
      001337 CD 09 3D         [ 4] 3530         CALL     HERE
                           000001  3531 .if PICATOUT_MOD 
      00133A CD 04 DC         [ 4] 3532         call ADRADJ 
                                   3533 .endif ; PICATOUT_MOD
      00133D CD 03 77         [ 4] 3534         CALL     SWAPP
      001340 CC 02 A9         [ 2] 3535         JP     STORE
                                   3536 
                                   3537 ;       AHEAD       ( -- A )
                                   3538 ;       Compile a forward branch instruction.
      001343 13 21                 3539         .word      LINK
                           001345  3540 LINK = . 
      001345 85                    3541 	.byte      IMEDD+5
      001346 41 48 45 41 44        3542         .ascii     "AHEAD"
      00134B                       3543 AHEAD:
      00134B CD 12 53         [ 4] 3544         CALL     COMPI
                           000001  3545 .if PICATOUT_MOD
      00134E 02 82                 3546         .word BRAN
                           000000  3547 .else
                                   3548         CALL     BRAN
                                   3549 .endif 
      001350 CD 09 3D         [ 4] 3550         CALL     HERE
      001353 CD 08 50         [ 4] 3551         CALL     ZERO
      001356 CC 12 0E         [ 2] 3552         JP     COMMA
                                   3553 
                                   3554 ;       WHILE       ( a -- A a )
                                   3555 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001359 13 45                 3556         .word      LINK
                           00135B  3557 LINK = . 
      00135B 85                    3558 	.byte      IMEDD+5
      00135C 57 48 49 4C 45        3559         .ascii     "WHILE"
      001361                       3560 WHILE:
      001361 CD 12 53         [ 4] 3561         CALL     COMPI
                           000001  3562 .if PICATOUT_MOD
      001364 02 6B                 3563         .word QBRAN
                           000000  3564 .else
                                   3565         CALL     QBRAN
                                   3566 .endif 
      001366 CD 09 3D         [ 4] 3567         CALL     HERE
      001369 CD 08 50         [ 4] 3568         CALL     ZERO
      00136C CD 12 0E         [ 4] 3569         CALL     COMMA
      00136F CC 03 77         [ 2] 3570         JP     SWAPP
                                   3571 
                                   3572 ;       REPEAT      ( A a -- )
                                   3573 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001372 13 5B                 3574         .word      LINK
                           001374  3575 LINK = . 
      001374 86                    3576         .byte      IMEDD+6
      001375 52 45 50 45 41 54     3577         .ascii     "REPEAT"
      00137B                       3578 REPEA:
      00137B CD 12 53         [ 4] 3579         CALL     COMPI
                           000001  3580 .if PICATOUT_MOD
      00137E 02 82                 3581         .word BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                           000000  3582 .else
                                   3583         CALL     BRAN
                                   3584 .endif 
                           000001  3585 .if PICATOUT_MOD 
      001380 CD 04 DC         [ 4] 3586         call ADRADJ 
                                   3587 .endif ; PICATOUT_MOD
      001383 CD 12 0E         [ 4] 3588         CALL     COMMA
      001386 CD 09 3D         [ 4] 3589         CALL     HERE
                           000001  3590 .if PICATOUT_MOD 
      001389 CD 04 DC         [ 4] 3591         call ADRADJ 
                                   3592 .endif ; PICATOUT_MOD
      00138C CD 03 77         [ 4] 3593         CALL     SWAPP
      00138F CC 02 A9         [ 2] 3594         JP     STORE
                                   3595 
                                   3596 ;       AFT         ( a -- a A )
                                   3597 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001392 13 74                 3598         .word      LINK
                           001394  3599 LINK = . 
      001394 83                    3600 	.byte      IMEDD+3
      001395 41 46 54              3601         .ascii     "AFT"
      001398                       3602 AFT:
      001398 CD 03 5D         [ 4] 3603         CALL     DROP
      00139B CD 13 4B         [ 4] 3604         CALL     AHEAD
      00139E CD 09 3D         [ 4] 3605         CALL     HERE
      0013A1 CC 03 77         [ 2] 3606         JP     SWAPP
                                   3607 
                                   3608 ;       ABORT"      ( -- ; <string> )
                                   3609 ;       Conditional abort with an error message.
      0013A4 13 94                 3610         .word      LINK
                           0013A6  3611 LINK = . 
      0013A6 86                    3612 	.byte      IMEDD+6
      0013A7 41 42 4F 52 54        3613         .ascii     "ABORT"
      0013AC 22                    3614         .byte      '"'
      0013AD                       3615 ABRTQ:
      0013AD CD 12 53         [ 4] 3616         CALL     COMPI
                           000001  3617 .if PICATOUT_MOD
      0013B0 10 D1                 3618         .word ABORQ
                           000000  3619 .else
                                   3620         CALL     ABORQ
                                   3621 .endif
      0013B2 CC 12 83         [ 2] 3622         JP     STRCQ
                                   3623 
                                   3624 ;       $"     ( -- ; <string> )
                                   3625 ;       Compile an inline string literal.
      0013B5 13 A6                 3626         .word      LINK
                           0013B7  3627 LINK = . 
      0013B7 82                    3628 	.byte      IMEDD+2
      0013B8 24 22                 3629         .byte     '$','"'
      0013BA                       3630 STRQ:
      0013BA CD 12 53         [ 4] 3631         CALL     COMPI
                           000001  3632 .if PICATOUT_MOD
      0013BD 0C EB                 3633         .word STRQP 
                           000000  3634 .else
                                   3635         CALL     STRQP
                                   3636 .endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013BF CC 12 83         [ 2] 3637         JP     STRCQ
                                   3638 
                                   3639 ;       ."          ( -- ; <string> )
                                   3640 ;       Compile an inline string literal to be typed out at run time.
      0013C2 13 B7                 3641         .word      LINK
                           0013C4  3642 LINK = . 
      0013C4 82                    3643 	.byte      IMEDD+2
      0013C5 2E 22                 3644         .byte     '.','"'
      0013C7                       3645 DOTQ:
      0013C7 CD 12 53         [ 4] 3646         CALL     COMPI
                           000001  3647 .if PICATOUT_MOD
      0013CA 0C F5                 3648         .word DOTQP 
                           000000  3649 .else
                                   3650         CALL     DOTQP
                                   3651 .endif 
      0013CC CC 12 83         [ 2] 3652         JP     STRCQ
                                   3653 
                                   3654 ;; Name compiler
                                   3655 
                                   3656 ;       ?UNIQUE ( a -- a )
                                   3657 ;       Display a warning message
                                   3658 ;       if word already exists.
      0013CF 13 C4                 3659         .word      LINK
                           0013D1  3660 LINK = . 
      0013D1 07                    3661         .byte      7
      0013D2 3F 55 4E 49 51 55 45  3662         .ascii     "?UNIQUE"
      0013D9                       3663 UNIQU:
      0013D9 CD 03 67         [ 4] 3664         CALL     DUPP
      0013DC CD 0F C5         [ 4] 3665         CALL     NAMEQ   ;?name exists
      0013DF CD 02 6B         [ 4] 3666         CALL     QBRAN
      0013E2 13 F8                 3667         .word      UNIQ1
      0013E4 CD 0C F5         [ 4] 3668         CALL     DOTQP   ;redef are OK
      0013E7 07                    3669         .byte       7
      0013E8 20 72 65 44 65 66 20  3670         .ascii     " reDef "       
      0013EF CD 03 91         [ 4] 3671         CALL     OVER
      0013F2 CD 09 26         [ 4] 3672         CALL     COUNT
      0013F5 CD 0C 98         [ 4] 3673         CALL     TYPES   ;just in case
      0013F8 CC 03 5D         [ 2] 3674 UNIQ1:  JP     DROP
                                   3675 
                                   3676 ;       $,n     ( na -- )
                                   3677 ;       Build a new dictionary name
                                   3678 ;       using string at na.
                           000001  3679 .if PICATOUT_MOD
                                   3680 ; compile dans l'espace des variables 
                                   3681 .endif 
      0013FB 13 D1                 3682         .word      LINK
                           0013FD  3683 LINK = . 
      0013FD 03                    3684         .byte      3
      0013FE 24 2C 6E              3685         .ascii     "$,n"
      001401                       3686 SNAME:
      001401 CD 03 67         [ 4] 3687         CALL     DUPP
      001404 CD 02 DE         [ 4] 3688         CALL     CAT     ;?null input
      001407 CD 02 6B         [ 4] 3689         CALL     QBRAN
      00140A 14 37                 3690         .word      PNAM1
      00140C CD 13 D9         [ 4] 3691         CALL     UNIQU   ;?redefinition
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      00140F CD 03 67         [ 4] 3692         CALL     DUPP
      001412 CD 09 26         [ 4] 3693         CALL     COUNT
      001415 CD 05 3D         [ 4] 3694         CALL     PLUS
      001418 CD 04 A3         [ 4] 3695         CALL     VPP
      00141B CD 02 A9         [ 4] 3696         CALL     STORE
      00141E CD 03 67         [ 4] 3697         CALL     DUPP
      001421 CD 04 C1         [ 4] 3698         CALL     LAST
      001424 CD 02 A9         [ 4] 3699         CALL     STORE   ;save na for vocabulary link
      001427 CD 08 00         [ 4] 3700         CALL     CELLM   ;link address
      00142A CD 04 95         [ 4] 3701         CALL     CNTXT
      00142D CD 02 C0         [ 4] 3702         CALL     AT
      001430 CD 03 77         [ 4] 3703         CALL     SWAPP
      001433 CD 02 A9         [ 4] 3704         CALL     STORE
      001436 81               [ 4] 3705         RET     ;save code pointer
      001437 CD 0C EB         [ 4] 3706 PNAM1:  CALL     STRQP
      00143A 05                    3707         .byte      5
      00143B 20 6E 61 6D 65        3708         .ascii     " name" ;null input
      001440 CC 10 D9         [ 2] 3709         JP     ABOR1
                                   3710 
                                   3711 ;; FORTH compiler
                                   3712 
                                   3713 ;       $COMPILE        ( a -- )
                                   3714 ;       Compile next word to
                                   3715 ;       dictionary as a token or literal.
      001443 13 FD                 3716         .word      LINK
                           001445  3717 LINK = . 
      001445 08                    3718         .byte      8
      001446 24 43 4F 4D 50 49 4C  3719         .ascii     "$COMPILE"
             45
      00144E                       3720 SCOMP:
      00144E CD 0F C5         [ 4] 3721         CALL     NAMEQ
      001451 CD 04 EC         [ 4] 3722         CALL     QDUP    ;?defined
      001454 CD 02 6B         [ 4] 3723         CALL     QBRAN
      001457 14 6F                 3724         .word      SCOM2
      001459 CD 02 C0         [ 4] 3725         CALL     AT
      00145C CD 02 38         [ 4] 3726         CALL     DOLIT
      00145F 80 00                 3727         .word     0x8000	;  IMEDD*256
      001461 CD 03 B3         [ 4] 3728         CALL     ANDD    ;?immediate
      001464 CD 02 6B         [ 4] 3729         CALL     QBRAN
      001467 14 6C                 3730         .word      SCOM1
      001469 CC 02 92         [ 2] 3731         JP     EXECU
      00146C CC 14 F5         [ 2] 3732 SCOM1:  JP     JSRC
      00146F CD 0B 63         [ 4] 3733 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001472 CD 02 6B         [ 4] 3734         CALL     QBRAN
      001475 10 D9                 3735         .word      ABOR1
      001477 CC 12 75         [ 2] 3736         JP     LITER
                                   3737 
                                   3738 ;       OVERT   ( -- )
                                   3739 ;       Link a new word into vocabulary.
      00147A 14 45                 3740         .word      LINK
                           00147C  3741 LINK = . 
      00147C 05                    3742         .byte      5
      00147D 4F 56 45 52 54        3743         .ascii     "OVERT"
      001482                       3744 OVERT:
      001482 CD 04 C1         [ 4] 3745         CALL     LAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      001485 CD 02 C0         [ 4] 3746         CALL     AT
      001488 CD 04 95         [ 4] 3747         CALL     CNTXT
      00148B CC 02 A9         [ 2] 3748         JP     STORE
                                   3749 
                                   3750 ;       ;       ( -- )
                                   3751 ;       Terminate a colon definition.
      00148E 14 7C                 3752         .word      LINK
                           001490  3753 LINK = . 
      001490 C1                    3754 	.byte      IMEDD+COMPO+1
      001491 3B                    3755         .ascii     ";"
      001492                       3756 SEMIS:
      001492 CD 12 53         [ 4] 3757         CALL     COMPI
                           000001  3758 .if PICATOUT_MOD
      001495 02 A2                 3759         .word EXIT 
                           000000  3760 .else
                                   3761         CALL     EXIT
                                   3762 .endif 
      001497 CD 11 3A         [ 4] 3763         CALL     LBRAC
                           000001  3764 .if PICATOUT_MOD
      00149A CD 14 82         [ 4] 3765         call OVERT 
      00149D CD 1D 7A         [ 4] 3766         CALL FMOVE
      0014A0 CD 1D FF         [ 4] 3767         CALL UPDATPTR 
      0014A3 81               [ 4] 3768         RET 
                           000000  3769 .else 
                                   3770         JP     OVERT
                                   3771 .endif 
                                   3772 
                           000001  3773 .if PICATOUT_MOD
                                   3774 ;       Terminate an ISR definition 
                                   3775 ;       retourn ca of ISR as double
                                   3776 ;       I; ( -- ud )
      0014A4 14 90                 3777         .word LINK 
                           0014A6  3778         LINK=.
      0014A6 C2                    3779         .byte 2+IMEDD+COMPO 
      0014A7 49 3B                 3780         .ascii "I;" 
      0014A9                       3781 ISEMI:
      0014A9 1D 00 02         [ 2] 3782         subw x,#CELLL  
      0014AC 90 AE 00 80      [ 2] 3783         ldw y,#IRET_CODE 
      0014B0 FF               [ 2] 3784         ldw (x),y 
      0014B1 CD 12 25         [ 4] 3785         call CCOMMA
      0014B4 CD 11 3A         [ 4] 3786         call LBRAC 
      0014B7 CD 1E 44         [ 4] 3787         call IFMOVE 
      0014BA CD 04 B1         [ 4] 3788         CALL CPP
      0014BD CD 02 C0         [ 4] 3789         call AT 
      0014C0 CD 03 77         [ 4] 3790         call SWAPP 
      0014C3 CD 04 B1         [ 4] 3791         CALL CPP 
      0014C6 CD 02 A9         [ 4] 3792         call STORE 
      0014C9 CD 18 97         [ 4] 3793         call UPDATCP 
      0014CC CD 18 54         [ 4] 3794         call EEPVP 
      0014CF CD 03 5D         [ 4] 3795         call DROP 
      0014D2 CD 02 C0         [ 4] 3796         call AT 
      0014D5 CD 04 A3         [ 4] 3797         call VPP 
      0014D8 CD 02 A9         [ 4] 3798         call STORE 
      0014DB CC 08 50         [ 2] 3799         jp ZERO
                                   3800           
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3801         
                                   3802 .endif ;PICATOUT_MOD
                                   3803 
                                   3804 ;       ]       ( -- )
                                   3805 ;       Start compiling words in
                                   3806 ;       input stream.
      0014DE 14 A6                 3807         .word      LINK
                           0014E0  3808 LINK = . 
      0014E0 01                    3809         .byte      1
      0014E1 5D                    3810         .ascii     "]"
      0014E2                       3811 RBRAC:
      0014E2 CD 02 38         [ 4] 3812         CALL   DOLIT
      0014E5 14 4E                 3813         .word  SCOMP
      0014E7 CD 04 73         [ 4] 3814         CALL   TEVAL
      0014EA CC 02 A9         [ 2] 3815         JP     STORE
                                   3816 
                                   3817 ;       CALL,    ( ca -- )
                                   3818 ;       Compile a subroutine call.
      0014ED 14 E0                 3819         .word      LINK
                           0014EF  3820 LINK = . 
      0014EF 04                    3821         .byte      4
      0014F0 43 41 4C 4C 2C        3822         .ascii     "CALL,"
      0014F5                       3823 JSRC:
      0014F5 CD 02 38         [ 4] 3824         CALL     DOLIT
      0014F8 00 CD                 3825         .word     CALLL     ;CALL
      0014FA CD 12 25         [ 4] 3826         CALL     CCOMMA
      0014FD CC 12 0E         [ 2] 3827         JP     COMMA
                                   3828 
                           000001  3829 .if PICATOUT_MOD
                                   3830 ;       INIT-OFS ( -- )
                                   3831 ;       compute offset to adjust jump address 
                                   3832 ;       set variable OFFSET 
      001500 14 EF                 3833         .word LINK 
                           001502  3834         LINK=.
      001502 08                    3835         .byte 8 
      001503 49 4E 49 54 2D 4F 46  3836         .ascii "INIT-OFS" 
             53
      00150B                       3837 INITOFS:
      00150B CD 04 B1         [ 4] 3838         call CPP 
      00150E CD 02 C0         [ 4] 3839         call AT 
      001511 CD 09 3D         [ 4] 3840         call HERE
      001514 CD 05 9B         [ 4] 3841         call SUBB 
      001517 CD 04 D3         [ 4] 3842         call OFFSET 
      00151A CD 02 A9         [ 4] 3843         call STORE 
      00151D 81               [ 4] 3844         ret 
                                   3845 .endif 
                                   3846 
                                   3847 ;       :       ( -- ; <string> )
                                   3848 ;       Start a new colon definition
                                   3849 ;       using next word as its name.
      00151E 15 02                 3850         .word      LINK
                           001520  3851 LINK = . 
      001520 01                    3852         .byte      1
      001521 3A                    3853         .ascii     ":"
      001522                       3854 COLON:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                           000001  3855 .if PICATOUT_MOD
      001522 CD 15 0B         [ 4] 3856         call INITOFS 
                                   3857 .endif ; PICATOUT_MOD
      001525 CD 0E C8         [ 4] 3858         CALL   TOKEN
      001528 CD 14 01         [ 4] 3859         CALL   SNAME
      00152B CC 14 E2         [ 2] 3860         JP     RBRAC
                                   3861 
                           000001  3862 .if PICATOUT_MOD 
                                   3863 ;       I:  ( -- )
                                   3864 ;       Start interrupt service routine definition
                                   3865 ;       those definition have no name.
      00152E 15 20                 3866         .word LINK
                           001530  3867         LINK=.
      001530 02                    3868         .byte 2 
      001531 49 3A                 3869         .ascii "I:" 
      001533                       3870 ICOLON:
      001533 CD 15 0B         [ 4] 3871         call INITOFS 
      001536 CC 14 E2         [ 2] 3872         jp RBRAC  
                                   3873 .endif ; PICATOUT_MOD
                                   3874 
                                   3875 ;       IMMEDIATE       ( -- )
                                   3876 ;       Make last compiled word
                                   3877 ;       an immediate word.
      001539 15 30                 3878         .word      LINK
                           00153B  3879 LINK = . 
      00153B 09                    3880         .byte      9
      00153C 49 4D 4D 45 44 49 41  3881         .ascii     "IMMEDIATE"
             54 45
      001545                       3882 IMMED:
      001545 CD 02 38         [ 4] 3883         CALL     DOLIT
      001548 80 00                 3884         .word     0x8000	;  IMEDD*256
      00154A CD 04 C1         [ 4] 3885         CALL     LAST
      00154D CD 02 C0         [ 4] 3886         CALL     AT
      001550 CD 02 C0         [ 4] 3887         CALL     AT
      001553 CD 03 C7         [ 4] 3888         CALL     ORR
      001556 CD 04 C1         [ 4] 3889         CALL     LAST
      001559 CD 02 C0         [ 4] 3890         CALL     AT
      00155C CC 02 A9         [ 2] 3891         JP     STORE
                                   3892 
                                   3893 ;; Defining words
                                   3894 
                                   3895 ;       CREATE  ( -- ; <string> )
                                   3896 ;       Compile a new array
                                   3897 ;       without allocating space.
      00155F 15 3B                 3898         .word      LINK
                           001561  3899 LINK = . 
      001561 06                    3900         .byte      6
      001562 43 52 45 41 54 45     3901         .ascii     "CREATE"
      001568                       3902 CREAT:
      001568 CD 0E C8         [ 4] 3903         CALL     TOKEN
      00156B CD 14 01         [ 4] 3904         CALL     SNAME
      00156E CD 14 82         [ 4] 3905         CALL     OVERT        
      001571 CD 12 53         [ 4] 3906         CALL     COMPI 
                           000001  3907 .if PICATOUT_MOD
      001574 04 14                 3908         .word DOVAR 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                           000000  3909 .else
                                   3910         CALL     DOVAR
                                   3911 .endif 
      001576 81               [ 4] 3912         RET
                                   3913 
                                   3914 ;       VARIABLE        ( -- ; <string> )
                                   3915 ;       Compile a new variable
                                   3916 ;       initialized to 0.
      001577 15 61                 3917         .word      LINK
                           001579  3918 LINK = . 
      001579 08                    3919         .byte      8
      00157A 56 41 52 49 41 42 4C  3920         .ascii     "VARIABLE"
             45
      001582                       3921 VARIA:
                           000001  3922 .if PICATOUT_MOD
                                   3923 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001582 CD 09 3D         [ 4] 3924         CALL HERE
      001585 CD 03 67         [ 4] 3925         CALL DUPP 
      001588 CD 07 F1         [ 4] 3926         CALL CELLP
      00158B CD 04 A3         [ 4] 3927         CALL VPP 
      00158E CD 02 A9         [ 4] 3928         CALL STORE
      001591 CD 18 AE         [ 4] 3929         call UPDATVP 
                                   3930 .endif         
      001594 CD 15 68         [ 4] 3931         CALL CREAT
      001597 CD 03 67         [ 4] 3932         CALL DUPP
      00159A CD 12 0E         [ 4] 3933         CALL COMMA
      00159D CD 08 50         [ 4] 3934         CALL ZERO
                           000001  3935 .if PICATOUT_MOD 
      0015A0 CD 03 77         [ 4] 3936         call SWAPP 
      0015A3 CD 02 A9         [ 4] 3937         CALL STORE 
      0015A6 CD 1D 7A         [ 4] 3938         CALL FMOVE ; move definition to FLASH
      0015A9 CD 1D FF         [ 4] 3939         CALL UPDATPTR
      0015AC 81               [ 4] 3940         RET 
                                   3941 .endif ;PICATOUT_MOD        
                                   3942 
                           000001  3943 .if PICATOUT_MOD
                                   3944 ;       CONSTANT  ( n -- ; <string> )
                                   3945 ;       Compile a new constant 
                                   3946 ;       n CONSTANT name 
      0015AD 15 79                 3947         .word LINK 
                           0015AF  3948         LINK=. 
      0015AF 08                    3949         .byte 8 
      0015B0 43 4F 4E 53 54 41 4E  3950         .ascii "CONSTANT" 
             54
      0015B8                       3951 CONSTANT:          
      0015B8 CD 0E C8         [ 4] 3952         CALL TOKEN
      0015BB CD 14 01         [ 4] 3953         CALL SNAME 
      0015BE CD 14 82         [ 4] 3954         CALL OVERT 
      0015C1 CD 12 53         [ 4] 3955         CALL COMPI 
                           000001  3956 .if PICATOUT_MOD
      0015C4 15 DA                 3957         .word DOCONST
                           000000  3958 .else
                                   3959         CALL DOCONST
                                   3960 .endif 
      0015C6 CD 12 0E         [ 4] 3961         CALL COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015C9 CD 1D 7A         [ 4] 3962         CALL FMOVE
      0015CC CD 1D FF         [ 4] 3963         CALL UPDATPTR  
      0015CF 81               [ 4] 3964         RET          
                                   3965 
                                   3966 ; CONSTANT runtime semantic 
                                   3967 ; doCONST  ( -- n )
      0015D0 15 AF                 3968         .word LINK 
                           0015D2  3969         LINK=.
      0015D2 07                    3970         .byte 7
      0015D3 44 4F 43 4F 4E 53 54  3971         .ascii "DOCONST"
      0015DA                       3972 DOCONST:
      0015DA 1D 00 02         [ 2] 3973         subw x,#CELLL
      0015DD 90 85            [ 2] 3974         popw y 
      0015DF 90 FE            [ 2] 3975         ldw y,(y) 
      0015E1 FF               [ 2] 3976         ldw (x),y 
      0015E2 81               [ 4] 3977         ret 
                                   3978 .endif ;PICATOUT_MOD
                                   3979 
                                   3980 
                                   3981 ;; Tools
                                   3982 
                                   3983 ;       _TYPE   ( b u -- )
                                   3984 ;       Display a string. Filter
                                   3985 ;       non-printing characters.
      0015E3 15 D2                 3986         .word      LINK
                           0015E5  3987 LINK = . 
      0015E5 05                    3988         .byte      5
      0015E6 5F 54 59 50 45        3989         .ascii     "_TYPE"
      0015EB                       3990 UTYPE:
      0015EB CD 03 30         [ 4] 3991         CALL     TOR     ;start count down loop
      0015EE 20 0F            [ 2] 3992         JRA     UTYP2   ;skip first pass
      0015F0 CD 03 67         [ 4] 3993 UTYP1:  CALL     DUPP
      0015F3 CD 02 DE         [ 4] 3994         CALL     CAT
      0015F6 CD 08 7A         [ 4] 3995         CALL     TCHAR
      0015F9 CD 02 22         [ 4] 3996         CALL     EMIT    ;display only printable
      0015FC CD 08 1C         [ 4] 3997         CALL     ONEP    ;increment address
      0015FF CD 02 4C         [ 4] 3998 UTYP2:  CALL     DONXT
      001602 15 F0                 3999         .word      UTYP1   ;loop till done
      001604 CC 03 5D         [ 2] 4000         JP     DROP
                                   4001 
                                   4002 ;       dm+     ( a u -- a )
                                   4003 ;       Dump u bytes from ,
                                   4004 ;       leaving a+u on  stack.
      001607 15 E5                 4005         .word      LINK
                           001609  4006 LINK = . 
      001609 03                    4007         .byte      3
      00160A 64 6D 2B              4008         .ascii     "dm+"
      00160D                       4009 DUMPP:
      00160D CD 03 91         [ 4] 4010         CALL     OVER
      001610 CD 02 38         [ 4] 4011         CALL     DOLIT
      001613 00 04                 4012         .word      4
      001615 CD 0D 1E         [ 4] 4013         CALL     UDOTR   ;display address
      001618 CD 0C 6E         [ 4] 4014         CALL     SPACE
      00161B CD 03 30         [ 4] 4015         CALL     TOR     ;start count down loop
      00161E 20 11            [ 2] 4016         JRA     PDUM2   ;skip first pass
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001620 CD 03 67         [ 4] 4017 PDUM1:  CALL     DUPP
      001623 CD 02 DE         [ 4] 4018         CALL     CAT
      001626 CD 02 38         [ 4] 4019         CALL     DOLIT
      001629 00 03                 4020         .word      3
      00162B CD 0D 1E         [ 4] 4021         CALL     UDOTR   ;display numeric data
      00162E CD 08 1C         [ 4] 4022         CALL     ONEP    ;increment address
      001631 CD 02 4C         [ 4] 4023 PDUM2:  CALL     DONXT
      001634 16 20                 4024         .word      PDUM1   ;loop till done
      001636 81               [ 4] 4025         RET
                                   4026 
                                   4027 ;       DUMP    ( a u -- )
                                   4028 ;       Dump u bytes from a,
                                   4029 ;       in a formatted manner.
      001637 16 09                 4030         .word      LINK
                           001639  4031 LINK = . 
      001639 04                    4032         .byte      4
      00163A 44 55 4D 50           4033         .ascii     "DUMP"
      00163E                       4034 DUMP:
      00163E CD 04 24         [ 4] 4035         CALL     BASE
      001641 CD 02 C0         [ 4] 4036         CALL     AT
      001644 CD 03 30         [ 4] 4037         CALL     TOR
      001647 CD 0A F6         [ 4] 4038         CALL     HEX     ;save radix, set hex
      00164A CD 02 38         [ 4] 4039         CALL     DOLIT
      00164D 00 10                 4040         .word      16
      00164F CD 07 42         [ 4] 4041         CALL     SLASH   ;change count to lines
      001652 CD 03 30         [ 4] 4042         CALL     TOR     ;start count down loop
      001655 CD 0C B6         [ 4] 4043 DUMP1:  CALL     CR
      001658 CD 02 38         [ 4] 4044         CALL     DOLIT
      00165B 00 10                 4045         .word      16
      00165D CD 05 28         [ 4] 4046         CALL     DDUP
      001660 CD 16 0D         [ 4] 4047         CALL     DUMPP   ;display numeric
      001663 CD 04 FD         [ 4] 4048         CALL     ROT
      001666 CD 04 FD         [ 4] 4049         CALL     ROT
      001669 CD 0C 6E         [ 4] 4050         CALL     SPACE
      00166C CD 0C 6E         [ 4] 4051         CALL     SPACE
      00166F CD 15 EB         [ 4] 4052         CALL     UTYPE   ;display printable characters
      001672 CD 02 4C         [ 4] 4053         CALL     DONXT
      001675 16 55                 4054         .word      DUMP1   ;loop till done
      001677 CD 03 5D         [ 4] 4055 DUMP3:  CALL     DROP
      00167A CD 03 11         [ 4] 4056         CALL     RFROM
      00167D CD 04 24         [ 4] 4057         CALL     BASE
      001680 CC 02 A9         [ 2] 4058         JP     STORE   ;restore radix
                                   4059 
                                   4060 ;       .S      ( ... -- ... )
                                   4061 ;        Display  contents of stack.
      001683 16 39                 4062         .word      LINK
                           001685  4063 LINK = . 
      001685 02                    4064         .byte      2
      001686 2E 53                 4065         .ascii     ".S"
      001688                       4066 DOTS:
      001688 CD 0C B6         [ 4] 4067         CALL     CR
      00168B CD 08 93         [ 4] 4068         CALL     DEPTH   ;stack depth
      00168E CD 03 30         [ 4] 4069         CALL     TOR     ;start count down loop
      001691 20 0C            [ 2] 4070         JRA     DOTS2   ;skip first pass
      001693 CD 03 24         [ 4] 4071 DOTS1:  CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001696 CD 08 1C         [ 4] 4072         CALL ONEP
      001699 CD 08 AA         [ 4] 4073 	CALL     PICK
      00169C CD 0D 51         [ 4] 4074         CALL     DOT     ;index stack, display contents
      00169F CD 02 4C         [ 4] 4075 DOTS2:  CALL     DONXT
      0016A2 16 93                 4076         .word      DOTS1   ;loop till done
      0016A4 CD 0C F5         [ 4] 4077         CALL     DOTQP
      0016A7 05                    4078         .byte      5
      0016A8 20 3C 73 70 20        4079         .ascii     " <sp "
      0016AD 81               [ 4] 4080         RET
                                   4081 
                                   4082 ;       >NAME   ( ca -- na | F )
                                   4083 ;       Convert code address
                                   4084 ;       to a name address.
      0016AE 16 85                 4085         .word      LINK
                           0016B0  4086 LINK = . 
      0016B0 05                    4087         .byte      5
      0016B1 3E 4E 41 4D 45        4088         .ascii     ">NAME"
      0016B6                       4089 TNAME:
      0016B6 CD 04 95         [ 4] 4090         CALL     CNTXT   ;vocabulary link
      0016B9 CD 02 C0         [ 4] 4091 TNAM2:  CALL     AT
      0016BC CD 03 67         [ 4] 4092         CALL     DUPP    ;?last word in a vocabulary
      0016BF CD 02 6B         [ 4] 4093         CALL     QBRAN
      0016C2 16 DD                 4094         .word      TNAM4
      0016C4 CD 05 28         [ 4] 4095         CALL     DDUP
      0016C7 CD 0E D6         [ 4] 4096         CALL     NAMET
      0016CA CD 03 DC         [ 4] 4097         CALL     XORR    ;compare
      0016CD CD 02 6B         [ 4] 4098         CALL     QBRAN
      0016D0 16 D7                 4099         .word      TNAM3
      0016D2 CD 08 00         [ 4] 4100         CALL     CELLM   ;continue with next word
      0016D5 20 E2            [ 2] 4101         JRA     TNAM2
      0016D7 CD 03 77         [ 4] 4102 TNAM3:  CALL     SWAPP
      0016DA CC 03 5D         [ 2] 4103         JP     DROP
      0016DD CD 05 1D         [ 4] 4104 TNAM4:  CALL     DDROP
      0016E0 CC 08 50         [ 2] 4105         JP     ZERO
                                   4106 
                                   4107 ;       .ID     ( na -- )
                                   4108 ;        Display  name at address.
      0016E3 16 B0                 4109         .word      LINK
                           0016E5  4110 LINK = . 
      0016E5 03                    4111         .byte      3
      0016E6 2E 49 44              4112         .ascii     ".ID"
      0016E9                       4113 DOTID:
      0016E9 CD 04 EC         [ 4] 4114         CALL     QDUP    ;if zero no name
      0016EC CD 02 6B         [ 4] 4115         CALL     QBRAN
      0016EF 16 FF                 4116         .word      DOTI1
      0016F1 CD 09 26         [ 4] 4117         CALL     COUNT
      0016F4 CD 02 38         [ 4] 4118         CALL     DOLIT
      0016F7 00 1F                 4119         .word      0x1F
      0016F9 CD 03 B3         [ 4] 4120         CALL     ANDD    ;mask lexicon bits
      0016FC CC 15 EB         [ 2] 4121         JP     UTYPE
      0016FF CD 0C F5         [ 4] 4122 DOTI1:  CALL     DOTQP
      001702 09                    4123         .byte      9
      001703 20 6E 6F 4E 61 6D 65  4124         .ascii     " noName"
      00170A 81               [ 4] 4125         RET
                                   4126 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                           000000  4127 WANT_SEE=0 
                           000000  4128 .if WANT_SEE 
                                   4129 ;       SEE     ( -- ; <string> )
                                   4130 ;       A simple decompiler.
                                   4131 ;       Updated for byte machines.
                                   4132         .word      LINK
                                   4133 LINK = . 
                                   4134         .byte      3
                                   4135         .ascii     "SEE"
                                   4136 SEE:
                                   4137         CALL     TICK    ;starting address
                                   4138         CALL     CR
                                   4139         CALL     ONEM
                                   4140 SEE1:   CALL     ONEP
                                   4141         CALL     DUPP
                                   4142         CALL     AT
                                   4143         CALL     DUPP    ;?does it contain a zero
                                   4144         CALL     QBRAN
                                   4145         .word    SEE2
                                   4146         CALL     TNAME   ;?is it a name
                                   4147 SEE2:   CALL     QDUP    ;name address or zero
                                   4148         CALL     QBRAN
                                   4149         .word    SEE3
                                   4150         CALL     SPACE
                                   4151         CALL     DOTID   ;display name
                                   4152         CALL     ONEP
                                   4153         JRA      SEE4
                                   4154 SEE3:   CALL     DUPP
                                   4155         CALL     CAT
                                   4156         CALL     UDOT    ;display number
                                   4157 SEE4:   CALL     NUFQ    ;user control
                                   4158         CALL     QBRAN
                                   4159         .word    SEE1
                                   4160         JP     DROP
                                   4161 .endif ; WANT_SEE 
                                   4162 
                                   4163 ;       WORDS   ( -- )
                                   4164 ;       Display names in vocabulary.
      00170B 16 E5                 4165         .word      LINK
                           00170D  4166 LINK = . 
      00170D 05                    4167         .byte      5
      00170E 57 4F 52 44 53        4168         .ascii     "WORDS"
      001713                       4169 WORDS:
      001713 CD 0C B6         [ 4] 4170         CALL     CR
      001716 CD 04 95         [ 4] 4171         CALL     CNTXT   ;only in context
      001719 CD 02 C0         [ 4] 4172 WORS1:  CALL     AT
      00171C CD 04 EC         [ 4] 4173         CALL     QDUP    ;?at end of list
      00171F CD 02 6B         [ 4] 4174         CALL     QBRAN
      001722 17 38                 4175         .word      WORS2
      001724 CD 03 67         [ 4] 4176         CALL     DUPP
      001727 CD 0C 6E         [ 4] 4177         CALL     SPACE
      00172A CD 16 E9         [ 4] 4178         CALL     DOTID   ;display a name
      00172D CD 08 00         [ 4] 4179         CALL     CELLM
      001730 CD 02 82         [ 4] 4180         CALL     BRAN
      001733 17 19                 4181         .word      WORS1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001735 CD 03 5D         [ 4] 4182         CALL     DROP
      001738 81               [ 4] 4183 WORS2:  RET
                                   4184 
                                   4185         
                                   4186 ;; Hardware reset
                                   4187 
                                   4188 ;       hi      ( -- )
                                   4189 ;       Display sign-on message.
      001739 17 0D                 4190         .word      LINK
                           00173B  4191 LINK = . 
      00173B 02                    4192         .byte      2
      00173C 68 69                 4193         .ascii     "hi"
      00173E                       4194 HI:
      00173E CD 0C B6         [ 4] 4195         CALL     CR
      001741 CD 0C F5         [ 4] 4196         CALL     DOTQP   ;initialize I/O
      001744 0F                    4197         .byte      15
      001745 73 74 6D 38 65 46 6F  4198         .ascii     "stm8eForth v"
             72 74 68 20 76
      001751 32                    4199 	.byte      VER+'0'
      001752 2E                    4200         .byte      '.' 
      001753 31                    4201 	.byte      EXT+'0' ;version
      001754 CC 0C B6         [ 2] 4202         JP     CR
                                   4203 
                           000000  4204 WANT_DEBUG=0
                           000000  4205 .if WANT_DEBUG 
                                   4206 ;       DEBUG      ( -- )
                                   4207 ;       Display sign-on message.
                                   4208 ;        .word      LINK
                                   4209 LINK = . 
                                   4210         .byte      5
                                   4211         .ascii     "DEBUG"
                                   4212 DEBUG:
                                   4213 	CALL DOLIT
                                   4214 	.word 0x65
                                   4215 	CALL EMIT
                                   4216 	CALL DOLIT
                                   4217 	.word 0
                                   4218  	CALL ZLESS 
                                   4219 	CALL DOLIT
                                   4220 	.word 0xFFFE
                                   4221 	CALL ZLESS 
                                   4222 	CALL UPLUS 
                                   4223  	CALL DROP 
                                   4224 	CALL DOLIT
                                   4225 	.word 3
                                   4226 	CALL UPLUS 
                                   4227 	CALL UPLUS 
                                   4228  	CALL DROP
                                   4229 	CALL DOLIT
                                   4230 	.word 0x43
                                   4231 	CALL UPLUS 
                                   4232  	CALL DROP
                                   4233 	CALL EMIT
                                   4234 	CALL DOLIT
                                   4235 	.word 0x4F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4236 	CALL DOLIT
                                   4237 	.word 0x6F
                                   4238  	CALL XORR
                                   4239 	CALL DOLIT
                                   4240 	.word 0xF0
                                   4241  	CALL ANDD
                                   4242 	CALL DOLIT
                                   4243 	.word 0x4F
                                   4244  	CALL ORR
                                   4245 	CALL EMIT
                                   4246 	CALL DOLIT
                                   4247 	.word 8
                                   4248 	CALL DOLIT
                                   4249 	.word 6
                                   4250  	CALL SWAPP
                                   4251 	CALL OVER
                                   4252 	CALL XORR
                                   4253 	CALL DOLIT
                                   4254 	.word 3
                                   4255 	CALL ANDD 
                                   4256 	CALL ANDD
                                   4257 	CALL DOLIT
                                   4258 	.word 0x70
                                   4259 	CALL UPLUS 
                                   4260 	CALL DROP
                                   4261 	CALL EMIT
                                   4262 	CALL DOLIT
                                   4263 	.word 0
                                   4264 	CALL QBRAN
                                   4265 	.word DEBUG1
                                   4266 	CALL DOLIT
                                   4267 	.word 0x3F
                                   4268 DEBUG1:
                                   4269 	CALL DOLIT
                                   4270 	.word 0xFFFF
                                   4271 	CALL QBRAN
                                   4272 	.word DEBUG2
                                   4273 	CALL DOLIT
                                   4274 	.word 0x74
                                   4275 	CALL BRAN
                                   4276 	.word DEBUG3
                                   4277 DEBUG2:
                                   4278 	CALL DOLIT
                                   4279 	.word 0x21
                                   4280 DEBUG3:
                                   4281 	CALL EMIT
                                   4282 	CALL DOLIT
                                   4283 	.word 0x68
                                   4284 	CALL DOLIT
                                   4285 	.word 0x80
                                   4286 	CALL STORE
                                   4287 	CALL DOLIT
                                   4288 	.word 0x80
                                   4289 	CALL AT
                                   4290 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4291 	CALL DOLIT
                                   4292 	.word 0x4D
                                   4293 	CALL TOR
                                   4294 	CALL RAT
                                   4295 	CALL RFROM
                                   4296 	CALL ANDD
                                   4297 	CALL EMIT
                                   4298 	CALL DOLIT
                                   4299 	.word 0x61
                                   4300 	CALL DOLIT
                                   4301 	.word 0xA
                                   4302 	CALL TOR
                                   4303 DEBUG4:
                                   4304 	CALL DOLIT
                                   4305 	.word 1
                                   4306 	CALL UPLUS 
                                   4307 	CALL DROP
                                   4308 	CALL DONXT
                                   4309 	.word DEBUG4
                                   4310 	CALL EMIT
                                   4311 	CALL DOLIT
                                   4312 	.word 0x656D
                                   4313 	CALL DOLIT
                                   4314 	.word 0x100
                                   4315 	CALL UMSTA
                                   4316 	CALL SWAPP
                                   4317 	CALL DOLIT
                                   4318 	.word 0x100
                                   4319 	CALL UMSTA
                                   4320 	CALL SWAPP 
                                   4321 	CALL DROP
                                   4322 	CALL EMIT
                                   4323 	CALL EMIT
                                   4324 	CALL DOLIT
                                   4325 	.word 0x2043
                                   4326 	CALL DOLIT
                                   4327 	.word 0
                                   4328 	CALL DOLIT
                                   4329 	.word 0x100
                                   4330 	CALL UMMOD
                                   4331 	CALL EMIT
                                   4332 	CALL EMIT
                                   4333 	;JP ORIG
                                   4334 	RET
                                   4335 .endif ; WANT_DEBUG 
                                   4336 
                                   4337 
                                   4338 ;       'BOOT   ( -- a )
                                   4339 ;       The application startup vector.
      001757 17 3B                 4340         .word      LINK
                           001759  4341 LINK = . 
      001759 05                    4342         .byte      5
      00175A 27 42 4F 4F 54        4343         .ascii     "'BOOT"
      00175F                       4344 TBOOT:
      00175F CD 04 14         [ 4] 4345         CALL     DOVAR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001762 40 02                 4346         .word    APP_RUN      ;application to boot
                                   4347 
                                   4348 ;       COLD    ( -- )
                                   4349 ;       The hilevel cold start s=ence.
      001764 17 59                 4350         .word      LINK
                           001766  4351         LINK = . 
      001766 04                    4352         .byte      4
      001767 43 4F 4C 44           4353         .ascii     "COLD"
      00176B                       4354 COLD:
                           000000  4355 .if WANT_DEBUG
                                   4356         CALL DEBUG
                                   4357 .endif 
      00176B CD 02 38         [ 4] 4358 COLD1:  CALL     DOLIT
      00176E 00 27                 4359         .word      UZERO
      001770 CD 02 38         [ 4] 4360 	CALL     DOLIT
      001773 00 06                 4361         .word      UPP
      001775 CD 02 38         [ 4] 4362         CALL     DOLIT
      001778 00 16                 4363 	.word      UEND-UZERO
      00177A CD 09 8A         [ 4] 4364         CALL     CMOVE   ;initialize user area
                                   4365 
                           000001  4366 .if PICATOUT_MOD
                                   4367 ; if APP_RUN==0 initialize with ca de 'hi'  
      00177D 90 CE 40 02      [ 2] 4368         ldw y,APP_RUN 
      001781 26 0B            [ 1] 4369         jrne 0$
      001783 1D 00 02         [ 2] 4370         subw x,#CELLL 
      001786 90 AE 17 3E      [ 2] 4371         ldw y,#HI  
      00178A FF               [ 2] 4372         ldw (x),y
      00178B CD 18 86         [ 4] 4373         call UPDATRUN 
      00178E                       4374 0$:        
                                   4375 ; update LAST with APP_LAST 
                                   4376 ; if APP_LAST > LAST else do the opposite
      00178E 90 CE 40 00      [ 2] 4377         ldw y,APP_LAST 
      001792 90 B3 1A         [ 2] 4378         cpw y,ULAST 
      001795 22 05            [ 1] 4379         jrugt 1$ 
                                   4380 ; save LAST at APP_LAST  
      001797 CD 18 6E         [ 4] 4381         call UPDATLAST 
      00179A 20 06            [ 2] 4382         jra 2$
      00179C                       4383 1$: ; update LAST with APP_LAST 
      00179C 90 BF 1A         [ 2] 4384         ldw ULAST,y
      00179F 90 BF 14         [ 2] 4385         ldw UCNTXT,y 
      0017A2                       4386 2$:  
                                   4387 ; update APP_CP if < app_space 
      0017A2 90 CE 40 04      [ 2] 4388         ldw y,APP_CP  
      0017A6 90 B3 18         [ 2] 4389         cpw y,UCP   
      0017A9 24 06            [ 1] 4390         jruge 3$ 
      0017AB CD 18 97         [ 4] 4391         call UPDATCP
      0017AE 90 BE 18         [ 2] 4392         ldw y,UCP   
      0017B1                       4393 3$:
      0017B1 90 BF 18         [ 2] 4394         ldw UCP,y                 
                                   4395 ; update UVP with APP_VP  
                                   4396 ; if APP_VP>UVP else do the opposite 
      0017B4 90 CE 40 06      [ 2] 4397         ldw y,APP_VP 
      0017B8 90 B3 16         [ 2] 4398         cpw y,UVP 
      0017BB 22 05            [ 1] 4399         jrugt 4$
      0017BD CD 18 AE         [ 4] 4400         call UPDATVP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017C0 20 03            [ 2] 4401         jra 6$
      0017C2                       4402 4$: ; update UVP with APP_VP 
      0017C2 90 BF 16         [ 2] 4403         ldw UVP,y 
      0017C5                       4404 6$:      
                                   4405 .endif ; PICATOUT_MOD
      0017C5 CD 11 B9         [ 4] 4406         CALL     PRESE   ;initialize data stack and TIB
      0017C8 CD 17 5F         [ 4] 4407         CALL     TBOOT
      0017CB CD 09 73         [ 4] 4408         CALL     ATEXE   ;application boot
      0017CE CD 14 82         [ 4] 4409         CALL     OVERT
      0017D1 CC 11 D6         [ 2] 4410         JP     QUIT    ;start interpretation
                                   4411 
                           000001  4412 .if PICATOUT_MOD
                                   4413         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4414         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      0017D4 17 66                   30     .word LINK 
                           0017D6    31     LINK=.
      0017D6 03                      32     .byte 3 
      0017D7 46 50 21                33     .ascii "FP!"
      0017DA                         34 fptr_store:
      0017DA 90 93            [ 1]   35     ldw y,x
      0017DC 90 FE            [ 2]   36     ldw y,(y)
      0017DE 90 9F            [ 1]   37     ld a,yl 
      0017E0 B7 2E            [ 1]   38     ld FPTR,a 
      0017E2 1C 00 02         [ 2]   39     addw x,#CELLL 
      0017E5 90 93            [ 1]   40     ldw y,x 
      0017E7 90 FE            [ 2]   41     ldw y,(y)
      0017E9 90 BF 2F         [ 2]   42     ldw PTR16,y
      0017EC 1C 00 02         [ 2]   43     addw x,#CELLL 
      0017EF 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      0017F0 17 D6                   51     .word LINK 
                           0017F2    52 LINK=.
      0017F2 06                      53     .byte 6 
      0017F3 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      0017F9                         55 EEPROM: 
      0017F9 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      0017FD 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001800 EF 02            [ 2]   58     ldw (2,x),y 
      001802 90 5F            [ 1]   59     clrw y 
      001804 FF               [ 2]   60     ldw (x),y 
      001805 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001806 17 F2                   67 	.word LINK 
                           001808    68 	LINK=.
      001808 08                      69 	.byte 8 
      001809 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001811                         71 EEPLAST:
      001811 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001814 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001818 EF 02            [ 2]   74 	ldw (2,x),y 
      00181A 90 5F            [ 1]   75 	clrw y 
      00181C FF               [ 2]   76 	ldw (x),y 
      00181D 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      00181E 18 08                   83 	.word LINK 
                           001820    84 	LINK=.
      001820 07                      85 	.byte 7
      001821 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001828                         87 EEPRUN:
      001828 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      00182B 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      00182F EF 02            [ 2]   90 	ldw (2,x),y 
      001831 90 5F            [ 1]   91 	clrw y 
      001833 FF               [ 2]   92 	ldw (x),y 
      001834 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001835 18 20                   99 	.word LINK
                           001837   100 	LINK=.
      001837 06                     101 	.byte 6 
      001838 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      00183E                        103 EEPCP:
      00183E 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001841 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001845 EF 02            [ 2]  106 	ldw (2,x),y 
      001847 90 5F            [ 1]  107 	clrw y 
      001849 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      00184A 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      00184B 18 37                  115 	.word LINK
                           00184D   116 	LINK=.
      00184D 06                     117 	.byte 6
      00184E 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001854                        119 EEPVP:
      001854 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001857 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      00185B EF 02            [ 2]  122 	ldw (2,x),y 
      00185D 90 5F            [ 1]  123 	clrw y 
      00185F FF               [ 2]  124 	ldw (x),y 
      001860 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001861 18 4D                  131 	.word LINK 
                           001863   132 	LINK=.
      001863 0A                     133 	.byte 10
      001864 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      00186E                        135 UPDATLAST:
      00186E CD 04 C1         [ 4]  136 	call LAST
      001871 CD 02 C0         [ 4]  137 	call AT  
      001874 CD 18 11         [ 4]  138 	call EEPLAST
      001877 CC 19 EA         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      00187A 18 63                  145 	.word LINK
                           00187C   146 	LINK=.
      00187C 09                     147 	.byte 9
      00187D 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001886                        149 UPDATRUN:
      001886 CD 18 28         [ 4]  150 	call EEPRUN
      001889 CC 19 EA         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      00188C 18 7C                  157 	.word LINK 
                           00188E   158 	LINK=.
      00188E 08                     159 	.byte 8 
      00188F 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      001897                        161 UPDATCP:
      001897 CD 04 B1         [ 4]  162 	call CPP 
      00189A CD 02 C0         [ 4]  163 	call AT 
      00189D CD 18 3E         [ 4]  164 	call EEPCP 
      0018A0 CC 19 EA         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      0018A3 18 8E                  171 	.word LINK
                           0018A5   172 	LINK=.
      0018A5 08                     173 	.byte 8 
      0018A6 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      0018AE                        175 UPDATVP:
      0018AE CD 04 A3         [ 4]  176 	call VPP 
      0018B1 CD 02 C0         [ 4]  177 	call AT
      0018B4 CD 18 54         [ 4]  178 	call EEPVP 
      0018B7 CC 19 EA         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      0018BA 18 A5                  186     .word LINK 
                           0018BC   187 LINK=.
      0018BC 02                     188     .byte 2
      0018BD 46 40                  189     .ascii "F@"
      0018BF                        190 farat:
      0018BF CD 17 DA         [ 4]  191     call fptr_store
      0018C2 92 BC 00 2E      [ 5]  192     ldf a,[FPTR]
      0018C6 1D 00 02         [ 2]  193     subw x,#CELLL 
      0018C9 F7               [ 1]  194     ld (x),a 
      0018CA 90 AE 00 01      [ 2]  195     ldw y,#1
      0018CE 91 AF 00 2E      [ 1]  196     ldf a,([FPTR],y)
      0018D2 E7 01            [ 1]  197     ld (1,x),a
      0018D4 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      0018D5 18 BC                  204     .word LINK
                           0018D7   205     LINK=.
      0018D7 03                     206     .byte 3 
      0018D8 46 43 40               207     .ascii "FC@" 
      0018DB                        208 farcat:
      0018DB CD 17 DA         [ 4]  209     call fptr_store 
      0018DE 92 BC 00 2E      [ 5]  210     ldf a,[FPTR]
      0018E2 1D 00 02         [ 2]  211     subw x,#CELLL 
      0018E5 E7 01            [ 1]  212     ld (1,x),a 
      0018E7 7F               [ 1]  213     clr (x)
      0018E8 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      0018E9 18 D7                  221     .word LINK 
                           0018EB   222 LINK=.
      0018EB 06                     223     .byte 6 
      0018EC 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      0018F2                        225 unlock_eeprom:
      0018F2 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      0018F6 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      0018FA 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      0018FE 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001902 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001907 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001908 18 EB                  238     .word LINK 
                           00190A   239 LINK=. 
      00190A 06                     240     .byte 6 
      00190B 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001911                        242 unlock_flash:
      001911 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001915 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001919 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      00191D 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001921 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001926 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001927 19 0A                  255 	.word LINK 
                           001929   256 	LINK=.
      001929 06                     257 	.byte 6
      00192A 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001930                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001930 90 BE 2F         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001933 3D 2E            [ 1]  263 	tnz FPTR 
      001935 26 16            [ 1]  264 	jrne 4$
      001937 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      00193B 24 10            [ 1]  266     jruge 4$
      00193D 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001941 25 0D            [ 1]  268     jrult 9$
      001943 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001947 22 07            [ 1]  270 	jrugt 9$
      001949 CD 18 F2         [ 4]  271 	call unlock_eeprom
      00194C 81               [ 4]  272 	ret 
      00194D CD 19 11         [ 4]  273 4$: call unlock_flash
      001950 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001951 19 29                  281 	.word LINK 
                           001953   282 	LINK=.
      001953 04                     283 	.byte 4 
      001954 4C 4F 43 4B            284 	.ascii "LOCK" 
      001958                        285 lock: 
      001958 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      00195C 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001960 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001961 19 53                  294 	.word LINK 
                           001963   295 	LINK=. 
      001963 08                     296 	.byte 8 
      001964 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      00196C                        298 inc_fptr:
      00196C 3C 30            [ 1]  299 	inc PTR8 
      00196E 26 08            [ 1]  300 	jrne 1$
      001970 90 BE 2E         [ 2]  301 	ldw y,FPTR 
      001973 90 5C            [ 2]  302 	incw y 
      001975 90 BF 2E         [ 2]  303 	ldw FPTR,y 
      001978 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001979 19 63                  315 	.word LINK 
                           00197B   316 	LINK=. 
      00197B 07                     317 	.byte 7 
      00197C 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001983                        320 write_byte:
      001983 90 93            [ 1]  321 	ldw y,x 
      001985 90 FE            [ 2]  322 	ldw y,(y)
      001987 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      00198A 90 9F            [ 1]  324 	ld a,yl
      00198C 92 BD 00 2E      [ 4]  325 	ldf [FPTR],a
      001990 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001995 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001997 19 7B                  335     .word LINK 
                           001999   336 	LINK=.
      001999 04                     337     .byte 4 
      00199A 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      00199E                        343 ee_cstore:
      00199E 52 02            [ 2]  344 	sub sp,#VSIZE
      0019A0 CD 17 DA         [ 4]  345     call fptr_store
      0019A3 E6 01            [ 1]  346 	ld a,(1,x)
      0019A5 43               [ 1]  347 	cpl a 
      0019A6 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      0019A8 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      0019AA CD 19 30         [ 4]  350 	call unlock 
                                    351 	; check if option
      0019AD 3D 2E            [ 1]  352 	tnz FPTR 
      0019AF 26 19            [ 1]  353 	jrne 2$
      0019B1 90 BE 2F         [ 2]  354 	ldw y,PTR16 
      0019B4 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      0019B8 2B 10            [ 1]  356 	jrmi 2$
      0019BA 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      0019BE 2A 0A            [ 1]  358 	jrpl 2$
      0019C0 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      0019C2 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      0019C6 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0019CA                        363 2$: 
      0019CA CD 19 83         [ 4]  364 	call write_byte 	
      0019CD 0D 02            [ 1]  365 	tnz (OPT,sp)
      0019CF 27 0D            [ 1]  366 	jreq 3$ 
      0019D1 7B 01            [ 1]  367     ld a,(BTW,sp)
      0019D3 90 5F            [ 1]  368     clrw y
      0019D5 90 97            [ 1]  369 	ld yl,a 
      0019D7 1D 00 02         [ 2]  370 	subw x,#CELLL 
      0019DA FF               [ 2]  371 	ldw (x),y 
      0019DB CD 19 83         [ 4]  372 	call write_byte
      0019DE                        373 3$: 
      0019DE CD 19 58         [ 4]  374 	call lock 
      0019E1 5B 02            [ 2]  375 	addw sp,#VSIZE 
      0019E3 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      0019E4 19 99                  382 	.word LINK 
                           0019E6   383 	LINK=.
      0019E6 03                     384 	.byte 3 
      0019E7 45 45 21               385 	.ascii "EE!"
      0019EA                        386 ee_store:
      0019EA CD 17 DA         [ 4]  387 	call fptr_store 
      0019ED CD 19 30         [ 4]  388 	call unlock 
      0019F0 90 93            [ 1]  389 	ldw y,x 
      0019F2 90 FE            [ 2]  390 	ldw y,(y)
      0019F4 90 89            [ 2]  391 	pushw y 
      0019F6 90 5E            [ 1]  392 	swapw y 
      0019F8 FF               [ 2]  393 	ldw (x),y 
      0019F9 CD 19 83         [ 4]  394 	call write_byte 
      0019FC 90 85            [ 2]  395 	popw y 
      0019FE 1D 00 02         [ 2]  396 	subw x,#CELLL
      001A01 FF               [ 2]  397 	ldw (x),y 
      001A02 CD 19 83         [ 4]  398 	call write_byte
      001A05 CC 19 58         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001A08 19 E6                  407 	.word LINK 
                           001A0A   408 	LINK=. 
      001A0A 09                     409 	.byte 9 
      001A0B 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001A14                        411 row_erase:
      001A14 CD 17 DA         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001A17 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001A1A 90 AE 1A 61      [ 2]  416 	ldw y,#row_erase_proc
      001A1E FF               [ 2]  417 	ldw (x),y 
      001A1F CD 09 4E         [ 4]  418 	call PAD 
      001A22 90 AE 1A 88      [ 2]  419 	ldw y,#row_erase_proc_end 
      001A26 72 A2 1A 61      [ 2]  420 	subw y,#row_erase_proc
      001A2A 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001A2D FF               [ 2]  422 	ldw (x),y 
      001A2E CD 09 8A         [ 4]  423 	call CMOVE 
      001A31                        424 block_erase:
      001A31 90 BE 2F         [ 2]  425 	ldw y,FPTR+1
      001A34 90 A3 1E 80      [ 2]  426 	cpw y,#app_space 
      001A38 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001A3A 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001A3E 24 01            [ 1]  430 	jruge 1$
      001A40 81               [ 4]  431 	ret ; bad address 
      001A41 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A45 23 01            [ 2]  433 	jrule 2$ 
      001A47 81               [ 4]  434 	ret ; bad address 
      001A48                        435 2$:	
      001A48 CD 18 F2         [ 4]  436 	call unlock_eeprom 
      001A4B 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001A4D                        439 erase_flash:
      001A4D CD 19 11         [ 4]  440 	call unlock_flash 
      001A50                        441 proceed_erase:
      001A50 CD 09 4E         [ 4]  442 	call PAD 
      001A53 90 93            [ 1]  443 	ldw y,x
      001A55 90 FE            [ 2]  444 	ldw y,(y)
      001A57 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001A5A 90 FD            [ 4]  446 	call (y) 
      001A5C 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001A60 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001A61                        451 row_erase_proc:
      001A61 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001A65 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001A69 4F               [ 1]  454 	clr a 
      001A6A 90 5F            [ 1]  455 	clrw y 
      001A6C 91 A7 00 2E      [ 1]  456 	ldf ([FPTR],y),a
      001A70 90 5C            [ 2]  457     incw y
      001A72 91 A7 00 2E      [ 1]  458 	ldf ([FPTR],y),a
      001A76 90 5C            [ 2]  459     incw y
      001A78 91 A7 00 2E      [ 1]  460 	ldf ([FPTR],y),a
      001A7C 90 5C            [ 2]  461     incw y
      001A7E 91 A7 00 2E      [ 1]  462 	ldf ([FPTR],y),a
      001A82 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001A87 81               [ 4]  464 	ret
      001A88                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001A88                        478 copy_buffer:
      001A88 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001A8A 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001A8E 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001A92 90 5F            [ 1]  483 	clrw y
      001A94 F6               [ 1]  484 1$:	ld a,(x)
      001A95 91 A7 00 2E      [ 1]  485 	ldf ([FPTR],y),a
      001A99 5C               [ 2]  486 	incw x 
      001A9A 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001A9C 0A 01            [ 1]  488 	dec (BCNT,sp)
      001A9E 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001AA0 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001AA5 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001AA6 81               [ 4]  493 	ret 
      001AA7                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001AA7                        500 copy_prog_to_ram:
      001AA7 1D 00 06         [ 2]  501 	subw x,#6
      001AAA 90 AE 1A 88      [ 2]  502 	ldw y,#copy_buffer 
      001AAE EF 04            [ 2]  503 	ldw (4,x),y 
      001AB0 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001AB4 EF 02            [ 2]  505 	ldw (2,x),y 
      001AB6 90 AE 1A A7      [ 2]  506 	ldw y,#copy_buffer_end 
      001ABA 72 A2 1A 88      [ 2]  507 	subw y,#copy_buffer  
      001ABE FF               [ 2]  508 	ldw (x),y 
      001ABF CD 09 8A         [ 4]  509 	call CMOVE 
      001AC2 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001AC3 1A 0A                  519 	.word LINK 
                           001AC5   520 	LINK=.
      001AC5 06                     521 	.byte 6 
      001AC6 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001ACC                        523 write_row:
      001ACC CD 17 DA         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001ACF A6 80            [ 1]  526 	ld a,#0x80 
      001AD1 B4 30            [ 1]  527 	and a,PTR8 
      001AD3 B7 30            [ 1]  528 	ld PTR8,a  
      001AD5 CD 1A A7         [ 4]  529 	call copy_prog_to_ram
      001AD8 CD 19 30         [ 4]  530 	call unlock
      001ADB 90 93            [ 1]  531 	ldw y,x 
      001ADD 90 FE            [ 2]  532 	ldw y,(y)
      001ADF 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001AE2 89               [ 2]  534 	pushw x 
      001AE3 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001AE4 CD 17 00         [ 4]  536 	call TIBBASE
      001AE7 CD 19 58         [ 4]  537 	call lock
      001AEA 85               [ 2]  538 	popw x 
      001AEB 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001AEC 1A C5                  547 		.word LINK 
                           001AEE   548 		LINK=.
      001AEE 07                     549 		.byte 7 
      001AEF 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001AF6                        551 set_option: 
      001AF6 90 93            [ 1]  552 		ldw y,x 
      001AF8 90 FE            [ 2]  553 		ldw y,(y)
      001AFA 27 06            [ 1]  554 		jreq 1$
      001AFC 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001B00 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001B02 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001B05 81               [ 4]  559 		ret
      001B06 90 58            [ 2]  560 2$:		sllw y 
      001B08 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001B0C FF               [ 2]  562 		ldw (x),y 
      001B0D 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001B10 90 5F            [ 1]  564 		clrw y 
      001B12 FF               [ 2]  565 		ldw (x),y 
      001B13 CD 19 9E         [ 4]  566 		call ee_cstore
      001B16 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001B17 1A EE                  576 	.word LINK  
                           001B19   577 	LINK=.
      001B19 08                     578 	.byte 8 
      001B1A 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001B22                        580 pristine:
                                    581 ;;; erase EEPROM
      001B22 CD 17 F9         [ 4]  582 	call EEPROM 
      001B25 CD 05 28         [ 4]  583 1$:	call DDUP 
      001B28 CD 1A 14         [ 4]  584 	call row_erase
      001B2B 90 93            [ 1]  585 	ldw y,x 
      001B2D 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001B30 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001B34 EF 02            [ 2]  588 	ldw (2,x),y
      001B36 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001B3A 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001B3C 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001B40 FF               [ 2]  593 2$:	ldw (x),y   
      001B41 90 5F            [ 1]  594 	clrw y 
      001B43 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001B45 CD 05 28         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B48 CD 1A F6         [ 4]  597 	call set_option
      001B4B 90 93            [ 1]  598 	ldw y,x 
      001B4D 90 FE            [ 2]  599 	ldw y,(y)
      001B4F 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001B51 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001B55 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001B57 90 AE 1E 80      [ 2]  604 	ldw y,#app_space
      001B5B EF 02            [ 2]  605 	ldw (2,x),y  
      001B5D 90 5F            [ 1]  606 	clrw y 
      001B5F FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001B60 CD 1A 14         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001B63 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001B66 90 5F            [ 1]  611 	clrw y  
      001B68 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001B69 CD 03 67         [ 4]  613 	call DUPP  
      001B6C CD 1B 89         [ 4]  614 	call reset_vector
      001B6F 90 93            [ 1]  615 	ldw y,x 
      001B71 90 FE            [ 2]  616 	ldw y,(y)
      001B73 90 5C            [ 2]  617 	incw y   ; next vector 
      001B75 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001B79 25 ED            [ 1]  619 	jrult 4$
      001B7B CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001B7E 1B 19                  628 	.word LINK 
                           001B80   629 	LINK=. 
      001B80 08                     630 	.byte 8 
      001B81 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001B89                        632 reset_vector:
      001B89 90 93            [ 1]  633 	ldw y,x
      001B8B 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001B8E 90 FE            [ 2]  635 	ldw y,(y)
      001B90 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001B94 27 3A            [ 1]  637 	jreq 9$
      001B96 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001B9A 22 34            [ 1]  639 	jrugt 9$  
      001B9C 90 58            [ 2]  640 	sllw y 
      001B9E 90 58            [ 2]  641 	sllw y 
      001BA0 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001BA4 90 BF 20         [ 2]  643 	ldw YTEMP,y
      001BA7 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001BAA EF 02            [ 2]  645 	ldw (2,x),y 
      001BAC 90 5F            [ 1]  646 	clrw y
      001BAE FF               [ 2]  647 	ldw (x),y 
      001BAF A6 82            [ 1]  648 	ld a,#0x82 
      001BB1 90 95            [ 1]  649 	ld yh,a
      001BB3 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BB5 CD 19 EA         [ 4]  651 	call ee_store
      001BB8 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001BBB 90 5F            [ 1]  653 	clrw y 
      001BBD FF               [ 2]  654 	ldw (x),y 
      001BBE 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001BC2 EF 04            [ 2]  656 	ldw (4,x),y 
      001BC4 90 BE 20         [ 2]  657 	ldw y,YTEMP  
      001BC7 72 A9 00 02      [ 2]  658 	addw y,#2
      001BCB EF 02            [ 2]  659 	ldw (2,x),y 
      001BCD CD 19 EA         [ 4]  660 	call ee_store
      001BD0 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= ca are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( ca -- )
                                    669 ;------------------------------
      001BD1 1B 80                  670 	.word LINK 
                           001BD3   671 	LINK=.
      001BD3 07                     672 	.byte 7
      001BD4 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001BDB                        679 CHKIVEC:
      001BDB 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001BDD 90 93            [ 1]  681 	ldw y,x 
      001BDF 90 FE            [ 2]  682 	ldw y,(y)
      001BE1 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001BE3 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001BE5 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001BE8 BF 2F            [ 2]  686 	ldw PTR16,X
      001BEA AE FF FC         [ 2]  687 	ldw x,#-4 
      001BED 1C 00 04         [ 2]  688 1$:	addw x,#4
      001BF0 A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001BF3 27 22            [ 1]  690 	jreq 9$
      001BF5 90 93            [ 1]  691 	ldw y,x  
      001BF7 91 D6 2F         [ 4]  692 	ld a,([PTR16],y)
      001BFA 11 03            [ 1]  693 	cp a,(CADR,sp)
      001BFC 25 EF            [ 1]  694 	jrult 1$
      001BFE 90 5C            [ 2]  695 	incw y 
      001C00 91 D6 2F         [ 4]  696 	ld a,([PTR16],y)
      001C03 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001C05 25 E6            [ 1]  698 	jrult 1$ 
      001C07 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001C09 54               [ 2]  700 	srlw x
      001C0A 54               [ 2]  701 	srlw x 
      001C0B 90 93            [ 1]  702 	ldw y,x 
      001C0D 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001C0F FF               [ 2]  704 	ldw (x),y
      001C10 CD 1B 89         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001C13 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001C15 20 D6            [ 2]  707 	jra 1$
      001C17 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001C19 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001C1C 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001C1E 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001C1F 1B D3                  719 	.word LINK
                           001C21   720 	LINK=.
      001C21 08                     721 	.byte 8 
      001C22 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001C2A                        723 set_vector:
      001C2A 90 93            [ 1]  724     ldw y,x 
      001C2C 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001C2F 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001C31 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001C35 23 04            [ 2]  728 	jrule 2$
      001C37 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001C3A 81               [ 4]  730 	ret
      001C3B 90 58            [ 2]  731 2$:	sllw y 
      001C3D 90 58            [ 2]  732 	sllw y 
      001C3F 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001C43 90 BF 20         [ 2]  734 	ldw YTEMP,y ; vector address 
      001C46 A6 82            [ 1]  735 	ld a,#0x82 
      001C48 90 95            [ 1]  736 	ld yh,a 
      001C4A E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001C4C 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001C4E 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001C51 EF 04            [ 2]  741 	ldw (4,x),y 
      001C53 90 BE 20         [ 2]  742 	ldw y,YTEMP
      001C56 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001C58 90 5F            [ 1]  744 	clrw y 
      001C5A FF               [ 2]  745 	ldw (x),y   ; as a double 
      001C5B CD 19 EA         [ 4]  746 	call ee_store 
      001C5E 90 93            [ 1]  747 	ldw y,x 
      001C60 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001C63 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001C66 EF 04            [ 2]  750 	ldw (4,x),y 
      001C68 90 BE 20         [ 2]  751 	ldw y,YTEMP 
      001C6B 72 A9 00 02      [ 2]  752 	addw y,#2 
      001C6F EF 02            [ 2]  753 	ldw (2,x),y 
      001C71 90 5F            [ 1]  754 	clrw y 
      001C73 FF               [ 2]  755 	ldw (x),y 
      001C74 CD 19 EA         [ 4]  756 	call ee_store
      001C77 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001C7A 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001C7B 1C 21                  765 	.word LINK
                           001C7D   766 	LINK=.
      001C7D 03                     767 	.byte 3
      001C7E 45 45 2C               768 	.ascii "EE,"
      001C81                        769 ee_comma:
      001C81 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001C84 90 BE 18         [ 2]  771 	ldw y,UCP
      001C87 90 89            [ 2]  772 	pushw y 
      001C89 EF 02            [ 2]  773 	ldw (2,x),y 
      001C8B 90 5F            [ 1]  774 	clrw y 
      001C8D FF               [ 2]  775 	ldw (x),y
      001C8E CD 19 EA         [ 4]  776 	call ee_store
      001C91 90 85            [ 2]  777 	popw y 
      001C93 72 A9 00 02      [ 2]  778 	addw y,#2
      001C97 90 BF 18         [ 2]  779 	ldw UCP,y
      001C9A 81               [ 4]  780 	ret 
                                    781 
                                    782 ;-------------------------
                                    783 ; Compile byte to flash 
                                    784 ; EEC, ( c -- )	
                                    785 ;-------------------------
      001C9B 1C 7D                  786 	.word LINK 
                           001C9D   787 	LINK=.
      001C9D 04                     788 	.byte 4 
      001C9E 45 45 43 2C            789 	.ascii "EEC,"
      001CA2                        790 ee_ccomma:
      001CA2 1D 00 04         [ 2]  791 	subw x,#2*CELLL 
      001CA5 90 BE 18         [ 2]  792 	ldw y,UCP
      001CA8 90 89            [ 2]  793 	pushw y 
      001CAA EF 02            [ 2]  794 	ldw (2,x),y 
      001CAC 90 5F            [ 1]  795 	clrw y 
      001CAE FF               [ 2]  796 	ldw (x),y
      001CAF CD 19 9E         [ 4]  797 	call ee_cstore
      001CB2 90 85            [ 2]  798 	popw y 
      001CB4 90 5C            [ 2]  799 	incw y 
      001CB6 90 BF 18         [ 2]  800 	ldw UCP,y
      001CB9 81               [ 4]  801 	ret 
                                    802 
                                    803 
                                    804 ;--------------------------
                                    805 ; copy FLASH block to ROWBUF
                                    806 ; ROW2BUF ( ud -- )
                                    807 ;--------------------------
      001CBA 1C 9D                  808 	.word LINK 
                           001CBC   809 	LINK=.
      001CBC 07                     810 	.byte 7 
      001CBD 52 4F 57 32 42 55 46   811 	.ascii "ROW2BUF"
      001CC4                        812 ROW2BUF: 
      001CC4 CD 17 DA         [ 4]  813 	call fptr_store 
      001CC7 A6 80            [ 1]  814 	ld a,#BLOCK_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CC9 88               [ 1]  815 	push a 
      001CCA B4 30            [ 1]  816 	and a,PTR8 ; block align 
      001CCC B7 30            [ 1]  817 	ld PTR8,a
      001CCE 90 AE 16 80      [ 2]  818 	ldw y,#ROWBUFF 
      001CD2 92 BC 00 2E      [ 5]  819 1$: ldf a,[FPTR]
      001CD6 90 F7            [ 1]  820 	ld (y),a
      001CD8 CD 19 6C         [ 4]  821 	call inc_fptr
      001CDB 90 5C            [ 2]  822 	incw y 
      001CDD 0A 01            [ 1]  823 	dec (1,sp)
      001CDF 26 F1            [ 1]  824 	jrne 1$ 
      001CE1 84               [ 1]  825 	pop a 
      001CE2 81               [ 4]  826 	ret 
                                    827 
                                    828 
                                    829 ;---------------------------
                                    830 ; copy ROWBUFF to flash 
                                    831 ; BUF2ROW ( ud -- )
                                    832 ; ud is row address as double 
                                    833 ;---------------------------
      001CE3 1C BC                  834 	.word LINK 
                           001CE5   835 	LINK=.
      001CE5 07                     836 	.byte 7 
      001CE6 42 55 46 32 52 4F 57   837 	.ascii "BUF2ROW" 
      001CED                        838 BUF2ROW:
      001CED CD 04 62         [ 4]  839 	call TBUF ; ( ud rb -- )
      001CF0 CD 04 FD         [ 4]  840 	call ROT 
      001CF3 CD 04 FD         [ 4]  841 	call ROT  ; ( rb ud -- )
      001CF6 CD 1A CC         [ 4]  842 	call write_row 
      001CF9 81               [ 4]  843 	ret 
                                    844 
                                    845 ;---------------------------------
                                    846 ; how many byte free in that row 
                                    847 ; RFREE ( a -- n )
                                    848 ; a is least byte of target address
                                    849 ;----------------------------------
      001CFA 1C E5                  850 	.word LINK 
                           001CFC   851 	LINK=.
      001CFC 05                     852 	.byte 5 
      001CFD 52 46 52 45 45         853 	.ascii "RFREE"
      001D02                        854 RFREE:
      001D02 E6 01            [ 1]  855 	ld a,(1,x)
      001D04 A4 7F            [ 1]  856 	and a,#BLOCK_SIZE-1 
      001D06 B7 20            [ 1]  857 	ld YTEMP,a 
      001D08 A6 80            [ 1]  858 	ld a,#BLOCK_SIZE 
      001D0A B0 20            [ 1]  859 	sub a,YTEMP 
      001D0C 90 5F            [ 1]  860 	clrw y 
      001D0E 90 97            [ 1]  861 	ld yl,a
      001D10 FF               [ 2]  862 	ldw (x),y 
      001D11 81               [ 4]  863 	ret 
                                    864 
                                    865 ;---------------------------------
                                    866 ; write u bytes to flash/EEPROM 
                                    867 ; constraint to row limit 
                                    868 ; RAM2EE ( ud a u -- u2 )
                                    869 ; ud flash address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



                                    870 ; a ram address 
                                    871 ; u bytes count
                                    872 ; return u2 bytes written  
                                    873 ;-------------------------------
      001D12 1C FC                  874 	.word LINK 
                           001D14   875 	LINK=. 
      001D14 06                     876 	.byte 6
      001D15 52 41 4D 32 45 45      877 	.ascii "RAM2EE"
                                    878 	
      001D1B                        879 RAM2EE:
                                    880 ; copy ud on top 
      001D1B 90 93            [ 1]  881 	ldw y,x 
      001D1D 90 EE 06         [ 2]  882 	ldw y,(6,y) ; LSW of ud  
      001D20 90 BF 20         [ 2]  883 	ldw YTEMP,y 
      001D23 90 93            [ 1]  884 	ldw y,x 
      001D25 90 EE 04         [ 2]  885 	ldw y,(4,y)  ; MSW of ud 
      001D28 1D 00 04         [ 2]  886 	subw x,#2*CELLL 
      001D2B FF               [ 2]  887 	ldw (x),y 
      001D2C 90 BE 20         [ 2]  888 	ldw y,YTEMP 
      001D2F EF 02            [ 2]  889 	ldw (2,x),y 
      001D31 CD 1C C4         [ 4]  890 	call ROW2BUF 
      001D34 90 93            [ 1]  891 	ldw y,x 
      001D36 90 EE 06         [ 2]  892 	ldw y,(6,y)
      001D39 90 89            [ 2]  893 	pushw y ; udl 
      001D3B 90 9F            [ 1]  894 	ld a,yl
      001D3D A4 7F            [ 1]  895 	and a,#BLOCK_SIZE-1 
      001D3F 90 5F            [ 1]  896 	clrw y 
      001D41 90 97            [ 1]  897 	ld yl,a 
      001D43 72 A9 16 80      [ 2]  898 	addw y,#ROWBUFF 
      001D47 1D 00 02         [ 2]  899 	subw x,#CELLL 
      001D4A FF               [ 2]  900 	ldw (x),y  
      001D4B CD 03 77         [ 4]  901 	call SWAPP ;  ( ud a ra u -- )
      001D4E CD 03 11         [ 4]  902 	call RFROM  
      001D51 CD 1D 02         [ 4]  903 	call RFREE 
      001D54 CD 06 3D         [ 4]  904 	call MIN
      001D57 CD 03 67         [ 4]  905 	call DUPP 
      001D5A CD 03 30         [ 4]  906 	call TOR  
      001D5D CD 09 8A         [ 4]  907 	call CMOVE
      001D60 CD 1C ED         [ 4]  908 	call BUF2ROW 
      001D63 CD 03 11         [ 4]  909 	call RFROM 
      001D66 81               [ 4]  910 	ret 
                                    911 
                                    912 ;--------------------------
                                    913 ; expand 16 bit address 
                                    914 ; to 32 bit address 
                                    915 ; FADDR ( a -- ud )
                                    916 ;--------------------------
      001D67 1D 14                  917 	.word LINK 
                           001D69   918 	LINK=. 
      001D69 05                     919 	.byte 5 
      001D6A 46 41 44 44 52         920 	.ascii "FADDR"
      001D6F                        921 FADDR:
      001D6F CC 08 50         [ 2]  922 	jp ZERO 
                                    923 
                                    924 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    925 ; move new colon definition to FLASH 
                                    926 ; using WR-ROW for efficiency 
                                    927 ; preserving bytes already used 
                                    928 ; in the current block. 
                                    929 ; ud+c must not exceed block boundary 
                                    930 ; at this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      001D72 1D 69                  938 	.word LINK 
                           001D74   939 	LINK=.
      001D74 05                     940 	.byte 5 
      001D75 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      001D7A                        942 FMOVE:
      001D7A CD 04 B1         [ 4]  943 	call CPP
      001D7D CD 02 C0         [ 4]  944 	call AT  
      001D80 CD 03 67         [ 4]  945 	call DUPP ; ( udl udl -- )
      001D83 CD 04 95         [ 4]  946 	call CNTXT 
      001D86 CD 02 C0         [ 4]  947 	call AT 
      001D89 CD 02 38         [ 4]  948 	call DOLIT 
      001D8C 00 02                  949 	.word 2 
      001D8E CD 05 9B         [ 4]  950 	call SUBB ; ( udl udl a -- )
      001D91 CD 03 77         [ 4]  951 	call SWAPP 
      001D94 CD 1D 6F         [ 4]  952 	call FADDR 
      001D97 CD 04 FD         [ 4]  953 	call ROT  ; ( udl ud a -- )
      001D9A CD 03 67         [ 4]  954 	call DUPP 
      001D9D CD 03 30         [ 4]  955 	call TOR    ; R: a 
      001DA0                        956 FMOVE2: 
      001DA0 CD 09 3D         [ 4]  957 	call HERE 
      001DA3 CD 03 24         [ 4]  958 	call RAT 
      001DA6 CD 05 9B         [ 4]  959 	call SUBB ; (udl ud a wl -- )
      001DA9                        960 next_row:
      001DA9 CD 03 67         [ 4]  961 	call DUPP 
      001DAC CD 03 30         [ 4]  962 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001DAF CD 1D 1B         [ 4]  963 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001DB2 CD 03 67         [ 4]  964 	call DUPP 
      001DB5 CD 03 30         [ 4]  965 	call TOR
      001DB8 CD 05 3D         [ 4]  966 	call PLUS  ; ( udl+ ) 
      001DBB CD 03 67         [ 4]  967 	call DUPP 
      001DBE CD 08 50         [ 4]  968 	call ZERO   ; ( udl+ ud -- )
      001DC1 CD 03 11         [ 4]  969 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001DC4 CD 03 11         [ 4]  970 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001DC7 CD 03 91         [ 4]  971 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001DCA CD 05 9B         [ 4]  972 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      001DCD CD 03 67         [ 4]  973 	call DUPP 
      001DD0 CD 02 6B         [ 4]  974 	call QBRAN
      001DD3 1D EC                  975 	.word fmove_done 
      001DD5 CD 03 77         [ 4]  976 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001DD8 CD 03 11         [ 4]  977 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001DDB CD 05 3D         [ 4]  978 	call PLUS  ; ( udl+2 ud wl- a+ )
      001DDE CD 03 67         [ 4]  979 	call DUPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001DE1 CD 03 30         [ 4]  980 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001DE4 CD 03 77         [ 4]  981 	call SWAPP 
      001DE7 CD 02 82         [ 4]  982 	call BRAN
      001DEA 1D A9                  983 	.word next_row  
      001DEC                        984 fmove_done:	
      001DEC CD 03 11         [ 4]  985 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001DEF 1C 00 0A         [ 2]  986 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
      001DF2 81               [ 4]  987  	ret  
                                    988 
                                    989 ;------------------------------------------
                                    990 ; adjust pointers after **FMOVE** operetion.
                                    991 ; UPDAT-PTR ( cp+ -- )
                                    992 ; cp+ is new CP position after FMOVE 
                                    993 ;-------------------------------------------
      001DF3 1D 74                  994 	.word LINK 
                           001DF5   995 	LINK=.
      001DF5 09                     996 	.byte 9
      001DF6 55 50 44 41 54 2D 50   997 	.ascii "UPDAT-PTR" 
             54 52
      001DFF                        998 UPDATPTR:
                                    999 ;reset VP to previous position  
      001DFF CD 18 54         [ 4] 1000 	call EEPVP 
      001E02 CD 03 5D         [ 4] 1001 	call DROP 
      001E05 CD 02 C0         [ 4] 1002 	call AT
      001E08 CD 04 A3         [ 4] 1003 	call VPP 
      001E0B CD 02 A9         [ 4] 1004 	call STORE
                                   1005 ;update CONTEXT and LAST 
      001E0E CD 18 3E         [ 4] 1006 	call EEPCP 
      001E11 CD 03 5D         [ 4] 1007 	call DROP
      001E14 CD 02 C0         [ 4] 1008 	call AT
      001E17 CD 02 38         [ 4] 1009 	call DOLIT 
      001E1A 00 02                 1010 	.word 2 
      001E1C CD 05 3D         [ 4] 1011 	call PLUS 
      001E1F CD 03 67         [ 4] 1012 	call DUPP 
      001E22 CD 04 95         [ 4] 1013 	call CNTXT 
      001E25 CD 02 A9         [ 4] 1014 	call STORE
      001E28 CD 04 C1         [ 4] 1015 	call LAST
      001E2B CD 02 A9         [ 4] 1016 	call STORE 
      001E2E CD 18 6E         [ 4] 1017 	call UPDATLAST 
                                   1018 ;update CP 
      001E31 CD 04 B1         [ 4] 1019 	call CPP 
      001E34 CD 02 A9         [ 4] 1020 	call STORE
      001E37 CD 18 97         [ 4] 1021 	call UPDATCP 
      001E3A 81               [ 4] 1022 	ret 
                                   1023 
                                   1024 ;-----------------------------
                                   1025 ; move interrupt sub-routine
                                   1026 ; in flash memory
                                   1027 ;----------------------------- 
      001E3B 1D F5                 1028 	.word LINK 
                           001E3D  1029 	LINK=. 
      001E3D 06                    1030 	.byte 6
      001E3E 49 46 4D 4F 56 45     1031 	.ascii "IFMOVE" 
      001E44                       1032 IFMOVE:
      001E44 CD 04 B1         [ 4] 1033 	call CPP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001E47 CD 02 C0         [ 4] 1034 	call AT 
      001E4A CD 03 67         [ 4] 1035 	call DUPP ; ( udl udl -- )
      001E4D CD 18 54         [ 4] 1036 	call EEPVP 
      001E50 CD 03 5D         [ 4] 1037 	call DROP
      001E53 CD 02 C0         [ 4] 1038 	call AT  ; ( udl udl a )
      001E56 CD 03 30         [ 4] 1039 	call TOR 
      001E59 CD 1D 6F         [ 4] 1040 	call FADDR
      001E5C CD 03 24         [ 4] 1041 	call RAT ; ( udl ud a -- ) R: a 
      001E5F CC 1D A0         [ 2] 1042 	jp FMOVE2 
                                   1043 
                                   1044 
                                   1045 ; application code begin here
      001E80                       1046 	.bndry 128 ; align on flash block  
      001E80                       1047 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                   4415 .endif ; PICATOUT_MOD
                                   4416 
                                   4417 ;===============================================================
                                   4418 
                           001E3D  4419 LASTN =	LINK   ;last name defined
                                   4420 
                                   4421 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0005BE R   |   6 ABOR1      0010D9 R
  6 ABOR2      0010F0 R   |   6 ABORQ      0010D1 R   |   6 ABORT      0010C2 R
  6 ABRTQ      0013AD R   |   6 ABSS       0005B5 R   |   6 ACCEP      001058 R
  6 ACCP1      001061 R   |   6 ACCP2      001087 R   |   6 ACCP3      00108A R
  6 ACCP4      00108C R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     0004DC R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001398 R   |   6 AGAIN      0012EE R   |   6 AHEAD      00134B R
  6 ALLOT      001201 R   |   6 ANDD       0003B3 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         0002C0 R   |   6 ATEXE      000973 R   |     AWU_APR =  0050F1 
    AWU_CSR =  0050F0     |     AWU_TBR =  0050F2     |     B0_MASK =  000001 
    B115200 =  000006     |     B19200  =  000003     |     B1_MASK =  000002 
    B230400 =  000007     |     B2400   =  000000     |     B2_MASK =  000004 
    B38400  =  000004     |     B3_MASK =  000008     |     B460800 =  000008 
    B4800   =  000001     |     B4_MASK =  000010     |     B57600  =  000005 
    B5_MASK =  000020     |     B6_MASK =  000040     |     B7_MASK =  000080 
    B921600 =  000009     |     B9600   =  000002     |   6 BACK1      001000 R
  6 BASE       000424 R   |     BASEE   =  00000A     |     BCNT    =  000001 
  6 BCOMP      001243 R   |   6 BDIGS      000A5B R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0012D0 R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      000E98 R   |   6 BKSP       000FD0 R   |     BKSPP   =  000008 
  6 BLANK      000843 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       000282 R   |     BTW     =  000001 
  6 BUF2ROW    001CED R   |   6 BYE        0000AC R   |     CADR    =  000003 
    CALLL   =  0000CD     |   6 CANT_FOR   00013F R   |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000024 
  6 CAT        0002DE R   |   6 CCOMMA     001225 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      000800 R   |   6 CELLP      0007F1 R
  6 CELLS      00080F R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000C88 R   |   6 CHAR2      000C8B R
  6 CHKIVEC    001BDB R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000992 R   |   6 CMOV2      0009AA R
  6 CMOVE      00098A R   |     CNTDWN  =  00002C     |   6 CNTXT      000495 R
  6 COLD       00176B R   |   6 COLD1      00176B R   |   6 COLON      001522 R
  6 COMMA      00120E R   |   6 COMPI      001253 R   |     COMPO   =  000040 
  6 CONSTANT   0015B8 R   |     CONVERT_=  000001     |   6 COUNT      000926 R
  6 CPP        0004B1 R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000CB6 R   |   6 CREAT      001568 R   |     CRR     =  00000D 
  6 CSTOR      0002CD R   |     CTOP    =  000080     |   6 DAT        000906 R
    DATSTK  =  001670     |   6 DDROP      00051D R   |   6 DDUP       000528 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000B0B R
  6 DEPTH      000893 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000B50 R   |   6 DI         0000BA R   |   6 DIG        000A84 R
  6 DIGIT      000A1F R   |   6 DIGS       000A95 R   |   6 DIGS1      000A95 R
  6 DIGS2      000AA2 R   |   6 DIGTQ      000B1F R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        000595 R   |   6 DNEGA      00057A R
  6 DOCONST    0015DA R   |   6 DOLIT      000238 R   |   6 DONXT      00024C R
  6 DOSTR      000CCC R   |   6 DOT        000D51 R   |   6 DOT1       000D67 R
  6 DOTI1      0016FF R   |   6 DOTID      0016E9 R   |   6 DOTO1      001165 R
  6 DOTOK      00114B R   |   6 DOTPR      000E7A R   |   6 DOTQ       0013C7 R
  6 DOTQP      000CF5 R   |   6 DOTR       000D03 R   |   6 DOTS       001688 R
  6 DOTS1      001693 R   |   6 DOTS2      00169F R   |   6 DOVAR      000414 R
  6 DROP       00035D R   |   6 DSTOR      0008E0 R   |   6 DUMP       00163E R
  6 DUMP1      001655 R   |   6 DUMP3      001677 R   |   6 DUMPP      00160D R
  6 DUPP       000367 R   |   6 EDIGS      000AC0 R   |   6 EEPCP      00183E R
  6 EEPLAST    001811 R   |   6 EEPROM     0017F9 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 EEPRUN     001828 R
  6 EEPVP      001854 R   |   6 EI         0000B3 R   |   6 ELSEE      001326 R
  6 EMIT       000222 R   |   6 EQ1        0005D9 R   |   6 EQUAL      0005C3 R
  6 ERASE      0009EC R   |     ERR     =  00001B     |   6 EVAL       00118E R
  6 EVAL1      00118E R   |   6 EVAL2      0011AA R   |   6 EXE1       000981 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]

Symbol Table

  6 EXECU      000292 R   |   6 EXIT       0002A2 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      000A47 R
  6 FADDR      001D6F R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       0009B9 R   |   6 FILL1      0009D6 R   |   6 FILL2      0009DF R
  6 FIND       000F2C R   |   6 FIND1      000F4A R   |   6 FIND2      000F78 R
  6 FIND3      000F84 R   |   6 FIND4      000F98 R   |   6 FIND5      000FA5 R
  6 FIND6      000F89 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FMOVE      001D7A R
  6 FMOVE2     001DA0 R   |   6 FOR        0012A3 R   |   6 FORGET     0000C5 R
  6 FORGET1    0000F7 R   |   6 FORGET2    00014D R   |   6 FORGET4    000156 R
    FPTR    =  00002E     |   6 FREEVAR    000163 R   |   6 FREEVAR4   000199 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 HERE       00093D R   |   6 HEX        000AF6 R
  6 HI         00173E R   |   6 HLD        000482 R   |   6 HOLD       000A6B R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     001533 R   |   6 IFETCH     0012C1 R
  6 IFF        0012FE R   |   6 IFMOVE     001E44 R   |     IMEDD   =  000080 
  6 IMMED      001545 R   |   6 INCH       000216 R   |   6 INITOFS    00150B R
  6 INN        000442 R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      00112D R
  6 INTER      001103 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      000557 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0014A9 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0014F5 R   |   6 KEY        000C36 R   |   6 KTAP       00101D R
  6 KTAP1      001040 R   |   6 KTAP2      001043 R   |   6 LAST       0004C1 R
  6 LASTN   =  001E3D R   |   6 LBRAC      00113A R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       000600 R
    LF      =  00000A     |   6 LINK    =  001E3D R   |   6 LITER      001275 R
  6 LT1        000616 R   |     MASKK   =  001F7F     |   6 MAX        000620 R
  6 MAX1       000633 R   |   6 MIN        00063D R   |   6 MIN1       000650 R
  6 MMOD1      0006F3 R   |   6 MMOD2      000707 R   |   6 MMOD3      00071E R
  6 MMSM1      00069A R   |   6 MMSM2      0006AE R   |   6 MMSM3      0006B0 R
  6 MMSM4      0006B8 R   |   6 MODD       000738 R   |   6 MONE       000869 R
    MS      =  00002A     |   6 MSEC       0001A3 R   |   6 MSMOD      0006D6 R
  6 MSTA1      0007C9 R   |   6 MSTAR      0007A6 R   |     NAFR    =  004804 
  6 NAMEQ      000FC5 R   |   6 NAMET      000ED6 R   |     NCLKOPT =  004808 
  6 NEGAT      000568 R   |   6 NEX1       000259 R   |   6 NEXT       0012B2 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       000452 R   |     NUBC    =  004802 
  6 NUFQ       000C4C R   |   6 NUFQ1      000C65 R   |   6 NUMBQ      000B63 R
  6 NUMQ1      000B97 R   |   6 NUMQ2      000BC8 R   |   6 NUMQ3      000C0A R
  6 NUMQ4      000C0F R   |   6 NUMQ5      000C1E R   |   6 NUMQ6      000C21 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 OFFSET     0004D3 R   |     OFS     =  000005     |   6 ONE        00085B R
  6 ONEM       000829 R   |   6 ONEP       00081C R   |     OPT     =  000002 
    OPT0    =  004800     |     OPT1    =  004801     |     OPT2    =  004803 
    OPT3    =  004805     |     OPT4    =  004807     |     OPT5    =  004809 
    OPT6    =  00480B     |     OPT7    =  00480D     |     OPTBL   =  00487E 
    OPTION_B=  004800     |     OPTION_E=  00487F     |     OPTION_S=  000080 
  6 ORIG       00003F R   |   6 ORR        0003C7 R   |   6 OUTPUT     000227 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    OUTPUT_F=  000001     |     OUTPUT_O=  000000     |     OUTPUT_P=  000001 
    OUTPUT_S=  000000     |   6 OVER       000391 R   |   6 OVERT      001482 R
    PA      =  000000     |   6 PACKS      0009FE R   |   6 PAD        00094E R
  6 PAREN      000E89 R   |   6 PARS       000D82 R   |   6 PARS1      000DAD R
  6 PARS2      000DD8 R   |   6 PARS3      000DDB R   |   6 PARS4      000DE4 R
  6 PARS5      000E07 R   |   6 PARS6      000E1C R   |   6 PARS7      000E2B R
  6 PARS8      000E3A R   |   6 PARSE      000E4B R   |   6 PAUSE      0001B3 R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      001620 R   |   6 PDUM2      001631 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |     PICATOUT=  000001     |   6 PICK       0008AA R
    PI_BASE =  005028     |     PI_CR1  =  00502B     |     PI_CR2  =  00502C 
    PI_DDR  =  00502A     |     PI_IDR  =  005029     |     PI_ODR  =  005028 
  6 PLUS       00053D R   |   6 PNAM1      001437 R   |   6 PRESE      0011B9 R
    PROD1   =  00001E     |     PROD2   =  000020     |     PROD3   =  000022 
  6 PSTOR      0008BF R   |     PTR16   =  00002F     |     PTR8    =  000030 
  6 QBRAN      00026B R   |   6 QDUP       0004EC R   |   6 QDUP1      0004F6 R
  6 QKEY       000204 R   |   6 QSTAC      001171 R   |   6 QUERY      00109D R
  6 QUEST      000D74 R   |   6 QUIT       0011D6 R   |   6 QUIT1      0011DE R
  6 QUIT2      0011E1 R   |   6 RAM2EE     001D1B R   |     RAMBASE =  000000 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        000324 R   |   6 RBRAC      0014E2 R   |   6 REPEA      00137B R
  6 RFREE      001D02 R   |   6 RFROM      000311 R   |     ROP     =  004800 
  6 ROT        0004FD R   |   6 ROW2BUF    001CC4 R   |     ROWBUFF =  001680 
    RP0     =  000028     |   6 RPAT       0002EE R   |     RPP     =  0017FF 
  6 RPSTO      0002FB R   |     RST_SR  =  0050B3     |   6 SAME1      000EF4 R
  6 SAME2      000F1D R   |   6 SAMEQ      000EEC R   |   6 SCOM1      00146C R
  6 SCOM2      00146F R   |   6 SCOMP      00144E R   |   6 SEMIS      001492 R
    SFR_BASE=  005000     |     SFR_END =  0057FF     |   6 SIGN       000AAA R
  6 SIGN1      000ABA R   |   6 SLASH      000742 R   |   6 SLMOD      000726 R
  6 SNAME      001401 R   |     SP0     =  000026     |   6 SPACE      000C6E R
  6 SPACS      000C7D R   |   6 SPAT       000347 R   |     SPI_CR1 =  005200 
    SPI_CR2 =  005201     |     SPI_CRCP=  005205     |     SPI_DR  =  005204 
    SPI_ICR =  005202     |     SPI_RXCR=  005206     |     SPI_SR  =  005203 
    SPI_TXCR=  005207     |     SPP     =  001670     |   6 SPSTO      000354 R
  6 SSMOD      0007D2 R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       00079B R   |   6 STASL      0007E3 R   |   6 STORE      0002A9 R
  6 STR        000AD8 R   |   6 STRCQ      001283 R   |   6 STRQ       0013BA R
  6 STRQP      000CEB R   |   6 SUBB       00059B R   |   6 SWAPP      000377 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    SWIM_CSR=  007F80     |   6 TAP        001007 R   |   6 TBOOT      00175F R
  6 TBUF       000462 R   |     TBUFFBAS=  001680     |   6 TCHA1      00088A R
  6 TCHAR      00087A R   |   6 TEMP       000433 R   |   6 TEVAL      000473 R
  6 THENN      001313 R   |   6 TIB        00095F R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       0011ED R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   0001E3 R   |   6 TIMER      0001CD R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0016B9 R
  6 TNAM3      0016D7 R   |   6 TNAM4      0016DD R   |   6 TNAME      0016B6 R
  6 TOKEN      000EC8 R   |   6 TOR        000330 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000836 R   |   6 TYPE1      000C9D R   |   6 TYPE2      000CA9 R
  6 TYPES      000C98 R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000D3E R   |   6 UDOTR      000D1E R   |   6 UEND       00003D R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0005F8 R   |   6 ULESS      0005E2 R
  6 UMMOD      000678 R   |   6 UMSTA      000751 R   |   6 UNIQ1      0013F8 R
  6 UNIQU      0013D9 R   |   6 UNTIL      0012DB R   |     UOFFSET =  00001C 
  6 UPDATCP    001897 R   |   6 UPDATLAS   00186E R   |   6 UPDATPTR   001DFF R
  6 UPDATRUN   001886 R   |   6 UPDATVP    0018AE R   |   6 UPL1       000408 R
  6 UPLUS      0003F1 R   |     UPP     =  000006     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      0015F0 R   |   6 UTYP2      0015FF R
  6 UTYPE      0015EB R   |     UVP     =  000016     |   6 UZERO      000027 R
  6 VARIA      001582 R   |     VER     =  000002     |   6 VPP        0004A3 R
    VSIZE   =  000006     |     WANT_DEB=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      001361 R
  6 WITHI      00065D R   |   6 WORDD      000EB4 R   |   6 WORDS      001713 R
  6 WORS1      001719 R   |   6 WORS2      001738 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   6 XORR       0003DC R   |     XTEMP   =  00001E 
    YTEMP   =  000020     |   6 ZERO       000850 R   |   6 ZL1        0003A9 R
  6 ZLESS      0003A0 R   |   6 app_spac   001E80 R   |   6 block_er   001A31 R
  6 clear_ra   000019 R   |   6 clock_in   00005A R   |   6 copy_buf   001A88 R
  6 copy_buf   001AA7 R   |   6 copy_pro   001AA7 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_ccomm   001CA2 R   |   6 ee_comma   001C81 R   |   6 ee_cstor   00199E R
  6 ee_store   0019EA R   |   6 erase_fl   001A4D R   |   6 farat      0018BF R
  6 farcat     0018DB R   |   6 fmove_do   001DEC R   |   6 fptr_sto   0017DA R
  6 inc_fptr   00196C R   |   6 lock       001958 R   |   6 main       000016 R
  6 next_row   001DA9 R   |   6 pristine   001B22 R   |   6 proceed_   001A50 R
  6 reboot     0001FA R   |   6 reset_ve   001B89 R   |   6 row_eras   001A14 R
  6 row_eras   001A61 R   |   6 row_eras   001A88 R   |   6 set_opti   001AF6 R
  6 set_vect   001C2A R   |   6 uart1_in   00006C R   |   6 unlock     001930 R
  6 unlock_e   0018F2 R   |   6 unlock_f   001911 R   |   6 write_by   001983 R
  6 write_ro   001ACC R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1E80   flags    0

