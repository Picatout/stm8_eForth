ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 ;*************************************
                                     86 ; constant used for conditationnal 
                                     87 ; assembly for those word I converted 
                                     88 ; to code.
                                     89 ; Added by Picatout 2020-05-24 
                                     90 ;*************************************
                           000001    91 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    92 PICATOUT_MOD=1  ; code modified by Picatout 
                                     93 
                                     94 ;*********************************************************
                                     95 ;	Assembler constants
                                     96 ;*********************************************************
                           000000    97 RAMBASE =	0x0000	   ;ram base
                           0017FF    98 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    99 DATSTK  =	0x1670	;data stack  empty
                           001680   100 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700   101 TIBBASE =       0X1700  ; tib addr.
                                    102 
                                    103 
                                    104 
                                    105 ;; Memory allocation
                                    106 
                           000006   107 UPP     =     RAMBASE+6
                           001670   108 SPP     =     RAMBASE+DATSTK
                           0017FF   109 RPP     =     RAMBASE+STACK
                           001680   110 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   111 TIBB    =     RAMBASE+TIBBASE
                           000080   112 CTOP    =     RAMBASE+0x80
                                    113 
                           000001   114 .if PICATOUT_MOD 
                                    115 ; user variables constants 
                           000006   116 UBASE = UPP       ; numeric base 
                           000008   117 UTMP = UBASE+2    ; temporary storage
                           00000A   118 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   119 UCTIB = UINN+2    ; tib count 
                           00000E   120 UTIB = UCTIB+2    ; tib address 
                           000010   121 UINTER = UTIB+2   ; interpreter vector 
                           000012   122 UHLD = UINTER+2   ; hold 
                           000014   123 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   124 UVP = UCNTXT+2    ; variable pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000018   125 UCP = UVP+2      ; code pointer
                           00001A   126 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   127 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   128 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                                    129 .endif ; PICATOUT_MOD
                                    130 ;******  System Variables  ******
                           000020   131 XTEMP	=	UTFLASH +2;address called by CREATE
                           000022   132 YTEMP	=	XTEMP+2	;address called by CREATE
                           000020   133 PROD1 = XTEMP	;space for UM*
                           000022   134 PROD2 = PROD1+2
                           000024   135 PROD3 = PROD2+2
                           000026   136 CARRY = PROD3+2
                           000028   137 SP0	= CARRY+2	;initial data stack pointer
                           00002A   138 RP0	= SP0+2		;initial return stack pointer
                           00002C   139 MS    =   RP0+2         ; millisecond counter 
                           00002E   140 CNTDWN =  MS+2          ; count down timer 
                           000030   141 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000031   142 PTR16 = FPTR+1          ; middle byte of farptr 
                           000032   143 PTR8 = FPTR+2           ; least byte of farptr 
                                    144 
                           000001   145 .if PICATOUT_MOD
                                    146 ; EEPROM persistant data  
                           004000   147 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   148 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   149 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   150 APP_VP = APP_CP+2  ; free data space pointer 
                                    151 .endif ;PICATOUT_MOD
                                    152 
                                    153 
                                    154 ;***********************************************
                                    155 ;; Version control
                                    156 
                           000003   157 VER     =     3         ;major release version
                           000000   158 EXT     =     0         ;minor extension
                                    159 
                                    160 ;; Constants
                                    161 
                           00FFFF   162 TRUEE   =     0xFFFF      ;true flag
                                    163 
                           000040   164 COMPO   =     0x40     ;lexicon compile only bit
                           000080   165 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   166 MASKK   =     0x1F7F  ;lexicon bit mask
                                    167 
                           000002   168 CELLL   =     2       ;size of a cell
                           00000A   169 BASEE   =     10      ;default radix
                           000008   170 BKSPP   =     8       ;back space
                           00000A   171 LF      =     10      ;line feed
                           00000D   172 CRR     =     13      ;carriage return
                           00001B   173 ERR     =     27      ;error escape
                           000027   174 TIC     =     39      ;tick
                           0000CD   175 CALLL   =     0xCD     ;CALL opcodes
                           000080   176 IRET_CODE =   0x80    ; IRET opcode 
                                    177 
                                    178         .macro _ledon
                                    179         bset PC_ODR,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .endm
                                    181 
                                    182         .macro _ledoff
                                    183         bres PC_ODR,#LED2_BIT
                                    184         .endm
                                    185 
                                    186 ;**********************************************************
                                    187         .area DATA (ABS)
      000000                        188         .org RAMBASE 
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area SSEG (ABS) ; STACK
      001700                        193         .org 0x1700
      001700                        194         .ds 256 
                                    195 ; space for DATSTK,TIB and STACK         
                                    196 ;**********************************************************
                                    197 
                                    198 ;**********************************************************
                                    199         .area HOME ; vectors table
                                    200 ;**********************************************************
      000000 82 00 00 16            201 	int main	        ; reset
      000004 82 00 00 00            202 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            203 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            204 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            205 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            206 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            207 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            208 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            209 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            210 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            211 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            212 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            213 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            214 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            215 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            216 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            217 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            218 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            219 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            220 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            221 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            222 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            223 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            224 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            225 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            226 	int Timer4Handler	; irq23
      000068 82 00 00 00            227 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            228 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            229 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            230 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            231 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            232 	int NonHandledInterrupt	; irq29
                                    233 
                                    234 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235         .area CODE
                                    236 ;**********************************************************
                                    237 
                                    238 ; non handled interrupt reset MCU
      000000                        239 NonHandledInterrupt:
      000000 A6 80            [ 1]  240         ld a, #0x80
      000002 C7 50 D1         [ 1]  241         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    242 	;iret
                                    243 
                                    244 ; used for milliseconds counter 
                                    245 ; MS is 16 bits counter 
      000005                        246 Timer4Handler:
      000005 72 5F 53 42      [ 1]  247 	clr TIM4_SR 
      000009 BE 2C            [ 2]  248         ldw x,MS 
      00000B 5C               [ 2]  249         incw x 
      00000C BF 2C            [ 2]  250         ldw MS,x
      00000E BE 2E            [ 2]  251         ldw x,CNTDWN 
      000010 27 03            [ 1]  252         jreq 1$
      000012 5A               [ 2]  253         decw x 
      000013 BF 2E            [ 2]  254         ldw CNTDWN,x 
      000015                        255 1$:         
      000015 80               [11]  256         iret 
                                    257 
                                    258 
                                    259 ;; Main entry points and COLD start data
      000016                        260 main:
                                    261 ; clear all RAM
      000016 AE 00 00         [ 2]  262 	ldw X,#RAMBASE
      000019                        263 clear_ram0:
      000019 7F               [ 1]  264 	clr (X)
      00001A 5C               [ 2]  265 	incw X
      00001B A3 17 FF         [ 2]  266 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  267 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  268         ldw x,#RPP
      000023 94               [ 1]  269         ldw sp,x 
      000024 CC 00 43         [ 2]  270 	jp ORIG
                                    271 
                                    272 ; COLD initialize these variables.
      000027                        273 UZERO:
      000027 00 0A                  274         .word      BASEE   ;BASE
      000029 00 00                  275         .word      0       ;tmp
      00002B 00 00                  276         .word      0       ;>IN
      00002D 00 00                  277         .word      0       ;#TIB
      00002F 17 00                  278         .word      TIBB    ;TIB
      000031 12 00                  279         .word      INTER   ;'EVAL
      000033 00 00                  280         .word      0       ;HLD
      000035 1F 77                  281         .word      LASTN  ;CNTXT pointer
      000037 00 80                  282         .word      CTOP   ;CP in RAM
      000039 20 00                  283         .word      app_space ; CP in FLASH 
      00003B 1F 77                  284         .word      LASTN   ;LAST
      00003D 00 00                  285         .word      0        ; OFFSET 
      00003F 00 00                  286         .word      0       ; TFLASH 
      000041 00 00                  287 UEND:   .word      0
                                    288 
      000043                        289 ORIG:   
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



                                    290 ; initialize SP
      000043 AE 17 FF         [ 2]  291         LDW     X,#STACK  ;initialize return stack
      000046 94               [ 1]  292         LDW     SP,X
      000047 BF 2A            [ 2]  293         LDW     RP0,X
      000049 AE 16 70         [ 2]  294         LDW     X,#DATSTK ;initialize data stack
      00004C BF 28            [ 2]  295         LDW     SP0,X
                                    296 ; initialize PC_5 as output to control LED2
                                    297 ; added by Picatout 
      00004E 72 1A 50 0D      [ 1]  298         bset PC_CR1,#LED2_BIT
      000052 72 1A 50 0E      [ 1]  299         bset PC_CR2,#LED2_BIT
      000056 72 1A 50 0C      [ 1]  300         bset PC_DDR,#LED2_BIT
      00005A                        301         _ledoff
      00005A 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    302 ; initialize clock to HSI
                                    303 ; no divisor 16Mhz 
                                    304 ; Added by Picatout 
      00005E                        305 clock_init:
      00005E 72 5F 50 C6      [ 1]  306         clr CLK_CKDIVR
      000062 72 12 50 C5      [ 1]  307 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000066 A6 E1            [ 1]  308 	ld a,#CLK_SWR_HSI
      000068 C7 50 C4         [ 1]  309 	ld CLK_SWR,a
      00006B C1 50 C3         [ 1]  310 1$:	cp a,CLK_CMSR
      00006E 26 FB            [ 1]  311 	jrne 1$
                                    312         
                                    313 ; initialize UART1, 115200 8N1
      000070                        314 uart1_init:
      000070 72 14 50 C7      [ 1]  315 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    316 	; configure tx pin
      000074 72 1A 50 02      [ 1]  317 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000078 72 1A 50 03      [ 1]  318 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00007C 72 1A 50 04      [ 1]  319 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    320 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000080 35 0B 52 33      [ 1]  321 	mov UART1_BRR2,#0x0b ; must be loaded first
      000084 35 08 52 32      [ 1]  322 	mov UART1_BRR1,#0x8
      000088 35 0C 52 35      [ 1]  323 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    324 ; initialize timer4, used for millisecond interrupt  
      00008C 35 07 53 45      [ 1]  325 	mov TIM4_PSCR,#7 ; prescale 128  
      000090 35 7D 53 46      [ 1]  326 	mov TIM4_ARR,#125 ; set for 1msec.
      000094 35 05 53 40      [ 1]  327 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000098 72 10 53 41      [ 1]  328 	bset TIM4_IER,#TIM4_IER_UIE 
                                    329 ; set TIM4 interrupt priority to highest
      00009C A6 3F            [ 1]  330         ld a,#~(IPR_MASK<<6)
      00009E C4 7F 75         [ 1]  331         and a,ITC_SPR6
      0000A1 AA C0            [ 1]  332         or a,#(IPR3<<6)
      0000A3 C7 7F 75         [ 1]  333         ld ITC_SPR6,a 
      0000A6 9A               [ 1]  334         rim
      0000A7 CC 18 96         [ 2]  335         jp  COLD   ;default=MN1
                                    336 
                                    337 
                                    338 ;; place MCU in sleep mode with
                                    339 ;; halt opcode 
                                    340 ;; BYE ( -- )
      0000AA 00 00                  341         .word 0
                           0000AC   342         LINK=.
      0000AC 03                     343         .byte 3 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000AD 42 59 45               344         .ascii "BYE"
      0000B0                        345 BYE: 
      0000B0 8E               [10]  346         halt 
      0000B1 81               [ 4]  347         ret 
                                    348 
                                    349 ; Enable interrupts 
                                    350 ; EI ( -- )
      0000B2 00 AC                  351         .word LINK 
                           0000B4   352         LINK=.
      0000B4 02                     353         .byte 2
      0000B5 45 49                  354         .ascii "EI"
      0000B7                        355 EI:
      0000B7 9A               [ 1]  356         rim 
      0000B8 81               [ 4]  357         ret 
                                    358 
                                    359 ; Disable interrupts
                                    360 ; DI ( -- )
      0000B9 00 B4                  361         .word LINK 
                           0000BB   362         LINK=.
      0000BB 02                     363         .byte 2 
      0000BC 44 49                  364         .ascii "DI"
      0000BE                        365 DI:
      0000BE 9B               [ 1]  366         sim 
      0000BF 81               [ 4]  367         ret 
                                    368 
                                    369 ; set interrupt priority level 
                                    370 ; SET-ISP ( n1 n2 -- )
                                    371 ; n1 level {1..3}
                                    372 ; n2 vector {0..29}
      0000C0 00 BB                  373         .word LINK 
                           0000C2   374         LINK=.
      0000C2 07                     375         .byte 7 
      0000C3 53 45 54 2D 49 53 50   376         .ascii "SET-ISP"
      0000CA                        377 SETISP:
      0000CA 90 93            [ 1]  378         ldw y,x 
      0000CC 90 FE            [ 2]  379         ldw y,(y)
      0000CE A6 04            [ 1]  380         ld a,#4 ; 4 slot per register 
                                    381 ;  quotient select register, remainder select slot in register.        
      0000D0 90 62            [ 2]  382         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D2 A4 03            [ 1]  383         and a,#3 
      0000D4 48               [ 1]  384         sll a ; 2*SLOT  lshift 
      0000D5 72 A9 7F 70      [ 2]  385         addw y,#ITC_SPR1 
      0000D9 FF               [ 2]  386         ldw (x),y  ; ( level reg -- )
      0000DA 90 5F            [ 1]  387         clrw y 
      0000DC 90 97            [ 1]  388         ld yl,a 
      0000DE 1D 00 02         [ 2]  389         subw x,#CELLL 
      0000E1 FF               [ 2]  390         ldw (x),y  ; ( level reg lshift -- )
      0000E2 90 93            [ 1]  391         ldw y,x 
      0000E4 90 EE 02         [ 2]  392         ldw y,(2,y) 
      0000E7 90 F6            [ 1]  393         ld a,(y)   ; reg_value
      0000E9 1D 00 02         [ 2]  394         subw x,#CELLL 
      0000EC FF               [ 2]  395         ldw (x),y ; ( level reg lshift rval -- )
      0000ED CD 04 42         [ 4]  396         call OVER ; ( level reg lshift rval lshift -- )
      0000F0 CD 02 E9         [ 4]  397         call DOLIT 
      0000F3 00 03                  398         .word 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      0000F5 CD 04 28         [ 4]  399         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000F8 CD 08 FD         [ 4]  400         call LSHIFT ; creat slot mask 
      0000FB CD 06 1A         [ 4]  401         call INVER  ; ( level reg lshift rval mask )
      0000FE CD 04 64         [ 4]  402         call ANDD ; ( level reg lshift slot_masked )
      000101 CD 03 E1         [ 4]  403         call TOR  ; ( level reg lshift -- R: slot_masked )
      000104 CD 05 C0         [ 4]  404         call ROT  ; ( reg lshift level )
      000107 CD 04 28         [ 4]  405         call SWAPP ; ( reg level lshift )
      00010A CD 08 FD         [ 4]  406         call LSHIFT  ; ( reg slot_level -- )
      00010D CD 03 C2         [ 4]  407         call RFROM ; ( reg slot_level masked_val )
      000110 CD 04 78         [ 4]  408         call ORR   ; ( reg updated_rval )
      000113 CD 04 28         [ 4]  409         call SWAPP 
      000116 CD 03 7E         [ 4]  410         call CSTOR
                                    411 
                                    412 ; sélectionne l'application 
                                    413 ; qui démarre automatique lors 
                                    414 ; d'un COLD start 
      000119 00 C2                  415         .word LINK 
                           00011B   416         LINK=.
      00011B 07                     417         .byte 7
      00011C 41 55 54 4F 52 55 4E   418         .ascii "AUTORUN"
      000123                        419 AUTORUN:
      000123 CD 0F C5         [ 4]  420         call TOKEN 
      000126 CD 04 18         [ 4]  421         call DUPP 
      000129 CD 03 1C         [ 4]  422         call QBRAN 
      00012C 01 DC                  423         .word FORGET2
      00012E CD 10 C2         [ 4]  424         call NAMEQ
      000131 CD 05 AF         [ 4]  425         call QDUP 
      000134 CD 03 1C         [ 4]  426         call QBRAN 
      000137 01 DC                  427         .word FORGET2
      000139 CD 04 0E         [ 4]  428         call DROP 
      00013C 1D 00 04         [ 2]  429         subw x,#2*CELLL 
      00013F 90 5F            [ 1]  430         clrw y 
      000141 FF               [ 2]  431         ldw (x),y 
      000142 90 AE 40 02      [ 2]  432         ldw y,#APP_RUN 
      000146 EF 02            [ 2]  433         ldw (2,x),y 
      000148 CC 1B 15         [ 2]  434         jp ee_store 
                                    435 
                                    436 
                                    437 ;; Reset dictionary pointer before 
                                    438 ;; forgotten word. RAM SPACE and 
                                    439 ;; interrupt vector defineD after 
                                    440 ;; must be resetted also.
      00014B 01 1B                  441         .word LINK 
                           00014D   442         LINK=.
      00014D 06                     443         .byte 6
      00014E 46 4F 52 47 45 54      444         .ascii "FORGET" 
      000154                        445 FORGET: 
      000154 CD 0F C5         [ 4]  446         call TOKEN
      000157 CD 04 18         [ 4]  447         call DUPP 
      00015A CD 03 1C         [ 4]  448         call QBRAN 
      00015D 01 DC                  449         .word FORGET2
      00015F CD 10 C2         [ 4]  450         call NAMEQ ; ( a -- ca na | a F )
      000162 CD 05 AF         [ 4]  451         call QDUP 
      000165 CD 03 1C         [ 4]  452         call QBRAN 
      000168 01 DC                  453         .word FORGET2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    454 ; only forget users words 
      00016A CD 04 18         [ 4]  455         call DUPP ; ( ca na na )
      00016D CD 02 E9         [ 4]  456         call DOLIT 
      000170 20 00                  457         .word app_space 
      000172 CD 04 28         [ 4]  458         call SWAPP 
      000175 CD 06 5E         [ 4]  459         call SUBB 
      000178 CD 04 51         [ 4]  460         call  ZLESS 
      00017B CD 03 1C         [ 4]  461         call QBRAN 
      00017E 01 CE                  462         .word CANT_FORGET 
                                    463 ; ( ca na -- )        
                                    464 ;reset ivec with address >= ca
      000180 CD 04 28         [ 4]  465         call SWAPP ; ( na ca -- ) 
      000183 CD 1D 06         [ 4]  466         call CHKIVEC ; ( na -- ) 
                                    467 ; start at LAST and link back to na 
                                    468 ; if variable found reset VP at that point.
      000186                        469 FORGET1:
      000186 CD 05 84         [ 4]  470         call LAST 
      000189 CD 03 71         [ 4]  471         call AT 
      00018C CD 04 18         [ 4]  472         call DUPP  ; ( -- na last last )
      00018F CD 01 F2         [ 4]  473         call FREEVAR ; ( -- na last )
      000192 CD 04 18         [ 4]  474         call DUPP 
      000195 CD 02 E9         [ 4]  475         call DOLIT 
      000198 00 02                  476         .word 2 
      00019A CD 06 5E         [ 4]  477         call SUBB ; ( na last -- na last lfa ) link address 
      00019D CD 03 71         [ 4]  478         call AT 
      0001A0 CD 04 18         [ 4]  479         call DUPP ; ( -- na last a a )
      0001A3 CD 05 58         [ 4]  480         call CNTXT 
      0001A6 CD 03 5A         [ 4]  481         call STORE
      0001A9 CD 05 84         [ 4]  482         call LAST  
      0001AC CD 03 5A         [ 4]  483         call STORE ; ( --  na last )
      0001AF CD 04 42         [ 4]  484         call OVER 
      0001B2 CD 06 86         [ 4]  485         call EQUAL ; ( na last na -- na T|F ) 
      0001B5 CD 03 1C         [ 4]  486         call QBRAN 
      0001B8 01 86                  487         .word FORGET1 
                                    488 ; ( na -- )
      0001BA CD 02 E9         [ 4]  489         call DOLIT 
      0001BD 00 02                  490         .word 2 
      0001BF CD 06 5E         [ 4]  491         call SUBB 
      0001C2 CD 05 74         [ 4]  492         call CPP 
      0001C5 CD 03 5A         [ 4]  493         call STORE  
      0001C8 CD 19 C2         [ 4]  494         call UPDATCP 
      0001CB CC 19 99         [ 2]  495         jp UPDATLAST 
      0001CE                        496 CANT_FORGET:
      0001CE CD 11 CE         [ 4]  497         call ABORQ
      0001D1 0A                     498         .byte 10
      0001D2 20 50 72 6F 74 65 63   499         .ascii " Protected"
             74 65 64
      0001DC                        500 FORGET2:
      0001DC CD 11 CE         [ 4]  501         call ABORQ
      0001DF 05                     502         .byte 5
      0001E0 20 77 68 61 74         503         .ascii " what"
      0001E5                        504 FORGET4:
      0001E5 CC 04 0E         [ 2]  505         jp DROP 
                                    506 
                                    507 ;---------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



                                    508 ; if na is variable 
                                    509 ; free variable data  
                                    510 ; FREEVAR ( na -- )
                                    511 ;---------------------------------
      0001E8 01 4D                  512         .word LINK 
                           0001EA   513         LINK=.
      0001EA 07                     514         .byte 7 
      0001EB 46 52 45 45 56 41 52   515         .ascii "FREEVAR"
      0001F2                        516 FREEVAR:
      0001F2 CD 04 18         [ 4]  517         call DUPP ; ( na na -- )
      0001F5 CD 03 8F         [ 4]  518         CALL CAT  ; ( na c -- )
      0001F8 CD 08 DF         [ 4]  519         call ONEP ;
      0001FB CD 06 00         [ 4]  520         CALL PLUS ; ( na c+1 -- ca ) 
      0001FE CD 08 DF         [ 4]  521         call ONEP ; ( ca+ -- ) to get routne address 
      000201 CD 04 18         [ 4]  522         call DUPP ; ( ca+ ca+ -- )
      000204 CD 03 71         [ 4]  523         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000207 CD 02 E9         [ 4]  524         call DOLIT 
      00020A 04 C5                  525         .word DOVAR ; if routine address is DOVAR then variable 
      00020C CD 06 86         [ 4]  526         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      00020F CD 03 1C         [ 4]  527         call QBRAN 
      000212 02 28                  528         .word FREEVAR4 
      000214 CD 02 E9         [ 4]  529         call DOLIT 
      000217 00 02                  530         .word 2 
      000219 CD 06 00         [ 4]  531         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00021C CD 03 71         [ 4]  532         call AT 
      00021F CD 05 66         [ 4]  533         call VPP   
      000222 CD 03 5A         [ 4]  534         call STORE 
      000225 CC 19 D9         [ 2]  535         jp UPDATVP 
      000228                        536 FREEVAR4: ; not variable
      000228 CC 04 0E         [ 2]  537         jp  DROP 
                                    538 
                                    539 ;;
                                    540 ;; get millisecond counter 
                                    541 ;; msec ( -- u )
                                    542 ;; Added by Picatout 2020-04-26
      00022B 01 EA                  543         .word LINK  
                           00022D   544         LINK = . 
      00022D 04                     545         .byte 4
      00022E 4D 53 45 43            546         .ascii "MSEC"
      000232                        547 MSEC: 
      000232 1D 00 02         [ 2]  548         subw x,#CELLL 
      000235 90 BE 2C         [ 2]  549         ldw y,MS 
      000238 FF               [ 2]  550         ldw (x),y 
      000239 81               [ 4]  551         ret 
                                    552 
                                    553 ; suspend execution for u msec 
                                    554 ;  pause ( u -- )
      00023A 02 2D                  555         .word LINK 
                           00023C   556         LINK=.
      00023C 05                     557         .byte 5 
      00023D 50 41 55 53 45         558         .ascii "PAUSE"
      000242                        559 PAUSE:
      000242 90 93            [ 1]  560         ldw y,x
      000244 90 FE            [ 2]  561         ldw y,(y)
      000246 72 B9 00 2C      [ 2]  562         addw y,MS 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      00024A 8F               [10]  563 1$:     wfi  
      00024B 90 B3 2C         [ 2]  564         cpw y,MS  
      00024E 26 FA            [ 1]  565         jrne 1$        
      000250 1C 00 02         [ 2]  566         addw x,#CELLL 
      000253 81               [ 4]  567         ret 
                                    568 
                                    569 ; initialize count down timer 
                                    570 ;  TIMER ( u -- )  milliseconds 
      000254 02 3C                  571         .word LINK 
                           000256   572         LINK=.
      000256 05                     573         .byte 5 
      000257 54 49 4D 45 52         574         .ascii "TIMER" 
      00025C                        575 TIMER:
      00025C 90 93            [ 1]  576         ldw y,x
      00025E 90 FE            [ 2]  577         ldw y,(y) 
      000260 90 BF 2E         [ 2]  578         ldw CNTDWN,y
      000263 1C 00 02         [ 2]  579         addw x,#CELLL 
      000266 81               [ 4]  580         ret 
                                    581 
                                    582 ; check for TIMER exiparition 
                                    583 ;  TIMEOUT? ( -- 0|-1 )
      000267 02 56                  584         .word LINK 
                           000269   585         LINK=. 
      000269 08                     586         .byte 8 
      00026A 54 49 4D 45 4F 55 54   587         .ascii "TIMEOUT?"
             3F
      000272                        588 TIMEOUTQ: 
      000272 4F               [ 1]  589         clr a
      000273 1D 00 02         [ 2]  590         subw x,#CELLL 
      000276 90 BE 2E         [ 2]  591         ldw y,CNTDWN 
      000279 26 01            [ 1]  592         jrne 1$ 
      00027B 43               [ 1]  593         cpl a 
      00027C E7 01            [ 1]  594 1$:     ld (1,x),a 
      00027E F7               [ 1]  595         ld (x),a 
      00027F 81               [ 4]  596         ret         
                                    597 
                                    598 ; reboot MCU 
                                    599 ; REBOOT ( -- )
      000280 02 69                  600         .word LINK 
                           000282   601         LINK=. 
      000282 06                     602         .byte 6 
      000283 52 45 42 4F 4F 54      603         .ascii "REBOOT"
      000289                        604 reboot:
      000289 CC 00 00         [ 2]  605         jp NonHandledInterrupt
                                    606 
                                    607 ; compile to flash memory 
                                    608 ; TO-FLASH ( -- )
      00028C 02 82                  609         .word LINK 
                           00028E   610         LINK=.
      00028E 08                     611         .byte 8
      00028F 54 4F 2D 46 4C 41 53   612         .ascii "TO-FLASH"
             48
      000297                        613 TOFLASH:
      000297 90 AE FF FF      [ 2]  614         ldw y,#-1 
      00029B 90 BF 1E         [ 2]  615         ldw UTFLASH,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00029E 81               [ 4]  616         ret 
                                    617 
                                    618 ; compile to RAM 
                                    619 ; TO-RAM ( -- )
      00029F 02 8E                  620         .word LINK 
                           0002A1   621         LINK=.
      0002A1 06                     622         .byte 6 
      0002A2 54 4F 2D 52 41 4D      623         .ascii "TO-RAM"
      0002A8                        624 TORAM:
      0002A8 90 5F            [ 1]  625         clrw y 
      0002AA 90 BF 1E         [ 2]  626         ldw UTFLASH,y 
      0002AD 81               [ 4]  627         ret 
                                    628         
                                    629 
                                    630 ;; Device dependent I/O
                                    631 ;       ?RX     ( -- c T | F )
                                    632 ;         Return input byte and true, or false.
      0002AE 02 A1                  633         .word      LINK 
                           0002B0   634 LINK	= .
      0002B0 04                     635         .byte      4
      0002B1 3F 4B 45 59            636         .ascii     "?KEY"
      0002B5                        637 QKEY:
      0002B5 90 5F            [ 1]  638         CLRW Y 
      0002B7 72 0B 52 30 0B   [ 2]  639         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      0002BC C6 52 31         [ 1]  640         LD    A,UART1_DR   ;get char in A
      0002BF 1D 00 02         [ 2]  641 	SUBW	X,#2
      0002C2 E7 01            [ 1]  642         LD     (1,X),A
      0002C4 7F               [ 1]  643 	CLR	(X)
      0002C5 90 53            [ 2]  644         CPLW     Y
      0002C7                        645 INCH:
      0002C7 1D 00 02         [ 2]  646 	SUBW	X,#2
      0002CA FF               [ 2]  647         LDW     (X),Y
      0002CB 81               [ 4]  648         RET
                                    649 
                                    650 ;       TX!     ( c -- )
                                    651 ;       Send character c to  output device.
      0002CC 02 B0                  652         .word      LINK
                           0002CE   653 LINK	= .
      0002CE 04                     654         .byte      4
      0002CF 45 4D 49 54            655         .ascii     "EMIT"
      0002D3                        656 EMIT:
      0002D3 E6 01            [ 1]  657         LD     A,(1,X)
      0002D5 1C 00 02         [ 2]  658 	ADDW	X,#2
      0002D8 72 0F 52 30 FB   [ 2]  659 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0002DD C7 52 31         [ 1]  660         LD    UART1_DR,A   ;send A
      0002E0 81               [ 4]  661         RET
                                    662 
                                    663 ;; The kernel
                                    664 
                                    665 ;       doLIT   ( -- w )
                                    666 ;       Push an inline literal.
      0002E1 02 CE                  667         .word      LINK
                           0002E3   668 LINK	= 	.
      0002E3 45                     669 	.byte      COMPO+5
      0002E4 44 4F 4C 49 54         670         .ascii     "DOLIT"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002E9                        671 DOLIT:
      0002E9 1D 00 02         [ 2]  672 	SUBW X,#2
                           000001   673 .if PICATOUT_MOD 
      0002EC 16 01            [ 2]  674         ldw y,(1,sp)
      0002EE 90 FE            [ 2]  675         ldw y,(y)
      0002F0 FF               [ 2]  676         ldw (x),y
      0002F1 90 85            [ 2]  677         popw y 
      0002F3 90 EC 02         [ 2]  678         jp (2,y)
                           000000   679 .else 
                                    680         POPW Y
                                    681 	LDW YTEMP,Y
                                    682 	LDW Y,(Y)
                                    683         LDW (X),Y
                                    684         LDW Y,YTEMP
                                    685 	JP (2,Y)
                                    686 .endif 
                                    687 
                                    688 ;       next    ( -- )
                                    689 ;       Code for  single index loop.
      0002F6 02 E3                  690         .word      LINK
                           0002F8   691 LINK	= 	.
      0002F8 44                     692 	.byte      COMPO+4
      0002F9 4E 45 58 54            693         .ascii     "NEXT"
      0002FD                        694 DONXT:
      0002FD 16 03            [ 2]  695 	LDW Y,(3,SP)
      0002FF 90 5A            [ 2]  696 	DECW Y
      000301 2A 07            [ 1]  697 	JRPL NEX1 ; jump if N=0
      000303 90 85            [ 2]  698 	POPW Y
                           000001   699 .if PICATOUT_MOD
      000305 5B 02            [ 2]  700         addw sp,#2
                           000000   701 .else        
                                    702 	POP A
                                    703 	POP A
                                    704 .endif         
      000307 90 EC 02         [ 2]  705         JP (2,Y)
      00030A                        706 NEX1:
      00030A 17 03            [ 2]  707         LDW (3,SP),Y
      00030C 90 85            [ 2]  708         POPW Y
      00030E 90 FE            [ 2]  709 	LDW Y,(Y)
      000310 90 FC            [ 2]  710 	JP (Y)
                                    711 
                                    712 ;       ?branch ( f -- )
                                    713 ;       Branch if flag is zero.
      000312 02 F8                  714         .word      LINK
                           000314   715 LINK	= 	.
      000314 47                     716 	.byte      COMPO+7
      000315 3F 42 52 41 4E 43 48   717         .ascii     "?BRANCH"
      00031C                        718 QBRAN:	
      00031C 90 93            [ 1]  719         LDW Y,X
      00031E 1C 00 02         [ 2]  720 	ADDW X,#2
      000321 90 FE            [ 2]  721 	LDW Y,(Y)
      000323 27 0E            [ 1]  722         JREQ     BRAN
      000325 90 85            [ 2]  723 	POPW Y
      000327 90 EC 02         [ 2]  724 	JP (2,Y)
                                    725         
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



                                    726 ;       branch  ( -- )
                                    727 ;       Branch to an inline address.
      00032A 03 14                  728         .word      LINK
                           00032C   729 LINK	= 	.
      00032C 46                     730 	.byte      COMPO+6
      00032D 42 52 41 4E 43 48      731         .ascii     "BRANCH"
      000333                        732 BRAN:
      000333 90 85            [ 2]  733         POPW Y
      000335 90 FE            [ 2]  734 	LDW Y,(Y)
      000337 90 FC            [ 2]  735         JP     (Y)
                                    736 
                                    737 ;       EXECUTE ( ca -- )
                                    738 ;       Execute  word at ca.
      000339 03 2C                  739         .word      LINK
                           00033B   740 LINK	= 	.
      00033B 07                     741         .byte       7
      00033C 45 58 45 43 55 54 45   742         .ascii     "EXECUTE"
      000343                        743 EXECU:
      000343 90 93            [ 1]  744         LDW Y,X
      000345 1C 00 02         [ 2]  745 	ADDW X,#2
      000348 90 FE            [ 2]  746 	LDW  Y,(Y)
      00034A 90 FC            [ 2]  747         JP   (Y)
                                    748 
                                    749 ;       EXIT    ( -- )
                                    750 ;       Terminate a colon definition.
      00034C 03 3B                  751         .word      LINK
                           00034E   752 LINK = .
      00034E 04                     753         .byte      4
      00034F 45 58 49 54            754         .ascii     "EXIT"
      000353                        755 EXIT:
      000353 90 85            [ 2]  756         POPW Y
      000355 81               [ 4]  757         RET
                                    758 
                                    759 ;       !       ( w a -- )
                                    760 ;       Pop  data stack to memory.
      000356 03 4E                  761         .word      LINK
                           000358   762 LINK = .
      000358 01                     763         .byte      1
      000359 21                     764         .ascii     "!"
      00035A                        765 STORE:
      00035A 90 93            [ 1]  766         LDW Y,X
      00035C 90 FE            [ 2]  767         LDW Y,(Y)    ;Y=a
      00035E 90 BF 22         [ 2]  768         LDW YTEMP,Y
      000361 90 93            [ 1]  769         LDW Y,X
      000363 90 EE 02         [ 2]  770         LDW Y,(2,Y)
      000366 91 CF 22         [ 5]  771         LDW [YTEMP],Y ;store w at a
      000369 1C 00 04         [ 2]  772         ADDW X,#4 ; DDROP 
      00036C 81               [ 4]  773         RET     
                                    774 
                                    775 ;       @       ( a -- w )
                                    776 ;       Push memory location to stack.
      00036D 03 58                  777         .word      LINK
                           00036F   778 LINK	= 	.
      00036F 01                     779         .byte    1
      000370 40                     780         .ascii	"@"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000371                        781 AT:
      000371 90 93            [ 1]  782         LDW Y,X     ;Y = a
      000373 90 FE            [ 2]  783         LDW Y,(Y)   ; address 
      000375 90 FE            [ 2]  784         LDW Y,(Y)   ; value 
      000377 FF               [ 2]  785         LDW (X),Y ;w = @Y
      000378 81               [ 4]  786         RET     
                                    787 
                                    788 ;       C!      ( c b -- )
                                    789 ;       Pop  data stack to byte memory.
      000379 03 6F                  790         .word      LINK
                           00037B   791 LINK	= .
      00037B 02                     792         .byte      2
      00037C 43 21                  793         .ascii     "C!"
      00037E                        794 CSTOR:
      00037E 90 93            [ 1]  795         LDW Y,X
      000380 90 FE            [ 2]  796 	LDW Y,(Y)    ;Y=b
      000382 E6 03            [ 1]  797         LD A,(3,X)    ;D = c
      000384 90 F7            [ 1]  798         LD  (Y),A     ;store c at b
      000386 1C 00 04         [ 2]  799 	ADDW X,#4 ; DDROP 
      000389 81               [ 4]  800         RET     
                                    801 
                                    802 ;       C@      ( b -- c )
                                    803 ;       Push byte in memory to  stack.
      00038A 03 7B                  804         .word      LINK
                           00038C   805 LINK	= 	.
      00038C 02                     806         .byte      2
      00038D 43 40                  807         .ascii     "C@"
      00038F                        808 CAT:
      00038F 90 93            [ 1]  809         LDW Y,X     ;Y=b
      000391 90 FE            [ 2]  810         LDW Y,(Y)
      000393 90 F6            [ 1]  811         LD A,(Y)
      000395 E7 01            [ 1]  812         LD (1,X),A
      000397 7F               [ 1]  813         CLR (X)
      000398 81               [ 4]  814         RET     
                                    815 
                                    816 ;       RP@     ( -- a )
                                    817 ;       Push current RP to data stack.
      000399 03 8C                  818         .word      LINK
                           00039B   819 LINK	= .
      00039B 03                     820         .byte      3
      00039C 52 50 40               821         .ascii     "RP@"
      00039F                        822 RPAT:
      00039F 90 96            [ 1]  823         LDW Y,SP    ;save return addr
      0003A1 1D 00 02         [ 2]  824         SUBW X,#2
      0003A4 FF               [ 2]  825         LDW (X),Y
      0003A5 81               [ 4]  826         RET     
                                    827 
                                    828 ;       RP!     ( a -- )
                                    829 ;       Set  return stack pointer.
      0003A6 03 9B                  830         .word      LINK
                           0003A8   831 LINK	= 	. 
      0003A8 43                     832 	.byte      COMPO+3
      0003A9 52 50 21               833         .ascii     "RP!"
      0003AC                        834 RPSTO:
      0003AC 90 85            [ 2]  835         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      0003AE 90 BF 22         [ 2]  836         LDW YTEMP,Y
      0003B1 90 93            [ 1]  837         LDW Y,X
      0003B3 90 FE            [ 2]  838         LDW Y,(Y)
      0003B5 90 94            [ 1]  839         LDW SP,Y
      0003B7 1C 00 02         [ 2]  840         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      0003BA 92 CC 22         [ 5]  841         JP [YTEMP]
                                    842 
                                    843 ;       R>      ( -- w )
                                    844 ;       Pop return stack to data stack.
      0003BD 03 A8                  845         .word      LINK
                           0003BF   846 LINK	= 	. 
      0003BF 42                     847 	.byte      COMPO+2
      0003C0 52 3E                  848         .ascii     "R>"
      0003C2                        849 RFROM:
      0003C2 90 85            [ 2]  850         POPW Y    ;save return addr
      0003C4 90 BF 22         [ 2]  851         LDW YTEMP,Y
      0003C7 90 85            [ 2]  852         POPW Y
      0003C9 1D 00 02         [ 2]  853         SUBW X,#2
      0003CC FF               [ 2]  854         LDW (X),Y
      0003CD 92 CC 22         [ 5]  855         JP [YTEMP]
                                    856 
                                    857 ;       R@      ( -- w )
                                    858 ;       Copy top of return stack to stack.
      0003D0 03 BF                  859         .word      LINK
                           0003D2   860 LINK	= 	. 
      0003D2 02                     861         .byte      2
      0003D3 52 40                  862         .ascii     "R@"
      0003D5                        863 RAT:
                           000001   864 .if PICATOUT_MOD
      0003D5 16 03            [ 2]  865         ldw y,(3,sp)
      0003D7 1D 00 02         [ 2]  866         subw x,#CELLL 
      0003DA FF               [ 2]  867         ldw (x),y 
      0003DB 81               [ 4]  868         ret 
                           000000   869 .else 
                                    870         POPW Y
                                    871         LDW YTEMP,Y
                                    872         POPW Y
                                    873         PUSHW Y
                                    874         SUBW X,#2
                                    875         LDW (X),Y
                                    876         JP [YTEMP]
                                    877 .endif         
                                    878 
                                    879 ;       >R      ( w -- )
                                    880 ;       Push data stack to return stack.
      0003DC 03 D2                  881         .word      LINK
                           0003DE   882 LINK	= 	. 
      0003DE 42                     883 	.byte      COMPO+2
      0003DF 3E 52                  884         .ascii     ">R"
      0003E1                        885 TOR:
      0003E1 90 85            [ 2]  886         POPW Y    ;save return addr
      0003E3 90 BF 22         [ 2]  887         LDW YTEMP,Y
      0003E6 90 93            [ 1]  888         LDW Y,X
      0003E8 90 FE            [ 2]  889         LDW Y,(Y)
      0003EA 90 89            [ 2]  890         PUSHW Y    ;restore return addr
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003EC 1C 00 02         [ 2]  891         ADDW X,#2
      0003EF 92 CC 22         [ 5]  892         JP [YTEMP]
                                    893 
                                    894 ;       SP@     ( -- a )
                                    895 ;       Push current stack pointer.
      0003F2 03 DE                  896         .word      LINK
                           0003F4   897 LINK	= 	. 
      0003F4 03                     898         .byte      3
      0003F5 53 50 40               899         .ascii     "SP@"
      0003F8                        900 SPAT:
      0003F8 90 93            [ 1]  901 	LDW Y,X
      0003FA 1D 00 02         [ 2]  902         SUBW X,#2
      0003FD FF               [ 2]  903 	LDW (X),Y
      0003FE 81               [ 4]  904         RET     
                                    905 
                                    906 ;       SP!     ( a -- )
                                    907 ;       Set  data stack pointer.
      0003FF 03 F4                  908         .word      LINK
                           000401   909 LINK	= 	. 
      000401 03                     910         .byte      3
      000402 53 50 21               911         .ascii     "SP!"
      000405                        912 SPSTO:
      000405 FE               [ 2]  913         LDW     X,(X)     ;X = a
      000406 81               [ 4]  914         RET     
                                    915 
                                    916 ;       DROP    ( w -- )
                                    917 ;       Discard top stack item.
      000407 04 01                  918         .word      LINK
                           000409   919 LINK	= 	. 
      000409 04                     920         .byte      4
      00040A 44 52 4F 50            921         .ascii     "DROP"
      00040E                        922 DROP:
      00040E 1C 00 02         [ 2]  923         ADDW X,#2     
      000411 81               [ 4]  924         RET     
                                    925 
                                    926 ;       DUP     ( w -- w w )
                                    927 ;       Duplicate  top stack item.
      000412 04 09                  928         .word      LINK
                           000414   929 LINK	= 	. 
      000414 03                     930         .byte      3
      000415 44 55 50               931         .ascii     "DUP"
      000418                        932 DUPP:
      000418 90 93            [ 1]  933 	LDW Y,X
      00041A 1D 00 02         [ 2]  934         SUBW X,#2
      00041D 90 FE            [ 2]  935 	LDW Y,(Y)
      00041F FF               [ 2]  936 	LDW (X),Y
      000420 81               [ 4]  937         RET     
                                    938 
                                    939 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    940 ;       Exchange top two stack items.
      000421 04 14                  941         .word      LINK
                           000423   942 LINK	= 	. 
      000423 04                     943         .byte      4
      000424 53 57 41 50            944         .ascii     "SWAP"
      000428                        945 SWAPP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000428 90 93            [ 1]  946         LDW Y,X
      00042A 90 FE            [ 2]  947         LDW Y,(Y)
      00042C 90 BF 22         [ 2]  948         LDW YTEMP,Y
      00042F 90 93            [ 1]  949         LDW Y,X
      000431 90 EE 02         [ 2]  950         LDW Y,(2,Y)
      000434 FF               [ 2]  951         LDW (X),Y
      000435 90 BE 22         [ 2]  952         LDW Y,YTEMP
      000438 EF 02            [ 2]  953         LDW (2,X),Y
      00043A 81               [ 4]  954         RET     
                                    955 
                                    956 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    957 ;       Copy second stack item to top.
      00043B 04 23                  958         .word      LINK
                           00043D   959 LINK	= . 
      00043D 04                     960         .byte      4
      00043E 4F 56 45 52            961         .ascii     "OVER"
      000442                        962 OVER:
      000442 1D 00 02         [ 2]  963         SUBW X,#2
      000445 90 93            [ 1]  964         LDW Y,X
      000447 90 EE 04         [ 2]  965         LDW Y,(4,Y)
      00044A FF               [ 2]  966         LDW (X),Y
      00044B 81               [ 4]  967         RET     
                                    968 
                                    969 ;       0<      ( n -- t )
                                    970 ;       Return true if n is negative.
      00044C 04 3D                  971         .word      LINK
                           00044E   972 LINK	= . 
      00044E 02                     973         .byte      2
      00044F 30 3C                  974         .ascii     "0<"
      000451                        975 ZLESS:
      000451 A6 FF            [ 1]  976         LD A,#0xFF
      000453 90 93            [ 1]  977         LDW Y,X
      000455 90 FE            [ 2]  978         LDW Y,(Y)
      000457 2B 01            [ 1]  979         JRMI     ZL1
      000459 4F               [ 1]  980         CLR A   ;false
      00045A F7               [ 1]  981 ZL1:    LD     (X),A
      00045B E7 01            [ 1]  982         LD (1,X),A
      00045D 81               [ 4]  983 	RET     
                                    984 
                                    985 ;       AND     ( w w -- w )
                                    986 ;       Bitwise AND.
      00045E 04 4E                  987         .word      LINK
                           000460   988 LINK	= . 
      000460 03                     989         .byte      3
      000461 41 4E 44               990         .ascii     "AND"
      000464                        991 ANDD:
      000464 F6               [ 1]  992         LD  A,(X)    ;D=w
      000465 E4 02            [ 1]  993         AND A,(2,X)
      000467 E7 02            [ 1]  994         LD (2,X),A
      000469 E6 01            [ 1]  995         LD A,(1,X)
      00046B E4 03            [ 1]  996         AND A,(3,X)
      00046D E7 03            [ 1]  997         LD (3,X),A
      00046F 1C 00 02         [ 2]  998         ADDW X,#2
      000472 81               [ 4]  999         RET
                                   1000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                                   1001 ;       OR      ( w w -- w )
                                   1002 ;       Bitwise inclusive OR.
      000473 04 60                 1003         .word      LINK
                           000475  1004 LINK = . 
      000475 02                    1005         .byte      2
      000476 4F 52                 1006         .ascii     "OR"
      000478                       1007 ORR:
      000478 F6               [ 1] 1008         LD A,(X)    ;D=w
      000479 EA 02            [ 1] 1009         OR A,(2,X)
      00047B E7 02            [ 1] 1010         LD (2,X),A
      00047D E6 01            [ 1] 1011         LD A,(1,X)
      00047F EA 03            [ 1] 1012         OR A,(3,X)
      000481 E7 03            [ 1] 1013         LD (3,X),A
      000483 1C 00 02         [ 2] 1014         ADDW X,#2
      000486 81               [ 4] 1015         RET
                                   1016 
                                   1017 ;       XOR     ( w w -- w )
                                   1018 ;       Bitwise exclusive OR.
      000487 04 75                 1019         .word      LINK
                           000489  1020 LINK	= . 
      000489 03                    1021         .byte      3
      00048A 58 4F 52              1022         .ascii     "XOR"
      00048D                       1023 XORR:
      00048D F6               [ 1] 1024         LD A,(X)    ;D=w
      00048E E8 02            [ 1] 1025         XOR A,(2,X)
      000490 E7 02            [ 1] 1026         LD (2,X),A
      000492 E6 01            [ 1] 1027         LD A,(1,X)
      000494 E8 03            [ 1] 1028         XOR A,(3,X)
      000496 E7 03            [ 1] 1029         LD (3,X),A
      000498 1C 00 02         [ 2] 1030         ADDW X,#2
      00049B 81               [ 4] 1031         RET
                                   1032 
                                   1033 ;       UM+     ( u u -- udsum )
                                   1034 ;       Add two unsigned single
                                   1035 ;       and return a double sum.
      00049C 04 89                 1036         .word      LINK
                           00049E  1037 LINK	= . 
      00049E 03                    1038         .byte      3
      00049F 55 4D 2B              1039         .ascii     "UM+"
      0004A2                       1040 UPLUS:
      0004A2 A6 01            [ 1] 1041         LD A,#1
      0004A4 90 93            [ 1] 1042         LDW Y,X
      0004A6 90 EE 02         [ 2] 1043         LDW Y,(2,Y)
      0004A9 90 BF 22         [ 2] 1044         LDW YTEMP,Y
      0004AC 90 93            [ 1] 1045         LDW Y,X
      0004AE 90 FE            [ 2] 1046         LDW Y,(Y)
      0004B0 72 B9 00 22      [ 2] 1047         ADDW Y,YTEMP
      0004B4 EF 02            [ 2] 1048         LDW (2,X),Y
      0004B6 25 01            [ 1] 1049         JRC     UPL1
      0004B8 4F               [ 1] 1050         CLR A
      0004B9 E7 01            [ 1] 1051 UPL1:   LD     (1,X),A
      0004BB 7F               [ 1] 1052         CLR (X)
      0004BC 81               [ 4] 1053         RET
                                   1054 
                                   1055 ;; System and user variables
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1056 
                                   1057 ;       doVAR   ( -- a )
                                   1058 ;       Code for VARIABLE and CREATE.
      0004BD 04 9E                 1059         .word      LINK
                           0004BF  1060 LINK	= . 
      0004BF 45                    1061 	.byte      COMPO+5
      0004C0 44 4F 56 41 52        1062         .ascii     "DOVAR"
      0004C5                       1063 DOVAR:
      0004C5 1D 00 02         [ 2] 1064 	SUBW X,#2
      0004C8 90 85            [ 2] 1065         POPW Y    ;get return addr (pfa)
                           000001  1066 .if PICATOUT_MOD
      0004CA 90 FE            [ 2] 1067         LDW Y,(Y) ; indirect address 
                                   1068 .endif ;PICATOUT_MOD        
      0004CC FF               [ 2] 1069         LDW (X),Y    ;push on stack
      0004CD 81               [ 4] 1070         RET     ;go to RET of EXEC
                                   1071 
                                   1072 ;       BASE    ( -- a )
                                   1073 ;       Radix base for numeric I/O.
      0004CE 04 BF                 1074         .word      LINK        
                           0004D0  1075 LINK = . 
      0004D0 04                    1076         .byte      4
      0004D1 42 41 53 45           1077         .ascii     "BASE"
      0004D5                       1078 BASE:
      0004D5 90 AE 00 06      [ 2] 1079 	LDW Y,#UBASE 
      0004D9 1D 00 02         [ 2] 1080 	SUBW X,#2
      0004DC FF               [ 2] 1081         LDW (X),Y
      0004DD 81               [ 4] 1082         RET
                                   1083 
                                   1084 ;       tmp     ( -- a )
                                   1085 ;       A temporary storage.
      0004DE 04 D0                 1086         .word      LINK
                                   1087         
                           0004E0  1088 LINK = . 
      0004E0 03                    1089 	.byte      3
      0004E1 54 4D 50              1090         .ascii     "TMP"
      0004E4                       1091 TEMP:
      0004E4 90 AE 00 08      [ 2] 1092 	LDW Y,#UTMP
      0004E8 1D 00 02         [ 2] 1093 	SUBW X,#2
      0004EB FF               [ 2] 1094         LDW (X),Y
      0004EC 81               [ 4] 1095         RET
                                   1096 
                                   1097 ;       >IN     ( -- a )
                                   1098 ;        Hold parsing pointer.
      0004ED 04 E0                 1099         .word      LINK
                           0004EF  1100 LINK = . 
      0004EF 03                    1101         .byte      3
      0004F0 3E 49 4E              1102         .ascii    ">IN"
      0004F3                       1103 INN:
      0004F3 90 AE 00 0A      [ 2] 1104 	LDW Y,#UINN 
      0004F7 1D 00 02         [ 2] 1105 	SUBW X,#2
      0004FA FF               [ 2] 1106         LDW (X),Y
      0004FB 81               [ 4] 1107         RET
                                   1108 
                                   1109 ;       #TIB    ( -- a )
                                   1110 ;       Count in terminal input buffer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      0004FC 04 EF                 1111         .word      LINK
                           0004FE  1112 LINK = . 
      0004FE 04                    1113         .byte      4
      0004FF 23 54 49 42           1114         .ascii     "#TIB"
      000503                       1115 NTIB:
      000503 90 AE 00 0C      [ 2] 1116 	LDW Y,#UCTIB 
      000507 1D 00 02         [ 2] 1117 	SUBW X,#2
      00050A FF               [ 2] 1118         LDW (X),Y
      00050B 81               [ 4] 1119         RET
                                   1120 
                           000001  1121 .if PICATOUT_MOD
                                   1122 ;       TBUF ( -- a )
                                   1123 ;       address of 128 bytes transaction buffer 
      00050C 04 FE                 1124         .word LINK 
                           00050E  1125         LINK=.
      00050E 04                    1126         .byte 4 
      00050F 54 42 55 46           1127         .ascii "TBUF"
      000513                       1128 TBUF:
      000513 90 AE 16 80      [ 2] 1129         ldw y,#ROWBUFF
      000517 1D 00 02         [ 2] 1130         subw x,#CELLL
      00051A FF               [ 2] 1131         ldw (x),y 
      00051B 81               [ 4] 1132         ret 
                                   1133 
                                   1134 ; systeme variable 
                                   1135 ; compilation destination 
                                   1136 ; TFLASH ( -- A )
      00051C 05 0E                 1137         .word LINK 
                           00051E  1138         LINK=.
      00051E 06                    1139         .byte 6 
      00051F 54 46 4C 41 53 48     1140         .ascii "TFLASH"         
      000525                       1141 TFLASH:
      000525 1D 00 02         [ 2] 1142         subw x,#CELLL 
      000528 90 AE 00 1E      [ 2] 1143         ldw y,#UTFLASH
      00052C FF               [ 2] 1144         ldw (x),y 
      00052D 81               [ 4] 1145         ret 
                                   1146 
                                   1147 .endif ;PICATOUT_MOD
                                   1148 
                                   1149 ;       "EVAL   ( -- a )
                                   1150 ;       Execution vector of EVAL.
      00052E 05 1E                 1151         .word      LINK
                           000530  1152 LINK = . 
      000530 05                    1153         .byte      5
      000531 27 45 56 41 4C        1154         .ascii     "'EVAL"
      000536                       1155 TEVAL:
      000536 90 AE 00 10      [ 2] 1156 	LDW Y,#UINTER 
      00053A 1D 00 02         [ 2] 1157 	SUBW X,#2
      00053D FF               [ 2] 1158         LDW (X),Y
      00053E 81               [ 4] 1159         RET
                                   1160 
                                   1161 ;       HLD     ( -- a )
                                   1162 ;       Hold a pointer of output string.
      00053F 05 30                 1163         .word      LINK
                           000541  1164 LINK = . 
      000541 03                    1165         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      000542 48 4C 44              1166         .ascii     "HLD"
      000545                       1167 HLD:
      000545 90 AE 00 12      [ 2] 1168 	LDW Y,#UHLD 
      000549 1D 00 02         [ 2] 1169 	SUBW X,#2
      00054C FF               [ 2] 1170         LDW (X),Y
      00054D 81               [ 4] 1171         RET
                                   1172 
                                   1173 ;       CONTEXT ( -- a )
                                   1174 ;       Start vocabulary search.
      00054E 05 41                 1175         .word      LINK
                           000550  1176 LINK = . 
      000550 07                    1177         .byte      7
      000551 43 4F 4E 54 45 58 54  1178         .ascii     "CONTEXT"
      000558                       1179 CNTXT:
      000558 90 AE 00 14      [ 2] 1180 	LDW Y,#UCNTXT
      00055C 1D 00 02         [ 2] 1181 	SUBW X,#2
      00055F FF               [ 2] 1182         LDW (X),Y
      000560 81               [ 4] 1183         RET
                                   1184 
                                   1185 ;       VP      ( -- a )
                                   1186 ;       Point to top of variables
      000561 05 50                 1187         .word      LINK
                           000563  1188 LINK = . 
      000563 02                    1189         .byte      2
      000564 56 50                 1190         .ascii     "VP"
      000566                       1191 VPP:
      000566 90 AE 00 16      [ 2] 1192 	LDW Y,#UVP 
      00056A 1D 00 02         [ 2] 1193 	SUBW X,#2
      00056D FF               [ 2] 1194         LDW (X),Y
      00056E 81               [ 4] 1195         RET
                                   1196 
                           000001  1197 .if PICATOUT_MOD
                                   1198 ;       CP    ( -- a )
                                   1199 ;       Pointer to top of FLASH 
      00056F 05 63                 1200         .word LINK 
                           000571  1201         LINK=.
      000571 03                    1202         .byte 3 
      000572 43 50                 1203         .ascii "CP"
      000574                       1204 CPP: 
      000574 90 AE 00 18      [ 2] 1205         ldw y,#UCP 
      000578 1D 00 02         [ 2] 1206         subw x,#CELLL 
      00057B FF               [ 2] 1207         ldw (x),y 
      00057C 81               [ 4] 1208         ret                
                                   1209 .endif ;PICATOUT_MOD
                                   1210 
                                   1211 ;       LAST    ( -- a )
                                   1212 ;       Point to last name in dictionary.
      00057D 05 71                 1213         .word      LINK
                           00057F  1214 LINK = . 
      00057F 04                    1215         .byte      4
      000580 4C 41 53 54           1216         .ascii     "LAST"
      000584                       1217 LAST:
      000584 90 AE 00 1A      [ 2] 1218 	LDW Y,#ULAST 
      000588 1D 00 02         [ 2] 1219 	SUBW X,#2
      00058B FF               [ 2] 1220         LDW (X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      00058C 81               [ 4] 1221         RET
                                   1222 
                           000001  1223 .if PICATOUT_MOD
      00058D 05 7F                 1224         .word LINK 
                           00058F  1225         LINK=.
      00058F 06                    1226         .byte 6
      000590 4F 46 46 53 45 54     1227         .ascii "OFFSET" 
      000596                       1228 OFFSET: 
      000596 1D 00 02         [ 2] 1229         subw x,#CELLL
      000599 90 AE 00 1C      [ 2] 1230         ldw y,#UOFFSET 
      00059D FF               [ 2] 1231         ldw (x),y 
      00059E 81               [ 4] 1232         ret 
                                   1233 
                                   1234 ; adjust jump address adding OFFSET
                                   1235 ; ADR-ADJ ( a -- a+offset )
      00059F                       1236 ADRADJ: 
      00059F CD 05 96         [ 4] 1237         call OFFSET 
      0005A2 CD 03 71         [ 4] 1238         call AT 
      0005A5 CC 06 00         [ 2] 1239         jp PLUS 
                                   1240 
                                   1241 .endif ; PICATOUT_MOD
                                   1242 
                                   1243 ;; Common functions
                                   1244 
                                   1245 ;       ?DUP    ( w -- w w | 0 )
                                   1246 ;       Dup tos if its is not zero.
      0005A8 05 8F                 1247         .word      LINK
                           0005AA  1248 LINK = . 
      0005AA 04                    1249         .byte      4
      0005AB 3F 44 55 50           1250         .ascii     "?DUP"
      0005AF                       1251 QDUP:
      0005AF 90 93            [ 1] 1252         LDW Y,X
      0005B1 90 FE            [ 2] 1253 	LDW Y,(Y)
      0005B3 27 04            [ 1] 1254         JREQ     QDUP1
      0005B5 1D 00 02         [ 2] 1255 	SUBW X,#2
      0005B8 FF               [ 2] 1256         LDW (X),Y
      0005B9 81               [ 4] 1257 QDUP1:  RET
                                   1258 
                                   1259 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1260 ;       Rot 3rd item to top.
      0005BA 05 AA                 1261         .word      LINK
                           0005BC  1262 LINK = . 
      0005BC 03                    1263         .byte      3
      0005BD 52 4F 54              1264         .ascii     "ROT"
      0005C0                       1265 ROT:
                           000001  1266 .if PICATOUT_MOD
      0005C0 90 93            [ 1] 1267         ldw y,x 
      0005C2 90 FE            [ 2] 1268         ldw y,(y)
      0005C4 90 89            [ 2] 1269         pushw y 
      0005C6 90 93            [ 1] 1270         ldw y,x 
      0005C8 90 EE 04         [ 2] 1271         ldw y,(4,y)
      0005CB FF               [ 2] 1272         ldw (x),y 
      0005CC 90 93            [ 1] 1273         ldw y,x 
      0005CE 90 EE 02         [ 2] 1274         ldw y,(2,y)
      0005D1 EF 04            [ 2] 1275         ldw (4,x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      0005D3 90 85            [ 2] 1276         popw y 
      0005D5 EF 02            [ 2] 1277         ldw (2,x),y
      0005D7 81               [ 4] 1278         ret 
                           000000  1279 .else 
                                   1280         LDW Y,X
                                   1281 	LDW Y,(4,Y)
                                   1282 	LDW YTEMP,Y
                                   1283         LDW Y,X
                                   1284         LDW Y,(2,Y)
                                   1285         LDW XTEMP,Y
                                   1286         LDW Y,X
                                   1287         LDW Y,(Y)
                                   1288         LDW (2,X),Y
                                   1289         LDW Y,XTEMP
                                   1290         LDW (4,X),Y
                                   1291         LDW Y,YTEMP
                                   1292         LDW (X),Y
                                   1293         RET
                                   1294 .endif 
                                   1295 
                                   1296 ;       2DROP   ( w w -- )
                                   1297 ;       Discard two items on stack.
      0005D8 05 BC                 1298         .word      LINK
                           0005DA  1299 LINK = . 
      0005DA 05                    1300         .byte      5
      0005DB 32 44 52 4F 50        1301         .ascii     "2DROP"
      0005E0                       1302 DDROP:
      0005E0 1C 00 04         [ 2] 1303         ADDW X,#4
      0005E3 81               [ 4] 1304         RET
                                   1305 
                                   1306 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1307 ;       Duplicate top two items.
      0005E4 05 DA                 1308         .word      LINK
                           0005E6  1309 LINK = . 
      0005E6 04                    1310         .byte      4
      0005E7 32 44 55 50           1311         .ascii     "2DUP"
      0005EB                       1312 DDUP:
      0005EB 1D 00 04         [ 2] 1313         SUBW X,#4
      0005EE 90 93            [ 1] 1314         LDW Y,X
      0005F0 90 EE 06         [ 2] 1315         LDW Y,(6,Y)
      0005F3 EF 02            [ 2] 1316         LDW (2,X),Y
      0005F5 90 93            [ 1] 1317         LDW Y,X
      0005F7 90 EE 04         [ 2] 1318         LDW Y,(4,Y)
      0005FA FF               [ 2] 1319         LDW (X),Y
      0005FB 81               [ 4] 1320         RET
                                   1321 
                                   1322 ;       +       ( w w -- sum )
                                   1323 ;       Add top two items.
      0005FC 05 E6                 1324         .word      LINK
                           0005FE  1325 LINK = . 
      0005FE 01                    1326         .byte      1
      0005FF 2B                    1327         .ascii     "+"
      000600                       1328 PLUS:
      000600 90 93            [ 1] 1329         LDW Y,X
      000602 90 FE            [ 2] 1330         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      000604 90 BF 22         [ 2] 1331         LDW YTEMP,Y
      000607 1C 00 02         [ 2] 1332         ADDW X,#2
      00060A 90 93            [ 1] 1333         LDW Y,X
      00060C 90 FE            [ 2] 1334         LDW Y,(Y)
      00060E 72 B9 00 22      [ 2] 1335         ADDW Y,YTEMP
      000612 FF               [ 2] 1336         LDW (X),Y
      000613 81               [ 4] 1337         RET
                                   1338 
                                   1339 ;       NOT     ( w -- w )
                                   1340 ;       One's complement of tos.
      000614 05 FE                 1341         .word      LINK
                           000616  1342 LINK = . 
      000616 03                    1343         .byte      3
      000617 4E 4F 54              1344         .ascii     "NOT"
      00061A                       1345 INVER:
      00061A 90 93            [ 1] 1346         LDW Y,X
      00061C 90 FE            [ 2] 1347         LDW Y,(Y)
      00061E 90 53            [ 2] 1348         CPLW Y
      000620 FF               [ 2] 1349         LDW (X),Y
      000621 81               [ 4] 1350         RET
                                   1351 
                                   1352 ;       NEGATE  ( n -- -n )
                                   1353 ;       Two's complement of tos.
      000622 06 16                 1354         .word      LINK
                           000624  1355 LINK = . 
      000624 06                    1356         .byte      6
      000625 4E 45 47 41 54 45     1357         .ascii     "NEGATE"
      00062B                       1358 NEGAT:
      00062B 90 93            [ 1] 1359         LDW Y,X
      00062D 90 FE            [ 2] 1360         LDW Y,(Y)
      00062F 90 50            [ 2] 1361         NEGW Y
      000631 FF               [ 2] 1362         LDW (X),Y
      000632 81               [ 4] 1363         RET
                                   1364 
                                   1365 ;       DNEGATE ( d -- -d )
                                   1366 ;       Two's complement of top double.
      000633 06 24                 1367         .word      LINK
                           000635  1368 LINK = . 
      000635 07                    1369         .byte      7
      000636 44 4E 45 47 41 54 45  1370         .ascii     "DNEGATE"
      00063D                       1371 DNEGA:
      00063D 90 93            [ 1] 1372         LDW Y,X
      00063F 90 FE            [ 2] 1373 	LDW Y,(Y)
      000641 90 53            [ 2] 1374         CPLW Y     
      000643 90 BF 22         [ 2] 1375 	LDW YTEMP,Y
      000646 90 93            [ 1] 1376         LDW Y,X
      000648 90 EE 02         [ 2] 1377         LDW Y,(2,Y)
      00064B 90 53            [ 2] 1378         CPLW Y
      00064D 90 5C            [ 2] 1379         INCW Y
      00064F EF 02            [ 2] 1380         LDW (2,X),Y
      000651 90 BE 22         [ 2] 1381         LDW Y,YTEMP
      000654 24 02            [ 1] 1382         JRNC DN1 
      000656 90 5C            [ 2] 1383         INCW Y
      000658 FF               [ 2] 1384 DN1:    LDW (X),Y
      000659 81               [ 4] 1385         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1386 
                                   1387 ;       -       ( n1 n2 -- n1-n2 )
                                   1388 ;       Subtraction.
      00065A 06 35                 1389         .word      LINK
                           00065C  1390 LINK = . 
      00065C 01                    1391         .byte      1
      00065D 2D                    1392         .ascii     "-"
      00065E                       1393 SUBB:
      00065E 90 93            [ 1] 1394         LDW Y,X
      000660 90 FE            [ 2] 1395         LDW Y,(Y)
      000662 90 BF 22         [ 2] 1396         LDW YTEMP,Y
      000665 1C 00 02         [ 2] 1397         ADDW X,#2
      000668 90 93            [ 1] 1398         LDW Y,X
      00066A 90 FE            [ 2] 1399         LDW Y,(Y)
      00066C 72 B2 00 22      [ 2] 1400         SUBW Y,YTEMP
      000670 FF               [ 2] 1401         LDW (X),Y
      000671 81               [ 4] 1402         RET
                                   1403 
                                   1404 ;       ABS     ( n -- n )
                                   1405 ;       Return  absolute value of n.
      000672 06 5C                 1406         .word      LINK
                           000674  1407 LINK = . 
      000674 03                    1408         .byte      3
      000675 41 42 53              1409         .ascii     "ABS"
      000678                       1410 ABSS:
      000678 90 93            [ 1] 1411         LDW Y,X
      00067A 90 FE            [ 2] 1412 	LDW Y,(Y)
      00067C 2A 03            [ 1] 1413         JRPL     AB1     ;negate:
      00067E 90 50            [ 2] 1414         NEGW     Y     ;else negate hi byte
      000680 FF               [ 2] 1415         LDW (X),Y
      000681 81               [ 4] 1416 AB1:    RET
                                   1417 
                                   1418 ;       =       ( w w -- t )
                                   1419 ;       Return true if top two are =al.
      000682 06 74                 1420         .word      LINK
                           000684  1421 LINK = . 
      000684 01                    1422         .byte      1
      000685 3D                    1423         .ascii     "="
      000686                       1424 EQUAL:
      000686 A6 FF            [ 1] 1425         LD A,#0xFF  ;true
      000688 90 93            [ 1] 1426         LDW Y,X    ;D = n2
      00068A 90 FE            [ 2] 1427         LDW Y,(Y)
      00068C 90 BF 22         [ 2] 1428         LDW YTEMP,Y
      00068F 1C 00 02         [ 2] 1429         ADDW X,#2
      000692 90 93            [ 1] 1430         LDW Y,X
      000694 90 FE            [ 2] 1431         LDW Y,(Y)
      000696 90 B3 22         [ 2] 1432         CPW Y,YTEMP     ;if n2 <> n1
      000699 27 01            [ 1] 1433         JREQ     EQ1
      00069B 4F               [ 1] 1434         CLR A
      00069C F7               [ 1] 1435 EQ1:    LD (X),A
      00069D E7 01            [ 1] 1436         LD (1,X),A
      00069F 81               [ 4] 1437 	RET     
                                   1438 
                                   1439 ;       U<      ( u u -- t )
                                   1440 ;       Unsigned compare of top two items.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      0006A0 06 84                 1441         .word      LINK
                           0006A2  1442 LINK = . 
      0006A2 02                    1443         .byte      2
      0006A3 55 3C                 1444         .ascii     "U<"
      0006A5                       1445 ULESS:
      0006A5 A6 FF            [ 1] 1446         LD A,#0xFF  ;true
      0006A7 90 93            [ 1] 1447         LDW Y,X    ;D = n2
      0006A9 90 FE            [ 2] 1448         LDW Y,(Y)
      0006AB 90 BF 22         [ 2] 1449         LDW YTEMP,Y
      0006AE 1C 00 02         [ 2] 1450         ADDW X,#2
      0006B1 90 93            [ 1] 1451         LDW Y,X
      0006B3 90 FE            [ 2] 1452         LDW Y,(Y)
      0006B5 90 B3 22         [ 2] 1453         CPW Y,YTEMP     ;if n2 <> n1
      0006B8 25 01            [ 1] 1454         JRULT     ULES1
      0006BA 4F               [ 1] 1455         CLR A
      0006BB F7               [ 1] 1456 ULES1:  LD (X),A
      0006BC E7 01            [ 1] 1457         LD (1,X),A
      0006BE 81               [ 4] 1458 	RET     
                                   1459 
                                   1460 ;       <       ( n1 n2 -- t )
                                   1461 ;       Signed compare of top two items.
      0006BF 06 A2                 1462         .word      LINK
                           0006C1  1463 LINK = . 
      0006C1 01                    1464         .byte      1
      0006C2 3C                    1465         .ascii     "<"
      0006C3                       1466 LESS:
      0006C3 A6 FF            [ 1] 1467         LD A,#0xFF  ;true
      0006C5 90 93            [ 1] 1468         LDW Y,X    ;D = n2
      0006C7 90 FE            [ 2] 1469         LDW Y,(Y)
      0006C9 90 BF 22         [ 2] 1470         LDW YTEMP,Y
      0006CC 1C 00 02         [ 2] 1471         ADDW X,#2
      0006CF 90 93            [ 1] 1472         LDW Y,X
      0006D1 90 FE            [ 2] 1473         LDW Y,(Y)
      0006D3 90 B3 22         [ 2] 1474         CPW Y,YTEMP     ;if n2 <> n1
      0006D6 2F 01            [ 1] 1475         JRSLT     LT1
      0006D8 4F               [ 1] 1476         CLR A
      0006D9 F7               [ 1] 1477 LT1:    LD (X),A
      0006DA E7 01            [ 1] 1478         LD (1,X),A
      0006DC 81               [ 4] 1479 	RET     
                                   1480 
                                   1481 ;       MAX     ( n n -- n )
                                   1482 ;       Return greater of two top items.
      0006DD 06 C1                 1483         .word      LINK
                           0006DF  1484 LINK = . 
      0006DF 03                    1485         .byte      3
      0006E0 4D 41 58              1486         .ascii     "MAX"
      0006E3                       1487 MAX:
      0006E3 90 93            [ 1] 1488         LDW Y,X    ;D = n2
      0006E5 90 EE 02         [ 2] 1489         LDW Y,(2,Y)
      0006E8 90 BF 22         [ 2] 1490         LDW YTEMP,Y
      0006EB 90 93            [ 1] 1491         LDW Y,X
      0006ED 90 FE            [ 2] 1492         LDW Y,(Y)
      0006EF 90 B3 22         [ 2] 1493         CPW Y,YTEMP     ;if n2 <> n1
      0006F2 2F 02            [ 1] 1494         JRSLT     MAX1
      0006F4 EF 02            [ 2] 1495         LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



      0006F6 1C 00 02         [ 2] 1496 MAX1:   ADDW X,#2
      0006F9 81               [ 4] 1497 	RET     
                                   1498 
                                   1499 ;       MIN     ( n n -- n )
                                   1500 ;       Return smaller of top two items.
      0006FA 06 DF                 1501         .word      LINK
                           0006FC  1502 LINK = . 
      0006FC 03                    1503         .byte      3
      0006FD 4D 49 4E              1504         .ascii     "MIN"
      000700                       1505 MIN:
      000700 90 93            [ 1] 1506         LDW Y,X    ;D = n2
      000702 90 EE 02         [ 2] 1507         LDW Y,(2,Y)
      000705 90 BF 22         [ 2] 1508         LDW YTEMP,Y
      000708 90 93            [ 1] 1509         LDW Y,X
      00070A 90 FE            [ 2] 1510         LDW Y,(Y)
      00070C 90 B3 22         [ 2] 1511         CPW Y,YTEMP     ;if n2 <> n1
      00070F 2C 02            [ 1] 1512         JRSGT     MIN1
      000711 EF 02            [ 2] 1513         LDW (2,X),Y
      000713 1C 00 02         [ 2] 1514 MIN1:	ADDW X,#2
      000716 81               [ 4] 1515 	RET     
                                   1516 
                                   1517 ;       WITHIN  ( u ul uh -- t )
                                   1518 ;       Return true if u is within
                                   1519 ;       range of ul and uh. ( ul <= u < uh )
      000717 06 FC                 1520         .word      LINK
                           000719  1521 LINK = . 
      000719 06                    1522         .byte      6
      00071A 57 49 54 48 49 4E     1523         .ascii     "WITHIN"
      000720                       1524 WITHI:
      000720 CD 04 42         [ 4] 1525         CALL     OVER
      000723 CD 06 5E         [ 4] 1526         CALL     SUBB
      000726 CD 03 E1         [ 4] 1527         CALL     TOR
      000729 CD 06 5E         [ 4] 1528         CALL     SUBB
      00072C CD 03 C2         [ 4] 1529         CALL     RFROM
      00072F CC 06 A5         [ 2] 1530         JP     ULESS
                                   1531 
                                   1532 ;; Divide
                                   1533 
                                   1534 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1535 ;       Unsigned divide of a double by a
                                   1536 ;       single. Return mod and quotient.
      000732 07 19                 1537         .word      LINK
                           000734  1538 LINK = . 
      000734 06                    1539         .byte      6
      000735 55 4D 2F 4D 4F 44     1540         .ascii     "UM/MOD"
      00073B                       1541 UMMOD:
      00073B BF 20            [ 2] 1542 	LDW XTEMP,X	; save stack pointer
      00073D FE               [ 2] 1543 	LDW X,(X)	; un
      00073E BF 22            [ 2] 1544 	LDW YTEMP,X     ; save un
      000740 90 BE 20         [ 2] 1545 	LDW Y,XTEMP	; stack pointer
      000743 90 EE 04         [ 2] 1546 	LDW Y,(4,Y)     ; Y=udl
      000746 BE 20            [ 2] 1547 	LDW X,XTEMP
      000748 EE 02            [ 2] 1548 	LDW X,(2,X)	; X=udh
      00074A B3 22            [ 2] 1549 	CPW X,YTEMP
      00074C 23 0F            [ 2] 1550 	JRULE MMSM1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      00074E BE 20            [ 2] 1551 	LDW X,XTEMP
      000750 1C 00 02         [ 2] 1552 	ADDW X,#2	; pop off 1 level
      000753 90 AE FF FF      [ 2] 1553 	LDW Y,#0xFFFF
      000757 FF               [ 2] 1554 	LDW (X),Y
      000758 90 5F            [ 1] 1555 	CLRW Y
      00075A EF 02            [ 2] 1556 	LDW (2,X),Y
      00075C 81               [ 4] 1557 	RET
      00075D                       1558 MMSM1:
                           000001  1559 .if  PICATOUT_MOD 
                                   1560 ; take advantage of divw x,y when udh==0
      00075D 5D               [ 2] 1561         tnzw x  ; is udh==0?
      00075E 26 11            [ 1] 1562         jrne MMSM2 
      000760 93               [ 1] 1563         ldw x,y    ;udl 
      000761 90 BE 22         [ 2] 1564         ldw y,YTEMP ; divisor 
      000764 65               [ 2] 1565         divw x,y 
      000765 89               [ 2] 1566         pushw x     ; quotient 
      000766 BE 20            [ 2] 1567         ldw x,XTEMP 
      000768 1C 00 02         [ 2] 1568         addw x,#CELLL 
      00076B EF 02            [ 2] 1569         ldw (2,x),y  ; ur
      00076D 90 85            [ 2] 1570         popw y 
      00076F FF               [ 2] 1571         ldw (x),y ; uq 
      000770 81               [ 4] 1572         ret 
      000771                       1573 MMSM2:        
                                   1574 .endif 
      000771 A6 11            [ 1] 1575 	LD A,#17	; loop count
      000773                       1576 MMSM3:
      000773 B3 22            [ 2] 1577 	CPW X,YTEMP	; compare udh to un
      000775 25 04            [ 1] 1578 	JRULT MMSM4	; can't subtract
      000777 72 B0 00 22      [ 2] 1579 	SUBW X,YTEMP	; can subtract
      00077B                       1580 MMSM4:
      00077B 8C               [ 1] 1581 	CCF	; quotient bit
      00077C 90 59            [ 2] 1582 	RLCW Y	; rotate into quotient
      00077E 59               [ 2] 1583 	RLCW X	; rotate into remainder
      00077F 4A               [ 1] 1584 	DEC A	; repeat
      000780 22 F1            [ 1] 1585 	JRUGT MMSM3
      000782 57               [ 2] 1586 	SRAW X
      000783 BF 22            [ 2] 1587 	LDW YTEMP,X	; done, save remainder
      000785 BE 20            [ 2] 1588 	LDW X,XTEMP
      000787 1C 00 02         [ 2] 1589 	ADDW X,#2	; drop
      00078A FF               [ 2] 1590 	LDW (X),Y
      00078B 90 BE 22         [ 2] 1591 	LDW Y,YTEMP	; save quotient
      00078E EF 02            [ 2] 1592 	LDW (2,X),Y
      000790 81               [ 4] 1593 	RET
                                   1594 	
                                   1595 ;       M/MOD   ( d n -- r q )
                                   1596 ;       Signed floored divide of double by
                                   1597 ;       single. Return mod and quotient.
      000791 07 34                 1598         .word      LINK
                           000793  1599 LINK = . 
      000793 05                    1600         .byte      5
      000794 4D 2F 4D 4F 44        1601         .ascii     "M/MOD"
      000799                       1602 MSMOD:  
      000799 CD 04 18         [ 4] 1603         CALL	DUPP
      00079C CD 04 51         [ 4] 1604         CALL	ZLESS
      00079F CD 04 18         [ 4] 1605         CALL	DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0007A2 CD 03 E1         [ 4] 1606         CALL	TOR
      0007A5 CD 03 1C         [ 4] 1607         CALL	QBRAN
      0007A8 07 B6                 1608         .word	MMOD1
      0007AA CD 06 2B         [ 4] 1609         CALL	NEGAT
      0007AD CD 03 E1         [ 4] 1610         CALL	TOR
      0007B0 CD 06 3D         [ 4] 1611         CALL	DNEGA
      0007B3 CD 03 C2         [ 4] 1612         CALL	RFROM
      0007B6 CD 03 E1         [ 4] 1613 MMOD1:	CALL	TOR
      0007B9 CD 04 18         [ 4] 1614         CALL	DUPP
      0007BC CD 04 51         [ 4] 1615         CALL	ZLESS
      0007BF CD 03 1C         [ 4] 1616         CALL	QBRAN
      0007C2 07 CA                 1617         .word	MMOD2
      0007C4 CD 03 D5         [ 4] 1618         CALL	RAT
      0007C7 CD 06 00         [ 4] 1619         CALL	PLUS
      0007CA CD 03 C2         [ 4] 1620 MMOD2:	CALL	RFROM
      0007CD CD 07 3B         [ 4] 1621         CALL	UMMOD
      0007D0 CD 03 C2         [ 4] 1622         CALL	RFROM
      0007D3 CD 03 1C         [ 4] 1623         CALL	QBRAN
      0007D6 07 E1                 1624         .word	MMOD3
      0007D8 CD 04 28         [ 4] 1625         CALL	SWAPP
      0007DB CD 06 2B         [ 4] 1626         CALL	NEGAT
      0007DE CD 04 28         [ 4] 1627         CALL	SWAPP
      0007E1 81               [ 4] 1628 MMOD3:	RET
                                   1629 
                                   1630 ;       /MOD    ( n n -- r q )
                                   1631 ;       Signed divide. Return mod and quotient.
      0007E2 07 93                 1632         .word      LINK
                           0007E4  1633 LINK = . 
      0007E4 04                    1634         .byte      4
      0007E5 2F 4D 4F 44           1635         .ascii     "/MOD"
      0007E9                       1636 SLMOD:
      0007E9 CD 04 42         [ 4] 1637         CALL	OVER
      0007EC CD 04 51         [ 4] 1638         CALL	ZLESS
      0007EF CD 04 28         [ 4] 1639         CALL	SWAPP
      0007F2 CC 07 99         [ 2] 1640         JP	MSMOD
                                   1641 
                                   1642 ;       MOD     ( n n -- r )
                                   1643 ;       Signed divide. Return mod only.
      0007F5 07 E4                 1644         .word      LINK
                           0007F7  1645 LINK = . 
      0007F7 03                    1646         .byte      3
      0007F8 4D 4F 44              1647         .ascii     "MOD"
      0007FB                       1648 MODD:
      0007FB CD 07 E9         [ 4] 1649 	CALL	SLMOD
      0007FE CC 04 0E         [ 2] 1650 	JP	DROP
                                   1651 
                                   1652 ;       /       ( n n -- q )
                                   1653 ;       Signed divide. Return quotient only.
      000801 07 F7                 1654         .word      LINK
                           000803  1655 LINK = . 
      000803 01                    1656         .byte      1
      000804 2F                    1657         .ascii     "/"
      000805                       1658 SLASH:
      000805 CD 07 E9         [ 4] 1659         CALL	SLMOD
      000808 CD 04 28         [ 4] 1660         CALL	SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      00080B CC 04 0E         [ 2] 1661         JP	DROP
                                   1662 
                                   1663 ;; Multiply
                                   1664 
                                   1665 ;       UM*     ( u u -- ud )
                                   1666 ;       Unsigned multiply. Return double product.
      00080E 08 03                 1667         .word      LINK
                           000810  1668 LINK = . 
      000810 03                    1669         .byte      3
      000811 55 4D 2A              1670         .ascii     "UM*"
      000814                       1671 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1672 .if PICATOUT_MOD 
                                   1673 ; take advantage of SP addressing modes
                                   1674 ; these PRODx in RAM are not required
                                   1675 ; the product is kept on stack as local variable 
                                   1676         ;; bytes offset on data stack 
                           000002  1677         da=2 
                           000003  1678         db=3 
                           000000  1679         dc=0 
                           000001  1680         dd=1 
                                   1681         ;; product bytes offset on return stack 
                           000001  1682         UD1=1  ; ud bits 31..24
                           000002  1683         UD2=2  ; ud bits 23..16
                           000003  1684         UD3=3  ; ud bits 15..8 
                           000004  1685         UD4=4  ; ud bits 7..0 
                                   1686         ;; local variable for product set to zero   
      000814 90 5F            [ 1] 1687         clrw y 
      000816 90 89            [ 2] 1688         pushw y  ; bits 15..0
      000818 90 89            [ 2] 1689         pushw y  ; bits 31..16 
      00081A E6 03            [ 1] 1690         ld a,(db,x) ; b 
      00081C 90 97            [ 1] 1691         ld yl,a 
      00081E E6 01            [ 1] 1692         ld a,(dd,x)   ; d
      000820 90 42            [ 4] 1693         mul y,a    ; b*d  
      000822 17 03            [ 2] 1694         ldw (UD3,sp),y ; lowest weight product 
      000824 E6 03            [ 1] 1695         ld a,(db,x)
      000826 90 97            [ 1] 1696         ld yl,a 
      000828 E6 00            [ 1] 1697         ld a,(dc,x)
      00082A 90 42            [ 4] 1698         mul y,a  ; b*c 
                                   1699         ;;; do the partial sum 
      00082C 72 F9 02         [ 2] 1700         addw y,(UD2,sp)
      00082F 4F               [ 1] 1701         clr a 
      000830 49               [ 1] 1702         rlc a
      000831 6B 01            [ 1] 1703         ld (UD1,sp),a 
      000833 17 02            [ 2] 1704         ldw (UD2,sp),y 
      000835 E6 02            [ 1] 1705         ld a,(da,x)
      000837 90 97            [ 1] 1706         ld yl,a 
      000839 E6 01            [ 1] 1707         ld a,(dd,x)
      00083B 90 42            [ 4] 1708         mul y,a   ; a*d 
                                   1709         ;; do partial sum 
      00083D 72 F9 02         [ 2] 1710         addw y,(UD2,sp)
      000840 4F               [ 1] 1711         clr a 
      000841 19 01            [ 1] 1712         adc a,(UD1,sp)
      000843 6B 01            [ 1] 1713         ld (UD1,sp),a  
      000845 17 02            [ 2] 1714         ldw (UD2,sp),y 
      000847 E6 02            [ 1] 1715         ld a,(da,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      000849 90 97            [ 1] 1716         ld yl,a 
      00084B E6 00            [ 1] 1717         ld a,(dc,x)
      00084D 90 42            [ 4] 1718         mul y,a  ;  a*c highest weight product 
                                   1719         ;;; do partial sum 
      00084F 72 F9 01         [ 2] 1720         addw y,(UD1,sp)
      000852 FF               [ 2] 1721         ldw (x),y  ; udh 
      000853 16 03            [ 2] 1722         ldw y,(UD3,sp)
      000855 EF 02            [ 2] 1723         ldw (2,x),y  ; udl  
      000857 5B 04            [ 2] 1724         addw sp,#4 ; drop local variable 
      000859 81               [ 4] 1725         ret  
                           000000  1726 .else
                                   1727 	LD A,(2,X)	; b
                                   1728 	LD YL,A
                                   1729 	LD A,(X)	; d
                                   1730 	MUL Y,A
                                   1731 	LDW PROD1,Y
                                   1732 	LD A,(3,X)	; a
                                   1733 	LD YL,A
                                   1734 	LD A,(X)	; d
                                   1735 	MUL Y,A
                                   1736 	LDW PROD2,Y
                                   1737 	LD A,(2,X)	; b
                                   1738 	LD YL,A
                                   1739 	LD A,(1,X)	; c
                                   1740 	MUL Y,A
                                   1741 	LDW PROD3,Y
                                   1742 	LD A,(3,X)	; a
                                   1743 	LD YL,A
                                   1744 	LD A,(1,X)	; c
                                   1745 	MUL Y,A	; least signifiant product
                                   1746 	CLR A
                                   1747 	RRWA Y
                                   1748 	LD (3,X),A	; store least significant byte
                                   1749 	ADDW Y,PROD3
                                   1750 	CLR A
                                   1751 	ADC A,#0	; save carry
                                   1752 	LD CARRY,A
                                   1753 	ADDW Y,PROD2
                                   1754 	LD A,CARRY
                                   1755 	ADC A,#0	; add 2nd carry
                                   1756 	LD CARRY,A
                                   1757 	CLR A
                                   1758 	RRWA Y
                                   1759 	LD (2,X),A	; 2nd product byte
                                   1760 	ADDW Y,PROD1
                                   1761 	RRWA Y
                                   1762 	LD (1,X),A	; 3rd product byte
                                   1763 	RRWA Y  	; 4th product byte now in A
                                   1764 	ADC A,CARRY	; fill in carry bits
                                   1765 	LD (X),A
                                   1766 	RET
                                   1767 .endif 
                                   1768 
                                   1769 
                                   1770 ;       *       ( n n -- n )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1771 ;       Signed multiply. Return single product.
      00085A 08 10                 1772         .word      LINK
                           00085C  1773 LINK = . 
      00085C 01                    1774         .byte      1
      00085D 2A                    1775         .ascii     "*"
      00085E                       1776 STAR:
      00085E CD 08 14         [ 4] 1777 	CALL	UMSTA
      000861 CC 04 0E         [ 2] 1778 	JP	DROP
                                   1779 
                                   1780 ;       M*      ( n n -- d )
                                   1781 ;       Signed multiply. Return double product.
      000864 08 5C                 1782         .word      LINK
                           000866  1783 LINK = . 
      000866 02                    1784         .byte      2
      000867 4D 2A                 1785         .ascii     "M*"
      000869                       1786 MSTAR:      
      000869 CD 05 EB         [ 4] 1787         CALL	DDUP
      00086C CD 04 8D         [ 4] 1788         CALL	XORR
      00086F CD 04 51         [ 4] 1789         CALL	ZLESS
      000872 CD 03 E1         [ 4] 1790         CALL	TOR
      000875 CD 06 78         [ 4] 1791         CALL	ABSS
      000878 CD 04 28         [ 4] 1792         CALL	SWAPP
      00087B CD 06 78         [ 4] 1793         CALL	ABSS
      00087E CD 08 14         [ 4] 1794         CALL	UMSTA
      000881 CD 03 C2         [ 4] 1795         CALL	RFROM
      000884 CD 03 1C         [ 4] 1796         CALL	QBRAN
      000887 08 8C                 1797         .word	MSTA1
      000889 CD 06 3D         [ 4] 1798         CALL	DNEGA
      00088C 81               [ 4] 1799 MSTA1:	RET
                                   1800 
                                   1801 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1802 ;       Multiply n1 and n2, then divide
                                   1803 ;       by n3. Return mod and quotient.
      00088D 08 66                 1804         .word      LINK
                           00088F  1805 LINK = . 
      00088F 05                    1806         .byte      5
      000890 2A 2F 4D 4F 44        1807         .ascii     "*/MOD"
      000895                       1808 SSMOD:
      000895 CD 03 E1         [ 4] 1809         CALL     TOR
      000898 CD 08 69         [ 4] 1810         CALL     MSTAR
      00089B CD 03 C2         [ 4] 1811         CALL     RFROM
      00089E CC 07 99         [ 2] 1812         JP     MSMOD
                                   1813 
                                   1814 ;       */      ( n1 n2 n3 -- q )
                                   1815 ;       Multiply n1 by n2, then divide
                                   1816 ;       by n3. Return quotient only.
      0008A1 08 8F                 1817         .word      LINK
                           0008A3  1818 LINK = . 
      0008A3 02                    1819         .byte      2
      0008A4 2A 2F                 1820         .ascii     "*/"
      0008A6                       1821 STASL:
      0008A6 CD 08 95         [ 4] 1822         CALL	SSMOD
      0008A9 CD 04 28         [ 4] 1823         CALL	SWAPP
      0008AC CC 04 0E         [ 2] 1824         JP	DROP
                                   1825 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1826 ;; Miscellaneous
                                   1827 
                                   1828 ;       CELL+   ( a -- a )
                                   1829 ;       Add cell size in byte to address.
      0008AF 08 A3                 1830         .word      LINK
                           0008B1  1831 LINK = . 
      0008B1 02                    1832         .byte       2
      0008B2 32 2B                 1833         .ascii     "2+"
      0008B4                       1834 CELLP:
      0008B4 90 93            [ 1] 1835         LDW Y,X
      0008B6 90 FE            [ 2] 1836 	LDW Y,(Y)
      0008B8 72 A9 00 02      [ 2] 1837         ADDW Y,#CELLL 
      0008BC FF               [ 2] 1838         LDW (X),Y
      0008BD 81               [ 4] 1839         RET
                                   1840 
                                   1841 ;       CELL-   ( a -- a )
                                   1842 ;       Subtract 2 from address.
      0008BE 08 B1                 1843         .word      LINK
                           0008C0  1844 LINK = . 
      0008C0 02                    1845         .byte       2
      0008C1 32 2D                 1846         .ascii     "2-"
      0008C3                       1847 CELLM:
      0008C3 90 93            [ 1] 1848         LDW Y,X
      0008C5 90 FE            [ 2] 1849 	LDW Y,(Y)
      0008C7 72 A2 00 02      [ 2] 1850         SUBW Y,#CELLL
      0008CB FF               [ 2] 1851         LDW (X),Y
      0008CC 81               [ 4] 1852         RET
                                   1853 
                                   1854 ;       CELLS   ( n -- n )
                                   1855 ;       Multiply tos by 2.
      0008CD 08 C0                 1856         .word      LINK
                           0008CF  1857 LINK = . 
      0008CF 02                    1858         .byte       2
      0008D0 32 2A                 1859         .ascii     "2*"
      0008D2                       1860 CELLS:
      0008D2 90 93            [ 1] 1861         LDW Y,X
      0008D4 90 FE            [ 2] 1862 	LDW Y,(Y)
      0008D6 90 58            [ 2] 1863         SLAW Y
      0008D8 FF               [ 2] 1864         LDW (X),Y
      0008D9 81               [ 4] 1865         RET
                                   1866 
                                   1867 ;       1+      ( a -- a )
                                   1868 ;       Add cell size in byte to address.
      0008DA 08 CF                 1869         .word      LINK
                           0008DC  1870 LINK = . 
      0008DC 02                    1871         .byte      2
      0008DD 31 2B                 1872         .ascii     "1+"
      0008DF                       1873 ONEP:
      0008DF 90 93            [ 1] 1874         LDW Y,X
      0008E1 90 FE            [ 2] 1875 	LDW Y,(Y)
      0008E3 90 5C            [ 2] 1876         INCW Y
      0008E5 FF               [ 2] 1877         LDW (X),Y
      0008E6 81               [ 4] 1878         RET
                                   1879 
                                   1880 ;       1-      ( a -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



                                   1881 ;       Subtract 2 from address.
      0008E7 08 DC                 1882         .word      LINK
                           0008E9  1883 LINK = . 
      0008E9 02                    1884         .byte      2
      0008EA 31 2D                 1885         .ascii     "1-"
      0008EC                       1886 ONEM:
      0008EC 90 93            [ 1] 1887         LDW Y,X
      0008EE 90 FE            [ 2] 1888 	LDW Y,(Y)
      0008F0 90 5A            [ 2] 1889         DECW Y
      0008F2 FF               [ 2] 1890         LDW (X),Y
      0008F3 81               [ 4] 1891         RET
                                   1892 
                                   1893 ;  shift left n times 
                                   1894 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0008F4 08 E9                 1895         .word LINK 
                           0008F6  1896         LINK=.
      0008F6 06                    1897         .byte 6 
      0008F7 4C 53 48 49 46 54     1898         .ascii "LSHIFT"
      0008FD                       1899 LSHIFT:
      0008FD E6 01            [ 1] 1900         ld a,(1,x)
      0008FF 1C 00 02         [ 2] 1901         addw x,#CELLL 
      000902 90 93            [ 1] 1902         ldw y,x 
      000904 90 FE            [ 2] 1903         ldw y,(y)
      000906                       1904 LSHIFT1:
      000906 4D               [ 1] 1905         tnz a 
      000907 27 05            [ 1] 1906         jreq LSHIFT4 
      000909 90 58            [ 2] 1907         sllw y 
      00090B 4A               [ 1] 1908         dec a 
      00090C 20 F8            [ 2] 1909         jra LSHIFT1 
      00090E                       1910 LSHIFT4:
      00090E FF               [ 2] 1911         ldw (x),y 
      00090F 81               [ 4] 1912         ret 
                                   1913 
                                   1914 ; shift right n times                 
                                   1915 ; RSHIFT (n1 n2 -- n1>>n2 )
      000910 08 F6                 1916         .word LINK 
                           000912  1917         LINK=.
      000912 06                    1918         .byte 6
      000913 52 53 48 49 46 54     1919         .ascii "RSHIFT"
      000919                       1920 RSHIFT:
      000919 E6 01            [ 1] 1921         ld a,(1,x)
      00091B 1C 00 02         [ 2] 1922         addw x,#CELLL 
      00091E 90 93            [ 1] 1923         ldw y,x 
      000920 90 FE            [ 2] 1924         ldw y,(y)
      000922                       1925 RSHIFT1:
      000922 4D               [ 1] 1926         tnz a 
      000923 27 05            [ 1] 1927         jreq RSHIFT4 
      000925 90 54            [ 2] 1928         srlw y 
      000927 4A               [ 1] 1929         dec a 
      000928 20 F8            [ 2] 1930         jra RSHIFT1 
      00092A                       1931 RSHIFT4:
      00092A FF               [ 2] 1932         ldw (x),y 
      00092B 81               [ 4] 1933         ret 
                                   1934 
                                   1935 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



                                   1936 ;       2/      ( n -- n )
                                   1937 ;       Multiply tos by 2.
      00092C 09 12                 1938         .word      LINK
                           00092E  1939 LINK = . 
      00092E 02                    1940         .byte      2
      00092F 32 2F                 1941         .ascii     "2/"
      000931                       1942 TWOSL:
      000931 90 93            [ 1] 1943         LDW Y,X
      000933 90 FE            [ 2] 1944 	LDW Y,(Y)
      000935 90 57            [ 2] 1945         SRAW Y
      000937 FF               [ 2] 1946         LDW (X),Y
      000938 81               [ 4] 1947         RET
                                   1948 
                                   1949 ;       BL      ( -- 32 )
                                   1950 ;       Return 32,  blank character.
      000939 09 2E                 1951         .word      LINK
                           00093B  1952 LINK = . 
      00093B 02                    1953         .byte      2
      00093C 42 4C                 1954         .ascii     "BL"
      00093E                       1955 BLANK:
      00093E 1D 00 02         [ 2] 1956         SUBW X,#2
      000941 90 AE 00 20      [ 2] 1957 	LDW Y,#32
      000945 FF               [ 2] 1958         LDW (X),Y
      000946 81               [ 4] 1959         RET
                                   1960 
                                   1961 ;         0     ( -- 0)
                                   1962 ;         Return 0.
      000947 09 3B                 1963         .word      LINK
                           000949  1964 LINK = . 
      000949 01                    1965         .byte       1
      00094A 30                    1966         .ascii     "0"
      00094B                       1967 ZERO:
      00094B 1D 00 02         [ 2] 1968         SUBW X,#2
      00094E 90 5F            [ 1] 1969 	CLRW Y
      000950 FF               [ 2] 1970         LDW (X),Y
      000951 81               [ 4] 1971         RET
                                   1972 
                                   1973 ;         1     ( -- 1)
                                   1974 ;         Return 1.
      000952 09 49                 1975         .word      LINK
                           000954  1976 LINK = . 
      000954 01                    1977         .byte       1
      000955 31                    1978         .ascii     "1"
      000956                       1979 ONE:
      000956 1D 00 02         [ 2] 1980         SUBW X,#2
      000959 90 AE 00 01      [ 2] 1981 	LDW Y,#1
      00095D FF               [ 2] 1982         LDW (X),Y
      00095E 81               [ 4] 1983         RET
                                   1984 
                                   1985 ;         -1    ( -- -1)
                                   1986 ;         Return 32,  blank character.
      00095F 09 54                 1987         .word      LINK
                           000961  1988 LINK = . 
      000961 02                    1989         .byte       2
      000962 2D 31                 1990         .ascii     "-1"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000964                       1991 MONE:
      000964 1D 00 02         [ 2] 1992         SUBW X,#2
      000967 90 AE FF FF      [ 2] 1993 	LDW Y,#0xFFFF
      00096B FF               [ 2] 1994         LDW (X),Y
      00096C 81               [ 4] 1995         RET
                                   1996 
                                   1997 ;       >CHAR   ( c -- c )
                                   1998 ;       Filter non-printing characters.
      00096D 09 61                 1999         .word      LINK
                           00096F  2000 LINK = . 
      00096F 05                    2001         .byte      5
      000970 3E 43 48 41 52        2002         .ascii     ">CHAR"
      000975                       2003 TCHAR:
                           000001  2004 .if CONVERT_TO_CODE
      000975 E6 01            [ 1] 2005         ld a,(1,x)
      000977 A1 20            [ 1] 2006         cp a,#32  
      000979 2B 05            [ 1] 2007         jrmi 1$ 
      00097B A1 7F            [ 1] 2008         cp a,#127 
      00097D 2A 01            [ 1] 2009         jrpl 1$ 
      00097F 81               [ 4] 2010         ret 
      000980 A6 5F            [ 1] 2011 1$:     ld a,#'_ 
      000982 E7 01            [ 1] 2012         ld (1,x),a 
      000984 81               [ 4] 2013         ret 
                           000000  2014 .else
                                   2015         CALL     DOLIT
                                   2016         .word       0x7F
                                   2017         CALL     ANDD
                                   2018         CALL     DUPP    ;mask msb
                                   2019         CALL     DOLIT
                                   2020         .word      127
                                   2021         CALL     BLANK
                                   2022         CALL     WITHI   ;check for printable
                                   2023         CALL     QBRAN
                                   2024         .word    TCHA1
                                   2025         CALL     DROP
                                   2026         CALL     DOLIT
                                   2027         .word     0x5F		; "_"     ;replace non-printables
                                   2028 .endif 
      000985 81               [ 4] 2029 TCHA1:  RET
                                   2030 
                                   2031 ;       DEPTH   ( -- n )
                                   2032 ;       Return  depth of  data stack.
      000986 09 6F                 2033         .word      LINK
                           000988  2034 LINK = . 
      000988 05                    2035         .byte      5
      000989 44 45 50 54 48        2036         .ascii     "DEPTH"
      00098E                       2037 DEPTH: 
      00098E 90 BE 28         [ 2] 2038         LDW Y,SP0    ;save data stack ptr
      000991 BF 20            [ 2] 2039 	LDW XTEMP,X
      000993 72 B2 00 20      [ 2] 2040         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000997 90 57            [ 2] 2041         SRAW Y    ;Y = #stack items
                           000001  2042 .if PICATOUT_MOD
                                   2043 ; why ? 
                                   2044 ;      	DECW Y
                                   2045 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000999 1D 00 02         [ 2] 2046 	SUBW X,#2
      00099C FF               [ 2] 2047         LDW (X),Y     ; if neg, underflow
      00099D 81               [ 4] 2048         RET
                                   2049 
                                   2050 ;       PICK    ( ... +n -- ... w )
                                   2051 ;       Copy  nth stack item to tos.
      00099E 09 88                 2052         .word      LINK
                           0009A0  2053 LINK = . 
      0009A0 04                    2054         .byte      4
      0009A1 50 49 43 4B           2055         .ascii     "PICK"
      0009A5                       2056 PICK:
      0009A5 90 93            [ 1] 2057         LDW Y,X   ;D = n1
      0009A7 90 FE            [ 2] 2058         LDW Y,(Y)
      0009A9 90 5C            [ 2] 2059         INCW Y ; PICATOUT_MOD for standard compliance 
      0009AB 90 58            [ 2] 2060         SLAW Y
      0009AD BF 20            [ 2] 2061         LDW XTEMP,X
      0009AF 72 B9 00 20      [ 2] 2062         ADDW Y,XTEMP
      0009B3 90 FE            [ 2] 2063         LDW Y,(Y)
      0009B5 FF               [ 2] 2064         LDW (X),Y
      0009B6 81               [ 4] 2065         RET
                                   2066 
                                   2067 ;; Memory access
                                   2068 
                                   2069 ;       +!      ( n a -- )
                                   2070 ;       Add n to  contents at address a.
      0009B7 09 A0                 2071         .word      LINK
                           0009B9  2072 LINK = . 
      0009B9 02                    2073         .byte      2
      0009BA 2B 21                 2074         .ascii     "+!"
      0009BC                       2075 PSTOR:
                           000001  2076 .if CONVERT_TO_CODE
      0009BC 90 93            [ 1] 2077         ldw y,x 
      0009BE 90 FE            [ 2] 2078         ldw y,(y)
      0009C0 90 BF 22         [ 2] 2079         ldw YTEMP,y  ; address
      0009C3 90 FE            [ 2] 2080         ldw y,(y)  
      0009C5 90 89            [ 2] 2081         pushw y  ; value at address 
      0009C7 90 93            [ 1] 2082         ldw y,x 
      0009C9 90 EE 02         [ 2] 2083         ldw y,(2,y) ; n 
      0009CC 72 F9 01         [ 2] 2084         addw y,(1,sp) ; n+value
      0009CF 91 CF 22         [ 5] 2085         ldw [YTEMP],y ;  a!
      0009D2 90 85            [ 2] 2086         popw y    ;drop local var
      0009D4 1C 00 04         [ 2] 2087         addw x,#4 ; DDROP 
      0009D7 81               [ 4] 2088         ret 
                           000000  2089 .else
                                   2090         CALL	SWAPP
                                   2091         CALL	OVER
                                   2092         CALL	AT
                                   2093         CALL	PLUS
                                   2094         CALL	SWAPP
                                   2095         JP	STORE
                                   2096 .endif 
                                   2097 
                                   2098 ;       2!      ( d a -- )
                                   2099 ;       Store  double integer to address a.
      0009D8 09 B9                 2100         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           0009DA  2101 LINK = . 
      0009DA 02                    2102         .byte      2
      0009DB 32 21                 2103         .ascii     "2!"
      0009DD                       2104 DSTOR:
                           000001  2105 .if CONVERT_TO_CODE
      0009DD 90 93            [ 1] 2106         ldw y,x 
      0009DF 90 FE            [ 2] 2107         ldw y,(y)
      0009E1 90 BF 22         [ 2] 2108         ldw YTEMP,y ; address 
      0009E4 1C 00 02         [ 2] 2109         addw x,#CELLL ; drop a 
      0009E7 90 93            [ 1] 2110         ldw y,x 
      0009E9 90 FE            [ 2] 2111         ldw y,(y) ; hi word 
      0009EB 89               [ 2] 2112         pushw x 
      0009EC EE 02            [ 2] 2113         ldw x,(2,x) ; lo word 
      0009EE 91 CF 22         [ 5] 2114         ldw [YTEMP],y
      0009F1 90 93            [ 1] 2115         ldw y,x 
      0009F3 AE 00 02         [ 2] 2116         ldw x,#2 
      0009F6 92 DF 22         [ 5] 2117         ldw ([YTEMP],x),y 
      0009F9 85               [ 2] 2118         popw x 
      0009FA 1C 00 04         [ 2] 2119         addw x,#4 ; DDROP 
      0009FD 81               [ 4] 2120         ret 
                           000000  2121 .else
                                   2122         CALL	SWAPP
                                   2123         CALL	OVER
                                   2124         CALL	STORE
                                   2125         CALL	CELLP
                                   2126         JP	STORE
                                   2127 .endif 
                                   2128 ;       2@      ( a -- d )
                                   2129 ;       Fetch double integer from address a.
      0009FE 09 DA                 2130         .word      LINK
                           000A00  2131 LINK = . 
      000A00 02                    2132         .byte      2
      000A01 32 40                 2133         .ascii     "2@"
      000A03                       2134 DAT:
                           000001  2135 .if CONVERT_TO_CODE
      000A03 90 93            [ 1] 2136         ldw y,x 
      000A05 90 FE            [ 2] 2137         ldw y,(y) ;address 
      000A07 90 BF 22         [ 2] 2138         ldw YTEMP,y 
      000A0A 1D 00 02         [ 2] 2139         subw x,#CELLL ; space for udh 
      000A0D 91 CE 22         [ 5] 2140         ldw y,[YTEMP] ; udh 
      000A10 FF               [ 2] 2141         ldw (x),y 
      000A11 90 AE 00 02      [ 2] 2142         ldw y,#2
      000A15 91 DE 22         [ 5] 2143         ldw y,([YTEMP],y) ; udl 
      000A18 EF 02            [ 2] 2144         ldw (2,x),y
      000A1A 81               [ 4] 2145         ret 
                           000000  2146 .else 
                                   2147         CALL	DUPP
                                   2148         CALL	CELLP
                                   2149         CALL	AT
                                   2150         CALL	SWAPP
                                   2151         JP	AT
                                   2152 .endif 
                                   2153 
                                   2154 ;       COUNT   ( b -- b +n )
                                   2155 ;       Return count byte of a string
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



                                   2156 ;       and add 1 to byte address.
      000A1B 0A 00                 2157         .word      LINK
                           000A1D  2158 LINK = . 
      000A1D 05                    2159         .byte      5
      000A1E 43 4F 55 4E 54        2160         .ascii     "COUNT"
      000A23                       2161 COUNT:
                           000001  2162 .if CONVERT_TO_CODE
      000A23 90 93            [ 1] 2163         ldw y,x 
      000A25 90 FE            [ 2] 2164         ldw y,(y) ; address 
      000A27 90 F6            [ 1] 2165         ld a,(y)  ; count 
      000A29 90 5C            [ 2] 2166         incw y 
      000A2B FF               [ 2] 2167         ldw (x),y 
      000A2C 1D 00 02         [ 2] 2168         subw x,#CELLL 
      000A2F E7 01            [ 1] 2169         ld (1,x),a 
      000A31 7F               [ 1] 2170         clr (x)
      000A32 81               [ 4] 2171         ret 
                           000000  2172 .else 
                                   2173         CALL     DUPP
                                   2174         CALL     ONEP
                                   2175         CALL     SWAPP
                                   2176         JP     CAT
                                   2177 .endif 
                                   2178 
                                   2179 ;       HERE    ( -- a )
                                   2180 ;       Return  top of  variables
      000A33 0A 1D                 2181         .word      LINK
                           000A35  2182 LINK = . 
      000A35 04                    2183         .byte      4
      000A36 48 45 52 45           2184         .ascii     "HERE"
      000A3A                       2185 HERE:
                           000001  2186 .if CONVERT_TO_CODE
      000A3A 90 AE 00 16      [ 2] 2187       	ldw y,#UVP 
      000A3E 90 FE            [ 2] 2188         ldw y,(y)
      000A40 1D 00 02         [ 2] 2189         subw x,#CELLL 
      000A43 FF               [ 2] 2190         ldw (x),y 
      000A44 81               [ 4] 2191         ret 
                           000000  2192 .else
                                   2193         CALL     VPP
                                   2194         JP     AT
                                   2195 .endif 
                                   2196 
                                   2197 ;       PAD     ( -- a )
                                   2198 ;       Return address of text buffer
                                   2199 ;       above  code dictionary.
      000A45 0A 35                 2200         .word      LINK
                           000A47  2201 LINK = . 
      000A47 03                    2202         .byte      3
      000A48 50 41 44              2203         .ascii     "PAD"
      000A4B                       2204 PAD:
      000A4B CD 0A 3A         [ 4] 2205         CALL     HERE
      000A4E CD 02 E9         [ 4] 2206         CALL     DOLIT
      000A51 00 50                 2207         .word      80
      000A53 CC 06 00         [ 2] 2208         JP     PLUS
                                   2209 
                                   2210 ;       TIB     ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



                                   2211 ;       Return address of terminal input buffer.
      000A56 0A 47                 2212         .word      LINK
                           000A58  2213 LINK = . 
      000A58 03                    2214         .byte      3
      000A59 54 49 42              2215         .ascii     "TIB"
      000A5C                       2216 TIB:
      000A5C CD 05 03         [ 4] 2217         CALL     NTIB
      000A5F CD 08 B4         [ 4] 2218         CALL     CELLP
      000A62 CC 03 71         [ 2] 2219         JP     AT
                                   2220 
                                   2221 ;       @EXECUTE        ( a -- )
                                   2222 ;       Execute vector stored in address a.
      000A65 0A 58                 2223         .word      LINK
                           000A67  2224 LINK = . 
      000A67 08                    2225         .byte      8
      000A68 40 45 58 45 43 55 54  2226         .ascii     "@EXECUTE"
             45
      000A70                       2227 ATEXE:
      000A70 CD 03 71         [ 4] 2228         CALL     AT
      000A73 CD 05 AF         [ 4] 2229         CALL     QDUP    ;?address or zero
      000A76 CD 03 1C         [ 4] 2230         CALL     QBRAN
      000A79 0A 7E                 2231         .word      EXE1
      000A7B CD 03 43         [ 4] 2232         CALL     EXECU   ;execute if non-zero
      000A7E 81               [ 4] 2233 EXE1:   RET     ;do nothing if zero
                                   2234 
                                   2235 ;       CMOVE   ( b1 b2 u -- )
                                   2236 ;       Copy u bytes from b1 to b2.
      000A7F 0A 67                 2237         .word      LINK
                           000A81  2238 LINK = . 
      000A81 05                    2239         .byte      5
      000A82 43 4D 4F 56 45        2240         .ascii     "CMOVE"
      000A87                       2241 CMOVE:
      000A87 CD 03 E1         [ 4] 2242         CALL	TOR
      000A8A CD 03 33         [ 4] 2243         CALL	BRAN
      000A8D 0A A7                 2244         .word	CMOV2
      000A8F CD 03 E1         [ 4] 2245 CMOV1:	CALL	TOR
      000A92 CD 04 18         [ 4] 2246         CALL	DUPP
      000A95 CD 03 8F         [ 4] 2247         CALL	CAT
      000A98 CD 03 D5         [ 4] 2248         CALL	RAT
      000A9B CD 03 7E         [ 4] 2249         CALL	CSTOR
      000A9E CD 08 DF         [ 4] 2250         CALL	ONEP
      000AA1 CD 03 C2         [ 4] 2251         CALL	RFROM
      000AA4 CD 08 DF         [ 4] 2252         CALL	ONEP
      000AA7 CD 02 FD         [ 4] 2253 CMOV2:	CALL	DONXT
      000AAA 0A 8F                 2254         .word	CMOV1
      000AAC CC 05 E0         [ 2] 2255         JP	DDROP
                                   2256 
                                   2257 ;       FILL    ( b u c -- )
                                   2258 ;       Fill u bytes of character c
                                   2259 ;       to area beginning at b.
      000AAF 0A 81                 2260         .word       LINK
                           000AB1  2261 LINK = . 
      000AB1 04                    2262         .byte       4
      000AB2 46 49 4C 4C           2263         .ascii     "FILL"
      000AB6                       2264 FILL:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                           000001  2265 .if CONVERT_TO_CODE
      000AB6 90 93            [ 1] 2266         ldw y,x 
      000AB8 90 E6 01         [ 1] 2267         ld a,(1,y) ; c 
      000ABB 1C 00 02         [ 2] 2268         addw x,#CELLL ; drop c 
      000ABE 90 93            [ 1] 2269         ldw y,x 
      000AC0 90 FE            [ 2] 2270         ldw y,(y) ; count
      000AC2 90 89            [ 2] 2271         pushw y 
      000AC4 1C 00 02         [ 2] 2272         addw x,#CELLL ; drop u 
      000AC7 90 93            [ 1] 2273         ldw y,x 
      000AC9 1C 00 02         [ 2] 2274         addw x,#CELLL ; drop b 
      000ACC 90 FE            [ 2] 2275         ldw y,(y) ; address
      000ACE 90 BF 22         [ 2] 2276         ldw YTEMP,y
      000AD1 90 85            [ 2] 2277         popw y ; count 
      000AD3                       2278 FILL1:  
      000AD3 92 C7 22         [ 4] 2279         ld [YTEMP],a 
      000AD6 3C 23            [ 1] 2280         inc YTEMP+1
      000AD8 24 02            [ 1] 2281         jrnc FILL2 
      000ADA 3C 22            [ 1] 2282         inc YTEMP
      000ADC                       2283 FILL2: 
      000ADC 90 5A            [ 2] 2284         decw y ; count 
      000ADE 26 F3            [ 1] 2285         jrne FILL1  
      000AE0 81               [ 4] 2286         ret 
                           000000  2287 .else 
                                   2288         CALL	SWAPP
                                   2289         CALL	TOR
                                   2290         CALL	SWAPP
                                   2291         CALL	BRAN
                                   2292         .word	FILL2
                                   2293 FILL1:	CALL	DDUP
                                   2294         CALL	CSTOR
                                   2295         CALL	ONEP
                                   2296 FILL2:	CALL	DONXT
                                   2297         .word	FILL1
                                   2298         JP	DDROP
                                   2299 .endif
                                   2300 
                                   2301 ;       ERASE   ( b u -- )
                                   2302 ;       Erase u bytes beginning at b.
      000AE1 0A B1                 2303         .word      LINK
                           000AE3  2304 LINK = . 
      000AE3 05                    2305         .byte      5
      000AE4 45 52 41 53 45        2306         .ascii     "ERASE"
      000AE9                       2307 ERASE:
                           000001  2308 .if CONVERT_TO_CODE
      000AE9 90 5F            [ 1] 2309         clrw y 
      000AEB 1D 00 02         [ 2] 2310         subw x,#CELLL 
      000AEE FF               [ 2] 2311         ldw (x),y 
      000AEF CC 0A B6         [ 2] 2312         jp FILL 
                           000000  2313 .else 
                                   2314         CALL     ZERO
                                   2315         JP     FILL
                                   2316 .endif 
                                   2317 ;       PACK0x   ( b u a -- a )
                                   2318 ;       Build a counted string with
                                   2319 ;       u characters from b. Null fill.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000AF2 0A E3                 2320         .word      LINK
                           000AF4  2321 LINK = . 
      000AF4 05                    2322         .byte      5
      000AF5 50 41 43 4B 30 58     2323         .ascii     "PACK0X"
      000AFB                       2324 PACKS:
      000AFB CD 04 18         [ 4] 2325         CALL     DUPP
      000AFE CD 03 E1         [ 4] 2326         CALL     TOR     ;strings only on cell boundary
      000B01 CD 05 EB         [ 4] 2327         CALL     DDUP
      000B04 CD 03 7E         [ 4] 2328         CALL     CSTOR
      000B07 CD 08 DF         [ 4] 2329         CALL     ONEP ;save count
      000B0A CD 04 28         [ 4] 2330         CALL     SWAPP
      000B0D CD 0A 87         [ 4] 2331         CALL     CMOVE
      000B10 CD 03 C2         [ 4] 2332         CALL     RFROM
      000B13 81               [ 4] 2333         RET
                                   2334 
                                   2335 ;; Numeric output, single precision
                                   2336 
                                   2337 ;       DIGIT   ( u -- c )
                                   2338 ;       Convert digit u to a character.
      000B14 0A F4                 2339         .word      LINK
                           000B16  2340 LINK = . 
      000B16 05                    2341         .byte      5
      000B17 44 49 47 49 54        2342         .ascii     "DIGIT"
      000B1C                       2343 DIGIT:
      000B1C CD 02 E9         [ 4] 2344         CALL	DOLIT
      000B1F 00 09                 2345         .word	9
      000B21 CD 04 42         [ 4] 2346         CALL	OVER
      000B24 CD 06 C3         [ 4] 2347         CALL	LESS
      000B27 CD 02 E9         [ 4] 2348         CALL	DOLIT
      000B2A 00 07                 2349         .word	7
      000B2C CD 04 64         [ 4] 2350         CALL	ANDD
      000B2F CD 06 00         [ 4] 2351         CALL	PLUS
      000B32 CD 02 E9         [ 4] 2352         CALL	DOLIT
      000B35 00 30                 2353         .word	48	;'0'
      000B37 CC 06 00         [ 2] 2354         JP	PLUS
                                   2355 
                                   2356 ;       EXTRACT ( n base -- n c )
                                   2357 ;       Extract least significant digit from n.
      000B3A 0B 16                 2358         .word      LINK
                           000B3C  2359 LINK = . 
      000B3C 07                    2360         .byte      7
      000B3D 45 58 54 52 41 43 54  2361         .ascii     "EXTRACT"
      000B44                       2362 EXTRC:
      000B44 CD 09 4B         [ 4] 2363         CALL     ZERO
      000B47 CD 04 28         [ 4] 2364         CALL     SWAPP
      000B4A CD 07 3B         [ 4] 2365         CALL     UMMOD
      000B4D CD 04 28         [ 4] 2366         CALL     SWAPP
      000B50 CC 0B 1C         [ 2] 2367         JP     DIGIT
                                   2368 
                                   2369 ;       <#      ( -- )
                                   2370 ;       Initiate  numeric output process.
      000B53 0B 3C                 2371         .word      LINK
                           000B55  2372 LINK = . 
      000B55 02                    2373         .byte      2
      000B56 3C 23                 2374         .ascii     "<#"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B58                       2375 BDIGS:
      000B58 CD 0A 4B         [ 4] 2376         CALL     PAD
      000B5B CD 05 45         [ 4] 2377         CALL     HLD
      000B5E CC 03 5A         [ 2] 2378         JP     STORE
                                   2379 
                                   2380 ;       HOLD    ( c -- )
                                   2381 ;       Insert a character into output string.
      000B61 0B 55                 2382         .word      LINK
                           000B63  2383 LINK = . 
      000B63 04                    2384         .byte      4
      000B64 48 4F 4C 44           2385         .ascii     "HOLD"
      000B68                       2386 HOLD:
      000B68 CD 05 45         [ 4] 2387         CALL     HLD
      000B6B CD 03 71         [ 4] 2388         CALL     AT
      000B6E CD 08 EC         [ 4] 2389         CALL     ONEM
      000B71 CD 04 18         [ 4] 2390         CALL     DUPP
      000B74 CD 05 45         [ 4] 2391         CALL     HLD
      000B77 CD 03 5A         [ 4] 2392         CALL     STORE
      000B7A CC 03 7E         [ 2] 2393         JP     CSTOR
                                   2394 
                                   2395 ;       #       ( u -- u )
                                   2396 ;       Extract one digit from u and
                                   2397 ;       append digit to output string.
      000B7D 0B 63                 2398         .word      LINK
                           000B7F  2399 LINK = . 
      000B7F 01                    2400         .byte      1
      000B80 23                    2401         .ascii     "#"
      000B81                       2402 DIG:
      000B81 CD 04 D5         [ 4] 2403         CALL     BASE
      000B84 CD 03 71         [ 4] 2404         CALL     AT
      000B87 CD 0B 44         [ 4] 2405         CALL     EXTRC
      000B8A CC 0B 68         [ 2] 2406         JP     HOLD
                                   2407 
                                   2408 ;       #S      ( u -- 0 )
                                   2409 ;       Convert u until all digits
                                   2410 ;       are added to output string.
      000B8D 0B 7F                 2411         .word      LINK
                           000B8F  2412 LINK = . 
      000B8F 02                    2413         .byte      2
      000B90 23 53                 2414         .ascii     "#S"
      000B92                       2415 DIGS:
      000B92 CD 0B 81         [ 4] 2416 DIGS1:  CALL     DIG
      000B95 CD 04 18         [ 4] 2417         CALL     DUPP
      000B98 CD 03 1C         [ 4] 2418         CALL     QBRAN
      000B9B 0B 9F                 2419         .word      DIGS2
      000B9D 20 F3            [ 2] 2420         JRA     DIGS1
      000B9F 81               [ 4] 2421 DIGS2:  RET
                                   2422 
                                   2423 ;       SIGN    ( n -- )
                                   2424 ;       Add a minus sign to
                                   2425 ;       numeric output string.
      000BA0 0B 8F                 2426         .word      LINK
                           000BA2  2427 LINK = . 
      000BA2 04                    2428         .byte      4
      000BA3 53 49 47 4E           2429         .ascii     "SIGN"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000BA7                       2430 SIGN:
      000BA7 CD 04 51         [ 4] 2431         CALL     ZLESS
      000BAA CD 03 1C         [ 4] 2432         CALL     QBRAN
      000BAD 0B B7                 2433         .word      SIGN1
      000BAF CD 02 E9         [ 4] 2434         CALL     DOLIT
      000BB2 00 2D                 2435         .word      45	;"-"
      000BB4 CC 0B 68         [ 2] 2436         JP     HOLD
      000BB7 81               [ 4] 2437 SIGN1:  RET
                                   2438 
                                   2439 ;       #>      ( w -- b u )
                                   2440 ;       Prepare output string.
      000BB8 0B A2                 2441         .word      LINK
                           000BBA  2442 LINK = . 
      000BBA 02                    2443         .byte      2
      000BBB 23 3E                 2444         .ascii     "#>"
      000BBD                       2445 EDIGS:
      000BBD CD 04 0E         [ 4] 2446         CALL     DROP
      000BC0 CD 05 45         [ 4] 2447         CALL     HLD
      000BC3 CD 03 71         [ 4] 2448         CALL     AT
      000BC6 CD 0A 4B         [ 4] 2449         CALL     PAD
      000BC9 CD 04 42         [ 4] 2450         CALL     OVER
      000BCC CC 06 5E         [ 2] 2451         JP     SUBB
                                   2452 
                                   2453 ;       str     ( w -- b u )
                                   2454 ;       Convert a signed integer
                                   2455 ;       to a numeric string.
      000BCF 0B BA                 2456         .word      LINK
                           000BD1  2457 LINK = . 
      000BD1 03                    2458         .byte      3
      000BD2 53 54 52              2459         .ascii     "STR"
      000BD5                       2460 STR:
      000BD5 CD 04 18         [ 4] 2461         CALL     DUPP
      000BD8 CD 03 E1         [ 4] 2462         CALL     TOR
      000BDB CD 06 78         [ 4] 2463         CALL     ABSS
      000BDE CD 0B 58         [ 4] 2464         CALL     BDIGS
      000BE1 CD 0B 92         [ 4] 2465         CALL     DIGS
      000BE4 CD 03 C2         [ 4] 2466         CALL     RFROM
      000BE7 CD 0B A7         [ 4] 2467         CALL     SIGN
      000BEA CC 0B BD         [ 2] 2468         JP     EDIGS
                                   2469 
                                   2470 ;       HEX     ( -- )
                                   2471 ;       Use radix 16 as base for
                                   2472 ;       numeric conversions.
      000BED 0B D1                 2473         .word      LINK
                           000BEF  2474 LINK = . 
      000BEF 03                    2475         .byte      3
      000BF0 48 45 58              2476         .ascii     "HEX"
      000BF3                       2477 HEX:
      000BF3 CD 02 E9         [ 4] 2478         CALL     DOLIT
      000BF6 00 10                 2479         .word      16
      000BF8 CD 04 D5         [ 4] 2480         CALL     BASE
      000BFB CC 03 5A         [ 2] 2481         JP     STORE
                                   2482 
                                   2483 ;       DECIMAL ( -- )
                                   2484 ;       Use radix 10 as base
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2485 ;       for numeric conversions.
      000BFE 0B EF                 2486         .word      LINK
                           000C00  2487 LINK = . 
      000C00 07                    2488         .byte      7
      000C01 44 45 43 49 4D 41 4C  2489         .ascii     "DECIMAL"
      000C08                       2490 DECIM:
      000C08 CD 02 E9         [ 4] 2491         CALL     DOLIT
      000C0B 00 0A                 2492         .word      10
      000C0D CD 04 D5         [ 4] 2493         CALL     BASE
      000C10 CC 03 5A         [ 2] 2494         JP     STORE
                                   2495 
                                   2496 ;; Numeric input, single precision
                                   2497 
                                   2498 ;       DIGIT?  ( c base -- u t )
                                   2499 ;       Convert a character to its numeric
                                   2500 ;       value. A flag indicates success.
      000C13 0C 00                 2501         .word      LINK
                           000C15  2502 LINK = . 
      000C15 06                    2503         .byte       6
      000C16 44 49 47 49 54 3F     2504         .ascii     "DIGIT?"
      000C1C                       2505 DIGTQ:
      000C1C CD 03 E1         [ 4] 2506         CALL     TOR
      000C1F CD 02 E9         [ 4] 2507         CALL     DOLIT
      000C22 00 30                 2508         .word     48	; "0"
      000C24 CD 06 5E         [ 4] 2509         CALL     SUBB
      000C27 CD 02 E9         [ 4] 2510         CALL     DOLIT
      000C2A 00 09                 2511         .word      9
      000C2C CD 04 42         [ 4] 2512         CALL     OVER
      000C2F CD 06 C3         [ 4] 2513         CALL     LESS
      000C32 CD 03 1C         [ 4] 2514         CALL     QBRAN
      000C35 0C 4D                 2515         .word      DGTQ1
      000C37 CD 02 E9         [ 4] 2516         CALL     DOLIT
      000C3A 00 07                 2517         .word      7
      000C3C CD 06 5E         [ 4] 2518         CALL     SUBB
      000C3F CD 04 18         [ 4] 2519         CALL     DUPP
      000C42 CD 02 E9         [ 4] 2520         CALL     DOLIT
      000C45 00 0A                 2521         .word      10
      000C47 CD 06 C3         [ 4] 2522         CALL     LESS
      000C4A CD 04 78         [ 4] 2523         CALL     ORR
      000C4D CD 04 18         [ 4] 2524 DGTQ1:  CALL     DUPP
      000C50 CD 03 C2         [ 4] 2525         CALL     RFROM
      000C53 CC 06 A5         [ 2] 2526         JP     ULESS
                                   2527 
                                   2528 ;       NUMBER? ( a -- n T | a F )
                                   2529 ;       Convert a number string to
                                   2530 ;       integer. Push a flag on tos.
      000C56 0C 15                 2531         .word      LINK
                           000C58  2532 LINK = . 
      000C58 07                    2533         .byte      7
      000C59 4E 55 4D 42 45 52 3F  2534         .ascii     "NUMBER?"
      000C60                       2535 NUMBQ:
      000C60 CD 04 D5         [ 4] 2536         CALL     BASE
      000C63 CD 03 71         [ 4] 2537         CALL     AT
      000C66 CD 03 E1         [ 4] 2538         CALL     TOR
      000C69 CD 09 4B         [ 4] 2539         CALL     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C6C CD 04 42         [ 4] 2540         CALL     OVER
      000C6F CD 0A 23         [ 4] 2541         CALL     COUNT
      000C72 CD 04 42         [ 4] 2542         CALL     OVER
      000C75 CD 03 8F         [ 4] 2543         CALL     CAT
      000C78 CD 02 E9         [ 4] 2544         CALL     DOLIT
      000C7B 00 24                 2545         .word     36	; "0x"
      000C7D CD 06 86         [ 4] 2546         CALL     EQUAL
      000C80 CD 03 1C         [ 4] 2547         CALL     QBRAN
      000C83 0C 94                 2548         .word      NUMQ1
      000C85 CD 0B F3         [ 4] 2549         CALL     HEX
      000C88 CD 04 28         [ 4] 2550         CALL     SWAPP
      000C8B CD 08 DF         [ 4] 2551         CALL     ONEP
      000C8E CD 04 28         [ 4] 2552         CALL     SWAPP
      000C91 CD 08 EC         [ 4] 2553         CALL     ONEM
      000C94 CD 04 42         [ 4] 2554 NUMQ1:  CALL     OVER
      000C97 CD 03 8F         [ 4] 2555         CALL     CAT
      000C9A CD 02 E9         [ 4] 2556         CALL     DOLIT
      000C9D 00 2D                 2557         .word     45	; "-"
      000C9F CD 06 86         [ 4] 2558         CALL     EQUAL
      000CA2 CD 03 E1         [ 4] 2559         CALL     TOR
      000CA5 CD 04 28         [ 4] 2560         CALL     SWAPP
      000CA8 CD 03 D5         [ 4] 2561         CALL     RAT
      000CAB CD 06 5E         [ 4] 2562         CALL     SUBB
      000CAE CD 04 28         [ 4] 2563         CALL     SWAPP
      000CB1 CD 03 D5         [ 4] 2564         CALL     RAT
      000CB4 CD 06 00         [ 4] 2565         CALL     PLUS
      000CB7 CD 05 AF         [ 4] 2566         CALL     QDUP
      000CBA CD 03 1C         [ 4] 2567         CALL     QBRAN
      000CBD 0D 1E                 2568         .word      NUMQ6
      000CBF CD 08 EC         [ 4] 2569         CALL     ONEM
      000CC2 CD 03 E1         [ 4] 2570         CALL     TOR
      000CC5 CD 04 18         [ 4] 2571 NUMQ2:  CALL     DUPP
      000CC8 CD 03 E1         [ 4] 2572         CALL     TOR
      000CCB CD 03 8F         [ 4] 2573         CALL     CAT
      000CCE CD 04 D5         [ 4] 2574         CALL     BASE
      000CD1 CD 03 71         [ 4] 2575         CALL     AT
      000CD4 CD 0C 1C         [ 4] 2576         CALL     DIGTQ
      000CD7 CD 03 1C         [ 4] 2577         CALL     QBRAN
      000CDA 0D 0C                 2578         .word      NUMQ4
      000CDC CD 04 28         [ 4] 2579         CALL     SWAPP
      000CDF CD 04 D5         [ 4] 2580         CALL     BASE
      000CE2 CD 03 71         [ 4] 2581         CALL     AT
      000CE5 CD 08 5E         [ 4] 2582         CALL     STAR
      000CE8 CD 06 00         [ 4] 2583         CALL     PLUS
      000CEB CD 03 C2         [ 4] 2584         CALL     RFROM
      000CEE CD 08 DF         [ 4] 2585         CALL     ONEP
      000CF1 CD 02 FD         [ 4] 2586         CALL     DONXT
      000CF4 0C C5                 2587         .word      NUMQ2
      000CF6 CD 03 D5         [ 4] 2588         CALL     RAT
      000CF9 CD 04 28         [ 4] 2589         CALL     SWAPP
      000CFC CD 04 0E         [ 4] 2590         CALL     DROP
      000CFF CD 03 1C         [ 4] 2591         CALL     QBRAN
      000D02 0D 07                 2592         .word      NUMQ3
      000D04 CD 06 2B         [ 4] 2593         CALL     NEGAT
      000D07 CD 04 28         [ 4] 2594 NUMQ3:  CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D0A 20 0F            [ 2] 2595         JRA     NUMQ5
      000D0C CD 03 C2         [ 4] 2596 NUMQ4:  CALL     RFROM
      000D0F CD 03 C2         [ 4] 2597         CALL     RFROM
      000D12 CD 05 E0         [ 4] 2598         CALL     DDROP
      000D15 CD 05 E0         [ 4] 2599         CALL     DDROP
      000D18 CD 09 4B         [ 4] 2600         CALL     ZERO
      000D1B CD 04 18         [ 4] 2601 NUMQ5:  CALL     DUPP
      000D1E CD 03 C2         [ 4] 2602 NUMQ6:  CALL     RFROM
      000D21 CD 05 E0         [ 4] 2603         CALL     DDROP
      000D24 CD 03 C2         [ 4] 2604         CALL     RFROM
      000D27 CD 04 D5         [ 4] 2605         CALL     BASE
      000D2A CC 03 5A         [ 2] 2606         JP     STORE
                                   2607 
                                   2608 ;; Basic I/O
                                   2609 
                                   2610 ;       KEY     ( -- c )
                                   2611 ;       Wait for and return an
                                   2612 ;       input character.
      000D2D 0C 58                 2613         .word      LINK
                           000D2F  2614 LINK = . 
      000D2F 03                    2615         .byte      3
      000D30 4B 45 59              2616         .ascii     "KEY"
      000D33                       2617 KEY:
                           000001  2618 .if CONVERT_TO_CODE
      000D33 72 0B 52 30 FB   [ 2] 2619         btjf UART1_SR,#UART_SR_RXNE,. 
      000D38 C6 52 31         [ 1] 2620         ld a,UART1_DR 
      000D3B 1D 00 02         [ 2] 2621         subw x,#CELLL 
      000D3E E7 01            [ 1] 2622         ld (1,x),a 
      000D40 7F               [ 1] 2623         clr (x)
      000D41 81               [ 4] 2624         ret 
                           000000  2625 .else 
                                   2626 KEY1:   CALL     QKEY
                                   2627         CALL     QBRAN
                                   2628         .word      KEY1
                                   2629         RET
                                   2630 .endif 
                                   2631 
                                   2632 ;       NUF?    ( -- t )
                                   2633 ;       Return false if no input,
                                   2634 ;       else pause and if CR return true.
      000D42 0D 2F                 2635         .word      LINK
                           000D44  2636 LINK = . 
      000D44 04                    2637         .byte      4
      000D45 4E 55 46 3F           2638         .ascii     "NUF?"
      000D49                       2639 NUFQ:
      000D49 CD 02 B5         [ 4] 2640         CALL     QKEY
      000D4C CD 04 18         [ 4] 2641         CALL     DUPP
      000D4F CD 03 1C         [ 4] 2642         CALL     QBRAN
      000D52 0D 62                 2643         .word    NUFQ1
      000D54 CD 05 E0         [ 4] 2644         CALL     DDROP
      000D57 CD 0D 33         [ 4] 2645         CALL     KEY
      000D5A CD 02 E9         [ 4] 2646         CALL     DOLIT
      000D5D 00 0D                 2647         .word      CRR
      000D5F CC 06 86         [ 2] 2648         JP     EQUAL
      000D62 81               [ 4] 2649 NUFQ1:  RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                                   2650 
                                   2651 ;       SPACE   ( -- )
                                   2652 ;       Send  blank character to
                                   2653 ;       output device.
      000D63 0D 44                 2654         .word      LINK
                           000D65  2655 LINK = . 
      000D65 05                    2656         .byte      5
      000D66 53 50 41 43 45        2657         .ascii     "SPACE"
      000D6B                       2658 SPACE:
      000D6B CD 09 3E         [ 4] 2659         CALL     BLANK
      000D6E CC 02 D3         [ 2] 2660         JP     EMIT
                                   2661 
                                   2662 ;       SPACES  ( +n -- )
                                   2663 ;       Send n spaces to output device.
      000D71 0D 65                 2664         .word      LINK
                           000D73  2665 LINK = . 
      000D73 06                    2666         .byte      6
      000D74 53 50 41 43 45 53     2667         .ascii     "SPACES"
      000D7A                       2668 SPACS:
      000D7A CD 09 4B         [ 4] 2669         CALL     ZERO
      000D7D CD 06 E3         [ 4] 2670         CALL     MAX
      000D80 CD 03 E1         [ 4] 2671         CALL     TOR
      000D83 20 03            [ 2] 2672         JRA      CHAR2
      000D85 CD 0D 6B         [ 4] 2673 CHAR1:  CALL     SPACE
      000D88 CD 02 FD         [ 4] 2674 CHAR2:  CALL     DONXT
      000D8B 0D 85                 2675         .word    CHAR1
      000D8D 81               [ 4] 2676         RET
                                   2677 
                                   2678 ;       TYPE    ( b u -- )
                                   2679 ;       Output u characters from b.
      000D8E 0D 73                 2680         .word      LINK
                           000D90  2681 LINK = . 
      000D90 04                    2682         .byte      4
      000D91 54 59 50 45           2683         .ascii     "TYPE"
      000D95                       2684 TYPES:
      000D95 CD 03 E1         [ 4] 2685         CALL     TOR
      000D98 20 0C            [ 2] 2686         JRA     TYPE2
      000D9A CD 04 18         [ 4] 2687 TYPE1:  CALL     DUPP
      000D9D CD 03 8F         [ 4] 2688         CALL     CAT
      000DA0 CD 02 D3         [ 4] 2689         CALL     EMIT
      000DA3 CD 08 DF         [ 4] 2690         CALL     ONEP
      000DA6 CD 02 FD         [ 4] 2691 TYPE2:  CALL     DONXT
      000DA9 0D 9A                 2692         .word      TYPE1
      000DAB CC 04 0E         [ 2] 2693         JP     DROP
                                   2694 
                                   2695 ;       CR      ( -- )
                                   2696 ;       Output a carriage return
                                   2697 ;       and a line feed.
      000DAE 0D 90                 2698         .word      LINK
                           000DB0  2699 LINK = . 
      000DB0 02                    2700         .byte      2
      000DB1 43 52                 2701         .ascii     "CR"
      000DB3                       2702 CR:
      000DB3 CD 02 E9         [ 4] 2703         CALL     DOLIT
      000DB6 00 0D                 2704         .word      CRR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DB8 CD 02 D3         [ 4] 2705         CALL     EMIT
      000DBB CD 02 E9         [ 4] 2706         CALL     DOLIT
      000DBE 00 0A                 2707         .word      LF
      000DC0 CC 02 D3         [ 2] 2708         JP     EMIT
                                   2709 
                                   2710 ;       do$     ( -- a )
                                   2711 ;       Return  address of a compiled
                                   2712 ;       string.
      000DC3 0D B0                 2713         .word      LINK
                           000DC5  2714 LINK = . 
      000DC5 43                    2715 	.byte      COMPO+3
      000DC6 44 4F 24              2716         .ascii     "DO$"
      000DC9                       2717 DOSTR:
      000DC9 CD 03 C2         [ 4] 2718         CALL     RFROM
      000DCC CD 03 D5         [ 4] 2719         CALL     RAT
      000DCF CD 03 C2         [ 4] 2720         CALL     RFROM
      000DD2 CD 0A 23         [ 4] 2721         CALL     COUNT
      000DD5 CD 06 00         [ 4] 2722         CALL     PLUS
      000DD8 CD 03 E1         [ 4] 2723         CALL     TOR
      000DDB CD 04 28         [ 4] 2724         CALL     SWAPP
      000DDE CD 03 E1         [ 4] 2725         CALL     TOR
      000DE1 81               [ 4] 2726         RET
                                   2727 
                                   2728 ;       $"|     ( -- a )
                                   2729 ;       Run time routine compiled by $".
                                   2730 ;       Return address of a compiled string.
      000DE2 0D C5                 2731         .word      LINK
                           000DE4  2732 LINK = . 
      000DE4 43                    2733 	.byte      COMPO+3
      000DE5 24 22 7C              2734         .byte     '$','"','|'
      000DE8                       2735 STRQP:
      000DE8 CD 0D C9         [ 4] 2736         CALL     DOSTR
      000DEB 81               [ 4] 2737         RET
                                   2738 
                                   2739 ;       ."|     ( -- )
                                   2740 ;       Run time routine of ." .
                                   2741 ;       Output a compiled string.
      000DEC 0D E4                 2742         .word      LINK
                           000DEE  2743 LINK = . 
      000DEE 43                    2744 	.byte      COMPO+3
      000DEF 2E 22 7C              2745         .byte     '.','"','|'
      000DF2                       2746 DOTQP:
      000DF2 CD 0D C9         [ 4] 2747         CALL     DOSTR
      000DF5 CD 0A 23         [ 4] 2748         CALL     COUNT
      000DF8 CC 0D 95         [ 2] 2749         JP     TYPES
                                   2750 
                                   2751 ;       .R      ( n +n -- )
                                   2752 ;       Display an integer in a field
                                   2753 ;       of n columns, right justified.
      000DFB 0D EE                 2754         .word      LINK
                           000DFD  2755 LINK = . 
      000DFD 02                    2756         .byte      2
      000DFE 2E 52                 2757         .ascii     ".R"
      000E00                       2758 DOTR:
      000E00 CD 03 E1         [ 4] 2759         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E03 CD 0B D5         [ 4] 2760         CALL     STR
      000E06 CD 03 C2         [ 4] 2761         CALL     RFROM
      000E09 CD 04 42         [ 4] 2762         CALL     OVER
      000E0C CD 06 5E         [ 4] 2763         CALL     SUBB
      000E0F CD 0D 7A         [ 4] 2764         CALL     SPACS
      000E12 CC 0D 95         [ 2] 2765         JP     TYPES
                                   2766 
                                   2767 ;       U.R     ( u +n -- )
                                   2768 ;       Display an unsigned integer
                                   2769 ;       in n column, right justified.
      000E15 0D FD                 2770         .word      LINK
                           000E17  2771 LINK = . 
      000E17 03                    2772         .byte      3
      000E18 55 2E 52              2773         .ascii     "U.R"
      000E1B                       2774 UDOTR:
      000E1B CD 03 E1         [ 4] 2775         CALL     TOR
      000E1E CD 0B 58         [ 4] 2776         CALL     BDIGS
      000E21 CD 0B 92         [ 4] 2777         CALL     DIGS
      000E24 CD 0B BD         [ 4] 2778         CALL     EDIGS
      000E27 CD 03 C2         [ 4] 2779         CALL     RFROM
      000E2A CD 04 42         [ 4] 2780         CALL     OVER
      000E2D CD 06 5E         [ 4] 2781         CALL     SUBB
      000E30 CD 0D 7A         [ 4] 2782         CALL     SPACS
      000E33 CC 0D 95         [ 2] 2783         JP     TYPES
                                   2784 
                                   2785 ;       U.      ( u -- )
                                   2786 ;       Display an unsigned integer
                                   2787 ;       in free format.
      000E36 0E 17                 2788         .word      LINK
                           000E38  2789 LINK = . 
      000E38 02                    2790         .byte      2
      000E39 55 2E                 2791         .ascii     "U."
      000E3B                       2792 UDOT:
      000E3B CD 0B 58         [ 4] 2793         CALL     BDIGS
      000E3E CD 0B 92         [ 4] 2794         CALL     DIGS
      000E41 CD 0B BD         [ 4] 2795         CALL     EDIGS
      000E44 CD 0D 6B         [ 4] 2796         CALL     SPACE
      000E47 CC 0D 95         [ 2] 2797         JP     TYPES
                                   2798 
                                   2799 ;       .       ( w -- )
                                   2800 ;       Display an integer in free
                                   2801 ;       format, preceeded by a space.
      000E4A 0E 38                 2802         .word      LINK
                           000E4C  2803 LINK = . 
      000E4C 01                    2804         .byte      1
      000E4D 2E                    2805         .ascii     "."
      000E4E                       2806 DOT:
      000E4E CD 04 D5         [ 4] 2807         CALL     BASE
      000E51 CD 03 71         [ 4] 2808         CALL     AT
      000E54 CD 02 E9         [ 4] 2809         CALL     DOLIT
      000E57 00 0A                 2810         .word      10
      000E59 CD 04 8D         [ 4] 2811         CALL     XORR    ;?decimal
      000E5C CD 03 1C         [ 4] 2812         CALL     QBRAN
      000E5F 0E 64                 2813         .word      DOT1
      000E61 CC 0E 3B         [ 2] 2814         JP     UDOT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000E64 CD 0B D5         [ 4] 2815 DOT1:   CALL     STR
      000E67 CD 0D 6B         [ 4] 2816         CALL     SPACE
      000E6A CC 0D 95         [ 2] 2817         JP     TYPES
                                   2818 
                                   2819 ;       ?       ( a -- )
                                   2820 ;       Display contents in memory cell.
      000E6D 0E 4C                 2821         .word      LINK
                                   2822         
                           000E6F  2823 LINK = . 
      000E6F 01                    2824         .byte      1
      000E70 3F                    2825         .ascii     "?"
      000E71                       2826 QUEST:
      000E71 CD 03 71         [ 4] 2827         CALL     AT
      000E74 CC 0E 4E         [ 2] 2828         JP     DOT
                                   2829 
                                   2830 ;; Parsing
                                   2831 
                                   2832 ;       parse   ( b u c -- b u delta ; <string> )
                                   2833 ;       Scan string delimited by c.
                                   2834 ;       Return found string and its offset.
      000E77 0E 6F                 2835         .word      LINK
                           000E79  2836 LINK = . 
      000E79 05                    2837         .byte      5
      000E7A 70 61 72 73 65        2838         .ascii     "parse"
      000E7F                       2839 PARS:
      000E7F CD 04 E4         [ 4] 2840         CALL     TEMP
      000E82 CD 03 5A         [ 4] 2841         CALL     STORE
      000E85 CD 04 42         [ 4] 2842         CALL     OVER
      000E88 CD 03 E1         [ 4] 2843         CALL     TOR
      000E8B CD 04 18         [ 4] 2844         CALL     DUPP
      000E8E CD 03 1C         [ 4] 2845         CALL     QBRAN
      000E91 0F 37                 2846         .word    PARS8
      000E93 CD 08 EC         [ 4] 2847         CALL     ONEM
      000E96 CD 04 E4         [ 4] 2848         CALL     TEMP
      000E99 CD 03 71         [ 4] 2849         CALL     AT
      000E9C CD 09 3E         [ 4] 2850         CALL     BLANK
      000E9F CD 06 86         [ 4] 2851         CALL     EQUAL
      000EA2 CD 03 1C         [ 4] 2852         CALL     QBRAN
      000EA5 0E D8                 2853         .word      PARS3
      000EA7 CD 03 E1         [ 4] 2854         CALL     TOR
      000EAA CD 09 3E         [ 4] 2855 PARS1:  CALL     BLANK
      000EAD CD 04 42         [ 4] 2856         CALL     OVER
      000EB0 CD 03 8F         [ 4] 2857         CALL     CAT     ;skip leading blanks ONLY
      000EB3 CD 06 5E         [ 4] 2858         CALL     SUBB
      000EB6 CD 04 51         [ 4] 2859         CALL     ZLESS
      000EB9 CD 06 1A         [ 4] 2860         CALL     INVER
      000EBC CD 03 1C         [ 4] 2861         CALL     QBRAN
      000EBF 0E D5                 2862         .word      PARS2
      000EC1 CD 08 DF         [ 4] 2863         CALL     ONEP
      000EC4 CD 02 FD         [ 4] 2864         CALL     DONXT
      000EC7 0E AA                 2865         .word      PARS1
      000EC9 CD 03 C2         [ 4] 2866         CALL     RFROM
      000ECC CD 04 0E         [ 4] 2867         CALL     DROP
      000ECF CD 09 4B         [ 4] 2868         CALL     ZERO
      000ED2 CC 04 18         [ 2] 2869         JP     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000ED5 CD 03 C2         [ 4] 2870 PARS2:  CALL     RFROM
      000ED8 CD 04 42         [ 4] 2871 PARS3:  CALL     OVER
      000EDB CD 04 28         [ 4] 2872         CALL     SWAPP
      000EDE CD 03 E1         [ 4] 2873         CALL     TOR
      000EE1 CD 04 E4         [ 4] 2874 PARS4:  CALL     TEMP
      000EE4 CD 03 71         [ 4] 2875         CALL     AT
      000EE7 CD 04 42         [ 4] 2876         CALL     OVER
      000EEA CD 03 8F         [ 4] 2877         CALL     CAT
      000EED CD 06 5E         [ 4] 2878         CALL     SUBB    ;scan for delimiter
      000EF0 CD 04 E4         [ 4] 2879         CALL     TEMP
      000EF3 CD 03 71         [ 4] 2880         CALL     AT
      000EF6 CD 09 3E         [ 4] 2881         CALL     BLANK
      000EF9 CD 06 86         [ 4] 2882         CALL     EQUAL
      000EFC CD 03 1C         [ 4] 2883         CALL     QBRAN
      000EFF 0F 04                 2884         .word      PARS5
      000F01 CD 04 51         [ 4] 2885         CALL     ZLESS
      000F04 CD 03 1C         [ 4] 2886 PARS5:  CALL     QBRAN
      000F07 0F 19                 2887         .word      PARS6
      000F09 CD 08 DF         [ 4] 2888         CALL     ONEP
      000F0C CD 02 FD         [ 4] 2889         CALL     DONXT
      000F0F 0E E1                 2890         .word      PARS4
      000F11 CD 04 18         [ 4] 2891         CALL     DUPP
      000F14 CD 03 E1         [ 4] 2892         CALL     TOR
      000F17 20 0F            [ 2] 2893         JRA     PARS7
      000F19 CD 03 C2         [ 4] 2894 PARS6:  CALL     RFROM
      000F1C CD 04 0E         [ 4] 2895         CALL     DROP
      000F1F CD 04 18         [ 4] 2896         CALL     DUPP
      000F22 CD 08 DF         [ 4] 2897         CALL     ONEP
      000F25 CD 03 E1         [ 4] 2898         CALL     TOR
      000F28 CD 04 42         [ 4] 2899 PARS7:  CALL     OVER
      000F2B CD 06 5E         [ 4] 2900         CALL     SUBB
      000F2E CD 03 C2         [ 4] 2901         CALL     RFROM
      000F31 CD 03 C2         [ 4] 2902         CALL     RFROM
      000F34 CC 06 5E         [ 2] 2903         JP     SUBB
      000F37 CD 04 42         [ 4] 2904 PARS8:  CALL     OVER
      000F3A CD 03 C2         [ 4] 2905         CALL     RFROM
      000F3D CC 06 5E         [ 2] 2906         JP     SUBB
                                   2907 
                                   2908 ;       PARSE   ( c -- b u ; <string> )
                                   2909 ;       Scan input stream and return
                                   2910 ;       counted string delimited by c.
      000F40 0E 79                 2911         .word      LINK
                           000F42  2912 LINK = . 
      000F42 05                    2913         .byte      5
      000F43 50 41 52 53 45        2914         .ascii     "PARSE"
      000F48                       2915 PARSE:
      000F48 CD 03 E1         [ 4] 2916         CALL     TOR
      000F4B CD 0A 5C         [ 4] 2917         CALL     TIB
      000F4E CD 04 F3         [ 4] 2918         CALL     INN
      000F51 CD 03 71         [ 4] 2919         CALL     AT
      000F54 CD 06 00         [ 4] 2920         CALL     PLUS    ;current input buffer pointer
      000F57 CD 05 03         [ 4] 2921         CALL     NTIB
      000F5A CD 03 71         [ 4] 2922         CALL     AT
      000F5D CD 04 F3         [ 4] 2923         CALL     INN
      000F60 CD 03 71         [ 4] 2924         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F63 CD 06 5E         [ 4] 2925         CALL     SUBB    ;remaining count
      000F66 CD 03 C2         [ 4] 2926         CALL     RFROM
      000F69 CD 0E 7F         [ 4] 2927         CALL     PARS
      000F6C CD 04 F3         [ 4] 2928         CALL     INN
      000F6F CC 09 BC         [ 2] 2929         JP     PSTOR
                                   2930 
                                   2931 ;       .(      ( -- )
                                   2932 ;       Output following string up to next ) .
      000F72 0F 42                 2933         .word      LINK
                           000F74  2934 LINK = . 
      000F74 82                    2935 	.byte      IMEDD+2
      000F75 2E 28                 2936         .ascii     ".("
      000F77                       2937 DOTPR:
      000F77 CD 02 E9         [ 4] 2938         CALL     DOLIT
      000F7A 00 29                 2939         .word     41	; ")"
      000F7C CD 0F 48         [ 4] 2940         CALL     PARSE
      000F7F CC 0D 95         [ 2] 2941         JP     TYPES
                                   2942 
                                   2943 ;       (       ( -- )
                                   2944 ;       Ignore following string up to next ).
                                   2945 ;       A comment.
      000F82 0F 74                 2946         .word      LINK
                           000F84  2947 LINK = . 
      000F84 81                    2948 	.byte      IMEDD+1
      000F85 28                    2949         .ascii     "("
      000F86                       2950 PAREN:
      000F86 CD 02 E9         [ 4] 2951         CALL     DOLIT
      000F89 00 29                 2952         .word     41	; ")"
      000F8B CD 0F 48         [ 4] 2953         CALL     PARSE
      000F8E CC 05 E0         [ 2] 2954         JP     DDROP
                                   2955 
                                   2956 ;       \       ( -- )
                                   2957 ;       Ignore following text till
                                   2958 ;       end of line.
      000F91 0F 84                 2959         .word      LINK
                           000F93  2960 LINK = . 
      000F93 81                    2961 	.byte      IMEDD+1
      000F94 5C                    2962         .ascii     "\"
      000F95                       2963 BKSLA:
                           000001  2964 .if CONVERT_TO_CODE
      000F95 90 AE 00 0C      [ 2] 2965         ldw y,#UCTIB ; #TIB  
      000F99 90 FE            [ 2] 2966         ldw y,(y)
      000F9B 90 89            [ 2] 2967         pushw y ; count in TIB 
      000F9D 90 AE 00 0A      [ 2] 2968         ldw y,#UINN ; >IN 
      000FA1 90 BF 22         [ 2] 2969         ldw YTEMP,y
      000FA4 90 85            [ 2] 2970         popw y 
      000FA6 91 CF 22         [ 5] 2971         ldw [YTEMP],y
      000FA9 81               [ 4] 2972         ret 
                           000000  2973 .else
                                   2974         CALL     NTIB
                                   2975         CALL     AT
                                   2976         CALL     INN
                                   2977         JP     STORE
                                   2978 .endif 
                                   2979 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



                                   2980 ;       WORD    ( c -- a ; <string> )
                                   2981 ;       Parse a word from input stream
                                   2982 ;       and copy it to code dictionary.
      000FAA 0F 93                 2983         .word      LINK
                           000FAC  2984 LINK = . 
      000FAC 04                    2985         .byte      4
      000FAD 57 4F 52 44           2986         .ascii     "WORD"
      000FB1                       2987 WORDD:
      000FB1 CD 0F 48         [ 4] 2988         CALL     PARSE
      000FB4 CD 0A 3A         [ 4] 2989         CALL     HERE
      000FB7 CD 08 B4         [ 4] 2990         CALL     CELLP
      000FBA CC 0A FB         [ 2] 2991         JP     PACKS
                                   2992 
                                   2993 ;       TOKEN   ( -- a ; <string> )
                                   2994 ;       Parse a word from input stream
                                   2995 ;       and copy it to name dictionary.
      000FBD 0F AC                 2996         .word      LINK
                           000FBF  2997 LINK = . 
      000FBF 05                    2998         .byte      5
      000FC0 54 4F 4B 45 4E        2999         .ascii     "TOKEN"
      000FC5                       3000 TOKEN:
      000FC5 CD 09 3E         [ 4] 3001         CALL     BLANK
      000FC8 CC 0F B1         [ 2] 3002         JP     WORDD
                                   3003 
                                   3004 ;; Dictionary search
                                   3005 
                                   3006 ;       NAME>   ( na -- ca )
                                   3007 ;       Return a code address given
                                   3008 ;       a name address.
      000FCB 0F BF                 3009         .word      LINK
                           000FCD  3010 LINK = . 
      000FCD 05                    3011         .byte      5
      000FCE 4E 41 4D 45 3E        3012         .ascii     "NAME>"
      000FD3                       3013 NAMET:
      000FD3 CD 0A 23         [ 4] 3014         CALL     COUNT
      000FD6 CD 02 E9         [ 4] 3015         CALL     DOLIT
      000FD9 00 1F                 3016         .word      31
      000FDB CD 04 64         [ 4] 3017         CALL     ANDD
      000FDE CC 06 00         [ 2] 3018         JP     PLUS
                                   3019 
                                   3020 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   3021 ;       Compare u cells in two
                                   3022 ;       strings. Return 0 if identical.
      000FE1 0F CD                 3023         .word      LINK
                           000FE3  3024 LINK = . 
      000FE3 05                    3025         .byte       5
      000FE4 53 41 4D 45 3F        3026         .ascii     "SAME?"
      000FE9                       3027 SAMEQ:
      000FE9 CD 08 EC         [ 4] 3028         CALL     ONEM
      000FEC CD 03 E1         [ 4] 3029         CALL     TOR
      000FEF 20 29            [ 2] 3030         JRA     SAME2
      000FF1 CD 04 42         [ 4] 3031 SAME1:  CALL     OVER
      000FF4 CD 03 D5         [ 4] 3032         CALL     RAT
      000FF7 CD 06 00         [ 4] 3033         CALL     PLUS
      000FFA CD 03 8F         [ 4] 3034         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      000FFD CD 04 42         [ 4] 3035         CALL     OVER
      001000 CD 03 D5         [ 4] 3036         CALL     RAT
      001003 CD 06 00         [ 4] 3037         CALL     PLUS
      001006 CD 03 8F         [ 4] 3038         CALL     CAT
      001009 CD 06 5E         [ 4] 3039         CALL     SUBB
      00100C CD 05 AF         [ 4] 3040         CALL     QDUP
      00100F CD 03 1C         [ 4] 3041         CALL     QBRAN
      001012 10 1A                 3042         .word      SAME2
      001014 CD 03 C2         [ 4] 3043         CALL     RFROM
      001017 CC 04 0E         [ 2] 3044         JP     DROP
      00101A CD 02 FD         [ 4] 3045 SAME2:  CALL     DONXT
      00101D 0F F1                 3046         .word      SAME1
      00101F CC 09 4B         [ 2] 3047         JP     ZERO
                                   3048 
                                   3049 ;       find    ( a va -- ca na | a F )
                                   3050 ;       Search vocabulary for string.
                                   3051 ;       Return ca and na if succeeded.
      001022 0F E3                 3052         .word      LINK
                           001024  3053 LINK = . 
      001024 04                    3054         .byte      4
      001025 46 49 4E 44           3055         .ascii     "FIND"
      001029                       3056 FIND:
      001029 CD 04 28         [ 4] 3057         CALL     SWAPP
      00102C CD 04 18         [ 4] 3058         CALL     DUPP
      00102F CD 03 8F         [ 4] 3059         CALL     CAT
      001032 CD 04 E4         [ 4] 3060         CALL     TEMP
      001035 CD 03 5A         [ 4] 3061         CALL     STORE
      001038 CD 04 18         [ 4] 3062         CALL     DUPP
      00103B CD 03 71         [ 4] 3063         CALL     AT
      00103E CD 03 E1         [ 4] 3064         CALL     TOR
      001041 CD 08 B4         [ 4] 3065         CALL     CELLP
      001044 CD 04 28         [ 4] 3066         CALL     SWAPP
      001047 CD 03 71         [ 4] 3067 FIND1:  CALL     AT
      00104A CD 04 18         [ 4] 3068         CALL     DUPP
      00104D CD 03 1C         [ 4] 3069         CALL     QBRAN
      001050 10 86                 3070         .word      FIND6
      001052 CD 04 18         [ 4] 3071         CALL     DUPP
      001055 CD 03 71         [ 4] 3072         CALL     AT
      001058 CD 02 E9         [ 4] 3073         CALL     DOLIT
      00105B 1F 7F                 3074         .word      MASKK
      00105D CD 04 64         [ 4] 3075         CALL     ANDD
      001060 CD 03 D5         [ 4] 3076         CALL     RAT
      001063 CD 04 8D         [ 4] 3077         CALL     XORR
      001066 CD 03 1C         [ 4] 3078         CALL     QBRAN
      001069 10 75                 3079         .word      FIND2
      00106B CD 08 B4         [ 4] 3080         CALL     CELLP
      00106E CD 02 E9         [ 4] 3081         CALL     DOLIT
      001071 FF FF                 3082         .word     0xFFFF
      001073 20 0C            [ 2] 3083         JRA     FIND3
      001075 CD 08 B4         [ 4] 3084 FIND2:  CALL     CELLP
      001078 CD 04 E4         [ 4] 3085         CALL     TEMP
      00107B CD 03 71         [ 4] 3086         CALL     AT
      00107E CD 0F E9         [ 4] 3087         CALL     SAMEQ
      001081 CD 03 33         [ 4] 3088 FIND3:  CALL     BRAN
      001084 10 95                 3089         .word      FIND4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      001086 CD 03 C2         [ 4] 3090 FIND6:  CALL     RFROM
      001089 CD 04 0E         [ 4] 3091         CALL     DROP
      00108C CD 04 28         [ 4] 3092         CALL     SWAPP
      00108F CD 08 C3         [ 4] 3093         CALL     CELLM
      001092 CC 04 28         [ 2] 3094         JP     SWAPP
      001095 CD 03 1C         [ 4] 3095 FIND4:  CALL     QBRAN
      001098 10 A2                 3096         .word      FIND5
      00109A CD 08 C3         [ 4] 3097         CALL     CELLM
      00109D CD 08 C3         [ 4] 3098         CALL     CELLM
      0010A0 20 A5            [ 2] 3099         JRA     FIND1
      0010A2 CD 03 C2         [ 4] 3100 FIND5:  CALL     RFROM
      0010A5 CD 04 0E         [ 4] 3101         CALL     DROP
      0010A8 CD 04 28         [ 4] 3102         CALL     SWAPP
      0010AB CD 04 0E         [ 4] 3103         CALL     DROP
      0010AE CD 08 C3         [ 4] 3104         CALL     CELLM
      0010B1 CD 04 18         [ 4] 3105         CALL     DUPP
      0010B4 CD 0F D3         [ 4] 3106         CALL     NAMET
      0010B7 CC 04 28         [ 2] 3107         JP     SWAPP
                                   3108 
                                   3109 ;       NAME?   ( a -- ca na | a F )
                                   3110 ;       Search vocabularies for a string.
      0010BA 10 24                 3111         .word      LINK
                           0010BC  3112 LINK = . 
      0010BC 05                    3113         .byte      5
      0010BD 4E 41 4D 45 3F        3114         .ascii     "NAME?"
      0010C2                       3115 NAMEQ:
      0010C2 CD 05 58         [ 4] 3116         CALL   CNTXT
      0010C5 CC 10 29         [ 2] 3117         JP     FIND
                                   3118 
                                   3119 ;; Terminal response
                                   3120 
                                   3121 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3122 ;       Backup cursor by one character.
      0010C8 10 BC                 3123         .word      LINK
                           0010CA  3124 LINK = . 
      0010CA 02                    3125         .byte      2
      0010CB 5E 48                 3126         .ascii     "^H"
      0010CD                       3127 BKSP:
      0010CD CD 03 E1         [ 4] 3128         CALL     TOR
      0010D0 CD 04 42         [ 4] 3129         CALL     OVER
      0010D3 CD 03 C2         [ 4] 3130         CALL     RFROM
      0010D6 CD 04 28         [ 4] 3131         CALL     SWAPP
      0010D9 CD 04 42         [ 4] 3132         CALL     OVER
      0010DC CD 04 8D         [ 4] 3133         CALL     XORR
      0010DF CD 03 1C         [ 4] 3134         CALL     QBRAN
      0010E2 10 FD                 3135         .word      BACK1
      0010E4 CD 02 E9         [ 4] 3136         CALL     DOLIT
      0010E7 00 08                 3137         .word      BKSPP
      0010E9 CD 02 D3         [ 4] 3138         CALL     EMIT
      0010EC CD 08 EC         [ 4] 3139         CALL     ONEM
      0010EF CD 09 3E         [ 4] 3140         CALL     BLANK
      0010F2 CD 02 D3         [ 4] 3141         CALL     EMIT
      0010F5 CD 02 E9         [ 4] 3142         CALL     DOLIT
      0010F8 00 08                 3143         .word      BKSPP
      0010FA CC 02 D3         [ 2] 3144         JP     EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      0010FD 81               [ 4] 3145 BACK1:  RET
                                   3146 
                                   3147 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   3148 ;       Accept and echo key stroke
                                   3149 ;       and bump cursor.
      0010FE 10 CA                 3150         .word      LINK
                           001100  3151 LINK = . 
      001100 03                    3152         .byte      3
      001101 54 41 50              3153         .ascii     "TAP"
      001104                       3154 TAP:
      001104 CD 04 18         [ 4] 3155         CALL     DUPP
      001107 CD 02 D3         [ 4] 3156         CALL     EMIT
      00110A CD 04 42         [ 4] 3157         CALL     OVER
      00110D CD 03 7E         [ 4] 3158         CALL     CSTOR
      001110 CC 08 DF         [ 2] 3159         JP     ONEP
                                   3160 
                                   3161 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3162 ;       Process a key stroke,
                                   3163 ;       CR or backspace.
      001113 11 00                 3164         .word      LINK
                           001115  3165 LINK = . 
      001115 04                    3166         .byte      4
      001116 4B 54 41 50           3167         .ascii     "KTAP"
      00111A                       3168 KTAP:
      00111A CD 04 18         [ 4] 3169         CALL     DUPP
      00111D CD 02 E9         [ 4] 3170         CALL     DOLIT
      001120 00 0D                 3171         .word      CRR
      001122 CD 04 8D         [ 4] 3172         CALL     XORR
      001125 CD 03 1C         [ 4] 3173         CALL     QBRAN
      001128 11 40                 3174         .word      KTAP2
      00112A CD 02 E9         [ 4] 3175         CALL     DOLIT
      00112D 00 08                 3176         .word      BKSPP
      00112F CD 04 8D         [ 4] 3177         CALL     XORR
      001132 CD 03 1C         [ 4] 3178         CALL     QBRAN
      001135 11 3D                 3179         .word      KTAP1
      001137 CD 09 3E         [ 4] 3180         CALL     BLANK
      00113A CC 11 04         [ 2] 3181         JP     TAP
      00113D CC 10 CD         [ 2] 3182 KTAP1:  JP     BKSP
      001140 CD 04 0E         [ 4] 3183 KTAP2:  CALL     DROP
      001143 CD 04 28         [ 4] 3184         CALL     SWAPP
      001146 CD 04 0E         [ 4] 3185         CALL     DROP
      001149 CC 04 18         [ 2] 3186         JP     DUPP
                                   3187 
                                   3188 ;       accept  ( b u -- b u )
                                   3189 ;       Accept characters to input
                                   3190 ;       buffer. Return with actual count.
      00114C 11 15                 3191         .word      LINK
                           00114E  3192 LINK = . 
      00114E 06                    3193         .byte      6
      00114F 41 43 43 45 50 54     3194         .ascii     "ACCEPT"
      001155                       3195 ACCEP:
      001155 CD 04 42         [ 4] 3196         CALL     OVER
      001158 CD 06 00         [ 4] 3197         CALL     PLUS
      00115B CD 04 42         [ 4] 3198         CALL     OVER
      00115E CD 05 EB         [ 4] 3199 ACCP1:  CALL     DDUP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001161 CD 04 8D         [ 4] 3200         CALL     XORR
      001164 CD 03 1C         [ 4] 3201         CALL     QBRAN
      001167 11 89                 3202         .word      ACCP4
      001169 CD 0D 33         [ 4] 3203         CALL     KEY
      00116C CD 04 18         [ 4] 3204         CALL     DUPP
      00116F CD 09 3E         [ 4] 3205         CALL     BLANK
      001172 CD 02 E9         [ 4] 3206         CALL     DOLIT
      001175 00 7F                 3207         .word      127
      001177 CD 07 20         [ 4] 3208         CALL     WITHI
      00117A CD 03 1C         [ 4] 3209         CALL     QBRAN
      00117D 11 84                 3210         .word      ACCP2
      00117F CD 11 04         [ 4] 3211         CALL     TAP
      001182 20 03            [ 2] 3212         JRA     ACCP3
      001184 CD 11 1A         [ 4] 3213 ACCP2:  CALL     KTAP
      001187 20 D5            [ 2] 3214 ACCP3:  JRA     ACCP1
      001189 CD 04 0E         [ 4] 3215 ACCP4:  CALL     DROP
      00118C CD 04 42         [ 4] 3216         CALL     OVER
      00118F CC 06 5E         [ 2] 3217         JP     SUBB
                                   3218 
                                   3219 ;       QUERY   ( -- )
                                   3220 ;       Accept input stream to
                                   3221 ;       terminal input buffer.
      001192 11 4E                 3222         .word      LINK
                                   3223         
                           001194  3224 LINK = . 
      001194 05                    3225         .byte      5
      001195 51 55 45 52 59        3226         .ascii     "QUERY"
      00119A                       3227 QUERY:
      00119A CD 0A 5C         [ 4] 3228         CALL     TIB
      00119D CD 02 E9         [ 4] 3229         CALL     DOLIT
      0011A0 00 50                 3230         .word      80
      0011A2 CD 11 55         [ 4] 3231         CALL     ACCEP
      0011A5 CD 05 03         [ 4] 3232         CALL     NTIB
      0011A8 CD 03 5A         [ 4] 3233         CALL     STORE
      0011AB CD 04 0E         [ 4] 3234         CALL     DROP
      0011AE CD 09 4B         [ 4] 3235         CALL     ZERO
      0011B1 CD 04 F3         [ 4] 3236         CALL     INN
      0011B4 CC 03 5A         [ 2] 3237         JP     STORE
                                   3238 
                                   3239 ;       ABORT   ( -- )
                                   3240 ;       Reset data stack and
                                   3241 ;       jump to QUIT.
      0011B7 11 94                 3242         .word      LINK
                           0011B9  3243 LINK = . 
      0011B9 05                    3244         .byte      5
      0011BA 41 42 4F 52 54        3245         .ascii     "ABORT"
      0011BF                       3246 ABORT:
      0011BF CD 12 B6         [ 4] 3247         CALL     PRESE
      0011C2 CC 12 D3         [ 2] 3248         JP     QUIT
                                   3249 
                                   3250 ;       abort"  ( f -- )
                                   3251 ;       Run time routine of ABORT".
                                   3252 ;       Abort with a message.
      0011C5 11 B9                 3253         .word      LINK
                           0011C7  3254 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0011C7 46                    3255 	.byte      COMPO+6
      0011C8 41 42 4F 52 54        3256         .ascii     "ABORT"
      0011CD 22                    3257         .byte      '"'
      0011CE                       3258 ABORQ:
      0011CE CD 03 1C         [ 4] 3259         CALL     QBRAN
      0011D1 11 ED                 3260         .word      ABOR2   ;text flag
      0011D3 CD 0D C9         [ 4] 3261         CALL     DOSTR
      0011D6 CD 0D 6B         [ 4] 3262 ABOR1:  CALL     SPACE
      0011D9 CD 0A 23         [ 4] 3263         CALL     COUNT
      0011DC CD 0D 95         [ 4] 3264         CALL     TYPES
      0011DF CD 02 E9         [ 4] 3265         CALL     DOLIT
      0011E2 00 3F                 3266         .word     63 ; "?"
      0011E4 CD 02 D3         [ 4] 3267         CALL     EMIT
      0011E7 CD 0D B3         [ 4] 3268         CALL     CR
      0011EA CC 11 BF         [ 2] 3269         JP     ABORT   ;pass error string
      0011ED CD 0D C9         [ 4] 3270 ABOR2:  CALL     DOSTR
      0011F0 CC 04 0E         [ 2] 3271         JP     DROP
                                   3272 
                                   3273 ;; The text interpreter
                                   3274 
                                   3275 ;       $INTERPRET      ( a -- )
                                   3276 ;       Interpret a word. If failed,
                                   3277 ;       try to convert it to an integer.
      0011F3 11 C7                 3278         .word      LINK
                           0011F5  3279 LINK = . 
      0011F5 0A                    3280         .byte      10
      0011F6 24 49 4E 54 45 52 50  3281         .ascii     "$INTERPRET"
             52 45 54
      001200                       3282 INTER:
      001200 CD 10 C2         [ 4] 3283         CALL     NAMEQ
      001203 CD 05 AF         [ 4] 3284         CALL     QDUP    ;?defined
      001206 CD 03 1C         [ 4] 3285         CALL     QBRAN
      001209 12 2A                 3286         .word      INTE1
      00120B CD 03 71         [ 4] 3287         CALL     AT
      00120E CD 02 E9         [ 4] 3288         CALL     DOLIT
      001211 40 00                 3289 	.word       0x4000	; COMPO*256
      001213 CD 04 64         [ 4] 3290         CALL     ANDD    ;?compile only lexicon bits
      001216 CD 11 CE         [ 4] 3291         CALL     ABORQ
      001219 0D                    3292         .byte      13
      00121A 20 63 6F 6D 70 69 6C  3293         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001227 CC 03 43         [ 2] 3294         JP     EXECU
      00122A CD 0C 60         [ 4] 3295 INTE1:  CALL     NUMBQ   ;convert a number
      00122D CD 03 1C         [ 4] 3296         CALL     QBRAN
      001230 11 D6                 3297         .word    ABOR1
      001232 81               [ 4] 3298         RET
                                   3299 
                                   3300 ;       [       ( -- )
                                   3301 ;       Start  text interpreter.
      001233 11 F5                 3302         .word      LINK
                           001235  3303 LINK = . 
      001235 81                    3304 	.byte      IMEDD+1
      001236 5B                    3305         .ascii     "["
      001237                       3306 LBRAC:
      001237 CD 02 E9         [ 4] 3307         CALL   DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00123A 12 00                 3308         .word  INTER
      00123C CD 05 36         [ 4] 3309         CALL   TEVAL
      00123F CC 03 5A         [ 2] 3310         JP     STORE
                                   3311 
                                   3312 ;       .OK     ( -- )
                                   3313 ;       Display 'ok' while interpreting.
      001242 12 35                 3314         .word      LINK
                           001244  3315 LINK = . 
      001244 03                    3316         .byte      3
      001245 2E 4F 4B              3317         .ascii     ".OK"
      001248                       3318 DOTOK:
      001248 CD 02 E9         [ 4] 3319         CALL     DOLIT
      00124B 12 00                 3320         .word      INTER
      00124D CD 05 36         [ 4] 3321         CALL     TEVAL
      001250 CD 03 71         [ 4] 3322         CALL     AT
      001253 CD 06 86         [ 4] 3323         CALL     EQUAL
      001256 CD 03 1C         [ 4] 3324         CALL     QBRAN
      001259 12 62                 3325         .word      DOTO1
      00125B CD 0D F2         [ 4] 3326         CALL     DOTQP
      00125E 03                    3327         .byte      3
      00125F 20 6F 6B              3328         .ascii     " ok"
      001262 CC 0D B3         [ 2] 3329 DOTO1:  JP     CR
                                   3330 
                                   3331 ;       ?STACK  ( -- )
                                   3332 ;       Abort if stack underflows.
      001265 12 44                 3333         .word      LINK
                           001267  3334 LINK = . 
      001267 06                    3335         .byte      6
      001268 3F 53 54 41 43 4B     3336         .ascii     "?STACK"
      00126E                       3337 QSTAC: 
      00126E CD 09 8E         [ 4] 3338         CALL     DEPTH
      001271 CD 04 51         [ 4] 3339         CALL     ZLESS   ;check only for underflow
      001274 CD 11 CE         [ 4] 3340         CALL     ABORQ
      001277 0B                    3341         .byte      11
      001278 20 75 6E 64 65 72 66  3342         .ascii     " underflow "
             6C 6F 77 20
      001283 81               [ 4] 3343         RET
                                   3344 
                                   3345 ;       EVAL    ( -- )
                                   3346 ;       Interpret  input stream.
      001284 12 67                 3347         .word      LINK
                           001286  3348 LINK = . 
      001286 04                    3349         .byte      4
      001287 45 56 41 4C           3350         .ascii     "EVAL"
      00128B                       3351 EVAL:
      00128B CD 0F C5         [ 4] 3352 EVAL1:  CALL     TOKEN
      00128E CD 04 18         [ 4] 3353         CALL     DUPP
      001291 CD 03 8F         [ 4] 3354         CALL     CAT     ;?input stream empty
      001294 CD 03 1C         [ 4] 3355         CALL     QBRAN
      001297 12 A7                 3356         .word    EVAL2
      001299 CD 05 36         [ 4] 3357         CALL     TEVAL
      00129C CD 0A 70         [ 4] 3358         CALL     ATEXE
      00129F CD 12 6E         [ 4] 3359         CALL     QSTAC   ;evaluate input, check stack
      0012A2 CD 03 33         [ 4] 3360         CALL     BRAN
      0012A5 12 8B                 3361         .word    EVAL1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



      0012A7 CD 04 0E         [ 4] 3362 EVAL2:  CALL     DROP
      0012AA CC 12 48         [ 2] 3363         JP       DOTOK
                                   3364 
                                   3365 ;       PRESET  ( -- )
                                   3366 ;       Reset data stack pointer and
                                   3367 ;       terminal input buffer.
      0012AD 12 86                 3368         .word      LINK
                           0012AF  3369 LINK = . 
      0012AF 06                    3370         .byte      6
      0012B0 50 52 45 53 45 54     3371         .ascii     "PRESET"
      0012B6                       3372 PRESE:
      0012B6 CD 02 E9         [ 4] 3373         CALL     DOLIT
      0012B9 16 70                 3374         .word      SPP
      0012BB CD 04 05         [ 4] 3375         CALL     SPSTO
      0012BE CD 02 E9         [ 4] 3376         CALL     DOLIT
      0012C1 17 00                 3377         .word      TIBB
      0012C3 CD 05 03         [ 4] 3378         CALL     NTIB
      0012C6 CD 08 B4         [ 4] 3379         CALL     CELLP
      0012C9 CC 03 5A         [ 2] 3380         JP     STORE
                                   3381 
                                   3382 ;       QUIT    ( -- )
                                   3383 ;       Reset return stack pointer
                                   3384 ;       and start text interpreter.
      0012CC 12 AF                 3385         .word      LINK
                           0012CE  3386 LINK = . 
      0012CE 04                    3387         .byte      4
      0012CF 51 55 49 54           3388         .ascii     "QUIT"
      0012D3                       3389 QUIT:
      0012D3 CD 02 E9         [ 4] 3390         CALL     DOLIT
      0012D6 17 FF                 3391         .word      RPP
      0012D8 CD 03 AC         [ 4] 3392         CALL     RPSTO   ;reset return stack pointer
      0012DB CD 12 37         [ 4] 3393 QUIT1:  CALL     LBRAC   ;start interpretation
      0012DE CD 11 9A         [ 4] 3394 QUIT2:  CALL     QUERY   ;get input
      0012E1 CD 12 8B         [ 4] 3395         CALL     EVAL
      0012E4 20 F8            [ 2] 3396         JRA     QUIT2   ;continue till error
                                   3397 
                                   3398 ;; The compiler
                                   3399 
                                   3400 ;       '       ( -- ca )
                                   3401 ;       Search vocabularies for
                                   3402 ;       next word in input stream.
      0012E6 12 CE                 3403         .word      LINK
                           0012E8  3404 LINK = . 
      0012E8 01                    3405         .byte      1
      0012E9 27                    3406         .ascii     "'"
      0012EA                       3407 TICK:
      0012EA CD 0F C5         [ 4] 3408         CALL     TOKEN
      0012ED CD 10 C2         [ 4] 3409         CALL     NAMEQ   ;?defined
      0012F0 CD 03 1C         [ 4] 3410         CALL     QBRAN
      0012F3 11 D6                 3411         .word      ABOR1
      0012F5 81               [ 4] 3412         RET     ;yes, push code address
                                   3413 
                                   3414 ;       ALLOT   ( n -- )
                           000001  3415 .if PICATOUT_MOD
                                   3416 ;       Allocate n bytes to RAM 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                           000000  3417 .else 
                                   3418 ;       Allocate n bytes to  code dictionary.
                                   3419 .endif 
      0012F6 12 E8                 3420         .word      LINK
                           0012F8  3421 LINK = . 
      0012F8 05                    3422         .byte      5
      0012F9 41 4C 4C 4F 54        3423         .ascii     "ALLOT"
      0012FE                       3424 ALLOT:
      0012FE CD 05 66         [ 4] 3425         CALL     VPP
                           000001  3426 .if PICATOUT_MOD
                                   3427 ; must update APP_VP each time VP is modidied
      001301 CD 09 BC         [ 4] 3428         call PSTOR 
      001304 CD 19 D9         [ 4] 3429         call UPDATVP 
                           000000  3430 .else
                                   3431         JP     PSTOR
                                   3432 .endif ;PICATOUT_MOD
                                   3433 
                                   3434 ;       ,       ( w -- )
                                   3435 ;         Compile an integer into
                                   3436 ;         variable space.
      001307 12 F8                 3437         .word      LINK
                           001309  3438 LINK = . 
      001309 01                    3439         .byte      1
      00130A 2C                    3440         .ascii     ","
      00130B                       3441 COMMA:
      00130B CD 0A 3A         [ 4] 3442         CALL     HERE
      00130E CD 04 18         [ 4] 3443         CALL     DUPP
      001311 CD 08 B4         [ 4] 3444         CALL     CELLP   ;cell boundary
      001314 CD 05 66         [ 4] 3445         CALL     VPP
      001317 CD 03 5A         [ 4] 3446         CALL     STORE
      00131A CC 03 5A         [ 2] 3447         JP     STORE
                                   3448 
                                   3449 ;       C,      ( c -- )
                                   3450 ;       Compile a byte into
                                   3451 ;       variables space.
      00131D 13 09                 3452        .word      LINK
                           00131F  3453 LINK = . 
      00131F 02                    3454         .byte      2
      001320 43 2C                 3455         .ascii     "C,"
      001322                       3456 CCOMMA:
      001322 CD 0A 3A         [ 4] 3457         CALL     HERE
      001325 CD 04 18         [ 4] 3458         CALL     DUPP
      001328 CD 08 DF         [ 4] 3459         CALL     ONEP
      00132B CD 05 66         [ 4] 3460         CALL     VPP
      00132E CD 03 5A         [ 4] 3461         CALL     STORE
      001331 CC 03 7E         [ 2] 3462         JP     CSTOR
                                   3463 
                                   3464 ;       [COMPILE]       ( -- ; <string> )
                                   3465 ;       Compile next immediate
                                   3466 ;       word into code dictionary.
      001334 13 1F                 3467         .word      LINK
                           001336  3468 LINK = . 
      001336 89                    3469 	.byte      IMEDD+9
      001337 5B 43 4F 4D 50 49 4C  3470         .ascii     "[COMPILE]"
             45 5D
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001340                       3471 BCOMP:
      001340 CD 12 EA         [ 4] 3472         CALL     TICK
      001343 CC 16 03         [ 2] 3473         JP     JSRC
                                   3474 
                                   3475 ;       COMPILE ( -- )
                                   3476 ;       Compile next jsr in
                                   3477 ;       colon list to code dictionary.
      001346 13 36                 3478         .word      LINK
                           001348  3479 LINK = . 
      001348 47                    3480 	.byte      COMPO+7
      001349 43 4F 4D 50 49 4C 45  3481         .ascii     "COMPILE"
      001350                       3482 COMPI:
      001350 CD 03 C2         [ 4] 3483         CALL     RFROM
                           000001  3484 .if PICATOUT_MOD
                                   3485 ; no need to increment
                           000000  3486 .else
                                   3487         CALL     ONEP
                                   3488 .endif 
      001353 CD 04 18         [ 4] 3489         CALL     DUPP
      001356 CD 03 71         [ 4] 3490         CALL     AT
      001359 CD 16 03         [ 4] 3491         CALL     JSRC    ;compile subroutine
      00135C CD 08 B4         [ 4] 3492         CALL     CELLP
                           000001  3493 .if PICATOUT_MOD
      00135F 90 93            [ 1] 3494         ldw y,x 
      001361 90 FE            [ 2] 3495         ldw y,(y)
      001363 1C 00 02         [ 2] 3496         addw x,#CELLL 
      001366 90 FC            [ 2] 3497         jp (y)
                           000000  3498 .else 
                                   3499         JP     TOR
                                   3500 .endif 
                                   3501 
                                   3502 ;       LITERAL ( w -- )
                                   3503 ;       Compile tos to dictionary
                                   3504 ;       as an integer literal.
      001368 13 48                 3505         .word      LINK
                           00136A  3506 LINK = . 
      00136A 87                    3507 	.byte      IMEDD+7
      00136B 4C 49 54 45 52 41 4C  3508         .ascii     "LITERAL"
      001372                       3509 LITER:
      001372 CD 13 50         [ 4] 3510         CALL     COMPI
                           000001  3511 .if PICATOUT_MOD
      001375 02 E9                 3512         .word DOLIT 
                           000000  3513 .else         
                                   3514         CALL     DOLIT
                                   3515 .endif 
      001377 CC 13 0B         [ 2] 3516         JP     COMMA
                                   3517 
                                   3518 ;       $,"     ( -- )
                                   3519 ;       Compile a literal string
                                   3520 ;       up to next " .
      00137A 13 6A                 3521         .word      LINK
                           00137C  3522 LINK = . 
      00137C 03                    3523         .byte      3
      00137D 24 2C 22              3524         .byte     '$',',','"'
      001380                       3525 STRCQ:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      001380 CD 02 E9         [ 4] 3526         CALL     DOLIT
      001383 00 22                 3527         .word     34	; "
      001385 CD 0F 48         [ 4] 3528         CALL     PARSE
      001388 CD 0A 3A         [ 4] 3529         CALL     HERE
      00138B CD 0A FB         [ 4] 3530         CALL     PACKS   ;string to code dictionary
      00138E CD 0A 23         [ 4] 3531         CALL     COUNT
      001391 CD 06 00         [ 4] 3532         CALL     PLUS    ;calculate aligned end of string
      001394 CD 05 66         [ 4] 3533         CALL     VPP
      001397 CC 03 5A         [ 2] 3534         JP     STORE
                                   3535 
                                   3536 ;; Structures
                                   3537 
                                   3538 ;       FOR     ( -- a )
                                   3539 ;       Start a FOR-NEXT loop
                                   3540 ;       structure in a colon definition.
      00139A 13 7C                 3541         .word      LINK
                           00139C  3542 LINK = . 
      00139C 83                    3543 	.byte      IMEDD+3
      00139D 46 4F 52              3544         .ascii     "FOR"
      0013A0                       3545 FOR:
      0013A0 CD 13 50         [ 4] 3546         CALL     COMPI
                           000001  3547 .if PICATOUT_MOD
      0013A3 03 E1                 3548         .word TOR 
                           000000  3549 .else
                                   3550         CALL     TOR
                                   3551 .endif
      0013A5 CC 0A 3A         [ 2] 3552         JP     HERE
                                   3553 
                                   3554 ;       NEXT    ( a -- )
                                   3555 ;       Terminate a FOR-NEXT loop.
      0013A8 13 9C                 3556         .word      LINK
                           0013AA  3557 LINK = . 
      0013AA 84                    3558 	.byte      IMEDD+4
      0013AB 4E 45 58 54           3559         .ascii     "NEXT"
      0013AF                       3560 NEXT:
      0013AF CD 13 50         [ 4] 3561         CALL     COMPI
                           000001  3562 .if PICATOUT_MOD
      0013B2 02 FD                 3563         .word DONXT 
                           000000  3564 .else 
                                   3565         CALL     DONXT
                                   3566 .endif         
                           000001  3567 .if PICATOUT_MOD
      0013B4 CD 05 9F         [ 4] 3568         call ADRADJ
                                   3569 .endif ; PICATOUT_MOD
      0013B7 CC 13 0B         [ 2] 3570         JP     COMMA
                                   3571 
                                   3572 ;       I ( -- n )
                                   3573 ;       stack FOR-NEXT COUNTER 
      0013BA 13 AA                 3574         .word LINK 
                           0013BC  3575         LINK=.
      0013BC 01                    3576         .byte 1 
      0013BD 49                    3577         .ascii "I"
      0013BE                       3578 IFETCH: 
      0013BE 1D 00 02         [ 2] 3579         subw x,#CELLL 
      0013C1 16 03            [ 2] 3580         ldw y,(3,sp)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      0013C3 FF               [ 2] 3581         ldw (x),y 
      0013C4 81               [ 4] 3582         ret 
                                   3583 
                                   3584 ;       BEGIN   ( -- a )
                                   3585 ;       Start an infinite or
                                   3586 ;       indefinite loop structure.
      0013C5 13 BC                 3587         .word      LINK
                           0013C7  3588 LINK = . 
      0013C7 85                    3589 	.byte      IMEDD+5
      0013C8 42 45 47 49 4E        3590         .ascii     "BEGIN"
      0013CD                       3591 BEGIN:
      0013CD CC 0A 3A         [ 2] 3592         JP     HERE
                                   3593 
                                   3594 ;       UNTIL   ( a -- )
                                   3595 ;       Terminate a BEGIN-UNTIL
                                   3596 ;       indefinite loop structure.
      0013D0 13 C7                 3597         .word      LINK
                           0013D2  3598 LINK = . 
      0013D2 85                    3599 	.byte      IMEDD+5
      0013D3 55 4E 54 49 4C        3600         .ascii     "UNTIL"
      0013D8                       3601 UNTIL:
      0013D8 CD 13 50         [ 4] 3602         CALL     COMPI
                           000001  3603 .if PICATOUT_MOD
      0013DB 03 1C                 3604         .word    QBRAN 
                           000000  3605 .else 
                                   3606         CALL     QBRAN
                                   3607 .endif 
                           000001  3608 .if PICATOUT_MOD 
      0013DD CD 05 9F         [ 4] 3609         call ADRADJ
                                   3610 .endif ; PICATOUT_MOD
      0013E0 CC 13 0B         [ 2] 3611         JP     COMMA
                                   3612 
                                   3613 ;       AGAIN   ( a -- )
                                   3614 ;       Terminate a BEGIN-AGAIN
                                   3615 ;       infinite loop structure.
      0013E3 13 D2                 3616         .word      LINK
                           0013E5  3617 LINK = . 
      0013E5 85                    3618 	.byte      IMEDD+5
      0013E6 41 47 41 49 4E        3619         .ascii     "AGAIN"
      0013EB                       3620 AGAIN:
      0013EB CD 13 50         [ 4] 3621         CALL     COMPI
                           000001  3622 .if PICATOUT_MOD
      0013EE 03 33                 3623         .word BRAN
                           000000  3624 .else
                                   3625         CALL     BRAN
                                   3626 .endif 
                           000001  3627 .if PICATOUT_MOD 
      0013F0 CD 05 9F         [ 4] 3628         call ADRADJ 
                                   3629 .endif ; PICATOUT_MOD
      0013F3 CC 13 0B         [ 2] 3630         JP     COMMA
                                   3631 
                                   3632 ;       IF      ( -- A )
                                   3633 ;       Begin a conditional branch.
      0013F6 13 E5                 3634         .word      LINK
                           0013F8  3635 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



      0013F8 82                    3636 	.byte      IMEDD+2
      0013F9 49 46                 3637         .ascii     "IF"
      0013FB                       3638 IFF:
      0013FB CD 13 50         [ 4] 3639         CALL     COMPI
                           000001  3640 .if PICATOUT_MOD
      0013FE 03 1C                 3641         .word QBRAN
                           000000  3642 .else
                                   3643         CALL     QBRAN
                                   3644 .endif 
      001400 CD 0A 3A         [ 4] 3645         CALL     HERE
      001403 CD 09 4B         [ 4] 3646         CALL     ZERO
      001406 CC 13 0B         [ 2] 3647         JP     COMMA
                                   3648 
                                   3649 ;       THEN        ( A -- )
                                   3650 ;       Terminate a conditional branch structure.
      001409 13 F8                 3651         .word      LINK
                           00140B  3652 LINK = . 
      00140B 84                    3653 	.byte      IMEDD+4
      00140C 54 48 45 4E           3654         .ascii     "THEN"
      001410                       3655 THENN:
      001410 CD 0A 3A         [ 4] 3656         CALL     HERE
                           000001  3657 .if PICATOUT_MOD 
      001413 CD 05 9F         [ 4] 3658         call ADRADJ 
                                   3659 .endif ; PICATOUT_MOD
      001416 CD 04 28         [ 4] 3660         CALL     SWAPP
      001419 CC 03 5A         [ 2] 3661         JP     STORE
                                   3662 
                                   3663 ;       ELSE        ( A -- A )
                                   3664 ;       Start the false clause in an IF-ELSE-THEN structure.
      00141C 14 0B                 3665         .word      LINK
                           00141E  3666 LINK = . 
      00141E 84                    3667 	.byte      IMEDD+4
      00141F 45 4C 53 45           3668         .ascii     "ELSE"
      001423                       3669 ELSEE:
      001423 CD 13 50         [ 4] 3670         CALL     COMPI
                           000001  3671 .if PICATOUT_MOD
      001426 03 33                 3672         .word BRAN
                           000000  3673 .else
                                   3674         CALL     BRAN
                                   3675 .endif 
      001428 CD 0A 3A         [ 4] 3676         CALL     HERE
      00142B CD 09 4B         [ 4] 3677         CALL     ZERO
      00142E CD 13 0B         [ 4] 3678         CALL     COMMA
      001431 CD 04 28         [ 4] 3679         CALL     SWAPP
      001434 CD 0A 3A         [ 4] 3680         CALL     HERE
                           000001  3681 .if PICATOUT_MOD 
      001437 CD 05 9F         [ 4] 3682         call ADRADJ 
                                   3683 .endif ; PICATOUT_MOD
      00143A CD 04 28         [ 4] 3684         CALL     SWAPP
      00143D CC 03 5A         [ 2] 3685         JP     STORE
                                   3686 
                                   3687 ;       AHEAD       ( -- A )
                                   3688 ;       Compile a forward branch instruction.
      001440 14 1E                 3689         .word      LINK
                           001442  3690 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      001442 85                    3691 	.byte      IMEDD+5
      001443 41 48 45 41 44        3692         .ascii     "AHEAD"
      001448                       3693 AHEAD:
      001448 CD 13 50         [ 4] 3694         CALL     COMPI
                           000001  3695 .if PICATOUT_MOD
      00144B 03 33                 3696         .word BRAN
                           000000  3697 .else
                                   3698         CALL     BRAN
                                   3699 .endif 
      00144D CD 0A 3A         [ 4] 3700         CALL     HERE
      001450 CD 09 4B         [ 4] 3701         CALL     ZERO
      001453 CC 13 0B         [ 2] 3702         JP     COMMA
                                   3703 
                                   3704 ;       WHILE       ( a -- A a )
                                   3705 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001456 14 42                 3706         .word      LINK
                           001458  3707 LINK = . 
      001458 85                    3708 	.byte      IMEDD+5
      001459 57 48 49 4C 45        3709         .ascii     "WHILE"
      00145E                       3710 WHILE:
      00145E CD 13 50         [ 4] 3711         CALL     COMPI
                           000001  3712 .if PICATOUT_MOD
      001461 03 1C                 3713         .word QBRAN
                           000000  3714 .else
                                   3715         CALL     QBRAN
                                   3716 .endif 
      001463 CD 0A 3A         [ 4] 3717         CALL     HERE
      001466 CD 09 4B         [ 4] 3718         CALL     ZERO
      001469 CD 13 0B         [ 4] 3719         CALL     COMMA
      00146C CC 04 28         [ 2] 3720         JP     SWAPP
                                   3721 
                                   3722 ;       REPEAT      ( A a -- )
                                   3723 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      00146F 14 58                 3724         .word      LINK
                           001471  3725 LINK = . 
      001471 86                    3726         .byte      IMEDD+6
      001472 52 45 50 45 41 54     3727         .ascii     "REPEAT"
      001478                       3728 REPEA:
      001478 CD 13 50         [ 4] 3729         CALL     COMPI
                           000001  3730 .if PICATOUT_MOD
      00147B 03 33                 3731         .word BRAN
                           000000  3732 .else
                                   3733         CALL     BRAN
                                   3734 .endif 
                           000001  3735 .if PICATOUT_MOD 
      00147D CD 05 9F         [ 4] 3736         call ADRADJ 
                                   3737 .endif ; PICATOUT_MOD
      001480 CD 13 0B         [ 4] 3738         CALL     COMMA
      001483 CD 0A 3A         [ 4] 3739         CALL     HERE
                           000001  3740 .if PICATOUT_MOD 
      001486 CD 05 9F         [ 4] 3741         call ADRADJ 
                                   3742 .endif ; PICATOUT_MOD
      001489 CD 04 28         [ 4] 3743         CALL     SWAPP
      00148C CC 03 5A         [ 2] 3744         JP     STORE
                                   3745 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



                                   3746 ;       AFT         ( a -- a A )
                                   3747 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00148F 14 71                 3748         .word      LINK
                           001491  3749 LINK = . 
      001491 83                    3750 	.byte      IMEDD+3
      001492 41 46 54              3751         .ascii     "AFT"
      001495                       3752 AFT:
      001495 CD 04 0E         [ 4] 3753         CALL     DROP
      001498 CD 14 48         [ 4] 3754         CALL     AHEAD
      00149B CD 0A 3A         [ 4] 3755         CALL     HERE
      00149E CC 04 28         [ 2] 3756         JP     SWAPP
                                   3757 
                                   3758 ;       ABORT"      ( -- ; <string> )
                                   3759 ;       Conditional abort with an error message.
      0014A1 14 91                 3760         .word      LINK
                           0014A3  3761 LINK = . 
      0014A3 86                    3762 	.byte      IMEDD+6
      0014A4 41 42 4F 52 54        3763         .ascii     "ABORT"
      0014A9 22                    3764         .byte      '"'
      0014AA                       3765 ABRTQ:
      0014AA CD 13 50         [ 4] 3766         CALL     COMPI
                           000001  3767 .if PICATOUT_MOD
      0014AD 11 CE                 3768         .word ABORQ
                           000000  3769 .else
                                   3770         CALL     ABORQ
                                   3771 .endif
      0014AF CC 13 80         [ 2] 3772         JP     STRCQ
                                   3773 
                                   3774 ;       $"     ( -- ; <string> )
                                   3775 ;       Compile an inline string literal.
      0014B2 14 A3                 3776         .word      LINK
                           0014B4  3777 LINK = . 
      0014B4 82                    3778 	.byte      IMEDD+2
      0014B5 24 22                 3779         .byte     '$','"'
      0014B7                       3780 STRQ:
      0014B7 CD 13 50         [ 4] 3781         CALL     COMPI
                           000001  3782 .if PICATOUT_MOD
      0014BA 0D E8                 3783         .word STRQP 
                           000000  3784 .else
                                   3785         CALL     STRQP
                                   3786 .endif
      0014BC CC 13 80         [ 2] 3787         JP     STRCQ
                                   3788 
                                   3789 ;       ."          ( -- ; <string> )
                                   3790 ;       Compile an inline string literal to be typed out at run time.
      0014BF 14 B4                 3791         .word      LINK
                           0014C1  3792 LINK = . 
      0014C1 82                    3793 	.byte      IMEDD+2
      0014C2 2E 22                 3794         .byte     '.','"'
      0014C4                       3795 DOTQ:
      0014C4 CD 13 50         [ 4] 3796         CALL     COMPI
                           000001  3797 .if PICATOUT_MOD
      0014C7 0D F2                 3798         .word DOTQP 
                           000000  3799 .else
                                   3800         CALL     DOTQP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3801 .endif 
      0014C9 CC 13 80         [ 2] 3802         JP     STRCQ
                                   3803 
                                   3804 ;; Name compiler
                                   3805 
                                   3806 ;       ?UNIQUE ( a -- a )
                                   3807 ;       Display a warning message
                                   3808 ;       if word already exists.
      0014CC 14 C1                 3809         .word      LINK
                           0014CE  3810 LINK = . 
      0014CE 07                    3811         .byte      7
      0014CF 3F 55 4E 49 51 55 45  3812         .ascii     "?UNIQUE"
      0014D6                       3813 UNIQU:
      0014D6 CD 04 18         [ 4] 3814         CALL     DUPP
      0014D9 CD 10 C2         [ 4] 3815         CALL     NAMEQ   ;?name exists
      0014DC CD 03 1C         [ 4] 3816         CALL     QBRAN
      0014DF 14 F5                 3817         .word      UNIQ1
      0014E1 CD 0D F2         [ 4] 3818         CALL     DOTQP   ;redef are OK
      0014E4 07                    3819         .byte       7
      0014E5 20 72 65 44 65 66 20  3820         .ascii     " reDef "       
      0014EC CD 04 42         [ 4] 3821         CALL     OVER
      0014EF CD 0A 23         [ 4] 3822         CALL     COUNT
      0014F2 CD 0D 95         [ 4] 3823         CALL     TYPES   ;just in case
      0014F5 CC 04 0E         [ 2] 3824 UNIQ1:  JP     DROP
                                   3825 
                                   3826 ;       $,n     ( na -- )
                                   3827 ;       Build a new dictionary name
                                   3828 ;       using string at na.
                           000001  3829 .if PICATOUT_MOD
                                   3830 ; compile dans l'espace des variables 
                                   3831 .endif 
      0014F8 14 CE                 3832         .word      LINK
                           0014FA  3833 LINK = . 
      0014FA 03                    3834         .byte      3
      0014FB 24 2C 6E              3835         .ascii     "$,n"
      0014FE                       3836 SNAME:
      0014FE CD 04 18         [ 4] 3837         CALL     DUPP
      001501 CD 03 8F         [ 4] 3838         CALL     CAT     ;?null input
      001504 CD 03 1C         [ 4] 3839         CALL     QBRAN
      001507 15 34                 3840         .word      PNAM1
      001509 CD 14 D6         [ 4] 3841         CALL     UNIQU   ;?redefinition
      00150C CD 04 18         [ 4] 3842         CALL     DUPP
      00150F CD 0A 23         [ 4] 3843         CALL     COUNT
      001512 CD 06 00         [ 4] 3844         CALL     PLUS
      001515 CD 05 66         [ 4] 3845         CALL     VPP
      001518 CD 03 5A         [ 4] 3846         CALL     STORE
      00151B CD 04 18         [ 4] 3847         CALL     DUPP
      00151E CD 05 84         [ 4] 3848         CALL     LAST
      001521 CD 03 5A         [ 4] 3849         CALL     STORE   ;save na for vocabulary link
      001524 CD 08 C3         [ 4] 3850         CALL     CELLM   ;link address
      001527 CD 05 58         [ 4] 3851         CALL     CNTXT
      00152A CD 03 71         [ 4] 3852         CALL     AT
      00152D CD 04 28         [ 4] 3853         CALL     SWAPP
      001530 CD 03 5A         [ 4] 3854         CALL     STORE
      001533 81               [ 4] 3855         RET     ;save code pointer
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



      001534 CD 0D E8         [ 4] 3856 PNAM1:  CALL     STRQP
      001537 05                    3857         .byte      5
      001538 20 6E 61 6D 65        3858         .ascii     " name" ;null input
      00153D CC 11 D6         [ 2] 3859         JP     ABOR1
                                   3860 
                                   3861 ;; FORTH compiler
                                   3862 
                                   3863 ;       $COMPILE        ( a -- )
                                   3864 ;       Compile next word to
                                   3865 ;       dictionary as a token or literal.
      001540 14 FA                 3866         .word      LINK
                           001542  3867 LINK = . 
      001542 08                    3868         .byte      8
      001543 24 43 4F 4D 50 49 4C  3869         .ascii     "$COMPILE"
             45
      00154B                       3870 SCOMP:
      00154B CD 10 C2         [ 4] 3871         CALL     NAMEQ
      00154E CD 05 AF         [ 4] 3872         CALL     QDUP    ;?defined
      001551 CD 03 1C         [ 4] 3873         CALL     QBRAN
      001554 15 6C                 3874         .word      SCOM2
      001556 CD 03 71         [ 4] 3875         CALL     AT
      001559 CD 02 E9         [ 4] 3876         CALL     DOLIT
      00155C 80 00                 3877         .word     0x8000	;  IMEDD*256
      00155E CD 04 64         [ 4] 3878         CALL     ANDD    ;?immediate
      001561 CD 03 1C         [ 4] 3879         CALL     QBRAN
      001564 15 69                 3880         .word      SCOM1
      001566 CC 03 43         [ 2] 3881         JP     EXECU
      001569 CC 16 03         [ 2] 3882 SCOM1:  JP     JSRC
      00156C CD 0C 60         [ 4] 3883 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00156F CD 03 1C         [ 4] 3884         CALL     QBRAN
      001572 11 D6                 3885         .word      ABOR1
      001574 CC 13 72         [ 2] 3886         JP     LITER
                                   3887 
                                   3888 ;       OVERT   ( -- )
                                   3889 ;       Link a new word into vocabulary.
      001577 15 42                 3890         .word      LINK
                           001579  3891 LINK = . 
      001579 05                    3892         .byte      5
      00157A 4F 56 45 52 54        3893         .ascii     "OVERT"
      00157F                       3894 OVERT:
      00157F CD 05 84         [ 4] 3895         CALL     LAST
      001582 CD 03 71         [ 4] 3896         CALL     AT
      001585 CD 05 58         [ 4] 3897         CALL     CNTXT
      001588 CC 03 5A         [ 2] 3898         JP     STORE
                                   3899 
                                   3900 ;       ;       ( -- )
                                   3901 ;       Terminate a colon definition.
      00158B 15 79                 3902         .word      LINK
                           00158D  3903 LINK = . 
      00158D C1                    3904 	.byte      IMEDD+COMPO+1
      00158E 3B                    3905         .ascii     ";"
      00158F                       3906 SEMIS:
      00158F CD 13 50         [ 4] 3907         CALL     COMPI
                           000001  3908 .if PICATOUT_MOD
      001592 03 53                 3909         .word EXIT 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                           000000  3910 .else
                                   3911         CALL     EXIT
                                   3912 .endif 
      001594 CD 12 37         [ 4] 3913         CALL     LBRAC
                           000001  3914 .if PICATOUT_MOD
      001597 CD 15 7F         [ 4] 3915         call OVERT 
      00159A CD 1E A5         [ 4] 3916         CALL FMOVE
      00159D CD 05 AF         [ 4] 3917         call QDUP 
      0015A0 CD 03 1C         [ 4] 3918         call QBRAN 
      0015A3 15 A8                 3919         .word 1$ 
      0015A5 CD 1F 39         [ 4] 3920         CALL UPDATPTR 
      0015A8 81               [ 4] 3921 1$:     RET 
                           000000  3922 .else 
                                   3923         JP     OVERT
                                   3924 .endif 
                                   3925 
                           000001  3926 .if PICATOUT_MOD
                                   3927 ;       Terminate an ISR definition 
                                   3928 ;       retourn ca of ISR as double
                                   3929 ;       I; ( -- ud )
      0015A9 15 8D                 3930         .word LINK 
                           0015AB  3931         LINK=.
      0015AB C2                    3932         .byte 2+IMEDD+COMPO 
      0015AC 49 3B                 3933         .ascii "I;" 
      0015AE                       3934 ISEMI:
      0015AE 1D 00 02         [ 2] 3935         subw x,#CELLL  
      0015B1 90 AE 00 80      [ 2] 3936         ldw y,#IRET_CODE 
      0015B5 FF               [ 2] 3937         ldw (x),y 
      0015B6 CD 13 22         [ 4] 3938         call CCOMMA
      0015B9 CD 12 37         [ 4] 3939         call LBRAC 
      0015BC CD 1F 7E         [ 4] 3940         call IFMOVE
      0015BF CD 05 AF         [ 4] 3941         call QDUP 
      0015C2 CD 03 1C         [ 4] 3942         CALL QBRAN 
      0015C5 15 EB                 3943         .word 1$ 
      0015C7 CD 05 74         [ 4] 3944         CALL CPP
      0015CA CD 03 71         [ 4] 3945         call AT 
      0015CD CD 04 28         [ 4] 3946         call SWAPP 
      0015D0 CD 05 74         [ 4] 3947         CALL CPP 
      0015D3 CD 03 5A         [ 4] 3948         call STORE 
      0015D6 CD 19 C2         [ 4] 3949         call UPDATCP 
      0015D9 CD 19 7F         [ 4] 3950         call EEPVP 
      0015DC CD 04 0E         [ 4] 3951         call DROP 
      0015DF CD 03 71         [ 4] 3952         call AT 
      0015E2 CD 05 66         [ 4] 3953         call VPP 
      0015E5 CD 03 5A         [ 4] 3954         call STORE 
      0015E8 CC 09 4B         [ 2] 3955         jp ZERO
      0015EB 81               [ 4] 3956 1$:     ret           
                                   3957         
                                   3958 .endif ;PICATOUT_MOD
                                   3959 
                                   3960 ;       ]       ( -- )
                                   3961 ;       Start compiling words in
                                   3962 ;       input stream.
      0015EC 15 AB                 3963         .word      LINK
                           0015EE  3964 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0015EE 01                    3965         .byte      1
      0015EF 5D                    3966         .ascii     "]"
      0015F0                       3967 RBRAC:
      0015F0 CD 02 E9         [ 4] 3968         CALL   DOLIT
      0015F3 15 4B                 3969         .word  SCOMP
      0015F5 CD 05 36         [ 4] 3970         CALL   TEVAL
      0015F8 CC 03 5A         [ 2] 3971         JP     STORE
                                   3972 
                                   3973 ;       CALL,    ( ca -- )
                                   3974 ;       Compile a subroutine call.
      0015FB 15 EE                 3975         .word      LINK
                           0015FD  3976 LINK = . 
      0015FD 04                    3977         .byte      4
      0015FE 43 41 4C 4C 2C        3978         .ascii     "CALL,"
      001603                       3979 JSRC:
      001603 CD 02 E9         [ 4] 3980         CALL     DOLIT
      001606 00 CD                 3981         .word     CALLL     ;CALL
      001608 CD 13 22         [ 4] 3982         CALL     CCOMMA
      00160B CC 13 0B         [ 2] 3983         JP     COMMA
                                   3984 
                           000001  3985 .if PICATOUT_MOD
                                   3986 ;       INIT-OFS ( -- )
                                   3987 ;       compute offset to adjust jump address 
                                   3988 ;       set variable OFFSET 
      00160E 15 FD                 3989         .word LINK 
                           001610  3990         LINK=.
      001610 08                    3991         .byte 8 
      001611 49 4E 49 54 2D 4F 46  3992         .ascii "INIT-OFS" 
             53
      001619                       3993 INITOFS:
      001619 CD 05 25         [ 4] 3994         call TFLASH 
      00161C CD 03 71         [ 4] 3995         CALL AT 
      00161F CD 04 18         [ 4] 3996         CALL DUPP 
      001622 CD 03 1C         [ 4] 3997         call QBRAN
      001625 16 36                 3998         .word 1$
      001627 CD 04 0E         [ 4] 3999         call DROP  
      00162A CD 05 74         [ 4] 4000         call CPP 
      00162D CD 03 71         [ 4] 4001         call AT 
      001630 CD 0A 3A         [ 4] 4002         call HERE
      001633 CD 06 5E         [ 4] 4003         call SUBB 
      001636 CD 05 96         [ 4] 4004 1$:     call OFFSET 
      001639 CC 03 5A         [ 2] 4005         jp STORE  
                                   4006 .endif 
                                   4007 
                                   4008 ;       :       ( -- ; <string> )
                                   4009 ;       Start a new colon definition
                                   4010 ;       using next word as its name.
      00163C 16 10                 4011         .word      LINK
                           00163E  4012 LINK = . 
      00163E 01                    4013         .byte      1
      00163F 3A                    4014         .ascii     ":"
      001640                       4015 COLON:
                           000001  4016 .if PICATOUT_MOD
      001640 CD 16 19         [ 4] 4017         call INITOFS       
                                   4018 .endif ; PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001643 CD 0F C5         [ 4] 4019         CALL   TOKEN
      001646 CD 14 FE         [ 4] 4020         CALL   SNAME
      001649 CC 15 F0         [ 2] 4021         JP     RBRAC
                                   4022 
                           000001  4023 .if PICATOUT_MOD 
                                   4024 ;       I:  ( -- )
                                   4025 ;       Start interrupt service routine definition
                                   4026 ;       those definition have no name.
      00164C 16 3E                 4027         .word LINK
                           00164E  4028         LINK=.
      00164E 02                    4029         .byte 2 
      00164F 49 3A                 4030         .ascii "I:" 
      001651                       4031 ICOLON:
      001651 CD 16 19         [ 4] 4032         call INITOFS 
      001654 CC 15 F0         [ 2] 4033         jp RBRAC  
                                   4034 .endif ; PICATOUT_MOD
                                   4035 
                                   4036 ;       IMMEDIATE       ( -- )
                                   4037 ;       Make last compiled word
                                   4038 ;       an immediate word.
      001657 16 4E                 4039         .word      LINK
                           001659  4040 LINK = . 
      001659 09                    4041         .byte      9
      00165A 49 4D 4D 45 44 49 41  4042         .ascii     "IMMEDIATE"
             54 45
      001663                       4043 IMMED:
      001663 CD 02 E9         [ 4] 4044         CALL     DOLIT
      001666 80 00                 4045         .word     0x8000	;  IMEDD*256
      001668 CD 05 84         [ 4] 4046         CALL     LAST
      00166B CD 03 71         [ 4] 4047         CALL     AT
      00166E CD 03 71         [ 4] 4048         CALL     AT
      001671 CD 04 78         [ 4] 4049         CALL     ORR
      001674 CD 05 84         [ 4] 4050         CALL     LAST
      001677 CD 03 71         [ 4] 4051         CALL     AT
      00167A CC 03 5A         [ 2] 4052         JP     STORE
                                   4053 
                                   4054 ;; Defining words
                                   4055 
                                   4056 ;       CREATE  ( -- ; <string> )
                                   4057 ;       Compile a new array
                                   4058 ;       without allocating space.
      00167D 16 59                 4059         .word      LINK
                           00167F  4060 LINK = . 
      00167F 06                    4061         .byte      6
      001680 43 52 45 41 54 45     4062         .ascii     "CREATE"
      001686                       4063 CREAT:
      001686 CD 0F C5         [ 4] 4064         CALL     TOKEN
      001689 CD 14 FE         [ 4] 4065         CALL     SNAME
      00168C CD 15 7F         [ 4] 4066         CALL     OVERT        
      00168F CD 13 50         [ 4] 4067         CALL     COMPI 
                           000001  4068 .if PICATOUT_MOD
      001692 04 C5                 4069         .word DOVAR 
                           000000  4070 .else
                                   4071         CALL     DOVAR
                                   4072 .endif 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001694 81               [ 4] 4073         RET
                                   4074 
                                   4075 ;       VARIABLE        ( -- ; <string> )
                                   4076 ;       Compile a new variable
                                   4077 ;       initialized to 0.
      001695 16 7F                 4078         .word      LINK
                           001697  4079 LINK = . 
      001697 08                    4080         .byte      8
      001698 56 41 52 49 41 42 4C  4081         .ascii     "VARIABLE"
             45
      0016A0                       4082 VARIA:
                           000001  4083 .if PICATOUT_MOD
                                   4084 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0016A0 CD 0A 3A         [ 4] 4085         CALL HERE
      0016A3 CD 04 18         [ 4] 4086         CALL DUPP 
      0016A6 CD 08 B4         [ 4] 4087         CALL CELLP
      0016A9 CD 05 66         [ 4] 4088         CALL VPP 
      0016AC CD 03 5A         [ 4] 4089         CALL STORE
      0016AF CD 19 D9         [ 4] 4090         call UPDATVP 
                                   4091 .endif         
      0016B2 CD 16 86         [ 4] 4092         CALL CREAT
      0016B5 CD 04 18         [ 4] 4093         CALL DUPP
      0016B8 CD 13 0B         [ 4] 4094         CALL COMMA
      0016BB CD 09 4B         [ 4] 4095         CALL ZERO
                           000001  4096 .if PICATOUT_MOD 
      0016BE CD 04 28         [ 4] 4097         call SWAPP 
      0016C1 CD 03 5A         [ 4] 4098         CALL STORE 
      0016C4 CD 1E A5         [ 4] 4099         CALL FMOVE ; move definition to FLASH
      0016C7 CD 05 AF         [ 4] 4100         CALL QDUP 
      0016CA CD 03 1C         [ 4] 4101         CALL QBRAN 
      0016CD 16 D2                 4102         .word 1$
      0016CF CD 1F 39         [ 4] 4103         CALL UPDATPTR
      0016D2 81               [ 4] 4104 1$:     RET 
                                   4105 .endif ;PICATOUT_MOD        
                                   4106 
                           000001  4107 .if PICATOUT_MOD
                                   4108 ;       CONSTANT  ( n -- ; <string> )
                                   4109 ;       Compile a new constant 
                                   4110 ;       n CONSTANT name 
      0016D3 16 97                 4111         .word LINK 
                           0016D5  4112         LINK=. 
      0016D5 08                    4113         .byte 8 
      0016D6 43 4F 4E 53 54 41 4E  4114         .ascii "CONSTANT" 
             54
      0016DE                       4115 CONSTANT:          
      0016DE CD 0F C5         [ 4] 4116         CALL TOKEN
      0016E1 CD 14 FE         [ 4] 4117         CALL SNAME 
      0016E4 CD 15 7F         [ 4] 4118         CALL OVERT 
      0016E7 CD 13 50         [ 4] 4119         CALL COMPI 
                           000001  4120 .if PICATOUT_MOD
      0016EA 17 08                 4121         .word DOCONST
                           000000  4122 .else
                                   4123         CALL DOCONST
                                   4124 .endif 
      0016EC CD 13 0B         [ 4] 4125         CALL COMMA 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



      0016EF CD 1E A5         [ 4] 4126         CALL FMOVE
      0016F2 CD 05 AF         [ 4] 4127         CALL QDUP 
      0016F5 CD 03 1C         [ 4] 4128         CALL QBRAN 
      0016F8 16 FD                 4129         .word 1$ 
      0016FA CD 1F 39         [ 4] 4130         CALL UPDATPTR  
      0016FD 81               [ 4] 4131 1$:     RET          
                                   4132 
                                   4133 ; CONSTANT runtime semantic 
                                   4134 ; doCONST  ( -- n )
      0016FE 16 D5                 4135         .word LINK 
                           001700  4136         LINK=.
      001700 07                    4137         .byte 7
      001701 44 4F 43 4F 4E 53 54  4138         .ascii "DOCONST"
      001708                       4139 DOCONST:
      001708 1D 00 02         [ 2] 4140         subw x,#CELLL
      00170B 90 85            [ 2] 4141         popw y 
      00170D 90 FE            [ 2] 4142         ldw y,(y) 
      00170F FF               [ 2] 4143         ldw (x),y 
      001710 81               [ 4] 4144         ret 
                                   4145 .endif ;PICATOUT_MOD
                                   4146 
                                   4147 
                                   4148 ;; Tools
                                   4149 
                                   4150 ;       _TYPE   ( b u -- )
                                   4151 ;       Display a string. Filter
                                   4152 ;       non-printing characters.
      001711 17 00                 4153         .word      LINK
                           001713  4154 LINK = . 
      001713 05                    4155         .byte      5
      001714 5F 54 59 50 45        4156         .ascii     "_TYPE"
      001719                       4157 UTYPE:
      001719 CD 03 E1         [ 4] 4158         CALL     TOR     ;start count down loop
      00171C 20 0F            [ 2] 4159         JRA     UTYP2   ;skip first pass
      00171E CD 04 18         [ 4] 4160 UTYP1:  CALL     DUPP
      001721 CD 03 8F         [ 4] 4161         CALL     CAT
      001724 CD 09 75         [ 4] 4162         CALL     TCHAR
      001727 CD 02 D3         [ 4] 4163         CALL     EMIT    ;display only printable
      00172A CD 08 DF         [ 4] 4164         CALL     ONEP    ;increment address
      00172D CD 02 FD         [ 4] 4165 UTYP2:  CALL     DONXT
      001730 17 1E                 4166         .word      UTYP1   ;loop till done
      001732 CC 04 0E         [ 2] 4167         JP     DROP
                                   4168 
                                   4169 ;       dm+     ( a u -- a )
                                   4170 ;       Dump u bytes from ,
                                   4171 ;       leaving a+u on  stack.
      001735 17 13                 4172         .word      LINK
                           001737  4173 LINK = . 
      001737 03                    4174         .byte      3
      001738 64 6D 2B              4175         .ascii     "dm+"
      00173B                       4176 DUMPP:
      00173B CD 04 42         [ 4] 4177         CALL     OVER
      00173E CD 02 E9         [ 4] 4178         CALL     DOLIT
      001741 00 04                 4179         .word      4
      001743 CD 0E 1B         [ 4] 4180         CALL     UDOTR   ;display address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001746 CD 0D 6B         [ 4] 4181         CALL     SPACE
      001749 CD 03 E1         [ 4] 4182         CALL     TOR     ;start count down loop
      00174C 20 11            [ 2] 4183         JRA     PDUM2   ;skip first pass
      00174E CD 04 18         [ 4] 4184 PDUM1:  CALL     DUPP
      001751 CD 03 8F         [ 4] 4185         CALL     CAT
      001754 CD 02 E9         [ 4] 4186         CALL     DOLIT
      001757 00 03                 4187         .word      3
      001759 CD 0E 1B         [ 4] 4188         CALL     UDOTR   ;display numeric data
      00175C CD 08 DF         [ 4] 4189         CALL     ONEP    ;increment address
      00175F CD 02 FD         [ 4] 4190 PDUM2:  CALL     DONXT
      001762 17 4E                 4191         .word      PDUM1   ;loop till done
      001764 81               [ 4] 4192         RET
                                   4193 
                                   4194 ;       DUMP    ( a u -- )
                                   4195 ;       Dump u bytes from a,
                                   4196 ;       in a formatted manner.
      001765 17 37                 4197         .word      LINK
                           001767  4198 LINK = . 
      001767 04                    4199         .byte      4
      001768 44 55 4D 50           4200         .ascii     "DUMP"
      00176C                       4201 DUMP:
      00176C CD 04 D5         [ 4] 4202         CALL     BASE
      00176F CD 03 71         [ 4] 4203         CALL     AT
      001772 CD 03 E1         [ 4] 4204         CALL     TOR
      001775 CD 0B F3         [ 4] 4205         CALL     HEX     ;save radix, set hex
      001778 CD 02 E9         [ 4] 4206         CALL     DOLIT
      00177B 00 10                 4207         .word      16
      00177D CD 08 05         [ 4] 4208         CALL     SLASH   ;change count to lines
      001780 CD 03 E1         [ 4] 4209         CALL     TOR     ;start count down loop
      001783 CD 0D B3         [ 4] 4210 DUMP1:  CALL     CR
      001786 CD 02 E9         [ 4] 4211         CALL     DOLIT
      001789 00 10                 4212         .word      16
      00178B CD 05 EB         [ 4] 4213         CALL     DDUP
      00178E CD 17 3B         [ 4] 4214         CALL     DUMPP   ;display numeric
      001791 CD 05 C0         [ 4] 4215         CALL     ROT
      001794 CD 05 C0         [ 4] 4216         CALL     ROT
      001797 CD 0D 6B         [ 4] 4217         CALL     SPACE
      00179A CD 0D 6B         [ 4] 4218         CALL     SPACE
      00179D CD 17 19         [ 4] 4219         CALL     UTYPE   ;display printable characters
      0017A0 CD 02 FD         [ 4] 4220         CALL     DONXT
      0017A3 17 83                 4221         .word      DUMP1   ;loop till done
      0017A5 CD 04 0E         [ 4] 4222 DUMP3:  CALL     DROP
      0017A8 CD 03 C2         [ 4] 4223         CALL     RFROM
      0017AB CD 04 D5         [ 4] 4224         CALL     BASE
      0017AE CC 03 5A         [ 2] 4225         JP     STORE   ;restore radix
                                   4226 
                                   4227 ;       .S      ( ... -- ... )
                                   4228 ;        Display  contents of stack.
      0017B1 17 67                 4229         .word      LINK
                           0017B3  4230 LINK = . 
      0017B3 02                    4231         .byte      2
      0017B4 2E 53                 4232         .ascii     ".S"
      0017B6                       4233 DOTS:
      0017B6 CD 0D B3         [ 4] 4234         CALL     CR
      0017B9 CD 09 8E         [ 4] 4235         CALL     DEPTH   ;stack depth
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0017BC CD 03 E1         [ 4] 4236         CALL     TOR     ;start count down loop
      0017BF 20 09            [ 2] 4237         JRA     DOTS2   ;skip first pass
      0017C1 CD 03 D5         [ 4] 4238 DOTS1:  CALL     RAT
                                   4239 ;        CALL ONEP
      0017C4 CD 09 A5         [ 4] 4240 	CALL     PICK
      0017C7 CD 0E 4E         [ 4] 4241         CALL     DOT     ;index stack, display contents
      0017CA CD 02 FD         [ 4] 4242 DOTS2:  CALL     DONXT
      0017CD 17 C1                 4243         .word      DOTS1   ;loop till done
      0017CF CD 0D F2         [ 4] 4244         CALL     DOTQP
      0017D2 05                    4245         .byte      5
      0017D3 20 3C 73 70 20        4246         .ascii     " <sp "
      0017D8 81               [ 4] 4247         RET
                                   4248 
                                   4249 ;       >NAME   ( ca -- na | F )
                                   4250 ;       Convert code address
                                   4251 ;       to a name address.
      0017D9 17 B3                 4252         .word      LINK
                           0017DB  4253 LINK = . 
      0017DB 05                    4254         .byte      5
      0017DC 3E 4E 41 4D 45        4255         .ascii     ">NAME"
      0017E1                       4256 TNAME:
      0017E1 CD 05 58         [ 4] 4257         CALL     CNTXT   ;vocabulary link
      0017E4 CD 03 71         [ 4] 4258 TNAM2:  CALL     AT
      0017E7 CD 04 18         [ 4] 4259         CALL     DUPP    ;?last word in a vocabulary
      0017EA CD 03 1C         [ 4] 4260         CALL     QBRAN
      0017ED 18 08                 4261         .word      TNAM4
      0017EF CD 05 EB         [ 4] 4262         CALL     DDUP
      0017F2 CD 0F D3         [ 4] 4263         CALL     NAMET
      0017F5 CD 04 8D         [ 4] 4264         CALL     XORR    ;compare
      0017F8 CD 03 1C         [ 4] 4265         CALL     QBRAN
      0017FB 18 02                 4266         .word      TNAM3
      0017FD CD 08 C3         [ 4] 4267         CALL     CELLM   ;continue with next word
      001800 20 E2            [ 2] 4268         JRA     TNAM2
      001802 CD 04 28         [ 4] 4269 TNAM3:  CALL     SWAPP
      001805 CC 04 0E         [ 2] 4270         JP     DROP
      001808 CD 05 E0         [ 4] 4271 TNAM4:  CALL     DDROP
      00180B CC 09 4B         [ 2] 4272         JP     ZERO
                                   4273 
                                   4274 ;       .ID     ( na -- )
                                   4275 ;        Display  name at address.
      00180E 17 DB                 4276         .word      LINK
                           001810  4277 LINK = . 
      001810 03                    4278         .byte      3
      001811 2E 49 44              4279         .ascii     ".ID"
      001814                       4280 DOTID:
      001814 CD 05 AF         [ 4] 4281         CALL     QDUP    ;if zero no name
      001817 CD 03 1C         [ 4] 4282         CALL     QBRAN
      00181A 18 2A                 4283         .word      DOTI1
      00181C CD 0A 23         [ 4] 4284         CALL     COUNT
      00181F CD 02 E9         [ 4] 4285         CALL     DOLIT
      001822 00 1F                 4286         .word      0x1F
      001824 CD 04 64         [ 4] 4287         CALL     ANDD    ;mask lexicon bits
      001827 CC 17 19         [ 2] 4288         JP     UTYPE
      00182A CD 0D F2         [ 4] 4289 DOTI1:  CALL     DOTQP
      00182D 09                    4290         .byte      9
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00182E 20 6E 6F 4E 61 6D 65  4291         .ascii     " noName"
      001835 81               [ 4] 4292         RET
                                   4293 
                           000000  4294 WANT_SEE=0 
                           000000  4295 .if WANT_SEE 
                                   4296 ;       SEE     ( -- ; <string> )
                                   4297 ;       A simple decompiler.
                                   4298 ;       Updated for byte machines.
                                   4299         .word      LINK
                                   4300 LINK = . 
                                   4301         .byte      3
                                   4302         .ascii     "SEE"
                                   4303 SEE:
                                   4304         CALL     TICK    ;starting address
                                   4305         CALL     CR
                                   4306         CALL     ONEM
                                   4307 SEE1:   CALL     ONEP
                                   4308         CALL     DUPP
                                   4309         CALL     AT
                                   4310         CALL     DUPP    ;?does it contain a zero
                                   4311         CALL     QBRAN
                                   4312         .word    SEE2
                                   4313         CALL     TNAME   ;?is it a name
                                   4314 SEE2:   CALL     QDUP    ;name address or zero
                                   4315         CALL     QBRAN
                                   4316         .word    SEE3
                                   4317         CALL     SPACE
                                   4318         CALL     DOTID   ;display name
                                   4319         CALL     ONEP
                                   4320         JRA      SEE4
                                   4321 SEE3:   CALL     DUPP
                                   4322         CALL     CAT
                                   4323         CALL     UDOT    ;display number
                                   4324 SEE4:   CALL     NUFQ    ;user control
                                   4325         CALL     QBRAN
                                   4326         .word    SEE1
                                   4327         JP     DROP
                                   4328 .endif ; WANT_SEE 
                                   4329 
                                   4330 ;       WORDS   ( -- )
                                   4331 ;       Display names in vocabulary.
      001836 18 10                 4332         .word      LINK
                           001838  4333 LINK = . 
      001838 05                    4334         .byte      5
      001839 57 4F 52 44 53        4335         .ascii     "WORDS"
      00183E                       4336 WORDS:
      00183E CD 0D B3         [ 4] 4337         CALL     CR
      001841 CD 05 58         [ 4] 4338         CALL     CNTXT   ;only in context
      001844 CD 03 71         [ 4] 4339 WORS1:  CALL     AT
      001847 CD 05 AF         [ 4] 4340         CALL     QDUP    ;?at end of list
      00184A CD 03 1C         [ 4] 4341         CALL     QBRAN
      00184D 18 63                 4342         .word      WORS2
      00184F CD 04 18         [ 4] 4343         CALL     DUPP
      001852 CD 0D 6B         [ 4] 4344         CALL     SPACE
      001855 CD 18 14         [ 4] 4345         CALL     DOTID   ;display a name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001858 CD 08 C3         [ 4] 4346         CALL     CELLM
      00185B CD 03 33         [ 4] 4347         CALL     BRAN
      00185E 18 44                 4348         .word      WORS1
      001860 CD 04 0E         [ 4] 4349         CALL     DROP
      001863 81               [ 4] 4350 WORS2:  RET
                                   4351 
                                   4352         
                                   4353 ;; Hardware reset
                                   4354 
                                   4355 ;       hi      ( -- )
                                   4356 ;       Display sign-on message.
      001864 18 38                 4357         .word      LINK
                           001866  4358 LINK = . 
      001866 02                    4359         .byte      2
      001867 68 69                 4360         .ascii     "hi"
      001869                       4361 HI:
      001869 CD 0D B3         [ 4] 4362         CALL     CR
      00186C CD 0D F2         [ 4] 4363         CALL     DOTQP   ;initialize I/O
      00186F 0F                    4364         .byte      15
      001870 73 74 6D 38 65 46 6F  4365         .ascii     "stm8eForth v"
             72 74 68 20 76
      00187C 33                    4366 	.byte      VER+'0'
      00187D 2E                    4367         .byte      '.' 
      00187E 30                    4368 	.byte      EXT+'0' ;version
      00187F CC 0D B3         [ 2] 4369         JP     CR
                                   4370 
                           000000  4371 WANT_DEBUG=0
                           000000  4372 .if WANT_DEBUG 
                                   4373 ;       DEBUG      ( -- )
                                   4374 ;       Display sign-on message.
                                   4375 ;        .word      LINK
                                   4376 LINK = . 
                                   4377         .byte      5
                                   4378         .ascii     "DEBUG"
                                   4379 DEBUG:
                                   4380 	CALL DOLIT
                                   4381 	.word 0x65
                                   4382 	CALL EMIT
                                   4383 	CALL DOLIT
                                   4384 	.word 0
                                   4385  	CALL ZLESS 
                                   4386 	CALL DOLIT
                                   4387 	.word 0xFFFE
                                   4388 	CALL ZLESS 
                                   4389 	CALL UPLUS 
                                   4390  	CALL DROP 
                                   4391 	CALL DOLIT
                                   4392 	.word 3
                                   4393 	CALL UPLUS 
                                   4394 	CALL UPLUS 
                                   4395  	CALL DROP
                                   4396 	CALL DOLIT
                                   4397 	.word 0x43
                                   4398 	CALL UPLUS 
                                   4399  	CALL DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



                                   4400 	CALL EMIT
                                   4401 	CALL DOLIT
                                   4402 	.word 0x4F
                                   4403 	CALL DOLIT
                                   4404 	.word 0x6F
                                   4405  	CALL XORR
                                   4406 	CALL DOLIT
                                   4407 	.word 0xF0
                                   4408  	CALL ANDD
                                   4409 	CALL DOLIT
                                   4410 	.word 0x4F
                                   4411  	CALL ORR
                                   4412 	CALL EMIT
                                   4413 	CALL DOLIT
                                   4414 	.word 8
                                   4415 	CALL DOLIT
                                   4416 	.word 6
                                   4417  	CALL SWAPP
                                   4418 	CALL OVER
                                   4419 	CALL XORR
                                   4420 	CALL DOLIT
                                   4421 	.word 3
                                   4422 	CALL ANDD 
                                   4423 	CALL ANDD
                                   4424 	CALL DOLIT
                                   4425 	.word 0x70
                                   4426 	CALL UPLUS 
                                   4427 	CALL DROP
                                   4428 	CALL EMIT
                                   4429 	CALL DOLIT
                                   4430 	.word 0
                                   4431 	CALL QBRAN
                                   4432 	.word DEBUG1
                                   4433 	CALL DOLIT
                                   4434 	.word 0x3F
                                   4435 DEBUG1:
                                   4436 	CALL DOLIT
                                   4437 	.word 0xFFFF
                                   4438 	CALL QBRAN
                                   4439 	.word DEBUG2
                                   4440 	CALL DOLIT
                                   4441 	.word 0x74
                                   4442 	CALL BRAN
                                   4443 	.word DEBUG3
                                   4444 DEBUG2:
                                   4445 	CALL DOLIT
                                   4446 	.word 0x21
                                   4447 DEBUG3:
                                   4448 	CALL EMIT
                                   4449 	CALL DOLIT
                                   4450 	.word 0x68
                                   4451 	CALL DOLIT
                                   4452 	.word 0x80
                                   4453 	CALL STORE
                                   4454 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4455 	.word 0x80
                                   4456 	CALL AT
                                   4457 	CALL EMIT
                                   4458 	CALL DOLIT
                                   4459 	.word 0x4D
                                   4460 	CALL TOR
                                   4461 	CALL RAT
                                   4462 	CALL RFROM
                                   4463 	CALL ANDD
                                   4464 	CALL EMIT
                                   4465 	CALL DOLIT
                                   4466 	.word 0x61
                                   4467 	CALL DOLIT
                                   4468 	.word 0xA
                                   4469 	CALL TOR
                                   4470 DEBUG4:
                                   4471 	CALL DOLIT
                                   4472 	.word 1
                                   4473 	CALL UPLUS 
                                   4474 	CALL DROP
                                   4475 	CALL DONXT
                                   4476 	.word DEBUG4
                                   4477 	CALL EMIT
                                   4478 	CALL DOLIT
                                   4479 	.word 0x656D
                                   4480 	CALL DOLIT
                                   4481 	.word 0x100
                                   4482 	CALL UMSTA
                                   4483 	CALL SWAPP
                                   4484 	CALL DOLIT
                                   4485 	.word 0x100
                                   4486 	CALL UMSTA
                                   4487 	CALL SWAPP 
                                   4488 	CALL DROP
                                   4489 	CALL EMIT
                                   4490 	CALL EMIT
                                   4491 	CALL DOLIT
                                   4492 	.word 0x2043
                                   4493 	CALL DOLIT
                                   4494 	.word 0
                                   4495 	CALL DOLIT
                                   4496 	.word 0x100
                                   4497 	CALL UMMOD
                                   4498 	CALL EMIT
                                   4499 	CALL EMIT
                                   4500 	;JP ORIG
                                   4501 	RET
                                   4502 .endif ; WANT_DEBUG 
                                   4503 
                                   4504 
                                   4505 ;       'BOOT   ( -- a )
                                   4506 ;       The application startup vector.
      001882 18 66                 4507         .word      LINK
                           001884  4508 LINK = . 
      001884 05                    4509         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001885 27 42 4F 4F 54        4510         .ascii     "'BOOT"
      00188A                       4511 TBOOT:
      00188A CD 04 C5         [ 4] 4512         CALL     DOVAR
      00188D 40 02                 4513         .word    APP_RUN      ;application to boot
                                   4514 
                                   4515 ;       COLD    ( -- )
                                   4516 ;       The hilevel cold start s=ence.
      00188F 18 84                 4517         .word      LINK
                           001891  4518         LINK = . 
      001891 04                    4519         .byte      4
      001892 43 4F 4C 44           4520         .ascii     "COLD"
      001896                       4521 COLD:
                           000000  4522 .if WANT_DEBUG
                                   4523         CALL DEBUG
                                   4524 .endif 
      001896 CD 02 E9         [ 4] 4525 COLD1:  CALL     DOLIT
      001899 00 27                 4526         .word      UZERO
      00189B CD 02 E9         [ 4] 4527 	CALL     DOLIT
      00189E 00 06                 4528         .word      UPP
      0018A0 CD 02 E9         [ 4] 4529         CALL     DOLIT
      0018A3 00 1A                 4530 	.word      UEND-UZERO
      0018A5 CD 0A 87         [ 4] 4531         CALL     CMOVE   ;initialize user area
                                   4532 
                           000001  4533 .if PICATOUT_MOD
                                   4534 ; if APP_RUN==0 initialize with ca de 'hi'  
      0018A8 90 CE 40 02      [ 2] 4535         ldw y,APP_RUN 
      0018AC 26 0B            [ 1] 4536         jrne 0$
      0018AE 1D 00 02         [ 2] 4537         subw x,#CELLL 
      0018B1 90 AE 18 69      [ 2] 4538         ldw y,#HI  
      0018B5 FF               [ 2] 4539         ldw (x),y
      0018B6 CD 19 B1         [ 4] 4540         call UPDATRUN 
      0018B9                       4541 0$:        
                                   4542 ; update LAST with APP_LAST 
                                   4543 ; if APP_LAST > LAST else do the opposite
      0018B9 90 CE 40 00      [ 2] 4544         ldw y,APP_LAST 
      0018BD 90 B3 1A         [ 2] 4545         cpw y,ULAST 
      0018C0 22 05            [ 1] 4546         jrugt 1$ 
                                   4547 ; save LAST at APP_LAST  
      0018C2 CD 19 99         [ 4] 4548         call UPDATLAST 
      0018C5 20 06            [ 2] 4549         jra 2$
      0018C7                       4550 1$: ; update LAST with APP_LAST 
      0018C7 90 BF 1A         [ 2] 4551         ldw ULAST,y
      0018CA 90 BF 14         [ 2] 4552         ldw UCNTXT,y 
      0018CD                       4553 2$:  
                                   4554 ; update APP_CP if < app_space 
      0018CD 90 CE 40 04      [ 2] 4555         ldw y,APP_CP  
      0018D1 90 B3 18         [ 2] 4556         cpw y,UCP   
      0018D4 24 06            [ 1] 4557         jruge 3$ 
      0018D6 CD 19 C2         [ 4] 4558         call UPDATCP
      0018D9 90 BE 18         [ 2] 4559         ldw y,UCP   
      0018DC                       4560 3$:
      0018DC 90 BF 18         [ 2] 4561         ldw UCP,y                 
                                   4562 ; update UVP with APP_VP  
                                   4563 ; if APP_VP>UVP else do the opposite 
      0018DF 90 CE 40 06      [ 2] 4564         ldw y,APP_VP 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      0018E3 90 B3 16         [ 2] 4565         cpw y,UVP 
      0018E6 22 05            [ 1] 4566         jrugt 4$
      0018E8 CD 19 D9         [ 4] 4567         call UPDATVP 
      0018EB 20 03            [ 2] 4568         jra 6$
      0018ED                       4569 4$: ; update UVP with APP_VP 
      0018ED 90 BF 16         [ 2] 4570         ldw UVP,y 
      0018F0                       4571 6$:      
                                   4572 .endif ; PICATOUT_MOD
      0018F0 CD 12 B6         [ 4] 4573         CALL     PRESE   ;initialize data stack and TIB
      0018F3 CD 18 8A         [ 4] 4574         CALL     TBOOT
      0018F6 CD 0A 70         [ 4] 4575         CALL     ATEXE   ;application boot
      0018F9 CD 15 7F         [ 4] 4576         CALL     OVERT
      0018FC CC 12 D3         [ 2] 4577         JP     QUIT    ;start interpretation
                                   4578 
                           000001  4579 .if PICATOUT_MOD
                                   4580         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4581         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      0018FF 18 91                   30     .word LINK 
                           001901    31     LINK=.
      001901 03                      32     .byte 3 
      001902 46 50 21                33     .ascii "FP!"
      001905                         34 fptr_store:
      001905 90 93            [ 1]   35     ldw y,x
      001907 90 FE            [ 2]   36     ldw y,(y)
      001909 90 9F            [ 1]   37     ld a,yl 
      00190B B7 30            [ 1]   38     ld FPTR,a 
      00190D 1C 00 02         [ 2]   39     addw x,#CELLL 
      001910 90 93            [ 1]   40     ldw y,x 
      001912 90 FE            [ 2]   41     ldw y,(y)
      001914 90 BF 31         [ 2]   42     ldw PTR16,y
      001917 1C 00 02         [ 2]   43     addw x,#CELLL 
      00191A 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      00191B 19 01                   51     .word LINK 
                           00191D    52 LINK=.
      00191D 06                      53     .byte 6 
      00191E 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



      001924                         55 EEPROM: 
      001924 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001928 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      00192B EF 02            [ 2]   58     ldw (2,x),y 
      00192D 90 5F            [ 1]   59     clrw y 
      00192F FF               [ 2]   60     ldw (x),y 
      001930 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001931 19 1D                   67 	.word LINK 
                           001933    68 	LINK=.
      001933 08                      69 	.byte 8 
      001934 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      00193C                         71 EEPLAST:
      00193C 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      00193F 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001943 EF 02            [ 2]   74 	ldw (2,x),y 
      001945 90 5F            [ 1]   75 	clrw y 
      001947 FF               [ 2]   76 	ldw (x),y 
      001948 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001949 19 33                   83 	.word LINK 
                           00194B    84 	LINK=.
      00194B 07                      85 	.byte 7
      00194C 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001953                         87 EEPRUN:
      001953 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001956 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      00195A EF 02            [ 2]   90 	ldw (2,x),y 
      00195C 90 5F            [ 1]   91 	clrw y 
      00195E FF               [ 2]   92 	ldw (x),y 
      00195F 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001960 19 4B                   99 	.word LINK
                           001962   100 	LINK=.
      001962 06                     101 	.byte 6 
      001963 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001969                        103 EEPCP:
      001969 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      00196C 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001970 EF 02            [ 2]  106 	ldw (2,x),y 
      001972 90 5F            [ 1]  107 	clrw y 
      001974 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001975 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001976 19 62                  115 	.word LINK
                           001978   116 	LINK=.
      001978 06                     117 	.byte 6
      001979 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      00197F                        119 EEPVP:
      00197F 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001982 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001986 EF 02            [ 2]  122 	ldw (2,x),y 
      001988 90 5F            [ 1]  123 	clrw y 
      00198A FF               [ 2]  124 	ldw (x),y 
      00198B 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      00198C 19 78                  131 	.word LINK 
                           00198E   132 	LINK=.
      00198E 0A                     133 	.byte 10
      00198F 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001999                        135 UPDATLAST:
      001999 CD 05 84         [ 4]  136 	call LAST
      00199C CD 03 71         [ 4]  137 	call AT  
      00199F CD 19 3C         [ 4]  138 	call EEPLAST
      0019A2 CC 1B 15         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      0019A5 19 8E                  145 	.word LINK
                           0019A7   146 	LINK=.
      0019A7 09                     147 	.byte 9
      0019A8 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      0019B1                        149 UPDATRUN:
      0019B1 CD 19 53         [ 4]  150 	call EEPRUN
      0019B4 CC 1B 15         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      0019B7 19 A7                  157 	.word LINK 
                           0019B9   158 	LINK=.
      0019B9 08                     159 	.byte 8 
      0019BA 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      0019C2                        161 UPDATCP:
      0019C2 CD 05 74         [ 4]  162 	call CPP 
      0019C5 CD 03 71         [ 4]  163 	call AT 
      0019C8 CD 19 69         [ 4]  164 	call EEPCP 
      0019CB CC 1B 15         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      0019CE 19 B9                  171 	.word LINK
                           0019D0   172 	LINK=.
      0019D0 08                     173 	.byte 8 
      0019D1 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      0019D9                        175 UPDATVP:
      0019D9 CD 05 66         [ 4]  176 	call VPP 
      0019DC CD 03 71         [ 4]  177 	call AT
      0019DF CD 19 7F         [ 4]  178 	call EEPVP 
      0019E2 CC 1B 15         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      0019E5 19 D0                  186     .word LINK 
                           0019E7   187 LINK=.
      0019E7 02                     188     .byte 2
      0019E8 46 40                  189     .ascii "F@"
      0019EA                        190 farat:
      0019EA CD 19 05         [ 4]  191     call fptr_store
      0019ED 92 BC 00 30      [ 5]  192     ldf a,[FPTR]
      0019F1 1D 00 02         [ 2]  193     subw x,#CELLL 
      0019F4 F7               [ 1]  194     ld (x),a 
      0019F5 90 AE 00 01      [ 2]  195     ldw y,#1
      0019F9 91 AF 00 30      [ 1]  196     ldf a,([FPTR],y)
      0019FD E7 01            [ 1]  197     ld (1,x),a
      0019FF 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001A00 19 E7                  204     .word LINK
                           001A02   205     LINK=.
      001A02 03                     206     .byte 3 
      001A03 46 43 40               207     .ascii "FC@" 
      001A06                        208 farcat:
      001A06 CD 19 05         [ 4]  209     call fptr_store 
      001A09 92 BC 00 30      [ 5]  210     ldf a,[FPTR]
      001A0D 1D 00 02         [ 2]  211     subw x,#CELLL 
      001A10 E7 01            [ 1]  212     ld (1,x),a 
      001A12 7F               [ 1]  213     clr (x)
      001A13 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001A14 1A 02                  221     .word LINK 
                           001A16   222 LINK=.
      001A16 06                     223     .byte 6 
      001A17 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001A1D                        225 unlock_eeprom:
      001A1D 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001A21 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001A25 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001A29 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001A2D 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001A32 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001A33 1A 16                  238     .word LINK 
                           001A35   239 LINK=. 
      001A35 06                     240     .byte 6 
      001A36 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001A3C                        242 unlock_flash:
      001A3C 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001A40 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001A44 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001A48 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001A4C 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001A51 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001A52 1A 35                  255 	.word LINK 
                           001A54   256 	LINK=.
      001A54 06                     257 	.byte 6
      001A55 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001A5B                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001A5B 90 BE 31         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001A5E 3D 30            [ 1]  263 	tnz FPTR 
      001A60 26 16            [ 1]  264 	jrne 4$
      001A62 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001A66 24 10            [ 1]  266     jruge 4$
      001A68 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001A6C 25 0D            [ 1]  268     jrult 9$
      001A6E 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



      001A72 22 07            [ 1]  270 	jrugt 9$
      001A74 CD 1A 1D         [ 4]  271 	call unlock_eeprom
      001A77 81               [ 4]  272 	ret 
      001A78 CD 1A 3C         [ 4]  273 4$: call unlock_flash
      001A7B 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001A7C 1A 54                  281 	.word LINK 
                           001A7E   282 	LINK=.
      001A7E 04                     283 	.byte 4 
      001A7F 4C 4F 43 4B            284 	.ascii "LOCK" 
      001A83                        285 lock: 
      001A83 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001A87 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001A8B 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001A8C 1A 7E                  294 	.word LINK 
                           001A8E   295 	LINK=. 
      001A8E 08                     296 	.byte 8 
      001A8F 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001A97                        298 inc_fptr:
      001A97 3C 32            [ 1]  299 	inc PTR8 
      001A99 26 08            [ 1]  300 	jrne 1$
      001A9B 90 BE 30         [ 2]  301 	ldw y,FPTR 
      001A9E 90 5C            [ 2]  302 	incw y 
      001AA0 90 BF 30         [ 2]  303 	ldw FPTR,y 
      001AA3 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001AA4 1A 8E                  315 	.word LINK 
                           001AA6   316 	LINK=. 
      001AA6 07                     317 	.byte 7 
      001AA7 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001AAE                        320 write_byte:
      001AAE 90 93            [ 1]  321 	ldw y,x 
      001AB0 90 FE            [ 2]  322 	ldw y,(y)
      001AB2 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001AB5 90 9F            [ 1]  324 	ld a,yl
      001AB7 92 BD 00 30      [ 4]  325 	ldf [FPTR],a
      001ABB 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001AC0 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001AC2 1A A6                  335     .word LINK 
                           001AC4   336 	LINK=.
      001AC4 04                     337     .byte 4 
      001AC5 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001AC9                        343 ee_cstore:
      001AC9 52 02            [ 2]  344 	sub sp,#VSIZE
      001ACB CD 19 05         [ 4]  345     call fptr_store
      001ACE E6 01            [ 1]  346 	ld a,(1,x)
      001AD0 43               [ 1]  347 	cpl a 
      001AD1 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001AD3 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001AD5 CD 1A 5B         [ 4]  350 	call unlock 
                                    351 	; check if option
      001AD8 3D 30            [ 1]  352 	tnz FPTR 
      001ADA 26 19            [ 1]  353 	jrne 2$
      001ADC 90 BE 31         [ 2]  354 	ldw y,PTR16 
      001ADF 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001AE3 2B 10            [ 1]  356 	jrmi 2$
      001AE5 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001AE9 2A 0A            [ 1]  358 	jrpl 2$
      001AEB 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001AED 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001AF1 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001AF5                        363 2$: 
      001AF5 CD 1A AE         [ 4]  364 	call write_byte 	
      001AF8 0D 02            [ 1]  365 	tnz (OPT,sp)
      001AFA 27 0D            [ 1]  366 	jreq 3$ 
      001AFC 7B 01            [ 1]  367     ld a,(BTW,sp)
      001AFE 90 5F            [ 1]  368     clrw y
      001B00 90 97            [ 1]  369 	ld yl,a 
      001B02 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001B05 FF               [ 2]  371 	ldw (x),y 
      001B06 CD 1A AE         [ 4]  372 	call write_byte
      001B09                        373 3$: 
      001B09 CD 1A 83         [ 4]  374 	call lock 
      001B0C 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001B0E 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001B0F 1A C4                  382 	.word LINK 
                           001B11   383 	LINK=.
      001B11 03                     384 	.byte 3 
      001B12 45 45 21               385 	.ascii "EE!"
      001B15                        386 ee_store:
      001B15 CD 19 05         [ 4]  387 	call fptr_store 
      001B18 CD 1A 5B         [ 4]  388 	call unlock 
      001B1B 90 93            [ 1]  389 	ldw y,x 
      001B1D 90 FE            [ 2]  390 	ldw y,(y)
      001B1F 90 89            [ 2]  391 	pushw y 
      001B21 90 5E            [ 1]  392 	swapw y 
      001B23 FF               [ 2]  393 	ldw (x),y 
      001B24 CD 1A AE         [ 4]  394 	call write_byte 
      001B27 90 85            [ 2]  395 	popw y 
      001B29 1D 00 02         [ 2]  396 	subw x,#CELLL
      001B2C FF               [ 2]  397 	ldw (x),y 
      001B2D CD 1A AE         [ 4]  398 	call write_byte
      001B30 CC 1A 83         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001B33 1B 11                  407 	.word LINK 
                           001B35   408 	LINK=. 
      001B35 09                     409 	.byte 9 
      001B36 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001B3F                        411 row_erase:
      001B3F CD 19 05         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001B42 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001B45 90 AE 1B 8C      [ 2]  416 	ldw y,#row_erase_proc
      001B49 FF               [ 2]  417 	ldw (x),y 
      001B4A CD 0A 4B         [ 4]  418 	call PAD 
      001B4D 90 AE 1B B3      [ 2]  419 	ldw y,#row_erase_proc_end 
      001B51 72 A2 1B 8C      [ 2]  420 	subw y,#row_erase_proc
      001B55 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001B58 FF               [ 2]  422 	ldw (x),y 
      001B59 CD 0A 87         [ 4]  423 	call CMOVE 
      001B5C                        424 block_erase:
      001B5C 90 BE 31         [ 2]  425 	ldw y,FPTR+1
      001B5F 90 A3 20 00      [ 2]  426 	cpw y,#app_space 
      001B63 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001B65 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001B69 24 01            [ 1]  430 	jruge 1$
      001B6B 81               [ 4]  431 	ret ; bad address 
      001B6C 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



      001B70 23 01            [ 2]  433 	jrule 2$ 
      001B72 81               [ 4]  434 	ret ; bad address 
      001B73                        435 2$:	
      001B73 CD 1A 1D         [ 4]  436 	call unlock_eeprom 
      001B76 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001B78                        439 erase_flash:
      001B78 CD 1A 3C         [ 4]  440 	call unlock_flash 
      001B7B                        441 proceed_erase:
      001B7B CD 0A 4B         [ 4]  442 	call PAD 
      001B7E 90 93            [ 1]  443 	ldw y,x
      001B80 90 FE            [ 2]  444 	ldw y,(y)
      001B82 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001B85 90 FD            [ 4]  446 	call (y) 
      001B87 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001B8B 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001B8C                        451 row_erase_proc:
      001B8C 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001B90 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001B94 4F               [ 1]  454 	clr a 
      001B95 90 5F            [ 1]  455 	clrw y 
      001B97 91 A7 00 30      [ 1]  456 	ldf ([FPTR],y),a
      001B9B 90 5C            [ 2]  457     incw y
      001B9D 91 A7 00 30      [ 1]  458 	ldf ([FPTR],y),a
      001BA1 90 5C            [ 2]  459     incw y
      001BA3 91 A7 00 30      [ 1]  460 	ldf ([FPTR],y),a
      001BA7 90 5C            [ 2]  461     incw y
      001BA9 91 A7 00 30      [ 1]  462 	ldf ([FPTR],y),a
      001BAD 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001BB2 81               [ 4]  464 	ret
      001BB3                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001BB3                        478 copy_buffer:
      001BB3 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001BB5 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001BB9 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001BBD 90 5F            [ 1]  483 	clrw y
      001BBF F6               [ 1]  484 1$:	ld a,(x)
      001BC0 91 A7 00 30      [ 1]  485 	ldf ([FPTR],y),a
      001BC4 5C               [ 2]  486 	incw x 
      001BC5 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001BC7 0A 01            [ 1]  488 	dec (BCNT,sp)
      001BC9 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001BCB 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001BD0 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001BD1 81               [ 4]  493 	ret 
      001BD2                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001BD2                        500 copy_prog_to_ram:
      001BD2 1D 00 06         [ 2]  501 	subw x,#6
      001BD5 90 AE 1B B3      [ 2]  502 	ldw y,#copy_buffer 
      001BD9 EF 04            [ 2]  503 	ldw (4,x),y 
      001BDB 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001BDF EF 02            [ 2]  505 	ldw (2,x),y 
      001BE1 90 AE 1B D2      [ 2]  506 	ldw y,#copy_buffer_end 
      001BE5 72 A2 1B B3      [ 2]  507 	subw y,#copy_buffer  
      001BE9 FF               [ 2]  508 	ldw (x),y 
      001BEA CD 0A 87         [ 4]  509 	call CMOVE 
      001BED 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001BEE 1B 35                  519 	.word LINK 
                           001BF0   520 	LINK=.
      001BF0 06                     521 	.byte 6 
      001BF1 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001BF7                        523 write_row:
      001BF7 CD 19 05         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001BFA A6 80            [ 1]  526 	ld a,#0x80 
      001BFC B4 32            [ 1]  527 	and a,PTR8 
      001BFE B7 32            [ 1]  528 	ld PTR8,a  
      001C00 CD 1B D2         [ 4]  529 	call copy_prog_to_ram
      001C03 CD 1A 5B         [ 4]  530 	call unlock
      001C06 90 93            [ 1]  531 	ldw y,x 
      001C08 90 FE            [ 2]  532 	ldw y,(y)
      001C0A 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001C0D 89               [ 2]  534 	pushw x 
      001C0E 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001C0F CD 17 00         [ 4]  536 	call TIBBASE
      001C12 CD 1A 83         [ 4]  537 	call lock
      001C15 85               [ 2]  538 	popw x 
      001C16 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001C17 1B F0                  547 		.word LINK 
                           001C19   548 		LINK=.
      001C19 07                     549 		.byte 7 
      001C1A 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001C21                        551 set_option: 
      001C21 90 93            [ 1]  552 		ldw y,x 
      001C23 90 FE            [ 2]  553 		ldw y,(y)
      001C25 27 06            [ 1]  554 		jreq 1$
      001C27 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001C2B 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001C2D 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001C30 81               [ 4]  559 		ret
      001C31 90 58            [ 2]  560 2$:		sllw y 
      001C33 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001C37 FF               [ 2]  562 		ldw (x),y 
      001C38 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001C3B 90 5F            [ 1]  564 		clrw y 
      001C3D FF               [ 2]  565 		ldw (x),y 
      001C3E CD 1A C9         [ 4]  566 		call ee_cstore
      001C41 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001C42 1C 19                  576 	.word LINK  
                           001C44   577 	LINK=.
      001C44 08                     578 	.byte 8 
      001C45 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001C4D                        580 pristine:
                                    581 ;;; erase EEPROM
      001C4D CD 19 24         [ 4]  582 	call EEPROM 
      001C50 CD 05 EB         [ 4]  583 1$:	call DDUP 
      001C53 CD 1B 3F         [ 4]  584 	call row_erase
      001C56 90 93            [ 1]  585 	ldw y,x 
      001C58 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001C5B 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001C5F EF 02            [ 2]  588 	ldw (2,x),y
      001C61 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001C65 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001C67 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001C6B FF               [ 2]  593 2$:	ldw (x),y   
      001C6C 90 5F            [ 1]  594 	clrw y 
      001C6E EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001C70 CD 05 EB         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



      001C73 CD 1C 21         [ 4]  597 	call set_option
      001C76 90 93            [ 1]  598 	ldw y,x 
      001C78 90 FE            [ 2]  599 	ldw y,(y)
      001C7A 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001C7C 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001C80 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001C82 90 AE 20 00      [ 2]  604 	ldw y,#app_space
      001C86 EF 02            [ 2]  605 	ldw (2,x),y  
      001C88 90 5F            [ 1]  606 	clrw y 
      001C8A FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001C8B CD 1B 3F         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001C8E 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001C91 90 5F            [ 1]  611 	clrw y  
      001C93 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001C94 CD 04 18         [ 4]  613 	call DUPP  
      001C97 CD 1C B4         [ 4]  614 	call reset_vector
      001C9A 90 93            [ 1]  615 	ldw y,x 
      001C9C 90 FE            [ 2]  616 	ldw y,(y)
      001C9E 90 5C            [ 2]  617 	incw y   ; next vector 
      001CA0 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001CA4 25 ED            [ 1]  619 	jrult 4$
      001CA6 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001CA9 1C 44                  628 	.word LINK 
                           001CAB   629 	LINK=. 
      001CAB 08                     630 	.byte 8 
      001CAC 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001CB4                        632 reset_vector:
      001CB4 90 93            [ 1]  633 	ldw y,x
      001CB6 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001CB9 90 FE            [ 2]  635 	ldw y,(y)
      001CBB 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001CBF 27 3A            [ 1]  637 	jreq 9$
      001CC1 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001CC5 22 34            [ 1]  639 	jrugt 9$  
      001CC7 90 58            [ 2]  640 	sllw y 
      001CC9 90 58            [ 2]  641 	sllw y 
      001CCB 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001CCF 90 BF 22         [ 2]  643 	ldw YTEMP,y
      001CD2 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001CD5 EF 02            [ 2]  645 	ldw (2,x),y 
      001CD7 90 5F            [ 1]  646 	clrw y
      001CD9 FF               [ 2]  647 	ldw (x),y 
      001CDA A6 82            [ 1]  648 	ld a,#0x82 
      001CDC 90 95            [ 1]  649 	ld yh,a
      001CDE EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001CE0 CD 1B 15         [ 4]  651 	call ee_store
      001CE3 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001CE6 90 5F            [ 1]  653 	clrw y 
      001CE8 FF               [ 2]  654 	ldw (x),y 
      001CE9 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001CED EF 04            [ 2]  656 	ldw (4,x),y 
      001CEF 90 BE 22         [ 2]  657 	ldw y,YTEMP  
      001CF2 72 A9 00 02      [ 2]  658 	addw y,#2
      001CF6 EF 02            [ 2]  659 	ldw (2,x),y 
      001CF8 CD 1B 15         [ 4]  660 	call ee_store
      001CFB 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= ca are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( ca -- )
                                    669 ;------------------------------
      001CFC 1C AB                  670 	.word LINK 
                           001CFE   671 	LINK=.
      001CFE 07                     672 	.byte 7
      001CFF 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001D06                        679 CHKIVEC:
      001D06 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001D08 90 93            [ 1]  681 	ldw y,x 
      001D0A 90 FE            [ 2]  682 	ldw y,(y)
      001D0C 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001D0E 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001D10 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001D13 BF 31            [ 2]  686 	ldw PTR16,X
      001D15 AE FF FC         [ 2]  687 	ldw x,#-4 
      001D18 1C 00 04         [ 2]  688 1$:	addw x,#4
      001D1B A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001D1E 27 22            [ 1]  690 	jreq 9$
      001D20 90 93            [ 1]  691 	ldw y,x  
      001D22 91 D6 31         [ 4]  692 	ld a,([PTR16],y)
      001D25 11 03            [ 1]  693 	cp a,(CADR,sp)
      001D27 25 EF            [ 1]  694 	jrult 1$
      001D29 90 5C            [ 2]  695 	incw y 
      001D2B 91 D6 31         [ 4]  696 	ld a,([PTR16],y)
      001D2E 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001D30 25 E6            [ 1]  698 	jrult 1$ 
      001D32 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001D34 54               [ 2]  700 	srlw x
      001D35 54               [ 2]  701 	srlw x 
      001D36 90 93            [ 1]  702 	ldw y,x 
      001D38 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001D3A FF               [ 2]  704 	ldw (x),y
      001D3B CD 1C B4         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001D3E 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001D40 20 D6            [ 2]  707 	jra 1$
      001D42 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001D44 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001D47 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001D49 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001D4A 1C FE                  719 	.word LINK
                           001D4C   720 	LINK=.
      001D4C 08                     721 	.byte 8 
      001D4D 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001D55                        723 set_vector:
      001D55 90 93            [ 1]  724     ldw y,x 
      001D57 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001D5A 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001D5C 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001D60 23 04            [ 2]  728 	jrule 2$
      001D62 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001D65 81               [ 4]  730 	ret
      001D66 90 58            [ 2]  731 2$:	sllw y 
      001D68 90 58            [ 2]  732 	sllw y 
      001D6A 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001D6E 90 BF 22         [ 2]  734 	ldw YTEMP,y ; vector address 
      001D71 A6 82            [ 1]  735 	ld a,#0x82 
      001D73 90 95            [ 1]  736 	ld yh,a 
      001D75 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001D77 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001D79 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001D7C EF 04            [ 2]  741 	ldw (4,x),y 
      001D7E 90 BE 22         [ 2]  742 	ldw y,YTEMP
      001D81 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001D83 90 5F            [ 1]  744 	clrw y 
      001D85 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001D86 CD 1B 15         [ 4]  746 	call ee_store 
      001D89 90 93            [ 1]  747 	ldw y,x 
      001D8B 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001D8E 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001D91 EF 04            [ 2]  750 	ldw (4,x),y 
      001D93 90 BE 22         [ 2]  751 	ldw y,YTEMP 
      001D96 72 A9 00 02      [ 2]  752 	addw y,#2 
      001D9A EF 02            [ 2]  753 	ldw (2,x),y 
      001D9C 90 5F            [ 1]  754 	clrw y 
      001D9E FF               [ 2]  755 	ldw (x),y 
      001D9F CD 1B 15         [ 4]  756 	call ee_store
      001DA2 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001DA5 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001DA6 1D 4C                  765 	.word LINK
                           001DA8   766 	LINK=.
      001DA8 03                     767 	.byte 3
      001DA9 45 45 2C               768 	.ascii "EE,"
      001DAC                        769 ee_comma:
      001DAC 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001DAF 90 BE 18         [ 2]  771 	ldw y,UCP
      001DB2 90 89            [ 2]  772 	pushw y 
      001DB4 EF 02            [ 2]  773 	ldw (2,x),y 
      001DB6 90 5F            [ 1]  774 	clrw y 
      001DB8 FF               [ 2]  775 	ldw (x),y
      001DB9 CD 1B 15         [ 4]  776 	call ee_store
      001DBC 90 85            [ 2]  777 	popw y 
      001DBE 72 A9 00 02      [ 2]  778 	addw y,#2
      001DC2 90 BF 18         [ 2]  779 	ldw UCP,y
      001DC5 81               [ 4]  780 	ret 
                                    781 
                                    782 ;-------------------------
                                    783 ; Compile byte to flash 
                                    784 ; EEC, ( c -- )	
                                    785 ;-------------------------
      001DC6 1D A8                  786 	.word LINK 
                           001DC8   787 	LINK=.
      001DC8 04                     788 	.byte 4 
      001DC9 45 45 43 2C            789 	.ascii "EEC,"
      001DCD                        790 ee_ccomma:
      001DCD 1D 00 04         [ 2]  791 	subw x,#2*CELLL 
      001DD0 90 BE 18         [ 2]  792 	ldw y,UCP
      001DD3 90 89            [ 2]  793 	pushw y 
      001DD5 EF 02            [ 2]  794 	ldw (2,x),y 
      001DD7 90 5F            [ 1]  795 	clrw y 
      001DD9 FF               [ 2]  796 	ldw (x),y
      001DDA CD 1A C9         [ 4]  797 	call ee_cstore
      001DDD 90 85            [ 2]  798 	popw y 
      001DDF 90 5C            [ 2]  799 	incw y 
      001DE1 90 BF 18         [ 2]  800 	ldw UCP,y
      001DE4 81               [ 4]  801 	ret 
                                    802 
                                    803 
                                    804 ;--------------------------
                                    805 ; copy FLASH block to ROWBUF
                                    806 ; ROW2BUF ( ud -- )
                                    807 ;--------------------------
      001DE5 1D C8                  808 	.word LINK 
                           001DE7   809 	LINK=.
      001DE7 07                     810 	.byte 7 
      001DE8 52 4F 57 32 42 55 46   811 	.ascii "ROW2BUF"
      001DEF                        812 ROW2BUF: 
      001DEF CD 19 05         [ 4]  813 	call fptr_store 
      001DF2 A6 80            [ 1]  814 	ld a,#BLOCK_SIZE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



      001DF4 88               [ 1]  815 	push a 
      001DF5 B4 32            [ 1]  816 	and a,PTR8 ; block align 
      001DF7 B7 32            [ 1]  817 	ld PTR8,a
      001DF9 90 AE 16 80      [ 2]  818 	ldw y,#ROWBUFF 
      001DFD 92 BC 00 30      [ 5]  819 1$: ldf a,[FPTR]
      001E01 90 F7            [ 1]  820 	ld (y),a
      001E03 CD 1A 97         [ 4]  821 	call inc_fptr
      001E06 90 5C            [ 2]  822 	incw y 
      001E08 0A 01            [ 1]  823 	dec (1,sp)
      001E0A 26 F1            [ 1]  824 	jrne 1$ 
      001E0C 84               [ 1]  825 	pop a 
      001E0D 81               [ 4]  826 	ret 
                                    827 
                                    828 
                                    829 ;---------------------------
                                    830 ; copy ROWBUFF to flash 
                                    831 ; BUF2ROW ( ud -- )
                                    832 ; ud is row address as double 
                                    833 ;---------------------------
      001E0E 1D E7                  834 	.word LINK 
                           001E10   835 	LINK=.
      001E10 07                     836 	.byte 7 
      001E11 42 55 46 32 52 4F 57   837 	.ascii "BUF2ROW" 
      001E18                        838 BUF2ROW:
      001E18 CD 05 13         [ 4]  839 	call TBUF ; ( ud rb -- )
      001E1B CD 05 C0         [ 4]  840 	call ROT 
      001E1E CD 05 C0         [ 4]  841 	call ROT  ; ( rb ud -- )
      001E21 CD 1B F7         [ 4]  842 	call write_row 
      001E24 81               [ 4]  843 	ret 
                                    844 
                                    845 ;---------------------------------
                                    846 ; how many byte free in that row 
                                    847 ; RFREE ( a -- n )
                                    848 ; a is least byte of target address
                                    849 ;----------------------------------
      001E25 1E 10                  850 	.word LINK 
                           001E27   851 	LINK=.
      001E27 05                     852 	.byte 5 
      001E28 52 46 52 45 45         853 	.ascii "RFREE"
      001E2D                        854 RFREE:
      001E2D E6 01            [ 1]  855 	ld a,(1,x)
      001E2F A4 7F            [ 1]  856 	and a,#BLOCK_SIZE-1 
      001E31 B7 22            [ 1]  857 	ld YTEMP,a 
      001E33 A6 80            [ 1]  858 	ld a,#BLOCK_SIZE 
      001E35 B0 22            [ 1]  859 	sub a,YTEMP 
      001E37 90 5F            [ 1]  860 	clrw y 
      001E39 90 97            [ 1]  861 	ld yl,a
      001E3B FF               [ 2]  862 	ldw (x),y 
      001E3C 81               [ 4]  863 	ret 
                                    864 
                                    865 ;---------------------------------
                                    866 ; write u bytes to flash/EEPROM 
                                    867 ; constraint to row limit 
                                    868 ; RAM2EE ( ud a u -- u2 )
                                    869 ; ud flash address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



                                    870 ; a ram address 
                                    871 ; u bytes count
                                    872 ; return u2 bytes written  
                                    873 ;-------------------------------
      001E3D 1E 27                  874 	.word LINK 
                           001E3F   875 	LINK=. 
      001E3F 06                     876 	.byte 6
      001E40 52 41 4D 32 45 45      877 	.ascii "RAM2EE"
                                    878 	
      001E46                        879 RAM2EE:
                                    880 ; copy ud on top 
      001E46 90 93            [ 1]  881 	ldw y,x 
      001E48 90 EE 06         [ 2]  882 	ldw y,(6,y) ; LSW of ud  
      001E4B 90 BF 22         [ 2]  883 	ldw YTEMP,y 
      001E4E 90 93            [ 1]  884 	ldw y,x 
      001E50 90 EE 04         [ 2]  885 	ldw y,(4,y)  ; MSW of ud 
      001E53 1D 00 04         [ 2]  886 	subw x,#2*CELLL 
      001E56 FF               [ 2]  887 	ldw (x),y 
      001E57 90 BE 22         [ 2]  888 	ldw y,YTEMP 
      001E5A EF 02            [ 2]  889 	ldw (2,x),y 
      001E5C CD 1D EF         [ 4]  890 	call ROW2BUF 
      001E5F 90 93            [ 1]  891 	ldw y,x 
      001E61 90 EE 06         [ 2]  892 	ldw y,(6,y)
      001E64 90 89            [ 2]  893 	pushw y ; udl 
      001E66 90 9F            [ 1]  894 	ld a,yl
      001E68 A4 7F            [ 1]  895 	and a,#BLOCK_SIZE-1 
      001E6A 90 5F            [ 1]  896 	clrw y 
      001E6C 90 97            [ 1]  897 	ld yl,a 
      001E6E 72 A9 16 80      [ 2]  898 	addw y,#ROWBUFF 
      001E72 1D 00 02         [ 2]  899 	subw x,#CELLL 
      001E75 FF               [ 2]  900 	ldw (x),y  
      001E76 CD 04 28         [ 4]  901 	call SWAPP ;  ( ud a ra u -- )
      001E79 CD 03 C2         [ 4]  902 	call RFROM  
      001E7C CD 1E 2D         [ 4]  903 	call RFREE 
      001E7F CD 07 00         [ 4]  904 	call MIN
      001E82 CD 04 18         [ 4]  905 	call DUPP 
      001E85 CD 03 E1         [ 4]  906 	call TOR  
      001E88 CD 0A 87         [ 4]  907 	call CMOVE
      001E8B CD 1E 18         [ 4]  908 	call BUF2ROW 
      001E8E CD 03 C2         [ 4]  909 	call RFROM 
      001E91 81               [ 4]  910 	ret 
                                    911 
                                    912 ;--------------------------
                                    913 ; expand 16 bit address 
                                    914 ; to 32 bit address 
                                    915 ; FADDR ( a -- ud )
                                    916 ;--------------------------
      001E92 1E 3F                  917 	.word LINK 
                           001E94   918 	LINK=. 
      001E94 05                     919 	.byte 5 
      001E95 46 41 44 44 52         920 	.ascii "FADDR"
      001E9A                        921 FADDR:
      001E9A CC 09 4B         [ 2]  922 	jp ZERO 
                                    923 
                                    924 ;--------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    925 ; move new colon definition to FLASH 
                                    926 ; using WR-ROW for efficiency 
                                    927 ; preserving bytes already used 
                                    928 ; in the current block. 
                                    929 ; ud+c must not exceed block boundary 
                                    930 ; at this point the compiler as completed
                                    931 ; in RAM and pointers CP and CNTXT updated.
                                    932 ; CNTXT point to nfa of new word and  
                                    933 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    934 ; 
                                    935 ; FMOVE ( -- cp+ )
                                    936 ; 
                                    937 ;--------------------------
      001E9D 1E 94                  938 	.word LINK 
                           001E9F   939 	LINK=.
      001E9F 05                     940 	.byte 5 
      001EA0 46 4D 4F 56 45         941 	.ascii "FMOVE" 
      001EA5                        942 FMOVE:
      001EA5 CD 05 25         [ 4]  943 	call TFLASH 
      001EA8 CD 03 71         [ 4]  944 	CALL AT 
      001EAB CD 03 1C         [ 4]  945 	CALL QBRAN 
      001EAE 1F 29                  946 	.word no_move  
      001EB0 CD 05 74         [ 4]  947 	call CPP
      001EB3 CD 03 71         [ 4]  948 	call AT  
      001EB6 CD 04 18         [ 4]  949 	call DUPP ; ( udl udl -- )
      001EB9 CD 05 58         [ 4]  950 	call CNTXT 
      001EBC CD 03 71         [ 4]  951 	call AT 
      001EBF CD 02 E9         [ 4]  952 	call DOLIT 
      001EC2 00 02                  953 	.word 2 
      001EC4 CD 06 5E         [ 4]  954 	call SUBB ; ( udl udl a -- )
      001EC7 CD 04 28         [ 4]  955 	call SWAPP 
      001ECA CD 1E 9A         [ 4]  956 	call FADDR 
      001ECD CD 05 C0         [ 4]  957 	call ROT  ; ( udl ud a -- )
      001ED0 CD 04 18         [ 4]  958 	call DUPP 
      001ED3 CD 03 E1         [ 4]  959 	call TOR    ; R: a 
      001ED6                        960 FMOVE2: 
      001ED6 CD 0A 3A         [ 4]  961 	call HERE 
      001ED9 CD 03 D5         [ 4]  962 	call RAT 
      001EDC CD 06 5E         [ 4]  963 	call SUBB ; (udl ud a wl -- )
      001EDF                        964 next_row:
      001EDF CD 04 18         [ 4]  965 	call DUPP 
      001EE2 CD 03 E1         [ 4]  966 	call TOR  ; ( udl ud a wl -- ) R: a wl
      001EE5 CD 1E 46         [ 4]  967 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      001EE8 CD 04 18         [ 4]  968 	call DUPP 
      001EEB CD 03 E1         [ 4]  969 	call TOR
      001EEE CD 06 00         [ 4]  970 	call PLUS  ; ( udl+ ) 
      001EF1 CD 04 18         [ 4]  971 	call DUPP 
      001EF4 CD 09 4B         [ 4]  972 	call ZERO   ; ( udl+ ud -- )
      001EF7 CD 03 C2         [ 4]  973 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      001EFA CD 03 C2         [ 4]  974 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      001EFD CD 04 42         [ 4]  975 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      001F00 CD 06 5E         [ 4]  976 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      001F03 CD 04 18         [ 4]  977 	call DUPP 
      001F06 CD 03 1C         [ 4]  978 	call QBRAN
      001F09 1F 22                  979 	.word fmove_done 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



      001F0B CD 04 28         [ 4]  980 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      001F0E CD 03 C2         [ 4]  981 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      001F11 CD 06 00         [ 4]  982 	call PLUS  ; ( udl+2 ud wl- a+ )
      001F14 CD 04 18         [ 4]  983 	call DUPP 
      001F17 CD 03 E1         [ 4]  984 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      001F1A CD 04 28         [ 4]  985 	call SWAPP 
      001F1D CD 03 33         [ 4]  986 	call BRAN
      001F20 1E DF                  987 	.word next_row  
      001F22                        988 fmove_done:	
      001F22 CD 03 C2         [ 4]  989 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      001F25 1C 00 0A         [ 2]  990 	addw x,#5*CELLL ; (  -- udl+ ) new CP 
      001F28 81               [ 4]  991  	ret  
      001F29                        992 no_move:
      001F29 CD 09 4B         [ 4]  993 	call ZERO
      001F2C 81               [ 4]  994 	ret 
                                    995 
                                    996 ;------------------------------------------
                                    997 ; adjust pointers after **FMOVE** operetion.
                                    998 ; UPDAT-PTR ( cp+ -- )
                                    999 ; cp+ is new CP position after FMOVE 
                                   1000 ;-------------------------------------------
      001F2D 1E 9F                 1001 	.word LINK 
                           001F2F  1002 	LINK=.
      001F2F 09                    1003 	.byte 9
      001F30 55 50 44 41 54 2D 50  1004 	.ascii "UPDAT-PTR" 
             54 52
      001F39                       1005 UPDATPTR:
                                   1006 ;reset VP to previous position  
      001F39 CD 19 7F         [ 4] 1007 	call EEPVP 
      001F3C CD 04 0E         [ 4] 1008 	call DROP 
      001F3F CD 03 71         [ 4] 1009 	call AT
      001F42 CD 05 66         [ 4] 1010 	call VPP 
      001F45 CD 03 5A         [ 4] 1011 	call STORE
                                   1012 ;update CONTEXT and LAST 
      001F48 CD 19 69         [ 4] 1013 	call EEPCP 
      001F4B CD 04 0E         [ 4] 1014 	call DROP
      001F4E CD 03 71         [ 4] 1015 	call AT
      001F51 CD 02 E9         [ 4] 1016 	call DOLIT 
      001F54 00 02                 1017 	.word 2 
      001F56 CD 06 00         [ 4] 1018 	call PLUS 
      001F59 CD 04 18         [ 4] 1019 	call DUPP 
      001F5C CD 05 58         [ 4] 1020 	call CNTXT 
      001F5F CD 03 5A         [ 4] 1021 	call STORE
      001F62 CD 05 84         [ 4] 1022 	call LAST
      001F65 CD 03 5A         [ 4] 1023 	call STORE 
      001F68 CD 19 99         [ 4] 1024 	call UPDATLAST 
                                   1025 ;update CP 
      001F6B CD 05 74         [ 4] 1026 	call CPP 
      001F6E CD 03 5A         [ 4] 1027 	call STORE
      001F71 CD 19 C2         [ 4] 1028 	call UPDATCP 
      001F74 81               [ 4] 1029 	ret 
                                   1030 
                                   1031 ;-----------------------------
                                   1032 ; move interrupt sub-routine
                                   1033 ; in flash memory
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



                                   1034 ;----------------------------- 
      001F75 1F 2F                 1035 	.word LINK 
                           001F77  1036 	LINK=. 
      001F77 06                    1037 	.byte 6
      001F78 49 46 4D 4F 56 45     1038 	.ascii "IFMOVE" 
      001F7E                       1039 IFMOVE:
      001F7E CD 05 25         [ 4] 1040 	call TFLASH 
      001F81 CD 03 71         [ 4] 1041 	CALL AT 
      001F84 CD 03 1C         [ 4] 1042 	CALL QBRAN 
      001F87 1F 29                 1043 	.word no_move 
      001F89 CD 05 74         [ 4] 1044 	call CPP 
      001F8C CD 03 71         [ 4] 1045 	call AT 
      001F8F CD 04 18         [ 4] 1046 	call DUPP ; ( udl udl -- )
      001F92 CD 19 7F         [ 4] 1047 	call EEPVP 
      001F95 CD 04 0E         [ 4] 1048 	call DROP
      001F98 CD 03 71         [ 4] 1049 	call AT  ; ( udl udl a )
      001F9B CD 03 E1         [ 4] 1050 	call TOR 
      001F9E CD 1E 9A         [ 4] 1051 	call FADDR
      001FA1 CD 03 D5         [ 4] 1052 	call RAT ; ( udl ud a -- ) R: a 
      001FA4 CC 1E D6         [ 2] 1053 	jp FMOVE2 
                                   1054 
                                   1055 
                                   1056 ; application code begin here
      002000                       1057 	.bndry 128 ; align on flash block  
      002000                       1058 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   4582 .endif ; PICATOUT_MOD
                                   4583 
                                   4584 ;===============================================================
                                   4585 
                           001F77  4586 LASTN =	LINK   ;last name defined
                                   4587 
                                   4588 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000681 R   |   6 ABOR1      0011D6 R
  6 ABOR2      0011ED R   |   6 ABORQ      0011CE R   |   6 ABORT      0011BF R
  6 ABRTQ      0014AA R   |   6 ABSS       000678 R   |   6 ACCEP      001155 R
  6 ACCP1      00115E R   |   6 ACCP2      001184 R   |   6 ACCP3      001187 R
  6 ACCP4      001189 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00059F R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        001495 R   |   6 AGAIN      0013EB R   |   6 AHEAD      001448 R
  6 ALLOT      0012FE R   |   6 ANDD       000464 R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         000371 R   |   6 ATEXE      000A70 R   |   6 AUTORUN    000123 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0010FD R   |   6 BASE       0004D5 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001340 R   |   6 BDIGS      000B58 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0013CD R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000F95 R   |   6 BKSP       0010CD R
    BKSPP   =  000008     |   6 BLANK      00093E R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       000333 R
    BTW     =  000001     |   6 BUF2ROW    001E18 R   |   6 BYE        0000B0 R
    CADR    =  000003     |     CALLL   =  0000CD     |   6 CANT_FOR   0001CE R
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CARRY   =  000026     |   6 CAT        00038F R   |   6 CCOMMA     001322 R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      0008C3 R
  6 CELLP      0008B4 R   |   6 CELLS      0008D2 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000D85 R
  6 CHAR2      000D88 R   |   6 CHKIVEC    001D06 R   |     CLKOPT  =  004807 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_C=  000002     |     CLKOPT_E=  000003     |     CLKOPT_P=  000000 
    CLKOPT_P=  000001     |     CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6 
    CLK_CKDI=  000000     |     CLK_CKDI=  000001     |     CLK_CKDI=  000002 
    CLK_CKDI=  000003     |     CLK_CKDI=  000004     |     CLK_CMSR=  0050C3 
    CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1     |     CLK_ECKR=  000000 
    CLK_ECKR=  000001     |     CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0 
    CLK_ICKR=  000002     |     CLK_ICKR=  000000     |     CLK_ICKR=  000001 
    CLK_ICKR=  000003     |     CLK_ICKR=  000004     |     CLK_ICKR=  000005 
    CLK_PCKE=  0050C7     |     CLK_PCKE=  000000     |     CLK_PCKE=  000001 
    CLK_PCKE=  000007     |     CLK_PCKE=  000005     |     CLK_PCKE=  000006 
    CLK_PCKE=  000004     |     CLK_PCKE=  000002     |     CLK_PCKE=  000003 
    CLK_PCKE=  0050CA     |     CLK_PCKE=  000003     |     CLK_PCKE=  000002 
    CLK_PCKE=  000007     |     CLK_SWCR=  0050C5     |     CLK_SWCR=  000000 
    CLK_SWCR=  000001     |     CLK_SWCR=  000002     |     CLK_SWCR=  000003 
    CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4 
    CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2     |   6 CMOV1      000A8F R
  6 CMOV2      000AA7 R   |   6 CMOVE      000A87 R   |     CNTDWN  =  00002E 
  6 CNTXT      000558 R   |   6 COLD       001896 R   |   6 COLD1      001896 R
  6 COLON      001640 R   |   6 COMMA      00130B R   |   6 COMPI      001350 R
    COMPO   =  000040     |   6 CONSTANT   0016DE R   |     CONVERT_=  000001 
  6 COUNT      000A23 R   |   6 CPP        000574 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000DB3 R   |   6 CREAT      001686 R
    CRR     =  00000D     |   6 CSTOR      00037E R   |     CTOP    =  000080 
  6 DAT        000A03 R   |     DATSTK  =  001670     |   6 DDROP      0005E0 R
  6 DDUP       0005EB R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000C08 R   |   6 DEPTH      00098E R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000C4D R   |   6 DI         0000BE R
  6 DIG        000B81 R   |   6 DIGIT      000B1C R   |   6 DIGS       000B92 R
  6 DIGS1      000B92 R   |   6 DIGS2      000B9F R   |   6 DIGTQ      000C1C R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000658 R
  6 DNEGA      00063D R   |   6 DOCONST    001708 R   |   6 DOLIT      0002E9 R
  6 DONXT      0002FD R   |   6 DOSTR      000DC9 R   |   6 DOT        000E4E R
  6 DOT1       000E64 R   |   6 DOTI1      00182A R   |   6 DOTID      001814 R
  6 DOTO1      001262 R   |   6 DOTOK      001248 R   |   6 DOTPR      000F77 R
  6 DOTQ       0014C4 R   |   6 DOTQP      000DF2 R   |   6 DOTR       000E00 R
  6 DOTS       0017B6 R   |   6 DOTS1      0017C1 R   |   6 DOTS2      0017CA R
  6 DOVAR      0004C5 R   |   6 DROP       00040E R   |   6 DSTOR      0009DD R
  6 DUMP       00176C R   |   6 DUMP1      001783 R   |   6 DUMP3      0017A5 R
  6 DUMPP      00173B R   |   6 DUPP       000418 R   |   6 EDIGS      000BBD R
  6 EEPCP      001969 R   |   6 EEPLAST    00193C R   |   6 EEPROM     001924 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     001953 R   |   6 EEPVP      00197F R   |   6 EI         0000B7 R
  6 ELSEE      001423 R   |   6 EMIT       0002D3 R   |   6 EQ1        00069C R
  6 EQUAL      000686 R   |   6 ERASE      000AE9 R   |     ERR     =  00001B 
  6 EVAL       00128B R   |   6 EVAL1      00128B R   |   6 EVAL2      0012A7 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

  6 EXE1       000A7E R   |   6 EXECU      000343 R   |   6 EXIT       000353 R
    EXT     =  000000     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000B44 R   |   6 FADDR      001E9A R   |     FHSE    =  7A1200 
    FHSI    =  F42400     |   6 FILL       000AB6 R   |   6 FILL1      000AD3 R
  6 FILL2      000ADC R   |   6 FIND       001029 R   |   6 FIND1      001047 R
  6 FIND2      001075 R   |   6 FIND3      001081 R   |   6 FIND4      001095 R
  6 FIND5      0010A2 R   |   6 FIND6      001086 R   |     FLASH_BA=  008000 
    FLASH_CR=  00505A     |     FLASH_CR=  000002     |     FLASH_CR=  000000 
    FLASH_CR=  000003     |     FLASH_CR=  000001     |     FLASH_CR=  00505B 
    FLASH_CR=  000005     |     FLASH_CR=  000004     |     FLASH_CR=  000007 
    FLASH_CR=  000000     |     FLASH_CR=  000006     |     FLASH_DU=  005064 
    FLASH_DU=  0000AE     |     FLASH_DU=  000056     |     FLASH_EN=  027FFF 
    FLASH_FP=  00505D     |     FLASH_FP=  000000     |     FLASH_FP=  000001 
    FLASH_FP=  000002     |     FLASH_FP=  000003     |     FLASH_FP=  000004 
    FLASH_FP=  000005     |     FLASH_IA=  00505F     |     FLASH_IA=  000003 
    FLASH_IA=  000002     |     FLASH_IA=  000006     |     FLASH_IA=  000001 
    FLASH_IA=  000000     |     FLASH_NC=  00505C     |     FLASH_NF=  00505E 
    FLASH_NF=  000000     |     FLASH_NF=  000001     |     FLASH_NF=  000002 
    FLASH_NF=  000003     |     FLASH_NF=  000004     |     FLASH_NF=  000005 
    FLASH_PU=  005062     |     FLASH_PU=  000056     |     FLASH_PU=  0000AE 
    FLASH_SI=  020000     |     FLASH_WS=  00480D     |     FLSI    =  01F400 
  6 FMOVE      001EA5 R   |   6 FMOVE2     001ED6 R   |   6 FOR        0013A0 R
  6 FORGET     000154 R   |   6 FORGET1    000186 R   |   6 FORGET2    0001DC R
  6 FORGET4    0001E5 R   |     FPTR    =  000030     |   6 FREEVAR    0001F2 R
  6 FREEVAR4   000228 R   |     GPIO_BAS=  005000     |     GPIO_CR1=  000003 
    GPIO_CR2=  000004     |     GPIO_DDR=  000002     |     GPIO_IDR=  000001 
    GPIO_ODR=  000000     |     GPIO_SIZ=  000005     |   6 HERE       000A3A R
  6 HEX        000BF3 R   |   6 HI         001869 R   |   6 HLD        000545 R
  6 HOLD       000B68 R   |     HSECNT  =  004809     |     I2C_CCRH=  00521C 
    I2C_CCRH=  000080     |     I2C_CCRH=  0000C0     |     I2C_CCRH=  000080 
    I2C_CCRH=  000000     |     I2C_CCRH=  000001     |     I2C_CCRH=  000000 
    I2C_CCRL=  00521B     |     I2C_CCRL=  00001A     |     I2C_CCRL=  000002 
    I2C_CCRL=  00000D     |     I2C_CCRL=  000050     |     I2C_CCRL=  000090 
    I2C_CCRL=  0000A0     |     I2C_CR1 =  005210     |     I2C_CR1_=  000006 
    I2C_CR1_=  000007     |     I2C_CR1_=  000000     |     I2C_CR2 =  005211 
    I2C_CR2_=  000002     |     I2C_CR2_=  000003     |     I2C_CR2_=  000000 
    I2C_CR2_=  000001     |     I2C_CR2_=  000007     |     I2C_DR  =  005216 
    I2C_FREQ=  005212     |     I2C_ITR =  00521A     |     I2C_ITR_=  000002 
    I2C_ITR_=  000000     |     I2C_ITR_=  000001     |     I2C_OARH=  005214 
    I2C_OARH=  000001     |     I2C_OARH=  000002     |     I2C_OARH=  000006 
    I2C_OARH=  000007     |     I2C_OARL=  005213     |     I2C_OARL=  000000 
    I2C_OAR_=  000813     |     I2C_OAR_=  000009     |     I2C_PECR=  00521E 
    I2C_READ=  000001     |     I2C_SR1 =  005217     |     I2C_SR1_=  000003 
    I2C_SR1_=  000001     |     I2C_SR1_=  000002     |     I2C_SR1_=  000006 
    I2C_SR1_=  000000     |     I2C_SR1_=  000004     |     I2C_SR1_=  000007 
    I2C_SR2 =  005218     |     I2C_SR2_=  000002     |     I2C_SR2_=  000001 
    I2C_SR2_=  000000     |     I2C_SR2_=  000003     |     I2C_SR2_=  000005 
    I2C_SR3 =  005219     |     I2C_SR3_=  000001     |     I2C_SR3_=  000007 
    I2C_SR3_=  000004     |     I2C_SR3_=  000000     |     I2C_SR3_=  000002 
    I2C_TRIS=  00521D     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_WRIT=  000000     |   6 ICOLON     001651 R
  6 IFETCH     0013BE R   |   6 IFF        0013FB R   |   6 IFMOVE     001F7E R
    IMEDD   =  000080     |   6 IMMED      001663 R   |   6 INCH       0002C7 R
  6 INITOFS    001619 R   |   6 INN        0004F3 R   |     INPUT_DI=  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      00122A R   |   6 INTER      001200 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      00061A R   |     IPR0    =  000002     |     IPR1    =  000001 
    IPR2    =  000000     |     IPR3    =  000003     |     IPR_MASK=  000003 
    IRET_COD=  000080     |   6 ISEMI      0015AE R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       001603 R   |   6 KEY        000D33 R
  6 KTAP       00111A R   |   6 KTAP1      00113D R   |   6 KTAP2      001140 R
  6 LAST       000584 R   |   6 LASTN   =  001F77 R   |   6 LBRAC      001237 R
    LED2_BIT=  000005     |     LED2_MAS=  000020     |     LED2_POR=  00500A 
  6 LESS       0006C3 R   |     LF      =  00000A     |   6 LINK    =  001F77 R
  6 LITER      001372 R   |   6 LSHIFT     0008FD R   |   6 LSHIFT1    000906 R
  6 LSHIFT4    00090E R   |   6 LT1        0006D9 R   |     MASKK   =  001F7F 
  6 MAX        0006E3 R   |   6 MAX1       0006F6 R   |   6 MIN        000700 R
  6 MIN1       000713 R   |   6 MMOD1      0007B6 R   |   6 MMOD2      0007CA R
  6 MMOD3      0007E1 R   |   6 MMSM1      00075D R   |   6 MMSM2      000771 R
  6 MMSM3      000773 R   |   6 MMSM4      00077B R   |   6 MODD       0007FB R
  6 MONE       000964 R   |     MS      =  00002C     |   6 MSEC       000232 R
  6 MSMOD      000799 R   |   6 MSTA1      00088C R   |   6 MSTAR      000869 R
    NAFR    =  004804     |   6 NAMEQ      0010C2 R   |   6 NAMET      000FD3 R
    NCLKOPT =  004808     |   6 NEGAT      00062B R   |   6 NEX1       00030A R
  6 NEXT       0013AF R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       000503 R
    NUBC    =  004802     |   6 NUFQ       000D49 R   |   6 NUFQ1      000D62 R
  6 NUMBQ      000C60 R   |   6 NUMQ1      000C94 R   |   6 NUMQ2      000CC5 R
  6 NUMQ3      000D07 R   |   6 NUMQ4      000D0C R   |   6 NUMQ5      000D1B R
  6 NUMQ6      000D1E R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 OFFSET     000596 R   |     OFS     =  000005 
  6 ONE        000956 R   |   6 ONEM       0008EC R   |   6 ONEP       0008DF R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_S=  000080     |   6 ORIG       000043 R   |   6 ORR        000478 R
  6 OUTPUT     0002D8 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000442 R
  6 OVERT      00157F R   |     PA      =  000000     |   6 PACKS      000AFB R
  6 PAD        000A4B R   |   6 PAREN      000F86 R   |   6 PARS       000E7F R
  6 PARS1      000EAA R   |   6 PARS2      000ED5 R   |   6 PARS3      000ED8 R
  6 PARS4      000EE1 R   |   6 PARS5      000F04 R   |   6 PARS6      000F19 R
  6 PARS7      000F28 R   |   6 PARS8      000F37 R   |   6 PARSE      000F48 R
  6 PAUSE      000242 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      00174E R   |   6 PDUM2      00175F R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PICATOUT=  000001 
  6 PICK       0009A5 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       000600 R   |   6 PNAM1      001534 R
  6 PRESE      0012B6 R   |     PROD1   =  000020     |     PROD2   =  000022 
    PROD3   =  000024     |   6 PSTOR      0009BC R   |     PTR16   =  000031 
    PTR8    =  000032     |   6 QBRAN      00031C R   |   6 QDUP       0005AF R
  6 QDUP1      0005B9 R   |   6 QKEY       0002B5 R   |   6 QSTAC      00126E R
  6 QUERY      00119A R   |   6 QUEST      000E71 R   |   6 QUIT       0012D3 R
  6 QUIT1      0012DB R   |   6 QUIT2      0012DE R   |   6 RAM2EE     001E46 R
    RAMBASE =  000000     |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RAT        0003D5 R   |   6 RBRAC      0015F0 R
  6 REPEA      001478 R   |   6 RFREE      001E2D R   |   6 RFROM      0003C2 R
    ROP     =  004800     |   6 ROT        0005C0 R   |   6 ROW2BUF    001DEF R
    ROWBUFF =  001680     |     RP0     =  00002A     |   6 RPAT       00039F R
    RPP     =  0017FF     |   6 RPSTO      0003AC R   |   6 RSHIFT     000919 R
  6 RSHIFT1    000922 R   |   6 RSHIFT4    00092A R   |     RST_SR  =  0050B3 
  6 SAME1      000FF1 R   |   6 SAME2      00101A R   |   6 SAMEQ      000FE9 R
  6 SCOM1      001569 R   |   6 SCOM2      00156C R   |   6 SCOMP      00154B R
  6 SEMIS      00158F R   |   6 SETISP     0000CA R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000BA7 R   |   6 SIGN1      000BB7 R
  6 SLASH      000805 R   |   6 SLMOD      0007E9 R   |   6 SNAME      0014FE R
    SP0     =  000028     |   6 SPACE      000D6B R   |   6 SPACS      000D7A R
  6 SPAT       0003F8 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001670     |   6 SPSTO      000405 R   |   6 SSMOD      000895 R
    SSP     =  000001     |     STACK   =  0017FF     |   6 STAR       00085E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

  6 STASL      0008A6 R   |   6 STORE      00035A R   |   6 STR        000BD5 R
  6 STRCQ      001380 R   |   6 STRQ       0014B7 R   |   6 STRQP      000DE8 R
  6 SUBB       00065E R   |   6 SWAPP      000428 R   |     SWIM_CSR=  007F80 
  6 TAP        001104 R   |   6 TBOOT      00188A R   |   6 TBUF       000513 R
    TBUFFBAS=  001680     |   6 TCHA1      000985 R   |   6 TCHAR      000975 R
  6 TEMP       0004E4 R   |   6 TEVAL      000536 R   |   6 TFLASH     000525 R
  6 THENN      001410 R   |   6 TIB        000A5C R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       0012EA R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   000272 R   |   6 TIMER      00025C R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      0017E4 R
  6 TNAM3      001802 R   |   6 TNAM4      001808 R   |   6 TNAME      0017E1 R
  6 TOFLASH    000297 R   |   6 TOKEN      000FC5 R   |   6 TOR        0003E1 R
  6 TORAM      0002A8 R   |     TRUEE   =  00FFFF     |   6 TWOSL      000931 R
  6 TYPE1      000D9A R   |   6 TYPE2      000DA6 R   |   6 TYPES      000D95 R
  6 Timer4Ha   000005 R   |     UART1   =  000000     |     UART1_BA=  005230 
    UART1_BR=  005232     |     UART1_BR=  005233     |     UART1_CR=  005234 
    UART1_CR=  005235     |     UART1_CR=  005236     |     UART1_CR=  005237 
    UART1_CR=  005238     |     UART1_DR=  005231     |     UART1_GT=  005239 
    UART1_PO=  000000     |     UART1_PS=  00523A     |     UART1_RX=  000004 
    UART1_SR=  005230     |     UART1_TX=  000005     |     UART3   =  000001 
    UART3_BA=  005240     |     UART3_BR=  005242     |     UART3_BR=  005243 
    UART3_CR=  005244     |     UART3_CR=  005245     |     UART3_CR=  005246 
    UART3_CR=  005247     |     UART3_CR=  004249     |     UART3_DR=  005241 
    UART3_PO=  00000F     |     UART3_RX=  000006     |     UART3_SR=  005240 
    UART3_TX=  000005     |     UART_BRR=  000002     |     UART_BRR=  000003 
    UART_CR1=  000004     |     UART_CR1=  000004     |     UART_CR1=  000002 
    UART_CR1=  000000     |     UART_CR1=  000001     |     UART_CR1=  000007 
    UART_CR1=  000006     |     UART_CR1=  000005     |     UART_CR1=  000003 
    UART_CR2=  000005     |     UART_CR2=  000004     |     UART_CR2=  000002 
    UART_CR2=  000005     |     UART_CR2=  000001     |     UART_CR2=  000000 
    UART_CR2=  000006     |     UART_CR2=  000003     |     UART_CR2=  000007 
    UART_CR3=  000006     |     UART_CR3=  000003     |     UART_CR3=  000001 
    UART_CR3=  000002     |     UART_CR3=  000000     |     UART_CR3=  000006 
    UART_CR3=  000004     |     UART_CR3=  000005     |     UART_CR4=  000007 
    UART_CR4=  000000     |     UART_CR4=  000001     |     UART_CR4=  000002 
    UART_CR4=  000003     |     UART_CR4=  000004     |     UART_CR4=  000006 
    UART_CR4=  000005     |     UART_CR5=  000008     |     UART_CR5=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR5=  000001     |     UART_CR5=  000002     |     UART_CR5=  000004 
    UART_CR5=  000005     |     UART_CR6=  000009     |     UART_CR6=  000004 
    UART_CR6=  000007     |     UART_CR6=  000001     |     UART_CR6=  000002 
    UART_CR6=  000000     |     UART_CR6=  000005     |     UART_DR =  000001 
    UART_GTR=  000009     |     UART_PSC=  00000A     |     UART_SR =  000000 
    UART_SR_=  000001     |     UART_SR_=  000004     |     UART_SR_=  000002 
    UART_SR_=  000003     |     UART_SR_=  000000     |     UART_SR_=  000005 
    UART_SR_=  000006     |     UART_SR_=  000007     |     UBASE   =  000006 
    UBC     =  004801     |     UCNTXT  =  000014     |     UCP     =  000018 
    UCTIB   =  00000C     |     UD1     =  000001     |     UD2     =  000002 
    UD3     =  000003     |     UD4     =  000004     |   6 UDOT       000E3B R
  6 UDOTR      000E1B R   |   6 UEND       000041 R   |     UHLD    =  000012 
    UINN    =  00000A     |     UINTER  =  000010     |     ULAST   =  00001A 
  6 ULES1      0006BB R   |   6 ULESS      0006A5 R   |   6 UMMOD      00073B R
  6 UMSTA      000814 R   |   6 UNIQ1      0014F5 R   |   6 UNIQU      0014D6 R
  6 UNTIL      0013D8 R   |     UOFFSET =  00001C     |   6 UPDATCP    0019C2 R
  6 UPDATLAS   001999 R   |   6 UPDATPTR   001F39 R   |   6 UPDATRUN   0019B1 R
  6 UPDATVP    0019D9 R   |   6 UPL1       0004B9 R   |   6 UPLUS      0004A2 R
    UPP     =  000006     |     USR_BTN_=  000004     |     USR_BTN_=  000010 
    USR_BTN_=  005015     |     UTFLASH =  00001E     |     UTIB    =  00000E 
    UTMP    =  000008     |   6 UTYP1      00171E R   |   6 UTYP2      00172D R
  6 UTYPE      001719 R   |     UVP     =  000016     |   6 UZERO      000027 R
  6 VARIA      0016A0 R   |     VER     =  000003     |   6 VPP        000566 R
    VSIZE   =  000006     |     WANT_DEB=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00145E R
  6 WITHI      000720 R   |   6 WORDD      000FB1 R   |   6 WORDS      00183E R
  6 WORS1      001844 R   |   6 WORS2      001863 R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   6 XORR       00048D R   |     XTEMP   =  000020 
    YTEMP   =  000022     |   6 ZERO       00094B R   |   6 ZL1        00045A R
  6 ZLESS      000451 R   |   6 app_spac   002000 R   |   6 block_er   001B5C R
  6 clear_ra   000019 R   |   6 clock_in   00005E R   |   6 copy_buf   001BB3 R
  6 copy_buf   001BD2 R   |   6 copy_pro   001BD2 R   |     da      =  000002 
    db      =  000003     |     dc      =  000000     |     dd      =  000001 
  6 ee_ccomm   001DCD R   |   6 ee_comma   001DAC R   |   6 ee_cstor   001AC9 R
  6 ee_store   001B15 R   |   6 erase_fl   001B78 R   |   6 farat      0019EA R
  6 farcat     001A06 R   |   6 fmove_do   001F22 R   |   6 fptr_sto   001905 R
  6 inc_fptr   001A97 R   |   6 lock       001A83 R   |   6 main       000016 R
  6 next_row   001EDF R   |   6 no_move    001F29 R   |   6 pristine   001C4D R
  6 proceed_   001B7B R   |   6 reboot     000289 R   |   6 reset_ve   001CB4 R
  6 row_eras   001B3F R   |   6 row_eras   001B8C R   |   6 row_eras   001BB3 R
  6 set_opti   001C21 R   |   6 set_vect   001D55 R   |   6 uart1_in   000070 R
  6 unlock     001A5B R   |   6 unlock_e   001A1D R   |   6 unlock_f   001A3C R
  6 write_by   001AAE R   |   6 write_ro   001BF7 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2000   flags    0

