ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       EF12, Version 2.1, 18apr00cht
                                     48 ;               move to 8000H replacing WHYP.
                                     49 ;               copy interrupt vectors from WHYPFLSH.S19
                                     50 ;               to EF12.S19 before flashing
                                     51 ;               add TICKS1 and DELAY1 for motor stepping
                                     52 ;
                                     53 ;       EF12, 02/18/00, C. H. Ting
                                     54 ;       Adapt 86eForth v2.02 to 68HC12.
                                     55 ;               Use WHYP to seed EF12.ASM
                                     56 ;               Use AS12 native 68HC12 assembler:
                                     57 ;               as12 ef12.asm >ef12.lst
                                     58 ;       EF12A, add ADC code, 02mar00cht
                                     59 ;       EF12B, 01mar00cht
                                     60 ;               stack to 0x78, return stack to 0xf8.
                                     61 ;               add all port definitions
                                     62 ;               add PWM registers
                                     63 ;               add SPI registers and code
                                     64 ;       EF12C, 12mar00cht
                                     65 ;               add MAX5250 D/A converter
                                     66 ;       EF12D, 15mar00cht
                                     67 ;               add all the Lexel interface words
                                     68 ;       EF12E, 18apr00cht, save for reference
                                     69 ;
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       Copyright (c) 2000
                                     71 ;       Dr. C. H. Ting
                                     72 ;       156 14th Avenue
                                     73 ;       San Mateo, CA 94402
                                     74 ;       (650) 571-7639
                                     75 ;
                                     76 
                                     77 ;*********************************************************
                                     78 ;	Assembler constants
                                     79 ;*********************************************************
                           000000    80 RAMBASE =	0x0000	   ;ram base
                           0017FF    81 STACK   =	0x17FF	;system (return) stack empty 
                           0016F0    82 DATSTK  =	0x16F0	;data stack  empty
                           001700    83 TIBBASE =       0X1700  ; tib addr.
                                     84 ;******  System Variables  ******
                           00001A    85 XTEMP	=	26	;address called by CREATE
                           00001C    86 YTEMP	=	28	;address called by CREATE
                           00001A    87 PROD1 = 26	;space for UM*
                           00001C    88 PROD2 = 28
                           00001E    89 PROD3 = 30
                           000020    90 CARRY = 32
                           000022    91 SP0	=	34	 ;initial data stack pointer
                           000024    92 RP0	=	36	;initial return stack pointer
                           000026    93 MS    =         38      ; millisecond counter 
                                     94 ;***********************************************
                                     95 ;; Version control
                                     96 
                           000002    97 VER     =     2         ;major release version
                           000001    98 EXT     =     1         ;minor extension
                                     99 
                                    100 ;; Constants
                                    101 
                           00FFFF   102 TRUEE   =     0xFFFF      ;true flag
                                    103 
                           000040   104 COMPO   =     0x40     ;lexicon compile only bit
                           000080   105 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   106 MASKK   =     0x1F7F  ;lexicon bit mask
                                    107 
                           000002   108 CELLL   =     2       ;size of a cell
                           00000A   109 BASEE   =     10      ;default radix
                           000008   110 BKSPP   =     8       ;back space
                           00000A   111 LF      =     10      ;line feed
                           00000D   112 CRR     =     13      ;carriage return
                           00001B   113 ERR     =     27      ;error escape
                           000027   114 TIC     =     39      ;tick
                           0000CD   115 CALLL   =     0xCD     ;CALL opcodes
                                    116 
                                    117 ;; Memory allocation
                                    118 
                           000006   119 UPP     =     RAMBASE+6
                           0016F0   120 SPP     =     RAMBASE+DATSTK
                           0017FF   121 RPP     =     RAMBASE+STACK
                           001700   122 TIBB    =     RAMBASE+TIBBASE
                           000080   123 CTOP    =     RAMBASE+0x80
                                    124 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    125         .macro _ledon
                                    126         bset PC_ODR,#LED2_BIT
                                    127         .endm
                                    128 
                                    129         .macro _ledoff
                                    130         bres PC_ODR,#LED2_BIT
                                    131         .endm
                                    132 
                                    133 ;**********************************************************
                                    134         .area DATA (ABS)
      000000                        135         .org RAMBASE 
                                    136 ;**********************************************************
                                    137 
                                    138 ;**********************************************************
                                    139         .area SSEG (ABS) ; STACK
      001700                        140         .org 0x1700
      001700                        141         .ds 256 
                                    142 ; space for DATSTK,TIB and STACK         
                                    143 ;**********************************************************
                                    144 
                                    145 ;**********************************************************
                                    146         .area HOME ; vectors table
                                    147 ;**********************************************************
      000000 82 00 00 0F            148 	int main	        ; reset
      000004 82 00 00 00            149 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            150 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            151 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            152 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            153 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            154 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            155 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            156 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            157 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            158 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            159 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            160 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            161 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            162 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            163 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            164 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            165 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            166 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            167 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            168 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            169 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            170 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            171 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            172 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            173 	int Timer4Handler	; irq23
      000068 82 00 00 00            174 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            175 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            176 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            177 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            178 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            179 	int NonHandledInterrupt	; irq29
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180 
                                    181 ;**********************************************************
                                    182         .area CODE
                                    183 ;**********************************************************
                                    184 
                                    185 ; non handled interrupt reset MCU
      000000                        186 NonHandledInterrupt:
      000000 A6 80            [ 1]  187         ld a, #0x80
      000002 C7 50 D1         [ 1]  188         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    189 	;iret
                                    190 
      000005                        191 Timer4Handler:
      000005 72 5F 53 42      [ 1]  192 	clr TIM4_SR 
      000009 BE 26            [ 2]  193         ldw x,MS 
      00000B 5C               [ 1]  194         incw x 
      00000C BF 26            [ 2]  195         ldw MS,x 
      00000E 80               [11]  196         iret 
                                    197 
                                    198 
                                    199 ;; Main entry points and COLD start data
      00000F                        200 main:
                                    201 ; clear all RAM
      00000F AE 00 00         [ 2]  202 	ldw X,#RAMBASE
      000012                        203 clear_ram0:
      000012 7F               [ 1]  204 	clr (X)
      000013 5C               [ 1]  205 	incw X
      000014 A3 17 FF         [ 2]  206 	cpw X,#RAM_END
      000017 23 F9            [ 2]  207 	jrule clear_ram0
      000019 AE 17 FF         [ 2]  208         ldw x,#RPP
      00001C 94               [ 1]  209         ldw sp,x 
      00001D CC 00 36         [ 2]  210 	jp ORIG
                                    211 
                                    212 ; COLD initialize these variables.
      000020                        213 UZERO:
      000020 00 0A                  214         .word      BASEE   ;BASE
      000022 00 00                  215         .word      0       ;tmp
      000024 00 00                  216         .word      0       ;>IN
      000026 00 00                  217         .word      0       ;#TIB
      000028 17 00                  218         .word      TIBB    ;TIB
      00002A 0F 3E                  219         .word      INTER   ;'EVAL
      00002C 00 00                  220         .word      0       ;HLD
      00002E 14 C5                  221         .word       LASTN   ;CONTEXT pointer
      000030 00 80                  222         .word       CTOP   ;CP in RAM
      000032 14 C5                  223         .word      LASTN   ;LAST
      000034 00 00                  224 ULAST:  .word      0
                                    225 
      000036                        226 ORIG:   
                                    227 ; initialize SP
      000036 AE 17 FF         [ 2]  228         LDW     X,#STACK  ;initialize return stack
      000039 94               [ 1]  229         LDW     SP,X
      00003A BF 24            [ 2]  230         LDW     RP0,X
      00003C AE 16 F0         [ 2]  231         LDW     X,#DATSTK ;initialize data stack
      00003F BF 22            [ 2]  232         LDW     SP0,X
                                    233 ; initialize PC_5 as output to control LED2
      000041 72 1A 50 0D      [ 1]  234         bset PC_CR1,#LED2_BIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



      000045 72 1A 50 0E      [ 1]  235         bset PC_CR2,#LED2_BIT
      000049 72 1A 50 0C      [ 1]  236         bset PC_DDR,#LED2_BIT
      00004D                        237         _ledoff
      00004D 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    238 ; initialize clock to HSE
                                    239 ; switch to external 8 Mhz crystal 
      000051                        240 clock_init:	
      000051 72 12 50 C5      [ 1]  241 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000055 A6 B4            [ 1]  242 	ld a,#CLK_SWR_HSE
      000057 C7 50 C4         [ 1]  243 	ld CLK_SWR,a
      00005A C1 50 C3         [ 1]  244 1$:	cp a,CLK_CMSR
      00005D 26 FB            [ 1]  245 	jrne 1$
                                    246 ; initialize UART1, 115200 8N1
      00005F                        247 uart1_init:
      00005F 72 14 50 C7      [ 1]  248 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    249 	; configure tx pin
      000063 72 1A 50 02      [ 1]  250 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000067 72 1A 50 03      [ 1]  251 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      00006B 72 1A 50 04      [ 1]  252 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    253 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00006F 35 05 52 33      [ 1]  254 	mov UART1_BRR2,#0x05 ; must be loaded first
      000073 35 04 52 32      [ 1]  255 	mov UART1_BRR1,#0x4
      000077 35 0C 52 35      [ 1]  256 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    257 ; initialize timer4
      00007B 35 07 53 45      [ 1]  258 	mov TIM4_PSCR,#7 ; prescale 128  
      00007F 35 7D 53 46      [ 1]  259 	mov TIM4_ARR,#125 ; set for 1msec.
      000083 35 05 53 40      [ 1]  260 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000087 72 10 53 41      [ 1]  261 	bset TIM4_IER,#TIM4_IER_UIE 
      00008B 9A               [ 1]  262         rim
      00008C CC 14 CA         [ 2]  263         jp  COLD   ;default=MN1
                                    264 
                                    265 
                                    266 ;; get millisecond counter 
                                    267 ;; msec ( -- u )
      00008F 00 00                  268         .word 0 
                           000091   269 LINK = . 
      000091 04                     270         .byte 4
      000092 6D 73 65 63            271         .ascii "msec"
      000096                        272 MSEC: 
      000096 1D 00 02         [ 2]  273         subw x,#CELLL 
      000099 90 BE 26         [ 2]  274         ldw y,MS 
      00009C FF               [ 2]  275         ldw (x),y 
      00009D 81               [ 4]  276         ret 
                                    277 
                                    278 ;; Device dependent I/O
                                    279 ;       ?RX     ( -- c T | F )
                                    280 ;         Return input byte and true, or false.
      00009E 00 91                  281         .word      LINK 
                           0000A0   282 LINK	= .
      0000A0 04                     283         .byte      4
      0000A1 3F 4B 45 59            284         .ascii     "?KEY"
      0000A5                        285 QKEY:
      0000A5 90 5F            [ 1]  286         CLRW Y 
      0000A7 72 0B 52 30 0B   [ 2]  287         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      0000AC C6 52 31         [ 1]  288         LD    A,UART1_DR   ;get char in A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      0000AF 1D 00 02         [ 2]  289 	SUBW	X,#2
      0000B2 E7 01            [ 1]  290         LD     (1,X),A
      0000B4 7F               [ 1]  291 	CLR	(X)
      0000B5 90 53            [ 2]  292         CPLW     Y
      0000B7                        293 INCH:
      0000B7 1D 00 02         [ 2]  294 	SUBW	X,#2
      0000BA FF               [ 2]  295         LDW     (X),Y
      0000BB 81               [ 4]  296         RET
                                    297 
                                    298 ;       TX!     ( c -- )
                                    299 ;       Send character c to  output device.
      0000BC 00 A0                  300         .word      LINK
                           0000BE   301 LINK	= .
      0000BE 04                     302         .byte      4
      0000BF 45 4D 49 54            303         .ascii     "EMIT"
      0000C3                        304 EMIT:
      0000C3 E6 01            [ 1]  305         LD     A,(1,X)
      0000C5 1C 00 02         [ 2]  306 	ADDW	X,#2
      0000C8 72 0F 52 30 FB   [ 2]  307 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0000CD C7 52 31         [ 1]  308         LD    UART1_DR,A   ;send A
      0000D0 81               [ 4]  309         RET
                                    310 
                                    311 ;; The kernel
                                    312 
                                    313 ;       doLIT   ( -- w )
                                    314 ;       Push an inline literal.
      0000D1 00 BE                  315         .word      LINK
                           0000D3   316 LINK	= 	.
      0000D3 45                     317 	.byte      COMPO+5
      0000D4 64 6F 4C 69 74         318         .ascii     "doLit"
      0000D9                        319 DOLIT:
      0000D9 1D 00 02         [ 2]  320 	SUBW X,#2
      0000DC 90 85            [ 2]  321         POPW Y
      0000DE 90 BF 1C         [ 2]  322 	LDW YTEMP,Y
      0000E1 90 FE            [ 2]  323 	LDW Y,(Y)
      0000E3 FF               [ 2]  324         LDW (X),Y
      0000E4 90 BE 1C         [ 2]  325         LDW Y,YTEMP
      0000E7 90 EC 02         [ 2]  326 	JP (2,Y)
                                    327 
                                    328 ;       next    ( -- )
                                    329 ;       Code for  single index loop.
      0000EA 00 D3                  330         .word      LINK
                           0000EC   331 LINK	= 	.
      0000EC 44                     332 	.byte      COMPO+4
      0000ED 6E 65 78 74            333         .ascii     "next"
      0000F1                        334 DONXT:
      0000F1 16 03            [ 2]  335 	LDW Y,(3,SP)
      0000F3 90 5A            [ 2]  336 	DECW Y
      0000F5 2A 07            [ 1]  337 	JRPL NEX1
      0000F7 90 85            [ 2]  338 	POPW Y
      0000F9 84               [ 1]  339 	POP A
      0000FA 84               [ 1]  340 	POP A
      0000FB 90 EC 02         [ 2]  341     JP (2,Y)
      0000FE                        342 NEX1:
      0000FE 17 03            [ 2]  343     LDW (3,SP),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      000100 90 85            [ 2]  344     POPW Y
      000102 90 FE            [ 2]  345 	LDW Y,(Y)
      000104 90 FC            [ 2]  346 	JP (Y)
                                    347 
                                    348 ;       ?branch ( f -- )
                                    349 ;       Branch if flag is zero.
      000106 00 EC                  350         .word      LINK
                           000108   351 LINK	= 	.
      000108 47                     352 	.byte      COMPO+7
      000109 3F 62 72 61 6E 63 68   353         .ascii     "?branch"
      000110                        354 QBRAN:	
      000110 90 93            [ 1]  355         LDW Y,X
      000112 1C 00 02         [ 2]  356 	ADDW X,#2
      000115 90 FE            [ 2]  357 	LDW Y,(Y)
      000117 27 0E            [ 1]  358         JREQ     BRAN
      000119 90 85            [ 2]  359 	POPW Y
      00011B 90 EC 02         [ 2]  360 	JP (2,Y)
                                    361         
                                    362 ;       branch  ( -- )
                                    363 ;       Branch to an inline address.
      00011E 01 08                  364         .word      LINK
                           000120   365 LINK	= 	.
      000120 46                     366 	.byte      COMPO+6
      000121 62 72 61 6E 63 68      367         .ascii     "branch"
      000127                        368 BRAN:
      000127 90 85            [ 2]  369         POPW Y
      000129 90 FE            [ 2]  370 	LDW Y,(Y)
      00012B 90 FC            [ 2]  371         JP     (Y)
                                    372 
                                    373 ;       EXECUTE ( ca -- )
                                    374 ;       Execute  word at ca.
      00012D 01 20                  375         .word      LINK
                           00012F   376 LINK	= 	.
      00012F 07                     377         .byte       7
      000130 45 58 45 43 55 54 45   378         .ascii     "EXECUTE"
      000137                        379 EXECU:
      000137 90 93            [ 1]  380         LDW Y,X
      000139 1C 00 02         [ 2]  381 	ADDW X,#2
      00013C 90 FE            [ 2]  382 	LDW     Y,(Y)
      00013E 90 FC            [ 2]  383         JP     (Y)
                                    384 
                                    385 ;       EXIT    ( -- )
                                    386 ;       Terminate a colon definition.
      000140 01 2F                  387         .word      LINK
                           000142   388 LINK = .
      000142 04                     389         .byte      4
      000143 45 58 49 54            390         .ascii     "EXIT"
      000147                        391 EXIT:
      000147 90 85            [ 2]  392         POPW Y
      000149 81               [ 4]  393         RET
                                    394 
                                    395 ;       !       ( w a -- )
                                    396 ;       Pop  data stack to memory.
      00014A 01 42                  397         .word      LINK
                           00014C   398 LINK = .
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      00014C 01                     399         .byte      1
      00014D 21                     400         .ascii     "!"
      00014E                        401 STORE:
      00014E 90 93            [ 1]  402         LDW Y,X
      000150 90 FE            [ 2]  403         LDW Y,(Y)    ;Y=a
      000152 90 BF 1C         [ 2]  404         LDW YTEMP,Y
      000155 90 93            [ 1]  405         LDW Y,X
      000157 90 EE 02         [ 2]  406         LDW Y,(2,Y)
      00015A 91 CF 1C         [ 5]  407         LDW [YTEMP],Y
      00015D 1C 00 04         [ 2]  408         ADDW X,#4 ;store w at a
      000160 81               [ 4]  409         RET     
                                    410 
                                    411 ;       @       ( a -- w )
                                    412 ;       Push memory location to stack.
      000161 01 4C                  413         .word      LINK
                           000163   414 LINK	= 	.
      000163 01                     415         .byte    1
      000164 40                     416         .ascii	"@"
      000165                        417 AT:
      000165 90 93            [ 1]  418         LDW Y,X     ;Y = a
      000167 90 FE            [ 2]  419         LDW Y,(Y)
      000169 90 FE            [ 2]  420         LDW Y,(Y)
      00016B FF               [ 2]  421         LDW (X),Y ;w = @Y
      00016C 81               [ 4]  422         RET     
                                    423 
                                    424 ;       C!      ( c b -- )
                                    425 ;       Pop  data stack to byte memory.
      00016D 01 63                  426         .word      LINK
                           00016F   427 LINK	= .
      00016F 02                     428         .byte      2
      000170 43 21                  429         .ascii     "C!"
      000172                        430 CSTOR:
      000172 90 93            [ 1]  431         LDW Y,X
      000174 90 FE            [ 2]  432 	LDW Y,(Y)    ;Y=b
      000176 E6 03            [ 1]  433         LD A,(3,X)    ;D = c
      000178 90 F7            [ 1]  434         LD  (Y),A     ;store c at b
      00017A 1C 00 04         [ 2]  435 	ADDW X,#4
      00017D 81               [ 4]  436         RET     
                                    437 
                                    438 ;       C@      ( b -- c )
                                    439 ;       Push byte in memory to  stack.
      00017E 01 6F                  440         .word      LINK
                           000180   441 LINK	= 	.
      000180 02                     442         .byte      2
      000181 43 40                  443         .ascii     "C@"
      000183                        444 CAT:
      000183 90 93            [ 1]  445         LDW Y,X     ;Y=b
      000185 90 FE            [ 2]  446         LDW Y,(Y)
      000187 90 F6            [ 1]  447         LD A,(Y)
      000189 E7 01            [ 1]  448         LD (1,X),A
      00018B 7F               [ 1]  449         CLR (X)
      00018C 81               [ 4]  450         RET     
                                    451 
                                    452 ;       RP@     ( -- a )
                                    453 ;       Push current RP to data stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      00018D 01 80                  454         .word      LINK
                           00018F   455 LINK	= .
      00018F 03                     456         .byte      3
      000190 72 70 40               457         .ascii     "rp@"
      000193                        458 RPAT:
      000193 90 96            [ 1]  459         LDW Y,SP    ;save return addr
      000195 1D 00 02         [ 2]  460         SUBW X,#2
      000198 FF               [ 2]  461         LDW (X),Y
      000199 81               [ 4]  462         RET     
                                    463 
                                    464 ;       RP!     ( a -- )
                                    465 ;       Set  return stack pointer.
      00019A 01 8F                  466         .word      LINK
                           00019C   467 LINK	= 	. 
      00019C 43                     468 	.byte      COMPO+3
      00019D 72 70 21               469         .ascii     "rp!"
      0001A0                        470 RPSTO:
      0001A0 90 85            [ 2]  471         POPW Y
      0001A2 90 BF 1C         [ 2]  472         LDW YTEMP,Y
      0001A5 90 93            [ 1]  473         LDW Y,X
      0001A7 90 FE            [ 2]  474         LDW Y,(Y)
      0001A9 90 94            [ 1]  475         LDW SP,Y
      0001AB 92 CC 1C         [ 5]  476         JP [YTEMP]
                                    477 
                                    478 ;       R>      ( -- w )
                                    479 ;       Pop return stack to data stack.
      0001AE 01 9C                  480         .word      LINK
                           0001B0   481 LINK	= 	. 
      0001B0 42                     482 	.byte      COMPO+2
      0001B1 52 3E                  483         .ascii     "R>"
      0001B3                        484 RFROM:
      0001B3 90 85            [ 2]  485         POPW Y    ;save return addr
      0001B5 90 BF 1C         [ 2]  486         LDW YTEMP,Y
      0001B8 90 85            [ 2]  487         POPW Y
      0001BA 1D 00 02         [ 2]  488         SUBW X,#2
      0001BD FF               [ 2]  489         LDW (X),Y
      0001BE 92 CC 1C         [ 5]  490         JP [YTEMP]
                                    491 
                                    492 ;       R@      ( -- w )
                                    493 ;       Copy top of return stack to stack.
      0001C1 01 B0                  494         .word      LINK
                           0001C3   495 LINK	= 	. 
      0001C3 02                     496         .byte      2
      0001C4 52 40                  497         .ascii     "R@"
      0001C6                        498 RAT:
      0001C6 90 85            [ 2]  499         POPW Y
      0001C8 90 BF 1C         [ 2]  500         LDW YTEMP,Y
      0001CB 90 85            [ 2]  501         POPW Y
      0001CD 90 89            [ 2]  502         PUSHW Y
      0001CF 1D 00 02         [ 2]  503         SUBW X,#2
      0001D2 FF               [ 2]  504         LDW (X),Y
      0001D3 92 CC 1C         [ 5]  505         JP [YTEMP]
                                    506 
                                    507 ;       >R      ( w -- )
                                    508 ;       Push data stack to return stack.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      0001D6 01 C3                  509         .word      LINK
                           0001D8   510 LINK	= 	. 
      0001D8 42                     511 	.byte      COMPO+2
      0001D9 3E 52                  512         .ascii     ">R"
      0001DB                        513 TOR:
      0001DB 90 85            [ 2]  514         POPW Y    ;save return addr
      0001DD 90 BF 1C         [ 2]  515         LDW YTEMP,Y
      0001E0 90 93            [ 1]  516         LDW Y,X
      0001E2 90 FE            [ 2]  517         LDW Y,(Y)
      0001E4 90 89            [ 2]  518         PUSHW Y    ;restore return addr
      0001E6 1C 00 02         [ 2]  519         ADDW X,#2
      0001E9 92 CC 1C         [ 5]  520         JP [YTEMP]
                                    521 
                                    522 ;       SP@     ( -- a )
                                    523 ;       Push current stack pointer.
      0001EC 01 D8                  524         .word      LINK
                           0001EE   525 LINK	= 	. 
      0001EE 03                     526         .byte      3
      0001EF 73 70 40               527         .ascii     "sp@"
      0001F2                        528 SPAT:
      0001F2 90 93            [ 1]  529 	LDW Y,X
      0001F4 1D 00 02         [ 2]  530         SUBW X,#2
      0001F7 FF               [ 2]  531 	LDW (X),Y
      0001F8 81               [ 4]  532         RET     
                                    533 
                                    534 ;       SP!     ( a -- )
                                    535 ;       Set  data stack pointer.
      0001F9 01 EE                  536         .word      LINK
                           0001FB   537 LINK	= 	. 
      0001FB 03                     538         .byte      3
      0001FC 73 70 21               539         .ascii     "sp!"
      0001FF                        540 SPSTO:
      0001FF FE               [ 2]  541         LDW     X,(X)     ;X = a
      000200 81               [ 4]  542         RET     
                                    543 
                                    544 ;       DROP    ( w -- )
                                    545 ;       Discard top stack item.
      000201 01 FB                  546         .word      LINK
                           000203   547 LINK	= 	. 
      000203 04                     548         .byte      4
      000204 44 52 4F 50            549         .ascii     "DROP"
      000208                        550 DROP:
      000208 1C 00 02         [ 2]  551         ADDW X,#2     
      00020B 81               [ 4]  552         RET     
                                    553 
                                    554 ;       DUP     ( w -- w w )
                                    555 ;       Duplicate  top stack item.
      00020C 02 03                  556         .word      LINK
                           00020E   557 LINK	= 	. 
      00020E 03                     558         .byte      3
      00020F 44 55 50               559         .ascii     "DUP"
      000212                        560 DUPP:
      000212 90 93            [ 1]  561 				LDW Y,X
      000214 1D 00 02         [ 2]  562         SUBW X,#2
      000217 90 FE            [ 2]  563 				LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000219 FF               [ 2]  564 				LDW (X),Y
      00021A 81               [ 4]  565         RET     
                                    566 
                                    567 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    568 ;       Exchange top two stack items.
      00021B 02 0E                  569         .word      LINK
                           00021D   570 LINK	= 	. 
      00021D 04                     571         .byte      4
      00021E 53 57 41 50            572         .ascii     "SWAP"
      000222                        573 SWAPP:
      000222 90 93            [ 1]  574         LDW Y,X
      000224 90 FE            [ 2]  575         LDW Y,(Y)
      000226 90 BF 1C         [ 2]  576         LDW YTEMP,Y
      000229 90 93            [ 1]  577         LDW Y,X
      00022B 90 EE 02         [ 2]  578         LDW Y,(2,Y)
      00022E FF               [ 2]  579         LDW (X),Y
      00022F 90 BE 1C         [ 2]  580         LDW Y,YTEMP
      000232 EF 02            [ 2]  581         LDW (2,X),Y
      000234 81               [ 4]  582         RET     
                                    583 
                                    584 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    585 ;       Copy second stack item to top.
      000235 02 1D                  586         .word      LINK
                           000237   587 LINK	= . 
      000237 04                     588         .byte      4
      000238 4F 56 45 52            589         .ascii     "OVER"
      00023C                        590 OVER:
      00023C 1D 00 02         [ 2]  591         SUBW X,#2
      00023F 90 93            [ 1]  592         LDW Y,X
      000241 90 EE 04         [ 2]  593         LDW Y,(4,Y)
      000244 FF               [ 2]  594         LDW (X),Y
      000245 81               [ 4]  595         RET     
                                    596 
                                    597 ;       0<      ( n -- t )
                                    598 ;       Return true if n is negative.
      000246 02 37                  599         .word      LINK
                           000248   600 LINK	= . 
      000248 02                     601         .byte      2
      000249 30 3C                  602         .ascii     "0<"
      00024B                        603 ZLESS:
      00024B A6 FF            [ 1]  604         LD A,#0xFF
      00024D 90 93            [ 1]  605         LDW Y,X
      00024F 90 FE            [ 2]  606         LDW Y,(Y)
      000251 2B 01            [ 1]  607         JRMI     ZL1
      000253 4F               [ 1]  608         CLR A   ;false
      000254 F7               [ 1]  609 ZL1:    LD     (X),A
      000255 E7 01            [ 1]  610         LD (1,X),A
      000257 81               [ 4]  611 	RET     
                                    612 
                                    613 ;       AND     ( w w -- w )
                                    614 ;       Bitwise AND.
      000258 02 48                  615         .word      LINK
                           00025A   616 LINK	= . 
      00025A 03                     617         .byte      3
      00025B 41 4E 44               618         .ascii     "AND"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      00025E                        619 ANDD:
      00025E F6               [ 1]  620         LD  A,(X)    ;D=w
      00025F E4 02            [ 1]  621         AND A,(2,X)
      000261 E7 02            [ 1]  622         LD (2,X),A
      000263 E6 01            [ 1]  623         LD A,(1,X)
      000265 E4 03            [ 1]  624         AND A,(3,X)
      000267 E7 03            [ 1]  625         LD (3,X),A
      000269 1C 00 02         [ 2]  626         ADDW X,#2
      00026C 81               [ 4]  627         RET
                                    628 
                                    629 ;       OR      ( w w -- w )
                                    630 ;       Bitwise inclusive OR.
      00026D 02 5A                  631         .word      LINK
                           00026F   632 LINK = . 
      00026F 02                     633         .byte      2
      000270 4F 52                  634         .ascii     "OR"
      000272                        635 ORR:
      000272 F6               [ 1]  636         LD A,(X)    ;D=w
      000273 EA 02            [ 1]  637         OR A,(2,X)
      000275 E7 02            [ 1]  638         LD (2,X),A
      000277 E6 01            [ 1]  639         LD A,(1,X)
      000279 EA 03            [ 1]  640         OR A,(3,X)
      00027B E7 03            [ 1]  641         LD (3,X),A
      00027D 1C 00 02         [ 2]  642         ADDW X,#2
      000280 81               [ 4]  643         RET
                                    644 
                                    645 ;       XOR     ( w w -- w )
                                    646 ;       Bitwise exclusive OR.
      000281 02 6F                  647         .word      LINK
                           000283   648 LINK	= . 
      000283 03                     649         .byte      3
      000284 58 4F 52               650         .ascii     "XOR"
      000287                        651 XORR:
      000287 F6               [ 1]  652         LD A,(X)    ;D=w
      000288 E8 02            [ 1]  653         XOR A,(2,X)
      00028A E7 02            [ 1]  654         LD (2,X),A
      00028C E6 01            [ 1]  655         LD A,(1,X)
      00028E E8 03            [ 1]  656         XOR A,(3,X)
      000290 E7 03            [ 1]  657         LD (3,X),A
      000292 1C 00 02         [ 2]  658         ADDW X,#2
      000295 81               [ 4]  659         RET
                                    660 
                                    661 ;       UM+     ( u u -- udsum )
                                    662 ;       Add two unsigned single
                                    663 ;       and return a double sum.
      000296 02 83                  664         .word      LINK
                           000298   665 LINK	= . 
      000298 03                     666         .byte      3
      000299 55 4D 2B               667         .ascii     "UM+"
      00029C                        668 UPLUS:
      00029C A6 01            [ 1]  669         LD A,#1
      00029E 90 93            [ 1]  670         LDW Y,X
      0002A0 90 EE 02         [ 2]  671         LDW Y,(2,Y)
      0002A3 90 BF 1C         [ 2]  672         LDW YTEMP,Y
      0002A6 90 93            [ 1]  673         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002A8 90 FE            [ 2]  674         LDW Y,(Y)
      0002AA 72 B9 00 1C      [ 2]  675         ADDW Y,YTEMP
      0002AE EF 02            [ 2]  676         LDW (2,X),Y
      0002B0 25 01            [ 1]  677         JRC     UPL1
      0002B2 4F               [ 1]  678         CLR A
      0002B3 E7 01            [ 1]  679 UPL1:   LD     (1,X),A
      0002B5 7F               [ 1]  680         CLR (X)
      0002B6 81               [ 4]  681         RET
                                    682 
                                    683 ;; System and user variables
                                    684 
                                    685 ;       doVAR   ( -- a )
                                    686 ;       Code for VARIABLE and CREATE.
      0002B7 02 98                  687         .word      LINK
                           0002B9   688 LINK	= . 
      0002B9 45                     689 	.byte      COMPO+5
      0002BA 64 6F 56 61 72         690         .ascii     "doVar"
      0002BF                        691 DOVAR:
      0002BF 1D 00 02         [ 2]  692 	SUBW X,#2
      0002C2 90 85            [ 2]  693         POPW Y    ;get return addr (pfa)
      0002C4 FF               [ 2]  694         LDW (X),Y    ;push on stack
      0002C5 81               [ 4]  695         RET     ;go to RET of EXEC
                                    696 
                                    697 ;       BASE    ( -- a )
                                    698 ;       Radix base for numeric I/O.
      0002C6 02 B9                  699         .word      LINK        
                           0002C8   700 LINK = . 
      0002C8 04                     701         .byte      4
      0002C9 42 41 53 45            702         .ascii     "BASE"
      0002CD                        703 BASE:
      0002CD 90 AE 00 06      [ 2]  704 	LDW Y,#RAMBASE+6
      0002D1 1D 00 02         [ 2]  705 	SUBW X,#2
      0002D4 FF               [ 2]  706         LDW (X),Y
      0002D5 81               [ 4]  707         RET
                                    708 
                                    709 ;       tmp     ( -- a )
                                    710 ;       A temporary storage.
      0002D6 02 C8                  711         .word      LINK
                                    712         
                           0002D8   713 LINK = . 
      0002D8 03                     714 	.byte      3
      0002D9 74 6D 70               715         .ascii     "tmp"
      0002DC                        716 TEMP:
      0002DC 90 AE 00 08      [ 2]  717 	LDW Y,#RAMBASE+8
      0002E0 1D 00 02         [ 2]  718 	SUBW X,#2
      0002E3 FF               [ 2]  719         LDW (X),Y
      0002E4 81               [ 4]  720         RET
                                    721 
                                    722 ;       >IN     ( -- a )
                                    723 ;        Hold parsing pointer.
      0002E5 02 D8                  724         .word      LINK
                           0002E7   725 LINK = . 
      0002E7 03                     726         .byte      3
      0002E8 3E 49 4E               727         .ascii    ">IN"
      0002EB                        728 INN:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      0002EB 90 AE 00 0A      [ 2]  729 	LDW Y,#RAMBASE+10
      0002EF 1D 00 02         [ 2]  730 	SUBW X,#2
      0002F2 FF               [ 2]  731         LDW (X),Y
      0002F3 81               [ 4]  732         RET
                                    733 
                                    734 ;       #TIB    ( -- a )
                                    735 ;       Count in terminal input buffer.
      0002F4 02 E7                  736         .word      LINK
                           0002F6   737 LINK = . 
      0002F6 04                     738         .byte      4
      0002F7 23 54 49 42            739         .ascii     "#TIB"
      0002FB                        740 NTIB:
      0002FB 90 AE 00 0C      [ 2]  741 	LDW Y,#RAMBASE+12
      0002FF 1D 00 02         [ 2]  742 	SUBW X,#2
      000302 FF               [ 2]  743         LDW (X),Y
      000303 81               [ 4]  744         RET
                                    745 
                                    746 ;       "EVAL   ( -- a )
                                    747 ;       Execution vector of EVAL.
      000304 02 F6                  748         .word      LINK
                           000306   749 LINK = . 
      000306 05                     750         .byte      5
      000307 27 65 76 61 6C         751         .ascii     "'eval"
      00030C                        752 TEVAL:
      00030C 90 AE 00 10      [ 2]  753 	LDW Y,#RAMBASE+16
      000310 1D 00 02         [ 2]  754 	SUBW X,#2
      000313 FF               [ 2]  755         LDW (X),Y
      000314 81               [ 4]  756         RET
                                    757 
                                    758 ;       HLD     ( -- a )
                                    759 ;       Hold a pointer of output string.
      000315 03 06                  760         .word      LINK
                           000317   761 LINK = . 
      000317 03                     762         .byte      3
      000318 68 6C 64               763         .ascii     "hld"
      00031B                        764 HLD:
      00031B 90 AE 00 12      [ 2]  765 	LDW Y,#RAMBASE+18
      00031F 1D 00 02         [ 2]  766 	SUBW X,#2
      000322 FF               [ 2]  767         LDW (X),Y
      000323 81               [ 4]  768         RET
                                    769 
                                    770 ;       CONTEXT ( -- a )
                                    771 ;       Start vocabulary search.
      000324 03 17                  772         .word      LINK
                           000326   773 LINK = . 
      000326 07                     774         .byte      7
      000327 43 4F 4E 54 45 58 54   775         .ascii     "CONTEXT"
      00032E                        776 CNTXT:
      00032E 90 AE 00 14      [ 2]  777 	LDW Y,#RAMBASE+20
      000332 1D 00 02         [ 2]  778 	SUBW X,#2
      000335 FF               [ 2]  779         LDW (X),Y
      000336 81               [ 4]  780         RET
                                    781 
                                    782 ;       CP      ( -- a )
                                    783 ;       Point to top of dictionary.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      000337 03 26                  784         .word      LINK
                           000339   785 LINK = . 
      000339 02                     786         .byte      2
      00033A 63 70                  787         .ascii     "cp"
      00033C                        788 CPP:
      00033C 90 AE 00 16      [ 2]  789 	LDW Y,#RAMBASE+22
      000340 1D 00 02         [ 2]  790 	SUBW X,#2
      000343 FF               [ 2]  791         LDW (X),Y
      000344 81               [ 4]  792         RET
                                    793 
                                    794 ;       LAST    ( -- a )
                                    795 ;       Point to last name in dictionary.
      000345 03 39                  796         .word      LINK
                           000347   797 LINK = . 
      000347 04                     798         .byte      4
      000348 6C 61 73 74            799         .ascii     "last"
      00034C                        800 LAST:
      00034C 90 AE 00 18      [ 2]  801 	LDW Y,#RAMBASE+24
      000350 1D 00 02         [ 2]  802 	SUBW X,#2
      000353 FF               [ 2]  803         LDW (X),Y
      000354 81               [ 4]  804         RET
                                    805 
                                    806 ;; Common functions
                                    807 
                                    808 ;       ?DUP    ( w -- w w | 0 )
                                    809 ;       Dup tos if its is not zero.
      000355 03 47                  810         .word      LINK
                           000357   811 LINK = . 
      000357 04                     812         .byte      4
      000358 3F 44 55 50            813         .ascii     "?DUP"
      00035C                        814 QDUP:
      00035C 90 93            [ 1]  815         LDW Y,X
      00035E 90 FE            [ 2]  816 	LDW Y,(Y)
      000360 27 04            [ 1]  817         JREQ     QDUP1
      000362 1D 00 02         [ 2]  818 	SUBW X,#2
      000365 FF               [ 2]  819         LDW (X),Y
      000366 81               [ 4]  820 QDUP1:  RET
                                    821 
                                    822 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    823 ;       Rot 3rd item to top.
      000367 03 57                  824         .word      LINK
                           000369   825 LINK = . 
      000369 03                     826         .byte      3
      00036A 52 4F 54               827         .ascii     "ROT"
      00036D                        828 ROT:
      00036D 90 93            [ 1]  829         LDW Y,X
      00036F 90 EE 04         [ 2]  830 	LDW Y,(4,Y)
      000372 90 BF 1C         [ 2]  831 	LDW YTEMP,Y
      000375 90 93            [ 1]  832         LDW Y,X
      000377 90 EE 02         [ 2]  833         LDW Y,(2,Y)
      00037A 90 BF 1A         [ 2]  834         LDW XTEMP,Y
      00037D 90 93            [ 1]  835         LDW Y,X
      00037F 90 FE            [ 2]  836         LDW Y,(Y)
      000381 EF 02            [ 2]  837         LDW (2,X),Y
      000383 90 BE 1A         [ 2]  838         LDW Y,XTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      000386 EF 04            [ 2]  839         LDW (4,X),Y
      000388 90 BE 1C         [ 2]  840         LDW Y,YTEMP
      00038B FF               [ 2]  841         LDW (X),Y
      00038C 81               [ 4]  842         RET
                                    843 
                                    844 ;       2DROP   ( w w -- )
                                    845 ;       Discard two items on stack.
      00038D 03 69                  846         .word      LINK
                           00038F   847 LINK = . 
      00038F 05                     848         .byte      5
      000390 32 44 52 4F 50         849         .ascii     "2DROP"
      000395                        850 DDROP:
      000395 1C 00 04         [ 2]  851         ADDW X,#4
      000398 81               [ 4]  852         RET
                                    853 
                                    854 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                    855 ;       Duplicate top two items.
      000399 03 8F                  856         .word      LINK
                           00039B   857 LINK = . 
      00039B 04                     858         .byte      4
      00039C 32 44 55 50            859         .ascii     "2DUP"
      0003A0                        860 DDUP:
      0003A0 1D 00 04         [ 2]  861         SUBW X,#4
      0003A3 90 93            [ 1]  862         LDW Y,X
      0003A5 90 EE 06         [ 2]  863         LDW Y,(6,Y)
      0003A8 EF 02            [ 2]  864         LDW (2,X),Y
      0003AA 90 93            [ 1]  865         LDW Y,X
      0003AC 90 EE 04         [ 2]  866         LDW Y,(4,Y)
      0003AF FF               [ 2]  867         LDW (X),Y
      0003B0 81               [ 4]  868         RET
                                    869 
                                    870 ;       +       ( w w -- sum )
                                    871 ;       Add top two items.
      0003B1 03 9B                  872         .word      LINK
                           0003B3   873 LINK = . 
      0003B3 01                     874         .byte      1
      0003B4 2B                     875         .ascii     "+"
      0003B5                        876 PLUS:
      0003B5 90 93            [ 1]  877         LDW Y,X
      0003B7 90 FE            [ 2]  878         LDW Y,(Y)
      0003B9 90 BF 1C         [ 2]  879         LDW YTEMP,Y
      0003BC 1C 00 02         [ 2]  880         ADDW X,#2
      0003BF 90 93            [ 1]  881         LDW Y,X
      0003C1 90 FE            [ 2]  882         LDW Y,(Y)
      0003C3 72 B9 00 1C      [ 2]  883         ADDW Y,YTEMP
      0003C7 FF               [ 2]  884         LDW (X),Y
      0003C8 81               [ 4]  885         RET
                                    886 
                                    887 ;       NOT     ( w -- w )
                                    888 ;       One's complement of tos.
      0003C9 03 B3                  889         .word      LINK
                           0003CB   890 LINK = . 
      0003CB 03                     891         .byte      3
      0003CC 4E 4F 54               892         .ascii     "NOT"
      0003CF                        893 INVER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      0003CF 90 93            [ 1]  894         LDW Y,X
      0003D1 90 FE            [ 2]  895         LDW Y,(Y)
      0003D3 90 53            [ 2]  896         CPLW Y
      0003D5 FF               [ 2]  897         LDW (X),Y
      0003D6 81               [ 4]  898         RET
                                    899 
                                    900 ;       NEGATE  ( n -- -n )
                                    901 ;       Two's complement of tos.
      0003D7 03 CB                  902         .word      LINK
                           0003D9   903 LINK = . 
      0003D9 06                     904         .byte      6
      0003DA 4E 45 47 41 54 45      905         .ascii     "NEGATE"
      0003E0                        906 NEGAT:
      0003E0 90 93            [ 1]  907         LDW Y,X
      0003E2 90 FE            [ 2]  908         LDW Y,(Y)
      0003E4 90 50            [ 2]  909         NEGW Y
      0003E6 FF               [ 2]  910         LDW (X),Y
      0003E7 81               [ 4]  911         RET
                                    912 
                                    913 ;       DNEGATE ( d -- -d )
                                    914 ;       Two's complement of top double.
      0003E8 03 D9                  915         .word      LINK
                           0003EA   916 LINK = . 
      0003EA 07                     917         .byte      7
      0003EB 44 4E 45 47 41 54 45   918         .ascii     "DNEGATE"
      0003F2                        919 DNEGA:
      0003F2 90 93            [ 1]  920         LDW Y,X
      0003F4 90 FE            [ 2]  921 	LDW Y,(Y)
      0003F6 90 53            [ 2]  922         CPLW Y     
      0003F8 90 BF 1C         [ 2]  923 	LDW YTEMP,Y
      0003FB 90 93            [ 1]  924         LDW Y,X
      0003FD 90 EE 02         [ 2]  925         LDW Y,(2,Y)
      000400 90 53            [ 2]  926         CPLW Y
      000402 90 5C            [ 1]  927         INCW Y
      000404 EF 02            [ 2]  928         LDW (2,X),Y
      000406 90 BE 1C         [ 2]  929         LDW Y,YTEMP
      000409 24 02            [ 1]  930         JRNC DN1 
      00040B 90 5C            [ 1]  931         INCW Y
      00040D FF               [ 2]  932 DN1:    LDW (X),Y
      00040E 81               [ 4]  933         RET
                                    934 
                                    935 ;       -       ( n1 n2 -- n1-n2 )
                                    936 ;       Subtraction.
      00040F 03 EA                  937         .word      LINK
                           000411   938 LINK = . 
      000411 01                     939         .byte      1
      000412 2D                     940         .ascii     "-"
      000413                        941 SUBB:
      000413 90 93            [ 1]  942         LDW Y,X
      000415 90 FE            [ 2]  943         LDW Y,(Y)
      000417 90 BF 1C         [ 2]  944         LDW YTEMP,Y
      00041A 1C 00 02         [ 2]  945         ADDW X,#2
      00041D 90 93            [ 1]  946         LDW Y,X
      00041F 90 FE            [ 2]  947         LDW Y,(Y)
      000421 72 B2 00 1C      [ 2]  948         SUBW Y,YTEMP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000425 FF               [ 2]  949         LDW (X),Y
      000426 81               [ 4]  950         RET
                                    951 
                                    952 ;       ABS     ( n -- n )
                                    953 ;       Return  absolute value of n.
      000427 04 11                  954         .word      LINK
                           000429   955 LINK = . 
      000429 03                     956         .byte      3
      00042A 41 42 53               957         .ascii     "ABS"
      00042D                        958 ABSS:
      00042D 90 93            [ 1]  959         LDW Y,X
      00042F 90 FE            [ 2]  960 	LDW Y,(Y)
      000431 2A 03            [ 1]  961         JRPL     AB1     ;negate:
      000433 90 50            [ 2]  962         NEGW     Y     ;else negate hi byte
      000435 FF               [ 2]  963         LDW (X),Y
      000436 81               [ 4]  964 AB1:    RET
                                    965 
                                    966 ;       =       ( w w -- t )
                                    967 ;       Return true if top two are =al.
      000437 04 29                  968         .word      LINK
                           000439   969 LINK = . 
      000439 01                     970         .byte      1
      00043A 3D                     971         .ascii     "="
      00043B                        972 EQUAL:
      00043B A6 FF            [ 1]  973         LD A,#0xFF  ;true
      00043D 90 93            [ 1]  974         LDW Y,X    ;D = n2
      00043F 90 FE            [ 2]  975         LDW Y,(Y)
      000441 90 BF 1C         [ 2]  976         LDW YTEMP,Y
      000444 1C 00 02         [ 2]  977         ADDW X,#2
      000447 90 93            [ 1]  978         LDW Y,X
      000449 90 FE            [ 2]  979         LDW Y,(Y)
      00044B 90 B3 1C         [ 2]  980         CPW Y,YTEMP     ;if n2 <> n1
      00044E 27 01            [ 1]  981         JREQ     EQ1
      000450 4F               [ 1]  982         CLR A
      000451 F7               [ 1]  983 EQ1:    LD (X),A
      000452 E7 01            [ 1]  984         LD (1,X),A
      000454 81               [ 4]  985 	RET     
                                    986 
                                    987 ;       U<      ( u u -- t )
                                    988 ;       Unsigned compare of top two items.
      000455 04 39                  989         .word      LINK
                           000457   990 LINK = . 
      000457 02                     991         .byte      2
      000458 55 3C                  992         .ascii     "U<"
      00045A                        993 ULESS:
      00045A A6 FF            [ 1]  994         LD A,#0xFF  ;true
      00045C 90 93            [ 1]  995         LDW Y,X    ;D = n2
      00045E 90 FE            [ 2]  996         LDW Y,(Y)
      000460 90 BF 1C         [ 2]  997         LDW YTEMP,Y
      000463 1C 00 02         [ 2]  998         ADDW X,#2
      000466 90 93            [ 1]  999         LDW Y,X
      000468 90 FE            [ 2] 1000         LDW Y,(Y)
      00046A 90 B3 1C         [ 2] 1001         CPW Y,YTEMP     ;if n2 <> n1
      00046D 25 01            [ 1] 1002         JRULT     ULES1
      00046F 4F               [ 1] 1003         CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



      000470 F7               [ 1] 1004 ULES1:  LD (X),A
      000471 E7 01            [ 1] 1005         LD (1,X),A
      000473 81               [ 4] 1006 	RET     
                                   1007 
                                   1008 ;       <       ( n1 n2 -- t )
                                   1009 ;       Signed compare of top two items.
      000474 04 57                 1010         .word      LINK
                           000476  1011 LINK = . 
      000476 01                    1012         .byte      1
      000477 3C                    1013         .ascii     "<"
      000478                       1014 LESS:
      000478 A6 FF            [ 1] 1015         LD A,#0xFF  ;true
      00047A 90 93            [ 1] 1016         LDW Y,X    ;D = n2
      00047C 90 FE            [ 2] 1017         LDW Y,(Y)
      00047E 90 BF 1C         [ 2] 1018         LDW YTEMP,Y
      000481 1C 00 02         [ 2] 1019         ADDW X,#2
      000484 90 93            [ 1] 1020         LDW Y,X
      000486 90 FE            [ 2] 1021         LDW Y,(Y)
      000488 90 B3 1C         [ 2] 1022         CPW Y,YTEMP     ;if n2 <> n1
      00048B 2F 01            [ 1] 1023         JRSLT     LT1
      00048D 4F               [ 1] 1024         CLR A
      00048E F7               [ 1] 1025 LT1:    LD (X),A
      00048F E7 01            [ 1] 1026         LD (1,X),A
      000491 81               [ 4] 1027 	RET     
                                   1028 
                                   1029 ;       MAX     ( n n -- n )
                                   1030 ;       Return greater of two top items.
      000492 04 76                 1031         .word      LINK
                           000494  1032 LINK = . 
      000494 03                    1033         .byte      3
      000495 4D 41 58              1034         .ascii     "MAX"
      000498                       1035 MAX:
      000498 90 93            [ 1] 1036         LDW Y,X    ;D = n2
      00049A 90 EE 02         [ 2] 1037         LDW Y,(2,Y)
      00049D 90 BF 1C         [ 2] 1038         LDW YTEMP,Y
      0004A0 90 93            [ 1] 1039         LDW Y,X
      0004A2 90 FE            [ 2] 1040         LDW Y,(Y)
      0004A4 90 B3 1C         [ 2] 1041         CPW Y,YTEMP     ;if n2 <> n1
      0004A7 2F 02            [ 1] 1042         JRSLT     MAX1
      0004A9 EF 02            [ 2] 1043         LDW (2,X),Y
      0004AB 1C 00 02         [ 2] 1044 MAX1:   ADDW X,#2
      0004AE 81               [ 4] 1045 	RET     
                                   1046 
                                   1047 ;       MIN     ( n n -- n )
                                   1048 ;       Return smaller of top two items.
      0004AF 04 94                 1049         .word      LINK
                           0004B1  1050 LINK = . 
      0004B1 03                    1051         .byte      3
      0004B2 4D 49 4E              1052         .ascii     "MIN"
      0004B5                       1053 MIN:
      0004B5 90 93            [ 1] 1054         LDW Y,X    ;D = n2
      0004B7 90 EE 02         [ 2] 1055         LDW Y,(2,Y)
      0004BA 90 BF 1C         [ 2] 1056         LDW YTEMP,Y
      0004BD 90 93            [ 1] 1057         LDW Y,X
      0004BF 90 FE            [ 2] 1058         LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      0004C1 90 B3 1C         [ 2] 1059         CPW Y,YTEMP     ;if n2 <> n1
      0004C4 2C 02            [ 1] 1060         JRSGT     MIN1
      0004C6 EF 02            [ 2] 1061         LDW (2,X),Y
      0004C8 1C 00 02         [ 2] 1062 MIN1:	ADDW X,#2
      0004CB 81               [ 4] 1063 	RET     
                                   1064 
                                   1065 ;       WITHIN  ( u ul uh -- t )
                                   1066 ;       Return true if u is within
                                   1067 ;       range of ul and uh. ( ul <= u < uh )
      0004CC 04 B1                 1068         .word      LINK
                           0004CE  1069 LINK = . 
      0004CE 06                    1070         .byte      6
      0004CF 57 49 54 48 49 4E     1071         .ascii     "WITHIN"
      0004D5                       1072 WITHI:
      0004D5 CD 02 3C         [ 4] 1073         CALL     OVER
      0004D8 CD 04 13         [ 4] 1074         CALL     SUBB
      0004DB CD 01 DB         [ 4] 1075         CALL     TOR
      0004DE CD 04 13         [ 4] 1076         CALL     SUBB
      0004E1 CD 01 B3         [ 4] 1077         CALL     RFROM
      0004E4 CC 04 5A         [ 2] 1078         JP     ULESS
                                   1079 
                                   1080 ;; Divide
                                   1081 
                                   1082 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1083 ;       Unsigned divide of a double by a
                                   1084 ;       single. Return mod and quotient.
      0004E7 04 CE                 1085         .word      LINK
                           0004E9  1086 LINK = . 
      0004E9 06                    1087         .byte      6
      0004EA 55 4D 2F 4D 4F 44     1088         .ascii     "UM/MOD"
      0004F0                       1089 UMMOD:
      0004F0 BF 1A            [ 2] 1090 	LDW XTEMP,X	; save stack pointer
      0004F2 FE               [ 2] 1091 	LDW X,(X)		; un
      0004F3 BF 1C            [ 2] 1092 	LDW YTEMP,X ; save un
      0004F5 90 BE 1A         [ 2] 1093 	LDW Y,XTEMP	; stack pointer
      0004F8 90 EE 04         [ 2] 1094 	LDW Y,(4,Y) ; Y=udl
      0004FB BE 1A            [ 2] 1095 	LDW X,XTEMP
      0004FD EE 02            [ 2] 1096 	LDW X,(2,X)	; X=udh
      0004FF B3 1C            [ 2] 1097 	CPW X,YTEMP
      000501 23 0F            [ 2] 1098 	JRULE MMSM1
      000503 BE 1A            [ 2] 1099 	LDW X,XTEMP
      000505 1C 00 02         [ 2] 1100 	ADDW X,#2	; pop off 1 level
      000508 90 AE FF FF      [ 2] 1101 	LDW Y,#0xFFFF
      00050C FF               [ 2] 1102 	LDW (X),Y
      00050D 90 5F            [ 1] 1103 	CLRW Y
      00050F EF 02            [ 2] 1104 	LDW (2,X),Y
      000511 81               [ 4] 1105 	RET
      000512                       1106 MMSM1:
      000512 A6 11            [ 1] 1107 	LD A,#17	; loop count
      000514                       1108 MMSM3:
      000514 B3 1C            [ 2] 1109 	CPW X,YTEMP	; compare udh to un
      000516 25 04            [ 1] 1110 	JRULT MMSM4	; can't subtract
      000518 72 B0 00 1C      [ 2] 1111 	SUBW X,YTEMP	; can subtract
      00051C                       1112 MMSM4:
      00051C 8C               [ 1] 1113 	CCF	; quotient bit
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      00051D 90 59            [ 2] 1114 	RLCW Y	; rotate into quotient
      00051F 59               [ 2] 1115 	RLCW X	; rotate into remainder
      000520 4A               [ 1] 1116 	DEC A	; repeat
      000521 22 F1            [ 1] 1117 	JRUGT MMSM3
      000523 57               [ 2] 1118 	SRAW X
      000524 BF 1C            [ 2] 1119 	LDW YTEMP,X	; done, save remainder
      000526 BE 1A            [ 2] 1120 	LDW X,XTEMP
      000528 1C 00 02         [ 2] 1121 	ADDW X,#2	; drop
      00052B FF               [ 2] 1122 	LDW (X),Y
      00052C 90 BE 1C         [ 2] 1123 	LDW Y,YTEMP	; save quotient
      00052F EF 02            [ 2] 1124 	LDW (2,X),Y
      000531 81               [ 4] 1125 	RET
                                   1126 	
                                   1127 ;       M/MOD   ( d n -- r q )
                                   1128 ;       Signed floored divide of double by
                                   1129 ;       single. Return mod and quotient.
      000532 04 E9                 1130         .word      LINK
                           000534  1131 LINK = . 
      000534 05                    1132         .byte      5
      000535 4D 2F 4D 4F 44        1133         .ascii     "M/MOD"
      00053A                       1134 MSMOD:  
      00053A CD 02 12         [ 4] 1135         CALL	DUPP
      00053D CD 02 4B         [ 4] 1136         CALL	ZLESS
      000540 CD 02 12         [ 4] 1137         CALL	DUPP
      000543 CD 01 DB         [ 4] 1138         CALL	TOR
      000546 CD 01 10         [ 4] 1139         CALL	QBRAN
      000549 05 57                 1140         .word	MMOD1
      00054B CD 03 E0         [ 4] 1141         CALL	NEGAT
      00054E CD 01 DB         [ 4] 1142         CALL	TOR
      000551 CD 03 F2         [ 4] 1143         CALL	DNEGA
      000554 CD 01 B3         [ 4] 1144         CALL	RFROM
      000557 CD 01 DB         [ 4] 1145 MMOD1:	CALL	TOR
      00055A CD 02 12         [ 4] 1146         CALL	DUPP
      00055D CD 02 4B         [ 4] 1147         CALL	ZLESS
      000560 CD 01 10         [ 4] 1148         CALL	QBRAN
      000563 05 6B                 1149         .word	MMOD2
      000565 CD 01 C6         [ 4] 1150         CALL	RAT
      000568 CD 03 B5         [ 4] 1151         CALL	PLUS
      00056B CD 01 B3         [ 4] 1152 MMOD2:	CALL	RFROM
      00056E CD 04 F0         [ 4] 1153         CALL	UMMOD
      000571 CD 01 B3         [ 4] 1154         CALL	RFROM
      000574 CD 01 10         [ 4] 1155         CALL	QBRAN
      000577 05 82                 1156         .word	MMOD3
      000579 CD 02 22         [ 4] 1157         CALL	SWAPP
      00057C CD 03 E0         [ 4] 1158         CALL	NEGAT
      00057F CD 02 22         [ 4] 1159         CALL	SWAPP
      000582 81               [ 4] 1160 MMOD3:	RET
                                   1161 
                                   1162 ;       /MOD    ( n n -- r q )
                                   1163 ;       Signed divide. Return mod and quotient.
      000583 05 34                 1164         .word      LINK
                           000585  1165 LINK = . 
      000585 04                    1166         .byte      4
      000586 2F 4D 4F 44           1167         .ascii     "/MOD"
      00058A                       1168 SLMOD:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      00058A CD 02 3C         [ 4] 1169         CALL	OVER
      00058D CD 02 4B         [ 4] 1170         CALL	ZLESS
      000590 CD 02 22         [ 4] 1171         CALL	SWAPP
      000593 CC 05 3A         [ 2] 1172         JP	MSMOD
                                   1173 
                                   1174 ;       MOD     ( n n -- r )
                                   1175 ;       Signed divide. Return mod only.
      000596 05 85                 1176         .word      LINK
                           000598  1177 LINK = . 
      000598 03                    1178         .byte      3
      000599 4D 4F 44              1179         .ascii     "MOD"
      00059C                       1180 MODD:
      00059C CD 05 8A         [ 4] 1181 	CALL	SLMOD
      00059F CC 02 08         [ 2] 1182 	JP	DROP
                                   1183 
                                   1184 ;       /       ( n n -- q )
                                   1185 ;       Signed divide. Return quotient only.
      0005A2 05 98                 1186         .word      LINK
                           0005A4  1187 LINK = . 
      0005A4 01                    1188         .byte      1
      0005A5 2F                    1189         .ascii     "/"
      0005A6                       1190 SLASH:
      0005A6 CD 05 8A         [ 4] 1191         CALL	SLMOD
      0005A9 CD 02 22         [ 4] 1192         CALL	SWAPP
      0005AC CC 02 08         [ 2] 1193         JP	DROP
                                   1194 
                                   1195 ;; Multiply
                                   1196 
                                   1197 ;       UM*     ( u u -- ud )
                                   1198 ;       Unsigned multiply. Return double product.
      0005AF 05 A4                 1199         .word      LINK
                           0005B1  1200 LINK = . 
      0005B1 03                    1201         .byte      3
      0005B2 55 4D 2A              1202         .ascii     "UM*"
      0005B5                       1203 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
      0005B5 E6 02            [ 1] 1204 	LD A,(2,X)	; b
      0005B7 90 97            [ 1] 1205 	LD YL,A
      0005B9 F6               [ 1] 1206 	LD A,(X)	; d
      0005BA 90 42            [ 4] 1207 	MUL Y,A
      0005BC 90 BF 1A         [ 2] 1208 	LDW PROD1,Y
      0005BF E6 03            [ 1] 1209 	LD A,(3,X)	; a
      0005C1 90 97            [ 1] 1210 	LD YL,A
      0005C3 F6               [ 1] 1211 	LD A,(X)	; d
      0005C4 90 42            [ 4] 1212 	MUL Y,A
      0005C6 90 BF 1C         [ 2] 1213 	LDW PROD2,Y
      0005C9 E6 02            [ 1] 1214 	LD A,(2,X)	; b
      0005CB 90 97            [ 1] 1215 	LD YL,A
      0005CD E6 01            [ 1] 1216 	LD A,(1,X)	; c
      0005CF 90 42            [ 4] 1217 	MUL Y,A
      0005D1 90 BF 1E         [ 2] 1218 	LDW PROD3,Y
      0005D4 E6 03            [ 1] 1219 	LD A,(3,X)	; a
      0005D6 90 97            [ 1] 1220 	LD YL,A
      0005D8 E6 01            [ 1] 1221 	LD A,(1,X)	; c
      0005DA 90 42            [ 4] 1222 	MUL Y,A	; least signifiant product
      0005DC 4F               [ 1] 1223 	CLR A
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005DD 90 01            [ 1] 1224 	RRWA Y
      0005DF E7 03            [ 1] 1225 	LD (3,X),A	; store least significant byte
      0005E1 72 B9 00 1E      [ 2] 1226 	ADDW Y,PROD3
      0005E5 4F               [ 1] 1227 	CLR A
      0005E6 A9 00            [ 1] 1228 	ADC A,#0	; save carry
      0005E8 B7 20            [ 1] 1229 	LD CARRY,A
      0005EA 72 B9 00 1C      [ 2] 1230 	ADDW Y,PROD2
      0005EE B6 20            [ 1] 1231 	LD A,CARRY
      0005F0 A9 00            [ 1] 1232 	ADC A,#0	; add 2nd carry
      0005F2 B7 20            [ 1] 1233 	LD CARRY,A
      0005F4 4F               [ 1] 1234 	CLR A
      0005F5 90 01            [ 1] 1235 	RRWA Y
      0005F7 E7 02            [ 1] 1236 	LD (2,X),A	; 2nd product byte
      0005F9 72 B9 00 1A      [ 2] 1237 	ADDW Y,PROD1
      0005FD 90 01            [ 1] 1238 	RRWA Y
      0005FF E7 01            [ 1] 1239 	LD (1,X),A	; 3rd product byte
      000601 90 01            [ 1] 1240 	RRWA Y  	; 4th product byte now in A
      000603 B9 20            [ 1] 1241 	ADC A,CARRY	; fill in carry bits
      000605 F7               [ 1] 1242 	LD (X),A
      000606 81               [ 4] 1243 	RET
                                   1244 
                                   1245 ;       *       ( n n -- n )
                                   1246 ;       Signed multiply. Return single product.
      000607 05 B1                 1247         .word      LINK
                           000609  1248 LINK = . 
      000609 01                    1249         .byte      1
      00060A 2A                    1250         .ascii     "*"
      00060B                       1251 STAR:
      00060B CD 05 B5         [ 4] 1252 	CALL	UMSTA
      00060E CC 02 08         [ 2] 1253 	JP	DROP
                                   1254 
                                   1255 ;       M*      ( n n -- d )
                                   1256 ;       Signed multiply. Return double product.
      000611 06 09                 1257         .word      LINK
                           000613  1258 LINK = . 
      000613 02                    1259         .byte      2
      000614 4D 2A                 1260         .ascii     "M*"
      000616                       1261 MSTAR:      
      000616 CD 03 A0         [ 4] 1262         CALL	DDUP
      000619 CD 02 87         [ 4] 1263         CALL	XORR
      00061C CD 02 4B         [ 4] 1264         CALL	ZLESS
      00061F CD 01 DB         [ 4] 1265         CALL	TOR
      000622 CD 04 2D         [ 4] 1266         CALL	ABSS
      000625 CD 02 22         [ 4] 1267         CALL	SWAPP
      000628 CD 04 2D         [ 4] 1268         CALL	ABSS
      00062B CD 05 B5         [ 4] 1269         CALL	UMSTA
      00062E CD 01 B3         [ 4] 1270         CALL	RFROM
      000631 CD 01 10         [ 4] 1271         CALL	QBRAN
      000634 06 39                 1272         .word	MSTA1
      000636 CD 03 F2         [ 4] 1273         CALL	DNEGA
      000639 81               [ 4] 1274 MSTA1:	RET
                                   1275 
                                   1276 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1277 ;       Multiply n1 and n2, then divide
                                   1278 ;       by n3. Return mod and quotient.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00063A 06 13                 1279         .word      LINK
                           00063C  1280 LINK = . 
      00063C 05                    1281         .byte      5
      00063D 2A 2F 4D 4F 44        1282         .ascii     "*/MOD"
      000642                       1283 SSMOD:
      000642 CD 01 DB         [ 4] 1284         CALL     TOR
      000645 CD 06 16         [ 4] 1285         CALL     MSTAR
      000648 CD 01 B3         [ 4] 1286         CALL     RFROM
      00064B CC 05 3A         [ 2] 1287         JP     MSMOD
                                   1288 
                                   1289 ;       */      ( n1 n2 n3 -- q )
                                   1290 ;       Multiply n1 by n2, then divide
                                   1291 ;       by n3. Return quotient only.
      00064E 06 3C                 1292         .word      LINK
                           000650  1293 LINK = . 
      000650 02                    1294         .byte      2
      000651 2E 20 2F              1295         .ascii     ". /"
      000654                       1296 STASL:
      000654 CD 06 42         [ 4] 1297         CALL	SSMOD
      000657 CD 02 22         [ 4] 1298         CALL	SWAPP
      00065A CC 02 08         [ 2] 1299         JP	DROP
                                   1300 
                                   1301 ;; Miscellaneous
                                   1302 
                                   1303 ;       CELL+   ( a -- a )
                                   1304 ;       Add cell size in byte to address.
      00065D 06 50                 1305         .word      LINK
                           00065F  1306 LINK = . 
      00065F 02                    1307         .byte       2
      000660 32 2B                 1308         .ascii     "2+"
      000662                       1309 CELLP:
      000662 90 93            [ 1] 1310         LDW Y,X
      000664 90 FE            [ 2] 1311 	LDW Y,(Y)
      000666 72 A9 00 02      [ 2] 1312         ADDW Y,#CELLL 
      00066A FF               [ 2] 1313         LDW (X),Y
      00066B 81               [ 4] 1314         RET
                                   1315 
                                   1316 ;       CELL-   ( a -- a )
                                   1317 ;       Subtract 2 from address.
      00066C 06 5F                 1318         .word      LINK
                           00066E  1319 LINK = . 
      00066E 02                    1320         .byte       2
      00066F 32 2D                 1321         .ascii     "2-"
      000671                       1322 CELLM:
      000671 90 93            [ 1] 1323         LDW Y,X
      000673 90 FE            [ 2] 1324 	LDW Y,(Y)
      000675 72 A2 00 02      [ 2] 1325         SUBW Y,#CELLL
      000679 FF               [ 2] 1326         LDW (X),Y
      00067A 81               [ 4] 1327         RET
                                   1328 
                                   1329 ;       CELLS   ( n -- n )
                                   1330 ;       Multiply tos by 2.
      00067B 06 6E                 1331         .word      LINK
                           00067D  1332 LINK = . 
      00067D 02                    1333         .byte       2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



      00067E 32 2A                 1334         .ascii     "2*"
      000680                       1335 CELLS:
      000680 90 93            [ 1] 1336         LDW Y,X
      000682 90 FE            [ 2] 1337 	LDW Y,(Y)
      000684 90 58            [ 2] 1338         SLAW Y
      000686 FF               [ 2] 1339         LDW (X),Y
      000687 81               [ 4] 1340         RET
                                   1341 
                                   1342 ;       1+      ( a -- a )
                                   1343 ;       Add cell size in byte to address.
      000688 06 7D                 1344         .word      LINK
                           00068A  1345 LINK = . 
      00068A 02                    1346         .byte      2
      00068B 31 2B                 1347         .ascii     "1+"
      00068D                       1348 ONEP:
      00068D 90 93            [ 1] 1349         LDW Y,X
      00068F 90 FE            [ 2] 1350 	LDW Y,(Y)
      000691 90 5C            [ 1] 1351         INCW Y
      000693 FF               [ 2] 1352         LDW (X),Y
      000694 81               [ 4] 1353         RET
                                   1354 
                                   1355 ;       1-      ( a -- a )
                                   1356 ;       Subtract 2 from address.
      000695 06 8A                 1357         .word      LINK
                           000697  1358 LINK = . 
      000697 02                    1359         .byte      2
      000698 31 2D                 1360         .ascii     "1-"
      00069A                       1361 ONEM:
      00069A 90 93            [ 1] 1362         LDW Y,X
      00069C 90 FE            [ 2] 1363 	LDW Y,(Y)
      00069E 90 5A            [ 2] 1364         DECW Y
      0006A0 FF               [ 2] 1365         LDW (X),Y
      0006A1 81               [ 4] 1366         RET
                                   1367 
                                   1368 ;       2/      ( n -- n )
                                   1369 ;       Multiply tos by 2.
      0006A2 06 97                 1370         .word      LINK
                           0006A4  1371 LINK = . 
      0006A4 02                    1372         .byte      2
      0006A5 32 2F                 1373         .ascii     "2/"
      0006A7                       1374 TWOSL:
      0006A7 90 93            [ 1] 1375         LDW Y,X
      0006A9 90 FE            [ 2] 1376 	LDW Y,(Y)
      0006AB 90 57            [ 2] 1377         SRAW Y
      0006AD FF               [ 2] 1378         LDW (X),Y
      0006AE 81               [ 4] 1379         RET
                                   1380 
                                   1381 ;       BL      ( -- 32 )
                                   1382 ;       Return 32,  blank character.
      0006AF 06 A4                 1383         .word      LINK
                           0006B1  1384 LINK = . 
      0006B1 02                    1385         .byte      2
      0006B2 42 4C                 1386         .ascii     "BL"
      0006B4                       1387 BLANK:
      0006B4 1D 00 02         [ 2] 1388         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006B7 90 AE 00 20      [ 2] 1389 	LDW Y,#32
      0006BB FF               [ 2] 1390         LDW (X),Y
      0006BC 81               [ 4] 1391         RET
                                   1392 
                                   1393 ;         0     ( -- 0)
                                   1394 ;         Return 0.
      0006BD 06 B1                 1395         .word      LINK
                           0006BF  1396 LINK = . 
      0006BF 01                    1397         .byte       1
      0006C0 30                    1398         .ascii     "0"
      0006C1                       1399 ZERO:
      0006C1 1D 00 02         [ 2] 1400         SUBW X,#2
      0006C4 90 5F            [ 1] 1401 	CLRW Y
      0006C6 FF               [ 2] 1402         LDW (X),Y
      0006C7 81               [ 4] 1403         RET
                                   1404 
                                   1405 ;         1     ( -- 1)
                                   1406 ;         Return 1.
      0006C8 06 BF                 1407         .word      LINK
                           0006CA  1408 LINK = . 
      0006CA 01                    1409         .byte       1
      0006CB 31                    1410         .ascii     "1"
      0006CC                       1411 ONE:
      0006CC 1D 00 02         [ 2] 1412         SUBW X,#2
      0006CF 90 AE 00 01      [ 2] 1413 	LDW Y,#1
      0006D3 FF               [ 2] 1414         LDW (X),Y
      0006D4 81               [ 4] 1415         RET
                                   1416 
                                   1417 ;         -1    ( -- -1)
                                   1418 ;         Return 32,  blank character.
      0006D5 06 CA                 1419         .word      LINK
                           0006D7  1420 LINK = . 
      0006D7 02                    1421         .byte       2
      0006D8 2D 31                 1422         .ascii     "-1"
      0006DA                       1423 MONE:
      0006DA 1D 00 02         [ 2] 1424         SUBW X,#2
      0006DD 90 AE FF FF      [ 2] 1425 	LDW Y,#0xFFFF
      0006E1 FF               [ 2] 1426         LDW (X),Y
      0006E2 81               [ 4] 1427         RET
                                   1428 
                                   1429 ;       >CHAR   ( c -- c )
                                   1430 ;       Filter non-printing characters.
      0006E3 06 D7                 1431         .word      LINK
                           0006E5  1432 LINK = . 
      0006E5 05                    1433         .byte      5
      0006E6 3E 43 48 41 52        1434         .ascii     ">CHAR"
      0006EB                       1435 TCHAR:
      0006EB CD 00 D9         [ 4] 1436         CALL     DOLIT
      0006EE 00 7F                 1437         .word       0x7F
      0006F0 CD 02 5E         [ 4] 1438         CALL     ANDD
      0006F3 CD 02 12         [ 4] 1439         CALL     DUPP    ;mask msb
      0006F6 CD 00 D9         [ 4] 1440         CALL     DOLIT
      0006F9 00 7F                 1441         .word      127
      0006FB CD 06 B4         [ 4] 1442         CALL     BLANK
      0006FE CD 04 D5         [ 4] 1443         CALL     WITHI   ;check for printable
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000701 CD 01 10         [ 4] 1444         CALL     QBRAN
      000704 07 0E                 1445         .word      TCHA1
      000706 CD 02 08         [ 4] 1446         CALL     DROP
      000709 CD 00 D9         [ 4] 1447         CALL     DOLIT
      00070C 00 5F                 1448         .word     0x5F		; "_"     ;replace non-printables
      00070E 81               [ 4] 1449 TCHA1:  RET
                                   1450 
                                   1451 ;       DEPTH   ( -- n )
                                   1452 ;       Return  depth of  data stack.
      00070F 06 E5                 1453         .word      LINK
                           000711  1454 LINK = . 
      000711 05                    1455         .byte      5
      000712 44 45 50 54 48        1456         .ascii     "DEPTH"
      000717                       1457 DEPTH:
      000717 90 BE 22         [ 2] 1458         LDW Y,SP0    ;save data stack ptr
      00071A BF 1A            [ 2] 1459 	LDW XTEMP,X
      00071C 72 B2 00 1A      [ 2] 1460         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000720 90 57            [ 2] 1461         SRAW Y    ;D = #stack items
      000722 90 5A            [ 2] 1462 	DECW Y
      000724 1D 00 02         [ 2] 1463 	SUBW X,#2
      000727 FF               [ 2] 1464         LDW (X),Y     ; if neg, underflow
      000728 81               [ 4] 1465         RET
                                   1466 
                                   1467 ;       PICK    ( ... +n -- ... w )
                                   1468 ;       Copy  nth stack item to tos.
      000729 07 11                 1469         .word      LINK
                           00072B  1470 LINK = . 
      00072B 04                    1471         .byte      4
      00072C 50 49 43 4B           1472         .ascii     "PICK"
      000730                       1473 PICK:
      000730 90 93            [ 1] 1474         LDW Y,X   ;D = n1
      000732 90 FE            [ 2] 1475         LDW Y,(Y)
      000734 90 58            [ 2] 1476         SLAW Y
      000736 BF 1A            [ 2] 1477         LDW XTEMP,X
      000738 72 B9 00 1A      [ 2] 1478         ADDW Y,XTEMP
      00073C 90 FE            [ 2] 1479         LDW Y,(Y)
      00073E FF               [ 2] 1480         LDW (X),Y
      00073F 81               [ 4] 1481         RET
                                   1482 
                                   1483 ;; Memory access
                                   1484 
                                   1485 ;       +!      ( n a -- )
                                   1486 ;       Add n to  contents at address a.
      000740 07 2B                 1487         .word      LINK
                           000742  1488 LINK = . 
      000742 02                    1489         .byte      2
      000743 2B 21                 1490         .ascii     "+!"
      000745                       1491 PSTOR:
      000745 CD 02 22         [ 4] 1492         CALL	SWAPP
      000748 CD 02 3C         [ 4] 1493         CALL	OVER
      00074B CD 01 65         [ 4] 1494         CALL	AT
      00074E CD 03 B5         [ 4] 1495         CALL	PLUS
      000751 CD 02 22         [ 4] 1496         CALL	SWAPP
      000754 CC 01 4E         [ 2] 1497         JP	STORE
                                   1498 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1499 ;       2!      ( d a -- )
                                   1500 ;       Store  double integer to address a.
      000757 07 42                 1501         .word      LINK
                           000759  1502 LINK = . 
      000759 02                    1503         .byte      2
      00075A 32 21                 1504         .ascii     "2!"
      00075C                       1505 DSTOR:
      00075C CD 02 22         [ 4] 1506         CALL	SWAPP
      00075F CD 02 3C         [ 4] 1507         CALL	OVER
      000762 CD 01 4E         [ 4] 1508         CALL	STORE
      000765 CD 06 62         [ 4] 1509         CALL	CELLP
      000768 CC 01 4E         [ 2] 1510         JP	STORE
                                   1511 
                                   1512 ;       2@      ( a -- d )
                                   1513 ;       Fetch double integer from address a.
      00076B 07 59                 1514         .word      LINK
                           00076D  1515 LINK = . 
      00076D 02                    1516         .byte      2
      00076E 32 40                 1517         .ascii     "2@"
      000770                       1518 DAT:
      000770 CD 02 12         [ 4] 1519         CALL	DUPP
      000773 CD 06 62         [ 4] 1520         CALL	CELLP
      000776 CD 01 65         [ 4] 1521         CALL	AT
      000779 CD 02 22         [ 4] 1522         CALL	SWAPP
      00077C CC 01 65         [ 2] 1523         JP	AT
                                   1524 
                                   1525 ;       COUNT   ( b -- b +n )
                                   1526 ;       Return count byte of a string
                                   1527 ;       and add 1 to byte address.
      00077F 07 6D                 1528         .word      LINK
                           000781  1529 LINK = . 
      000781 05                    1530         .byte      5
      000782 43 4F 55 4E 54        1531         .ascii     "COUNT"
      000787                       1532 COUNT:
      000787 CD 02 12         [ 4] 1533         CALL     DUPP
      00078A CD 06 8D         [ 4] 1534         CALL     ONEP
      00078D CD 02 22         [ 4] 1535         CALL     SWAPP
      000790 CC 01 83         [ 2] 1536         JP     CAT
                                   1537 
                                   1538 ;       HERE    ( -- a )
                                   1539 ;       Return  top of  code dictionary.
      000793 07 81                 1540         .word      LINK
                           000795  1541 LINK = . 
      000795 04                    1542         .byte      4
      000796 48 45 52 45           1543         .ascii     "HERE"
      00079A                       1544 HERE:
      00079A CD 03 3C         [ 4] 1545         CALL     CPP
      00079D CC 01 65         [ 2] 1546         JP     AT
                                   1547 
                                   1548 ;       PAD     ( -- a )
                                   1549 ;       Return address of text buffer
                                   1550 ;       above  code dictionary.
      0007A0 07 95                 1551         .word      LINK
                           0007A2  1552 LINK = . 
      0007A2 03                    1553         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



      0007A3 50 41 44              1554         .ascii     "PAD"
      0007A6                       1555 PAD:
      0007A6 CD 07 9A         [ 4] 1556         CALL     HERE
      0007A9 CD 00 D9         [ 4] 1557         CALL     DOLIT
      0007AC 00 50                 1558         .word      80
      0007AE CC 03 B5         [ 2] 1559         JP     PLUS
                                   1560 
                                   1561 ;       TIB     ( -- a )
                                   1562 ;       Return address of terminal input buffer.
      0007B1 07 A2                 1563         .word      LINK
                           0007B3  1564 LINK = . 
      0007B3 03                    1565         .byte      3
      0007B4 54 49 42              1566         .ascii     "TIB"
      0007B7                       1567 TIB:
      0007B7 CD 02 FB         [ 4] 1568         CALL     NTIB
      0007BA CD 06 62         [ 4] 1569         CALL     CELLP
      0007BD CC 01 65         [ 2] 1570         JP     AT
                                   1571 
                                   1572 ;       @EXECUTE        ( a -- )
                                   1573 ;       Execute vector stored in address a.
      0007C0 07 B3                 1574         .word      LINK
                           0007C2  1575 LINK = . 
      0007C2 08                    1576         .byte      8
      0007C3 40 45 58 45 43 55 54  1577         .ascii     "@EXECUTE"
             45
      0007CB                       1578 ATEXE:
      0007CB CD 01 65         [ 4] 1579         CALL     AT
      0007CE CD 03 5C         [ 4] 1580         CALL     QDUP    ;?address or zero
      0007D1 CD 01 10         [ 4] 1581         CALL     QBRAN
      0007D4 07 D9                 1582         .word      EXE1
      0007D6 CD 01 37         [ 4] 1583         CALL     EXECU   ;execute if non-zero
      0007D9 81               [ 4] 1584 EXE1:   RET     ;do nothing if zero
                                   1585 
                                   1586 ;       CMOVE   ( b1 b2 u -- )
                                   1587 ;       Copy u bytes from b1 to b2.
      0007DA 07 C2                 1588         .word      LINK
                           0007DC  1589 LINK = . 
      0007DC 05                    1590         .byte      5
      0007DD 43 4D 4F 56 45        1591         .ascii     "CMOVE"
      0007E2                       1592 CMOVE:
      0007E2 CD 01 DB         [ 4] 1593         CALL	TOR
      0007E5 CD 01 27         [ 4] 1594         CALL	BRAN
      0007E8 08 02                 1595         .word	CMOV2
      0007EA CD 01 DB         [ 4] 1596 CMOV1:	CALL	TOR
      0007ED CD 02 12         [ 4] 1597         CALL	DUPP
      0007F0 CD 01 83         [ 4] 1598         CALL	CAT
      0007F3 CD 01 C6         [ 4] 1599         CALL	RAT
      0007F6 CD 01 72         [ 4] 1600         CALL	CSTOR
      0007F9 CD 06 8D         [ 4] 1601         CALL	ONEP
      0007FC CD 01 B3         [ 4] 1602         CALL	RFROM
      0007FF CD 06 8D         [ 4] 1603         CALL	ONEP
      000802 CD 00 F1         [ 4] 1604 CMOV2:	CALL	DONXT
      000805 07 EA                 1605         .word	CMOV1
      000807 CC 03 95         [ 2] 1606         JP	DDROP
                                   1607 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



                                   1608 ;       FILL    ( b u c -- )
                                   1609 ;       Fill u bytes of character c
                                   1610 ;       to area beginning at b.
      00080A 07 DC                 1611         .word       LINK
                           00080C  1612 LINK = . 
      00080C 04                    1613         .byte       4
      00080D 46 49 4C 4C           1614         .ascii     "FILL"
      000811                       1615 FILL:
      000811 CD 02 22         [ 4] 1616         CALL	SWAPP
      000814 CD 01 DB         [ 4] 1617         CALL	TOR
      000817 CD 02 22         [ 4] 1618         CALL	SWAPP
      00081A CD 01 27         [ 4] 1619         CALL	BRAN
      00081D 08 28                 1620         .word	FILL2
      00081F CD 03 A0         [ 4] 1621 FILL1:	CALL	DDUP
      000822 CD 01 72         [ 4] 1622         CALL	CSTOR
      000825 CD 06 8D         [ 4] 1623         CALL	ONEP
      000828 CD 00 F1         [ 4] 1624 FILL2:	CALL	DONXT
      00082B 08 1F                 1625         .word	FILL1
      00082D CC 03 95         [ 2] 1626         JP	DDROP
                                   1627 
                                   1628 ;       ERASE   ( b u -- )
                                   1629 ;       Erase u bytes beginning at b.
      000830 08 0C                 1630         .word      LINK
                           000832  1631 LINK = . 
      000832 05                    1632         .byte      5
      000833 45 52 41 53 45        1633         .ascii     "ERASE"
      000838                       1634 ERASE:
      000838 CD 06 C1         [ 4] 1635         CALL     ZERO
      00083B CC 08 11         [ 2] 1636         JP     FILL
                                   1637 
                                   1638 ;       PACK0x   ( b u a -- a )
                                   1639 ;       Build a counted string with
                                   1640 ;       u characters from b. Null fill.
      00083E 08 32                 1641         .word      LINK
                           000840  1642 LINK = . 
      000840 05                    1643         .byte      5
      000841 50 41 43 4B 30 78     1644         .ascii     "PACK0x"
      000847                       1645 PACKS:
      000847 CD 02 12         [ 4] 1646         CALL     DUPP
      00084A CD 01 DB         [ 4] 1647         CALL     TOR     ;strings only on cell boundary
      00084D CD 03 A0         [ 4] 1648         CALL     DDUP
      000850 CD 01 72         [ 4] 1649         CALL     CSTOR
      000853 CD 06 8D         [ 4] 1650         CALL     ONEP ;save count
      000856 CD 02 22         [ 4] 1651         CALL     SWAPP
      000859 CD 07 E2         [ 4] 1652         CALL     CMOVE
      00085C CD 01 B3         [ 4] 1653         CALL     RFROM
      00085F 81               [ 4] 1654         RET
                                   1655 
                                   1656 ;; Numeric output, single precision
                                   1657 
                                   1658 ;       DIGIT   ( u -- c )
                                   1659 ;       Convert digit u to a character.
      000860 08 40                 1660         .word      LINK
                           000862  1661 LINK = . 
      000862 05                    1662         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000863 44 49 47 49 54        1663         .ascii     "DIGIT"
      000868                       1664 DIGIT:
      000868 CD 00 D9         [ 4] 1665         CALL	DOLIT
      00086B 00 09                 1666         .word	9
      00086D CD 02 3C         [ 4] 1667         CALL	OVER
      000870 CD 04 78         [ 4] 1668         CALL	LESS
      000873 CD 00 D9         [ 4] 1669         CALL	DOLIT
      000876 00 07                 1670         .word	7
      000878 CD 02 5E         [ 4] 1671         CALL	ANDD
      00087B CD 03 B5         [ 4] 1672         CALL	PLUS
      00087E CD 00 D9         [ 4] 1673         CALL	DOLIT
      000881 00 30                 1674         .word	48	;'0'
      000883 CC 03 B5         [ 2] 1675         JP	PLUS
                                   1676 
                                   1677 ;       EXTRACT ( n base -- n c )
                                   1678 ;       Extract least significant digit from n.
      000886 08 62                 1679         .word      LINK
                           000888  1680 LINK = . 
      000888 07                    1681         .byte      7
      000889 45 58 54 52 41 43 54  1682         .ascii     "EXTRACT"
      000890                       1683 EXTRC:
      000890 CD 06 C1         [ 4] 1684         CALL     ZERO
      000893 CD 02 22         [ 4] 1685         CALL     SWAPP
      000896 CD 04 F0         [ 4] 1686         CALL     UMMOD
      000899 CD 02 22         [ 4] 1687         CALL     SWAPP
      00089C CC 08 68         [ 2] 1688         JP     DIGIT
                                   1689 
                                   1690 ;       <#      ( -- )
                                   1691 ;       Initiate  numeric output process.
      00089F 08 88                 1692         .word      LINK
                           0008A1  1693 LINK = . 
      0008A1 02                    1694         .byte      2
      0008A2 3C 23                 1695         .ascii     "<#"
      0008A4                       1696 BDIGS:
      0008A4 CD 07 A6         [ 4] 1697         CALL     PAD
      0008A7 CD 03 1B         [ 4] 1698         CALL     HLD
      0008AA CC 01 4E         [ 2] 1699         JP     STORE
                                   1700 
                                   1701 ;       HOLD    ( c -- )
                                   1702 ;       Insert a character into output string.
      0008AD 08 A1                 1703         .word      LINK
                           0008AF  1704 LINK = . 
      0008AF 04                    1705         .byte      4
      0008B0 48 4F 4C 44           1706         .ascii     "HOLD"
      0008B4                       1707 HOLD:
      0008B4 CD 03 1B         [ 4] 1708         CALL     HLD
      0008B7 CD 01 65         [ 4] 1709         CALL     AT
      0008BA CD 06 9A         [ 4] 1710         CALL     ONEM
      0008BD CD 02 12         [ 4] 1711         CALL     DUPP
      0008C0 CD 03 1B         [ 4] 1712         CALL     HLD
      0008C3 CD 01 4E         [ 4] 1713         CALL     STORE
      0008C6 CC 01 72         [ 2] 1714         JP     CSTOR
                                   1715 
                                   1716 ;       #       ( u -- u )
                                   1717 ;       Extract one digit from u and
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1718 ;       append digit to output string.
      0008C9 08 AF                 1719         .word      LINK
                           0008CB  1720 LINK = . 
      0008CB 01                    1721         .byte      1
      0008CC 23                    1722         .ascii     "#"
      0008CD                       1723 DIG:
      0008CD CD 02 CD         [ 4] 1724         CALL     BASE
      0008D0 CD 01 65         [ 4] 1725         CALL     AT
      0008D3 CD 08 90         [ 4] 1726         CALL     EXTRC
      0008D6 CC 08 B4         [ 2] 1727         JP     HOLD
                                   1728 
                                   1729 ;       #S      ( u -- 0 )
                                   1730 ;       Convert u until all digits
                                   1731 ;       are added to output string.
      0008D9 08 CB                 1732         .word      LINK
                           0008DB  1733 LINK = . 
      0008DB 02                    1734         .byte      2
      0008DC 23 53                 1735         .ascii     "#S"
      0008DE                       1736 DIGS:
      0008DE CD 08 CD         [ 4] 1737 DIGS1:  CALL     DIG
      0008E1 CD 02 12         [ 4] 1738         CALL     DUPP
      0008E4 CD 01 10         [ 4] 1739         CALL     QBRAN
      0008E7 08 EB                 1740         .word      DIGS2
      0008E9 20 F3            [ 2] 1741         JRA     DIGS1
      0008EB 81               [ 4] 1742 DIGS2:  RET
                                   1743 
                                   1744 ;       SIGN    ( n -- )
                                   1745 ;       Add a minus sign to
                                   1746 ;       numeric output string.
      0008EC 08 DB                 1747         .word      LINK
                           0008EE  1748 LINK = . 
      0008EE 04                    1749         .byte      4
      0008EF 53 49 47 4E           1750         .ascii     "SIGN"
      0008F3                       1751 SIGN:
      0008F3 CD 02 4B         [ 4] 1752         CALL     ZLESS
      0008F6 CD 01 10         [ 4] 1753         CALL     QBRAN
      0008F9 09 03                 1754         .word      SIGN1
      0008FB CD 00 D9         [ 4] 1755         CALL     DOLIT
      0008FE 00 2D                 1756         .word      45	;"-"
      000900 CC 08 B4         [ 2] 1757         JP     HOLD
      000903 81               [ 4] 1758 SIGN1:  RET
                                   1759 
                                   1760 ;       #>      ( w -- b u )
                                   1761 ;       Prepare output string.
      000904 08 EE                 1762         .word      LINK
                           000906  1763 LINK = . 
      000906 02                    1764         .byte      2
      000907 23 3E                 1765         .ascii     "#>"
      000909                       1766 EDIGS:
      000909 CD 02 08         [ 4] 1767         CALL     DROP
      00090C CD 03 1B         [ 4] 1768         CALL     HLD
      00090F CD 01 65         [ 4] 1769         CALL     AT
      000912 CD 07 A6         [ 4] 1770         CALL     PAD
      000915 CD 02 3C         [ 4] 1771         CALL     OVER
      000918 CC 04 13         [ 2] 1772         JP     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                                   1773 
                                   1774 ;       str     ( w -- b u )
                                   1775 ;       Convert a signed integer
                                   1776 ;       to a numeric string.
      00091B 09 06                 1777         .word      LINK
                           00091D  1778 LINK = . 
      00091D 03                    1779         .byte      3
      00091E 73 74 72              1780         .ascii     "str"
      000921                       1781 STR:
      000921 CD 02 12         [ 4] 1782         CALL     DUPP
      000924 CD 01 DB         [ 4] 1783         CALL     TOR
      000927 CD 04 2D         [ 4] 1784         CALL     ABSS
      00092A CD 08 A4         [ 4] 1785         CALL     BDIGS
      00092D CD 08 DE         [ 4] 1786         CALL     DIGS
      000930 CD 01 B3         [ 4] 1787         CALL     RFROM
      000933 CD 08 F3         [ 4] 1788         CALL     SIGN
      000936 CC 09 09         [ 2] 1789         JP     EDIGS
                                   1790 
                                   1791 ;       HEX     ( -- )
                                   1792 ;       Use radix 16 as base for
                                   1793 ;       numeric conversions.
      000939 09 1D                 1794         .word      LINK
                           00093B  1795 LINK = . 
      00093B 03                    1796         .byte      3
      00093C 48 45 58              1797         .ascii     "HEX"
      00093F                       1798 HEX:
      00093F CD 00 D9         [ 4] 1799         CALL     DOLIT
      000942 00 10                 1800         .word      16
      000944 CD 02 CD         [ 4] 1801         CALL     BASE
      000947 CC 01 4E         [ 2] 1802         JP     STORE
                                   1803 
                                   1804 ;       DECIMAL ( -- )
                                   1805 ;       Use radix 10 as base
                                   1806 ;       for numeric conversions.
      00094A 09 3B                 1807         .word      LINK
                           00094C  1808 LINK = . 
      00094C 07                    1809         .byte      7
      00094D 44 45 43 49 4D 41 4C  1810         .ascii     "DECIMAL"
      000954                       1811 DECIM:
      000954 CD 00 D9         [ 4] 1812         CALL     DOLIT
      000957 00 0A                 1813         .word      10
      000959 CD 02 CD         [ 4] 1814         CALL     BASE
      00095C CC 01 4E         [ 2] 1815         JP     STORE
                                   1816 
                                   1817 ;; Numeric input, single precision
                                   1818 
                                   1819 ;       DIGIT?  ( c base -- u t )
                                   1820 ;       Convert a character to its numeric
                                   1821 ;       value. A flag indicates success.
      00095F 09 4C                 1822         .word      LINK
                           000961  1823 LINK = . 
      000961 06                    1824         .byte       6
      000962 44 49 47 49 54 3F     1825         .ascii     "DIGIT?"
      000968                       1826 DIGTQ:
      000968 CD 01 DB         [ 4] 1827         CALL     TOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      00096B CD 00 D9         [ 4] 1828         CALL     DOLIT
      00096E 00 30                 1829         .word     48	; "0"
      000970 CD 04 13         [ 4] 1830         CALL     SUBB
      000973 CD 00 D9         [ 4] 1831         CALL     DOLIT
      000976 00 09                 1832         .word      9
      000978 CD 02 3C         [ 4] 1833         CALL     OVER
      00097B CD 04 78         [ 4] 1834         CALL     LESS
      00097E CD 01 10         [ 4] 1835         CALL     QBRAN
      000981 09 99                 1836         .word      DGTQ1
      000983 CD 00 D9         [ 4] 1837         CALL     DOLIT
      000986 00 07                 1838         .word      7
      000988 CD 04 13         [ 4] 1839         CALL     SUBB
      00098B CD 02 12         [ 4] 1840         CALL     DUPP
      00098E CD 00 D9         [ 4] 1841         CALL     DOLIT
      000991 00 0A                 1842         .word      10
      000993 CD 04 78         [ 4] 1843         CALL     LESS
      000996 CD 02 72         [ 4] 1844         CALL     ORR
      000999 CD 02 12         [ 4] 1845 DGTQ1:  CALL     DUPP
      00099C CD 01 B3         [ 4] 1846         CALL     RFROM
      00099F CC 04 5A         [ 2] 1847         JP     ULESS
                                   1848 
                                   1849 ;       NUMBER? ( a -- n T | a F )
                                   1850 ;       Convert a number string to
                                   1851 ;       integer. Push a flag on tos.
      0009A2 09 61                 1852         .word      LINK
                           0009A4  1853 LINK = . 
      0009A4 07                    1854         .byte      7
      0009A5 4E 55 4D 42 45 52 3F  1855         .ascii     "NUMBER?"
      0009AC                       1856 NUMBQ:
      0009AC CD 02 CD         [ 4] 1857         CALL     BASE
      0009AF CD 01 65         [ 4] 1858         CALL     AT
      0009B2 CD 01 DB         [ 4] 1859         CALL     TOR
      0009B5 CD 06 C1         [ 4] 1860         CALL     ZERO
      0009B8 CD 02 3C         [ 4] 1861         CALL     OVER
      0009BB CD 07 87         [ 4] 1862         CALL     COUNT
      0009BE CD 02 3C         [ 4] 1863         CALL     OVER
      0009C1 CD 01 83         [ 4] 1864         CALL     CAT
      0009C4 CD 00 D9         [ 4] 1865         CALL     DOLIT
      0009C7 00 24                 1866         .word     36	; "0x"
      0009C9 CD 04 3B         [ 4] 1867         CALL     EQUAL
      0009CC CD 01 10         [ 4] 1868         CALL     QBRAN
      0009CF 09 E0                 1869         .word      NUMQ1
      0009D1 CD 09 3F         [ 4] 1870         CALL     HEX
      0009D4 CD 02 22         [ 4] 1871         CALL     SWAPP
      0009D7 CD 06 8D         [ 4] 1872         CALL     ONEP
      0009DA CD 02 22         [ 4] 1873         CALL     SWAPP
      0009DD CD 06 9A         [ 4] 1874         CALL     ONEM
      0009E0 CD 02 3C         [ 4] 1875 NUMQ1:  CALL     OVER
      0009E3 CD 01 83         [ 4] 1876         CALL     CAT
      0009E6 CD 00 D9         [ 4] 1877         CALL     DOLIT
      0009E9 00 2D                 1878         .word     45	; "-"
      0009EB CD 04 3B         [ 4] 1879         CALL     EQUAL
      0009EE CD 01 DB         [ 4] 1880         CALL     TOR
      0009F1 CD 02 22         [ 4] 1881         CALL     SWAPP
      0009F4 CD 01 C6         [ 4] 1882         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0009F7 CD 04 13         [ 4] 1883         CALL     SUBB
      0009FA CD 02 22         [ 4] 1884         CALL     SWAPP
      0009FD CD 01 C6         [ 4] 1885         CALL     RAT
      000A00 CD 03 B5         [ 4] 1886         CALL     PLUS
      000A03 CD 03 5C         [ 4] 1887         CALL     QDUP
      000A06 CD 01 10         [ 4] 1888         CALL     QBRAN
      000A09 0A 6A                 1889         .word      NUMQ6
      000A0B CD 06 9A         [ 4] 1890         CALL     ONEM
      000A0E CD 01 DB         [ 4] 1891         CALL     TOR
      000A11 CD 02 12         [ 4] 1892 NUMQ2:  CALL     DUPP
      000A14 CD 01 DB         [ 4] 1893         CALL     TOR
      000A17 CD 01 83         [ 4] 1894         CALL     CAT
      000A1A CD 02 CD         [ 4] 1895         CALL     BASE
      000A1D CD 01 65         [ 4] 1896         CALL     AT
      000A20 CD 09 68         [ 4] 1897         CALL     DIGTQ
      000A23 CD 01 10         [ 4] 1898         CALL     QBRAN
      000A26 0A 58                 1899         .word      NUMQ4
      000A28 CD 02 22         [ 4] 1900         CALL     SWAPP
      000A2B CD 02 CD         [ 4] 1901         CALL     BASE
      000A2E CD 01 65         [ 4] 1902         CALL     AT
      000A31 CD 06 0B         [ 4] 1903         CALL     STAR
      000A34 CD 03 B5         [ 4] 1904         CALL     PLUS
      000A37 CD 01 B3         [ 4] 1905         CALL     RFROM
      000A3A CD 06 8D         [ 4] 1906         CALL     ONEP
      000A3D CD 00 F1         [ 4] 1907         CALL     DONXT
      000A40 0A 11                 1908         .word      NUMQ2
      000A42 CD 01 C6         [ 4] 1909         CALL     RAT
      000A45 CD 02 22         [ 4] 1910         CALL     SWAPP
      000A48 CD 02 08         [ 4] 1911         CALL     DROP
      000A4B CD 01 10         [ 4] 1912         CALL     QBRAN
      000A4E 0A 53                 1913         .word      NUMQ3
      000A50 CD 03 E0         [ 4] 1914         CALL     NEGAT
      000A53 CD 02 22         [ 4] 1915 NUMQ3:  CALL     SWAPP
      000A56 20 0F            [ 2] 1916         JRA     NUMQ5
      000A58 CD 01 B3         [ 4] 1917 NUMQ4:  CALL     RFROM
      000A5B CD 01 B3         [ 4] 1918         CALL     RFROM
      000A5E CD 03 95         [ 4] 1919         CALL     DDROP
      000A61 CD 03 95         [ 4] 1920         CALL     DDROP
      000A64 CD 06 C1         [ 4] 1921         CALL     ZERO
      000A67 CD 02 12         [ 4] 1922 NUMQ5:  CALL     DUPP
      000A6A CD 01 B3         [ 4] 1923 NUMQ6:  CALL     RFROM
      000A6D CD 03 95         [ 4] 1924         CALL     DDROP
      000A70 CD 01 B3         [ 4] 1925         CALL     RFROM
      000A73 CD 02 CD         [ 4] 1926         CALL     BASE
      000A76 CC 01 4E         [ 2] 1927         JP     STORE
                                   1928 
                                   1929 ;; Basic I/O
                                   1930 
                                   1931 ;       KEY     ( -- c )
                                   1932 ;       Wait for and return an
                                   1933 ;       input character.
      000A79 09 A4                 1934         .word      LINK
                           000A7B  1935 LINK = . 
      000A7B 03                    1936         .byte      3
      000A7C 4B 45 59              1937         .ascii     "KEY"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000A7F                       1938 KEY:
      000A7F CD 00 A5         [ 4] 1939 KEY1:   CALL     QKEY
      000A82 CD 01 10         [ 4] 1940         CALL     QBRAN
      000A85 0A 7F                 1941         .word      KEY1
      000A87 81               [ 4] 1942         RET
                                   1943 
                                   1944 ;       NUF?    ( -- t )
                                   1945 ;       Return false if no input,
                                   1946 ;       else pause and if CR return true.
      000A88 0A 7B                 1947         .word      LINK
                           000A8A  1948 LINK = . 
      000A8A 04                    1949         .byte      4
      000A8B 4E 55 46 3F           1950         .ascii     "NUF?"
      000A8F                       1951 NUFQ:
      000A8F CD 00 A5         [ 4] 1952         CALL     QKEY
      000A92 CD 02 12         [ 4] 1953         CALL     DUPP
      000A95 CD 01 10         [ 4] 1954         CALL     QBRAN
      000A98 0A A8                 1955         .word      NUFQ1
      000A9A CD 03 95         [ 4] 1956         CALL     DDROP
      000A9D CD 0A 7F         [ 4] 1957         CALL     KEY
      000AA0 CD 00 D9         [ 4] 1958         CALL     DOLIT
      000AA3 00 0D                 1959         .word      CRR
      000AA5 CC 04 3B         [ 2] 1960         JP     EQUAL
      000AA8 81               [ 4] 1961 NUFQ1:  RET
                                   1962 
                                   1963 ;       SPACE   ( -- )
                                   1964 ;       Send  blank character to
                                   1965 ;       output device.
      000AA9 0A 8A                 1966         .word      LINK
                           000AAB  1967 LINK = . 
      000AAB 05                    1968         .byte      5
      000AAC 53 50 41 43 45        1969         .ascii     "SPACE"
      000AB1                       1970 SPACE:
      000AB1 CD 06 B4         [ 4] 1971         CALL     BLANK
      000AB4 CC 00 C3         [ 2] 1972         JP     EMIT
                                   1973 
                                   1974 ;       SPACES  ( +n -- )
                                   1975 ;       Send n spaces to output device.
      000AB7 0A AB                 1976         .word      LINK
                           000AB9  1977 LINK = . 
      000AB9 06                    1978         .byte      6
      000ABA 53 50 41 43 45 53     1979         .ascii     "SPACES"
      000AC0                       1980 SPACS:
      000AC0 CD 06 C1         [ 4] 1981         CALL     ZERO
      000AC3 CD 04 98         [ 4] 1982         CALL     MAX
      000AC6 CD 01 DB         [ 4] 1983         CALL     TOR
      000AC9 20 03            [ 2] 1984         JRA     CHAR2
      000ACB CD 0A B1         [ 4] 1985 CHAR1:  CALL     SPACE
      000ACE CD 00 F1         [ 4] 1986 CHAR2:  CALL     DONXT
      000AD1 0A CB                 1987         .word      CHAR1
      000AD3 81               [ 4] 1988         RET
                                   1989 
                                   1990 ;       TYPE    ( b u -- )
                                   1991 ;       Output u characters from b.
      000AD4 0A B9                 1992         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                           000AD6  1993 LINK = . 
      000AD6 04                    1994         .byte      4
      000AD7 54 59 50 45           1995         .ascii     "TYPE"
      000ADB                       1996 TYPES:
      000ADB CD 01 DB         [ 4] 1997         CALL     TOR
      000ADE 20 0C            [ 2] 1998         JRA     TYPE2
      000AE0 CD 02 12         [ 4] 1999 TYPE1:  CALL     DUPP
      000AE3 CD 01 83         [ 4] 2000         CALL     CAT
      000AE6 CD 00 C3         [ 4] 2001         CALL     EMIT
      000AE9 CD 06 8D         [ 4] 2002         CALL     ONEP
      000AEC CD 00 F1         [ 4] 2003 TYPE2:  CALL     DONXT
      000AEF 0A E0                 2004         .word      TYPE1
      000AF1 CC 02 08         [ 2] 2005         JP     DROP
                                   2006 
                                   2007 ;       CR      ( -- )
                                   2008 ;       Output a carriage return
                                   2009 ;       and a line feed.
      000AF4 0A D6                 2010         .word      LINK
                           000AF6  2011 LINK = . 
      000AF6 02                    2012         .byte      2
      000AF7 43 52                 2013         .ascii     "CR"
      000AF9                       2014 CR:
      000AF9 CD 00 D9         [ 4] 2015         CALL     DOLIT
      000AFC 00 0D                 2016         .word      CRR
      000AFE CD 00 C3         [ 4] 2017         CALL     EMIT
      000B01 CD 00 D9         [ 4] 2018         CALL     DOLIT
      000B04 00 0A                 2019         .word      LF
      000B06 CC 00 C3         [ 2] 2020         JP     EMIT
                                   2021 
                                   2022 ;       do$     ( -- a )
                                   2023 ;       Return  address of a compiled
                                   2024 ;       string.
      000B09 0A F6                 2025         .word      LINK
                           000B0B  2026 LINK = . 
      000B0B 43                    2027 	.byte      COMPO+3
      000B0C 64 6F 24              2028         .ascii     "do$"
      000B0F                       2029 DOSTR:
      000B0F CD 01 B3         [ 4] 2030         CALL     RFROM
      000B12 CD 01 C6         [ 4] 2031         CALL     RAT
      000B15 CD 01 B3         [ 4] 2032         CALL     RFROM
      000B18 CD 07 87         [ 4] 2033         CALL     COUNT
      000B1B CD 03 B5         [ 4] 2034         CALL     PLUS
      000B1E CD 01 DB         [ 4] 2035         CALL     TOR
      000B21 CD 02 22         [ 4] 2036         CALL     SWAPP
      000B24 CD 01 DB         [ 4] 2037         CALL     TOR
      000B27 81               [ 4] 2038         RET
                                   2039 
                                   2040 ;       $"|     ( -- a )
                                   2041 ;       Run time routine compiled by $".
                                   2042 ;       Return address of a compiled string.
      000B28 0B 0B                 2043         .word      LINK
                           000B2A  2044 LINK = . 
      000B2A 43                    2045 	.byte      COMPO+3
      000B2B 24 22 7C              2046         .byte     '$','"','|'
      000B2E                       2047 STRQP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000B2E CD 0B 0F         [ 4] 2048         CALL     DOSTR
      000B31 81               [ 4] 2049         RET
                                   2050 
                                   2051 ;       ."|     ( -- )
                                   2052 ;       Run time routine of ." .
                                   2053 ;       Output a compiled string.
      000B32 0B 2A                 2054         .word      LINK
                           000B34  2055 LINK = . 
      000B34 43                    2056 	.byte      COMPO+3
      000B35 2E 22 7C              2057         .byte     '.','"','|'
      000B38                       2058 DOTQP:
      000B38 CD 0B 0F         [ 4] 2059         CALL     DOSTR
      000B3B CD 07 87         [ 4] 2060         CALL     COUNT
      000B3E CC 0A DB         [ 2] 2061         JP     TYPES
                                   2062 
                                   2063 ;       .R      ( n +n -- )
                                   2064 ;       Display an integer in a field
                                   2065 ;       of n columns, right justified.
      000B41 0B 34                 2066         .word      LINK
                           000B43  2067 LINK = . 
      000B43 02                    2068         .byte      2
      000B44 2E 52                 2069         .ascii     ".R"
      000B46                       2070 DOTR:
      000B46 CD 01 DB         [ 4] 2071         CALL     TOR
      000B49 CD 09 21         [ 4] 2072         CALL     STR
      000B4C CD 01 B3         [ 4] 2073         CALL     RFROM
      000B4F CD 02 3C         [ 4] 2074         CALL     OVER
      000B52 CD 04 13         [ 4] 2075         CALL     SUBB
      000B55 CD 0A C0         [ 4] 2076         CALL     SPACS
      000B58 CC 0A DB         [ 2] 2077         JP     TYPES
                                   2078 
                                   2079 ;       U.R     ( u +n -- )
                                   2080 ;       Display an unsigned integer
                                   2081 ;       in n column, right justified.
      000B5B 0B 43                 2082         .word      LINK
                           000B5D  2083 LINK = . 
      000B5D 03                    2084         .byte      3
      000B5E 55 2E 52              2085         .ascii     "U.R"
      000B61                       2086 UDOTR:
      000B61 CD 01 DB         [ 4] 2087         CALL     TOR
      000B64 CD 08 A4         [ 4] 2088         CALL     BDIGS
      000B67 CD 08 DE         [ 4] 2089         CALL     DIGS
      000B6A CD 09 09         [ 4] 2090         CALL     EDIGS
      000B6D CD 01 B3         [ 4] 2091         CALL     RFROM
      000B70 CD 02 3C         [ 4] 2092         CALL     OVER
      000B73 CD 04 13         [ 4] 2093         CALL     SUBB
      000B76 CD 0A C0         [ 4] 2094         CALL     SPACS
      000B79 CC 0A DB         [ 2] 2095         JP     TYPES
                                   2096 
                                   2097 ;       U.      ( u -- )
                                   2098 ;       Display an unsigned integer
                                   2099 ;       in free format.
      000B7C 0B 5D                 2100         .word      LINK
                           000B7E  2101 LINK = . 
      000B7E 02                    2102         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



      000B7F 55 2E                 2103         .ascii     "U."
      000B81                       2104 UDOT:
      000B81 CD 08 A4         [ 4] 2105         CALL     BDIGS
      000B84 CD 08 DE         [ 4] 2106         CALL     DIGS
      000B87 CD 09 09         [ 4] 2107         CALL     EDIGS
      000B8A CD 0A B1         [ 4] 2108         CALL     SPACE
      000B8D CC 0A DB         [ 2] 2109         JP     TYPES
                                   2110 
                                   2111 ;       .       ( w -- )
                                   2112 ;       Display an integer in free
                                   2113 ;       format, preceeded by a space.
      000B90 0B 7E                 2114         .word      LINK
                           000B92  2115 LINK = . 
      000B92 01                    2116         .byte      1
      000B93 2E                    2117         .ascii     "."
      000B94                       2118 DOT:
      000B94 CD 02 CD         [ 4] 2119         CALL     BASE
      000B97 CD 01 65         [ 4] 2120         CALL     AT
      000B9A CD 00 D9         [ 4] 2121         CALL     DOLIT
      000B9D 00 0A                 2122         .word      10
      000B9F CD 02 87         [ 4] 2123         CALL     XORR    ;?decimal
      000BA2 CD 01 10         [ 4] 2124         CALL     QBRAN
      000BA5 0B AA                 2125         .word      DOT1
      000BA7 CC 0B 81         [ 2] 2126         JP     UDOT
      000BAA CD 09 21         [ 4] 2127 DOT1:   CALL     STR
      000BAD CD 0A B1         [ 4] 2128         CALL     SPACE
      000BB0 CC 0A DB         [ 2] 2129         JP     TYPES
                                   2130 
                                   2131 ;       ?       ( a -- )
                                   2132 ;       Display contents in memory cell.
      000BB3 0B 92                 2133         .word      LINK
                                   2134         
                           000BB5  2135 LINK = . 
      000BB5 01                    2136         .byte      1
      000BB6 3F                    2137         .ascii     "?"
      000BB7                       2138 QUEST:
      000BB7 CD 01 65         [ 4] 2139         CALL     AT
      000BBA CC 0B 94         [ 2] 2140         JP     DOT
                                   2141 
                                   2142 ;; Parsing
                                   2143 
                                   2144 ;       parse   ( b u c -- b u delta ; <string> )
                                   2145 ;       Scan string delimited by c.
                                   2146 ;       Return found string and its offset.
      000BBD 0B B5                 2147         .word      LINK
                           000BBF  2148 LINK = . 
      000BBF 05                    2149         .byte      5
      000BC0 70 61 72 73 65        2150         .ascii     "parse"
      000BC5                       2151 PARS:
      000BC5 CD 02 DC         [ 4] 2152         CALL     TEMP
      000BC8 CD 01 4E         [ 4] 2153         CALL     STORE
      000BCB CD 02 3C         [ 4] 2154         CALL     OVER
      000BCE CD 01 DB         [ 4] 2155         CALL     TOR
      000BD1 CD 02 12         [ 4] 2156         CALL     DUPP
      000BD4 CD 01 10         [ 4] 2157         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000BD7 0C 7D                 2158         .word      PARS8
      000BD9 CD 06 9A         [ 4] 2159         CALL     ONEM
      000BDC CD 02 DC         [ 4] 2160         CALL     TEMP
      000BDF CD 01 65         [ 4] 2161         CALL     AT
      000BE2 CD 06 B4         [ 4] 2162         CALL     BLANK
      000BE5 CD 04 3B         [ 4] 2163         CALL     EQUAL
      000BE8 CD 01 10         [ 4] 2164         CALL     QBRAN
      000BEB 0C 1E                 2165         .word      PARS3
      000BED CD 01 DB         [ 4] 2166         CALL     TOR
      000BF0 CD 06 B4         [ 4] 2167 PARS1:  CALL     BLANK
      000BF3 CD 02 3C         [ 4] 2168         CALL     OVER
      000BF6 CD 01 83         [ 4] 2169         CALL     CAT     ;skip leading blanks ONLY
      000BF9 CD 04 13         [ 4] 2170         CALL     SUBB
      000BFC CD 02 4B         [ 4] 2171         CALL     ZLESS
      000BFF CD 03 CF         [ 4] 2172         CALL     INVER
      000C02 CD 01 10         [ 4] 2173         CALL     QBRAN
      000C05 0C 1B                 2174         .word      PARS2
      000C07 CD 06 8D         [ 4] 2175         CALL     ONEP
      000C0A CD 00 F1         [ 4] 2176         CALL     DONXT
      000C0D 0B F0                 2177         .word      PARS1
      000C0F CD 01 B3         [ 4] 2178         CALL     RFROM
      000C12 CD 02 08         [ 4] 2179         CALL     DROP
      000C15 CD 06 C1         [ 4] 2180         CALL     ZERO
      000C18 CC 02 12         [ 2] 2181         JP     DUPP
      000C1B CD 01 B3         [ 4] 2182 PARS2:  CALL     RFROM
      000C1E CD 02 3C         [ 4] 2183 PARS3:  CALL     OVER
      000C21 CD 02 22         [ 4] 2184         CALL     SWAPP
      000C24 CD 01 DB         [ 4] 2185         CALL     TOR
      000C27 CD 02 DC         [ 4] 2186 PARS4:  CALL     TEMP
      000C2A CD 01 65         [ 4] 2187         CALL     AT
      000C2D CD 02 3C         [ 4] 2188         CALL     OVER
      000C30 CD 01 83         [ 4] 2189         CALL     CAT
      000C33 CD 04 13         [ 4] 2190         CALL     SUBB    ;scan for delimiter
      000C36 CD 02 DC         [ 4] 2191         CALL     TEMP
      000C39 CD 01 65         [ 4] 2192         CALL     AT
      000C3C CD 06 B4         [ 4] 2193         CALL     BLANK
      000C3F CD 04 3B         [ 4] 2194         CALL     EQUAL
      000C42 CD 01 10         [ 4] 2195         CALL     QBRAN
      000C45 0C 4A                 2196         .word      PARS5
      000C47 CD 02 4B         [ 4] 2197         CALL     ZLESS
      000C4A CD 01 10         [ 4] 2198 PARS5:  CALL     QBRAN
      000C4D 0C 5F                 2199         .word      PARS6
      000C4F CD 06 8D         [ 4] 2200         CALL     ONEP
      000C52 CD 00 F1         [ 4] 2201         CALL     DONXT
      000C55 0C 27                 2202         .word      PARS4
      000C57 CD 02 12         [ 4] 2203         CALL     DUPP
      000C5A CD 01 DB         [ 4] 2204         CALL     TOR
      000C5D 20 0F            [ 2] 2205         JRA     PARS7
      000C5F CD 01 B3         [ 4] 2206 PARS6:  CALL     RFROM
      000C62 CD 02 08         [ 4] 2207         CALL     DROP
      000C65 CD 02 12         [ 4] 2208         CALL     DUPP
      000C68 CD 06 8D         [ 4] 2209         CALL     ONEP
      000C6B CD 01 DB         [ 4] 2210         CALL     TOR
      000C6E CD 02 3C         [ 4] 2211 PARS7:  CALL     OVER
      000C71 CD 04 13         [ 4] 2212         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000C74 CD 01 B3         [ 4] 2213         CALL     RFROM
      000C77 CD 01 B3         [ 4] 2214         CALL     RFROM
      000C7A CC 04 13         [ 2] 2215         JP     SUBB
      000C7D CD 02 3C         [ 4] 2216 PARS8:  CALL     OVER
      000C80 CD 01 B3         [ 4] 2217         CALL     RFROM
      000C83 CC 04 13         [ 2] 2218         JP     SUBB
                                   2219 
                                   2220 ;       PARSE   ( c -- b u ; <string> )
                                   2221 ;       Scan input stream and return
                                   2222 ;       counted string delimited by c.
      000C86 0B BF                 2223         .word      LINK
                           000C88  2224 LINK = . 
      000C88 05                    2225         .byte      5
      000C89 50 41 52 53 45        2226         .ascii     "PARSE"
      000C8E                       2227 PARSE:
      000C8E CD 01 DB         [ 4] 2228         CALL     TOR
      000C91 CD 07 B7         [ 4] 2229         CALL     TIB
      000C94 CD 02 EB         [ 4] 2230         CALL     INN
      000C97 CD 01 65         [ 4] 2231         CALL     AT
      000C9A CD 03 B5         [ 4] 2232         CALL     PLUS    ;current input buffer pointer
      000C9D CD 02 FB         [ 4] 2233         CALL     NTIB
      000CA0 CD 01 65         [ 4] 2234         CALL     AT
      000CA3 CD 02 EB         [ 4] 2235         CALL     INN
      000CA6 CD 01 65         [ 4] 2236         CALL     AT
      000CA9 CD 04 13         [ 4] 2237         CALL     SUBB    ;remaining count
      000CAC CD 01 B3         [ 4] 2238         CALL     RFROM
      000CAF CD 0B C5         [ 4] 2239         CALL     PARS
      000CB2 CD 02 EB         [ 4] 2240         CALL     INN
      000CB5 CC 07 45         [ 2] 2241         JP     PSTOR
                                   2242 
                                   2243 ;       .(      ( -- )
                                   2244 ;       Output following string up to next ) .
      000CB8 0C 88                 2245         .word      LINK
                           000CBA  2246 LINK = . 
      000CBA 82                    2247 	.byte      IMEDD+2
      000CBB 2E 28                 2248         .ascii     ".("
      000CBD                       2249 DOTPR:
      000CBD CD 00 D9         [ 4] 2250         CALL     DOLIT
      000CC0 00 29                 2251         .word     41	; ")"
      000CC2 CD 0C 8E         [ 4] 2252         CALL     PARSE
      000CC5 CC 0A DB         [ 2] 2253         JP     TYPES
                                   2254 
                                   2255 ;       (       ( -- )
                                   2256 ;       Ignore following string up to next ).
                                   2257 ;       A comment.
      000CC8 0C BA                 2258         .word      LINK
                           000CCA  2259 LINK = . 
      000CCA 81                    2260 	.byte      IMEDD+1
      000CCB 28                    2261         .ascii     "("
      000CCC                       2262 PAREN:
      000CCC CD 00 D9         [ 4] 2263         CALL     DOLIT
      000CCF 00 29                 2264         .word     41	; ")"
      000CD1 CD 0C 8E         [ 4] 2265         CALL     PARSE
      000CD4 CC 03 95         [ 2] 2266         JP     DDROP
                                   2267 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



                                   2268 ;       \       ( -- )
                                   2269 ;       Ignore following text till
                                   2270 ;       end of line.
      000CD7 0C CA                 2271         .word      LINK
                           000CD9  2272 LINK = . 
      000CD9 81                    2273 			.byte      IMEDD+1
      000CDA 5C 5C                 2274         .ascii     "\\"
      000CDC                       2275 BKSLA:
      000CDC CD 02 FB         [ 4] 2276         CALL     NTIB
      000CDF CD 01 65         [ 4] 2277         CALL     AT
      000CE2 CD 02 EB         [ 4] 2278         CALL     INN
      000CE5 CC 01 4E         [ 2] 2279         JP     STORE
                                   2280 
                                   2281 ;       WORD    ( c -- a ; <string> )
                                   2282 ;       Parse a word from input stream
                                   2283 ;       and copy it to code dictionary.
      000CE8 0C D9                 2284         .word      LINK
                           000CEA  2285 LINK = . 
      000CEA 04                    2286         .byte      4
      000CEB 57 4F 52 44           2287         .ascii     "WORD"
      000CEF                       2288 WORDD:
      000CEF CD 0C 8E         [ 4] 2289         CALL     PARSE
      000CF2 CD 07 9A         [ 4] 2290         CALL     HERE
      000CF5 CD 06 62         [ 4] 2291         CALL     CELLP
      000CF8 CC 08 47         [ 2] 2292         JP     PACKS
                                   2293 
                                   2294 ;       TOKEN   ( -- a ; <string> )
                                   2295 ;       Parse a word from input stream
                                   2296 ;       and copy it to name dictionary.
      000CFB 0C EA                 2297         .word      LINK
                           000CFD  2298 LINK = . 
      000CFD 05                    2299         .byte      5
      000CFE 54 4F 4B 45 4E        2300         .ascii     "TOKEN"
      000D03                       2301 TOKEN:
      000D03 CD 06 B4         [ 4] 2302         CALL     BLANK
      000D06 CC 0C EF         [ 2] 2303         JP     WORDD
                                   2304 
                                   2305 ;; Dictionary search
                                   2306 
                                   2307 ;       NAME>   ( na -- ca )
                                   2308 ;       Return a code address given
                                   2309 ;       a name address.
      000D09 0C FD                 2310         .word      LINK
                           000D0B  2311 LINK = . 
      000D0B 05                    2312         .byte      5
      000D0C 4E 41 4D 45 3E        2313         .ascii     "NAME>"
      000D11                       2314 NAMET:
      000D11 CD 07 87         [ 4] 2315         CALL     COUNT
      000D14 CD 00 D9         [ 4] 2316         CALL     DOLIT
      000D17 00 1F                 2317         .word      31
      000D19 CD 02 5E         [ 4] 2318         CALL     ANDD
      000D1C CC 03 B5         [ 2] 2319         JP     PLUS
                                   2320 
                                   2321 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2322 ;       Compare u cells in two
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2323 ;       strings. Return 0 if identical.
      000D1F 0D 0B                 2324         .word      LINK
                           000D21  2325 LINK = . 
      000D21 05                    2326         .byte       5
      000D22 53 41 4D 45 3F        2327         .ascii     "SAME?"
      000D27                       2328 SAMEQ:
      000D27 CD 06 9A         [ 4] 2329         CALL     ONEM
      000D2A CD 01 DB         [ 4] 2330         CALL     TOR
      000D2D 20 29            [ 2] 2331         JRA     SAME2
      000D2F CD 02 3C         [ 4] 2332 SAME1:  CALL     OVER
      000D32 CD 01 C6         [ 4] 2333         CALL     RAT
      000D35 CD 03 B5         [ 4] 2334         CALL     PLUS
      000D38 CD 01 83         [ 4] 2335         CALL     CAT
      000D3B CD 02 3C         [ 4] 2336         CALL     OVER
      000D3E CD 01 C6         [ 4] 2337         CALL     RAT
      000D41 CD 03 B5         [ 4] 2338         CALL     PLUS
      000D44 CD 01 83         [ 4] 2339         CALL     CAT
      000D47 CD 04 13         [ 4] 2340         CALL     SUBB
      000D4A CD 03 5C         [ 4] 2341         CALL     QDUP
      000D4D CD 01 10         [ 4] 2342         CALL     QBRAN
      000D50 0D 58                 2343         .word      SAME2
      000D52 CD 01 B3         [ 4] 2344         CALL     RFROM
      000D55 CC 02 08         [ 2] 2345         JP     DROP
      000D58 CD 00 F1         [ 4] 2346 SAME2:  CALL     DONXT
      000D5B 0D 2F                 2347         .word      SAME1
      000D5D CC 06 C1         [ 2] 2348         JP     ZERO
                                   2349 
                                   2350 ;       find    ( a va -- ca na | a F )
                                   2351 ;       Search vocabulary for string.
                                   2352 ;       Return ca and na if succeeded.
      000D60 0D 21                 2353         .word      LINK
                           000D62  2354 LINK = . 
      000D62 04                    2355         .byte      4
      000D63 66 69 6E 64           2356         .ascii     "find"
      000D67                       2357 FIND:
      000D67 CD 02 22         [ 4] 2358         CALL     SWAPP
      000D6A CD 02 12         [ 4] 2359         CALL     DUPP
      000D6D CD 01 83         [ 4] 2360         CALL     CAT
      000D70 CD 02 DC         [ 4] 2361         CALL     TEMP
      000D73 CD 01 4E         [ 4] 2362         CALL     STORE
      000D76 CD 02 12         [ 4] 2363         CALL     DUPP
      000D79 CD 01 65         [ 4] 2364         CALL     AT
      000D7C CD 01 DB         [ 4] 2365         CALL     TOR
      000D7F CD 06 62         [ 4] 2366         CALL     CELLP
      000D82 CD 02 22         [ 4] 2367         CALL     SWAPP
      000D85 CD 01 65         [ 4] 2368 FIND1:  CALL     AT
      000D88 CD 02 12         [ 4] 2369         CALL     DUPP
      000D8B CD 01 10         [ 4] 2370         CALL     QBRAN
      000D8E 0D C4                 2371         .word      FIND6
      000D90 CD 02 12         [ 4] 2372         CALL     DUPP
      000D93 CD 01 65         [ 4] 2373         CALL     AT
      000D96 CD 00 D9         [ 4] 2374         CALL     DOLIT
      000D99 1F 7F                 2375         .word      MASKK
      000D9B CD 02 5E         [ 4] 2376         CALL     ANDD
      000D9E CD 01 C6         [ 4] 2377         CALL     RAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000DA1 CD 02 87         [ 4] 2378         CALL     XORR
      000DA4 CD 01 10         [ 4] 2379         CALL     QBRAN
      000DA7 0D B3                 2380         .word      FIND2
      000DA9 CD 06 62         [ 4] 2381         CALL     CELLP
      000DAC CD 00 D9         [ 4] 2382         CALL     DOLIT
      000DAF FF FF                 2383         .word     0xFFFF
      000DB1 20 0C            [ 2] 2384         JRA     FIND3
      000DB3 CD 06 62         [ 4] 2385 FIND2:  CALL     CELLP
      000DB6 CD 02 DC         [ 4] 2386         CALL     TEMP
      000DB9 CD 01 65         [ 4] 2387         CALL     AT
      000DBC CD 0D 27         [ 4] 2388         CALL     SAMEQ
      000DBF CD 01 27         [ 4] 2389 FIND3:  CALL     BRAN
      000DC2 0D D3                 2390         .word      FIND4
      000DC4 CD 01 B3         [ 4] 2391 FIND6:  CALL     RFROM
      000DC7 CD 02 08         [ 4] 2392         CALL     DROP
      000DCA CD 02 22         [ 4] 2393         CALL     SWAPP
      000DCD CD 06 71         [ 4] 2394         CALL     CELLM
      000DD0 CC 02 22         [ 2] 2395         JP     SWAPP
      000DD3 CD 01 10         [ 4] 2396 FIND4:  CALL     QBRAN
      000DD6 0D E0                 2397         .word      FIND5
      000DD8 CD 06 71         [ 4] 2398         CALL     CELLM
      000DDB CD 06 71         [ 4] 2399         CALL     CELLM
      000DDE 20 A5            [ 2] 2400         JRA     FIND1
      000DE0 CD 01 B3         [ 4] 2401 FIND5:  CALL     RFROM
      000DE3 CD 02 08         [ 4] 2402         CALL     DROP
      000DE6 CD 02 22         [ 4] 2403         CALL     SWAPP
      000DE9 CD 02 08         [ 4] 2404         CALL     DROP
      000DEC CD 06 71         [ 4] 2405         CALL     CELLM
      000DEF CD 02 12         [ 4] 2406         CALL     DUPP
      000DF2 CD 0D 11         [ 4] 2407         CALL     NAMET
      000DF5 CC 02 22         [ 2] 2408         JP     SWAPP
                                   2409 
                                   2410 ;       NAME?   ( a -- ca na | a F )
                                   2411 ;       Search vocabularies for a string.
      000DF8 0D 62                 2412         .word      LINK
                           000DFA  2413 LINK = . 
      000DFA 05                    2414         .byte      5
      000DFB 4E 41 4D 45 3F        2415         .ascii     "NAME?"
      000E00                       2416 NAMEQ:
      000E00 CD 03 2E         [ 4] 2417         CALL     CNTXT
      000E03 CC 0D 67         [ 2] 2418         JP     FIND
                                   2419 
                                   2420 ;; Terminal response
                                   2421 
                                   2422 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2423 ;       Backup cursor by one character.
      000E06 0D FA                 2424         .word      LINK
                           000E08  2425 LINK = . 
      000E08 02                    2426         .byte      2
      000E09 5E 68                 2427         .ascii     "^h"
      000E0B                       2428 BKSP:
      000E0B CD 01 DB         [ 4] 2429         CALL     TOR
      000E0E CD 02 3C         [ 4] 2430         CALL     OVER
      000E11 CD 01 B3         [ 4] 2431         CALL     RFROM
      000E14 CD 02 22         [ 4] 2432         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



      000E17 CD 02 3C         [ 4] 2433         CALL     OVER
      000E1A CD 02 87         [ 4] 2434         CALL     XORR
      000E1D CD 01 10         [ 4] 2435         CALL     QBRAN
      000E20 0E 3B                 2436         .word      BACK1
      000E22 CD 00 D9         [ 4] 2437         CALL     DOLIT
      000E25 00 08                 2438         .word      BKSPP
      000E27 CD 00 C3         [ 4] 2439         CALL     EMIT
      000E2A CD 06 9A         [ 4] 2440         CALL     ONEM
      000E2D CD 06 B4         [ 4] 2441         CALL     BLANK
      000E30 CD 00 C3         [ 4] 2442         CALL     EMIT
      000E33 CD 00 D9         [ 4] 2443         CALL     DOLIT
      000E36 00 08                 2444         .word      BKSPP
      000E38 CC 00 C3         [ 2] 2445         JP     EMIT
      000E3B 81               [ 4] 2446 BACK1:  RET
                                   2447 
                                   2448 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2449 ;       Accept and echo key stroke
                                   2450 ;       and bump cursor.
      000E3C 0E 08                 2451         .word      LINK
                           000E3E  2452 LINK = . 
      000E3E 03                    2453         .byte      3
      000E3F 54 41 50              2454         .ascii     "TAP"
      000E42                       2455 TAP:
      000E42 CD 02 12         [ 4] 2456         CALL     DUPP
      000E45 CD 00 C3         [ 4] 2457         CALL     EMIT
      000E48 CD 02 3C         [ 4] 2458         CALL     OVER
      000E4B CD 01 72         [ 4] 2459         CALL     CSTOR
      000E4E CC 06 8D         [ 2] 2460         JP     ONEP
                                   2461 
                                   2462 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2463 ;       Process a key stroke,
                                   2464 ;       CR or backspace.
      000E51 0E 3E                 2465         .word      LINK
                           000E53  2466 LINK = . 
      000E53 04                    2467         .byte      4
      000E54 6B 54 41 50           2468         .ascii     "kTAP"
      000E58                       2469 KTAP:
      000E58 CD 02 12         [ 4] 2470         CALL     DUPP
      000E5B CD 00 D9         [ 4] 2471         CALL     DOLIT
      000E5E 00 0D                 2472         .word      CRR
      000E60 CD 02 87         [ 4] 2473         CALL     XORR
      000E63 CD 01 10         [ 4] 2474         CALL     QBRAN
      000E66 0E 7E                 2475         .word      KTAP2
      000E68 CD 00 D9         [ 4] 2476         CALL     DOLIT
      000E6B 00 08                 2477         .word      BKSPP
      000E6D CD 02 87         [ 4] 2478         CALL     XORR
      000E70 CD 01 10         [ 4] 2479         CALL     QBRAN
      000E73 0E 7B                 2480         .word      KTAP1
      000E75 CD 06 B4         [ 4] 2481         CALL     BLANK
      000E78 CC 0E 42         [ 2] 2482         JP     TAP
      000E7B CC 0E 0B         [ 2] 2483 KTAP1:  JP     BKSP
      000E7E CD 02 08         [ 4] 2484 KTAP2:  CALL     DROP
      000E81 CD 02 22         [ 4] 2485         CALL     SWAPP
      000E84 CD 02 08         [ 4] 2486         CALL     DROP
      000E87 CC 02 12         [ 2] 2487         JP     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



                                   2488 
                                   2489 ;       accept  ( b u -- b u )
                                   2490 ;       Accept characters to input
                                   2491 ;       buffer. Return with actual count.
      000E8A 0E 53                 2492         .word      LINK
                           000E8C  2493 LINK = . 
      000E8C 06                    2494         .byte      6
      000E8D 41 43 43 45 50 54     2495         .ascii     "ACCEPT"
      000E93                       2496 ACCEP:
      000E93 CD 02 3C         [ 4] 2497         CALL     OVER
      000E96 CD 03 B5         [ 4] 2498         CALL     PLUS
      000E99 CD 02 3C         [ 4] 2499         CALL     OVER
      000E9C CD 03 A0         [ 4] 2500 ACCP1:  CALL     DDUP
      000E9F CD 02 87         [ 4] 2501         CALL     XORR
      000EA2 CD 01 10         [ 4] 2502         CALL     QBRAN
      000EA5 0E C7                 2503         .word      ACCP4
      000EA7 CD 0A 7F         [ 4] 2504         CALL     KEY
      000EAA CD 02 12         [ 4] 2505         CALL     DUPP
      000EAD CD 06 B4         [ 4] 2506         CALL     BLANK
      000EB0 CD 00 D9         [ 4] 2507         CALL     DOLIT
      000EB3 00 7F                 2508         .word      127
      000EB5 CD 04 D5         [ 4] 2509         CALL     WITHI
      000EB8 CD 01 10         [ 4] 2510         CALL     QBRAN
      000EBB 0E C2                 2511         .word      ACCP2
      000EBD CD 0E 42         [ 4] 2512         CALL     TAP
      000EC0 20 03            [ 2] 2513         JRA     ACCP3
      000EC2 CD 0E 58         [ 4] 2514 ACCP2:  CALL     KTAP
      000EC5 20 D5            [ 2] 2515 ACCP3:  JRA     ACCP1
      000EC7 CD 02 08         [ 4] 2516 ACCP4:  CALL     DROP
      000ECA CD 02 3C         [ 4] 2517         CALL     OVER
      000ECD CC 04 13         [ 2] 2518         JP     SUBB
                                   2519 
                                   2520 ;       QUERY   ( -- )
                                   2521 ;       Accept input stream to
                                   2522 ;       terminal input buffer.
      000ED0 0E 8C                 2523         .word      LINK
                                   2524         
                           000ED2  2525 LINK = . 
      000ED2 05                    2526         .byte      5
      000ED3 51 55 45 52 59        2527         .ascii     "QUERY"
      000ED8                       2528 QUERY:
      000ED8 CD 07 B7         [ 4] 2529         CALL     TIB
      000EDB CD 00 D9         [ 4] 2530         CALL     DOLIT
      000EDE 00 50                 2531         .word      80
      000EE0 CD 0E 93         [ 4] 2532         CALL     ACCEP
      000EE3 CD 02 FB         [ 4] 2533         CALL     NTIB
      000EE6 CD 01 4E         [ 4] 2534         CALL     STORE
      000EE9 CD 02 08         [ 4] 2535         CALL     DROP
      000EEC CD 06 C1         [ 4] 2536         CALL     ZERO
      000EEF CD 02 EB         [ 4] 2537         CALL     INN
      000EF2 CC 01 4E         [ 2] 2538         JP     STORE
                                   2539 
                                   2540 ;       ABORT   ( -- )
                                   2541 ;       Reset data stack and
                                   2542 ;       jump to QUIT.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000EF5 0E D2                 2543         .word      LINK
                           000EF7  2544 LINK = . 
      000EF7 05                    2545         .byte      5
      000EF8 41 42 4F 52 54        2546         .ascii     "ABORT"
      000EFD                       2547 ABORT:
      000EFD CD 0F F4         [ 4] 2548         CALL     PRESE
      000F00 CC 10 11         [ 2] 2549         JP     QUIT
                                   2550 
                                   2551 ;       abort"  ( f -- )
                                   2552 ;       Run time routine of ABORT".
                                   2553 ;       Abort with a message.
      000F03 0E F7                 2554         .word      LINK
                           000F05  2555 LINK = . 
      000F05 46                    2556 	.byte      COMPO+6
      000F06 61 62 6F 72 74        2557         .ascii     "abort"
      000F0B 22                    2558         .byte      '"'
      000F0C                       2559 ABORQ:
      000F0C CD 01 10         [ 4] 2560         CALL     QBRAN
      000F0F 0F 2B                 2561         .word      ABOR2   ;text flag
      000F11 CD 0B 0F         [ 4] 2562         CALL     DOSTR
      000F14 CD 0A B1         [ 4] 2563 ABOR1:  CALL     SPACE
      000F17 CD 07 87         [ 4] 2564         CALL     COUNT
      000F1A CD 0A DB         [ 4] 2565         CALL     TYPES
      000F1D CD 00 D9         [ 4] 2566         CALL     DOLIT
      000F20 00 3F                 2567         .word     63 ; "?"
      000F22 CD 00 C3         [ 4] 2568         CALL     EMIT
      000F25 CD 0A F9         [ 4] 2569         CALL     CR
      000F28 CC 0E FD         [ 2] 2570         JP     ABORT   ;pass error string
      000F2B CD 0B 0F         [ 4] 2571 ABOR2:  CALL     DOSTR
      000F2E CC 02 08         [ 2] 2572         JP     DROP
                                   2573 
                                   2574 ;; The text interpreter
                                   2575 
                                   2576 ;       $INTERPRET      ( a -- )
                                   2577 ;       Interpret a word. If failed,
                                   2578 ;       try to convert it to an integer.
      000F31 0F 05                 2579         .word      LINK
                           000F33  2580 LINK = . 
      000F33 0A                    2581         .byte      10
      000F34 24 49 4E 54 45 52 50  2582         .ascii     "$INTERPRET"
             52 45 54
      000F3E                       2583 INTER:
      000F3E CD 0E 00         [ 4] 2584         CALL     NAMEQ
      000F41 CD 03 5C         [ 4] 2585         CALL     QDUP    ;?defined
      000F44 CD 01 10         [ 4] 2586         CALL     QBRAN
      000F47 0F 68                 2587         .word      INTE1
      000F49 CD 01 65         [ 4] 2588         CALL     AT
      000F4C CD 00 D9         [ 4] 2589         CALL     DOLIT
      000F4F 40 00                 2590 		.word       0x4000	; COMPO*256
      000F51 CD 02 5E         [ 4] 2591         CALL     ANDD    ;?compile only lexicon bits
      000F54 CD 0F 0C         [ 4] 2592         CALL     ABORQ
      000F57 0D                    2593         .byte      13
      000F58 20 63 6F 6D 70 69 6C  2594         .ascii     " compile only"
             65 20 6F 6E 6C 79
      000F65 CC 01 37         [ 2] 2595         JP     EXECU
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000F68 CD 09 AC         [ 4] 2596 INTE1:  CALL     NUMBQ   ;convert a number
      000F6B CD 01 10         [ 4] 2597         CALL     QBRAN
      000F6E 0F 14                 2598         .word      ABOR1
      000F70 81               [ 4] 2599         RET
                                   2600 
                                   2601 ;       [       ( -- )
                                   2602 ;       Start  text interpreter.
      000F71 0F 33                 2603         .word      LINK
                           000F73  2604 LINK = . 
      000F73 81                    2605 	.byte      IMEDD+1
      000F74 5B                    2606         .ascii     "["
      000F75                       2607 LBRAC:
      000F75 CD 00 D9         [ 4] 2608         CALL     DOLIT
      000F78 0F 3E                 2609         .word      INTER
      000F7A CD 03 0C         [ 4] 2610         CALL     TEVAL
      000F7D CC 01 4E         [ 2] 2611         JP     STORE
                                   2612 
                                   2613 ;       .OK     ( -- )
                                   2614 ;       Display 'ok' while interpreting.
      000F80 0F 73                 2615         .word      LINK
                           000F82  2616 LINK = . 
      000F82 03                    2617         .byte      3
      000F83 2E 4F 4B              2618         .ascii     ".OK"
      000F86                       2619 DOTOK:
      000F86 CD 00 D9         [ 4] 2620         CALL     DOLIT
      000F89 0F 3E                 2621         .word      INTER
      000F8B CD 03 0C         [ 4] 2622         CALL     TEVAL
      000F8E CD 01 65         [ 4] 2623         CALL     AT
      000F91 CD 04 3B         [ 4] 2624         CALL     EQUAL
      000F94 CD 01 10         [ 4] 2625         CALL     QBRAN
      000F97 0F A0                 2626         .word      DOTO1
      000F99 CD 0B 38         [ 4] 2627         CALL     DOTQP
      000F9C 03                    2628         .byte      3
      000F9D 20 6F 6B              2629         .ascii     " ok"
      000FA0 CC 0A F9         [ 2] 2630 DOTO1:  JP     CR
                                   2631 
                                   2632 ;       ?STACK  ( -- )
                                   2633 ;       Abort if stack underflows.
      000FA3 0F 82                 2634         .word      LINK
                           000FA5  2635 LINK = . 
      000FA5 06                    2636         .byte      6
      000FA6 3F 53 54 41 43 4B     2637         .ascii     "?STACK"
      000FAC                       2638 QSTAC:
      000FAC CD 07 17         [ 4] 2639         CALL     DEPTH
      000FAF CD 02 4B         [ 4] 2640         CALL     ZLESS   ;check only for underflow
      000FB2 CD 0F 0C         [ 4] 2641         CALL     ABORQ
      000FB5 0B                    2642         .byte      11
      000FB6 20 75 6E 64 65 72 66  2643         .ascii     " underflow "
             6C 6F 77 20
      000FC1 81               [ 4] 2644         RET
                                   2645 
                                   2646 ;       EVAL    ( -- )
                                   2647 ;       Interpret  input stream.
      000FC2 0F A5                 2648         .word      LINK
                           000FC4  2649 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



      000FC4 04                    2650         .byte      4
      000FC5 45 56 41 4C           2651         .ascii     "EVAL"
      000FC9                       2652 EVAL:
      000FC9 CD 0D 03         [ 4] 2653 EVAL1:  CALL     TOKEN
      000FCC CD 02 12         [ 4] 2654         CALL     DUPP
      000FCF CD 01 83         [ 4] 2655         CALL     CAT     ;?input stream empty
      000FD2 CD 01 10         [ 4] 2656         CALL     QBRAN
      000FD5 0F E5                 2657         .word      EVAL2
      000FD7 CD 03 0C         [ 4] 2658         CALL     TEVAL
      000FDA CD 07 CB         [ 4] 2659         CALL     ATEXE
      000FDD CD 0F AC         [ 4] 2660         CALL     QSTAC   ;evaluate input, check stack
      000FE0 CD 01 27         [ 4] 2661         CALL     BRAN
      000FE3 0F C9                 2662         .word      EVAL1
      000FE5 CD 02 08         [ 4] 2663 EVAL2:  CALL     DROP
      000FE8 CC 0F 86         [ 2] 2664         JP     DOTOK
                                   2665 
                                   2666 ;       PRESET  ( -- )
                                   2667 ;       Reset data stack pointer and
                                   2668 ;       terminal input buffer.
      000FEB 0F C4                 2669         .word      LINK
                           000FED  2670 LINK = . 
      000FED 06                    2671         .byte      6
      000FEE 50 52 45 53 45 54     2672         .ascii     "PRESET"
      000FF4                       2673 PRESE:
      000FF4 CD 00 D9         [ 4] 2674         CALL     DOLIT
      000FF7 16 F0                 2675         .word      SPP
      000FF9 CD 01 FF         [ 4] 2676         CALL     SPSTO
      000FFC CD 00 D9         [ 4] 2677         CALL     DOLIT
      000FFF 17 00                 2678         .word      TIBB
      001001 CD 02 FB         [ 4] 2679         CALL     NTIB
      001004 CD 06 62         [ 4] 2680         CALL     CELLP
      001007 CC 01 4E         [ 2] 2681         JP     STORE
                                   2682 
                                   2683 ;       QUIT    ( -- )
                                   2684 ;       Reset return stack pointer
                                   2685 ;       and start text interpreter.
      00100A 0F ED                 2686         .word      LINK
                           00100C  2687 LINK = . 
      00100C 04                    2688         .byte      4
      00100D 51 55 49 54           2689         .ascii     "QUIT"
      001011                       2690 QUIT:
      001011 CD 00 D9         [ 4] 2691         CALL     DOLIT
      001014 17 FF                 2692         .word      RPP
      001016 CD 01 A0         [ 4] 2693         CALL     RPSTO   ;reset return stack pointer
      001019 CD 0F 75         [ 4] 2694 QUIT1:  CALL     LBRAC   ;start interpretation
      00101C CD 0E D8         [ 4] 2695 QUIT2:  CALL     QUERY   ;get input
      00101F CD 0F C9         [ 4] 2696         CALL     EVAL
      001022 20 F8            [ 2] 2697         JRA     QUIT2   ;continue till error
                                   2698 
                                   2699 ;; The compiler
                                   2700 
                                   2701 ;       '       ( -- ca )
                                   2702 ;       Search vocabularies for
                                   2703 ;       next word in input stream.
      001024 10 0C                 2704         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



                           001026  2705 LINK = . 
      001026 01                    2706         .byte      1
      001027 27                    2707         .ascii     "'"
      001028                       2708 TICK:
      001028 CD 0D 03         [ 4] 2709         CALL     TOKEN
      00102B CD 0E 00         [ 4] 2710         CALL     NAMEQ   ;?defined
      00102E CD 01 10         [ 4] 2711         CALL     QBRAN
      001031 0F 14                 2712         .word      ABOR1
      001033 81               [ 4] 2713         RET     ;yes, push code address
                                   2714 
                                   2715 ;       ALLOT   ( n -- )
                                   2716 ;       Allocate n bytes to  code dictionary.
      001034 10 26                 2717         .word      LINK
                           001036  2718 LINK = . 
      001036 05                    2719         .byte      5
      001037 41 4C 4C 4F 54        2720         .ascii     "ALLOT"
      00103C                       2721 ALLOT:
      00103C CD 03 3C         [ 4] 2722         CALL     CPP
      00103F CC 07 45         [ 2] 2723         JP     PSTOR
                                   2724 
                                   2725 ;       ,       ( w -- )
                                   2726 ;         Compile an integer into
                                   2727 ;         code dictionary.
      001042 10 36                 2728         .word      LINK
                           001044  2729 LINK = . 
      001044 01                    2730         .byte      1
      001045 2C                    2731         .ascii     ","
      001046                       2732 COMMA:
      001046 CD 07 9A         [ 4] 2733         CALL     HERE
      001049 CD 02 12         [ 4] 2734         CALL     DUPP
      00104C CD 06 62         [ 4] 2735         CALL     CELLP   ;cell boundary
      00104F CD 03 3C         [ 4] 2736         CALL     CPP
      001052 CD 01 4E         [ 4] 2737         CALL     STORE
      001055 CC 01 4E         [ 2] 2738         JP     STORE
                                   2739 
                                   2740 ;       C,      ( c -- )
                                   2741 ;       Compile a byte into
                                   2742 ;       code dictionary.
      001058 10 44                 2743        .word      LINK
                           00105A  2744 LINK = . 
      00105A 02                    2745         .byte      2
      00105B 43 2C                 2746         .ascii     "C,"
      00105D                       2747 CCOMMA:
      00105D CD 07 9A         [ 4] 2748         CALL     HERE
      001060 CD 02 12         [ 4] 2749         CALL     DUPP
      001063 CD 06 8D         [ 4] 2750         CALL     ONEP
      001066 CD 03 3C         [ 4] 2751         CALL     CPP
      001069 CD 01 4E         [ 4] 2752         CALL     STORE
      00106C CC 01 72         [ 2] 2753         JP     CSTOR
                                   2754 
                                   2755 ;       [COMPILE]       ( -- ; <string> )
                                   2756 ;       Compile next immediate
                                   2757 ;       word into code dictionary.
      00106F 10 5A                 2758         .word      LINK
                           001071  2759 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      001071 89                    2760 	.byte      IMEDD+9
      001072 5B 43 4F 4D 50 49 4C  2761         .ascii     "[COMPILE]"
             45 5D
      00107B                       2762 BCOMP:
      00107B CD 10 28         [ 4] 2763         CALL     TICK
      00107E CC 12 D7         [ 2] 2764         JP     JSRC
                                   2765 
                                   2766 ;       COMPILE ( -- )
                                   2767 ;       Compile next jsr in
                                   2768 ;       colon list to code dictionary.
      001081 10 71                 2769         .word      LINK
                           001083  2770 LINK = . 
      001083 47                    2771 	.byte      COMPO+7
      001084 43 4F 4D 50 49 4C 45  2772         .ascii     "COMPILE"
      00108B                       2773 COMPI:
      00108B CD 01 B3         [ 4] 2774         CALL     RFROM
      00108E CD 06 8D         [ 4] 2775         CALL     ONEP
      001091 CD 02 12         [ 4] 2776         CALL     DUPP
      001094 CD 01 65         [ 4] 2777         CALL     AT
      001097 CD 12 D7         [ 4] 2778         CALL     JSRC    ;compile subroutine
      00109A CD 06 62         [ 4] 2779         CALL     CELLP
      00109D CC 01 DB         [ 2] 2780         JP     TOR
                                   2781 
                                   2782 ;       LITERAL ( w -- )
                                   2783 ;       Compile tos to dictionary
                                   2784 ;       as an integer literal.
      0010A0 10 83                 2785         .word      LINK
                           0010A2  2786 LINK = . 
      0010A2 87                    2787 	.byte      IMEDD+7
      0010A3 4C 49 54 45 52 41 4C  2788         .ascii     "LITERAL"
      0010AA                       2789 LITER:
      0010AA CD 10 8B         [ 4] 2790         CALL     COMPI
      0010AD CD 00 D9         [ 4] 2791         CALL     DOLIT
      0010B0 CC 10 46         [ 2] 2792         JP     COMMA
                                   2793 
                                   2794 ;       $,"     ( -- )
                                   2795 ;       Compile a literal string
                                   2796 ;       up to next " .
      0010B3 10 A2                 2797         .word      LINK
                           0010B5  2798 LINK = . 
      0010B5 03                    2799         .byte      3
      0010B6 24 2C 22              2800         .byte     '$',',','"'
      0010B9                       2801 STRCQ:
      0010B9 CD 00 D9         [ 4] 2802         CALL     DOLIT
      0010BC 00 22                 2803         .word     34	; "
      0010BE CD 0C 8E         [ 4] 2804         CALL     PARSE
      0010C1 CD 07 9A         [ 4] 2805         CALL     HERE
      0010C4 CD 08 47         [ 4] 2806         CALL     PACKS   ;string to code dictionary
      0010C7 CD 07 87         [ 4] 2807         CALL     COUNT
      0010CA CD 03 B5         [ 4] 2808         CALL     PLUS    ;calculate aligned end of string
      0010CD CD 03 3C         [ 4] 2809         CALL     CPP
      0010D0 CC 01 4E         [ 2] 2810         JP     STORE
                                   2811 
                                   2812 ;; Structures
                                   2813 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



                                   2814 ;       FOR     ( -- a )
                                   2815 ;       Start a FOR-NEXT loop
                                   2816 ;       structure in a colon definition.
      0010D3 10 B5                 2817         .word      LINK
                           0010D5  2818 LINK = . 
      0010D5 83                    2819 	.byte      IMEDD+3
      0010D6 46 4F 52              2820         .ascii     "FOR"
      0010D9                       2821 FOR:
      0010D9 CD 10 8B         [ 4] 2822         CALL     COMPI
      0010DC CD 01 DB         [ 4] 2823         CALL     TOR
      0010DF CC 07 9A         [ 2] 2824         JP     HERE
                                   2825 
                                   2826 ;       NEXT    ( a -- )
                                   2827 ;       Terminate a FOR-NEXT loop.
      0010E2 10 D5                 2828         .word      LINK
                           0010E4  2829 LINK = . 
      0010E4 84                    2830 	.byte      IMEDD+4
      0010E5 4E 45 58 54           2831         .ascii     "NEXT"
      0010E9                       2832 NEXT:
      0010E9 CD 10 8B         [ 4] 2833         CALL     COMPI
      0010EC CD 00 F1         [ 4] 2834         CALL     DONXT
      0010EF CC 10 46         [ 2] 2835         JP     COMMA
                                   2836 
                                   2837 ;       BEGIN   ( -- a )
                                   2838 ;       Start an infinite or
                                   2839 ;       indefinite loop structure.
      0010F2 10 E4                 2840         .word      LINK
                           0010F4  2841 LINK = . 
      0010F4 85                    2842 	.byte      IMEDD+5
      0010F5 42 45 47 49 4E        2843         .ascii     "BEGIN"
      0010FA                       2844 BEGIN:
      0010FA CC 07 9A         [ 2] 2845         JP     HERE
                                   2846 
                                   2847 ;       UNTIL   ( a -- )
                                   2848 ;       Terminate a BEGIN-UNTIL
                                   2849 ;       indefinite loop structure.
      0010FD 10 F4                 2850         .word      LINK
                           0010FF  2851 LINK = . 
      0010FF 85                    2852 	.byte      IMEDD+5
      001100 55 4E 54 49 4C        2853         .ascii     "UNTIL"
      001105                       2854 UNTIL:
      001105 CD 10 8B         [ 4] 2855         CALL     COMPI
      001108 CD 01 10         [ 4] 2856         CALL     QBRAN
      00110B CC 10 46         [ 2] 2857         JP     COMMA
                                   2858 
                                   2859 ;       AGAIN   ( a -- )
                                   2860 ;       Terminate a BEGIN-AGAIN
                                   2861 ;       infinite loop structure.
      00110E 10 FF                 2862         .word      LINK
                           001110  2863 LINK = . 
      001110 85                    2864 	.byte      IMEDD+5
      001111 41 47 41 49 4E        2865         .ascii     "AGAIN"
      001116                       2866 AGAIN:
      001116 CD 10 8B         [ 4] 2867         CALL     COMPI
      001119 CD 01 27         [ 4] 2868         CALL     BRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      00111C CC 10 46         [ 2] 2869         JP     COMMA
                                   2870 
                                   2871 ;       IF      ( -- A )
                                   2872 ;       Begin a conditional branch.
      00111F 11 10                 2873         .word      LINK
                           001121  2874 LINK = . 
      001121 82                    2875 	.byte      IMEDD+2
      001122 49 46                 2876         .ascii     "IF"
      001124                       2877 IFF:
      001124 CD 10 8B         [ 4] 2878         CALL     COMPI
      001127 CD 01 10         [ 4] 2879         CALL     QBRAN
      00112A CD 07 9A         [ 4] 2880         CALL     HERE
      00112D CD 06 C1         [ 4] 2881         CALL     ZERO
      001130 CC 10 46         [ 2] 2882         JP     COMMA
                                   2883 
                                   2884 ;       THEN        ( A -- )
                                   2885 ;       Terminate a conditional branch structure.
      001133 11 21                 2886         .word      LINK
                           001135  2887 LINK = . 
      001135 84                    2888 	.byte      IMEDD+4
      001136 54 48 45 4E           2889         .ascii     "THEN"
      00113A                       2890 THENN:
      00113A CD 07 9A         [ 4] 2891         CALL     HERE
      00113D CD 02 22         [ 4] 2892         CALL     SWAPP
      001140 CC 01 4E         [ 2] 2893         JP     STORE
                                   2894 
                                   2895 ;       ELSE        ( A -- A )
                                   2896 ;       Start the false clause in an IF-ELSE-THEN structure.
      001143 11 35                 2897         .word      LINK
                           001145  2898 LINK = . 
      001145 84                    2899 	.byte      IMEDD+4
      001146 45 4C 53 45           2900         .ascii     "ELSE"
      00114A                       2901 ELSEE:
      00114A CD 10 8B         [ 4] 2902         CALL     COMPI
      00114D CD 01 27         [ 4] 2903         CALL     BRAN
      001150 CD 07 9A         [ 4] 2904         CALL     HERE
      001153 CD 06 C1         [ 4] 2905         CALL     ZERO
      001156 CD 10 46         [ 4] 2906         CALL     COMMA
      001159 CD 02 22         [ 4] 2907         CALL     SWAPP
      00115C CD 07 9A         [ 4] 2908         CALL     HERE
      00115F CD 02 22         [ 4] 2909         CALL     SWAPP
      001162 CC 01 4E         [ 2] 2910         JP     STORE
                                   2911 
                                   2912 ;       AHEAD       ( -- A )
                                   2913 ;       Compile a forward branch instruction.
      001165 11 45                 2914         .word      LINK
                           001167  2915 LINK = . 
      001167 85                    2916 	.byte      IMEDD+5
      001168 41 48 45 41 44        2917         .ascii     "AHEAD"
      00116D                       2918 AHEAD:
      00116D CD 10 8B         [ 4] 2919         CALL     COMPI
      001170 CD 01 27         [ 4] 2920         CALL     BRAN
      001173 CD 07 9A         [ 4] 2921         CALL     HERE
      001176 CD 06 C1         [ 4] 2922         CALL     ZERO
      001179 CC 10 46         [ 2] 2923         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2924 
                                   2925 ;       WHILE       ( a -- A a )
                                   2926 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00117C 11 67                 2927         .word      LINK
                           00117E  2928 LINK = . 
      00117E 85                    2929 	.byte      IMEDD+5
      00117F 57 48 49 4C 45        2930         .ascii     "WHILE"
      001184                       2931 WHILE:
      001184 CD 10 8B         [ 4] 2932         CALL     COMPI
      001187 CD 01 10         [ 4] 2933         CALL     QBRAN
      00118A CD 07 9A         [ 4] 2934         CALL     HERE
      00118D CD 06 C1         [ 4] 2935         CALL     ZERO
      001190 CD 10 46         [ 4] 2936         CALL     COMMA
      001193 CC 02 22         [ 2] 2937         JP     SWAPP
                                   2938 
                                   2939 ;       REPEAT      ( A a -- )
                                   2940 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001196 11 7E                 2941         .word      LINK
                           001198  2942 LINK = . 
      001198 86                    2943         .byte      IMEDD+6
      001199 52 45 50 45 41 54     2944         .ascii     "REPEAT"
      00119F                       2945 REPEA:
      00119F CD 10 8B         [ 4] 2946         CALL     COMPI
      0011A2 CD 01 27         [ 4] 2947         CALL     BRAN
      0011A5 CD 10 46         [ 4] 2948         CALL     COMMA
      0011A8 CD 07 9A         [ 4] 2949         CALL     HERE
      0011AB CD 02 22         [ 4] 2950         CALL     SWAPP
      0011AE CC 01 4E         [ 2] 2951         JP     STORE
                                   2952 
                                   2953 ;       AFT         ( a -- a A )
                                   2954 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      0011B1 11 98                 2955         .word      LINK
                           0011B3  2956 LINK = . 
      0011B3 83                    2957 	.byte      IMEDD+3
      0011B4 41 46 54              2958         .ascii     "AFT"
      0011B7                       2959 AFT:
      0011B7 CD 02 08         [ 4] 2960         CALL     DROP
      0011BA CD 11 6D         [ 4] 2961         CALL     AHEAD
      0011BD CD 07 9A         [ 4] 2962         CALL     HERE
      0011C0 CC 02 22         [ 2] 2963         JP     SWAPP
                                   2964 
                                   2965 ;       ABORT"      ( -- ; <string> )
                                   2966 ;       Conditional abort with an error message.
      0011C3 11 B3                 2967         .word      LINK
                           0011C5  2968 LINK = . 
      0011C5 86                    2969 	.byte      IMEDD+6
      0011C6 41 42 4F 52 54        2970         .ascii     "ABORT"
      0011CB 22                    2971         .byte      '"'
      0011CC                       2972 ABRTQ:
      0011CC CD 10 8B         [ 4] 2973         CALL     COMPI
      0011CF CD 0F 0C         [ 4] 2974         CALL     ABORQ
      0011D2 CC 10 B9         [ 2] 2975         JP     STRCQ
                                   2976 
                                   2977 ;       $"     ( -- ; <string> )
                                   2978 ;       Compile an inline string literal.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0011D5 11 C5                 2979         .word      LINK
                           0011D7  2980 LINK = . 
      0011D7 82                    2981 	.byte      IMEDD+2
      0011D8 24 22                 2982         .byte     '$','"'
      0011DA                       2983 STRQ:
      0011DA CD 10 8B         [ 4] 2984         CALL     COMPI
      0011DD CD 0B 2E         [ 4] 2985         CALL     STRQP
      0011E0 CC 10 B9         [ 2] 2986         JP     STRCQ
                                   2987 
                                   2988 ;       ."          ( -- ; <string> )
                                   2989 ;       Compile an inline string literal to be typed out at run time.
      0011E3 11 D7                 2990         .word      LINK
                           0011E5  2991 LINK = . 
      0011E5 82                    2992 	.byte      IMEDD+2
      0011E6 2E 22                 2993         .byte     '.','"'
      0011E8                       2994 DOTQ:
      0011E8 CD 10 8B         [ 4] 2995         CALL     COMPI
      0011EB CD 0B 38         [ 4] 2996         CALL     DOTQP
      0011EE CC 10 B9         [ 2] 2997         JP     STRCQ
                                   2998 
                                   2999 ;; Name compiler
                                   3000 
                                   3001 ;       ?UNIQUE ( a -- a )
                                   3002 ;       Display a warning message
                                   3003 ;       if word already exists.
      0011F1 11 E5                 3004         .word      LINK
                           0011F3  3005 LINK = . 
      0011F3 07                    3006         .byte      7
      0011F4 3F 55 4E 49 51 55 45  3007         .ascii     "?UNIQUE"
      0011FB                       3008 UNIQU:
      0011FB CD 02 12         [ 4] 3009         CALL     DUPP
      0011FE CD 0E 00         [ 4] 3010         CALL     NAMEQ   ;?name exists
      001201 CD 01 10         [ 4] 3011         CALL     QBRAN
      001204 12 1A                 3012         .word      UNIQ1
      001206 CD 0B 38         [ 4] 3013         CALL     DOTQP   ;redef are OK
      001209 07                    3014         .byte       7
      00120A 20 72 65 44 65 66 20  3015         .ascii     " reDef "       
      001211 CD 02 3C         [ 4] 3016         CALL     OVER
      001214 CD 07 87         [ 4] 3017         CALL     COUNT
      001217 CD 0A DB         [ 4] 3018         CALL     TYPES   ;just in case
      00121A CC 02 08         [ 2] 3019 UNIQ1:  JP     DROP
                                   3020 
                                   3021 ;       $,n     ( na -- )
                                   3022 ;       Build a new dictionary name
                                   3023 ;       using string at na.
      00121D 11 F3                 3024         .word      LINK
                           00121F  3025 LINK = . 
      00121F 03                    3026         .byte      3
      001220 24 2C 6E              3027         .ascii     "$,n"
      001223                       3028 SNAME:
      001223 CD 02 12         [ 4] 3029         CALL     DUPP
      001226 CD 01 83         [ 4] 3030         CALL     CAT     ;?null input
      001229 CD 01 10         [ 4] 3031         CALL     QBRAN
      00122C 12 59                 3032         .word      PNAM1
      00122E CD 11 FB         [ 4] 3033         CALL     UNIQU   ;?redefinition
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001231 CD 02 12         [ 4] 3034         CALL     DUPP
      001234 CD 07 87         [ 4] 3035         CALL     COUNT
      001237 CD 03 B5         [ 4] 3036         CALL     PLUS
      00123A CD 03 3C         [ 4] 3037         CALL     CPP
      00123D CD 01 4E         [ 4] 3038         CALL     STORE
      001240 CD 02 12         [ 4] 3039         CALL     DUPP
      001243 CD 03 4C         [ 4] 3040         CALL     LAST
      001246 CD 01 4E         [ 4] 3041         CALL     STORE   ;save na for vocabulary link
      001249 CD 06 71         [ 4] 3042         CALL     CELLM   ;link address
      00124C CD 03 2E         [ 4] 3043         CALL     CNTXT
      00124F CD 01 65         [ 4] 3044         CALL     AT
      001252 CD 02 22         [ 4] 3045         CALL     SWAPP
      001255 CD 01 4E         [ 4] 3046         CALL     STORE
      001258 81               [ 4] 3047         RET     ;save code pointer
      001259 CD 0B 2E         [ 4] 3048 PNAM1:  CALL     STRQP
      00125C 05                    3049         .byte      5
      00125D 20 6E 61 6D 65        3050         .ascii     " name" ;null input
      001262 CC 0F 14         [ 2] 3051         JP     ABOR1
                                   3052 
                                   3053 ;; FORTH compiler
                                   3054 
                                   3055 ;       $COMPILE        ( a -- )
                                   3056 ;       Compile next word to
                                   3057 ;       dictionary as a token or literal.
      001265 12 1F                 3058         .word      LINK
                           001267  3059 LINK = . 
      001267 08                    3060         .byte      8
      001268 24 43 4F 4D 50 49 4C  3061         .ascii     "$COMPILE"
             45
      001270                       3062 SCOMP:
      001270 CD 0E 00         [ 4] 3063         CALL     NAMEQ
      001273 CD 03 5C         [ 4] 3064         CALL     QDUP    ;?defined
      001276 CD 01 10         [ 4] 3065         CALL     QBRAN
      001279 12 91                 3066         .word      SCOM2
      00127B CD 01 65         [ 4] 3067         CALL     AT
      00127E CD 00 D9         [ 4] 3068         CALL     DOLIT
      001281 80 00                 3069         .word     0x8000	;  IMEDD*256
      001283 CD 02 5E         [ 4] 3070         CALL     ANDD    ;?immediate
      001286 CD 01 10         [ 4] 3071         CALL     QBRAN
      001289 12 8E                 3072         .word      SCOM1
      00128B CC 01 37         [ 2] 3073         JP     EXECU
      00128E CC 12 D7         [ 2] 3074 SCOM1:  JP     JSRC
      001291 CD 09 AC         [ 4] 3075 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001294 CD 01 10         [ 4] 3076         CALL     QBRAN
      001297 0F 14                 3077         .word      ABOR1
      001299 CC 10 AA         [ 2] 3078         JP     LITER
                                   3079 
                                   3080 ;       OVERT   ( -- )
                                   3081 ;       Link a new word into vocabulary.
      00129C 12 67                 3082         .word      LINK
                           00129E  3083 LINK = . 
      00129E 05                    3084         .byte      5
      00129F 4F 56 45 52 54        3085         .ascii     "OVERT"
      0012A4                       3086 OVERT:
      0012A4 CD 03 4C         [ 4] 3087         CALL     LAST
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0012A7 CD 01 65         [ 4] 3088         CALL     AT
      0012AA CD 03 2E         [ 4] 3089         CALL     CNTXT
      0012AD CC 01 4E         [ 2] 3090         JP     STORE
                                   3091 
                                   3092 ;       ;       ( -- )
                                   3093 ;       Terminate a colon definition.
      0012B0 12 9E                 3094         .word      LINK
                           0012B2  3095 LINK = . 
      0012B2 C1                    3096 	.byte      IMEDD+COMPO+1
      0012B3 3B                    3097         .ascii     ";"
      0012B4                       3098 SEMIS:
      0012B4 CD 10 8B         [ 4] 3099         CALL     COMPI
      0012B7 CD 01 47         [ 4] 3100         CALL     EXIT
      0012BA CD 0F 75         [ 4] 3101         CALL     LBRAC
      0012BD CC 12 A4         [ 2] 3102         JP     OVERT
                                   3103 
                                   3104 ;       ]       ( -- )
                                   3105 ;       Start compiling words in
                                   3106 ;       input stream.
      0012C0 12 B2                 3107         .word      LINK
                           0012C2  3108 LINK = . 
      0012C2 01                    3109         .byte      1
      0012C3 5D                    3110         .ascii     "]"
      0012C4                       3111 RBRAC:
      0012C4 CD 00 D9         [ 4] 3112         CALL     DOLIT
      0012C7 12 70                 3113         .word      SCOMP
      0012C9 CD 03 0C         [ 4] 3114         CALL     TEVAL
      0012CC CC 01 4E         [ 2] 3115         JP     STORE
                                   3116 
                                   3117 ;       CALL,    ( ca -- )
                                   3118 ;       Compile a subroutine call.
      0012CF 12 C2                 3119         .word      LINK
                           0012D1  3120 LINK = . 
      0012D1 04                    3121         .byte      4
      0012D2 43 41 4C 4C 2C        3122         .ascii     "CALL,"
      0012D7                       3123 JSRC:
      0012D7 CD 00 D9         [ 4] 3124         CALL     DOLIT
      0012DA 00 CD                 3125         .word     CALLL     ;CALL
      0012DC CD 10 5D         [ 4] 3126         CALL     CCOMMA
      0012DF CC 10 46         [ 2] 3127         JP     COMMA
                                   3128 
                                   3129 ;       :       ( -- ; <string> )
                                   3130 ;       Start a new colon definition
                                   3131 ;       using next word as its name.
      0012E2 12 D1                 3132         .word      LINK
                           0012E4  3133 LINK = . 
      0012E4 01                    3134         .byte      1
      0012E5 3A                    3135         .ascii     ":"
      0012E6                       3136 COLON:
      0012E6 CD 0D 03         [ 4] 3137         CALL     TOKEN
      0012E9 CD 12 23         [ 4] 3138         CALL     SNAME
      0012EC CC 12 C4         [ 2] 3139         JP     RBRAC
                                   3140 
                                   3141 ;       IMMEDIATE       ( -- )
                                   3142 ;       Make last compiled word
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



                                   3143 ;       an immediate word.
      0012EF 12 E4                 3144         .word      LINK
                           0012F1  3145 LINK = . 
      0012F1 09                    3146         .byte      9
      0012F2 49 4D 4D 45 44 49 41  3147         .ascii     "IMMEDIATE"
             54 45
      0012FB                       3148 IMMED:
      0012FB CD 00 D9         [ 4] 3149         CALL     DOLIT
      0012FE 80 00                 3150         .word     0x8000	;  IMEDD*256
      001300 CD 03 4C         [ 4] 3151         CALL     LAST
      001303 CD 01 65         [ 4] 3152         CALL     AT
      001306 CD 01 65         [ 4] 3153         CALL     AT
      001309 CD 02 72         [ 4] 3154         CALL     ORR
      00130C CD 03 4C         [ 4] 3155         CALL     LAST
      00130F CD 01 65         [ 4] 3156         CALL     AT
      001312 CC 01 4E         [ 2] 3157         JP     STORE
                                   3158 
                                   3159 ;; Defining words
                                   3160 
                                   3161 ;       CREATE  ( -- ; <string> )
                                   3162 ;       Compile a new array
                                   3163 ;       without allocating space.
      001315 12 F1                 3164         .word      LINK
                           001317  3165 LINK = . 
      001317 06                    3166         .byte      6
      001318 43 52 45 41 54 45     3167         .ascii     "CREATE"
      00131E                       3168 CREAT:
      00131E CD 0D 03         [ 4] 3169         CALL     TOKEN
      001321 CD 12 23         [ 4] 3170         CALL     SNAME
      001324 CD 12 A4         [ 4] 3171         CALL     OVERT
      001327 CD 10 8B         [ 4] 3172         CALL     COMPI
      00132A CD 02 BF         [ 4] 3173         CALL     DOVAR
      00132D 81               [ 4] 3174         RET
                                   3175 
                                   3176 ;       VARIABLE        ( -- ; <string> )
                                   3177 ;       Compile a new variable
                                   3178 ;       initialized to 0.
      00132E 13 17                 3179         .word      LINK
                           001330  3180 LINK = . 
      001330 08                    3181         .byte      8
      001331 56 41 52 49 41 42 4C  3182         .ascii     "VARIABLE"
             45
      001339                       3183 VARIA:
      001339 CD 13 1E         [ 4] 3184         CALL     CREAT
      00133C CD 06 C1         [ 4] 3185         CALL     ZERO
      00133F CC 10 46         [ 2] 3186         JP     COMMA
                                   3187 
                                   3188 ;; Tools
                                   3189 
                                   3190 ;       _TYPE   ( b u -- )
                                   3191 ;       Display a string. Filter
                                   3192 ;       non-printing characters.
      001342 13 30                 3193         .word      LINK
                           001344  3194 LINK = . 
      001344 05                    3195         .byte      5
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001345 5F 54 59 50 45        3196         .ascii     "_TYPE"
      00134A                       3197 UTYPE:
      00134A CD 01 DB         [ 4] 3198         CALL     TOR     ;start count down loop
      00134D 20 0F            [ 2] 3199         JRA     UTYP2   ;skip first pass
      00134F CD 02 12         [ 4] 3200 UTYP1:  CALL     DUPP
      001352 CD 01 83         [ 4] 3201         CALL     CAT
      001355 CD 06 EB         [ 4] 3202         CALL     TCHAR
      001358 CD 00 C3         [ 4] 3203         CALL     EMIT    ;display only printable
      00135B CD 06 8D         [ 4] 3204         CALL     ONEP    ;increment address
      00135E CD 00 F1         [ 4] 3205 UTYP2:  CALL     DONXT
      001361 13 4F                 3206         .word      UTYP1   ;loop till done
      001363 CC 02 08         [ 2] 3207         JP     DROP
                                   3208 
                                   3209 ;       dm+     ( a u -- a )
                                   3210 ;       Dump u bytes from ,
                                   3211 ;       leaving a+u on  stack.
      001366 13 44                 3212         .word      LINK
                           001368  3213 LINK = . 
      001368 03                    3214         .byte      3
      001369 64 6D 2B              3215         .ascii     "dm+"
      00136C                       3216 DUMPP:
      00136C CD 02 3C         [ 4] 3217         CALL     OVER
      00136F CD 00 D9         [ 4] 3218         CALL     DOLIT
      001372 00 04                 3219         .word      4
      001374 CD 0B 61         [ 4] 3220         CALL     UDOTR   ;display address
      001377 CD 0A B1         [ 4] 3221         CALL     SPACE
      00137A CD 01 DB         [ 4] 3222         CALL     TOR     ;start count down loop
      00137D 20 11            [ 2] 3223         JRA     PDUM2   ;skip first pass
      00137F CD 02 12         [ 4] 3224 PDUM1:  CALL     DUPP
      001382 CD 01 83         [ 4] 3225         CALL     CAT
      001385 CD 00 D9         [ 4] 3226         CALL     DOLIT
      001388 00 03                 3227         .word      3
      00138A CD 0B 61         [ 4] 3228         CALL     UDOTR   ;display numeric data
      00138D CD 06 8D         [ 4] 3229         CALL     ONEP    ;increment address
      001390 CD 00 F1         [ 4] 3230 PDUM2:  CALL     DONXT
      001393 13 7F                 3231         .word      PDUM1   ;loop till done
      001395 81               [ 4] 3232         RET
                                   3233 
                                   3234 ;       DUMP    ( a u -- )
                                   3235 ;       Dump u bytes from a,
                                   3236 ;       in a formatted manner.
      001396 13 68                 3237         .word      LINK
                           001398  3238 LINK = . 
      001398 04                    3239         .byte      4
      001399 44 55 4D 50           3240         .ascii     "DUMP"
      00139D                       3241 DUMP:
      00139D CD 02 CD         [ 4] 3242         CALL     BASE
      0013A0 CD 01 65         [ 4] 3243         CALL     AT
      0013A3 CD 01 DB         [ 4] 3244         CALL     TOR
      0013A6 CD 09 3F         [ 4] 3245         CALL     HEX     ;save radix, set hex
      0013A9 CD 00 D9         [ 4] 3246         CALL     DOLIT
      0013AC 00 10                 3247         .word      16
      0013AE CD 05 A6         [ 4] 3248         CALL     SLASH   ;change count to lines
      0013B1 CD 01 DB         [ 4] 3249         CALL     TOR     ;start count down loop
      0013B4 CD 0A F9         [ 4] 3250 DUMP1:  CALL     CR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      0013B7 CD 00 D9         [ 4] 3251         CALL     DOLIT
      0013BA 00 10                 3252         .word      16
      0013BC CD 03 A0         [ 4] 3253         CALL     DDUP
      0013BF CD 13 6C         [ 4] 3254         CALL     DUMPP   ;display numeric
      0013C2 CD 03 6D         [ 4] 3255         CALL     ROT
      0013C5 CD 03 6D         [ 4] 3256         CALL     ROT
      0013C8 CD 0A B1         [ 4] 3257         CALL     SPACE
      0013CB CD 0A B1         [ 4] 3258         CALL     SPACE
      0013CE CD 13 4A         [ 4] 3259         CALL     UTYPE   ;display printable characters
      0013D1 CD 00 F1         [ 4] 3260         CALL     DONXT
      0013D4 13 B4                 3261         .word      DUMP1   ;loop till done
      0013D6 CD 02 08         [ 4] 3262 DUMP3:  CALL     DROP
      0013D9 CD 01 B3         [ 4] 3263         CALL     RFROM
      0013DC CD 02 CD         [ 4] 3264         CALL     BASE
      0013DF CC 01 4E         [ 2] 3265         JP     STORE   ;restore radix
                                   3266 
                                   3267 ;       .S      ( ... -- ... )
                                   3268 ;        Display  contents of stack.
      0013E2 13 98                 3269         .word      LINK
                           0013E4  3270 LINK = . 
      0013E4 02                    3271         .byte      2
      0013E5 2E 53                 3272         .ascii     ".S"
      0013E7                       3273 DOTS:
      0013E7 CD 0A F9         [ 4] 3274         CALL     CR
      0013EA CD 07 17         [ 4] 3275         CALL     DEPTH   ;stack depth
      0013ED CD 01 DB         [ 4] 3276         CALL     TOR     ;start count down loop
      0013F0 20 0C            [ 2] 3277         JRA     DOTS2   ;skip first pass
      0013F2 CD 01 C6         [ 4] 3278 DOTS1:  CALL     RAT
      0013F5 CD 06 8D         [ 4] 3279         CALL ONEP
      0013F8 CD 07 30         [ 4] 3280 	CALL     PICK
      0013FB CD 0B 94         [ 4] 3281         CALL     DOT     ;index stack, display contents
      0013FE CD 00 F1         [ 4] 3282 DOTS2:  CALL     DONXT
      001401 13 F2                 3283         .word      DOTS1   ;loop till done
      001403 CD 0B 38         [ 4] 3284         CALL     DOTQP
      001406 05                    3285         .byte      5
      001407 20 3C 73 70 20        3286         .ascii     " <sp "
      00140C 81               [ 4] 3287         RET
                                   3288 
                                   3289 ;       >NAME   ( ca -- na | F )
                                   3290 ;       Convert code address
                                   3291 ;       to a name address.
      00140D 13 E4                 3292         .word      LINK
                           00140F  3293 LINK = . 
      00140F 05                    3294         .byte      5
      001410 3E 4E 41 4D 45        3295         .ascii     ">NAME"
      001415                       3296 TNAME:
      001415 CD 03 2E         [ 4] 3297         CALL     CNTXT   ;vocabulary link
      001418 CD 01 65         [ 4] 3298 TNAM2:  CALL     AT
      00141B CD 02 12         [ 4] 3299         CALL     DUPP    ;?last word in a vocabulary
      00141E CD 01 10         [ 4] 3300         CALL     QBRAN
      001421 14 3C                 3301         .word      TNAM4
      001423 CD 03 A0         [ 4] 3302         CALL     DDUP
      001426 CD 0D 11         [ 4] 3303         CALL     NAMET
      001429 CD 02 87         [ 4] 3304         CALL     XORR    ;compare
      00142C CD 01 10         [ 4] 3305         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



      00142F 14 36                 3306         .word      TNAM3
      001431 CD 06 71         [ 4] 3307         CALL     CELLM   ;continue with next word
      001434 20 E2            [ 2] 3308         JRA     TNAM2
      001436 CD 02 22         [ 4] 3309 TNAM3:  CALL     SWAPP
      001439 CC 02 08         [ 2] 3310         JP     DROP
      00143C CD 03 95         [ 4] 3311 TNAM4:  CALL     DDROP
      00143F CC 06 C1         [ 2] 3312         JP     ZERO
                                   3313 
                                   3314 ;       .ID     ( na -- )
                                   3315 ;        Display  name at address.
      001442 14 0F                 3316         .word      LINK
                           001444  3317 LINK = . 
      001444 03                    3318         .byte      3
      001445 2E 49 44              3319         .ascii     ".ID"
      001448                       3320 DOTID:
      001448 CD 03 5C         [ 4] 3321         CALL     QDUP    ;if zero no name
      00144B CD 01 10         [ 4] 3322         CALL     QBRAN
      00144E 14 5E                 3323         .word      DOTI1
      001450 CD 07 87         [ 4] 3324         CALL     COUNT
      001453 CD 00 D9         [ 4] 3325         CALL     DOLIT
      001456 00 1F                 3326         .word      0x1F
      001458 CD 02 5E         [ 4] 3327         CALL     ANDD    ;mask lexicon bits
      00145B CC 13 4A         [ 2] 3328         JP     UTYPE
      00145E CD 0B 38         [ 4] 3329 DOTI1:  CALL     DOTQP
      001461 09                    3330         .byte      9
      001462 20 6E 6F 4E 61 6D 65  3331         .ascii     " noName"
      001469 81               [ 4] 3332         RET
                                   3333 
                                   3334 ;       SEE     ( -- ; <string> )
                                   3335 ;       A simple decompiler.
                                   3336 ;       Updated for byte machines.
                                   3337 ;        .word      LINK
                                   3338 ;LINK = . 
                                   3339 ;        .byte      3
                                   3340 ;        .ascii     "SEE"
                                   3341 ;SEE:
                                   3342 ;        CALL     TICK    ;starting address
                                   3343 ;        CALL     CR
                                   3344 ;        CALL     ONEM
                                   3345 ;SEE1:   CALL     ONEP
                                   3346 ;        CALL     DUPP
                                   3347 ;        CALL     AT
                                   3348 ;        CALL     DUPP    ;?does it contain a zero
                                   3349 ;        CALL     QBRAN
                                   3350 ;        .word      SEE2
                                   3351 ;        CALL     TNAME   ;?is it a name
                                   3352 ;SEE2:   CALL     QDUP    ;name address or zero
                                   3353 ;        CALL     QBRAN
                                   3354 ;        .word      SEE3
                                   3355 ;        CALL     SPACE
                                   3356 ;        CALL     DOTID   ;display name
                                   3357 ;        CALL     ONEP
                                   3358 ;        JRA     SEE4
                                   3359 ;SEE3:   CALL     DUPP
                                   3360 ;        CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3361 ;        CALL     UDOT    ;display number
                                   3362 ;SEE4:   CALL     NUFQ    ;user control
                                   3363 ;        CALL     QBRAN
                                   3364 ;        .word      SEE1
                                   3365 ;        JP     DROP
                                   3366 
                                   3367 ;       WORDS   ( -- )
                                   3368 ;       Display names in vocabulary.
      00146A 14 44                 3369         .word      LINK
                           00146C  3370 LINK = . 
      00146C 05                    3371         .byte      5
      00146D 57 4F 52 44 53        3372         .ascii     "WORDS"
      001472                       3373 WORDS:
      001472 CD 0A F9         [ 4] 3374         CALL     CR
      001475 CD 03 2E         [ 4] 3375         CALL     CNTXT   ;only in context
      001478 CD 01 65         [ 4] 3376 WORS1:  CALL     AT
      00147B CD 03 5C         [ 4] 3377         CALL     QDUP    ;?at end of list
      00147E CD 01 10         [ 4] 3378         CALL     QBRAN
      001481 14 97                 3379         .word      WORS2
      001483 CD 02 12         [ 4] 3380         CALL     DUPP
      001486 CD 0A B1         [ 4] 3381         CALL     SPACE
      001489 CD 14 48         [ 4] 3382         CALL     DOTID   ;display a name
      00148C CD 06 71         [ 4] 3383         CALL     CELLM
      00148F CD 01 27         [ 4] 3384         CALL     BRAN
      001492 14 78                 3385         .word      WORS1
      001494 CD 02 08         [ 4] 3386         CALL     DROP
      001497 81               [ 4] 3387 WORS2:  RET
                                   3388 
                                   3389         
                                   3390 ;; Hardware reset
                                   3391 
                                   3392 ;       hi      ( -- )
                                   3393 ;       Display sign-on message.
      001498 14 6C                 3394         .word      LINK
                           00149A  3395 LINK = . 
      00149A 02                    3396         .byte      2
      00149B 68 69                 3397         .ascii     "hi"
      00149D                       3398 HI:
      00149D CD 0A F9         [ 4] 3399         CALL     CR
      0014A0 CD 0B 38         [ 4] 3400         CALL     DOTQP   ;initialize I/O
      0014A3 0F                    3401         .byte      15
      0014A4 73 74 6D 38 65 46 6F  3402         .ascii     "stm8eForth v"
             72 74 68 20 76
      0014B0 32                    3403 	.byte      VER+'0'
      0014B1 2E                    3404         .byte      '.' 
      0014B2 31                    3405 	.byte      EXT+'0' ;version
      0014B3 CC 0A F9         [ 2] 3406         JP     CR
                                   3407 
                                   3408 ;       DEBUG      ( -- )
                                   3409 ;       Display sign-on message.
                                   3410 ;        .word      LINK
                                   3411 ;LINK = . 
                                   3412 ;        .byte      5
                                   3413 ;        .ascii     "DEBUG"
                                   3414 ;DEBUG:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3415 ;	CALL DOLIT
                                   3416 ;	.word 0x65
                                   3417 ;	CALL EMIT
                                   3418 ;	CALL DOLIT
                                   3419 ;	.word 0
                                   3420 ; 	CALL ZLESS 
                                   3421 ;	CALL DOLIT
                                   3422 ;	.word 0xFFFE
                                   3423 ;	CALL ZLESS 
                                   3424 ;	CALL UPLUS 
                                   3425 ; 	CALL DROP 
                                   3426 ;	CALL DOLIT
                                   3427 ;	.word 3
                                   3428 ;	CALL UPLUS 
                                   3429 ;	CALL UPLUS 
                                   3430 ; 	CALL DROP
                                   3431 ;	CALL DOLIT
                                   3432 ;	.word 0x43
                                   3433 ;	CALL UPLUS 
                                   3434 ; 	CALL DROP
                                   3435 ;	CALL EMIT
                                   3436 ;	CALL DOLIT
                                   3437 ;	.word 0x4F
                                   3438 ;	CALL DOLIT
                                   3439 ;	.word 0x6F
                                   3440 ; 	CALL XORR
                                   3441 ;	CALL DOLIT
                                   3442 ;	.word 0xF0
                                   3443 ; 	CALL ANDD
                                   3444 ;	CALL DOLIT
                                   3445 ;	.word 0x4F
                                   3446 ; 	CALL ORR
                                   3447 ;	CALL EMIT
                                   3448 ;	CALL DOLIT
                                   3449 ;	.word 8
                                   3450 ;	CALL DOLIT
                                   3451 ;	.word 6
                                   3452 ; 	CALL SWAPP
                                   3453 ;	CALL OVER
                                   3454 ;	CALL XORR
                                   3455 ;	CALL DOLIT
                                   3456 ;	.word 3
                                   3457 ;	CALL ANDD 
                                   3458 ;	CALL ANDD
                                   3459 ;	CALL DOLIT
                                   3460 ;	.word 0x70
                                   3461 ;	CALL UPLUS 
                                   3462 ;	CALL DROP
                                   3463 ;	CALL EMIT
                                   3464 ;	CALL DOLIT
                                   3465 ;	.word 0
                                   3466 ;	CALL QBRAN
                                   3467 ;	.word DEBUG1
                                   3468 ;	CALL DOLIT
                                   3469 ;	.word 0x3F
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



                                   3470 ;DEBUG1:
                                   3471 ;	CALL DOLIT
                                   3472 ;	.word 0xFFFF
                                   3473 ;	CALL QBRAN
                                   3474 ;	.word DEBUG2
                                   3475 ;	CALL DOLIT
                                   3476 ;	.word 0x74
                                   3477 ;	CALL BRAN
                                   3478 ;	.word DEBUG3
                                   3479 ;DEBUG2:
                                   3480 ;	CALL DOLIT
                                   3481 ;	.word 0x21
                                   3482 ;DEBUG3:
                                   3483 ;	CALL EMIT
                                   3484 ;	CALL DOLIT
                                   3485 ;	.word 0x68
                                   3486 ;	CALL DOLIT
                                   3487 ;	.word 0x80
                                   3488 ;	CALL STORE
                                   3489 ;	CALL DOLIT
                                   3490 ;	.word 0x80
                                   3491 ;	CALL AT
                                   3492 ;	CALL EMIT
                                   3493 ;	CALL DOLIT
                                   3494 ;	.word 0x4D
                                   3495 ;	CALL TOR
                                   3496 ;	CALL RAT
                                   3497 ;	CALL RFROM
                                   3498 ;	CALL ANDD
                                   3499 ;	CALL EMIT
                                   3500 ;	CALL DOLIT
                                   3501 ;	.word 0x61
                                   3502 ;	CALL DOLIT
                                   3503 ;	.word 0xA
                                   3504 ;	CALL TOR
                                   3505 ;DEBUG4:
                                   3506 ;	CALL DOLIT
                                   3507 ;	.word 1
                                   3508 ;	CALL UPLUS 
                                   3509 ;	CALL DROP
                                   3510 ;	CALL DONXT
                                   3511 ;	.word DEBUG4
                                   3512 ;	CALL EMIT
                                   3513 ;	CALL DOLIT
                                   3514 ;	.word 0x656D
                                   3515 ;	CALL DOLIT
                                   3516 ;	.word 0x100
                                   3517 ;	CALL UMSTA
                                   3518 ;	CALL SWAPP
                                   3519 ;	CALL DOLIT
                                   3520 ;	.word 0x100
                                   3521 ;	CALL UMSTA
                                   3522 ;	CALL SWAPP 
                                   3523 ;	CALL DROP
                                   3524 ;	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3525 ;	CALL EMIT
                                   3526 ;	CALL DOLIT
                                   3527 ;	.word 0x2043
                                   3528 ;	CALL DOLIT
                                   3529 ;	.word 0
                                   3530 ;	CALL DOLIT
                                   3531 ;	.word 0x100
                                   3532 ;	CALL UMMOD
                                   3533 ;	CALL EMIT
                                   3534 ;	CALL EMIT
                                   3535 	;JP ORIG
                                   3536 ;	RET
                                   3537 
                                   3538 ;       'BOOT   ( -- a )
                                   3539 ;       The application startup vector.
      0014B6 14 9A                 3540         .word      LINK
                           0014B8  3541 LINK = . 
      0014B8 05                    3542         .byte      5
      0014B9 27 42 4F 4F 54        3543         .ascii     "'BOOT"
      0014BE                       3544 TBOOT:
      0014BE CD 02 BF         [ 4] 3545         CALL     DOVAR
      0014C1 14 9D                 3546         .word      HI       ;application to boot
                                   3547 
                                   3548 ;       COLD    ( -- )
                                   3549 ;       The hilevel cold start s=ence.
      0014C3 14 B8                 3550         .word      LINK
                           0014C5  3551 LINK = . 
      0014C5 04                    3552         .byte      4
      0014C6 43 4F 4C 44           3553         .ascii     "COLD"
      0014CA                       3554 COLD:
                                   3555 ;        CALL DEBUG
      0014CA CD 00 D9         [ 4] 3556 COLD1:  CALL     DOLIT
      0014CD 00 20                 3557         .word      UZERO
      0014CF CD 00 D9         [ 4] 3558 	CALL     DOLIT
      0014D2 00 06                 3559         .word      UPP
      0014D4 CD 00 D9         [ 4] 3560         CALL     DOLIT
      0014D7 00 14                 3561 	.word      ULAST-UZERO
      0014D9 CD 07 E2         [ 4] 3562         CALL     CMOVE   ;initialize user area
      0014DC CD 0F F4         [ 4] 3563         CALL     PRESE   ;initialize data stack and TIB
      0014DF CD 14 BE         [ 4] 3564         CALL     TBOOT
      0014E2 CD 07 CB         [ 4] 3565         CALL     ATEXE   ;application boot
      0014E5 CD 12 A4         [ 4] 3566         CALL     OVERT
      0014E8 CC 10 11         [ 2] 3567         JP     QUIT    ;start interpretation
                                   3568 
                                   3569 
                                   3570 ;       
                                   3571 ;===============================================================
                                   3572 
                           0014C5  3573 LASTN   =	LINK   ;last name defined
                                   3574 
                                   3575 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        000436 R   |   6 ABOR1      000F14 R
  6 ABOR2      000F2B R   |   6 ABORQ      000F0C R   |   6 ABORT      000EFD R
  6 ABRTQ      0011CC R   |   6 ABSS       00042D R   |   6 ACCEP      000E93 R
  6 ACCP1      000E9C R   |   6 ACCP2      000EC2 R   |   6 ACCP3      000EC5 R
  6 ACCP4      000EC7 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        0011B7 R
  6 AGAIN      001116 R   |   6 AHEAD      00116D R   |   6 ALLOT      00103C R
  6 ANDD       00025E R   |   6 AT         000165 R   |   6 ATEXE      0007CB R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000E3B R   |   6 BASE       0002CD R   |     BASEE   =  00000A 
  6 BCOMP      00107B R   |   6 BDIGS      0008A4 R   |     BEEP_BIT=  000004 
    BEEP_CSR=  0050F3     |     BEEP_MAS=  000010     |     BEEP_POR=  00000F 
  6 BEGIN      0010FA R   |     BIT0    =  000000     |     BIT1    =  000001 
    BIT2    =  000002     |     BIT3    =  000003     |     BIT4    =  000004 
    BIT5    =  000005     |     BIT6    =  000006     |     BIT7    =  000007 
  6 BKSLA      000CDC R   |   6 BKSP       000E0B R   |     BKSPP   =  000008 
  6 BLANK      0006B4 R   |     BLOCK_SI=  000080     |     BOOT_ROM=  006000 
    BOOT_ROM=  007FFF     |   6 BRAN       000127 R   |     CALLL   =  0000CD 
    CAN_DGR =  005426     |     CAN_FPSR=  005427     |     CAN_IER =  005425 
    CAN_MCR =  005420     |     CAN_MSR =  005421     |     CAN_P0  =  005428 
    CAN_P1  =  005429     |     CAN_P2  =  00542A     |     CAN_P3  =  00542B 
    CAN_P4  =  00542C     |     CAN_P5  =  00542D     |     CAN_P6  =  00542E 
    CAN_P7  =  00542F     |     CAN_P8  =  005430     |     CAN_P9  =  005431 
    CAN_PA  =  005432     |     CAN_PB  =  005433     |     CAN_PC  =  005434 
    CAN_PD  =  005435     |     CAN_PE  =  005436     |     CAN_PF  =  005437 
    CAN_RFR =  005424     |     CAN_TPR =  005423     |     CAN_TSR =  005422 
    CARRY   =  000020     |   6 CAT        000183 R   |   6 CCOMMA     00105D R
    CC_C    =  000000     |     CC_H    =  000004     |     CC_I0   =  000003 
    CC_I1   =  000005     |     CC_N    =  000002     |     CC_V    =  000007 
    CC_Z    =  000001     |     CELLL   =  000002     |   6 CELLM      000671 R
  6 CELLP      000662 R   |   6 CELLS      000680 R   |     CFG_GCR =  007F60 
    CFG_GCR_=  000001     |     CFG_GCR_=  000000     |   6 CHAR1      000ACB R
  6 CHAR2      000ACE R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]

Symbol Table

    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      0007EA R   |   6 CMOV2      000802 R
  6 CMOVE      0007E2 R   |   6 CNTXT      00032E R   |   6 COLD       0014CA R
  6 COLD1      0014CA R   |   6 COLON      0012E6 R   |   6 COMMA      001046 R
  6 COMPI      00108B R   |     COMPO   =  000040     |   6 COUNT      000787 R
  6 CPP        00033C R   |     CPU_A   =  007F00     |     CPU_CCR =  007F0A 
    CPU_PCE =  007F01     |     CPU_PCH =  007F02     |     CPU_PCL =  007F03 
    CPU_SPH =  007F08     |     CPU_SPL =  007F09     |     CPU_XH  =  007F04 
    CPU_XL  =  007F05     |     CPU_YH  =  007F06     |     CPU_YL  =  007F07 
  6 CR         000AF9 R   |   6 CREAT      00131E R   |     CRR     =  00000D 
  6 CSTOR      000172 R   |     CTOP    =  000080     |   6 DAT        000770 R
    DATSTK  =  0016F0     |   6 DDROP      000395 R   |   6 DDUP       0003A0 R
    DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF     |   6 DECIM      000954 R
  6 DEPTH      000717 R   |     DEVID_BA=  0048CD     |     DEVID_EN=  0048D8 
    DEVID_LO=  0048D2     |     DEVID_LO=  0048D3     |     DEVID_LO=  0048D4 
    DEVID_LO=  0048D5     |     DEVID_LO=  0048D6     |     DEVID_LO=  0048D7 
    DEVID_LO=  0048D8     |     DEVID_WA=  0048D1     |     DEVID_XH=  0048CE 
    DEVID_XL=  0048CD     |     DEVID_YH=  0048D0     |     DEVID_YL=  0048CF 
  6 DGTQ1      000999 R   |   6 DIG        0008CD R   |   6 DIGIT      000868 R
  6 DIGS       0008DE R   |   6 DIGS1      0008DE R   |   6 DIGS2      0008EB R
  6 DIGTQ      000968 R   |     DM_BK1RE=  007F90     |     DM_BK1RH=  007F91 
    DM_BK1RL=  007F92     |     DM_BK2RE=  007F93     |     DM_BK2RH=  007F94 
    DM_BK2RL=  007F95     |     DM_CR1  =  007F96     |     DM_CR2  =  007F97 
    DM_CSR1 =  007F98     |     DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A 
  6 DN1        00040D R   |   6 DNEGA      0003F2 R   |   6 DOLIT      0000D9 R
  6 DONXT      0000F1 R   |   6 DOSTR      000B0F R   |   6 DOT        000B94 R
  6 DOT1       000BAA R   |   6 DOTI1      00145E R   |   6 DOTID      001448 R
  6 DOTO1      000FA0 R   |   6 DOTOK      000F86 R   |   6 DOTPR      000CBD R
  6 DOTQ       0011E8 R   |   6 DOTQP      000B38 R   |   6 DOTR       000B46 R
  6 DOTS       0013E7 R   |   6 DOTS1      0013F2 R   |   6 DOTS2      0013FE R
  6 DOVAR      0002BF R   |   6 DROP       000208 R   |   6 DSTOR      00075C R
  6 DUMP       00139D R   |   6 DUMP1      0013B4 R   |   6 DUMP3      0013D6 R
  6 DUMPP      00136C R   |   6 DUPP       000212 R   |   6 EDIGS      000909 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 ELSEE      00114A R   |   6 EMIT       0000C3 R   |   6 EQ1        000451 R
  6 EQUAL      00043B R   |   6 ERASE      000838 R   |     ERR     =  00001B 
  6 EVAL       000FC9 R   |   6 EVAL1      000FC9 R   |   6 EVAL2      000FE5 R
  6 EXE1       0007D9 R   |   6 EXECU      000137 R   |   6 EXIT       000147 R
    EXT     =  000001     |     EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1 
  6 EXTRC      000890 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       000811 R   |   6 FILL1      00081F R   |   6 FILL2      000828 R
  6 FIND       000D67 R   |   6 FIND1      000D85 R   |   6 FIND2      000DB3 R
  6 FIND3      000DBF R   |   6 FIND4      000DD3 R   |   6 FIND5      000DE0 R
  6 FIND6      000DC4 R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]

Symbol Table

    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FOR        0010D9 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 HERE       00079A R   |   6 HEX        00093F R
  6 HI         00149D R   |   6 HLD        00031B R   |   6 HOLD       0008B4 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 IFF        001124 R   |     IMEDD   =  000080 
  6 IMMED      0012FB R   |   6 INCH       0000B7 R   |   6 INN        0002EB R
    INPUT_DI=  000000     |     INPUT_EI=  000001     |     INPUT_FL=  000000 
    INPUT_PU=  000001     |   6 INTE1      000F68 R   |   6 INTER      000F3E R
    INT_ADC2=  000016     |     INT_AUAR=  000012     |     INT_AWU =  000001 
    INT_CAN_=  000008     |     INT_CAN_=  000009     |     INT_CLK =  000002 
    INT_EXTI=  000003     |     INT_EXTI=  000004     |     INT_EXTI=  000005 
    INT_EXTI=  000006     |     INT_EXTI=  000007     |     INT_FLAS=  000018 
    INT_I2C =  000013     |     INT_SPI =  00000A     |     INT_TIM1=  00000C 
    INT_TIM1=  00000B     |     INT_TIM2=  00000E     |     INT_TIM2=  00000D 
    INT_TIM3=  000010     |     INT_TIM3=  00000F     |     INT_TIM4=  000017 
    INT_TLI =  000000     |     INT_UART=  000011     |     INT_UART=  000015 
    INT_UART=  000014     |     INT_VECT=  008060     |     INT_VECT=  00800C 
    INT_VECT=  008028     |     INT_VECT=  00802C     |     INT_VECT=  008010 
    INT_VECT=  008014     |     INT_VECT=  008018     |     INT_VECT=  00801C 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]

Symbol Table

    INT_VECT=  008020     |     INT_VECT=  008024     |     INT_VECT=  008068 
    INT_VECT=  008054     |     INT_VECT=  008000     |     INT_VECT=  008030 
    INT_VECT=  008038     |     INT_VECT=  008034     |     INT_VECT=  008040 
    INT_VECT=  00803C     |     INT_VECT=  008048     |     INT_VECT=  008044 
    INT_VECT=  008064     |     INT_VECT=  008008     |     INT_VECT=  008004 
    INT_VECT=  008050     |     INT_VECT=  00804C     |     INT_VECT=  00805C 
    INT_VECT=  008058     |   6 INVER      0003CF R   |     ITC_SPR1=  007F70 
    ITC_SPR2=  007F71     |     ITC_SPR3=  007F72     |     ITC_SPR4=  007F73 
    ITC_SPR5=  007F74     |     ITC_SPR6=  007F75     |     ITC_SPR7=  007F76 
    ITC_SPR8=  007F77     |     IWDG_KR =  0050E0     |     IWDG_PR =  0050E1 
    IWDG_RLR=  0050E2     |   6 JSRC       0012D7 R   |   6 KEY        000A7F R
  6 KEY1       000A7F R   |   6 KTAP       000E58 R   |   6 KTAP1      000E7B R
  6 KTAP2      000E7E R   |   6 LAST       00034C R   |   6 LASTN   =  0014C5 R
  6 LBRAC      000F75 R   |     LED2_BIT=  000005     |     LED2_MAS=  000020 
    LED2_POR=  00500A     |   6 LESS       000478 R   |     LF      =  00000A 
  6 LINK    =  0014C5 R   |   6 LITER      0010AA R   |   6 LT1        00048E R
    MASKK   =  001F7F     |   6 MAX        000498 R   |   6 MAX1       0004AB R
  6 MIN        0004B5 R   |   6 MIN1       0004C8 R   |   6 MMOD1      000557 R
  6 MMOD2      00056B R   |   6 MMOD3      000582 R   |   6 MMSM1      000512 R
  6 MMSM3      000514 R   |   6 MMSM4      00051C R   |   6 MODD       00059C R
  6 MONE       0006DA R   |     MS      =  000026     |   6 MSEC       000096 R
  6 MSMOD      00053A R   |   6 MSTA1      000639 R   |   6 MSTAR      000616 R
    NAFR    =  004804     |   6 NAMEQ      000E00 R   |   6 NAMET      000D11 R
    NCLKOPT =  004808     |   6 NEGAT      0003E0 R   |   6 NEX1       0000FE R
  6 NEXT       0010E9 R   |     NFLASH_W=  00480E     |     NHSECNT =  00480A 
    NOPT1   =  004802     |     NOPT2   =  004804     |     NOPT3   =  004806 
    NOPT4   =  004808     |     NOPT5   =  00480A     |     NOPT6   =  00480C 
    NOPT7   =  00480E     |     NOPTBL  =  00487F     |   6 NTIB       0002FB R
    NUBC    =  004802     |   6 NUFQ       000A8F R   |   6 NUFQ1      000AA8 R
  6 NUMBQ      0009AC R   |   6 NUMQ1      0009E0 R   |   6 NUMQ2      000A11 R
  6 NUMQ3      000A53 R   |   6 NUMQ4      000A58 R   |   6 NUMQ5      000A67 R
  6 NUMQ6      000A6A R   |     NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD 
    NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE 
  6 NonHandl   000000 R   |   6 ONE        0006CC R   |   6 ONEM       00069A R
  6 ONEP       00068D R   |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       000036 R   |   6 ORR        000272 R
  6 OUTPUT     0000C8 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       00023C R
  6 OVERT      0012A4 R   |     PA      =  000000     |   6 PACKS      000847 R
  6 PAD        0007A6 R   |   6 PAREN      000CCC R   |   6 PARS       000BC5 R
  6 PARS1      000BF0 R   |   6 PARS2      000C1B R   |   6 PARS3      000C1E R
  6 PARS4      000C27 R   |   6 PARS5      000C4A R   |   6 PARS6      000C5F R
  6 PARS7      000C6E R   |   6 PARS8      000C7D R   |   6 PARSE      000C8E R
    PA_BASE =  005000     |     PA_CR1  =  005003     |     PA_CR2  =  005004 
    PA_DDR  =  005002     |     PA_IDR  =  005001     |     PA_ODR  =  005000 
    PB      =  000005     |     PB_BASE =  005005     |     PB_CR1  =  005008 
    PB_CR2  =  005009     |     PB_DDR  =  005007     |     PB_IDR  =  005006 
    PB_ODR  =  005005     |     PC      =  00000A     |     PC_BASE =  00500A 
    PC_CR1  =  00500D     |     PC_CR2  =  00500E     |     PC_DDR  =  00500C 
    PC_IDR  =  00500B     |     PC_ODR  =  00500A     |     PD      =  00000F 
  6 PDUM1      00137F R   |   6 PDUM2      001390 R   |     PD_BASE =  00500F 
    PD_CR1  =  005012     |     PD_CR2  =  005013     |     PD_DDR  =  005011 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]

Symbol Table

    PD_IDR  =  005010     |     PD_ODR  =  00500F     |     PE      =  000014 
    PE_BASE =  005014     |     PE_CR1  =  005017     |     PE_CR2  =  005018 
    PE_DDR  =  005016     |     PE_IDR  =  005015     |     PE_ODR  =  005014 
    PF      =  000019     |     PF_BASE =  005019     |     PF_CR1  =  00501C 
    PF_CR2  =  00501D     |     PF_DDR  =  00501B     |     PF_IDR  =  00501A 
    PF_ODR  =  005019     |     PG      =  00001E     |     PG_BASE =  00501E 
    PG_CR1  =  005021     |     PG_CR2  =  005022     |     PG_DDR  =  005020 
    PG_IDR  =  00501F     |     PG_ODR  =  00501E     |     PH      =  000023 
    PH_BASE =  005023     |     PH_CR1  =  005026     |     PH_CR2  =  005027 
    PH_DDR  =  005025     |     PH_IDR  =  005024     |     PH_ODR  =  005023 
    PI      =  000028     |   6 PICK       000730 R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       0003B5 R
  6 PNAM1      001259 R   |   6 PRESE      000FF4 R   |     PROD1   =  00001A 
    PROD2   =  00001C     |     PROD3   =  00001E     |   6 PSTOR      000745 R
  6 QBRAN      000110 R   |   6 QDUP       00035C R   |   6 QDUP1      000366 R
  6 QKEY       0000A5 R   |   6 QSTAC      000FAC R   |   6 QUERY      000ED8 R
  6 QUEST      000BB7 R   |   6 QUIT       001011 R   |   6 QUIT1      001019 R
  6 QUIT2      00101C R   |     RAMBASE =  000000     |     RAM_BASE=  000000 
    RAM_END =  0017FF     |     RAM_SIZE=  001800     |   6 RAT        0001C6 R
  6 RBRAC      0012C4 R   |   6 REPEA      00119F R   |   6 RFROM      0001B3 R
    ROP     =  004800     |   6 ROT        00036D R   |     RP0     =  000024 
  6 RPAT       000193 R   |     RPP     =  0017FF     |   6 RPSTO      0001A0 R
    RST_SR  =  0050B3     |   6 SAME1      000D2F R   |   6 SAME2      000D58 R
  6 SAMEQ      000D27 R   |   6 SCOM1      00128E R   |   6 SCOM2      001291 R
  6 SCOMP      001270 R   |   6 SEMIS      0012B4 R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       0008F3 R   |   6 SIGN1      000903 R
  6 SLASH      0005A6 R   |   6 SLMOD      00058A R   |   6 SNAME      001223 R
    SP0     =  000022     |   6 SPACE      000AB1 R   |   6 SPACS      000AC0 R
  6 SPAT       0001F2 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  0016F0     |   6 SPSTO      0001FF R   |   6 SSMOD      000642 R
    STACK   =  0017FF     |   6 STAR       00060B R   |   6 STASL      000654 R
  6 STORE      00014E R   |   6 STR        000921 R   |   6 STRCQ      0010B9 R
  6 STRQ       0011DA R   |   6 STRQP      000B2E R   |   6 SUBB       000413 R
  6 SWAPP      000222 R   |     SWIM_CSR=  007F80     |   6 TAP        000E42 R
  6 TBOOT      0014BE R   |   6 TCHA1      00070E R   |   6 TCHAR      0006EB R
  6 TEMP       0002DC R   |   6 TEVAL      00030C R   |   6 THENN      00113A R
  6 TIB        0007B7 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       001028 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  005309     |     TIM2_CCM=  005305     |     TIM2_CCM=  005306 
    TIM2_CCM=  005307     |     TIM2_CCR=  00530F     |     TIM2_CCR=  005310 
    TIM2_CCR=  005311     |     TIM2_CCR=  005312     |     TIM2_CCR=  005313 
    TIM2_CCR=  005314     |     TIM2_CNT=  00530A     |     TIM2_CNT=  00530B 
    TIM2_CR1=  005300     |     TIM2_EGR=  005304     |     TIM2_IER=  005301 
    TIM2_PSC=  00530C     |     TIM2_SR1=  005302     |     TIM2_SR2=  005303 
    TIM3_ARR=  00532B     |     TIM3_ARR=  00532C     |     TIM3_CCE=  005327 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCE=  000004 
    TIM3_CCE=  000005     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCM=  005325     |     TIM3_CCM=  005326     |     TIM3_CCM=  000000 
    TIM3_CCM=  000004     |     TIM3_CCM=  000003     |     TIM3_CCR=  00532D 
    TIM3_CCR=  00532E     |     TIM3_CCR=  00532F     |     TIM3_CCR=  005330 
    TIM3_CNT=  005328     |     TIM3_CNT=  005329     |     TIM3_CR1=  005320 
    TIM3_CR1=  000007     |     TIM3_CR1=  000000     |     TIM3_CR1=  000003 
    TIM3_CR1=  000001     |     TIM3_CR1=  000002     |     TIM3_EGR=  005324 
    TIM3_IER=  005321     |     TIM3_PSC=  00532A     |     TIM3_SR1=  005322 
    TIM3_SR2=  005323     |     TIM4_ARR=  005346     |     TIM4_CNT=  005344 
    TIM4_CR1=  005340     |     TIM4_CR1=  000007     |     TIM4_CR1=  000000 
    TIM4_CR1=  000003     |     TIM4_CR1=  000001     |     TIM4_CR1=  000002 
    TIM4_EGR=  005343     |     TIM4_EGR=  000000     |     TIM4_IER=  005341 
    TIM4_IER=  000000     |     TIM4_PSC=  005345     |     TIM4_PSC=  000000 
    TIM4_PSC=  000007     |     TIM4_PSC=  000004     |     TIM4_PSC=  000001 
    TIM4_PSC=  000005     |     TIM4_PSC=  000002     |     TIM4_PSC=  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_PSC=  000003     |     TIM4_PSC=  000000     |     TIM4_PSC=  000001 
    TIM4_PSC=  000002     |     TIM4_SR =  005342     |     TIM4_SR_=  000000 
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001418 R
  6 TNAM3      001436 R   |   6 TNAM4      00143C R   |   6 TNAME      001415 R
  6 TOKEN      000D03 R   |   6 TOR        0001DB R   |     TRUEE   =  00FFFF 
  6 TWOSL      0006A7 R   |   6 TYPE1      000AE0 R   |   6 TYPE2      000AEC R
  6 TYPES      000ADB R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBC     =  004801     |   6 UDOT       000B81 R   |   6 UDOTR      000B61 R
  6 ULAST      000034 R   |   6 ULES1      000470 R   |   6 ULESS      00045A R
  6 UMMOD      0004F0 R   |   6 UMSTA      0005B5 R   |   6 UNIQ1      00121A R
  6 UNIQU      0011FB R   |   6 UNTIL      001105 R   |   6 UPL1       0002B3 R
  6 UPLUS      00029C R   |     UPP     =  000006     |     USR_BTN_=  000004 
    USR_BTN_=  000010     |     USR_BTN_=  005015     |   6 UTYP1      00134F R
  6 UTYP2      00135E R   |   6 UTYPE      00134A R   |   6 UZERO      000020 R
  6 VARIA      001339 R   |     VER     =  000002     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001184 R   |   6 WITHI      0004D5 R
  6 WORDD      000CEF R   |   6 WORDS      001472 R   |   6 WORS1      001478 R
  6 WORS2      001497 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       000287 R   |     XTEMP   =  00001A     |     YTEMP   =  00001C 
  6 ZERO       0006C1 R   |   6 ZL1        000254 R   |   6 ZLESS      00024B R
  6 clear_ra   000012 R   |   6 clock_in   000051 R   |   6 main       00000F R
  6 uart1_in   00005F R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   14EB   flags    0

