ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2019-10-26
                                     19 ;  Changes to memory map:
                                     20 ;       0x16f0  Data Stack, growing downward
                                     21 ;       0x1700  Terminal input buffer TIB
                                     22 ;       0x17ff  Return Stack, growing downard
                                     23 ;================================================================
                                     24 ;       STM8EF, Version 2.1, 13 July
                                     25 ;               Implemented on STM8S-Discovery Board.
                                     26 ;               Assembled by ST VisualDevelop STVD 
                                     27 ;               Bootup on internal 2 MHz clock
                                     28 ;               Switch to external 16 MHz crystal clock
                                     29 ;
                                     30 ; FORTH Virtual Machine:
                                     31 ; Subroutine threaded model
                                     32 ; SP Return stack pointer
                                     33 ; X Data stack pointer
                                     34 ; A,Y Scratch pad registers
                                     35 ;
                                     36 ; Memory Map:
                                     37 ; 0x0 RAM memory, system variables
                                     38 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     39 ; 0x780 Data stack, growing downward
                                     40 ; 0x790 Terminal input buffer TIB
                                     41 ; 0x7FF Return stack, growing downward
                                     42 ; 0x8000 Interrupt vector table
                                     43 ; 0x8080 FORTH startup code
                                     44 ; 0x80E7 Start of FORTH dictionary in ROM
                                     45 ; 0x9584 End of FORTH dictionary
                                     46 ;
                                     47 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     48 ;                  use UART1 instead of UART3 for communication with user.
                                     49 ;                  UART1 is available as ttyACM* device via USB connection.
                                     50 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     51 ;                  and MSEC word that return MS value.
                                     52 ;
                                     53 ;       EF12, Version 2.1, 18apr00cht
                                     54 ;               move to 8000H replacing WHYP.
                                     55 ;               copy interrupt vectors from WHYPFLSH.S19
                                     56 ;               to EF12.S19 before flashing
                                     57 ;               add TICKS1 and DELAY1 for motor stepping
                                     58 ;
                                     59 ;       EF12, 02/18/00, C. H. Ting
                                     60 ;       Adapt 86eForth v2.02 to 68HC12.
                                     61 ;               Use WHYP to seed EF12.ASM
                                     62 ;               Use AS12 native 68HC12 assembler:
                                     63 ;               as12 ef12.asm >ef12.lst
                                     64 ;       EF12A, add ADC code, 02mar00cht
                                     65 ;       EF12B, 01mar00cht
                                     66 ;               stack to 0x78, return stack to 0xf8.
                                     67 ;               add all port definitions
                                     68 ;               add PWM registers
                                     69 ;               add SPI registers and code
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;       EF12C, 12mar00cht
                                     71 ;               add MAX5250 D/A converter
                                     72 ;       EF12D, 15mar00cht
                                     73 ;               add all the Lexel interface words
                                     74 ;       EF12E, 18apr00cht, save for reference
                                     75 ;
                                     76 ;       Copyright (c) 2000
                                     77 ;       Dr. C. H. Ting
                                     78 ;       156 14th Avenue
                                     79 ;       San Mateo, CA 94402
                                     80 ;       (650) 571-7639
                                     81 ;
                                     82 
                                     83 ;*************************************
                                     84 ; constant used for conditationnal 
                                     85 ; assembly for those word I converted 
                                     86 ; to code.
                                     87 ; Added by Picatout 2020-05-24 
                                     88 ;*************************************
                           000001    89 CONVERT_TO_CODE=1 ; words converted in assembly by Picatout
                           000001    90 PICATOUT_MOD=1  ; code modified by Picatout 
                                     91 
                                     92 ;*********************************************************
                                     93 ;	Assembler constants
                                     94 ;*********************************************************
                           000000    95 RAMBASE =	0x0000	   ;ram base
                           0017FF    96 STACK   =	0x17FF 	;system (return) stack empty 
                           001670    97 DATSTK  =	0x1670	;data stack  empty
                           001680    98 TBUFFBASE =     0x1680  ; flash read/write transaction buffer 
                           001700    99 TIBBASE =       0X1700  ; tib addr.
                                    100 
                                    101 
                                    102 
                                    103 ;; Memory allocation
                                    104 
                           000006   105 UPP     =     RAMBASE+6
                           001670   106 SPP     =     RAMBASE+DATSTK
                           0017FF   107 RPP     =     RAMBASE+STACK
                           001680   108 ROWBUFF =     RAMBASE+TBUFFBASE 
                           001700   109 TIBB    =     RAMBASE+TIBBASE
                           000080   110 CTOP    =     RAMBASE+0x80
                                    111 
                           000001   112 .if PICATOUT_MOD 
                                    113 ; user variables constants 
                           000006   114 UBASE = UPP       ; numeric base 
                           000008   115 UTMP = UBASE+2    ; temporary storage
                           00000A   116 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   117 UCTIB = UINN+2    ; tib count 
                           00000E   118 UTIB = UCTIB+2    ; tib address 
                           000010   119 UINTER = UTIB+2   ; interpreter vector 
                           000012   120 UHLD = UINTER+2   ; hold 
                           000014   121 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   122 UCP = UCNTXT+2    ; ram dictionary pointer 
                           000018   123 UFCP = UCP+2      ; flash code pointer 
                           00001A   124 ULAST = UFCP+2    ; flash dictionary pointer 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                                    125 .endif ; PICATOUT_MOD
                                    126 
                                    127 ;******  System Variables  ******
                           00001C   128 XTEMP	=	ULAST+2	;address called by CREATE
                           00001E   129 YTEMP	=	XTEMP+2	;address called by CREATE
                           00001C   130 PROD1 = XTEMP	;space for UM*
                           00001E   131 PROD2 = PROD1+2
                           000020   132 PROD3 = PROD2+2
                           000022   133 CARRY = PROD3+2
                           000024   134 SP0	= CARRY+2	;initial data stack pointer
                           000026   135 RP0	= SP0+2		;initial return stack pointer
                           000028   136 MS    =   RP0+2         ; millisecond counter 
                           00002A   137 CNTDWN =  MS+2          ; count down timer 
                           00002C   138 FPTR = CNTDWN+2         ; 24 bits farptr 
                           00002D   139 PTR16 = FPTR+1          ; middle byte of farptr 
                           00002E   140 PTR8 = FPTR+2           ; least byte of farptr 
                                    141 
                           000001   142 .if PICATOUT_MOD
                                    143 ; EEPROM persistant data  
                           004000   144 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   145 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   146 APP_HERE = APP_RUN+2   ; free application space pointer 
                           004006   147 VAR_HERE = APP_HERE+2  ; free data space pointer 
                                    148 .endif ;PICATOUT_MOD
                                    149 
                                    150 
                                    151 ;***********************************************
                                    152 ;; Version control
                                    153 
                           000002   154 VER     =     2         ;major release version
                           000001   155 EXT     =     1         ;minor extension
                                    156 
                                    157 ;; Constants
                                    158 
                           00FFFF   159 TRUEE   =     0xFFFF      ;true flag
                                    160 
                           000040   161 COMPO   =     0x40     ;lexicon compile only bit
                           000080   162 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   163 MASKK   =     0x1F7F  ;lexicon bit mask
                                    164 
                           000002   165 CELLL   =     2       ;size of a cell
                           00000A   166 BASEE   =     10      ;default radix
                           000008   167 BKSPP   =     8       ;back space
                           00000A   168 LF      =     10      ;line feed
                           00000D   169 CRR     =     13      ;carriage return
                           00001B   170 ERR     =     27      ;error escape
                           000027   171 TIC     =     39      ;tick
                           0000CD   172 CALLL   =     0xCD     ;CALL opcodes
                                    173 
                                    174 
                                    175         .macro _ledon
                                    176         bset PC_ODR,#LED2_BIT
                                    177         .endm
                                    178 
                                    179         .macro _ledoff
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         bres PC_ODR,#LED2_BIT
                                    181         .endm
                                    182 
                                    183 ;**********************************************************
                                    184         .area DATA (ABS)
      000000                        185         .org RAMBASE 
                                    186 ;**********************************************************
                                    187 
                                    188 ;**********************************************************
                                    189         .area SSEG (ABS) ; STACK
      001700                        190         .org 0x1700
      001700                        191         .ds 256 
                                    192 ; space for DATSTK,TIB and STACK         
                                    193 ;**********************************************************
                                    194 
                                    195 ;**********************************************************
                                    196         .area HOME ; vectors table
                                    197 ;**********************************************************
      000000 82 00 00 16            198 	int main	        ; reset
      000004 82 00 00 00            199 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            200 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            201 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            202 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            203 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            204 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            205 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            206 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            207 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            208 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            209 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            210 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            211 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            212 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            213 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            214 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            215 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            216 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            217 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            218 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            219 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            220 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            221 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            222 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            223 	int Timer4Handler	; irq23
      000068 82 00 00 00            224 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            225 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            226 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            227 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            228 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            229 	int NonHandledInterrupt	; irq29
                                    230 
                                    231 ;**********************************************************
                                    232         .area CODE
                                    233 ;**********************************************************
                                    234 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 ; non handled interrupt reset MCU
      000000                        236 NonHandledInterrupt:
      000000 A6 80            [ 1]  237         ld a, #0x80
      000002 C7 50 D1         [ 1]  238         ld WWDG_CR,a ; WWDG_CR used to reset mcu
                                    239 	;iret
                                    240 
                                    241 ; used for milliseconds counter 
                                    242 ; MS is 16 bits counter 
      000005                        243 Timer4Handler:
      000005 72 5F 53 42      [ 1]  244 	clr TIM4_SR 
      000009 BE 28            [ 2]  245         ldw x,MS 
      00000B 5C               [ 2]  246         incw x 
      00000C BF 28            [ 2]  247         ldw MS,x
      00000E BE 2A            [ 2]  248         ldw x,CNTDWN 
      000010 27 03            [ 1]  249         jreq 1$
      000012 5A               [ 2]  250         decw x 
      000013 BF 2A            [ 2]  251         ldw CNTDWN,x 
      000015                        252 1$:         
      000015 80               [11]  253         iret 
                                    254 
                                    255 
                                    256 ;; Main entry points and COLD start data
      000016                        257 main:
                                    258 ; clear all RAM
      000016 AE 00 00         [ 2]  259 	ldw X,#RAMBASE
      000019                        260 clear_ram0:
      000019 7F               [ 1]  261 	clr (X)
      00001A 5C               [ 2]  262 	incw X
      00001B A3 17 FF         [ 2]  263 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  264 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  265         ldw x,#RPP
      000023 94               [ 1]  266         ldw sp,x 
      000024 CC 00 3F         [ 2]  267 	jp ORIG
                                    268 
                                    269 ; COLD initialize these variables.
      000027                        270 UZERO:
      000027 00 0A                  271         .word      BASEE   ;BASE
      000029 00 00                  272         .word      0       ;tmp
      00002B 00 00                  273         .word      0       ;>IN
      00002D 00 00                  274         .word      0       ;#TIB
      00002F 17 00                  275         .word      TIBB    ;TIB
      000031 0F E9                  276         .word      INTER   ;'EVAL
      000033 00 00                  277         .word      0       ;HLD
      000035 1A 6D                  278         .word      LASTN  ;CNTXT pointer
      000037 00 80                  279         .word      CTOP   ;CP in RAM
      000039 1A 80                  280         .word      app_space ; CP in FLASH 
      00003B 1A 6D                  281         .word      LASTN   ;LAST
      00003D 00 00                  282 UEND:  .word      0
                                    283 
      00003F                        284 ORIG:   
                                    285 ; initialize SP
      00003F AE 17 FF         [ 2]  286         LDW     X,#STACK  ;initialize return stack
      000042 94               [ 1]  287         LDW     SP,X
      000043 BF 26            [ 2]  288         LDW     RP0,X
      000045 AE 16 70         [ 2]  289         LDW     X,#DATSTK ;initialize data stack
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      000048 BF 24            [ 2]  290         LDW     SP0,X
                                    291 ; initialize PC_5 as output to control LED2
                                    292 ; added by Picatout 
      00004A 72 1A 50 0D      [ 1]  293         bset PC_CR1,#LED2_BIT
      00004E 72 1A 50 0E      [ 1]  294         bset PC_CR2,#LED2_BIT
      000052 72 1A 50 0C      [ 1]  295         bset PC_DDR,#LED2_BIT
      000056                        296         _ledoff
      000056 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    297 ; initialize clock to HSI
                                    298 ; no divisor 16Mhz 
                                    299 ; Added by Picatout 
      00005A                        300 clock_init:
      00005A 72 5F 50 C6      [ 1]  301         clr CLK_CKDIVR
      00005E 72 12 50 C5      [ 1]  302 	bset CLK_SWCR,#CLK_SWCR_SWEN
      000062 A6 E1            [ 1]  303 	ld a,#CLK_SWR_HSI
      000064 C7 50 C4         [ 1]  304 	ld CLK_SWR,a
      000067 C1 50 C3         [ 1]  305 1$:	cp a,CLK_CMSR
      00006A 26 FB            [ 1]  306 	jrne 1$
                                    307         
                                    308 ; initialize UART1, 115200 8N1
      00006C                        309 uart1_init:
      00006C 72 14 50 C7      [ 1]  310 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    311 	; configure tx pin
      000070 72 1A 50 02      [ 1]  312 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      000074 72 1A 50 03      [ 1]  313 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000078 72 1A 50 04      [ 1]  314 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    315 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      00007C 35 0B 52 33      [ 1]  316 	mov UART1_BRR2,#0x0b ; must be loaded first
      000080 35 08 52 32      [ 1]  317 	mov UART1_BRR1,#0x8
      000084 35 0C 52 35      [ 1]  318 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    319 ; initialize timer4, used for millisecond interrupt  
      000088 35 07 53 45      [ 1]  320 	mov TIM4_PSCR,#7 ; prescale 128  
      00008C 35 7D 53 46      [ 1]  321 	mov TIM4_ARR,#125 ; set for 1msec.
      000090 35 05 53 40      [ 1]  322 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      000094 72 10 53 41      [ 1]  323 	bset TIM4_IER,#TIM4_IER_UIE 
      000098 9A               [ 1]  324         rim
      000099 CC 15 C2         [ 2]  325         jp  COLD   ;default=MN1
                                    326 
                                    327 
                                    328 ;; get millisecond counter 
                                    329 ;; msec ( -- u )
                                    330 ;; Added by Picatout 2020-04-26
      00009C 00 00                  331         .word 0 
                           00009E   332 LINK = . 
      00009E 04                     333         .byte 4
      00009F 4D 53 45 43            334         .ascii "MSEC"
      0000A3                        335 MSEC: 
      0000A3 1D 00 02         [ 2]  336         subw x,#CELLL 
      0000A6 90 BE 28         [ 2]  337         ldw y,MS 
      0000A9 FF               [ 2]  338         ldw (x),y 
      0000AA 81               [ 4]  339         ret 
                                    340 
                                    341 ; suspend execution for u msec 
                                    342 ;  pause ( u -- )
      0000AB 00 9E                  343         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



                           0000AD   344         LINK=.
      0000AD 05                     345         .byte 5 
      0000AE 50 41 55 53 45         346         .ascii "PAUSE"
      0000B3                        347 PAUSE:
      0000B3 90 93            [ 1]  348         ldw y,x
      0000B5 90 FE            [ 2]  349         ldw y,(y)
      0000B7 72 B9 00 28      [ 2]  350         addw y,MS 
      0000BB 8F               [10]  351 1$:     wfi  
      0000BC 90 B3 28         [ 2]  352         cpw y,MS  
      0000BF 26 FA            [ 1]  353         jrne 1$        
      0000C1 1C 00 02         [ 2]  354         addw x,#CELLL 
      0000C4 81               [ 4]  355         ret 
                                    356 
                                    357 ; initialize count down timer 
                                    358 ;  TIMER ( u -- )  milliseconds 
      0000C5 00 AD                  359         .word LINK 
                           0000C7   360         LINK=.
      0000C7 05                     361         .byte 5 
      0000C8 54 49 4D 45 52         362         .ascii "TIMER" 
      0000CD                        363 TIMER:
      0000CD 90 93            [ 1]  364         ldw y,x
      0000CF 90 FE            [ 2]  365         ldw y,(y) 
      0000D1 90 BF 2A         [ 2]  366         ldw CNTDWN,y
      0000D4 1C 00 02         [ 2]  367         addw x,#CELLL 
      0000D7 81               [ 4]  368         ret 
                                    369 
                                    370 ; check for TIMER exiparition 
                                    371 ;  TIMEOUT? ( -- 0|-1 )
      0000D8 00 C7                  372         .word LINK 
                           0000DA   373         LINK=. 
      0000DA 08                     374         .byte 8 
      0000DB 54 49 4D 45 4F 55 54   375         .ascii "TIMEOUT?"
             3F
      0000E3                        376 TIMEOUTQ: 
      0000E3 4F               [ 1]  377         clr a
      0000E4 1D 00 02         [ 2]  378         subw x,#CELLL 
      0000E7 90 BE 2A         [ 2]  379         ldw y,CNTDWN 
      0000EA 26 01            [ 1]  380         jrne 1$ 
      0000EC 43               [ 1]  381         cpl a 
      0000ED E7 01            [ 1]  382 1$:     ld (1,x),a 
      0000EF F7               [ 1]  383         ld (x),a 
      0000F0 81               [ 4]  384         ret         
                                    385 
                                    386 ; reboot MCU 
                                    387 ; REBOOT ( -- )
      0000F1 00 DA                  388         .word LINK 
                           0000F3   389         LINK=. 
      0000F3 06                     390         .byte 6 
      0000F4 52 45 42 4F 4F 54      391         .ascii "REBOOT"
      0000FA                        392 reboot:
      0000FA CC 00 00         [ 2]  393         jp NonHandledInterrupt
                                    394         
                                    395 
                                    396 ;; Device dependent I/O
                                    397 ;       ?RX     ( -- c T | F )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



                                    398 ;         Return input byte and true, or false.
      0000FD 00 F3                  399         .word      LINK 
                           0000FF   400 LINK	= .
      0000FF 04                     401         .byte      4
      000100 3F 4B 45 59            402         .ascii     "?KEY"
      000104                        403 QKEY:
      000104 90 5F            [ 1]  404         CLRW Y 
      000106 72 0B 52 30 0B   [ 2]  405         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      00010B C6 52 31         [ 1]  406         LD    A,UART1_DR   ;get char in A
      00010E 1D 00 02         [ 2]  407 	SUBW	X,#2
      000111 E7 01            [ 1]  408         LD     (1,X),A
      000113 7F               [ 1]  409 	CLR	(X)
      000114 90 53            [ 2]  410         CPLW     Y
      000116                        411 INCH:
      000116 1D 00 02         [ 2]  412 	SUBW	X,#2
      000119 FF               [ 2]  413         LDW     (X),Y
      00011A 81               [ 4]  414         RET
                                    415 
                                    416 ;       TX!     ( c -- )
                                    417 ;       Send character c to  output device.
      00011B 00 FF                  418         .word      LINK
                           00011D   419 LINK	= .
      00011D 04                     420         .byte      4
      00011E 45 4D 49 54            421         .ascii     "EMIT"
      000122                        422 EMIT:
      000122 E6 01            [ 1]  423         LD     A,(1,X)
      000124 1C 00 02         [ 2]  424 	ADDW	X,#2
      000127 72 0F 52 30 FB   [ 2]  425 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      00012C C7 52 31         [ 1]  426         LD    UART1_DR,A   ;send A
      00012F 81               [ 4]  427         RET
                                    428 
                                    429 ;; The kernel
                                    430 
                                    431 ;       doLIT   ( -- w )
                                    432 ;       Push an inline literal.
      000130 01 1D                  433         .word      LINK
                           000132   434 LINK	= 	.
      000132 45                     435 	.byte      COMPO+5
      000133 44 4F 4C 49 54         436         .ascii     "DOLIT"
      000138                        437 DOLIT:
      000138 1D 00 02         [ 2]  438 	SUBW X,#2
                           000001   439 .if PICATOUT_MOD 
      00013B 16 01            [ 2]  440         ldw y,(1,sp)
      00013D 90 FE            [ 2]  441         ldw y,(y)
      00013F FF               [ 2]  442         ldw (x),y
      000140 90 85            [ 2]  443         popw y 
                           000000   444 .else 
                                    445         POPW Y
                                    446 	LDW YTEMP,Y
                                    447 	LDW Y,(Y)
                                    448         LDW (X),Y
                                    449         LDW Y,YTEMP
                                    450 .endif 
      000142 90 EC 02         [ 2]  451 	JP (2,Y)
                                    452 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



                                    453 ;       next    ( -- )
                                    454 ;       Code for  single index loop.
      000145 01 32                  455         .word      LINK
                           000147   456 LINK	= 	.
      000147 44                     457 	.byte      COMPO+4
      000148 4E 45 58 54            458         .ascii     "NEXT"
      00014C                        459 DONXT:
      00014C 16 03            [ 2]  460 	LDW Y,(3,SP)
      00014E 90 5A            [ 2]  461 	DECW Y
      000150 2A 07            [ 1]  462 	JRPL NEX1 ; jump if N=0
      000152 90 85            [ 2]  463 	POPW Y
                           000001   464 .if PICATOUT_MOD
      000154 5B 02            [ 2]  465         addw sp,#2
                           000000   466 .else        
                                    467 	POP A
                                    468 	POP A
                                    469 .endif         
      000156 90 EC 02         [ 2]  470         JP (2,Y)
      000159                        471 NEX1:
      000159 17 03            [ 2]  472         LDW (3,SP),Y
      00015B 90 85            [ 2]  473         POPW Y
      00015D 90 FE            [ 2]  474 	LDW Y,(Y)
      00015F 90 FC            [ 2]  475 	JP (Y)
                                    476 
                                    477 ;       ?branch ( f -- )
                                    478 ;       Branch if flag is zero.
      000161 01 47                  479         .word      LINK
                           000163   480 LINK	= 	.
      000163 47                     481 	.byte      COMPO+7
      000164 3F 42 52 41 4E 43 48   482         .ascii     "?BRANCH"
      00016B                        483 QBRAN:	
      00016B 90 93            [ 1]  484         LDW Y,X
      00016D 1C 00 02         [ 2]  485 	ADDW X,#2
      000170 90 FE            [ 2]  486 	LDW Y,(Y)
      000172 27 0E            [ 1]  487         JREQ     BRAN
      000174 90 85            [ 2]  488 	POPW Y
      000176 90 EC 02         [ 2]  489 	JP (2,Y)
                                    490         
                                    491 ;       branch  ( -- )
                                    492 ;       Branch to an inline address.
      000179 01 63                  493         .word      LINK
                           00017B   494 LINK	= 	.
      00017B 46                     495 	.byte      COMPO+6
      00017C 42 52 41 4E 43 48      496         .ascii     "BRANCH"
      000182                        497 BRAN:
      000182 90 85            [ 2]  498         POPW Y
      000184 90 FE            [ 2]  499 	LDW Y,(Y)
      000186 90 FC            [ 2]  500         JP     (Y)
                                    501 
                                    502 ;       EXECUTE ( ca -- )
                                    503 ;       Execute  word at ca.
      000188 01 7B                  504         .word      LINK
                           00018A   505 LINK	= 	.
      00018A 07                     506         .byte       7
      00018B 45 58 45 43 55 54 45   507         .ascii     "EXECUTE"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000192                        508 EXECU:
      000192 90 93            [ 1]  509         LDW Y,X
      000194 1C 00 02         [ 2]  510 	ADDW X,#2
      000197 90 FE            [ 2]  511 	LDW  Y,(Y)
      000199 90 FC            [ 2]  512         JP   (Y)
                                    513 
                                    514 ;       EXIT    ( -- )
                                    515 ;       Terminate a colon definition.
      00019B 01 8A                  516         .word      LINK
                           00019D   517 LINK = .
      00019D 04                     518         .byte      4
      00019E 45 58 49 54            519         .ascii     "EXIT"
      0001A2                        520 EXIT:
      0001A2 90 85            [ 2]  521         POPW Y
      0001A4 81               [ 4]  522         RET
                                    523 
                                    524 ;       !       ( w a -- )
                                    525 ;       Pop  data stack to memory.
      0001A5 01 9D                  526         .word      LINK
                           0001A7   527 LINK = .
      0001A7 01                     528         .byte      1
      0001A8 21                     529         .ascii     "!"
      0001A9                        530 STORE:
      0001A9 90 93            [ 1]  531         LDW Y,X
      0001AB 90 FE            [ 2]  532         LDW Y,(Y)    ;Y=a
      0001AD 90 BF 1E         [ 2]  533         LDW YTEMP,Y
      0001B0 90 93            [ 1]  534         LDW Y,X
      0001B2 90 EE 02         [ 2]  535         LDW Y,(2,Y)
      0001B5 91 CF 1E         [ 5]  536         LDW [YTEMP],Y ;store w at a
      0001B8 1C 00 04         [ 2]  537         ADDW X,#4 ; DDROP 
      0001BB 81               [ 4]  538         RET     
                                    539 
                                    540 ;       @       ( a -- w )
                                    541 ;       Push memory location to stack.
      0001BC 01 A7                  542         .word      LINK
                           0001BE   543 LINK	= 	.
      0001BE 01                     544         .byte    1
      0001BF 40                     545         .ascii	"@"
      0001C0                        546 AT:
      0001C0 90 93            [ 1]  547         LDW Y,X     ;Y = a
      0001C2 90 FE            [ 2]  548         LDW Y,(Y)   ; address 
      0001C4 90 FE            [ 2]  549         LDW Y,(Y)   ; value 
      0001C6 FF               [ 2]  550         LDW (X),Y ;w = @Y
      0001C7 81               [ 4]  551         RET     
                                    552 
                                    553 ;       C!      ( c b -- )
                                    554 ;       Pop  data stack to byte memory.
      0001C8 01 BE                  555         .word      LINK
                           0001CA   556 LINK	= .
      0001CA 02                     557         .byte      2
      0001CB 43 21                  558         .ascii     "C!"
      0001CD                        559 CSTOR:
      0001CD 90 93            [ 1]  560         LDW Y,X
      0001CF 90 FE            [ 2]  561 	LDW Y,(Y)    ;Y=b
      0001D1 E6 03            [ 1]  562         LD A,(3,X)    ;D = c
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      0001D3 90 F7            [ 1]  563         LD  (Y),A     ;store c at b
      0001D5 1C 00 04         [ 2]  564 	ADDW X,#4 ; DDROP 
      0001D8 81               [ 4]  565         RET     
                                    566 
                                    567 ;       C@      ( b -- c )
                                    568 ;       Push byte in memory to  stack.
      0001D9 01 CA                  569         .word      LINK
                           0001DB   570 LINK	= 	.
      0001DB 02                     571         .byte      2
      0001DC 43 40                  572         .ascii     "C@"
      0001DE                        573 CAT:
      0001DE 90 93            [ 1]  574         LDW Y,X     ;Y=b
      0001E0 90 FE            [ 2]  575         LDW Y,(Y)
      0001E2 90 F6            [ 1]  576         LD A,(Y)
      0001E4 E7 01            [ 1]  577         LD (1,X),A
      0001E6 7F               [ 1]  578         CLR (X)
      0001E7 81               [ 4]  579         RET     
                                    580 
                                    581 ;       RP@     ( -- a )
                                    582 ;       Push current RP to data stack.
      0001E8 01 DB                  583         .word      LINK
                           0001EA   584 LINK	= .
      0001EA 03                     585         .byte      3
      0001EB 52 50 40               586         .ascii     "RP@"
      0001EE                        587 RPAT:
      0001EE 90 96            [ 1]  588         LDW Y,SP    ;save return addr
      0001F0 1D 00 02         [ 2]  589         SUBW X,#2
      0001F3 FF               [ 2]  590         LDW (X),Y
      0001F4 81               [ 4]  591         RET     
                                    592 
                                    593 ;       RP!     ( a -- )
                                    594 ;       Set  return stack pointer.
      0001F5 01 EA                  595         .word      LINK
                           0001F7   596 LINK	= 	. 
      0001F7 43                     597 	.byte      COMPO+3
      0001F8 52 50 21               598         .ascii     "RP!"
      0001FB                        599 RPSTO:
      0001FB 90 85            [ 2]  600         POPW Y
      0001FD 90 BF 1E         [ 2]  601         LDW YTEMP,Y
      000200 90 93            [ 1]  602         LDW Y,X
      000202 90 FE            [ 2]  603         LDW Y,(Y)
      000204 90 94            [ 1]  604         LDW SP,Y
      000206 1C 00 02         [ 2]  605         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000209 92 CC 1E         [ 5]  606         JP [YTEMP]
                                    607 
                                    608 ;       R>      ( -- w )
                                    609 ;       Pop return stack to data stack.
      00020C 01 F7                  610         .word      LINK
                           00020E   611 LINK	= 	. 
      00020E 42                     612 	.byte      COMPO+2
      00020F 52 3E                  613         .ascii     "R>"
      000211                        614 RFROM:
      000211 90 85            [ 2]  615         POPW Y    ;save return addr
      000213 90 BF 1E         [ 2]  616         LDW YTEMP,Y
      000216 90 85            [ 2]  617         POPW Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      000218 1D 00 02         [ 2]  618         SUBW X,#2
      00021B FF               [ 2]  619         LDW (X),Y
      00021C 92 CC 1E         [ 5]  620         JP [YTEMP]
                                    621 
                                    622 ;       R@      ( -- w )
                                    623 ;       Copy top of return stack to stack.
      00021F 02 0E                  624         .word      LINK
                           000221   625 LINK	= 	. 
      000221 02                     626         .byte      2
      000222 52 40                  627         .ascii     "R@"
      000224                        628 RAT:
                           000001   629 .if PICATOUT_MOD
      000224 16 03            [ 2]  630         ldw y,(3,sp)
      000226 1D 00 02         [ 2]  631         subw x,#CELLL 
      000229 FF               [ 2]  632         ldw (x),y 
      00022A 81               [ 4]  633         ret 
                           000000   634 .else 
                                    635         POPW Y
                                    636         LDW YTEMP,Y
                                    637         POPW Y
                                    638         PUSHW Y
                                    639         SUBW X,#2
                                    640         LDW (X),Y
                                    641         JP [YTEMP]
                                    642 .endif         
                                    643 
                                    644 ;       >R      ( w -- )
                                    645 ;       Push data stack to return stack.
      00022B 02 21                  646         .word      LINK
                           00022D   647 LINK	= 	. 
      00022D 42                     648 	.byte      COMPO+2
      00022E 3E 52                  649         .ascii     ">R"
      000230                        650 TOR:
      000230 90 85            [ 2]  651         POPW Y    ;save return addr
      000232 90 BF 1E         [ 2]  652         LDW YTEMP,Y
      000235 90 93            [ 1]  653         LDW Y,X
      000237 90 FE            [ 2]  654         LDW Y,(Y)
      000239 90 89            [ 2]  655         PUSHW Y    ;restore return addr
      00023B 1C 00 02         [ 2]  656         ADDW X,#2
      00023E 92 CC 1E         [ 5]  657         JP [YTEMP]
                                    658 
                                    659 ;       SP@     ( -- a )
                                    660 ;       Push current stack pointer.
      000241 02 2D                  661         .word      LINK
                           000243   662 LINK	= 	. 
      000243 03                     663         .byte      3
      000244 53 50 40               664         .ascii     "SP@"
      000247                        665 SPAT:
      000247 90 93            [ 1]  666 	LDW Y,X
      000249 1D 00 02         [ 2]  667         SUBW X,#2
      00024C FF               [ 2]  668 	LDW (X),Y
      00024D 81               [ 4]  669         RET     
                                    670 
                                    671 ;       SP!     ( a -- )
                                    672 ;       Set  data stack pointer.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      00024E 02 43                  673         .word      LINK
                           000250   674 LINK	= 	. 
      000250 03                     675         .byte      3
      000251 53 50 21               676         .ascii     "SP!"
      000254                        677 SPSTO:
      000254 FE               [ 2]  678         LDW     X,(X)     ;X = a
      000255 81               [ 4]  679         RET     
                                    680 
                                    681 ;       DROP    ( w -- )
                                    682 ;       Discard top stack item.
      000256 02 50                  683         .word      LINK
                           000258   684 LINK	= 	. 
      000258 04                     685         .byte      4
      000259 44 52 4F 50            686         .ascii     "DROP"
      00025D                        687 DROP:
      00025D 1C 00 02         [ 2]  688         ADDW X,#2     
      000260 81               [ 4]  689         RET     
                                    690 
                                    691 ;       DUP     ( w -- w w )
                                    692 ;       Duplicate  top stack item.
      000261 02 58                  693         .word      LINK
                           000263   694 LINK	= 	. 
      000263 03                     695         .byte      3
      000264 44 55 50               696         .ascii     "DUP"
      000267                        697 DUPP:
      000267 90 93            [ 1]  698 	LDW Y,X
      000269 1D 00 02         [ 2]  699         SUBW X,#2
      00026C 90 FE            [ 2]  700 	LDW Y,(Y)
      00026E FF               [ 2]  701 	LDW (X),Y
      00026F 81               [ 4]  702         RET     
                                    703 
                                    704 ;       SWAP    ( w1 w2 -- w2 w1 )
                                    705 ;       Exchange top two stack items.
      000270 02 63                  706         .word      LINK
                           000272   707 LINK	= 	. 
      000272 04                     708         .byte      4
      000273 53 57 41 50            709         .ascii     "SWAP"
      000277                        710 SWAPP:
      000277 90 93            [ 1]  711         LDW Y,X
      000279 90 FE            [ 2]  712         LDW Y,(Y)
      00027B 90 BF 1E         [ 2]  713         LDW YTEMP,Y
      00027E 90 93            [ 1]  714         LDW Y,X
      000280 90 EE 02         [ 2]  715         LDW Y,(2,Y)
      000283 FF               [ 2]  716         LDW (X),Y
      000284 90 BE 1E         [ 2]  717         LDW Y,YTEMP
      000287 EF 02            [ 2]  718         LDW (2,X),Y
      000289 81               [ 4]  719         RET     
                                    720 
                                    721 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                    722 ;       Copy second stack item to top.
      00028A 02 72                  723         .word      LINK
                           00028C   724 LINK	= . 
      00028C 04                     725         .byte      4
      00028D 4F 56 45 52            726         .ascii     "OVER"
      000291                        727 OVER:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      000291 1D 00 02         [ 2]  728         SUBW X,#2
      000294 90 93            [ 1]  729         LDW Y,X
      000296 90 EE 04         [ 2]  730         LDW Y,(4,Y)
      000299 FF               [ 2]  731         LDW (X),Y
      00029A 81               [ 4]  732         RET     
                                    733 
                                    734 ;       0<      ( n -- t )
                                    735 ;       Return true if n is negative.
      00029B 02 8C                  736         .word      LINK
                           00029D   737 LINK	= . 
      00029D 02                     738         .byte      2
      00029E 30 3C                  739         .ascii     "0<"
      0002A0                        740 ZLESS:
      0002A0 A6 FF            [ 1]  741         LD A,#0xFF
      0002A2 90 93            [ 1]  742         LDW Y,X
      0002A4 90 FE            [ 2]  743         LDW Y,(Y)
      0002A6 2B 01            [ 1]  744         JRMI     ZL1
      0002A8 4F               [ 1]  745         CLR A   ;false
      0002A9 F7               [ 1]  746 ZL1:    LD     (X),A
      0002AA E7 01            [ 1]  747         LD (1,X),A
      0002AC 81               [ 4]  748 	RET     
                                    749 
                                    750 ;       AND     ( w w -- w )
                                    751 ;       Bitwise AND.
      0002AD 02 9D                  752         .word      LINK
                           0002AF   753 LINK	= . 
      0002AF 03                     754         .byte      3
      0002B0 41 4E 44               755         .ascii     "AND"
      0002B3                        756 ANDD:
      0002B3 F6               [ 1]  757         LD  A,(X)    ;D=w
      0002B4 E4 02            [ 1]  758         AND A,(2,X)
      0002B6 E7 02            [ 1]  759         LD (2,X),A
      0002B8 E6 01            [ 1]  760         LD A,(1,X)
      0002BA E4 03            [ 1]  761         AND A,(3,X)
      0002BC E7 03            [ 1]  762         LD (3,X),A
      0002BE 1C 00 02         [ 2]  763         ADDW X,#2
      0002C1 81               [ 4]  764         RET
                                    765 
                                    766 ;       OR      ( w w -- w )
                                    767 ;       Bitwise inclusive OR.
      0002C2 02 AF                  768         .word      LINK
                           0002C4   769 LINK = . 
      0002C4 02                     770         .byte      2
      0002C5 4F 52                  771         .ascii     "OR"
      0002C7                        772 ORR:
      0002C7 F6               [ 1]  773         LD A,(X)    ;D=w
      0002C8 EA 02            [ 1]  774         OR A,(2,X)
      0002CA E7 02            [ 1]  775         LD (2,X),A
      0002CC E6 01            [ 1]  776         LD A,(1,X)
      0002CE EA 03            [ 1]  777         OR A,(3,X)
      0002D0 E7 03            [ 1]  778         LD (3,X),A
      0002D2 1C 00 02         [ 2]  779         ADDW X,#2
      0002D5 81               [ 4]  780         RET
                                    781 
                                    782 ;       XOR     ( w w -- w )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



                                    783 ;       Bitwise exclusive OR.
      0002D6 02 C4                  784         .word      LINK
                           0002D8   785 LINK	= . 
      0002D8 03                     786         .byte      3
      0002D9 58 4F 52               787         .ascii     "XOR"
      0002DC                        788 XORR:
      0002DC F6               [ 1]  789         LD A,(X)    ;D=w
      0002DD E8 02            [ 1]  790         XOR A,(2,X)
      0002DF E7 02            [ 1]  791         LD (2,X),A
      0002E1 E6 01            [ 1]  792         LD A,(1,X)
      0002E3 E8 03            [ 1]  793         XOR A,(3,X)
      0002E5 E7 03            [ 1]  794         LD (3,X),A
      0002E7 1C 00 02         [ 2]  795         ADDW X,#2
      0002EA 81               [ 4]  796         RET
                                    797 
                                    798 ;       UM+     ( u u -- udsum )
                                    799 ;       Add two unsigned single
                                    800 ;       and return a double sum.
      0002EB 02 D8                  801         .word      LINK
                           0002ED   802 LINK	= . 
      0002ED 03                     803         .byte      3
      0002EE 55 4D 2B               804         .ascii     "UM+"
      0002F1                        805 UPLUS:
      0002F1 A6 01            [ 1]  806         LD A,#1
      0002F3 90 93            [ 1]  807         LDW Y,X
      0002F5 90 EE 02         [ 2]  808         LDW Y,(2,Y)
      0002F8 90 BF 1E         [ 2]  809         LDW YTEMP,Y
      0002FB 90 93            [ 1]  810         LDW Y,X
      0002FD 90 FE            [ 2]  811         LDW Y,(Y)
      0002FF 72 B9 00 1E      [ 2]  812         ADDW Y,YTEMP
      000303 EF 02            [ 2]  813         LDW (2,X),Y
      000305 25 01            [ 1]  814         JRC     UPL1
      000307 4F               [ 1]  815         CLR A
      000308 E7 01            [ 1]  816 UPL1:   LD     (1,X),A
      00030A 7F               [ 1]  817         CLR (X)
      00030B 81               [ 4]  818         RET
                                    819 
                                    820 ;; System and user variables
                                    821 
                                    822 ;       doVAR   ( -- a )
                                    823 ;       Code for VARIABLE and CREATE.
      00030C 02 ED                  824         .word      LINK
                           00030E   825 LINK	= . 
      00030E 45                     826 	.byte      COMPO+5
      00030F 44 4F 56 41 52         827         .ascii     "DOVAR"
      000314                        828 DOVAR:
      000314 1D 00 02         [ 2]  829 	SUBW X,#2
      000317 90 85            [ 2]  830         POPW Y    ;get return addr (pfa)
                           000001   831 .if PICATOUT_MOD
      000319 90 FE            [ 2]  832         LDW Y,(Y) ; indirect address 
                                    833 .endif ;PICATOUT_MOD        
      00031B FF               [ 2]  834         LDW (X),Y    ;push on stack
      00031C 81               [ 4]  835         RET     ;go to RET of EXEC
                                    836 
                                    837 ;       BASE    ( -- a )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



                                    838 ;       Radix base for numeric I/O.
      00031D 03 0E                  839         .word      LINK        
                           00031F   840 LINK = . 
      00031F 04                     841         .byte      4
      000320 42 41 53 45            842         .ascii     "BASE"
      000324                        843 BASE:
      000324 90 AE 00 06      [ 2]  844 	LDW Y,#UBASE 
      000328 1D 00 02         [ 2]  845 	SUBW X,#2
      00032B FF               [ 2]  846         LDW (X),Y
      00032C 81               [ 4]  847         RET
                                    848 
                                    849 ;       tmp     ( -- a )
                                    850 ;       A temporary storage.
      00032D 03 1F                  851         .word      LINK
                                    852         
                           00032F   853 LINK = . 
      00032F 03                     854 	.byte      3
      000330 54 4D 50               855         .ascii     "TMP"
      000333                        856 TEMP:
      000333 90 AE 00 08      [ 2]  857 	LDW Y,#UTMP
      000337 1D 00 02         [ 2]  858 	SUBW X,#2
      00033A FF               [ 2]  859         LDW (X),Y
      00033B 81               [ 4]  860         RET
                                    861 
                                    862 ;       >IN     ( -- a )
                                    863 ;        Hold parsing pointer.
      00033C 03 2F                  864         .word      LINK
                           00033E   865 LINK = . 
      00033E 03                     866         .byte      3
      00033F 3E 49 4E               867         .ascii    ">IN"
      000342                        868 INN:
      000342 90 AE 00 0A      [ 2]  869 	LDW Y,#UINN 
      000346 1D 00 02         [ 2]  870 	SUBW X,#2
      000349 FF               [ 2]  871         LDW (X),Y
      00034A 81               [ 4]  872         RET
                                    873 
                                    874 ;       #TIB    ( -- a )
                                    875 ;       Count in terminal input buffer.
      00034B 03 3E                  876         .word      LINK
                           00034D   877 LINK = . 
      00034D 04                     878         .byte      4
      00034E 23 54 49 42            879         .ascii     "#TIB"
      000352                        880 NTIB:
      000352 90 AE 00 0C      [ 2]  881 	LDW Y,#UCTIB 
      000356 1D 00 02         [ 2]  882 	SUBW X,#2
      000359 FF               [ 2]  883         LDW (X),Y
      00035A 81               [ 4]  884         RET
                                    885 
                           000001   886 .if PICATOUT_MOD
                                    887 ;       TBUF ( -- a )
                                    888 ;       address of 128 bytes transaction buffer 
      00035B 03 4D                  889         .word LINK 
                           00035D   890         LINK=.
      00035D 04                     891         .byte 4 
      00035E 54 42 55 46            892         .ascii "TBUF"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000362                        893 tbuff:
      000362 90 AE 16 80      [ 2]  894         ldw y,#ROWBUFF
      000366 1D 00 02         [ 2]  895         subw x,#CELLL
      000369 FF               [ 2]  896         ldw (x),y 
      00036A 81               [ 4]  897         ret 
                                    898 
                                    899 
                                    900 .endif ;PICATOUT_MOD
                                    901 
                                    902 ;       "EVAL   ( -- a )
                                    903 ;       Execution vector of EVAL.
      00036B 03 5D                  904         .word      LINK
                           00036D   905 LINK = . 
      00036D 05                     906         .byte      5
      00036E 27 45 56 41 4C         907         .ascii     "'EVAL"
      000373                        908 TEVAL:
      000373 90 AE 00 10      [ 2]  909 	LDW Y,#UINTER 
      000377 1D 00 02         [ 2]  910 	SUBW X,#2
      00037A FF               [ 2]  911         LDW (X),Y
      00037B 81               [ 4]  912         RET
                                    913 
                                    914 ;       HLD     ( -- a )
                                    915 ;       Hold a pointer of output string.
      00037C 03 6D                  916         .word      LINK
                           00037E   917 LINK = . 
      00037E 03                     918         .byte      3
      00037F 48 4C 44               919         .ascii     "HLD"
      000382                        920 HLD:
      000382 90 AE 00 12      [ 2]  921 	LDW Y,#UHLD 
      000386 1D 00 02         [ 2]  922 	SUBW X,#2
      000389 FF               [ 2]  923         LDW (X),Y
      00038A 81               [ 4]  924         RET
                                    925 
                                    926 ;       CONTEXT ( -- a )
                                    927 ;       Start vocabulary search.
      00038B 03 7E                  928         .word      LINK
                           00038D   929 LINK = . 
      00038D 07                     930         .byte      7
      00038E 43 4F 4E 54 45 58 54   931         .ascii     "CONTEXT"
      000395                        932 CNTXT:
      000395 90 AE 00 14      [ 2]  933 	LDW Y,#UCNTXT
      000399 1D 00 02         [ 2]  934 	SUBW X,#2
      00039C FF               [ 2]  935         LDW (X),Y
      00039D 81               [ 4]  936         RET
                                    937 
                                    938 ;       CP      ( -- a )
                           000001   939 .if PICATOUT_MOD 
                                    940 ;       Point to top of variables
                           000000   941 .else 
                                    942 ;       Point to top of dictionary.
                                    943 .endif ; PICATOUT_MOD
      00039E 03 8D                  944         .word      LINK
                           0003A0   945 LINK = . 
      0003A0 02                     946         .byte      2
      0003A1 43 50                  947         .ascii     "CP"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      0003A3                        948 CPP:
      0003A3 90 AE 00 16      [ 2]  949 	LDW Y,#UCP 
      0003A7 1D 00 02         [ 2]  950 	SUBW X,#2
      0003AA FF               [ 2]  951         LDW (X),Y
      0003AB 81               [ 4]  952         RET
                                    953 
                           000001   954 .if PICATOUT_MOD
                                    955 ;       FCP    ( -- a )
                                    956 ;       Pointer to top of FLASH 
      0003AC 03 A0                  957         .word LINK 
                           0003AE   958         LINK=.
      0003AE 03                     959         .byte 3 
      0003AF 46 43 50               960         .ascii "FCP"
      0003B2                        961 FCP: 
      0003B2 90 AE 00 18      [ 2]  962         ldw y,#UFCP 
      0003B6 1D 00 02         [ 2]  963         subw x,#CELLL 
      0003B9 FF               [ 2]  964         ldw (x),y 
      0003BA 81               [ 4]  965         ret                
                                    966 .endif ;PICATOUT_MOD
                                    967 
                                    968 ;       LAST    ( -- a )
                                    969 ;       Point to last name in dictionary.
      0003BB 03 AE                  970         .word      LINK
                           0003BD   971 LINK = . 
      0003BD 04                     972         .byte      4
      0003BE 4C 41 53 54            973         .ascii     "LAST"
      0003C2                        974 LAST:
      0003C2 90 AE 00 1A      [ 2]  975 	LDW Y,#ULAST 
      0003C6 1D 00 02         [ 2]  976 	SUBW X,#2
      0003C9 FF               [ 2]  977         LDW (X),Y
      0003CA 81               [ 4]  978         RET
                                    979 
                                    980 ;; Common functions
                                    981 
                                    982 ;       ?DUP    ( w -- w w | 0 )
                                    983 ;       Dup tos if its is not zero.
      0003CB 03 BD                  984         .word      LINK
                           0003CD   985 LINK = . 
      0003CD 04                     986         .byte      4
      0003CE 3F 44 55 50            987         .ascii     "?DUP"
      0003D2                        988 QDUP:
      0003D2 90 93            [ 1]  989         LDW Y,X
      0003D4 90 FE            [ 2]  990 	LDW Y,(Y)
      0003D6 27 04            [ 1]  991         JREQ     QDUP1
      0003D8 1D 00 02         [ 2]  992 	SUBW X,#2
      0003DB FF               [ 2]  993         LDW (X),Y
      0003DC 81               [ 4]  994 QDUP1:  RET
                                    995 
                                    996 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                    997 ;       Rot 3rd item to top.
      0003DD 03 CD                  998         .word      LINK
                           0003DF   999 LINK = . 
      0003DF 03                    1000         .byte      3
      0003E0 52 4F 54              1001         .ascii     "ROT"
      0003E3                       1002 ROT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           000001  1003 .if PICATOUT_MOD
      0003E3 90 93            [ 1] 1004         ldw y,x 
      0003E5 90 FE            [ 2] 1005         ldw y,(y)
      0003E7 90 89            [ 2] 1006         pushw y 
      0003E9 90 93            [ 1] 1007         ldw y,x 
      0003EB 90 EE 04         [ 2] 1008         ldw y,(4,y)
      0003EE FF               [ 2] 1009         ldw (x),y 
      0003EF 90 93            [ 1] 1010         ldw y,x 
      0003F1 90 EE 02         [ 2] 1011         ldw y,(2,y)
      0003F4 EF 04            [ 2] 1012         ldw (4,x),y 
      0003F6 90 85            [ 2] 1013         popw y 
      0003F8 EF 02            [ 2] 1014         ldw (2,x),y
      0003FA 81               [ 4] 1015         ret 
                           000000  1016 .else 
                                   1017         LDW Y,X
                                   1018 	LDW Y,(4,Y)
                                   1019 	LDW YTEMP,Y
                                   1020         LDW Y,X
                                   1021         LDW Y,(2,Y)
                                   1022         LDW XTEMP,Y
                                   1023         LDW Y,X
                                   1024         LDW Y,(Y)
                                   1025         LDW (2,X),Y
                                   1026         LDW Y,XTEMP
                                   1027         LDW (4,X),Y
                                   1028         LDW Y,YTEMP
                                   1029         LDW (X),Y
                                   1030         RET
                                   1031 .endif 
                                   1032 
                                   1033 ;       2DROP   ( w w -- )
                                   1034 ;       Discard two items on stack.
      0003FB 03 DF                 1035         .word      LINK
                           0003FD  1036 LINK = . 
      0003FD 05                    1037         .byte      5
      0003FE 32 44 52 4F 50        1038         .ascii     "2DROP"
      000403                       1039 DDROP:
      000403 1C 00 04         [ 2] 1040         ADDW X,#4
      000406 81               [ 4] 1041         RET
                                   1042 
                                   1043 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1044 ;       Duplicate top two items.
      000407 03 FD                 1045         .word      LINK
                           000409  1046 LINK = . 
      000409 04                    1047         .byte      4
      00040A 32 44 55 50           1048         .ascii     "2DUP"
      00040E                       1049 DDUP:
      00040E 1D 00 04         [ 2] 1050         SUBW X,#4
      000411 90 93            [ 1] 1051         LDW Y,X
      000413 90 EE 06         [ 2] 1052         LDW Y,(6,Y)
      000416 EF 02            [ 2] 1053         LDW (2,X),Y
      000418 90 93            [ 1] 1054         LDW Y,X
      00041A 90 EE 04         [ 2] 1055         LDW Y,(4,Y)
      00041D FF               [ 2] 1056         LDW (X),Y
      00041E 81               [ 4] 1057         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



                                   1058 
                                   1059 ;       +       ( w w -- sum )
                                   1060 ;       Add top two items.
      00041F 04 09                 1061         .word      LINK
                           000421  1062 LINK = . 
      000421 01                    1063         .byte      1
      000422 2B                    1064         .ascii     "+"
      000423                       1065 PLUS:
      000423 90 93            [ 1] 1066         LDW Y,X
      000425 90 FE            [ 2] 1067         LDW Y,(Y)
      000427 90 BF 1E         [ 2] 1068         LDW YTEMP,Y
      00042A 1C 00 02         [ 2] 1069         ADDW X,#2
      00042D 90 93            [ 1] 1070         LDW Y,X
      00042F 90 FE            [ 2] 1071         LDW Y,(Y)
      000431 72 B9 00 1E      [ 2] 1072         ADDW Y,YTEMP
      000435 FF               [ 2] 1073         LDW (X),Y
      000436 81               [ 4] 1074         RET
                                   1075 
                                   1076 ;       NOT     ( w -- w )
                                   1077 ;       One's complement of tos.
      000437 04 21                 1078         .word      LINK
                           000439  1079 LINK = . 
      000439 03                    1080         .byte      3
      00043A 4E 4F 54              1081         .ascii     "NOT"
      00043D                       1082 INVER:
      00043D 90 93            [ 1] 1083         LDW Y,X
      00043F 90 FE            [ 2] 1084         LDW Y,(Y)
      000441 90 53            [ 2] 1085         CPLW Y
      000443 FF               [ 2] 1086         LDW (X),Y
      000444 81               [ 4] 1087         RET
                                   1088 
                                   1089 ;       NEGATE  ( n -- -n )
                                   1090 ;       Two's complement of tos.
      000445 04 39                 1091         .word      LINK
                           000447  1092 LINK = . 
      000447 06                    1093         .byte      6
      000448 4E 45 47 41 54 45     1094         .ascii     "NEGATE"
      00044E                       1095 NEGAT:
      00044E 90 93            [ 1] 1096         LDW Y,X
      000450 90 FE            [ 2] 1097         LDW Y,(Y)
      000452 90 50            [ 2] 1098         NEGW Y
      000454 FF               [ 2] 1099         LDW (X),Y
      000455 81               [ 4] 1100         RET
                                   1101 
                                   1102 ;       DNEGATE ( d -- -d )
                                   1103 ;       Two's complement of top double.
      000456 04 47                 1104         .word      LINK
                           000458  1105 LINK = . 
      000458 07                    1106         .byte      7
      000459 44 4E 45 47 41 54 45  1107         .ascii     "DNEGATE"
      000460                       1108 DNEGA:
      000460 90 93            [ 1] 1109         LDW Y,X
      000462 90 FE            [ 2] 1110 	LDW Y,(Y)
      000464 90 53            [ 2] 1111         CPLW Y     
      000466 90 BF 1E         [ 2] 1112 	LDW YTEMP,Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000469 90 93            [ 1] 1113         LDW Y,X
      00046B 90 EE 02         [ 2] 1114         LDW Y,(2,Y)
      00046E 90 53            [ 2] 1115         CPLW Y
      000470 90 5C            [ 2] 1116         INCW Y
      000472 EF 02            [ 2] 1117         LDW (2,X),Y
      000474 90 BE 1E         [ 2] 1118         LDW Y,YTEMP
      000477 24 02            [ 1] 1119         JRNC DN1 
      000479 90 5C            [ 2] 1120         INCW Y
      00047B FF               [ 2] 1121 DN1:    LDW (X),Y
      00047C 81               [ 4] 1122         RET
                                   1123 
                                   1124 ;       -       ( n1 n2 -- n1-n2 )
                                   1125 ;       Subtraction.
      00047D 04 58                 1126         .word      LINK
                           00047F  1127 LINK = . 
      00047F 01                    1128         .byte      1
      000480 2D                    1129         .ascii     "-"
      000481                       1130 SUBB:
      000481 90 93            [ 1] 1131         LDW Y,X
      000483 90 FE            [ 2] 1132         LDW Y,(Y)
      000485 90 BF 1E         [ 2] 1133         LDW YTEMP,Y
      000488 1C 00 02         [ 2] 1134         ADDW X,#2
      00048B 90 93            [ 1] 1135         LDW Y,X
      00048D 90 FE            [ 2] 1136         LDW Y,(Y)
      00048F 72 B2 00 1E      [ 2] 1137         SUBW Y,YTEMP
      000493 FF               [ 2] 1138         LDW (X),Y
      000494 81               [ 4] 1139         RET
                                   1140 
                                   1141 ;       ABS     ( n -- n )
                                   1142 ;       Return  absolute value of n.
      000495 04 7F                 1143         .word      LINK
                           000497  1144 LINK = . 
      000497 03                    1145         .byte      3
      000498 41 42 53              1146         .ascii     "ABS"
      00049B                       1147 ABSS:
      00049B 90 93            [ 1] 1148         LDW Y,X
      00049D 90 FE            [ 2] 1149 	LDW Y,(Y)
      00049F 2A 03            [ 1] 1150         JRPL     AB1     ;negate:
      0004A1 90 50            [ 2] 1151         NEGW     Y     ;else negate hi byte
      0004A3 FF               [ 2] 1152         LDW (X),Y
      0004A4 81               [ 4] 1153 AB1:    RET
                                   1154 
                                   1155 ;       =       ( w w -- t )
                                   1156 ;       Return true if top two are =al.
      0004A5 04 97                 1157         .word      LINK
                           0004A7  1158 LINK = . 
      0004A7 01                    1159         .byte      1
      0004A8 3D                    1160         .ascii     "="
      0004A9                       1161 EQUAL:
      0004A9 A6 FF            [ 1] 1162         LD A,#0xFF  ;true
      0004AB 90 93            [ 1] 1163         LDW Y,X    ;D = n2
      0004AD 90 FE            [ 2] 1164         LDW Y,(Y)
      0004AF 90 BF 1E         [ 2] 1165         LDW YTEMP,Y
      0004B2 1C 00 02         [ 2] 1166         ADDW X,#2
      0004B5 90 93            [ 1] 1167         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0004B7 90 FE            [ 2] 1168         LDW Y,(Y)
      0004B9 90 B3 1E         [ 2] 1169         CPW Y,YTEMP     ;if n2 <> n1
      0004BC 27 01            [ 1] 1170         JREQ     EQ1
      0004BE 4F               [ 1] 1171         CLR A
      0004BF F7               [ 1] 1172 EQ1:    LD (X),A
      0004C0 E7 01            [ 1] 1173         LD (1,X),A
      0004C2 81               [ 4] 1174 	RET     
                                   1175 
                                   1176 ;       U<      ( u u -- t )
                                   1177 ;       Unsigned compare of top two items.
      0004C3 04 A7                 1178         .word      LINK
                           0004C5  1179 LINK = . 
      0004C5 02                    1180         .byte      2
      0004C6 55 3C                 1181         .ascii     "U<"
      0004C8                       1182 ULESS:
      0004C8 A6 FF            [ 1] 1183         LD A,#0xFF  ;true
      0004CA 90 93            [ 1] 1184         LDW Y,X    ;D = n2
      0004CC 90 FE            [ 2] 1185         LDW Y,(Y)
      0004CE 90 BF 1E         [ 2] 1186         LDW YTEMP,Y
      0004D1 1C 00 02         [ 2] 1187         ADDW X,#2
      0004D4 90 93            [ 1] 1188         LDW Y,X
      0004D6 90 FE            [ 2] 1189         LDW Y,(Y)
      0004D8 90 B3 1E         [ 2] 1190         CPW Y,YTEMP     ;if n2 <> n1
      0004DB 25 01            [ 1] 1191         JRULT     ULES1
      0004DD 4F               [ 1] 1192         CLR A
      0004DE F7               [ 1] 1193 ULES1:  LD (X),A
      0004DF E7 01            [ 1] 1194         LD (1,X),A
      0004E1 81               [ 4] 1195 	RET     
                                   1196 
                                   1197 ;       <       ( n1 n2 -- t )
                                   1198 ;       Signed compare of top two items.
      0004E2 04 C5                 1199         .word      LINK
                           0004E4  1200 LINK = . 
      0004E4 01                    1201         .byte      1
      0004E5 3C                    1202         .ascii     "<"
      0004E6                       1203 LESS:
      0004E6 A6 FF            [ 1] 1204         LD A,#0xFF  ;true
      0004E8 90 93            [ 1] 1205         LDW Y,X    ;D = n2
      0004EA 90 FE            [ 2] 1206         LDW Y,(Y)
      0004EC 90 BF 1E         [ 2] 1207         LDW YTEMP,Y
      0004EF 1C 00 02         [ 2] 1208         ADDW X,#2
      0004F2 90 93            [ 1] 1209         LDW Y,X
      0004F4 90 FE            [ 2] 1210         LDW Y,(Y)
      0004F6 90 B3 1E         [ 2] 1211         CPW Y,YTEMP     ;if n2 <> n1
      0004F9 2F 01            [ 1] 1212         JRSLT     LT1
      0004FB 4F               [ 1] 1213         CLR A
      0004FC F7               [ 1] 1214 LT1:    LD (X),A
      0004FD E7 01            [ 1] 1215         LD (1,X),A
      0004FF 81               [ 4] 1216 	RET     
                                   1217 
                                   1218 ;       MAX     ( n n -- n )
                                   1219 ;       Return greater of two top items.
      000500 04 E4                 1220         .word      LINK
                           000502  1221 LINK = . 
      000502 03                    1222         .byte      3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      000503 4D 41 58              1223         .ascii     "MAX"
      000506                       1224 MAX:
      000506 90 93            [ 1] 1225         LDW Y,X    ;D = n2
      000508 90 EE 02         [ 2] 1226         LDW Y,(2,Y)
      00050B 90 BF 1E         [ 2] 1227         LDW YTEMP,Y
      00050E 90 93            [ 1] 1228         LDW Y,X
      000510 90 FE            [ 2] 1229         LDW Y,(Y)
      000512 90 B3 1E         [ 2] 1230         CPW Y,YTEMP     ;if n2 <> n1
      000515 2F 02            [ 1] 1231         JRSLT     MAX1
      000517 EF 02            [ 2] 1232         LDW (2,X),Y
      000519 1C 00 02         [ 2] 1233 MAX1:   ADDW X,#2
      00051C 81               [ 4] 1234 	RET     
                                   1235 
                                   1236 ;       MIN     ( n n -- n )
                                   1237 ;       Return smaller of top two items.
      00051D 05 02                 1238         .word      LINK
                           00051F  1239 LINK = . 
      00051F 03                    1240         .byte      3
      000520 4D 49 4E              1241         .ascii     "MIN"
      000523                       1242 MIN:
      000523 90 93            [ 1] 1243         LDW Y,X    ;D = n2
      000525 90 EE 02         [ 2] 1244         LDW Y,(2,Y)
      000528 90 BF 1E         [ 2] 1245         LDW YTEMP,Y
      00052B 90 93            [ 1] 1246         LDW Y,X
      00052D 90 FE            [ 2] 1247         LDW Y,(Y)
      00052F 90 B3 1E         [ 2] 1248         CPW Y,YTEMP     ;if n2 <> n1
      000532 2C 02            [ 1] 1249         JRSGT     MIN1
      000534 EF 02            [ 2] 1250         LDW (2,X),Y
      000536 1C 00 02         [ 2] 1251 MIN1:	ADDW X,#2
      000539 81               [ 4] 1252 	RET     
                                   1253 
                                   1254 ;       WITHIN  ( u ul uh -- t )
                                   1255 ;       Return true if u is within
                                   1256 ;       range of ul and uh. ( ul <= u < uh )
      00053A 05 1F                 1257         .word      LINK
                           00053C  1258 LINK = . 
      00053C 06                    1259         .byte      6
      00053D 57 49 54 48 49 4E     1260         .ascii     "WITHIN"
      000543                       1261 WITHI:
      000543 CD 02 91         [ 4] 1262         CALL     OVER
      000546 CD 04 81         [ 4] 1263         CALL     SUBB
      000549 CD 02 30         [ 4] 1264         CALL     TOR
      00054C CD 04 81         [ 4] 1265         CALL     SUBB
      00054F CD 02 11         [ 4] 1266         CALL     RFROM
      000552 CC 04 C8         [ 2] 1267         JP     ULESS
                                   1268 
                                   1269 ;; Divide
                                   1270 
                                   1271 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1272 ;       Unsigned divide of a double by a
                                   1273 ;       single. Return mod and quotient.
      000555 05 3C                 1274         .word      LINK
                           000557  1275 LINK = . 
      000557 06                    1276         .byte      6
      000558 55 4D 2F 4D 4F 44     1277         .ascii     "UM/MOD"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00055E                       1278 UMMOD:
      00055E BF 1C            [ 2] 1279 	LDW XTEMP,X	; save stack pointer
      000560 FE               [ 2] 1280 	LDW X,(X)	; un
      000561 BF 1E            [ 2] 1281 	LDW YTEMP,X     ; save un
      000563 90 BE 1C         [ 2] 1282 	LDW Y,XTEMP	; stack pointer
      000566 90 EE 04         [ 2] 1283 	LDW Y,(4,Y)     ; Y=udl
      000569 BE 1C            [ 2] 1284 	LDW X,XTEMP
      00056B EE 02            [ 2] 1285 	LDW X,(2,X)	; X=udh
      00056D B3 1E            [ 2] 1286 	CPW X,YTEMP
      00056F 23 0F            [ 2] 1287 	JRULE MMSM1
      000571 BE 1C            [ 2] 1288 	LDW X,XTEMP
      000573 1C 00 02         [ 2] 1289 	ADDW X,#2	; pop off 1 level
      000576 90 AE FF FF      [ 2] 1290 	LDW Y,#0xFFFF
      00057A FF               [ 2] 1291 	LDW (X),Y
      00057B 90 5F            [ 1] 1292 	CLRW Y
      00057D EF 02            [ 2] 1293 	LDW (2,X),Y
      00057F 81               [ 4] 1294 	RET
      000580                       1295 MMSM1:
                           000001  1296 .if  PICATOUT_MOD 
                                   1297 ; take advantage of divw x,y when udh==0
      000580 5D               [ 2] 1298         tnzw x  ; is udh==0?
      000581 26 11            [ 1] 1299         jrne MMSM2 
      000583 93               [ 1] 1300         ldw x,y    ;udl 
      000584 90 BE 1E         [ 2] 1301         ldw y,YTEMP ; divisor 
      000587 65               [ 2] 1302         divw x,y 
      000588 89               [ 2] 1303         pushw x     ; quotient 
      000589 BE 1C            [ 2] 1304         ldw x,XTEMP 
      00058B 1C 00 02         [ 2] 1305         addw x,#CELLL 
      00058E EF 02            [ 2] 1306         ldw (2,x),y  ; ur
      000590 90 85            [ 2] 1307         popw y 
      000592 FF               [ 2] 1308         ldw (x),y ; uq 
      000593 81               [ 4] 1309         ret 
      000594                       1310 MMSM2:        
                                   1311 .endif 
      000594 A6 11            [ 1] 1312 	LD A,#17	; loop count
      000596                       1313 MMSM3:
      000596 B3 1E            [ 2] 1314 	CPW X,YTEMP	; compare udh to un
      000598 25 04            [ 1] 1315 	JRULT MMSM4	; can't subtract
      00059A 72 B0 00 1E      [ 2] 1316 	SUBW X,YTEMP	; can subtract
      00059E                       1317 MMSM4:
      00059E 8C               [ 1] 1318 	CCF	; quotient bit
      00059F 90 59            [ 2] 1319 	RLCW Y	; rotate into quotient
      0005A1 59               [ 2] 1320 	RLCW X	; rotate into remainder
      0005A2 4A               [ 1] 1321 	DEC A	; repeat
      0005A3 22 F1            [ 1] 1322 	JRUGT MMSM3
      0005A5 57               [ 2] 1323 	SRAW X
      0005A6 BF 1E            [ 2] 1324 	LDW YTEMP,X	; done, save remainder
      0005A8 BE 1C            [ 2] 1325 	LDW X,XTEMP
      0005AA 1C 00 02         [ 2] 1326 	ADDW X,#2	; drop
      0005AD FF               [ 2] 1327 	LDW (X),Y
      0005AE 90 BE 1E         [ 2] 1328 	LDW Y,YTEMP	; save quotient
      0005B1 EF 02            [ 2] 1329 	LDW (2,X),Y
      0005B3 81               [ 4] 1330 	RET
                                   1331 	
                                   1332 ;       M/MOD   ( d n -- r q )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1333 ;       Signed floored divide of double by
                                   1334 ;       single. Return mod and quotient.
      0005B4 05 57                 1335         .word      LINK
                           0005B6  1336 LINK = . 
      0005B6 05                    1337         .byte      5
      0005B7 4D 2F 4D 4F 44        1338         .ascii     "M/MOD"
      0005BC                       1339 MSMOD:  
      0005BC CD 02 67         [ 4] 1340         CALL	DUPP
      0005BF CD 02 A0         [ 4] 1341         CALL	ZLESS
      0005C2 CD 02 67         [ 4] 1342         CALL	DUPP
      0005C5 CD 02 30         [ 4] 1343         CALL	TOR
      0005C8 CD 01 6B         [ 4] 1344         CALL	QBRAN
      0005CB 05 D9                 1345         .word	MMOD1
      0005CD CD 04 4E         [ 4] 1346         CALL	NEGAT
      0005D0 CD 02 30         [ 4] 1347         CALL	TOR
      0005D3 CD 04 60         [ 4] 1348         CALL	DNEGA
      0005D6 CD 02 11         [ 4] 1349         CALL	RFROM
      0005D9 CD 02 30         [ 4] 1350 MMOD1:	CALL	TOR
      0005DC CD 02 67         [ 4] 1351         CALL	DUPP
      0005DF CD 02 A0         [ 4] 1352         CALL	ZLESS
      0005E2 CD 01 6B         [ 4] 1353         CALL	QBRAN
      0005E5 05 ED                 1354         .word	MMOD2
      0005E7 CD 02 24         [ 4] 1355         CALL	RAT
      0005EA CD 04 23         [ 4] 1356         CALL	PLUS
      0005ED CD 02 11         [ 4] 1357 MMOD2:	CALL	RFROM
      0005F0 CD 05 5E         [ 4] 1358         CALL	UMMOD
      0005F3 CD 02 11         [ 4] 1359         CALL	RFROM
      0005F6 CD 01 6B         [ 4] 1360         CALL	QBRAN
      0005F9 06 04                 1361         .word	MMOD3
      0005FB CD 02 77         [ 4] 1362         CALL	SWAPP
      0005FE CD 04 4E         [ 4] 1363         CALL	NEGAT
      000601 CD 02 77         [ 4] 1364         CALL	SWAPP
      000604 81               [ 4] 1365 MMOD3:	RET
                                   1366 
                                   1367 ;       /MOD    ( n n -- r q )
                                   1368 ;       Signed divide. Return mod and quotient.
      000605 05 B6                 1369         .word      LINK
                           000607  1370 LINK = . 
      000607 04                    1371         .byte      4
      000608 2F 4D 4F 44           1372         .ascii     "/MOD"
      00060C                       1373 SLMOD:
      00060C CD 02 91         [ 4] 1374         CALL	OVER
      00060F CD 02 A0         [ 4] 1375         CALL	ZLESS
      000612 CD 02 77         [ 4] 1376         CALL	SWAPP
      000615 CC 05 BC         [ 2] 1377         JP	MSMOD
                                   1378 
                                   1379 ;       MOD     ( n n -- r )
                                   1380 ;       Signed divide. Return mod only.
      000618 06 07                 1381         .word      LINK
                           00061A  1382 LINK = . 
      00061A 03                    1383         .byte      3
      00061B 4D 4F 44              1384         .ascii     "MOD"
      00061E                       1385 MODD:
      00061E CD 06 0C         [ 4] 1386 	CALL	SLMOD
      000621 CC 02 5D         [ 2] 1387 	JP	DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



                                   1388 
                                   1389 ;       /       ( n n -- q )
                                   1390 ;       Signed divide. Return quotient only.
      000624 06 1A                 1391         .word      LINK
                           000626  1392 LINK = . 
      000626 01                    1393         .byte      1
      000627 2F                    1394         .ascii     "/"
      000628                       1395 SLASH:
      000628 CD 06 0C         [ 4] 1396         CALL	SLMOD
      00062B CD 02 77         [ 4] 1397         CALL	SWAPP
      00062E CC 02 5D         [ 2] 1398         JP	DROP
                                   1399 
                                   1400 ;; Multiply
                                   1401 
                                   1402 ;       UM*     ( u u -- ud )
                                   1403 ;       Unsigned multiply. Return double product.
      000631 06 26                 1404         .word      LINK
                           000633  1405 LINK = . 
      000633 03                    1406         .byte      3
      000634 55 4D 2A              1407         .ascii     "UM*"
      000637                       1408 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                           000001  1409 .if PICATOUT_MOD 
                                   1410 ; take advantage of SP addressing modes
                                   1411 ; these PRODx in RAM are not required
                                   1412 ; the product is kept on stack as local variable 
                                   1413         ;; bytes offset on data stack 
                           000002  1414         da=2 
                           000003  1415         db=3 
                           000000  1416         dc=0 
                           000001  1417         dd=1 
                                   1418         ;; product bytes offset on return stack 
                           000001  1419         UD1=1  ; ud bits 31..24
                           000002  1420         UD2=2  ; ud bits 23..16
                           000003  1421         UD3=3  ; ud bits 15..8 
                           000004  1422         UD4=4  ; ud bits 7..0 
                                   1423         ;; local variable for product set to zero   
      000637 90 5F            [ 1] 1424         clrw y 
      000639 90 89            [ 2] 1425         pushw y  ; bits 15..0
      00063B 90 89            [ 2] 1426         pushw y  ; bits 31..16 
      00063D E6 03            [ 1] 1427         ld a,(db,x) ; b 
      00063F 90 97            [ 1] 1428         ld yl,a 
      000641 E6 01            [ 1] 1429         ld a,(dd,x)   ; d
      000643 90 42            [ 4] 1430         mul y,a    ; b*d  
      000645 17 03            [ 2] 1431         ldw (UD3,sp),y ; lowest weight product 
      000647 E6 03            [ 1] 1432         ld a,(db,x)
      000649 90 97            [ 1] 1433         ld yl,a 
      00064B E6 00            [ 1] 1434         ld a,(dc,x)
      00064D 90 42            [ 4] 1435         mul y,a  ; b*c 
                                   1436         ;;; do the partial sum 
      00064F 72 F9 02         [ 2] 1437         addw y,(UD2,sp)
      000652 4F               [ 1] 1438         clr a 
      000653 49               [ 1] 1439         rlc a
      000654 6B 01            [ 1] 1440         ld (UD1,sp),a 
      000656 17 02            [ 2] 1441         ldw (UD2,sp),y 
      000658 E6 02            [ 1] 1442         ld a,(da,x)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      00065A 90 97            [ 1] 1443         ld yl,a 
      00065C E6 01            [ 1] 1444         ld a,(dd,x)
      00065E 90 42            [ 4] 1445         mul y,a   ; a*d 
                                   1446         ;; do partial sum 
      000660 72 F9 02         [ 2] 1447         addw y,(UD2,sp)
      000663 4F               [ 1] 1448         clr a 
      000664 19 01            [ 1] 1449         adc a,(UD1,sp)
      000666 6B 01            [ 1] 1450         ld (UD1,sp),a  
      000668 17 02            [ 2] 1451         ldw (UD2,sp),y 
      00066A E6 02            [ 1] 1452         ld a,(da,x)
      00066C 90 97            [ 1] 1453         ld yl,a 
      00066E E6 00            [ 1] 1454         ld a,(dc,x)
      000670 90 42            [ 4] 1455         mul y,a  ;  a*c highest weight product 
                                   1456         ;;; do partial sum 
      000672 72 F9 01         [ 2] 1457         addw y,(UD1,sp)
      000675 FF               [ 2] 1458         ldw (x),y  ; udh 
      000676 16 03            [ 2] 1459         ldw y,(UD3,sp)
      000678 EF 02            [ 2] 1460         ldw (2,x),y  ; udl  
      00067A 5B 04            [ 2] 1461         addw sp,#4 ; drop local variable 
      00067C 81               [ 4] 1462         ret  
                           000000  1463 .else
                                   1464 	LD A,(2,X)	; b
                                   1465 	LD YL,A
                                   1466 	LD A,(X)	; d
                                   1467 	MUL Y,A
                                   1468 	LDW PROD1,Y
                                   1469 	LD A,(3,X)	; a
                                   1470 	LD YL,A
                                   1471 	LD A,(X)	; d
                                   1472 	MUL Y,A
                                   1473 	LDW PROD2,Y
                                   1474 	LD A,(2,X)	; b
                                   1475 	LD YL,A
                                   1476 	LD A,(1,X)	; c
                                   1477 	MUL Y,A
                                   1478 	LDW PROD3,Y
                                   1479 	LD A,(3,X)	; a
                                   1480 	LD YL,A
                                   1481 	LD A,(1,X)	; c
                                   1482 	MUL Y,A	; least signifiant product
                                   1483 	CLR A
                                   1484 	RRWA Y
                                   1485 	LD (3,X),A	; store least significant byte
                                   1486 	ADDW Y,PROD3
                                   1487 	CLR A
                                   1488 	ADC A,#0	; save carry
                                   1489 	LD CARRY,A
                                   1490 	ADDW Y,PROD2
                                   1491 	LD A,CARRY
                                   1492 	ADC A,#0	; add 2nd carry
                                   1493 	LD CARRY,A
                                   1494 	CLR A
                                   1495 	RRWA Y
                                   1496 	LD (2,X),A	; 2nd product byte
                                   1497 	ADDW Y,PROD1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1498 	RRWA Y
                                   1499 	LD (1,X),A	; 3rd product byte
                                   1500 	RRWA Y  	; 4th product byte now in A
                                   1501 	ADC A,CARRY	; fill in carry bits
                                   1502 	LD (X),A
                                   1503 	RET
                                   1504 .endif 
                                   1505 
                                   1506 
                                   1507 ;       *       ( n n -- n )
                                   1508 ;       Signed multiply. Return single product.
      00067D 06 33                 1509         .word      LINK
                           00067F  1510 LINK = . 
      00067F 01                    1511         .byte      1
      000680 2A                    1512         .ascii     "*"
      000681                       1513 STAR:
      000681 CD 06 37         [ 4] 1514 	CALL	UMSTA
      000684 CC 02 5D         [ 2] 1515 	JP	DROP
                                   1516 
                                   1517 ;       M*      ( n n -- d )
                                   1518 ;       Signed multiply. Return double product.
      000687 06 7F                 1519         .word      LINK
                           000689  1520 LINK = . 
      000689 02                    1521         .byte      2
      00068A 4D 2A                 1522         .ascii     "M*"
      00068C                       1523 MSTAR:      
      00068C CD 04 0E         [ 4] 1524         CALL	DDUP
      00068F CD 02 DC         [ 4] 1525         CALL	XORR
      000692 CD 02 A0         [ 4] 1526         CALL	ZLESS
      000695 CD 02 30         [ 4] 1527         CALL	TOR
      000698 CD 04 9B         [ 4] 1528         CALL	ABSS
      00069B CD 02 77         [ 4] 1529         CALL	SWAPP
      00069E CD 04 9B         [ 4] 1530         CALL	ABSS
      0006A1 CD 06 37         [ 4] 1531         CALL	UMSTA
      0006A4 CD 02 11         [ 4] 1532         CALL	RFROM
      0006A7 CD 01 6B         [ 4] 1533         CALL	QBRAN
      0006AA 06 AF                 1534         .word	MSTA1
      0006AC CD 04 60         [ 4] 1535         CALL	DNEGA
      0006AF 81               [ 4] 1536 MSTA1:	RET
                                   1537 
                                   1538 ;       . /MOD   ( n1 n2 n3 -- r q )
                                   1539 ;       Multiply n1 and n2, then divide
                                   1540 ;       by n3. Return mod and quotient.
      0006B0 06 89                 1541         .word      LINK
                           0006B2  1542 LINK = . 
      0006B2 05                    1543         .byte      5
      0006B3 2A 2F 4D 4F 44        1544         .ascii     "*/MOD"
      0006B8                       1545 SSMOD:
      0006B8 CD 02 30         [ 4] 1546         CALL     TOR
      0006BB CD 06 8C         [ 4] 1547         CALL     MSTAR
      0006BE CD 02 11         [ 4] 1548         CALL     RFROM
      0006C1 CC 05 BC         [ 2] 1549         JP     MSMOD
                                   1550 
                                   1551 ;       */      ( n1 n2 n3 -- q )
                                   1552 ;       Multiply n1 by n2, then divide
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1553 ;       by n3. Return quotient only.
      0006C4 06 B2                 1554         .word      LINK
                           0006C6  1555 LINK = . 
      0006C6 02                    1556         .byte      2
      0006C7 2A 2F                 1557         .ascii     "*/"
      0006C9                       1558 STASL:
      0006C9 CD 06 B8         [ 4] 1559         CALL	SSMOD
      0006CC CD 02 77         [ 4] 1560         CALL	SWAPP
      0006CF CC 02 5D         [ 2] 1561         JP	DROP
                                   1562 
                                   1563 ;; Miscellaneous
                                   1564 
                                   1565 ;       CELL+   ( a -- a )
                                   1566 ;       Add cell size in byte to address.
      0006D2 06 C6                 1567         .word      LINK
                           0006D4  1568 LINK = . 
      0006D4 02                    1569         .byte       2
      0006D5 32 2B                 1570         .ascii     "2+"
      0006D7                       1571 CELLP:
      0006D7 90 93            [ 1] 1572         LDW Y,X
      0006D9 90 FE            [ 2] 1573 	LDW Y,(Y)
      0006DB 72 A9 00 02      [ 2] 1574         ADDW Y,#CELLL 
      0006DF FF               [ 2] 1575         LDW (X),Y
      0006E0 81               [ 4] 1576         RET
                                   1577 
                                   1578 ;       CELL-   ( a -- a )
                                   1579 ;       Subtract 2 from address.
      0006E1 06 D4                 1580         .word      LINK
                           0006E3  1581 LINK = . 
      0006E3 02                    1582         .byte       2
      0006E4 32 2D                 1583         .ascii     "2-"
      0006E6                       1584 CELLM:
      0006E6 90 93            [ 1] 1585         LDW Y,X
      0006E8 90 FE            [ 2] 1586 	LDW Y,(Y)
      0006EA 72 A2 00 02      [ 2] 1587         SUBW Y,#CELLL
      0006EE FF               [ 2] 1588         LDW (X),Y
      0006EF 81               [ 4] 1589         RET
                                   1590 
                                   1591 ;       CELLS   ( n -- n )
                                   1592 ;       Multiply tos by 2.
      0006F0 06 E3                 1593         .word      LINK
                           0006F2  1594 LINK = . 
      0006F2 02                    1595         .byte       2
      0006F3 32 2A                 1596         .ascii     "2*"
      0006F5                       1597 CELLS:
      0006F5 90 93            [ 1] 1598         LDW Y,X
      0006F7 90 FE            [ 2] 1599 	LDW Y,(Y)
      0006F9 90 58            [ 2] 1600         SLAW Y
      0006FB FF               [ 2] 1601         LDW (X),Y
      0006FC 81               [ 4] 1602         RET
                                   1603 
                                   1604 ;       1+      ( a -- a )
                                   1605 ;       Add cell size in byte to address.
      0006FD 06 F2                 1606         .word      LINK
                           0006FF  1607 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      0006FF 02                    1608         .byte      2
      000700 31 2B                 1609         .ascii     "1+"
      000702                       1610 ONEP:
      000702 90 93            [ 1] 1611         LDW Y,X
      000704 90 FE            [ 2] 1612 	LDW Y,(Y)
      000706 90 5C            [ 2] 1613         INCW Y
      000708 FF               [ 2] 1614         LDW (X),Y
      000709 81               [ 4] 1615         RET
                                   1616 
                                   1617 ;       1-      ( a -- a )
                                   1618 ;       Subtract 2 from address.
      00070A 06 FF                 1619         .word      LINK
                           00070C  1620 LINK = . 
      00070C 02                    1621         .byte      2
      00070D 31 2D                 1622         .ascii     "1-"
      00070F                       1623 ONEM:
      00070F 90 93            [ 1] 1624         LDW Y,X
      000711 90 FE            [ 2] 1625 	LDW Y,(Y)
      000713 90 5A            [ 2] 1626         DECW Y
      000715 FF               [ 2] 1627         LDW (X),Y
      000716 81               [ 4] 1628         RET
                                   1629 
                                   1630 ;       2/      ( n -- n )
                                   1631 ;       Multiply tos by 2.
      000717 07 0C                 1632         .word      LINK
                           000719  1633 LINK = . 
      000719 02                    1634         .byte      2
      00071A 32 2F                 1635         .ascii     "2/"
      00071C                       1636 TWOSL:
      00071C 90 93            [ 1] 1637         LDW Y,X
      00071E 90 FE            [ 2] 1638 	LDW Y,(Y)
      000720 90 57            [ 2] 1639         SRAW Y
      000722 FF               [ 2] 1640         LDW (X),Y
      000723 81               [ 4] 1641         RET
                                   1642 
                                   1643 ;       BL      ( -- 32 )
                                   1644 ;       Return 32,  blank character.
      000724 07 19                 1645         .word      LINK
                           000726  1646 LINK = . 
      000726 02                    1647         .byte      2
      000727 42 4C                 1648         .ascii     "BL"
      000729                       1649 BLANK:
      000729 1D 00 02         [ 2] 1650         SUBW X,#2
      00072C 90 AE 00 20      [ 2] 1651 	LDW Y,#32
      000730 FF               [ 2] 1652         LDW (X),Y
      000731 81               [ 4] 1653         RET
                                   1654 
                                   1655 ;         0     ( -- 0)
                                   1656 ;         Return 0.
      000732 07 26                 1657         .word      LINK
                           000734  1658 LINK = . 
      000734 01                    1659         .byte       1
      000735 30                    1660         .ascii     "0"
      000736                       1661 ZERO:
      000736 1D 00 02         [ 2] 1662         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000739 90 5F            [ 1] 1663 	CLRW Y
      00073B FF               [ 2] 1664         LDW (X),Y
      00073C 81               [ 4] 1665         RET
                                   1666 
                                   1667 ;         1     ( -- 1)
                                   1668 ;         Return 1.
      00073D 07 34                 1669         .word      LINK
                           00073F  1670 LINK = . 
      00073F 01                    1671         .byte       1
      000740 31                    1672         .ascii     "1"
      000741                       1673 ONE:
      000741 1D 00 02         [ 2] 1674         SUBW X,#2
      000744 90 AE 00 01      [ 2] 1675 	LDW Y,#1
      000748 FF               [ 2] 1676         LDW (X),Y
      000749 81               [ 4] 1677         RET
                                   1678 
                                   1679 ;         -1    ( -- -1)
                                   1680 ;         Return 32,  blank character.
      00074A 07 3F                 1681         .word      LINK
                           00074C  1682 LINK = . 
      00074C 02                    1683         .byte       2
      00074D 2D 31                 1684         .ascii     "-1"
      00074F                       1685 MONE:
      00074F 1D 00 02         [ 2] 1686         SUBW X,#2
      000752 90 AE FF FF      [ 2] 1687 	LDW Y,#0xFFFF
      000756 FF               [ 2] 1688         LDW (X),Y
      000757 81               [ 4] 1689         RET
                                   1690 
                                   1691 ;       >CHAR   ( c -- c )
                                   1692 ;       Filter non-printing characters.
      000758 07 4C                 1693         .word      LINK
                           00075A  1694 LINK = . 
      00075A 05                    1695         .byte      5
      00075B 3E 43 48 41 52        1696         .ascii     ">CHAR"
      000760                       1697 TCHAR:
                           000001  1698 .if CONVERT_TO_CODE
      000760 E6 01            [ 1] 1699         ld a,(1,x)
      000762 A1 20            [ 1] 1700         cp a,#32  
      000764 2B 05            [ 1] 1701         jrmi 1$ 
      000766 A1 7F            [ 1] 1702         cp a,#127 
      000768 2A 01            [ 1] 1703         jrpl 1$ 
      00076A 81               [ 4] 1704         ret 
      00076B A6 5F            [ 1] 1705 1$:     ld a,#'_ 
      00076D E7 01            [ 1] 1706         ld (1,x),a 
      00076F 81               [ 4] 1707         ret 
                           000000  1708 .else
                                   1709         CALL     DOLIT
                                   1710         .word       0x7F
                                   1711         CALL     ANDD
                                   1712         CALL     DUPP    ;mask msb
                                   1713         CALL     DOLIT
                                   1714         .word      127
                                   1715         CALL     BLANK
                                   1716         CALL     WITHI   ;check for printable
                                   1717         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



                                   1718         .word    TCHA1
                                   1719         CALL     DROP
                                   1720         CALL     DOLIT
                                   1721         .word     0x5F		; "_"     ;replace non-printables
                                   1722 .endif 
      000770 81               [ 4] 1723 TCHA1:  RET
                                   1724 
                                   1725 ;       DEPTH   ( -- n )
                                   1726 ;       Return  depth of  data stack.
      000771 07 5A                 1727         .word      LINK
                           000773  1728 LINK = . 
      000773 05                    1729         .byte      5
      000774 44 45 50 54 48        1730         .ascii     "DEPTH"
      000779                       1731 DEPTH: 
      000779 90 BE 24         [ 2] 1732         LDW Y,SP0    ;save data stack ptr
      00077C BF 1C            [ 2] 1733 	LDW XTEMP,X
      00077E 72 B2 00 1C      [ 2] 1734         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000782 90 57            [ 2] 1735         SRAW Y    ;Y = #stack items
                           000001  1736 .if PICATOUT_MOD
                                   1737 ; why ? 
                                   1738 ;      	DECW Y
                                   1739 .endif 
      000784 1D 00 02         [ 2] 1740 	SUBW X,#2
      000787 FF               [ 2] 1741         LDW (X),Y     ; if neg, underflow
      000788 81               [ 4] 1742         RET
                                   1743 
                                   1744 ;       PICK    ( ... +n -- ... w )
                                   1745 ;       Copy  nth stack item to tos.
      000789 07 73                 1746         .word      LINK
                           00078B  1747 LINK = . 
      00078B 04                    1748         .byte      4
      00078C 50 49 43 4B           1749         .ascii     "PICK"
      000790                       1750 PICK:
      000790 90 93            [ 1] 1751         LDW Y,X   ;D = n1
      000792 90 FE            [ 2] 1752         LDW Y,(Y)
      000794 90 58            [ 2] 1753         SLAW Y
      000796 BF 1C            [ 2] 1754         LDW XTEMP,X
      000798 72 B9 00 1C      [ 2] 1755         ADDW Y,XTEMP
      00079C 90 FE            [ 2] 1756         LDW Y,(Y)
      00079E FF               [ 2] 1757         LDW (X),Y
      00079F 81               [ 4] 1758         RET
                                   1759 
                                   1760 ;; Memory access
                                   1761 
                                   1762 ;       +!      ( n a -- )
                                   1763 ;       Add n to  contents at address a.
      0007A0 07 8B                 1764         .word      LINK
                           0007A2  1765 LINK = . 
      0007A2 02                    1766         .byte      2
      0007A3 2B 21                 1767         .ascii     "+!"
      0007A5                       1768 PSTOR:
                           000001  1769 .if CONVERT_TO_CODE
      0007A5 90 93            [ 1] 1770         ldw y,x 
      0007A7 90 FE            [ 2] 1771         ldw y,(y)
      0007A9 90 BF 1E         [ 2] 1772         ldw YTEMP,y  ; address
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



      0007AC 90 FE            [ 2] 1773         ldw y,(y)  
      0007AE 90 89            [ 2] 1774         pushw y  ; value at address 
      0007B0 90 93            [ 1] 1775         ldw y,x 
      0007B2 90 EE 02         [ 2] 1776         ldw y,(2,y) ; n 
      0007B5 72 F9 01         [ 2] 1777         addw y,(1,sp) ; n+value
      0007B8 91 CF 1E         [ 5] 1778         ldw [YTEMP],y ;  a!
      0007BB 90 85            [ 2] 1779         popw y    ;drop local var
      0007BD 1C 00 04         [ 2] 1780         addw x,#4 ; DDROP 
      0007C0 81               [ 4] 1781         ret 
                           000000  1782 .else
                                   1783         CALL	SWAPP
                                   1784         CALL	OVER
                                   1785         CALL	AT
                                   1786         CALL	PLUS
                                   1787         CALL	SWAPP
                                   1788         JP	STORE
                                   1789 .endif 
                                   1790 ;       2!      ( d a -- )
                                   1791 ;       Store  double integer to address a.
      0007C1 07 A2                 1792         .word      LINK
                           0007C3  1793 LINK = . 
      0007C3 02                    1794         .byte      2
      0007C4 32 21                 1795         .ascii     "2!"
      0007C6                       1796 DSTOR:
                           000001  1797 .if CONVERT_TO_CODE
      0007C6 90 93            [ 1] 1798         ldw y,x 
      0007C8 90 FE            [ 2] 1799         ldw y,(y)
      0007CA 90 BF 1E         [ 2] 1800         ldw YTEMP,y ; address 
      0007CD 1C 00 02         [ 2] 1801         addw x,#CELLL ; drop a 
      0007D0 90 93            [ 1] 1802         ldw y,x 
      0007D2 90 FE            [ 2] 1803         ldw y,(y) ; hi word 
      0007D4 89               [ 2] 1804         pushw x 
      0007D5 EE 02            [ 2] 1805         ldw x,(2,x) ; lo word 
      0007D7 91 CF 1E         [ 5] 1806         ldw [YTEMP],y
      0007DA 90 93            [ 1] 1807         ldw y,x 
      0007DC AE 00 02         [ 2] 1808         ldw x,#2 
      0007DF 92 DF 1E         [ 5] 1809         ldw ([YTEMP],x),y 
      0007E2 85               [ 2] 1810         popw x 
      0007E3 1C 00 04         [ 2] 1811         addw x,#4 ; DDROP 
      0007E6 81               [ 4] 1812         ret 
                           000000  1813 .else
                                   1814         CALL	SWAPP
                                   1815         CALL	OVER
                                   1816         CALL	STORE
                                   1817         CALL	CELLP
                                   1818         JP	STORE
                                   1819 .endif 
                                   1820 ;       2@      ( a -- d )
                                   1821 ;       Fetch double integer from address a.
      0007E7 07 C3                 1822         .word      LINK
                           0007E9  1823 LINK = . 
      0007E9 02                    1824         .byte      2
      0007EA 32 40                 1825         .ascii     "2@"
      0007EC                       1826 DAT:
                           000001  1827 .if CONVERT_TO_CODE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



      0007EC 90 93            [ 1] 1828         ldw y,x 
      0007EE 90 FE            [ 2] 1829         ldw y,(y) ;address 
      0007F0 90 BF 1E         [ 2] 1830         ldw YTEMP,y 
      0007F3 1D 00 02         [ 2] 1831         subw x,#CELLL ; space for udh 
      0007F6 91 CE 1E         [ 5] 1832         ldw y,[YTEMP] ; udh 
      0007F9 FF               [ 2] 1833         ldw (x),y 
      0007FA 90 AE 00 02      [ 2] 1834         ldw y,#2
      0007FE 91 DE 1E         [ 5] 1835         ldw y,([YTEMP],y) ; udl 
      000801 EF 02            [ 2] 1836         ldw (2,x),y
      000803 81               [ 4] 1837         ret 
                           000000  1838 .else 
                                   1839         CALL	DUPP
                                   1840         CALL	CELLP
                                   1841         CALL	AT
                                   1842         CALL	SWAPP
                                   1843         JP	AT
                                   1844 .endif 
                                   1845 
                                   1846 ;       COUNT   ( b -- b +n )
                                   1847 ;       Return count byte of a string
                                   1848 ;       and add 1 to byte address.
      000804 07 E9                 1849         .word      LINK
                           000806  1850 LINK = . 
      000806 05                    1851         .byte      5
      000807 43 4F 55 4E 54        1852         .ascii     "COUNT"
      00080C                       1853 COUNT:
                           000001  1854 .if CONVERT_TO_CODE
      00080C 90 93            [ 1] 1855         ldw y,x 
      00080E 90 FE            [ 2] 1856         ldw y,(y) ; address 
      000810 90 F6            [ 1] 1857         ld a,(y)  ; count 
      000812 90 5C            [ 2] 1858         incw y 
      000814 FF               [ 2] 1859         ldw (x),y 
      000815 1D 00 02         [ 2] 1860         subw x,#CELLL 
      000818 E7 01            [ 1] 1861         ld (1,x),a 
      00081A 7F               [ 1] 1862         clr (x)
      00081B 81               [ 4] 1863         ret 
                           000000  1864 .else 
                                   1865         CALL     DUPP
                                   1866         CALL     ONEP
                                   1867         CALL     SWAPP
                                   1868         JP     CAT
                                   1869 .endif 
                                   1870 
                                   1871 ;       HERE    ( -- a )
                                   1872 ;       Return  top of  code dictionary.
      00081C 08 06                 1873         .word      LINK
                           00081E  1874 LINK = . 
      00081E 04                    1875         .byte      4
      00081F 48 45 52 45           1876         .ascii     "HERE"
      000823                       1877 HERE:
                           000001  1878 .if CONVERT_TO_CODE
      000823 90 AE 00 16      [ 2] 1879       	ldw y,#UCP 
      000827 90 FE            [ 2] 1880         ldw y,(y)
      000829 1D 00 02         [ 2] 1881         subw x,#CELLL 
      00082C FF               [ 2] 1882         ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      00082D 81               [ 4] 1883         ret 
                           000000  1884 .else
                                   1885         CALL     CPP
                                   1886         JP     AT
                                   1887 .endif 
                                   1888 
                                   1889 ;       PAD     ( -- a )
                                   1890 ;       Return address of text buffer
                                   1891 ;       above  code dictionary.
      00082E 08 1E                 1892         .word      LINK
                           000830  1893 LINK = . 
      000830 03                    1894         .byte      3
      000831 50 41 44              1895         .ascii     "PAD"
      000834                       1896 PAD:
      000834 CD 08 23         [ 4] 1897         CALL     HERE
      000837 CD 01 38         [ 4] 1898         CALL     DOLIT
      00083A 00 50                 1899         .word      80
      00083C CC 04 23         [ 2] 1900         JP     PLUS
                                   1901 
                                   1902 ;       TIB     ( -- a )
                                   1903 ;       Return address of terminal input buffer.
      00083F 08 30                 1904         .word      LINK
                           000841  1905 LINK = . 
      000841 03                    1906         .byte      3
      000842 54 49 42              1907         .ascii     "TIB"
      000845                       1908 TIB:
      000845 CD 03 52         [ 4] 1909         CALL     NTIB
      000848 CD 06 D7         [ 4] 1910         CALL     CELLP
      00084B CC 01 C0         [ 2] 1911         JP     AT
                                   1912 
                                   1913 ;       @EXECUTE        ( a -- )
                                   1914 ;       Execute vector stored in address a.
      00084E 08 41                 1915         .word      LINK
                           000850  1916 LINK = . 
      000850 08                    1917         .byte      8
      000851 40 45 58 45 43 55 54  1918         .ascii     "@EXECUTE"
             45
      000859                       1919 ATEXE:
      000859 CD 01 C0         [ 4] 1920         CALL     AT
      00085C CD 03 D2         [ 4] 1921         CALL     QDUP    ;?address or zero
      00085F CD 01 6B         [ 4] 1922         CALL     QBRAN
      000862 08 67                 1923         .word      EXE1
      000864 CD 01 92         [ 4] 1924         CALL     EXECU   ;execute if non-zero
      000867 81               [ 4] 1925 EXE1:   RET     ;do nothing if zero
                                   1926 
                                   1927 ;       CMOVE   ( b1 b2 u -- )
                                   1928 ;       Copy u bytes from b1 to b2.
      000868 08 50                 1929         .word      LINK
                           00086A  1930 LINK = . 
      00086A 05                    1931         .byte      5
      00086B 43 4D 4F 56 45        1932         .ascii     "CMOVE"
      000870                       1933 CMOVE:
      000870 CD 02 30         [ 4] 1934         CALL	TOR
      000873 CD 01 82         [ 4] 1935         CALL	BRAN
      000876 08 90                 1936         .word	CMOV2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      000878 CD 02 30         [ 4] 1937 CMOV1:	CALL	TOR
      00087B CD 02 67         [ 4] 1938         CALL	DUPP
      00087E CD 01 DE         [ 4] 1939         CALL	CAT
      000881 CD 02 24         [ 4] 1940         CALL	RAT
      000884 CD 01 CD         [ 4] 1941         CALL	CSTOR
      000887 CD 07 02         [ 4] 1942         CALL	ONEP
      00088A CD 02 11         [ 4] 1943         CALL	RFROM
      00088D CD 07 02         [ 4] 1944         CALL	ONEP
      000890 CD 01 4C         [ 4] 1945 CMOV2:	CALL	DONXT
      000893 08 78                 1946         .word	CMOV1
      000895 CC 04 03         [ 2] 1947         JP	DDROP
                                   1948 
                                   1949 ;       FILL    ( b u c -- )
                                   1950 ;       Fill u bytes of character c
                                   1951 ;       to area beginning at b.
      000898 08 6A                 1952         .word       LINK
                           00089A  1953 LINK = . 
      00089A 04                    1954         .byte       4
      00089B 46 49 4C 4C           1955         .ascii     "FILL"
      00089F                       1956 FILL:
                           000001  1957 .if CONVERT_TO_CODE
      00089F 90 93            [ 1] 1958         ldw y,x 
      0008A1 90 E6 01         [ 1] 1959         ld a,(1,y) ; c 
      0008A4 1C 00 02         [ 2] 1960         addw x,#CELLL ; drop c 
      0008A7 90 93            [ 1] 1961         ldw y,x 
      0008A9 90 FE            [ 2] 1962         ldw y,(y) ; count
      0008AB 90 89            [ 2] 1963         pushw y 
      0008AD 1C 00 02         [ 2] 1964         addw x,#CELLL ; drop u 
      0008B0 90 93            [ 1] 1965         ldw y,x 
      0008B2 1C 00 02         [ 2] 1966         addw x,#CELLL ; drop b 
      0008B5 90 FE            [ 2] 1967         ldw y,(y) ; address
      0008B7 90 BF 1E         [ 2] 1968         ldw YTEMP,y
      0008BA 90 85            [ 2] 1969         popw y ; count 
      0008BC                       1970 FILL1:  
      0008BC 92 C7 1E         [ 4] 1971         ld [YTEMP],a 
      0008BF 3C 1F            [ 1] 1972         inc YTEMP+1
      0008C1 24 02            [ 1] 1973         jrnc FILL2 
      0008C3 3C 1E            [ 1] 1974         inc YTEMP
      0008C5                       1975 FILL2: 
      0008C5 90 5A            [ 2] 1976         decw y ; count 
      0008C7 26 F3            [ 1] 1977         jrne FILL1  
      0008C9 81               [ 4] 1978         ret 
                           000000  1979 .else 
                                   1980         CALL	SWAPP
                                   1981         CALL	TOR
                                   1982         CALL	SWAPP
                                   1983         CALL	BRAN
                                   1984         .word	FILL2
                                   1985 FILL1:	CALL	DDUP
                                   1986         CALL	CSTOR
                                   1987         CALL	ONEP
                                   1988 FILL2:	CALL	DONXT
                                   1989         .word	FILL1
                                   1990         JP	DDROP
                                   1991 .endif
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



                                   1992 
                                   1993 ;       ERASE   ( b u -- )
                                   1994 ;       Erase u bytes beginning at b.
      0008CA 08 9A                 1995         .word      LINK
                           0008CC  1996 LINK = . 
      0008CC 05                    1997         .byte      5
      0008CD 45 52 41 53 45        1998         .ascii     "ERASE"
      0008D2                       1999 ERASE:
                           000001  2000 .if CONVERT_TO_CODE
      0008D2 90 5F            [ 1] 2001         clrw y 
      0008D4 1D 00 02         [ 2] 2002         subw x,#CELLL 
      0008D7 FF               [ 2] 2003         ldw (x),y 
      0008D8 CC 08 9F         [ 2] 2004         jp FILL 
                           000000  2005 .else 
                                   2006         CALL     ZERO
                                   2007         JP     FILL
                                   2008 .endif 
                                   2009 ;       PACK0x   ( b u a -- a )
                                   2010 ;       Build a counted string with
                                   2011 ;       u characters from b. Null fill.
      0008DB 08 CC                 2012         .word      LINK
                           0008DD  2013 LINK = . 
      0008DD 05                    2014         .byte      5
      0008DE 50 41 43 4B 30 58     2015         .ascii     "PACK0X"
      0008E4                       2016 PACKS:
      0008E4 CD 02 67         [ 4] 2017         CALL     DUPP
      0008E7 CD 02 30         [ 4] 2018         CALL     TOR     ;strings only on cell boundary
      0008EA CD 04 0E         [ 4] 2019         CALL     DDUP
      0008ED CD 01 CD         [ 4] 2020         CALL     CSTOR
      0008F0 CD 07 02         [ 4] 2021         CALL     ONEP ;save count
      0008F3 CD 02 77         [ 4] 2022         CALL     SWAPP
      0008F6 CD 08 70         [ 4] 2023         CALL     CMOVE
      0008F9 CD 02 11         [ 4] 2024         CALL     RFROM
      0008FC 81               [ 4] 2025         RET
                                   2026 
                                   2027 ;; Numeric output, single precision
                                   2028 
                                   2029 ;       DIGIT   ( u -- c )
                                   2030 ;       Convert digit u to a character.
      0008FD 08 DD                 2031         .word      LINK
                           0008FF  2032 LINK = . 
      0008FF 05                    2033         .byte      5
      000900 44 49 47 49 54        2034         .ascii     "DIGIT"
      000905                       2035 DIGIT:
      000905 CD 01 38         [ 4] 2036         CALL	DOLIT
      000908 00 09                 2037         .word	9
      00090A CD 02 91         [ 4] 2038         CALL	OVER
      00090D CD 04 E6         [ 4] 2039         CALL	LESS
      000910 CD 01 38         [ 4] 2040         CALL	DOLIT
      000913 00 07                 2041         .word	7
      000915 CD 02 B3         [ 4] 2042         CALL	ANDD
      000918 CD 04 23         [ 4] 2043         CALL	PLUS
      00091B CD 01 38         [ 4] 2044         CALL	DOLIT
      00091E 00 30                 2045         .word	48	;'0'
      000920 CC 04 23         [ 2] 2046         JP	PLUS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



                                   2047 
                                   2048 ;       EXTRACT ( n base -- n c )
                                   2049 ;       Extract least significant digit from n.
      000923 08 FF                 2050         .word      LINK
                           000925  2051 LINK = . 
      000925 07                    2052         .byte      7
      000926 45 58 54 52 41 43 54  2053         .ascii     "EXTRACT"
      00092D                       2054 EXTRC:
      00092D CD 07 36         [ 4] 2055         CALL     ZERO
      000930 CD 02 77         [ 4] 2056         CALL     SWAPP
      000933 CD 05 5E         [ 4] 2057         CALL     UMMOD
      000936 CD 02 77         [ 4] 2058         CALL     SWAPP
      000939 CC 09 05         [ 2] 2059         JP     DIGIT
                                   2060 
                                   2061 ;       <#      ( -- )
                                   2062 ;       Initiate  numeric output process.
      00093C 09 25                 2063         .word      LINK
                           00093E  2064 LINK = . 
      00093E 02                    2065         .byte      2
      00093F 3C 23                 2066         .ascii     "<#"
      000941                       2067 BDIGS:
      000941 CD 08 34         [ 4] 2068         CALL     PAD
      000944 CD 03 82         [ 4] 2069         CALL     HLD
      000947 CC 01 A9         [ 2] 2070         JP     STORE
                                   2071 
                                   2072 ;       HOLD    ( c -- )
                                   2073 ;       Insert a character into output string.
      00094A 09 3E                 2074         .word      LINK
                           00094C  2075 LINK = . 
      00094C 04                    2076         .byte      4
      00094D 48 4F 4C 44           2077         .ascii     "HOLD"
      000951                       2078 HOLD:
      000951 CD 03 82         [ 4] 2079         CALL     HLD
      000954 CD 01 C0         [ 4] 2080         CALL     AT
      000957 CD 07 0F         [ 4] 2081         CALL     ONEM
      00095A CD 02 67         [ 4] 2082         CALL     DUPP
      00095D CD 03 82         [ 4] 2083         CALL     HLD
      000960 CD 01 A9         [ 4] 2084         CALL     STORE
      000963 CC 01 CD         [ 2] 2085         JP     CSTOR
                                   2086 
                                   2087 ;       #       ( u -- u )
                                   2088 ;       Extract one digit from u and
                                   2089 ;       append digit to output string.
      000966 09 4C                 2090         .word      LINK
                           000968  2091 LINK = . 
      000968 01                    2092         .byte      1
      000969 23                    2093         .ascii     "#"
      00096A                       2094 DIG:
      00096A CD 03 24         [ 4] 2095         CALL     BASE
      00096D CD 01 C0         [ 4] 2096         CALL     AT
      000970 CD 09 2D         [ 4] 2097         CALL     EXTRC
      000973 CC 09 51         [ 2] 2098         JP     HOLD
                                   2099 
                                   2100 ;       #S      ( u -- 0 )
                                   2101 ;       Convert u until all digits
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                                   2102 ;       are added to output string.
      000976 09 68                 2103         .word      LINK
                           000978  2104 LINK = . 
      000978 02                    2105         .byte      2
      000979 23 53                 2106         .ascii     "#S"
      00097B                       2107 DIGS:
      00097B CD 09 6A         [ 4] 2108 DIGS1:  CALL     DIG
      00097E CD 02 67         [ 4] 2109         CALL     DUPP
      000981 CD 01 6B         [ 4] 2110         CALL     QBRAN
      000984 09 88                 2111         .word      DIGS2
      000986 20 F3            [ 2] 2112         JRA     DIGS1
      000988 81               [ 4] 2113 DIGS2:  RET
                                   2114 
                                   2115 ;       SIGN    ( n -- )
                                   2116 ;       Add a minus sign to
                                   2117 ;       numeric output string.
      000989 09 78                 2118         .word      LINK
                           00098B  2119 LINK = . 
      00098B 04                    2120         .byte      4
      00098C 53 49 47 4E           2121         .ascii     "SIGN"
      000990                       2122 SIGN:
      000990 CD 02 A0         [ 4] 2123         CALL     ZLESS
      000993 CD 01 6B         [ 4] 2124         CALL     QBRAN
      000996 09 A0                 2125         .word      SIGN1
      000998 CD 01 38         [ 4] 2126         CALL     DOLIT
      00099B 00 2D                 2127         .word      45	;"-"
      00099D CC 09 51         [ 2] 2128         JP     HOLD
      0009A0 81               [ 4] 2129 SIGN1:  RET
                                   2130 
                                   2131 ;       #>      ( w -- b u )
                                   2132 ;       Prepare output string.
      0009A1 09 8B                 2133         .word      LINK
                           0009A3  2134 LINK = . 
      0009A3 02                    2135         .byte      2
      0009A4 23 3E                 2136         .ascii     "#>"
      0009A6                       2137 EDIGS:
      0009A6 CD 02 5D         [ 4] 2138         CALL     DROP
      0009A9 CD 03 82         [ 4] 2139         CALL     HLD
      0009AC CD 01 C0         [ 4] 2140         CALL     AT
      0009AF CD 08 34         [ 4] 2141         CALL     PAD
      0009B2 CD 02 91         [ 4] 2142         CALL     OVER
      0009B5 CC 04 81         [ 2] 2143         JP     SUBB
                                   2144 
                                   2145 ;       str     ( w -- b u )
                                   2146 ;       Convert a signed integer
                                   2147 ;       to a numeric string.
      0009B8 09 A3                 2148         .word      LINK
                           0009BA  2149 LINK = . 
      0009BA 03                    2150         .byte      3
      0009BB 53 54 52              2151         .ascii     "STR"
      0009BE                       2152 STR:
      0009BE CD 02 67         [ 4] 2153         CALL     DUPP
      0009C1 CD 02 30         [ 4] 2154         CALL     TOR
      0009C4 CD 04 9B         [ 4] 2155         CALL     ABSS
      0009C7 CD 09 41         [ 4] 2156         CALL     BDIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      0009CA CD 09 7B         [ 4] 2157         CALL     DIGS
      0009CD CD 02 11         [ 4] 2158         CALL     RFROM
      0009D0 CD 09 90         [ 4] 2159         CALL     SIGN
      0009D3 CC 09 A6         [ 2] 2160         JP     EDIGS
                                   2161 
                                   2162 ;       HEX     ( -- )
                                   2163 ;       Use radix 16 as base for
                                   2164 ;       numeric conversions.
      0009D6 09 BA                 2165         .word      LINK
                           0009D8  2166 LINK = . 
      0009D8 03                    2167         .byte      3
      0009D9 48 45 58              2168         .ascii     "HEX"
      0009DC                       2169 HEX:
      0009DC CD 01 38         [ 4] 2170         CALL     DOLIT
      0009DF 00 10                 2171         .word      16
      0009E1 CD 03 24         [ 4] 2172         CALL     BASE
      0009E4 CC 01 A9         [ 2] 2173         JP     STORE
                                   2174 
                                   2175 ;       DECIMAL ( -- )
                                   2176 ;       Use radix 10 as base
                                   2177 ;       for numeric conversions.
      0009E7 09 D8                 2178         .word      LINK
                           0009E9  2179 LINK = . 
      0009E9 07                    2180         .byte      7
      0009EA 44 45 43 49 4D 41 4C  2181         .ascii     "DECIMAL"
      0009F1                       2182 DECIM:
      0009F1 CD 01 38         [ 4] 2183         CALL     DOLIT
      0009F4 00 0A                 2184         .word      10
      0009F6 CD 03 24         [ 4] 2185         CALL     BASE
      0009F9 CC 01 A9         [ 2] 2186         JP     STORE
                                   2187 
                                   2188 ;; Numeric input, single precision
                                   2189 
                                   2190 ;       DIGIT?  ( c base -- u t )
                                   2191 ;       Convert a character to its numeric
                                   2192 ;       value. A flag indicates success.
      0009FC 09 E9                 2193         .word      LINK
                           0009FE  2194 LINK = . 
      0009FE 06                    2195         .byte       6
      0009FF 44 49 47 49 54 3F     2196         .ascii     "DIGIT?"
      000A05                       2197 DIGTQ:
      000A05 CD 02 30         [ 4] 2198         CALL     TOR
      000A08 CD 01 38         [ 4] 2199         CALL     DOLIT
      000A0B 00 30                 2200         .word     48	; "0"
      000A0D CD 04 81         [ 4] 2201         CALL     SUBB
      000A10 CD 01 38         [ 4] 2202         CALL     DOLIT
      000A13 00 09                 2203         .word      9
      000A15 CD 02 91         [ 4] 2204         CALL     OVER
      000A18 CD 04 E6         [ 4] 2205         CALL     LESS
      000A1B CD 01 6B         [ 4] 2206         CALL     QBRAN
      000A1E 0A 36                 2207         .word      DGTQ1
      000A20 CD 01 38         [ 4] 2208         CALL     DOLIT
      000A23 00 07                 2209         .word      7
      000A25 CD 04 81         [ 4] 2210         CALL     SUBB
      000A28 CD 02 67         [ 4] 2211         CALL     DUPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000A2B CD 01 38         [ 4] 2212         CALL     DOLIT
      000A2E 00 0A                 2213         .word      10
      000A30 CD 04 E6         [ 4] 2214         CALL     LESS
      000A33 CD 02 C7         [ 4] 2215         CALL     ORR
      000A36 CD 02 67         [ 4] 2216 DGTQ1:  CALL     DUPP
      000A39 CD 02 11         [ 4] 2217         CALL     RFROM
      000A3C CC 04 C8         [ 2] 2218         JP     ULESS
                                   2219 
                                   2220 ;       NUMBER? ( a -- n T | a F )
                                   2221 ;       Convert a number string to
                                   2222 ;       integer. Push a flag on tos.
      000A3F 09 FE                 2223         .word      LINK
                           000A41  2224 LINK = . 
      000A41 07                    2225         .byte      7
      000A42 4E 55 4D 42 45 52 3F  2226         .ascii     "NUMBER?"
      000A49                       2227 NUMBQ:
      000A49 CD 03 24         [ 4] 2228         CALL     BASE
      000A4C CD 01 C0         [ 4] 2229         CALL     AT
      000A4F CD 02 30         [ 4] 2230         CALL     TOR
      000A52 CD 07 36         [ 4] 2231         CALL     ZERO
      000A55 CD 02 91         [ 4] 2232         CALL     OVER
      000A58 CD 08 0C         [ 4] 2233         CALL     COUNT
      000A5B CD 02 91         [ 4] 2234         CALL     OVER
      000A5E CD 01 DE         [ 4] 2235         CALL     CAT
      000A61 CD 01 38         [ 4] 2236         CALL     DOLIT
      000A64 00 24                 2237         .word     36	; "0x"
      000A66 CD 04 A9         [ 4] 2238         CALL     EQUAL
      000A69 CD 01 6B         [ 4] 2239         CALL     QBRAN
      000A6C 0A 7D                 2240         .word      NUMQ1
      000A6E CD 09 DC         [ 4] 2241         CALL     HEX
      000A71 CD 02 77         [ 4] 2242         CALL     SWAPP
      000A74 CD 07 02         [ 4] 2243         CALL     ONEP
      000A77 CD 02 77         [ 4] 2244         CALL     SWAPP
      000A7A CD 07 0F         [ 4] 2245         CALL     ONEM
      000A7D CD 02 91         [ 4] 2246 NUMQ1:  CALL     OVER
      000A80 CD 01 DE         [ 4] 2247         CALL     CAT
      000A83 CD 01 38         [ 4] 2248         CALL     DOLIT
      000A86 00 2D                 2249         .word     45	; "-"
      000A88 CD 04 A9         [ 4] 2250         CALL     EQUAL
      000A8B CD 02 30         [ 4] 2251         CALL     TOR
      000A8E CD 02 77         [ 4] 2252         CALL     SWAPP
      000A91 CD 02 24         [ 4] 2253         CALL     RAT
      000A94 CD 04 81         [ 4] 2254         CALL     SUBB
      000A97 CD 02 77         [ 4] 2255         CALL     SWAPP
      000A9A CD 02 24         [ 4] 2256         CALL     RAT
      000A9D CD 04 23         [ 4] 2257         CALL     PLUS
      000AA0 CD 03 D2         [ 4] 2258         CALL     QDUP
      000AA3 CD 01 6B         [ 4] 2259         CALL     QBRAN
      000AA6 0B 07                 2260         .word      NUMQ6
      000AA8 CD 07 0F         [ 4] 2261         CALL     ONEM
      000AAB CD 02 30         [ 4] 2262         CALL     TOR
      000AAE CD 02 67         [ 4] 2263 NUMQ2:  CALL     DUPP
      000AB1 CD 02 30         [ 4] 2264         CALL     TOR
      000AB4 CD 01 DE         [ 4] 2265         CALL     CAT
      000AB7 CD 03 24         [ 4] 2266         CALL     BASE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000ABA CD 01 C0         [ 4] 2267         CALL     AT
      000ABD CD 0A 05         [ 4] 2268         CALL     DIGTQ
      000AC0 CD 01 6B         [ 4] 2269         CALL     QBRAN
      000AC3 0A F5                 2270         .word      NUMQ4
      000AC5 CD 02 77         [ 4] 2271         CALL     SWAPP
      000AC8 CD 03 24         [ 4] 2272         CALL     BASE
      000ACB CD 01 C0         [ 4] 2273         CALL     AT
      000ACE CD 06 81         [ 4] 2274         CALL     STAR
      000AD1 CD 04 23         [ 4] 2275         CALL     PLUS
      000AD4 CD 02 11         [ 4] 2276         CALL     RFROM
      000AD7 CD 07 02         [ 4] 2277         CALL     ONEP
      000ADA CD 01 4C         [ 4] 2278         CALL     DONXT
      000ADD 0A AE                 2279         .word      NUMQ2
      000ADF CD 02 24         [ 4] 2280         CALL     RAT
      000AE2 CD 02 77         [ 4] 2281         CALL     SWAPP
      000AE5 CD 02 5D         [ 4] 2282         CALL     DROP
      000AE8 CD 01 6B         [ 4] 2283         CALL     QBRAN
      000AEB 0A F0                 2284         .word      NUMQ3
      000AED CD 04 4E         [ 4] 2285         CALL     NEGAT
      000AF0 CD 02 77         [ 4] 2286 NUMQ3:  CALL     SWAPP
      000AF3 20 0F            [ 2] 2287         JRA     NUMQ5
      000AF5 CD 02 11         [ 4] 2288 NUMQ4:  CALL     RFROM
      000AF8 CD 02 11         [ 4] 2289         CALL     RFROM
      000AFB CD 04 03         [ 4] 2290         CALL     DDROP
      000AFE CD 04 03         [ 4] 2291         CALL     DDROP
      000B01 CD 07 36         [ 4] 2292         CALL     ZERO
      000B04 CD 02 67         [ 4] 2293 NUMQ5:  CALL     DUPP
      000B07 CD 02 11         [ 4] 2294 NUMQ6:  CALL     RFROM
      000B0A CD 04 03         [ 4] 2295         CALL     DDROP
      000B0D CD 02 11         [ 4] 2296         CALL     RFROM
      000B10 CD 03 24         [ 4] 2297         CALL     BASE
      000B13 CC 01 A9         [ 2] 2298         JP     STORE
                                   2299 
                                   2300 ;; Basic I/O
                                   2301 
                                   2302 ;       KEY     ( -- c )
                                   2303 ;       Wait for and return an
                                   2304 ;       input character.
      000B16 0A 41                 2305         .word      LINK
                           000B18  2306 LINK = . 
      000B18 03                    2307         .byte      3
      000B19 4B 45 59              2308         .ascii     "KEY"
      000B1C                       2309 KEY:
                           000001  2310 .if CONVERT_TO_CODE
      000B1C 72 0B 52 30 FB   [ 2] 2311         btjf UART1_SR,#UART_SR_RXNE,. 
      000B21 C6 52 31         [ 1] 2312         ld a,UART1_DR 
      000B24 1D 00 02         [ 2] 2313         subw x,#CELLL 
      000B27 E7 01            [ 1] 2314         ld (1,x),a 
      000B29 7F               [ 1] 2315         clr (x)
      000B2A 81               [ 4] 2316         ret 
                           000000  2317 .else 
                                   2318 KEY1:   CALL     QKEY
                                   2319         CALL     QBRAN
                                   2320         .word      KEY1
                                   2321         RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



                                   2322 .endif 
                                   2323 
                                   2324 ;       NUF?    ( -- t )
                                   2325 ;       Return false if no input,
                                   2326 ;       else pause and if CR return true.
      000B2B 0B 18                 2327         .word      LINK
                           000B2D  2328 LINK = . 
      000B2D 04                    2329         .byte      4
      000B2E 4E 55 46 3F           2330         .ascii     "NUF?"
      000B32                       2331 NUFQ:
      000B32 CD 01 04         [ 4] 2332         CALL     QKEY
      000B35 CD 02 67         [ 4] 2333         CALL     DUPP
      000B38 CD 01 6B         [ 4] 2334         CALL     QBRAN
      000B3B 0B 4B                 2335         .word    NUFQ1
      000B3D CD 04 03         [ 4] 2336         CALL     DDROP
      000B40 CD 0B 1C         [ 4] 2337         CALL     KEY
      000B43 CD 01 38         [ 4] 2338         CALL     DOLIT
      000B46 00 0D                 2339         .word      CRR
      000B48 CC 04 A9         [ 2] 2340         JP     EQUAL
      000B4B 81               [ 4] 2341 NUFQ1:  RET
                                   2342 
                                   2343 ;       SPACE   ( -- )
                                   2344 ;       Send  blank character to
                                   2345 ;       output device.
      000B4C 0B 2D                 2346         .word      LINK
                           000B4E  2347 LINK = . 
      000B4E 05                    2348         .byte      5
      000B4F 53 50 41 43 45        2349         .ascii     "SPACE"
      000B54                       2350 SPACE:
      000B54 CD 07 29         [ 4] 2351         CALL     BLANK
      000B57 CC 01 22         [ 2] 2352         JP     EMIT
                                   2353 
                                   2354 ;       SPACES  ( +n -- )
                                   2355 ;       Send n spaces to output device.
      000B5A 0B 4E                 2356         .word      LINK
                           000B5C  2357 LINK = . 
      000B5C 06                    2358         .byte      6
      000B5D 53 50 41 43 45 53     2359         .ascii     "SPACES"
      000B63                       2360 SPACS:
      000B63 CD 07 36         [ 4] 2361         CALL     ZERO
      000B66 CD 05 06         [ 4] 2362         CALL     MAX
      000B69 CD 02 30         [ 4] 2363         CALL     TOR
      000B6C 20 03            [ 2] 2364         JRA      CHAR2
      000B6E CD 0B 54         [ 4] 2365 CHAR1:  CALL     SPACE
      000B71 CD 01 4C         [ 4] 2366 CHAR2:  CALL     DONXT
      000B74 0B 6E                 2367         .word    CHAR1
      000B76 81               [ 4] 2368         RET
                                   2369 
                                   2370 ;       TYPE    ( b u -- )
                                   2371 ;       Output u characters from b.
      000B77 0B 5C                 2372         .word      LINK
                           000B79  2373 LINK = . 
      000B79 04                    2374         .byte      4
      000B7A 54 59 50 45           2375         .ascii     "TYPE"
      000B7E                       2376 TYPES:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



      000B7E CD 02 30         [ 4] 2377         CALL     TOR
      000B81 20 0C            [ 2] 2378         JRA     TYPE2
      000B83 CD 02 67         [ 4] 2379 TYPE1:  CALL     DUPP
      000B86 CD 01 DE         [ 4] 2380         CALL     CAT
      000B89 CD 01 22         [ 4] 2381         CALL     EMIT
      000B8C CD 07 02         [ 4] 2382         CALL     ONEP
      000B8F CD 01 4C         [ 4] 2383 TYPE2:  CALL     DONXT
      000B92 0B 83                 2384         .word      TYPE1
      000B94 CC 02 5D         [ 2] 2385         JP     DROP
                                   2386 
                                   2387 ;       CR      ( -- )
                                   2388 ;       Output a carriage return
                                   2389 ;       and a line feed.
      000B97 0B 79                 2390         .word      LINK
                           000B99  2391 LINK = . 
      000B99 02                    2392         .byte      2
      000B9A 43 52                 2393         .ascii     "CR"
      000B9C                       2394 CR:
      000B9C CD 01 38         [ 4] 2395         CALL     DOLIT
      000B9F 00 0D                 2396         .word      CRR
      000BA1 CD 01 22         [ 4] 2397         CALL     EMIT
      000BA4 CD 01 38         [ 4] 2398         CALL     DOLIT
      000BA7 00 0A                 2399         .word      LF
      000BA9 CC 01 22         [ 2] 2400         JP     EMIT
                                   2401 
                                   2402 ;       do$     ( -- a )
                                   2403 ;       Return  address of a compiled
                                   2404 ;       string.
      000BAC 0B 99                 2405         .word      LINK
                           000BAE  2406 LINK = . 
      000BAE 43                    2407 	.byte      COMPO+3
      000BAF 44 4F 24              2408         .ascii     "DO$"
      000BB2                       2409 DOSTR:
      000BB2 CD 02 11         [ 4] 2410         CALL     RFROM
      000BB5 CD 02 24         [ 4] 2411         CALL     RAT
      000BB8 CD 02 11         [ 4] 2412         CALL     RFROM
      000BBB CD 08 0C         [ 4] 2413         CALL     COUNT
      000BBE CD 04 23         [ 4] 2414         CALL     PLUS
      000BC1 CD 02 30         [ 4] 2415         CALL     TOR
      000BC4 CD 02 77         [ 4] 2416         CALL     SWAPP
      000BC7 CD 02 30         [ 4] 2417         CALL     TOR
      000BCA 81               [ 4] 2418         RET
                                   2419 
                                   2420 ;       $"|     ( -- a )
                                   2421 ;       Run time routine compiled by $".
                                   2422 ;       Return address of a compiled string.
      000BCB 0B AE                 2423         .word      LINK
                           000BCD  2424 LINK = . 
      000BCD 43                    2425 	.byte      COMPO+3
      000BCE 24 22 7C              2426         .byte     '$','"','|'
      000BD1                       2427 STRQP:
      000BD1 CD 0B B2         [ 4] 2428         CALL     DOSTR
      000BD4 81               [ 4] 2429         RET
                                   2430 
                                   2431 ;       ."|     ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2432 ;       Run time routine of ." .
                                   2433 ;       Output a compiled string.
      000BD5 0B CD                 2434         .word      LINK
                           000BD7  2435 LINK = . 
      000BD7 43                    2436 	.byte      COMPO+3
      000BD8 2E 22 7C              2437         .byte     '.','"','|'
      000BDB                       2438 DOTQP:
      000BDB CD 0B B2         [ 4] 2439         CALL     DOSTR
      000BDE CD 08 0C         [ 4] 2440         CALL     COUNT
      000BE1 CC 0B 7E         [ 2] 2441         JP     TYPES
                                   2442 
                                   2443 ;       .R      ( n +n -- )
                                   2444 ;       Display an integer in a field
                                   2445 ;       of n columns, right justified.
      000BE4 0B D7                 2446         .word      LINK
                           000BE6  2447 LINK = . 
      000BE6 02                    2448         .byte      2
      000BE7 2E 52                 2449         .ascii     ".R"
      000BE9                       2450 DOTR:
      000BE9 CD 02 30         [ 4] 2451         CALL     TOR
      000BEC CD 09 BE         [ 4] 2452         CALL     STR
      000BEF CD 02 11         [ 4] 2453         CALL     RFROM
      000BF2 CD 02 91         [ 4] 2454         CALL     OVER
      000BF5 CD 04 81         [ 4] 2455         CALL     SUBB
      000BF8 CD 0B 63         [ 4] 2456         CALL     SPACS
      000BFB CC 0B 7E         [ 2] 2457         JP     TYPES
                                   2458 
                                   2459 ;       U.R     ( u +n -- )
                                   2460 ;       Display an unsigned integer
                                   2461 ;       in n column, right justified.
      000BFE 0B E6                 2462         .word      LINK
                           000C00  2463 LINK = . 
      000C00 03                    2464         .byte      3
      000C01 55 2E 52              2465         .ascii     "U.R"
      000C04                       2466 UDOTR:
      000C04 CD 02 30         [ 4] 2467         CALL     TOR
      000C07 CD 09 41         [ 4] 2468         CALL     BDIGS
      000C0A CD 09 7B         [ 4] 2469         CALL     DIGS
      000C0D CD 09 A6         [ 4] 2470         CALL     EDIGS
      000C10 CD 02 11         [ 4] 2471         CALL     RFROM
      000C13 CD 02 91         [ 4] 2472         CALL     OVER
      000C16 CD 04 81         [ 4] 2473         CALL     SUBB
      000C19 CD 0B 63         [ 4] 2474         CALL     SPACS
      000C1C CC 0B 7E         [ 2] 2475         JP     TYPES
                                   2476 
                                   2477 ;       U.      ( u -- )
                                   2478 ;       Display an unsigned integer
                                   2479 ;       in free format.
      000C1F 0C 00                 2480         .word      LINK
                           000C21  2481 LINK = . 
      000C21 02                    2482         .byte      2
      000C22 55 2E                 2483         .ascii     "U."
      000C24                       2484 UDOT:
      000C24 CD 09 41         [ 4] 2485         CALL     BDIGS
      000C27 CD 09 7B         [ 4] 2486         CALL     DIGS
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000C2A CD 09 A6         [ 4] 2487         CALL     EDIGS
      000C2D CD 0B 54         [ 4] 2488         CALL     SPACE
      000C30 CC 0B 7E         [ 2] 2489         JP     TYPES
                                   2490 
                                   2491 ;       .       ( w -- )
                                   2492 ;       Display an integer in free
                                   2493 ;       format, preceeded by a space.
      000C33 0C 21                 2494         .word      LINK
                           000C35  2495 LINK = . 
      000C35 01                    2496         .byte      1
      000C36 2E                    2497         .ascii     "."
      000C37                       2498 DOT:
      000C37 CD 03 24         [ 4] 2499         CALL     BASE
      000C3A CD 01 C0         [ 4] 2500         CALL     AT
      000C3D CD 01 38         [ 4] 2501         CALL     DOLIT
      000C40 00 0A                 2502         .word      10
      000C42 CD 02 DC         [ 4] 2503         CALL     XORR    ;?decimal
      000C45 CD 01 6B         [ 4] 2504         CALL     QBRAN
      000C48 0C 4D                 2505         .word      DOT1
      000C4A CC 0C 24         [ 2] 2506         JP     UDOT
      000C4D CD 09 BE         [ 4] 2507 DOT1:   CALL     STR
      000C50 CD 0B 54         [ 4] 2508         CALL     SPACE
      000C53 CC 0B 7E         [ 2] 2509         JP     TYPES
                                   2510 
                                   2511 ;       ?       ( a -- )
                                   2512 ;       Display contents in memory cell.
      000C56 0C 35                 2513         .word      LINK
                                   2514         
                           000C58  2515 LINK = . 
      000C58 01                    2516         .byte      1
      000C59 3F                    2517         .ascii     "?"
      000C5A                       2518 QUEST:
      000C5A CD 01 C0         [ 4] 2519         CALL     AT
      000C5D CC 0C 37         [ 2] 2520         JP     DOT
                                   2521 
                                   2522 ;; Parsing
                                   2523 
                                   2524 ;       parse   ( b u c -- b u delta ; <string> )
                                   2525 ;       Scan string delimited by c.
                                   2526 ;       Return found string and its offset.
      000C60 0C 58                 2527         .word      LINK
                           000C62  2528 LINK = . 
      000C62 05                    2529         .byte      5
      000C63 70 61 72 73 65        2530         .ascii     "parse"
      000C68                       2531 PARS:
      000C68 CD 03 33         [ 4] 2532         CALL     TEMP
      000C6B CD 01 A9         [ 4] 2533         CALL     STORE
      000C6E CD 02 91         [ 4] 2534         CALL     OVER
      000C71 CD 02 30         [ 4] 2535         CALL     TOR
      000C74 CD 02 67         [ 4] 2536         CALL     DUPP
      000C77 CD 01 6B         [ 4] 2537         CALL     QBRAN
      000C7A 0D 20                 2538         .word    PARS8
      000C7C CD 07 0F         [ 4] 2539         CALL     ONEM
      000C7F CD 03 33         [ 4] 2540         CALL     TEMP
      000C82 CD 01 C0         [ 4] 2541         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000C85 CD 07 29         [ 4] 2542         CALL     BLANK
      000C88 CD 04 A9         [ 4] 2543         CALL     EQUAL
      000C8B CD 01 6B         [ 4] 2544         CALL     QBRAN
      000C8E 0C C1                 2545         .word      PARS3
      000C90 CD 02 30         [ 4] 2546         CALL     TOR
      000C93 CD 07 29         [ 4] 2547 PARS1:  CALL     BLANK
      000C96 CD 02 91         [ 4] 2548         CALL     OVER
      000C99 CD 01 DE         [ 4] 2549         CALL     CAT     ;skip leading blanks ONLY
      000C9C CD 04 81         [ 4] 2550         CALL     SUBB
      000C9F CD 02 A0         [ 4] 2551         CALL     ZLESS
      000CA2 CD 04 3D         [ 4] 2552         CALL     INVER
      000CA5 CD 01 6B         [ 4] 2553         CALL     QBRAN
      000CA8 0C BE                 2554         .word      PARS2
      000CAA CD 07 02         [ 4] 2555         CALL     ONEP
      000CAD CD 01 4C         [ 4] 2556         CALL     DONXT
      000CB0 0C 93                 2557         .word      PARS1
      000CB2 CD 02 11         [ 4] 2558         CALL     RFROM
      000CB5 CD 02 5D         [ 4] 2559         CALL     DROP
      000CB8 CD 07 36         [ 4] 2560         CALL     ZERO
      000CBB CC 02 67         [ 2] 2561         JP     DUPP
      000CBE CD 02 11         [ 4] 2562 PARS2:  CALL     RFROM
      000CC1 CD 02 91         [ 4] 2563 PARS3:  CALL     OVER
      000CC4 CD 02 77         [ 4] 2564         CALL     SWAPP
      000CC7 CD 02 30         [ 4] 2565         CALL     TOR
      000CCA CD 03 33         [ 4] 2566 PARS4:  CALL     TEMP
      000CCD CD 01 C0         [ 4] 2567         CALL     AT
      000CD0 CD 02 91         [ 4] 2568         CALL     OVER
      000CD3 CD 01 DE         [ 4] 2569         CALL     CAT
      000CD6 CD 04 81         [ 4] 2570         CALL     SUBB    ;scan for delimiter
      000CD9 CD 03 33         [ 4] 2571         CALL     TEMP
      000CDC CD 01 C0         [ 4] 2572         CALL     AT
      000CDF CD 07 29         [ 4] 2573         CALL     BLANK
      000CE2 CD 04 A9         [ 4] 2574         CALL     EQUAL
      000CE5 CD 01 6B         [ 4] 2575         CALL     QBRAN
      000CE8 0C ED                 2576         .word      PARS5
      000CEA CD 02 A0         [ 4] 2577         CALL     ZLESS
      000CED CD 01 6B         [ 4] 2578 PARS5:  CALL     QBRAN
      000CF0 0D 02                 2579         .word      PARS6
      000CF2 CD 07 02         [ 4] 2580         CALL     ONEP
      000CF5 CD 01 4C         [ 4] 2581         CALL     DONXT
      000CF8 0C CA                 2582         .word      PARS4
      000CFA CD 02 67         [ 4] 2583         CALL     DUPP
      000CFD CD 02 30         [ 4] 2584         CALL     TOR
      000D00 20 0F            [ 2] 2585         JRA     PARS7
      000D02 CD 02 11         [ 4] 2586 PARS6:  CALL     RFROM
      000D05 CD 02 5D         [ 4] 2587         CALL     DROP
      000D08 CD 02 67         [ 4] 2588         CALL     DUPP
      000D0B CD 07 02         [ 4] 2589         CALL     ONEP
      000D0E CD 02 30         [ 4] 2590         CALL     TOR
      000D11 CD 02 91         [ 4] 2591 PARS7:  CALL     OVER
      000D14 CD 04 81         [ 4] 2592         CALL     SUBB
      000D17 CD 02 11         [ 4] 2593         CALL     RFROM
      000D1A CD 02 11         [ 4] 2594         CALL     RFROM
      000D1D CC 04 81         [ 2] 2595         JP     SUBB
      000D20 CD 02 91         [ 4] 2596 PARS8:  CALL     OVER
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000D23 CD 02 11         [ 4] 2597         CALL     RFROM
      000D26 CC 04 81         [ 2] 2598         JP     SUBB
                                   2599 
                                   2600 ;       PARSE   ( c -- b u ; <string> )
                                   2601 ;       Scan input stream and return
                                   2602 ;       counted string delimited by c.
      000D29 0C 62                 2603         .word      LINK
                           000D2B  2604 LINK = . 
      000D2B 05                    2605         .byte      5
      000D2C 50 41 52 53 45        2606         .ascii     "PARSE"
      000D31                       2607 PARSE:
      000D31 CD 02 30         [ 4] 2608         CALL     TOR
      000D34 CD 08 45         [ 4] 2609         CALL     TIB
      000D37 CD 03 42         [ 4] 2610         CALL     INN
      000D3A CD 01 C0         [ 4] 2611         CALL     AT
      000D3D CD 04 23         [ 4] 2612         CALL     PLUS    ;current input buffer pointer
      000D40 CD 03 52         [ 4] 2613         CALL     NTIB
      000D43 CD 01 C0         [ 4] 2614         CALL     AT
      000D46 CD 03 42         [ 4] 2615         CALL     INN
      000D49 CD 01 C0         [ 4] 2616         CALL     AT
      000D4C CD 04 81         [ 4] 2617         CALL     SUBB    ;remaining count
      000D4F CD 02 11         [ 4] 2618         CALL     RFROM
      000D52 CD 0C 68         [ 4] 2619         CALL     PARS
      000D55 CD 03 42         [ 4] 2620         CALL     INN
      000D58 CC 07 A5         [ 2] 2621         JP     PSTOR
                                   2622 
                                   2623 ;       .(      ( -- )
                                   2624 ;       Output following string up to next ) .
      000D5B 0D 2B                 2625         .word      LINK
                           000D5D  2626 LINK = . 
      000D5D 82                    2627 	.byte      IMEDD+2
      000D5E 2E 28                 2628         .ascii     ".("
      000D60                       2629 DOTPR:
      000D60 CD 01 38         [ 4] 2630         CALL     DOLIT
      000D63 00 29                 2631         .word     41	; ")"
      000D65 CD 0D 31         [ 4] 2632         CALL     PARSE
      000D68 CC 0B 7E         [ 2] 2633         JP     TYPES
                                   2634 
                                   2635 ;       (       ( -- )
                                   2636 ;       Ignore following string up to next ).
                                   2637 ;       A comment.
      000D6B 0D 5D                 2638         .word      LINK
                           000D6D  2639 LINK = . 
      000D6D 81                    2640 	.byte      IMEDD+1
      000D6E 28                    2641         .ascii     "("
      000D6F                       2642 PAREN:
      000D6F CD 01 38         [ 4] 2643         CALL     DOLIT
      000D72 00 29                 2644         .word     41	; ")"
      000D74 CD 0D 31         [ 4] 2645         CALL     PARSE
      000D77 CC 04 03         [ 2] 2646         JP     DDROP
                                   2647 
                                   2648 ;       \       ( -- )
                                   2649 ;       Ignore following text till
                                   2650 ;       end of line.
      000D7A 0D 6D                 2651         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000D7C  2652 LINK = . 
      000D7C 81                    2653 	.byte      IMEDD+1
      000D7D 5C                    2654         .ascii     "\"
      000D7E                       2655 BKSLA:
                           000001  2656 .if CONVERT_TO_CODE
      000D7E 90 AE 00 0C      [ 2] 2657         ldw y,#UCTIB ; #TIB  
      000D82 90 FE            [ 2] 2658         ldw y,(y)
      000D84 90 89            [ 2] 2659         pushw y ; count in TIB 
      000D86 90 AE 00 0A      [ 2] 2660         ldw y,#UINN ; >IN 
      000D8A 90 BF 1E         [ 2] 2661         ldw YTEMP,y
      000D8D 90 85            [ 2] 2662         popw y 
      000D8F 91 CF 1E         [ 5] 2663         ldw [YTEMP],y
      000D92 81               [ 4] 2664         ret 
                           000000  2665 .else
                                   2666         CALL     NTIB
                                   2667         CALL     AT
                                   2668         CALL     INN
                                   2669         JP     STORE
                                   2670 .endif 
                                   2671 
                                   2672 ;       WORD    ( c -- a ; <string> )
                                   2673 ;       Parse a word from input stream
                                   2674 ;       and copy it to code dictionary.
      000D93 0D 7C                 2675         .word      LINK
                           000D95  2676 LINK = . 
      000D95 04                    2677         .byte      4
      000D96 57 4F 52 44           2678         .ascii     "WORD"
      000D9A                       2679 WORDD:
      000D9A CD 0D 31         [ 4] 2680         CALL     PARSE
      000D9D CD 08 23         [ 4] 2681         CALL     HERE
      000DA0 CD 06 D7         [ 4] 2682         CALL     CELLP
      000DA3 CC 08 E4         [ 2] 2683         JP     PACKS
                                   2684 
                                   2685 ;       TOKEN   ( -- a ; <string> )
                                   2686 ;       Parse a word from input stream
                                   2687 ;       and copy it to name dictionary.
      000DA6 0D 95                 2688         .word      LINK
                           000DA8  2689 LINK = . 
      000DA8 05                    2690         .byte      5
      000DA9 54 4F 4B 45 4E        2691         .ascii     "TOKEN"
      000DAE                       2692 TOKEN:
      000DAE CD 07 29         [ 4] 2693         CALL     BLANK
      000DB1 CC 0D 9A         [ 2] 2694         JP     WORDD
                                   2695 
                                   2696 ;; Dictionary search
                                   2697 
                                   2698 ;       NAME>   ( na -- ca )
                                   2699 ;       Return a code address given
                                   2700 ;       a name address.
      000DB4 0D A8                 2701         .word      LINK
                           000DB6  2702 LINK = . 
      000DB6 05                    2703         .byte      5
      000DB7 4E 41 4D 45 3E        2704         .ascii     "NAME>"
      000DBC                       2705 NAMET:
      000DBC CD 08 0C         [ 4] 2706         CALL     COUNT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000DBF CD 01 38         [ 4] 2707         CALL     DOLIT
      000DC2 00 1F                 2708         .word      31
      000DC4 CD 02 B3         [ 4] 2709         CALL     ANDD
      000DC7 CC 04 23         [ 2] 2710         JP     PLUS
                                   2711 
                                   2712 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2713 ;       Compare u cells in two
                                   2714 ;       strings. Return 0 if identical.
      000DCA 0D B6                 2715         .word      LINK
                           000DCC  2716 LINK = . 
      000DCC 05                    2717         .byte       5
      000DCD 53 41 4D 45 3F        2718         .ascii     "SAME?"
      000DD2                       2719 SAMEQ:
      000DD2 CD 07 0F         [ 4] 2720         CALL     ONEM
      000DD5 CD 02 30         [ 4] 2721         CALL     TOR
      000DD8 20 29            [ 2] 2722         JRA     SAME2
      000DDA CD 02 91         [ 4] 2723 SAME1:  CALL     OVER
      000DDD CD 02 24         [ 4] 2724         CALL     RAT
      000DE0 CD 04 23         [ 4] 2725         CALL     PLUS
      000DE3 CD 01 DE         [ 4] 2726         CALL     CAT
      000DE6 CD 02 91         [ 4] 2727         CALL     OVER
      000DE9 CD 02 24         [ 4] 2728         CALL     RAT
      000DEC CD 04 23         [ 4] 2729         CALL     PLUS
      000DEF CD 01 DE         [ 4] 2730         CALL     CAT
      000DF2 CD 04 81         [ 4] 2731         CALL     SUBB
      000DF5 CD 03 D2         [ 4] 2732         CALL     QDUP
      000DF8 CD 01 6B         [ 4] 2733         CALL     QBRAN
      000DFB 0E 03                 2734         .word      SAME2
      000DFD CD 02 11         [ 4] 2735         CALL     RFROM
      000E00 CC 02 5D         [ 2] 2736         JP     DROP
      000E03 CD 01 4C         [ 4] 2737 SAME2:  CALL     DONXT
      000E06 0D DA                 2738         .word      SAME1
      000E08 CC 07 36         [ 2] 2739         JP     ZERO
                                   2740 
                                   2741 ;       find    ( a va -- ca na | a F )
                                   2742 ;       Search vocabulary for string.
                                   2743 ;       Return ca and na if succeeded.
      000E0B 0D CC                 2744         .word      LINK
                           000E0D  2745 LINK = . 
      000E0D 04                    2746         .byte      4
      000E0E 46 49 4E 44           2747         .ascii     "FIND"
      000E12                       2748 FIND:
      000E12 CD 02 77         [ 4] 2749         CALL     SWAPP
      000E15 CD 02 67         [ 4] 2750         CALL     DUPP
      000E18 CD 01 DE         [ 4] 2751         CALL     CAT
      000E1B CD 03 33         [ 4] 2752         CALL     TEMP
      000E1E CD 01 A9         [ 4] 2753         CALL     STORE
      000E21 CD 02 67         [ 4] 2754         CALL     DUPP
      000E24 CD 01 C0         [ 4] 2755         CALL     AT
      000E27 CD 02 30         [ 4] 2756         CALL     TOR
      000E2A CD 06 D7         [ 4] 2757         CALL     CELLP
      000E2D CD 02 77         [ 4] 2758         CALL     SWAPP
      000E30 CD 01 C0         [ 4] 2759 FIND1:  CALL     AT
      000E33 CD 02 67         [ 4] 2760         CALL     DUPP
      000E36 CD 01 6B         [ 4] 2761         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000E39 0E 6F                 2762         .word      FIND6
      000E3B CD 02 67         [ 4] 2763         CALL     DUPP
      000E3E CD 01 C0         [ 4] 2764         CALL     AT
      000E41 CD 01 38         [ 4] 2765         CALL     DOLIT
      000E44 1F 7F                 2766         .word      MASKK
      000E46 CD 02 B3         [ 4] 2767         CALL     ANDD
      000E49 CD 02 24         [ 4] 2768         CALL     RAT
      000E4C CD 02 DC         [ 4] 2769         CALL     XORR
      000E4F CD 01 6B         [ 4] 2770         CALL     QBRAN
      000E52 0E 5E                 2771         .word      FIND2
      000E54 CD 06 D7         [ 4] 2772         CALL     CELLP
      000E57 CD 01 38         [ 4] 2773         CALL     DOLIT
      000E5A FF FF                 2774         .word     0xFFFF
      000E5C 20 0C            [ 2] 2775         JRA     FIND3
      000E5E CD 06 D7         [ 4] 2776 FIND2:  CALL     CELLP
      000E61 CD 03 33         [ 4] 2777         CALL     TEMP
      000E64 CD 01 C0         [ 4] 2778         CALL     AT
      000E67 CD 0D D2         [ 4] 2779         CALL     SAMEQ
      000E6A CD 01 82         [ 4] 2780 FIND3:  CALL     BRAN
      000E6D 0E 7E                 2781         .word      FIND4
      000E6F CD 02 11         [ 4] 2782 FIND6:  CALL     RFROM
      000E72 CD 02 5D         [ 4] 2783         CALL     DROP
      000E75 CD 02 77         [ 4] 2784         CALL     SWAPP
      000E78 CD 06 E6         [ 4] 2785         CALL     CELLM
      000E7B CC 02 77         [ 2] 2786         JP     SWAPP
      000E7E CD 01 6B         [ 4] 2787 FIND4:  CALL     QBRAN
      000E81 0E 8B                 2788         .word      FIND5
      000E83 CD 06 E6         [ 4] 2789         CALL     CELLM
      000E86 CD 06 E6         [ 4] 2790         CALL     CELLM
      000E89 20 A5            [ 2] 2791         JRA     FIND1
      000E8B CD 02 11         [ 4] 2792 FIND5:  CALL     RFROM
      000E8E CD 02 5D         [ 4] 2793         CALL     DROP
      000E91 CD 02 77         [ 4] 2794         CALL     SWAPP
      000E94 CD 02 5D         [ 4] 2795         CALL     DROP
      000E97 CD 06 E6         [ 4] 2796         CALL     CELLM
      000E9A CD 02 67         [ 4] 2797         CALL     DUPP
      000E9D CD 0D BC         [ 4] 2798         CALL     NAMET
      000EA0 CC 02 77         [ 2] 2799         JP     SWAPP
                                   2800 
                                   2801 ;       NAME?   ( a -- ca na | a F )
                                   2802 ;       Search vocabularies for a string.
      000EA3 0E 0D                 2803         .word      LINK
                           000EA5  2804 LINK = . 
      000EA5 05                    2805         .byte      5
      000EA6 4E 41 4D 45 3F        2806         .ascii     "NAME?"
      000EAB                       2807 NAMEQ:
      000EAB CD 03 95         [ 4] 2808         CALL   CNTXT
      000EAE CC 0E 12         [ 2] 2809         JP     FIND
                                   2810 
                                   2811 ;; Terminal response
                                   2812 
                                   2813 ;       ^H      ( bot eot cur -- bot eot cur )
                                   2814 ;       Backup cursor by one character.
      000EB1 0E A5                 2815         .word      LINK
                           000EB3  2816 LINK = . 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000EB3 02                    2817         .byte      2
      000EB4 5E 48                 2818         .ascii     "^H"
      000EB6                       2819 BKSP:
      000EB6 CD 02 30         [ 4] 2820         CALL     TOR
      000EB9 CD 02 91         [ 4] 2821         CALL     OVER
      000EBC CD 02 11         [ 4] 2822         CALL     RFROM
      000EBF CD 02 77         [ 4] 2823         CALL     SWAPP
      000EC2 CD 02 91         [ 4] 2824         CALL     OVER
      000EC5 CD 02 DC         [ 4] 2825         CALL     XORR
      000EC8 CD 01 6B         [ 4] 2826         CALL     QBRAN
      000ECB 0E E6                 2827         .word      BACK1
      000ECD CD 01 38         [ 4] 2828         CALL     DOLIT
      000ED0 00 08                 2829         .word      BKSPP
      000ED2 CD 01 22         [ 4] 2830         CALL     EMIT
      000ED5 CD 07 0F         [ 4] 2831         CALL     ONEM
      000ED8 CD 07 29         [ 4] 2832         CALL     BLANK
      000EDB CD 01 22         [ 4] 2833         CALL     EMIT
      000EDE CD 01 38         [ 4] 2834         CALL     DOLIT
      000EE1 00 08                 2835         .word      BKSPP
      000EE3 CC 01 22         [ 2] 2836         JP     EMIT
      000EE6 81               [ 4] 2837 BACK1:  RET
                                   2838 
                                   2839 ;       TAP     ( bot eot cur c -- bot eot cur )
                                   2840 ;       Accept and echo key stroke
                                   2841 ;       and bump cursor.
      000EE7 0E B3                 2842         .word      LINK
                           000EE9  2843 LINK = . 
      000EE9 03                    2844         .byte      3
      000EEA 54 41 50              2845         .ascii     "TAP"
      000EED                       2846 TAP:
      000EED CD 02 67         [ 4] 2847         CALL     DUPP
      000EF0 CD 01 22         [ 4] 2848         CALL     EMIT
      000EF3 CD 02 91         [ 4] 2849         CALL     OVER
      000EF6 CD 01 CD         [ 4] 2850         CALL     CSTOR
      000EF9 CC 07 02         [ 2] 2851         JP     ONEP
                                   2852 
                                   2853 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   2854 ;       Process a key stroke,
                                   2855 ;       CR or backspace.
      000EFC 0E E9                 2856         .word      LINK
                           000EFE  2857 LINK = . 
      000EFE 04                    2858         .byte      4
      000EFF 4B 54 41 50           2859         .ascii     "KTAP"
      000F03                       2860 KTAP:
      000F03 CD 02 67         [ 4] 2861         CALL     DUPP
      000F06 CD 01 38         [ 4] 2862         CALL     DOLIT
      000F09 00 0D                 2863         .word      CRR
      000F0B CD 02 DC         [ 4] 2864         CALL     XORR
      000F0E CD 01 6B         [ 4] 2865         CALL     QBRAN
      000F11 0F 29                 2866         .word      KTAP2
      000F13 CD 01 38         [ 4] 2867         CALL     DOLIT
      000F16 00 08                 2868         .word      BKSPP
      000F18 CD 02 DC         [ 4] 2869         CALL     XORR
      000F1B CD 01 6B         [ 4] 2870         CALL     QBRAN
      000F1E 0F 26                 2871         .word      KTAP1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      000F20 CD 07 29         [ 4] 2872         CALL     BLANK
      000F23 CC 0E ED         [ 2] 2873         JP     TAP
      000F26 CC 0E B6         [ 2] 2874 KTAP1:  JP     BKSP
      000F29 CD 02 5D         [ 4] 2875 KTAP2:  CALL     DROP
      000F2C CD 02 77         [ 4] 2876         CALL     SWAPP
      000F2F CD 02 5D         [ 4] 2877         CALL     DROP
      000F32 CC 02 67         [ 2] 2878         JP     DUPP
                                   2879 
                                   2880 ;       accept  ( b u -- b u )
                                   2881 ;       Accept characters to input
                                   2882 ;       buffer. Return with actual count.
      000F35 0E FE                 2883         .word      LINK
                           000F37  2884 LINK = . 
      000F37 06                    2885         .byte      6
      000F38 41 43 43 45 50 54     2886         .ascii     "ACCEPT"
      000F3E                       2887 ACCEP:
      000F3E CD 02 91         [ 4] 2888         CALL     OVER
      000F41 CD 04 23         [ 4] 2889         CALL     PLUS
      000F44 CD 02 91         [ 4] 2890         CALL     OVER
      000F47 CD 04 0E         [ 4] 2891 ACCP1:  CALL     DDUP
      000F4A CD 02 DC         [ 4] 2892         CALL     XORR
      000F4D CD 01 6B         [ 4] 2893         CALL     QBRAN
      000F50 0F 72                 2894         .word      ACCP4
      000F52 CD 0B 1C         [ 4] 2895         CALL     KEY
      000F55 CD 02 67         [ 4] 2896         CALL     DUPP
      000F58 CD 07 29         [ 4] 2897         CALL     BLANK
      000F5B CD 01 38         [ 4] 2898         CALL     DOLIT
      000F5E 00 7F                 2899         .word      127
      000F60 CD 05 43         [ 4] 2900         CALL     WITHI
      000F63 CD 01 6B         [ 4] 2901         CALL     QBRAN
      000F66 0F 6D                 2902         .word      ACCP2
      000F68 CD 0E ED         [ 4] 2903         CALL     TAP
      000F6B 20 03            [ 2] 2904         JRA     ACCP3
      000F6D CD 0F 03         [ 4] 2905 ACCP2:  CALL     KTAP
      000F70 20 D5            [ 2] 2906 ACCP3:  JRA     ACCP1
      000F72 CD 02 5D         [ 4] 2907 ACCP4:  CALL     DROP
      000F75 CD 02 91         [ 4] 2908         CALL     OVER
      000F78 CC 04 81         [ 2] 2909         JP     SUBB
                                   2910 
                                   2911 ;       QUERY   ( -- )
                                   2912 ;       Accept input stream to
                                   2913 ;       terminal input buffer.
      000F7B 0F 37                 2914         .word      LINK
                                   2915         
                           000F7D  2916 LINK = . 
      000F7D 05                    2917         .byte      5
      000F7E 51 55 45 52 59        2918         .ascii     "QUERY"
      000F83                       2919 QUERY:
      000F83 CD 08 45         [ 4] 2920         CALL     TIB
      000F86 CD 01 38         [ 4] 2921         CALL     DOLIT
      000F89 00 50                 2922         .word      80
      000F8B CD 0F 3E         [ 4] 2923         CALL     ACCEP
      000F8E CD 03 52         [ 4] 2924         CALL     NTIB
      000F91 CD 01 A9         [ 4] 2925         CALL     STORE
      000F94 CD 02 5D         [ 4] 2926         CALL     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



      000F97 CD 07 36         [ 4] 2927         CALL     ZERO
      000F9A CD 03 42         [ 4] 2928         CALL     INN
      000F9D CC 01 A9         [ 2] 2929         JP     STORE
                                   2930 
                                   2931 ;       ABORT   ( -- )
                                   2932 ;       Reset data stack and
                                   2933 ;       jump to QUIT.
      000FA0 0F 7D                 2934         .word      LINK
                           000FA2  2935 LINK = . 
      000FA2 05                    2936         .byte      5
      000FA3 41 42 4F 52 54        2937         .ascii     "ABORT"
      000FA8                       2938 ABORT:
      000FA8 CD 10 9F         [ 4] 2939         CALL     PRESE
      000FAB CC 10 BC         [ 2] 2940         JP     QUIT
                                   2941 
                                   2942 ;       abort"  ( f -- )
                                   2943 ;       Run time routine of ABORT".
                                   2944 ;       Abort with a message.
      000FAE 0F A2                 2945         .word      LINK
                           000FB0  2946 LINK = . 
      000FB0 46                    2947 	.byte      COMPO+6
      000FB1 41 42 4F 52 54        2948         .ascii     "ABORT"
      000FB6 22                    2949         .byte      '"'
      000FB7                       2950 ABORQ:
      000FB7 CD 01 6B         [ 4] 2951         CALL     QBRAN
      000FBA 0F D6                 2952         .word      ABOR2   ;text flag
      000FBC CD 0B B2         [ 4] 2953         CALL     DOSTR
      000FBF CD 0B 54         [ 4] 2954 ABOR1:  CALL     SPACE
      000FC2 CD 08 0C         [ 4] 2955         CALL     COUNT
      000FC5 CD 0B 7E         [ 4] 2956         CALL     TYPES
      000FC8 CD 01 38         [ 4] 2957         CALL     DOLIT
      000FCB 00 3F                 2958         .word     63 ; "?"
      000FCD CD 01 22         [ 4] 2959         CALL     EMIT
      000FD0 CD 0B 9C         [ 4] 2960         CALL     CR
      000FD3 CC 0F A8         [ 2] 2961         JP     ABORT   ;pass error string
      000FD6 CD 0B B2         [ 4] 2962 ABOR2:  CALL     DOSTR
      000FD9 CC 02 5D         [ 2] 2963         JP     DROP
                                   2964 
                                   2965 ;; The text interpreter
                                   2966 
                                   2967 ;       $INTERPRET      ( a -- )
                                   2968 ;       Interpret a word. If failed,
                                   2969 ;       try to convert it to an integer.
      000FDC 0F B0                 2970         .word      LINK
                           000FDE  2971 LINK = . 
      000FDE 0A                    2972         .byte      10
      000FDF 24 49 4E 54 45 52 50  2973         .ascii     "$INTERPRET"
             52 45 54
      000FE9                       2974 INTER:
      000FE9 CD 0E AB         [ 4] 2975         CALL     NAMEQ
      000FEC CD 03 D2         [ 4] 2976         CALL     QDUP    ;?defined
      000FEF CD 01 6B         [ 4] 2977         CALL     QBRAN
      000FF2 10 13                 2978         .word      INTE1
      000FF4 CD 01 C0         [ 4] 2979         CALL     AT
      000FF7 CD 01 38         [ 4] 2980         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      000FFA 40 00                 2981 	.word       0x4000	; COMPO*256
      000FFC CD 02 B3         [ 4] 2982         CALL     ANDD    ;?compile only lexicon bits
      000FFF CD 0F B7         [ 4] 2983         CALL     ABORQ
      001002 0D                    2984         .byte      13
      001003 20 63 6F 6D 70 69 6C  2985         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001010 CC 01 92         [ 2] 2986         JP     EXECU
      001013 CD 0A 49         [ 4] 2987 INTE1:  CALL     NUMBQ   ;convert a number
      001016 CD 01 6B         [ 4] 2988         CALL     QBRAN
      001019 0F BF                 2989         .word    ABOR1
      00101B 81               [ 4] 2990         RET
                                   2991 
                                   2992 ;       [       ( -- )
                                   2993 ;       Start  text interpreter.
      00101C 0F DE                 2994         .word      LINK
                           00101E  2995 LINK = . 
      00101E 81                    2996 	.byte      IMEDD+1
      00101F 5B                    2997         .ascii     "["
      001020                       2998 LBRAC:
      001020 CD 01 38         [ 4] 2999         CALL     DOLIT
      001023 0F E9                 3000         .word      INTER
      001025 CD 03 73         [ 4] 3001         CALL     TEVAL
      001028 CC 01 A9         [ 2] 3002         JP     STORE
                                   3003 
                                   3004 ;       .OK     ( -- )
                                   3005 ;       Display 'ok' while interpreting.
      00102B 10 1E                 3006         .word      LINK
                           00102D  3007 LINK = . 
      00102D 03                    3008         .byte      3
      00102E 2E 4F 4B              3009         .ascii     ".OK"
      001031                       3010 DOTOK:
      001031 CD 01 38         [ 4] 3011         CALL     DOLIT
      001034 0F E9                 3012         .word      INTER
      001036 CD 03 73         [ 4] 3013         CALL     TEVAL
      001039 CD 01 C0         [ 4] 3014         CALL     AT
      00103C CD 04 A9         [ 4] 3015         CALL     EQUAL
      00103F CD 01 6B         [ 4] 3016         CALL     QBRAN
      001042 10 4B                 3017         .word      DOTO1
      001044 CD 0B DB         [ 4] 3018         CALL     DOTQP
      001047 03                    3019         .byte      3
      001048 20 6F 6B              3020         .ascii     " ok"
      00104B CC 0B 9C         [ 2] 3021 DOTO1:  JP     CR
                                   3022 
                                   3023 ;       ?STACK  ( -- )
                                   3024 ;       Abort if stack underflows.
      00104E 10 2D                 3025         .word      LINK
                           001050  3026 LINK = . 
      001050 06                    3027         .byte      6
      001051 3F 53 54 41 43 4B     3028         .ascii     "?STACK"
      001057                       3029 QSTAC: 
      001057 CD 07 79         [ 4] 3030         CALL     DEPTH
      00105A CD 02 A0         [ 4] 3031         CALL     ZLESS   ;check only for underflow
      00105D CD 0F B7         [ 4] 3032         CALL     ABORQ
      001060 0B                    3033         .byte      11
      001061 20 75 6E 64 65 72 66  3034         .ascii     " underflow "
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



             6C 6F 77 20
      00106C 81               [ 4] 3035         RET
                                   3036 
                                   3037 ;       EVAL    ( -- )
                                   3038 ;       Interpret  input stream.
      00106D 10 50                 3039         .word      LINK
                           00106F  3040 LINK = . 
      00106F 04                    3041         .byte      4
      001070 45 56 41 4C           3042         .ascii     "EVAL"
      001074                       3043 EVAL:
      001074 CD 0D AE         [ 4] 3044 EVAL1:  CALL     TOKEN
      001077 CD 02 67         [ 4] 3045         CALL     DUPP
      00107A CD 01 DE         [ 4] 3046         CALL     CAT     ;?input stream empty
      00107D CD 01 6B         [ 4] 3047         CALL     QBRAN
      001080 10 90                 3048         .word    EVAL2
      001082 CD 03 73         [ 4] 3049         CALL     TEVAL
      001085 CD 08 59         [ 4] 3050         CALL     ATEXE
      001088 CD 10 57         [ 4] 3051         CALL     QSTAC   ;evaluate input, check stack
      00108B CD 01 82         [ 4] 3052         CALL     BRAN
      00108E 10 74                 3053         .word    EVAL1
      001090 CD 02 5D         [ 4] 3054 EVAL2:  CALL     DROP
      001093 CC 10 31         [ 2] 3055         JP       DOTOK
                                   3056 
                                   3057 ;       PRESET  ( -- )
                                   3058 ;       Reset data stack pointer and
                                   3059 ;       terminal input buffer.
      001096 10 6F                 3060         .word      LINK
                           001098  3061 LINK = . 
      001098 06                    3062         .byte      6
      001099 50 52 45 53 45 54     3063         .ascii     "PRESET"
      00109F                       3064 PRESE:
      00109F CD 01 38         [ 4] 3065         CALL     DOLIT
      0010A2 16 70                 3066         .word      SPP
      0010A4 CD 02 54         [ 4] 3067         CALL     SPSTO
      0010A7 CD 01 38         [ 4] 3068         CALL     DOLIT
      0010AA 17 00                 3069         .word      TIBB
      0010AC CD 03 52         [ 4] 3070         CALL     NTIB
      0010AF CD 06 D7         [ 4] 3071         CALL     CELLP
      0010B2 CC 01 A9         [ 2] 3072         JP     STORE
                                   3073 
                                   3074 ;       QUIT    ( -- )
                                   3075 ;       Reset return stack pointer
                                   3076 ;       and start text interpreter.
      0010B5 10 98                 3077         .word      LINK
                           0010B7  3078 LINK = . 
      0010B7 04                    3079         .byte      4
      0010B8 51 55 49 54           3080         .ascii     "QUIT"
      0010BC                       3081 QUIT:
      0010BC CD 01 38         [ 4] 3082         CALL     DOLIT
      0010BF 17 FF                 3083         .word      RPP
      0010C1 CD 01 FB         [ 4] 3084         CALL     RPSTO   ;reset return stack pointer
      0010C4 CD 10 20         [ 4] 3085 QUIT1:  CALL     LBRAC   ;start interpretation
      0010C7 CD 0F 83         [ 4] 3086 QUIT2:  CALL     QUERY   ;get input
      0010CA CD 10 74         [ 4] 3087         CALL     EVAL
      0010CD 20 F8            [ 2] 3088         JRA     QUIT2   ;continue till error
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



                                   3089 
                                   3090 ;; The compiler
                                   3091 
                                   3092 ;       '       ( -- ca )
                                   3093 ;       Search vocabularies for
                                   3094 ;       next word in input stream.
      0010CF 10 B7                 3095         .word      LINK
                           0010D1  3096 LINK = . 
      0010D1 01                    3097         .byte      1
      0010D2 27                    3098         .ascii     "'"
      0010D3                       3099 TICK:
      0010D3 CD 0D AE         [ 4] 3100         CALL     TOKEN
      0010D6 CD 0E AB         [ 4] 3101         CALL     NAMEQ   ;?defined
      0010D9 CD 01 6B         [ 4] 3102         CALL     QBRAN
      0010DC 0F BF                 3103         .word      ABOR1
      0010DE 81               [ 4] 3104         RET     ;yes, push code address
                                   3105 
                                   3106 ;       ALLOT   ( n -- )
                           000001  3107 .if PICATOUT_MOD
                                   3108 ;       Allocate n bytes to RAM 
                           000000  3109 .else 
                                   3110 ;       Allocate n bytes to  code dictionary.
                                   3111 .endif 
      0010DF 10 D1                 3112         .word      LINK
                           0010E1  3113 LINK = . 
      0010E1 05                    3114         .byte      5
      0010E2 41 4C 4C 4F 54        3115         .ascii     "ALLOT"
      0010E7                       3116 ALLOT:
      0010E7 CD 03 A3         [ 4] 3117         CALL     CPP
      0010EA CC 07 A5         [ 2] 3118         JP     PSTOR
                                   3119 
                                   3120 ;       ,       ( w -- )
                                   3121 ;         Compile an integer into
                                   3122 ;         code dictionary.
      0010ED 10 E1                 3123         .word      LINK
                           0010EF  3124 LINK = . 
      0010EF 01                    3125         .byte      1
      0010F0 2C                    3126         .ascii     ","
      0010F1                       3127 COMMA:
      0010F1 CD 08 23         [ 4] 3128         CALL     HERE
      0010F4 CD 02 67         [ 4] 3129         CALL     DUPP
      0010F7 CD 06 D7         [ 4] 3130         CALL     CELLP   ;cell boundary
      0010FA CD 03 A3         [ 4] 3131         CALL     CPP
      0010FD CD 01 A9         [ 4] 3132         CALL     STORE
      001100 CC 01 A9         [ 2] 3133         JP     STORE
                                   3134 
                                   3135 ;       C,      ( c -- )
                                   3136 ;       Compile a byte into
                                   3137 ;       code dictionary.
      001103 10 EF                 3138        .word      LINK
                           001105  3139 LINK = . 
      001105 02                    3140         .byte      2
      001106 43 2C                 3141         .ascii     "C,"
      001108                       3142 CCOMMA:
      001108 CD 08 23         [ 4] 3143         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      00110B CD 02 67         [ 4] 3144         CALL     DUPP
      00110E CD 07 02         [ 4] 3145         CALL     ONEP
      001111 CD 03 A3         [ 4] 3146         CALL     CPP
      001114 CD 01 A9         [ 4] 3147         CALL     STORE
      001117 CC 01 CD         [ 2] 3148         JP     CSTOR
                                   3149 
                                   3150 ;       [COMPILE]       ( -- ; <string> )
                                   3151 ;       Compile next immediate
                                   3152 ;       word into code dictionary.
      00111A 11 05                 3153         .word      LINK
                           00111C  3154 LINK = . 
      00111C 89                    3155 	.byte      IMEDD+9
      00111D 5B 43 4F 4D 50 49 4C  3156         .ascii     "[COMPILE]"
             45 5D
      001126                       3157 BCOMP:
      001126 CD 10 D3         [ 4] 3158         CALL     TICK
      001129 CC 13 82         [ 2] 3159         JP     JSRC
                                   3160 
                                   3161 ;       COMPILE ( -- )
                                   3162 ;       Compile next jsr in
                                   3163 ;       colon list to code dictionary.
      00112C 11 1C                 3164         .word      LINK
                           00112E  3165 LINK = . 
      00112E 47                    3166 	.byte      COMPO+7
      00112F 43 4F 4D 50 49 4C 45  3167         .ascii     "COMPILE"
      001136                       3168 COMPI:
      001136 CD 02 11         [ 4] 3169         CALL     RFROM
      001139 CD 07 02         [ 4] 3170         CALL     ONEP
      00113C CD 02 67         [ 4] 3171         CALL     DUPP
      00113F CD 01 C0         [ 4] 3172         CALL     AT
      001142 CD 13 82         [ 4] 3173         CALL     JSRC    ;compile subroutine
      001145 CD 06 D7         [ 4] 3174         CALL     CELLP
      001148 CC 02 30         [ 2] 3175         JP     TOR
                                   3176 
                                   3177 ;       LITERAL ( w -- )
                                   3178 ;       Compile tos to dictionary
                                   3179 ;       as an integer literal.
      00114B 11 2E                 3180         .word      LINK
                           00114D  3181 LINK = . 
      00114D 87                    3182 	.byte      IMEDD+7
      00114E 4C 49 54 45 52 41 4C  3183         .ascii     "LITERAL"
      001155                       3184 LITER:
      001155 CD 11 36         [ 4] 3185         CALL     COMPI
      001158 CD 01 38         [ 4] 3186         CALL     DOLIT
      00115B CC 10 F1         [ 2] 3187         JP     COMMA
                                   3188 
                                   3189 ;       $,"     ( -- )
                                   3190 ;       Compile a literal string
                                   3191 ;       up to next " .
      00115E 11 4D                 3192         .word      LINK
                           001160  3193 LINK = . 
      001160 03                    3194         .byte      3
      001161 24 2C 22              3195         .byte     '$',',','"'
      001164                       3196 STRCQ:
      001164 CD 01 38         [ 4] 3197         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



      001167 00 22                 3198         .word     34	; "
      001169 CD 0D 31         [ 4] 3199         CALL     PARSE
      00116C CD 08 23         [ 4] 3200         CALL     HERE
      00116F CD 08 E4         [ 4] 3201         CALL     PACKS   ;string to code dictionary
      001172 CD 08 0C         [ 4] 3202         CALL     COUNT
      001175 CD 04 23         [ 4] 3203         CALL     PLUS    ;calculate aligned end of string
      001178 CD 03 A3         [ 4] 3204         CALL     CPP
      00117B CC 01 A9         [ 2] 3205         JP     STORE
                                   3206 
                                   3207 ;; Structures
                                   3208 
                                   3209 ;       FOR     ( -- a )
                                   3210 ;       Start a FOR-NEXT loop
                                   3211 ;       structure in a colon definition.
      00117E 11 60                 3212         .word      LINK
                           001180  3213 LINK = . 
      001180 83                    3214 	.byte      IMEDD+3
      001181 46 4F 52              3215         .ascii     "FOR"
      001184                       3216 FOR:
      001184 CD 11 36         [ 4] 3217         CALL     COMPI
      001187 CD 02 30         [ 4] 3218         CALL     TOR
      00118A CC 08 23         [ 2] 3219         JP     HERE
                                   3220 
                                   3221 ;       NEXT    ( a -- )
                                   3222 ;       Terminate a FOR-NEXT loop.
      00118D 11 80                 3223         .word      LINK
                           00118F  3224 LINK = . 
      00118F 84                    3225 	.byte      IMEDD+4
      001190 4E 45 58 54           3226         .ascii     "NEXT"
      001194                       3227 NEXT:
      001194 CD 11 36         [ 4] 3228         CALL     COMPI
      001197 CD 01 4C         [ 4] 3229         CALL     DONXT
      00119A CC 10 F1         [ 2] 3230         JP     COMMA
                                   3231 
                                   3232 ;       BEGIN   ( -- a )
                                   3233 ;       Start an infinite or
                                   3234 ;       indefinite loop structure.
      00119D 11 8F                 3235         .word      LINK
                           00119F  3236 LINK = . 
      00119F 85                    3237 	.byte      IMEDD+5
      0011A0 42 45 47 49 4E        3238         .ascii     "BEGIN"
      0011A5                       3239 BEGIN:
      0011A5 CC 08 23         [ 2] 3240         JP     HERE
                                   3241 
                                   3242 ;       UNTIL   ( a -- )
                                   3243 ;       Terminate a BEGIN-UNTIL
                                   3244 ;       indefinite loop structure.
      0011A8 11 9F                 3245         .word      LINK
                           0011AA  3246 LINK = . 
      0011AA 85                    3247 	.byte      IMEDD+5
      0011AB 55 4E 54 49 4C        3248         .ascii     "UNTIL"
      0011B0                       3249 UNTIL:
      0011B0 CD 11 36         [ 4] 3250         CALL     COMPI
      0011B3 CD 01 6B         [ 4] 3251         CALL     QBRAN
      0011B6 CC 10 F1         [ 2] 3252         JP     COMMA
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



                                   3253 
                                   3254 ;       AGAIN   ( a -- )
                                   3255 ;       Terminate a BEGIN-AGAIN
                                   3256 ;       infinite loop structure.
      0011B9 11 AA                 3257         .word      LINK
                           0011BB  3258 LINK = . 
      0011BB 85                    3259 	.byte      IMEDD+5
      0011BC 41 47 41 49 4E        3260         .ascii     "AGAIN"
      0011C1                       3261 AGAIN:
      0011C1 CD 11 36         [ 4] 3262         CALL     COMPI
      0011C4 CD 01 82         [ 4] 3263         CALL     BRAN
      0011C7 CC 10 F1         [ 2] 3264         JP     COMMA
                                   3265 
                                   3266 ;       IF      ( -- A )
                                   3267 ;       Begin a conditional branch.
      0011CA 11 BB                 3268         .word      LINK
                           0011CC  3269 LINK = . 
      0011CC 82                    3270 	.byte      IMEDD+2
      0011CD 49 46                 3271         .ascii     "IF"
      0011CF                       3272 IFF:
      0011CF CD 11 36         [ 4] 3273         CALL     COMPI
      0011D2 CD 01 6B         [ 4] 3274         CALL     QBRAN
      0011D5 CD 08 23         [ 4] 3275         CALL     HERE
      0011D8 CD 07 36         [ 4] 3276         CALL     ZERO
      0011DB CC 10 F1         [ 2] 3277         JP     COMMA
                                   3278 
                                   3279 ;       THEN        ( A -- )
                                   3280 ;       Terminate a conditional branch structure.
      0011DE 11 CC                 3281         .word      LINK
                           0011E0  3282 LINK = . 
      0011E0 84                    3283 	.byte      IMEDD+4
      0011E1 54 48 45 4E           3284         .ascii     "THEN"
      0011E5                       3285 THENN:
      0011E5 CD 08 23         [ 4] 3286         CALL     HERE
      0011E8 CD 02 77         [ 4] 3287         CALL     SWAPP
      0011EB CC 01 A9         [ 2] 3288         JP     STORE
                                   3289 
                                   3290 ;       ELSE        ( A -- A )
                                   3291 ;       Start the false clause in an IF-ELSE-THEN structure.
      0011EE 11 E0                 3292         .word      LINK
                           0011F0  3293 LINK = . 
      0011F0 84                    3294 	.byte      IMEDD+4
      0011F1 45 4C 53 45           3295         .ascii     "ELSE"
      0011F5                       3296 ELSEE:
      0011F5 CD 11 36         [ 4] 3297         CALL     COMPI
      0011F8 CD 01 82         [ 4] 3298         CALL     BRAN
      0011FB CD 08 23         [ 4] 3299         CALL     HERE
      0011FE CD 07 36         [ 4] 3300         CALL     ZERO
      001201 CD 10 F1         [ 4] 3301         CALL     COMMA
      001204 CD 02 77         [ 4] 3302         CALL     SWAPP
      001207 CD 08 23         [ 4] 3303         CALL     HERE
      00120A CD 02 77         [ 4] 3304         CALL     SWAPP
      00120D CC 01 A9         [ 2] 3305         JP     STORE
                                   3306 
                                   3307 ;       AHEAD       ( -- A )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3308 ;       Compile a forward branch instruction.
      001210 11 F0                 3309         .word      LINK
                           001212  3310 LINK = . 
      001212 85                    3311 	.byte      IMEDD+5
      001213 41 48 45 41 44        3312         .ascii     "AHEAD"
      001218                       3313 AHEAD:
      001218 CD 11 36         [ 4] 3314         CALL     COMPI
      00121B CD 01 82         [ 4] 3315         CALL     BRAN
      00121E CD 08 23         [ 4] 3316         CALL     HERE
      001221 CD 07 36         [ 4] 3317         CALL     ZERO
      001224 CC 10 F1         [ 2] 3318         JP     COMMA
                                   3319 
                                   3320 ;       WHILE       ( a -- A a )
                                   3321 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      001227 12 12                 3322         .word      LINK
                           001229  3323 LINK = . 
      001229 85                    3324 	.byte      IMEDD+5
      00122A 57 48 49 4C 45        3325         .ascii     "WHILE"
      00122F                       3326 WHILE:
      00122F CD 11 36         [ 4] 3327         CALL     COMPI
      001232 CD 01 6B         [ 4] 3328         CALL     QBRAN
      001235 CD 08 23         [ 4] 3329         CALL     HERE
      001238 CD 07 36         [ 4] 3330         CALL     ZERO
      00123B CD 10 F1         [ 4] 3331         CALL     COMMA
      00123E CC 02 77         [ 2] 3332         JP     SWAPP
                                   3333 
                                   3334 ;       REPEAT      ( A a -- )
                                   3335 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001241 12 29                 3336         .word      LINK
                           001243  3337 LINK = . 
      001243 86                    3338         .byte      IMEDD+6
      001244 52 45 50 45 41 54     3339         .ascii     "REPEAT"
      00124A                       3340 REPEA:
      00124A CD 11 36         [ 4] 3341         CALL     COMPI
      00124D CD 01 82         [ 4] 3342         CALL     BRAN
      001250 CD 10 F1         [ 4] 3343         CALL     COMMA
      001253 CD 08 23         [ 4] 3344         CALL     HERE
      001256 CD 02 77         [ 4] 3345         CALL     SWAPP
      001259 CC 01 A9         [ 2] 3346         JP     STORE
                                   3347 
                                   3348 ;       AFT         ( a -- a A )
                                   3349 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      00125C 12 43                 3350         .word      LINK
                           00125E  3351 LINK = . 
      00125E 83                    3352 	.byte      IMEDD+3
      00125F 41 46 54              3353         .ascii     "AFT"
      001262                       3354 AFT:
      001262 CD 02 5D         [ 4] 3355         CALL     DROP
      001265 CD 12 18         [ 4] 3356         CALL     AHEAD
      001268 CD 08 23         [ 4] 3357         CALL     HERE
      00126B CC 02 77         [ 2] 3358         JP     SWAPP
                                   3359 
                                   3360 ;       ABORT"      ( -- ; <string> )
                                   3361 ;       Conditional abort with an error message.
      00126E 12 5E                 3362         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                           001270  3363 LINK = . 
      001270 86                    3364 	.byte      IMEDD+6
      001271 41 42 4F 52 54        3365         .ascii     "ABORT"
      001276 22                    3366         .byte      '"'
      001277                       3367 ABRTQ:
      001277 CD 11 36         [ 4] 3368         CALL     COMPI
      00127A CD 0F B7         [ 4] 3369         CALL     ABORQ
      00127D CC 11 64         [ 2] 3370         JP     STRCQ
                                   3371 
                                   3372 ;       $"     ( -- ; <string> )
                                   3373 ;       Compile an inline string literal.
      001280 12 70                 3374         .word      LINK
                           001282  3375 LINK = . 
      001282 82                    3376 	.byte      IMEDD+2
      001283 24 22                 3377         .byte     '$','"'
      001285                       3378 STRQ:
      001285 CD 11 36         [ 4] 3379         CALL     COMPI
      001288 CD 0B D1         [ 4] 3380         CALL     STRQP
      00128B CC 11 64         [ 2] 3381         JP     STRCQ
                                   3382 
                                   3383 ;       ."          ( -- ; <string> )
                                   3384 ;       Compile an inline string literal to be typed out at run time.
      00128E 12 82                 3385         .word      LINK
                           001290  3386 LINK = . 
      001290 82                    3387 	.byte      IMEDD+2
      001291 2E 22                 3388         .byte     '.','"'
      001293                       3389 DOTQ:
      001293 CD 11 36         [ 4] 3390         CALL     COMPI
      001296 CD 0B DB         [ 4] 3391         CALL     DOTQP
      001299 CC 11 64         [ 2] 3392         JP     STRCQ
                                   3393 
                                   3394 ;; Name compiler
                                   3395 
                                   3396 ;       ?UNIQUE ( a -- a )
                                   3397 ;       Display a warning message
                                   3398 ;       if word already exists.
      00129C 12 90                 3399         .word      LINK
                           00129E  3400 LINK = . 
      00129E 07                    3401         .byte      7
      00129F 3F 55 4E 49 51 55 45  3402         .ascii     "?UNIQUE"
      0012A6                       3403 UNIQU:
      0012A6 CD 02 67         [ 4] 3404         CALL     DUPP
      0012A9 CD 0E AB         [ 4] 3405         CALL     NAMEQ   ;?name exists
      0012AC CD 01 6B         [ 4] 3406         CALL     QBRAN
      0012AF 12 C5                 3407         .word      UNIQ1
      0012B1 CD 0B DB         [ 4] 3408         CALL     DOTQP   ;redef are OK
      0012B4 07                    3409         .byte       7
      0012B5 20 72 65 44 65 66 20  3410         .ascii     " reDef "       
      0012BC CD 02 91         [ 4] 3411         CALL     OVER
      0012BF CD 08 0C         [ 4] 3412         CALL     COUNT
      0012C2 CD 0B 7E         [ 4] 3413         CALL     TYPES   ;just in case
      0012C5 CC 02 5D         [ 2] 3414 UNIQ1:  JP     DROP
                                   3415 
                                   3416 ;       $,n     ( na -- )
                                   3417 ;       Build a new dictionary name
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3418 ;       using string at na.
      0012C8 12 9E                 3419         .word      LINK
                           0012CA  3420 LINK = . 
      0012CA 03                    3421         .byte      3
      0012CB 24 2C 6E              3422         .ascii     "$,n"
      0012CE                       3423 SNAME:
      0012CE CD 02 67         [ 4] 3424         CALL     DUPP
      0012D1 CD 01 DE         [ 4] 3425         CALL     CAT     ;?null input
      0012D4 CD 01 6B         [ 4] 3426         CALL     QBRAN
      0012D7 13 04                 3427         .word      PNAM1
      0012D9 CD 12 A6         [ 4] 3428         CALL     UNIQU   ;?redefinition
      0012DC CD 02 67         [ 4] 3429         CALL     DUPP
      0012DF CD 08 0C         [ 4] 3430         CALL     COUNT
      0012E2 CD 04 23         [ 4] 3431         CALL     PLUS
      0012E5 CD 03 A3         [ 4] 3432         CALL     CPP
      0012E8 CD 01 A9         [ 4] 3433         CALL     STORE
      0012EB CD 02 67         [ 4] 3434         CALL     DUPP
      0012EE CD 03 C2         [ 4] 3435         CALL     LAST
      0012F1 CD 01 A9         [ 4] 3436         CALL     STORE   ;save na for vocabulary link
      0012F4 CD 06 E6         [ 4] 3437         CALL     CELLM   ;link address
      0012F7 CD 03 95         [ 4] 3438         CALL     CNTXT
      0012FA CD 01 C0         [ 4] 3439         CALL     AT
      0012FD CD 02 77         [ 4] 3440         CALL     SWAPP
      001300 CD 01 A9         [ 4] 3441         CALL     STORE
      001303 81               [ 4] 3442         RET     ;save code pointer
      001304 CD 0B D1         [ 4] 3443 PNAM1:  CALL     STRQP
      001307 05                    3444         .byte      5
      001308 20 6E 61 6D 65        3445         .ascii     " name" ;null input
      00130D CC 0F BF         [ 2] 3446         JP     ABOR1
                                   3447 
                                   3448 ;; FORTH compiler
                                   3449 
                                   3450 ;       $COMPILE        ( a -- )
                                   3451 ;       Compile next word to
                                   3452 ;       dictionary as a token or literal.
      001310 12 CA                 3453         .word      LINK
                           001312  3454 LINK = . 
      001312 08                    3455         .byte      8
      001313 24 43 4F 4D 50 49 4C  3456         .ascii     "$COMPILE"
             45
      00131B                       3457 SCOMP:
      00131B CD 0E AB         [ 4] 3458         CALL     NAMEQ
      00131E CD 03 D2         [ 4] 3459         CALL     QDUP    ;?defined
      001321 CD 01 6B         [ 4] 3460         CALL     QBRAN
      001324 13 3C                 3461         .word      SCOM2
      001326 CD 01 C0         [ 4] 3462         CALL     AT
      001329 CD 01 38         [ 4] 3463         CALL     DOLIT
      00132C 80 00                 3464         .word     0x8000	;  IMEDD*256
      00132E CD 02 B3         [ 4] 3465         CALL     ANDD    ;?immediate
      001331 CD 01 6B         [ 4] 3466         CALL     QBRAN
      001334 13 39                 3467         .word      SCOM1
      001336 CC 01 92         [ 2] 3468         JP     EXECU
      001339 CC 13 82         [ 2] 3469 SCOM1:  JP     JSRC
      00133C CD 0A 49         [ 4] 3470 SCOM2:  CALL     NUMBQ   ;try to convert to number
      00133F CD 01 6B         [ 4] 3471         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001342 0F BF                 3472         .word      ABOR1
      001344 CC 11 55         [ 2] 3473         JP     LITER
                                   3474 
                                   3475 ;       OVERT   ( -- )
                                   3476 ;       Link a new word into vocabulary.
      001347 13 12                 3477         .word      LINK
                           001349  3478 LINK = . 
      001349 05                    3479         .byte      5
      00134A 4F 56 45 52 54        3480         .ascii     "OVERT"
      00134F                       3481 OVERT:
      00134F CD 03 C2         [ 4] 3482         CALL     LAST
      001352 CD 01 C0         [ 4] 3483         CALL     AT
      001355 CD 03 95         [ 4] 3484         CALL     CNTXT
      001358 CC 01 A9         [ 2] 3485         JP     STORE
                                   3486 
                                   3487 ;       ;       ( -- )
                                   3488 ;       Terminate a colon definition.
      00135B 13 49                 3489         .word      LINK
                           00135D  3490 LINK = . 
      00135D C1                    3491 	.byte      IMEDD+COMPO+1
      00135E 3B                    3492         .ascii     ";"
      00135F                       3493 SEMIS:
      00135F CD 11 36         [ 4] 3494         CALL     COMPI
      001362 CD 01 A2         [ 4] 3495         CALL     EXIT
      001365 CD 10 20         [ 4] 3496         CALL     LBRAC
      001368 CC 13 4F         [ 2] 3497         JP     OVERT
                                   3498 
                                   3499 ;       ]       ( -- )
                                   3500 ;       Start compiling words in
                                   3501 ;       input stream.
      00136B 13 5D                 3502         .word      LINK
                           00136D  3503 LINK = . 
      00136D 01                    3504         .byte      1
      00136E 5D                    3505         .ascii     "]"
      00136F                       3506 RBRAC:
      00136F CD 01 38         [ 4] 3507         CALL     DOLIT
      001372 13 1B                 3508         .word      SCOMP
      001374 CD 03 73         [ 4] 3509         CALL     TEVAL
      001377 CC 01 A9         [ 2] 3510         JP     STORE
                                   3511 
                                   3512 ;       CALL,    ( ca -- )
                                   3513 ;       Compile a subroutine call.
      00137A 13 6D                 3514         .word      LINK
                           00137C  3515 LINK = . 
      00137C 04                    3516         .byte      4
      00137D 43 41 4C 4C 2C        3517         .ascii     "CALL,"
      001382                       3518 JSRC:
      001382 CD 01 38         [ 4] 3519         CALL     DOLIT
      001385 00 CD                 3520         .word     CALLL     ;CALL
      001387 CD 11 08         [ 4] 3521         CALL     CCOMMA
      00138A CC 10 F1         [ 2] 3522         JP     COMMA
                                   3523 
                                   3524 ;       :       ( -- ; <string> )
                                   3525 ;       Start a new colon definition
                                   3526 ;       using next word as its name.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



      00138D 13 7C                 3527         .word      LINK
                           00138F  3528 LINK = . 
      00138F 01                    3529         .byte      1
      001390 3A                    3530         .ascii     ":"
      001391                       3531 COLON:
      001391 CD 0D AE         [ 4] 3532         CALL     TOKEN
      001394 CD 12 CE         [ 4] 3533         CALL     SNAME
      001397 CC 13 6F         [ 2] 3534         JP     RBRAC
                                   3535 
                                   3536 ;       IMMEDIATE       ( -- )
                                   3537 ;       Make last compiled word
                                   3538 ;       an immediate word.
      00139A 13 8F                 3539         .word      LINK
                           00139C  3540 LINK = . 
      00139C 09                    3541         .byte      9
      00139D 49 4D 4D 45 44 49 41  3542         .ascii     "IMMEDIATE"
             54 45
      0013A6                       3543 IMMED:
      0013A6 CD 01 38         [ 4] 3544         CALL     DOLIT
      0013A9 80 00                 3545         .word     0x8000	;  IMEDD*256
      0013AB CD 03 C2         [ 4] 3546         CALL     LAST
      0013AE CD 01 C0         [ 4] 3547         CALL     AT
      0013B1 CD 01 C0         [ 4] 3548         CALL     AT
      0013B4 CD 02 C7         [ 4] 3549         CALL     ORR
      0013B7 CD 03 C2         [ 4] 3550         CALL     LAST
      0013BA CD 01 C0         [ 4] 3551         CALL     AT
      0013BD CC 01 A9         [ 2] 3552         JP     STORE
                                   3553 
                                   3554 ;; Defining words
                                   3555 
                                   3556 ;       CREATE  ( -- ; <string> )
                                   3557 ;       Compile a new array
                                   3558 ;       without allocating space.
      0013C0 13 9C                 3559         .word      LINK
                           0013C2  3560 LINK = . 
      0013C2 06                    3561         .byte      6
      0013C3 43 52 45 41 54 45     3562         .ascii     "CREATE"
      0013C9                       3563 CREAT:
      0013C9 CD 0D AE         [ 4] 3564         CALL     TOKEN
      0013CC CD 12 CE         [ 4] 3565         CALL     SNAME
      0013CF CD 13 4F         [ 4] 3566         CALL     OVERT        
      0013D2 CD 11 36         [ 4] 3567         CALL     COMPI 
      0013D5 CD 03 14         [ 4] 3568         CALL     DOVAR
      0013D8 81               [ 4] 3569         RET
                                   3570 
                                   3571 ;       VARIABLE        ( -- ; <string> )
                                   3572 ;       Compile a new variable
                                   3573 ;       initialized to 0.
      0013D9 13 C2                 3574         .word      LINK
                           0013DB  3575 LINK = . 
      0013DB 08                    3576         .byte      8
      0013DC 56 41 52 49 41 42 4C  3577         .ascii     "VARIABLE"
             45
      0013E4                       3578 VARIA:
                           000001  3579 .if PICATOUT_MOD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



                                   3580 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      0013E4 CD 08 23         [ 4] 3581         CALL HERE
      0013E7 CD 02 67         [ 4] 3582         CALL DUPP 
      0013EA CD 06 D7         [ 4] 3583         CALL CELLP 
      0013ED CD 03 A3         [ 4] 3584         CALL CPP 
      0013F0 CD 01 A9         [ 4] 3585         CALL STORE 
                                   3586 .endif         
      0013F3 CD 13 C9         [ 4] 3587         CALL     CREAT
      0013F6 CD 02 67         [ 4] 3588         CALL DUPP
      0013F9 CD 10 F1         [ 4] 3589         CALL COMMA
      0013FC CD 07 36         [ 4] 3590         CALL     ZERO
                           000001  3591 .if PICATOUT_MOD 
      0013FF CD 02 77         [ 4] 3592         call SWAPP 
      001402 CD 01 A9         [ 4] 3593         CALL   STORE 
      001405 CD 1A 73         [ 4] 3594         CALL FMOVE ; move definition to FLASH
      001408 81               [ 4] 3595         RET 
                                   3596 .endif ;PICATOUT_MOD        
                                   3597 
                           000001  3598 .if PICATOUT_MOD
                                   3599 ;       CONSTANT  ( n -- ; <string> )
                                   3600 ;       Compile a new constant 
                                   3601 ;       n CONSTANT name 
      001409 13 DB                 3602         .word LINK 
                           00140B  3603         LINK=. 
      00140B 08                    3604         .byte 8 
      00140C 43 4F 4E 53 54 41 4E  3605         .ascii "CONSTANT" 
             54
      001414                       3606 constant:          
      001414 CD 0D AE         [ 4] 3607         CALL TOKEN
      001417 CD 12 CE         [ 4] 3608         CALL SNAME 
      00141A CD 13 4F         [ 4] 3609         CALL OVERT 
      00141D CD 11 36         [ 4] 3610         CALL COMPI 
      001420 CD 14 31         [ 4] 3611         CALL DOCONST
      001423 CD 10 F1         [ 4] 3612         CALL COMMA 
      001426 81               [ 4] 3613         RET          
                                   3614 
                                   3615 ; CONSTANT runtime semantic 
                                   3616 ; doCONST  ( -- n )
      001427 14 0B                 3617         .word LINK 
                           001429  3618         LINK=.
      001429 07                    3619         .byte 7
      00142A 44 4F 43 4F 4E 53 54  3620         .ascii "DOCONST"
      001431                       3621 DOCONST:
      001431 1D 00 02         [ 2] 3622         subw x,#CELLL
      001434 90 85            [ 2] 3623         popw y 
      001436 90 FE            [ 2] 3624         ldw y,(y) 
      001438 FF               [ 2] 3625         ldw (x),y 
      001439 81               [ 4] 3626         ret 
                                   3627 .endif ;PICATOUT_MOD
                                   3628 
                                   3629 
                                   3630 ;; Tools
                                   3631 
                                   3632 ;       _TYPE   ( b u -- )
                                   3633 ;       Display a string. Filter
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3634 ;       non-printing characters.
      00143A 14 29                 3635         .word      LINK
                           00143C  3636 LINK = . 
      00143C 05                    3637         .byte      5
      00143D 5F 54 59 50 45        3638         .ascii     "_TYPE"
      001442                       3639 UTYPE:
      001442 CD 02 30         [ 4] 3640         CALL     TOR     ;start count down loop
      001445 20 0F            [ 2] 3641         JRA     UTYP2   ;skip first pass
      001447 CD 02 67         [ 4] 3642 UTYP1:  CALL     DUPP
      00144A CD 01 DE         [ 4] 3643         CALL     CAT
      00144D CD 07 60         [ 4] 3644         CALL     TCHAR
      001450 CD 01 22         [ 4] 3645         CALL     EMIT    ;display only printable
      001453 CD 07 02         [ 4] 3646         CALL     ONEP    ;increment address
      001456 CD 01 4C         [ 4] 3647 UTYP2:  CALL     DONXT
      001459 14 47                 3648         .word      UTYP1   ;loop till done
      00145B CC 02 5D         [ 2] 3649         JP     DROP
                                   3650 
                                   3651 ;       dm+     ( a u -- a )
                                   3652 ;       Dump u bytes from ,
                                   3653 ;       leaving a+u on  stack.
      00145E 14 3C                 3654         .word      LINK
                           001460  3655 LINK = . 
      001460 03                    3656         .byte      3
      001461 64 6D 2B              3657         .ascii     "dm+"
      001464                       3658 DUMPP:
      001464 CD 02 91         [ 4] 3659         CALL     OVER
      001467 CD 01 38         [ 4] 3660         CALL     DOLIT
      00146A 00 04                 3661         .word      4
      00146C CD 0C 04         [ 4] 3662         CALL     UDOTR   ;display address
      00146F CD 0B 54         [ 4] 3663         CALL     SPACE
      001472 CD 02 30         [ 4] 3664         CALL     TOR     ;start count down loop
      001475 20 11            [ 2] 3665         JRA     PDUM2   ;skip first pass
      001477 CD 02 67         [ 4] 3666 PDUM1:  CALL     DUPP
      00147A CD 01 DE         [ 4] 3667         CALL     CAT
      00147D CD 01 38         [ 4] 3668         CALL     DOLIT
      001480 00 03                 3669         .word      3
      001482 CD 0C 04         [ 4] 3670         CALL     UDOTR   ;display numeric data
      001485 CD 07 02         [ 4] 3671         CALL     ONEP    ;increment address
      001488 CD 01 4C         [ 4] 3672 PDUM2:  CALL     DONXT
      00148B 14 77                 3673         .word      PDUM1   ;loop till done
      00148D 81               [ 4] 3674         RET
                                   3675 
                                   3676 ;       DUMP    ( a u -- )
                                   3677 ;       Dump u bytes from a,
                                   3678 ;       in a formatted manner.
      00148E 14 60                 3679         .word      LINK
                           001490  3680 LINK = . 
      001490 04                    3681         .byte      4
      001491 44 55 4D 50           3682         .ascii     "DUMP"
      001495                       3683 DUMP:
      001495 CD 03 24         [ 4] 3684         CALL     BASE
      001498 CD 01 C0         [ 4] 3685         CALL     AT
      00149B CD 02 30         [ 4] 3686         CALL     TOR
      00149E CD 09 DC         [ 4] 3687         CALL     HEX     ;save radix, set hex
      0014A1 CD 01 38         [ 4] 3688         CALL     DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0014A4 00 10                 3689         .word      16
      0014A6 CD 06 28         [ 4] 3690         CALL     SLASH   ;change count to lines
      0014A9 CD 02 30         [ 4] 3691         CALL     TOR     ;start count down loop
      0014AC CD 0B 9C         [ 4] 3692 DUMP1:  CALL     CR
      0014AF CD 01 38         [ 4] 3693         CALL     DOLIT
      0014B2 00 10                 3694         .word      16
      0014B4 CD 04 0E         [ 4] 3695         CALL     DDUP
      0014B7 CD 14 64         [ 4] 3696         CALL     DUMPP   ;display numeric
      0014BA CD 03 E3         [ 4] 3697         CALL     ROT
      0014BD CD 03 E3         [ 4] 3698         CALL     ROT
      0014C0 CD 0B 54         [ 4] 3699         CALL     SPACE
      0014C3 CD 0B 54         [ 4] 3700         CALL     SPACE
      0014C6 CD 14 42         [ 4] 3701         CALL     UTYPE   ;display printable characters
      0014C9 CD 01 4C         [ 4] 3702         CALL     DONXT
      0014CC 14 AC                 3703         .word      DUMP1   ;loop till done
      0014CE CD 02 5D         [ 4] 3704 DUMP3:  CALL     DROP
      0014D1 CD 02 11         [ 4] 3705         CALL     RFROM
      0014D4 CD 03 24         [ 4] 3706         CALL     BASE
      0014D7 CC 01 A9         [ 2] 3707         JP     STORE   ;restore radix
                                   3708 
                                   3709 ;       .S      ( ... -- ... )
                                   3710 ;        Display  contents of stack.
      0014DA 14 90                 3711         .word      LINK
                           0014DC  3712 LINK = . 
      0014DC 02                    3713         .byte      2
      0014DD 2E 53                 3714         .ascii     ".S"
      0014DF                       3715 DOTS:
      0014DF CD 0B 9C         [ 4] 3716         CALL     CR
      0014E2 CD 07 79         [ 4] 3717         CALL     DEPTH   ;stack depth
      0014E5 CD 02 30         [ 4] 3718         CALL     TOR     ;start count down loop
      0014E8 20 0C            [ 2] 3719         JRA     DOTS2   ;skip first pass
      0014EA CD 02 24         [ 4] 3720 DOTS1:  CALL     RAT
      0014ED CD 07 02         [ 4] 3721         CALL ONEP
      0014F0 CD 07 90         [ 4] 3722 	CALL     PICK
      0014F3 CD 0C 37         [ 4] 3723         CALL     DOT     ;index stack, display contents
      0014F6 CD 01 4C         [ 4] 3724 DOTS2:  CALL     DONXT
      0014F9 14 EA                 3725         .word      DOTS1   ;loop till done
      0014FB CD 0B DB         [ 4] 3726         CALL     DOTQP
      0014FE 05                    3727         .byte      5
      0014FF 20 3C 73 70 20        3728         .ascii     " <sp "
      001504 81               [ 4] 3729         RET
                                   3730 
                                   3731 ;       >NAME   ( ca -- na | F )
                                   3732 ;       Convert code address
                                   3733 ;       to a name address.
      001505 14 DC                 3734         .word      LINK
                           001507  3735 LINK = . 
      001507 05                    3736         .byte      5
      001508 3E 4E 41 4D 45        3737         .ascii     ">NAME"
      00150D                       3738 TNAME:
      00150D CD 03 95         [ 4] 3739         CALL     CNTXT   ;vocabulary link
      001510 CD 01 C0         [ 4] 3740 TNAM2:  CALL     AT
      001513 CD 02 67         [ 4] 3741         CALL     DUPP    ;?last word in a vocabulary
      001516 CD 01 6B         [ 4] 3742         CALL     QBRAN
      001519 15 34                 3743         .word      TNAM4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00151B CD 04 0E         [ 4] 3744         CALL     DDUP
      00151E CD 0D BC         [ 4] 3745         CALL     NAMET
      001521 CD 02 DC         [ 4] 3746         CALL     XORR    ;compare
      001524 CD 01 6B         [ 4] 3747         CALL     QBRAN
      001527 15 2E                 3748         .word      TNAM3
      001529 CD 06 E6         [ 4] 3749         CALL     CELLM   ;continue with next word
      00152C 20 E2            [ 2] 3750         JRA     TNAM2
      00152E CD 02 77         [ 4] 3751 TNAM3:  CALL     SWAPP
      001531 CC 02 5D         [ 2] 3752         JP     DROP
      001534 CD 04 03         [ 4] 3753 TNAM4:  CALL     DDROP
      001537 CC 07 36         [ 2] 3754         JP     ZERO
                                   3755 
                                   3756 ;       .ID     ( na -- )
                                   3757 ;        Display  name at address.
      00153A 15 07                 3758         .word      LINK
                           00153C  3759 LINK = . 
      00153C 03                    3760         .byte      3
      00153D 2E 49 44              3761         .ascii     ".ID"
      001540                       3762 DOTID:
      001540 CD 03 D2         [ 4] 3763         CALL     QDUP    ;if zero no name
      001543 CD 01 6B         [ 4] 3764         CALL     QBRAN
      001546 15 56                 3765         .word      DOTI1
      001548 CD 08 0C         [ 4] 3766         CALL     COUNT
      00154B CD 01 38         [ 4] 3767         CALL     DOLIT
      00154E 00 1F                 3768         .word      0x1F
      001550 CD 02 B3         [ 4] 3769         CALL     ANDD    ;mask lexicon bits
      001553 CC 14 42         [ 2] 3770         JP     UTYPE
      001556 CD 0B DB         [ 4] 3771 DOTI1:  CALL     DOTQP
      001559 09                    3772         .byte      9
      00155A 20 6E 6F 4E 61 6D 65  3773         .ascii     " noName"
      001561 81               [ 4] 3774         RET
                                   3775 
                           000000  3776 WANT_SEE=0 
                           000000  3777 .if WANT_SEE 
                                   3778 ;       SEE     ( -- ; <string> )
                                   3779 ;       A simple decompiler.
                                   3780 ;       Updated for byte machines.
                                   3781         .word      LINK
                                   3782 LINK = . 
                                   3783         .byte      3
                                   3784         .ascii     "SEE"
                                   3785 SEE:
                                   3786         CALL     TICK    ;starting address
                                   3787         CALL     CR
                                   3788         CALL     ONEM
                                   3789 SEE1:   CALL     ONEP
                                   3790         CALL     DUPP
                                   3791         CALL     AT
                                   3792         CALL     DUPP    ;?does it contain a zero
                                   3793         CALL     QBRAN
                                   3794         .word    SEE2
                                   3795         CALL     TNAME   ;?is it a name
                                   3796 SEE2:   CALL     QDUP    ;name address or zero
                                   3797         CALL     QBRAN
                                   3798         .word    SEE3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                                   3799         CALL     SPACE
                                   3800         CALL     DOTID   ;display name
                                   3801         CALL     ONEP
                                   3802         JRA      SEE4
                                   3803 SEE3:   CALL     DUPP
                                   3804         CALL     CAT
                                   3805         CALL     UDOT    ;display number
                                   3806 SEE4:   CALL     NUFQ    ;user control
                                   3807         CALL     QBRAN
                                   3808         .word    SEE1
                                   3809         JP     DROP
                                   3810 .endif ; WANT_SEE 
                                   3811 
                                   3812 ;       WORDS   ( -- )
                                   3813 ;       Display names in vocabulary.
      001562 15 3C                 3814         .word      LINK
                           001564  3815 LINK = . 
      001564 05                    3816         .byte      5
      001565 57 4F 52 44 53        3817         .ascii     "WORDS"
      00156A                       3818 WORDS:
      00156A CD 0B 9C         [ 4] 3819         CALL     CR
      00156D CD 03 95         [ 4] 3820         CALL     CNTXT   ;only in context
      001570 CD 01 C0         [ 4] 3821 WORS1:  CALL     AT
      001573 CD 03 D2         [ 4] 3822         CALL     QDUP    ;?at end of list
      001576 CD 01 6B         [ 4] 3823         CALL     QBRAN
      001579 15 8F                 3824         .word      WORS2
      00157B CD 02 67         [ 4] 3825         CALL     DUPP
      00157E CD 0B 54         [ 4] 3826         CALL     SPACE
      001581 CD 15 40         [ 4] 3827         CALL     DOTID   ;display a name
      001584 CD 06 E6         [ 4] 3828         CALL     CELLM
      001587 CD 01 82         [ 4] 3829         CALL     BRAN
      00158A 15 70                 3830         .word      WORS1
      00158C CD 02 5D         [ 4] 3831         CALL     DROP
      00158F 81               [ 4] 3832 WORS2:  RET
                                   3833 
                                   3834         
                                   3835 ;; Hardware reset
                                   3836 
                                   3837 ;       hi      ( -- )
                                   3838 ;       Display sign-on message.
      001590 15 64                 3839         .word      LINK
                           001592  3840 LINK = . 
      001592 02                    3841         .byte      2
      001593 68 69                 3842         .ascii     "hi"
      001595                       3843 HI:
      001595 CD 0B 9C         [ 4] 3844         CALL     CR
      001598 CD 0B DB         [ 4] 3845         CALL     DOTQP   ;initialize I/O
      00159B 0F                    3846         .byte      15
      00159C 73 74 6D 38 65 46 6F  3847         .ascii     "stm8eForth v"
             72 74 68 20 76
      0015A8 32                    3848 	.byte      VER+'0'
      0015A9 2E                    3849         .byte      '.' 
      0015AA 31                    3850 	.byte      EXT+'0' ;version
      0015AB CC 0B 9C         [ 2] 3851         JP     CR
                                   3852 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                           000000  3853 WANT_DEBUG=0
                           000000  3854 .if WANT_DEBUG 
                                   3855 ;       DEBUG      ( -- )
                                   3856 ;       Display sign-on message.
                                   3857 ;        .word      LINK
                                   3858 LINK = . 
                                   3859         .byte      5
                                   3860         .ascii     "DEBUG"
                                   3861 DEBUG:
                                   3862 	CALL DOLIT
                                   3863 	.word 0x65
                                   3864 	CALL EMIT
                                   3865 	CALL DOLIT
                                   3866 	.word 0
                                   3867  	CALL ZLESS 
                                   3868 	CALL DOLIT
                                   3869 	.word 0xFFFE
                                   3870 	CALL ZLESS 
                                   3871 	CALL UPLUS 
                                   3872  	CALL DROP 
                                   3873 	CALL DOLIT
                                   3874 	.word 3
                                   3875 	CALL UPLUS 
                                   3876 	CALL UPLUS 
                                   3877  	CALL DROP
                                   3878 	CALL DOLIT
                                   3879 	.word 0x43
                                   3880 	CALL UPLUS 
                                   3881  	CALL DROP
                                   3882 	CALL EMIT
                                   3883 	CALL DOLIT
                                   3884 	.word 0x4F
                                   3885 	CALL DOLIT
                                   3886 	.word 0x6F
                                   3887  	CALL XORR
                                   3888 	CALL DOLIT
                                   3889 	.word 0xF0
                                   3890  	CALL ANDD
                                   3891 	CALL DOLIT
                                   3892 	.word 0x4F
                                   3893  	CALL ORR
                                   3894 	CALL EMIT
                                   3895 	CALL DOLIT
                                   3896 	.word 8
                                   3897 	CALL DOLIT
                                   3898 	.word 6
                                   3899  	CALL SWAPP
                                   3900 	CALL OVER
                                   3901 	CALL XORR
                                   3902 	CALL DOLIT
                                   3903 	.word 3
                                   3904 	CALL ANDD 
                                   3905 	CALL ANDD
                                   3906 	CALL DOLIT
                                   3907 	.word 0x70
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



                                   3908 	CALL UPLUS 
                                   3909 	CALL DROP
                                   3910 	CALL EMIT
                                   3911 	CALL DOLIT
                                   3912 	.word 0
                                   3913 	CALL QBRAN
                                   3914 	.word DEBUG1
                                   3915 	CALL DOLIT
                                   3916 	.word 0x3F
                                   3917 DEBUG1:
                                   3918 	CALL DOLIT
                                   3919 	.word 0xFFFF
                                   3920 	CALL QBRAN
                                   3921 	.word DEBUG2
                                   3922 	CALL DOLIT
                                   3923 	.word 0x74
                                   3924 	CALL BRAN
                                   3925 	.word DEBUG3
                                   3926 DEBUG2:
                                   3927 	CALL DOLIT
                                   3928 	.word 0x21
                                   3929 DEBUG3:
                                   3930 	CALL EMIT
                                   3931 	CALL DOLIT
                                   3932 	.word 0x68
                                   3933 	CALL DOLIT
                                   3934 	.word 0x80
                                   3935 	CALL STORE
                                   3936 	CALL DOLIT
                                   3937 	.word 0x80
                                   3938 	CALL AT
                                   3939 	CALL EMIT
                                   3940 	CALL DOLIT
                                   3941 	.word 0x4D
                                   3942 	CALL TOR
                                   3943 	CALL RAT
                                   3944 	CALL RFROM
                                   3945 	CALL ANDD
                                   3946 	CALL EMIT
                                   3947 	CALL DOLIT
                                   3948 	.word 0x61
                                   3949 	CALL DOLIT
                                   3950 	.word 0xA
                                   3951 	CALL TOR
                                   3952 DEBUG4:
                                   3953 	CALL DOLIT
                                   3954 	.word 1
                                   3955 	CALL UPLUS 
                                   3956 	CALL DROP
                                   3957 	CALL DONXT
                                   3958 	.word DEBUG4
                                   3959 	CALL EMIT
                                   3960 	CALL DOLIT
                                   3961 	.word 0x656D
                                   3962 	CALL DOLIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



                                   3963 	.word 0x100
                                   3964 	CALL UMSTA
                                   3965 	CALL SWAPP
                                   3966 	CALL DOLIT
                                   3967 	.word 0x100
                                   3968 	CALL UMSTA
                                   3969 	CALL SWAPP 
                                   3970 	CALL DROP
                                   3971 	CALL EMIT
                                   3972 	CALL EMIT
                                   3973 	CALL DOLIT
                                   3974 	.word 0x2043
                                   3975 	CALL DOLIT
                                   3976 	.word 0
                                   3977 	CALL DOLIT
                                   3978 	.word 0x100
                                   3979 	CALL UMMOD
                                   3980 	CALL EMIT
                                   3981 	CALL EMIT
                                   3982 	;JP ORIG
                                   3983 	RET
                                   3984 .endif ; WANT_DEBUG 
                                   3985 
                                   3986 
                                   3987 ;       'BOOT   ( -- a )
                                   3988 ;       The application startup vector.
      0015AE 15 92                 3989         .word      LINK
                           0015B0  3990 LINK = . 
      0015B0 05                    3991         .byte      5
      0015B1 27 42 4F 4F 54        3992         .ascii     "'BOOT"
      0015B6                       3993 TBOOT:
      0015B6 CD 03 14         [ 4] 3994         CALL     DOVAR
      0015B9 40 02                 3995         .word    APP_RUN      ;application to boot
                                   3996 
                                   3997 ;       COLD    ( -- )
                                   3998 ;       The hilevel cold start s=ence.
      0015BB 15 B0                 3999         .word      LINK
                           0015BD  4000 LINK = . 
      0015BD 04                    4001         .byte      4
      0015BE 43 4F 4C 44           4002         .ascii     "COLD"
      0015C2                       4003 COLD:
                           000000  4004 .if WANT_DEBUG
                                   4005         CALL DEBUG
                                   4006 .endif 
      0015C2 CD 01 38         [ 4] 4007 COLD1:  CALL     DOLIT
      0015C5 00 27                 4008         .word      UZERO
      0015C7 CD 01 38         [ 4] 4009 	CALL     DOLIT
      0015CA 00 06                 4010         .word      UPP
      0015CC CD 01 38         [ 4] 4011         CALL     DOLIT
      0015CF 00 16                 4012 	.word      UEND-UZERO
      0015D1 CD 08 70         [ 4] 4013         CALL     CMOVE   ;initialize user area
                                   4014 
                           000001  4015 .if PICATOUT_MOD
                                   4016 ; if APP_RUN==0 initialize with ca de 'hi'  
      0015D4 90 CE 40 02      [ 2] 4017         ldw y,APP_RUN 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      0015D8 26 15            [ 1] 4018         jrne 0$
      0015DA 1D 00 06         [ 2] 4019         subw x,#3*CELLL 
      0015DD 90 AE 40 02      [ 2] 4020         ldw y,#APP_RUN 
      0015E1 EF 02            [ 2] 4021         ldw (2,x),y
      0015E3 90 5F            [ 1] 4022         clrw y 
      0015E5 FF               [ 2] 4023         ldw (x),y
      0015E6 90 AE 15 95      [ 2] 4024         ldw y,#HI 
      0015EA EF 04            [ 2] 4025         ldw (4,x),y 
      0015EC CD 17 C3         [ 4] 4026         call ee_store 
      0015EF                       4027 0$:        
                                   4028 ; update LAST with APP_LAST 
                                   4029 ; if APP_LAST > LAST else do the opposite
      0015EF 90 CE 40 00      [ 2] 4030         ldw y,APP_LAST 
      0015F3 90 B3 1A         [ 2] 4031         cpw y,ULAST 
      0015F6 22 0E            [ 1] 4032         jrugt 1$ 
                                   4033 ; save LAST at APP_LAST  
      0015F8 CD 03 C2         [ 4] 4034         call LAST 
      0015FB CD 01 C0         [ 4] 4035         call AT  
      0015FE CD 16 86         [ 4] 4036         call eeprom 
      001601 CD 17 C3         [ 4] 4037         call ee_store 
      001604 20 03            [ 2] 4038         jra 2$
      001606                       4039 1$: ; update LAST with APP_LAST 
      001606 90 BF 1A         [ 2] 4040         ldw ULAST,y
      001609                       4041 2$:  
                                   4042 ; update APP_HERE if < app_space 
      001609 90 CE 40 04      [ 2] 4043         ldw y,APP_HERE 
      00160D 90 A3 1A 80      [ 2] 4044         cpw y,#app_space 
      001611 24 19            [ 1] 4045         jruge 3$ 
      001613 1D 00 06         [ 2] 4046         subw x,#6 
      001616 90 AE 1A 80      [ 2] 4047         ldw y,#app_space 
      00161A EF 04            [ 2] 4048         ldw (4,x),y 
      00161C 90 AE 40 04      [ 2] 4049         ldw y,#APP_HERE 
      001620 EF 02            [ 2] 4050         ldw (2,x),y
      001622 90 5F            [ 1] 4051         clrw y 
      001624 FF               [ 2] 4052         ldw (x),y
      001625 CD 17 C3         [ 4] 4053         call ee_store
      001628 90 AE 1A 80      [ 2] 4054         ldw y,#app_space
      00162C                       4055 3$:
      00162C 90 BF 18         [ 2] 4056         ldw UFCP,y         
                                   4057 ; update UCP with VAR_APP 
                                   4058 ; if VAR_APP>UCP else do the opposite 
      00162F 90 CE 40 06      [ 2] 4059         ldw y,VAR_HERE 
      001633 90 B3 16         [ 2] 4060         cpw y,UCP 
      001636 22 17            [ 1] 4061         jrugt 4$
      001638 CD 03 A3         [ 4] 4062         call CPP 
      00163B CD 01 C0         [ 4] 4063         call AT 
      00163E 1D 00 04         [ 2] 4064         subw x,#2*CELLL 
      001641 90 AE 40 06      [ 2] 4065         ldw y,#VAR_HERE 
      001645 EF 02            [ 2] 4066         ldw (2,x),y 
      001647 90 5F            [ 1] 4067         clrw y 
      001649 FF               [ 2] 4068         ldw (x),y 
      00164A CD 17 C3         [ 4] 4069         call ee_store
      00164D 20 03            [ 2] 4070         jra 6$
      00164F                       4071 4$: ; update UCP with VAR_HERE 
      00164F 90 BF 16         [ 2] 4072         ldw UCP,y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      001652                       4073 6$:      
                                   4074 .endif ; PICATOUT_MOD
      001652 CD 10 9F         [ 4] 4075         CALL     PRESE   ;initialize data stack and TIB
      001655 CD 15 B6         [ 4] 4076         CALL     TBOOT
      001658 CD 08 59         [ 4] 4077         CALL     ATEXE   ;application boot
      00165B CD 13 4F         [ 4] 4078         CALL     OVERT
      00165E CC 10 BC         [ 2] 4079         JP     QUIT    ;start interpretation
                                   4080 
                           000001  4081 .if PICATOUT_MOD
                                   4082         ; keep this include at end 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4083         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001661 15 BD                   30     .word LINK 
                           001663    31     LINK=.
      001663 03                      32     .byte 3 
      001664 46 50 21                33     .ascii "FP!"
      001667                         34 fptr_store:
      001667 90 93            [ 1]   35     ldw y,x
      001669 90 FE            [ 2]   36     ldw y,(y)
      00166B 90 9F            [ 1]   37     ld a,yl 
      00166D B7 2C            [ 1]   38     ld FPTR,a 
      00166F 1C 00 02         [ 2]   39     addw x,#CELLL 
      001672 90 93            [ 1]   40     ldw y,x 
      001674 90 FE            [ 2]   41     ldw y,(y)
      001676 90 BF 2D         [ 2]   42     ldw PTR16,y
      001679 1C 00 02         [ 2]   43     addw x,#CELLL 
      00167C 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      00167D 16 63                   51     .word LINK 
                           00167F    52 LINK=.
      00167F 06                      53     .byte 6 
      001680 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



      001686                         55 eeprom: 
      001686 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      00168A 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      00168D EF 02            [ 2]   58     ldw (2,x),y 
      00168F 90 5F            [ 1]   59     clrw y 
      001691 FF               [ 2]   60     ldw (x),y 
      001692 81               [ 4]   61     ret
                                     62 
                                     63 ;----------------------------------
                                     64 ; fetch integer at address over 65535
                                     65 ;  F@   ( ud -- n )
                                     66 ;----------------------------------
      001693 16 7F                   67     .word LINK 
                           001695    68 LINK=.
      001695 02                      69     .byte 2
      001696 46 40                   70     .ascii "F@"
      001698                         71 farat:
      001698 CD 16 67         [ 4]   72     call fptr_store
      00169B 92 BC 00 2C      [ 5]   73     ldf a,[FPTR]
      00169F 1D 00 02         [ 2]   74     subw x,#CELLL 
      0016A2 F7               [ 1]   75     ld (x),a 
      0016A3 90 AE 00 01      [ 2]   76     ldw y,#1
      0016A7 91 AF 00 2C      [ 1]   77     ldf a,([FPTR],y)
      0016AB E7 01            [ 1]   78     ld (1,x),a
      0016AD 81               [ 4]   79     ret 
                                     80 
                                     81 ;-------------------------------------
                                     82 ; fetch C at address over 65535 
                                     83 ; FC@ ( ud -- c)
                                     84 ;-------------------------------------
      0016AE 16 95                   85     .word LINK
                           0016B0    86     LINK=.
      0016B0 03                      87     .byte 3 
      0016B1 46 43 40                88     .ascii "FC@" 
      0016B4                         89 farcat:
      0016B4 CD 16 67         [ 4]   90     call fptr_store 
      0016B7 92 BC 00 2C      [ 5]   91     ldf a,[FPTR]
      0016BB 1D 00 02         [ 2]   92     subw x,#CELLL 
      0016BE E7 01            [ 1]   93     ld (1,x),a 
      0016C0 7F               [ 1]   94     clr (x)
      0016C1 81               [ 4]   95     ret 
                                     96     
                                     97 ;----------------------------------
                                     98 ; unlock EEPROM/OPT for writing/erasing
                                     99 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    100 ;  UNLKEE   ( -- )
                                    101 ;----------------------------------
      0016C2 16 B0                  102     .word LINK 
                           0016C4   103 LINK=.
      0016C4 06                     104     .byte 6 
      0016C5 55 4E 4C 4B 45 45      105     .ascii "UNLKEE"
      0016CB                        106 unlock_eeprom:
      0016CB 35 00 50 5B      [ 1]  107 	mov FLASH_CR2,#0 
      0016CF 35 FF 50 5C      [ 1]  108 	mov FLASH_NCR2,#0xFF 
      0016D3 35 AE 50 64      [ 1]  109 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



      0016D7 35 56 50 64      [ 1]  110     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      0016DB 72 07 50 5F FB   [ 2]  111 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      0016E0 81               [ 4]  112 	ret
                                    113 
                                    114 ;----------------------------------
                                    115 ; unlock FLASH for writing/erasing
                                    116 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    117 ; UNLKFL  ( -- )
                                    118 ;----------------------------------
      0016E1 16 C4                  119     .word LINK 
                           0016E3   120 LINK=. 
      0016E3 06                     121     .byte 6 
      0016E4 55 4E 4C 4B 46 4C      122     .ascii "UNLKFL"    
      0016EA                        123 unlock_flash:
      0016EA 35 00 50 5B      [ 1]  124 	mov FLASH_CR2,#0 
      0016EE 35 FF 50 5C      [ 1]  125 	mov FLASH_NCR2,#0xFF 
      0016F2 35 56 50 62      [ 1]  126 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      0016F6 35 AE 50 62      [ 1]  127 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      0016FA 72 03 50 5F FB   [ 2]  128 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      0016FF 81               [ 4]  129 	ret
                                    130 
                                    131 ;-----------------------------
                                    132 ; unlock FLASH or EEPROM 
                                    133 ; according to FPTR address 
                                    134 ;  UNLOCK ( -- )
                                    135 ;-----------------------------
      001700 16 E3                  136 	.word LINK 
                           001702   137 	LINK=.
      001702 06                     138 	.byte 6
      001703 55 4E 4C 4F 43 4B      139 	.ascii "UNLOCK"
      001709                        140 unlock:
                                    141 ; put addr[15:0] in Y, for bounds check.
      001709 90 BE 2D         [ 2]  142 	ldw y,PTR16   ; Y=addr15:0
                                    143 ; check addr[23:16], if <> 0 then it is extened flash memory
      00170C 3D 2C            [ 1]  144 	tnz FPTR 
      00170E 26 16            [ 1]  145 	jrne 4$
      001710 90 A3 80 00      [ 2]  146     cpw y,#FLASH_BASE
      001714 24 10            [ 1]  147     jruge 4$
      001716 90 A3 40 00      [ 2]  148 	cpw y,#EEPROM_BASE  
      00171A 25 0D            [ 1]  149     jrult 9$
      00171C 90 A3 48 7F      [ 2]  150 	cpw y,#OPTION_END 
      001720 22 07            [ 1]  151 	jrugt 9$
      001722 CD 16 CB         [ 4]  152 	call unlock_eeprom
      001725 81               [ 4]  153 	ret 
      001726 CD 16 EA         [ 4]  154 4$: call unlock_flash
      001729 81               [ 4]  155 9$: ret 
                                    156 
                                    157 ;-------------------------
                                    158 ; lock write access to 
                                    159 ; FLASH and EEPROM 
                                    160 ; LOCK ( -- )
                                    161 ;-------------------------
      00172A 17 02                  162 	.word LINK 
                           00172C   163 	LINK=.
      00172C 04                     164 	.byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



      00172D 4C 4F 43 4B            165 	.ascii "LOCK" 
      001731                        166 lock: 
      001731 72 13 50 5F      [ 1]  167 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001735 72 17 50 5F      [ 1]  168 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001739 81               [ 4]  169 	ret 
                                    170 
                                    171 ;-------------------------
                                    172 ; increment FPTR 
                                    173 ; INC-FPTR ( -- )
                                    174 ;-------------------------
      00173A 17 2C                  175 	.word LINK 
                           00173C   176 	LINK=. 
      00173C 08                     177 	.byte 8 
      00173D 49 4E 43 2D 46 50 54   178 	.ascii "INC-FPTR" 
             52
      001745                        179 inc_fptr:
      001745 3C 2E            [ 1]  180 	inc PTR8 
      001747 26 08            [ 1]  181 	jrne 1$
      001749 90 BE 2C         [ 2]  182 	ldw y,FPTR 
      00174C 90 5C            [ 2]  183 	incw y 
      00174E 90 BF 2C         [ 2]  184 	ldw FPTR,y 
      001751 81               [ 4]  185 1$: ret 
                                    186 
                                    187 
                                    188 ;----------------------------
                                    189 ; write a byte at address pointed 
                                    190 ; by FPTR and increment FPTR.
                                    191 ; Expect pointer already initialized 
                                    192 ; and memory unlocked 
                                    193 ; WR-BYTE ( c -- )
                                    194 ;----------------------------
                                    195 
      001752 17 3C                  196 	.word LINK 
                           001754   197 	LINK=. 
      001754 07                     198 	.byte 7 
      001755 57 52 2D 42 59 54 45   199 	.ascii "WR-BYTE" 
                                    200 
      00175C                        201 write_byte:
      00175C 90 93            [ 1]  202 	ldw y,x 
      00175E 90 FE            [ 2]  203 	ldw y,(y)
      001760 1C 00 02         [ 2]  204 	addw x,#CELLL 
      001763 90 9F            [ 1]  205 	ld a,yl
      001765 92 BD 00 2C      [ 4]  206 	ldf [FPTR],a
      001769 72 05 50 5F FB   [ 2]  207 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      00176E 20 D5            [ 2]  208 	jra inc_fptr 
                                    209 
                                    210 
                                    211 
                                    212 ;---------------------------------------
                                    213 ; write a byte to FLASH or EEPROM/OPTION  
                                    214 ; EEC!  (c ud -- )
                                    215 ;---------------------------------------
      001770 17 54                  216     .word LINK 
                           001772   217 	LINK=.
      001772 04                     218     .byte 4 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



      001773 45 45 43 21            219     .ascii "EEC!"
                                    220 	; local variables 
                           000001   221 	BTW = 1   ; byte to write offset on stack
                           000002   222     OPT = 2 
                           000002   223 	VSIZE = 2
      001777                        224 ee_cstore:
      001777 52 02            [ 2]  225 	sub sp,#VSIZE
      001779 CD 16 67         [ 4]  226     call fptr_store
      00177C E6 01            [ 1]  227 	ld a,(1,x)
      00177E 43               [ 1]  228 	cpl a 
      00177F 6B 01            [ 1]  229 	ld (BTW,sp),a ; byte to write 
      001781 0F 02            [ 1]  230 	clr (OPT,sp)  ; OPTION flag
      001783 CD 17 09         [ 4]  231 	call unlock 
                                    232 	; check if option
      001786 3D 2C            [ 1]  233 	tnz FPTR 
      001788 26 19            [ 1]  234 	jrne 2$
      00178A 90 BE 2D         [ 2]  235 	ldw y,PTR16 
      00178D 90 A3 48 00      [ 2]  236 	cpw y,#OPTION_BASE
      001791 2B 10            [ 1]  237 	jrmi 2$
      001793 90 A3 48 80      [ 2]  238 	cpw y,#OPTION_END+1
      001797 2A 0A            [ 1]  239 	jrpl 2$
      001799 03 02            [ 1]  240 	cpl (OPT,sp)
                                    241 	; OPTION WRITE require this unlock 
      00179B 72 1E 50 5B      [ 1]  242     bset FLASH_CR2,#FLASH_CR2_OPT
      00179F 72 1F 50 5C      [ 1]  243     bres FLASH_NCR2,#FLASH_CR2_OPT 
      0017A3                        244 2$: 
      0017A3 CD 17 5C         [ 4]  245 	call write_byte 	
      0017A6 0D 02            [ 1]  246 	tnz (OPT,sp)
      0017A8 27 0D            [ 1]  247 	jreq 3$ 
      0017AA 7B 01            [ 1]  248     ld a,(BTW,sp)
      0017AC 90 5F            [ 1]  249     clrw y
      0017AE 90 97            [ 1]  250 	ld yl,a 
      0017B0 1D 00 02         [ 2]  251 	subw x,#CELLL 
      0017B3 FF               [ 2]  252 	ldw (x),y 
      0017B4 CD 17 5C         [ 4]  253 	call write_byte
      0017B7                        254 3$: 
      0017B7 CD 17 31         [ 4]  255 	call lock 
      0017BA 5B 02            [ 2]  256 	addw sp,#VSIZE 
      0017BC 81               [ 4]  257     ret
                                    258 
                                    259 ;------------------------------
                                    260 ; write integer in FLASH|EEPROM
                                    261 ; EE! ( n ud -- )
                                    262 ;------------------------------
      0017BD 17 72                  263 	.word LINK 
                           0017BF   264 	LINK=.
      0017BF 03                     265 	.byte 3 
      0017C0 45 45 21               266 	.ascii "EE!"
      0017C3                        267 ee_store:
      0017C3 CD 16 67         [ 4]  268 	call fptr_store 
      0017C6 CD 17 09         [ 4]  269 	call unlock 
      0017C9 90 93            [ 1]  270 	ldw y,x 
      0017CB 90 FE            [ 2]  271 	ldw y,(y)
      0017CD 90 89            [ 2]  272 	pushw y 
      0017CF 90 5E            [ 1]  273 	swapw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0017D1 FF               [ 2]  274 	ldw (x),y 
      0017D2 CD 17 5C         [ 4]  275 	call write_byte 
      0017D5 90 85            [ 2]  276 	popw y 
      0017D7 1D 00 02         [ 2]  277 	subw x,#CELLL
      0017DA FF               [ 2]  278 	ldw (x),y 
      0017DB CD 17 5C         [ 4]  279 	call write_byte
      0017DE CC 17 31         [ 2]  280 	jp lock 
                                    281 
                                    282 
                                    283 ;----------------------------
                                    284 ; Erase flash memory row 
                                    285 ; stm8s208 as 128 bytes rows
                                    286 ; ROW-ERASE ( ud -- )
                                    287 ;----------------------------
      0017E1 17 BF                  288 	.word LINK 
                           0017E3   289 	LINK=. 
      0017E3 09                     290 	.byte 9 
      0017E4 52 4F 57 2D 45 52 41   291 	.ascii "ROW-ERASE" 
             53 45
      0017ED                        292 row_erase:
      0017ED CD 16 67         [ 4]  293 	call fptr_store
                                    294 ;code must be execute from RAM 
                                    295 ;copy routine to PAD 
      0017F0 1D 00 02         [ 2]  296 	subw x,#CELLL 
      0017F3 90 AE 18 3A      [ 2]  297 	ldw y,#row_erase_proc
      0017F7 FF               [ 2]  298 	ldw (x),y 
      0017F8 CD 08 34         [ 4]  299 	call PAD 
      0017FB 90 AE 18 61      [ 2]  300 	ldw y,#row_erase_proc_end 
      0017FF 72 A2 18 3A      [ 2]  301 	subw y,#row_erase_proc
      001803 1D 00 02         [ 2]  302 	subw x,#CELLL 
      001806 FF               [ 2]  303 	ldw (x),y 
      001807 CD 08 70         [ 4]  304 	call CMOVE 
      00180A                        305 block_erase:
      00180A 90 BE 2D         [ 2]  306 	ldw y,FPTR+1
      00180D 90 A3 1A 80      [ 2]  307 	cpw y,#app_space 
      001811 2A 13            [ 1]  308 	jrpl erase_flash 
                                    309 ; erase eeprom block
      001813 90 A3 40 00      [ 2]  310 	cpw y,#EEPROM_BASE 
      001817 24 01            [ 1]  311 	jruge 1$
      001819 81               [ 4]  312 	ret ; bad address 
      00181A 90 A3 47 FF      [ 2]  313 1$: cpw y,#EEPROM_END 
      00181E 23 01            [ 2]  314 	jrule 2$ 
      001820 81               [ 4]  315 	ret ; bad address 
      001821                        316 2$:	
      001821 CD 16 CB         [ 4]  317 	call unlock_eeprom 
      001824 20 03            [ 2]  318 	jra proceed_erase
                                    319 ; erase flash block:
      001826                        320 erase_flash:
      001826 CD 16 EA         [ 4]  321 	call unlock_flash 
      001829                        322 proceed_erase:
      001829 CD 08 34         [ 4]  323 	call PAD 
      00182C 90 93            [ 1]  324 	ldw y,x
      00182E 90 FE            [ 2]  325 	ldw y,(y)
      001830 1C 00 02         [ 2]  326 	addw x,#CELLL  
      001833 90 FD            [ 4]  327 	call (y) 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



      001835 72 17 50 5F      [ 1]  328 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001839 81               [ 4]  329 	ret 
                                    330 
                                    331 ; this routine is to be copied to PAD 
      00183A                        332 row_erase_proc:
      00183A 35 20 50 5B      [ 1]  333 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      00183E 35 DF 50 5C      [ 1]  334 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001842 4F               [ 1]  335 	clr a 
      001843 90 5F            [ 1]  336 	clrw y 
      001845 91 A7 00 2C      [ 1]  337 	ldf ([FPTR],y),a
      001849 90 5C            [ 2]  338     incw y
      00184B 91 A7 00 2C      [ 1]  339 	ldf ([FPTR],y),a
      00184F 90 5C            [ 2]  340     incw y
      001851 91 A7 00 2C      [ 1]  341 	ldf ([FPTR],y),a
      001855 90 5C            [ 2]  342     incw y
      001857 91 A7 00 2C      [ 1]  343 	ldf ([FPTR],y),a
      00185B 72 05 50 5F FB   [ 2]  344 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001860 81               [ 4]  345 	ret
      001861                        346 row_erase_proc_end:
                                    347 
                                    348 
                                    349 ;-----------------------------------
                                    350 ; block programming must be 
                                    351 ; executed from RAM 
                                    352 ; initial contidions: 
                                    353 ; 		memory unlocked
                                    354 ;       FPTR initialized 
                                    355 ; input: 
                                    356 ;    x   buffer address 
                                    357 ;-----------------------------------
                           000001   358 	BCNT=1 
      001861                        359 copy_buffer:
      001861 4B 80            [ 1]  360 	push #BLOCK_SIZE  
                                    361 ;enable block programming 
      001863 72 10 50 5B      [ 1]  362 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001867 72 11 50 5C      [ 1]  363 	bres FLASH_NCR2,#FLASH_CR2_PRG
      00186B 90 5F            [ 1]  364 	clrw y
      00186D F6               [ 1]  365 1$:	ld a,(x)
      00186E 91 A7 00 2C      [ 1]  366 	ldf ([FPTR],y),a
      001872 5C               [ 2]  367 	incw x 
      001873 90 5C            [ 2]  368 	incw y 
      001875 0A 01            [ 1]  369 	dec (BCNT,sp)
      001877 26 F4            [ 1]  370 	jrne 1$
                                    371 ; wait EOP bit 
      001879 72 05 50 5F FB   [ 2]  372 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      00187E 84               [ 1]  373 	pop a ; remove BCNT from stack 
      00187F 81               [ 4]  374 	ret 
      001880                        375 copy_buffer_end:
                                    376 
                                    377 ;-------------------------
                                    378 ; move program_row to RAM 
                                    379 ; in TIB 
                                    380 ;------------------------
      001880                        381 copy_prog_to_ram:
      001880 1D 00 06         [ 2]  382 	subw x,#6
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001883 90 AE 18 61      [ 2]  383 	ldw y,#copy_buffer 
      001887 EF 04            [ 2]  384 	ldw (4,x),y 
      001889 90 AE 17 00      [ 2]  385 	ldw y,#TIBBASE
      00188D EF 02            [ 2]  386 	ldw (2,x),y 
      00188F 90 AE 18 80      [ 2]  387 	ldw y,#copy_buffer_end 
      001893 72 A2 18 61      [ 2]  388 	subw y,#copy_buffer  
      001897 FF               [ 2]  389 	ldw (x),y 
      001898 CD 08 70         [ 4]  390 	call CMOVE 
      00189B 81               [ 4]  391 	ret 
                                    392 
                                    393 
                                    394 ;-----------------------------
                                    395 ; write a row in FLASH/EEPROM 
                                    396 ; WR-ROW ( a ud -- )
                                    397 ; a -> address 128 byte buffer to write 
                                    398 ; ud ->  row address in FLASH|EEPROM 
                                    399 ;-----------------------------
      00189C 17 E3                  400 	.word LINK 
                           00189E   401 	LINK=.
      00189E 06                     402 	.byte 6 
      00189F 57 52 2D 52 4F 57      403 	.ascii "WR-ROW"
      0018A5                        404 write_row:
      0018A5 CD 16 67         [ 4]  405 	call fptr_store
                                    406 ; align to FLASH block 
      0018A8 A6 80            [ 1]  407 	ld a,#0x80 
      0018AA B4 2E            [ 1]  408 	and a,PTR8 
      0018AC B7 2E            [ 1]  409 	ld PTR8,a  
      0018AE CD 18 80         [ 4]  410 	call copy_prog_to_ram
      0018B1 CD 17 09         [ 4]  411 	call unlock
      0018B4 90 93            [ 1]  412 	ldw y,x 
      0018B6 90 FE            [ 2]  413 	ldw y,(y)
      0018B8 1C 00 02         [ 2]  414 	addw x,#CELLL 
      0018BB 89               [ 2]  415 	pushw x 
      0018BC 93               [ 1]  416 	ldw x,y ; buffer address in x 
      0018BD CD 17 00         [ 4]  417 	call TIBBASE
      0018C0 CD 17 31         [ 4]  418 	call lock
      0018C3 85               [ 2]  419 	popw x 
      0018C4 81               [ 4]  420 	ret 
                                    421 
                                    422 ;-------------------------------------
                                    423 ; change value of OPTION register 
                                    424 ; SET-OPT (c n -- ) 
                                    425 ; c new value.
                                    426 ; n OPT  number {1..7}
                                    427 ;--------------------------------------
      0018C5 18 9E                  428 		.word LINK 
                           0018C7   429 		LINK=.
      0018C7 07                     430 		.byte 7 
      0018C8 53 45 54 2D 4F 50 54   431 		.ascii "SET-OPT" 
      0018CF                        432 set_option: 
      0018CF 90 93            [ 1]  433 		ldw y,x 
      0018D1 90 FE            [ 2]  434 		ldw y,(y)
      0018D3 27 06            [ 1]  435 		jreq 1$
      0018D5 90 A3 00 07      [ 2]  436 		cpw y,#7 
      0018D9 23 04            [ 2]  437 		jrule 2$ 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



                                    438 ; invalid OPTION number 		
      0018DB 1C 00 04         [ 2]  439 1$:		addw x,#2*CELLL
      0018DE 81               [ 4]  440 		ret
      0018DF 90 58            [ 2]  441 2$:		sllw y 
      0018E1 72 A9 47 FF      [ 2]  442 		addw y,#OPTION_BASE-1
      0018E5 FF               [ 2]  443 		ldw (x),y 
      0018E6 1D 00 02         [ 2]  444 		subw x,#CELLL 
      0018E9 90 5F            [ 1]  445 		clrw y 
      0018EB FF               [ 2]  446 		ldw (x),y 
      0018EC CD 17 77         [ 4]  447 		call ee_cstore
      0018EF 81               [ 4]  448 		ret 
                                    449 
                                    450 
                                    451 
                                    452 ;--------------------------------------
                                    453 ; reset system to its original state 
                                    454 ; before any user modification
                                    455 ; PRISTINE ( -- )
                                    456 ;-------------------------------------
      0018F0 18 C7                  457 	.word LINK  
                           0018F2   458 	LINK=.
      0018F2 08                     459 	.byte 8 
      0018F3 50 52 49 53 54 49 4E   460 	.ascii "PRISTINE"
             45
      0018FB                        461 pristine:
                                    462 ;;; erase EEPROM
      0018FB CD 16 86         [ 4]  463 	call eeprom 
      0018FE CD 04 0E         [ 4]  464 1$:	call DDUP 
      001901 CD 17 ED         [ 4]  465 	call row_erase
      001904 90 93            [ 1]  466 	ldw y,x 
      001906 90 EE 02         [ 2]  467 	ldw y,(2,y)
      001909 72 A9 00 80      [ 2]  468 	addw y,#BLOCK_SIZE
      00190D EF 02            [ 2]  469 	ldw (2,x),y
      00190F 90 A3 48 00      [ 2]  470 	cpw y,#OPTION_BASE 
      001913 25 E9            [ 1]  471 	jrult 1$
                                    472 ;;; reset OPTION to default values
      001915 90 AE 00 01      [ 2]  473 	ldw y,#1 ; OPT1 
      001919 FF               [ 2]  474 2$:	ldw (x),y   
      00191A 90 5F            [ 1]  475 	clrw y 
      00191C EF 02            [ 2]  476 	ldw (2,x),y  ; ( 0 1 -- ) 
      00191E CD 04 0E         [ 4]  477 	call DDUP    ; ( 0 1 0 1 -- )  
      001921 CD 18 CF         [ 4]  478 	call set_option
      001924 90 93            [ 1]  479 	ldw y,x 
      001926 90 FE            [ 2]  480 	ldw y,(y)
      001928 90 5C            [ 2]  481 	incw y  ; next OPTION 
      00192A 90 A3 00 08      [ 2]  482 	cpw y,#8 
      00192E 25 E9            [ 1]  483 	jrult 2$
                                    484 ;;; erase first row of app_space 	
      001930 90 AE 1A 80      [ 2]  485 	ldw y,#app_space
      001934 EF 02            [ 2]  486 	ldw (2,x),y  
      001936 90 5F            [ 1]  487 	clrw y 
      001938 FF               [ 2]  488 	ldw (x),y ; ( app_space 0 -- )
      001939 CD 17 ED         [ 4]  489 	call row_erase 
                                    490 ; reset interrupt vectors 
      00193C 1D 00 02         [ 2]  491 	subw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



      00193F 90 5F            [ 1]  492 	clrw y  
      001941 FF               [ 2]  493 4$:	ldw (x),y  ; ( n -- ) int# 
      001942 CD 02 67         [ 4]  494 	call DUPP  
      001945 CD 19 62         [ 4]  495 	call reset_vector
      001948 90 93            [ 1]  496 	ldw y,x 
      00194A 90 FE            [ 2]  497 	ldw y,(y)
      00194C 90 5C            [ 2]  498 	incw y   ; next vector 
      00194E 90 A3 00 19      [ 2]  499 	cpw y,#25 
      001952 25 ED            [ 1]  500 	jrult 4$
      001954 CC 00 00         [ 2]  501 	jp NonHandledInterrupt ; reset MCU
                                    502 
                                    503 ;------------------------------
                                    504 ; reset an interrupt vector 
                                    505 ; to its initial value 
                                    506 ; i.e. NonHandledInterrupt
                                    507 ; RST-IVEC ( n -- )
                                    508 ;-----------------------------
      001957 18 F2                  509 	.word LINK 
                           001959   510 	LINK=. 
      001959 08                     511 	.byte 8 
      00195A 52 53 54 2D 49 56 45   512 	.ascii "RST-IVEC"
             43
      001962                        513 reset_vector:
      001962 90 93            [ 1]  514 	ldw y,x
      001964 1C 00 02         [ 2]  515 	addw x,#CELLL 
      001967 90 FE            [ 2]  516 	ldw y,(y)
      001969 90 A3 00 17      [ 2]  517 	cpw y,#23 
      00196D 27 3A            [ 1]  518 	jreq 9$
      00196F 90 A3 00 18      [ 2]  519 	cpw y,#24 ; last vector for stm8s208 
      001973 22 34            [ 1]  520 	jrugt 9$  
      001975 90 58            [ 2]  521 	sllw y 
      001977 90 58            [ 2]  522 	sllw y 
      001979 72 A9 80 08      [ 2]  523 	addw y,#0x8008 ; irq0 address 
      00197D 90 BF 1E         [ 2]  524 	ldw YTEMP,y
      001980 1D 00 06         [ 2]  525 	subw x,#3*CELLL 
      001983 EF 02            [ 2]  526 	ldw (2,x),y 
      001985 90 5F            [ 1]  527 	clrw y
      001987 FF               [ 2]  528 	ldw (x),y 
      001988 A6 82            [ 1]  529 	ld a,#0x82 
      00198A 90 95            [ 1]  530 	ld yh,a
      00198C EF 04            [ 2]  531 	ldw (4,x),y
      00198E CD 17 C3         [ 4]  532 	call ee_store
      001991 1D 00 06         [ 2]  533 	subw x,#3*CELLL
      001994 90 5F            [ 1]  534 	clrw y 
      001996 FF               [ 2]  535 	ldw (x),y 
      001997 90 AE 00 00      [ 2]  536 	ldw y,#NonHandledInterrupt
      00199B EF 04            [ 2]  537 	ldw (4,x),y 
      00199D 90 BE 1E         [ 2]  538 	ldw y,YTEMP  
      0019A0 72 A9 00 02      [ 2]  539 	addw y,#2
      0019A4 EF 02            [ 2]  540 	ldw (2,x),y 
      0019A6 CD 17 C3         [ 4]  541 	call ee_store
      0019A9 81               [ 4]  542 9$:	ret 
                                    543 
                                    544 
                                    545 	
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                    546 ;------------------------------
                                    547 ; set interrupt vector 
                                    548 ; SET-IVEC ( ud n -- )
                                    549 ;  ud Handler address
                                    550 ;  n  vector # 0 .. 29 
                                    551 ;-----------------------------
      0019AA 19 59                  552 	.word LINK
                           0019AC   553 	LINK=.
      0019AC 08                     554 	.byte 8 
      0019AD 53 45 54 2D 49 56 45   555 	.ascii "SET-IVEC" 
             43
      0019B5                        556 set_vector:
      0019B5 90 93            [ 1]  557     ldw y,x 
      0019B7 1C 00 02         [ 2]  558 	addw x,#CELLL 
      0019BA 90 FE            [ 2]  559 	ldw y,(y) ; vector #
      0019BC 90 A3 00 18      [ 2]  560 	cpw y,#24 ; last vector for stm8s208  
      0019C0 23 04            [ 2]  561 	jrule 2$
      0019C2 1C 00 04         [ 2]  562 	addw x,#2*CELLL 
      0019C5 81               [ 4]  563 	ret
      0019C6 90 58            [ 2]  564 2$:	sllw y 
      0019C8 90 58            [ 2]  565 	sllw y 
      0019CA 72 A9 80 08      [ 2]  566 	addw y,#0X8008 ; IRQ0 vector address 
      0019CE 90 BF 1E         [ 2]  567 	ldw YTEMP,y ; vector address 
      0019D1 A6 82            [ 1]  568 	ld a,#0x82 
      0019D3 90 95            [ 1]  569 	ld yh,a 
      0019D5 E6 01            [ 1]  570 	ld a,(1,x) ; isr address bits 23..16 
      0019D7 90 97            [ 1]  571 	ld yl,a 
                                    572 ;  write 0x82 + most significant byte of int address	
      0019D9 1D 00 06         [ 2]  573 	subw x,#3*CELLL 
      0019DC EF 04            [ 2]  574 	ldw (4,x),y 
      0019DE 90 BE 1E         [ 2]  575 	ldw y,YTEMP
      0019E1 EF 02            [ 2]  576 	ldw (2,x),y ; vector address 
      0019E3 90 5F            [ 1]  577 	clrw y 
      0019E5 FF               [ 2]  578 	ldw (x),y   ; as a double 
      0019E6 CD 17 C3         [ 4]  579 	call ee_store 
      0019E9 90 93            [ 1]  580 	ldw y,x 
      0019EB 90 EE 02         [ 2]  581 	ldw y,(2,y) ; bits 15..0 int vector 
      0019EE 1D 00 06         [ 2]  582 	subw x,#3*CELLL 
      0019F1 EF 04            [ 2]  583 	ldw (4,x),y 
      0019F3 90 BE 1E         [ 2]  584 	ldw y,YTEMP 
      0019F6 72 A9 00 02      [ 2]  585 	addw y,#2 
      0019FA EF 02            [ 2]  586 	ldw (2,x),y 
      0019FC 90 5F            [ 1]  587 	clrw y 
      0019FE FF               [ 2]  588 	ldw (x),y 
      0019FF CD 17 C3         [ 4]  589 	call ee_store 
      001A02 81               [ 4]  590 9$: ret 
                                    591 
                                    592 
                                    593 ;------------------------
                                    594 ; Compile word to flash
                                    595 ; EE, (w -- )
                                    596 ;-----------------------
      001A03 19 AC                  597 	.word LINK
                           001A05   598 	LINK=.
      001A05 03                     599 	.byte 3
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001A06 45 45 2C               600 	.ascii "EE,"
      001A09                        601 ee_comma:
      001A09 1D 00 04         [ 2]  602 	subw x,#2*CELLL 
      001A0C 90 BE 18         [ 2]  603 	ldw y,UFCP
      001A0F 90 89            [ 2]  604 	pushw y 
      001A11 EF 02            [ 2]  605 	ldw (2,x),y 
      001A13 90 5F            [ 1]  606 	clrw y 
      001A15 FF               [ 2]  607 	ldw (x),y
      001A16 CD 17 C3         [ 4]  608 	call ee_store
      001A19 90 85            [ 2]  609 	popw y 
      001A1B 72 A9 00 02      [ 2]  610 	addw y,#2
      001A1F 90 BF 18         [ 2]  611 	ldw UFCP,y
      001A22 81               [ 4]  612 	ret 
                                    613 
                                    614 ;-------------------------
                                    615 ; Compile byte to flash 
                                    616 ; EEC, ( c -- )	
                                    617 ;-------------------------
      001A23 1A 05                  618 	.word LINK 
                           001A25   619 	LINK=.
      001A25 04                     620 	.byte 4 
      001A26 45 45 43 2C            621 	.ascii "EEC,"
      001A2A                        622 ee_ccomma:
      001A2A 1D 00 04         [ 2]  623 	subw x,#2*CELLL 
      001A2D 90 BE 18         [ 2]  624 	ldw y,UFCP
      001A30 90 89            [ 2]  625 	pushw y 
      001A32 EF 02            [ 2]  626 	ldw (2,x),y 
      001A34 90 5F            [ 1]  627 	clrw y 
      001A36 FF               [ 2]  628 	ldw (x),y
      001A37 CD 17 77         [ 4]  629 	call ee_cstore
      001A3A 90 85            [ 2]  630 	popw y 
      001A3C 90 5C            [ 2]  631 	incw y 
      001A3E 90 BF 18         [ 2]  632 	ldw UFCP,y
      001A41 81               [ 4]  633 	ret 
                                    634 
                                    635 
                                    636 ;--------------------------
                                    637 ; copy FLASH block to ROWBUF
                                    638 ; ROW2BUF ( ud -- )
                                    639 ;--------------------------
      001A42 1A 25                  640 	.word LINK 
                           001A44   641 	LINK=.
      001A44 07                     642 	.byte 7 
      001A45 52 4F 57 32 42 55 46   643 	.ascii "ROW2BUF"
      001A4C                        644 ROW2BUF: 
      001A4C CD 16 67         [ 4]  645 	call fptr_store 
      001A4F A6 80            [ 1]  646 	ld a,#BLOCK_SIZE
      001A51 88               [ 1]  647 	push a 
      001A52 B4 2E            [ 1]  648 	and a,PTR8 ; block align 
      001A54 B7 2E            [ 1]  649 	ld PTR8,a
      001A56 90 AE 16 80      [ 2]  650 	ldw y,#ROWBUFF 
      001A5A 92 BC 00 2C      [ 5]  651 1$: ldf a,[FPTR]
      001A5E 90 F7            [ 1]  652 	ld (y),a
      001A60 CD 17 45         [ 4]  653 	call inc_fptr
      001A63 90 5C            [ 2]  654 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001A65 0A 01            [ 1]  655 	dec (1,sp)
      001A67 26 F1            [ 1]  656 	jrne 1$ 
      001A69 84               [ 1]  657 	pop a 
      001A6A 81               [ 4]  658 	ret 
                                    659 
                                    660 
                                    661 ;--------------------------
                                    662 ; move now colon definition to FLASH 
                                    663 ; preserving bytes already used 
                                    664 ; in the current block. 
                                    665 ; ud+c must not exceed block boundary 
                                    666 ; FMOVE ( a ud c -- )
                                    667 ;	a   RAM buffer address 
                                    668 ;   ud  FLASH address 
                                    669 ;   c   byte count {1..128}
                                    670 ;--------------------------
      001A6B 1A 44                  671 	.word LINK 
                           001A6D   672 	LINK=.
      001A6D 05                     673 	.byte 5 
      001A6E 46 4D 4F 56 45         674 	.ascii "FMOVE" 
      001A73                        675 FMOVE:
                           000000   676 .if 0 ; to be done 
                                    677 ; bound c to 128 bytes 
                                    678 	subw x,#CELLL 
                                    679 	ldw y,#BLOCK_SIZE
                                    680 	ldw (x),y 
                                    681 	call MIN
                                    682 	ldw y,x 
                                    683 	ldw y,(x)
                                    684 	ldw XTEMP,y ; save c 
                                    685 	addw x,#CELLL 
                                    686 ; move FLASH block in ROWBUFF 
                                    687 	call DDUP 
                                    688 	call BLKCPY
                                    689 ; how many free in this block ?
                                    690 ; use MIN(c,bytes_free)
                                    691 	ldw y,x 
                                    692 	ld a,(3,y) ; ud least byte  
                                    693 	jreq 2$
                                    694 	cp a,#BLOCK_SIZE
                                    695 	jreq 2$ 
                                    696 	add a,#BLOCK_SIZE
                                    697 	and a,#0x80
                                    698 	subc a,(3,y) ; bytes free 
                                    699 	subw x,#2*CELLL 
                                    700 	clrw y 
                                    701 	ldw (2,x),y 
                                    702 	ldw y,XTEMP 
                                    703 	ldw (x),y
                                    704 	call MIN 
                                    705 2$: ; ud is block aligned, all bytes free  
                                    706 ; now copy bytes from a to ROWBUFF+n 
                                    707 	ldw y,x 
                                    708 	ldw y,(2,y)
                                    709 	andw y,#0x7f 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



                                    710 	addw y,#ROWBUFF
                                    711 	ldw YTEMP,y 
                                    712 	ldw y,x 
                                    713 	ldw y,()
                           000001   714 .else 
      001A73 81               [ 4]  715 	ret 
                                    716 .endif 
                                    717 
                                    718 
                                    719 
                                    720 ; application code begin here
      001A80                        721 	.bndry 128 ; align on flash block  
      001A80                        722 app_space: 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                   4084 .endif ; PICATOUT_MOD
                                   4085 
                                   4086 ;===============================================================
                                   4087 
                           001A6D  4088 LASTN =	LINK   ;last name defined
                                   4089 
                                   4090 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        0004A4 R   |   6 ABOR1      000FBF R
  6 ABOR2      000FD6 R   |   6 ABORQ      000FB7 R   |   6 ABORT      000FA8 R
  6 ABRTQ      001277 R   |   6 ABSS       00049B R   |   6 ACCEP      000F3E R
  6 ACCP1      000F47 R   |   6 ACCP2      000F6D R   |   6 ACCP3      000F70 R
  6 ACCP4      000F72 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |     AFR     =  004803 
    AFR0_ADC=  000000     |     AFR1_TIM=  000001     |     AFR2_CCO=  000002 
    AFR3_TIM=  000003     |     AFR4_TIM=  000004     |     AFR5_TIM=  000005 
    AFR6_I2C=  000006     |     AFR7_BEE=  000007     |   6 AFT        001262 R
  6 AGAIN      0011C1 R   |   6 AHEAD      001218 R   |   6 ALLOT      0010E7 R
  6 ANDD       0002B3 R   |     APP_HERE=  004004     |     APP_LAST=  004000 
    APP_RUN =  004002     |   6 AT         0001C0 R   |   6 ATEXE      000859 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      000EE6 R   |   6 BASE       000324 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001126 R   |   6 BDIGS      000941 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0011A5 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      000D7E R   |   6 BKSP       000EB6 R
    BKSPP   =  000008     |   6 BLANK      000729 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       000182 R
    BTW     =  000001     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000022 
  6 CAT        0001DE R   |   6 CCOMMA     001108 R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0006E6 R   |   6 CELLP      0006D7 R
  6 CELLS      0006F5 R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000B6E R   |   6 CHAR2      000B71 R
    CLKOPT  =  004807     |     CLKOPT_C=  000002     |     CLKOPT_E=  000003 
    CLKOPT_P=  000000     |     CLKOPT_P=  000001     |     CLK_CCOR=  0050C9 
    CLK_CKDI=  0050C6     |     CLK_CKDI=  000000     |     CLK_CKDI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]

Symbol Table

    CLK_CKDI=  000002     |     CLK_CKDI=  000003     |     CLK_CKDI=  000004 
    CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8     |     CLK_ECKR=  0050C1 
    CLK_ECKR=  000000     |     CLK_ECKR=  000001     |     CLK_HSIT=  0050CC 
    CLK_ICKR=  0050C0     |     CLK_ICKR=  000002     |     CLK_ICKR=  000000 
    CLK_ICKR=  000001     |     CLK_ICKR=  000003     |     CLK_ICKR=  000004 
    CLK_ICKR=  000005     |     CLK_PCKE=  0050C7     |     CLK_PCKE=  000000 
    CLK_PCKE=  000001     |     CLK_PCKE=  000007     |     CLK_PCKE=  000005 
    CLK_PCKE=  000006     |     CLK_PCKE=  000004     |     CLK_PCKE=  000002 
    CLK_PCKE=  000003     |     CLK_PCKE=  0050CA     |     CLK_PCKE=  000003 
    CLK_PCKE=  000002     |     CLK_PCKE=  000007     |     CLK_SWCR=  0050C5 
    CLK_SWCR=  000000     |     CLK_SWCR=  000001     |     CLK_SWCR=  000002 
    CLK_SWCR=  000003     |     CLK_SWIM=  0050CD     |     CLK_SWR =  0050C4 
    CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1     |     CLK_SWR_=  0000D2 
  6 CMOV1      000878 R   |   6 CMOV2      000890 R   |   6 CMOVE      000870 R
    CNTDWN  =  00002A     |   6 CNTXT      000395 R   |   6 COLD       0015C2 R
  6 COLD1      0015C2 R   |   6 COLON      001391 R   |   6 COMMA      0010F1 R
  6 COMPI      001136 R   |     COMPO   =  000040     |     CONVERT_=  000001 
  6 COUNT      00080C R   |   6 CPP        0003A3 R   |     CPU_A   =  007F00 
    CPU_CCR =  007F0A     |     CPU_PCE =  007F01     |     CPU_PCH =  007F02 
    CPU_PCL =  007F03     |     CPU_SPH =  007F08     |     CPU_SPL =  007F09 
    CPU_XH  =  007F04     |     CPU_XL  =  007F05     |     CPU_YH  =  007F06 
    CPU_YL  =  007F07     |   6 CR         000B9C R   |   6 CREAT      0013C9 R
    CRR     =  00000D     |   6 CSTOR      0001CD R   |     CTOP    =  000080 
  6 DAT        0007EC R   |     DATSTK  =  001670     |   6 DDROP      000403 R
  6 DDUP       00040E R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      0009F1 R   |   6 DEPTH      000779 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000A36 R   |   6 DIG        00096A R
  6 DIGIT      000905 R   |   6 DIGS       00097B R   |   6 DIGS1      00097B R
  6 DIGS2      000988 R   |   6 DIGTQ      000A05 R   |     DM_BK1RE=  007F90 
    DM_BK1RH=  007F91     |     DM_BK1RL=  007F92     |     DM_BK2RE=  007F93 
    DM_BK2RH=  007F94     |     DM_BK2RL=  007F95     |     DM_CR1  =  007F96 
    DM_CR2  =  007F97     |     DM_CSR1 =  007F98     |     DM_CSR2 =  007F99 
    DM_ENFCT=  007F9A     |   6 DN1        00047B R   |   6 DNEGA      000460 R
  6 DOCONST    001431 R   |   6 DOLIT      000138 R   |   6 DONXT      00014C R
  6 DOSTR      000BB2 R   |   6 DOT        000C37 R   |   6 DOT1       000C4D R
  6 DOTI1      001556 R   |   6 DOTID      001540 R   |   6 DOTO1      00104B R
  6 DOTOK      001031 R   |   6 DOTPR      000D60 R   |   6 DOTQ       001293 R
  6 DOTQP      000BDB R   |   6 DOTR       000BE9 R   |   6 DOTS       0014DF R
  6 DOTS1      0014EA R   |   6 DOTS2      0014F6 R   |   6 DOVAR      000314 R
  6 DROP       00025D R   |   6 DSTOR      0007C6 R   |   6 DUMP       001495 R
  6 DUMP1      0014AC R   |   6 DUMP3      0014CE R   |   6 DUMPP      001464 R
  6 DUPP       000267 R   |   6 EDIGS      0009A6 R   |     EEPROM_B=  004000 
    EEPROM_E=  0047FF     |     EEPROM_S=  000800     |   6 ELSEE      0011F5 R
  6 EMIT       000122 R   |   6 EQ1        0004BF R   |   6 EQUAL      0004A9 R
  6 ERASE      0008D2 R   |     ERR     =  00001B     |   6 EVAL       001074 R
  6 EVAL1      001074 R   |   6 EVAL2      001090 R   |   6 EXE1       000867 R
  6 EXECU      000192 R   |   6 EXIT       0001A2 R   |     EXT     =  000001 
    EXTI_CR1=  0050A0     |     EXTI_CR2=  0050A1     |   6 EXTRC      00092D R
  6 FCP        0003B2 R   |     FHSE    =  7A1200     |     FHSI    =  F42400 
  6 FILL       00089F R   |   6 FILL1      0008BC R   |   6 FILL2      0008C5 R
  6 FIND       000E12 R   |   6 FIND1      000E30 R   |   6 FIND2      000E5E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]

Symbol Table

  6 FIND3      000E6A R   |   6 FIND4      000E7E R   |   6 FIND5      000E8B R
  6 FIND6      000E6F R   |     FLASH_BA=  008000     |     FLASH_CR=  00505A 
    FLASH_CR=  000002     |     FLASH_CR=  000000     |     FLASH_CR=  000003 
    FLASH_CR=  000001     |     FLASH_CR=  00505B     |     FLASH_CR=  000005 
    FLASH_CR=  000004     |     FLASH_CR=  000007     |     FLASH_CR=  000000 
    FLASH_CR=  000006     |     FLASH_DU=  005064     |     FLASH_DU=  0000AE 
    FLASH_DU=  000056     |     FLASH_EN=  027FFF     |     FLASH_FP=  00505D 
    FLASH_FP=  000000     |     FLASH_FP=  000001     |     FLASH_FP=  000002 
    FLASH_FP=  000003     |     FLASH_FP=  000004     |     FLASH_FP=  000005 
    FLASH_IA=  00505F     |     FLASH_IA=  000003     |     FLASH_IA=  000002 
    FLASH_IA=  000006     |     FLASH_IA=  000001     |     FLASH_IA=  000000 
    FLASH_NC=  00505C     |     FLASH_NF=  00505E     |     FLASH_NF=  000000 
    FLASH_NF=  000001     |     FLASH_NF=  000002     |     FLASH_NF=  000003 
    FLASH_NF=  000004     |     FLASH_NF=  000005     |     FLASH_PU=  005062 
    FLASH_PU=  000056     |     FLASH_PU=  0000AE     |     FLASH_SI=  020000 
    FLASH_WS=  00480D     |     FLSI    =  01F400     |   6 FMOVE      001A73 R
  6 FOR        001184 R   |     FPTR    =  00002C     |     GPIO_BAS=  005000 
    GPIO_CR1=  000003     |     GPIO_CR2=  000004     |     GPIO_DDR=  000002 
    GPIO_IDR=  000001     |     GPIO_ODR=  000000     |     GPIO_SIZ=  000005 
  6 HERE       000823 R   |   6 HEX        0009DC R   |   6 HI         001595 R
  6 HLD        000382 R   |   6 HOLD       000951 R   |     HSECNT  =  004809 
    I2C_CCRH=  00521C     |     I2C_CCRH=  000080     |     I2C_CCRH=  0000C0 
    I2C_CCRH=  000080     |     I2C_CCRH=  000000     |     I2C_CCRH=  000001 
    I2C_CCRH=  000000     |     I2C_CCRL=  00521B     |     I2C_CCRL=  00001A 
    I2C_CCRL=  000002     |     I2C_CCRL=  00000D     |     I2C_CCRL=  000050 
    I2C_CCRL=  000090     |     I2C_CCRL=  0000A0     |     I2C_CR1 =  005210 
    I2C_CR1_=  000006     |     I2C_CR1_=  000007     |     I2C_CR1_=  000000 
    I2C_CR2 =  005211     |     I2C_CR2_=  000002     |     I2C_CR2_=  000003 
    I2C_CR2_=  000000     |     I2C_CR2_=  000001     |     I2C_CR2_=  000007 
    I2C_DR  =  005216     |     I2C_FREQ=  005212     |     I2C_ITR =  00521A 
    I2C_ITR_=  000002     |     I2C_ITR_=  000000     |     I2C_ITR_=  000001 
    I2C_OARH=  005214     |     I2C_OARH=  000001     |     I2C_OARH=  000002 
    I2C_OARH=  000006     |     I2C_OARH=  000007     |     I2C_OARL=  005213 
    I2C_OARL=  000000     |     I2C_OAR_=  000813     |     I2C_OAR_=  000009 
    I2C_PECR=  00521E     |     I2C_READ=  000001     |     I2C_SR1 =  005217 
    I2C_SR1_=  000003     |     I2C_SR1_=  000001     |     I2C_SR1_=  000002 
    I2C_SR1_=  000006     |     I2C_SR1_=  000000     |     I2C_SR1_=  000004 
    I2C_SR1_=  000007     |     I2C_SR2 =  005218     |     I2C_SR2_=  000002 
    I2C_SR2_=  000001     |     I2C_SR2_=  000000     |     I2C_SR2_=  000003 
    I2C_SR2_=  000005     |     I2C_SR3 =  005219     |     I2C_SR3_=  000001 
    I2C_SR3_=  000007     |     I2C_SR3_=  000004     |     I2C_SR3_=  000000 
    I2C_SR3_=  000002     |     I2C_TRIS=  00521D     |     I2C_TRIS=  000005 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000011 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_WRIT=  000000 
  6 IFF        0011CF R   |     IMEDD   =  000080     |   6 IMMED      0013A6 R
  6 INCH       000116 R   |   6 INN        000342 R   |     INPUT_DI=  000000 
    INPUT_EI=  000001     |     INPUT_FL=  000000     |     INPUT_PU=  000001 
  6 INTE1      001013 R   |   6 INTER      000FE9 R   |     INT_ADC2=  000016 
    INT_AUAR=  000012     |     INT_AWU =  000001     |     INT_CAN_=  000008 
    INT_CAN_=  000009     |     INT_CLK =  000002     |     INT_EXTI=  000003 
    INT_EXTI=  000004     |     INT_EXTI=  000005     |     INT_EXTI=  000006 
    INT_EXTI=  000007     |     INT_FLAS=  000018     |     INT_I2C =  000013 
    INT_SPI =  00000A     |     INT_TIM1=  00000C     |     INT_TIM1=  00000B 
    INT_TIM2=  00000E     |     INT_TIM2=  00000D     |     INT_TIM3=  000010 
    INT_TIM3=  00000F     |     INT_TIM4=  000017     |     INT_TLI =  000000 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]

Symbol Table

    INT_UART=  000011     |     INT_UART=  000015     |     INT_UART=  000014 
    INT_VECT=  008060     |     INT_VECT=  00800C     |     INT_VECT=  008028 
    INT_VECT=  00802C     |     INT_VECT=  008010     |     INT_VECT=  008014 
    INT_VECT=  008018     |     INT_VECT=  00801C     |     INT_VECT=  008020 
    INT_VECT=  008024     |     INT_VECT=  008068     |     INT_VECT=  008054 
    INT_VECT=  008000     |     INT_VECT=  008030     |     INT_VECT=  008038 
    INT_VECT=  008034     |     INT_VECT=  008040     |     INT_VECT=  00803C 
    INT_VECT=  008048     |     INT_VECT=  008044     |     INT_VECT=  008064 
    INT_VECT=  008008     |     INT_VECT=  008004     |     INT_VECT=  008050 
    INT_VECT=  00804C     |     INT_VECT=  00805C     |     INT_VECT=  008058 
  6 INVER      00043D R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       001382 R   |   6 KEY        000B1C R   |   6 KTAP       000F03 R
  6 KTAP1      000F26 R   |   6 KTAP2      000F29 R   |   6 LAST       0003C2 R
  6 LASTN   =  001A6D R   |   6 LBRAC      001020 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       0004E6 R
    LF      =  00000A     |   6 LINK    =  001A6D R   |   6 LITER      001155 R
  6 LT1        0004FC R   |     MASKK   =  001F7F     |   6 MAX        000506 R
  6 MAX1       000519 R   |   6 MIN        000523 R   |   6 MIN1       000536 R
  6 MMOD1      0005D9 R   |   6 MMOD2      0005ED R   |   6 MMOD3      000604 R
  6 MMSM1      000580 R   |   6 MMSM2      000594 R   |   6 MMSM3      000596 R
  6 MMSM4      00059E R   |   6 MODD       00061E R   |   6 MONE       00074F R
    MS      =  000028     |   6 MSEC       0000A3 R   |   6 MSMOD      0005BC R
  6 MSTA1      0006AF R   |   6 MSTAR      00068C R   |     NAFR    =  004804 
  6 NAMEQ      000EAB R   |   6 NAMET      000DBC R   |     NCLKOPT =  004808 
  6 NEGAT      00044E R   |   6 NEX1       000159 R   |   6 NEXT       001194 R
    NFLASH_W=  00480E     |     NHSECNT =  00480A     |     NOPT1   =  004802 
    NOPT2   =  004804     |     NOPT3   =  004806     |     NOPT4   =  004808 
    NOPT5   =  00480A     |     NOPT6   =  00480C     |     NOPT7   =  00480E 
    NOPTBL  =  00487F     |   6 NTIB       000352 R   |     NUBC    =  004802 
  6 NUFQ       000B32 R   |   6 NUFQ1      000B4B R   |   6 NUMBQ      000A49 R
  6 NUMQ1      000A7D R   |   6 NUMQ2      000AAE R   |   6 NUMQ3      000AF0 R
  6 NUMQ4      000AF5 R   |   6 NUMQ5      000B04 R   |   6 NUMQ6      000B07 R
    NWDGOPT =  004806     |     NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC 
    NWDGOPT_=  FFFFFFFF     |     NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R
  6 ONE        000741 R   |   6 ONEM       00070F R   |   6 ONEP       000702 R
    OPT     =  000002     |     OPT0    =  004800     |     OPT1    =  004801 
    OPT2    =  004803     |     OPT3    =  004805     |     OPT4    =  004807 
    OPT5    =  004809     |     OPT6    =  00480B     |     OPT7    =  00480D 
    OPTBL   =  00487E     |     OPTION_B=  004800     |     OPTION_E=  00487F 
    OPTION_S=  000080     |   6 ORIG       00003F R   |   6 ORR        0002C7 R
  6 OUTPUT     000127 R   |     OUTPUT_F=  000001     |     OUTPUT_O=  000000 
    OUTPUT_P=  000001     |     OUTPUT_S=  000000     |   6 OVER       000291 R
  6 OVERT      00134F R   |     PA      =  000000     |   6 PACKS      0008E4 R
  6 PAD        000834 R   |   6 PAREN      000D6F R   |   6 PARS       000C68 R
  6 PARS1      000C93 R   |   6 PARS2      000CBE R   |   6 PARS3      000CC1 R
  6 PARS4      000CCA R   |   6 PARS5      000CED R   |   6 PARS6      000D02 R
  6 PARS7      000D11 R   |   6 PARS8      000D20 R   |   6 PARSE      000D31 R
  6 PAUSE      0000B3 R   |     PA_BASE =  005000     |     PA_CR1  =  005003 
    PA_CR2  =  005004     |     PA_DDR  =  005002     |     PA_IDR  =  005001 
    PA_ODR  =  005000     |     PB      =  000005     |     PB_BASE =  005005 
    PB_CR1  =  005008     |     PB_CR2  =  005009     |     PB_DDR  =  005007 
    PB_IDR  =  005006     |     PB_ODR  =  005005     |     PC      =  00000A 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]

Symbol Table

    PC_BASE =  00500A     |     PC_CR1  =  00500D     |     PC_CR2  =  00500E 
    PC_DDR  =  00500C     |     PC_IDR  =  00500B     |     PC_ODR  =  00500A 
    PD      =  00000F     |   6 PDUM1      001477 R   |   6 PDUM2      001488 R
    PD_BASE =  00500F     |     PD_CR1  =  005012     |     PD_CR2  =  005013 
    PD_DDR  =  005011     |     PD_IDR  =  005010     |     PD_ODR  =  00500F 
    PE      =  000014     |     PE_BASE =  005014     |     PE_CR1  =  005017 
    PE_CR2  =  005018     |     PE_DDR  =  005016     |     PE_IDR  =  005015 
    PE_ODR  =  005014     |     PF      =  000019     |     PF_BASE =  005019 
    PF_CR1  =  00501C     |     PF_CR2  =  00501D     |     PF_DDR  =  00501B 
    PF_IDR  =  00501A     |     PF_ODR  =  005019     |     PG      =  00001E 
    PG_BASE =  00501E     |     PG_CR1  =  005021     |     PG_CR2  =  005022 
    PG_DDR  =  005020     |     PG_IDR  =  00501F     |     PG_ODR  =  00501E 
    PH      =  000023     |     PH_BASE =  005023     |     PH_CR1  =  005026 
    PH_CR2  =  005027     |     PH_DDR  =  005025     |     PH_IDR  =  005024 
    PH_ODR  =  005023     |     PI      =  000028     |     PICATOUT=  000001 
  6 PICK       000790 R   |     PI_BASE =  005028     |     PI_CR1  =  00502B 
    PI_CR2  =  00502C     |     PI_DDR  =  00502A     |     PI_IDR  =  005029 
    PI_ODR  =  005028     |   6 PLUS       000423 R   |   6 PNAM1      001304 R
  6 PRESE      00109F R   |     PROD1   =  00001C     |     PROD2   =  00001E 
    PROD3   =  000020     |   6 PSTOR      0007A5 R   |     PTR16   =  00002D 
    PTR8    =  00002E     |   6 QBRAN      00016B R   |   6 QDUP       0003D2 R
  6 QDUP1      0003DC R   |   6 QKEY       000104 R   |   6 QSTAC      001057 R
  6 QUERY      000F83 R   |   6 QUEST      000C5A R   |   6 QUIT       0010BC R
  6 QUIT1      0010C4 R   |   6 QUIT2      0010C7 R   |     RAMBASE =  000000 
    RAM_BASE=  000000     |     RAM_END =  0017FF     |     RAM_SIZE=  001800 
  6 RAT        000224 R   |   6 RBRAC      00136F R   |   6 REPEA      00124A R
  6 RFROM      000211 R   |     ROP     =  004800     |   6 ROT        0003E3 R
  6 ROW2BUF    001A4C R   |     ROWBUFF =  001680     |     RP0     =  000026 
  6 RPAT       0001EE R   |     RPP     =  0017FF     |   6 RPSTO      0001FB R
    RST_SR  =  0050B3     |   6 SAME1      000DDA R   |   6 SAME2      000E03 R
  6 SAMEQ      000DD2 R   |   6 SCOM1      001339 R   |   6 SCOM2      00133C R
  6 SCOMP      00131B R   |   6 SEMIS      00135F R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000990 R   |   6 SIGN1      0009A0 R
  6 SLASH      000628 R   |   6 SLMOD      00060C R   |   6 SNAME      0012CE R
    SP0     =  000024     |   6 SPACE      000B54 R   |   6 SPACS      000B63 R
  6 SPAT       000247 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001670     |   6 SPSTO      000254 R   |   6 SSMOD      0006B8 R
    STACK   =  0017FF     |   6 STAR       000681 R   |   6 STASL      0006C9 R
  6 STORE      0001A9 R   |   6 STR        0009BE R   |   6 STRCQ      001164 R
  6 STRQ       001285 R   |   6 STRQP      000BD1 R   |   6 SUBB       000481 R
  6 SWAPP      000277 R   |     SWIM_CSR=  007F80     |   6 TAP        000EED R
  6 TBOOT      0015B6 R   |     TBUFFBAS=  001680     |   6 TCHA1      000770 R
  6 TCHAR      000760 R   |   6 TEMP       000333 R   |   6 TEVAL      000373 R
  6 THENN      0011E5 R   |   6 TIB        000845 R   |     TIBB    =  001700 
    TIBBASE =  001700     |     TIC     =  000027     |   6 TICK       0010D3 R
    TIM1_ARR=  005262     |     TIM1_ARR=  005263     |     TIM1_BKR=  00526D 
    TIM1_CCE=  00525C     |     TIM1_CCE=  00525D     |     TIM1_CCM=  005258 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  005259 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525A 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCM=  00525B 
    TIM1_CCM=  000000     |     TIM1_CCM=  000001     |     TIM1_CCM=  000004 
    TIM1_CCM=  000005     |     TIM1_CCM=  000006     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000003     |     TIM1_CCM=  000007 
    TIM1_CCM=  000002     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000003     |     TIM1_CCR=  005265 
    TIM1_CCR=  005266     |     TIM1_CCR=  005267     |     TIM1_CCR=  005268 
    TIM1_CCR=  005269     |     TIM1_CCR=  00526A     |     TIM1_CCR=  00526B 
    TIM1_CCR=  00526C     |     TIM1_CNT=  00525E     |     TIM1_CNT=  00525F 
    TIM1_CR1=  005250     |     TIM1_CR2=  005251     |     TIM1_CR2=  000000 
    TIM1_CR2=  000002     |     TIM1_CR2=  000004     |     TIM1_CR2=  000005 
    TIM1_CR2=  000006     |     TIM1_DTR=  00526E     |     TIM1_EGR=  005257 
    TIM1_EGR=  000007     |     TIM1_EGR=  000001     |     TIM1_EGR=  000002 
    TIM1_EGR=  000003     |     TIM1_EGR=  000004     |     TIM1_EGR=  000005 
    TIM1_EGR=  000006     |     TIM1_EGR=  000000     |     TIM1_ETR=  005253 
    TIM1_ETR=  000006     |     TIM1_ETR=  000000     |     TIM1_ETR=  000001 
    TIM1_ETR=  000002     |     TIM1_ETR=  000003     |     TIM1_ETR=  000007 
    TIM1_ETR=  000004     |     TIM1_ETR=  000005     |     TIM1_IER=  005254 
    TIM1_IER=  000007     |     TIM1_IER=  000001     |     TIM1_IER=  000002 
    TIM1_IER=  000003     |     TIM1_IER=  000004     |     TIM1_IER=  000005 
    TIM1_IER=  000006     |     TIM1_IER=  000000     |     TIM1_OIS=  00526F 
    TIM1_PSC=  005260     |     TIM1_PSC=  005261     |     TIM1_RCR=  005264 
    TIM1_SMC=  005252     |     TIM1_SMC=  000007     |     TIM1_SMC=  000000 
    TIM1_SMC=  000001     |     TIM1_SMC=  000002     |     TIM1_SMC=  000004 
    TIM1_SMC=  000005     |     TIM1_SMC=  000006     |     TIM1_SR1=  005255 
    TIM1_SR1=  000007     |     TIM1_SR1=  000001     |     TIM1_SR1=  000002 
    TIM1_SR1=  000003     |     TIM1_SR1=  000004     |     TIM1_SR1=  000005 
    TIM1_SR1=  000006     |     TIM1_SR1=  000000     |     TIM1_SR2=  005256 
    TIM1_SR2=  000001     |     TIM1_SR2=  000002     |     TIM1_SR2=  000003 
    TIM1_SR2=  000004     |     TIM2_ARR=  00530D     |     TIM2_ARR=  00530E 
    TIM2_CCE=  005308     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_EGR=  005304 
    TIM2_IER=  005301     |     TIM2_PSC=  00530C     |     TIM2_SR1=  005302 
    TIM2_SR2=  005303     |     TIM3_ARR=  00532B     |     TIM3_ARR=  00532C 
    TIM3_CCE=  005327     |     TIM3_CCE=  000000     |     TIM3_CCE=  000001 
    TIM3_CCE=  000004     |     TIM3_CCE=  000005     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCM=  005325     |     TIM3_CCM=  005326 
    TIM3_CCM=  000000     |     TIM3_CCM=  000004     |     TIM3_CCM=  000003 
    TIM3_CCR=  00532D     |     TIM3_CCR=  00532E     |     TIM3_CCR=  00532F 
    TIM3_CCR=  005330     |     TIM3_CNT=  005328     |     TIM3_CNT=  005329 
    TIM3_CR1=  005320     |     TIM3_CR1=  000007     |     TIM3_CR1=  000000 
    TIM3_CR1=  000003     |     TIM3_CR1=  000001     |     TIM3_CR1=  000002 
    TIM3_EGR=  005324     |     TIM3_IER=  005321     |     TIM3_PSC=  00532A 
    TIM3_SR1=  005322     |     TIM3_SR2=  005323     |     TIM4_ARR=  005346 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]

Symbol Table

    TIM4_CNT=  005344     |     TIM4_CR1=  005340     |     TIM4_CR1=  000007 
    TIM4_CR1=  000000     |     TIM4_CR1=  000003     |     TIM4_CR1=  000001 
    TIM4_CR1=  000002     |     TIM4_EGR=  005343     |     TIM4_EGR=  000000 
    TIM4_IER=  005341     |     TIM4_IER=  000000     |     TIM4_PSC=  005345 
    TIM4_PSC=  000000     |     TIM4_PSC=  000007     |     TIM4_PSC=  000004 
    TIM4_PSC=  000001     |     TIM4_PSC=  000005     |     TIM4_PSC=  000002 
    TIM4_PSC=  000006     |     TIM4_PSC=  000003     |     TIM4_PSC=  000000 
    TIM4_PSC=  000001     |     TIM4_PSC=  000002     |     TIM4_SR =  005342 
    TIM4_SR_=  000000     |   6 TIMEOUTQ   0000E3 R   |   6 TIMER      0000CD R
    TIM_CR1_=  000007     |     TIM_CR1_=  000000     |     TIM_CR1_=  000006 
    TIM_CR1_=  000005     |     TIM_CR1_=  000004     |     TIM_CR1_=  000003 
    TIM_CR1_=  000001     |     TIM_CR1_=  000002     |   6 TNAM2      001510 R
  6 TNAM3      00152E R   |   6 TNAM4      001534 R   |   6 TNAME      00150D R
  6 TOKEN      000DAE R   |   6 TOR        000230 R   |     TRUEE   =  00FFFF 
  6 TWOSL      00071C R   |   6 TYPE1      000B83 R   |   6 TYPE2      000B8F R
  6 TYPES      000B7E R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000016     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000C24 R   |   6 UDOTR      000C04 R   |   6 UEND       00003D R
    UFCP    =  000018     |     UHLD    =  000012     |     UINN    =  00000A 
    UINTER  =  000010     |     ULAST   =  00001A     |   6 ULES1      0004DE R
  6 ULESS      0004C8 R   |   6 UMMOD      00055E R   |   6 UMSTA      000637 R
  6 UNIQ1      0012C5 R   |   6 UNIQU      0012A6 R   |   6 UNTIL      0011B0 R
  6 UPL1       000308 R   |   6 UPLUS      0002F1 R   |     UPP     =  000006 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]

Symbol Table

    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTIB    =  00000E     |     UTMP    =  000008     |   6 UTYP1      001447 R
  6 UTYP2      001456 R   |   6 UTYPE      001442 R   |   6 UZERO      000027 R
  6 VARIA      0013E4 R   |     VAR_HERE=  004006     |     VER     =  000002 
    VSIZE   =  000002     |     WANT_DEB=  000000     |     WANT_SEE=  000000 
    WDGOPT  =  004805     |     WDGOPT_I=  000002     |     WDGOPT_L=  000003 
    WDGOPT_W=  000000     |     WDGOPT_W=  000001     |   6 WHILE      00122F R
  6 WITHI      000543 R   |   6 WORDD      000D9A R   |   6 WORDS      00156A R
  6 WORS1      001570 R   |   6 WORS2      00158F R   |     WWDG_CR =  0050D1 
    WWDG_WR =  0050D2     |   6 XORR       0002DC R   |     XTEMP   =  00001C 
    YTEMP   =  00001E     |   6 ZERO       000736 R   |   6 ZL1        0002A9 R
  6 ZLESS      0002A0 R   |   6 app_spac   001A80 R   |   6 block_er   00180A R
  6 clear_ra   000019 R   |   6 clock_in   00005A R   |   6 constant   001414 R
  6 copy_buf   001861 R   |   6 copy_buf   001880 R   |   6 copy_pro   001880 R
    da      =  000002     |     db      =  000003     |     dc      =  000000 
    dd      =  000001     |   6 ee_ccomm   001A2A R   |   6 ee_comma   001A09 R
  6 ee_cstor   001777 R   |   6 ee_store   0017C3 R   |   6 eeprom     001686 R
  6 erase_fl   001826 R   |   6 farat      001698 R   |   6 farcat     0016B4 R
  6 fptr_sto   001667 R   |   6 inc_fptr   001745 R   |   6 lock       001731 R
  6 main       000016 R   |   6 pristine   0018FB R   |   6 proceed_   001829 R
  6 reboot     0000FA R   |   6 reset_ve   001962 R   |   6 row_eras   0017ED R
  6 row_eras   00183A R   |   6 row_eras   001861 R   |   6 set_opti   0018CF R
  6 set_vect   0019B5 R   |   6 tbuff      000362 R   |   6 uart1_in   00006C R
  6 unlock     001709 R   |   6 unlock_e   0016CB R   |   6 unlock_f   0016EA R
  6 write_by   00175C R   |   6 write_ro   0018A5 R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   1A80   flags    0

