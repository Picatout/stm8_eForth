ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 1.
Hexadecimal [24-Bits]



                                      1 ;-------------------------------------------------------------
                                      2 ;  eForth for STM8S adapted from C. H. Ting source file to 
                                      3 ;  assemble using sdasstm8
                                      4 ;  implemented on NUCLEO-8S208RB board
                                      5 ;  Adapted by picatout 2019/10/27
                                      6 ;  https://github.com/picatout/stm8_nucleo/eForth
                                      7 ;--------------------------------------------------------------
                                      8 	.module EFORTH
                                      9          .optsdcc -mstm8
                                        	.include "inc/nucleo_8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; NUCLEO-8S208RB board specific definitions
                                        ; Date: 2019/10/29
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        
                                        ; mcu on board is stm8s208rbt6
                                        
                                        ; crystal on board is 8Mhz
                                 
                                        
                                        ; LED2 is user LED
                                        ; connected to PC5 via Q2 -> 2N7002 MOSFET
                                 
                                 
                                 
                                        
                                        ; B1 on schematic is user button
                                        ; connected to PE4
                                        ; external pullup resistor R6 4k7 and debounce capacitor C5 100nF
                                 
                                 
                                 
                                        
                                        
                                        	.include "inc/stm8s208.inc"
                                        ;;
                                        ; Copyright Jacques Deschênes 2019 
                                        ; This file is part of MONA 
                                        ;
                                        ;     MONA is free software: you can redistribute it and/or modify
                                        ;     it under the terms of the GNU General Public License as published by
                                        ;     the Free Software Foundation, either version 3 of the License, or
                                        ;     (at your option) any later version.
                                        ;
                                        ;     MONA is distributed in the hope that it will be useful,
                                        ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                        ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                        ;     GNU General Public License for more details.
                                        ;
                                        ;     You should have received a copy of the GNU General Public License
                                        ;     along with MONA.  If not, see <http://www.gnu.org/licenses/>.
                                        ;;
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ; 2019/10/18
                                        ; STM8S208RB µC registers map
                                        ; sdas source file
                                        ; author: Jacques Deschênes, copyright 2018,2019
                                        ; licence: GPLv3
                                        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        	.module stm8s208rb
                                        
                                        ;;;;;;;;;;;;
                                        ; bits
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         	
                                        ;;;;;;;;;;;;
                                        ; bits masks
                                        ;;;;;;;;;;;;
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; HSI oscillator frequency 16Mhz
                                 
                                        ; LSI oscillator frequency 128Khz
                                 
                                        
                                        ; controller memory regions
                                 
                                 
                                        ; STM8S208RB have 128K flash
                                 
                                        ; erase block size 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; options bytes
                                        ; this one can be programmed only from SWIM  (ICP)
                                 
                                        ; these can be programmed at runtime (IAP)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; option registers usage
                                        ; read out protection, value 0xAA enable ROP
                                 
                                        ; user boot code, {0..0x3e} 512 bytes row
                                 
                                 
                                        ; alternate function register
                                 
                                 
                                        ; miscelinous options
                                 
                                 
                                        ; clock options
                                 
                                 
                                        ; HSE clock startup delay
                                 
                                 
                                        ; flash wait state
                                 
                                 
                                        
                                        ; watchdog options bits
                                 
                                 
                                 
                                 
                                        ; NWDGOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; CLKOPT bits
                                 
                                 
                                 
                                 
                                        
                                        ; AFR option, remapable functions
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; device ID = (read only)
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                 
                                 
                                        ; PORTS SFR OFFSET
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; GPIO
                                        ; gpio register offset to base
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; port A
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port B
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port C
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port D
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port E
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port F
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port G
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port H not present on LQFP48/LQFP64 package
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; port I ; only bit 0 on LQFP64 package, not present on LQFP48
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; input modes CR1
                                 
                                 
                                        ; output mode CR1
                                 
                                 
                                        ; input modes CR2
                                 
                                 
                                        ; output speed CR2
                                 
                                 
                                        
                                        
                                        ; Flash memory
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; data memory unlock keys
                                 
                                 
                                        ; flash memory unlock keys
                                 
                                 
                                        ; FLASH_CR1 bits
                                 
                                 
                                 
                                 
                                        ; FLASH_CR2 bits
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_FPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_NFPR bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; FLASH_IAPSR bits
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt control
                                 
                                 
                                        
                                        ; Reset Status
                                 
                                        
                                        ; Clock Registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Peripherals clock gating
                                        ; CLK_PCKENR1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; CLK_PCKENR2
                                 
                                 
                                 
                                        
                                        ; Clock bits
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        ; clock source
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Watchdog
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Beeper
                                        ; beeper output is alternate function AFR7 on PD4
                                        ; connected to CN9-6
                                 
                                 
                                 
                                 
                                        
                                        ; SPI
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; I2C
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                        ; Precalculated values, all in KHz
                                 
                                 
                                        ;
                                        ; Fast I2C mode max rise time = 300ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (300/62.5) + 1 = floor(4.8) + 1 = 5.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        ;
                                        ; Standard I2C mode max rise time = 1000ns
                                        ; I2C_FREQR = 16 = (MHz) => tMASTER = 1/16 = 62.5 ns
                                        ; TRISER = = (1000/62.5) + 1 = floor(16) + 1 = 17.
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; baudrate constant for brr_value table access
                                        ; to be used by uart_init 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART registers offset from
                                        ; base address 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; uart identifier
                                        ; to be used by uart_init
                                 
                                 
                                        
                                        ; pins used by uart 
                                 
                                 
                                 
                                 
                                        ; uart port base address 
                                 
                                 
                                        
                                        ; UART1 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; UART Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Uart Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        ; LIN mode config register
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMERS
                                        ; Timer 1 - 16-bit timer with complementary PWM outputs
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Control Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Slave Mode Control bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer External Trigger Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Interrupt Enable bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Status Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                        
                                        ; Timer Event Generation Register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 1 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR1_CC1S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 2 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR2_CC2S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 3 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR3_CC3S1 = (1)
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in output
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Capture/Compare Mode Register 4 - channel configured in input
                                 
                                 
                                 
                                 
                                 
                                 
                                        ;  TIM1_CCMR4_CC4S1 = (1)
                                 
                                        
                                        ; Timer 2 - 16-bit timer
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM2_CR1 bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCMR bitfields 
                                 
                                 
                                 
                                        
                                        ; TIMER2_CCER1 bitfields
                                 
                                 
                                 
                                 
                                        
                                        ; TIMER2_EGR bitfields
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 3
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; TIM3_CR1  fields
                                 
                                 
                                 
                                 
                                 
                                        ; TIM3_CCR2  fields
                                 
                                 
                                 
                                        ; TIM3_CCER1 fields
                                 
                                 
                                 
                                 
                                        ; TIM3_CCER2 fields
                                 
                                 
                                        
                                        ; Timer 4
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Timer 4 bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                        
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; ADC2
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; ADC bitmasks
                                        
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                 
                                 
                                 
                                        
                                 
                                 
                                        
                                        ; beCAN
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        
                                        ; CPU
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; global configuration register
                                 
                                 
                                 
                                        
                                        ; interrupt control registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        ; interrupt priority
                                 
                                 
                                 
                                 
                                 
                                         
                                        ; SWIM, control and status register
                                 
                                        ; debug registers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Numbers
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Interrupt Vectors
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                        
                                        ; Condition code register bits
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                     13 	.list
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 2.
Hexadecimal [24-Bits]



                                     15 
                                     16 ;===============================================================
                                     17 ;  Adaption to NUCLEO-8S208RB by Picatout
                                     18 ;  Date: 2020-06-07 
                                     19 ;       Suite aux nombreux changement remplacé le numéro de version pour 3.0
                                     20 ;  Date: 2019-10-26
                                     21 ;  Changes to memory map:
                                     22 ;       0x16f0  Data Stack, growing downward
                                     23 ;       0x1700  Terminal input buffer TIB
                                     24 ;       0x17ff  Return Stack, growing downard
                                     25 ;================================================================
                                     26 ;       STM8EF, Version 2.1, 13 July
                                     27 ;               Implemented on STM8S-Discovery Board.
                                     28 ;               Assembled by ST VisualDevelop STVD 
                                     29 ;               Bootup on internal 2 MHz clock
                                     30 ;               Switch to external 16 MHz crystal clock
                                     31 ;
                                     32 ; FORTH Virtual Machine:
                                     33 ; Subroutine threaded model
                                     34 ; SP Return stack pointer
                                     35 ; X Data stack pointer
                                     36 ; A,Y Scratch pad registers
                                     37 ;
                                     38 ; Memory Map:
                                     39 ; 0x0 RAM memory, system variables
                                     40 ; 0x80 Start of user defined words, linked to ROM dictionary
                                     41 ; 0x780 Data stack, growing downward
                                     42 ; 0x790 Terminal input buffer TIB
                                     43 ; 0x7FF Return stack, growing downward
                                     44 ; 0x8000 Interrupt vector table
                                     45 ; 0x8080 FORTH startup code
                                     46 ; 0x80E7 Start of FORTH dictionary in ROM
                                     47 ; 0x9584 End of FORTH dictionary
                                     48 ;
                                     49 ;       2020-04-26 Addapted for NUCLEO-8S208RB by Picatout 
                                     50 ;                  use UART1 instead of UART3 for communication with user.
                                     51 ;                  UART1 is available as ttyACM* device via USB connection.
                                     52 ;                  Use TIMER4 for millisecond interrupt to support MS counter 
                                     53 ;                  and MSEC word that return MS value.
                                     54 ;
                                     55 ;       EF12, Version 2.1, 18apr00cht
                                     56 ;               move to 8000H replacing WHYP.
                                     57 ;               copy interrupt vectors from WHYPFLSH.S19
                                     58 ;               to EF12.S19 before flashing
                                     59 ;               add TICKS1 and DELAY1 for motor stepping
                                     60 ;
                                     61 ;       EF12, 02/18/00, C. H. Ting
                                     62 ;       Adapt 86eForth v2.02 to 68HC12.
                                     63 ;               Use WHYP to seed EF12.ASM
                                     64 ;               Use AS12 native 68HC12 assembler:
                                     65 ;               as12 ef12.asm >ef12.lst
                                     66 ;       EF12A, add ADC code, 02mar00cht
                                     67 ;       EF12B, 01mar00cht
                                     68 ;               stack to 0x78, return stack to 0xf8.
                                     69 ;               add all port definitions
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 3.
Hexadecimal [24-Bits]



                                     70 ;               add PWM registers
                                     71 ;               add SPI registers and code
                                     72 ;       EF12C, 12mar00cht
                                     73 ;               add MAX5250 D/A converter
                                     74 ;       EF12D, 15mar00cht
                                     75 ;               add all the Lexel interface words
                                     76 ;       EF12E, 18apr00cht, save for reference
                                     77 ;
                                     78 ;       Copyright (c) 2000
                                     79 ;       Dr. C. H. Ting
                                     80 ;       156 14th Avenue
                                     81 ;       San Mateo, CA 94402
                                     82 ;       (650) 571-7639
                                     83 ;
                                     84 
                                     85 
                                     86 ;*********************************************************
                                     87 ;	Assembler constants
                                     88 ;*********************************************************
                           000000    89 RAMBASE =	0x0000	   ;ram base
                           0017FF    90 STACK   =	0x17FF 	;system (return) stack empty 
                           001680    91 DATSTK  =	0x1680	;data stack  empty
                           001680    92 TBUFFBASE =     0x1680  ; flash read/write transaction buffer address  
                           001700    93 TIBBASE =       0X1700  ; transaction input buffer addr.
                                     94 
                                     95 
                                     96 
                                     97 ;; Memory allocation
                                     98 
                           000006    99 UPP     =     RAMBASE+6          ; systeme variables base address 
                           001680   100 SPP     =     RAMBASE+DATSTK     ; data stack bottom 
                           0017FF   101 RPP     =     RAMBASE+STACK      ;  return stack bottom
                           001680   102 ROWBUFF =     RAMBASE+TBUFFBASE ; flash write buffer 
                           001700   103 TIBB    =     RAMBASE+TIBBASE  ; transaction input buffer
                           000080   104 VAR_BASE =    RAMBASE+0x80  ; user variables start here .
                           0017BF   105 VAR_TOP =     STACK-32*CELLL  ; reserve 32 cells for data stack. 
                                    106 
                                    107 ; user variables constants 
                           000006   108 UBASE = UPP       ; numeric base 
                           000008   109 UTMP = UBASE+2    ; temporary storage
                           00000A   110 UINN = UTMP+2     ; >IN tib pointer 
                           00000C   111 UCTIB = UINN+2    ; tib count 
                           00000E   112 UTIB = UCTIB+2    ; tib address 
                           000010   113 UINTER = UTIB+2   ; interpreter vector 
                           000012   114 UHLD = UINTER+2   ; hold 
                           000014   115 UCNTXT = UHLD+2   ; context, dictionary first link 
                           000016   116 UVP = UCNTXT+2    ; variable pointer 
                           000018   117 UCP = UVP+2      ; code pointer
                           00001A   118 ULAST = UCP+2    ; last dictionary pointer 
                           00001C   119 UOFFSET = ULAST+2 ; distance between CP and VP to adjust jump address at compile time.
                           00001E   120 UTFLASH = UOFFSET+2 ; select where between FLASH and RAM for compilation destination. 
                           000020   121 URLAST = UTFLASH+2 ; context for dictionary in RAM memory 
                                    122 
                                    123 ;******  System Variables  ******
                           000022   124 XTEMP	=	URLAST +2;address called by CREATE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 4.
Hexadecimal [24-Bits]



                           000024   125 YTEMP	=	XTEMP+2	;address called by CREATE
                           000022   126 PROD1 = XTEMP	;space for UM*
                           000024   127 PROD2 = PROD1+2
                           000026   128 PROD3 = PROD2+2
                           000028   129 CARRY = PROD3+2
                           00002A   130 SP0	= CARRY+2	;initial data stack pointer
                           00002C   131 RP0	= SP0+2		;initial return stack pointer
                           00002E   132 MS    =   RP0+2         ; millisecond counter 
                           000030   133 CNTDWN =  MS+2          ; count down timer 
                           000032   134 FPTR = CNTDWN+2         ; 24 bits farptr 
                           000033   135 PTR16 = FPTR+1          ; middle byte of farptr 
                           000034   136 PTR8 = FPTR+2           ; least byte of farptr 
                           000036   137 SEEDX = PTR8+2          ; PRNG seed X 
                           000038   138 SEEDY = SEEDX+2         ; PRNG seed Y 
                                    139 
                                    140 ; EEPROM persistant data  
                           004000   141 APP_LAST = EEPROM_BASE ; Application last word pointer  
                           004002   142 APP_RUN = APP_LAST+2   ; application autorun address 
                           004004   143 APP_CP = APP_RUN+2   ; free application space pointer 
                           004006   144 APP_VP = APP_CP+2  ; free data space pointer 
                                    145 
                                    146 
                                    147 ;***********************************************
                                    148 ;; Version control
                                    149 
                           000003   150 VER     =     3         ;major release version
                           000000   151 EXT     =     0         ;minor extension
                                    152 
                                    153 ;; Constants
                                    154 
                           00FFFF   155 TRUEE   =     0xFFFF      ;true flag
                                    156 
                           000040   157 COMPO   =     0x40     ;lexicon compile only bit
                           000080   158 IMEDD   =     0x80     ;lexicon immediate bit
                           001F7F   159 MASKK   =     0x1F7F  ;lexicon bit mask
                                    160 
                           000002   161 CELLL   =     2       ;size of a cell
                           00000A   162 BASEE   =     10      ;default radix
                           000008   163 BKSPP   =     8       ;back space
                           00000A   164 LF      =     10      ;line feed
                           00000D   165 CRR     =     13      ;carriage return
                           00001B   166 ERR     =     27      ;error escape
                           000027   167 TIC     =     39      ;tick
                           0000CD   168 CALLL   =     0xCD     ;CALL opcodes
                           000080   169 IRET_CODE =   0x80    ; IRET opcode 
                                    170 
                                    171         .macro _ledon
                                    172         bset PC_ODR,#LED2_BIT
                                    173         .endm
                                    174 
                                    175         .macro _ledoff
                                    176         bres PC_ODR,#LED2_BIT
                                    177         .endm
                                    178 
                                    179 ;**********************************************************
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 5.
Hexadecimal [24-Bits]



                                    180         .area DATA (ABS)
      000000                        181         .org RAMBASE 
                                    182 ;**********************************************************
                                    183 
                                    184 ;**********************************************************
                                    185         .area SSEG (ABS) ; STACK
      001700                        186         .org 0x1700
      001700                        187         .ds 256 
                                    188 ; space for DATSTK,TIB and STACK         
                                    189 ;**********************************************************
                                    190 
                                    191 ;**********************************************************
                                    192         .area HOME ; vectors table
                                    193 ;**********************************************************
      000000 82 00 00 16            194 	int main	        ; reset
      000004 82 00 00 00            195 	int NonHandledInterrupt	; trap
      000008 82 00 00 00            196 	int NonHandledInterrupt	; irq0
      00000C 82 00 00 00            197 	int NonHandledInterrupt	; irq1
      000010 82 00 00 00            198 	int NonHandledInterrupt	; irq2
      000014 82 00 00 00            199 	int NonHandledInterrupt	; irq3
      000018 82 00 00 00            200 	int NonHandledInterrupt	; irq4
      00001C 82 00 00 00            201 	int NonHandledInterrupt	; irq5
      000020 82 00 00 00            202 	int NonHandledInterrupt	; irq6
      000024 82 00 00 00            203 	int NonHandledInterrupt	; irq7
      000028 82 00 00 00            204 	int NonHandledInterrupt	; irq8
      00002C 82 00 00 00            205 	int NonHandledInterrupt	; irq9
      000030 82 00 00 00            206 	int NonHandledInterrupt	; irq10
      000034 82 00 00 00            207 	int NonHandledInterrupt	; irq11
      000038 82 00 00 00            208 	int NonHandledInterrupt	; irq12
      00003C 82 00 00 00            209 	int NonHandledInterrupt	; irq13
      000040 82 00 00 00            210 	int NonHandledInterrupt	; irq14
      000044 82 00 00 00            211 	int NonHandledInterrupt	; irq15
      000048 82 00 00 00            212 	int NonHandledInterrupt	; irq16
      00004C 82 00 00 00            213 	int NonHandledInterrupt	; irq17
      000050 82 00 00 00            214 	int NonHandledInterrupt	; irq18
      000054 82 00 00 00            215 	int NonHandledInterrupt	; irq19
      000058 82 00 00 00            216 	int NonHandledInterrupt	; irq20
      00005C 82 00 00 00            217 	int NonHandledInterrupt	; irq21
      000060 82 00 00 00            218 	int NonHandledInterrupt	; irq22
      000064 82 00 00 05            219 	int Timer4Handler	; irq23
      000068 82 00 00 00            220 	int NonHandledInterrupt	; irq24
      00006C 82 00 00 00            221 	int NonHandledInterrupt	; irq25
      000070 82 00 00 00            222 	int NonHandledInterrupt	; irq26
      000074 82 00 00 00            223 	int NonHandledInterrupt	; irq27
      000078 82 00 00 00            224 	int NonHandledInterrupt	; irq28
      00007C 82 00 00 00            225 	int NonHandledInterrupt	; irq29
                                    226 
                                    227 ;**********************************************************
                                    228         .area CODE
                                    229 ;**********************************************************
                                    230 
                                    231 ; non handled interrupt reset MCU
      000000                        232 NonHandledInterrupt:
      000000 A6 80            [ 1]  233         ld a, #0x80
      000002 C7 50 D1         [ 1]  234         ld WWDG_CR,a ; WWDG_CR used to reset mcu
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 6.
Hexadecimal [24-Bits]



                                    235 	;iret
                                    236 
                                    237 ; used for milliseconds counter 
                                    238 ; MS is 16 bits counter 
      000005                        239 Timer4Handler:
      000005 72 5F 53 42      [ 1]  240 	clr TIM4_SR 
      000009 BE 2E            [ 2]  241         ldw x,MS 
      00000B 5C               [ 2]  242         incw x 
      00000C BF 2E            [ 2]  243         ldw MS,x
      00000E BE 30            [ 2]  244         ldw x,CNTDWN 
      000010 27 03            [ 1]  245         jreq 1$
      000012 5A               [ 2]  246         decw x 
      000013 BF 30            [ 2]  247         ldw CNTDWN,x 
      000015                        248 1$:         
      000015 80               [11]  249         iret 
                                    250 
                                    251 
                                    252 ;; Main entry points and COLD start data
      000016                        253 main:
                                    254 ; clear all RAM
      000016 AE 00 00         [ 2]  255 	ldw X,#RAMBASE
      000019                        256 clear_ram0:
      000019 7F               [ 1]  257 	clr (X)
      00001A 5C               [ 2]  258 	incw X
      00001B A3 17 FF         [ 2]  259 	cpw X,#RAM_END
      00001E 23 F9            [ 2]  260 	jrule clear_ram0
      000020 AE 17 FF         [ 2]  261         ldw x,#RPP
      000023 94               [ 1]  262         ldw sp,x
                                    263 ; set SEEDX and SEEDY to 1 
      000024 3C 37            [ 1]  264         inc SEEDX+1 
      000026 3C 39            [ 1]  265         inc SEEDY+1          
      000028 CC 00 47         [ 2]  266 	jp ORIG
                                    267 
                                    268 ; COLD initialize these variables.
      00002B                        269 UZERO:
      00002B 00 0A                  270         .word      BASEE   ;BASE
      00002D 00 00                  271         .word      0       ;tmp
      00002F 00 00                  272         .word      0       ;>IN
      000031 00 00                  273         .word      0       ;#TIB
      000033 17 00                  274         .word      TIBB    ;TIB
      000035 12 F9                  275         .word      INTER   ;'EVAL
      000037 00 00                  276         .word      0       ;HLD
      000039 21 2A                  277         .word      LASTN  ;CNTXT pointer
      00003B 00 80                  278         .word      VAR_BASE   ;variables free space pointer 
      00003D 21 80                  279         .word      app_space ; FLASH free space pointer 
      00003F 21 2A                  280         .word      LASTN   ;LAST
      000041 00 00                  281         .word      0        ; OFFSET 
      000043 00 00                  282         .word      0       ; TFLASH
                                    283 ;       .word      0       ; URLAST   
      000045 00 00                  284 UEND:   .word      0
                                    285 
      000047                        286 ORIG:   
                                    287 ; initialize SP
      000047 AE 17 FF         [ 2]  288         LDW     X,#STACK  ;initialize return stack
      00004A 94               [ 1]  289         LDW     SP,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 7.
Hexadecimal [24-Bits]



      00004B BF 2C            [ 2]  290         LDW     RP0,X
      00004D AE 16 80         [ 2]  291         LDW     X,#DATSTK ;initialize data stack
      000050 BF 2A            [ 2]  292         LDW     SP0,X
                                    293 ; initialize PC_5 as output to control LED2
                                    294 ; added by Picatout 
      000052 72 1A 50 0D      [ 1]  295         bset PC_CR1,#LED2_BIT
      000056 72 1A 50 0E      [ 1]  296         bset PC_CR2,#LED2_BIT
      00005A 72 1A 50 0C      [ 1]  297         bset PC_DDR,#LED2_BIT
      00005E                        298         _ledoff
      00005E 72 1B 50 0A      [ 1]    1         bres PC_ODR,#LED2_BIT
                                    299 ; initialize clock to HSI
                                    300 ; no divisor 16Mhz 
                                    301 ; Added by Picatout 
      000062                        302 clock_init:
      000062 72 5F 50 C6      [ 1]  303         clr CLK_CKDIVR
      000066 72 12 50 C5      [ 1]  304 	bset CLK_SWCR,#CLK_SWCR_SWEN
      00006A A6 E1            [ 1]  305 	ld a,#CLK_SWR_HSI
      00006C C7 50 C4         [ 1]  306 	ld CLK_SWR,a
      00006F C1 50 C3         [ 1]  307 1$:	cp a,CLK_CMSR
      000072 26 FB            [ 1]  308 	jrne 1$
                                    309         
                                    310 ; initialize UART1, 115200 8N1
      000074                        311 uart1_init:
      000074 72 14 50 C7      [ 1]  312 	bset CLK_PCKENR1,#CLK_PCKENR1_UART1
                                    313 	; configure tx pin
      000078 72 1A 50 02      [ 1]  314 	bset PA_DDR,#UART1_TX_PIN ; tx pin
      00007C 72 1A 50 03      [ 1]  315 	bset PA_CR1,#UART1_TX_PIN ; push-pull output
      000080 72 1A 50 04      [ 1]  316 	bset PA_CR2,#UART1_TX_PIN ; fast output
                                    317 	; baud rate 115200 Fmaster=8Mhz  8000000/115200=69=0x45
      000084 35 0B 52 33      [ 1]  318 	mov UART1_BRR2,#0x0b ; must be loaded first
      000088 35 08 52 32      [ 1]  319 	mov UART1_BRR1,#0x8
      00008C 35 0C 52 35      [ 1]  320 	mov UART1_CR2,#((1<<UART_CR2_TEN)|(1<<UART_CR2_REN));|(1<<UART_CR2_RIEN))
                                    321 ; initialize timer4, used for millisecond interrupt  
      000090 35 07 53 45      [ 1]  322 	mov TIM4_PSCR,#7 ; prescale 128  
      000094 35 7D 53 46      [ 1]  323 	mov TIM4_ARR,#125 ; set for 1msec.
      000098 35 05 53 40      [ 1]  324 	mov TIM4_CR1,#((1<<TIM4_CR1_CEN)|(1<<TIM4_CR1_URS))
      00009C 72 10 53 41      [ 1]  325 	bset TIM4_IER,#TIM4_IER_UIE 
                                    326 ; set TIM4 interrupt priority to highest
      0000A0 A6 3F            [ 1]  327         ld a,#~(IPR_MASK<<6)
      0000A2 C4 7F 75         [ 1]  328         and a,ITC_SPR6
      0000A5 AA C0            [ 1]  329         or a,#(IPR3<<6)
      0000A7 C7 7F 75         [ 1]  330         ld ITC_SPR6,a 
      0000AA 9A               [ 1]  331         rim
      0000AB CC 19 98         [ 2]  332         jp  COLD   ;default=MN1
                                    333 
                                    334 
                                    335 ;; place MCU in sleep mode with
                                    336 ;; halt opcode 
                                    337 ;; BYE ( -- )
      0000AE 00 00                  338         .word 0
                           0000B0   339         LINK=.
      0000B0 03                     340         .byte 3 
      0000B1 42 59 45               341         .ascii "BYE"
      0000B4                        342 BYE: 
      0000B4 8E               [10]  343         halt 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 8.
Hexadecimal [24-Bits]



      0000B5 81               [ 4]  344         ret 
                                    345 
                                    346 ; Enable interrupts 
                                    347 ; EI ( -- )
      0000B6 00 B0                  348         .word LINK 
                           0000B8   349         LINK=.
      0000B8 02                     350         .byte 2
      0000B9 45 49                  351         .ascii "EI"
      0000BB                        352 EI:
      0000BB 9A               [ 1]  353         rim 
      0000BC 81               [ 4]  354         ret 
                                    355 
                                    356 ; Disable interrupts
                                    357 ; DI ( -- )
      0000BD 00 B8                  358         .word LINK 
                           0000BF   359         LINK=.
      0000BF 02                     360         .byte 2 
      0000C0 44 49                  361         .ascii "DI"
      0000C2                        362 DI:
      0000C2 9B               [ 1]  363         sim 
      0000C3 81               [ 4]  364         ret 
                                    365 
                                    366 ; set interrupt priority level 
                                    367 ; SET-ISP ( n1 n2 -- )
                                    368 ; n1 level {1..3}
                                    369 ; n2 vector {0..29}
      0000C4 00 BF                  370         .word LINK 
                           0000C6   371         LINK=.
      0000C6 07                     372         .byte 7 
      0000C7 53 45 54 2D 49 53 50   373         .ascii "SET-ISP"
      0000CE                        374 SETISP:
      0000CE 90 93            [ 1]  375         ldw y,x 
      0000D0 90 FE            [ 2]  376         ldw y,(y)
      0000D2 A6 04            [ 1]  377         ld a,#4 ; 4 slot per register 
                                    378 ;  quotient select register, remainder select slot in register.        
      0000D4 90 62            [ 2]  379         div y,a ; register=ITC_SPR1[Y], lshift=2*A 
      0000D6 A4 03            [ 1]  380         and a,#3 
      0000D8 48               [ 1]  381         sll a ; 2*SLOT  lshift 
      0000D9 72 A9 7F 70      [ 2]  382         addw y,#ITC_SPR1 
      0000DD FF               [ 2]  383         ldw (x),y  ; ( level reg -- )
      0000DE 90 5F            [ 1]  384         clrw y 
      0000E0 90 97            [ 1]  385         ld yl,a 
      0000E2 1D 00 02         [ 2]  386         subw x,#CELLL 
      0000E5 FF               [ 2]  387         ldw (x),y  ; ( level reg lshift -- )
      0000E6 90 93            [ 1]  388         ldw y,x 
      0000E8 90 EE 02         [ 2]  389         ldw y,(2,y) 
      0000EB 90 F6            [ 1]  390         ld a,(y)   ; reg_value
      0000ED 1D 00 02         [ 2]  391         subw x,#CELLL 
      0000F0 FF               [ 2]  392         ldw (x),y ; ( level reg lshift rval -- )
      0000F1 CD 05 0D         [ 4]  393         call OVER ; ( level reg lshift rval lshift -- )
      0000F4 CD 03 B4         [ 4]  394         call DOLIT 
      0000F7 00 03                  395         .word 3
      0000F9 CD 04 F3         [ 4]  396         call SWAPP  ; ( level reg lshift rval 3 lshift )
      0000FC CD 09 F6         [ 4]  397         call LSHIFT ; creat slot mask 
      0000FF CD 06 F8         [ 4]  398         call INVER  ; ( level reg lshift rval mask )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 9.
Hexadecimal [24-Bits]



      000102 CD 05 2F         [ 4]  399         call ANDD ; ( level reg lshift slot_masked )
      000105 CD 04 AC         [ 4]  400         call TOR  ; ( level reg lshift -- R: slot_masked )
      000108 CD 06 9E         [ 4]  401         call ROT  ; ( reg lshift level )
      00010B CD 04 F3         [ 4]  402         call SWAPP ; ( reg level lshift )
      00010E CD 09 F6         [ 4]  403         call LSHIFT  ; ( reg slot_level -- )
      000111 CD 04 8D         [ 4]  404         call RFROM ; ( reg slot_level masked_val )
      000114 CD 05 43         [ 4]  405         call ORR   ; ( reg updated_rval )
      000117 CD 04 F3         [ 4]  406         call SWAPP 
      00011A CD 04 49         [ 4]  407         call CSTOR
                                    408 
                                    409 ; sélectionne l'application 
                                    410 ; qui démarre automatique lors 
                                    411 ; d'un COLD start 
      00011D 00 C6                  412         .word LINK 
                           00011F   413         LINK=.
      00011F 07                     414         .byte 7
      000120 41 55 54 4F 52 55 4E   415         .ascii "AUTORUN"
      000127                        416 AUTORUN:
      000127 CD 10 BE         [ 4]  417         call TOKEN 
      00012A CD 04 E3         [ 4]  418         call DUPP 
      00012D CD 03 E7         [ 4]  419         call QBRAN 
      000130 02 0D                  420         .word FORGET2
      000132 CD 11 BB         [ 4]  421         call NAMEQ
      000135 CD 06 8D         [ 4]  422         call QDUP 
      000138 CD 03 E7         [ 4]  423         call QBRAN 
      00013B 02 0D                  424         .word FORGET2
      00013D CD 04 D9         [ 4]  425         call DROP 
      000140 1D 00 04         [ 2]  426         subw x,#2*CELLL 
      000143 90 5F            [ 1]  427         clrw y 
      000145 FF               [ 2]  428         ldw (x),y 
      000146 90 AE 40 02      [ 2]  429         ldw y,#APP_RUN 
      00014A EF 02            [ 2]  430         ldw (2,x),y 
      00014C CC 1C C8         [ 2]  431         jp ee_store 
                                    432 
                                    433 ;; Reset dictionary pointer before 
                                    434 ;; forgotten word. RAM space and 
                                    435 ;; interrupt vector defined after 
                                    436 ;; must be resetted also.
      00014F 01 1F                  437         .word LINK 
                           000151   438         LINK=.
      000151 06                     439         .byte 6
      000152 46 4F 52 47 45 54      440         .ascii "FORGET" 
      000158                        441 FORGET: 
      000158 CD 10 BE         [ 4]  442         call TOKEN
      00015B CD 04 E3         [ 4]  443         call DUPP 
      00015E CD 03 E7         [ 4]  444         call QBRAN 
      000161 02 0D                  445         .word FORGET2
      000163 CD 11 BB         [ 4]  446         call NAMEQ ; ( a -- ca na | a F )
      000166 CD 06 8D         [ 4]  447         call QDUP 
      000169 CD 03 E7         [ 4]  448         call QBRAN 
      00016C 02 0D                  449         .word FORGET2
                                    450 ; only forget users words 
      00016E CD 04 E3         [ 4]  451         call DUPP ; ( ca na na )
      000171 CD 03 B4         [ 4]  452         call DOLIT 
      000174 21 80                  453         .word app_space 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 10.
Hexadecimal [24-Bits]



      000176 CD 04 F3         [ 4]  454         call SWAPP 
      000179 CD 07 9E         [ 4]  455         call  ULESS 
      00017C CD 03 E7         [ 4]  456         call QBRAN 
      00017F 01 CF                  457         .word FORGET6 
                                    458 ; ( ca na -- )        
                                    459 ;reset ivec with address >= ca
      000181 CD 04 F3         [ 4]  460         call SWAPP ; ( na ca -- ) 
      000184 CD 1E B9         [ 4]  461         call CHKIVEC ; ( na -- ) 
                                    462 ; start at LAST and link back to na 
                                    463 ; if variable found reset VP at that point.
      000187                        464 FORGET1:
      000187 CD 06 4F         [ 4]  465         call LAST 
      00018A CD 04 3C         [ 4]  466         call AT 
      00018D CD 04 E3         [ 4]  467         call DUPP  ; ( -- na last last )
      000190 CD 02 23         [ 4]  468         call FREEVAR ; ( -- na last )
      000193 CD 04 E3         [ 4]  469         call DUPP 
      000196 CD 03 B4         [ 4]  470         call DOLIT 
      000199 00 02                  471         .word 2 
      00019B CD 07 57         [ 4]  472         call SUBB ; ( na last -- na last lfa ) link address 
      00019E CD 04 3C         [ 4]  473         call AT 
      0001A1 CD 04 E3         [ 4]  474         call DUPP ; ( -- na last a a )
      0001A4 CD 06 23         [ 4]  475         call CNTXT 
      0001A7 CD 04 25         [ 4]  476         call STORE
      0001AA CD 06 4F         [ 4]  477         call LAST  
      0001AD CD 04 25         [ 4]  478         call STORE ; ( --  na last )
      0001B0 CD 05 0D         [ 4]  479         call OVER 
      0001B3 CD 07 7F         [ 4]  480         call EQUAL ; ( na last na -- na T|F ) 
      0001B6 CD 03 E7         [ 4]  481         call QBRAN 
      0001B9 01 87                  482         .word FORGET1 
                                    483 ; ( na -- )
      0001BB CD 03 B4         [ 4]  484         call DOLIT 
      0001BE 00 02                  485         .word 2 
      0001C0 CD 07 57         [ 4]  486         call SUBB 
      0001C3 CD 06 3F         [ 4]  487         call CPP 
      0001C6 CD 04 25         [ 4]  488         call STORE  
      0001C9 CD 1B 75         [ 4]  489         call UPDATCP 
      0001CC CC 1B 4C         [ 2]  490         jp UPDATLAST 
      0001CF                        491 FORGET6: ; tried to forget a RAM or system word 
                                    492 ; ( ca na -- )
      0001CF 1D 00 02         [ 2]  493         subw x,#CELLL 
      0001D2 90 BE 2A         [ 2]  494         ldw y,SP0 
      0001D5 FF               [ 2]  495         ldw (x),y  
      0001D6 CD 07 9E         [ 4]  496         call ULESS
      0001D9 CD 03 E7         [ 4]  497         call QBRAN 
      0001DC 01 FF                  498         .word PROTECTED 
      0001DE CD 12 C7         [ 4]  499         call ABORQ 
      0001E1 1D                     500         .byte 29
      0001E2 20 46 6F 72 20 52 41   501         .ascii " For RAM definition do REBOOT"
             4D 20 64 65 66 69 6E
             69 74 69 6F 6E 20 64
             6F 20 52 45 42 4F 4F
             54
      0001FF                        502 PROTECTED:
      0001FF CD 12 C7         [ 4]  503         call ABORQ
      000202 0A                     504         .byte 10
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 11.
Hexadecimal [24-Bits]



      000203 20 50 72 6F 74 65 63   505         .ascii " Protected"
             74 65 64
      00020D                        506 FORGET2: ; no name or not found in dictionary 
      00020D CD 12 C7         [ 4]  507         call ABORQ
      000210 05                     508         .byte 5
      000211 20 77 68 61 74         509         .ascii " what"
      000216                        510 FORGET4:
      000216 CC 04 D9         [ 2]  511         jp DROP 
                                    512 
                                    513 
                                    514 ;---------------------------------
                                    515 ; if na is variable 
                                    516 ; free variable data  
                                    517 ; FREEVAR ( na -- )
                                    518 ;---------------------------------
      000219 01 51                  519         .word LINK 
                           00021B   520         LINK=.
      00021B 07                     521         .byte 7 
      00021C 46 52 45 45 56 41 52   522         .ascii "FREEVAR"
      000223                        523 FREEVAR:
      000223 CD 04 E3         [ 4]  524         call DUPP ; ( na na -- )
      000226 CD 04 5A         [ 4]  525         CALL CAT  ; ( na c -- )
      000229 CD 09 D8         [ 4]  526         call ONEP ;
      00022C CD 06 DE         [ 4]  527         CALL PLUS ; ( na c+1 -- ca ) 
      00022F CD 09 D8         [ 4]  528         call ONEP ; ( ca+ -- ) to get routne address 
      000232 CD 04 E3         [ 4]  529         call DUPP ; ( ca+ ca+ -- )
      000235 CD 04 3C         [ 4]  530         CALL AT   ; ( ca+ fnaddr -- ) ; fnaddr is routine address 
      000238 CD 03 B4         [ 4]  531         call DOLIT 
      00023B 05 90                  532         .word DOVAR ; if routine address is DOVAR then variable 
      00023D CD 07 7F         [ 4]  533         call EQUAL  ; ( ca+ fnaddr DOVAR -- ca+ T|F ) 
      000240 CD 03 E7         [ 4]  534         call QBRAN 
      000243 02 59                  535         .word FREEVAR4 
      000245 CD 03 B4         [ 4]  536         call DOLIT 
      000248 00 02                  537         .word 2 
      00024A CD 06 DE         [ 4]  538         call PLUS  ; ( ca+ 2 -- da ) da is data address 
      00024D CD 04 3C         [ 4]  539         call AT 
      000250 CD 06 31         [ 4]  540         call VPP   
      000253 CD 04 25         [ 4]  541         call STORE 
      000256 CC 1B 8C         [ 2]  542         jp UPDATVP 
      000259                        543 FREEVAR4: ; not variable
      000259 CC 04 D9         [ 2]  544         jp  DROP 
                                    545 
                                    546 ;    SEED ( n -- )
                                    547 ; Initialize PRNG seed with n 
      00025C 02 1B                  548         .word LINK 
                           00025E   549         LINK=. 
      00025E 04                     550         .byte 4 
      00025F 53 45 45 44            551         .ascii "SEED" 
      000263                        552 SEED:
      000263 90 93            [ 1]  553         ldw y,x 
      000265 1C 00 02         [ 2]  554         addw x,#CELLL
      000268 90 FE            [ 2]  555         ldw y,(y)
      00026A 90 9E            [ 1]  556         ld a,yh 
      00026C B7 36            [ 1]  557         ld SEEDX,a 
      00026E 90 9F            [ 1]  558         ld a,yl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 12.
Hexadecimal [24-Bits]



      000270 B7 38            [ 1]  559         ld SEEDY,a 
      000272 81               [ 4]  560         ret 
                                    561 
                                    562 ;    RANDOM ( u1 -- u2 )
                                    563 ; Pseudo random number betwen 0 and u1-1
      000273 02 5E                  564         .word LINK 
                           000275   565         LINK=.
      000275 06                     566         .byte 6
      000276 52 41 4E 44 4F 4D      567         .ascii "RANDOM" 
      00027C                        568 RANDOM:
                                    569 ;local variable 
                           000001   570         SPSAVE=1
                           000002   571         VSIZE=2 
      00027C 52 02            [ 2]  572         sub sp,#VSIZE
      00027E 1F 01            [ 2]  573         ldw (SPSAVE,sp),x  
                                    574 ; XTEMP=(SEEDX<<5)^SEEDX 
      000280 90 93            [ 1]  575         ldw y,x 
      000282 90 FE            [ 2]  576         ldw y,(y)
      000284 90 BF 24         [ 2]  577         ldw YTEMP,y 
      000287 BE 36            [ 2]  578 	ldw x,SEEDX 
      000289 58               [ 2]  579 	sllw x 
      00028A 58               [ 2]  580 	sllw x 
      00028B 58               [ 2]  581 	sllw x 
      00028C 58               [ 2]  582 	sllw x 
      00028D 58               [ 2]  583 	sllw x 
      00028E 9E               [ 1]  584 	ld a,xh 
      00028F B8 36            [ 1]  585 	xor a,SEEDX 
      000291 B7 22            [ 1]  586 	ld XTEMP,a 
      000293 9F               [ 1]  587 	ld a,xl 
      000294 B8 37            [ 1]  588 	xor a,SEEDX+1 
      000296 B7 23            [ 1]  589 	ld XTEMP+1,a 
                                    590 ; SEEDX=SEEDY 
      000298 BE 38            [ 2]  591 	ldw x,SEEDY 
      00029A BF 36            [ 2]  592 	ldw SEEDX,x  
                                    593 ; SEEDY=SEEDY^(SEEDY>>1)
      00029C 54               [ 2]  594 	srlw x 
      00029D 9E               [ 1]  595 	ld a,xh 
      00029E B8 38            [ 1]  596 	xor a,SEEDY 
      0002A0 B7 38            [ 1]  597 	ld SEEDY,a  
      0002A2 9F               [ 1]  598 	ld a,xl 
      0002A3 B8 39            [ 1]  599 	xor a,SEEDY+1 
      0002A5 B7 39            [ 1]  600 	ld SEEDY+1,a 
                                    601 ; XTEMP>>3 
      0002A7 BE 22            [ 2]  602 	ldw x,XTEMP 
      0002A9 54               [ 2]  603 	srlw x 
      0002AA 54               [ 2]  604 	srlw x 
      0002AB 54               [ 2]  605 	srlw x 
                                    606 ; x=XTEMP^x 
      0002AC 9E               [ 1]  607 	ld a,xh 
      0002AD B8 22            [ 1]  608 	xor a,XTEMP 
      0002AF 95               [ 1]  609 	ld xh,a 
      0002B0 9F               [ 1]  610 	ld a,xl 
      0002B1 B8 23            [ 1]  611 	xor a,XTEMP+1  
      0002B3 97               [ 1]  612 	ld xl,a 
                                    613 ; SEEDY=x^SEEDY 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 13.
Hexadecimal [24-Bits]



      0002B4 B8 39            [ 1]  614 	xor a,SEEDY+1
      0002B6 97               [ 1]  615 	ld xl,a 
      0002B7 9E               [ 1]  616 	ld a,xh 
      0002B8 B8 38            [ 1]  617 	xor a,SEEDY
      0002BA 95               [ 1]  618 	ld xh,a 
      0002BB BF 38            [ 2]  619 	ldw SEEDY,x 
                                    620 ; return SEEDY modulo YTEMP  
      0002BD 90 BE 24         [ 2]  621 	ldw y,YTEMP  
      0002C0 65               [ 2]  622 	divw x,y 
      0002C1 1E 01            [ 2]  623 	ldw x,(SPSAVE,sp)
      0002C3 FF               [ 2]  624         ldw (x),y 
      0002C4 5B 02            [ 2]  625         addw sp,#VSIZE 
      0002C6 81               [ 4]  626 	ret 
                                    627 
                                    628 
                                    629 ;;
                                    630 ;; get millisecond counter 
                                    631 ;; msec ( -- u )
                                    632 ;; Added by Picatout 2020-04-26
      0002C7 02 75                  633         .word LINK  
                           0002C9   634         LINK = . 
      0002C9 04                     635         .byte 4
      0002CA 4D 53 45 43            636         .ascii "MSEC"
      0002CE                        637 MSEC: 
      0002CE 1D 00 02         [ 2]  638         subw x,#CELLL 
      0002D1 90 BE 2E         [ 2]  639         ldw y,MS 
      0002D4 FF               [ 2]  640         ldw (x),y 
      0002D5 81               [ 4]  641         ret 
                                    642 
                                    643 ; suspend execution for u msec 
                                    644 ;  pause ( u -- )
      0002D6 02 C9                  645         .word LINK 
                           0002D8   646         LINK=.
      0002D8 05                     647         .byte 5 
      0002D9 50 41 55 53 45         648         .ascii "PAUSE"
      0002DE                        649 PAUSE:
      0002DE 90 93            [ 1]  650         ldw y,x
      0002E0 90 FE            [ 2]  651         ldw y,(y)
      0002E2 72 B9 00 2E      [ 2]  652         addw y,MS 
      0002E6 8F               [10]  653 1$:     wfi  
      0002E7 90 B3 2E         [ 2]  654         cpw y,MS  
      0002EA 26 FA            [ 1]  655         jrne 1$        
      0002EC 1C 00 02         [ 2]  656         addw x,#CELLL 
      0002EF 81               [ 4]  657         ret 
                                    658 
                                    659 ; initialize count down timer 
                                    660 ;  TIMER ( u -- )  milliseconds 
      0002F0 02 D8                  661         .word LINK 
                           0002F2   662         LINK=.
      0002F2 05                     663         .byte 5 
      0002F3 54 49 4D 45 52         664         .ascii "TIMER" 
      0002F8                        665 TIMER:
      0002F8 90 93            [ 1]  666         ldw y,x
      0002FA 90 FE            [ 2]  667         ldw y,(y) 
      0002FC 90 BF 30         [ 2]  668         ldw CNTDWN,y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 14.
Hexadecimal [24-Bits]



      0002FF 1C 00 02         [ 2]  669         addw x,#CELLL 
      000302 81               [ 4]  670         ret 
                                    671 
                                    672 ; check for TIMER exiparition 
                                    673 ;  TIMEOUT? ( -- 0|-1 )
      000303 02 F2                  674         .word LINK 
                           000305   675         LINK=. 
      000305 08                     676         .byte 8 
      000306 54 49 4D 45 4F 55 54   677         .ascii "TIMEOUT?"
             3F
      00030E                        678 TIMEOUTQ: 
      00030E 4F               [ 1]  679         clr a
      00030F 1D 00 02         [ 2]  680         subw x,#CELLL 
      000312 90 BE 30         [ 2]  681         ldw y,CNTDWN 
      000315 26 01            [ 1]  682         jrne 1$ 
      000317 43               [ 1]  683         cpl a 
      000318 E7 01            [ 1]  684 1$:     ld (1,x),a 
      00031A F7               [ 1]  685         ld (x),a 
      00031B 81               [ 4]  686         ret         
                                    687 
                                    688 ; reboot MCU 
                                    689 ; REBOOT ( -- )
      00031C 03 05                  690         .word LINK 
                           00031E   691         LINK=. 
      00031E 06                     692         .byte 6 
      00031F 52 45 42 4F 4F 54      693         .ascii "REBOOT"
      000325                        694 reboot:
      000325 CC 00 00         [ 2]  695         jp NonHandledInterrupt
                                    696 
                                    697 ; compile to flash memory 
                                    698 ; TO-FLASH ( -- )
      000328 03 1E                  699         .word LINK 
                           00032A   700         LINK=.
      00032A 08                     701         .byte 8
      00032B 54 4F 2D 46 4C 41 53   702         .ascii "TO-FLASH"
             48
      000333                        703 TOFLASH:
      000333 CD 06 62         [ 4]  704         call RAMLAST 
      000336 CD 04 3C         [ 4]  705         call AT 
      000339 CD 06 8D         [ 4]  706         call QDUP 
      00033C CD 03 E7         [ 4]  707         call QBRAN
      00033F 03 62                  708         .word 1$
      000341 CD 12 C7         [ 4]  709         call ABORQ 
      000344 1D                     710         .byte 29
      000345 20 4E 6F 74 20 77 68   711         .ascii " Not while definitions in RAM"   
             69 6C 65 20 64 65 66
             69 6E 69 74 69 6F 6E
             73 20 69 6E 20 52 41
             4D
      000362 90 AE FF FF      [ 2]  712 1$:     ldw y,#-1 
      000366 90 BF 1E         [ 2]  713         ldw UTFLASH,y
      000369 81               [ 4]  714         ret 
                                    715 
                                    716 ; compile to RAM 
                                    717 ; TO-RAM ( -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 15.
Hexadecimal [24-Bits]



      00036A 03 2A                  718         .word LINK 
                           00036C   719         LINK=.
      00036C 06                     720         .byte 6 
      00036D 54 4F 2D 52 41 4D      721         .ascii "TO-RAM"
      000373                        722 TORAM:
      000373 90 5F            [ 1]  723         clrw y 
      000375 90 BF 1E         [ 2]  724         ldw UTFLASH,y 
      000378 81               [ 4]  725         ret 
                                    726         
                                    727 
                                    728 ;; Device dependent I/O
                                    729 ;       ?RX     ( -- c T | F )
                                    730 ;         Return input byte and true, or false.
      000379 03 6C                  731         .word      LINK 
                           00037B   732 LINK	= .
      00037B 04                     733         .byte      4
      00037C 3F 4B 45 59            734         .ascii     "?KEY"
      000380                        735 QKEY:
      000380 90 5F            [ 1]  736         CLRW Y 
      000382 72 0B 52 30 0B   [ 2]  737         BTJF UART1_SR,#UART_SR_RXNE,INCH   ;check status
      000387 C6 52 31         [ 1]  738         LD    A,UART1_DR   ;get char in A
      00038A 1D 00 02         [ 2]  739 	SUBW	X,#2
      00038D E7 01            [ 1]  740         LD     (1,X),A
      00038F 7F               [ 1]  741 	CLR	(X)
      000390 90 53            [ 2]  742         CPLW     Y
      000392                        743 INCH:
      000392 1D 00 02         [ 2]  744 	SUBW	X,#2
      000395 FF               [ 2]  745         LDW     (X),Y
      000396 81               [ 4]  746         RET
                                    747 
                                    748 ;       TX!     ( c -- )
                                    749 ;       Send character c to  output device.
      000397 03 7B                  750         .word      LINK
                           000399   751 LINK	= .
      000399 04                     752         .byte      4
      00039A 45 4D 49 54            753         .ascii     "EMIT"
      00039E                        754 EMIT:
      00039E E6 01            [ 1]  755         LD     A,(1,X)
      0003A0 1C 00 02         [ 2]  756 	ADDW	X,#2
      0003A3 72 0F 52 30 FB   [ 2]  757 OUTPUT: BTJF UART1_SR,#UART_SR_TXE,OUTPUT  ;loop until tdre
      0003A8 C7 52 31         [ 1]  758         LD    UART1_DR,A   ;send A
      0003AB 81               [ 4]  759         RET
                                    760 
                                    761 ;; The kernel
                                    762 
                                    763 ;       doLIT   ( -- w )
                                    764 ;       Push an inline literal.
      0003AC 03 99                  765         .word      LINK
                           0003AE   766 LINK	= 	.
      0003AE 45                     767 	.byte      COMPO+5
      0003AF 44 4F 4C 49 54         768         .ascii     "DOLIT"
      0003B4                        769 DOLIT:
      0003B4 1D 00 02         [ 2]  770 	SUBW X,#2
      0003B7 16 01            [ 2]  771         ldw y,(1,sp)
      0003B9 90 FE            [ 2]  772         ldw y,(y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 16.
Hexadecimal [24-Bits]



      0003BB FF               [ 2]  773         ldw (x),y
      0003BC 90 85            [ 2]  774         popw y 
      0003BE 90 EC 02         [ 2]  775         jp (2,y)
                                    776 
                                    777 ;       next    ( -- )
                                    778 ;       Code for  single index loop.
      0003C1 03 AE                  779         .word      LINK
                           0003C3   780 LINK	= 	.
      0003C3 44                     781 	.byte      COMPO+4
      0003C4 4E 45 58 54            782         .ascii     "NEXT"
      0003C8                        783 DONXT:
      0003C8 16 03            [ 2]  784 	LDW Y,(3,SP)
      0003CA 90 5A            [ 2]  785 	DECW Y
      0003CC 2A 07            [ 1]  786 	JRPL NEX1 ; jump if N=0
      0003CE 90 85            [ 2]  787 	POPW Y
      0003D0 5B 02            [ 2]  788         addw sp,#2
      0003D2 90 EC 02         [ 2]  789         JP (2,Y)
      0003D5                        790 NEX1:
      0003D5 17 03            [ 2]  791         LDW (3,SP),Y
      0003D7 90 85            [ 2]  792         POPW Y
      0003D9 90 FE            [ 2]  793 	LDW Y,(Y)
      0003DB 90 FC            [ 2]  794 	JP (Y)
                                    795 
                                    796 ;       ?branch ( f -- )
                                    797 ;       Branch if flag is zero.
      0003DD 03 C3                  798         .word      LINK
                           0003DF   799 LINK	= 	.
      0003DF 47                     800 	.byte      COMPO+7
      0003E0 3F 42 52 41 4E 43 48   801         .ascii     "?BRANCH"
      0003E7                        802 QBRAN:	
      0003E7 90 93            [ 1]  803         LDW Y,X
      0003E9 1C 00 02         [ 2]  804 	ADDW X,#2
      0003EC 90 FE            [ 2]  805 	LDW Y,(Y)
      0003EE 27 0E            [ 1]  806         JREQ     BRAN
      0003F0 90 85            [ 2]  807 	POPW Y
      0003F2 90 EC 02         [ 2]  808 	JP (2,Y)
                                    809         
                                    810 ;       branch  ( -- )
                                    811 ;       Branch to an inline address.
      0003F5 03 DF                  812         .word      LINK
                           0003F7   813 LINK	= 	.
      0003F7 46                     814 	.byte      COMPO+6
      0003F8 42 52 41 4E 43 48      815         .ascii     "BRANCH"
      0003FE                        816 BRAN:
      0003FE 90 85            [ 2]  817         POPW Y
      000400 90 FE            [ 2]  818 	LDW Y,(Y)
      000402 90 FC            [ 2]  819         JP     (Y)
                                    820 
                                    821 ;       EXECUTE ( ca -- )
                                    822 ;       Execute  word at ca.
      000404 03 F7                  823         .word      LINK
                           000406   824 LINK	= 	.
      000406 07                     825         .byte       7
      000407 45 58 45 43 55 54 45   826         .ascii     "EXECUTE"
      00040E                        827 EXECU:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 17.
Hexadecimal [24-Bits]



      00040E 90 93            [ 1]  828         LDW Y,X
      000410 1C 00 02         [ 2]  829 	ADDW X,#2
      000413 90 FE            [ 2]  830 	LDW  Y,(Y)
      000415 90 FC            [ 2]  831         JP   (Y)
                                    832 
                                    833 ;       EXIT    ( -- )
                                    834 ;       Terminate a colon definition.
      000417 04 06                  835         .word      LINK
                           000419   836 LINK = .
      000419 04                     837         .byte      4
      00041A 45 58 49 54            838         .ascii     "EXIT"
      00041E                        839 EXIT:
      00041E 90 85            [ 2]  840         POPW Y
      000420 81               [ 4]  841         RET
                                    842 
                                    843 ;       !       ( w a -- )
                                    844 ;       Pop  data stack to memory.
      000421 04 19                  845         .word      LINK
                           000423   846 LINK = .
      000423 01                     847         .byte      1
      000424 21                     848         .ascii     "!"
      000425                        849 STORE:
      000425 90 93            [ 1]  850         LDW Y,X
      000427 90 FE            [ 2]  851         LDW Y,(Y)    ;Y=a
      000429 90 BF 24         [ 2]  852         LDW YTEMP,Y
      00042C 90 93            [ 1]  853         LDW Y,X
      00042E 90 EE 02         [ 2]  854         LDW Y,(2,Y)
      000431 91 CF 24         [ 5]  855         LDW [YTEMP],Y ;store w at a
      000434 1C 00 04         [ 2]  856         ADDW X,#4 ; DDROP 
      000437 81               [ 4]  857         RET     
                                    858 
                                    859 ;       @       ( a -- w )
                                    860 ;       Push memory location to stack.
      000438 04 23                  861         .word      LINK
                           00043A   862 LINK	= 	.
      00043A 01                     863         .byte    1
      00043B 40                     864         .ascii	"@"
      00043C                        865 AT:
      00043C 90 93            [ 1]  866         LDW Y,X     ;Y = a
      00043E 90 FE            [ 2]  867         LDW Y,(Y)   ; address 
      000440 90 FE            [ 2]  868         LDW Y,(Y)   ; value 
      000442 FF               [ 2]  869         LDW (X),Y ;w = @Y
      000443 81               [ 4]  870         RET     
                                    871 
                                    872 ;       C!      ( c b -- )
                                    873 ;       Pop  data stack to byte memory.
      000444 04 3A                  874         .word      LINK
                           000446   875 LINK	= .
      000446 02                     876         .byte      2
      000447 43 21                  877         .ascii     "C!"
      000449                        878 CSTOR:
      000449 90 93            [ 1]  879         LDW Y,X
      00044B 90 FE            [ 2]  880 	LDW Y,(Y)    ;Y=b
      00044D E6 03            [ 1]  881         LD A,(3,X)    ;D = c
      00044F 90 F7            [ 1]  882         LD  (Y),A     ;store c at b
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 18.
Hexadecimal [24-Bits]



      000451 1C 00 04         [ 2]  883 	ADDW X,#4 ; DDROP 
      000454 81               [ 4]  884         RET     
                                    885 
                                    886 ;       C@      ( b -- c )
                                    887 ;       Push byte in memory to  stack.
      000455 04 46                  888         .word      LINK
                           000457   889 LINK	= 	.
      000457 02                     890         .byte      2
      000458 43 40                  891         .ascii     "C@"
      00045A                        892 CAT:
      00045A 90 93            [ 1]  893         LDW Y,X     ;Y=b
      00045C 90 FE            [ 2]  894         LDW Y,(Y)
      00045E 90 F6            [ 1]  895         LD A,(Y)
      000460 E7 01            [ 1]  896         LD (1,X),A
      000462 7F               [ 1]  897         CLR (X)
      000463 81               [ 4]  898         RET     
                                    899 
                                    900 ;       RP@     ( -- a )
                                    901 ;       Push current RP to data stack.
      000464 04 57                  902         .word      LINK
                           000466   903 LINK	= .
      000466 03                     904         .byte      3
      000467 52 50 40               905         .ascii     "RP@"
      00046A                        906 RPAT:
      00046A 90 96            [ 1]  907         LDW Y,SP    ;save return addr
      00046C 1D 00 02         [ 2]  908         SUBW X,#2
      00046F FF               [ 2]  909         LDW (X),Y
      000470 81               [ 4]  910         RET     
                                    911 
                                    912 ;       RP!     ( a -- )
                                    913 ;       Set  return stack pointer.
      000471 04 66                  914         .word      LINK
                           000473   915 LINK	= 	. 
      000473 43                     916 	.byte      COMPO+3
      000474 52 50 21               917         .ascii     "RP!"
      000477                        918 RPSTO:
      000477 90 85            [ 2]  919         POPW Y
      000479 90 BF 24         [ 2]  920         LDW YTEMP,Y
      00047C 90 93            [ 1]  921         LDW Y,X
      00047E 90 FE            [ 2]  922         LDW Y,(Y)
      000480 90 94            [ 1]  923         LDW SP,Y
      000482 1C 00 02         [ 2]  924         ADDW x,#CELLL ; a was not dropped, Picatout 2020-05-24
      000485 92 CC 24         [ 5]  925         JP [YTEMP]
                                    926 
                                    927 ;       R>      ( -- w )
                                    928 ;       Pop return stack to data stack.
      000488 04 73                  929         .word      LINK
                           00048A   930 LINK	= 	. 
      00048A 42                     931 	.byte      COMPO+2
      00048B 52 3E                  932         .ascii     "R>"
      00048D                        933 RFROM:
      00048D 90 85            [ 2]  934         POPW Y    ;save return addr
      00048F 90 BF 24         [ 2]  935         LDW YTEMP,Y
      000492 90 85            [ 2]  936         POPW Y
      000494 1D 00 02         [ 2]  937         SUBW X,#2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 19.
Hexadecimal [24-Bits]



      000497 FF               [ 2]  938         LDW (X),Y
      000498 92 CC 24         [ 5]  939         JP [YTEMP]
                                    940 
                                    941 ;       R@      ( -- w )
                                    942 ;       Copy top of return stack to stack.
      00049B 04 8A                  943         .word      LINK
                           00049D   944 LINK	= 	. 
      00049D 02                     945         .byte      2
      00049E 52 40                  946         .ascii     "R@"
      0004A0                        947 RAT:
      0004A0 16 03            [ 2]  948         ldw y,(3,sp)
      0004A2 1D 00 02         [ 2]  949         subw x,#CELLL 
      0004A5 FF               [ 2]  950         ldw (x),y 
      0004A6 81               [ 4]  951         ret 
                                    952 
                                    953 ;       >R      ( w -- )
                                    954 ;       Push data stack to return stack.
      0004A7 04 9D                  955         .word      LINK
                           0004A9   956 LINK	= 	. 
      0004A9 42                     957 	.byte      COMPO+2
      0004AA 3E 52                  958         .ascii     ">R"
      0004AC                        959 TOR:
      0004AC 90 85            [ 2]  960         POPW Y    ;save return addr
      0004AE 90 BF 24         [ 2]  961         LDW YTEMP,Y
      0004B1 90 93            [ 1]  962         LDW Y,X
      0004B3 90 FE            [ 2]  963         LDW Y,(Y)
      0004B5 90 89            [ 2]  964         PUSHW Y    ;restore return addr
      0004B7 1C 00 02         [ 2]  965         ADDW X,#2
      0004BA 92 CC 24         [ 5]  966         JP [YTEMP]
                                    967 
                                    968 ;       SP@     ( -- a )
                                    969 ;       Push current stack pointer.
      0004BD 04 A9                  970         .word      LINK
                           0004BF   971 LINK	= 	. 
      0004BF 03                     972         .byte      3
      0004C0 53 50 40               973         .ascii     "SP@"
      0004C3                        974 SPAT:
      0004C3 90 93            [ 1]  975 	LDW Y,X
      0004C5 1D 00 02         [ 2]  976         SUBW X,#2
      0004C8 FF               [ 2]  977 	LDW (X),Y
      0004C9 81               [ 4]  978         RET     
                                    979 
                                    980 ;       SP!     ( a -- )
                                    981 ;       Set  data stack pointer.
      0004CA 04 BF                  982         .word      LINK
                           0004CC   983 LINK	= 	. 
      0004CC 03                     984         .byte      3
      0004CD 53 50 21               985         .ascii     "SP!"
      0004D0                        986 SPSTO:
      0004D0 FE               [ 2]  987         LDW     X,(X)     ;X = a
      0004D1 81               [ 4]  988         RET     
                                    989 
                                    990 ;       DROP    ( w -- )
                                    991 ;       Discard top stack item.
      0004D2 04 CC                  992         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 20.
Hexadecimal [24-Bits]



                           0004D4   993 LINK	= 	. 
      0004D4 04                     994         .byte      4
      0004D5 44 52 4F 50            995         .ascii     "DROP"
      0004D9                        996 DROP:
      0004D9 1C 00 02         [ 2]  997         ADDW X,#2     
      0004DC 81               [ 4]  998         RET     
                                    999 
                                   1000 ;       DUP     ( w -- w w )
                                   1001 ;       Duplicate  top stack item.
      0004DD 04 D4                 1002         .word      LINK
                           0004DF  1003 LINK	= 	. 
      0004DF 03                    1004         .byte      3
      0004E0 44 55 50              1005         .ascii     "DUP"
      0004E3                       1006 DUPP:
      0004E3 90 93            [ 1] 1007 	LDW Y,X
      0004E5 1D 00 02         [ 2] 1008         SUBW X,#2
      0004E8 90 FE            [ 2] 1009 	LDW Y,(Y)
      0004EA FF               [ 2] 1010 	LDW (X),Y
      0004EB 81               [ 4] 1011         RET     
                                   1012 
                                   1013 ;       SWAP    ( w1 w2 -- w2 w1 )
                                   1014 ;       Exchange top two stack items.
      0004EC 04 DF                 1015         .word      LINK
                           0004EE  1016 LINK	= 	. 
      0004EE 04                    1017         .byte      4
      0004EF 53 57 41 50           1018         .ascii     "SWAP"
      0004F3                       1019 SWAPP:
      0004F3 90 93            [ 1] 1020         LDW Y,X
      0004F5 90 FE            [ 2] 1021         LDW Y,(Y)
      0004F7 90 BF 24         [ 2] 1022         LDW YTEMP,Y
      0004FA 90 93            [ 1] 1023         LDW Y,X
      0004FC 90 EE 02         [ 2] 1024         LDW Y,(2,Y)
      0004FF FF               [ 2] 1025         LDW (X),Y
      000500 90 BE 24         [ 2] 1026         LDW Y,YTEMP
      000503 EF 02            [ 2] 1027         LDW (2,X),Y
      000505 81               [ 4] 1028         RET     
                                   1029 
                                   1030 ;       OVER    ( w1 w2 -- w1 w2 w1 )
                                   1031 ;       Copy second stack item to top.
      000506 04 EE                 1032         .word      LINK
                           000508  1033 LINK	= . 
      000508 04                    1034         .byte      4
      000509 4F 56 45 52           1035         .ascii     "OVER"
      00050D                       1036 OVER:
      00050D 1D 00 02         [ 2] 1037         SUBW X,#2
      000510 90 93            [ 1] 1038         LDW Y,X
      000512 90 EE 04         [ 2] 1039         LDW Y,(4,Y)
      000515 FF               [ 2] 1040         LDW (X),Y
      000516 81               [ 4] 1041         RET     
                                   1042 
                                   1043 ;       0<      ( n -- t )
                                   1044 ;       Return true if n is negative.
      000517 05 08                 1045         .word      LINK
                           000519  1046 LINK	= . 
      000519 02                    1047         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 21.
Hexadecimal [24-Bits]



      00051A 30 3C                 1048         .ascii     "0<"
      00051C                       1049 ZLESS:
      00051C A6 FF            [ 1] 1050         LD A,#0xFF
      00051E 90 93            [ 1] 1051         LDW Y,X
      000520 90 FE            [ 2] 1052         LDW Y,(Y)
      000522 2B 01            [ 1] 1053         JRMI     ZL1
      000524 4F               [ 1] 1054         CLR A   ;false
      000525 F7               [ 1] 1055 ZL1:    LD     (X),A
      000526 E7 01            [ 1] 1056         LD (1,X),A
      000528 81               [ 4] 1057 	RET     
                                   1058 
                                   1059 ;       AND     ( w w -- w )
                                   1060 ;       Bitwise AND.
      000529 05 19                 1061         .word      LINK
                           00052B  1062 LINK	= . 
      00052B 03                    1063         .byte      3
      00052C 41 4E 44              1064         .ascii     "AND"
      00052F                       1065 ANDD:
      00052F F6               [ 1] 1066         LD  A,(X)    ;D=w
      000530 E4 02            [ 1] 1067         AND A,(2,X)
      000532 E7 02            [ 1] 1068         LD (2,X),A
      000534 E6 01            [ 1] 1069         LD A,(1,X)
      000536 E4 03            [ 1] 1070         AND A,(3,X)
      000538 E7 03            [ 1] 1071         LD (3,X),A
      00053A 1C 00 02         [ 2] 1072         ADDW X,#2
      00053D 81               [ 4] 1073         RET
                                   1074 
                                   1075 ;       OR      ( w w -- w )
                                   1076 ;       Bitwise inclusive OR.
      00053E 05 2B                 1077         .word      LINK
                           000540  1078 LINK = . 
      000540 02                    1079         .byte      2
      000541 4F 52                 1080         .ascii     "OR"
      000543                       1081 ORR:
      000543 F6               [ 1] 1082         LD A,(X)    ;D=w
      000544 EA 02            [ 1] 1083         OR A,(2,X)
      000546 E7 02            [ 1] 1084         LD (2,X),A
      000548 E6 01            [ 1] 1085         LD A,(1,X)
      00054A EA 03            [ 1] 1086         OR A,(3,X)
      00054C E7 03            [ 1] 1087         LD (3,X),A
      00054E 1C 00 02         [ 2] 1088         ADDW X,#2
      000551 81               [ 4] 1089         RET
                                   1090 
                                   1091 ;       XOR     ( w w -- w )
                                   1092 ;       Bitwise exclusive OR.
      000552 05 40                 1093         .word      LINK
                           000554  1094 LINK	= . 
      000554 03                    1095         .byte      3
      000555 58 4F 52              1096         .ascii     "XOR"
      000558                       1097 XORR:
      000558 F6               [ 1] 1098         LD A,(X)    ;D=w
      000559 E8 02            [ 1] 1099         XOR A,(2,X)
      00055B E7 02            [ 1] 1100         LD (2,X),A
      00055D E6 01            [ 1] 1101         LD A,(1,X)
      00055F E8 03            [ 1] 1102         XOR A,(3,X)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 22.
Hexadecimal [24-Bits]



      000561 E7 03            [ 1] 1103         LD (3,X),A
      000563 1C 00 02         [ 2] 1104         ADDW X,#2
      000566 81               [ 4] 1105         RET
                                   1106 
                                   1107 ;       UM+     ( u u -- udsum )
                                   1108 ;       Add two unsigned single
                                   1109 ;       and return a double sum.
      000567 05 54                 1110         .word      LINK
                           000569  1111 LINK	= . 
      000569 03                    1112         .byte      3
      00056A 55 4D 2B              1113         .ascii     "UM+"
      00056D                       1114 UPLUS:
      00056D A6 01            [ 1] 1115         LD A,#1
      00056F 90 93            [ 1] 1116         LDW Y,X
      000571 90 EE 02         [ 2] 1117         LDW Y,(2,Y)
      000574 90 BF 24         [ 2] 1118         LDW YTEMP,Y
      000577 90 93            [ 1] 1119         LDW Y,X
      000579 90 FE            [ 2] 1120         LDW Y,(Y)
      00057B 72 B9 00 24      [ 2] 1121         ADDW Y,YTEMP
      00057F EF 02            [ 2] 1122         LDW (2,X),Y
      000581 25 01            [ 1] 1123         JRC     UPL1
      000583 4F               [ 1] 1124         CLR A
      000584 E7 01            [ 1] 1125 UPL1:   LD     (1,X),A
      000586 7F               [ 1] 1126         CLR (X)
      000587 81               [ 4] 1127         RET
                                   1128 
                                   1129 ;; System and user variables
                                   1130 
                                   1131 ;       doVAR   ( -- a )
                                   1132 ;       Code for VARIABLE and CREATE.
      000588 05 69                 1133         .word      LINK
                           00058A  1134 LINK	= . 
      00058A 45                    1135 	.byte      COMPO+5
      00058B 44 4F 56 41 52        1136         .ascii     "DOVAR"
      000590                       1137 DOVAR:
      000590 1D 00 02         [ 2] 1138 	SUBW X,#2
      000593 90 85            [ 2] 1139         POPW Y    ;get return addr (pfa)
      000595 90 FE            [ 2] 1140         LDW Y,(Y) ; indirect address 
      000597 FF               [ 2] 1141         LDW (X),Y    ;push on stack
      000598 81               [ 4] 1142         RET     ;go to RET of EXEC
                                   1143 
                                   1144 ;       BASE    ( -- a )
                                   1145 ;       Radix base for numeric I/O.
      000599 05 8A                 1146         .word      LINK        
                           00059B  1147 LINK = . 
      00059B 04                    1148         .byte      4
      00059C 42 41 53 45           1149         .ascii     "BASE"
      0005A0                       1150 BASE:
      0005A0 90 AE 00 06      [ 2] 1151 	LDW Y,#UBASE 
      0005A4 1D 00 02         [ 2] 1152 	SUBW X,#2
      0005A7 FF               [ 2] 1153         LDW (X),Y
      0005A8 81               [ 4] 1154         RET
                                   1155 
                                   1156 ;       tmp     ( -- a )
                                   1157 ;       A temporary storage.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 23.
Hexadecimal [24-Bits]



      0005A9 05 9B                 1158         .word      LINK
                                   1159         
                           0005AB  1160 LINK = . 
      0005AB 03                    1161 	.byte      3
      0005AC 54 4D 50              1162         .ascii     "TMP"
      0005AF                       1163 TEMP:
      0005AF 90 AE 00 08      [ 2] 1164 	LDW Y,#UTMP
      0005B3 1D 00 02         [ 2] 1165 	SUBW X,#2
      0005B6 FF               [ 2] 1166         LDW (X),Y
      0005B7 81               [ 4] 1167         RET
                                   1168 
                                   1169 ;       >IN     ( -- a )
                                   1170 ;        Hold parsing pointer.
      0005B8 05 AB                 1171         .word      LINK
                           0005BA  1172 LINK = . 
      0005BA 03                    1173         .byte      3
      0005BB 3E 49 4E              1174         .ascii    ">IN"
      0005BE                       1175 INN:
      0005BE 90 AE 00 0A      [ 2] 1176 	LDW Y,#UINN 
      0005C2 1D 00 02         [ 2] 1177 	SUBW X,#2
      0005C5 FF               [ 2] 1178         LDW (X),Y
      0005C6 81               [ 4] 1179         RET
                                   1180 
                                   1181 ;       #TIB    ( -- a )
                                   1182 ;       Count in terminal input buffer.
      0005C7 05 BA                 1183         .word      LINK
                           0005C9  1184 LINK = . 
      0005C9 04                    1185         .byte      4
      0005CA 23 54 49 42           1186         .ascii     "#TIB"
      0005CE                       1187 NTIB:
      0005CE 90 AE 00 0C      [ 2] 1188 	LDW Y,#UCTIB 
      0005D2 1D 00 02         [ 2] 1189 	SUBW X,#2
      0005D5 FF               [ 2] 1190         LDW (X),Y
      0005D6 81               [ 4] 1191         RET
                                   1192 
                                   1193 ;       TBUF ( -- a )
                                   1194 ;       address of 128 bytes transaction buffer 
      0005D7 05 C9                 1195         .word LINK 
                           0005D9  1196         LINK=.
      0005D9 04                    1197         .byte 4 
      0005DA 54 42 55 46           1198         .ascii "TBUF"
      0005DE                       1199 TBUF:
      0005DE 90 AE 16 80      [ 2] 1200         ldw y,#ROWBUFF
      0005E2 1D 00 02         [ 2] 1201         subw x,#CELLL
      0005E5 FF               [ 2] 1202         ldw (x),y 
      0005E6 81               [ 4] 1203         ret 
                                   1204 
                                   1205 ; systeme variable 
                                   1206 ; compilation destination 
                                   1207 ; TFLASH ( -- A )
      0005E7 05 D9                 1208         .word LINK 
                           0005E9  1209         LINK=.
      0005E9 06                    1210         .byte 6 
      0005EA 54 46 4C 41 53 48     1211         .ascii "TFLASH"         
      0005F0                       1212 TFLASH:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 24.
Hexadecimal [24-Bits]



      0005F0 1D 00 02         [ 2] 1213         subw x,#CELLL 
      0005F3 90 AE 00 1E      [ 2] 1214         ldw y,#UTFLASH
      0005F7 FF               [ 2] 1215         ldw (x),y 
      0005F8 81               [ 4] 1216         ret 
                                   1217 
                                   1218 ;       "EVAL   ( -- a )
                                   1219 ;       Execution vector of EVAL.
      0005F9 05 E9                 1220         .word      LINK
                           0005FB  1221 LINK = . 
      0005FB 05                    1222         .byte      5
      0005FC 27 45 56 41 4C        1223         .ascii     "'EVAL"
      000601                       1224 TEVAL:
      000601 90 AE 00 10      [ 2] 1225 	LDW Y,#UINTER 
      000605 1D 00 02         [ 2] 1226 	SUBW X,#2
      000608 FF               [ 2] 1227         LDW (X),Y
      000609 81               [ 4] 1228         RET
                                   1229 
                                   1230 ;       HLD     ( -- a )
                                   1231 ;       Hold a pointer of output string.
      00060A 05 FB                 1232         .word      LINK
                           00060C  1233 LINK = . 
      00060C 03                    1234         .byte      3
      00060D 48 4C 44              1235         .ascii     "HLD"
      000610                       1236 HLD:
      000610 90 AE 00 12      [ 2] 1237 	LDW Y,#UHLD 
      000614 1D 00 02         [ 2] 1238 	SUBW X,#2
      000617 FF               [ 2] 1239         LDW (X),Y
      000618 81               [ 4] 1240         RET
                                   1241 
                                   1242 ;       CONTEXT ( -- a )
                                   1243 ;       Start vocabulary search.
      000619 06 0C                 1244         .word      LINK
                           00061B  1245 LINK = . 
      00061B 07                    1246         .byte      7
      00061C 43 4F 4E 54 45 58 54  1247         .ascii     "CONTEXT"
      000623                       1248 CNTXT:
      000623 90 AE 00 14      [ 2] 1249 	LDW Y,#UCNTXT
      000627 1D 00 02         [ 2] 1250 	SUBW X,#2
      00062A FF               [ 2] 1251         LDW (X),Y
      00062B 81               [ 4] 1252         RET
                                   1253 
                                   1254 ;       VP      ( -- a )
                                   1255 ;       Point to top of variables
      00062C 06 1B                 1256         .word      LINK
                           00062E  1257 LINK = . 
      00062E 02                    1258         .byte      2
      00062F 56 50                 1259         .ascii     "VP"
      000631                       1260 VPP:
      000631 90 AE 00 16      [ 2] 1261 	LDW Y,#UVP 
      000635 1D 00 02         [ 2] 1262 	SUBW X,#2
      000638 FF               [ 2] 1263         LDW (X),Y
      000639 81               [ 4] 1264         RET
                                   1265 
                                   1266 ;       CP    ( -- a )
                                   1267 ;       Pointer to top of FLASH 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 25.
Hexadecimal [24-Bits]



      00063A 06 2E                 1268         .word LINK 
                           00063C  1269         LINK=.
      00063C 02                    1270         .byte 2 
      00063D 43 50                 1271         .ascii "CP"
      00063F                       1272 CPP: 
      00063F 90 AE 00 18      [ 2] 1273         ldw y,#UCP 
      000643 1D 00 02         [ 2] 1274         subw x,#CELLL 
      000646 FF               [ 2] 1275         ldw (x),y 
      000647 81               [ 4] 1276         ret                
                                   1277 
                                   1278 ;       LAST    ( -- a )
                                   1279 ;       Point to last name in dictionary.
      000648 06 3C                 1280         .word      LINK
                           00064A  1281 LINK = . 
      00064A 04                    1282         .byte      4
      00064B 4C 41 53 54           1283         .ascii     "LAST"
      00064F                       1284 LAST:
      00064F 90 AE 00 1A      [ 2] 1285 	LDW Y,#ULAST 
      000653 1D 00 02         [ 2] 1286 	SUBW X,#2
      000656 FF               [ 2] 1287         LDW (X),Y
      000657 81               [ 4] 1288         RET
                                   1289 
                                   1290 ; address of system variable URLAST 
                                   1291 ;       RAMLAST ( -- a )
                                   1292 ; RAM dictionary context 
      000658 06 4A                 1293         .word LINK 
                           00065A  1294         LINK=. 
      00065A 07                    1295         .byte 7  
      00065B 52 41 4D 4C 41 53 54  1296         .ascii "RAMLAST" 
      000662                       1297 RAMLAST: 
      000662 90 AE 00 20      [ 2] 1298         ldw y,#URLAST 
      000666 1D 00 02         [ 2] 1299         subw x,#CELLL 
      000669 FF               [ 2] 1300         ldw (x),y 
      00066A 81               [ 4] 1301         ret 
                                   1302 
                                   1303 ; OFFSET ( -- a )
                                   1304 ; address of system variable OFFSET 
      00066B 06 5A                 1305         .word LINK 
                           00066D  1306         LINK=.
      00066D 06                    1307         .byte 6
      00066E 4F 46 46 53 45 54     1308         .ascii "OFFSET" 
      000674                       1309 OFFSET: 
      000674 1D 00 02         [ 2] 1310         subw x,#CELLL
      000677 90 AE 00 1C      [ 2] 1311         ldw y,#UOFFSET 
      00067B FF               [ 2] 1312         ldw (x),y 
      00067C 81               [ 4] 1313         ret 
                                   1314 
                                   1315 ; adjust jump address adding OFFSET
                                   1316 ; ADR-ADJ ( a -- a+offset )
      00067D                       1317 ADRADJ: 
      00067D CD 06 74         [ 4] 1318         call OFFSET 
      000680 CD 04 3C         [ 4] 1319         call AT 
      000683 CC 06 DE         [ 2] 1320         jp PLUS 
                                   1321 
                                   1322 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 26.
Hexadecimal [24-Bits]



                                   1323 ;; Common functions
                                   1324 
                                   1325 ;       ?DUP    ( w -- w w | 0 )
                                   1326 ;       Dup tos if its is not zero.
      000686 06 6D                 1327         .word      LINK
                           000688  1328 LINK = . 
      000688 04                    1329         .byte      4
      000689 3F 44 55 50           1330         .ascii     "?DUP"
      00068D                       1331 QDUP:
      00068D 90 93            [ 1] 1332         LDW Y,X
      00068F 90 FE            [ 2] 1333 	LDW Y,(Y)
      000691 27 04            [ 1] 1334         JREQ     QDUP1
      000693 1D 00 02         [ 2] 1335 	SUBW X,#2
      000696 FF               [ 2] 1336         LDW (X),Y
      000697 81               [ 4] 1337 QDUP1:  RET
                                   1338 
                                   1339 ;       ROT     ( w1 w2 w3 -- w2 w3 w1 )
                                   1340 ;       Rot 3rd item to top.
      000698 06 88                 1341         .word      LINK
                           00069A  1342 LINK = . 
      00069A 03                    1343         .byte      3
      00069B 52 4F 54              1344         .ascii     "ROT"
      00069E                       1345 ROT:
      00069E 90 93            [ 1] 1346         ldw y,x 
      0006A0 90 FE            [ 2] 1347         ldw y,(y)
      0006A2 90 89            [ 2] 1348         pushw y 
      0006A4 90 93            [ 1] 1349         ldw y,x 
      0006A6 90 EE 04         [ 2] 1350         ldw y,(4,y)
      0006A9 FF               [ 2] 1351         ldw (x),y 
      0006AA 90 93            [ 1] 1352         ldw y,x 
      0006AC 90 EE 02         [ 2] 1353         ldw y,(2,y)
      0006AF EF 04            [ 2] 1354         ldw (4,x),y 
      0006B1 90 85            [ 2] 1355         popw y 
      0006B3 EF 02            [ 2] 1356         ldw (2,x),y
      0006B5 81               [ 4] 1357         ret 
                                   1358 
                                   1359 ;       2DROP   ( w w -- )
                                   1360 ;       Discard two items on stack.
      0006B6 06 9A                 1361         .word      LINK
                           0006B8  1362 LINK = . 
      0006B8 05                    1363         .byte      5
      0006B9 32 44 52 4F 50        1364         .ascii     "2DROP"
      0006BE                       1365 DDROP:
      0006BE 1C 00 04         [ 2] 1366         ADDW X,#4
      0006C1 81               [ 4] 1367         RET
                                   1368 
                                   1369 ;       2DUP    ( w1 w2 -- w1 w2 w1 w2 )
                                   1370 ;       Duplicate top two items.
      0006C2 06 B8                 1371         .word      LINK
                           0006C4  1372 LINK = . 
      0006C4 04                    1373         .byte      4
      0006C5 32 44 55 50           1374         .ascii     "2DUP"
      0006C9                       1375 DDUP:
      0006C9 1D 00 04         [ 2] 1376         SUBW X,#4
      0006CC 90 93            [ 1] 1377         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 27.
Hexadecimal [24-Bits]



      0006CE 90 EE 06         [ 2] 1378         LDW Y,(6,Y)
      0006D1 EF 02            [ 2] 1379         LDW (2,X),Y
      0006D3 90 93            [ 1] 1380         LDW Y,X
      0006D5 90 EE 04         [ 2] 1381         LDW Y,(4,Y)
      0006D8 FF               [ 2] 1382         LDW (X),Y
      0006D9 81               [ 4] 1383         RET
                                   1384 
                                   1385 ;       +       ( w w -- sum )
                                   1386 ;       Add top two items.
      0006DA 06 C4                 1387         .word      LINK
                           0006DC  1388 LINK = . 
      0006DC 01                    1389         .byte      1
      0006DD 2B                    1390         .ascii     "+"
      0006DE                       1391 PLUS:
      0006DE 90 93            [ 1] 1392         LDW Y,X
      0006E0 90 FE            [ 2] 1393         LDW Y,(Y)
      0006E2 90 BF 24         [ 2] 1394         LDW YTEMP,Y
      0006E5 1C 00 02         [ 2] 1395         ADDW X,#2
      0006E8 90 93            [ 1] 1396         LDW Y,X
      0006EA 90 FE            [ 2] 1397         LDW Y,(Y)
      0006EC 72 B9 00 24      [ 2] 1398         ADDW Y,YTEMP
      0006F0 FF               [ 2] 1399         LDW (X),Y
      0006F1 81               [ 4] 1400         RET
                                   1401 
                                   1402 ;       NOT     ( w -- w )
                                   1403 ;       One's complement of tos.
      0006F2 06 DC                 1404         .word      LINK
                           0006F4  1405 LINK = . 
      0006F4 03                    1406         .byte      3
      0006F5 4E 4F 54              1407         .ascii     "NOT"
      0006F8                       1408 INVER:
      0006F8 90 93            [ 1] 1409         LDW Y,X
      0006FA 90 FE            [ 2] 1410         LDW Y,(Y)
      0006FC 90 53            [ 2] 1411         CPLW Y
      0006FE FF               [ 2] 1412         LDW (X),Y
      0006FF 81               [ 4] 1413         RET
                                   1414 
                                   1415 ;       NEGATE  ( n -- -n )
                                   1416 ;       Two's complement of tos.
      000700 06 F4                 1417         .word      LINK
                           000702  1418 LINK = . 
      000702 06                    1419         .byte      6
      000703 4E 45 47 41 54 45     1420         .ascii     "NEGATE"
      000709                       1421 NEGAT:
      000709 90 93            [ 1] 1422         LDW Y,X
      00070B 90 FE            [ 2] 1423         LDW Y,(Y)
      00070D 90 50            [ 2] 1424         NEGW Y
      00070F FF               [ 2] 1425         LDW (X),Y
      000710 81               [ 4] 1426         RET
                                   1427 
                                   1428 ;       DNEGATE ( d -- -d )
                                   1429 ;       Two's complement of top double.
      000711 07 02                 1430         .word      LINK
                           000713  1431 LINK = . 
      000713 07                    1432         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 28.
Hexadecimal [24-Bits]



      000714 44 4E 45 47 41 54 45  1433         .ascii     "DNEGATE"
      00071B                       1434 DNEGA:
      00071B 90 93            [ 1] 1435         LDW Y,X
      00071D 90 FE            [ 2] 1436 	LDW Y,(Y)
      00071F 90 53            [ 2] 1437         CPLW Y     
      000721 90 BF 24         [ 2] 1438 	LDW YTEMP,Y
      000724 90 93            [ 1] 1439         LDW Y,X
      000726 90 EE 02         [ 2] 1440         LDW Y,(2,Y)
      000729 90 53            [ 2] 1441         CPLW Y
      00072B 72 A9 00 01      [ 2] 1442         addw y,#1
      00072F EF 02            [ 2] 1443         LDW (2,X),Y
      000731 90 BE 24         [ 2] 1444         LDW Y,YTEMP
      000734 24 02            [ 1] 1445         JRNC DN1 
      000736 90 5C            [ 2] 1446         INCW Y
      000738 FF               [ 2] 1447 DN1:    LDW (X),Y
      000739 81               [ 4] 1448         RET
                                   1449 
                                   1450 
                                   1451 ;       S>D ( n -- d )
                                   1452 ; convert single integer to double 
      00073A 07 13                 1453         .word LINK 
                           00073C  1454         LINK=. 
      00073C 03                    1455         .byte 3 
      00073D 53 3E 44              1456         .ascii "S>D"
      000740                       1457 STOD: 
      000740 1D 00 02         [ 2] 1458         subw x,#CELLL 
      000743 90 5F            [ 1] 1459         clrw y 
      000745 FF               [ 2] 1460         ldw (x),y 
      000746 90 93            [ 1] 1461         ldw y,x 
      000748 90 EE 02         [ 2] 1462         ldw y,(2,y)
      00074B 2A 05            [ 1] 1463         jrpl 1$ 
      00074D 90 AE FF FF      [ 2] 1464         ldw y,#-1
      000751 FF               [ 2] 1465         ldw (x),y 
      000752 81               [ 4] 1466 1$:     ret 
                                   1467 
                                   1468 
                                   1469 
                                   1470 
                                   1471 ;       -       ( n1 n2 -- n1-n2 )
                                   1472 ;       Subtraction.
      000753 07 3C                 1473         .word      LINK
                           000755  1474 LINK = . 
      000755 01                    1475         .byte      1
      000756 2D                    1476         .ascii     "-"
      000757                       1477 SUBB:
      000757 90 93            [ 1] 1478         LDW Y,X
      000759 90 FE            [ 2] 1479         LDW Y,(Y)
      00075B 90 BF 24         [ 2] 1480         LDW YTEMP,Y
      00075E 1C 00 02         [ 2] 1481         ADDW X,#2
      000761 90 93            [ 1] 1482         LDW Y,X
      000763 90 FE            [ 2] 1483         LDW Y,(Y)
      000765 72 B2 00 24      [ 2] 1484         SUBW Y,YTEMP
      000769 FF               [ 2] 1485         LDW (X),Y
      00076A 81               [ 4] 1486         RET
                                   1487 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 29.
Hexadecimal [24-Bits]



                                   1488 ;       ABS     ( n -- n )
                                   1489 ;       Return  absolute value of n.
      00076B 07 55                 1490         .word      LINK
                           00076D  1491 LINK = . 
      00076D 03                    1492         .byte      3
      00076E 41 42 53              1493         .ascii     "ABS"
      000771                       1494 ABSS:
      000771 90 93            [ 1] 1495         LDW Y,X
      000773 90 FE            [ 2] 1496 	LDW Y,(Y)
      000775 2A 03            [ 1] 1497         JRPL     AB1     ;negate:
      000777 90 50            [ 2] 1498         NEGW     Y     ;else negate hi byte
      000779 FF               [ 2] 1499         LDW (X),Y
      00077A 81               [ 4] 1500 AB1:    RET
                                   1501 
                                   1502 ;       =       ( w w -- t )
                                   1503 ;       Return true if top two are =al.
      00077B 07 6D                 1504         .word      LINK
                           00077D  1505 LINK = . 
      00077D 01                    1506         .byte      1
      00077E 3D                    1507         .ascii     "="
      00077F                       1508 EQUAL:
      00077F A6 FF            [ 1] 1509         LD A,#0xFF  ;true
      000781 90 93            [ 1] 1510         LDW Y,X    ;D = n2
      000783 90 FE            [ 2] 1511         LDW Y,(Y)
      000785 90 BF 24         [ 2] 1512         LDW YTEMP,Y
      000788 1C 00 02         [ 2] 1513         ADDW X,#2
      00078B 90 93            [ 1] 1514         LDW Y,X
      00078D 90 FE            [ 2] 1515         LDW Y,(Y)
      00078F 90 B3 24         [ 2] 1516         CPW Y,YTEMP     ;if n2 <> n1
      000792 27 01            [ 1] 1517         JREQ     EQ1
      000794 4F               [ 1] 1518         CLR A
      000795 F7               [ 1] 1519 EQ1:    LD (X),A
      000796 E7 01            [ 1] 1520         LD (1,X),A
      000798 81               [ 4] 1521 	RET     
                                   1522 
                                   1523 ;       U<      ( u u -- t )
                                   1524 ;       Unsigned compare of top two items.
      000799 07 7D                 1525         .word      LINK
                           00079B  1526 LINK = . 
      00079B 02                    1527         .byte      2
      00079C 55 3C                 1528         .ascii     "U<"
      00079E                       1529 ULESS:
      00079E A6 FF            [ 1] 1530         LD A,#0xFF  ;true
      0007A0 90 93            [ 1] 1531         LDW Y,X    ;D = n2
      0007A2 90 FE            [ 2] 1532         LDW Y,(Y)
      0007A4 90 BF 24         [ 2] 1533         LDW YTEMP,Y
      0007A7 1C 00 02         [ 2] 1534         ADDW X,#2
      0007AA 90 93            [ 1] 1535         LDW Y,X
      0007AC 90 FE            [ 2] 1536         LDW Y,(Y)
      0007AE 90 B3 24         [ 2] 1537         CPW Y,YTEMP     ;if n2 <> n1
      0007B1 25 01            [ 1] 1538         JRULT     ULES1
      0007B3 4F               [ 1] 1539         CLR A
      0007B4 F7               [ 1] 1540 ULES1:  LD (X),A
      0007B5 E7 01            [ 1] 1541         LD (1,X),A
      0007B7 81               [ 4] 1542 	RET     
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 30.
Hexadecimal [24-Bits]



                                   1543 
                                   1544 ;       <       ( n1 n2 -- t )
                                   1545 ;       Signed compare of top two items.
      0007B8 07 9B                 1546         .word      LINK
                           0007BA  1547 LINK = . 
      0007BA 01                    1548         .byte      1
      0007BB 3C                    1549         .ascii     "<"
      0007BC                       1550 LESS:
      0007BC A6 FF            [ 1] 1551         LD A,#0xFF  ;true
      0007BE 90 93            [ 1] 1552         LDW Y,X    ;D = n2
      0007C0 90 FE            [ 2] 1553         LDW Y,(Y)
      0007C2 90 BF 24         [ 2] 1554         LDW YTEMP,Y
      0007C5 1C 00 02         [ 2] 1555         ADDW X,#2
      0007C8 90 93            [ 1] 1556         LDW Y,X
      0007CA 90 FE            [ 2] 1557         LDW Y,(Y)
      0007CC 90 B3 24         [ 2] 1558         CPW Y,YTEMP     ;if n2 <> n1
      0007CF 2F 01            [ 1] 1559         JRSLT     LT1
      0007D1 4F               [ 1] 1560         CLR A
      0007D2 F7               [ 1] 1561 LT1:    LD (X),A
      0007D3 E7 01            [ 1] 1562         LD (1,X),A
      0007D5 81               [ 4] 1563 	RET     
                                   1564 
                                   1565 ;       MAX     ( n n -- n )
                                   1566 ;       Return greater of two top items.
      0007D6 07 BA                 1567         .word      LINK
                           0007D8  1568 LINK = . 
      0007D8 03                    1569         .byte      3
      0007D9 4D 41 58              1570         .ascii     "MAX"
      0007DC                       1571 MAX:
      0007DC 90 93            [ 1] 1572         LDW Y,X    ;D = n2
      0007DE 90 EE 02         [ 2] 1573         LDW Y,(2,Y)
      0007E1 90 BF 24         [ 2] 1574         LDW YTEMP,Y
      0007E4 90 93            [ 1] 1575         LDW Y,X
      0007E6 90 FE            [ 2] 1576         LDW Y,(Y)
      0007E8 90 B3 24         [ 2] 1577         CPW Y,YTEMP     ;if n2 <> n1
      0007EB 2F 02            [ 1] 1578         JRSLT     MAX1
      0007ED EF 02            [ 2] 1579         LDW (2,X),Y
      0007EF 1C 00 02         [ 2] 1580 MAX1:   ADDW X,#2
      0007F2 81               [ 4] 1581 	RET     
                                   1582 
                                   1583 ;       MIN     ( n n -- n )
                                   1584 ;       Return smaller of top two items.
      0007F3 07 D8                 1585         .word      LINK
                           0007F5  1586 LINK = . 
      0007F5 03                    1587         .byte      3
      0007F6 4D 49 4E              1588         .ascii     "MIN"
      0007F9                       1589 MIN:
      0007F9 90 93            [ 1] 1590         LDW Y,X    ;D = n2
      0007FB 90 EE 02         [ 2] 1591         LDW Y,(2,Y)
      0007FE 90 BF 24         [ 2] 1592         LDW YTEMP,Y
      000801 90 93            [ 1] 1593         LDW Y,X
      000803 90 FE            [ 2] 1594         LDW Y,(Y)
      000805 90 B3 24         [ 2] 1595         CPW Y,YTEMP     ;if n2 <> n1
      000808 2C 02            [ 1] 1596         JRSGT     MIN1
      00080A EF 02            [ 2] 1597         LDW (2,X),Y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 31.
Hexadecimal [24-Bits]



      00080C 1C 00 02         [ 2] 1598 MIN1:	ADDW X,#2
      00080F 81               [ 4] 1599 	RET     
                                   1600 
                                   1601 ;       WITHIN  ( u ul uh -- t )
                                   1602 ;       Return true if u is within
                                   1603 ;       range of ul and uh. ( ul <= u < uh )
      000810 07 F5                 1604         .word      LINK
                           000812  1605 LINK = . 
      000812 06                    1606         .byte      6
      000813 57 49 54 48 49 4E     1607         .ascii     "WITHIN"
      000819                       1608 WITHI:
      000819 CD 05 0D         [ 4] 1609         CALL     OVER
      00081C CD 07 57         [ 4] 1610         CALL     SUBB
      00081F CD 04 AC         [ 4] 1611         CALL     TOR
      000822 CD 07 57         [ 4] 1612         CALL     SUBB
      000825 CD 04 8D         [ 4] 1613         CALL     RFROM
      000828 CC 07 9E         [ 2] 1614         JP     ULESS
                                   1615 
                                   1616 ;; Divide
                                   1617 
                                   1618 ;       UM/MOD  ( udl udh un -- ur uq )
                                   1619 ;       Unsigned divide of a double by a
                                   1620 ;       single. Return mod and quotient.
      00082B 08 12                 1621         .word      LINK
                           00082D  1622 LINK = . 
      00082D 06                    1623         .byte      6
      00082E 55 4D 2F 4D 4F 44     1624         .ascii     "UM/MOD"
      000834                       1625 UMMOD:
      000834 BF 22            [ 2] 1626 	LDW XTEMP,X	; save stack pointer
      000836 FE               [ 2] 1627 	LDW X,(X)	; un
      000837 BF 24            [ 2] 1628 	LDW YTEMP,X     ; save un
      000839 90 BE 22         [ 2] 1629 	LDW Y,XTEMP	; stack pointer
      00083C 90 EE 04         [ 2] 1630 	LDW Y,(4,Y)     ; Y=udl
      00083F BE 22            [ 2] 1631 	LDW X,XTEMP
      000841 EE 02            [ 2] 1632 	LDW X,(2,X)	; X=udh
      000843 B3 24            [ 2] 1633 	CPW X,YTEMP
      000845 23 0F            [ 2] 1634 	JRULE MMSM1
      000847 BE 22            [ 2] 1635 	LDW X,XTEMP
      000849 1C 00 02         [ 2] 1636 	ADDW X,#2	; pop off 1 level
      00084C 90 AE FF FF      [ 2] 1637 	LDW Y,#0xFFFF
      000850 FF               [ 2] 1638 	LDW (X),Y
      000851 90 5F            [ 1] 1639 	CLRW Y
      000853 EF 02            [ 2] 1640 	LDW (2,X),Y
      000855 81               [ 4] 1641 	RET
      000856                       1642 MMSM1:
                                   1643 ; take advantage of divw x,y when udh==0
      000856 5D               [ 2] 1644         tnzw x  ; is udh==0?
      000857 26 11            [ 1] 1645         jrne MMSM2 
      000859 93               [ 1] 1646         ldw x,y    ;udl 
      00085A 90 BE 24         [ 2] 1647         ldw y,YTEMP ; divisor 
      00085D 65               [ 2] 1648         divw x,y 
      00085E 89               [ 2] 1649         pushw x     ; quotient 
      00085F BE 22            [ 2] 1650         ldw x,XTEMP 
      000861 1C 00 02         [ 2] 1651         addw x,#CELLL 
      000864 EF 02            [ 2] 1652         ldw (2,x),y  ; ur
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 32.
Hexadecimal [24-Bits]



      000866 90 85            [ 2] 1653         popw y 
      000868 FF               [ 2] 1654         ldw (x),y ; uq 
      000869 81               [ 4] 1655         ret 
      00086A                       1656 MMSM2:        
      00086A A6 11            [ 1] 1657 	LD A,#17	; loop count
      00086C                       1658 MMSM3:
      00086C B3 24            [ 2] 1659 	CPW X,YTEMP	; compare udh to un
      00086E 25 04            [ 1] 1660 	JRULT MMSM4	; can't subtract
      000870 72 B0 00 24      [ 2] 1661 	SUBW X,YTEMP	; can subtract
      000874                       1662 MMSM4:
      000874 8C               [ 1] 1663 	CCF	; quotient bit
      000875 90 59            [ 2] 1664 	RLCW Y	; rotate into quotient
      000877 59               [ 2] 1665 	RLCW X	; rotate into remainder
      000878 4A               [ 1] 1666 	DEC A	; repeat
      000879 22 F1            [ 1] 1667 	JRUGT MMSM3
      00087B 56               [ 2] 1668         RRCW X 
      00087C BF 24            [ 2] 1669 	LDW YTEMP,X	; done, save remainder
      00087E BE 22            [ 2] 1670 	LDW X,XTEMP
      000880 1C 00 02         [ 2] 1671 	ADDW X,#2	; drop
      000883 FF               [ 2] 1672 	LDW (X),Y
      000884 90 BE 24         [ 2] 1673 	LDW Y,YTEMP	; save quotient
      000887 EF 02            [ 2] 1674 	LDW (2,X),Y
      000889 81               [ 4] 1675 	RET
                                   1676 	
                                   1677 ;       M/MOD   ( d n -- r q )
                                   1678 ;       Signed floored divide of double by
                                   1679 ;       single. Return mod and quotient.
      00088A 08 2D                 1680         .word      LINK
                           00088C  1681 LINK = . 
      00088C 05                    1682         .byte      5
      00088D 4D 2F 4D 4F 44        1683         .ascii     "M/MOD"
      000892                       1684 MSMOD:  
      000892 CD 04 E3         [ 4] 1685         CALL	DUPP
      000895 CD 05 1C         [ 4] 1686         CALL	ZLESS
      000898 CD 04 E3         [ 4] 1687         CALL	DUPP
      00089B CD 04 AC         [ 4] 1688         CALL	TOR
      00089E CD 03 E7         [ 4] 1689         CALL	QBRAN
      0008A1 08 AF                 1690         .word	MMOD1
      0008A3 CD 07 09         [ 4] 1691         CALL	NEGAT
      0008A6 CD 04 AC         [ 4] 1692         CALL	TOR
      0008A9 CD 07 1B         [ 4] 1693         CALL	DNEGA
      0008AC CD 04 8D         [ 4] 1694         CALL	RFROM
      0008AF CD 04 AC         [ 4] 1695 MMOD1:	CALL	TOR
      0008B2 CD 04 E3         [ 4] 1696         CALL	DUPP
      0008B5 CD 05 1C         [ 4] 1697         CALL	ZLESS
      0008B8 CD 03 E7         [ 4] 1698         CALL	QBRAN
      0008BB 08 C3                 1699         .word	MMOD2
      0008BD CD 04 A0         [ 4] 1700         CALL	RAT
      0008C0 CD 06 DE         [ 4] 1701         CALL	PLUS
      0008C3 CD 04 8D         [ 4] 1702 MMOD2:	CALL	RFROM
      0008C6 CD 08 34         [ 4] 1703         CALL	UMMOD
      0008C9 CD 04 8D         [ 4] 1704         CALL	RFROM
      0008CC CD 03 E7         [ 4] 1705         CALL	QBRAN
      0008CF 08 DA                 1706         .word	MMOD3
      0008D1 CD 04 F3         [ 4] 1707         CALL	SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 33.
Hexadecimal [24-Bits]



      0008D4 CD 07 09         [ 4] 1708         CALL	NEGAT
      0008D7 CD 04 F3         [ 4] 1709         CALL	SWAPP
      0008DA 81               [ 4] 1710 MMOD3:	RET
                                   1711 
                                   1712 ;       /MOD    ( n n -- r q )
                                   1713 ;       Signed divide. Return mod and quotient.
      0008DB 08 8C                 1714         .word      LINK
                           0008DD  1715 LINK = . 
      0008DD 04                    1716         .byte      4
      0008DE 2F 4D 4F 44           1717         .ascii     "/MOD"
      0008E2                       1718 SLMOD:
      0008E2 CD 05 0D         [ 4] 1719         CALL	OVER
      0008E5 CD 05 1C         [ 4] 1720         CALL	ZLESS
      0008E8 CD 04 F3         [ 4] 1721         CALL	SWAPP
      0008EB CC 08 92         [ 2] 1722         JP	MSMOD
                                   1723 
                                   1724 ;       MOD     ( n n -- r )
                                   1725 ;       Signed divide. Return mod only.
      0008EE 08 DD                 1726         .word      LINK
                           0008F0  1727 LINK = . 
      0008F0 03                    1728         .byte      3
      0008F1 4D 4F 44              1729         .ascii     "MOD"
      0008F4                       1730 MODD:
      0008F4 CD 08 E2         [ 4] 1731 	CALL	SLMOD
      0008F7 CC 04 D9         [ 2] 1732 	JP	DROP
                                   1733 
                                   1734 ;       /       ( n n -- q )
                                   1735 ;       Signed divide. Return quotient only.
      0008FA 08 F0                 1736         .word      LINK
                           0008FC  1737 LINK = . 
      0008FC 01                    1738         .byte      1
      0008FD 2F                    1739         .ascii     "/"
      0008FE                       1740 SLASH:
      0008FE CD 08 E2         [ 4] 1741         CALL	SLMOD
      000901 CD 04 F3         [ 4] 1742         CALL	SWAPP
      000904 CC 04 D9         [ 2] 1743         JP	DROP
                                   1744 
                                   1745 ;; Multiply
                                   1746 
                                   1747 ;       UM*     ( u u -- ud )
                                   1748 ;       Unsigned multiply. Return double product.
      000907 08 FC                 1749         .word      LINK
                           000909  1750 LINK = . 
      000909 03                    1751         .byte      3
      00090A 55 4D 2A              1752         .ascii     "UM*"
      00090D                       1753 UMSTA:	; stack have 4 bytes u1=a,b u2=c,d
                                   1754 ; take advantage of SP addressing modes
                                   1755 ; these PRODx in RAM are not required
                                   1756 ; the product is kept on stack as local variable 
                                   1757         ;; bytes offset on data stack 
                           000002  1758         da=2 
                           000003  1759         db=3 
                           000000  1760         dc=0 
                           000001  1761         dd=1 
                                   1762         ;; product bytes offset on return stack 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 34.
Hexadecimal [24-Bits]



                           000001  1763         UD1=1  ; ud bits 31..24
                           000002  1764         UD2=2  ; ud bits 23..16
                           000003  1765         UD3=3  ; ud bits 15..8 
                           000004  1766         UD4=4  ; ud bits 7..0 
                                   1767         ;; local variable for product set to zero   
      00090D 90 5F            [ 1] 1768         clrw y 
      00090F 90 89            [ 2] 1769         pushw y  ; bits 15..0
      000911 90 89            [ 2] 1770         pushw y  ; bits 31..16 
      000913 E6 03            [ 1] 1771         ld a,(db,x) ; b 
      000915 90 97            [ 1] 1772         ld yl,a 
      000917 E6 01            [ 1] 1773         ld a,(dd,x)   ; d
      000919 90 42            [ 4] 1774         mul y,a    ; b*d  
      00091B 17 03            [ 2] 1775         ldw (UD3,sp),y ; lowest weight product 
      00091D E6 03            [ 1] 1776         ld a,(db,x)
      00091F 90 97            [ 1] 1777         ld yl,a 
      000921 E6 00            [ 1] 1778         ld a,(dc,x)
      000923 90 42            [ 4] 1779         mul y,a  ; b*c 
                                   1780         ;;; do the partial sum 
      000925 72 F9 02         [ 2] 1781         addw y,(UD2,sp)
      000928 4F               [ 1] 1782         clr a 
      000929 49               [ 1] 1783         rlc a
      00092A 6B 01            [ 1] 1784         ld (UD1,sp),a 
      00092C 17 02            [ 2] 1785         ldw (UD2,sp),y 
      00092E E6 02            [ 1] 1786         ld a,(da,x)
      000930 90 97            [ 1] 1787         ld yl,a 
      000932 E6 01            [ 1] 1788         ld a,(dd,x)
      000934 90 42            [ 4] 1789         mul y,a   ; a*d 
                                   1790         ;; do partial sum 
      000936 72 F9 02         [ 2] 1791         addw y,(UD2,sp)
      000939 4F               [ 1] 1792         clr a 
      00093A 19 01            [ 1] 1793         adc a,(UD1,sp)
      00093C 6B 01            [ 1] 1794         ld (UD1,sp),a  
      00093E 17 02            [ 2] 1795         ldw (UD2,sp),y 
      000940 E6 02            [ 1] 1796         ld a,(da,x)
      000942 90 97            [ 1] 1797         ld yl,a 
      000944 E6 00            [ 1] 1798         ld a,(dc,x)
      000946 90 42            [ 4] 1799         mul y,a  ;  a*c highest weight product 
                                   1800         ;;; do partial sum 
      000948 72 F9 01         [ 2] 1801         addw y,(UD1,sp)
      00094B FF               [ 2] 1802         ldw (x),y  ; udh 
      00094C 16 03            [ 2] 1803         ldw y,(UD3,sp)
      00094E EF 02            [ 2] 1804         ldw (2,x),y  ; udl  
      000950 5B 04            [ 2] 1805         addw sp,#4 ; drop local variable 
      000952 81               [ 4] 1806         ret  
                                   1807 
                                   1808 
                                   1809 ;       *       ( n n -- n )
                                   1810 ;       Signed multiply. Return single product.
      000953 09 09                 1811         .word      LINK
                           000955  1812 LINK = . 
      000955 01                    1813         .byte      1
      000956 2A                    1814         .ascii     "*"
      000957                       1815 STAR:
      000957 CD 09 0D         [ 4] 1816 	CALL	UMSTA
      00095A CC 04 D9         [ 2] 1817 	JP	DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 35.
Hexadecimal [24-Bits]



                                   1818 
                                   1819 ;       M*      ( n n -- d )
                                   1820 ;       Signed multiply. Return double product.
      00095D 09 55                 1821         .word      LINK
                           00095F  1822 LINK = . 
      00095F 02                    1823         .byte      2
      000960 4D 2A                 1824         .ascii     "M*"
      000962                       1825 MSTAR:      
      000962 CD 06 C9         [ 4] 1826         CALL	DDUP
      000965 CD 05 58         [ 4] 1827         CALL	XORR
      000968 CD 05 1C         [ 4] 1828         CALL	ZLESS
      00096B CD 04 AC         [ 4] 1829         CALL	TOR
      00096E CD 07 71         [ 4] 1830         CALL	ABSS
      000971 CD 04 F3         [ 4] 1831         CALL	SWAPP
      000974 CD 07 71         [ 4] 1832         CALL	ABSS
      000977 CD 09 0D         [ 4] 1833         CALL	UMSTA
      00097A CD 04 8D         [ 4] 1834         CALL	RFROM
      00097D CD 03 E7         [ 4] 1835         CALL	QBRAN
      000980 09 85                 1836         .word	MSTA1
      000982 CD 07 1B         [ 4] 1837         CALL	DNEGA
      000985 81               [ 4] 1838 MSTA1:	RET
                                   1839 
                                   1840 ;       */MOD   ( n1 n2 n3 -- r q )
                                   1841 ;       Multiply n1 and n2, then divide
                                   1842 ;       by n3. Return mod and quotient.
      000986 09 5F                 1843         .word      LINK
                           000988  1844 LINK = . 
      000988 05                    1845         .byte      5
      000989 2A 2F 4D 4F 44        1846         .ascii     "*/MOD"
      00098E                       1847 SSMOD:
      00098E CD 04 AC         [ 4] 1848         CALL     TOR
      000991 CD 09 62         [ 4] 1849         CALL     MSTAR
      000994 CD 04 8D         [ 4] 1850         CALL     RFROM
      000997 CC 08 92         [ 2] 1851         JP     MSMOD
                                   1852 
                                   1853 ;       */      ( n1 n2 n3 -- q )
                                   1854 ;       Multiply n1 by n2, then divide
                                   1855 ;       by n3. Return quotient only.
      00099A 09 88                 1856         .word      LINK
                           00099C  1857 LINK = . 
      00099C 02                    1858         .byte      2
      00099D 2A 2F                 1859         .ascii     "*/"
      00099F                       1860 STASL:
      00099F CD 09 8E         [ 4] 1861         CALL	SSMOD
      0009A2 CD 04 F3         [ 4] 1862         CALL	SWAPP
      0009A5 CC 04 D9         [ 2] 1863         JP	DROP
                                   1864 
                                   1865 ;; Miscellaneous
                                   1866 
                                   1867 ;       CELL+   ( a -- a )
                                   1868 ;       Add cell size in byte to address.
      0009A8 09 9C                 1869         .word      LINK
                           0009AA  1870 LINK = . 
      0009AA 02                    1871         .byte       2
      0009AB 32 2B                 1872         .ascii     "2+"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 36.
Hexadecimal [24-Bits]



      0009AD                       1873 CELLP:
      0009AD 90 93            [ 1] 1874         LDW Y,X
      0009AF 90 FE            [ 2] 1875 	LDW Y,(Y)
      0009B1 72 A9 00 02      [ 2] 1876         ADDW Y,#CELLL 
      0009B5 FF               [ 2] 1877         LDW (X),Y
      0009B6 81               [ 4] 1878         RET
                                   1879 
                                   1880 ;       CELL-   ( a -- a )
                                   1881 ;       Subtract 2 from address.
      0009B7 09 AA                 1882         .word      LINK
                           0009B9  1883 LINK = . 
      0009B9 02                    1884         .byte       2
      0009BA 32 2D                 1885         .ascii     "2-"
      0009BC                       1886 CELLM:
      0009BC 90 93            [ 1] 1887         LDW Y,X
      0009BE 90 FE            [ 2] 1888 	LDW Y,(Y)
      0009C0 72 A2 00 02      [ 2] 1889         SUBW Y,#CELLL
      0009C4 FF               [ 2] 1890         LDW (X),Y
      0009C5 81               [ 4] 1891         RET
                                   1892 
                                   1893 ;       CELLS   ( n -- n )
                                   1894 ;       Multiply tos by 2.
      0009C6 09 B9                 1895         .word      LINK
                           0009C8  1896 LINK = . 
      0009C8 02                    1897         .byte       2
      0009C9 32 2A                 1898         .ascii     "2*"
      0009CB                       1899 CELLS:
      0009CB 90 93            [ 1] 1900         LDW Y,X
      0009CD 90 FE            [ 2] 1901 	LDW Y,(Y)
      0009CF 90 58            [ 2] 1902         SLAW Y
      0009D1 FF               [ 2] 1903         LDW (X),Y
      0009D2 81               [ 4] 1904         RET
                                   1905 
                                   1906 ;       1+      ( a -- a )
                                   1907 ;       Add cell size in byte to address.
      0009D3 09 C8                 1908         .word      LINK
                           0009D5  1909 LINK = . 
      0009D5 02                    1910         .byte      2
      0009D6 31 2B                 1911         .ascii     "1+"
      0009D8                       1912 ONEP:
      0009D8 90 93            [ 1] 1913         LDW Y,X
      0009DA 90 FE            [ 2] 1914 	LDW Y,(Y)
      0009DC 90 5C            [ 2] 1915         INCW Y
      0009DE FF               [ 2] 1916         LDW (X),Y
      0009DF 81               [ 4] 1917         RET
                                   1918 
                                   1919 ;       1-      ( a -- a )
                                   1920 ;       Subtract 2 from address.
      0009E0 09 D5                 1921         .word      LINK
                           0009E2  1922 LINK = . 
      0009E2 02                    1923         .byte      2
      0009E3 31 2D                 1924         .ascii     "1-"
      0009E5                       1925 ONEM:
      0009E5 90 93            [ 1] 1926         LDW Y,X
      0009E7 90 FE            [ 2] 1927 	LDW Y,(Y)
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 37.
Hexadecimal [24-Bits]



      0009E9 90 5A            [ 2] 1928         DECW Y
      0009EB FF               [ 2] 1929         LDW (X),Y
      0009EC 81               [ 4] 1930         RET
                                   1931 
                                   1932 ;  shift left n times 
                                   1933 ; LSHIFT ( n1 n2 -- n1<<n2 )
      0009ED 09 E2                 1934         .word LINK 
                           0009EF  1935         LINK=.
      0009EF 06                    1936         .byte 6 
      0009F0 4C 53 48 49 46 54     1937         .ascii "LSHIFT"
      0009F6                       1938 LSHIFT:
      0009F6 E6 01            [ 1] 1939         ld a,(1,x)
      0009F8 1C 00 02         [ 2] 1940         addw x,#CELLL 
      0009FB 90 93            [ 1] 1941         ldw y,x 
      0009FD 90 FE            [ 2] 1942         ldw y,(y)
      0009FF                       1943 LSHIFT1:
      0009FF 4D               [ 1] 1944         tnz a 
      000A00 27 05            [ 1] 1945         jreq LSHIFT4 
      000A02 90 58            [ 2] 1946         sllw y 
      000A04 4A               [ 1] 1947         dec a 
      000A05 20 F8            [ 2] 1948         jra LSHIFT1 
      000A07                       1949 LSHIFT4:
      000A07 FF               [ 2] 1950         ldw (x),y 
      000A08 81               [ 4] 1951         ret 
                                   1952 
                                   1953 ; shift right n times                 
                                   1954 ; RSHIFT (n1 n2 -- n1>>n2 )
      000A09 09 EF                 1955         .word LINK 
                           000A0B  1956         LINK=.
      000A0B 06                    1957         .byte 6
      000A0C 52 53 48 49 46 54     1958         .ascii "RSHIFT"
      000A12                       1959 RSHIFT:
      000A12 E6 01            [ 1] 1960         ld a,(1,x)
      000A14 1C 00 02         [ 2] 1961         addw x,#CELLL 
      000A17 90 93            [ 1] 1962         ldw y,x 
      000A19 90 FE            [ 2] 1963         ldw y,(y)
      000A1B                       1964 RSHIFT1:
      000A1B 4D               [ 1] 1965         tnz a 
      000A1C 27 05            [ 1] 1966         jreq RSHIFT4 
      000A1E 90 54            [ 2] 1967         srlw y 
      000A20 4A               [ 1] 1968         dec a 
      000A21 20 F8            [ 2] 1969         jra RSHIFT1 
      000A23                       1970 RSHIFT4:
      000A23 FF               [ 2] 1971         ldw (x),y 
      000A24 81               [ 4] 1972         ret 
                                   1973 
                                   1974 
                                   1975 ;       2/      ( n -- n )
                                   1976 ;       divide  tos by 2.
      000A25 0A 0B                 1977         .word      LINK
                           000A27  1978 LINK = . 
      000A27 02                    1979         .byte      2
      000A28 32 2F                 1980         .ascii     "2/"
      000A2A                       1981 TWOSL:
      000A2A 90 93            [ 1] 1982         LDW Y,X
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 38.
Hexadecimal [24-Bits]



      000A2C 90 FE            [ 2] 1983 	LDW Y,(Y)
      000A2E 90 57            [ 2] 1984         SRAW Y
      000A30 FF               [ 2] 1985         LDW (X),Y
      000A31 81               [ 4] 1986         RET
                                   1987 
                                   1988 ;       BL      ( -- 32 )
                                   1989 ;       Return 32,  blank character.
      000A32 0A 27                 1990         .word      LINK
                           000A34  1991 LINK = . 
      000A34 02                    1992         .byte      2
      000A35 42 4C                 1993         .ascii     "BL"
      000A37                       1994 BLANK:
      000A37 1D 00 02         [ 2] 1995         SUBW X,#2
      000A3A 90 AE 00 20      [ 2] 1996 	LDW Y,#32
      000A3E FF               [ 2] 1997         LDW (X),Y
      000A3F 81               [ 4] 1998         RET
                                   1999 
                                   2000 ;         0     ( -- 0)
                                   2001 ;         Return 0.
      000A40 0A 34                 2002         .word      LINK
                           000A42  2003 LINK = . 
      000A42 01                    2004         .byte       1
      000A43 30                    2005         .ascii     "0"
      000A44                       2006 ZERO:
      000A44 1D 00 02         [ 2] 2007         SUBW X,#2
      000A47 90 5F            [ 1] 2008 	CLRW Y
      000A49 FF               [ 2] 2009         LDW (X),Y
      000A4A 81               [ 4] 2010         RET
                                   2011 
                                   2012 ;         1     ( -- 1)
                                   2013 ;         Return 1.
      000A4B 0A 42                 2014         .word      LINK
                           000A4D  2015 LINK = . 
      000A4D 01                    2016         .byte       1
      000A4E 31                    2017         .ascii     "1"
      000A4F                       2018 ONE:
      000A4F 1D 00 02         [ 2] 2019         SUBW X,#2
      000A52 90 AE 00 01      [ 2] 2020 	LDW Y,#1
      000A56 FF               [ 2] 2021         LDW (X),Y
      000A57 81               [ 4] 2022         RET
                                   2023 
                                   2024 ;         -1    ( -- -1)
                                   2025 ;         Return 32,  blank character.
      000A58 0A 4D                 2026         .word      LINK
                           000A5A  2027 LINK = . 
      000A5A 02                    2028         .byte       2
      000A5B 2D 31                 2029         .ascii     "-1"
      000A5D                       2030 MONE:
      000A5D 1D 00 02         [ 2] 2031         SUBW X,#2
      000A60 90 AE FF FF      [ 2] 2032 	LDW Y,#0xFFFF
      000A64 FF               [ 2] 2033         LDW (X),Y
      000A65 81               [ 4] 2034         RET
                                   2035 
                                   2036 ;       >CHAR   ( c -- c )
                                   2037 ;       Filter non-printing characters.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 39.
Hexadecimal [24-Bits]



      000A66 0A 5A                 2038         .word      LINK
                           000A68  2039 LINK = . 
      000A68 05                    2040         .byte      5
      000A69 3E 43 48 41 52        2041         .ascii     ">CHAR"
      000A6E                       2042 TCHAR:
      000A6E E6 01            [ 1] 2043         ld a,(1,x)
      000A70 A1 20            [ 1] 2044         cp a,#32  
      000A72 2B 05            [ 1] 2045         jrmi 1$ 
      000A74 A1 7F            [ 1] 2046         cp a,#127 
      000A76 2A 01            [ 1] 2047         jrpl 1$ 
      000A78 81               [ 4] 2048         ret 
      000A79 A6 5F            [ 1] 2049 1$:     ld a,#'_ 
      000A7B E7 01            [ 1] 2050         ld (1,x),a 
      000A7D 81               [ 4] 2051         ret 
      000A7E 81               [ 4] 2052 TCHA1:  RET
                                   2053 
                                   2054 ;       DEPTH   ( -- n )
                                   2055 ;       Return  depth of  data stack.
      000A7F 0A 68                 2056         .word      LINK
                           000A81  2057 LINK = . 
      000A81 05                    2058         .byte      5
      000A82 44 45 50 54 48        2059         .ascii     "DEPTH"
      000A87                       2060 DEPTH: 
      000A87 90 BE 2A         [ 2] 2061         LDW Y,SP0    ;save data stack ptr
      000A8A BF 22            [ 2] 2062 	LDW XTEMP,X
      000A8C 72 B2 00 22      [ 2] 2063         SUBW Y,XTEMP     ;#bytes = SP0 - X
      000A90 90 57            [ 2] 2064         SRAW Y    ;Y = #stack items
      000A92 1D 00 02         [ 2] 2065 	SUBW X,#2
      000A95 FF               [ 2] 2066         LDW (X),Y     ; if neg, underflow
      000A96 81               [ 4] 2067         RET
                                   2068 
                                   2069 ;       PICK    ( ... +n -- ... w )
                                   2070 ;       Copy  nth stack item to tos.
      000A97 0A 81                 2071         .word      LINK
                           000A99  2072 LINK = . 
      000A99 04                    2073         .byte      4
      000A9A 50 49 43 4B           2074         .ascii     "PICK"
      000A9E                       2075 PICK:
      000A9E 90 93            [ 1] 2076         LDW Y,X   ;D = n1
      000AA0 90 FE            [ 2] 2077         LDW Y,(Y)
                                   2078 ; modified for standard compliance          
                                   2079 ; 0 PICK must be equivalent to DUP 
      000AA2 90 5C            [ 2] 2080         INCW Y 
      000AA4 90 58            [ 2] 2081         SLAW Y
      000AA6 BF 22            [ 2] 2082         LDW XTEMP,X
      000AA8 72 B9 00 22      [ 2] 2083         ADDW Y,XTEMP
      000AAC 90 FE            [ 2] 2084         LDW Y,(Y)
      000AAE FF               [ 2] 2085         LDW (X),Y
      000AAF 81               [ 4] 2086         RET
                                   2087 
                                   2088 ;; Memory access
                                   2089 
                                   2090 ;       +!      ( n a -- )
                                   2091 ;       Add n to  contents at address a.
      000AB0 0A 99                 2092         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 40.
Hexadecimal [24-Bits]



                           000AB2  2093 LINK = . 
      000AB2 02                    2094         .byte      2
      000AB3 2B 21                 2095         .ascii     "+!"
      000AB5                       2096 PSTOR:
      000AB5 90 93            [ 1] 2097         ldw y,x 
      000AB7 90 FE            [ 2] 2098         ldw y,(y)
      000AB9 90 BF 24         [ 2] 2099         ldw YTEMP,y  ; address
      000ABC 90 FE            [ 2] 2100         ldw y,(y)  
      000ABE 90 89            [ 2] 2101         pushw y  ; value at address 
      000AC0 90 93            [ 1] 2102         ldw y,x 
      000AC2 90 EE 02         [ 2] 2103         ldw y,(2,y) ; n 
      000AC5 72 F9 01         [ 2] 2104         addw y,(1,sp) ; n+value
      000AC8 91 CF 24         [ 5] 2105         ldw [YTEMP],y ;  a!
      000ACB 90 85            [ 2] 2106         popw y    ;drop local var
      000ACD 1C 00 04         [ 2] 2107         addw x,#4 ; DDROP 
      000AD0 81               [ 4] 2108         ret 
                                   2109 
                                   2110 ;       2!      ( d a -- )
                                   2111 ;       Store  double integer to address a.
      000AD1 0A B2                 2112         .word      LINK
                           000AD3  2113 LINK = . 
      000AD3 02                    2114         .byte      2
      000AD4 32 21                 2115         .ascii     "2!"
      000AD6                       2116 DSTOR:
      000AD6 90 93            [ 1] 2117         ldw y,x 
      000AD8 90 FE            [ 2] 2118         ldw y,(y)
      000ADA 90 BF 24         [ 2] 2119         ldw YTEMP,y ; address 
      000ADD 1C 00 02         [ 2] 2120         addw x,#CELLL ; drop a 
      000AE0 90 93            [ 1] 2121         ldw y,x 
      000AE2 90 FE            [ 2] 2122         ldw y,(y) ; hi word 
      000AE4 89               [ 2] 2123         pushw x 
      000AE5 EE 02            [ 2] 2124         ldw x,(2,x) ; lo word 
      000AE7 91 CF 24         [ 5] 2125         ldw [YTEMP],y
      000AEA 90 93            [ 1] 2126         ldw y,x 
      000AEC AE 00 02         [ 2] 2127         ldw x,#2 
      000AEF 92 DF 24         [ 5] 2128         ldw ([YTEMP],x),y 
      000AF2 85               [ 2] 2129         popw x 
      000AF3 1C 00 04         [ 2] 2130         addw x,#4 ; DDROP 
      000AF6 81               [ 4] 2131         ret 
                                   2132 
                                   2133 ;       2@      ( a -- d )
                                   2134 ;       Fetch double integer from address a.
      000AF7 0A D3                 2135         .word      LINK
                           000AF9  2136 LINK = . 
      000AF9 02                    2137         .byte      2
      000AFA 32 40                 2138         .ascii     "2@"
      000AFC                       2139 DAT:
      000AFC 90 93            [ 1] 2140         ldw y,x 
      000AFE 90 FE            [ 2] 2141         ldw y,(y) ;address 
      000B00 90 BF 24         [ 2] 2142         ldw YTEMP,y 
      000B03 1D 00 02         [ 2] 2143         subw x,#CELLL ; space for udh 
      000B06 91 CE 24         [ 5] 2144         ldw y,[YTEMP] ; udh 
      000B09 FF               [ 2] 2145         ldw (x),y 
      000B0A 90 AE 00 02      [ 2] 2146         ldw y,#2
      000B0E 91 DE 24         [ 5] 2147         ldw y,([YTEMP],y) ; udl 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 41.
Hexadecimal [24-Bits]



      000B11 EF 02            [ 2] 2148         ldw (2,x),y
      000B13 81               [ 4] 2149         ret 
                                   2150 
                                   2151 ;       COUNT   ( b -- b +n )
                                   2152 ;       Return count byte of a string
                                   2153 ;       and add 1 to byte address.
      000B14 0A F9                 2154         .word      LINK
                           000B16  2155 LINK = . 
      000B16 05                    2156         .byte      5
      000B17 43 4F 55 4E 54        2157         .ascii     "COUNT"
      000B1C                       2158 COUNT:
      000B1C 90 93            [ 1] 2159         ldw y,x 
      000B1E 90 FE            [ 2] 2160         ldw y,(y) ; address 
      000B20 90 F6            [ 1] 2161         ld a,(y)  ; count 
      000B22 90 5C            [ 2] 2162         incw y 
      000B24 FF               [ 2] 2163         ldw (x),y 
      000B25 1D 00 02         [ 2] 2164         subw x,#CELLL 
      000B28 E7 01            [ 1] 2165         ld (1,x),a 
      000B2A 7F               [ 1] 2166         clr (x)
      000B2B 81               [ 4] 2167         ret 
                                   2168 
                                   2169 ;       HERE    ( -- a )
                                   2170 ;       Return  top of  variables
      000B2C 0B 16                 2171         .word      LINK
                           000B2E  2172 LINK = . 
      000B2E 04                    2173         .byte      4
      000B2F 48 45 52 45           2174         .ascii     "HERE"
      000B33                       2175 HERE:
      000B33 90 AE 00 16      [ 2] 2176       	ldw y,#UVP 
      000B37 90 FE            [ 2] 2177         ldw y,(y)
      000B39 1D 00 02         [ 2] 2178         subw x,#CELLL 
      000B3C FF               [ 2] 2179         ldw (x),y 
      000B3D 81               [ 4] 2180         ret 
                                   2181 
                                   2182 ;       PAD     ( -- a )
                                   2183 ;       Return address of text buffer
                                   2184 ;       above  code dictionary.
      000B3E 0B 2E                 2185         .word      LINK
                           000B40  2186 LINK = . 
      000B40 03                    2187         .byte      3
      000B41 50 41 44              2188         .ascii     "PAD"
      000B44                       2189 PAD:
      000B44 CD 0B 33         [ 4] 2190         CALL     HERE
      000B47 CD 03 B4         [ 4] 2191         CALL     DOLIT
      000B4A 00 50                 2192         .word      80
      000B4C CC 06 DE         [ 2] 2193         JP     PLUS
                                   2194 
                                   2195 ;       TIB     ( -- a )
                                   2196 ;       Return address of terminal input buffer.
      000B4F 0B 40                 2197         .word      LINK
                           000B51  2198 LINK = . 
      000B51 03                    2199         .byte      3
      000B52 54 49 42              2200         .ascii     "TIB"
      000B55                       2201 TIB:
      000B55 CD 05 CE         [ 4] 2202         CALL     NTIB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 42.
Hexadecimal [24-Bits]



      000B58 CD 09 AD         [ 4] 2203         CALL     CELLP
      000B5B CC 04 3C         [ 2] 2204         JP     AT
                                   2205 
                                   2206 ;       @EXECUTE        ( a -- )
                                   2207 ;       Execute vector stored in address a.
      000B5E 0B 51                 2208         .word      LINK
                           000B60  2209 LINK = . 
      000B60 08                    2210         .byte      8
      000B61 40 45 58 45 43 55 54  2211         .ascii     "@EXECUTE"
             45
      000B69                       2212 ATEXE:
      000B69 CD 04 3C         [ 4] 2213         CALL     AT
      000B6C CD 06 8D         [ 4] 2214         CALL     QDUP    ;?address or zero
      000B6F CD 03 E7         [ 4] 2215         CALL     QBRAN
      000B72 0B 77                 2216         .word      EXE1
      000B74 CD 04 0E         [ 4] 2217         CALL     EXECU   ;execute if non-zero
      000B77 81               [ 4] 2218 EXE1:   RET     ;do nothing if zero
                                   2219 
                                   2220 ;       CMOVE   ( b1 b2 u -- )
                                   2221 ;       Copy u bytes from b1 to b2.
      000B78 0B 60                 2222         .word      LINK
                           000B7A  2223 LINK = . 
      000B7A 05                    2224         .byte      5
      000B7B 43 4D 4F 56 45        2225         .ascii     "CMOVE"
      000B80                       2226 CMOVE:
      000B80 CD 04 AC         [ 4] 2227         CALL	TOR
      000B83 CD 03 FE         [ 4] 2228         CALL	BRAN
      000B86 0B A0                 2229         .word	CMOV2
      000B88 CD 04 AC         [ 4] 2230 CMOV1:	CALL	TOR
      000B8B CD 04 E3         [ 4] 2231         CALL	DUPP
      000B8E CD 04 5A         [ 4] 2232         CALL	CAT
      000B91 CD 04 A0         [ 4] 2233         CALL	RAT
      000B94 CD 04 49         [ 4] 2234         CALL	CSTOR
      000B97 CD 09 D8         [ 4] 2235         CALL	ONEP
      000B9A CD 04 8D         [ 4] 2236         CALL	RFROM
      000B9D CD 09 D8         [ 4] 2237         CALL	ONEP
      000BA0 CD 03 C8         [ 4] 2238 CMOV2:	CALL	DONXT
      000BA3 0B 88                 2239         .word	CMOV1
      000BA5 CC 06 BE         [ 2] 2240         JP	DDROP
                                   2241 
                                   2242 ;       FILL    ( b u c -- )
                                   2243 ;       Fill u bytes of character c
                                   2244 ;       to area beginning at b.
      000BA8 0B 7A                 2245         .word       LINK
                           000BAA  2246 LINK = . 
      000BAA 04                    2247         .byte       4
      000BAB 46 49 4C 4C           2248         .ascii     "FILL"
      000BAF                       2249 FILL:
      000BAF 90 93            [ 1] 2250         ldw y,x 
      000BB1 90 E6 01         [ 1] 2251         ld a,(1,y) ; c 
      000BB4 1C 00 02         [ 2] 2252         addw x,#CELLL ; drop c 
      000BB7 90 93            [ 1] 2253         ldw y,x 
      000BB9 90 FE            [ 2] 2254         ldw y,(y) ; count
      000BBB 90 89            [ 2] 2255         pushw y 
      000BBD 1C 00 02         [ 2] 2256         addw x,#CELLL ; drop u 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 43.
Hexadecimal [24-Bits]



      000BC0 90 93            [ 1] 2257         ldw y,x 
      000BC2 1C 00 02         [ 2] 2258         addw x,#CELLL ; drop b 
      000BC5 90 FE            [ 2] 2259         ldw y,(y) ; address
      000BC7 90 BF 24         [ 2] 2260         ldw YTEMP,y
      000BCA 90 85            [ 2] 2261         popw y ; count 
      000BCC                       2262 FILL1:  
      000BCC 92 C7 24         [ 4] 2263         ld [YTEMP],a 
      000BCF 3C 25            [ 1] 2264         inc YTEMP+1
      000BD1 24 02            [ 1] 2265         jrnc FILL2 
      000BD3 3C 24            [ 1] 2266         inc YTEMP
      000BD5                       2267 FILL2: 
      000BD5 90 5A            [ 2] 2268         decw y ; count 
      000BD7 26 F3            [ 1] 2269         jrne FILL1  
      000BD9 81               [ 4] 2270         ret 
                                   2271 
                                   2272 ;       ERASE   ( b u -- )
                                   2273 ;       Erase u bytes beginning at b.
      000BDA 0B AA                 2274         .word      LINK
                           000BDC  2275 LINK = . 
      000BDC 05                    2276         .byte      5
      000BDD 45 52 41 53 45        2277         .ascii     "ERASE"
      000BE2                       2278 ERASE:
      000BE2 90 5F            [ 1] 2279         clrw y 
      000BE4 1D 00 02         [ 2] 2280         subw x,#CELLL 
      000BE7 FF               [ 2] 2281         ldw (x),y 
      000BE8 CC 0B AF         [ 2] 2282         jp FILL 
                                   2283 
                                   2284 
                                   2285 ;       PACK0x   ( b u a -- a )
                                   2286 ;       Build a counted string with
                                   2287 ;       u characters from b. Null fill.
      000BEB 0B DC                 2288         .word      LINK
                           000BED  2289 LINK = . 
      000BED 05                    2290         .byte      5
      000BEE 50 41 43 4B 30 58     2291         .ascii     "PACK0X"
      000BF4                       2292 PACKS:
      000BF4 CD 04 E3         [ 4] 2293         CALL     DUPP
      000BF7 CD 04 AC         [ 4] 2294         CALL     TOR     ;strings only on cell boundary
      000BFA CD 06 C9         [ 4] 2295         CALL     DDUP
      000BFD CD 04 49         [ 4] 2296         CALL     CSTOR
      000C00 CD 09 D8         [ 4] 2297         CALL     ONEP ;save count
      000C03 CD 04 F3         [ 4] 2298         CALL     SWAPP
      000C06 CD 0B 80         [ 4] 2299         CALL     CMOVE
      000C09 CD 04 8D         [ 4] 2300         CALL     RFROM
      000C0C 81               [ 4] 2301         RET
                                   2302 
                                   2303 ;; Numeric output, single precision
                                   2304 
                                   2305 ;       DIGIT   ( u -- c )
                                   2306 ;       Convert digit u to a character.
      000C0D 0B ED                 2307         .word      LINK
                           000C0F  2308 LINK = . 
      000C0F 05                    2309         .byte      5
      000C10 44 49 47 49 54        2310         .ascii     "DIGIT"
      000C15                       2311 DIGIT:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 44.
Hexadecimal [24-Bits]



      000C15 CD 03 B4         [ 4] 2312         CALL	DOLIT
      000C18 00 09                 2313         .word	9
      000C1A CD 05 0D         [ 4] 2314         CALL	OVER
      000C1D CD 07 BC         [ 4] 2315         CALL	LESS
      000C20 CD 03 B4         [ 4] 2316         CALL	DOLIT
      000C23 00 07                 2317         .word	7
      000C25 CD 05 2F         [ 4] 2318         CALL	ANDD
      000C28 CD 06 DE         [ 4] 2319         CALL	PLUS
      000C2B CD 03 B4         [ 4] 2320         CALL	DOLIT
      000C2E 00 30                 2321         .word	48	;'0'
      000C30 CC 06 DE         [ 2] 2322         JP	PLUS
                                   2323 
                                   2324 ;       EXTRACT ( n base -- n c )
                                   2325 ;       Extract least significant digit from n.
      000C33 0C 0F                 2326         .word      LINK
                           000C35  2327 LINK = . 
      000C35 07                    2328         .byte      7
      000C36 45 58 54 52 41 43 54  2329         .ascii     "EXTRACT"
      000C3D                       2330 EXTRC:
      000C3D CD 0A 44         [ 4] 2331         CALL     ZERO
      000C40 CD 04 F3         [ 4] 2332         CALL     SWAPP
      000C43 CD 08 34         [ 4] 2333         CALL     UMMOD
      000C46 CD 04 F3         [ 4] 2334         CALL     SWAPP
      000C49 CC 0C 15         [ 2] 2335         JP     DIGIT
                                   2336 
                                   2337 ;       <#      ( -- )
                                   2338 ;       Initiate  numeric output process.
      000C4C 0C 35                 2339         .word      LINK
                           000C4E  2340 LINK = . 
      000C4E 02                    2341         .byte      2
      000C4F 3C 23                 2342         .ascii     "<#"
      000C51                       2343 BDIGS:
      000C51 CD 0B 44         [ 4] 2344         CALL     PAD
      000C54 CD 06 10         [ 4] 2345         CALL     HLD
      000C57 CC 04 25         [ 2] 2346         JP     STORE
                                   2347 
                                   2348 ;       HOLD    ( c -- )
                                   2349 ;       Insert a character into output string.
      000C5A 0C 4E                 2350         .word      LINK
                           000C5C  2351 LINK = . 
      000C5C 04                    2352         .byte      4
      000C5D 48 4F 4C 44           2353         .ascii     "HOLD"
      000C61                       2354 HOLD:
      000C61 CD 06 10         [ 4] 2355         CALL     HLD
      000C64 CD 04 3C         [ 4] 2356         CALL     AT
      000C67 CD 09 E5         [ 4] 2357         CALL     ONEM
      000C6A CD 04 E3         [ 4] 2358         CALL     DUPP
      000C6D CD 06 10         [ 4] 2359         CALL     HLD
      000C70 CD 04 25         [ 4] 2360         CALL     STORE
      000C73 CC 04 49         [ 2] 2361         JP     CSTOR
                                   2362 
                                   2363 ;       #       ( u -- u )
                                   2364 ;       Extract one digit from u and
                                   2365 ;       append digit to output string.
      000C76 0C 5C                 2366         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 45.
Hexadecimal [24-Bits]



                           000C78  2367 LINK = . 
      000C78 01                    2368         .byte      1
      000C79 23                    2369         .ascii     "#"
      000C7A                       2370 DIG:
      000C7A CD 05 A0         [ 4] 2371         CALL     BASE
      000C7D CD 04 3C         [ 4] 2372         CALL     AT
      000C80 CD 0C 3D         [ 4] 2373         CALL     EXTRC
      000C83 CC 0C 61         [ 2] 2374         JP     HOLD
                                   2375 
                                   2376 ;       #S      ( u -- 0 )
                                   2377 ;       Convert u until all digits
                                   2378 ;       are added to output string.
      000C86 0C 78                 2379         .word      LINK
                           000C88  2380 LINK = . 
      000C88 02                    2381         .byte      2
      000C89 23 53                 2382         .ascii     "#S"
      000C8B                       2383 DIGS:
      000C8B CD 0C 7A         [ 4] 2384 DIGS1:  CALL     DIG
      000C8E CD 04 E3         [ 4] 2385         CALL     DUPP
      000C91 CD 03 E7         [ 4] 2386         CALL     QBRAN
      000C94 0C 98                 2387         .word      DIGS2
      000C96 20 F3            [ 2] 2388         JRA     DIGS1
      000C98 81               [ 4] 2389 DIGS2:  RET
                                   2390 
                                   2391 ;       SIGN    ( n -- )
                                   2392 ;       Add a minus sign to
                                   2393 ;       numeric output string.
      000C99 0C 88                 2394         .word      LINK
                           000C9B  2395 LINK = . 
      000C9B 04                    2396         .byte      4
      000C9C 53 49 47 4E           2397         .ascii     "SIGN"
      000CA0                       2398 SIGN:
      000CA0 CD 05 1C         [ 4] 2399         CALL     ZLESS
      000CA3 CD 03 E7         [ 4] 2400         CALL     QBRAN
      000CA6 0C B0                 2401         .word      SIGN1
      000CA8 CD 03 B4         [ 4] 2402         CALL     DOLIT
      000CAB 00 2D                 2403         .word      45	;"-"
      000CAD CC 0C 61         [ 2] 2404         JP     HOLD
      000CB0 81               [ 4] 2405 SIGN1:  RET
                                   2406 
                                   2407 ;       #>      ( w -- b u )
                                   2408 ;       Prepare output string.
      000CB1 0C 9B                 2409         .word      LINK
                           000CB3  2410 LINK = . 
      000CB3 02                    2411         .byte      2
      000CB4 23 3E                 2412         .ascii     "#>"
      000CB6                       2413 EDIGS:
      000CB6 CD 04 D9         [ 4] 2414         CALL     DROP
      000CB9 CD 06 10         [ 4] 2415         CALL     HLD
      000CBC CD 04 3C         [ 4] 2416         CALL     AT
      000CBF CD 0B 44         [ 4] 2417         CALL     PAD
      000CC2 CD 05 0D         [ 4] 2418         CALL     OVER
      000CC5 CC 07 57         [ 2] 2419         JP     SUBB
                                   2420 
                                   2421 ;       str     ( w -- b u )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 46.
Hexadecimal [24-Bits]



                                   2422 ;       Convert a signed integer
                                   2423 ;       to a numeric string.
      000CC8 0C B3                 2424         .word      LINK
                           000CCA  2425 LINK = . 
      000CCA 03                    2426         .byte      3
      000CCB 53 54 52              2427         .ascii     "STR"
      000CCE                       2428 STR:
      000CCE CD 04 E3         [ 4] 2429         CALL     DUPP
      000CD1 CD 04 AC         [ 4] 2430         CALL     TOR
      000CD4 CD 07 71         [ 4] 2431         CALL     ABSS
      000CD7 CD 0C 51         [ 4] 2432         CALL     BDIGS
      000CDA CD 0C 8B         [ 4] 2433         CALL     DIGS
      000CDD CD 04 8D         [ 4] 2434         CALL     RFROM
      000CE0 CD 0C A0         [ 4] 2435         CALL     SIGN
      000CE3 CC 0C B6         [ 2] 2436         JP     EDIGS
                                   2437 
                                   2438 ;       HEX     ( -- )
                                   2439 ;       Use radix 16 as base for
                                   2440 ;       numeric conversions.
      000CE6 0C CA                 2441         .word      LINK
                           000CE8  2442 LINK = . 
      000CE8 03                    2443         .byte      3
      000CE9 48 45 58              2444         .ascii     "HEX"
      000CEC                       2445 HEX:
      000CEC CD 03 B4         [ 4] 2446         CALL     DOLIT
      000CEF 00 10                 2447         .word      16
      000CF1 CD 05 A0         [ 4] 2448         CALL     BASE
      000CF4 CC 04 25         [ 2] 2449         JP     STORE
                                   2450 
                                   2451 ;       DECIMAL ( -- )
                                   2452 ;       Use radix 10 as base
                                   2453 ;       for numeric conversions.
      000CF7 0C E8                 2454         .word      LINK
                           000CF9  2455 LINK = . 
      000CF9 07                    2456         .byte      7
      000CFA 44 45 43 49 4D 41 4C  2457         .ascii     "DECIMAL"
      000D01                       2458 DECIM:
      000D01 CD 03 B4         [ 4] 2459         CALL     DOLIT
      000D04 00 0A                 2460         .word      10
      000D06 CD 05 A0         [ 4] 2461         CALL     BASE
      000D09 CC 04 25         [ 2] 2462         JP     STORE
                                   2463 
                                   2464 ;; Numeric input, single precision
                                   2465 
                                   2466 ;       DIGIT?  ( c base -- u t )
                                   2467 ;       Convert a character to its numeric
                                   2468 ;       value. A flag indicates success.
      000D0C 0C F9                 2469         .word      LINK
                           000D0E  2470 LINK = . 
      000D0E 06                    2471         .byte       6
      000D0F 44 49 47 49 54 3F     2472         .ascii     "DIGIT?"
      000D15                       2473 DIGTQ:
      000D15 CD 04 AC         [ 4] 2474         CALL     TOR
      000D18 CD 03 B4         [ 4] 2475         CALL     DOLIT
      000D1B 00 30                 2476         .word     48	; "0"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 47.
Hexadecimal [24-Bits]



      000D1D CD 07 57         [ 4] 2477         CALL     SUBB
      000D20 CD 03 B4         [ 4] 2478         CALL     DOLIT
      000D23 00 09                 2479         .word      9
      000D25 CD 05 0D         [ 4] 2480         CALL     OVER
      000D28 CD 07 BC         [ 4] 2481         CALL     LESS
      000D2B CD 03 E7         [ 4] 2482         CALL     QBRAN
      000D2E 0D 46                 2483         .word      DGTQ1
      000D30 CD 03 B4         [ 4] 2484         CALL     DOLIT
      000D33 00 07                 2485         .word      7
      000D35 CD 07 57         [ 4] 2486         CALL     SUBB
      000D38 CD 04 E3         [ 4] 2487         CALL     DUPP
      000D3B CD 03 B4         [ 4] 2488         CALL     DOLIT
      000D3E 00 0A                 2489         .word      10
      000D40 CD 07 BC         [ 4] 2490         CALL     LESS
      000D43 CD 05 43         [ 4] 2491         CALL     ORR
      000D46 CD 04 E3         [ 4] 2492 DGTQ1:  CALL     DUPP
      000D49 CD 04 8D         [ 4] 2493         CALL     RFROM
      000D4C CC 07 9E         [ 2] 2494         JP     ULESS
                                   2495 
                                   2496 ;       NUMBER? ( a -- n T | a F )
                                   2497 ;       Convert a number string to
                                   2498 ;       integer. Push a flag on tos.
      000D4F 0D 0E                 2499         .word      LINK
                           000D51  2500 LINK = . 
      000D51 07                    2501         .byte      7
      000D52 4E 55 4D 42 45 52 3F  2502         .ascii     "NUMBER?"
      000D59                       2503 NUMBQ:
      000D59 CD 05 A0         [ 4] 2504         CALL     BASE
      000D5C CD 04 3C         [ 4] 2505         CALL     AT
      000D5F CD 04 AC         [ 4] 2506         CALL     TOR
      000D62 CD 0A 44         [ 4] 2507         CALL     ZERO
      000D65 CD 05 0D         [ 4] 2508         CALL     OVER
      000D68 CD 0B 1C         [ 4] 2509         CALL     COUNT
      000D6B CD 05 0D         [ 4] 2510         CALL     OVER
      000D6E CD 04 5A         [ 4] 2511         CALL     CAT
      000D71 CD 03 B4         [ 4] 2512         CALL     DOLIT
      000D74 00 24                 2513         .word     36	; "0x"
      000D76 CD 07 7F         [ 4] 2514         CALL     EQUAL
      000D79 CD 03 E7         [ 4] 2515         CALL     QBRAN
      000D7C 0D 8D                 2516         .word      NUMQ1
      000D7E CD 0C EC         [ 4] 2517         CALL     HEX
      000D81 CD 04 F3         [ 4] 2518         CALL     SWAPP
      000D84 CD 09 D8         [ 4] 2519         CALL     ONEP
      000D87 CD 04 F3         [ 4] 2520         CALL     SWAPP
      000D8A CD 09 E5         [ 4] 2521         CALL     ONEM
      000D8D CD 05 0D         [ 4] 2522 NUMQ1:  CALL     OVER
      000D90 CD 04 5A         [ 4] 2523         CALL     CAT
      000D93 CD 03 B4         [ 4] 2524         CALL     DOLIT
      000D96 00 2D                 2525         .word     45	; "-"
      000D98 CD 07 7F         [ 4] 2526         CALL     EQUAL
      000D9B CD 04 AC         [ 4] 2527         CALL     TOR
      000D9E CD 04 F3         [ 4] 2528         CALL     SWAPP
      000DA1 CD 04 A0         [ 4] 2529         CALL     RAT
      000DA4 CD 07 57         [ 4] 2530         CALL     SUBB
      000DA7 CD 04 F3         [ 4] 2531         CALL     SWAPP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 48.
Hexadecimal [24-Bits]



      000DAA CD 04 A0         [ 4] 2532         CALL     RAT
      000DAD CD 06 DE         [ 4] 2533         CALL     PLUS
      000DB0 CD 06 8D         [ 4] 2534         CALL     QDUP
      000DB3 CD 03 E7         [ 4] 2535         CALL     QBRAN
      000DB6 0E 17                 2536         .word      NUMQ6
      000DB8 CD 09 E5         [ 4] 2537         CALL     ONEM
      000DBB CD 04 AC         [ 4] 2538         CALL     TOR
      000DBE CD 04 E3         [ 4] 2539 NUMQ2:  CALL     DUPP
      000DC1 CD 04 AC         [ 4] 2540         CALL     TOR
      000DC4 CD 04 5A         [ 4] 2541         CALL     CAT
      000DC7 CD 05 A0         [ 4] 2542         CALL     BASE
      000DCA CD 04 3C         [ 4] 2543         CALL     AT
      000DCD CD 0D 15         [ 4] 2544         CALL     DIGTQ
      000DD0 CD 03 E7         [ 4] 2545         CALL     QBRAN
      000DD3 0E 05                 2546         .word      NUMQ4
      000DD5 CD 04 F3         [ 4] 2547         CALL     SWAPP
      000DD8 CD 05 A0         [ 4] 2548         CALL     BASE
      000DDB CD 04 3C         [ 4] 2549         CALL     AT
      000DDE CD 09 57         [ 4] 2550         CALL     STAR
      000DE1 CD 06 DE         [ 4] 2551         CALL     PLUS
      000DE4 CD 04 8D         [ 4] 2552         CALL     RFROM
      000DE7 CD 09 D8         [ 4] 2553         CALL     ONEP
      000DEA CD 03 C8         [ 4] 2554         CALL     DONXT
      000DED 0D BE                 2555         .word      NUMQ2
      000DEF CD 04 A0         [ 4] 2556         CALL     RAT
      000DF2 CD 04 F3         [ 4] 2557         CALL     SWAPP
      000DF5 CD 04 D9         [ 4] 2558         CALL     DROP
      000DF8 CD 03 E7         [ 4] 2559         CALL     QBRAN
      000DFB 0E 00                 2560         .word      NUMQ3
      000DFD CD 07 09         [ 4] 2561         CALL     NEGAT
      000E00 CD 04 F3         [ 4] 2562 NUMQ3:  CALL     SWAPP
      000E03 20 0F            [ 2] 2563         JRA     NUMQ5
      000E05 CD 04 8D         [ 4] 2564 NUMQ4:  CALL     RFROM
      000E08 CD 04 8D         [ 4] 2565         CALL     RFROM
      000E0B CD 06 BE         [ 4] 2566         CALL     DDROP
      000E0E CD 06 BE         [ 4] 2567         CALL     DDROP
      000E11 CD 0A 44         [ 4] 2568         CALL     ZERO
      000E14 CD 04 E3         [ 4] 2569 NUMQ5:  CALL     DUPP
      000E17 CD 04 8D         [ 4] 2570 NUMQ6:  CALL     RFROM
      000E1A CD 06 BE         [ 4] 2571         CALL     DDROP
      000E1D CD 04 8D         [ 4] 2572         CALL     RFROM
      000E20 CD 05 A0         [ 4] 2573         CALL     BASE
      000E23 CC 04 25         [ 2] 2574         JP     STORE
                                   2575 
                                   2576 ;; Basic I/O
                                   2577 
                                   2578 ;       KEY     ( -- c )
                                   2579 ;       Wait for and return an
                                   2580 ;       input character.
      000E26 0D 51                 2581         .word      LINK
                           000E28  2582 LINK = . 
      000E28 03                    2583         .byte      3
      000E29 4B 45 59              2584         .ascii     "KEY"
      000E2C                       2585 KEY:
      000E2C 72 0B 52 30 FB   [ 2] 2586         btjf UART1_SR,#UART_SR_RXNE,. 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 49.
Hexadecimal [24-Bits]



      000E31 C6 52 31         [ 1] 2587         ld a,UART1_DR 
      000E34 1D 00 02         [ 2] 2588         subw x,#CELLL 
      000E37 E7 01            [ 1] 2589         ld (1,x),a 
      000E39 7F               [ 1] 2590         clr (x)
      000E3A 81               [ 4] 2591         ret 
                                   2592 
                                   2593 ;       NUF?    ( -- t )
                                   2594 ;       Return false if no input,
                                   2595 ;       else pause and if CR return true.
      000E3B 0E 28                 2596         .word      LINK
                           000E3D  2597 LINK = . 
      000E3D 04                    2598         .byte      4
      000E3E 4E 55 46 3F           2599         .ascii     "NUF?"
      000E42                       2600 NUFQ:
      000E42 CD 03 80         [ 4] 2601         CALL     QKEY
      000E45 CD 04 E3         [ 4] 2602         CALL     DUPP
      000E48 CD 03 E7         [ 4] 2603         CALL     QBRAN
      000E4B 0E 5B                 2604         .word    NUFQ1
      000E4D CD 06 BE         [ 4] 2605         CALL     DDROP
      000E50 CD 0E 2C         [ 4] 2606         CALL     KEY
      000E53 CD 03 B4         [ 4] 2607         CALL     DOLIT
      000E56 00 0D                 2608         .word      CRR
      000E58 CC 07 7F         [ 2] 2609         JP     EQUAL
      000E5B 81               [ 4] 2610 NUFQ1:  RET
                                   2611 
                                   2612 ;       SPACE   ( -- )
                                   2613 ;       Send  blank character to
                                   2614 ;       output device.
      000E5C 0E 3D                 2615         .word      LINK
                           000E5E  2616 LINK = . 
      000E5E 05                    2617         .byte      5
      000E5F 53 50 41 43 45        2618         .ascii     "SPACE"
      000E64                       2619 SPACE:
      000E64 CD 0A 37         [ 4] 2620         CALL     BLANK
      000E67 CC 03 9E         [ 2] 2621         JP     EMIT
                                   2622 
                                   2623 ;       SPACES  ( +n -- )
                                   2624 ;       Send n spaces to output device.
      000E6A 0E 5E                 2625         .word      LINK
                           000E6C  2626 LINK = . 
      000E6C 06                    2627         .byte      6
      000E6D 53 50 41 43 45 53     2628         .ascii     "SPACES"
      000E73                       2629 SPACS:
      000E73 CD 0A 44         [ 4] 2630         CALL     ZERO
      000E76 CD 07 DC         [ 4] 2631         CALL     MAX
      000E79 CD 04 AC         [ 4] 2632         CALL     TOR
      000E7C 20 03            [ 2] 2633         JRA      CHAR2
      000E7E CD 0E 64         [ 4] 2634 CHAR1:  CALL     SPACE
      000E81 CD 03 C8         [ 4] 2635 CHAR2:  CALL     DONXT
      000E84 0E 7E                 2636         .word    CHAR1
      000E86 81               [ 4] 2637         RET
                                   2638 
                                   2639 ;       TYPE    ( b u -- )
                                   2640 ;       Output u characters from b.
      000E87 0E 6C                 2641         .word      LINK
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 50.
Hexadecimal [24-Bits]



                           000E89  2642 LINK = . 
      000E89 04                    2643         .byte      4
      000E8A 54 59 50 45           2644         .ascii     "TYPE"
      000E8E                       2645 TYPES:
      000E8E CD 04 AC         [ 4] 2646         CALL     TOR
      000E91 20 0C            [ 2] 2647         JRA     TYPE2
      000E93 CD 04 E3         [ 4] 2648 TYPE1:  CALL     DUPP
      000E96 CD 04 5A         [ 4] 2649         CALL     CAT
      000E99 CD 03 9E         [ 4] 2650         CALL     EMIT
      000E9C CD 09 D8         [ 4] 2651         CALL     ONEP
      000E9F CD 03 C8         [ 4] 2652 TYPE2:  CALL     DONXT
      000EA2 0E 93                 2653         .word      TYPE1
      000EA4 CC 04 D9         [ 2] 2654         JP     DROP
                                   2655 
                                   2656 ;       CR      ( -- )
                                   2657 ;       Output a carriage return
                                   2658 ;       and a line feed.
      000EA7 0E 89                 2659         .word      LINK
                           000EA9  2660 LINK = . 
      000EA9 02                    2661         .byte      2
      000EAA 43 52                 2662         .ascii     "CR"
      000EAC                       2663 CR:
      000EAC CD 03 B4         [ 4] 2664         CALL     DOLIT
      000EAF 00 0D                 2665         .word      CRR
      000EB1 CD 03 9E         [ 4] 2666         CALL     EMIT
      000EB4 CD 03 B4         [ 4] 2667         CALL     DOLIT
      000EB7 00 0A                 2668         .word      LF
      000EB9 CC 03 9E         [ 2] 2669         JP     EMIT
                                   2670 
                                   2671 ;       do$     ( -- a )
                                   2672 ;       Return  address of a compiled
                                   2673 ;       string.
      000EBC 0E A9                 2674         .word      LINK
                           000EBE  2675 LINK = . 
      000EBE 43                    2676 	.byte      COMPO+3
      000EBF 44 4F 24              2677         .ascii     "DO$"
      000EC2                       2678 DOSTR:
      000EC2 CD 04 8D         [ 4] 2679         CALL     RFROM
      000EC5 CD 04 A0         [ 4] 2680         CALL     RAT
      000EC8 CD 04 8D         [ 4] 2681         CALL     RFROM
      000ECB CD 0B 1C         [ 4] 2682         CALL     COUNT
      000ECE CD 06 DE         [ 4] 2683         CALL     PLUS
      000ED1 CD 04 AC         [ 4] 2684         CALL     TOR
      000ED4 CD 04 F3         [ 4] 2685         CALL     SWAPP
      000ED7 CD 04 AC         [ 4] 2686         CALL     TOR
      000EDA 81               [ 4] 2687         RET
                                   2688 
                                   2689 ;       $"|     ( -- a )
                                   2690 ;       Run time routine compiled by $".
                                   2691 ;       Return address of a compiled string.
      000EDB 0E BE                 2692         .word      LINK
                           000EDD  2693 LINK = . 
      000EDD 43                    2694 	.byte      COMPO+3
      000EDE 24 22 7C              2695         .byte     '$','"','|'
      000EE1                       2696 STRQP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 51.
Hexadecimal [24-Bits]



      000EE1 CD 0E C2         [ 4] 2697         CALL     DOSTR
      000EE4 81               [ 4] 2698         RET
                                   2699 
                                   2700 ;       ."|     ( -- )
                                   2701 ;       Run time routine of ." .
                                   2702 ;       Output a compiled string.
      000EE5 0E DD                 2703         .word      LINK
                           000EE7  2704 LINK = . 
      000EE7 43                    2705 	.byte      COMPO+3
      000EE8 2E 22 7C              2706         .byte     '.','"','|'
      000EEB                       2707 DOTQP:
      000EEB CD 0E C2         [ 4] 2708         CALL     DOSTR
      000EEE CD 0B 1C         [ 4] 2709         CALL     COUNT
      000EF1 CC 0E 8E         [ 2] 2710         JP     TYPES
                                   2711 
                                   2712 ;       .R      ( n +n -- )
                                   2713 ;       Display an integer in a field
                                   2714 ;       of n columns, right justified.
      000EF4 0E E7                 2715         .word      LINK
                           000EF6  2716 LINK = . 
      000EF6 02                    2717         .byte      2
      000EF7 2E 52                 2718         .ascii     ".R"
      000EF9                       2719 DOTR:
      000EF9 CD 04 AC         [ 4] 2720         CALL     TOR
      000EFC CD 0C CE         [ 4] 2721         CALL     STR
      000EFF CD 04 8D         [ 4] 2722         CALL     RFROM
      000F02 CD 05 0D         [ 4] 2723         CALL     OVER
      000F05 CD 07 57         [ 4] 2724         CALL     SUBB
      000F08 CD 0E 73         [ 4] 2725         CALL     SPACS
      000F0B CC 0E 8E         [ 2] 2726         JP     TYPES
                                   2727 
                                   2728 ;       U.R     ( u +n -- )
                                   2729 ;       Display an unsigned integer
                                   2730 ;       in n column, right justified.
      000F0E 0E F6                 2731         .word      LINK
                           000F10  2732 LINK = . 
      000F10 03                    2733         .byte      3
      000F11 55 2E 52              2734         .ascii     "U.R"
      000F14                       2735 UDOTR:
      000F14 CD 04 AC         [ 4] 2736         CALL     TOR
      000F17 CD 0C 51         [ 4] 2737         CALL     BDIGS
      000F1A CD 0C 8B         [ 4] 2738         CALL     DIGS
      000F1D CD 0C B6         [ 4] 2739         CALL     EDIGS
      000F20 CD 04 8D         [ 4] 2740         CALL     RFROM
      000F23 CD 05 0D         [ 4] 2741         CALL     OVER
      000F26 CD 07 57         [ 4] 2742         CALL     SUBB
      000F29 CD 0E 73         [ 4] 2743         CALL     SPACS
      000F2C CC 0E 8E         [ 2] 2744         JP     TYPES
                                   2745 
                                   2746 ;       U.      ( u -- )
                                   2747 ;       Display an unsigned integer
                                   2748 ;       in free format.
      000F2F 0F 10                 2749         .word      LINK
                           000F31  2750 LINK = . 
      000F31 02                    2751         .byte      2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 52.
Hexadecimal [24-Bits]



      000F32 55 2E                 2752         .ascii     "U."
      000F34                       2753 UDOT:
      000F34 CD 0C 51         [ 4] 2754         CALL     BDIGS
      000F37 CD 0C 8B         [ 4] 2755         CALL     DIGS
      000F3A CD 0C B6         [ 4] 2756         CALL     EDIGS
      000F3D CD 0E 64         [ 4] 2757         CALL     SPACE
      000F40 CC 0E 8E         [ 2] 2758         JP     TYPES
                                   2759 
                                   2760 ;       .       ( w -- )
                                   2761 ;       Display an integer in free
                                   2762 ;       format, preceeded by a space.
      000F43 0F 31                 2763         .word      LINK
                           000F45  2764 LINK = . 
      000F45 01                    2765         .byte      1
      000F46 2E                    2766         .ascii     "."
      000F47                       2767 DOT:
      000F47 CD 05 A0         [ 4] 2768         CALL     BASE
      000F4A CD 04 3C         [ 4] 2769         CALL     AT
      000F4D CD 03 B4         [ 4] 2770         CALL     DOLIT
      000F50 00 0A                 2771         .word      10
      000F52 CD 05 58         [ 4] 2772         CALL     XORR    ;?decimal
      000F55 CD 03 E7         [ 4] 2773         CALL     QBRAN
      000F58 0F 5D                 2774         .word      DOT1
      000F5A CC 0F 34         [ 2] 2775         JP     UDOT
      000F5D CD 0C CE         [ 4] 2776 DOT1:   CALL     STR
      000F60 CD 0E 64         [ 4] 2777         CALL     SPACE
      000F63 CC 0E 8E         [ 2] 2778         JP     TYPES
                                   2779 
                                   2780 ;       ?       ( a -- )
                                   2781 ;       Display contents in memory cell.
      000F66 0F 45                 2782         .word      LINK
                                   2783         
                           000F68  2784 LINK = . 
      000F68 01                    2785         .byte      1
      000F69 3F                    2786         .ascii     "?"
      000F6A                       2787 QUEST:
      000F6A CD 04 3C         [ 4] 2788         CALL     AT
      000F6D CC 0F 47         [ 2] 2789         JP     DOT
                                   2790 
                                   2791 ;; Parsing
                                   2792 
                                   2793 ;       parse   ( b u c -- b u delta ; <string> )
                                   2794 ;       Scan string delimited by c.
                                   2795 ;       Return found string and its offset.
      000F70 0F 68                 2796         .word      LINK
                           000F72  2797 LINK = . 
      000F72 05                    2798         .byte      5
      000F73 70 61 72 73 65        2799         .ascii     "parse"
      000F78                       2800 PARS:
      000F78 CD 05 AF         [ 4] 2801         CALL     TEMP
      000F7B CD 04 25         [ 4] 2802         CALL     STORE
      000F7E CD 05 0D         [ 4] 2803         CALL     OVER
      000F81 CD 04 AC         [ 4] 2804         CALL     TOR
      000F84 CD 04 E3         [ 4] 2805         CALL     DUPP
      000F87 CD 03 E7         [ 4] 2806         CALL     QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 53.
Hexadecimal [24-Bits]



      000F8A 10 30                 2807         .word    PARS8
      000F8C CD 09 E5         [ 4] 2808         CALL     ONEM
      000F8F CD 05 AF         [ 4] 2809         CALL     TEMP
      000F92 CD 04 3C         [ 4] 2810         CALL     AT
      000F95 CD 0A 37         [ 4] 2811         CALL     BLANK
      000F98 CD 07 7F         [ 4] 2812         CALL     EQUAL
      000F9B CD 03 E7         [ 4] 2813         CALL     QBRAN
      000F9E 0F D1                 2814         .word      PARS3
      000FA0 CD 04 AC         [ 4] 2815         CALL     TOR
      000FA3 CD 0A 37         [ 4] 2816 PARS1:  CALL     BLANK
      000FA6 CD 05 0D         [ 4] 2817         CALL     OVER
      000FA9 CD 04 5A         [ 4] 2818         CALL     CAT     ;skip leading blanks ONLY
      000FAC CD 07 57         [ 4] 2819         CALL     SUBB
      000FAF CD 05 1C         [ 4] 2820         CALL     ZLESS
      000FB2 CD 06 F8         [ 4] 2821         CALL     INVER
      000FB5 CD 03 E7         [ 4] 2822         CALL     QBRAN
      000FB8 0F CE                 2823         .word      PARS2
      000FBA CD 09 D8         [ 4] 2824         CALL     ONEP
      000FBD CD 03 C8         [ 4] 2825         CALL     DONXT
      000FC0 0F A3                 2826         .word      PARS1
      000FC2 CD 04 8D         [ 4] 2827         CALL     RFROM
      000FC5 CD 04 D9         [ 4] 2828         CALL     DROP
      000FC8 CD 0A 44         [ 4] 2829         CALL     ZERO
      000FCB CC 04 E3         [ 2] 2830         JP     DUPP
      000FCE CD 04 8D         [ 4] 2831 PARS2:  CALL     RFROM
      000FD1 CD 05 0D         [ 4] 2832 PARS3:  CALL     OVER
      000FD4 CD 04 F3         [ 4] 2833         CALL     SWAPP
      000FD7 CD 04 AC         [ 4] 2834         CALL     TOR
      000FDA CD 05 AF         [ 4] 2835 PARS4:  CALL     TEMP
      000FDD CD 04 3C         [ 4] 2836         CALL     AT
      000FE0 CD 05 0D         [ 4] 2837         CALL     OVER
      000FE3 CD 04 5A         [ 4] 2838         CALL     CAT
      000FE6 CD 07 57         [ 4] 2839         CALL     SUBB    ;scan for delimiter
      000FE9 CD 05 AF         [ 4] 2840         CALL     TEMP
      000FEC CD 04 3C         [ 4] 2841         CALL     AT
      000FEF CD 0A 37         [ 4] 2842         CALL     BLANK
      000FF2 CD 07 7F         [ 4] 2843         CALL     EQUAL
      000FF5 CD 03 E7         [ 4] 2844         CALL     QBRAN
      000FF8 0F FD                 2845         .word      PARS5
      000FFA CD 05 1C         [ 4] 2846         CALL     ZLESS
      000FFD CD 03 E7         [ 4] 2847 PARS5:  CALL     QBRAN
      001000 10 12                 2848         .word      PARS6
      001002 CD 09 D8         [ 4] 2849         CALL     ONEP
      001005 CD 03 C8         [ 4] 2850         CALL     DONXT
      001008 0F DA                 2851         .word      PARS4
      00100A CD 04 E3         [ 4] 2852         CALL     DUPP
      00100D CD 04 AC         [ 4] 2853         CALL     TOR
      001010 20 0F            [ 2] 2854         JRA     PARS7
      001012 CD 04 8D         [ 4] 2855 PARS6:  CALL     RFROM
      001015 CD 04 D9         [ 4] 2856         CALL     DROP
      001018 CD 04 E3         [ 4] 2857         CALL     DUPP
      00101B CD 09 D8         [ 4] 2858         CALL     ONEP
      00101E CD 04 AC         [ 4] 2859         CALL     TOR
      001021 CD 05 0D         [ 4] 2860 PARS7:  CALL     OVER
      001024 CD 07 57         [ 4] 2861         CALL     SUBB
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 54.
Hexadecimal [24-Bits]



      001027 CD 04 8D         [ 4] 2862         CALL     RFROM
      00102A CD 04 8D         [ 4] 2863         CALL     RFROM
      00102D CC 07 57         [ 2] 2864         JP     SUBB
      001030 CD 05 0D         [ 4] 2865 PARS8:  CALL     OVER
      001033 CD 04 8D         [ 4] 2866         CALL     RFROM
      001036 CC 07 57         [ 2] 2867         JP     SUBB
                                   2868 
                                   2869 ;       PARSE   ( c -- b u ; <string> )
                                   2870 ;       Scan input stream and return
                                   2871 ;       counted string delimited by c.
      001039 0F 72                 2872         .word      LINK
                           00103B  2873 LINK = . 
      00103B 05                    2874         .byte      5
      00103C 50 41 52 53 45        2875         .ascii     "PARSE"
      001041                       2876 PARSE:
      001041 CD 04 AC         [ 4] 2877         CALL     TOR
      001044 CD 0B 55         [ 4] 2878         CALL     TIB
      001047 CD 05 BE         [ 4] 2879         CALL     INN
      00104A CD 04 3C         [ 4] 2880         CALL     AT
      00104D CD 06 DE         [ 4] 2881         CALL     PLUS    ;current input buffer pointer
      001050 CD 05 CE         [ 4] 2882         CALL     NTIB
      001053 CD 04 3C         [ 4] 2883         CALL     AT
      001056 CD 05 BE         [ 4] 2884         CALL     INN
      001059 CD 04 3C         [ 4] 2885         CALL     AT
      00105C CD 07 57         [ 4] 2886         CALL     SUBB    ;remaining count
      00105F CD 04 8D         [ 4] 2887         CALL     RFROM
      001062 CD 0F 78         [ 4] 2888         CALL     PARS
      001065 CD 05 BE         [ 4] 2889         CALL     INN
      001068 CC 0A B5         [ 2] 2890         JP     PSTOR
                                   2891 
                                   2892 ;       .(      ( -- )
                                   2893 ;       Output following string up to next ) .
      00106B 10 3B                 2894         .word      LINK
                           00106D  2895 LINK = . 
      00106D 82                    2896 	.byte      IMEDD+2
      00106E 2E 28                 2897         .ascii     ".("
      001070                       2898 DOTPR:
      001070 CD 03 B4         [ 4] 2899         CALL     DOLIT
      001073 00 29                 2900         .word     41	; ")"
      001075 CD 10 41         [ 4] 2901         CALL     PARSE
      001078 CC 0E 8E         [ 2] 2902         JP     TYPES
                                   2903 
                                   2904 ;       (       ( -- )
                                   2905 ;       Ignore following string up to next ).
                                   2906 ;       A comment.
      00107B 10 6D                 2907         .word      LINK
                           00107D  2908 LINK = . 
      00107D 81                    2909 	.byte      IMEDD+1
      00107E 28                    2910         .ascii     "("
      00107F                       2911 PAREN:
      00107F CD 03 B4         [ 4] 2912         CALL     DOLIT
      001082 00 29                 2913         .word     41	; ")"
      001084 CD 10 41         [ 4] 2914         CALL     PARSE
      001087 CC 06 BE         [ 2] 2915         JP     DDROP
                                   2916 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 55.
Hexadecimal [24-Bits]



                                   2917 ;       \       ( -- )
                                   2918 ;       Ignore following text till
                                   2919 ;       end of line.
      00108A 10 7D                 2920         .word      LINK
                           00108C  2921 LINK = . 
      00108C 81                    2922 	.byte      IMEDD+1
      00108D 5C                    2923         .ascii     "\"
      00108E                       2924 BKSLA:
      00108E 90 AE 00 0C      [ 2] 2925         ldw y,#UCTIB ; #TIB  
      001092 90 FE            [ 2] 2926         ldw y,(y)
      001094 90 89            [ 2] 2927         pushw y ; count in TIB 
      001096 90 AE 00 0A      [ 2] 2928         ldw y,#UINN ; >IN 
      00109A 90 BF 24         [ 2] 2929         ldw YTEMP,y
      00109D 90 85            [ 2] 2930         popw y 
      00109F 91 CF 24         [ 5] 2931         ldw [YTEMP],y
      0010A2 81               [ 4] 2932         ret 
                                   2933 
                                   2934 ;       WORD    ( c -- a ; <string> )
                                   2935 ;       Parse a word from input stream
                                   2936 ;       and copy it to code dictionary.
      0010A3 10 8C                 2937         .word      LINK
                           0010A5  2938 LINK = . 
      0010A5 04                    2939         .byte      4
      0010A6 57 4F 52 44           2940         .ascii     "WORD"
      0010AA                       2941 WORDD:
      0010AA CD 10 41         [ 4] 2942         CALL     PARSE
      0010AD CD 0B 33         [ 4] 2943         CALL     HERE
      0010B0 CD 09 AD         [ 4] 2944         CALL     CELLP
      0010B3 CC 0B F4         [ 2] 2945         JP     PACKS
                                   2946 
                                   2947 ;       TOKEN   ( -- a ; <string> )
                                   2948 ;       Parse a word from input stream
                                   2949 ;       and copy it to name dictionary.
      0010B6 10 A5                 2950         .word      LINK
                           0010B8  2951 LINK = . 
      0010B8 05                    2952         .byte      5
      0010B9 54 4F 4B 45 4E        2953         .ascii     "TOKEN"
      0010BE                       2954 TOKEN:
      0010BE CD 0A 37         [ 4] 2955         CALL     BLANK
      0010C1 CC 10 AA         [ 2] 2956         JP     WORDD
                                   2957 
                                   2958 ;; Dictionary search
                                   2959 
                                   2960 ;       NAME>   ( na -- ca )
                                   2961 ;       Return a code address given
                                   2962 ;       a name address.
      0010C4 10 B8                 2963         .word      LINK
                           0010C6  2964 LINK = . 
      0010C6 05                    2965         .byte      5
      0010C7 4E 41 4D 45 3E        2966         .ascii     "NAME>"
      0010CC                       2967 NAMET:
      0010CC CD 0B 1C         [ 4] 2968         CALL     COUNT
      0010CF CD 03 B4         [ 4] 2969         CALL     DOLIT
      0010D2 00 1F                 2970         .word      31
      0010D4 CD 05 2F         [ 4] 2971         CALL     ANDD
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 56.
Hexadecimal [24-Bits]



      0010D7 CC 06 DE         [ 2] 2972         JP     PLUS
                                   2973 
                                   2974 ;       SAME?   ( a a u -- a a f \ -0+ )
                                   2975 ;       Compare u cells in two
                                   2976 ;       strings. Return 0 if identical.
      0010DA 10 C6                 2977         .word      LINK
                           0010DC  2978 LINK = . 
      0010DC 05                    2979         .byte       5
      0010DD 53 41 4D 45 3F        2980         .ascii     "SAME?"
      0010E2                       2981 SAMEQ:
      0010E2 CD 09 E5         [ 4] 2982         CALL     ONEM
      0010E5 CD 04 AC         [ 4] 2983         CALL     TOR
      0010E8 20 29            [ 2] 2984         JRA     SAME2
      0010EA CD 05 0D         [ 4] 2985 SAME1:  CALL     OVER
      0010ED CD 04 A0         [ 4] 2986         CALL     RAT
      0010F0 CD 06 DE         [ 4] 2987         CALL     PLUS
      0010F3 CD 04 5A         [ 4] 2988         CALL     CAT
      0010F6 CD 05 0D         [ 4] 2989         CALL     OVER
      0010F9 CD 04 A0         [ 4] 2990         CALL     RAT
      0010FC CD 06 DE         [ 4] 2991         CALL     PLUS
      0010FF CD 04 5A         [ 4] 2992         CALL     CAT
      001102 CD 07 57         [ 4] 2993         CALL     SUBB
      001105 CD 06 8D         [ 4] 2994         CALL     QDUP
      001108 CD 03 E7         [ 4] 2995         CALL     QBRAN
      00110B 11 13                 2996         .word      SAME2
      00110D CD 04 8D         [ 4] 2997         CALL     RFROM
      001110 CC 04 D9         [ 2] 2998         JP     DROP
      001113 CD 03 C8         [ 4] 2999 SAME2:  CALL     DONXT
      001116 10 EA                 3000         .word      SAME1
      001118 CC 0A 44         [ 2] 3001         JP     ZERO
                                   3002 
                                   3003 ;       find    ( a va -- ca na | a F )
                                   3004 ;       Search vocabulary for string.
                                   3005 ;       Return ca and na if succeeded.
      00111B 10 DC                 3006         .word      LINK
                           00111D  3007 LINK = . 
      00111D 04                    3008         .byte      4
      00111E 46 49 4E 44           3009         .ascii     "FIND"
      001122                       3010 FIND:
      001122 CD 04 F3         [ 4] 3011         CALL     SWAPP
      001125 CD 04 E3         [ 4] 3012         CALL     DUPP
      001128 CD 04 5A         [ 4] 3013         CALL     CAT
      00112B CD 05 AF         [ 4] 3014         CALL     TEMP
      00112E CD 04 25         [ 4] 3015         CALL     STORE
      001131 CD 04 E3         [ 4] 3016         CALL     DUPP
      001134 CD 04 3C         [ 4] 3017         CALL     AT
      001137 CD 04 AC         [ 4] 3018         CALL     TOR
      00113A CD 09 AD         [ 4] 3019         CALL     CELLP
      00113D CD 04 F3         [ 4] 3020         CALL     SWAPP
      001140 CD 04 3C         [ 4] 3021 FIND1:  CALL     AT
      001143 CD 04 E3         [ 4] 3022         CALL     DUPP
      001146 CD 03 E7         [ 4] 3023         CALL     QBRAN
      001149 11 7F                 3024         .word      FIND6
      00114B CD 04 E3         [ 4] 3025         CALL     DUPP
      00114E CD 04 3C         [ 4] 3026         CALL     AT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 57.
Hexadecimal [24-Bits]



      001151 CD 03 B4         [ 4] 3027         CALL     DOLIT
      001154 1F 7F                 3028         .word      MASKK
      001156 CD 05 2F         [ 4] 3029         CALL     ANDD
      001159 CD 04 A0         [ 4] 3030         CALL     RAT
      00115C CD 05 58         [ 4] 3031         CALL     XORR
      00115F CD 03 E7         [ 4] 3032         CALL     QBRAN
      001162 11 6E                 3033         .word      FIND2
      001164 CD 09 AD         [ 4] 3034         CALL     CELLP
      001167 CD 03 B4         [ 4] 3035         CALL     DOLIT
      00116A FF FF                 3036         .word     0xFFFF
      00116C 20 0C            [ 2] 3037         JRA     FIND3
      00116E CD 09 AD         [ 4] 3038 FIND2:  CALL     CELLP
      001171 CD 05 AF         [ 4] 3039         CALL     TEMP
      001174 CD 04 3C         [ 4] 3040         CALL     AT
      001177 CD 10 E2         [ 4] 3041         CALL     SAMEQ
      00117A CD 03 FE         [ 4] 3042 FIND3:  CALL     BRAN
      00117D 11 8E                 3043         .word      FIND4
      00117F CD 04 8D         [ 4] 3044 FIND6:  CALL     RFROM
      001182 CD 04 D9         [ 4] 3045         CALL     DROP
      001185 CD 04 F3         [ 4] 3046         CALL     SWAPP
      001188 CD 09 BC         [ 4] 3047         CALL     CELLM
      00118B CC 04 F3         [ 2] 3048         JP     SWAPP
      00118E CD 03 E7         [ 4] 3049 FIND4:  CALL     QBRAN
      001191 11 9B                 3050         .word      FIND5
      001193 CD 09 BC         [ 4] 3051         CALL     CELLM
      001196 CD 09 BC         [ 4] 3052         CALL     CELLM
      001199 20 A5            [ 2] 3053         JRA     FIND1
      00119B CD 04 8D         [ 4] 3054 FIND5:  CALL     RFROM
      00119E CD 04 D9         [ 4] 3055         CALL     DROP
      0011A1 CD 04 F3         [ 4] 3056         CALL     SWAPP
      0011A4 CD 04 D9         [ 4] 3057         CALL     DROP
      0011A7 CD 09 BC         [ 4] 3058         CALL     CELLM
      0011AA CD 04 E3         [ 4] 3059         CALL     DUPP
      0011AD CD 10 CC         [ 4] 3060         CALL     NAMET
      0011B0 CC 04 F3         [ 2] 3061         JP     SWAPP
                                   3062 
                                   3063 ;       NAME?   ( a -- ca na | a F )
                                   3064 ;       Search vocabularies for a string.
      0011B3 11 1D                 3065         .word      LINK
                           0011B5  3066 LINK = . 
      0011B5 05                    3067         .byte      5
      0011B6 4E 41 4D 45 3F        3068         .ascii     "NAME?"
      0011BB                       3069 NAMEQ:
      0011BB CD 06 23         [ 4] 3070         CALL   CNTXT
      0011BE CC 11 22         [ 2] 3071         JP     FIND
                                   3072 
                                   3073 ;; Terminal response
                                   3074 
                                   3075 ;       ^H      ( bot eot cur -- bot eot cur )
                                   3076 ;       Backup cursor by one character.
      0011C1 11 B5                 3077         .word      LINK
                           0011C3  3078 LINK = . 
      0011C3 02                    3079         .byte      2
      0011C4 5E 48                 3080         .ascii     "^H"
      0011C6                       3081 BKSP:
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 58.
Hexadecimal [24-Bits]



      0011C6 CD 04 AC         [ 4] 3082         CALL     TOR
      0011C9 CD 05 0D         [ 4] 3083         CALL     OVER
      0011CC CD 04 8D         [ 4] 3084         CALL     RFROM
      0011CF CD 04 F3         [ 4] 3085         CALL     SWAPP
      0011D2 CD 05 0D         [ 4] 3086         CALL     OVER
      0011D5 CD 05 58         [ 4] 3087         CALL     XORR
      0011D8 CD 03 E7         [ 4] 3088         CALL     QBRAN
      0011DB 11 F6                 3089         .word      BACK1
      0011DD CD 03 B4         [ 4] 3090         CALL     DOLIT
      0011E0 00 08                 3091         .word      BKSPP
      0011E2 CD 03 9E         [ 4] 3092         CALL     EMIT
      0011E5 CD 09 E5         [ 4] 3093         CALL     ONEM
      0011E8 CD 0A 37         [ 4] 3094         CALL     BLANK
      0011EB CD 03 9E         [ 4] 3095         CALL     EMIT
      0011EE CD 03 B4         [ 4] 3096         CALL     DOLIT
      0011F1 00 08                 3097         .word      BKSPP
      0011F3 CC 03 9E         [ 2] 3098         JP     EMIT
      0011F6 81               [ 4] 3099 BACK1:  RET
                                   3100 
                                   3101 ;       TAP    ( bot eot cur c -- bot eot cur )
                                   3102 ;       Accept and echo key stroke
                                   3103 ;       and bump cursor.
      0011F7 11 C3                 3104         .word      LINK
                           0011F9  3105 LINK = . 
      0011F9 03                    3106         .byte      3
      0011FA 54 41 50              3107         .ascii     "TAP"
      0011FD                       3108 TAP:
      0011FD CD 04 E3         [ 4] 3109         CALL     DUPP
      001200 CD 03 9E         [ 4] 3110         CALL     EMIT
      001203 CD 05 0D         [ 4] 3111         CALL     OVER
      001206 CD 04 49         [ 4] 3112         CALL     CSTOR
      001209 CC 09 D8         [ 2] 3113         JP     ONEP
                                   3114 
                                   3115 ;       kTAP    ( bot eot cur c -- bot eot cur )
                                   3116 ;       Process a key stroke,
                                   3117 ;       CR or backspace.
      00120C 11 F9                 3118         .word      LINK
                           00120E  3119 LINK = . 
      00120E 04                    3120         .byte      4
      00120F 4B 54 41 50           3121         .ascii     "KTAP"
      001213                       3122 KTAP:
      001213 CD 04 E3         [ 4] 3123         CALL     DUPP
      001216 CD 03 B4         [ 4] 3124         CALL     DOLIT
      001219 00 0D                 3125         .word      CRR
      00121B CD 05 58         [ 4] 3126         CALL     XORR
      00121E CD 03 E7         [ 4] 3127         CALL     QBRAN
      001221 12 39                 3128         .word      KTAP2
      001223 CD 03 B4         [ 4] 3129         CALL     DOLIT
      001226 00 08                 3130         .word      BKSPP
      001228 CD 05 58         [ 4] 3131         CALL     XORR
      00122B CD 03 E7         [ 4] 3132         CALL     QBRAN
      00122E 12 36                 3133         .word      KTAP1
      001230 CD 0A 37         [ 4] 3134         CALL     BLANK
      001233 CC 11 FD         [ 2] 3135         JP     TAP
      001236 CC 11 C6         [ 2] 3136 KTAP1:  JP     BKSP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 59.
Hexadecimal [24-Bits]



      001239 CD 04 D9         [ 4] 3137 KTAP2:  CALL     DROP
      00123C CD 04 F3         [ 4] 3138         CALL     SWAPP
      00123F CD 04 D9         [ 4] 3139         CALL     DROP
      001242 CC 04 E3         [ 2] 3140         JP     DUPP
                                   3141 
                                   3142 ;       accept  ( b u -- b u )
                                   3143 ;       Accept characters to input
                                   3144 ;       buffer. Return with actual count.
      001245 12 0E                 3145         .word      LINK
                           001247  3146 LINK = . 
      001247 06                    3147         .byte      6
      001248 41 43 43 45 50 54     3148         .ascii     "ACCEPT"
      00124E                       3149 ACCEP:
      00124E CD 05 0D         [ 4] 3150         CALL     OVER
      001251 CD 06 DE         [ 4] 3151         CALL     PLUS
      001254 CD 05 0D         [ 4] 3152         CALL     OVER
      001257 CD 06 C9         [ 4] 3153 ACCP1:  CALL     DDUP
      00125A CD 05 58         [ 4] 3154         CALL     XORR
      00125D CD 03 E7         [ 4] 3155         CALL     QBRAN
      001260 12 82                 3156         .word      ACCP4
      001262 CD 0E 2C         [ 4] 3157         CALL     KEY
      001265 CD 04 E3         [ 4] 3158         CALL     DUPP
      001268 CD 0A 37         [ 4] 3159         CALL     BLANK
      00126B CD 03 B4         [ 4] 3160         CALL     DOLIT
      00126E 00 7F                 3161         .word      127
      001270 CD 08 19         [ 4] 3162         CALL     WITHI
      001273 CD 03 E7         [ 4] 3163         CALL     QBRAN
      001276 12 7D                 3164         .word      ACCP2
      001278 CD 11 FD         [ 4] 3165         CALL     TAP
      00127B 20 03            [ 2] 3166         JRA     ACCP3
      00127D CD 12 13         [ 4] 3167 ACCP2:  CALL     KTAP
      001280 20 D5            [ 2] 3168 ACCP3:  JRA     ACCP1
      001282 CD 04 D9         [ 4] 3169 ACCP4:  CALL     DROP
      001285 CD 05 0D         [ 4] 3170         CALL     OVER
      001288 CC 07 57         [ 2] 3171         JP     SUBB
                                   3172 
                                   3173 ;       QUERY   ( -- )
                                   3174 ;       Accept input stream to
                                   3175 ;       terminal input buffer.
      00128B 12 47                 3176         .word      LINK
                                   3177         
                           00128D  3178 LINK = . 
      00128D 05                    3179         .byte      5
      00128E 51 55 45 52 59        3180         .ascii     "QUERY"
      001293                       3181 QUERY:
      001293 CD 0B 55         [ 4] 3182         CALL     TIB
      001296 CD 03 B4         [ 4] 3183         CALL     DOLIT
      001299 00 50                 3184         .word      80
      00129B CD 12 4E         [ 4] 3185         CALL     ACCEP
      00129E CD 05 CE         [ 4] 3186         CALL     NTIB
      0012A1 CD 04 25         [ 4] 3187         CALL     STORE
      0012A4 CD 04 D9         [ 4] 3188         CALL     DROP
      0012A7 CD 0A 44         [ 4] 3189         CALL     ZERO
      0012AA CD 05 BE         [ 4] 3190         CALL     INN
      0012AD CC 04 25         [ 2] 3191         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 60.
Hexadecimal [24-Bits]



                                   3192 
                                   3193 ;       ABORT   ( -- )
                                   3194 ;       Reset data stack and
                                   3195 ;       jump to QUIT.
      0012B0 12 8D                 3196         .word      LINK
                           0012B2  3197 LINK = . 
      0012B2 05                    3198         .byte      5
      0012B3 41 42 4F 52 54        3199         .ascii     "ABORT"
      0012B8                       3200 ABORT:
      0012B8 CD 13 AF         [ 4] 3201         CALL     PRESE
      0012BB CC 13 CC         [ 2] 3202         JP     QUIT
                                   3203 
                                   3204 ;       abort"  ( f -- )
                                   3205 ;       Run time routine of ABORT".
                                   3206 ;       Abort with a message.
      0012BE 12 B2                 3207         .word      LINK
                           0012C0  3208 LINK = . 
      0012C0 46                    3209 	.byte      COMPO+6
      0012C1 41 42 4F 52 54        3210         .ascii     "ABORT"
      0012C6 22                    3211         .byte      '"'
      0012C7                       3212 ABORQ:
      0012C7 CD 03 E7         [ 4] 3213         CALL     QBRAN
      0012CA 12 E6                 3214         .word      ABOR2   ;text flag
      0012CC CD 0E C2         [ 4] 3215         CALL     DOSTR
      0012CF CD 0E 64         [ 4] 3216 ABOR1:  CALL     SPACE
      0012D2 CD 0B 1C         [ 4] 3217         CALL     COUNT
      0012D5 CD 0E 8E         [ 4] 3218         CALL     TYPES
      0012D8 CD 03 B4         [ 4] 3219         CALL     DOLIT
      0012DB 00 3F                 3220         .word     63 ; "?"
      0012DD CD 03 9E         [ 4] 3221         CALL     EMIT
      0012E0 CD 0E AC         [ 4] 3222         CALL     CR
      0012E3 CC 12 B8         [ 2] 3223         JP     ABORT   ;pass error string
      0012E6 CD 0E C2         [ 4] 3224 ABOR2:  CALL     DOSTR
      0012E9 CC 04 D9         [ 2] 3225         JP     DROP
                                   3226 
                                   3227 ;; The text interpreter
                                   3228 
                                   3229 ;       $INTERPRET      ( a -- )
                                   3230 ;       Interpret a word. If failed,
                                   3231 ;       try to convert it to an integer.
      0012EC 12 C0                 3232         .word      LINK
                           0012EE  3233 LINK = . 
      0012EE 0A                    3234         .byte      10
      0012EF 24 49 4E 54 45 52 50  3235         .ascii     "$INTERPRET"
             52 45 54
      0012F9                       3236 INTER:
      0012F9 CD 11 BB         [ 4] 3237         CALL     NAMEQ
      0012FC CD 06 8D         [ 4] 3238         CALL     QDUP    ;?defined
      0012FF CD 03 E7         [ 4] 3239         CALL     QBRAN
      001302 13 23                 3240         .word      INTE1
      001304 CD 04 3C         [ 4] 3241         CALL     AT
      001307 CD 03 B4         [ 4] 3242         CALL     DOLIT
      00130A 40 00                 3243 	.word       0x4000	; COMPO*256
      00130C CD 05 2F         [ 4] 3244         CALL     ANDD    ;?compile only lexicon bits
      00130F CD 12 C7         [ 4] 3245         CALL     ABORQ
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 61.
Hexadecimal [24-Bits]



      001312 0D                    3246         .byte      13
      001313 20 63 6F 6D 70 69 6C  3247         .ascii     " compile only"
             65 20 6F 6E 6C 79
      001320 CC 04 0E         [ 2] 3248         JP     EXECU
      001323 CD 0D 59         [ 4] 3249 INTE1:  CALL     NUMBQ   ;convert a number
      001326 CD 03 E7         [ 4] 3250         CALL     QBRAN
      001329 12 CF                 3251         .word    ABOR1
      00132B 81               [ 4] 3252         RET
                                   3253 
                                   3254 ;       [       ( -- )
                                   3255 ;       Start  text interpreter.
      00132C 12 EE                 3256         .word      LINK
                           00132E  3257 LINK = . 
      00132E 81                    3258 	.byte      IMEDD+1
      00132F 5B                    3259         .ascii     "["
      001330                       3260 LBRAC:
      001330 CD 03 B4         [ 4] 3261         CALL   DOLIT
      001333 12 F9                 3262         .word  INTER
      001335 CD 06 01         [ 4] 3263         CALL   TEVAL
      001338 CC 04 25         [ 2] 3264         JP     STORE
                                   3265 
                                   3266 ;       .OK     ( -- )
                                   3267 ;       Display 'ok' while interpreting.
      00133B 13 2E                 3268         .word      LINK
                           00133D  3269 LINK = . 
      00133D 03                    3270         .byte      3
      00133E 2E 4F 4B              3271         .ascii     ".OK"
      001341                       3272 DOTOK:
      001341 CD 03 B4         [ 4] 3273         CALL     DOLIT
      001344 12 F9                 3274         .word      INTER
      001346 CD 06 01         [ 4] 3275         CALL     TEVAL
      001349 CD 04 3C         [ 4] 3276         CALL     AT
      00134C CD 07 7F         [ 4] 3277         CALL     EQUAL
      00134F CD 03 E7         [ 4] 3278         CALL     QBRAN
      001352 13 5B                 3279         .word      DOTO1
      001354 CD 0E EB         [ 4] 3280         CALL     DOTQP
      001357 03                    3281         .byte      3
      001358 20 6F 6B              3282         .ascii     " ok"
      00135B CC 0E AC         [ 2] 3283 DOTO1:  JP     CR
                                   3284 
                                   3285 ;       ?STACK  ( -- )
                                   3286 ;       Abort if stack underflows.
      00135E 13 3D                 3287         .word      LINK
                           001360  3288 LINK = . 
      001360 06                    3289         .byte      6
      001361 3F 53 54 41 43 4B     3290         .ascii     "?STACK"
      001367                       3291 QSTAC: 
      001367 CD 0A 87         [ 4] 3292         CALL     DEPTH
      00136A CD 05 1C         [ 4] 3293         CALL     ZLESS   ;check only for underflow
      00136D CD 12 C7         [ 4] 3294         CALL     ABORQ
      001370 0B                    3295         .byte      11
      001371 20 75 6E 64 65 72 66  3296         .ascii     " underflow "
             6C 6F 77 20
      00137C 81               [ 4] 3297         RET
                                   3298 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 62.
Hexadecimal [24-Bits]



                                   3299 ;       EVAL    ( -- )
                                   3300 ;       Interpret  input stream.
      00137D 13 60                 3301         .word      LINK
                           00137F  3302 LINK = . 
      00137F 04                    3303         .byte      4
      001380 45 56 41 4C           3304         .ascii     "EVAL"
      001384                       3305 EVAL:
      001384 CD 10 BE         [ 4] 3306 EVAL1:  CALL     TOKEN
      001387 CD 04 E3         [ 4] 3307         CALL     DUPP
      00138A CD 04 5A         [ 4] 3308         CALL     CAT     ;?input stream empty
      00138D CD 03 E7         [ 4] 3309         CALL     QBRAN
      001390 13 A0                 3310         .word    EVAL2
      001392 CD 06 01         [ 4] 3311         CALL     TEVAL
      001395 CD 0B 69         [ 4] 3312         CALL     ATEXE
      001398 CD 13 67         [ 4] 3313         CALL     QSTAC   ;evaluate input, check stack
      00139B CD 03 FE         [ 4] 3314         CALL     BRAN
      00139E 13 84                 3315         .word    EVAL1
      0013A0 CD 04 D9         [ 4] 3316 EVAL2:  CALL     DROP
      0013A3 CC 13 41         [ 2] 3317         JP       DOTOK
                                   3318 
                                   3319 ;       PRESET  ( -- )
                                   3320 ;       Reset data stack pointer and
                                   3321 ;       terminal input buffer.
      0013A6 13 7F                 3322         .word      LINK
                           0013A8  3323 LINK = . 
      0013A8 06                    3324         .byte      6
      0013A9 50 52 45 53 45 54     3325         .ascii     "PRESET"
      0013AF                       3326 PRESE:
      0013AF CD 03 B4         [ 4] 3327         CALL     DOLIT
      0013B2 16 80                 3328         .word      SPP
      0013B4 CD 04 D0         [ 4] 3329         CALL     SPSTO
      0013B7 CD 03 B4         [ 4] 3330         CALL     DOLIT
      0013BA 17 00                 3331         .word      TIBB
      0013BC CD 05 CE         [ 4] 3332         CALL     NTIB
      0013BF CD 09 AD         [ 4] 3333         CALL     CELLP
      0013C2 CC 04 25         [ 2] 3334         JP     STORE
                                   3335 
                                   3336 ;       QUIT    ( -- )
                                   3337 ;       Reset return stack pointer
                                   3338 ;       and start text interpreter.
      0013C5 13 A8                 3339         .word      LINK
                           0013C7  3340 LINK = . 
      0013C7 04                    3341         .byte      4
      0013C8 51 55 49 54           3342         .ascii     "QUIT"
      0013CC                       3343 QUIT:
      0013CC CD 03 B4         [ 4] 3344         CALL     DOLIT
      0013CF 17 FF                 3345         .word      RPP
      0013D1 CD 04 77         [ 4] 3346         CALL     RPSTO   ;reset return stack pointer
      0013D4 CD 13 30         [ 4] 3347 QUIT1:  CALL     LBRAC   ;start interpretation
      0013D7 CD 12 93         [ 4] 3348 QUIT2:  CALL     QUERY   ;get input
      0013DA CD 13 84         [ 4] 3349         CALL     EVAL
      0013DD 20 F8            [ 2] 3350         JRA     QUIT2   ;continue till error
                                   3351 
                                   3352 ;; The compiler
                                   3353 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 63.
Hexadecimal [24-Bits]



                                   3354 ;       '       ( -- ca )
                                   3355 ;       Search vocabularies for
                                   3356 ;       next word in input stream.
      0013DF 13 C7                 3357         .word      LINK
                           0013E1  3358 LINK = . 
      0013E1 01                    3359         .byte      1
      0013E2 27                    3360         .ascii     "'"
      0013E3                       3361 TICK:
      0013E3 CD 10 BE         [ 4] 3362         CALL     TOKEN
      0013E6 CD 11 BB         [ 4] 3363         CALL     NAMEQ   ;?defined
      0013E9 CD 03 E7         [ 4] 3364         CALL     QBRAN
      0013EC 12 CF                 3365         .word      ABOR1
      0013EE 81               [ 4] 3366         RET     ;yes, push code address
                                   3367 
                                   3368 ;       ALLOT   ( n -- )
                                   3369 ;       Allocate n bytes to RAM 
      0013EF 13 E1                 3370         .word      LINK
                           0013F1  3371         LINK = . 
      0013F1 05                    3372         .byte      5
      0013F2 41 4C 4C 4F 54        3373         .ascii     "ALLOT"
      0013F7                       3374 ALLOT:
      0013F7 CD 06 31         [ 4] 3375         CALL     VPP
                                   3376 ; must update APP_VP each time VP is modidied
      0013FA CD 0A B5         [ 4] 3377         call PSTOR 
      0013FD CC 1B 8C         [ 2] 3378         jp UPDATVP 
                                   3379 
                                   3380 ;       ,       ( w -- )
                                   3381 ;         Compile an integer into
                                   3382 ;         variable space.
      001400 13 F1                 3383         .word      LINK
                           001402  3384 LINK = . 
      001402 01                    3385         .byte      1
      001403 2C                    3386         .ascii     ","
      001404                       3387 COMMA:
      001404 CD 0B 33         [ 4] 3388         CALL     HERE
      001407 CD 04 E3         [ 4] 3389         CALL     DUPP
      00140A CD 09 AD         [ 4] 3390         CALL     CELLP   ;cell boundary
      00140D CD 06 31         [ 4] 3391         CALL     VPP
      001410 CD 04 25         [ 4] 3392         CALL     STORE
      001413 CC 04 25         [ 2] 3393         JP     STORE
                                   3394 
                                   3395 ;       C,      ( c -- )
                                   3396 ;       Compile a byte into
                                   3397 ;       variables space.
      001416 14 02                 3398        .word      LINK
                           001418  3399 LINK = . 
      001418 02                    3400         .byte      2
      001419 43 2C                 3401         .ascii     "C,"
      00141B                       3402 CCOMMA:
      00141B CD 0B 33         [ 4] 3403         CALL     HERE
      00141E CD 04 E3         [ 4] 3404         CALL     DUPP
      001421 CD 09 D8         [ 4] 3405         CALL     ONEP
      001424 CD 06 31         [ 4] 3406         CALL     VPP
      001427 CD 04 25         [ 4] 3407         CALL     STORE
      00142A CC 04 49         [ 2] 3408         JP     CSTOR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 64.
Hexadecimal [24-Bits]



                                   3409 
                                   3410 ;       [COMPILE]       ( -- ; <string> )
                                   3411 ;       Compile next immediate
                                   3412 ;       word into code dictionary.
      00142D 14 18                 3413         .word      LINK
                           00142F  3414 LINK = . 
      00142F 89                    3415 	.byte      IMEDD+9
      001430 5B 43 4F 4D 50 49 4C  3416         .ascii     "[COMPILE]"
             45 5D
      001439                       3417 BCOMP:
      001439 CD 13 E3         [ 4] 3418         CALL     TICK
      00143C CC 16 FC         [ 2] 3419         JP     JSRC
                                   3420 
                                   3421 ;       COMPILE ( -- )
                                   3422 ;       Compile next jsr in
                                   3423 ;       colon list to code dictionary.
      00143F 14 2F                 3424         .word      LINK
                           001441  3425 LINK = . 
      001441 47                    3426 	.byte      COMPO+7
      001442 43 4F 4D 50 49 4C 45  3427         .ascii     "COMPILE"
      001449                       3428 COMPI:
      001449 CD 04 8D         [ 4] 3429         CALL     RFROM
      00144C CD 04 E3         [ 4] 3430         CALL     DUPP
      00144F CD 04 3C         [ 4] 3431         CALL     AT
      001452 CD 16 FC         [ 4] 3432         CALL     JSRC    ;compile subroutine
      001455 CD 09 AD         [ 4] 3433         CALL     CELLP
      001458 90 93            [ 1] 3434         ldw y,x 
      00145A 90 FE            [ 2] 3435         ldw y,(y)
      00145C 1C 00 02         [ 2] 3436         addw x,#CELLL 
      00145F 90 FC            [ 2] 3437         jp (y)
                                   3438 
                                   3439 ;       LITERAL ( w -- )
                                   3440 ;       Compile tos to dictionary
                                   3441 ;       as an integer literal.
      001461 14 41                 3442         .word      LINK
                           001463  3443 LINK = . 
      001463 87                    3444 	.byte      IMEDD+7
      001464 4C 49 54 45 52 41 4C  3445         .ascii     "LITERAL"
      00146B                       3446 LITER:
      00146B CD 14 49         [ 4] 3447         CALL     COMPI
      00146E 03 B4                 3448         .word DOLIT 
      001470 CC 14 04         [ 2] 3449         JP     COMMA
                                   3450 
                                   3451 ;       $,"     ( -- )
                                   3452 ;       Compile a literal string
                                   3453 ;       up to next " .
      001473 14 63                 3454         .word      LINK
                           001475  3455 LINK = . 
      001475 03                    3456         .byte      3
      001476 24 2C 22              3457         .byte     '$',',','"'
      001479                       3458 STRCQ:
      001479 CD 03 B4         [ 4] 3459         CALL     DOLIT
      00147C 00 22                 3460         .word     34	; "
      00147E CD 10 41         [ 4] 3461         CALL     PARSE
      001481 CD 0B 33         [ 4] 3462         CALL     HERE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 65.
Hexadecimal [24-Bits]



      001484 CD 0B F4         [ 4] 3463         CALL     PACKS   ;string to code dictionary
      001487 CD 0B 1C         [ 4] 3464         CALL     COUNT
      00148A CD 06 DE         [ 4] 3465         CALL     PLUS    ;calculate aligned end of string
      00148D CD 06 31         [ 4] 3466         CALL     VPP
      001490 CC 04 25         [ 2] 3467         JP     STORE
                                   3468 
                                   3469 ;; Structures
                                   3470 
                                   3471 ;       FOR     ( -- a )
                                   3472 ;       Start a FOR-NEXT loop
                                   3473 ;       structure in a colon definition.
      001493 14 75                 3474         .word      LINK
                           001495  3475 LINK = . 
      001495 83                    3476 	.byte      IMEDD+3
      001496 46 4F 52              3477         .ascii     "FOR"
      001499                       3478 FOR:
      001499 CD 14 49         [ 4] 3479         CALL     COMPI
      00149C 04 AC                 3480         .word TOR 
      00149E CC 0B 33         [ 2] 3481         JP     HERE
                                   3482 
                                   3483 ;       NEXT    ( a -- )
                                   3484 ;       Terminate a FOR-NEXT loop.
      0014A1 14 95                 3485         .word      LINK
                           0014A3  3486 LINK = . 
      0014A3 84                    3487 	.byte      IMEDD+4
      0014A4 4E 45 58 54           3488         .ascii     "NEXT"
      0014A8                       3489 NEXT:
      0014A8 CD 14 49         [ 4] 3490         CALL     COMPI
      0014AB 03 C8                 3491         .word DONXT 
      0014AD CD 06 7D         [ 4] 3492         call ADRADJ
      0014B0 CC 14 04         [ 2] 3493         JP     COMMA
                                   3494 
                                   3495 ;       I ( -- n )
                                   3496 ;       stack FOR-NEXT COUNTER 
      0014B3 14 A3                 3497         .word LINK 
                           0014B5  3498         LINK=.
      0014B5 01                    3499         .byte 1 
      0014B6 49                    3500         .ascii "I"
      0014B7                       3501 IFETCH: 
      0014B7 1D 00 02         [ 2] 3502         subw x,#CELLL 
      0014BA 16 03            [ 2] 3503         ldw y,(3,sp)
      0014BC FF               [ 2] 3504         ldw (x),y 
      0014BD 81               [ 4] 3505         ret 
                                   3506 
                                   3507 ;       BEGIN   ( -- a )
                                   3508 ;       Start an infinite or
                                   3509 ;       indefinite loop structure.
      0014BE 14 B5                 3510         .word      LINK
                           0014C0  3511 LINK = . 
      0014C0 85                    3512 	.byte      IMEDD+5
      0014C1 42 45 47 49 4E        3513         .ascii     "BEGIN"
      0014C6                       3514 BEGIN:
      0014C6 CC 0B 33         [ 2] 3515         JP     HERE
                                   3516 
                                   3517 ;       UNTIL   ( a -- )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 66.
Hexadecimal [24-Bits]



                                   3518 ;       Terminate a BEGIN-UNTIL
                                   3519 ;       indefinite loop structure.
      0014C9 14 C0                 3520         .word      LINK
                           0014CB  3521 LINK = . 
      0014CB 85                    3522 	.byte      IMEDD+5
      0014CC 55 4E 54 49 4C        3523         .ascii     "UNTIL"
      0014D1                       3524 UNTIL:
      0014D1 CD 14 49         [ 4] 3525         CALL     COMPI
      0014D4 03 E7                 3526         .word    QBRAN 
      0014D6 CD 06 7D         [ 4] 3527         call ADRADJ
      0014D9 CC 14 04         [ 2] 3528         JP     COMMA
                                   3529 
                                   3530 ;       AGAIN   ( a -- )
                                   3531 ;       Terminate a BEGIN-AGAIN
                                   3532 ;       infinite loop structure.
      0014DC 14 CB                 3533         .word      LINK
                           0014DE  3534 LINK = . 
      0014DE 85                    3535 	.byte      IMEDD+5
      0014DF 41 47 41 49 4E        3536         .ascii     "AGAIN"
      0014E4                       3537 AGAIN:
      0014E4 CD 14 49         [ 4] 3538         CALL     COMPI
      0014E7 03 FE                 3539         .word BRAN
      0014E9 CD 06 7D         [ 4] 3540         call ADRADJ 
      0014EC CC 14 04         [ 2] 3541         JP     COMMA
                                   3542 
                                   3543 ;       IF      ( -- A )
                                   3544 ;       Begin a conditional branch.
      0014EF 14 DE                 3545         .word      LINK
                           0014F1  3546 LINK = . 
      0014F1 82                    3547 	.byte      IMEDD+2
      0014F2 49 46                 3548         .ascii     "IF"
      0014F4                       3549 IFF:
      0014F4 CD 14 49         [ 4] 3550         CALL     COMPI
      0014F7 03 E7                 3551         .word QBRAN
      0014F9 CD 0B 33         [ 4] 3552         CALL     HERE
      0014FC CD 0A 44         [ 4] 3553         CALL     ZERO
      0014FF CC 14 04         [ 2] 3554         JP     COMMA
                                   3555 
                                   3556 ;       THEN        ( A -- )
                                   3557 ;       Terminate a conditional branch structure.
      001502 14 F1                 3558         .word      LINK
                           001504  3559 LINK = . 
      001504 84                    3560 	.byte      IMEDD+4
      001505 54 48 45 4E           3561         .ascii     "THEN"
      001509                       3562 THENN:
      001509 CD 0B 33         [ 4] 3563         CALL     HERE
      00150C CD 06 7D         [ 4] 3564         call ADRADJ 
      00150F CD 04 F3         [ 4] 3565         CALL     SWAPP
      001512 CC 04 25         [ 2] 3566         JP     STORE
                                   3567 
                                   3568 ;       ELSE        ( A -- A )
                                   3569 ;       Start the false clause in an IF-ELSE-THEN structure.
      001515 15 04                 3570         .word      LINK
                           001517  3571 LINK = . 
      001517 84                    3572 	.byte      IMEDD+4
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 67.
Hexadecimal [24-Bits]



      001518 45 4C 53 45           3573         .ascii     "ELSE"
      00151C                       3574 ELSEE:
      00151C CD 14 49         [ 4] 3575         CALL     COMPI
      00151F 03 FE                 3576         .word BRAN
      001521 CD 0B 33         [ 4] 3577         CALL     HERE
      001524 CD 0A 44         [ 4] 3578         CALL     ZERO
      001527 CD 14 04         [ 4] 3579         CALL     COMMA
      00152A CD 04 F3         [ 4] 3580         CALL     SWAPP
      00152D CD 0B 33         [ 4] 3581         CALL     HERE
      001530 CD 06 7D         [ 4] 3582         call ADRADJ 
      001533 CD 04 F3         [ 4] 3583         CALL     SWAPP
      001536 CC 04 25         [ 2] 3584         JP     STORE
                                   3585 
                                   3586 ;       AHEAD       ( -- A )
                                   3587 ;       Compile a forward branch instruction.
      001539 15 17                 3588         .word      LINK
                           00153B  3589 LINK = . 
      00153B 85                    3590 	.byte      IMEDD+5
      00153C 41 48 45 41 44        3591         .ascii     "AHEAD"
      001541                       3592 AHEAD:
      001541 CD 14 49         [ 4] 3593         CALL     COMPI
      001544 03 FE                 3594         .word BRAN
      001546 CD 0B 33         [ 4] 3595         CALL     HERE
      001549 CD 0A 44         [ 4] 3596         CALL     ZERO
      00154C CC 14 04         [ 2] 3597         JP     COMMA
                                   3598 
                                   3599 ;       WHILE       ( a -- A a )
                                   3600 ;       Conditional branch out of a BEGIN-WHILE-REPEAT loop.
      00154F 15 3B                 3601         .word      LINK
                           001551  3602 LINK = . 
      001551 85                    3603 	.byte      IMEDD+5
      001552 57 48 49 4C 45        3604         .ascii     "WHILE"
      001557                       3605 WHILE:
      001557 CD 14 49         [ 4] 3606         CALL     COMPI
      00155A 03 E7                 3607         .word QBRAN
      00155C CD 0B 33         [ 4] 3608         CALL     HERE
      00155F CD 0A 44         [ 4] 3609         CALL     ZERO
      001562 CD 14 04         [ 4] 3610         CALL     COMMA
      001565 CC 04 F3         [ 2] 3611         JP     SWAPP
                                   3612 
                                   3613 ;       REPEAT      ( A a -- )
                                   3614 ;       Terminate a BEGIN-WHILE-REPEAT indefinite loop.
      001568 15 51                 3615         .word      LINK
                           00156A  3616 LINK = . 
      00156A 86                    3617         .byte      IMEDD+6
      00156B 52 45 50 45 41 54     3618         .ascii     "REPEAT"
      001571                       3619 REPEA:
      001571 CD 14 49         [ 4] 3620         CALL     COMPI
      001574 03 FE                 3621         .word BRAN
      001576 CD 06 7D         [ 4] 3622         call ADRADJ 
      001579 CD 14 04         [ 4] 3623         CALL     COMMA
      00157C CD 0B 33         [ 4] 3624         CALL     HERE
      00157F CD 06 7D         [ 4] 3625         call ADRADJ 
      001582 CD 04 F3         [ 4] 3626         CALL     SWAPP
      001585 CC 04 25         [ 2] 3627         JP     STORE
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 68.
Hexadecimal [24-Bits]



                                   3628 
                                   3629 ;       AFT         ( a -- a A )
                                   3630 ;       Jump to THEN in a FOR-AFT-THEN-NEXT loop the first time through.
      001588 15 6A                 3631         .word      LINK
                           00158A  3632 LINK = . 
      00158A 83                    3633 	.byte      IMEDD+3
      00158B 41 46 54              3634         .ascii     "AFT"
      00158E                       3635 AFT:
      00158E CD 04 D9         [ 4] 3636         CALL     DROP
      001591 CD 15 41         [ 4] 3637         CALL     AHEAD
      001594 CD 0B 33         [ 4] 3638         CALL     HERE
      001597 CC 04 F3         [ 2] 3639         JP     SWAPP
                                   3640 
                                   3641 ;       ABORT"      ( -- ; <string> )
                                   3642 ;       Conditional abort with an error message.
      00159A 15 8A                 3643         .word      LINK
                           00159C  3644 LINK = . 
      00159C 86                    3645 	.byte      IMEDD+6
      00159D 41 42 4F 52 54        3646         .ascii     "ABORT"
      0015A2 22                    3647         .byte      '"'
      0015A3                       3648 ABRTQ:
      0015A3 CD 14 49         [ 4] 3649         CALL     COMPI
      0015A6 12 C7                 3650         .word ABORQ
      0015A8 CC 14 79         [ 2] 3651         JP     STRCQ
                                   3652 
                                   3653 ;       $"     ( -- ; <string> )
                                   3654 ;       Compile an inline string literal.
      0015AB 15 9C                 3655         .word      LINK
                           0015AD  3656 LINK = . 
      0015AD 82                    3657 	.byte      IMEDD+2
      0015AE 24 22                 3658         .byte     '$','"'
      0015B0                       3659 STRQ:
      0015B0 CD 14 49         [ 4] 3660         CALL     COMPI
      0015B3 0E E1                 3661         .word STRQP 
      0015B5 CC 14 79         [ 2] 3662         JP     STRCQ
                                   3663 
                                   3664 ;       ."          ( -- ; <string> )
                                   3665 ;       Compile an inline string literal to be typed out at run time.
      0015B8 15 AD                 3666         .word      LINK
                           0015BA  3667 LINK = . 
      0015BA 82                    3668 	.byte      IMEDD+2
      0015BB 2E 22                 3669         .byte     '.','"'
      0015BD                       3670 DOTQ:
      0015BD CD 14 49         [ 4] 3671         CALL     COMPI
      0015C0 0E EB                 3672         .word DOTQP 
      0015C2 CC 14 79         [ 2] 3673         JP     STRCQ
                                   3674 
                                   3675 ;; Name compiler
                                   3676 
                                   3677 ;       ?UNIQUE ( a -- a )
                                   3678 ;       Display a warning message
                                   3679 ;       if word already exists.
      0015C5 15 BA                 3680         .word      LINK
                           0015C7  3681 LINK = . 
      0015C7 07                    3682         .byte      7
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 69.
Hexadecimal [24-Bits]



      0015C8 3F 55 4E 49 51 55 45  3683         .ascii     "?UNIQUE"
      0015CF                       3684 UNIQU:
      0015CF CD 04 E3         [ 4] 3685         CALL     DUPP
      0015D2 CD 11 BB         [ 4] 3686         CALL     NAMEQ   ;?name exists
      0015D5 CD 03 E7         [ 4] 3687         CALL     QBRAN
      0015D8 15 EE                 3688         .word      UNIQ1
      0015DA CD 0E EB         [ 4] 3689         CALL     DOTQP   ;redef are OK
      0015DD 07                    3690         .byte       7
      0015DE 20 72 65 44 65 66 20  3691         .ascii     " reDef "       
      0015E5 CD 05 0D         [ 4] 3692         CALL     OVER
      0015E8 CD 0B 1C         [ 4] 3693         CALL     COUNT
      0015EB CD 0E 8E         [ 4] 3694         CALL     TYPES   ;just in case
      0015EE CC 04 D9         [ 2] 3695 UNIQ1:  JP     DROP
                                   3696 
                                   3697 ;       $,n     ( na -- )
                                   3698 ;       Build a new dictionary name
                                   3699 ;       using string at na.
                                   3700 ; compile dans l'espace des variables 
      0015F1 15 C7                 3701         .word      LINK
                           0015F3  3702 LINK = . 
      0015F3 03                    3703         .byte      3
      0015F4 24 2C 6E              3704         .ascii     "$,n"
      0015F7                       3705 SNAME:
      0015F7 CD 04 E3         [ 4] 3706         CALL     DUPP
      0015FA CD 04 5A         [ 4] 3707         CALL     CAT     ;?null input
      0015FD CD 03 E7         [ 4] 3708         CALL     QBRAN
      001600 16 2D                 3709         .word      PNAM1
      001602 CD 15 CF         [ 4] 3710         CALL     UNIQU   ;?redefinition
      001605 CD 04 E3         [ 4] 3711         CALL     DUPP
      001608 CD 0B 1C         [ 4] 3712         CALL     COUNT
      00160B CD 06 DE         [ 4] 3713         CALL     PLUS
      00160E CD 06 31         [ 4] 3714         CALL     VPP
      001611 CD 04 25         [ 4] 3715         CALL     STORE
      001614 CD 04 E3         [ 4] 3716         CALL     DUPP
      001617 CD 06 4F         [ 4] 3717         CALL     LAST
      00161A CD 04 25         [ 4] 3718         CALL     STORE   ;save na for vocabulary link
      00161D CD 09 BC         [ 4] 3719         CALL     CELLM   ;link address
      001620 CD 06 23         [ 4] 3720         CALL     CNTXT
      001623 CD 04 3C         [ 4] 3721         CALL     AT
      001626 CD 04 F3         [ 4] 3722         CALL     SWAPP
      001629 CD 04 25         [ 4] 3723         CALL     STORE
      00162C 81               [ 4] 3724         RET     ;save code pointer
      00162D CD 0E E1         [ 4] 3725 PNAM1:  CALL     STRQP
      001630 05                    3726         .byte      5
      001631 20 6E 61 6D 65        3727         .ascii     " name" ;null input
      001636 CC 12 CF         [ 2] 3728         JP     ABOR1
                                   3729 
                                   3730 ;; FORTH compiler
                                   3731 
                                   3732 ;       $COMPILE        ( a -- )
                                   3733 ;       Compile next word to
                                   3734 ;       dictionary as a token or literal.
      001639 15 F3                 3735         .word      LINK
                           00163B  3736 LINK = . 
      00163B 08                    3737         .byte      8
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 70.
Hexadecimal [24-Bits]



      00163C 24 43 4F 4D 50 49 4C  3738         .ascii     "$COMPILE"
             45
      001644                       3739 SCOMP:
      001644 CD 11 BB         [ 4] 3740         CALL     NAMEQ
      001647 CD 06 8D         [ 4] 3741         CALL     QDUP    ;?defined
      00164A CD 03 E7         [ 4] 3742         CALL     QBRAN
      00164D 16 65                 3743         .word      SCOM2
      00164F CD 04 3C         [ 4] 3744         CALL     AT
      001652 CD 03 B4         [ 4] 3745         CALL     DOLIT
      001655 80 00                 3746         .word     0x8000	;  IMEDD*256
      001657 CD 05 2F         [ 4] 3747         CALL     ANDD    ;?immediate
      00165A CD 03 E7         [ 4] 3748         CALL     QBRAN
      00165D 16 62                 3749         .word      SCOM1
      00165F CC 04 0E         [ 2] 3750         JP     EXECU
      001662 CC 16 FC         [ 2] 3751 SCOM1:  JP     JSRC
      001665 CD 0D 59         [ 4] 3752 SCOM2:  CALL     NUMBQ   ;try to convert to number
      001668 CD 03 E7         [ 4] 3753         CALL     QBRAN
      00166B 12 CF                 3754         .word      ABOR1
      00166D CC 14 6B         [ 2] 3755         JP     LITER
                                   3756 
                                   3757 ;       OVERT   ( -- )
                                   3758 ;       Link a new word into vocabulary.
      001670 16 3B                 3759         .word      LINK
                           001672  3760 LINK = . 
      001672 05                    3761         .byte      5
      001673 4F 56 45 52 54        3762         .ascii     "OVERT"
      001678                       3763 OVERT:
      001678 CD 06 4F         [ 4] 3764         CALL     LAST
      00167B CD 04 3C         [ 4] 3765         CALL     AT
      00167E CD 06 23         [ 4] 3766         CALL     CNTXT
      001681 CC 04 25         [ 2] 3767         JP     STORE
                                   3768 
                                   3769 ;       ;       ( -- )
                                   3770 ;       Terminate a colon definition.
      001684 16 72                 3771         .word      LINK
                           001686  3772 LINK = . 
      001686 C1                    3773 	.byte      IMEDD+COMPO+1
      001687 3B                    3774         .ascii     ";"
      001688                       3775 SEMIS:
      001688 CD 14 49         [ 4] 3776         CALL     COMPI
      00168B 04 1E                 3777         .word EXIT 
      00168D CD 13 30         [ 4] 3778         CALL     LBRAC
      001690 CD 16 78         [ 4] 3779         call OVERT 
      001693 CD 20 58         [ 4] 3780         CALL FMOVE
      001696 CD 06 8D         [ 4] 3781         call QDUP 
      001699 CD 03 E7         [ 4] 3782         call QBRAN 
      00169C 17 CC                 3783         .word SET_RAMLAST 
      00169E CD 20 EC         [ 4] 3784         CALL UPDATPTR
      0016A1 81               [ 4] 3785         RET 
                                   3786 
                                   3787 
                                   3788 ;       Terminate an ISR definition 
                                   3789 ;       retourn ca of ISR as double
                                   3790 ;       I; ( -- ud )
      0016A2 16 86                 3791         .word LINK 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 71.
Hexadecimal [24-Bits]



                           0016A4  3792         LINK=.
      0016A4 C2                    3793         .byte 2+IMEDD+COMPO 
      0016A5 49 3B                 3794         .ascii "I;" 
      0016A7                       3795 ISEMI:
      0016A7 1D 00 02         [ 2] 3796         subw x,#CELLL  
      0016AA 90 AE 00 80      [ 2] 3797         ldw y,#IRET_CODE 
      0016AE FF               [ 2] 3798         ldw (x),y 
      0016AF CD 14 1B         [ 4] 3799         call CCOMMA
      0016B2 CD 13 30         [ 4] 3800         call LBRAC 
      0016B5 CD 21 31         [ 4] 3801         call IFMOVE
      0016B8 CD 06 8D         [ 4] 3802         call QDUP 
      0016BB CD 03 E7         [ 4] 3803         CALL QBRAN 
      0016BE 17 CC                 3804         .word SET_RAMLAST
      0016C0 CD 06 3F         [ 4] 3805         CALL CPP
      0016C3 CD 04 3C         [ 4] 3806         call AT 
      0016C6 CD 04 F3         [ 4] 3807         call SWAPP 
      0016C9 CD 06 3F         [ 4] 3808         CALL CPP 
      0016CC CD 04 25         [ 4] 3809         call STORE 
      0016CF CD 1B 75         [ 4] 3810         call UPDATCP 
      0016D2 CD 1B 32         [ 4] 3811         call EEPVP 
      0016D5 CD 04 D9         [ 4] 3812         call DROP 
      0016D8 CD 04 3C         [ 4] 3813         call AT 
      0016DB CD 06 31         [ 4] 3814         call VPP 
      0016DE CD 04 25         [ 4] 3815         call STORE 
      0016E1 CC 0A 44         [ 2] 3816         jp ZERO
      0016E4 81               [ 4] 3817         ret           
                                   3818         
                                   3819 
                                   3820 ;       ]       ( -- )
                                   3821 ;       Start compiling words in
                                   3822 ;       input stream.
      0016E5 16 A4                 3823         .word      LINK
                           0016E7  3824 LINK = . 
      0016E7 01                    3825         .byte      1
      0016E8 5D                    3826         .ascii     "]"
      0016E9                       3827 RBRAC:
      0016E9 CD 03 B4         [ 4] 3828         CALL   DOLIT
      0016EC 16 44                 3829         .word  SCOMP
      0016EE CD 06 01         [ 4] 3830         CALL   TEVAL
      0016F1 CC 04 25         [ 2] 3831         JP     STORE
                                   3832 
                                   3833 ;       CALL,    ( ca -- )
                                   3834 ;       Compile a subroutine call.
      0016F4 16 E7                 3835         .word      LINK
                           0016F6  3836 LINK = . 
      0016F6 05                    3837         .byte      5
      0016F7 43 41 4C 4C 2C        3838         .ascii     "CALL,"
      0016FC                       3839 JSRC:
      0016FC CD 03 B4         [ 4] 3840         CALL     DOLIT
      0016FF 00 CD                 3841         .word     CALLL     ;CALL
      001701 CD 14 1B         [ 4] 3842         CALL     CCOMMA
      001704 CC 14 04         [ 2] 3843         JP     COMMA
                                   3844 
                                   3845 ;       INIT-OFS ( -- )
                                   3846 ;       compute offset to adjust jump address 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 72.
Hexadecimal [24-Bits]



                                   3847 ;       set variable OFFSET 
      001707 16 F6                 3848         .word LINK 
                           001709  3849         LINK=.
      001709 08                    3850         .byte 8 
      00170A 49 4E 49 54 2D 4F 46  3851         .ascii "INIT-OFS" 
             53
      001712                       3852 INITOFS:
      001712 CD 05 F0         [ 4] 3853         call TFLASH 
      001715 CD 04 3C         [ 4] 3854         CALL AT 
      001718 CD 04 E3         [ 4] 3855         CALL DUPP 
      00171B CD 03 E7         [ 4] 3856         call QBRAN
      00171E 17 2F                 3857         .word 1$
      001720 CD 04 D9         [ 4] 3858         call DROP  
      001723 CD 06 3F         [ 4] 3859         call CPP 
      001726 CD 04 3C         [ 4] 3860         call AT 
      001729 CD 0B 33         [ 4] 3861         call HERE
      00172C CD 07 57         [ 4] 3862         call SUBB 
      00172F CD 06 74         [ 4] 3863 1$:     call OFFSET 
      001732 CC 04 25         [ 2] 3864         jp STORE  
                                   3865 
                                   3866 ;       :       ( -- ; <string> )
                                   3867 ;       Start a new colon definition
                                   3868 ;       using next word as its name.
      001735 17 09                 3869         .word      LINK
                           001737  3870 LINK = . 
      001737 01                    3871         .byte      1
      001738 3A                    3872         .ascii     ":"
      001739                       3873 COLON:
      001739 CD 17 12         [ 4] 3874         call INITOFS       
      00173C CD 10 BE         [ 4] 3875         CALL   TOKEN
      00173F CD 15 F7         [ 4] 3876         CALL   SNAME
      001742 CC 16 E9         [ 2] 3877         JP     RBRAC
                                   3878 
                                   3879 ;       I:  ( -- )
                                   3880 ;       Start interrupt service routine definition
                                   3881 ;       those definition have no name.
      001745 17 37                 3882         .word LINK
                           001747  3883         LINK=.
      001747 02                    3884         .byte 2 
      001748 49 3A                 3885         .ascii "I:" 
      00174A                       3886 ICOLON:
      00174A CD 17 12         [ 4] 3887         call INITOFS 
      00174D CC 16 E9         [ 2] 3888         jp RBRAC  
                                   3889 
                                   3890 ;       IMMEDIATE       ( -- )
                                   3891 ;       Make last compiled word
                                   3892 ;       an immediate word.
      001750 17 47                 3893         .word      LINK
                           001752  3894 LINK = . 
      001752 09                    3895         .byte      9
      001753 49 4D 4D 45 44 49 41  3896         .ascii     "IMMEDIATE"
             54 45
      00175C                       3897 IMMED:
      00175C CD 03 B4         [ 4] 3898         CALL     DOLIT
      00175F 80 00                 3899         .word     0x8000	;  IMEDD*256
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 73.
Hexadecimal [24-Bits]



      001761 CD 06 4F         [ 4] 3900         CALL     LAST
      001764 CD 04 3C         [ 4] 3901         CALL     AT
      001767 CD 04 3C         [ 4] 3902         CALL     AT
      00176A CD 05 43         [ 4] 3903         CALL     ORR
      00176D CD 06 4F         [ 4] 3904         CALL     LAST
      001770 CD 04 3C         [ 4] 3905         CALL     AT
      001773 CC 04 25         [ 2] 3906         JP     STORE
                                   3907 
                                   3908 ;; Defining words
                                   3909 
                                   3910 ;       CREATE  ( -- ; <string> )
                                   3911 ;       Compile a new array
                                   3912 ;       without allocating space.
      001776 17 52                 3913         .word      LINK
                           001778  3914 LINK = . 
      001778 06                    3915         .byte      6
      001779 43 52 45 41 54 45     3916         .ascii     "CREATE"
      00177F                       3917 CREAT:
      00177F CD 10 BE         [ 4] 3918         CALL     TOKEN
      001782 CD 15 F7         [ 4] 3919         CALL     SNAME
      001785 CD 16 78         [ 4] 3920         CALL     OVERT        
      001788 CD 14 49         [ 4] 3921         CALL     COMPI 
      00178B 05 90                 3922         .word DOVAR 
      00178D 81               [ 4] 3923         RET
                                   3924 
                                   3925 ;       VARIABLE        ( -- ; <string> )
                                   3926 ;       Compile a new variable
                                   3927 ;       initialized to 0.
      00178E 17 78                 3928         .word      LINK
                           001790  3929 LINK = . 
      001790 08                    3930         .byte      8
      001791 56 41 52 49 41 42 4C  3931         .ascii     "VARIABLE"
             45
      001799                       3932 VARIA:
                                   3933 ; indirect variable so that VARIABLE definition can be compiled in FLASH 
      001799 CD 0B 33         [ 4] 3934         CALL HERE
      00179C CD 04 E3         [ 4] 3935         CALL DUPP 
      00179F CD 09 AD         [ 4] 3936         CALL CELLP
      0017A2 CD 06 31         [ 4] 3937         CALL VPP 
      0017A5 CD 04 25         [ 4] 3938         CALL STORE
      0017A8 CD 17 7F         [ 4] 3939         CALL CREAT
      0017AB CD 04 E3         [ 4] 3940         CALL DUPP
      0017AE CD 14 04         [ 4] 3941         CALL COMMA
      0017B1 CD 0A 44         [ 4] 3942         CALL ZERO
      0017B4 CD 04 F3         [ 4] 3943         call SWAPP 
      0017B7 CD 04 25         [ 4] 3944         CALL STORE
      0017BA CD 20 58         [ 4] 3945         CALL FMOVE ; move definition to FLASH
      0017BD CD 06 8D         [ 4] 3946         CALL QDUP 
      0017C0 CD 03 E7         [ 4] 3947         CALL QBRAN 
      0017C3 17 CC                 3948         .word SET_RAMLAST   
      0017C5 CD 1B 8C         [ 4] 3949         call UPDATVP  ; don't update if variable kept in RAM.
      0017C8 CD 20 EC         [ 4] 3950         CALL UPDATPTR
      0017CB 81               [ 4] 3951         RET         
      0017CC                       3952 SET_RAMLAST: 
      0017CC CD 06 4F         [ 4] 3953         CALL LAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 74.
Hexadecimal [24-Bits]



      0017CF CD 04 3C         [ 4] 3954         CALL AT 
      0017D2 CD 06 62         [ 4] 3955         CALL RAMLAST 
      0017D5 CC 04 25         [ 2] 3956         jp STORE  
                                   3957 
                                   3958 
                                   3959 ;       CONSTANT  ( n -- ; <string> )
                                   3960 ;       Compile a new constant 
                                   3961 ;       n CONSTANT name 
      0017D8 17 90                 3962         .word LINK 
                           0017DA  3963         LINK=. 
      0017DA 08                    3964         .byte 8 
      0017DB 43 4F 4E 53 54 41 4E  3965         .ascii "CONSTANT" 
             54
      0017E3                       3966 CONSTANT:          
      0017E3 CD 10 BE         [ 4] 3967         CALL TOKEN
      0017E6 CD 15 F7         [ 4] 3968         CALL SNAME 
      0017E9 CD 16 78         [ 4] 3969         CALL OVERT 
      0017EC CD 14 49         [ 4] 3970         CALL COMPI 
      0017EF 18 0D                 3971         .word DOCONST
      0017F1 CD 14 04         [ 4] 3972         CALL COMMA 
      0017F4 CD 20 58         [ 4] 3973         CALL FMOVE
      0017F7 CD 06 8D         [ 4] 3974         CALL QDUP 
      0017FA CD 03 E7         [ 4] 3975         CALL QBRAN 
      0017FD 17 CC                 3976         .word SET_RAMLAST  
      0017FF CD 20 EC         [ 4] 3977         CALL UPDATPTR  
      001802 81               [ 4] 3978 1$:     RET          
                                   3979 
                                   3980 ; CONSTANT runtime semantic 
                                   3981 ; doCONST  ( -- n )
      001803 17 DA                 3982         .word LINK 
                           001805  3983         LINK=.
      001805 07                    3984         .byte 7
      001806 44 4F 43 4F 4E 53 54  3985         .ascii "DOCONST"
      00180D                       3986 DOCONST:
      00180D 1D 00 02         [ 2] 3987         subw x,#CELLL
      001810 90 85            [ 2] 3988         popw y 
      001812 90 FE            [ 2] 3989         ldw y,(y) 
      001814 FF               [ 2] 3990         ldw (x),y 
      001815 81               [ 4] 3991         ret 
                                   3992 
                                   3993 
                                   3994 ;; Tools
                                   3995 
                                   3996 ;       _TYPE   ( b u -- )
                                   3997 ;       Display a string. Filter
                                   3998 ;       non-printing characters.
      001816 18 05                 3999         .word      LINK
                           001818  4000 LINK = . 
      001818 05                    4001         .byte      5
      001819 5F 54 59 50 45        4002         .ascii     "_TYPE"
      00181E                       4003 UTYPE:
      00181E CD 04 AC         [ 4] 4004         CALL     TOR     ;start count down loop
      001821 20 0F            [ 2] 4005         JRA     UTYP2   ;skip first pass
      001823 CD 04 E3         [ 4] 4006 UTYP1:  CALL     DUPP
      001826 CD 04 5A         [ 4] 4007         CALL     CAT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 75.
Hexadecimal [24-Bits]



      001829 CD 0A 6E         [ 4] 4008         CALL     TCHAR
      00182C CD 03 9E         [ 4] 4009         CALL     EMIT    ;display only printable
      00182F CD 09 D8         [ 4] 4010         CALL     ONEP    ;increment address
      001832 CD 03 C8         [ 4] 4011 UTYP2:  CALL     DONXT
      001835 18 23                 4012         .word      UTYP1   ;loop till done
      001837 CC 04 D9         [ 2] 4013         JP     DROP
                                   4014 
                                   4015 ;       dm+     ( a u -- a )
                                   4016 ;       Dump u bytes from ,
                                   4017 ;       leaving a+u on  stack.
      00183A 18 18                 4018         .word      LINK
                           00183C  4019 LINK = . 
      00183C 03                    4020         .byte      3
      00183D 64 6D 2B              4021         .ascii     "dm+"
      001840                       4022 DUMPP:
      001840 CD 05 0D         [ 4] 4023         CALL     OVER
      001843 CD 03 B4         [ 4] 4024         CALL     DOLIT
      001846 00 04                 4025         .word      4
      001848 CD 0F 14         [ 4] 4026         CALL     UDOTR   ;display address
      00184B CD 0E 64         [ 4] 4027         CALL     SPACE
      00184E CD 04 AC         [ 4] 4028         CALL     TOR     ;start count down loop
      001851 20 11            [ 2] 4029         JRA     PDUM2   ;skip first pass
      001853 CD 04 E3         [ 4] 4030 PDUM1:  CALL     DUPP
      001856 CD 04 5A         [ 4] 4031         CALL     CAT
      001859 CD 03 B4         [ 4] 4032         CALL     DOLIT
      00185C 00 03                 4033         .word      3
      00185E CD 0F 14         [ 4] 4034         CALL     UDOTR   ;display numeric data
      001861 CD 09 D8         [ 4] 4035         CALL     ONEP    ;increment address
      001864 CD 03 C8         [ 4] 4036 PDUM2:  CALL     DONXT
      001867 18 53                 4037         .word      PDUM1   ;loop till done
      001869 81               [ 4] 4038         RET
                                   4039 
                                   4040 ;       DUMP    ( a u -- )
                                   4041 ;       Dump u bytes from a,
                                   4042 ;       in a formatted manner.
      00186A 18 3C                 4043         .word      LINK
                           00186C  4044 LINK = . 
      00186C 04                    4045         .byte      4
      00186D 44 55 4D 50           4046         .ascii     "DUMP"
      001871                       4047 DUMP:
      001871 CD 05 A0         [ 4] 4048         CALL     BASE
      001874 CD 04 3C         [ 4] 4049         CALL     AT
      001877 CD 04 AC         [ 4] 4050         CALL     TOR
      00187A CD 0C EC         [ 4] 4051         CALL     HEX     ;save radix, set hex
      00187D CD 03 B4         [ 4] 4052         CALL     DOLIT
      001880 00 10                 4053         .word      16
      001882 CD 08 FE         [ 4] 4054         CALL     SLASH   ;change count to lines
      001885 CD 04 AC         [ 4] 4055         CALL     TOR     ;start count down loop
      001888 CD 0E AC         [ 4] 4056 DUMP1:  CALL     CR
      00188B CD 03 B4         [ 4] 4057         CALL     DOLIT
      00188E 00 10                 4058         .word      16
      001890 CD 06 C9         [ 4] 4059         CALL     DDUP
      001893 CD 18 40         [ 4] 4060         CALL     DUMPP   ;display numeric
      001896 CD 06 9E         [ 4] 4061         CALL     ROT
      001899 CD 06 9E         [ 4] 4062         CALL     ROT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 76.
Hexadecimal [24-Bits]



      00189C CD 0E 64         [ 4] 4063         CALL     SPACE
      00189F CD 0E 64         [ 4] 4064         CALL     SPACE
      0018A2 CD 18 1E         [ 4] 4065         CALL     UTYPE   ;display printable characters
      0018A5 CD 03 C8         [ 4] 4066         CALL     DONXT
      0018A8 18 88                 4067         .word      DUMP1   ;loop till done
      0018AA CD 04 D9         [ 4] 4068 DUMP3:  CALL     DROP
      0018AD CD 04 8D         [ 4] 4069         CALL     RFROM
      0018B0 CD 05 A0         [ 4] 4070         CALL     BASE
      0018B3 CC 04 25         [ 2] 4071         JP     STORE   ;restore radix
                                   4072 
                                   4073 ;       .S      ( ... -- ... )
                                   4074 ;        Display  contents of stack.
      0018B6 18 6C                 4075         .word      LINK
                           0018B8  4076 LINK = . 
      0018B8 02                    4077         .byte      2
      0018B9 2E 53                 4078         .ascii     ".S"
      0018BB                       4079 DOTS:
      0018BB CD 0E AC         [ 4] 4080         CALL     CR
      0018BE CD 0A 87         [ 4] 4081         CALL     DEPTH   ;stack depth
      0018C1 CD 04 AC         [ 4] 4082         CALL     TOR     ;start count down loop
      0018C4 20 09            [ 2] 4083         JRA     DOTS2   ;skip first pass
      0018C6 CD 04 A0         [ 4] 4084 DOTS1:  CALL     RAT
      0018C9 CD 0A 9E         [ 4] 4085 	CALL     PICK
      0018CC CD 0F 47         [ 4] 4086         CALL     DOT     ;index stack, display contents
      0018CF CD 03 C8         [ 4] 4087 DOTS2:  CALL     DONXT
      0018D2 18 C6                 4088         .word      DOTS1   ;loop till done
      0018D4 CD 0E EB         [ 4] 4089         CALL     DOTQP
      0018D7 05                    4090         .byte      5
      0018D8 20 3C 73 70 20        4091         .ascii     " <sp "
      0018DD 81               [ 4] 4092         RET
                                   4093 
                                   4094 ;       >NAME   ( ca -- na | F )
                                   4095 ;       Convert code address
                                   4096 ;       to a name address.
      0018DE 18 B8                 4097         .word      LINK
                           0018E0  4098 LINK = . 
      0018E0 05                    4099         .byte      5
      0018E1 3E 4E 41 4D 45        4100         .ascii     ">NAME"
      0018E6                       4101 TNAME:
      0018E6 CD 06 23         [ 4] 4102         CALL     CNTXT   ;vocabulary link
      0018E9 CD 04 3C         [ 4] 4103 TNAM2:  CALL     AT
      0018EC CD 04 E3         [ 4] 4104         CALL     DUPP    ;?last word in a vocabulary
      0018EF CD 03 E7         [ 4] 4105         CALL     QBRAN
      0018F2 19 0D                 4106         .word      TNAM4
      0018F4 CD 06 C9         [ 4] 4107         CALL     DDUP
      0018F7 CD 10 CC         [ 4] 4108         CALL     NAMET
      0018FA CD 05 58         [ 4] 4109         CALL     XORR    ;compare
      0018FD CD 03 E7         [ 4] 4110         CALL     QBRAN
      001900 19 07                 4111         .word      TNAM3
      001902 CD 09 BC         [ 4] 4112         CALL     CELLM   ;continue with next word
      001905 20 E2            [ 2] 4113         JRA     TNAM2
      001907 CD 04 F3         [ 4] 4114 TNAM3:  CALL     SWAPP
      00190A CC 04 D9         [ 2] 4115         JP     DROP
      00190D CD 06 BE         [ 4] 4116 TNAM4:  CALL     DDROP
      001910 CC 0A 44         [ 2] 4117         JP     ZERO
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 77.
Hexadecimal [24-Bits]



                                   4118 
                                   4119 ;       .ID     ( na -- )
                                   4120 ;        Display  name at address.
      001913 18 E0                 4121         .word      LINK
                           001915  4122 LINK = . 
      001915 03                    4123         .byte      3
      001916 2E 49 44              4124         .ascii     ".ID"
      001919                       4125 DOTID:
      001919 CD 06 8D         [ 4] 4126         CALL     QDUP    ;if zero no name
      00191C CD 03 E7         [ 4] 4127         CALL     QBRAN
      00191F 19 2F                 4128         .word      DOTI1
      001921 CD 0B 1C         [ 4] 4129         CALL     COUNT
      001924 CD 03 B4         [ 4] 4130         CALL     DOLIT
      001927 00 1F                 4131         .word      0x1F
      001929 CD 05 2F         [ 4] 4132         CALL     ANDD    ;mask lexicon bits
      00192C CC 18 1E         [ 2] 4133         JP     UTYPE
      00192F CD 0E EB         [ 4] 4134 DOTI1:  CALL     DOTQP
      001932 09                    4135         .byte      9
      001933 20 6E 6F 4E 61 6D 65  4136         .ascii     " noName"
      00193A 81               [ 4] 4137         RET
                                   4138 
                           000000  4139 WANT_SEE=0 
                           000000  4140 .if WANT_SEE 
                                   4141 ;       SEE     ( -- ; <string> )
                                   4142 ;       A simple decompiler.
                                   4143 ;       Updated for byte machines.
                                   4144         .word      LINK
                                   4145 LINK = . 
                                   4146         .byte      3
                                   4147         .ascii     "SEE"
                                   4148 SEE:
                                   4149         CALL     TICK    ;starting address
                                   4150         CALL     CR
                                   4151         CALL     ONEM
                                   4152 SEE1:   CALL     ONEP
                                   4153         CALL     DUPP
                                   4154         CALL     AT
                                   4155         CALL     DUPP    ;?does it contain a zero
                                   4156         CALL     QBRAN
                                   4157         .word    SEE2
                                   4158         CALL     TNAME   ;?is it a name
                                   4159 SEE2:   CALL     QDUP    ;name address or zero
                                   4160         CALL     QBRAN
                                   4161         .word    SEE3
                                   4162         CALL     SPACE
                                   4163         CALL     DOTID   ;display name
                                   4164         CALL     ONEP
                                   4165         JRA      SEE4
                                   4166 SEE3:   CALL     DUPP
                                   4167         CALL     CAT
                                   4168         CALL     UDOT    ;display number
                                   4169 SEE4:   CALL     NUFQ    ;user control
                                   4170         CALL     QBRAN
                                   4171         .word    SEE1
                                   4172         JP     DROP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 78.
Hexadecimal [24-Bits]



                                   4173 .endif ; WANT_SEE 
                                   4174 
                                   4175 ;       WORDS   ( -- )
                                   4176 ;       Display names in vocabulary.
      00193B 19 15                 4177         .word      LINK
                           00193D  4178 LINK = . 
      00193D 05                    4179         .byte      5
      00193E 57 4F 52 44 53        4180         .ascii     "WORDS"
      001943                       4181 WORDS:
      001943 CD 0E AC         [ 4] 4182         CALL     CR
      001946 CD 06 23         [ 4] 4183         CALL     CNTXT   ;only in context
      001949 CD 04 3C         [ 4] 4184 WORS1:  CALL     AT
      00194C CD 06 8D         [ 4] 4185         CALL     QDUP    ;?at end of list
      00194F CD 03 E7         [ 4] 4186         CALL     QBRAN
      001952 19 65                 4187         .word      WORS2
      001954 CD 04 E3         [ 4] 4188         CALL     DUPP
      001957 CD 0E 64         [ 4] 4189         CALL     SPACE
      00195A CD 19 19         [ 4] 4190         CALL     DOTID   ;display a name
      00195D CD 09 BC         [ 4] 4191         CALL     CELLM
      001960 CD 03 FE         [ 4] 4192         CALL     BRAN
      001963 19 49                 4193         .word      WORS1
      001965 81               [ 4] 4194 WORS2:  RET
                                   4195 
                                   4196         
                                   4197 ;; Hardware reset
                                   4198 
                                   4199 ;       hi      ( -- )
                                   4200 ;       Display sign-on message.
      001966 19 3D                 4201         .word      LINK
                           001968  4202 LINK = . 
      001968 02                    4203         .byte      2
      001969 68 69                 4204         .ascii     "hi"
      00196B                       4205 HI:
      00196B CD 0E AC         [ 4] 4206         CALL     CR
      00196E CD 0E EB         [ 4] 4207         CALL     DOTQP   ;initialize I/O
      001971 0F                    4208         .byte      15
      001972 73 74 6D 38 65 46 6F  4209         .ascii     "stm8eForth v"
             72 74 68 20 76
      00197E 33                    4210 	.byte      VER+'0'
      00197F 2E                    4211         .byte      '.' 
      001980 30                    4212 	.byte      EXT+'0' ;version
      001981 CC 0E AC         [ 2] 4213         JP     CR
                                   4214 
                           000000  4215 WANT_DEBUG=0
                           000000  4216 .if WANT_DEBUG 
                                   4217 ;       DEBUG      ( -- )
                                   4218 ;       Display sign-on message.
                                   4219 ;        .word      LINK
                                   4220 LINK = . 
                                   4221         .byte      5
                                   4222         .ascii     "DEBUG"
                                   4223 DEBUG:
                                   4224 	CALL DOLIT
                                   4225 	.word 0x65
                                   4226 	CALL EMIT
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 79.
Hexadecimal [24-Bits]



                                   4227 	CALL DOLIT
                                   4228 	.word 0
                                   4229  	CALL ZLESS 
                                   4230 	CALL DOLIT
                                   4231 	.word 0xFFFE
                                   4232 	CALL ZLESS 
                                   4233 	CALL UPLUS 
                                   4234  	CALL DROP 
                                   4235 	CALL DOLIT
                                   4236 	.word 3
                                   4237 	CALL UPLUS 
                                   4238 	CALL UPLUS 
                                   4239  	CALL DROP
                                   4240 	CALL DOLIT
                                   4241 	.word 0x43
                                   4242 	CALL UPLUS 
                                   4243  	CALL DROP
                                   4244 	CALL EMIT
                                   4245 	CALL DOLIT
                                   4246 	.word 0x4F
                                   4247 	CALL DOLIT
                                   4248 	.word 0x6F
                                   4249  	CALL XORR
                                   4250 	CALL DOLIT
                                   4251 	.word 0xF0
                                   4252  	CALL ANDD
                                   4253 	CALL DOLIT
                                   4254 	.word 0x4F
                                   4255  	CALL ORR
                                   4256 	CALL EMIT
                                   4257 	CALL DOLIT
                                   4258 	.word 8
                                   4259 	CALL DOLIT
                                   4260 	.word 6
                                   4261  	CALL SWAPP
                                   4262 	CALL OVER
                                   4263 	CALL XORR
                                   4264 	CALL DOLIT
                                   4265 	.word 3
                                   4266 	CALL ANDD 
                                   4267 	CALL ANDD
                                   4268 	CALL DOLIT
                                   4269 	.word 0x70
                                   4270 	CALL UPLUS 
                                   4271 	CALL DROP
                                   4272 	CALL EMIT
                                   4273 	CALL DOLIT
                                   4274 	.word 0
                                   4275 	CALL QBRAN
                                   4276 	.word DEBUG1
                                   4277 	CALL DOLIT
                                   4278 	.word 0x3F
                                   4279 DEBUG1:
                                   4280 	CALL DOLIT
                                   4281 	.word 0xFFFF
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 80.
Hexadecimal [24-Bits]



                                   4282 	CALL QBRAN
                                   4283 	.word DEBUG2
                                   4284 	CALL DOLIT
                                   4285 	.word 0x74
                                   4286 	CALL BRAN
                                   4287 	.word DEBUG3
                                   4288 DEBUG2:
                                   4289 	CALL DOLIT
                                   4290 	.word 0x21
                                   4291 DEBUG3:
                                   4292 	CALL EMIT
                                   4293 	CALL DOLIT
                                   4294 	.word 0x68
                                   4295 	CALL DOLIT
                                   4296 	.word 0x80
                                   4297 	CALL STORE
                                   4298 	CALL DOLIT
                                   4299 	.word 0x80
                                   4300 	CALL AT
                                   4301 	CALL EMIT
                                   4302 	CALL DOLIT
                                   4303 	.word 0x4D
                                   4304 	CALL TOR
                                   4305 	CALL RAT
                                   4306 	CALL RFROM
                                   4307 	CALL ANDD
                                   4308 	CALL EMIT
                                   4309 	CALL DOLIT
                                   4310 	.word 0x61
                                   4311 	CALL DOLIT
                                   4312 	.word 0xA
                                   4313 	CALL TOR
                                   4314 DEBUG4:
                                   4315 	CALL DOLIT
                                   4316 	.word 1
                                   4317 	CALL UPLUS 
                                   4318 	CALL DROP
                                   4319 	CALL DONXT
                                   4320 	.word DEBUG4
                                   4321 	CALL EMIT
                                   4322 	CALL DOLIT
                                   4323 	.word 0x656D
                                   4324 	CALL DOLIT
                                   4325 	.word 0x100
                                   4326 	CALL UMSTA
                                   4327 	CALL SWAPP
                                   4328 	CALL DOLIT
                                   4329 	.word 0x100
                                   4330 	CALL UMSTA
                                   4331 	CALL SWAPP 
                                   4332 	CALL DROP
                                   4333 	CALL EMIT
                                   4334 	CALL EMIT
                                   4335 	CALL DOLIT
                                   4336 	.word 0x2043
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 81.
Hexadecimal [24-Bits]



                                   4337 	CALL DOLIT
                                   4338 	.word 0
                                   4339 	CALL DOLIT
                                   4340 	.word 0x100
                                   4341 	CALL UMMOD
                                   4342 	CALL EMIT
                                   4343 	CALL EMIT
                                   4344 	;JP ORIG
                                   4345 	RET
                                   4346 .endif ; WANT_DEBUG 
                                   4347 
                                   4348 
                                   4349 ;       'BOOT   ( -- a )
                                   4350 ;       The application startup vector.
      001984 19 68                 4351         .word      LINK
                           001986  4352 LINK = . 
      001986 05                    4353         .byte      5
      001987 27 42 4F 4F 54        4354         .ascii     "'BOOT"
      00198C                       4355 TBOOT:
      00198C CD 05 90         [ 4] 4356         CALL     DOVAR
      00198F 40 02                 4357         .word    APP_RUN      ;application to boot
                                   4358 
                                   4359 ;       COLD    ( -- )
                                   4360 ;       The hilevel cold start s=ence.
      001991 19 86                 4361         .word      LINK
                           001993  4362         LINK = . 
      001993 04                    4363         .byte      4
      001994 43 4F 4C 44           4364         .ascii     "COLD"
      001998                       4365 COLD:
                           000000  4366 .if WANT_DEBUG
                                   4367         CALL DEBUG
                                   4368 .endif ; WANT_DEBUG
      001998 CD 03 B4         [ 4] 4369 COLD1:  CALL     DOLIT
      00199B 00 2B                 4370         .word      UZERO
      00199D CD 03 B4         [ 4] 4371 	CALL     DOLIT
      0019A0 00 06                 4372         .word      UPP
      0019A2 CD 03 B4         [ 4] 4373         CALL     DOLIT
      0019A5 00 1A                 4374 	.word      UEND-UZERO
      0019A7 CD 0B 80         [ 4] 4375         CALL     CMOVE   ;initialize user area
                                   4376 
                                   4377 ; if APP_RUN==0 initialize with ca de 'hi'  
      0019AA 90 CE 40 02      [ 2] 4378         ldw y,APP_RUN 
      0019AE 26 0B            [ 1] 4379         jrne 0$
      0019B0 1D 00 02         [ 2] 4380         subw x,#CELLL 
      0019B3 90 AE 19 6B      [ 2] 4381         ldw y,#HI  
      0019B7 FF               [ 2] 4382         ldw (x),y
      0019B8 CD 1B 64         [ 4] 4383         call UPDATRUN 
      0019BB                       4384 0$:        
                                   4385 ; update LAST with APP_LAST 
                                   4386 ; if APP_LAST > LAST else do the opposite
      0019BB 90 CE 40 00      [ 2] 4387         ldw y,APP_LAST 
      0019BF 90 B3 1A         [ 2] 4388         cpw y,ULAST 
      0019C2 22 05            [ 1] 4389         jrugt 1$ 
                                   4390 ; save LAST at APP_LAST  
      0019C4 CD 1B 4C         [ 4] 4391         call UPDATLAST 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 82.
Hexadecimal [24-Bits]



      0019C7 20 06            [ 2] 4392         jra 2$
      0019C9                       4393 1$: ; update LAST with APP_LAST 
      0019C9 90 BF 1A         [ 2] 4394         ldw ULAST,y
      0019CC 90 BF 14         [ 2] 4395         ldw UCNTXT,y
      0019CF                       4396 2$:  
                                   4397 ; update APP_CP if < app_space 
      0019CF 90 CE 40 04      [ 2] 4398         ldw y,APP_CP  
      0019D3 90 B3 18         [ 2] 4399         cpw y,UCP   
      0019D6 24 06            [ 1] 4400         jruge 3$ 
      0019D8 CD 1B 75         [ 4] 4401         call UPDATCP
      0019DB 90 BE 18         [ 2] 4402         ldw y,UCP   
      0019DE                       4403 3$:
      0019DE 90 BF 18         [ 2] 4404         ldw UCP,y                 
                                   4405 ; update UVP with APP_VP  
                                   4406 ; if APP_VP>UVP else do the opposite 
      0019E1 90 CE 40 06      [ 2] 4407         ldw y,APP_VP 
      0019E5 90 B3 16         [ 2] 4408         cpw y,UVP 
      0019E8 22 05            [ 1] 4409         jrugt 4$
      0019EA CD 1B 8C         [ 4] 4410         call UPDATVP 
      0019ED 20 03            [ 2] 4411         jra 6$
      0019EF                       4412 4$: ; update UVP with APP_VP 
      0019EF 90 BF 16         [ 2] 4413         ldw UVP,y 
      0019F2                       4414 6$:      
      0019F2 CD 13 AF         [ 4] 4415         CALL     PRESE   ;initialize data stack and TIB
      0019F5 CD 19 8C         [ 4] 4416         CALL     TBOOT
      0019F8 CD 0B 69         [ 4] 4417         CALL     ATEXE   ;application boot
      0019FB CD 16 78         [ 4] 4418         CALL     OVERT
      0019FE CC 13 CC         [ 2] 4419         JP     QUIT    ;start interpretation
                                   4420 
                           000001  4421 WANT_MATH_CONST = 1 
                           000001  4422 .if WANT_MATH_CONST 
                                   4423         ; irrational constants 
                                   4424         ; approximation by integers ratio.
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 83.
Hexadecimal [24-Bits]



                                   4425         .include "const_ratio.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 ;--------------------------------------------------------------------
                                     20 ; Irrationals constants 
                                     21 ; expressed as 2 integers ratio
                                     22 ; aproximation. These are to be used with scaling operators */ and */MOD 
                                     23 ; REF: https://www.forth.com/starting-forth/5-fixed-point-arithmetic/
                                     24 ;---------------------------------------------------------------------
                                     25 
                                     26 ;       PI ( --  355 113 )
                                     27 ; precision 8.5e-8 
                                     28 ; usage example to compute circle area
                                     29 ; : CAREA DUP * PI */ ;
                                     30 ; 
      001A01 19 93                   31         .word LINK 
                           001A03    32         LINK=.
      001A03 02                      33         .byte 2
      001A04 50 49                   34         .ascii "PI" 
      001A06                         35 PII:
      001A06 1D 00 04         [ 2]   36         subw x,#2*CELLL 
      001A09 90 AE 01 63      [ 2]   37         ldw y,#355 
      001A0D EF 02            [ 2]   38         ldw (2,x),y 
      001A0F 90 AE 00 71      [ 2]   39         ldw y,#113 
      001A13 FF               [ 2]   40         ldw (x),y 
      001A14 81               [ 4]   41         ret 
                                     42 
                                     43 ;      SQRT2 ( -- 19601  13860 )
                                     44 ; precision: 1.5e-9 
                                     45 ; usage example to compute Voltage peek to peek from Vrms 
                                     46 ; : VPP SQRT2 */ 2 * ;
                                     47 ;
      001A15 1A 03                   48         .word LINK 
                           001A17    49         LINK=.
      001A17 05                      50         .byte 5 
      001A18 53 51 52 54 32          51         .ascii "SQRT2" 
      001A1D                         52 SQRT2:
      001A1D 1D 00 04         [ 2]   53         subw x,#2*CELLL 
      001A20 90 AE 4C 91      [ 2]   54         ldw y,#19601 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 84.
Hexadecimal [24-Bits]



      001A24 EF 02            [ 2]   55         ldw (2,x),y 
      001A26 90 AE 36 24      [ 2]   56         ldw y,#13860 
      001A2A FF               [ 2]   57         ldw (x),y 
      001A2B 81               [ 4]   58         ret 
                                     59 
                                     60 ;   SQRT3 ( -- 18817 10864 )
                                     61 ; precision: 1.1e-9
                                     62 ;
      001A2C 1A 17                   63         .word LINK 
                           001A2E    64         LINK=.
      001A2E 05                      65         .byte 5
      001A2F 53 51 52 54 33          66         .ascii "SQRT3" 
      001A34                         67 SQRT3: 
      001A34 1D 00 04         [ 2]   68     subw x,#2*CELLL 
      001A37 90 AE 49 81      [ 2]   69     ldw y,#18817 
      001A3B EF 02            [ 2]   70     ldw (2,x),y 
      001A3D 90 AE 2A 70      [ 2]   71     ldw y,#10864 
      001A41 FF               [ 2]   72     ldw (x),y 
      001A42 81               [ 4]   73     ret 
                                     74 
                                     75 ;   E ( -- 28667 10546 )
                                     76 ; precision: 5.5e-9 
                                     77 ; natural log base 
      001A43 1A 2E                   78         .word LINK 
                           001A45    79         LINK=.
      001A45 01                      80         .byte 1
      001A46 45                      81         .ascii "E" 
      001A47                         82 ENEPER:
      001A47 1D 00 04         [ 2]   83     subw x,#2*CELLL 
      001A4A 90 AE 6F FB      [ 2]   84     ldw y,#28667 
      001A4E EF 02            [ 2]   85     ldw (2,x),y 
      001A50 90 AE 29 32      [ 2]   86     ldw y,#10546 
      001A54 FF               [ 2]   87     ldw (x),y 
      001A55 81               [ 4]   88     ret 
                                     89 
                                     90 ;   SQRT10 ( -- 22936 7253 )
                                     91 ; precision: 5.7e-9 
      001A56 1A 45                   92         .word LINK 
                           001A58    93         LINK=.
      001A58 06                      94         .byte 6 
      001A59 53 51 52 54 31 30       95         .ascii "SQRT10" 
      001A5F                         96 SQRT10:
      001A5F 1D 00 04         [ 2]   97     subw x,#2*CELLL
      001A62 90 AE 59 98      [ 2]   98     ldw y,#22936 
      001A66 EF 02            [ 2]   99     ldw (2,x),y 
      001A68 90 AE 1C 55      [ 2]  100     ldw y,#7253
      001A6C FF               [ 2]  101     ldw (x),y 
      001A6D 81               [ 4]  102     ret 
                                    103 
                                    104 ;   SQRT12 ( -- 26797 25293 )
                                    105 ; precision: 1.0e-9 
                                    106 ; used in music to compute well tempered scale
      001A6E 1A 58                  107         .word LINK 
                           001A70   108         LINK=. 
      001A70 05                     109         .byte 5 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 85.
Hexadecimal [24-Bits]



      001A71 31 32 52 54 32         110         .ascii "12RT2"
      001A76                        111 RT12_2:
      001A76 1D 00 04         [ 2]  112     subw x,#2*CELLL 
      001A79 90 AE 68 AD      [ 2]  113     ldw y,#26797
      001A7D EF 02            [ 2]  114     ldw (2,x),y 
      001A7F 90 AE 62 CD      [ 2]  115     ldw y,#25293
      001A83 FF               [ 2]  116     ldw (x),y 
      001A84 81               [ 4]  117     ret 
                                    118 
                                    119 ;   LOG2s ( -- 2040 11103 )
                                    120 ; log(2)/1.6384
                                    121 ; precision: 1.1e-8
      001A85 1A 70                  122         .word LINK 
                           001A87   123         LINK=.
      001A87 05                     124         .byte 5 
      001A88 4C 4F 47 32 53         125         .ascii "LOG2S" 
      001A8D                        126 LOG2S:
      001A8D 1D 00 04         [ 2]  127     subw x,#2*CELLL
      001A90 90 AE 07 F8      [ 2]  128     ldw y,#2040 
      001A94 EF 02            [ 2]  129     ldw (2,x),y 
      001A96 90 AE 2B 5F      [ 2]  130     ldw y,#11103 
      001A9A FF               [ 2]  131     ldw (x),y 
      001A9B 81               [ 4]  132     ret 
                                    133 
                                    134 ;   LN2 ( -- 485 11464 )
                                    135 ; ln(2)/16.384 
                                    136 ; precision: 1.0e-7 
      001A9C 1A 87                  137         .word LINK 
                           001A9E   138         LINK=.
      001A9E 04                     139         .byte 4 
      001A9F 4C 4E 32 53            140         .ascii "LN2S" 
      001AA3                        141 LN2S: 
      001AA3 1D 00 04         [ 2]  142     subw x,#2*CELLL
      001AA6 90 AE 01 E5      [ 2]  143     ldw y,#485
      001AAA EF 02            [ 2]  144     ldw (2,x),y 
      001AAC 90 AE 2C C8      [ 2]  145     ldw y,#11464 
      001AB0 FF               [ 2]  146     ldw (x),y 
      001AB1 81               [ 4]  147     ret 
                                    148 
                                    149 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 86.
Hexadecimal [24-Bits]



                                   4426 .endif ; WANT_MATH_CONST
                                   4427 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 87.
Hexadecimal [24-Bits]



                                   4428         .include "flash.asm"
                                      1 ;;
                                      2 ; Copyright Jacques Deschênes 2019,2020 
                                      3 ; This file is part of stm8_eForth  
                                      4 ;
                                      5 ;     stm8_eForth is free software: you can redistribute it and/or modify
                                      6 ;     it under the terms of the GNU General Public License as published by
                                      7 ;     the Free Software Foundation, either version 3 of the License, or
                                      8 ;     (at your option) any later version.
                                      9 ;
                                     10 ;     stm8_eForth is distributed in the hope that it will be useful,
                                     11 ;     but WITHOUT ANY WARRANTY; without even the implied warranty of
                                     12 ;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                     13 ;     GNU General Public License for more details.
                                     14 ;
                                     15 ;     You should have received a copy of the GNU General Public License
                                     16 ;     along with stm8_eForth.  If not, see <http://www.gnu.org/licenses/>.
                                     17 ;;
                                     18 
                                     19 
                                     20 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     21 ;  routines to write to FLASH, EEPROM 
                                     22 ;  and OPTION 
                                     23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                     24 
                                     25 
                                     26 ;--------------------------------
                                     27 ; initialize FPTR 
                                     28 ; FP!  ( ud -- )
                                     29 ;---------------------------------
      001AB2 1A 9E                   30     .word LINK 
                           001AB4    31     LINK=.
      001AB4 03                      32     .byte 3 
      001AB5 46 50 21                33     .ascii "FP!"
      001AB8                         34 fptr_store:
      001AB8 90 93            [ 1]   35     ldw y,x
      001ABA 90 FE            [ 2]   36     ldw y,(y)
      001ABC 90 9F            [ 1]   37     ld a,yl 
      001ABE B7 32            [ 1]   38     ld FPTR,a 
      001AC0 1C 00 02         [ 2]   39     addw x,#CELLL 
      001AC3 90 93            [ 1]   40     ldw y,x 
      001AC5 90 FE            [ 2]   41     ldw y,(y)
      001AC7 90 BF 33         [ 2]   42     ldw PTR16,y
      001ACA 1C 00 02         [ 2]   43     addw x,#CELLL 
      001ACD 81               [ 4]   44     ret 
                                     45 
                                     46 ;-----------------------------------
                                     47 ; return EEPROM base address 
                                     48 ; as a double 
                                     49 ;  EEPROM  ( -- ud )
                                     50 ;-----------------------------------
      001ACE 1A B4                   51     .word LINK 
                           001AD0    52 LINK=.
      001AD0 06                      53     .byte 6 
      001AD1 45 45 50 52 4F 4D       54     .ascii "EEPROM"
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 88.
Hexadecimal [24-Bits]



      001AD7                         55 EEPROM: 
      001AD7 90 AE 40 00      [ 2]   56     ldw y,#EEPROM_BASE
      001ADB 1D 00 04         [ 2]   57     subw x,#2*CELLL 
      001ADE EF 02            [ 2]   58     ldw (2,x),y 
      001AE0 90 5F            [ 1]   59     clrw y 
      001AE2 FF               [ 2]   60     ldw (x),y 
      001AE3 81               [ 4]   61     ret
                                     62 
                                     63 ;---------------------------------
                                     64 ; return APP_LAST pointer as double
                                     65 ; EEP-LAST ( -- ud )
                                     66 ;---------------------------------
      001AE4 1A D0                   67 	.word LINK 
                           001AE6    68 	LINK=.
      001AE6 08                      69 	.byte 8 
      001AE7 45 45 50 2D 4C 41 53    70 	.ascii "EEP-LAST"
             54
      001AEF                         71 EEPLAST:
      001AEF 1D 00 04         [ 2]   72 	subw x,#2*CELLL 
      001AF2 90 AE 40 00      [ 2]   73 	ldw y,#APP_LAST 
      001AF6 EF 02            [ 2]   74 	ldw (2,x),y 
      001AF8 90 5F            [ 1]   75 	clrw y 
      001AFA FF               [ 2]   76 	ldw (x),y 
      001AFB 81               [ 4]   77 	ret 
                                     78 
                                     79 ;----------------------------------
                                     80 ; return APP_RUN pointer as double	
                                     81 ; EEP-RUN ( -- ud )
                                     82 ;-----------------------------------
      001AFC 1A E6                   83 	.word LINK 
                           001AFE    84 	LINK=.
      001AFE 07                      85 	.byte 7
      001AFF 45 45 50 2D 52 55 4E    86 	.ascii "EEP-RUN"
      001B06                         87 EEPRUN:
      001B06 1D 00 04         [ 2]   88 	subw x,#2*CELLL 
      001B09 90 AE 40 02      [ 2]   89 	ldw y,#APP_RUN 
      001B0D EF 02            [ 2]   90 	ldw (2,x),y 
      001B0F 90 5F            [ 1]   91 	clrw y 
      001B11 FF               [ 2]   92 	ldw (x),y 
      001B12 81               [ 4]   93 	ret 
                                     94 
                                     95 ;------------------------------------
                                     96 ; return APP_CP pointer as double 
                                     97 ; EEP-CP ( -- ud )
                                     98 ;------------------------------------
      001B13 1A FE                   99 	.word LINK
                           001B15   100 	LINK=.
      001B15 06                     101 	.byte 6 
      001B16 45 45 50 2D 43 50      102 	.ascii "EEP-CP"
      001B1C                        103 EEPCP:
      001B1C 1D 00 04         [ 2]  104 	subw x,#2*CELLL 
      001B1F 90 AE 40 04      [ 2]  105 	ldw y,#APP_CP  
      001B23 EF 02            [ 2]  106 	ldw (2,x),y 
      001B25 90 5F            [ 1]  107 	clrw y 
      001B27 FF               [ 2]  108 	ldw (x),y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 89.
Hexadecimal [24-Bits]



      001B28 81               [ 4]  109 	ret 
                                    110 
                                    111 ;------------------------------------
                                    112 ; return APP_VP pointer as double 
                                    113 ; EEP-VP ( -- ud )
                                    114 ;-------------------------------------
      001B29 1B 15                  115 	.word LINK
                           001B2B   116 	LINK=.
      001B2B 06                     117 	.byte 6
      001B2C 45 45 50 2D 56 50      118 	.ascii "EEP-VP"
      001B32                        119 EEPVP:
      001B32 1D 00 04         [ 2]  120 	subw x,#2*CELLL 
      001B35 90 AE 40 06      [ 2]  121 	ldw y,#APP_VP  
      001B39 EF 02            [ 2]  122 	ldw (2,x),y 
      001B3B 90 5F            [ 1]  123 	clrw y 
      001B3D FF               [ 2]  124 	ldw (x),y 
      001B3E 81               [ 4]  125 	ret 
                                    126 
                                    127 ;----------------------------------
                                    128 ; update APP_LAST with LAST 
                                    129 ; UPDAT-LAST ( -- )
                                    130 ;----------------------------------
      001B3F 1B 2B                  131 	.word LINK 
                           001B41   132 	LINK=.
      001B41 0A                     133 	.byte 10
      001B42 55 50 44 41 54 2D 4C   134 	.ascii "UPDAT-LAST"
             41 53 54
      001B4C                        135 UPDATLAST:
      001B4C CD 06 4F         [ 4]  136 	call LAST
      001B4F CD 04 3C         [ 4]  137 	call AT  
      001B52 CD 1A EF         [ 4]  138 	call EEPLAST
      001B55 CC 1C C8         [ 2]  139 	jp ee_store 
                                    140 
                                    141 ;---------------------------------
                                    142 ; update APP_RUN 
                                    143 ; UPDAT-RUN ( a -- )
                                    144 ;---------------------------------
      001B58 1B 41                  145 	.word LINK
                           001B5A   146 	LINK=.
      001B5A 09                     147 	.byte 9
      001B5B 55 50 44 41 54 2D 52   148 	.ascii "UPDAT-RUN"
             55 4E
      001B64                        149 UPDATRUN:
      001B64 CD 1B 06         [ 4]  150 	call EEPRUN
      001B67 CC 1C C8         [ 2]  151 	jp ee_store 
                                    152 	
                                    153 ;---------------------------------
                                    154 ; update APP_CP with CP 
                                    155 ; UPDAT-CP ( -- )
                                    156 ;---------------------------------
      001B6A 1B 5A                  157 	.word LINK 
                           001B6C   158 	LINK=.
      001B6C 08                     159 	.byte 8 
      001B6D 55 50 44 41 54 2D 43   160 	.ascii "UPDAT-CP"
             50
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 90.
Hexadecimal [24-Bits]



      001B75                        161 UPDATCP:
      001B75 CD 06 3F         [ 4]  162 	call CPP 
      001B78 CD 04 3C         [ 4]  163 	call AT 
      001B7B CD 1B 1C         [ 4]  164 	call EEPCP 
      001B7E CC 1C C8         [ 2]  165 	jp ee_store 
                                    166 
                                    167 ;----------------------------------
                                    168 ; update APP_VP with VP 
                                    169 ; UPDAT-VP ( -- )
                                    170 ;----------------------------------
      001B81 1B 6C                  171 	.word LINK
                           001B83   172 	LINK=.
      001B83 08                     173 	.byte 8 
      001B84 55 50 44 41 54 2D 56   174 	.ascii "UPDAT-VP" 
             50
      001B8C                        175 UPDATVP:
      001B8C CD 06 31         [ 4]  176 	call VPP 
      001B8F CD 04 3C         [ 4]  177 	call AT
      001B92 CD 1B 32         [ 4]  178 	call EEPVP 
      001B95 CC 1C C8         [ 2]  179 	jp ee_store
                                    180 	
                                    181 
                                    182 ;----------------------------------
                                    183 ; fetch integer at address over 65535
                                    184 ;  F@   ( ud -- n )
                                    185 ;----------------------------------
      001B98 1B 83                  186     .word LINK 
                           001B9A   187 LINK=.
      001B9A 02                     188     .byte 2
      001B9B 46 40                  189     .ascii "F@"
      001B9D                        190 farat:
      001B9D CD 1A B8         [ 4]  191     call fptr_store
      001BA0 92 BC 00 32      [ 5]  192     ldf a,[FPTR]
      001BA4 1D 00 02         [ 2]  193     subw x,#CELLL 
      001BA7 F7               [ 1]  194     ld (x),a 
      001BA8 90 AE 00 01      [ 2]  195     ldw y,#1
      001BAC 91 AF 00 32      [ 1]  196     ldf a,([FPTR],y)
      001BB0 E7 01            [ 1]  197     ld (1,x),a
      001BB2 81               [ 4]  198     ret 
                                    199 
                                    200 ;-------------------------------------
                                    201 ; fetch C at address over 65535 
                                    202 ; FC@ ( ud -- c)
                                    203 ;-------------------------------------
      001BB3 1B 9A                  204     .word LINK
                           001BB5   205     LINK=.
      001BB5 03                     206     .byte 3 
      001BB6 46 43 40               207     .ascii "FC@" 
      001BB9                        208 farcat:
      001BB9 CD 1A B8         [ 4]  209     call fptr_store 
      001BBC 92 BC 00 32      [ 5]  210     ldf a,[FPTR]
      001BC0 1D 00 02         [ 2]  211     subw x,#CELLL 
      001BC3 E7 01            [ 1]  212     ld (1,x),a 
      001BC5 7F               [ 1]  213     clr (x)
      001BC6 81               [ 4]  214     ret 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 91.
Hexadecimal [24-Bits]



                                    215     
                                    216 ;----------------------------------
                                    217 ; unlock EEPROM/OPT for writing/erasing
                                    218 ; wait endlessly for FLASH_IAPSR_DUL bit.
                                    219 ;  UNLKEE   ( -- )
                                    220 ;----------------------------------
      001BC7 1B B5                  221     .word LINK 
                           001BC9   222 LINK=.
      001BC9 06                     223     .byte 6 
      001BCA 55 4E 4C 4B 45 45      224     .ascii "UNLKEE"
      001BD0                        225 unlock_eeprom:
      001BD0 35 00 50 5B      [ 1]  226 	mov FLASH_CR2,#0 
      001BD4 35 FF 50 5C      [ 1]  227 	mov FLASH_NCR2,#0xFF 
      001BD8 35 AE 50 64      [ 1]  228 	mov FLASH_DUKR,#FLASH_DUKR_KEY1
      001BDC 35 56 50 64      [ 1]  229     mov FLASH_DUKR,#FLASH_DUKR_KEY2
      001BE0 72 07 50 5F FB   [ 2]  230 	btjf FLASH_IAPSR,#FLASH_IAPSR_DUL,.
      001BE5 81               [ 4]  231 	ret
                                    232 
                                    233 ;----------------------------------
                                    234 ; unlock FLASH for writing/erasing
                                    235 ; wait endlessly for FLASH_IAPSR_PUL bit.
                                    236 ; UNLKFL  ( -- )
                                    237 ;----------------------------------
      001BE6 1B C9                  238     .word LINK 
                           001BE8   239 LINK=. 
      001BE8 06                     240     .byte 6 
      001BE9 55 4E 4C 4B 46 4C      241     .ascii "UNLKFL"    
      001BEF                        242 unlock_flash:
      001BEF 35 00 50 5B      [ 1]  243 	mov FLASH_CR2,#0 
      001BF3 35 FF 50 5C      [ 1]  244 	mov FLASH_NCR2,#0xFF 
      001BF7 35 56 50 62      [ 1]  245 	mov FLASH_PUKR,#FLASH_PUKR_KEY1
      001BFB 35 AE 50 62      [ 1]  246 	mov FLASH_PUKR,#FLASH_PUKR_KEY2
      001BFF 72 03 50 5F FB   [ 2]  247 	btjf FLASH_IAPSR,#FLASH_IAPSR_PUL,.
      001C04 81               [ 4]  248 	ret
                                    249 
                                    250 ;-----------------------------
                                    251 ; unlock FLASH or EEPROM 
                                    252 ; according to FPTR address 
                                    253 ;  UNLOCK ( -- )
                                    254 ;-----------------------------
      001C05 1B E8                  255 	.word LINK 
                           001C07   256 	LINK=.
      001C07 06                     257 	.byte 6
      001C08 55 4E 4C 4F 43 4B      258 	.ascii "UNLOCK"
      001C0E                        259 unlock:
                                    260 ; put addr[15:0] in Y, for bounds check.
      001C0E 90 BE 33         [ 2]  261 	ldw y,PTR16   ; Y=addr15:0
                                    262 ; check addr[23:16], if <> 0 then it is extened flash memory
      001C11 3D 32            [ 1]  263 	tnz FPTR 
      001C13 26 16            [ 1]  264 	jrne 4$
      001C15 90 A3 80 00      [ 2]  265     cpw y,#FLASH_BASE
      001C19 24 10            [ 1]  266     jruge 4$
      001C1B 90 A3 40 00      [ 2]  267 	cpw y,#EEPROM_BASE  
      001C1F 25 0D            [ 1]  268     jrult 9$
      001C21 90 A3 48 7F      [ 2]  269 	cpw y,#OPTION_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 92.
Hexadecimal [24-Bits]



      001C25 22 07            [ 1]  270 	jrugt 9$
      001C27 CD 1B D0         [ 4]  271 	call unlock_eeprom
      001C2A 81               [ 4]  272 	ret 
      001C2B CD 1B EF         [ 4]  273 4$: call unlock_flash
      001C2E 81               [ 4]  274 9$: ret 
                                    275 
                                    276 ;-------------------------
                                    277 ; lock write access to 
                                    278 ; FLASH and EEPROM 
                                    279 ; LOCK ( -- )
                                    280 ;-------------------------
      001C2F 1C 07                  281 	.word LINK 
                           001C31   282 	LINK=.
      001C31 04                     283 	.byte 4 
      001C32 4C 4F 43 4B            284 	.ascii "LOCK" 
      001C36                        285 lock: 
      001C36 72 13 50 5F      [ 1]  286 	bres FLASH_IAPSR,#FLASH_IAPSR_PUL
      001C3A 72 17 50 5F      [ 1]  287 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001C3E 81               [ 4]  288 	ret 
                                    289 
                                    290 ;-------------------------
                                    291 ; increment FPTR 
                                    292 ; INC-FPTR ( -- )
                                    293 ;-------------------------
      001C3F 1C 31                  294 	.word LINK 
                           001C41   295 	LINK=. 
      001C41 08                     296 	.byte 8 
      001C42 49 4E 43 2D 46 50 54   297 	.ascii "INC-FPTR" 
             52
      001C4A                        298 inc_fptr:
      001C4A 3C 34            [ 1]  299 	inc PTR8 
      001C4C 26 08            [ 1]  300 	jrne 1$
      001C4E 90 BE 32         [ 2]  301 	ldw y,FPTR 
      001C51 90 5C            [ 2]  302 	incw y 
      001C53 90 BF 32         [ 2]  303 	ldw FPTR,y 
      001C56 81               [ 4]  304 1$: ret 
                                    305 
                                    306 
                                    307 ;----------------------------
                                    308 ; write a byte at address pointed 
                                    309 ; by FPTR and increment FPTR.
                                    310 ; Expect pointer already initialized 
                                    311 ; and memory unlocked 
                                    312 ; WR-BYTE ( c -- )
                                    313 ;----------------------------
                                    314 
      001C57 1C 41                  315 	.word LINK 
                           001C59   316 	LINK=. 
      001C59 07                     317 	.byte 7 
      001C5A 57 52 2D 42 59 54 45   318 	.ascii "WR-BYTE" 
                                    319 
      001C61                        320 write_byte:
      001C61 90 93            [ 1]  321 	ldw y,x 
      001C63 90 FE            [ 2]  322 	ldw y,(y)
      001C65 1C 00 02         [ 2]  323 	addw x,#CELLL 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 93.
Hexadecimal [24-Bits]



      001C68 90 9F            [ 1]  324 	ld a,yl
      001C6A 92 BD 00 32      [ 4]  325 	ldf [FPTR],a
      001C6E 72 05 50 5F FB   [ 2]  326 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001C73 20 D5            [ 2]  327 	jra inc_fptr 
                                    328 
                                    329 
                                    330 
                                    331 ;---------------------------------------
                                    332 ; write a byte to FLASH or EEPROM/OPTION  
                                    333 ; EEC!  (c ud -- )
                                    334 ;---------------------------------------
      001C75 1C 59                  335     .word LINK 
                           001C77   336 	LINK=.
      001C77 04                     337     .byte 4 
      001C78 45 45 43 21            338     .ascii "EEC!"
                                    339 	; local variables 
                           000001   340 	BTW = 1   ; byte to write offset on stack
                           000002   341     OPT = 2 
                           000002   342 	VSIZE = 2
      001C7C                        343 ee_cstore:
      001C7C 52 02            [ 2]  344 	sub sp,#VSIZE
      001C7E CD 1A B8         [ 4]  345     call fptr_store
      001C81 E6 01            [ 1]  346 	ld a,(1,x)
      001C83 43               [ 1]  347 	cpl a 
      001C84 6B 01            [ 1]  348 	ld (BTW,sp),a ; byte to write 
      001C86 0F 02            [ 1]  349 	clr (OPT,sp)  ; OPTION flag
      001C88 CD 1C 0E         [ 4]  350 	call unlock 
                                    351 	; check if option
      001C8B 3D 32            [ 1]  352 	tnz FPTR 
      001C8D 26 19            [ 1]  353 	jrne 2$
      001C8F 90 BE 33         [ 2]  354 	ldw y,PTR16 
      001C92 90 A3 48 00      [ 2]  355 	cpw y,#OPTION_BASE
      001C96 2B 10            [ 1]  356 	jrmi 2$
      001C98 90 A3 48 80      [ 2]  357 	cpw y,#OPTION_END+1
      001C9C 2A 0A            [ 1]  358 	jrpl 2$
      001C9E 03 02            [ 1]  359 	cpl (OPT,sp)
                                    360 	; OPTION WRITE require this unlock 
      001CA0 72 1E 50 5B      [ 1]  361     bset FLASH_CR2,#FLASH_CR2_OPT
      001CA4 72 1F 50 5C      [ 1]  362     bres FLASH_NCR2,#FLASH_CR2_OPT 
      001CA8                        363 2$: 
      001CA8 CD 1C 61         [ 4]  364 	call write_byte 	
      001CAB 0D 02            [ 1]  365 	tnz (OPT,sp)
      001CAD 27 0D            [ 1]  366 	jreq 3$ 
      001CAF 7B 01            [ 1]  367     ld a,(BTW,sp)
      001CB1 90 5F            [ 1]  368     clrw y
      001CB3 90 97            [ 1]  369 	ld yl,a 
      001CB5 1D 00 02         [ 2]  370 	subw x,#CELLL 
      001CB8 FF               [ 2]  371 	ldw (x),y 
      001CB9 CD 1C 61         [ 4]  372 	call write_byte
      001CBC                        373 3$: 
      001CBC CD 1C 36         [ 4]  374 	call lock 
      001CBF 5B 02            [ 2]  375 	addw sp,#VSIZE 
      001CC1 81               [ 4]  376     ret
                                    377 
                                    378 ;------------------------------
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 94.
Hexadecimal [24-Bits]



                                    379 ; write integer in FLASH|EEPROM
                                    380 ; EE! ( n ud -- )
                                    381 ;------------------------------
      001CC2 1C 77                  382 	.word LINK 
                           001CC4   383 	LINK=.
      001CC4 03                     384 	.byte 3 
      001CC5 45 45 21               385 	.ascii "EE!"
      001CC8                        386 ee_store:
      001CC8 CD 1A B8         [ 4]  387 	call fptr_store 
      001CCB CD 1C 0E         [ 4]  388 	call unlock 
      001CCE 90 93            [ 1]  389 	ldw y,x 
      001CD0 90 FE            [ 2]  390 	ldw y,(y)
      001CD2 90 89            [ 2]  391 	pushw y 
      001CD4 90 5E            [ 1]  392 	swapw y 
      001CD6 FF               [ 2]  393 	ldw (x),y 
      001CD7 CD 1C 61         [ 4]  394 	call write_byte 
      001CDA 90 85            [ 2]  395 	popw y 
      001CDC 1D 00 02         [ 2]  396 	subw x,#CELLL
      001CDF FF               [ 2]  397 	ldw (x),y 
      001CE0 CD 1C 61         [ 4]  398 	call write_byte
      001CE3 CC 1C 36         [ 2]  399 	jp lock 
                                    400 
                                    401 
                                    402 ;----------------------------
                                    403 ; Erase flash memory row 
                                    404 ; stm8s208 as 128 bytes rows
                                    405 ; ROW-ERASE ( ud -- )
                                    406 ;----------------------------
      001CE6 1C C4                  407 	.word LINK 
                           001CE8   408 	LINK=. 
      001CE8 09                     409 	.byte 9 
      001CE9 52 4F 57 2D 45 52 41   410 	.ascii "ROW-ERASE" 
             53 45
      001CF2                        411 row_erase:
      001CF2 CD 1A B8         [ 4]  412 	call fptr_store
                                    413 ;code must be execute from RAM 
                                    414 ;copy routine to PAD 
      001CF5 1D 00 02         [ 2]  415 	subw x,#CELLL 
      001CF8 90 AE 1D 3F      [ 2]  416 	ldw y,#row_erase_proc
      001CFC FF               [ 2]  417 	ldw (x),y 
      001CFD CD 0B 44         [ 4]  418 	call PAD 
      001D00 90 AE 1D 66      [ 2]  419 	ldw y,#row_erase_proc_end 
      001D04 72 A2 1D 3F      [ 2]  420 	subw y,#row_erase_proc
      001D08 1D 00 02         [ 2]  421 	subw x,#CELLL 
      001D0B FF               [ 2]  422 	ldw (x),y 
      001D0C CD 0B 80         [ 4]  423 	call CMOVE 
      001D0F                        424 block_erase:
      001D0F 90 BE 33         [ 2]  425 	ldw y,FPTR+1
      001D12 90 A3 21 80      [ 2]  426 	cpw y,#app_space 
      001D16 2A 13            [ 1]  427 	jrpl erase_flash 
                                    428 ; erase EEPROM block
      001D18 90 A3 40 00      [ 2]  429 	cpw y,#EEPROM_BASE 
      001D1C 24 01            [ 1]  430 	jruge 1$
      001D1E 81               [ 4]  431 	ret ; bad address 
      001D1F 90 A3 47 FF      [ 2]  432 1$: cpw y,#EEPROM_END 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 95.
Hexadecimal [24-Bits]



      001D23 23 01            [ 2]  433 	jrule 2$ 
      001D25 81               [ 4]  434 	ret ; bad address 
      001D26                        435 2$:	
      001D26 CD 1B D0         [ 4]  436 	call unlock_eeprom 
      001D29 20 03            [ 2]  437 	jra proceed_erase
                                    438 ; erase flash block:
      001D2B                        439 erase_flash:
      001D2B CD 1B EF         [ 4]  440 	call unlock_flash 
      001D2E                        441 proceed_erase:
      001D2E CD 0B 44         [ 4]  442 	call PAD 
      001D31 90 93            [ 1]  443 	ldw y,x
      001D33 90 FE            [ 2]  444 	ldw y,(y)
      001D35 1C 00 02         [ 2]  445 	addw x,#CELLL  
      001D38 90 FD            [ 4]  446 	call (y) 
      001D3A 72 17 50 5F      [ 1]  447 	bres FLASH_IAPSR,#FLASH_IAPSR_DUL
      001D3E 81               [ 4]  448 	ret 
                                    449 
                                    450 ; this routine is to be copied to PAD 
      001D3F                        451 row_erase_proc:
      001D3F 35 20 50 5B      [ 1]  452 	mov FLASH_CR2,#(1<<FLASH_CR2_ERASE) 
      001D43 35 DF 50 5C      [ 1]  453 	mov FLASH_NCR2,#~(1<<FLASH_CR2_ERASE)
      001D47 4F               [ 1]  454 	clr a 
      001D48 90 5F            [ 1]  455 	clrw y 
      001D4A 91 A7 00 32      [ 1]  456 	ldf ([FPTR],y),a
      001D4E 90 5C            [ 2]  457     incw y
      001D50 91 A7 00 32      [ 1]  458 	ldf ([FPTR],y),a
      001D54 90 5C            [ 2]  459     incw y
      001D56 91 A7 00 32      [ 1]  460 	ldf ([FPTR],y),a
      001D5A 90 5C            [ 2]  461     incw y
      001D5C 91 A7 00 32      [ 1]  462 	ldf ([FPTR],y),a
      001D60 72 05 50 5F FB   [ 2]  463 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,.
      001D65 81               [ 4]  464 	ret
      001D66                        465 row_erase_proc_end:
                                    466 
                                    467 
                                    468 ;-----------------------------------
                                    469 ; block programming must be 
                                    470 ; executed from RAM 
                                    471 ; initial contidions: 
                                    472 ; 		memory unlocked
                                    473 ;       FPTR initialized 
                                    474 ; input: 
                                    475 ;    x   buffer address 
                                    476 ;-----------------------------------
                           000001   477 	BCNT=1 
      001D66                        478 copy_buffer:
      001D66 4B 80            [ 1]  479 	push #BLOCK_SIZE  
                                    480 ;enable block programming 
      001D68 72 10 50 5B      [ 1]  481 	bset FLASH_CR2,#FLASH_CR2_PRG 
      001D6C 72 11 50 5C      [ 1]  482 	bres FLASH_NCR2,#FLASH_CR2_PRG
      001D70 90 5F            [ 1]  483 	clrw y
      001D72 F6               [ 1]  484 1$:	ld a,(x)
      001D73 91 A7 00 32      [ 1]  485 	ldf ([FPTR],y),a
      001D77 5C               [ 2]  486 	incw x 
      001D78 90 5C            [ 2]  487 	incw y 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 96.
Hexadecimal [24-Bits]



      001D7A 0A 01            [ 1]  488 	dec (BCNT,sp)
      001D7C 26 F4            [ 1]  489 	jrne 1$
                                    490 ; wait EOP bit 
      001D7E 72 05 50 5F FB   [ 2]  491 	btjf FLASH_IAPSR,#FLASH_IAPSR_EOP,. 
      001D83 84               [ 1]  492 	pop a ; remove BCNT from stack 
      001D84 81               [ 4]  493 	ret 
      001D85                        494 copy_buffer_end:
                                    495 
                                    496 ;-------------------------
                                    497 ; move program_row to RAM 
                                    498 ; in TIB 
                                    499 ;------------------------
      001D85                        500 copy_prog_to_ram:
      001D85 1D 00 06         [ 2]  501 	subw x,#6
      001D88 90 AE 1D 66      [ 2]  502 	ldw y,#copy_buffer 
      001D8C EF 04            [ 2]  503 	ldw (4,x),y 
      001D8E 90 AE 17 00      [ 2]  504 	ldw y,#TIBBASE
      001D92 EF 02            [ 2]  505 	ldw (2,x),y 
      001D94 90 AE 1D 85      [ 2]  506 	ldw y,#copy_buffer_end 
      001D98 72 A2 1D 66      [ 2]  507 	subw y,#copy_buffer  
      001D9C FF               [ 2]  508 	ldw (x),y 
      001D9D CD 0B 80         [ 4]  509 	call CMOVE 
      001DA0 81               [ 4]  510 	ret 
                                    511 
                                    512 
                                    513 ;-----------------------------
                                    514 ; write a row in FLASH/EEPROM 
                                    515 ; WR-ROW ( a ud -- )
                                    516 ; a -> address 128 byte buffer to write 
                                    517 ; ud ->  row address in FLASH|EEPROM 
                                    518 ;-----------------------------
      001DA1 1C E8                  519 	.word LINK 
                           001DA3   520 	LINK=.
      001DA3 06                     521 	.byte 6 
      001DA4 57 52 2D 52 4F 57      522 	.ascii "WR-ROW"
      001DAA                        523 write_row:
      001DAA CD 1A B8         [ 4]  524 	call fptr_store
                                    525 ; align to FLASH block 
      001DAD A6 80            [ 1]  526 	ld a,#0x80 
      001DAF B4 34            [ 1]  527 	and a,PTR8 
      001DB1 B7 34            [ 1]  528 	ld PTR8,a  
      001DB3 CD 1D 85         [ 4]  529 	call copy_prog_to_ram
      001DB6 CD 1C 0E         [ 4]  530 	call unlock
      001DB9 90 93            [ 1]  531 	ldw y,x 
      001DBB 90 FE            [ 2]  532 	ldw y,(y)
      001DBD 1C 00 02         [ 2]  533 	addw x,#CELLL 
      001DC0 89               [ 2]  534 	pushw x 
      001DC1 93               [ 1]  535 	ldw x,y ; buffer address in x 
      001DC2 CD 17 00         [ 4]  536 	call TIBBASE
      001DC5 CD 1C 36         [ 4]  537 	call lock
      001DC8 85               [ 2]  538 	popw x 
      001DC9 81               [ 4]  539 	ret 
                                    540 
                                    541 ;-------------------------------------
                                    542 ; change value of OPTION register 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 97.
Hexadecimal [24-Bits]



                                    543 ; SET-OPT (c n -- ) 
                                    544 ; c new value.
                                    545 ; n OPT  number {1..7}
                                    546 ;--------------------------------------
      001DCA 1D A3                  547 		.word LINK 
                           001DCC   548 		LINK=.
      001DCC 07                     549 		.byte 7 
      001DCD 53 45 54 2D 4F 50 54   550 		.ascii "SET-OPT" 
      001DD4                        551 set_option: 
      001DD4 90 93            [ 1]  552 		ldw y,x 
      001DD6 90 FE            [ 2]  553 		ldw y,(y)
      001DD8 27 06            [ 1]  554 		jreq 1$
      001DDA 90 A3 00 07      [ 2]  555 		cpw y,#7 
      001DDE 23 04            [ 2]  556 		jrule 2$ 
                                    557 ; invalid OPTION number 		
      001DE0 1C 00 04         [ 2]  558 1$:		addw x,#2*CELLL
      001DE3 81               [ 4]  559 		ret
      001DE4 90 58            [ 2]  560 2$:		sllw y 
      001DE6 72 A9 47 FF      [ 2]  561 		addw y,#OPTION_BASE-1
      001DEA FF               [ 2]  562 		ldw (x),y 
      001DEB 1D 00 02         [ 2]  563 		subw x,#CELLL 
      001DEE 90 5F            [ 1]  564 		clrw y 
      001DF0 FF               [ 2]  565 		ldw (x),y 
      001DF1 CD 1C 7C         [ 4]  566 		call ee_cstore
      001DF4 81               [ 4]  567 		ret 
                                    568 
                                    569 
                                    570 
                                    571 ;--------------------------------------
                                    572 ; reset system to its original state 
                                    573 ; before any user modification
                                    574 ; PRISTINE ( -- )
                                    575 ;-------------------------------------
      001DF5 1D CC                  576 	.word LINK  
                           001DF7   577 	LINK=.
      001DF7 08                     578 	.byte 8 
      001DF8 50 52 49 53 54 49 4E   579 	.ascii "PRISTINE"
             45
      001E00                        580 pristine:
                                    581 ;;; erase EEPROM
      001E00 CD 1A D7         [ 4]  582 	call EEPROM 
      001E03 CD 06 C9         [ 4]  583 1$:	call DDUP 
      001E06 CD 1C F2         [ 4]  584 	call row_erase
      001E09 90 93            [ 1]  585 	ldw y,x 
      001E0B 90 EE 02         [ 2]  586 	ldw y,(2,y)
      001E0E 72 A9 00 80      [ 2]  587 	addw y,#BLOCK_SIZE
      001E12 EF 02            [ 2]  588 	ldw (2,x),y
      001E14 90 A3 48 00      [ 2]  589 	cpw y,#OPTION_BASE 
      001E18 25 E9            [ 1]  590 	jrult 1$
                                    591 ;;; reset OPTION to default values
      001E1A 90 AE 00 01      [ 2]  592 	ldw y,#1 ; OPT1 
      001E1E FF               [ 2]  593 2$:	ldw (x),y   
      001E1F 90 5F            [ 1]  594 	clrw y 
      001E21 EF 02            [ 2]  595 	ldw (2,x),y  ; ( 0 1 -- ) 
      001E23 CD 06 C9         [ 4]  596 	call DDUP    ; ( 0 1 0 1 -- )  
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 98.
Hexadecimal [24-Bits]



      001E26 CD 1D D4         [ 4]  597 	call set_option
      001E29 90 93            [ 1]  598 	ldw y,x 
      001E2B 90 FE            [ 2]  599 	ldw y,(y)
      001E2D 90 5C            [ 2]  600 	incw y  ; next OPTION 
      001E2F 90 A3 00 08      [ 2]  601 	cpw y,#8 
      001E33 25 E9            [ 1]  602 	jrult 2$
                                    603 ;;; erase first row of app_space 	
      001E35 90 AE 21 80      [ 2]  604 	ldw y,#app_space
      001E39 EF 02            [ 2]  605 	ldw (2,x),y  
      001E3B 90 5F            [ 1]  606 	clrw y 
      001E3D FF               [ 2]  607 	ldw (x),y ; ( app_space 0 -- )
      001E3E CD 1C F2         [ 4]  608 	call row_erase 
                                    609 ; reset interrupt vectors 
      001E41 1D 00 02         [ 2]  610 	subw x,#CELLL 
      001E44 90 5F            [ 1]  611 	clrw y  
      001E46 FF               [ 2]  612 4$:	ldw (x),y  ; ( n -- ) int# 
      001E47 CD 04 E3         [ 4]  613 	call DUPP  
      001E4A CD 1E 67         [ 4]  614 	call reset_vector
      001E4D 90 93            [ 1]  615 	ldw y,x 
      001E4F 90 FE            [ 2]  616 	ldw y,(y)
      001E51 90 5C            [ 2]  617 	incw y   ; next vector 
      001E53 90 A3 00 19      [ 2]  618 	cpw y,#25 
      001E57 25 ED            [ 1]  619 	jrult 4$
      001E59 CC 00 00         [ 2]  620 	jp NonHandledInterrupt ; reset MCU
                                    621 
                                    622 ;------------------------------
                                    623 ; reset an interrupt vector 
                                    624 ; to its initial value 
                                    625 ; i.e. NonHandledInterrupt
                                    626 ; RST-IVEC ( n -- )
                                    627 ;-----------------------------
      001E5C 1D F7                  628 	.word LINK 
                           001E5E   629 	LINK=. 
      001E5E 08                     630 	.byte 8 
      001E5F 52 53 54 2D 49 56 45   631 	.ascii "RST-IVEC"
             43
      001E67                        632 reset_vector:
      001E67 90 93            [ 1]  633 	ldw y,x
      001E69 1C 00 02         [ 2]  634 	addw x,#CELLL 
      001E6C 90 FE            [ 2]  635 	ldw y,(y)
      001E6E 90 A3 00 17      [ 2]  636 	cpw y,#23 
      001E72 27 3A            [ 1]  637 	jreq 9$
      001E74 90 A3 00 1D      [ 2]  638 	cpw y,#29 ; last vector
      001E78 22 34            [ 1]  639 	jrugt 9$  
      001E7A 90 58            [ 2]  640 	sllw y 
      001E7C 90 58            [ 2]  641 	sllw y 
      001E7E 72 A9 80 08      [ 2]  642 	addw y,#0x8008 ; irq0 address 
      001E82 90 BF 24         [ 2]  643 	ldw YTEMP,y
      001E85 1D 00 06         [ 2]  644 	subw x,#3*CELLL 
      001E88 EF 02            [ 2]  645 	ldw (2,x),y 
      001E8A 90 5F            [ 1]  646 	clrw y
      001E8C FF               [ 2]  647 	ldw (x),y 
      001E8D A6 82            [ 1]  648 	ld a,#0x82 
      001E8F 90 95            [ 1]  649 	ld yh,a
      001E91 EF 04            [ 2]  650 	ldw (4,x),y
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 99.
Hexadecimal [24-Bits]



      001E93 CD 1C C8         [ 4]  651 	call ee_store
      001E96 1D 00 06         [ 2]  652 	subw x,#3*CELLL
      001E99 90 5F            [ 1]  653 	clrw y 
      001E9B FF               [ 2]  654 	ldw (x),y 
      001E9C 90 AE 00 00      [ 2]  655 	ldw y,#NonHandledInterrupt
      001EA0 EF 04            [ 2]  656 	ldw (4,x),y 
      001EA2 90 BE 24         [ 2]  657 	ldw y,YTEMP  
      001EA5 72 A9 00 02      [ 2]  658 	addw y,#2
      001EA9 EF 02            [ 2]  659 	ldw (2,x),y 
      001EAB CD 1C C8         [ 4]  660 	call ee_store
      001EAE 81               [ 4]  661 9$:	ret 
                                    662 
                                    663 
                                    664 ;------------------------------
                                    665 ; all interrupt vector with 
                                    666 ; an address >= a are resetted 
                                    667 ; to default
                                    668 ; CHKIVEC ( a -- )
                                    669 ;------------------------------
      001EAF 1E 5E                  670 	.word LINK 
                           001EB1   671 	LINK=.
      001EB1 07                     672 	.byte 7
      001EB2 43 48 4B 49 56 45 43   673 	.ascii "CHKIVEC"
                                    674 ;local variables 
                           000001   675 	SSP=1
                           000003   676 	CADR=3
                           000005   677 	OFS=5
                           000006   678 	VSIZE=6  
      001EB9                        679 CHKIVEC:
      001EB9 52 06            [ 2]  680 	sub sp,#VSIZE ;alloc local variables 
      001EBB 90 93            [ 1]  681 	ldw y,x 
      001EBD 90 FE            [ 2]  682 	ldw y,(y)
      001EBF 17 03            [ 2]  683 	ldw (CADR,sp),y ; ca 
      001EC1 1F 01            [ 2]  684 	ldw (SSP,sp),x 
      001EC3 AE 80 0A         [ 2]  685 	ldw x,#0x800a ; irq0 address 
      001EC6 BF 33            [ 2]  686 	ldw PTR16,X
      001EC8 AE FF FC         [ 2]  687 	ldw x,#-4 
      001ECB 1C 00 04         [ 2]  688 1$:	addw x,#4
      001ECE A3 00 78         [ 2]  689 	cpw x,#30*4 ; irq0-29 
      001ED1 27 22            [ 1]  690 	jreq 9$
      001ED3 90 93            [ 1]  691 	ldw y,x  
      001ED5 91 D6 33         [ 4]  692 	ld a,([PTR16],y)
      001ED8 11 03            [ 1]  693 	cp a,(CADR,sp)
      001EDA 25 EF            [ 1]  694 	jrult 1$
      001EDC 90 5C            [ 2]  695 	incw y 
      001EDE 91 D6 33         [ 4]  696 	ld a,([PTR16],y)
      001EE1 11 04            [ 1]  697 	cp a,(CADR+1,sp) 
      001EE3 25 E6            [ 1]  698 	jrult 1$ 
      001EE5 1F 05            [ 2]  699 	ldw (OFS,sp),x 
      001EE7 54               [ 2]  700 	srlw x
      001EE8 54               [ 2]  701 	srlw x 
      001EE9 90 93            [ 1]  702 	ldw y,x 
      001EEB 1E 01            [ 2]  703 	ldw x,(SSP,sp)
      001EED FF               [ 2]  704 	ldw (x),y
      001EEE CD 1E 67         [ 4]  705 	call reset_vector
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 100.
Hexadecimal [24-Bits]



      001EF1 1E 05            [ 2]  706 	ldw x,(OFS,sp) 
      001EF3 20 D6            [ 2]  707 	jra 1$
      001EF5 1E 01            [ 2]  708 9$:	ldw x,(SSP,sp) 
      001EF7 1C 00 02         [ 2]  709 	addw x,#CELLL 
      001EFA 5B 06            [ 2]  710 	addw sp,#VSIZE ; drop local variables  
      001EFC 81               [ 4]  711 	ret 
                                    712 
                                    713 ;------------------------------
                                    714 ; set interrupt vector 
                                    715 ; SET-IVEC ( ud n -- )
                                    716 ;  ud Handler address
                                    717 ;  n  vector # 0 .. 29 
                                    718 ;-----------------------------
      001EFD 1E B1                  719 	.word LINK
                           001EFF   720 	LINK=.
      001EFF 08                     721 	.byte 8 
      001F00 53 45 54 2D 49 56 45   722 	.ascii "SET-IVEC" 
             43
      001F08                        723 set_vector:
      001F08 90 93            [ 1]  724     ldw y,x 
      001F0A 1C 00 02         [ 2]  725 	addw x,#CELLL 
      001F0D 90 FE            [ 2]  726 	ldw y,(y) ; vector #
      001F0F 90 A3 00 1D      [ 2]  727 	cpw y,#29 ; last vector
      001F13 23 04            [ 2]  728 	jrule 2$
      001F15 1C 00 04         [ 2]  729 	addw x,#2*CELLL 
      001F18 81               [ 4]  730 	ret
      001F19 90 58            [ 2]  731 2$:	sllw y 
      001F1B 90 58            [ 2]  732 	sllw y 
      001F1D 72 A9 80 08      [ 2]  733 	addw y,#0X8008 ; IRQ0 vector address 
      001F21 90 BF 24         [ 2]  734 	ldw YTEMP,y ; vector address 
      001F24 A6 82            [ 1]  735 	ld a,#0x82 
      001F26 90 95            [ 1]  736 	ld yh,a 
      001F28 E6 01            [ 1]  737 	ld a,(1,x) ; isr address bits 23..16 
      001F2A 90 97            [ 1]  738 	ld yl,a 
                                    739 ;  write 0x82 + most significant byte of int address	
      001F2C 1D 00 06         [ 2]  740 	subw x,#3*CELLL 
      001F2F EF 04            [ 2]  741 	ldw (4,x),y 
      001F31 90 BE 24         [ 2]  742 	ldw y,YTEMP
      001F34 EF 02            [ 2]  743 	ldw (2,x),y ; vector address 
      001F36 90 5F            [ 1]  744 	clrw y 
      001F38 FF               [ 2]  745 	ldw (x),y   ; as a double 
      001F39 CD 1C C8         [ 4]  746 	call ee_store 
      001F3C 90 93            [ 1]  747 	ldw y,x 
      001F3E 90 EE 02         [ 2]  748 	ldw y,(2,y) ; bits 15..0 int vector 
      001F41 1D 00 06         [ 2]  749 	subw x,#3*CELLL 
      001F44 EF 04            [ 2]  750 	ldw (4,x),y 
      001F46 90 BE 24         [ 2]  751 	ldw y,YTEMP 
      001F49 72 A9 00 02      [ 2]  752 	addw y,#2 
      001F4D EF 02            [ 2]  753 	ldw (2,x),y 
      001F4F 90 5F            [ 1]  754 	clrw y 
      001F51 FF               [ 2]  755 	ldw (x),y 
      001F52 CD 1C C8         [ 4]  756 	call ee_store
      001F55 1C 00 04         [ 2]  757 	addw x,#2*CELLL  
      001F58 81               [ 4]  758 9$: ret 
                                    759 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 101.
Hexadecimal [24-Bits]



                                    760 
                                    761 ;------------------------
                                    762 ; Compile word to flash
                                    763 ; EE, (w -- )
                                    764 ;-----------------------
      001F59 1E FF                  765 	.word LINK
                           001F5B   766 	LINK=.
      001F5B 03                     767 	.byte 3
      001F5C 45 45 2C               768 	.ascii "EE,"
      001F5F                        769 ee_comma:
      001F5F 1D 00 04         [ 2]  770 	subw x,#2*CELLL 
      001F62 90 BE 18         [ 2]  771 	ldw y,UCP
      001F65 90 89            [ 2]  772 	pushw y 
      001F67 EF 02            [ 2]  773 	ldw (2,x),y 
      001F69 90 5F            [ 1]  774 	clrw y 
      001F6B FF               [ 2]  775 	ldw (x),y
      001F6C CD 1C C8         [ 4]  776 	call ee_store
      001F6F 90 85            [ 2]  777 	popw y 
      001F71 72 A9 00 02      [ 2]  778 	addw y,#2
      001F75 90 BF 18         [ 2]  779 	ldw UCP,y
      001F78 81               [ 4]  780 	ret 
                                    781 
                                    782 
                                    783 ;-------------------------
                                    784 ; Compile byte to flash 
                                    785 ; EEC, ( c -- )	
                                    786 ;-------------------------
      001F79 1F 5B                  787 	.word LINK 
                           001F7B   788 	LINK=.
      001F7B 04                     789 	.byte 4 
      001F7C 45 45 43 2C            790 	.ascii "EEC,"
      001F80                        791 ee_ccomma:
      001F80 1D 00 04         [ 2]  792 	subw x,#2*CELLL 
      001F83 90 BE 18         [ 2]  793 	ldw y,UCP
      001F86 90 89            [ 2]  794 	pushw y 
      001F88 EF 02            [ 2]  795 	ldw (2,x),y 
      001F8A 90 5F            [ 1]  796 	clrw y 
      001F8C FF               [ 2]  797 	ldw (x),y
      001F8D CD 1C 7C         [ 4]  798 	call ee_cstore
      001F90 90 85            [ 2]  799 	popw y 
      001F92 90 5C            [ 2]  800 	incw y 
      001F94 90 BF 18         [ 2]  801 	ldw UCP,y
      001F97 81               [ 4]  802 	ret 
                                    803 
                                    804 
                                    805 ;--------------------------
                                    806 ; copy FLASH block to ROWBUF
                                    807 ; ROW2BUF ( ud -- )
                                    808 ;--------------------------
      001F98 1F 7B                  809 	.word LINK 
                           001F9A   810 	LINK=.
      001F9A 07                     811 	.byte 7 
      001F9B 52 4F 57 32 42 55 46   812 	.ascii "ROW2BUF"
      001FA2                        813 ROW2BUF: 
      001FA2 CD 1A B8         [ 4]  814 	call fptr_store 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 102.
Hexadecimal [24-Bits]



      001FA5 A6 80            [ 1]  815 	ld a,#BLOCK_SIZE
      001FA7 88               [ 1]  816 	push a 
      001FA8 B4 34            [ 1]  817 	and a,PTR8 ; block align 
      001FAA B7 34            [ 1]  818 	ld PTR8,a
      001FAC 90 AE 16 80      [ 2]  819 	ldw y,#ROWBUFF 
      001FB0 92 BC 00 32      [ 5]  820 1$: ldf a,[FPTR]
      001FB4 90 F7            [ 1]  821 	ld (y),a
      001FB6 CD 1C 4A         [ 4]  822 	call inc_fptr
      001FB9 90 5C            [ 2]  823 	incw y 
      001FBB 0A 01            [ 1]  824 	dec (1,sp)
      001FBD 26 F1            [ 1]  825 	jrne 1$ 
      001FBF 84               [ 1]  826 	pop a 
      001FC0 81               [ 4]  827 	ret 
                                    828 
                                    829 
                                    830 ;---------------------------
                                    831 ; copy ROWBUFF to flash 
                                    832 ; BUF2ROW ( ud -- )
                                    833 ; ud is row address as double 
                                    834 ;---------------------------
      001FC1 1F 9A                  835 	.word LINK 
                           001FC3   836 	LINK=.
      001FC3 07                     837 	.byte 7 
      001FC4 42 55 46 32 52 4F 57   838 	.ascii "BUF2ROW" 
      001FCB                        839 BUF2ROW:
      001FCB CD 05 DE         [ 4]  840 	call TBUF ; ( ud rb -- )
      001FCE CD 06 9E         [ 4]  841 	call ROT 
      001FD1 CD 06 9E         [ 4]  842 	call ROT  ; ( rb ud -- )
      001FD4 CD 1D AA         [ 4]  843 	call write_row 
      001FD7 81               [ 4]  844 	ret 
                                    845 
                                    846 ;---------------------------------
                                    847 ; how many byte free in that row 
                                    848 ; RFREE ( a -- n )
                                    849 ; a is least byte of target address
                                    850 ;----------------------------------
      001FD8 1F C3                  851 	.word LINK 
                           001FDA   852 	LINK=.
      001FDA 05                     853 	.byte 5 
      001FDB 52 46 52 45 45         854 	.ascii "RFREE"
      001FE0                        855 RFREE:
      001FE0 E6 01            [ 1]  856 	ld a,(1,x)
      001FE2 A4 7F            [ 1]  857 	and a,#BLOCK_SIZE-1 
      001FE4 B7 24            [ 1]  858 	ld YTEMP,a 
      001FE6 A6 80            [ 1]  859 	ld a,#BLOCK_SIZE 
      001FE8 B0 24            [ 1]  860 	sub a,YTEMP 
      001FEA 90 5F            [ 1]  861 	clrw y 
      001FEC 90 97            [ 1]  862 	ld yl,a
      001FEE FF               [ 2]  863 	ldw (x),y 
      001FEF 81               [ 4]  864 	ret 
                                    865 
                                    866 ;---------------------------------
                                    867 ; write u bytes to flash/EEPROM 
                                    868 ; constraint to row limit 
                                    869 ; RAM2EE ( ud a u -- u2 )
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 103.
Hexadecimal [24-Bits]



                                    870 ; ud flash address 
                                    871 ; a ram address 
                                    872 ; u bytes count
                                    873 ; return u2 bytes written  
                                    874 ;-------------------------------
      001FF0 1F DA                  875 	.word LINK 
                           001FF2   876 	LINK=. 
      001FF2 06                     877 	.byte 6
      001FF3 52 41 4D 32 45 45      878 	.ascii "RAM2EE"
                                    879 	
      001FF9                        880 RAM2EE:
                                    881 ; copy ud on top 
      001FF9 90 93            [ 1]  882 	ldw y,x 
      001FFB 90 EE 06         [ 2]  883 	ldw y,(6,y) ; LSW of ud  
      001FFE 90 BF 24         [ 2]  884 	ldw YTEMP,y 
      002001 90 93            [ 1]  885 	ldw y,x 
      002003 90 EE 04         [ 2]  886 	ldw y,(4,y)  ; MSW of ud 
      002006 1D 00 04         [ 2]  887 	subw x,#2*CELLL 
      002009 FF               [ 2]  888 	ldw (x),y 
      00200A 90 BE 24         [ 2]  889 	ldw y,YTEMP 
      00200D EF 02            [ 2]  890 	ldw (2,x),y 
      00200F CD 1F A2         [ 4]  891 	call ROW2BUF 
      002012 90 93            [ 1]  892 	ldw y,x 
      002014 90 EE 06         [ 2]  893 	ldw y,(6,y)
      002017 90 89            [ 2]  894 	pushw y ; udl 
      002019 90 9F            [ 1]  895 	ld a,yl
      00201B A4 7F            [ 1]  896 	and a,#BLOCK_SIZE-1 
      00201D 90 5F            [ 1]  897 	clrw y 
      00201F 90 97            [ 1]  898 	ld yl,a 
      002021 72 A9 16 80      [ 2]  899 	addw y,#ROWBUFF 
      002025 1D 00 02         [ 2]  900 	subw x,#CELLL 
      002028 FF               [ 2]  901 	ldw (x),y  
      002029 CD 04 F3         [ 4]  902 	call SWAPP ;  ( ud a ra u -- )
      00202C CD 04 8D         [ 4]  903 	call RFROM  
      00202F CD 1F E0         [ 4]  904 	call RFREE 
      002032 CD 07 F9         [ 4]  905 	call MIN
      002035 CD 04 E3         [ 4]  906 	call DUPP 
      002038 CD 04 AC         [ 4]  907 	call TOR  
      00203B CD 0B 80         [ 4]  908 	call CMOVE
      00203E CD 1F CB         [ 4]  909 	call BUF2ROW 
      002041 CD 04 8D         [ 4]  910 	call RFROM 
      002044 81               [ 4]  911 	ret 
                                    912 
                                    913 ;--------------------------
                                    914 ; expand 16 bit address 
                                    915 ; to 32 bit address 
                                    916 ; FADDR ( a -- ud )
                                    917 ;--------------------------
      002045 1F F2                  918 	.word LINK 
                           002047   919 	LINK=. 
      002047 05                     920 	.byte 5 
      002048 46 41 44 44 52         921 	.ascii "FADDR"
      00204D                        922 FADDR:
      00204D CC 0A 44         [ 2]  923 	jp ZERO 
                                    924 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 104.
Hexadecimal [24-Bits]



                                    925 ;--------------------------
                                    926 ; move new colon definition to FLASH 
                                    927 ; using WR-ROW for efficiency 
                                    928 ; preserving bytes already used 
                                    929 ; in the current block. 
                                    930 ; ud+c must not exceed block boundary 
                                    931 ; at this point the compiler as completed
                                    932 ; in RAM and pointers CP and CNTXT updated.
                                    933 ; CNTXT point to nfa of new word and  
                                    934 ; CP is after compiled word so CP-CNTXT+2=count to write 
                                    935 ; 
                                    936 ; FMOVE ( -- cp+ )
                                    937 ; 
                                    938 ;--------------------------
      002050 20 47                  939 	.word LINK 
                           002052   940 	LINK=.
      002052 05                     941 	.byte 5 
      002053 46 4D 4F 56 45         942 	.ascii "FMOVE" 
      002058                        943 FMOVE:
      002058 CD 05 F0         [ 4]  944 	call TFLASH 
      00205B CD 04 3C         [ 4]  945 	CALL AT 
      00205E CD 03 E7         [ 4]  946 	CALL QBRAN 
      002061 20 DC                  947 	.word no_move  
      002063 CD 06 3F         [ 4]  948 	call CPP
      002066 CD 04 3C         [ 4]  949 	call AT  
      002069 CD 04 E3         [ 4]  950 	call DUPP ; ( udl udl -- )
      00206C CD 06 23         [ 4]  951 	call CNTXT 
      00206F CD 04 3C         [ 4]  952 	call AT 
      002072 CD 03 B4         [ 4]  953 	call DOLIT 
      002075 00 02                  954 	.word 2 
      002077 CD 07 57         [ 4]  955 	call SUBB ; ( udl udl a -- )
      00207A CD 04 F3         [ 4]  956 	call SWAPP 
      00207D CD 20 4D         [ 4]  957 	call FADDR 
      002080 CD 06 9E         [ 4]  958 	call ROT  ; ( udl ud a -- )
      002083 CD 04 E3         [ 4]  959 	call DUPP 
      002086 CD 04 AC         [ 4]  960 	call TOR    ; R: a 
      002089                        961 FMOVE2: 
      002089 CD 0B 33         [ 4]  962 	call HERE 
      00208C CD 04 A0         [ 4]  963 	call RAT 
      00208F CD 07 57         [ 4]  964 	call SUBB ; (udl ud a wl -- )
      002092                        965 next_row:
      002092 CD 04 E3         [ 4]  966 	call DUPP 
      002095 CD 04 AC         [ 4]  967 	call TOR  ; ( udl ud a wl -- ) R: a wl
      002098 CD 1F F9         [ 4]  968 	call RAM2EE ; ( udl a u -- udl u2 ) u2 is byte written to FLASH 
      00209B CD 04 E3         [ 4]  969 	call DUPP 
      00209E CD 04 AC         [ 4]  970 	call TOR
      0020A1 CD 06 DE         [ 4]  971 	call PLUS  ; ( udl+ ) 
      0020A4 CD 04 E3         [ 4]  972 	call DUPP 
      0020A7 CD 0A 44         [ 4]  973 	call ZERO   ; ( udl+ ud -- )
      0020AA CD 04 8D         [ 4]  974 	call RFROM  ; ( udl+ ud u2  R: a wl ) 
      0020AD CD 04 8D         [ 4]  975 	call RFROM  ; ( udl+ ud u2 wl R: a ) 
      0020B0 CD 05 0D         [ 4]  976 	call OVER   ; ( udl+ ud u2 wl u2 -- )
      0020B3 CD 07 57         [ 4]  977 	call SUBB  ; ( udl+ ud u2 wl- R: a )
      0020B6 CD 04 E3         [ 4]  978 	call DUPP 
      0020B9 CD 03 E7         [ 4]  979 	call QBRAN
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 105.
Hexadecimal [24-Bits]



      0020BC 20 D5                  980 	.word fmove_done 
      0020BE CD 04 F3         [ 4]  981 	call SWAPP  ; ( udl+ ud wl- u2 R: a )
      0020C1 CD 04 8D         [ 4]  982 	call RFROM ; ( udl+ ud wl- u2 a -- ) 
      0020C4 CD 06 DE         [ 4]  983 	call PLUS  ; ( udl+2 ud wl- a+ )
      0020C7 CD 04 E3         [ 4]  984 	call DUPP 
      0020CA CD 04 AC         [ 4]  985 	call TOR   ; ( udl+2 ud wl- a+ ) R: a+
      0020CD CD 04 F3         [ 4]  986 	call SWAPP 
      0020D0 CD 03 FE         [ 4]  987 	call BRAN
      0020D3 20 92                  988 	.word next_row  
      0020D5                        989 fmove_done:	
      0020D5 CD 04 8D         [ 4]  990 	call RFROM  ; ( -- udl+ ud u2 wl- a  )
      0020D8 1C 00 0A         [ 2]  991 	addw x,#5*CELLL ; (  -- cp+ ) new CP 
      0020DB 81               [ 4]  992  	ret  
      0020DC                        993 no_move:
      0020DC CD 0A 44         [ 4]  994 	call ZERO
      0020DF 81               [ 4]  995 	ret 
                                    996 
                                    997 ;------------------------------------------
                                    998 ; adjust pointers after **FMOVE** operetion.
                                    999 ; UPDAT-PTR ( cp+ -- )
                                   1000 ; cp+ is new CP position after FMOVE 
                                   1001 ;-------------------------------------------
      0020E0 20 52                 1002 	.word LINK 
                           0020E2  1003 	LINK=.
      0020E2 09                    1004 	.byte 9
      0020E3 55 50 44 41 54 2D 50  1005 	.ascii "UPDAT-PTR" 
             54 52
      0020EC                       1006 UPDATPTR:
                                   1007 ;reset VP to previous position  
      0020EC CD 1B 32         [ 4] 1008 	call EEPVP 
      0020EF CD 04 D9         [ 4] 1009 	call DROP 
      0020F2 CD 04 3C         [ 4] 1010 	call AT
      0020F5 CD 06 31         [ 4] 1011 	call VPP 
      0020F8 CD 04 25         [ 4] 1012 	call STORE
                                   1013 ;update CONTEXT and LAST 
      0020FB CD 1B 1C         [ 4] 1014 	call EEPCP 
      0020FE CD 04 D9         [ 4] 1015 	call DROP
      002101 CD 04 3C         [ 4] 1016 	call AT
      002104 CD 03 B4         [ 4] 1017 	call DOLIT 
      002107 00 02                 1018 	.word 2 
      002109 CD 06 DE         [ 4] 1019 	call PLUS 
      00210C CD 04 E3         [ 4] 1020 	call DUPP 
      00210F CD 06 23         [ 4] 1021 	call CNTXT 
      002112 CD 04 25         [ 4] 1022 	call STORE
      002115 CD 06 4F         [ 4] 1023 	call LAST
      002118 CD 04 25         [ 4] 1024 	call STORE 
      00211B CD 1B 4C         [ 4] 1025 	call UPDATLAST 
                                   1026 ;update CP 
      00211E CD 06 3F         [ 4] 1027 	call CPP 
      002121 CD 04 25         [ 4] 1028 	call STORE
      002124 CD 1B 75         [ 4] 1029 	call UPDATCP 
      002127 81               [ 4] 1030 	ret 
                                   1031 
                                   1032 ;-----------------------------
                                   1033 ; move interrupt sub-routine
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 106.
Hexadecimal [24-Bits]



                                   1034 ; in flash memory
                                   1035 ;----------------------------- 
      002128 20 E2                 1036 	.word LINK 
                           00212A  1037 	LINK=. 
      00212A 06                    1038 	.byte 6
      00212B 49 46 4D 4F 56 45     1039 	.ascii "IFMOVE" 
      002131                       1040 IFMOVE:
      002131 CD 05 F0         [ 4] 1041 	call TFLASH 
      002134 CD 04 3C         [ 4] 1042 	CALL AT 
      002137 CD 03 E7         [ 4] 1043 	CALL QBRAN 
      00213A 20 DC                 1044 	.word no_move 
      00213C CD 06 3F         [ 4] 1045 	call CPP 
      00213F CD 04 3C         [ 4] 1046 	call AT 
      002142 CD 04 E3         [ 4] 1047 	call DUPP ; ( udl udl -- )
      002145 CD 1B 32         [ 4] 1048 	call EEPVP 
      002148 CD 04 D9         [ 4] 1049 	call DROP
      00214B CD 04 3C         [ 4] 1050 	call AT  ; ( udl udl a )
      00214E CD 04 AC         [ 4] 1051 	call TOR 
      002151 CD 20 4D         [ 4] 1052 	call FADDR
      002154 CD 04 A0         [ 4] 1053 	call RAT ; ( udl ud a -- ) R: a 
      002157 CC 20 89         [ 2] 1054 	jp FMOVE2 
                                   1055 
                                   1056 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 107.
Hexadecimal [24-Bits]



                                   4429 
                                   4430 ;===============================================================
                                   4431 
                           00212A  4432 LASTN =	LINK   ;last name defined
                                   4433 
                                   4434 ; application code begin here
      002180                       4435 	.bndry 128 ; align on flash block  
      002180                       4436 app_space: 
                                   4437 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 108.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000001 L   |   6 AB1        00077A R   |   6 ABOR1      0012CF R
  6 ABOR2      0012E6 R   |   6 ABORQ      0012C7 R   |   6 ABORT      0012B8 R
  6 ABRTQ      0015A3 R   |   6 ABSS       000771 R   |   6 ACCEP      00124E R
  6 ACCP1      001257 R   |   6 ACCP2      00127D R   |   6 ACCP3      001280 R
  6 ACCP4      001282 R   |     ADC_CR1 =  005401     |     ADC_CR1_=  000000 
    ADC_CR1_=  000001     |     ADC_CR1_=  000004     |     ADC_CR1_=  000005 
    ADC_CR1_=  000006     |     ADC_CR2 =  005402     |     ADC_CR2_=  000003 
    ADC_CR2_=  000004     |     ADC_CR2_=  000005     |     ADC_CR2_=  000006 
    ADC_CR2_=  000001     |     ADC_CR3 =  005403     |     ADC_CR3_=  000007 
    ADC_CR3_=  000006     |     ADC_CSR =  005400     |     ADC_CSR_=  000006 
    ADC_CSR_=  000004     |     ADC_CSR_=  000000     |     ADC_CSR_=  000001 
    ADC_CSR_=  000002     |     ADC_CSR_=  000003     |     ADC_CSR_=  000007 
    ADC_CSR_=  000005     |     ADC_DRH =  005404     |     ADC_DRL =  005405 
    ADC_TDRH=  005406     |     ADC_TDRL=  005407     |   6 ADRADJ     00067D R
    AFR     =  004803     |     AFR0_ADC=  000000     |     AFR1_TIM=  000001 
    AFR2_CCO=  000002     |     AFR3_TIM=  000003     |     AFR4_TIM=  000004 
    AFR5_TIM=  000005     |     AFR6_I2C=  000006     |     AFR7_BEE=  000007 
  6 AFT        00158E R   |   6 AGAIN      0014E4 R   |   6 AHEAD      001541 R
  6 ALLOT      0013F7 R   |   6 ANDD       00052F R   |     APP_CP  =  004004 
    APP_LAST=  004000     |     APP_RUN =  004002     |     APP_VP  =  004006 
  6 AT         00043C R   |   6 ATEXE      000B69 R   |   6 AUTORUN    000127 R
    AWU_APR =  0050F1     |     AWU_CSR =  0050F0     |     AWU_TBR =  0050F2 
    B0_MASK =  000001     |     B115200 =  000006     |     B19200  =  000003 
    B1_MASK =  000002     |     B230400 =  000007     |     B2400   =  000000 
    B2_MASK =  000004     |     B38400  =  000004     |     B3_MASK =  000008 
    B460800 =  000008     |     B4800   =  000001     |     B4_MASK =  000010 
    B57600  =  000005     |     B5_MASK =  000020     |     B6_MASK =  000040 
    B7_MASK =  000080     |     B921600 =  000009     |     B9600   =  000002 
  6 BACK1      0011F6 R   |   6 BASE       0005A0 R   |     BASEE   =  00000A 
    BCNT    =  000001     |   6 BCOMP      001439 R   |   6 BDIGS      000C51 R
    BEEP_BIT=  000004     |     BEEP_CSR=  0050F3     |     BEEP_MAS=  000010 
    BEEP_POR=  00000F     |   6 BEGIN      0014C6 R   |     BIT0    =  000000 
    BIT1    =  000001     |     BIT2    =  000002     |     BIT3    =  000003 
    BIT4    =  000004     |     BIT5    =  000005     |     BIT6    =  000006 
    BIT7    =  000007     |   6 BKSLA      00108E R   |   6 BKSP       0011C6 R
    BKSPP   =  000008     |   6 BLANK      000A37 R   |     BLOCK_SI=  000080 
    BOOT_ROM=  006000     |     BOOT_ROM=  007FFF     |   6 BRAN       0003FE R
    BTW     =  000001     |   6 BUF2ROW    001FCB R   |   6 BYE        0000B4 R
    CADR    =  000003     |     CALLL   =  0000CD     |     CAN_DGR =  005426 
    CAN_FPSR=  005427     |     CAN_IER =  005425     |     CAN_MCR =  005420 
    CAN_MSR =  005421     |     CAN_P0  =  005428     |     CAN_P1  =  005429 
    CAN_P2  =  00542A     |     CAN_P3  =  00542B     |     CAN_P4  =  00542C 
    CAN_P5  =  00542D     |     CAN_P6  =  00542E     |     CAN_P7  =  00542F 
    CAN_P8  =  005430     |     CAN_P9  =  005431     |     CAN_PA  =  005432 
    CAN_PB  =  005433     |     CAN_PC  =  005434     |     CAN_PD  =  005435 
    CAN_PE  =  005436     |     CAN_PF  =  005437     |     CAN_RFR =  005424 
    CAN_TPR =  005423     |     CAN_TSR =  005422     |     CARRY   =  000028 
  6 CAT        00045A R   |   6 CCOMMA     00141B R   |     CC_C    =  000000 
    CC_H    =  000004     |     CC_I0   =  000003     |     CC_I1   =  000005 
    CC_N    =  000002     |     CC_V    =  000007     |     CC_Z    =  000001 
    CELLL   =  000002     |   6 CELLM      0009BC R   |   6 CELLP      0009AD R
  6 CELLS      0009CB R   |     CFG_GCR =  007F60     |     CFG_GCR_=  000001 
    CFG_GCR_=  000000     |   6 CHAR1      000E7E R   |   6 CHAR2      000E81 R
  6 CHKIVEC    001EB9 R   |     CLKOPT  =  004807     |     CLKOPT_C=  000002 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 109.
Hexadecimal [24-Bits]

Symbol Table

    CLKOPT_E=  000003     |     CLKOPT_P=  000000     |     CLKOPT_P=  000001 
    CLK_CCOR=  0050C9     |     CLK_CKDI=  0050C6     |     CLK_CKDI=  000000 
    CLK_CKDI=  000001     |     CLK_CKDI=  000002     |     CLK_CKDI=  000003 
    CLK_CKDI=  000004     |     CLK_CMSR=  0050C3     |     CLK_CSSR=  0050C8 
    CLK_ECKR=  0050C1     |     CLK_ECKR=  000000     |     CLK_ECKR=  000001 
    CLK_HSIT=  0050CC     |     CLK_ICKR=  0050C0     |     CLK_ICKR=  000002 
    CLK_ICKR=  000000     |     CLK_ICKR=  000001     |     CLK_ICKR=  000003 
    CLK_ICKR=  000004     |     CLK_ICKR=  000005     |     CLK_PCKE=  0050C7 
    CLK_PCKE=  000000     |     CLK_PCKE=  000001     |     CLK_PCKE=  000007 
    CLK_PCKE=  000005     |     CLK_PCKE=  000006     |     CLK_PCKE=  000004 
    CLK_PCKE=  000002     |     CLK_PCKE=  000003     |     CLK_PCKE=  0050CA 
    CLK_PCKE=  000003     |     CLK_PCKE=  000002     |     CLK_PCKE=  000007 
    CLK_SWCR=  0050C5     |     CLK_SWCR=  000000     |     CLK_SWCR=  000001 
    CLK_SWCR=  000002     |     CLK_SWCR=  000003     |     CLK_SWIM=  0050CD 
    CLK_SWR =  0050C4     |     CLK_SWR_=  0000B4     |     CLK_SWR_=  0000E1 
    CLK_SWR_=  0000D2     |   6 CMOV1      000B88 R   |   6 CMOV2      000BA0 R
  6 CMOVE      000B80 R   |     CNTDWN  =  000030     |   6 CNTXT      000623 R
  6 COLD       001998 R   |   6 COLD1      001998 R   |   6 COLON      001739 R
  6 COMMA      001404 R   |   6 COMPI      001449 R   |     COMPO   =  000040 
  6 CONSTANT   0017E3 R   |   6 COUNT      000B1C R   |   6 CPP        00063F R
    CPU_A   =  007F00     |     CPU_CCR =  007F0A     |     CPU_PCE =  007F01 
    CPU_PCH =  007F02     |     CPU_PCL =  007F03     |     CPU_SPH =  007F08 
    CPU_SPL =  007F09     |     CPU_XH  =  007F04     |     CPU_XL  =  007F05 
    CPU_YH  =  007F06     |     CPU_YL  =  007F07     |   6 CR         000EAC R
  6 CREAT      00177F R   |     CRR     =  00000D     |   6 CSTOR      000449 R
  6 DAT        000AFC R   |     DATSTK  =  001680     |   6 DDROP      0006BE R
  6 DDUP       0006C9 R   |     DEBUG_BA=  007F00     |     DEBUG_EN=  007FFF 
  6 DECIM      000D01 R   |   6 DEPTH      000A87 R   |     DEVID_BA=  0048CD 
    DEVID_EN=  0048D8     |     DEVID_LO=  0048D2     |     DEVID_LO=  0048D3 
    DEVID_LO=  0048D4     |     DEVID_LO=  0048D5     |     DEVID_LO=  0048D6 
    DEVID_LO=  0048D7     |     DEVID_LO=  0048D8     |     DEVID_WA=  0048D1 
    DEVID_XH=  0048CE     |     DEVID_XL=  0048CD     |     DEVID_YH=  0048D0 
    DEVID_YL=  0048CF     |   6 DGTQ1      000D46 R   |   6 DI         0000C2 R
  6 DIG        000C7A R   |   6 DIGIT      000C15 R   |   6 DIGS       000C8B R
  6 DIGS1      000C8B R   |   6 DIGS2      000C98 R   |   6 DIGTQ      000D15 R
    DM_BK1RE=  007F90     |     DM_BK1RH=  007F91     |     DM_BK1RL=  007F92 
    DM_BK2RE=  007F93     |     DM_BK2RH=  007F94     |     DM_BK2RL=  007F95 
    DM_CR1  =  007F96     |     DM_CR2  =  007F97     |     DM_CSR1 =  007F98 
    DM_CSR2 =  007F99     |     DM_ENFCT=  007F9A     |   6 DN1        000738 R
  6 DNEGA      00071B R   |   6 DOCONST    00180D R   |   6 DOLIT      0003B4 R
  6 DONXT      0003C8 R   |   6 DOSTR      000EC2 R   |   6 DOT        000F47 R
  6 DOT1       000F5D R   |   6 DOTI1      00192F R   |   6 DOTID      001919 R
  6 DOTO1      00135B R   |   6 DOTOK      001341 R   |   6 DOTPR      001070 R
  6 DOTQ       0015BD R   |   6 DOTQP      000EEB R   |   6 DOTR       000EF9 R
  6 DOTS       0018BB R   |   6 DOTS1      0018C6 R   |   6 DOTS2      0018CF R
  6 DOVAR      000590 R   |   6 DROP       0004D9 R   |   6 DSTOR      000AD6 R
  6 DUMP       001871 R   |   6 DUMP1      001888 R   |   6 DUMP3      0018AA R
  6 DUMPP      001840 R   |   6 DUPP       0004E3 R   |   6 EDIGS      000CB6 R
  6 EEPCP      001B1C R   |   6 EEPLAST    001AEF R   |   6 EEPROM     001AD7 R
    EEPROM_B=  004000     |     EEPROM_E=  0047FF     |     EEPROM_S=  000800 
  6 EEPRUN     001B06 R   |   6 EEPVP      001B32 R   |   6 EI         0000BB R
  6 ELSEE      00151C R   |   6 EMIT       00039E R   |   6 ENEPER     001A47 R
  6 EQ1        000795 R   |   6 EQUAL      00077F R   |   6 ERASE      000BE2 R
    ERR     =  00001B     |   6 EVAL       001384 R   |   6 EVAL1      001384 R
  6 EVAL2      0013A0 R   |   6 EXE1       000B77 R   |   6 EXECU      00040E R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 110.
Hexadecimal [24-Bits]

Symbol Table

  6 EXIT       00041E R   |     EXT     =  000000     |     EXTI_CR1=  0050A0 
    EXTI_CR2=  0050A1     |   6 EXTRC      000C3D R   |   6 FADDR      00204D R
    FHSE    =  7A1200     |     FHSI    =  F42400     |   6 FILL       000BAF R
  6 FILL1      000BCC R   |   6 FILL2      000BD5 R   |   6 FIND       001122 R
  6 FIND1      001140 R   |   6 FIND2      00116E R   |   6 FIND3      00117A R
  6 FIND4      00118E R   |   6 FIND5      00119B R   |   6 FIND6      00117F R
    FLASH_BA=  008000     |     FLASH_CR=  00505A     |     FLASH_CR=  000002 
    FLASH_CR=  000000     |     FLASH_CR=  000003     |     FLASH_CR=  000001 
    FLASH_CR=  00505B     |     FLASH_CR=  000005     |     FLASH_CR=  000004 
    FLASH_CR=  000007     |     FLASH_CR=  000000     |     FLASH_CR=  000006 
    FLASH_DU=  005064     |     FLASH_DU=  0000AE     |     FLASH_DU=  000056 
    FLASH_EN=  027FFF     |     FLASH_FP=  00505D     |     FLASH_FP=  000000 
    FLASH_FP=  000001     |     FLASH_FP=  000002     |     FLASH_FP=  000003 
    FLASH_FP=  000004     |     FLASH_FP=  000005     |     FLASH_IA=  00505F 
    FLASH_IA=  000003     |     FLASH_IA=  000002     |     FLASH_IA=  000006 
    FLASH_IA=  000001     |     FLASH_IA=  000000     |     FLASH_NC=  00505C 
    FLASH_NF=  00505E     |     FLASH_NF=  000000     |     FLASH_NF=  000001 
    FLASH_NF=  000002     |     FLASH_NF=  000003     |     FLASH_NF=  000004 
    FLASH_NF=  000005     |     FLASH_PU=  005062     |     FLASH_PU=  000056 
    FLASH_PU=  0000AE     |     FLASH_SI=  020000     |     FLASH_WS=  00480D 
    FLSI    =  01F400     |   6 FMOVE      002058 R   |   6 FMOVE2     002089 R
  6 FOR        001499 R   |   6 FORGET     000158 R   |   6 FORGET1    000187 R
  6 FORGET2    00020D R   |   6 FORGET4    000216 R   |   6 FORGET6    0001CF R
    FPTR    =  000032     |   6 FREEVAR    000223 R   |   6 FREEVAR4   000259 R
    GPIO_BAS=  005000     |     GPIO_CR1=  000003     |     GPIO_CR2=  000004 
    GPIO_DDR=  000002     |     GPIO_IDR=  000001     |     GPIO_ODR=  000000 
    GPIO_SIZ=  000005     |   6 HERE       000B33 R   |   6 HEX        000CEC R
  6 HI         00196B R   |   6 HLD        000610 R   |   6 HOLD       000C61 R
    HSECNT  =  004809     |     I2C_CCRH=  00521C     |     I2C_CCRH=  000080 
    I2C_CCRH=  0000C0     |     I2C_CCRH=  000080     |     I2C_CCRH=  000000 
    I2C_CCRH=  000001     |     I2C_CCRH=  000000     |     I2C_CCRL=  00521B 
    I2C_CCRL=  00001A     |     I2C_CCRL=  000002     |     I2C_CCRL=  00000D 
    I2C_CCRL=  000050     |     I2C_CCRL=  000090     |     I2C_CCRL=  0000A0 
    I2C_CR1 =  005210     |     I2C_CR1_=  000006     |     I2C_CR1_=  000007 
    I2C_CR1_=  000000     |     I2C_CR2 =  005211     |     I2C_CR2_=  000002 
    I2C_CR2_=  000003     |     I2C_CR2_=  000000     |     I2C_CR2_=  000001 
    I2C_CR2_=  000007     |     I2C_DR  =  005216     |     I2C_FREQ=  005212 
    I2C_ITR =  00521A     |     I2C_ITR_=  000002     |     I2C_ITR_=  000000 
    I2C_ITR_=  000001     |     I2C_OARH=  005214     |     I2C_OARH=  000001 
    I2C_OARH=  000002     |     I2C_OARH=  000006     |     I2C_OARH=  000007 
    I2C_OARL=  005213     |     I2C_OARL=  000000     |     I2C_OAR_=  000813 
    I2C_OAR_=  000009     |     I2C_PECR=  00521E     |     I2C_READ=  000001 
    I2C_SR1 =  005217     |     I2C_SR1_=  000003     |     I2C_SR1_=  000001 
    I2C_SR1_=  000002     |     I2C_SR1_=  000006     |     I2C_SR1_=  000000 
    I2C_SR1_=  000004     |     I2C_SR1_=  000007     |     I2C_SR2 =  005218 
    I2C_SR2_=  000002     |     I2C_SR2_=  000001     |     I2C_SR2_=  000000 
    I2C_SR2_=  000003     |     I2C_SR2_=  000005     |     I2C_SR3 =  005219 
    I2C_SR3_=  000001     |     I2C_SR3_=  000007     |     I2C_SR3_=  000004 
    I2C_SR3_=  000000     |     I2C_SR3_=  000002     |     I2C_TRIS=  00521D 
    I2C_TRIS=  000005     |     I2C_TRIS=  000005     |     I2C_TRIS=  000005 
    I2C_TRIS=  000011     |     I2C_TRIS=  000011     |     I2C_TRIS=  000011 
    I2C_WRIT=  000000     |   6 ICOLON     00174A R   |   6 IFETCH     0014B7 R
  6 IFF        0014F4 R   |   6 IFMOVE     002131 R   |     IMEDD   =  000080 
  6 IMMED      00175C R   |   6 INCH       000392 R   |   6 INITOFS    001712 R
  6 INN        0005BE R   |     INPUT_DI=  000000     |     INPUT_EI=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 111.
Hexadecimal [24-Bits]

Symbol Table

    INPUT_FL=  000000     |     INPUT_PU=  000001     |   6 INTE1      001323 R
  6 INTER      0012F9 R   |     INT_ADC2=  000016     |     INT_AUAR=  000012 
    INT_AWU =  000001     |     INT_CAN_=  000008     |     INT_CAN_=  000009 
    INT_CLK =  000002     |     INT_EXTI=  000003     |     INT_EXTI=  000004 
    INT_EXTI=  000005     |     INT_EXTI=  000006     |     INT_EXTI=  000007 
    INT_FLAS=  000018     |     INT_I2C =  000013     |     INT_SPI =  00000A 
    INT_TIM1=  00000C     |     INT_TIM1=  00000B     |     INT_TIM2=  00000E 
    INT_TIM2=  00000D     |     INT_TIM3=  000010     |     INT_TIM3=  00000F 
    INT_TIM4=  000017     |     INT_TLI =  000000     |     INT_UART=  000011 
    INT_UART=  000015     |     INT_UART=  000014     |     INT_VECT=  008060 
    INT_VECT=  00800C     |     INT_VECT=  008028     |     INT_VECT=  00802C 
    INT_VECT=  008010     |     INT_VECT=  008014     |     INT_VECT=  008018 
    INT_VECT=  00801C     |     INT_VECT=  008020     |     INT_VECT=  008024 
    INT_VECT=  008068     |     INT_VECT=  008054     |     INT_VECT=  008000 
    INT_VECT=  008030     |     INT_VECT=  008038     |     INT_VECT=  008034 
    INT_VECT=  008040     |     INT_VECT=  00803C     |     INT_VECT=  008048 
    INT_VECT=  008044     |     INT_VECT=  008064     |     INT_VECT=  008008 
    INT_VECT=  008004     |     INT_VECT=  008050     |     INT_VECT=  00804C 
    INT_VECT=  00805C     |     INT_VECT=  008058     |   6 INVER      0006F8 R
    IPR0    =  000002     |     IPR1    =  000001     |     IPR2    =  000000 
    IPR3    =  000003     |     IPR_MASK=  000003     |     IRET_COD=  000080 
  6 ISEMI      0016A7 R   |     ITC_SPR1=  007F70     |     ITC_SPR2=  007F71 
    ITC_SPR3=  007F72     |     ITC_SPR4=  007F73     |     ITC_SPR5=  007F74 
    ITC_SPR6=  007F75     |     ITC_SPR7=  007F76     |     ITC_SPR8=  007F77 
    IWDG_KR =  0050E0     |     IWDG_PR =  0050E1     |     IWDG_RLR=  0050E2 
  6 JSRC       0016FC R   |   6 KEY        000E2C R   |   6 KTAP       001213 R
  6 KTAP1      001236 R   |   6 KTAP2      001239 R   |   6 LAST       00064F R
  6 LASTN   =  00212A R   |   6 LBRAC      001330 R   |     LED2_BIT=  000005 
    LED2_MAS=  000020     |     LED2_POR=  00500A     |   6 LESS       0007BC R
    LF      =  00000A     |   6 LINK    =  00212A R   |   6 LITER      00146B R
  6 LN2S       001AA3 R   |   6 LOG2S      001A8D R   |   6 LSHIFT     0009F6 R
  6 LSHIFT1    0009FF R   |   6 LSHIFT4    000A07 R   |   6 LT1        0007D2 R
    MASKK   =  001F7F     |   6 MAX        0007DC R   |   6 MAX1       0007EF R
  6 MIN        0007F9 R   |   6 MIN1       00080C R   |   6 MMOD1      0008AF R
  6 MMOD2      0008C3 R   |   6 MMOD3      0008DA R   |   6 MMSM1      000856 R
  6 MMSM2      00086A R   |   6 MMSM3      00086C R   |   6 MMSM4      000874 R
  6 MODD       0008F4 R   |   6 MONE       000A5D R   |     MS      =  00002E 
  6 MSEC       0002CE R   |   6 MSMOD      000892 R   |   6 MSTA1      000985 R
  6 MSTAR      000962 R   |     NAFR    =  004804     |   6 NAMEQ      0011BB R
  6 NAMET      0010CC R   |     NCLKOPT =  004808     |   6 NEGAT      000709 R
  6 NEX1       0003D5 R   |   6 NEXT       0014A8 R   |     NFLASH_W=  00480E 
    NHSECNT =  00480A     |     NOPT1   =  004802     |     NOPT2   =  004804 
    NOPT3   =  004806     |     NOPT4   =  004808     |     NOPT5   =  00480A 
    NOPT6   =  00480C     |     NOPT7   =  00480E     |     NOPTBL  =  00487F 
  6 NTIB       0005CE R   |     NUBC    =  004802     |   6 NUFQ       000E42 R
  6 NUFQ1      000E5B R   |   6 NUMBQ      000D59 R   |   6 NUMQ1      000D8D R
  6 NUMQ2      000DBE R   |   6 NUMQ3      000E00 R   |   6 NUMQ4      000E05 R
  6 NUMQ5      000E14 R   |   6 NUMQ6      000E17 R   |     NWDGOPT =  004806 
    NWDGOPT_=  FFFFFFFD     |     NWDGOPT_=  FFFFFFFC     |     NWDGOPT_=  FFFFFFFF 
    NWDGOPT_=  FFFFFFFE     |   6 NonHandl   000000 R   |   6 OFFSET     000674 R
    OFS     =  000005     |   6 ONE        000A4F R   |   6 ONEM       0009E5 R
  6 ONEP       0009D8 R   |     OPT     =  000002     |     OPT0    =  004800 
    OPT1    =  004801     |     OPT2    =  004803     |     OPT3    =  004805 
    OPT4    =  004807     |     OPT5    =  004809     |     OPT6    =  00480B 
    OPT7    =  00480D     |     OPTBL   =  00487E     |     OPTION_B=  004800 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 112.
Hexadecimal [24-Bits]

Symbol Table

    OPTION_E=  00487F     |     OPTION_S=  000080     |   6 ORIG       000047 R
  6 ORR        000543 R   |   6 OUTPUT     0003A3 R   |     OUTPUT_F=  000001 
    OUTPUT_O=  000000     |     OUTPUT_P=  000001     |     OUTPUT_S=  000000 
  6 OVER       00050D R   |   6 OVERT      001678 R   |     PA      =  000000 
  6 PACKS      000BF4 R   |   6 PAD        000B44 R   |   6 PAREN      00107F R
  6 PARS       000F78 R   |   6 PARS1      000FA3 R   |   6 PARS2      000FCE R
  6 PARS3      000FD1 R   |   6 PARS4      000FDA R   |   6 PARS5      000FFD R
  6 PARS6      001012 R   |   6 PARS7      001021 R   |   6 PARS8      001030 R
  6 PARSE      001041 R   |   6 PAUSE      0002DE R   |     PA_BASE =  005000 
    PA_CR1  =  005003     |     PA_CR2  =  005004     |     PA_DDR  =  005002 
    PA_IDR  =  005001     |     PA_ODR  =  005000     |     PB      =  000005 
    PB_BASE =  005005     |     PB_CR1  =  005008     |     PB_CR2  =  005009 
    PB_DDR  =  005007     |     PB_IDR  =  005006     |     PB_ODR  =  005005 
    PC      =  00000A     |     PC_BASE =  00500A     |     PC_CR1  =  00500D 
    PC_CR2  =  00500E     |     PC_DDR  =  00500C     |     PC_IDR  =  00500B 
    PC_ODR  =  00500A     |     PD      =  00000F     |   6 PDUM1      001853 R
  6 PDUM2      001864 R   |     PD_BASE =  00500F     |     PD_CR1  =  005012 
    PD_CR2  =  005013     |     PD_DDR  =  005011     |     PD_IDR  =  005010 
    PD_ODR  =  00500F     |     PE      =  000014     |     PE_BASE =  005014 
    PE_CR1  =  005017     |     PE_CR2  =  005018     |     PE_DDR  =  005016 
    PE_IDR  =  005015     |     PE_ODR  =  005014     |     PF      =  000019 
    PF_BASE =  005019     |     PF_CR1  =  00501C     |     PF_CR2  =  00501D 
    PF_DDR  =  00501B     |     PF_IDR  =  00501A     |     PF_ODR  =  005019 
    PG      =  00001E     |     PG_BASE =  00501E     |     PG_CR1  =  005021 
    PG_CR2  =  005022     |     PG_DDR  =  005020     |     PG_IDR  =  00501F 
    PG_ODR  =  00501E     |     PH      =  000023     |     PH_BASE =  005023 
    PH_CR1  =  005026     |     PH_CR2  =  005027     |     PH_DDR  =  005025 
    PH_IDR  =  005024     |     PH_ODR  =  005023     |     PI      =  000028 
  6 PICK       000A9E R   |   6 PII        001A06 R   |     PI_BASE =  005028 
    PI_CR1  =  00502B     |     PI_CR2  =  00502C     |     PI_DDR  =  00502A 
    PI_IDR  =  005029     |     PI_ODR  =  005028     |   6 PLUS       0006DE R
  6 PNAM1      00162D R   |   6 PRESE      0013AF R   |     PROD1   =  000022 
    PROD2   =  000024     |     PROD3   =  000026     |   6 PROTECTE   0001FF R
  6 PSTOR      000AB5 R   |     PTR16   =  000033     |     PTR8    =  000034 
  6 QBRAN      0003E7 R   |   6 QDUP       00068D R   |   6 QDUP1      000697 R
  6 QKEY       000380 R   |   6 QSTAC      001367 R   |   6 QUERY      001293 R
  6 QUEST      000F6A R   |   6 QUIT       0013CC R   |   6 QUIT1      0013D4 R
  6 QUIT2      0013D7 R   |   6 RAM2EE     001FF9 R   |     RAMBASE =  000000 
  6 RAMLAST    000662 R   |     RAM_BASE=  000000     |     RAM_END =  0017FF 
    RAM_SIZE=  001800     |   6 RANDOM     00027C R   |   6 RAT        0004A0 R
  6 RBRAC      0016E9 R   |   6 REPEA      001571 R   |   6 RFREE      001FE0 R
  6 RFROM      00048D R   |     ROP     =  004800     |   6 ROT        00069E R
  6 ROW2BUF    001FA2 R   |     ROWBUFF =  001680     |     RP0     =  00002C 
  6 RPAT       00046A R   |     RPP     =  0017FF     |   6 RPSTO      000477 R
  6 RSHIFT     000A12 R   |   6 RSHIFT1    000A1B R   |   6 RSHIFT4    000A23 R
    RST_SR  =  0050B3     |   6 RT12_2     001A76 R   |   6 SAME1      0010EA R
  6 SAME2      001113 R   |   6 SAMEQ      0010E2 R   |   6 SCOM1      001662 R
  6 SCOM2      001665 R   |   6 SCOMP      001644 R   |   6 SEED       000263 R
    SEEDX   =  000036     |     SEEDY   =  000038     |   6 SEMIS      001688 R
  6 SETISP     0000CE R   |   6 SET_RAML   0017CC R   |     SFR_BASE=  005000 
    SFR_END =  0057FF     |   6 SIGN       000CA0 R   |   6 SIGN1      000CB0 R
  6 SLASH      0008FE R   |   6 SLMOD      0008E2 R   |   6 SNAME      0015F7 R
    SP0     =  00002A     |   6 SPACE      000E64 R   |   6 SPACS      000E73 R
  6 SPAT       0004C3 R   |     SPI_CR1 =  005200     |     SPI_CR2 =  005201 
    SPI_CRCP=  005205     |     SPI_DR  =  005204     |     SPI_ICR =  005202 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 113.
Hexadecimal [24-Bits]

Symbol Table

    SPI_RXCR=  005206     |     SPI_SR  =  005203     |     SPI_TXCR=  005207 
    SPP     =  001680     |     SPSAVE  =  000001     |   6 SPSTO      0004D0 R
  6 SQRT10     001A5F R   |   6 SQRT2      001A1D R   |   6 SQRT3      001A34 R
  6 SSMOD      00098E R   |     SSP     =  000001     |     STACK   =  0017FF 
  6 STAR       000957 R   |   6 STASL      00099F R   |   6 STOD       000740 R
  6 STORE      000425 R   |   6 STR        000CCE R   |   6 STRCQ      001479 R
  6 STRQ       0015B0 R   |   6 STRQP      000EE1 R   |   6 SUBB       000757 R
  6 SWAPP      0004F3 R   |     SWIM_CSR=  007F80     |   6 TAP        0011FD R
  6 TBOOT      00198C R   |   6 TBUF       0005DE R   |     TBUFFBAS=  001680 
  6 TCHA1      000A7E R   |   6 TCHAR      000A6E R   |   6 TEMP       0005AF R
  6 TEVAL      000601 R   |   6 TFLASH     0005F0 R   |   6 THENN      001509 R
  6 TIB        000B55 R   |     TIBB    =  001700     |     TIBBASE =  001700 
    TIC     =  000027     |   6 TICK       0013E3 R   |     TIM1_ARR=  005262 
    TIM1_ARR=  005263     |     TIM1_BKR=  00526D     |     TIM1_CCE=  00525C 
    TIM1_CCE=  00525D     |     TIM1_CCM=  005258     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  005259     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525A     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCM=  00525B     |     TIM1_CCM=  000000 
    TIM1_CCM=  000001     |     TIM1_CCM=  000004     |     TIM1_CCM=  000005 
    TIM1_CCM=  000006     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000003     |     TIM1_CCM=  000007     |     TIM1_CCM=  000002 
    TIM1_CCM=  000004     |     TIM1_CCM=  000005     |     TIM1_CCM=  000006 
    TIM1_CCM=  000003     |     TIM1_CCR=  005265     |     TIM1_CCR=  005266 
    TIM1_CCR=  005267     |     TIM1_CCR=  005268     |     TIM1_CCR=  005269 
    TIM1_CCR=  00526A     |     TIM1_CCR=  00526B     |     TIM1_CCR=  00526C 
    TIM1_CNT=  00525E     |     TIM1_CNT=  00525F     |     TIM1_CR1=  005250 
    TIM1_CR2=  005251     |     TIM1_CR2=  000000     |     TIM1_CR2=  000002 
    TIM1_CR2=  000004     |     TIM1_CR2=  000005     |     TIM1_CR2=  000006 
    TIM1_DTR=  00526E     |     TIM1_EGR=  005257     |     TIM1_EGR=  000007 
    TIM1_EGR=  000001     |     TIM1_EGR=  000002     |     TIM1_EGR=  000003 
    TIM1_EGR=  000004     |     TIM1_EGR=  000005     |     TIM1_EGR=  000006 
    TIM1_EGR=  000000     |     TIM1_ETR=  005253     |     TIM1_ETR=  000006 
    TIM1_ETR=  000000     |     TIM1_ETR=  000001     |     TIM1_ETR=  000002 
    TIM1_ETR=  000003     |     TIM1_ETR=  000007     |     TIM1_ETR=  000004 
    TIM1_ETR=  000005     |     TIM1_IER=  005254     |     TIM1_IER=  000007 
    TIM1_IER=  000001     |     TIM1_IER=  000002     |     TIM1_IER=  000003 
    TIM1_IER=  000004     |     TIM1_IER=  000005     |     TIM1_IER=  000006 
    TIM1_IER=  000000     |     TIM1_OIS=  00526F     |     TIM1_PSC=  005260 
    TIM1_PSC=  005261     |     TIM1_RCR=  005264     |     TIM1_SMC=  005252 
    TIM1_SMC=  000007     |     TIM1_SMC=  000000     |     TIM1_SMC=  000001 
    TIM1_SMC=  000002     |     TIM1_SMC=  000004     |     TIM1_SMC=  000005 
    TIM1_SMC=  000006     |     TIM1_SR1=  005255     |     TIM1_SR1=  000007 
    TIM1_SR1=  000001     |     TIM1_SR1=  000002     |     TIM1_SR1=  000003 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 114.
Hexadecimal [24-Bits]

Symbol Table

    TIM1_SR1=  000004     |     TIM1_SR1=  000005     |     TIM1_SR1=  000006 
    TIM1_SR1=  000000     |     TIM1_SR2=  005256     |     TIM1_SR2=  000001 
    TIM1_SR2=  000002     |     TIM1_SR2=  000003     |     TIM1_SR2=  000004 
    TIM2_ARR=  00530D     |     TIM2_ARR=  00530E     |     TIM2_CCE=  005308 
    TIM2_CCE=  000000     |     TIM2_CCE=  000001     |     TIM2_CCE=  000004 
    TIM2_CCE=  000005     |     TIM2_CCE=  005309     |     TIM2_CCM=  005305 
    TIM2_CCM=  005306     |     TIM2_CCM=  005307     |     TIM2_CCM=  000000 
    TIM2_CCM=  000004     |     TIM2_CCM=  000003     |     TIM2_CCR=  00530F 
    TIM2_CCR=  005310     |     TIM2_CCR=  005311     |     TIM2_CCR=  005312 
    TIM2_CCR=  005313     |     TIM2_CCR=  005314     |     TIM2_CNT=  00530A 
    TIM2_CNT=  00530B     |     TIM2_CR1=  005300     |     TIM2_CR1=  000007 
    TIM2_CR1=  000000     |     TIM2_CR1=  000003     |     TIM2_CR1=  000001 
    TIM2_CR1=  000002     |     TIM2_EGR=  005304     |     TIM2_EGR=  000001 
    TIM2_EGR=  000002     |     TIM2_EGR=  000003     |     TIM2_EGR=  000006 
    TIM2_EGR=  000000     |     TIM2_IER=  005301     |     TIM2_PSC=  00530C 
    TIM2_SR1=  005302     |     TIM2_SR2=  005303     |     TIM3_ARR=  00532B 
    TIM3_ARR=  00532C     |     TIM3_CCE=  005327     |     TIM3_CCE=  000000 
    TIM3_CCE=  000001     |     TIM3_CCE=  000004     |     TIM3_CCE=  000005 
    TIM3_CCE=  000000     |     TIM3_CCE=  000001     |     TIM3_CCM=  005325 
    TIM3_CCM=  005326     |     TIM3_CCM=  000000     |     TIM3_CCM=  000004 
    TIM3_CCM=  000003     |     TIM3_CCR=  00532D     |     TIM3_CCR=  00532E 
    TIM3_CCR=  00532F     |     TIM3_CCR=  005330     |     TIM3_CNT=  005328 
    TIM3_CNT=  005329     |     TIM3_CR1=  005320     |     TIM3_CR1=  000007 
    TIM3_CR1=  000000     |     TIM3_CR1=  000003     |     TIM3_CR1=  000001 
    TIM3_CR1=  000002     |     TIM3_EGR=  005324     |     TIM3_IER=  005321 
    TIM3_PSC=  00532A     |     TIM3_SR1=  005322     |     TIM3_SR2=  005323 
    TIM4_ARR=  005346     |     TIM4_CNT=  005344     |     TIM4_CR1=  005340 
    TIM4_CR1=  000007     |     TIM4_CR1=  000000     |     TIM4_CR1=  000003 
    TIM4_CR1=  000001     |     TIM4_CR1=  000002     |     TIM4_EGR=  005343 
    TIM4_EGR=  000000     |     TIM4_IER=  005341     |     TIM4_IER=  000000 
    TIM4_PSC=  005345     |     TIM4_PSC=  000000     |     TIM4_PSC=  000007 
    TIM4_PSC=  000004     |     TIM4_PSC=  000001     |     TIM4_PSC=  000005 
    TIM4_PSC=  000002     |     TIM4_PSC=  000006     |     TIM4_PSC=  000003 
    TIM4_PSC=  000000     |     TIM4_PSC=  000001     |     TIM4_PSC=  000002 
    TIM4_SR =  005342     |     TIM4_SR_=  000000     |   6 TIMEOUTQ   00030E R
  6 TIMER      0002F8 R   |     TIM_CR1_=  000007     |     TIM_CR1_=  000000 
    TIM_CR1_=  000006     |     TIM_CR1_=  000005     |     TIM_CR1_=  000004 
    TIM_CR1_=  000003     |     TIM_CR1_=  000001     |     TIM_CR1_=  000002 
  6 TNAM2      0018E9 R   |   6 TNAM3      001907 R   |   6 TNAM4      00190D R
  6 TNAME      0018E6 R   |   6 TOFLASH    000333 R   |   6 TOKEN      0010BE R
  6 TOR        0004AC R   |   6 TORAM      000373 R   |     TRUEE   =  00FFFF 
  6 TWOSL      000A2A R   |   6 TYPE1      000E93 R   |   6 TYPE2      000E9F R
  6 TYPES      000E8E R   |   6 Timer4Ha   000005 R   |     UART1   =  000000 
    UART1_BA=  005230     |     UART1_BR=  005232     |     UART1_BR=  005233 
    UART1_CR=  005234     |     UART1_CR=  005235     |     UART1_CR=  005236 
    UART1_CR=  005237     |     UART1_CR=  005238     |     UART1_DR=  005231 
    UART1_GT=  005239     |     UART1_PO=  000000     |     UART1_PS=  00523A 
    UART1_RX=  000004     |     UART1_SR=  005230     |     UART1_TX=  000005 
    UART3   =  000001     |     UART3_BA=  005240     |     UART3_BR=  005242 
    UART3_BR=  005243     |     UART3_CR=  005244     |     UART3_CR=  005245 
    UART3_CR=  005246     |     UART3_CR=  005247     |     UART3_CR=  004249 
    UART3_DR=  005241     |     UART3_PO=  00000F     |     UART3_RX=  000006 
    UART3_SR=  005240     |     UART3_TX=  000005     |     UART_BRR=  000002 
    UART_BRR=  000003     |     UART_CR1=  000004     |     UART_CR1=  000004 
    UART_CR1=  000002     |     UART_CR1=  000000     |     UART_CR1=  000001 
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 115.
Hexadecimal [24-Bits]

Symbol Table

    UART_CR1=  000007     |     UART_CR1=  000006     |     UART_CR1=  000005 
    UART_CR1=  000003     |     UART_CR2=  000005     |     UART_CR2=  000004 
    UART_CR2=  000002     |     UART_CR2=  000005     |     UART_CR2=  000001 
    UART_CR2=  000000     |     UART_CR2=  000006     |     UART_CR2=  000003 
    UART_CR2=  000007     |     UART_CR3=  000006     |     UART_CR3=  000003 
    UART_CR3=  000001     |     UART_CR3=  000002     |     UART_CR3=  000000 
    UART_CR3=  000006     |     UART_CR3=  000004     |     UART_CR3=  000005 
    UART_CR4=  000007     |     UART_CR4=  000000     |     UART_CR4=  000001 
    UART_CR4=  000002     |     UART_CR4=  000003     |     UART_CR4=  000004 
    UART_CR4=  000006     |     UART_CR4=  000005     |     UART_CR5=  000008 
    UART_CR5=  000003     |     UART_CR5=  000001     |     UART_CR5=  000002 
    UART_CR5=  000004     |     UART_CR5=  000005     |     UART_CR6=  000009 
    UART_CR6=  000004     |     UART_CR6=  000007     |     UART_CR6=  000001 
    UART_CR6=  000002     |     UART_CR6=  000000     |     UART_CR6=  000005 
    UART_DR =  000001     |     UART_GTR=  000009     |     UART_PSC=  00000A 
    UART_SR =  000000     |     UART_SR_=  000001     |     UART_SR_=  000004 
    UART_SR_=  000002     |     UART_SR_=  000003     |     UART_SR_=  000000 
    UART_SR_=  000005     |     UART_SR_=  000006     |     UART_SR_=  000007 
    UBASE   =  000006     |     UBC     =  004801     |     UCNTXT  =  000014 
    UCP     =  000018     |     UCTIB   =  00000C     |     UD1     =  000001 
    UD2     =  000002     |     UD3     =  000003     |     UD4     =  000004 
  6 UDOT       000F34 R   |   6 UDOTR      000F14 R   |   6 UEND       000045 R
    UHLD    =  000012     |     UINN    =  00000A     |     UINTER  =  000010 
    ULAST   =  00001A     |   6 ULES1      0007B4 R   |   6 ULESS      00079E R
  6 UMMOD      000834 R   |   6 UMSTA      00090D R   |   6 UNIQ1      0015EE R
  6 UNIQU      0015CF R   |   6 UNTIL      0014D1 R   |     UOFFSET =  00001C 
  6 UPDATCP    001B75 R   |   6 UPDATLAS   001B4C R   |   6 UPDATPTR   0020EC R
  6 UPDATRUN   001B64 R   |   6 UPDATVP    001B8C R   |   6 UPL1       000584 R
  6 UPLUS      00056D R   |     UPP     =  000006     |     URLAST  =  000020 
    USR_BTN_=  000004     |     USR_BTN_=  000010     |     USR_BTN_=  005015 
    UTFLASH =  00001E     |     UTIB    =  00000E     |     UTMP    =  000008 
  6 UTYP1      001823 R   |   6 UTYP2      001832 R   |   6 UTYPE      00181E R
    UVP     =  000016     |   6 UZERO      00002B R   |   6 VARIA      001799 R
    VAR_BASE=  000080     |     VAR_TOP =  0017BF     |     VER     =  000003 
  6 VPP        000631 R   |     VSIZE   =  000006     |     WANT_DEB=  000000 
    WANT_MAT=  000001     |     WANT_SEE=  000000     |     WDGOPT  =  004805 
    WDGOPT_I=  000002     |     WDGOPT_L=  000003     |     WDGOPT_W=  000000 
    WDGOPT_W=  000001     |   6 WHILE      001557 R   |   6 WITHI      000819 R
  6 WORDD      0010AA R   |   6 WORDS      001943 R   |   6 WORS1      001949 R
  6 WORS2      001965 R   |     WWDG_CR =  0050D1     |     WWDG_WR =  0050D2 
  6 XORR       000558 R   |     XTEMP   =  000022     |     YTEMP   =  000024 
  6 ZERO       000A44 R   |   6 ZL1        000525 R   |   6 ZLESS      00051C R
  6 app_spac   002180 R   |   6 block_er   001D0F R   |   6 clear_ra   000019 R
  6 clock_in   000062 R   |   6 copy_buf   001D66 R   |   6 copy_buf   001D85 R
  6 copy_pro   001D85 R   |     da      =  000002     |     db      =  000003 
    dc      =  000000     |     dd      =  000001     |   6 ee_ccomm   001F80 R
  6 ee_comma   001F5F R   |   6 ee_cstor   001C7C R   |   6 ee_store   001CC8 R
  6 erase_fl   001D2B R   |   6 farat      001B9D R   |   6 farcat     001BB9 R
  6 fmove_do   0020D5 R   |   6 fptr_sto   001AB8 R   |   6 inc_fptr   001C4A R
  6 lock       001C36 R   |   6 main       000016 R   |   6 next_row   002092 R
  6 no_move    0020DC R   |   6 pristine   001E00 R   |   6 proceed_   001D2E R
  6 reboot     000325 R   |   6 reset_ve   001E67 R   |   6 row_eras   001CF2 R
  6 row_eras   001D3F R   |   6 row_eras   001D66 R   |   6 set_opti   001DD4 R
  6 set_vect   001F08 R   |   6 uart1_in   000074 R   |   6 unlock     001C0E R
  6 unlock_e   001BD0 R   |   6 unlock_f   001BEF R   |   6 write_by   001C61 R
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 116.
Hexadecimal [24-Bits]

Symbol Table

  6 write_ro   001DAA R

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (STMicroelectronics STM8), page 117.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size      0   flags    0
   1 DATA       size      0   flags    8
   2 DATA0      size      0   flags    8
   3 SSEG       size      0   flags    8
   4 SSEG1      size    100   flags    8
   5 HOME       size     80   flags    0
   6 CODE       size   2180   flags    0

